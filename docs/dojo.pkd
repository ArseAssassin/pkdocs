---
name: Dojo
slug: dojo
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2005–2017 JS Foundation
  Licensed under the AFL 2.1 and BSD 3-Clause licenses.
  http://dojotoolkit.org/api/1.10/
homepage: http://dojotoolkit.org

---
- name: AdapterRegistry
  id: dojo/adapterregistry
  summary: A registry to make contextual calling/searching easier
  description: "# dojo/AdapterRegistry\n\n## Summary\n\nA registry to make contextual calling/searching easier.\n\nObjects of this class keep list of arrays in the form \\[name, check, wrap, directReturn\\] that are used to determine what the contextual result of a set of checked arguments is. All check/wrap functions in this registry should be of the same arity.\n\n## Usage\n\nAdapterRegistry`(returnWrappers);`\n\n[TABLE]\n\nSee the [dojo/AdapterRegistry reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/AdapterRegistry.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\n// create a new registry\nrequire([\"dojo/AdapterRegistry\"],\nfunction(AdapterRegistry){\n    var reg = new AdapterRegistry();\n    reg.register(\"handleString\",\n        function(str){\n            return typeof val == \"string\"\n        },\n        function(str){\n            // do something with the string here\n        }\n    );\n    reg.register(\"handleArr\",\n        dojo.isArray,\n        function(arr){\n            // do something with the array here\n        }\n    );\n\n    // now we can pass reg.match() *either* an array or a string and\n    // the value we pass will get handled by the right function\n    reg.match(\"someValue\"); // will call the first function\n    reg.match([\"someValue\"]); // will call the second\n});\n```\n\n## Properties\n\n### pairs\n\nDefined by: [dojo/AdapterRegistry](adapterregistry)\n\n### returnWrappers\n\nDefined by: [dojo/AdapterRegistry](adapterregistry)\n\n## Methods\n\n### `match``()`\n\nDefined by [dojo/AdapterRegistry](adapterregistry)\n\nFind an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs.\n\n**Returns:** undefined\n\n### `register``(name,check,wrap,directReturn,override)`\n\nDefined by [dojo/AdapterRegistry](adapterregistry)\n\nregister a check function to determine if the wrap function or object gets selected\n\n[TABLE]\n\n### `unregister``(name)`\n\nDefined by [dojo/AdapterRegistry](adapterregistry)\n\nRemove a named adapter from the registry\n\n|           |        |                          |\n|-----------|--------|--------------------------|\n| Parameter | Type   | Description              |\n| name      | String | The name of the adapter. |\n\n**Returns:** Boolean \\| boolean\n\nReturns true if operation is successful. Returns false if operation fails.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/AdapterRegistry.html](http://dojotoolkit.org/api/1.10/dojo/AdapterRegistry.html)"
- name: AdapterRegistry#match()
  id: dojo/adapterregistry#1_10dojo_AdapterRegistry_match
  summary: Find an adapter for the given arguments
  belongs_to: AdapterRegistry
  description: |-
    ### `match` `()`

    Defined by [dojo/AdapterRegistry](adapterregistry)

    Find an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs.

    **Returns:** undefined
- name: AdapterRegistry#register()
  id: dojo/adapterregistry#1_10dojo_AdapterRegistry_register
  summary: null
  belongs_to: AdapterRegistry
  description: |-
    ### `register` `(name,check,wrap,directReturn,override)`

    Defined by [dojo/AdapterRegistry](adapterregistry)

    register a check function to determine if the wrap function or object gets selected

    [TABLE]
- name: AdapterRegistry#unregister()
  id: dojo/adapterregistry#1_10dojo_AdapterRegistry_unregister
  summary: Returns true if operation is successful
  belongs_to: AdapterRegistry
  description: "### `unregister` `(name)`\n\nDefined by [dojo/AdapterRegistry](adapterregistry)\n\nRemove a named adapter from the registry\n\n|           |        |                          |\n|-----------|--------|--------------------------|\n| Parameter | Type   | Description              |\n| name      | String | The name of the adapter. |\n\n**Returns:** Boolean \\| boolean\n\nReturns true if operation is successful. Returns false if operation fails.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/AdapterRegistry.html](http://dojotoolkit.org/api/1.10/dojo/AdapterRegistry.html)"
- name: aspect
  id: dojo/aspect
  summary: provides aspect oriented programming functionality, allowing for one to add before, around, or after advice on existing methods
  description: "# dojo/aspect\n\n## Summary\n\nprovides aspect oriented programming functionality, allowing for one to add before, around, or after advice on existing methods.\n\nSee the [dojo/aspect reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/aspect.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\ndefine([\"dojo/aspect\"], function(aspect){\n    var signal = aspect.after(targetObject, \"methodName\", function(someArgument){\n        this will be called when targetObject.methodName() is called, after the original function is called\n    });\n```\n\n### Example 2\n\nThe returned signal object can be used to cancel the advice.\n\n``` javascript\nsignal.remove(); // this will stop the advice from being executed anymore\naspect.before(targetObject, \"methodName\", function(someArgument){\n    // this will be called when targetObject.methodName() is called, before the original function is called\n });\n```\n\n## Methods\n\n### `after``(target,methodName,advice,receiveArguments)`\n\nDefined by [dojo/aspect](aspect)\n\nThe \"after\" export of the aspect module is a function that can be used to attach \"after\" advice to a method. This function will be executed after the original method is executed. By default the function will be called with a single argument, the return value of the original method, or the the return value of the last executed advice (if a previous one exists). The fourth (optional) argument can be set to true to so the function receives the original arguments (from when the original method was called) rather than the return value. If there are multiple \"after\" advisors, they are executed in the order they were registered.\n\n[TABLE]\n\n**Returns:** any\n\nA signal object that can be used to cancel the advice. If remove() is called on this signal object, it will stop the advice function from being executed.\n\n### `around``(target,methodName,advice)`\n\nDefined by [dojo/aspect](aspect)\n\nThe \"around\" export of the aspect module is a function that can be used to attach \"around\" advice to a method. The advisor function is immediately executed when the around() is called, is passed a single argument that is a function that can be called to continue execution of the original method (or the next around advisor). The advisor function should return a function, and this function will be called whenever the method is called. It will be called with the arguments used to call the method. Whatever this function returns will be returned as the result of the method call (unless after advise changes it).\n\n|            |          |                                                          |\n|------------|----------|----------------------------------------------------------|\n| Parameter  | Type     | Description                                              |\n| target     | Object   | This is the target object                                |\n| methodName | String   | This is the name of the method to attach to.             |\n| advice     | Function | This is function to be called around the original method |\n\n## Examples\n\n### Example 1\n\nIf there are multiple \"around\" advisors, the most recent one is executed first, which can then delegate to the next one and so on. For example:\n\n``` javascript\naround(obj, \"foo\", function(originalFoo){\n    return function(){\n        var start = new Date().getTime();\n        var results = originalFoo.apply(this, arguments); // call the original\n        var end = new Date().getTime();\n        console.log(\"foo execution took \" + (end - start) + \" ms\");\n        return results;\n    };\n});\n```\n\n### `before``(target,methodName,advice)`\n\nDefined by [dojo/aspect](aspect)\n\nThe \"before\" export of the aspect module is a function that can be used to attach \"before\" advice to a method. This function will be executed before the original method is executed. This function will be called with the arguments used to call the method. This function may optionally return an array as the new arguments to use to call the original method (or the previous, next-to-execute before advice, if one exists). If the before method doesn't return anything (returns undefined) the original arguments will be preserved. If there are multiple \"before\" advisors, they are executed in the reverse order they were registered.\n\n|            |          |                                                          |\n|------------|----------|----------------------------------------------------------|\n| Parameter  | Type     | Description                                              |\n| target     | Object   | This is the target object                                |\n| methodName | String   | This is the name of the method to attach to.             |\n| advice     | Function | This is function to be called before the original method |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/aspect.html](http://dojotoolkit.org/api/1.10/dojo/aspect.html)"
- name: aspect#after()
  id: dojo/aspect#1_10dojo_aspect_after
  summary: The "after" export of the aspect module is a function that can be used to attach "after" advice to a method
  belongs_to: aspect
  description: |-
    ### `after` `(target,methodName,advice,receiveArguments)`

    Defined by [dojo/aspect](aspect)

    The "after" export of the aspect module is a function that can be used to attach "after" advice to a method. This function will be executed after the original method is executed. By default the function will be called with a single argument, the return value of the original method, or the the return value of the last executed advice (if a previous one exists). The fourth (optional) argument can be set to true to so the function receives the original arguments (from when the original method was called) rather than the return value. If there are multiple "after" advisors, they are executed in the order they were registered.

    [TABLE]

    **Returns:** any

    A signal object that can be used to cancel the advice. If remove() is called on this signal object, it will stop the advice function from being executed.
- name: aspect#around()
  id: dojo/aspect#1_10dojo_aspect_around
  summary: The "around" export of the aspect module is a function that can be used to attach "around" advice to a method
  belongs_to: aspect
  description: "### `around` `(target,methodName,advice)`\n\nDefined by [dojo/aspect](aspect)\n\nThe \"around\" export of the aspect module is a function that can be used to attach \"around\" advice to a method. The advisor function is immediately executed when the around() is called, is passed a single argument that is a function that can be called to continue execution of the original method (or the next around advisor). The advisor function should return a function, and this function will be called whenever the method is called. It will be called with the arguments used to call the method. Whatever this function returns will be returned as the result of the method call (unless after advise changes it).\n\n|            |          |                                                          |\n|------------|----------|----------------------------------------------------------|\n| Parameter  | Type     | Description                                              |\n| target     | Object   | This is the target object                                |\n| methodName | String   | This is the name of the method to attach to.             |\n| advice     | Function | This is function to be called around the original method |\n\n## Examples\n\n### Example 1\n\nIf there are multiple \"around\" advisors, the most recent one is executed first, which can then delegate to the next one and so on. For example:\n\n``` javascript\n      around(obj, \"foo\", function(originalFoo){\n    return function(){\n        var start = new Date().getTime();\n        var results = originalFoo.apply(this, arguments); // call the original\n        var end = new Date().getTime();\n        console.log(\"foo execution took \" + (end - start) + \" ms\");\n        return results;\n    };\n});\n    \n```"
- name: aspect#before()
  id: dojo/aspect#1_10dojo_aspect_before
  summary: The "before" export of the aspect module is a function that can be used to attach "before" advice to a method
  belongs_to: aspect
  description: "### `before` `(target,methodName,advice)`\n\nDefined by [dojo/aspect](aspect)\n\nThe \"before\" export of the aspect module is a function that can be used to attach \"before\" advice to a method. This function will be executed before the original method is executed. This function will be called with the arguments used to call the method. This function may optionally return an array as the new arguments to use to call the original method (or the previous, next-to-execute before advice, if one exists). If the before method doesn't return anything (returns undefined) the original arguments will be preserved. If there are multiple \"before\" advisors, they are executed in the reverse order they were registered.\n\n|            |          |                                                          |\n|------------|----------|----------------------------------------------------------|\n| Parameter  | Type     | Description                                              |\n| target     | Object   | This is the target object                                |\n| methodName | String   | This is the name of the method to attach to.             |\n| advice     | Function | This is function to be called before the original method |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/aspect.html](http://dojotoolkit.org/api/1.10/dojo/aspect.html)"
- name: back
  id: dojo/back
  summary: See the dojo/back reference documentation for more information
  description: "# dojo/back\n\n## Summary\n\nBrowser history management resources\n\nSee the [dojo/back reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/back.html) for more information.\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/back.html](http://dojotoolkit.org/api/1.10/dojo/back.html)"
- name: back#addToHistory()
  id: dojo/back#1_10dojo_back_addToHistory
  summary: adds a state object (args) to the history list
  belongs_to: back
  description: "### `addToHistory` `(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      back.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n    \n```"
- name: back#getHash()
  id: dojo/back#1_10dojo_back_getHash
  summary: null
  belongs_to: back
  description: |-
    ### `getHash` `()`

    Defined by [dojo/back](back)

    **Returns:** undefined
- name: back#goBack()
  id: dojo/back#1_10dojo_back_goBack
  summary: private method
  belongs_to: back
  description: |-
    ### `goBack` `()`

    Defined by [dojo/back](back)

    private method. Do not call this directly.
- name: back#goForward()
  id: dojo/back#1_10dojo_back_goForward
  summary: private method
  belongs_to: back
  description: |-
    ### `goForward` `()`

    Defined by [dojo/back](back)

    private method. Do not call this directly.
- name: back#init()
  id: dojo/back#1_10dojo_back_init
  summary: Initializes the undo stack
  belongs_to: back
  description: "### `init` `()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/back.html](http://dojotoolkit.org/api/1.10/dojo/back.html)"
- name: back#setHash()
  id: dojo/back#1_10dojo_back_setHash
  summary: See the dojo/back reference documentation for more information
  belongs_to: back
  description: "# dojo/back\n\n## Summary\n\nBrowser history management resources\n\nSee the [dojo/back reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/back.html) for more information.\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/back.html](http://dojotoolkit.org/api/1.10/dojo/back.html)"
- name: back#setInitialState()
  id: dojo/back#1_10dojo_back_setInitialState
  summary: See the dojo/back reference documentation for more information
  belongs_to: back
  description: "# dojo/back\n\n## Summary\n\nBrowser history management resources\n\nSee the [dojo/back reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/back.html) for more information.\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/back.html](http://dojotoolkit.org/api/1.10/dojo/back.html)"
- name: behavior
  id: dojo/behavior
  summary: Deprecated
  description: "# dojo/behavior\n\n## Summary\n\nDeprecated. [dojo/behavior](behavior)'s functionality can be achieved using event delegation using [dojo/on](on) and on.selector().\n\nA very simple, lightweight mechanism for applying code to existing documents, based around [dojo/query](query) (CSS3 selectors) for node selection, and a simple two-command API: `add()` and `apply()`;\n\nBehaviors apply to a given page, and are registered following the syntax options described by `add()` to match nodes to actions, or \"behaviors\".\n\nAdded behaviors are applied to the current DOM when .apply() is called, matching only new nodes found since .apply() was last called.\n\nSee the [dojo/behavior reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/behavior.html) for more information.\n\n## Properties\n\n## Methods\n\n### `add``(behaviorObj)`\n\nDefined by [dojo/behavior](behavior)\n\nAdd the specified behavior to the list of behaviors, ignoring existing matches.\n\nAdd the specified behavior to the list of behaviors which will be applied the next time apply() is called. Calls to add() for an already existing behavior do not replace the previous rules, but are instead additive. New nodes which match the rule will have all add()-ed behaviors applied to them when matched.\n\nThe \"found\" method is a generalized handler that's called as soon as the node matches the selector. Rules for values that follow also apply to the \"found\" key.\n\nThe \"on\\*\" handlers are attached with `dojo.connect()`, using the matching node\n\nIf the value corresponding to the ID key is a function and not a list, it's treated as though it was the value of \"found\".\n\n[dojo/behavior.add()](behavior#add) can be called any number of times before the DOM is ready. [dojo/behavior.apply()](behavior#apply) is called automatically by `dojo.addOnLoad`, though can be called to re-apply previously added behaviors anytime the DOM changes.\n\nThere are a variety of formats permitted in the behaviorObject\n\n|             |        |                                                                                                                                      |\n|-------------|--------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter   | Type   | Description                                                                                                                          |\n| behaviorObj | Object | The behavior object that will be added to behaviors list. The behaviors in the list will be applied the next time apply() is called. |\n\n## Examples\n\n### Example 1\n\nSimple list of properties. \"found\" is special. \"Found\" is assumed if no property object for a given selector, and property is a function.\n\n``` javascript\nbehavior.add({\n    \"#id\": {\n        \"found\": function(element){\n            // node match found\n        },\n        \"onclick\": function(evt){\n            // register onclick handler for found node\n        }\n    },\n    \"#otherid\": function(element){\n        // assumes \"found\" with this syntax\n    }\n});\n```\n\n### Example 2\n\nIf property is a string, a dojo.publish will be issued on the channel:\n\n``` javascript\nbehavior.add({\n    // topic.publish() whenever class=\"noclick\" found on anchors\n    \"a.noclick\": \"/got/newAnchor\",\n    \"div.wrapper\": {\n        \"onclick\": \"/node/wasClicked\"\n    }\n});\ntopic.subscribe(\"/got/newAnchor\", function(node){\n    // handle node finding when dojo/behavior.apply() is called,\n    // provided a newly matched node is found.\n});\n```\n\n### Example 3\n\nScoping can be accomplished by passing an object as a property to a connection handle (on\\*):\n\n``` javascript\nbehavior.add({\n        \"#id\": {\n            // like calling dojo.hitch(foo,\"bar\"). execute foo.bar() in scope of foo\n            \"onmouseenter\": { targetObj: foo, targetFunc: \"bar\" },\n            \"onmouseleave\": { targetObj: foo, targetFunc: \"baz\" }\n        }\n});\n```\n\n### Example 4\n\nBehaviors match on CSS3 Selectors, powered by dojo/query. Example selectors:\n\n``` javascript\nbehavior.add({\n    // match all direct descendants\n    \"#id4 > *\": function(element){\n        // ...\n    },\n\n    // match the first child node that's an element\n    \"#id4 > :first-child\": { ... },\n\n    // match the last child node that's an element\n    \"#id4 > :last-child\":  { ... },\n\n    // all elements of type tagname\n    \"tagname\": {\n        // ...\n    },\n\n    \"tagname1 tagname2 tagname3\": {\n        // ...\n    },\n\n    \".classname\": {\n        // ...\n    },\n\n    \"tagname.classname\": {\n        // ...\n    }\n});\n```\n\n### `apply``()`\n\nDefined by [dojo/behavior](behavior)\n\nApplies all currently registered behaviors to the document.\n\nApplies all currently registered behaviors to the document, taking care to ensure that only incremental updates are made since the last time add() or apply() were called.\n\nIf new matching nodes have been added, all rules in a behavior will be applied to that node. For previously matched nodes, only behaviors which have been added since the last call to apply() will be added to the nodes.\n\napply() is called once automatically by `dojo.addOnLoad`, so registering behaviors with [dojo/behavior.add()](behavior#add) before the DOM is ready is acceptable, provided the dojo.behavior module is ready.\n\nCalling appy() manually after manipulating the DOM is required to rescan the DOM and apply newly .add()ed behaviors, or to match nodes that match existing behaviors when those nodes are added to the DOM.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/behavior.html](http://dojotoolkit.org/api/1.10/dojo/behavior.html)"
- name: behavior#add()
  id: dojo/behavior#1_10dojo_behavior_add
  summary: Add the specified behavior to the list of behaviors, ignoring existing matches
  belongs_to: behavior
  description: "### `add` `(behaviorObj)`\n\nDefined by [dojo/behavior](behavior)\n\nAdd the specified behavior to the list of behaviors, ignoring existing matches.\n\nAdd the specified behavior to the list of behaviors which will be applied the next time apply() is called. Calls to add() for an already existing behavior do not replace the previous rules, but are instead additive. New nodes which match the rule will have all add()-ed behaviors applied to them when matched.\n\nThe \"found\" method is a generalized handler that's called as soon as the node matches the selector. Rules for values that follow also apply to the \"found\" key.\n\nThe \"on\\*\" handlers are attached with `dojo.connect()`, using the matching node\n\nIf the value corresponding to the ID key is a function and not a list, it's treated as though it was the value of \"found\".\n\n[dojo/behavior.add()](behavior#add) can be called any number of times before the DOM is ready. [dojo/behavior.apply()](behavior#apply) is called automatically by `dojo.addOnLoad`, though can be called to re-apply previously added behaviors anytime the DOM changes.\n\nThere are a variety of formats permitted in the behaviorObject\n\n|             |        |                                                                                                                                      |\n|-------------|--------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter   | Type   | Description                                                                                                                          |\n| behaviorObj | Object | The behavior object that will be added to behaviors list. The behaviors in the list will be applied the next time apply() is called. |\n\n## Examples\n\n### Example 1\n\nSimple list of properties. \"found\" is special. \"Found\" is assumed if no property object for a given selector, and property is a function.\n\n``` javascript\n      behavior.add({\n    \"#id\": {\n        \"found\": function(element){\n            // node match found\n        },\n        \"onclick\": function(evt){\n            // register onclick handler for found node\n        }\n    },\n    \"#otherid\": function(element){\n        // assumes \"found\" with this syntax\n    }\n});\n    \n```\n\n### Example 2\n\nIf property is a string, a dojo.publish will be issued on the channel:\n\n``` javascript\n      behavior.add({\n    // topic.publish() whenever class=\"noclick\" found on anchors\n    \"a.noclick\": \"/got/newAnchor\",\n    \"div.wrapper\": {\n        \"onclick\": \"/node/wasClicked\"\n    }\n});\ntopic.subscribe(\"/got/newAnchor\", function(node){\n    // handle node finding when dojo/behavior.apply() is called,\n    // provided a newly matched node is found.\n});\n    \n```\n\n### Example 3\n\nScoping can be accomplished by passing an object as a property to a connection handle (on\\*):\n\n``` javascript\n      behavior.add({\n        \"#id\": {\n            // like calling dojo.hitch(foo,\"bar\"). execute foo.bar() in scope of foo\n            \"onmouseenter\": { targetObj: foo, targetFunc: \"bar\" },\n            \"onmouseleave\": { targetObj: foo, targetFunc: \"baz\" }\n        }\n});\n    \n```\n\n### Example 4\n\nBehaviors match on CSS3 Selectors, powered by dojo/query. Example selectors:\n\n``` javascript\n      behavior.add({\n    // match all direct descendants\n    \"#id4 > *\": function(element){\n        // ...\n    },\n\n    // match the first child node that's an element\n    \"#id4 > :first-child\": { ... },\n\n    // match the last child node that's an element\n    \"#id4 > :last-child\":  { ... },\n\n    // all elements of type tagname\n    \"tagname\": {\n        // ...\n    },\n\n    \"tagname1 tagname2 tagname3\": {\n        // ...\n    },\n\n    \".classname\": {\n        // ...\n    },\n\n    \"tagname.classname\": {\n        // ...\n    }\n});\n    \n```"
- name: behavior#apply()
  id: dojo/behavior#1_10dojo_behavior_apply
  summary: Applies all currently registered behaviors to the document
  belongs_to: behavior
  description: "### `apply` `()`\n\nDefined by [dojo/behavior](behavior)\n\nApplies all currently registered behaviors to the document.\n\nApplies all currently registered behaviors to the document, taking care to ensure that only incremental updates are made since the last time add() or apply() were called.\n\nIf new matching nodes have been added, all rules in a behavior will be applied to that node. For previously matched nodes, only behaviors which have been added since the last call to apply() will be added to the nodes.\n\napply() is called once automatically by `dojo.addOnLoad`, so registering behaviors with [dojo/behavior.add()](behavior#add) before the DOM is ready is acceptable, provided the dojo.behavior module is ready.\n\nCalling appy() manually after manipulating the DOM is required to rescan the DOM and apply newly .add()ed behaviors, or to match nodes that match existing behaviors when those nodes are added to the DOM.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/behavior.html](http://dojotoolkit.org/api/1.10/dojo/behavior.html)"
- name: cache
  id: dojo/cache
  summary: A getter and setter for storing the string content associated with the module and url arguments
  description: "# dojo/cache\n\n## Summary\n\nA getter and setter for storing the string content associated with the module and url arguments.\n\nIf module is a string that contains slashes, then it is interpretted as a fully resolved path (typically a result returned by require.toUrl), and url should not be provided. This is the preferred signature. If module is a string that does not contain slashes, then url must also be provided and module and url are used to call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated. If value is specified, the cache value for the moduleUrl will be set to that value. Otherwise, dojo.cache will fetch the moduleUrl and store it in its internal cache and return that cached value for the URL. To clear a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the the URL contents, only modules on the same domain of the page can use this capability. The build system can inline the cache values though, to allow for xdomain hosting.\n\n## Usage\n\ncache`(module,url,value);`\n\n[TABLE]\n\n**Returns:** undefined \\| null\n\nSee the [dojo/cache reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/cache.html) for more information.\n\n## Examples\n\n### Example 1\n\nTo ask dojo.cache to fetch content and store it in the cache (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n//If template.html contains \"<h1>Hello</h1>\" that will be\n//the value for the text variable.\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\");\n```\n\n### Example 2\n\nTo ask dojo.cache to fetch content and store it in the cache, and sanitize the input (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n//If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\", {sanitize: true});\n```\n\n### Example 3\n\nSame example as previous, but demonstrates how an object can be passed in as the first argument, then the value argument can then be the second argument.\n\n``` javascript\n//If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](new dojo._Url(\"my/module/template.html\"), {sanitize: true});\n```\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/cache.html](http://dojotoolkit.org/api/1.10/dojo/cache.html)"
- name: cldr/monetary
  id: dojo/cldr/monetary
  summary: See the dojo/cldr/monetary reference documentation for more information
  description: "# dojo/cldr/monetary\n\n## Summary\n\nTODOC\n\nSee the [dojo/cldr/monetary reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/cldr/monetary.html) for more information.\n\n## Methods\n\n### `getData``(code)`\n\nDefined by [dojo/cldr/monetary](monetary)\n\nA mapping of currency code to currency-specific formatting information. Returns a unique object with properties: places, round.\n\n|           |        |                                                                    |\n|-----------|--------|--------------------------------------------------------------------|\n| Parameter | Type   | Description                                                        |\n| code      | String | an [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code |\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/cldr/monetary.html](http://dojotoolkit.org/api/1.10/dojo/cldr/monetary.html)"
- name: cldr/monetary#getData()
  id: dojo/cldr/monetary#1_10dojo_cldr_monetary_getData
  summary: A mapping of currency code to currency-specific formatting information
  belongs_to: cldr/monetary
  description: "### `getData` `(code)`\n\nDefined by [dojo/cldr/monetary](monetary)\n\nA mapping of currency code to currency-specific formatting information. Returns a unique object with properties: places, round.\n\n|           |        |                                                                    |\n|-----------|--------|--------------------------------------------------------------------|\n| Parameter | Type   | Description                                                        |\n| code      | String | an [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code |\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/cldr/monetary.html](http://dojotoolkit.org/api/1.10/dojo/cldr/monetary.html)"
- name: cldr/supplemental
  id: dojo/cldr/supplemental
  summary: See the dojo/cldr/supplemental reference documentation for more information
  description: "# dojo/cldr/supplemental\n\n## Summary\n\nTODOC\n\nSee the [dojo/cldr/supplemental reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/cldr/supplemental.html) for more information.\n\n## Methods\n\n### `getFirstDayOfWeek``(locale)`\n\nDefined by [dojo/cldr/supplemental](supplemental)\n\nReturns a zero-based index for first day of the week\n\nReturns a zero-based index for first day of the week, as used by the local (Gregorian) calendar. e.g. Sunday (returns 0), or Monday (returns 1)\n\n[TABLE]\n\n**Returns:** number\n\n### `getWeekend``(locale)`\n\nDefined by [dojo/cldr/supplemental](supplemental)\n\nReturns a hash containing the start and end days of the weekend\n\nReturns a hash containing the start and end days of the weekend according to local custom using locale, or by default in the user's locale. e.g. {start:6, end:0}\n\n[TABLE]\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/cldr/supplemental.html](http://dojotoolkit.org/api/1.10/dojo/cldr/supplemental.html)"
- name: cldr/supplemental#getFirstDayOfWeek()
  id: dojo/cldr/supplemental#1_10dojo_cldr_supplemental_getFirstDayOfWeek
  summary: Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar
  belongs_to: cldr/supplemental
  description: |-
    ### `getFirstDayOfWeek` `(locale)`

    Defined by [dojo/cldr/supplemental](supplemental)

    Returns a zero-based index for first day of the week

    Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar. e.g. Sunday (returns 0), or Monday (returns 1)

    [TABLE]

    **Returns:** number
- name: cldr/supplemental#getWeekend()
  id: dojo/cldr/supplemental#1_10dojo_cldr_supplemental_getWeekend
  summary: Returns a hash containing the start and end days of the weekend according to local custom using locale, or by default in the user's locale
  belongs_to: cldr/supplemental
  description: "### `getWeekend` `(locale)`\n\nDefined by [dojo/cldr/supplemental](supplemental)\n\nReturns a hash containing the start and end days of the weekend\n\nReturns a hash containing the start and end days of the weekend according to local custom using locale, or by default in the user's locale. e.g. {start:6, end:0}\n\n[TABLE]\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/cldr/supplemental.html](http://dojotoolkit.org/api/1.10/dojo/cldr/supplemental.html)"
- name: colors
  id: dojo/colors
  summary: See the dojo/colors reference documentation for more information
  description: "# dojo/colors\n\n## Summary\n\nColor utilities, extending Base dojo.Color\n\nSee the [dojo/colors reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/colors.html) for more information.\n\n## Properties\n\n### ThreeD\n\nDefined by: [dojox/charting/themes/ThreeD](http://dojotoolkit.org/api/1.10/dojox/charting/themes/ThreeD)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/colors.html](http://dojotoolkit.org/api/1.10/dojo/colors.html)"
- name: colors#ThreeD
  id: dojo/colors#1_10dojo_colors_ThreeD
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: colors
  description: "### ThreeD\n\nDefined by: [dojox/charting/themes/ThreeD](http://dojotoolkit.org/api/1.10/dojox/charting/themes/ThreeD)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/colors.html](http://dojotoolkit.org/api/1.10/dojo/colors.html)"
- name: cookie
  id: dojo/cookie
  summary: Get or set a cookie
  description: "# dojo/cookie\n\n## Summary\n\nGet or set a cookie.\n\nIf one argument is passed, returns the value of the cookie For two or more arguments, acts as a setter.\n\n## Usage\n\ncookie`(name,value,props);`\n\n[TABLE]\n\n**Returns:** undefined\n\nSee the [dojo/cookie reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/cookie.html) for more information.\n\n## Examples\n\n### Example 1\n\nset a cookie with the JSON-serialized contents of an object which will expire 5 days from now:\n\n``` javascript\nrequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    cookie(\"configObj\", json.stringify(config, {expires: 5 }));\n});\n```\n\n### Example 2\n\nde-serialize a cookie back into a JavaScript object:\n\n``` javascript\nrequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    config = json.parse(cookie(\"configObj\"));\n});\n```\n\n### Example 3\n\ndelete a cookie:\n\n``` javascript\nrequire([\"dojo/cookie\"], function(cookie){\n    cookie(\"configObj\", null, {expires: -1});\n});\n```\n\n## Methods\n\n### `isSupported``()`\n\nDefined by [dojo/cookie](cookie)\n\nUse to determine if the current browser supports cookies or not.\n\nReturns true if user allows cookies. Returns false if user doesn't allow cookies.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/cookie.html](http://dojotoolkit.org/api/1.10/dojo/cookie.html)"
- name: cookie#isSupported()
  id: dojo/cookie#1_10dojo_cookie_isSupported
  summary: Use to determine if the current browser supports cookies or not
  belongs_to: cookie
  description: "### `isSupported` `()`\n\nDefined by [dojo/cookie](cookie)\n\nUse to determine if the current browser supports cookies or not.\n\nReturns true if user allows cookies. Returns false if user doesn't allow cookies.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/cookie.html](http://dojotoolkit.org/api/1.10/dojo/cookie.html)"
- name: currency
  id: dojo/currency
  summary: extends dojo.number to provide culturally-appropriate formatting of values in various world currencies, including use of a currency symbol
  description: "# dojo/currency\n\n## Summary\n\nlocalized formatting and parsing routines for currencies\n\nextends dojo.number to provide culturally-appropriate formatting of values in various world currencies, including use of a currency symbol. The currencies are specified by a three-letter international symbol in all uppercase, and support for the currencies is provided by the data in `dojo.cldr`. The scripts generating dojo.cldr specify which currency support is included. A fixed number of decimal places is determined based on the currency type and is not determined by the 'pattern' argument. The fractional portion is optional, by default, and variable length decimals are not supported.\n\nSee the [dojo/currency reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/currency.html) for more information.\n\n## Methods\n\n### `format``(value,options)`\n\nDefined by [dojo/currency](currency)\n\nFormat a Number as a currency, using locale-specific settings\n\nCreate a string from a Number using a known, localized pattern. [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements) appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr) as well as the appropriate symbols and delimiters and number of decimal places.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `parse``(expression,options)`\n\nDefined by [dojo/currency](currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `regexp``(options)`\n\nDefined by [dojo/currency](currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/currency.html](http://dojotoolkit.org/api/1.10/dojo/currency.html)"
- name: currency#format()
  id: dojo/currency#1_10dojo_currency_format
  summary: Create a string from a Number using a known, localized pattern
  belongs_to: currency
  description: |-
    ### `format` `(value,options)`

    Defined by [dojo/currency](currency)

    Format a Number as a currency, using locale-specific settings

    Create a string from a Number using a known, localized pattern. [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements) appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr) as well as the appropriate symbols and delimiters and number of decimal places.

    [TABLE]

    **Returns:** undefined
- name: currency#parse()
  id: dojo/currency#1_10dojo_currency_parse
  summary: null
  belongs_to: currency
  description: |-
    ### `parse` `(expression,options)`

    Defined by [dojo/currency](currency)

    [TABLE]

    **Returns:** undefined
- name: currency#regexp()
  id: dojo/currency#1_10dojo_currency_regexp
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: currency
  description: "### `regexp` `(options)`\n\nDefined by [dojo/currency](currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/currency.html](http://dojotoolkit.org/api/1.10/dojo/currency.html)"
- name: currency.__FormatOptions
  id: dojo/currency.__formatoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/currency.\\_\\_FormatOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new currency.__FormatOptions()`\n\n## Properties\n\n### currency\n\nDefined by: [dojo/currency](currency)\n\nan [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\". For use with dojo.currency only.\n\n### fractional\n\nDefined by: [dojo/number](number)\n\nIf false, show no decimal places, overriding places and pattern settings.\n\n### locale\n\nDefined by: [dojo/number](number)\n\noverride the locale used to determine formatting rules\n\n### pattern\n\nDefined by: [dojo/number](number)\n\noverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string. Default value is based on locale. Overriding this property will defeat localization. Literal characters in patterns are not supported.\n\n### places\n\nDefined by: [dojo/currency](currency)\n\nnumber of decimal places to show. Default is defined based on which currency is used.\n\n### round\n\nDefined by: [dojo/number](number)\n\n5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means do not round.\n\n### symbol\n\nDefined by: [dojo/currency](currency)\n\nlocalized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr` A [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.\n\n### type\n\nDefined by: [dojo/currency](currency)\n\nShould not be set. Value is assumed to be \"currency\".\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/currency.\\_\\_FormatOptions.html](http://dojotoolkit.org/api/1.10/dojo/currency.__FormatOptions.html)"
- name: currency.__ParseOptions
  id: dojo/currency.__parseoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/currency.\\_\\_ParseOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new currency.__ParseOptions()`\n\n## Properties\n\n### currency\n\nDefined by: [dojo/currency](currency)\n\nan [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\". For use with dojo.currency only.\n\n### fractional\n\nDefined by: [dojo/currency](currency)\n\nWhether to include the fractional portion, where the number of decimal places are implied by the currency or explicit 'places' parameter. The value \\[true,false\\] makes the fractional portion optional. By default for currencies, it the fractional portion is optional.\n\n### locale\n\nDefined by: [dojo/number](number)\n\noverride the locale used to determine formatting rules\n\n### pattern\n\nDefined by: [dojo/number](number)\n\noverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string. Default value is based on locale. Overriding this property will defeat localization. Literal characters in patterns are not supported.\n\n### places\n\nDefined by: [dojo/currency](currency)\n\nfixed number of decimal places to accept. The default is determined based on which currency is used.\n\n### strict\n\nDefined by: [dojo/number](number)\n\nstrict parsing, false by default. Strict parsing requires input as produced by the format() method. Non-strict is more permissive, e.g. flexible on white space, omitting thousands separators\n\n### symbol\n\nDefined by: [dojo/currency](currency)\n\nlocalized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr` A [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.\n\n### type\n\nDefined by: [dojo/currency](currency)\n\nShould not be set. Value is assumed to be currency.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/currency.\\_\\_ParseOptions.html](http://dojotoolkit.org/api/1.10/dojo/currency.__ParseOptions.html)"
- name: data/api/Identity
  id: dojo/data/api/identity
  summary: This is an abstract API that data provider implementations conform to
  description: "# dojo/data/api/Identity\n\nExtends[dojo/data/api/Read](read)\n\n## Summary\n\nThis is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.\n\nSee the [dojo/data/api/Identity reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/api/Identity.html) for more information.\n\n## Methods\n\n### `close``(request)`\n\nDefined by [dojo/data/api/Read](read)\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request.\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request. In general, this API expects to receive as a parameter a request object returned from a fetch. It will then close out anything associated with that request, such as clearing any internal datastore caches and closing any 'open' connections. For some store implementations, this call may be a no-op.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar request = store.fetch({onComplete: doSomething});\n...\nstore.close(request);\n```\n\n### `containsValue``(item,attribute,value)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *value* is one of the values that getValues() would return.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n| value     | anything                   | The value to match as a value for the attribute. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.containsValue(kermit, \"color\", \"green\");\n```\n\n### `fetch``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.\n\nA Request object will always be returned and is returned immediately. The basic request is nothing more than the keyword args passed to fetch and an additional function attached, abort(). The returned request object may then be used to cancel a fetch. All data items returns are passed through the callbacks defined in the fetch parameters and are not present on the 'request' object.\n\nThis does not mean that custom stores can not add methods and properties to the request object returned, only that the API does not require it. For more info about the Request API, see [dojo/data/api/Request](request)\n\n[TABLE]\n\n**Returns:** any\n\nThe fetch() method will return a javascript object conforming to the API defined in dojo/data/api/Request. In general, it will be the keywordArgs object returned with the required functions in Request.js attached. Its general purpose is to provide a convenient way for a caller to abort an ongoing fetch.\n\nThe Request object may also have additional properties when it is returned such as request.store property, which is a pointer to the datastore object that fetch() is a method of.\n\n## Examples\n\n### Example 1\n\nFetch all books identified by the query and call 'showBooks' when complete\n\n``` javascript\nvar request = store.fetch({query:\"all books\", onComplete: showBooks});\n```\n\n### Example 2\n\nFetch all items in the story and call 'showEverything' when complete.\n\n``` javascript\nvar request = store.fetch(onComplete: showEverything);\n```\n\n### Example 3\n\nFetch only 10 books that match the query 'all books', starting at the fifth book found during the search. This demonstrates how paging can be done for specific queries.\n\n``` javascript\nvar request = store.fetch({query:\"all books\", start: 4, count: 10, onComplete: showBooks});\n```\n\n### Example 4\n\nFetch all items that match the query, calling 'callback' each time an item is located.\n\n``` javascript\nvar request = store.fetch({query:\"foo/bar\", onItem:callback});\n```\n\n### Example 5\n\nFetch the first 100 books by author King, call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 6\n\nLocate the books written by Author King, sort it on title and publisher, then return the first 100 items from the sorted items.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, sort: [{ attribute: \"title\", descending: true}, {attribute: \"publisher\"}], ,start: 0, count:100, onComplete: 'showKing'});\n```\n\n### Example 7\n\nFetch the first 100 books by authors starting with the name King, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King*\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 8\n\nFetch the first 100 books by authors ending with 'ing', but only have one character before it (King, Bing, Ling, Sing, etc.), then call showBooks when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"?ing\"}, start: 0, count:100, onComplete: showBooks});\n```\n\n### Example 9\n\nFetch the first 100 books by author King, where the name may appear as King, king, KING, kInG, and so on, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, queryOptions:(ignoreCase: true}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 10\n\nPaging\n\n``` javascript\nvar store = new LargeRdbmsStore({url:\"jdbc:odbc:foobar\"});\nvar fetchArgs = {\n    query: {type:\"employees\", name:\"Hillary *\"}, // string matching\n    sort: [{attribute:\"department\", descending:true}],\n    start: 0,\n    count: 20,\n    scope: displayer,\n    onBegin: showThrobber,\n    onItem: displayItem,\n    onComplete: stopThrobber,\n    onError: handleFetchError,\n};\nstore.fetch(fetchArgs);\n...\n```\n\nand then when the user presses the \"Next Page\" button...\n\n``` javascript\nfetchArgs.start += 20;\nstore.fetch(fetchArgs);  // get the next 20 items\n```\n\n### `fetchItemByIdentity``(keywordArgs)`\n\nDefined by [dojo/data/api/Identity](identity)\n\nGiven the identity of an item, this method returns the item that has that identity through the onItem callback. Conforming implementations should return null if there is no item with the given identity. Implementations of fetchItemByIdentity() may sometimes return an item from a local cache and may sometimes fetch an item from a remote server,\n\n[TABLE]\n\n### `getAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: \\[\\].\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar array = store.getAttributes(kermit);\n```\n\n### `getFeatures``()`\n\nDefined by [dojo/data/api/Identity](identity)\n\nSee dojo/data/api/Read.getFeatures()\n\n**Returns:** object\n\n### `getIdentity``(item)`\n\nDefined by [dojo/data/api/Identity](identity)\n\nReturns a unique identifier for an item. The return value will be either a string or something that has a toString() method (such as, for example, a dojox/uuid object).\n\n|           |                            |                                                              |\n|-----------|----------------------------|--------------------------------------------------------------|\n| Parameter | Type                       | Description                                                  |\n| item      | [dojo/data/api/Item](item) | The item from the store from which to obtain its identifier. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar itemId = store.getIdentity(kermit);\nassert(kermit === store.findByIdentity(store.getIdentity(kermit)));\n```\n\n### `getIdentityAttributes``(item)`\n\nDefined by [dojo/data/api/Identity](identity)\n\nReturns an array of attribute names that are used to generate the identity. For most stores, this is a single attribute, but for some complex stores such as RDB backed stores that use compound (multi-attribute) identifiers it can be more than one. If the identity is not composed of attributes on the item, it will return null. This function is intended to identify the attributes that comprise the identity so that so that during a render of all attributes, the UI can hide the the identity information if it chooses.\n\n|           |                            |                                                                                                                  |\n|-----------|----------------------------|------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                                                                      |\n| item      | [dojo/data/api/Item](item) | The item from the store from which to obtain the array of public attributes that compose the identifier, if any. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar itemId = store.getIdentity(kermit);\nvar identifiers = store.getIdentityAttributes(itemId);\nassert(typeof identifiers === \"array\" || identifiers === null);\n```\n\n### `getLabel``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: \"firstname lastlame\" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to return the label for. |\n\n**Returns:** any\n\nA user-readable string representing the item or undefined if no user-readable label can be generated.\n\n### `getLabelAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any.\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.\n\n|           |                            |                                                      |\n|-----------|----------------------------|------------------------------------------------------|\n| Parameter | Type                       | Description                                          |\n| item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |\n\n**Returns:** any\n\nAn array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.\n\n### `getValue``(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar darthVader = store.getValue(lukeSkywalker, \"father\");\n```\n\n### `getValues``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n```\n\n### `hasAttribute``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.hasAttribute(kermit, \"color\");\n```\n\n### `isItem``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n```\n\n### `isItemLoaded``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n```\n\n### `loadItem``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Identity.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Identity.html)"
- name: data/api/Identity#fetchItemByIdentity()
  id: dojo/data/api/identity#1_10dojo_data_api_Identity_fetchItemByIdentity
  summary: Given the identity of an item, this method returns the item that has that identity through the onItem callback
  belongs_to: data/api/Identity
  description: "### `fetchItemByIdentity` `(keywordArgs)`\n\nDefined by [dojo/data/api/Identity](identity)\n\nGiven the identity of an item, this method returns the item that has that identity through the onItem callback. Conforming implementations should return null if there is no item with the given identity. Implementations of fetchItemByIdentity() may sometimes return an item from a local cache and may sometimes fetch an item from a remote server,\n\n[TABLE]\n\n### `getAttributes` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: \\[\\].\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var array = store.getAttributes(kermit);\n    \n```"
- name: data/api/Identity#getFeatures()
  id: dojo/data/api/identity#1_10dojo_data_api_Identity_getFeatures
  summary: null
  belongs_to: data/api/Identity
  description: |-
    ### `getFeatures` `()`

    Defined by [dojo/data/api/Identity](identity)

    See dojo/data/api/Read.getFeatures()

    **Returns:** object
- name: data/api/Identity#getIdentity()
  id: dojo/data/api/identity#1_10dojo_data_api_Identity_getIdentity
  summary: Returns a unique identifier for an item
  belongs_to: data/api/Identity
  description: "### `getIdentity` `(item)`\n\nDefined by [dojo/data/api/Identity](identity)\n\nReturns a unique identifier for an item. The return value will be either a string or something that has a toString() method (such as, for example, a dojox/uuid object).\n\n|           |                            |                                                              |\n|-----------|----------------------------|--------------------------------------------------------------|\n| Parameter | Type                       | Description                                                  |\n| item      | [dojo/data/api/Item](item) | The item from the store from which to obtain its identifier. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var itemId = store.getIdentity(kermit);\nassert(kermit === store.findByIdentity(store.getIdentity(kermit)));\n    \n```"
- name: data/api/Identity#getIdentityAttributes()
  id: dojo/data/api/identity#1_10dojo_data_api_Identity_getIdentityAttributes
  summary: Returns an array of attribute names that are used to generate the identity
  belongs_to: data/api/Identity
  description: "### `getIdentityAttributes` `(item)`\n\nDefined by [dojo/data/api/Identity](identity)\n\nReturns an array of attribute names that are used to generate the identity. For most stores, this is a single attribute, but for some complex stores such as RDB backed stores that use compound (multi-attribute) identifiers it can be more than one. If the identity is not composed of attributes on the item, it will return null. This function is intended to identify the attributes that comprise the identity so that so that during a render of all attributes, the UI can hide the the identity information if it chooses.\n\n|           |                            |                                                                                                                  |\n|-----------|----------------------------|------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                                                                      |\n| item      | [dojo/data/api/Item](item) | The item from the store from which to obtain the array of public attributes that compose the identifier, if any. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var itemId = store.getIdentity(kermit);\nvar identifiers = store.getIdentityAttributes(itemId);\nassert(typeof identifiers === \"array\" || identifiers === null);\n    \n```\n\n### `getLabel` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: \"firstname lastlame\" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to return the label for. |\n\n**Returns:** any\n\nA user-readable string representing the item or undefined if no user-readable label can be generated.\n\n### `getLabelAttributes` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any.\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.\n\n|           |                            |                                                      |\n|-----------|----------------------------|------------------------------------------------------|\n| Parameter | Type                       | Description                                          |\n| item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |\n\n**Returns:** any\n\nAn array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.\n\n### `getValue` `(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var darthVader = store.getValue(lukeSkywalker, \"father\");\n    \n```\n\n### `getValues` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n    \n```\n\n### `hasAttribute` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var trueOrFalse = store.hasAttribute(kermit, \"color\");\n    \n```\n\n### `isItem` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n    \n```\n\n### `isItemLoaded` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n    \n```\n\n### `loadItem` `(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Identity.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Identity.html)"
- name: data/api/Item
  id: dojo/data/api/item
  summary: An item in a dojo/data store Class for documentation purposes only
  description: "# dojo/data/api/Item\n\n## Summary\n\nAn item in a dojo/data store Class for documentation purposes only. An item can take any form, so no properties or methods are defined here.\n\nSee the [dojo/data/api/Item reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/api.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Item.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Item.html)"
- name: data/api/Notification
  id: dojo/data/api/notification
  summary: This is an abstract API that data provider implementations conform to
  description: "# dojo/data/api/Notification\n\nExtends[dojo/data/api/Read](read)\n\n## Summary\n\nThis is an abstract API that data provider implementations conform to. This file defines functions signatures and intentionally leaves all the functions unimplemented.\n\nThis API defines a set of APIs that all datastores that conform to the Notifications API must implement. In general, most stores will implement these APIs as no-op functions for users who wish to monitor them to be able to connect to then via dojo.connect(). For non-users of dojo.connect, they should be able to just replace the function on the store to obtain notifications. Both read-only and read-write stores may implement this feature. In the case of a read-only store, this feature makes sense if the store itself does internal polling to a back-end server and periodically updates its cache of items (deletes, adds, and updates).\n\nSee the [dojo/data/api/Notification reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/api/Notification.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nfunction onSet(item, attribute, oldValue, newValue){\n    //Do something with the information...\n};\nvar store = new some.newStore();\ndojo.connect(store, \"onSet\", onSet);\n```\n\n## Methods\n\n### `close``(request)`\n\nDefined by [dojo/data/api/Read](read)\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request.\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request. In general, this API expects to receive as a parameter a request object returned from a fetch. It will then close out anything associated with that request, such as clearing any internal datastore caches and closing any 'open' connections. For some store implementations, this call may be a no-op.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar request = store.fetch({onComplete: doSomething});\n...\nstore.close(request);\n```\n\n### `containsValue``(item,attribute,value)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *value* is one of the values that getValues() would return.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n| value     | anything                   | The value to match as a value for the attribute. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.containsValue(kermit, \"color\", \"green\");\n```\n\n### `fetch``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.\n\nA Request object will always be returned and is returned immediately. The basic request is nothing more than the keyword args passed to fetch and an additional function attached, abort(). The returned request object may then be used to cancel a fetch. All data items returns are passed through the callbacks defined in the fetch parameters and are not present on the 'request' object.\n\nThis does not mean that custom stores can not add methods and properties to the request object returned, only that the API does not require it. For more info about the Request API, see [dojo/data/api/Request](request)\n\n[TABLE]\n\n**Returns:** any\n\nThe fetch() method will return a javascript object conforming to the API defined in dojo/data/api/Request. In general, it will be the keywordArgs object returned with the required functions in Request.js attached. Its general purpose is to provide a convenient way for a caller to abort an ongoing fetch.\n\nThe Request object may also have additional properties when it is returned such as request.store property, which is a pointer to the datastore object that fetch() is a method of.\n\n## Examples\n\n### Example 1\n\nFetch all books identified by the query and call 'showBooks' when complete\n\n``` javascript\nvar request = store.fetch({query:\"all books\", onComplete: showBooks});\n```\n\n### Example 2\n\nFetch all items in the story and call 'showEverything' when complete.\n\n``` javascript\nvar request = store.fetch(onComplete: showEverything);\n```\n\n### Example 3\n\nFetch only 10 books that match the query 'all books', starting at the fifth book found during the search. This demonstrates how paging can be done for specific queries.\n\n``` javascript\nvar request = store.fetch({query:\"all books\", start: 4, count: 10, onComplete: showBooks});\n```\n\n### Example 4\n\nFetch all items that match the query, calling 'callback' each time an item is located.\n\n``` javascript\nvar request = store.fetch({query:\"foo/bar\", onItem:callback});\n```\n\n### Example 5\n\nFetch the first 100 books by author King, call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 6\n\nLocate the books written by Author King, sort it on title and publisher, then return the first 100 items from the sorted items.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, sort: [{ attribute: \"title\", descending: true}, {attribute: \"publisher\"}], ,start: 0, count:100, onComplete: 'showKing'});\n```\n\n### Example 7\n\nFetch the first 100 books by authors starting with the name King, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King*\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 8\n\nFetch the first 100 books by authors ending with 'ing', but only have one character before it (King, Bing, Ling, Sing, etc.), then call showBooks when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"?ing\"}, start: 0, count:100, onComplete: showBooks});\n```\n\n### Example 9\n\nFetch the first 100 books by author King, where the name may appear as King, king, KING, kInG, and so on, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, queryOptions:(ignoreCase: true}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 10\n\nPaging\n\n``` javascript\nvar store = new LargeRdbmsStore({url:\"jdbc:odbc:foobar\"});\nvar fetchArgs = {\n    query: {type:\"employees\", name:\"Hillary *\"}, // string matching\n    sort: [{attribute:\"department\", descending:true}],\n    start: 0,\n    count: 20,\n    scope: displayer,\n    onBegin: showThrobber,\n    onItem: displayItem,\n    onComplete: stopThrobber,\n    onError: handleFetchError,\n};\nstore.fetch(fetchArgs);\n...\n```\n\nand then when the user presses the \"Next Page\" button...\n\n``` javascript\nfetchArgs.start += 20;\nstore.fetch(fetchArgs);  // get the next 20 items\n```\n\n### `getAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: \\[\\].\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar array = store.getAttributes(kermit);\n```\n\n### `getFeatures``()`\n\nDefined by [dojo/data/api/Notification](notification)\n\nSee dojo/data/api/Read.getFeatures()\n\n**Returns:** object\n\n### `getLabel``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: \"firstname lastlame\" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to return the label for. |\n\n**Returns:** any\n\nA user-readable string representing the item or undefined if no user-readable label can be generated.\n\n### `getLabelAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any.\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.\n\n|           |                            |                                                      |\n|-----------|----------------------------|------------------------------------------------------|\n| Parameter | Type                       | Description                                          |\n| item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |\n\n**Returns:** any\n\nAn array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.\n\n### `getValue``(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar darthVader = store.getValue(lukeSkywalker, \"father\");\n```\n\n### `getValues``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n```\n\n### `hasAttribute``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.hasAttribute(kermit, \"color\");\n```\n\n### `isItem``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n```\n\n### `isItemLoaded``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n```\n\n### `loadItem``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]\n\n## Events\n\n### `onDelete``(deletedItem)`\n\nDefined by: [dojo/data/api/Notification](notification)\n\nThis function is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.\n\nThis function is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.\n\n|             |                            |                   |\n|-------------|----------------------------|-------------------|\n| Parameter   | Type                       | Description       |\n| deletedItem | [dojo/data/api/Item](item) | The item deleted. |\n\n**Returns:** any\n\nNothing.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n```\n\n### `onNew``(newItem,parentInfo)`\n\nDefined by: [dojo/data/api/Notification](notification)\n\nThis function is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.\n\nThis function is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.\n\n[TABLE]\n\n**Returns:** any\n\nNothing.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n```\n\n### `onSet``(item,attribute,oldValue,newValue)`\n\nDefined by: [dojo/data/api/Notification](notification)\n\nThis function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.\n\nThis function is called any time an item is modified via setValue, setValues, unsetAttribute, etc. Its purpose is to provide a hook point for those who wish to monitor actions on items in the store in a simple manner. The general expected usage is to dojo.connect() to the store's implementation and be called after the store function is called.\n\n|           |                            |                                                                                                                                                                                                                                                                                                              |\n|-----------|----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                                                                                                                                                                                                                                                                  |\n| item      | [dojo/data/api/Item](item) | The item being modified.                                                                                                                                                                                                                                                                                     |\n| attribute | attribute-name-string      | The attribute being changed represented as a string name.                                                                                                                                                                                                                                                    |\n| oldValue  | object \\| array            | The old value of the attribute. In the case of single value calls, such as setValue, unsetAttribute, etc, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array.                                              |\n| newValue  | object \\| array            | The new value of the attribute. In the case of single value calls, such as setValue, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array. In the case of unsetAttribute, the new value will be 'undefined'. |\n\n**Returns:** any\n\nNothing.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Notification.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Notification.html)"
- name: data/api/Notification#getFeatures()
  id: dojo/data/api/notification#1_10dojo_data_api_Notification_getFeatures
  summary: Method to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is
  belongs_to: data/api/Notification
  description: "### `getFeatures` `()`\n\nDefined by [dojo/data/api/Notification](notification)\n\nSee dojo/data/api/Read.getFeatures()\n\n**Returns:** object\n\n### `getLabel` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: \"firstname lastlame\" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to return the label for. |\n\n**Returns:** any\n\nA user-readable string representing the item or undefined if no user-readable label can be generated.\n\n### `getLabelAttributes` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any.\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.\n\n|           |                            |                                                      |\n|-----------|----------------------------|------------------------------------------------------|\n| Parameter | Type                       | Description                                          |\n| item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |\n\n**Returns:** any\n\nAn array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.\n\n### `getValue` `(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var darthVader = store.getValue(lukeSkywalker, \"father\");\n    \n```\n\n### `getValues` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n    \n```\n\n### `hasAttribute` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var trueOrFalse = store.hasAttribute(kermit, \"color\");\n    \n```\n\n### `isItem` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n    \n```\n\n### `isItemLoaded` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n    \n```\n\n### `loadItem` `(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]\n\n## Events"
- name: data/api/Notification#onDelete()
  id: dojo/data/api/notification#1_10dojo_data_api_Notification_onDelete
  summary: This function is called any time an item is deleted from the store
  belongs_to: data/api/Notification
  description: "### `onDelete` `(deletedItem)`\n\nDefined by: [dojo/data/api/Notification](notification)\n\nThis function is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.\n\nThis function is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.\n\n|             |                            |                   |\n|-------------|----------------------------|-------------------|\n| Parameter   | Type                       | Description       |\n| deletedItem | [dojo/data/api/Item](item) | The item deleted. |\n\n**Returns:** any\n\nNothing.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n    \n```"
- name: data/api/Notification#onNew()
  id: dojo/data/api/notification#1_10dojo_data_api_Notification_onNew
  summary: This function is called any time a new item is created in the store
  belongs_to: data/api/Notification
  description: "### `onNew` `(newItem,parentInfo)`\n\nDefined by: [dojo/data/api/Notification](notification)\n\nThis function is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.\n\nThis function is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.\n\n[TABLE]\n\n**Returns:** any\n\nNothing.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n    \n```"
- name: data/api/Notification#onSet()
  id: dojo/data/api/notification#1_10dojo_data_api_Notification_onSet
  summary: This function is called any time an item is modified via setValue, setValues, unsetAttribute, etc
  belongs_to: data/api/Notification
  description: "### `onSet` `(item,attribute,oldValue,newValue)`\n\nDefined by: [dojo/data/api/Notification](notification)\n\nThis function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.\n\nThis function is called any time an item is modified via setValue, setValues, unsetAttribute, etc. Its purpose is to provide a hook point for those who wish to monitor actions on items in the store in a simple manner. The general expected usage is to dojo.connect() to the store's implementation and be called after the store function is called.\n\n|           |                            |                                                                                                                                                                                                                                                                                                              |\n|-----------|----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                                                                                                                                                                                                                                                                  |\n| item      | [dojo/data/api/Item](item) | The item being modified.                                                                                                                                                                                                                                                                                     |\n| attribute | attribute-name-string      | The attribute being changed represented as a string name.                                                                                                                                                                                                                                                    |\n| oldValue  | object \\| array            | The old value of the attribute. In the case of single value calls, such as setValue, unsetAttribute, etc, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array.                                              |\n| newValue  | object \\| array            | The new value of the attribute. In the case of single value calls, such as setValue, this value will be generally be an atomic value of some sort (string, int, etc, object). In the case of multi-valued attributes, it will be an array. In the case of unsetAttribute, the new value will be 'undefined'. |\n\n**Returns:** any\n\nNothing.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Notification.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Notification.html)"
- name: data/api/Read
  id: dojo/data/api/read
  summary: This is an abstract API that data provider implementations conform to
  description: "# dojo/data/api/Read\n\n## Summary\n\nThis is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented. For more information on the dojo.data APIs, please visit: <http://www.dojotoolkit.org/node/98>\n\nSee the [dojo/data/api/Read reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/api/Read.html) for more information.\n\n## Methods\n\n### `close``(request)`\n\nDefined by [dojo/data/api/Read](read)\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request.\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request. In general, this API expects to receive as a parameter a request object returned from a fetch. It will then close out anything associated with that request, such as clearing any internal datastore caches and closing any 'open' connections. For some store implementations, this call may be a no-op.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar request = store.fetch({onComplete: doSomething});\n...\nstore.close(request);\n```\n\n### `containsValue``(item,attribute,value)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *value* is one of the values that getValues() would return.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n| value     | anything                   | The value to match as a value for the attribute. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.containsValue(kermit, \"color\", \"green\");\n```\n\n### `fetch``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.\n\nA Request object will always be returned and is returned immediately. The basic request is nothing more than the keyword args passed to fetch and an additional function attached, abort(). The returned request object may then be used to cancel a fetch. All data items returns are passed through the callbacks defined in the fetch parameters and are not present on the 'request' object.\n\nThis does not mean that custom stores can not add methods and properties to the request object returned, only that the API does not require it. For more info about the Request API, see [dojo/data/api/Request](request)\n\n[TABLE]\n\n**Returns:** any\n\nThe fetch() method will return a javascript object conforming to the API defined in dojo/data/api/Request. In general, it will be the keywordArgs object returned with the required functions in Request.js attached. Its general purpose is to provide a convenient way for a caller to abort an ongoing fetch.\n\nThe Request object may also have additional properties when it is returned such as request.store property, which is a pointer to the datastore object that fetch() is a method of.\n\n## Examples\n\n### Example 1\n\nFetch all books identified by the query and call 'showBooks' when complete\n\n``` javascript\nvar request = store.fetch({query:\"all books\", onComplete: showBooks});\n```\n\n### Example 2\n\nFetch all items in the story and call 'showEverything' when complete.\n\n``` javascript\nvar request = store.fetch(onComplete: showEverything);\n```\n\n### Example 3\n\nFetch only 10 books that match the query 'all books', starting at the fifth book found during the search. This demonstrates how paging can be done for specific queries.\n\n``` javascript\nvar request = store.fetch({query:\"all books\", start: 4, count: 10, onComplete: showBooks});\n```\n\n### Example 4\n\nFetch all items that match the query, calling 'callback' each time an item is located.\n\n``` javascript\nvar request = store.fetch({query:\"foo/bar\", onItem:callback});\n```\n\n### Example 5\n\nFetch the first 100 books by author King, call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 6\n\nLocate the books written by Author King, sort it on title and publisher, then return the first 100 items from the sorted items.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, sort: [{ attribute: \"title\", descending: true}, {attribute: \"publisher\"}], ,start: 0, count:100, onComplete: 'showKing'});\n```\n\n### Example 7\n\nFetch the first 100 books by authors starting with the name King, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King*\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 8\n\nFetch the first 100 books by authors ending with 'ing', but only have one character before it (King, Bing, Ling, Sing, etc.), then call showBooks when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"?ing\"}, start: 0, count:100, onComplete: showBooks});\n```\n\n### Example 9\n\nFetch the first 100 books by author King, where the name may appear as King, king, KING, kInG, and so on, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, queryOptions:(ignoreCase: true}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 10\n\nPaging\n\n``` javascript\nvar store = new LargeRdbmsStore({url:\"jdbc:odbc:foobar\"});\nvar fetchArgs = {\n    query: {type:\"employees\", name:\"Hillary *\"}, // string matching\n    sort: [{attribute:\"department\", descending:true}],\n    start: 0,\n    count: 20,\n    scope: displayer,\n    onBegin: showThrobber,\n    onItem: displayItem,\n    onComplete: stopThrobber,\n    onError: handleFetchError,\n};\nstore.fetch(fetchArgs);\n...\n```\n\nand then when the user presses the \"Next Page\" button...\n\n``` javascript\nfetchArgs.start += 20;\nstore.fetch(fetchArgs);  // get the next 20 items\n```\n\n### `getAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: \\[\\].\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar array = store.getAttributes(kermit);\n```\n\n### `getFeatures``()`\n\nDefined by [dojo/data/api/Read](read)\n\nThe getFeatures() method returns an simple keyword values object that specifies what interface features the datastore implements. A simple CsvStore may be read-only, and the only feature it implements will be the 'dojo/data/api/Read' interface, so the getFeatures() method will return an object like this one: {'dojo.data.api.Read': true}. A more sophisticated datastore might implement a variety of interface features, like 'dojo.data.api.Read', 'dojo/data/api/Write', 'dojo.data.api.Identity', and 'dojo/data/api/Attribution'.\n\n**Returns:** object\n\n### `getLabel``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: \"firstname lastlame\" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to return the label for. |\n\n**Returns:** any\n\nA user-readable string representing the item or undefined if no user-readable label can be generated.\n\n### `getLabelAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any.\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.\n\n|           |                            |                                                      |\n|-----------|----------------------------|------------------------------------------------------|\n| Parameter | Type                       | Description                                          |\n| item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |\n\n**Returns:** any\n\nAn array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.\n\n### `getValue``(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar darthVader = store.getValue(lukeSkywalker, \"father\");\n```\n\n### `getValues``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n```\n\n### `hasAttribute``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.hasAttribute(kermit, \"color\");\n```\n\n### `isItem``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n```\n\n### `isItemLoaded``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n```\n\n### `loadItem``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Read.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Read.html)"
- name: data/api/Read#close()
  id: dojo/data/api/read#1_10dojo_data_api_Read_close
  summary: The close() method is intended for instructing the store to 'close' out any information associated with a particular request
  belongs_to: data/api/Read
  description: "### `close` `(request)`\n\nDefined by [dojo/data/api/Read](read)\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request.\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request. In general, this API expects to receive as a parameter a request object returned from a fetch. It will then close out anything associated with that request, such as clearing any internal datastore caches and closing any 'open' connections. For some store implementations, this call may be a no-op.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var request = store.fetch({onComplete: doSomething});\n...\nstore.close(request);\n    \n```"
- name: data/api/Read#containsValue()
  id: dojo/data/api/read#1_10dojo_data_api_Read_containsValue
  summary: Returns true if the given value is one of the values that getValues() would return
  belongs_to: data/api/Read
  description: "### `containsValue` `(item,attribute,value)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *value* is one of the values that getValues() would return.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n| value     | anything                   | The value to match as a value for the attribute. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var trueOrFalse = store.containsValue(kermit, \"color\", \"green\");\n    \n```"
- name: data/api/Read#fetch()
  id: dojo/data/api/read#1_10dojo_data_api_Read_fetch
  summary: Given a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items
  belongs_to: data/api/Read
  description: "### `fetch` `(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.\n\nA Request object will always be returned and is returned immediately. The basic request is nothing more than the keyword args passed to fetch and an additional function attached, abort(). The returned request object may then be used to cancel a fetch. All data items returns are passed through the callbacks defined in the fetch parameters and are not present on the 'request' object.\n\nThis does not mean that custom stores can not add methods and properties to the request object returned, only that the API does not require it. For more info about the Request API, see [dojo/data/api/Request](request)\n\n[TABLE]\n\n**Returns:** any\n\nThe fetch() method will return a javascript object conforming to the API defined in dojo/data/api/Request. In general, it will be the keywordArgs object returned with the required functions in Request.js attached. Its general purpose is to provide a convenient way for a caller to abort an ongoing fetch.\n\nThe Request object may also have additional properties when it is returned such as request.store property, which is a pointer to the datastore object that fetch() is a method of.\n\n## Examples\n\n### Example 1\n\nFetch all books identified by the query and call 'showBooks' when complete\n\n``` javascript\n      var request = store.fetch({query:\"all books\", onComplete: showBooks});\n    \n```\n\n### Example 2\n\nFetch all items in the story and call 'showEverything' when complete.\n\n``` javascript\n      var request = store.fetch(onComplete: showEverything);\n    \n```\n\n### Example 3\n\nFetch only 10 books that match the query 'all books', starting at the fifth book found during the search. This demonstrates how paging can be done for specific queries.\n\n``` javascript\n      var request = store.fetch({query:\"all books\", start: 4, count: 10, onComplete: showBooks});\n    \n```\n\n### Example 4\n\nFetch all items that match the query, calling 'callback' each time an item is located.\n\n``` javascript\n      var request = store.fetch({query:\"foo/bar\", onItem:callback});\n    \n```\n\n### Example 5\n\nFetch the first 100 books by author King, call showKing when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King\"}, start: 0, count:100, onComplete: showKing});\n    \n```\n\n### Example 6\n\nLocate the books written by Author King, sort it on title and publisher, then return the first 100 items from the sorted items.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King\"}, sort: [{ attribute: \"title\", descending: true}, {attribute: \"publisher\"}], ,start: 0, count:100, onComplete: 'showKing'});\n    \n```\n\n### Example 7\n\nFetch the first 100 books by authors starting with the name King, then call showKing when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King*\"}, start: 0, count:100, onComplete: showKing});\n    \n```\n\n### Example 8\n\nFetch the first 100 books by authors ending with 'ing', but only have one character before it (King, Bing, Ling, Sing, etc.), then call showBooks when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"?ing\"}, start: 0, count:100, onComplete: showBooks});\n    \n```\n\n### Example 9\n\nFetch the first 100 books by author King, where the name may appear as King, king, KING, kInG, and so on, then call showKing when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King\"}, queryOptions:(ignoreCase: true}, start: 0, count:100, onComplete: showKing});\n    \n```\n\n### Example 10\n\nPaging\n\n``` javascript\n      var store = new LargeRdbmsStore({url:\"jdbc:odbc:foobar\"});\nvar fetchArgs = {\n    query: {type:\"employees\", name:\"Hillary *\"}, // string matching\n    sort: [{attribute:\"department\", descending:true}],\n    start: 0,\n    count: 20,\n    scope: displayer,\n    onBegin: showThrobber,\n    onItem: displayItem,\n    onComplete: stopThrobber,\n    onError: handleFetchError,\n};\nstore.fetch(fetchArgs);\n...\n    \n```\n\nand then when the user presses the \"Next Page\" button...\n\n``` javascript\n      fetchArgs.start += 20;\nstore.fetch(fetchArgs);  // get the next 20 items\n    \n```"
- name: data/api/Read#getAttributes()
  id: dojo/data/api/read#1_10dojo_data_api_Read_getAttributes
  summary: Returns an array with all the attributes that this item has
  belongs_to: data/api/Read
  description: "### `getAttributes` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: \\[\\].\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var array = store.getAttributes(kermit);\n    \n```"
- name: data/api/Read#getFeatures()
  id: dojo/data/api/read#1_10dojo_data_api_Read_getFeatures
  summary: The getFeatures() method returns an simple keyword values object that specifies what interface features the datastore implements
  belongs_to: data/api/Read
  description: |-
    ### `getFeatures` `()`

    Defined by [dojo/data/api/Read](read)

    The getFeatures() method returns an simple keyword values object that specifies what interface features the datastore implements. A simple CsvStore may be read-only, and the only feature it implements will be the 'dojo/data/api/Read' interface, so the getFeatures() method will return an object like this one: {'dojo.data.api.Read': true}. A more sophisticated datastore might implement a variety of interface features, like 'dojo.data.api.Read', 'dojo/data/api/Write', 'dojo.data.api.Identity', and 'dojo/data/api/Attribution'.

    **Returns:** object
- name: data/api/Read#getLabel()
  id: dojo/data/api/read#1_10dojo_data_api_Read_getLabel
  summary: Method to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is
  belongs_to: data/api/Read
  description: |-
    ### `getLabel` `(item)`

    Defined by [dojo/data/api/Read](read)

    Method to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.

    Method to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: "firstname lastlame" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.

    |           |                            |                                   |
    |-----------|----------------------------|-----------------------------------|
    | Parameter | Type                       | Description                       |
    | item      | [dojo/data/api/Item](item) | The item to return the label for. |

    **Returns:** any

    A user-readable string representing the item or undefined if no user-readable label can be generated.
- name: data/api/Read#getLabelAttributes()
  id: dojo/data/api/read#1_10dojo_data_api_Read_getLabelAttributes
  summary: Method to inspect the item and return an array of what attributes of the item were used to generate its label, if any
  belongs_to: data/api/Read
  description: |-
    ### `getLabelAttributes` `(item)`

    Defined by [dojo/data/api/Read](read)

    Method to inspect the item and return an array of what attributes of the item were used to generate its label, if any.

    Method to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.

    |           |                            |                                                      |
    |-----------|----------------------------|------------------------------------------------------|
    | Parameter | Type                       | Description                                          |
    | item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |

    **Returns:** any

    An array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.
- name: data/api/Read#getValue()
  id: dojo/data/api/read#1_10dojo_data_api_Read_getValue
  summary: Returns a single attribute value
  belongs_to: data/api/Read
  description: "### `getValue` `(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var darthVader = store.getValue(lukeSkywalker, \"father\");\n    \n```"
- name: data/api/Read#getValues()
  id: dojo/data/api/read#1_10dojo_data_api_Read_getValues
  summary: This getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value
  belongs_to: data/api/Read
  description: "### `getValues` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n    \n```"
- name: data/api/Read#hasAttribute()
  id: dojo/data/api/read#1_10dojo_data_api_Read_hasAttribute
  summary: Returns true if the given item has a value for the given attribute
  belongs_to: data/api/Read
  description: "### `hasAttribute` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var trueOrFalse = store.hasAttribute(kermit, \"color\");\n    \n```"
- name: data/api/Read#isItem()
  id: dojo/data/api/read#1_10dojo_data_api_Read_isItem
  summary: Returns true if something is an item and came from the store instance
  belongs_to: data/api/Read
  description: "### `isItem` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n    \n```"
- name: data/api/Read#isItemLoaded()
  id: dojo/data/api/read#1_10dojo_data_api_Read_isItemLoaded
  summary: Returns false if isItem(something) is false
  belongs_to: data/api/Read
  description: "### `isItemLoaded` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n    \n```"
- name: data/api/Read#loadItem()
  id: dojo/data/api/read#1_10dojo_data_api_Read_loadItem
  summary: Given an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true
  belongs_to: data/api/Read
  description: "### `loadItem` `(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Read.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Read.html)"
- name: data/api/Request
  id: dojo/data/api/request
  summary: This class defines out the semantics of what a 'Request' object looks like when returned from a fetch() method
  description: "# dojo/data/api/Request\n\n## Summary\n\nThis class defines out the semantics of what a 'Request' object looks like when returned from a fetch() method. In general, a request object is nothing more than the original keywordArgs from fetch with an abort function attached to it to allow users to abort a particular request if they so choose. No other functions are required on a general Request object return. That does not inhibit other store implementations from adding extensions to it, of course.\n\nThis is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.\n\nFor more details on fetch, see [dojo/data/api/Read.fetch()](read#fetch).\n\nSee the [dojo/data/api/Request reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/api.html) for more information.\n\n## Methods\n\n### `abort``()`\n\nDefined by [dojo/data/api/Request](request)\n\nThis function is a hook point for stores to provide as a way for a fetch to be halted mid-processing.\n\nThis function is a hook point for stores to provide as a way for a fetch to be halted mid-processing. For more details on the fetch() api, please see [dojo/data/api/Read.fetch()](read#fetch).\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Request.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Request.html)"
- name: data/api/Request#abort()
  id: dojo/data/api/request#1_10dojo_data_api_Request_abort
  summary: This function is a hook point for stores to provide as a way for a fetch to be halted mid-processing
  belongs_to: data/api/Request
  description: "### `abort` `()`\n\nDefined by [dojo/data/api/Request](request)\n\nThis function is a hook point for stores to provide as a way for a fetch to be halted mid-processing.\n\nThis function is a hook point for stores to provide as a way for a fetch to be halted mid-processing. For more details on the fetch() api, please see [dojo/data/api/Read.fetch()](read#fetch).\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Request.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Request.html)"
- name: data/api/Write
  id: dojo/data/api/write
  summary: This is an abstract API that data provider implementations conform to
  description: "# dojo/data/api/Write\n\nExtends[dojo/data/api/Read](read)\n\n## Summary\n\nThis is an abstract API that data provider implementations conform to. This file defines function signatures and intentionally leaves all the functions unimplemented.\n\nSee the [dojo/data/api/Write reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/api/Write.html) for more information.\n\n## Methods\n\n### `close``(request)`\n\nDefined by [dojo/data/api/Read](read)\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request.\n\nThe close() method is intended for instructing the store to 'close' out any information associated with a particular request. In general, this API expects to receive as a parameter a request object returned from a fetch. It will then close out anything associated with that request, such as clearing any internal datastore caches and closing any 'open' connections. For some store implementations, this call may be a no-op.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar request = store.fetch({onComplete: doSomething});\n...\nstore.close(request);\n```\n\n### `containsValue``(item,attribute,value)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *value* is one of the values that getValues() would return.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n| value     | anything                   | The value to match as a value for the attribute. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.containsValue(kermit, \"color\", \"green\");\n```\n\n### `deleteItem``(item)`\n\nDefined by [dojo/data/api/Write](write)\n\nDeletes an item from the store.\n\n|           |                            |                     |\n|-----------|----------------------------|---------------------|\n| Parameter | Type                       | Description         |\n| item      | [dojo/data/api/Item](item) | The item to delete. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar success = store.deleteItem(kermit);\n```\n\n### `fetch``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.\n\nA Request object will always be returned and is returned immediately. The basic request is nothing more than the keyword args passed to fetch and an additional function attached, abort(). The returned request object may then be used to cancel a fetch. All data items returns are passed through the callbacks defined in the fetch parameters and are not present on the 'request' object.\n\nThis does not mean that custom stores can not add methods and properties to the request object returned, only that the API does not require it. For more info about the Request API, see [dojo/data/api/Request](request)\n\n[TABLE]\n\n**Returns:** any\n\nThe fetch() method will return a javascript object conforming to the API defined in dojo/data/api/Request. In general, it will be the keywordArgs object returned with the required functions in Request.js attached. Its general purpose is to provide a convenient way for a caller to abort an ongoing fetch.\n\nThe Request object may also have additional properties when it is returned such as request.store property, which is a pointer to the datastore object that fetch() is a method of.\n\n## Examples\n\n### Example 1\n\nFetch all books identified by the query and call 'showBooks' when complete\n\n``` javascript\nvar request = store.fetch({query:\"all books\", onComplete: showBooks});\n```\n\n### Example 2\n\nFetch all items in the story and call 'showEverything' when complete.\n\n``` javascript\nvar request = store.fetch(onComplete: showEverything);\n```\n\n### Example 3\n\nFetch only 10 books that match the query 'all books', starting at the fifth book found during the search. This demonstrates how paging can be done for specific queries.\n\n``` javascript\nvar request = store.fetch({query:\"all books\", start: 4, count: 10, onComplete: showBooks});\n```\n\n### Example 4\n\nFetch all items that match the query, calling 'callback' each time an item is located.\n\n``` javascript\nvar request = store.fetch({query:\"foo/bar\", onItem:callback});\n```\n\n### Example 5\n\nFetch the first 100 books by author King, call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 6\n\nLocate the books written by Author King, sort it on title and publisher, then return the first 100 items from the sorted items.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, sort: [{ attribute: \"title\", descending: true}, {attribute: \"publisher\"}], ,start: 0, count:100, onComplete: 'showKing'});\n```\n\n### Example 7\n\nFetch the first 100 books by authors starting with the name King, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King*\"}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 8\n\nFetch the first 100 books by authors ending with 'ing', but only have one character before it (King, Bing, Ling, Sing, etc.), then call showBooks when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"?ing\"}, start: 0, count:100, onComplete: showBooks});\n```\n\n### Example 9\n\nFetch the first 100 books by author King, where the name may appear as King, king, KING, kInG, and so on, then call showKing when up to 100 items have been located.\n\n``` javascript\nvar request = store.fetch({query:{author:\"King\"}, queryOptions:(ignoreCase: true}, start: 0, count:100, onComplete: showKing});\n```\n\n### Example 10\n\nPaging\n\n``` javascript\nvar store = new LargeRdbmsStore({url:\"jdbc:odbc:foobar\"});\nvar fetchArgs = {\n    query: {type:\"employees\", name:\"Hillary *\"}, // string matching\n    sort: [{attribute:\"department\", descending:true}],\n    start: 0,\n    count: 20,\n    scope: displayer,\n    onBegin: showThrobber,\n    onItem: displayItem,\n    onComplete: stopThrobber,\n    onError: handleFetchError,\n};\nstore.fetch(fetchArgs);\n...\n```\n\nand then when the user presses the \"Next Page\" button...\n\n``` javascript\nfetchArgs.start += 20;\nstore.fetch(fetchArgs);  // get the next 20 items\n```\n\n### `getAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: \\[\\].\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar array = store.getAttributes(kermit);\n```\n\n### `getFeatures``()`\n\nDefined by [dojo/data/api/Write](write)\n\nSee dojo/data/api/Read.getFeatures()\n\n**Returns:** object\n\n### `getLabel``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: \"firstname lastlame\" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to return the label for. |\n\n**Returns:** any\n\nA user-readable string representing the item or undefined if no user-readable label can be generated.\n\n### `getLabelAttributes``(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any.\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.\n\n|           |                            |                                                      |\n|-----------|----------------------------|------------------------------------------------------|\n| Parameter | Type                       | Description                                          |\n| item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |\n\n**Returns:** any\n\nAn array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.\n\n### `getValue``(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar darthVader = store.getValue(lukeSkywalker, \"father\");\n```\n\n### `getValues``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n```\n\n### `hasAttribute``(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.hasAttribute(kermit, \"color\");\n```\n\n### `isDirty``(item)`\n\nDefined by [dojo/data/api/Write](write)\n\nGiven an item, isDirty() returns true if the item has been modified since the last save(). If isDirty() is called with no *item* argument, then this function returns true if any item has been modified since the last save().\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar trueOrFalse = store.isDirty(kermit); // true if kermit is dirty\nvar trueOrFalse = store.isDirty();       // true if any item is dirty\n```\n\n### `isItem``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n```\n\n### `isItemLoaded``(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n```\n\n### `loadItem``(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]\n\n### `newItem``(keywordArgs,parentInfo)`\n\nDefined by [dojo/data/api/Write](write)\n\nReturns a newly created item. Sets the attributes of the new item based on the *keywordArgs* provided. In general, the attribute names in the keywords become the attributes in the new item and as for the attribute values in keywordArgs, they become the values of the attributes in the new item. In addition, for stores that support hierarchical item creation, an optional second parameter is accepted that defines what item is the parent of the new item and what attribute of that item should the new item be assigned to. In general, this will assume that the attribute targeted is multi-valued and a new item is appended onto the list of values for that attribute.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar kermit = store.newItem({name: \"Kermit\", color:[blue, green]});\n```\n\n### `revert``()`\n\nDefined by [dojo/data/api/Write](write)\n\nDiscards any unsaved changes.\n\nDiscards any unsaved changes.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar success = store.revert();\n```\n\n### `save``(keywordArgs)`\n\nDefined by [dojo/data/api/Write](write)\n\nSaves to the server all the changes that have been made locally. The save operation may take some time and is generally performed in an asynchronous fashion. The outcome of the save action is is passed into the set of supported callbacks for the save.\n\n[TABLE]\n\n**Returns:** any\n\nNothing. Since the saves are generally asynchronous, there is no need to return anything. All results are passed via callbacks.\n\n## Examples\n\n### Example 1\n\n``` javascript\nstore.save({onComplete: onSave});\nstore.save({scope: fooObj, onComplete: onSave, onError: saveFailed});\n```\n\n### `setValue``(item,attribute,value)`\n\nDefined by [dojo/data/api/Write](write)\n\nSets the value of an attribute on an item. Replaces any previous value or values.\n\n|           |                            |                                                                   |\n|-----------|----------------------------|-------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                       |\n| item      | [dojo/data/api/Item](item) | The item to modify.                                               |\n| attribute | string                     | The attribute of the item to change represented as a string name. |\n| value     | almost anything            | The value to assign to the item.                                  |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar success = store.set(kermit, \"color\", \"green\");\n```\n\n### `setValues``(item,attribute,values)`\n\nDefined by [dojo/data/api/Write](write)\n\nAdds each value in the *values* array as a value of the given attribute on the given item. Replaces any previous value or values. Calling store.setValues(x, y, \\[\\]) (with *values* as an empty array) has the same effect as calling store.unsetAttribute(x, y).\n\n|           |                            |                                                                   |\n|-----------|----------------------------|-------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                       |\n| item      | [dojo/data/api/Item](item) | The item to modify.                                               |\n| attribute | string                     | The attribute of the item to change represented as a string name. |\n| values    | array                      | An array of values to assign to the attribute..                   |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar success = store.setValues(kermit, \"color\", [\"green\", \"aqua\"]);\nsuccess = store.setValues(kermit, \"color\", []);\nif (success){assert(!store.hasAttribute(kermit, \"color\"));}\n```\n\n### `unsetAttribute``(item,attribute)`\n\nDefined by [dojo/data/api/Write](write)\n\nDeletes all the values of an attribute on an item.\n\n|           |                            |                                                             |\n|-----------|----------------------------|-------------------------------------------------------------|\n| Parameter | Type                       | Description                                                 |\n| item      | [dojo/data/api/Item](item) | The item to modify.                                         |\n| attribute | string                     | The attribute of the item to unset represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar success = store.unsetAttribute(kermit, \"color\");\nif (success){assert(!store.hasAttribute(kermit, \"color\"));}\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Write.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Write.html)"
- name: data/api/Write#deleteItem()
  id: dojo/data/api/write#1_10dojo_data_api_Write_deleteItem
  summary: Deletes an item from the store
  belongs_to: data/api/Write
  description: "### `deleteItem` `(item)`\n\nDefined by [dojo/data/api/Write](write)\n\nDeletes an item from the store.\n\n|           |                            |                     |\n|-----------|----------------------------|---------------------|\n| Parameter | Type                       | Description         |\n| item      | [dojo/data/api/Item](item) | The item to delete. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var success = store.deleteItem(kermit);\n    \n```\n\n### `fetch` `(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.\n\nA Request object will always be returned and is returned immediately. The basic request is nothing more than the keyword args passed to fetch and an additional function attached, abort(). The returned request object may then be used to cancel a fetch. All data items returns are passed through the callbacks defined in the fetch parameters and are not present on the 'request' object.\n\nThis does not mean that custom stores can not add methods and properties to the request object returned, only that the API does not require it. For more info about the Request API, see [dojo/data/api/Request](request)\n\n[TABLE]\n\n**Returns:** any\n\nThe fetch() method will return a javascript object conforming to the API defined in dojo/data/api/Request. In general, it will be the keywordArgs object returned with the required functions in Request.js attached. Its general purpose is to provide a convenient way for a caller to abort an ongoing fetch.\n\nThe Request object may also have additional properties when it is returned such as request.store property, which is a pointer to the datastore object that fetch() is a method of.\n\n## Examples\n\n### Example 1\n\nFetch all books identified by the query and call 'showBooks' when complete\n\n``` javascript\n      var request = store.fetch({query:\"all books\", onComplete: showBooks});\n    \n```\n\n### Example 2\n\nFetch all items in the story and call 'showEverything' when complete.\n\n``` javascript\n      var request = store.fetch(onComplete: showEverything);\n    \n```\n\n### Example 3\n\nFetch only 10 books that match the query 'all books', starting at the fifth book found during the search. This demonstrates how paging can be done for specific queries.\n\n``` javascript\n      var request = store.fetch({query:\"all books\", start: 4, count: 10, onComplete: showBooks});\n    \n```\n\n### Example 4\n\nFetch all items that match the query, calling 'callback' each time an item is located.\n\n``` javascript\n      var request = store.fetch({query:\"foo/bar\", onItem:callback});\n    \n```\n\n### Example 5\n\nFetch the first 100 books by author King, call showKing when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King\"}, start: 0, count:100, onComplete: showKing});\n    \n```\n\n### Example 6\n\nLocate the books written by Author King, sort it on title and publisher, then return the first 100 items from the sorted items.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King\"}, sort: [{ attribute: \"title\", descending: true}, {attribute: \"publisher\"}], ,start: 0, count:100, onComplete: 'showKing'});\n    \n```\n\n### Example 7\n\nFetch the first 100 books by authors starting with the name King, then call showKing when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King*\"}, start: 0, count:100, onComplete: showKing});\n    \n```\n\n### Example 8\n\nFetch the first 100 books by authors ending with 'ing', but only have one character before it (King, Bing, Ling, Sing, etc.), then call showBooks when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"?ing\"}, start: 0, count:100, onComplete: showBooks});\n    \n```\n\n### Example 9\n\nFetch the first 100 books by author King, where the name may appear as King, king, KING, kInG, and so on, then call showKing when up to 100 items have been located.\n\n``` javascript\n      var request = store.fetch({query:{author:\"King\"}, queryOptions:(ignoreCase: true}, start: 0, count:100, onComplete: showKing});\n    \n```\n\n### Example 10\n\nPaging\n\n``` javascript\n      var store = new LargeRdbmsStore({url:\"jdbc:odbc:foobar\"});\nvar fetchArgs = {\n    query: {type:\"employees\", name:\"Hillary *\"}, // string matching\n    sort: [{attribute:\"department\", descending:true}],\n    start: 0,\n    count: 20,\n    scope: displayer,\n    onBegin: showThrobber,\n    onItem: displayItem,\n    onComplete: stopThrobber,\n    onError: handleFetchError,\n};\nstore.fetch(fetchArgs);\n...\n    \n```\n\nand then when the user presses the \"Next Page\" button...\n\n``` javascript\n      fetchArgs.start += 20;\nstore.fetch(fetchArgs);  // get the next 20 items\n    \n```\n\n### `getAttributes` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns an array with all the attributes that this item has. This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: \\[\\].\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var array = store.getAttributes(kermit);\n    \n```"
- name: data/api/Write#getFeatures()
  id: dojo/data/api/write#1_10dojo_data_api_Write_getFeatures
  summary: Method to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is
  belongs_to: data/api/Write
  description: "### `getFeatures` `()`\n\nDefined by [dojo/data/api/Write](write)\n\nSee dojo/data/api/Read.getFeatures()\n\n**Returns:** object\n\n### `getLabel` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.\n\nMethod to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is. In general most labels will be a specific attribute value or collection of the attribute values that combine to label the item in some manner. For example for an item that represents a person it may return the label as: \"firstname lastlame\" where the firstname and lastname are attributes on the item. If the store is unable to determine an adequate human readable label, it should return undefined. Users that wish to customize how a store instance labels items should replace the getLabel() function on their instance of the store, or extend the store and replace the function in the extension class.\n\n|           |                            |                                   |\n|-----------|----------------------------|-----------------------------------|\n| Parameter | Type                       | Description                       |\n| item      | [dojo/data/api/Item](item) | The item to return the label for. |\n\n**Returns:** any\n\nA user-readable string representing the item or undefined if no user-readable label can be generated.\n\n### `getLabelAttributes` `(item)`\n\nDefined by [dojo/data/api/Read](read)\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any.\n\nMethod to inspect the item and return an array of what attributes of the item were used to generate its label, if any. This function is to assist UI developers in knowing what attributes can be ignored out of the attributes an item has when displaying it, in cases where the UI is using the label as an overall identifer should they wish to hide redundant information.\n\n|           |                            |                                                      |\n|-----------|----------------------------|------------------------------------------------------|\n| Parameter | Type                       | Description                                          |\n| item      | [dojo/data/api/Item](item) | The item to return the list of label attributes for. |\n\n**Returns:** any\n\nAn array of attribute names that were used to generate the label, or null if public attributes were not used to generate the label.\n\n### `getValue` `(item,attribute,defaultValue)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).\n\nSaying that an \"item x does not have a value for an attribute y\" is identical to saying that an \"item x does not have attribute y\". It is an oxymoron to say \"that attribute is present but has no values\" or \"the item has that attribute but does not have any attribute values\". If store.hasAttribute(item, attribute) returns false, then store.getValue(item, attribute) will return undefined.\n\n[TABLE]\n\n**Returns:** any\n\na literal, an item, null, or undefined (never an array)\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var darthVader = store.getValue(lukeSkywalker, \"father\");\n    \n```\n\n### `getValues` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nThis getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value. The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: \\[\\]. (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return \\[\\].)\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access values on.                    |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n**Returns:** any\n\nan array that may contain literals and items\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var friendsOfLuke = store.getValues(lukeSkywalker, \"friends\");\n    \n```\n\n### `hasAttribute` `(item,attribute)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if the given *item* has a value for the given *attribute*.\n\n|           |                            |                                                  |\n|-----------|----------------------------|--------------------------------------------------|\n| Parameter | Type                       | Description                                      |\n| item      | [dojo/data/api/Item](item) | The item to access attributes on.                |\n| attribute | attribute-name-string      | The attribute to access represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var trueOrFalse = store.hasAttribute(kermit, \"color\");\n    \n```"
- name: data/api/Write#isDirty()
  id: dojo/data/api/write#1_10dojo_data_api_Write_isDirty
  summary: Given an item, isDirty() returns true if the item has been modified since the last save()
  belongs_to: data/api/Write
  description: "### `isDirty` `(item)`\n\nDefined by [dojo/data/api/Write](write)\n\nGiven an item, isDirty() returns true if the item has been modified since the last save(). If isDirty() is called with no *item* argument, then this function returns true if any item has been modified since the last save().\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var trueOrFalse = store.isDirty(kermit); // true if kermit is dirty\nvar trueOrFalse = store.isDirty();       // true if any item is dirty\n    \n```\n\n### `isItem` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItem(store.newItem());\nvar no  = store.isItem(\"green\");\n    \n```\n\n### `isItemLoaded` `(something)`\n\nDefined by [dojo/data/api/Read](read)\n\nReturns false if isItem(something) is false. Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).\n\n|           |          |                  |\n|-----------|----------|------------------|\n| Parameter | Type     | Description      |\n| something | anything | Can be anything. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var yes = store.isItemLoaded(store.newItem());\nvar no  = store.isItemLoaded(\"green\");\n    \n```\n\n### `loadItem` `(keywordArgs)`\n\nDefined by [dojo/data/api/Read](read)\n\nGiven an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true. If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers. So, before invoking this method, check that the item has not already been loaded.\n\n[TABLE]"
- name: data/api/Write#newItem()
  id: dojo/data/api/write#1_10dojo_data_api_Write_newItem
  summary: Returns a newly created item
  belongs_to: data/api/Write
  description: "### `newItem` `(keywordArgs,parentInfo)`\n\nDefined by [dojo/data/api/Write](write)\n\nReturns a newly created item. Sets the attributes of the new item based on the *keywordArgs* provided. In general, the attribute names in the keywords become the attributes in the new item and as for the attribute values in keywordArgs, they become the values of the attributes in the new item. In addition, for stores that support hierarchical item creation, an optional second parameter is accepted that defines what item is the parent of the new item and what attribute of that item should the new item be assigned to. In general, this will assume that the attribute targeted is multi-valued and a new item is appended onto the list of values for that attribute.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var kermit = store.newItem({name: \"Kermit\", color:[blue, green]});\n    \n```"
- name: data/api/Write#revert()
  id: dojo/data/api/write#1_10dojo_data_api_Write_revert
  summary: Discards any unsaved changes
  belongs_to: data/api/Write
  description: "### `revert` `()`\n\nDefined by [dojo/data/api/Write](write)\n\nDiscards any unsaved changes.\n\nDiscards any unsaved changes.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var success = store.revert();\n    \n```"
- name: data/api/Write#save()
  id: dojo/data/api/write#1_10dojo_data_api_Write_save
  summary: Saves to the server all the changes that have been made locally
  belongs_to: data/api/Write
  description: "### `save` `(keywordArgs)`\n\nDefined by [dojo/data/api/Write](write)\n\nSaves to the server all the changes that have been made locally. The save operation may take some time and is generally performed in an asynchronous fashion. The outcome of the save action is is passed into the set of supported callbacks for the save.\n\n[TABLE]\n\n**Returns:** any\n\nNothing. Since the saves are generally asynchronous, there is no need to return anything. All results are passed via callbacks.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      store.save({onComplete: onSave});\nstore.save({scope: fooObj, onComplete: onSave, onError: saveFailed});\n    \n```"
- name: data/api/Write#setValue()
  id: dojo/data/api/write#1_10dojo_data_api_Write_setValue
  summary: Sets the value of an attribute on an item
  belongs_to: data/api/Write
  description: "### `setValue` `(item,attribute,value)`\n\nDefined by [dojo/data/api/Write](write)\n\nSets the value of an attribute on an item. Replaces any previous value or values.\n\n|           |                            |                                                                   |\n|-----------|----------------------------|-------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                       |\n| item      | [dojo/data/api/Item](item) | The item to modify.                                               |\n| attribute | string                     | The attribute of the item to change represented as a string name. |\n| value     | almost anything            | The value to assign to the item.                                  |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var success = store.set(kermit, \"color\", \"green\");\n    \n```"
- name: data/api/Write#setValues()
  id: dojo/data/api/write#1_10dojo_data_api_Write_setValues
  summary: Adds each value in the values array as a value of the given attribute on the given item
  belongs_to: data/api/Write
  description: "### `setValues` `(item,attribute,values)`\n\nDefined by [dojo/data/api/Write](write)\n\nAdds each value in the *values* array as a value of the given attribute on the given item. Replaces any previous value or values. Calling store.setValues(x, y, \\[\\]) (with *values* as an empty array) has the same effect as calling store.unsetAttribute(x, y).\n\n|           |                            |                                                                   |\n|-----------|----------------------------|-------------------------------------------------------------------|\n| Parameter | Type                       | Description                                                       |\n| item      | [dojo/data/api/Item](item) | The item to modify.                                               |\n| attribute | string                     | The attribute of the item to change represented as a string name. |\n| values    | array                      | An array of values to assign to the attribute..                   |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var success = store.setValues(kermit, \"color\", [\"green\", \"aqua\"]);\nsuccess = store.setValues(kermit, \"color\", []);\nif (success){assert(!store.hasAttribute(kermit, \"color\"));}\n    \n```"
- name: data/api/Write#unsetAttribute()
  id: dojo/data/api/write#1_10dojo_data_api_Write_unsetAttribute
  summary: Deletes all the values of an attribute on an item
  belongs_to: data/api/Write
  description: "### `unsetAttribute` `(item,attribute)`\n\nDefined by [dojo/data/api/Write](write)\n\nDeletes all the values of an attribute on an item.\n\n|           |                            |                                                             |\n|-----------|----------------------------|-------------------------------------------------------------|\n| Parameter | Type                       | Description                                                 |\n| item      | [dojo/data/api/Item](item) | The item to modify.                                         |\n| attribute | string                     | The attribute of the item to unset represented as a string. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var success = store.unsetAttribute(kermit, \"color\");\nif (success){assert(!store.hasAttribute(kermit, \"color\"));}\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/api/Write.html](http://dojotoolkit.org/api/1.10/dojo/data/api/Write.html)"
- name: data/ItemFileReadStore
  id: dojo/data/itemfilereadstore
  summary: in the array of items that acts as the unique identifier for that item
  description: "# dojo/data/ItemFileReadStore\n\nExtends[dojo/Evented](../evented)\n\n## Summary\n\nThe ItemFileReadStore implements the [dojo/data/api/Read](api/read) API and reads data from JSON files that have contents in this format --\n\n``` javascript\n{ items: [\n    { name:'Kermit', color:'green', age:12, friends:['Gonzo', {_reference:{name:'Fozzie Bear'}}]},\n    { name:'Fozzie Bear', wears:['hat', 'tie']},\n    { name:'Miss Piggy', pets:'Foo-Foo'}\n]}\n```\n\nNote that it can also contain an 'identifier' property that specified which attribute on the items\n\nin the array of items that acts as the unique identifier for that item.\n\n## Usage\n\nvar foo = new ItemFileReadStore`(keywordParameters);`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\n[TABLE]\n\nSee the [dojo/data/ItemFileReadStore reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/ItemFileReadStore.html) for more information.\n\n## Properties\n\n### clearOnClose\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter to allow users to specify if a close call should force a reload or not. By default, it retains the old behavior of not clearing if close is called. But if set true, the store will be reset to default state. Note that by doing this, all item handles will become invalid and a new fetch must be issued.\n\n### data\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\n### failOk\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter for specifying that it is OK for the xhrGet call to fail silently.\n\n### hierarchical\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter to indicate to process data from the url as hierarchical (data items can contain other data items in js form). Default is true for backwards compatibility. False means only root items are processed as items, all child objects outside of type-mapped objects and those in specific reference format, are left straight JS data objects.\n\n### typeMap\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\n### url\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\n### urlPreventCache\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter to allow specifying if preventCache should be passed to the xhrGet call or not when loading data from a url. Note this does not mean the store calls the server on each fetch, only that the data load has preventCache set as an option. Added for tracker: \\#6072\n\n## Methods\n\n### `close``(request)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.close()\n\n[TABLE]\n\n### `containsValue``(item,attribute,value)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.containsValue()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n| value     | anything                       |             |\n\n**Returns:** undefined\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `errorHandler``(errorData,requestObject)`\n\nDefined by [dojo/data/util/simpleFetch](util/simplefetch)\n\nThe error handler when there is an error fetching items. This function should not be called directly and is used by simpleFetch.fetch().\n\n|               |        |             |\n|---------------|--------|-------------|\n| Parameter     | Type   | Description |\n| errorData     | Object |             |\n| requestObject | Object |             |\n\n### `fetch``(request)`\n\nDefined by [dojo/data/util/simpleFetch](util/simplefetch)\n\nThe simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development.\n\nThe simpleFetch mixin should work well for any datastore that can respond to a \\_fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a \\_fetchItems() method. The \\_fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The \\_fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The \\_fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The \\_fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the \\_fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.\n\nFor more information on this specific function, see [dojo/data/api/Read.fetch()](api/read#fetch)\n\n[TABLE]\n\n### `fetchHandler``(items,requestObject)`\n\nDefined by [dojo/data/util/simpleFetch](util/simplefetch)\n\nThe handler when items are successfully fetched. This function should not be called directly and is used by simpleFetch.fetch().\n\n|               |        |             |\n|---------------|--------|-------------|\n| Parameter     | Type   | Description |\n| items         | Array  |             |\n| requestObject | Object |             |\n\n### `fetchItemByIdentity``(keywordArgs)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Identity.fetchItemByIdentity()\n\n|             |        |             |\n|-------------|--------|-------------|\n| Parameter   | Type   | Description |\n| keywordArgs | Object |             |\n\n### `filter``(requestArgs,arrayOfItems,findCallback)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nThis method handles the basic filtering needs for ItemFile\\* based stores.\n\n|              |          |             |\n|--------------|----------|-------------|\n| Parameter    | Type     | Description |\n| requestArgs  | Object   |             |\n| arrayOfItems | item\\[\\] |             |\n| findCallback | Function |             |\n\n### `getAttributes``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getAttributes()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** Array\n\n### `getFeatures``()`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getFeatures()\n\n**Returns:** undefined\n\n### `getIdentity``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Identity.getIdentity()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** undefined \\| null\n\n### `getIdentityAttributes``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Identity.getIdentityAttributes()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** null \\| Array\n\n### `getLabel``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getLabel()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** undefined \\| number\n\n### `getLabelAttributes``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getLabelAttributes()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** Array \\| null\n\n### `getValue``(item,attribute,defaultValue)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getValue()\n\n[TABLE]\n\n**Returns:** value\n\n### `getValues``(item,attribute)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getValues()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n\n**Returns:** undefined\n\n### `hasAttribute``(item,attribute)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.hasAttribute()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n\n**Returns:** boolean\n\n### `isItem``(something)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.isItem()\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| something | anything |             |\n\n**Returns:** boolean\n\n### `isItemLoaded``(something)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.isItemLoaded()\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| something | anything |             |\n\n**Returns:** undefined\n\n### `loadItem``(keywordArgs)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.loadItem()\n\n|             |        |             |\n|-------------|--------|-------------|\n| Parameter   | Type   | Description |\n| keywordArgs | object |             |\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/ItemFileReadStore.html](http://dojotoolkit.org/api/1.10/dojo/data/ItemFileReadStore.html)"
- name: data/ItemFileReadStore#close()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_close
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `close` `(request)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.close()

    [TABLE]
- name: data/ItemFileReadStore#containsValue()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_containsValue
  summary: The error handler when there is an error fetching items
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `containsValue` `(item,attribute,value)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.containsValue()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |
    | value     | anything                       |             |

    **Returns:** undefined

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined

    ### `errorHandler` `(errorData,requestObject)`

    Defined by [dojo/data/util/simpleFetch](util/simplefetch)

    The error handler when there is an error fetching items. This function should not be called directly and is used by simpleFetch.fetch().

    |               |        |             |
    |---------------|--------|-------------|
    | Parameter     | Type   | Description |
    | errorData     | Object |             |
    | requestObject | Object |             |

    ### `fetch` `(request)`

    Defined by [dojo/data/util/simpleFetch](util/simplefetch)

    The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development.

    The simpleFetch mixin should work well for any datastore that can respond to a \_fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a \_fetchItems() method. The \_fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The \_fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The \_fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The \_fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the \_fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.

    For more information on this specific function, see [dojo/data/api/Read.fetch()](api/read#fetch)

    [TABLE]

    ### `fetchHandler` `(items,requestObject)`

    Defined by [dojo/data/util/simpleFetch](util/simplefetch)

    The handler when items are successfully fetched. This function should not be called directly and is used by simpleFetch.fetch().

    |               |        |             |
    |---------------|--------|-------------|
    | Parameter     | Type   | Description |
    | items         | Array  |             |
    | requestObject | Object |             |
- name: data/ItemFileReadStore#data
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_data
  summary: Parameter for specifying that it is OK for the xhrGet call to fail silently
  belongs_to: data/ItemFileReadStore
  description: |-
    ### data

    Defined by: [dojo/data/ItemFileReadStore](itemfilereadstore)

    ### failOk

    Defined by: [dojo/data/ItemFileReadStore](itemfilereadstore)

    Parameter for specifying that it is OK for the xhrGet call to fail silently.

    ### hierarchical

    Defined by: [dojo/data/ItemFileReadStore](itemfilereadstore)

    Parameter to indicate to process data from the url as hierarchical (data items can contain other data items in js form). Default is true for backwards compatibility. False means only root items are processed as items, all child objects outside of type-mapped objects and those in specific reference format, are left straight JS data objects.
- name: data/ItemFileReadStore#fetchItemByIdentity()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_fetchItemByIdentity
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `fetchItemByIdentity` `(keywordArgs)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Identity.fetchItemByIdentity()

    |             |        |             |
    |-------------|--------|-------------|
    | Parameter   | Type   | Description |
    | keywordArgs | Object |             |
- name: data/ItemFileReadStore#filter()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_filter
  summary: This method handles the basic filtering needs for ItemFile* based stores
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `filter` `(requestArgs,arrayOfItems,findCallback)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    This method handles the basic filtering needs for ItemFile\* based stores.

    |              |          |             |
    |--------------|----------|-------------|
    | Parameter    | Type     | Description |
    | requestArgs  | Object   |             |
    | arrayOfItems | item\[\] |             |
    | findCallback | Function |             |
- name: data/ItemFileReadStore#getAttributes()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getAttributes
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getAttributes` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getAttributes()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** Array
- name: data/ItemFileReadStore#getFeatures()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getFeatures
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getFeatures` `()`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getFeatures()

    **Returns:** undefined
- name: data/ItemFileReadStore#getIdentity()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getIdentity
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getIdentity` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Identity.getIdentity()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** undefined \| null
- name: data/ItemFileReadStore#getIdentityAttributes()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getIdentityAttributes
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getIdentityAttributes` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Identity.getIdentityAttributes()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** null \| Array
- name: data/ItemFileReadStore#getLabel()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getLabel
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getLabel` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getLabel()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** undefined \| number
- name: data/ItemFileReadStore#getLabelAttributes()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getLabelAttributes
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getLabelAttributes` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getLabelAttributes()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** Array \| null
- name: data/ItemFileReadStore#getValue()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getValue
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getValue` `(item,attribute,defaultValue)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getValue()

    [TABLE]

    **Returns:** value
- name: data/ItemFileReadStore#getValues()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_getValues
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `getValues` `(item,attribute)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getValues()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |

    **Returns:** undefined
- name: data/ItemFileReadStore#hasAttribute()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_hasAttribute
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `hasAttribute` `(item,attribute)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.hasAttribute()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |

    **Returns:** boolean
- name: data/ItemFileReadStore#isItem()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_isItem
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `isItem` `(something)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.isItem()

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | something | anything |             |

    **Returns:** boolean
- name: data/ItemFileReadStore#isItemLoaded()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_isItemLoaded
  summary: null
  belongs_to: data/ItemFileReadStore
  description: |-
    ### `isItemLoaded` `(something)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.isItemLoaded()

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | something | anything |             |

    **Returns:** undefined
- name: data/ItemFileReadStore#loadItem()
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_loadItem
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: data/ItemFileReadStore
  description: "### `loadItem` `(keywordArgs)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.loadItem()\n\n|             |        |             |\n|-------------|--------|-------------|\n| Parameter   | Type   | Description |\n| keywordArgs | object |             |\n\n### `on` `(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/ItemFileReadStore.html](http://dojotoolkit.org/api/1.10/dojo/data/ItemFileReadStore.html)"
- name: data/ItemFileReadStore#typeMap
  id: dojo/data/itemfilereadstore#1_10dojo_data_ItemFileReadStore_typeMap
  summary: Parameter to allow specifying if preventCache should be passed to the xhrGet call or not when loading data from a url
  belongs_to: data/ItemFileReadStore
  description: |-
    ### typeMap

    Defined by: [dojo/data/ItemFileReadStore](itemfilereadstore)

    ### url

    Defined by: [dojo/data/ItemFileReadStore](itemfilereadstore)

    ### urlPreventCache

    Defined by: [dojo/data/ItemFileReadStore](itemfilereadstore)

    Parameter to allow specifying if preventCache should be passed to the xhrGet call or not when loading data from a url. Note this does not mean the store calls the server on each fetch, only that the data load has preventCache set as an option. Added for tracker: \#6072

    ## Methods
- name: data/ItemFileWriteStore
  id: dojo/data/itemfilewritestore
  summary: See the dojo/data/ItemFileWriteStore reference documentation for more information
  description: "# dojo/data/ItemFileWriteStore\n\nExtends[dojo/data/ItemFileReadStore](itemfilereadstore)\n\n## Summary\n\nTODOC\n\n## Usage\n\nvar foo = new ItemFileWriteStore`(keywordParameters);`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\n[TABLE]\n\nSee the [dojo/data/ItemFileWriteStore reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/ItemFileWriteStore.html) for more information.\n\n## Properties\n\n### clearOnClose\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter to allow users to specify if a close call should force a reload or not. By default, it retains the old behavior of not clearing if close is called. But if set true, the store will be reset to default state. Note that by doing this, all item handles will become invalid and a new fetch must be issued.\n\n### data\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\n### failOk\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter for specifying that it is OK for the xhrGet call to fail silently.\n\n### hierarchical\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter to indicate to process data from the url as hierarchical (data items can contain other data items in js form). Default is true for backwards compatibility. False means only root items are processed as items, all child objects outside of type-mapped objects and those in specific reference format, are left straight JS data objects.\n\n### referenceIntegrity\n\nDefined by: [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\n### typeMap\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\n### url\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\n### urlPreventCache\n\nDefined by: [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nParameter to allow specifying if preventCache should be passed to the xhrGet call or not when loading data from a url. Note this does not mean the store calls the server on each fetch, only that the data load has preventCache set as an option. Added for tracker: \\#6072\n\n## Methods\n\n### `close``(request)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nOver-ride of base close function of ItemFileReadStore to add in check for store state.\n\nOver-ride of base close function of ItemFileReadStore to add in check for store state. If the store is still dirty (unsaved changes), then an error will be thrown instead of clearing the internal state for reload from the url.\n\n[TABLE]\n\n### `containsValue``(item,attribute,value)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.containsValue()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n| value     | anything                       |             |\n\n**Returns:** undefined\n\n### `deleteItem``(item)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.deleteItem()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** boolean\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `errorHandler``(errorData,requestObject)`\n\nDefined by [dojo/data/util/simpleFetch](util/simplefetch)\n\nThe error handler when there is an error fetching items. This function should not be called directly and is used by simpleFetch.fetch().\n\n|               |        |             |\n|---------------|--------|-------------|\n| Parameter     | Type   | Description |\n| errorData     | Object |             |\n| requestObject | Object |             |\n\n### `fetch``(request)`\n\nDefined by [dojo/data/util/simpleFetch](util/simplefetch)\n\nThe simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development.\n\nThe simpleFetch mixin should work well for any datastore that can respond to a \\_fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a \\_fetchItems() method. The \\_fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The \\_fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The \\_fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The \\_fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the \\_fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.\n\nFor more information on this specific function, see [dojo/data/api/Read.fetch()](api/read#fetch)\n\n[TABLE]\n\n### `fetchHandler``(items,requestObject)`\n\nDefined by [dojo/data/util/simpleFetch](util/simplefetch)\n\nThe handler when items are successfully fetched. This function should not be called directly and is used by simpleFetch.fetch().\n\n|               |        |             |\n|---------------|--------|-------------|\n| Parameter     | Type   | Description |\n| items         | Array  |             |\n| requestObject | Object |             |\n\n### `fetchItemByIdentity``(keywordArgs)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Identity.fetchItemByIdentity()\n\n|             |        |             |\n|-------------|--------|-------------|\n| Parameter   | Type   | Description |\n| keywordArgs | Object |             |\n\n### `filter``(requestArgs,arrayOfItems,findCallback)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nThis method handles the basic filtering needs for ItemFile\\* based stores.\n\n|              |          |             |\n|--------------|----------|-------------|\n| Parameter    | Type     | Description |\n| requestArgs  | Object   |             |\n| arrayOfItems | item\\[\\] |             |\n| findCallback | Function |             |\n\n### `getAttributes``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getAttributes()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** Array\n\n### `getFeatures``()`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getFeatures()\n\n**Returns:** undefined\n\n### `getIdentity``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Identity.getIdentity()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** undefined \\| null\n\n### `getIdentityAttributes``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Identity.getIdentityAttributes()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** null \\| Array\n\n### `getLabel``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getLabel()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** undefined \\| number\n\n### `getLabelAttributes``(item)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getLabelAttributes()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** Array \\| null\n\n### `getValue``(item,attribute,defaultValue)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getValue()\n\n[TABLE]\n\n**Returns:** value\n\n### `getValues``(item,attribute)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.getValues()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n\n**Returns:** undefined\n\n### `hasAttribute``(item,attribute)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.hasAttribute()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n\n**Returns:** boolean\n\n### `isDirty``(item)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.isDirty()\n\n[TABLE]\n\n**Returns:** undefined \\| boolean\n\n### `isItem``(something)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.isItem()\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| something | anything |             |\n\n**Returns:** boolean\n\n### `isItemLoaded``(something)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.isItemLoaded()\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| something | anything |             |\n\n**Returns:** undefined\n\n### `loadItem``(keywordArgs)`\n\nDefined by [dojo/data/ItemFileReadStore](itemfilereadstore)\n\nSee dojo/data/api/Read.loadItem()\n\n|             |        |             |\n|-------------|--------|-------------|\n| Parameter   | Type   | Description |\n| keywordArgs | object |             |\n\n### `newItem``(keywordArgs,parentInfo)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.newItem()\n\n[TABLE]\n\n**Returns:** object\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `revert``()`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.revert()\n\n**Returns:** boolean\n\n### `save``(keywordArgs)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.save()\n\n|             |        |             |\n|-------------|--------|-------------|\n| Parameter   | Type   | Description |\n| keywordArgs | object |             |\n\n### `setValue``(item,attribute,value)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.set()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n| value     | almost anything                |             |\n\n**Returns:** undefined\n\n### `setValues``(item,attribute,values)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.setValues()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n| values    | array                          |             |\n\n**Returns:** undefined\n\n### `unsetAttribute``(item,attribute)`\n\nDefined by [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee dojo/data/api/Write.unsetAttribute()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n\n**Returns:** undefined\n\n## Events\n\n### `onDelete``(deletedItem)`\n\nDefined by: [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee [dojo/data/api/Notification.onDelete()](api/notification#onDelete)\n\n|             |                                |             |\n|-------------|--------------------------------|-------------|\n| Parameter   | Type                           | Description |\n| deletedItem | [dojo/data/api/Item](api/item) |             |\n\n### `onNew``(newItem,parentInfo)`\n\nDefined by: [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee [dojo/data/api/Notification.onNew()](api/notification#onNew)\n\n[TABLE]\n\n### `onSet``(item,attribute,oldValue,newValue)`\n\nDefined by: [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee [dojo/data/api/Notification.onSet()](api/notification#onSet)\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n| oldValue  | object \\| array                |             |\n| newValue  | object \\| array                |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/ItemFileWriteStore.html](http://dojotoolkit.org/api/1.10/dojo/data/ItemFileWriteStore.html)"
- name: data/ItemFileWriteStore#close()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_close
  summary: Over-ride of base close function of ItemFileReadStore to add in check for store state
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `close` `(request)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    Over-ride of base close function of ItemFileReadStore to add in check for store state.

    Over-ride of base close function of ItemFileReadStore to add in check for store state. If the store is still dirty (unsaved changes), then an error will be thrown instead of clearing the internal state for reload from the url.

    [TABLE]

    ### `containsValue` `(item,attribute,value)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.containsValue()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |
    | value     | anything                       |             |

    **Returns:** undefined
- name: data/ItemFileWriteStore#deleteItem()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_deleteItem
  summary: The error handler when there is an error fetching items
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `deleteItem` `(item)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.deleteItem()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** boolean

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined

    ### `errorHandler` `(errorData,requestObject)`

    Defined by [dojo/data/util/simpleFetch](util/simplefetch)

    The error handler when there is an error fetching items. This function should not be called directly and is used by simpleFetch.fetch().

    |               |        |             |
    |---------------|--------|-------------|
    | Parameter     | Type   | Description |
    | errorData     | Object |             |
    | requestObject | Object |             |

    ### `fetch` `(request)`

    Defined by [dojo/data/util/simpleFetch](util/simplefetch)

    The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development.

    The simpleFetch mixin should work well for any datastore that can respond to a \_fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a \_fetchItems() method. The \_fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The \_fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The \_fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The \_fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the \_fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.

    For more information on this specific function, see [dojo/data/api/Read.fetch()](api/read#fetch)

    [TABLE]

    ### `fetchHandler` `(items,requestObject)`

    Defined by [dojo/data/util/simpleFetch](util/simplefetch)

    The handler when items are successfully fetched. This function should not be called directly and is used by simpleFetch.fetch().

    |               |        |             |
    |---------------|--------|-------------|
    | Parameter     | Type   | Description |
    | items         | Array  |             |
    | requestObject | Object |             |

    ### `fetchItemByIdentity` `(keywordArgs)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Identity.fetchItemByIdentity()

    |             |        |             |
    |-------------|--------|-------------|
    | Parameter   | Type   | Description |
    | keywordArgs | Object |             |

    ### `filter` `(requestArgs,arrayOfItems,findCallback)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    This method handles the basic filtering needs for ItemFile\* based stores.

    |              |          |             |
    |--------------|----------|-------------|
    | Parameter    | Type     | Description |
    | requestArgs  | Object   |             |
    | arrayOfItems | item\[\] |             |
    | findCallback | Function |             |

    ### `getAttributes` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getAttributes()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** Array

    ### `getFeatures` `()`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getFeatures()

    **Returns:** undefined

    ### `getIdentity` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Identity.getIdentity()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** undefined \| null

    ### `getIdentityAttributes` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Identity.getIdentityAttributes()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** null \| Array

    ### `getLabel` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getLabel()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** undefined \| number

    ### `getLabelAttributes` `(item)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getLabelAttributes()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** Array \| null

    ### `getValue` `(item,attribute,defaultValue)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getValue()

    [TABLE]

    **Returns:** value

    ### `getValues` `(item,attribute)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.getValues()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |

    **Returns:** undefined

    ### `hasAttribute` `(item,attribute)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.hasAttribute()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |

    **Returns:** boolean
- name: data/ItemFileWriteStore#isDirty()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_isDirty
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `isDirty` `(item)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.isDirty()

    [TABLE]

    **Returns:** undefined \| boolean

    ### `isItem` `(something)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.isItem()

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | something | anything |             |

    **Returns:** boolean

    ### `isItemLoaded` `(something)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.isItemLoaded()

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | something | anything |             |

    **Returns:** undefined

    ### `loadItem` `(keywordArgs)`

    Defined by [dojo/data/ItemFileReadStore](itemfilereadstore)

    See dojo/data/api/Read.loadItem()

    |             |        |             |
    |-------------|--------|-------------|
    | Parameter   | Type   | Description |
    | keywordArgs | object |             |
- name: data/ItemFileWriteStore#newItem()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_newItem
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `newItem` `(keywordArgs,parentInfo)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.newItem()

    [TABLE]

    **Returns:** object

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined
- name: data/ItemFileWriteStore#onDelete()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_onDelete
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `onDelete` `(deletedItem)`

    Defined by: [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See [dojo/data/api/Notification.onDelete()](api/notification#onDelete)

    |             |                                |             |
    |-------------|--------------------------------|-------------|
    | Parameter   | Type                           | Description |
    | deletedItem | [dojo/data/api/Item](api/item) |             |
- name: data/ItemFileWriteStore#onNew()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_onNew
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `onNew` `(newItem,parentInfo)`

    Defined by: [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See [dojo/data/api/Notification.onNew()](api/notification#onNew)

    [TABLE]
- name: data/ItemFileWriteStore#onSet()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_onSet
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: data/ItemFileWriteStore
  description: "### `onSet` `(item,attribute,oldValue,newValue)`\n\nDefined by: [dojo/data/ItemFileWriteStore](itemfilewritestore)\n\nSee [dojo/data/api/Notification.onSet()](api/notification#onSet)\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n| attribute | attribute-name-string          |             |\n| oldValue  | object \\| array                |             |\n| newValue  | object \\| array                |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/ItemFileWriteStore.html](http://dojotoolkit.org/api/1.10/dojo/data/ItemFileWriteStore.html)"
- name: data/ItemFileWriteStore#revert()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_revert
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `revert` `()`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.revert()

    **Returns:** boolean
- name: data/ItemFileWriteStore#save()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_save
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `save` `(keywordArgs)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.save()

    |             |        |             |
    |-------------|--------|-------------|
    | Parameter   | Type   | Description |
    | keywordArgs | object |             |
- name: data/ItemFileWriteStore#setValue()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_setValue
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `setValue` `(item,attribute,value)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.set()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |
    | value     | almost anything                |             |

    **Returns:** undefined
- name: data/ItemFileWriteStore#setValues()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_setValues
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `setValues` `(item,attribute,values)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.setValues()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |
    | values    | array                          |             |

    **Returns:** undefined
- name: data/ItemFileWriteStore#unsetAttribute()
  id: dojo/data/itemfilewritestore#1_10dojo_data_ItemFileWriteStore_unsetAttribute
  summary: null
  belongs_to: data/ItemFileWriteStore
  description: |-
    ### `unsetAttribute` `(item,attribute)`

    Defined by [dojo/data/ItemFileWriteStore](itemfilewritestore)

    See dojo/data/api/Write.unsetAttribute()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |
    | attribute | attribute-name-string          |             |

    **Returns:** undefined

    ## Events
- name: data/ObjectStore
  id: dojo/data/objectstore
  summary: A Dojo Data implementation that wraps Dojo object stores for backwards compatibility
  description: "# dojo/data/ObjectStore\n\nExtends[dojo/Evented](../evented)\n\n## Summary\n\nA Dojo Data implementation that wraps Dojo object stores for backwards compatibility.\n\n## Usage\n\nvar foo = new ObjectStore`(options);`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\n[TABLE]\n\nSee the [dojo/data/ObjectStore reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/data/ObjectStore.html) for more information.\n\n## Properties\n\n### labelProperty\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\n### objectStore\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\n## Methods\n\n### `changing``(object,_deleting)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nadds an object to the list of dirty objects. This object contains a reference to the object itself as well as a cloned and trimmed version of old object for use with revert.\n\n|            |         |                                                                                             |\n|------------|---------|---------------------------------------------------------------------------------------------|\n| Parameter  | Type    | Description                                                                                 |\n| object     | Object  | Indicates that the given object is changing and should be marked as dirty for the next save |\n| \\_deleting | Boolean |                                                                                             |\n\n### `close``(request)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nSee dojo/data/api/Read.close()\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| request   | undefined |             |\n\n**Returns:** undefined\n\n### `containsValue``(item,attribute,value)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nChecks to see if 'item' has 'value' at 'attribute'\n\n|           |          |                        |\n|-----------|----------|------------------------|\n| Parameter | Type     | Description            |\n| item      | Object   | The item to check      |\n| attribute | String   | The attribute to check |\n| value     | Anything | The value to look for  |\n\n**Returns:** boolean\n\n### `deleteItem``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\ndeletes item and any references to that item from the store.\n\n|           |           |                |\n|-----------|-----------|----------------|\n| Parameter | Type      | Description    |\n| item      | undefined | item to delete |\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `fetch``(args)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nSee dojo/data/api/Read.fetch()\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n### `fetchItemByIdentity``(args)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nfetch an item by its identity, by looking in our index of what we have loaded\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n### `getAttributes``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nGets the available attributes of an item's 'property' and returns it as an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| item      | Object |             |\n\n**Returns:** Array\n\n### `getFeatures``()`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nreturn the store feature set\n\n**Returns:** object\n\n### `getIdentity``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nreturns the identity of the given item See dojo/data/api/Read.getIdentity()\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| item      | undefined |             |\n\n**Returns:** undefined\n\n### `getIdentityAttributes``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nreturns the attributes which are used to make up the identity of an item. Basically returns this.objectStore.idProperty See dojo/data/api/Read.getIdentityAttributes()\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| item      | undefined |             |\n\n**Returns:** Array\n\n### `getLabel``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nSee dojo/data/api/Read.getLabel()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** undefined\n\n### `getLabelAttributes``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nSee dojo/data/api/Read.getLabelAttributes()\n\n|           |                                |             |\n|-----------|--------------------------------|-------------|\n| Parameter | Type                           | Description |\n| item      | [dojo/data/api/Item](api/item) |             |\n\n**Returns:** Array\n\n### `getValue``(item,property,defaultValue)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nGets the value of an item's 'property'\n\n[TABLE]\n\n**Returns:** value\n\nthe default value\n\n### `getValues``(item,property)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nGets the value of an item's 'property' and returns it. If this value is an array it is just returned, if not, the value is added to an array and that is returned.\n\n|           |        |                               |\n|-----------|--------|-------------------------------|\n| Parameter | Type   | Description                   |\n| item      | Object |                               |\n| property  | String | property to look up value for |\n\n**Returns:** Array\n\n### `hasAttribute``(item,attribute)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nChecks to see if item has attribute\n\n|           |        |                        |\n|-----------|--------|------------------------|\n| Parameter | Type   | Description            |\n| item      | Object | The item to check      |\n| attribute | String | The attribute to check |\n\n**Returns:** boolean\n\n### `isDirty``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nreturns true if the item is marked as dirty or true if there are any dirty items\n\n|           |        |                   |\n|-----------|--------|-------------------|\n| Parameter | Type   | Description       |\n| item      | Object | The item to check |\n\n**Returns:** boolean \\| undefined\n\n### `isItem``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nChecks to see if the argument is an item\n\n|           |        |                   |\n|-----------|--------|-------------------|\n| Parameter | Type   | Description       |\n| item      | Object | The item to check |\n\n**Returns:** boolean\n\n### `isItemLoaded``(item)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nChecks to see if the item is loaded.\n\n|           |        |                   |\n|-----------|--------|-------------------|\n| Parameter | Type   | Description       |\n| item      | Object | The item to check |\n\n**Returns:** undefined\n\n### `loadItem``(args)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nLoads an item and calls the callback handler. Note, that this will call the callback handler even if the item is loaded. Consequently, you can use loadItem to ensure that an item is loaded is situations when the item may or may not be loaded yet. If you access a value directly through property access, you can use this to load a lazy value as well (doesn't need to be an item).\n\n|           |        |                                |\n|-----------|--------|--------------------------------|\n| Parameter | Type   | Description                    |\n| args      | Object | See dojo/data/api/Read.fetch() |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nstore.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n```\n\n### `newItem``(data,parentInfo)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nadds a new item to the store at the specified point. Takes two parameters, data, and options.\n\n|            |           |                                   |\n|------------|-----------|-----------------------------------|\n| Parameter  | Type      | Description                       |\n| data       | Object    | See dojo/data/api/Write.newItem() |\n| parentInfo | undefined |                                   |\n\n**Returns:** Object\n\nSee dojo/data/api/Write.newItem()\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `revert``()`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nreturns any modified data to its original state prior to a save();\n\n### `save``(kwArgs)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nSaves the dirty data using object store provider. See dojo/data/api/Write for API.\n\n[TABLE]\n\n### `setValue``(item,attribute,value)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nsets 'attribute' on 'item' to 'value' See dojo/data/api/Write.setValue()\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| item      | undefined |             |\n| attribute | undefined |             |\n| value     | undefined |             |\n\n### `setValues``(item,attribute,values)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nsets 'attribute' on 'item' to 'value' value must be an array. See dojo/data/api/Write.setValues()\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| item      | undefined |             |\n| attribute | undefined |             |\n| values    | undefined |             |\n\n### `unsetAttribute``(item,attribute)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nunsets 'attribute' on 'item' See dojo/data/api/Write.unsetAttribute()\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| item      | undefined |             |\n| attribute | undefined |             |\n\n## Events\n\n### `onDelete``()`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nSee [dojo/data/api/Notification.onDelete()](api/notification#onDelete)\n\n## Examples\n\n### Example 1\n\n``` javascript\nstore.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n```\n\n### `onFetch``(results)`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nCalled when a fetch occurs\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| results   | undefined |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\nstore.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n```\n\n### `onNew``()`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nSee [dojo/data/api/Notification.onNew()](api/notification#onNew)\n\n## Examples\n\n### Example 1\n\n``` javascript\nstore.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n```\n\n### `onSet``()`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nSee [dojo/data/api/Notification.onSet()](api/notification#onSet)\n\n## Examples\n\n### Example 1\n\n``` javascript\nstore.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/ObjectStore.html](http://dojotoolkit.org/api/1.10/dojo/data/ObjectStore.html)"
- name: data/ObjectStore#changing()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_changing
  summary: adds an object to the list of dirty objects
  belongs_to: data/ObjectStore
  description: |-
    ### `changing` `(object,_deleting)`

    Defined by [dojo/data/ObjectStore](objectstore)

    adds an object to the list of dirty objects. This object contains a reference to the object itself as well as a cloned and trimmed version of old object for use with revert.

    |            |         |                                                                                             |
    |------------|---------|---------------------------------------------------------------------------------------------|
    | Parameter  | Type    | Description                                                                                 |
    | object     | Object  | Indicates that the given object is changing and should be marked as dirty for the next save |
    | \_deleting | Boolean |                                                                                             |
- name: data/ObjectStore#close()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_close
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `close` `(request)`

    Defined by [dojo/data/ObjectStore](objectstore)

    See dojo/data/api/Read.close()

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | request   | undefined |             |

    **Returns:** undefined
- name: data/ObjectStore#containsValue()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_containsValue
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `containsValue` `(item,attribute,value)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Checks to see if 'item' has 'value' at 'attribute'

    |           |          |                        |
    |-----------|----------|------------------------|
    | Parameter | Type     | Description            |
    | item      | Object   | The item to check      |
    | attribute | String   | The attribute to check |
    | value     | Anything | The value to look for  |

    **Returns:** boolean
- name: data/ObjectStore#deleteItem()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_deleteItem
  summary: deletes item and any references to that item from the store
  belongs_to: data/ObjectStore
  description: |-
    ### `deleteItem` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    deletes item and any references to that item from the store.

    |           |           |                |
    |-----------|-----------|----------------|
    | Parameter | Type      | Description    |
    | item      | undefined | item to delete |

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined
- name: data/ObjectStore#fetch()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_fetch
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `fetch` `(args)`

    Defined by [dojo/data/ObjectStore](objectstore)

    See dojo/data/api/Read.fetch()

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | args      | undefined |             |

    **Returns:** undefined
- name: data/ObjectStore#fetchItemByIdentity()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_fetchItemByIdentity
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `fetchItemByIdentity` `(args)`

    Defined by [dojo/data/ObjectStore](objectstore)

    fetch an item by its identity, by looking in our index of what we have loaded

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | args      | undefined |             |

    **Returns:** undefined
- name: data/ObjectStore#getAttributes()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getAttributes
  summary: Gets the available attributes of an item's 'property' and returns it as an array
  belongs_to: data/ObjectStore
  description: |-
    ### `getAttributes` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Gets the available attributes of an item's 'property' and returns it as an array.

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | item      | Object |             |

    **Returns:** Array
- name: data/ObjectStore#getFeatures()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getFeatures
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `getFeatures` `()`

    Defined by [dojo/data/ObjectStore](objectstore)

    return the store feature set

    **Returns:** object
- name: data/ObjectStore#getIdentity()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getIdentity
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `getIdentity` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    returns the identity of the given item See dojo/data/api/Read.getIdentity()

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | item      | undefined |             |

    **Returns:** undefined
- name: data/ObjectStore#getIdentityAttributes()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getIdentityAttributes
  summary: returns the attributes which are used to make up the identity of an item
  belongs_to: data/ObjectStore
  description: |-
    ### `getIdentityAttributes` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    returns the attributes which are used to make up the identity of an item. Basically returns this.objectStore.idProperty See dojo/data/api/Read.getIdentityAttributes()

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | item      | undefined |             |

    **Returns:** Array
- name: data/ObjectStore#getLabel()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getLabel
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `getLabel` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    See dojo/data/api/Read.getLabel()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** undefined
- name: data/ObjectStore#getLabelAttributes()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getLabelAttributes
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `getLabelAttributes` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    See dojo/data/api/Read.getLabelAttributes()

    |           |                                |             |
    |-----------|--------------------------------|-------------|
    | Parameter | Type                           | Description |
    | item      | [dojo/data/api/Item](api/item) |             |

    **Returns:** Array
- name: data/ObjectStore#getValue()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getValue
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `getValue` `(item,property,defaultValue)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Gets the value of an item's 'property'

    [TABLE]

    **Returns:** value

    the default value
- name: data/ObjectStore#getValues()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_getValues
  summary: Gets the value of an item's 'property' and returns it
  belongs_to: data/ObjectStore
  description: |-
    ### `getValues` `(item,property)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Gets the value of an item's 'property' and returns it. If this value is an array it is just returned, if not, the value is added to an array and that is returned.

    |           |        |                               |
    |-----------|--------|-------------------------------|
    | Parameter | Type   | Description                   |
    | item      | Object |                               |
    | property  | String | property to look up value for |

    **Returns:** Array
- name: data/ObjectStore#hasAttribute()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_hasAttribute
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `hasAttribute` `(item,attribute)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Checks to see if item has attribute

    |           |        |                        |
    |-----------|--------|------------------------|
    | Parameter | Type   | Description            |
    | item      | Object | The item to check      |
    | attribute | String | The attribute to check |

    **Returns:** boolean
- name: data/ObjectStore#isDirty()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_isDirty
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `isDirty` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    returns true if the item is marked as dirty or true if there are any dirty items

    |           |        |                   |
    |-----------|--------|-------------------|
    | Parameter | Type   | Description       |
    | item      | Object | The item to check |

    **Returns:** boolean \| undefined
- name: data/ObjectStore#isItem()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_isItem
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `isItem` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Checks to see if the argument is an item

    |           |        |                   |
    |-----------|--------|-------------------|
    | Parameter | Type   | Description       |
    | item      | Object | The item to check |

    **Returns:** boolean
- name: data/ObjectStore#isItemLoaded()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_isItemLoaded
  summary: Checks to see if the item is loaded
  belongs_to: data/ObjectStore
  description: |-
    ### `isItemLoaded` `(item)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Checks to see if the item is loaded.

    |           |        |                   |
    |-----------|--------|-------------------|
    | Parameter | Type   | Description       |
    | item      | Object | The item to check |

    **Returns:** undefined
- name: data/ObjectStore#loadItem()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_loadItem
  summary: Loads an item and calls the callback handler
  belongs_to: data/ObjectStore
  description: "### `loadItem` `(args)`\n\nDefined by [dojo/data/ObjectStore](objectstore)\n\nLoads an item and calls the callback handler. Note, that this will call the callback handler even if the item is loaded. Consequently, you can use loadItem to ensure that an item is loaded is situations when the item may or may not be loaded yet. If you access a value directly through property access, you can use this to load a lazy value as well (doesn't need to be an item).\n\n|           |        |                                |\n|-----------|--------|--------------------------------|\n| Parameter | Type   | Description                    |\n| args      | Object | See dojo/data/api/Read.fetch() |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      store.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n    \n```"
- name: data/ObjectStore#newItem()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_newItem
  summary: adds a new item to the store at the specified point
  belongs_to: data/ObjectStore
  description: |-
    ### `newItem` `(data,parentInfo)`

    Defined by [dojo/data/ObjectStore](objectstore)

    adds a new item to the store at the specified point. Takes two parameters, data, and options.

    |            |           |                                   |
    |------------|-----------|-----------------------------------|
    | Parameter  | Type      | Description                       |
    | data       | Object    | See dojo/data/api/Write.newItem() |
    | parentInfo | undefined |                                   |

    **Returns:** Object

    See dojo/data/api/Write.newItem()

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined
- name: data/ObjectStore#objectStore
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_objectStore
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### objectStore

    Defined by: [dojo/data/ObjectStore](objectstore)

    ## Methods
- name: data/ObjectStore#onDelete()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_onDelete
  summary: null
  belongs_to: data/ObjectStore
  description: "### `onDelete` `()`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nSee [dojo/data/api/Notification.onDelete()](api/notification#onDelete)\n\n## Examples\n\n### Example 1\n\n``` javascript\n      store.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n    \n```"
- name: data/ObjectStore#onFetch()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_onFetch
  summary: null
  belongs_to: data/ObjectStore
  description: "### `onFetch` `(results)`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nCalled when a fetch occurs\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| results   | undefined |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      store.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n    \n```"
- name: data/ObjectStore#onNew()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_onNew
  summary: null
  belongs_to: data/ObjectStore
  description: "### `onNew` `()`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nSee [dojo/data/api/Notification.onNew()](api/notification#onNew)\n\n## Examples\n\n### Example 1\n\n``` javascript\n      store.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n    \n```"
- name: data/ObjectStore#onSet()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_onSet
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: data/ObjectStore
  description: "### `onSet` `()`\n\nDefined by: [dojo/data/ObjectStore](objectstore)\n\nSee [dojo/data/api/Notification.onSet()](api/notification#onSet)\n\n## Examples\n\n### Example 1\n\n``` javascript\n      store.loadItem({\n    item: item, // this item may or may not be loaded\n    onItem: function(item){\n        // do something with the item\n    }\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/ObjectStore.html](http://dojotoolkit.org/api/1.10/dojo/data/ObjectStore.html)"
- name: data/ObjectStore#revert()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_revert
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `revert` `()`

    Defined by [dojo/data/ObjectStore](objectstore)

    returns any modified data to its original state prior to a save();
- name: data/ObjectStore#save()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_save
  summary: Saves the dirty data using object store provider
  belongs_to: data/ObjectStore
  description: |-
    ### `save` `(kwArgs)`

    Defined by [dojo/data/ObjectStore](objectstore)

    Saves the dirty data using object store provider. See dojo/data/api/Write for API.

    [TABLE]
- name: data/ObjectStore#setValue()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_setValue
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `setValue` `(item,attribute,value)`

    Defined by [dojo/data/ObjectStore](objectstore)

    sets 'attribute' on 'item' to 'value' See dojo/data/api/Write.setValue()

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | item      | undefined |             |
    | attribute | undefined |             |
    | value     | undefined |             |
- name: data/ObjectStore#setValues()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_setValues
  summary: sets 'attribute' on 'item' to 'value' value must be an array
  belongs_to: data/ObjectStore
  description: |-
    ### `setValues` `(item,attribute,values)`

    Defined by [dojo/data/ObjectStore](objectstore)

    sets 'attribute' on 'item' to 'value' value must be an array. See dojo/data/api/Write.setValues()

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | item      | undefined |             |
    | attribute | undefined |             |
    | values    | undefined |             |
- name: data/ObjectStore#unsetAttribute()
  id: dojo/data/objectstore#1_10dojo_data_ObjectStore_unsetAttribute
  summary: null
  belongs_to: data/ObjectStore
  description: |-
    ### `unsetAttribute` `(item,attribute)`

    Defined by [dojo/data/ObjectStore](objectstore)

    unsets 'attribute' on 'item' See dojo/data/api/Write.unsetAttribute()

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | item      | undefined |             |
    | attribute | undefined |             |

    ## Events
- name: data/util/filter
  id: dojo/data/util/filter
  summary: Helper function to convert a simple pattern to a regular expression for matching
  description: "# dojo/data/util/filter\n\n## Methods\n\n### `patternToRegExp``(pattern,ignoreCase)`\n\nDefined by [dojo/data/util/filter](filter)\n\nHelper function to convert a simple pattern to a regular expression for matching.\n\nReturns a regular expression object that conforms to the defined conversion rules. For example:\n\n- ca *-\\> /^ca.*$/\n- *ca* -\\> /^.*ca.*$/\n- *c\\\\*a *-\\> /^.*c\\*a.\\*$/\n- *c\\\\*a? *-\\> /^.*c\\*a..\\*$/\n\nand so on.\n\n[TABLE]\n\n**Returns:** instance\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/util/filter.html](http://dojotoolkit.org/api/1.10/dojo/data/util/filter.html)"
- name: data/util/filter#patternToRegExp()
  id: dojo/data/util/filter#1_10dojo_data_util_filter_patternToRegExp
  summary: Helper function to convert a simple pattern to a regular expression for matching
  belongs_to: data/util/filter
  description: "### `patternToRegExp` `(pattern,ignoreCase)`\n\nDefined by [dojo/data/util/filter](filter)\n\nHelper function to convert a simple pattern to a regular expression for matching.\n\nReturns a regular expression object that conforms to the defined conversion rules. For example:\n\n- ca *-\\> /^ca.*$/\n- *ca* -\\> /^.*ca.*$/\n- *c\\\\*a *-\\> /^.*c\\*a.\\*$/\n- *c\\\\*a? *-\\> /^.*c\\*a..\\*$/\n\nand so on.\n\n[TABLE]\n\n**Returns:** instance\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/util/filter.html](http://dojotoolkit.org/api/1.10/dojo/data/util/filter.html)"
- name: data/util/simpleFetch
  id: dojo/data/util/simplefetch
  summary: The error handler when there is an error fetching items
  description: "# dojo/data/util/simpleFetch\n\n## Methods\n\n### `errorHandler``(errorData,requestObject)`\n\nDefined by [dojo/data/util/simpleFetch](simplefetch)\n\nThe error handler when there is an error fetching items. This function should not be called directly and is used by simpleFetch.fetch().\n\n|               |        |             |\n|---------------|--------|-------------|\n| Parameter     | Type   | Description |\n| errorData     | Object |             |\n| requestObject | Object |             |\n\n### `fetch``(request)`\n\nDefined by [dojo/data/util/simpleFetch](simplefetch)\n\nThe simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development.\n\nThe simpleFetch mixin should work well for any datastore that can respond to a \\_fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a \\_fetchItems() method. The \\_fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The \\_fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The \\_fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The \\_fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the \\_fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.\n\nFor more information on this specific function, see [dojo/data/api/Read.fetch()](../api/read#fetch)\n\n[TABLE]\n\n### `fetchHandler``(items,requestObject)`\n\nDefined by [dojo/data/util/simpleFetch](simplefetch)\n\nThe handler when items are successfully fetched. This function should not be called directly and is used by simpleFetch.fetch().\n\n|               |        |             |\n|---------------|--------|-------------|\n| Parameter     | Type   | Description |\n| items         | Array  |             |\n| requestObject | Object |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/util/simpleFetch.html](http://dojotoolkit.org/api/1.10/dojo/data/util/simpleFetch.html)"
- name: data/util/simpleFetch#errorHandler()
  id: dojo/data/util/simplefetch#1_10dojo_data_util_simpleFetch_errorHandler
  summary: The error handler when there is an error fetching items
  belongs_to: data/util/simpleFetch
  description: |-
    ### `errorHandler` `(errorData,requestObject)`

    Defined by [dojo/data/util/simpleFetch](simplefetch)

    The error handler when there is an error fetching items. This function should not be called directly and is used by simpleFetch.fetch().

    |               |        |             |
    |---------------|--------|-------------|
    | Parameter     | Type   | Description |
    | errorData     | Object |             |
    | requestObject | Object |             |
- name: data/util/simpleFetch#fetch()
  id: dojo/data/util/simplefetch#1_10dojo_data_util_simpleFetch_fetch
  summary: The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development
  belongs_to: data/util/simpleFetch
  description: |-
    ### `fetch` `(request)`

    Defined by [dojo/data/util/simpleFetch](simplefetch)

    The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development.

    The simpleFetch mixin should work well for any datastore that can respond to a \_fetchItems() call by returning an array of all the found items that matched the query. The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set. For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a \_fetchItems() method. The \_fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The \_fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The \_fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren). The \_fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the \_fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.

    For more information on this specific function, see [dojo/data/api/Read.fetch()](../api/read#fetch)

    [TABLE]
- name: data/util/simpleFetch#fetchHandler()
  id: dojo/data/util/simplefetch#1_10dojo_data_util_simpleFetch_fetchHandler
  summary: The handler when items are successfully fetched
  belongs_to: data/util/simpleFetch
  description: "### `fetchHandler` `(items,requestObject)`\n\nDefined by [dojo/data/util/simpleFetch](simplefetch)\n\nThe handler when items are successfully fetched. This function should not be called directly and is used by simpleFetch.fetch().\n\n|               |        |             |\n|---------------|--------|-------------|\n| Parameter     | Type   | Description |\n| items         | Array  |             |\n| requestObject | Object |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/util/simpleFetch.html](http://dojotoolkit.org/api/1.10/dojo/data/util/simpleFetch.html)"
- name: data/util/sorter
  id: dojo/data/util/sorter
  summary: returns 1 if a > b, -1 if a < b, 0 if equal
  description: "# dojo/data/util/sorter\n\n## Methods\n\n### `basicComparator``(a,b)`\n\nDefined by [dojo/data/util/sorter](sorter)\n\nBasic comparison function that compares if an item is greater or less than another item\n\nreturns 1 if a \\> b, -1 if a \\< b, 0 if equal. 'null' values (null, undefined) are treated as larger values so that they're pushed to the end of the list. And compared to each other, null is equivalent to undefined.\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| a         | anything |             |\n| b         | anything |             |\n\n**Returns:** number\n\n### `createSortFunction``(sortSpec,store)`\n\nDefined by [dojo/data/util/sorter](sorter)\n\nHelper function to generate the sorting function based off the list of sort attributes.\n\nThe sort function creation will look for a property on the store called 'comparatorMap'. If it exists it will look in the mapping for comparisons function for the attributes. If one is found, it will use it instead of the basic comparator, which is typically used for strings, ints, booleans, and dates. Returns the sorting function for this particular list of attributes and sorting directions.\n\n[TABLE]\n\n**Returns:** Return an array of property names\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/util/sorter.html](http://dojotoolkit.org/api/1.10/dojo/data/util/sorter.html)"
- name: data/util/sorter#basicComparator()
  id: dojo/data/util/sorter#1_10dojo_data_util_sorter_basicComparator
  summary: returns 1 if a > b, -1 if a < b, 0 if equal
  belongs_to: data/util/sorter
  description: |-
    ### `basicComparator` `(a,b)`

    Defined by [dojo/data/util/sorter](sorter)

    Basic comparison function that compares if an item is greater or less than another item

    returns 1 if a \> b, -1 if a \< b, 0 if equal. 'null' values (null, undefined) are treated as larger values so that they're pushed to the end of the list. And compared to each other, null is equivalent to undefined.

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | a         | anything |             |
    | b         | anything |             |

    **Returns:** number
- name: data/util/sorter#createSortFunction()
  id: dojo/data/util/sorter#1_10dojo_data_util_sorter_createSortFunction
  summary: Helper function to generate the sorting function based off the list of sort attributes
  belongs_to: data/util/sorter
  description: "### `createSortFunction` `(sortSpec,store)`\n\nDefined by [dojo/data/util/sorter](sorter)\n\nHelper function to generate the sorting function based off the list of sort attributes.\n\nThe sort function creation will look for a property on the store called 'comparatorMap'. If it exists it will look in the mapping for comparisons function for the attributes. If one is found, it will use it instead of the basic comparator, which is typically used for strings, ints, booleans, and dates. Returns the sorting function for this particular list of attributes and sorting directions.\n\n[TABLE]\n\n**Returns:** Return an array of property names\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/data/util/sorter.html](http://dojotoolkit.org/api/1.10/dojo/data/util/sorter.html)"
- name: date
  id: dojo/date
  summary: See the dojo/date reference documentation for more information
  description: "# dojo/date\n\n## Summary\n\nDate manipulation utilities\n\nSee the [dojo/date reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/date.html) for more information.\n\n## Methods\n\n### `add``(date,interval,amount)`\n\nDefined by [dojo/date](date)\n\nAdd to a Date in intervals of different size, from milliseconds to years\n\n|           |        |                                                                                                                                                           |\n|-----------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                               |\n| date      | Date   | Date object to start with                                                                                                                                 |\n| interval  | String | A string representing the interval. One of the following: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"quarter\", \"week\", \"weekday\" |\n| amount    | int    | How much to add to the date.                                                                                                                              |\n\n**Returns:** instance\n\n### `compare``(date1,date2,portion)`\n\nDefined by [dojo/date](date)\n\nCompare two date objects by date, time, or both.\n\nReturns 0 if equal, positive if a \\> b, else negative.\n\n[TABLE]\n\n**Returns:** number\n\n### `difference``(date1,date2,interval)`\n\nDefined by [dojo/date](date)\n\nGet the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `getDaysInMonth``(dateObject)`\n\nDefined by [dojo/date](date)\n\nReturns the number of days in the month used by dateObject\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** number \\| undefined\n\n### `getTimezoneName``(dateObject)`\n\nDefined by [dojo/date](date)\n\nGet the user's time zone as provided by the browser\n\nTry to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See <http://www.twinsun.com/tz/tz-link.htm> Note: results may be inconsistent across browsers.\n\n|            |      |                                                                   |\n|------------|------|-------------------------------------------------------------------|\n| Parameter  | Type | Description                                                       |\n| dateObject | Date | Needed because the timezone may vary with time (daylight savings) |\n\n**Returns:** undefined\n\n### `isLeapYear``(dateObject)`\n\nDefined by [dojo/date](date)\n\nDetermines if the year of the dateObject is a leap year\n\nLeap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/date.html](http://dojotoolkit.org/api/1.10/dojo/date.html)"
- name: date#add()
  id: dojo/date#1_10dojo_date_add
  summary: null
  belongs_to: date
  description: |-
    ### `add` `(date,interval,amount)`

    Defined by [dojo/date](date)

    Add to a Date in intervals of different size, from milliseconds to years

    |           |        |                                                                                                                                                           |
    |-----------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                                                                                               |
    | date      | Date   | Date object to start with                                                                                                                                 |
    | interval  | String | A string representing the interval. One of the following: "year", "month", "day", "hour", "minute", "second", "millisecond", "quarter", "week", "weekday" |
    | amount    | int    | How much to add to the date.                                                                                                                              |

    **Returns:** instance
- name: date#compare()
  id: dojo/date#1_10dojo_date_compare
  summary: Compare two date objects by date, time, or both
  belongs_to: date
  description: |-
    ### `compare` `(date1,date2,portion)`

    Defined by [dojo/date](date)

    Compare two date objects by date, time, or both.

    Returns 0 if equal, positive if a \> b, else negative.

    [TABLE]

    **Returns:** number
- name: date#difference()
  id: dojo/date#1_10dojo_date_difference
  summary: Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer
  belongs_to: date
  description: |-
    ### `difference` `(date1,date2,interval)`

    Defined by [dojo/date](date)

    Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.

    [TABLE]

    **Returns:** undefined
- name: date#getDaysInMonth()
  id: dojo/date#1_10dojo_date_getDaysInMonth
  summary: null
  belongs_to: date
  description: |-
    ### `getDaysInMonth` `(dateObject)`

    Defined by [dojo/date](date)

    Returns the number of days in the month used by dateObject

    |            |      |             |
    |------------|------|-------------|
    | Parameter  | Type | Description |
    | dateObject | Date |             |

    **Returns:** number \| undefined
- name: date#getTimezoneName()
  id: dojo/date#1_10dojo_date_getTimezoneName
  summary: Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone
  belongs_to: date
  description: |-
    ### `getTimezoneName` `(dateObject)`

    Defined by [dojo/date](date)

    Get the user's time zone as provided by the browser

    Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See <http://www.twinsun.com/tz/tz-link.htm> Note: results may be inconsistent across browsers.

    |            |      |                                                                   |
    |------------|------|-------------------------------------------------------------------|
    | Parameter  | Type | Description                                                       |
    | dateObject | Date | Needed because the timezone may vary with time (daylight savings) |

    **Returns:** undefined
- name: date#isLeapYear()
  id: dojo/date#1_10dojo_date_isLeapYear
  summary: 'Leap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400'
  belongs_to: date
  description: "### `isLeapYear` `(dateObject)`\n\nDefined by [dojo/date](date)\n\nDetermines if the year of the dateObject is a leap year\n\nLeap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/date.html](http://dojotoolkit.org/api/1.10/dojo/date.html)"
- name: date/locale
  id: dojo/date/locale
  summary: This modules defines dojo/date/locale, localization methods for Date
  description: "# dojo/date/locale\n\n## Summary\n\nThis modules defines [dojo/date/locale](locale), localization methods for Date.\n\nSee the [dojo/date/locale reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/date/locale.html) for more information.\n\n## Methods\n\n### `addCustomFormats``(packageName,bundleName)`\n\nDefined by [dojo/date/locale](locale)\n\nAdd a reference to a bundle containing localized custom formats to be used by date/time formatting and parsing routines.\n\nThe user may add custom localized formats where the bundle has properties following the same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx` The pattern string should match the format used by the CLDR. See [dojo/date/locale.format()](locale#format) for details. The resources must be loaded by dojo.requireLocalization() prior to use\n\n|             |        |             |\n|-------------|--------|-------------|\n| Parameter   | Type   | Description |\n| packageName | String |             |\n| bundleName  | String |             |\n\n### `format``(dateObject,options)`\n\nDefined by [dojo/date/locale](locale)\n\nFormat a Date object as a String, using locale-specific settings.\n\nCreate a string from a Date object using a known localized pattern. By default, this method formats both date and time from dateObject. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with \"full\" used by default. Custom patterns may be used or registered with translations using the [dojo/date/locale.addCustomFormats()](locale#addCustomFormats) method. Formatting patterns are implemented using [the syntax described at unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `getNames``(item,type,context,locale)`\n\nDefined by [dojo/date/locale](locale)\n\nUsed to get localized strings from dojo.cldr for day or month names.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `isWeekend``(dateObject,locale)`\n\nDefined by [dojo/date/locale](locale)\n\nDetermines if the date falls on a weekend, according to local custom.\n\n[TABLE]\n\n**Returns:** boolean\n\n### `parse``(value,options)`\n\nDefined by [dojo/date/locale](locale)\n\nConvert a properly formatted string to a primitive Date object, using locale-specific settings.\n\nCreate a Date object from a string using a known localized pattern. By default, this method parses looking for both date and time in the string. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with \"full\" used by default. Custom patterns may be used or registered with translations using the [dojo/date/locale.addCustomFormats()](locale#addCustomFormats) method.\n\nFormatting patterns are implemented using [the syntax described at unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns) When two digit years are used, a century is chosen according to a sliding window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns. year \\< 100CE requires strict mode.\n\n[TABLE]\n\n**Returns:** null \\| undefined\n\n### `regexp``(options)`\n\nDefined by [dojo/date/locale](locale)\n\nBuilds the regular needed to parse a localized date\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/date/locale.html](http://dojotoolkit.org/api/1.10/dojo/date/locale.html)"
- name: date/locale#addCustomFormats()
  id: dojo/date/locale#1_10dojo_date_locale_addCustomFormats
  summary: Add a reference to a bundle containing localized custom formats to be used by date/time formatting and parsing routines
  belongs_to: date/locale
  description: |-
    ### `addCustomFormats` `(packageName,bundleName)`

    Defined by [dojo/date/locale](locale)

    Add a reference to a bundle containing localized custom formats to be used by date/time formatting and parsing routines.

    The user may add custom localized formats where the bundle has properties following the same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx` The pattern string should match the format used by the CLDR. See [dojo/date/locale.format()](locale#format) for details. The resources must be loaded by dojo.requireLocalization() prior to use

    |             |        |             |
    |-------------|--------|-------------|
    | Parameter   | Type   | Description |
    | packageName | String |             |
    | bundleName  | String |             |
- name: date/locale#format()
  id: dojo/date/locale#1_10dojo_date_locale_format
  summary: Format a Date object as a String, using locale-specific settings
  belongs_to: date/locale
  description: |-
    ### `format` `(dateObject,options)`

    Defined by [dojo/date/locale](locale)

    Format a Date object as a String, using locale-specific settings.

    Create a string from a Date object using a known localized pattern. By default, this method formats both date and time from dateObject. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with "full" used by default. Custom patterns may be used or registered with translations using the [dojo/date/locale.addCustomFormats()](locale#addCustomFormats) method. Formatting patterns are implemented using [the syntax described at unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)

    [TABLE]

    **Returns:** undefined
- name: date/locale#getNames()
  id: dojo/date/locale#1_10dojo_date_locale_getNames
  summary: Used to get localized strings from dojo.cldr for day or month names
  belongs_to: date/locale
  description: |-
    ### `getNames` `(item,type,context,locale)`

    Defined by [dojo/date/locale](locale)

    Used to get localized strings from dojo.cldr for day or month names.

    [TABLE]

    **Returns:** undefined
- name: date/locale#isWeekend()
  id: dojo/date/locale#1_10dojo_date_locale_isWeekend
  summary: Determines if the date falls on a weekend, according to local custom
  belongs_to: date/locale
  description: |-
    ### `isWeekend` `(dateObject,locale)`

    Defined by [dojo/date/locale](locale)

    Determines if the date falls on a weekend, according to local custom.

    [TABLE]

    **Returns:** boolean
- name: date/locale#parse()
  id: dojo/date/locale#1_10dojo_date_locale_parse
  summary: Convert a properly formatted string to a primitive Date object, using locale-specific settings
  belongs_to: date/locale
  description: |-
    ### `parse` `(value,options)`

    Defined by [dojo/date/locale](locale)

    Convert a properly formatted string to a primitive Date object, using locale-specific settings.

    Create a Date object from a string using a known localized pattern. By default, this method parses looking for both date and time in the string. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with "full" used by default. Custom patterns may be used or registered with translations using the [dojo/date/locale.addCustomFormats()](locale#addCustomFormats) method.

    Formatting patterns are implemented using [the syntax described at unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns) When two digit years are used, a century is chosen according to a sliding window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns. year \< 100CE requires strict mode.

    [TABLE]

    **Returns:** null \| undefined
- name: date/locale#regexp()
  id: dojo/date/locale#1_10dojo_date_locale_regexp
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: date/locale
  description: "### `regexp` `(options)`\n\nDefined by [dojo/date/locale](locale)\n\nBuilds the regular needed to parse a localized date\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/date/locale.html](http://dojotoolkit.org/api/1.10/dojo/date/locale.html)"
- name: date/locale.__FormatOptions
  id: dojo/date/locale.__formatoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/date/locale.\\_\\_FormatOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new locale.__FormatOptions()`\n\nSee the [dojo/date/locale.\\_\\_FormatOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/date.html) for more information.\n\n## Properties\n\n### am\n\nDefined by: [dojo/date/locale](locale)\n\noverride strings for am in times\n\n### datePattern\n\nDefined by: [dojo/date/locale](locale)\n\noverride pattern with this string\n\n### formatLength\n\nDefined by: [dojo/date/locale](locale)\n\nchoice of long, short, medium or full (plus any custom additions). Defaults to 'short'\n\n### fullYear\n\nDefined by: [dojo/date/locale](locale)\n\n(format only) use 4 digit years whenever 2 digit years are called for\n\n### locale\n\nDefined by: [dojo/date/locale](locale)\n\noverride the locale used to determine formatting rules\n\n### pm\n\nDefined by: [dojo/date/locale](locale)\n\noverride strings for pm in times\n\n### selector\n\nDefined by: [dojo/date/locale](locale)\n\nchoice of 'time','date' (default: date and time)\n\n### strict\n\nDefined by: [dojo/date/locale](locale)\n\n(parse only) strict parsing, off by default\n\n### timePattern\n\nDefined by: [dojo/date/locale](locale)\n\noverride pattern with this string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/date/locale.\\_\\_FormatOptions.html](http://dojotoolkit.org/api/1.10/dojo/date/locale.__FormatOptions.html)"
- name: date/stamp
  id: dojo/date/stamp
  summary: See the dojo/date/stamp reference documentation for more information
  description: "# dojo/date/stamp\n\n## Summary\n\nTODOC\n\nSee the [dojo/date/stamp reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/date/stamp.html) for more information.\n\n## Properties\n\n## Methods\n\n### `fromISOString``(formattedString,defaultTime)`\n\nDefined by [dojo/date/stamp](stamp)\n\nReturns a Date object given a string formatted according to a subset of the ISO-8601 standard.\n\nAccepts a string formatted according to a profile of ISO8601 as defined by [RFC3339](http://www.ietf.org/rfc/rfc3339.txt), except that partial input is allowed. Can also process dates as specified [by the W3C](http://www.w3.org/TR/NOTE-datetime) The following combinations are valid:\n\n- dates only\n  - yyyy\n  - yyyy-MM\n  - yyyy-MM-dd\n- times only, with an optional time zone appended\n  - THH:mm\n  - THH:mm:ss\n  - THH:mm:ss.SSS\n- and \"datetimes\" which could be any combination of the above\n\ntimezones may be specified as Z (for UTC) or +/- followed by a time expression HH:mm Assumes the local time zone if not specified. Does not validate. Improperly formatted input may return null. Arguments which are out of bounds will be handled by the Date constructor (e.g. January 32nd typically gets resolved to February 1st) Only years between 100 and 9999 are supported.\n\n[TABLE]\n\n**Returns:** instance\n\n### `toISOString``(dateObject,options)`\n\nDefined by [dojo/date/stamp](stamp)\n\nFormat a Date object as a string according a subset of the ISO-8601 standard\n\nWhen options.selector is omitted, output follows [RFC3339](http://www.ietf.org/rfc/rfc3339.txt) The local time zone is included as an offset from GMT, except when selector=='time' (time without a date) Does not check bounds. Only years between 100 and 9999 are supported.\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/date/stamp.html](http://dojotoolkit.org/api/1.10/dojo/date/stamp.html)"
- name: date/stamp#fromISOString()
  id: dojo/date/stamp#1_10dojo_date_stamp_fromISOString
  summary: Returns a Date object given a string formatted according to a subset of the ISO-8601 standard
  belongs_to: date/stamp
  description: |-
    ### `fromISOString` `(formattedString,defaultTime)`

    Defined by [dojo/date/stamp](stamp)

    Returns a Date object given a string formatted according to a subset of the ISO-8601 standard.

    Accepts a string formatted according to a profile of ISO8601 as defined by [RFC3339](http://www.ietf.org/rfc/rfc3339.txt), except that partial input is allowed. Can also process dates as specified [by the W3C](http://www.w3.org/TR/NOTE-datetime) The following combinations are valid:

    - dates only
      - yyyy
      - yyyy-MM
      - yyyy-MM-dd
    - times only, with an optional time zone appended
      - THH:mm
      - THH:mm:ss
      - THH:mm:ss.SSS
    - and "datetimes" which could be any combination of the above

    timezones may be specified as Z (for UTC) or +/- followed by a time expression HH:mm Assumes the local time zone if not specified. Does not validate. Improperly formatted input may return null. Arguments which are out of bounds will be handled by the Date constructor (e.g. January 32nd typically gets resolved to February 1st) Only years between 100 and 9999 are supported.

    [TABLE]

    **Returns:** instance
- name: date/stamp#toISOString()
  id: dojo/date/stamp#1_10dojo_date_stamp_toISOString
  summary: When options.selector is omitted, output follows RFC3339 The local time zone is included as an offset from GMT, except when selector=='time' (time without a date) Does not check bounds
  belongs_to: date/stamp
  description: "### `toISOString` `(dateObject,options)`\n\nDefined by [dojo/date/stamp](stamp)\n\nFormat a Date object as a string according a subset of the ISO-8601 standard\n\nWhen options.selector is omitted, output follows [RFC3339](http://www.ietf.org/rfc/rfc3339.txt) The local time zone is included as an offset from GMT, except when selector=='time' (time without a date) Does not check bounds. Only years between 100 and 9999 are supported.\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/date/stamp.html](http://dojotoolkit.org/api/1.10/dojo/date/stamp.html)"
- name: debounce
  id: dojo/debounce
  summary: Create a function that will only execute after wait milliseconds of repeated execution
  description: "# dojo/debounce\n\n## Summary\n\nCreate a function that will only execute after `wait` milliseconds\n\nCreate a function that will only execute after `wait` milliseconds of repeated execution. Useful for delaying some event action slightly to allow for rapidly-firing events such as window.resize, node.mousemove and so on.\n\n## Usage\n\ndebounce`(cb,wait);`\n\n|           |          |                                                                                                                                 |\n|-----------|----------|---------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type     | Description                                                                                                                     |\n| cb        | Function | A callback to fire. Like hitch() and partial(), arguments passed to the returned function curry along to the original callback. |\n| wait      | Integer  | Time to spend caching executions before actually executing.                                                                     |\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/debounce.html](http://dojotoolkit.org/api/1.10/dojo/debounce.html)"
- name: Deferred
  id: dojo/deferred
  summary: Creates a new deferred
  description: "# dojo/Deferred\n\n## Summary\n\nCreates a new deferred. This API is preferred over [dojo/\\_base/Deferred](_base/deferred).\n\nCreates a new deferred, as an abstraction over (primarily) asynchronous operations. The deferred is the private interface that should not be returned to calling code. That's what the `promise` is for. See [dojo/promise/Promise](promise/promise).\n\n## Usage\n\nDeferred`(canceler);`\n\n[TABLE]\n\nSee the [dojo/Deferred reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/Deferred.html) for more information.\n\n## Properties\n\n### promise\n\nDefined by: [dojo/Deferred](deferred)\n\n## Methods\n\n### `cancel``(reason,strict)`\n\nDefined by [dojo/Deferred](deferred)\n\nInform the deferred it may cancel its asynchronous operation.\n\nInform the deferred it may cancel its asynchronous operation. The deferred's (optional) canceler is invoked and the deferred will be left in a rejected state. Can affect other promises that originate with the same deferred.\n\n[TABLE]\n\n**Returns:** any\n\nReturns the rejection reason if the deferred was canceled normally.\n\n### `isCanceled``()`\n\nDefined by [dojo/Deferred](deferred)\n\nChecks whether the deferred has been canceled.\n\n**Returns:** Boolean\n\n### `isFulfilled``()`\n\nDefined by [dojo/Deferred](deferred)\n\nChecks whether the deferred has been resolved or rejected.\n\n**Returns:** Boolean\n\n### `isRejected``()`\n\nDefined by [dojo/Deferred](deferred)\n\nChecks whether the deferred has been rejected.\n\n**Returns:** Boolean\n\n### `isResolved``()`\n\nDefined by [dojo/Deferred](deferred)\n\nChecks whether the deferred has been resolved.\n\n**Returns:** Boolean\n\n### `progress``(update,strict)`\n\nDefined by [dojo/Deferred](deferred)\n\nEmit a progress update on the deferred.\n\nEmit a progress update on the deferred. Progress updates can be used to communicate updates about the asynchronous operation before it has finished.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise)\n\nReturns the original promise for the deferred.\n\n### `reject``(error,strict)`\n\nDefined by [dojo/Deferred](deferred)\n\nReject the deferred.\n\nReject the deferred, putting it in an error state.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise) \\| instance\n\nReturns the original promise for the deferred.\n\n### `resolve``(value,strict)`\n\nDefined by [dojo/Deferred](deferred)\n\nResolve the deferred.\n\nResolve the deferred, putting it in a success state.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise)\n\nReturns the original promise for the deferred.\n\n### `then``(callback,errback,progback)`\n\nDefined by [dojo/Deferred](deferred)\n\nAdd new callbacks to the deferred.\n\nAdd new callbacks to the deferred. Callbacks can be added before or after the deferred is fulfilled.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise)\n\nReturns a new promise for the result of the callback(s). This can be used for chaining many asynchronous operations.\n\n### `toString``()`\n\nDefined by [dojo/Deferred](deferred)\n\n**Returns:** String\n\nReturns `[object Deferred]`.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/Deferred.html](http://dojotoolkit.org/api/1.10/dojo/Deferred.html)"
- name: Deferred#cancel()
  id: dojo/deferred#1_10dojo_Deferred_cancel
  summary: Inform the deferred it may cancel its asynchronous operation
  belongs_to: Deferred
  description: |-
    ### `cancel` `(reason,strict)`

    Defined by [dojo/Deferred](deferred)

    Inform the deferred it may cancel its asynchronous operation.

    Inform the deferred it may cancel its asynchronous operation. The deferred's (optional) canceler is invoked and the deferred will be left in a rejected state. Can affect other promises that originate with the same deferred.

    [TABLE]

    **Returns:** any

    Returns the rejection reason if the deferred was canceled normally.
- name: Deferred#isCanceled()
  id: dojo/deferred#1_10dojo_Deferred_isCanceled
  summary: Checks whether the deferred has been canceled
  belongs_to: Deferred
  description: |-
    ### `isCanceled` `()`

    Defined by [dojo/Deferred](deferred)

    Checks whether the deferred has been canceled.

    **Returns:** Boolean
- name: Deferred#isFulfilled()
  id: dojo/deferred#1_10dojo_Deferred_isFulfilled
  summary: Checks whether the deferred has been resolved or rejected
  belongs_to: Deferred
  description: |-
    ### `isFulfilled` `()`

    Defined by [dojo/Deferred](deferred)

    Checks whether the deferred has been resolved or rejected.

    **Returns:** Boolean
- name: Deferred#isRejected()
  id: dojo/deferred#1_10dojo_Deferred_isRejected
  summary: Checks whether the deferred has been rejected
  belongs_to: Deferred
  description: |-
    ### `isRejected` `()`

    Defined by [dojo/Deferred](deferred)

    Checks whether the deferred has been rejected.

    **Returns:** Boolean
- name: Deferred#isResolved()
  id: dojo/deferred#1_10dojo_Deferred_isResolved
  summary: Checks whether the deferred has been resolved
  belongs_to: Deferred
  description: |-
    ### `isResolved` `()`

    Defined by [dojo/Deferred](deferred)

    Checks whether the deferred has been resolved.

    **Returns:** Boolean
- name: Deferred#progress()
  id: dojo/deferred#1_10dojo_Deferred_progress
  summary: Emit a progress update on the deferred
  belongs_to: Deferred
  description: |-
    ### `progress` `(update,strict)`

    Defined by [dojo/Deferred](deferred)

    Emit a progress update on the deferred.

    Emit a progress update on the deferred. Progress updates can be used to communicate updates about the asynchronous operation before it has finished.

    [TABLE]

    **Returns:** [dojo/promise/Promise](promise/promise)

    Returns the original promise for the deferred.
- name: Deferred#promise
  id: dojo/deferred#1_10dojo_Deferred_promise
  summary: null
  belongs_to: Deferred
  description: |-
    ### promise

    Defined by: [dojo/Deferred](deferred)

    ## Methods
- name: Deferred#reject()
  id: dojo/deferred#1_10dojo_Deferred_reject
  summary: Reject the deferred
  belongs_to: Deferred
  description: |-
    ### `reject` `(error,strict)`

    Defined by [dojo/Deferred](deferred)

    Reject the deferred.

    Reject the deferred, putting it in an error state.

    [TABLE]

    **Returns:** [dojo/promise/Promise](promise/promise) \| instance

    Returns the original promise for the deferred.
- name: Deferred#resolve()
  id: dojo/deferred#1_10dojo_Deferred_resolve
  summary: Resolve the deferred
  belongs_to: Deferred
  description: |-
    ### `resolve` `(value,strict)`

    Defined by [dojo/Deferred](deferred)

    Resolve the deferred.

    Resolve the deferred, putting it in a success state.

    [TABLE]

    **Returns:** [dojo/promise/Promise](promise/promise)

    Returns the original promise for the deferred.
- name: Deferred#then()
  id: dojo/deferred#1_10dojo_Deferred_then
  summary: Add new callbacks to the deferred
  belongs_to: Deferred
  description: |-
    ### `then` `(callback,errback,progback)`

    Defined by [dojo/Deferred](deferred)

    Add new callbacks to the deferred.

    Add new callbacks to the deferred. Callbacks can be added before or after the deferred is fulfilled.

    [TABLE]

    **Returns:** [dojo/promise/Promise](promise/promise)

    Returns a new promise for the result of the callback(s). This can be used for chaining many asynchronous operations.
- name: Deferred#toString()
  id: dojo/deferred#1_10dojo_Deferred_toString
  summary: Returns [object Deferred]
  belongs_to: Deferred
  description: "### `toString` `()`\n\nDefined by [dojo/Deferred](deferred)\n\n**Returns:** String\n\nReturns `[object Deferred]`.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/Deferred.html](http://dojotoolkit.org/api/1.10/dojo/Deferred.html)"
- name: DeferredList
  id: dojo/deferredlist
  summary: Deprecated, use dojo/promise/all instead
  description: "# dojo/DeferredList\n\n## Summary\n\nDeprecated, use [dojo/promise/all](promise/all) instead. Provides event handling for a group of Deferred objects.\n\nDeferredList takes an array of existing deferreds and returns a new deferred of its own this new deferred will typically have its callback fired when all of the deferreds in the given list have fired their own deferreds. The parameters `fireOnOneCallback` and fireOnOneErrback, will fire before all the deferreds as appropriate\n\n[TABLE]\n\nSee the [dojo/DeferredList reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/DeferredList.html) for more information.\n\n## Methods\n\n### `gatherResults``(deferredList)`\n\nDefined by [dojo/DeferredList](deferredlist)\n\nGathers the results of the deferreds for packaging as the parameters to the Deferred Lists' callback\n\n|              |                                   |                                                             |\n|--------------|-----------------------------------|-------------------------------------------------------------|\n| Parameter    | Type                              | Description                                                 |\n| deferredList | [dojo/DeferredList](deferredlist) | The deferred list from which this function gathers results. |\n\n**Returns:** [dojo/DeferredList](deferredlist) \\| instance\n\nThe newly created deferred list which packs results as parameters to its callback.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/DeferredList.html](http://dojotoolkit.org/api/1.10/dojo/DeferredList.html)"
- name: DeferredList#gatherResults()
  id: dojo/deferredlist#1_10dojo_DeferredList_gatherResults
  summary: The newly created deferred list which packs results as parameters to its callback
  belongs_to: DeferredList
  description: "### `gatherResults` `(deferredList)`\n\nDefined by [dojo/DeferredList](deferredlist)\n\nGathers the results of the deferreds for packaging as the parameters to the Deferred Lists' callback\n\n|              |                                   |                                                             |\n|--------------|-----------------------------------|-------------------------------------------------------------|\n| Parameter    | Type                              | Description                                                 |\n| deferredList | [dojo/DeferredList](deferredlist) | The deferred list from which this function gathers results. |\n\n**Returns:** [dojo/DeferredList](deferredlist) \\| instance\n\nThe newly created deferred list which packs results as parameters to its callback.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/DeferredList.html](http://dojotoolkit.org/api/1.10/dojo/DeferredList.html)"
- name: dnd/autoscroll
  id: dojo/dnd/autoscroll
  summary: See the dojo/dnd/autoscroll reference documentation for more information
  description: "# dojo/dnd/autoscroll\n\n## Summary\n\nUsed by [dojo/dnd/Manager](manager) to scroll document or internal node when the user drags near the edge of the viewport or a scrollable node\n\nSee the [dojo/dnd/autoscroll reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### H_AUTOSCROLL_VALUE\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n### H_TRIGGER_AUTOSCROLL\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n### V_AUTOSCROLL_VALUE\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n### V_TRIGGER_AUTOSCROLL\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n## Methods\n\n### `autoScroll``(e)`\n\nDefined by [dojo/dnd/autoscroll](autoscroll)\n\na handler for mousemove and touchmove events, which scrolls the window, if necessary\n\n|           |       |                           |\n|-----------|-------|---------------------------|\n| Parameter | Type  | Description               |\n| e         | Event | mousemove/touchmove event |\n\n### `autoScrollNodes``(e)`\n\nDefined by [dojo/dnd/autoscroll](autoscroll)\n\na handler for mousemove and touchmove events, which scrolls the first available Dom element, it falls back to exports.autoScroll()\n\n|           |       |                           |\n|-----------|-------|---------------------------|\n| Parameter | Type  | Description               |\n| e         | Event | mousemove/touchmove event |\n\n### `autoScrollStart``(d)`\n\nDefined by [dojo/dnd/autoscroll](autoscroll)\n\nCalled at the start of a drag.\n\n|           |          |                                         |\n|-----------|----------|-----------------------------------------|\n| Parameter | Type     | Description                             |\n| d         | Document | The document of the node being dragged. |\n\n### `getViewport``(doc)`\n\nDefined by [dojo/window](../window)\n\nReturns the dimensions and scroll position of the viewable area of a browser window\n\n[TABLE]\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll.html](http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll.html)"
- name: dnd/autoscroll#autoScroll()
  id: dojo/dnd/autoscroll#1_10dojo_dnd_autoscroll_autoScroll
  summary: null
  belongs_to: dnd/autoscroll
  description: |-
    ### `autoScroll` `(e)`

    Defined by [dojo/dnd/autoscroll](autoscroll)

    a handler for mousemove and touchmove events, which scrolls the window, if necessary

    |           |       |                           |
    |-----------|-------|---------------------------|
    | Parameter | Type  | Description               |
    | e         | Event | mousemove/touchmove event |
- name: dnd/autoscroll#autoScrollNodes()
  id: dojo/dnd/autoscroll#1_10dojo_dnd_autoscroll_autoScrollNodes
  summary: null
  belongs_to: dnd/autoscroll
  description: |-
    ### `autoScrollNodes` `(e)`

    Defined by [dojo/dnd/autoscroll](autoscroll)

    a handler for mousemove and touchmove events, which scrolls the first available Dom element, it falls back to exports.autoScroll()

    |           |       |                           |
    |-----------|-------|---------------------------|
    | Parameter | Type  | Description               |
    | e         | Event | mousemove/touchmove event |
- name: dnd/autoscroll#autoScrollStart()
  id: dojo/dnd/autoscroll#1_10dojo_dnd_autoscroll_autoScrollStart
  summary: Called at the start of a drag
  belongs_to: dnd/autoscroll
  description: "### `autoScrollStart` `(d)`\n\nDefined by [dojo/dnd/autoscroll](autoscroll)\n\nCalled at the start of a drag.\n\n|           |          |                                         |\n|-----------|----------|-----------------------------------------|\n| Parameter | Type     | Description                             |\n| d         | Document | The document of the node being dragged. |\n\n### `getViewport` `(doc)`\n\nDefined by [dojo/window](../window)\n\nReturns the dimensions and scroll position of the viewable area of a browser window\n\n[TABLE]\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll.html](http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll.html)"
- name: dnd/autoscroll._validNodes
  id: dojo/dnd/autoscroll._validnodes
  summary: See the dojo/dnd/autoscroll._validNodes reference documentation for more information
  description: "# dojo/dnd/autoscroll.\\_validNodes\n\nSee the [dojo/dnd/autoscroll.\\_validNodes reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### div\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n### p\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n### td\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll.\\_validNodes.html](http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll._validNodes.html)"
- name: dnd/autoscroll._validOverflow
  id: dojo/dnd/autoscroll._validoverflow
  summary: See the dojo/dnd/autoscroll._validOverflow reference documentation for more information
  description: "# dojo/dnd/autoscroll.\\_validOverflow\n\nSee the [dojo/dnd/autoscroll.\\_validOverflow reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### auto\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n### scroll\n\nDefined by: [dojo/dnd/autoscroll](autoscroll)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll.\\_validOverflow.html](http://dojotoolkit.org/api/1.10/dojo/dnd/autoscroll._validOverflow.html)"
- name: dnd/AutoSource
  id: dojo/dnd/autosource
  summary: See the dojo/dnd/AutoSource reference documentation for more information
  description: "# dojo/dnd/AutoSource\n\nExtends[dojo/dnd/Source](source)\n\n## Summary\n\na source that syncs its DnD nodes by default\n\n## Usage\n\nvar foo = new AutoSource`(node,params);`\n\nDefined by [dojo/dnd/AutoSource](autosource)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n| params    | undefined |             |\n\nSee the [dojo/dnd/AutoSource reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### accept\n\nDefined by: [dojo/dnd/Source](source)\n\n### allowNested\n\nDefined by: [dojo/dnd/Container](container)\n\nIndicates whether to allow dnd item nodes to be nested within other elements. By default this is false, indicating that only direct children of the container can be draggable dnd item nodes\n\n### autoSync\n\nDefined by: [dojo/dnd/Source](source)\n\n### copyOnly\n\nDefined by: [dojo/dnd/Source](source)\n\n### current\n\nDefined by: [dojo/dnd/Container](container)\n\nThe DOM node the mouse is currently hovered over\n\n### delay\n\nDefined by: [dojo/dnd/Source](source)\n\n### generateText\n\nDefined by: [dojo/dnd/Source](source)\n\n### horizontal\n\nDefined by: [dojo/dnd/Source](source)\n\n### isSource\n\nDefined by: [dojo/dnd/Source](source)\n\n### map\n\nDefined by: [dojo/dnd/Container](container)\n\nMap from an item's id (which is also the DOMNode's id) to the [dojo/dnd/Container.Item](container#Item) itself.\n\n### selection\n\nDefined by: [dojo/dnd/Selector](selector)\n\nThe set of id's that are currently selected, such that this.selection\\[id\\] == 1 if the node w/that id is selected. Can iterate over selected node's id's like:\n\n``` javascript\nfor(var id in this.selection)\n```\n\n### selfAccept\n\nDefined by: [dojo/dnd/Source](source)\n\n### selfCopy\n\nDefined by: [dojo/dnd/Source](source)\n\n### singular\n\nDefined by: [dojo/dnd/Selector](selector)\n\n### skipForm\n\nDefined by: [dojo/dnd/Source](source)\n\n### withHandles\n\nDefined by: [dojo/dnd/Source](source)\n\n## Methods\n\n### `checkAcceptance``(source,nodes)`\n\nDefined by [dojo/dnd/Source](source)\n\nchecks if the target can accept nodes from this source\n\n|           |        |                                 |\n|-----------|--------|---------------------------------|\n| Parameter | Type   | Description                     |\n| source    | Object | the source which provides items |\n| nodes     | Array  | the list of transferred items   |\n\n**Returns:** boolean\n\n### `clearItems``()`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves all data items from the map\n\n### `copyState``(keyPressed,self)`\n\nDefined by [dojo/dnd/Source](source)\n\nReturns true if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed.\n\n[TABLE]\n\n**Returns:** boolean \\| undefined\n\n### `creator``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncreator function, dummy at the moment\n\n### `deleteSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\ndeletes all selected items\n\n**Returns:** function\n\ndeletes all selected items\n\n### `delItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves a data item from the map by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Source](source)\n\nprepares the object to be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `forInItems``(f,o)`\n\nDefined by [dojo/dnd/Container](container)\n\niterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).\n\n[TABLE]\n\n**Returns:** string\n\n### `forInSelectedItems``(f,o)`\n\nDefined by [dojo/dnd/Selector](selector)\n\niterates over selected items; see `dojo/dnd/Container.forInItems()` for details\n\n[TABLE]\n\n### `getAllNodes``()`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a list (an array) of all valid child nodes\n\n**Returns:** undefined\n\n### `getItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a data item by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n**Returns:** undefined\n\n### `getSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nreturns a list (an array) of selected nodes\n\n**Returns:** instance\n\n### `insertNodes``(addSelected,data,before,anchor)`\n\nDefined by [dojo/dnd/Selector](selector)\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n|             |         |                                                                                       |\n|-------------|---------|---------------------------------------------------------------------------------------|\n| Parameter   | Type    | Description                                                                           |\n| addSelected | Boolean | all new nodes will be added to selected items, if true, no selection change otherwise |\n| data        | Array   | a list of data items, which should be processed by the creator function               |\n| before      | Boolean | insert before the anchor, if true, and after the anchor otherwise                     |\n| anchor      | Node    | the anchor node to be used as a point of insertion                                    |\n\n**Returns:** function\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Container](container)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `selectAll``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nselects all items\n\n**Returns:** undefined\n\n### `selectNone``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nunselects all items\n\n**Returns:** undefined\n\n### `setItem``(key,data)`\n\nDefined by [dojo/dnd/Container](container)\n\nassociates a data item with its key (id)\n\n|           |                |             |\n|-----------|----------------|-------------|\n| Parameter | Type           | Description |\n| key       | String         |             |\n| data      | Container.Item |             |\n\n### `startup``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncollects valid child items and populate the map\n\n### `sync``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nsync up the node list with the data map\n\n**Returns:** function\n\nsync up the node list with the data map\n\n## Events\n\n### `onDndCancel``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/cancel, called to cancel the DnD operation\n\n### `onDndDrop``(source,nodes,copy,target)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/drop, called to finish the DnD operation\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n| target    | Object  | the target which accepts items            |\n\n### `onDndSourceOver``(source)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/source/over, called when detected a current source\n\n|           |        |                                        |\n|-----------|--------|----------------------------------------|\n| Parameter | Type   | Description                            |\n| source    | Object | the source which has the mouse over it |\n\n### `onDndStart``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/start, called to initiate the DnD operation\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDraggingOut``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled during the active DnD operation, when items are dragged away from this target, and it is not disabled\n\n### `onDraggingOver``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled during the active DnD operation, when items are dragged over this target, and it is not disabled\n\n### `onDrop``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDropExternal``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed from an external source\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDropInternal``(nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed from the same target/source\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmousedown\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmousemove\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOut``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseout\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOver``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseover or touch, to mark that element as the current element\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmouseup\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onOutEvent``()`\n\nDefined by: [dojo/dnd/Source](source)\n\nthis function is called once, when mouse is out of our container\n\n### `onOverEvent``()`\n\nDefined by: [dojo/dnd/Source](source)\n\nthis function is called once, when mouse is over our container\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/AutoSource.html](http://dojotoolkit.org/api/1.10/dojo/dnd/AutoSource.html)"
- name: dnd/Avatar
  id: dojo/dnd/avatar
  summary: See the dojo/dnd/Avatar reference documentation for more information
  description: "# dojo/dnd/Avatar\n\n## Summary\n\nObject that represents transferred DnD items visually\n\n## Usage\n\nvar foo = new Avatar`(manager);`\n\nDefined by [dojo/dnd/Avatar](avatar)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| manager   | undefined |             |\n\nSee the [dojo/dnd/Avatar reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### manager\n\nDefined by: [dojo/dnd/Avatar](avatar)\n\na DnD manager object\n\n## Methods\n\n### `construct``()`\n\nDefined by [dojo/dnd/Avatar](avatar)\n\nconstructor function; it is separate so it can be (dynamically) overwritten in case of need\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Avatar](avatar)\n\ndestructor for the avatar; called to remove all references so it can be garbage-collected\n\n### `update``()`\n\nDefined by [dojo/dnd/Avatar](avatar)\n\nupdates the avatar to reflect the current DnD state\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Avatar.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Avatar.html)"
- name: dnd/Avatar#construct()
  id: dojo/dnd/avatar#1_10dojo_dnd_Avatar_construct
  summary: null
  belongs_to: dnd/Avatar
  description: |-
    ### `construct` `()`

    Defined by [dojo/dnd/Avatar](avatar)

    constructor function; it is separate so it can be (dynamically) overwritten in case of need
- name: dnd/Avatar#destroy()
  id: dojo/dnd/avatar#1_10dojo_dnd_Avatar_destroy
  summary: null
  belongs_to: dnd/Avatar
  description: |-
    ### `destroy` `()`

    Defined by [dojo/dnd/Avatar](avatar)

    destructor for the avatar; called to remove all references so it can be garbage-collected
- name: dnd/Avatar#manager
  id: dojo/dnd/avatar#1_10dojo_dnd_Avatar_manager
  summary: null
  belongs_to: dnd/Avatar
  description: |-
    ### manager

    Defined by: [dojo/dnd/Avatar](avatar)

    a DnD manager object

    ## Methods
- name: dnd/Avatar#update()
  id: dojo/dnd/avatar#1_10dojo_dnd_Avatar_update
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/Avatar
  description: "### `update` `()`\n\nDefined by [dojo/dnd/Avatar](avatar)\n\nupdates the avatar to reflect the current DnD state\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Avatar.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Avatar.html)"
- name: dnd/common
  id: dojo/dnd/common
  summary: See the dojo/dnd/common reference documentation for more information
  description: "# dojo/dnd/common\n\n## Summary\n\nTODOC\n\nSee the [dojo/dnd/common reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n## Methods\n\n### `getCopyKeyState``(evt)`\n\nDefined by [dojo/dnd/common](common)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| evt       | undefined |             |\n\n**Returns:** undefined\n\n### `getUniqueId``()`\n\nDefined by [dojo/dnd/common](common)\n\nreturns a unique string for use with any DOM element\n\n**Returns:** string\n\n### `isFormElement``(e)`\n\nDefined by [dojo/dnd/common](common)\n\nreturns true if user clicked on a form element\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event |             |\n\n### `manager``()`\n\nDefined by [dojo/dnd/Manager](manager)\n\nReturns the current DnD manager. Creates one if it is not created yet.\n\n**Returns:** instance\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/common.html](http://dojotoolkit.org/api/1.10/dojo/dnd/common.html)"
- name: dnd/common#getCopyKeyState()
  id: dojo/dnd/common#1_10dojo_dnd_common_getCopyKeyState
  summary: null
  belongs_to: dnd/common
  description: |-
    ### `getCopyKeyState` `(evt)`

    Defined by [dojo/dnd/common](common)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | evt       | undefined |             |

    **Returns:** undefined
- name: dnd/common#getUniqueId()
  id: dojo/dnd/common#1_10dojo_dnd_common_getUniqueId
  summary: null
  belongs_to: dnd/common
  description: |-
    ### `getUniqueId` `()`

    Defined by [dojo/dnd/common](common)

    returns a unique string for use with any DOM element

    **Returns:** string
- name: dnd/common#isFormElement()
  id: dojo/dnd/common#1_10dojo_dnd_common_isFormElement
  summary: null
  belongs_to: dnd/common
  description: |-
    ### `isFormElement` `(e)`

    Defined by [dojo/dnd/common](common)

    returns true if user clicked on a form element

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event |             |
- name: dnd/common#manager()
  id: dojo/dnd/common#1_10dojo_dnd_common_manager
  summary: Returns the current DnD manager
  belongs_to: dnd/common
  description: "### `manager` `()`\n\nDefined by [dojo/dnd/Manager](manager)\n\nReturns the current DnD manager. Creates one if it is not created yet.\n\n**Returns:** instance\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/common.html](http://dojotoolkit.org/api/1.10/dojo/dnd/common.html)"
- name: dnd/common._defaultCreatorNodes
  id: dojo/dnd/common._defaultcreatornodes
  summary: See the dojo/dnd/common._defaultCreatorNodes reference documentation for more information
  description: "# dojo/dnd/common.\\_defaultCreatorNodes\n\nSee the [dojo/dnd/common.\\_defaultCreatorNodes reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### div\n\nDefined by: [dojo/dnd/Container](container)\n\n### ol\n\nDefined by: [dojo/dnd/Container](container)\n\n### p\n\nDefined by: [dojo/dnd/Container](container)\n\n### ul\n\nDefined by: [dojo/dnd/Container](container)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/common.\\_defaultCreatorNodes.html](http://dojotoolkit.org/api/1.10/dojo/dnd/common._defaultCreatorNodes.html)"
- name: dnd/common._empty
  id: dojo/dnd/common._empty
  summary: See the dojo/dnd/common._empty reference documentation for more information
  description: "# dojo/dnd/common.\\_empty\n\nSee the [dojo/dnd/common.\\_empty reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/common.\\_empty.html](http://dojotoolkit.org/api/1.10/dojo/dnd/common._empty.html)"
- name: dnd/Container
  id: dojo/dnd/container
  summary: See the dojo/dnd/Container reference documentation for more information
  description: "# dojo/dnd/Container\n\nExtends[dojo/Evented](../evented)\n\n## Summary\n\na Container object, which knows when mouse hovers over it, and over which element it hovers\n\n## Usage\n\nvar foo = new Container`(node,params);`\n\nDefined by [dojo/dnd/Container](container)\n\n|           |                             |                                             |\n|-----------|-----------------------------|---------------------------------------------|\n| Parameter | Type                        | Description                                 |\n| node      | Node                        | node or node's id to build the container on |\n| params    | Container.\\_\\_ContainerArgs | a dictionary of parameters                  |\n\nSee the [dojo/dnd/Container reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### allowNested\n\nDefined by: [dojo/dnd/Container](container)\n\nIndicates whether to allow dnd item nodes to be nested within other elements. By default this is false, indicating that only direct children of the container can be draggable dnd item nodes\n\n### current\n\nDefined by: [dojo/dnd/Container](container)\n\nThe DOM node the mouse is currently hovered over\n\n### map\n\nDefined by: [dojo/dnd/Container](container)\n\nMap from an item's id (which is also the DOMNode's id) to the [dojo/dnd/Container.Item](container#Item) itself.\n\n### skipForm\n\nDefined by: [dojo/dnd/Container](container)\n\n## Methods\n\n### `clearItems``()`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves all data items from the map\n\n### `creator``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncreator function, dummy at the moment\n\n### `delItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves a data item from the map by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Container](container)\n\nprepares this object to be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `forInItems``(f,o)`\n\nDefined by [dojo/dnd/Container](container)\n\niterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).\n\n[TABLE]\n\n**Returns:** string\n\n### `getAllNodes``()`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a list (an array) of all valid child nodes\n\n**Returns:** undefined\n\n### `getItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a data item by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n**Returns:** undefined\n\n### `insertNodes``(data,before,anchor)`\n\nDefined by [dojo/dnd/Container](container)\n\ninserts an array of new nodes before/after an anchor node\n\n|           |         |                                                                                                                                                                                                       |\n|-----------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type    | Description                                                                                                                                                                                           |\n| data      | Object  | Logical representation of the object being dragged. If the drag object's type is \"text\" then data is a String, if it's another type then data could be a different Object, perhaps a name/value hash. |\n| before    | Boolean | insert before the anchor, if true, and after the anchor otherwise                                                                                                                                     |\n| anchor    | Node    | the anchor node to be used as a point of insertion                                                                                                                                                    |\n\n**Returns:** function\n\ninserts an array of new nodes before/after an anchor node\n\n### `Item``()`\n\nDefined by [dojo/dnd/Container](container)\n\nRepresents (one of) the source node(s) being dragged. Contains (at least) the \"type\" and \"data\" attributes.\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Container](container)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `setItem``(key,data)`\n\nDefined by [dojo/dnd/Container](container)\n\nassociates a data item with its key (id)\n\n|           |                |             |\n|-----------|----------------|-------------|\n| Parameter | Type           | Description |\n| key       | String         |             |\n| data      | Container.Item |             |\n\n### `startup``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncollects valid child items and populate the map\n\n### `sync``()`\n\nDefined by [dojo/dnd/Container](container)\n\nsync up the node list with the data map\n\n**Returns:** function\n\nsync up the node list with the data map\n\n## Events\n\n### `onMouseOut``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseout\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOver``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseover or touch, to mark that element as the current element\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onOutEvent``()`\n\nDefined by: [dojo/dnd/Container](container)\n\nthis function is called once, when mouse is out of our container\n\n### `onOverEvent``()`\n\nDefined by: [dojo/dnd/Container](container)\n\nthis function is called once, when mouse is over our container\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Container.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Container.html)"
- name: dnd/Container#clearItems()
  id: dojo/dnd/container#1_10dojo_dnd_Container_clearItems
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `clearItems` `()`

    Defined by [dojo/dnd/Container](container)

    removes all data items from the map
- name: dnd/Container#creator()
  id: dojo/dnd/container#1_10dojo_dnd_Container_creator
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `creator` `()`

    Defined by [dojo/dnd/Container](container)

    creator function, dummy at the moment
- name: dnd/Container#delItem()
  id: dojo/dnd/container#1_10dojo_dnd_Container_delItem
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `delItem` `(key)`

    Defined by [dojo/dnd/Container](container)

    removes a data item from the map by its key (id)

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | key       | String |             |
- name: dnd/Container#destroy()
  id: dojo/dnd/container#1_10dojo_dnd_Container_destroy
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `destroy` `()`

    Defined by [dojo/dnd/Container](container)

    prepares this object to be garbage-collected

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined
- name: dnd/Container#forInItems()
  id: dojo/dnd/container#1_10dojo_dnd_Container_forInItems
  summary: iterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries)
  belongs_to: dnd/Container
  description: |-
    ### `forInItems` `(f,o)`

    Defined by [dojo/dnd/Container](container)

    iterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).

    [TABLE]

    **Returns:** string
- name: dnd/Container#getAllNodes()
  id: dojo/dnd/container#1_10dojo_dnd_Container_getAllNodes
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `getAllNodes` `()`

    Defined by [dojo/dnd/Container](container)

    returns a list (an array) of all valid child nodes

    **Returns:** undefined
- name: dnd/Container#getItem()
  id: dojo/dnd/container#1_10dojo_dnd_Container_getItem
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `getItem` `(key)`

    Defined by [dojo/dnd/Container](container)

    returns a data item by its key (id)

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | key       | String |             |

    **Returns:** undefined
- name: dnd/Container#insertNodes()
  id: dojo/dnd/container#1_10dojo_dnd_Container_insertNodes
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `insertNodes` `(data,before,anchor)`

    Defined by [dojo/dnd/Container](container)

    inserts an array of new nodes before/after an anchor node

    |           |         |                                                                                                                                                                                                       |
    |-----------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameter | Type    | Description                                                                                                                                                                                           |
    | data      | Object  | Logical representation of the object being dragged. If the drag object's type is "text" then data is a String, if it's another type then data could be a different Object, perhaps a name/value hash. |
    | before    | Boolean | insert before the anchor, if true, and after the anchor otherwise                                                                                                                                     |
    | anchor    | Node    | the anchor node to be used as a point of insertion                                                                                                                                                    |

    **Returns:** function

    inserts an array of new nodes before/after an anchor node
- name: dnd/Container#Item()
  id: dojo/dnd/container#1_10dojo_dnd_Container_Item
  summary: Represents (one of) the source node(s) being dragged
  belongs_to: dnd/Container
  description: |-
    ### `Item` `()`

    Defined by [dojo/dnd/Container](container)

    Represents (one of) the source node(s) being dragged. Contains (at least) the "type" and "data" attributes.
- name: dnd/Container#map
  id: dojo/dnd/container#1_10dojo_dnd_Container_map
  summary: Map from an item's id (which is also the DOMNode's id) to the dojo/dnd/Container.Item itself
  belongs_to: dnd/Container
  description: |-
    ### map

    Defined by: [dojo/dnd/Container](container)

    Map from an item's id (which is also the DOMNode's id) to the [dojo/dnd/Container.Item](container#Item) itself.

    ### skipForm

    Defined by: [dojo/dnd/Container](container)

    ## Methods
- name: dnd/Container#markupFactory()
  id: dojo/dnd/container#1_10dojo_dnd_Container_markupFactory
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `markupFactory` `(params,node,Ctor)`

    Defined by [dojo/dnd/Container](container)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | params    | undefined |             |
    | node      | undefined |             |
    | Ctor      | undefined |             |

    **Returns:** instance

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined
- name: dnd/Container#onMouseOut()
  id: dojo/dnd/container#1_10dojo_dnd_Container_onMouseOut
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `onMouseOut` `(e)`

    Defined by: [dojo/dnd/Container](container)

    event processor for onmouseout

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Container#onMouseOver()
  id: dojo/dnd/container#1_10dojo_dnd_Container_onMouseOver
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `onMouseOver` `(e)`

    Defined by: [dojo/dnd/Container](container)

    event processor for onmouseover or touch, to mark that element as the current element

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Container#onOutEvent()
  id: dojo/dnd/container#1_10dojo_dnd_Container_onOutEvent
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `onOutEvent` `()`

    Defined by: [dojo/dnd/Container](container)

    this function is called once, when mouse is out of our container
- name: dnd/Container#onOverEvent()
  id: dojo/dnd/container#1_10dojo_dnd_Container_onOverEvent
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `onOverEvent` `()`

    Defined by: [dojo/dnd/Container](container)

    this function is called once, when mouse is over our container
- name: dnd/Container#onSelectStart()
  id: dojo/dnd/container#1_10dojo_dnd_Container_onSelectStart
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/Container
  description: "### `onSelectStart` `(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Container.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Container.html)"
- name: dnd/Container#setItem()
  id: dojo/dnd/container#1_10dojo_dnd_Container_setItem
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `setItem` `(key,data)`

    Defined by [dojo/dnd/Container](container)

    associates a data item with its key (id)

    |           |                |             |
    |-----------|----------------|-------------|
    | Parameter | Type           | Description |
    | key       | String         |             |
    | data      | Container.Item |             |
- name: dnd/Container#startup()
  id: dojo/dnd/container#1_10dojo_dnd_Container_startup
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `startup` `()`

    Defined by [dojo/dnd/Container](container)

    collects valid child items and populate the map
- name: dnd/Container#sync()
  id: dojo/dnd/container#1_10dojo_dnd_Container_sync
  summary: null
  belongs_to: dnd/Container
  description: |-
    ### `sync` `()`

    Defined by [dojo/dnd/Container](container)

    sync up the node list with the data map

    **Returns:** function

    sync up the node list with the data map

    ## Events
- name: dnd/Container.__ContainerArgs
  id: dojo/dnd/container.__containerargs
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/dnd/Container.\\_\\_ContainerArgs\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new Container.__ContainerArgs()`\n\nSee the [dojo/dnd/Container.\\_\\_ContainerArgs reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### dropParent\n\nDefined by: [dojo/dnd/Container](container)\n\nnode or node's id to use as the parent node for dropped items (must be underneath the 'node' parameter in the DOM)\n\n### skipForm\n\nDefined by: [dojo/dnd/Container](container)\n\ndon't start the drag operation, if clicked on form elements\n\n## Methods\n\n### `creator``()`\n\nDefined by [dojo/dnd/Container](container)\n\na creator function, which takes a data item, and returns an object like that: {node: newNode, data: usedData, type: arrayOfStrings}\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Container.\\_\\_ContainerArgs.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Container.__ContainerArgs.html)"
- name: dnd/Manager
  id: dojo/dnd/manager
  summary: See the dojo/dnd/Manager reference documentation for more information
  description: "# dojo/dnd/Manager\n\nExtends[dojo/Evented](../evented)\n\n## Summary\n\nthe manager of DnD operations (usually a singleton)\n\n## Usage\n\nvar foo = new Manager`();`\n\nDefined by [dojo/dnd/Manager](manager)\n\nSee the [dojo/dnd/Manager reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### OFFSET_X\n\nDefined by: [dojo/dnd/Manager](manager)\n\n### OFFSET_Y\n\nDefined by: [dojo/dnd/Manager](manager)\n\n## Methods\n\n### `canDrop``(flag)`\n\nDefined by [dojo/dnd/Manager](manager)\n\ncalled to notify if the current target can accept items\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| flag      | undefined |             |\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `makeAvatar``()`\n\nDefined by [dojo/dnd/Manager](manager)\n\nmakes the avatar; it is separate to be overwritten dynamically, if needed\n\n**Returns:** instance\n\n### `manager``()`\n\nDefined by [dojo/dnd/Manager](manager)\n\nReturns the current DnD manager. Creates one if it is not created yet.\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `outSource``(source)`\n\nDefined by [dojo/dnd/Manager](manager)\n\ncalled when a source detected a mouse-out condition\n\n|           |        |              |\n|-----------|--------|--------------|\n| Parameter | Type   | Description  |\n| source    | Object | the reporter |\n\n### `overSource``(source)`\n\nDefined by [dojo/dnd/Manager](manager)\n\ncalled when a source detected a mouse-over condition\n\n|           |        |              |\n|-----------|--------|--------------|\n| Parameter | Type   | Description  |\n| source    | Object | the reporter |\n\n### `startDrag``(source,nodes,copy)`\n\nDefined by [dojo/dnd/Manager](manager)\n\ncalled to initiate the DnD operation\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `stopDrag``()`\n\nDefined by [dojo/dnd/Manager](manager)\n\nstop the DnD in progress\n\n### `updateAvatar``()`\n\nDefined by [dojo/dnd/Manager](manager)\n\nupdates the avatar; it is separate to be overwritten dynamically, if needed\n\n## Events\n\n### `onKeyDown``(e)`\n\nDefined by: [dojo/dnd/Manager](manager)\n\nevent processor for onkeydown: watching for CTRL for copy/move status, watching for ESCAPE to cancel the drag\n\n|           |       |                |\n|-----------|-------|----------------|\n| Parameter | Type  | Description    |\n| e         | Event | keyboard event |\n\n### `onKeyUp``(e)`\n\nDefined by: [dojo/dnd/Manager](manager)\n\nevent processor for onkeyup, watching for CTRL for copy/move status\n\n|           |       |                |\n|-----------|-------|----------------|\n| Parameter | Type  | Description    |\n| e         | Event | keyboard event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Manager](manager)\n\nevent processor for onmousemove\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Manager](manager)\n\nevent processor for onmouseup\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Manager.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Manager.html)"
- name: dnd/Manager#canDrop()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_canDrop
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `canDrop` `(flag)`

    Defined by [dojo/dnd/Manager](manager)

    called to notify if the current target can accept items

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | flag      | undefined |             |

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined
- name: dnd/Manager#makeAvatar()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_makeAvatar
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `makeAvatar` `()`

    Defined by [dojo/dnd/Manager](manager)

    makes the avatar; it is separate to be overwritten dynamically, if needed

    **Returns:** instance
- name: dnd/Manager#manager()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_manager
  summary: Returns the current DnD manager
  belongs_to: dnd/Manager
  description: |-
    ### `manager` `()`

    Defined by [dojo/dnd/Manager](manager)

    Returns the current DnD manager. Creates one if it is not created yet.

    **Returns:** instance

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined
- name: dnd/Manager#onKeyDown()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_onKeyDown
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `onKeyDown` `(e)`

    Defined by: [dojo/dnd/Manager](manager)

    event processor for onkeydown: watching for CTRL for copy/move status, watching for ESCAPE to cancel the drag

    |           |       |                |
    |-----------|-------|----------------|
    | Parameter | Type  | Description    |
    | e         | Event | keyboard event |
- name: dnd/Manager#onKeyUp()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_onKeyUp
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `onKeyUp` `(e)`

    Defined by: [dojo/dnd/Manager](manager)

    event processor for onkeyup, watching for CTRL for copy/move status

    |           |       |                |
    |-----------|-------|----------------|
    | Parameter | Type  | Description    |
    | e         | Event | keyboard event |
- name: dnd/Manager#onMouseMove()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_onMouseMove
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `onMouseMove` `(e)`

    Defined by: [dojo/dnd/Manager](manager)

    event processor for onmousemove

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Manager#onMouseUp()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_onMouseUp
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/Manager
  description: "### `onMouseUp` `(e)`\n\nDefined by: [dojo/dnd/Manager](manager)\n\nevent processor for onmouseup\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Manager.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Manager.html)"
- name: dnd/Manager#outSource()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_outSource
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `outSource` `(source)`

    Defined by [dojo/dnd/Manager](manager)

    called when a source detected a mouse-out condition

    |           |        |              |
    |-----------|--------|--------------|
    | Parameter | Type   | Description  |
    | source    | Object | the reporter |
- name: dnd/Manager#overSource()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_overSource
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `overSource` `(source)`

    Defined by [dojo/dnd/Manager](manager)

    called when a source detected a mouse-over condition

    |           |        |              |
    |-----------|--------|--------------|
    | Parameter | Type   | Description  |
    | source    | Object | the reporter |
- name: dnd/Manager#startDrag()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_startDrag
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `startDrag` `(source,nodes,copy)`

    Defined by [dojo/dnd/Manager](manager)

    called to initiate the DnD operation

    |           |         |                                           |
    |-----------|---------|-------------------------------------------|
    | Parameter | Type    | Description                               |
    | source    | Object  | the source which provides items           |
    | nodes     | Array   | the list of transferred items             |
    | copy      | Boolean | copy items, if true, move items otherwise |
- name: dnd/Manager#stopDrag()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_stopDrag
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `stopDrag` `()`

    Defined by [dojo/dnd/Manager](manager)

    stop the DnD in progress
- name: dnd/Manager#updateAvatar()
  id: dojo/dnd/manager#1_10dojo_dnd_Manager_updateAvatar
  summary: null
  belongs_to: dnd/Manager
  description: |-
    ### `updateAvatar` `()`

    Defined by [dojo/dnd/Manager](manager)

    updates the avatar; it is separate to be overwritten dynamically, if needed

    ## Events
- name: dnd/move
  id: dojo/dnd/move
  summary: See the dojo/dnd/move reference documentation for more information
  description: "# dojo/dnd/move\n\n## Summary\n\nTODOC\n\nSee the [dojo/dnd/move reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Methods\n\n### `boxConstrainedMoveable``()`\n\nDefined by [dojo/dnd/move](move)\n\n### `constrainedMoveable``()`\n\nDefined by [dojo/dnd/move](move)\n\n### `parentConstrainedMoveable``()`\n\nDefined by [dojo/dnd/move](move)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/move.html](http://dojotoolkit.org/api/1.10/dojo/dnd/move.html)"
- name: dnd/move#boxConstrainedMoveable()
  id: dojo/dnd/move#1_10dojo_dnd_move_boxConstrainedMoveable
  summary: null
  belongs_to: dnd/move
  description: |-
    ### `boxConstrainedMoveable` `()`

    Defined by [dojo/dnd/move](move)
- name: dnd/move#constrainedMoveable()
  id: dojo/dnd/move#1_10dojo_dnd_move_constrainedMoveable
  summary: null
  belongs_to: dnd/move
  description: |-
    ### `constrainedMoveable` `()`

    Defined by [dojo/dnd/move](move)
- name: dnd/move#parentConstrainedMoveable()
  id: dojo/dnd/move#1_10dojo_dnd_move_parentConstrainedMoveable
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/move
  description: "### `parentConstrainedMoveable` `()`\n\nDefined by [dojo/dnd/move](move)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/move.html](http://dojotoolkit.org/api/1.10/dojo/dnd/move.html)"
- name: dnd/move.boxConstrainedMoveable
  id: dojo/dnd/move.boxconstrainedmoveable
  summary: See the dojo/dnd/move.boxConstrainedMoveable reference documentation for more information
  description: "# dojo/dnd/move.boxConstrainedMoveable\n\nExtends[dojo/dnd/Moveable](moveable)\n\n## Usage\n\nvar foo = new move.boxConstrainedMoveable`(node,params);`\n\nDefined by [dojo/dnd/move](move)\n\n[TABLE]\n\nSee the [dojo/dnd/move.boxConstrainedMoveable reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### box\n\nDefined by: [dojo/dnd/move](move)\n\nobject attributes (for markup)\n\n### delay\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### handle\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### skip\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### within\n\nDefined by: [dojo/dnd/move](move)\n\n## Methods\n\n### `constraints``()`\n\nDefined by [dojo/dnd/move](move)\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\nstops watching for possible move, deletes all references, so the object can be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Events\n\n### `onDragDetected``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled when the drag is detected; responsible for creation of the mover\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event |             |\n\n### `onFirstMove``(mover)`\n\nDefined by: [dojo/dnd/move](move)\n\ncalled during the very first move notification; can be used to initialize coordinates, can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousedown/ontouchstart, creates a Mover for the node\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousemove/ontouchmove, used only for delayed drags\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmouseup, used only for delayed drags\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMove``(mover,leftTop)`\n\nDefined by: [dojo/dnd/move](move)\n\ncalled during every move notification; should actually move the node; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoved``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoveStart``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoveStop``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoving``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/move.boxConstrainedMoveable.html](http://dojotoolkit.org/api/1.10/dojo/dnd/move.boxConstrainedMoveable.html)"
- name: dnd/move.constrainedMoveable
  id: dojo/dnd/move.constrainedmoveable
  summary: See the dojo/dnd/move.constrainedMoveable reference documentation for more information
  description: "# dojo/dnd/move.constrainedMoveable\n\nExtends[dojo/dnd/Moveable](moveable)\n\n## Usage\n\nvar foo = new move.constrainedMoveable`(node,params);`\n\nDefined by [dojo/dnd/move](move)\n\n[TABLE]\n\nSee the [dojo/dnd/move.constrainedMoveable reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### delay\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### handle\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### skip\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### within\n\nDefined by: [dojo/dnd/move](move)\n\n## Methods\n\n### `constraints``()`\n\nDefined by [dojo/dnd/move](move)\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\nstops watching for possible move, deletes all references, so the object can be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Events\n\n### `onDragDetected``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled when the drag is detected; responsible for creation of the mover\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event |             |\n\n### `onFirstMove``(mover)`\n\nDefined by: [dojo/dnd/move](move)\n\ncalled during the very first move notification; can be used to initialize coordinates, can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousedown/ontouchstart, creates a Mover for the node\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousemove/ontouchmove, used only for delayed drags\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmouseup, used only for delayed drags\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMove``(mover,leftTop)`\n\nDefined by: [dojo/dnd/move](move)\n\ncalled during every move notification; should actually move the node; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoved``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoveStart``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoveStop``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoving``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/move.constrainedMoveable.html](http://dojotoolkit.org/api/1.10/dojo/dnd/move.constrainedMoveable.html)"
- name: dnd/move.parentConstrainedMoveable
  id: dojo/dnd/move.parentconstrainedmoveable
  summary: See the dojo/dnd/move.parentConstrainedMoveable reference documentation for more information
  description: "# dojo/dnd/move.parentConstrainedMoveable\n\nExtends[dojo/dnd/Moveable](moveable)\n\n## Usage\n\nvar foo = new move.parentConstrainedMoveable`(node,params);`\n\nDefined by [dojo/dnd/move](move)\n\n[TABLE]\n\nSee the [dojo/dnd/move.parentConstrainedMoveable reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### area\n\nDefined by: [dojo/dnd/move](move)\n\nobject attributes (for markup)\n\n### delay\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### handle\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### skip\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### within\n\nDefined by: [dojo/dnd/move](move)\n\n## Methods\n\n### `constraints``()`\n\nDefined by [dojo/dnd/move](move)\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\nstops watching for possible move, deletes all references, so the object can be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Events\n\n### `onDragDetected``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled when the drag is detected; responsible for creation of the mover\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event |             |\n\n### `onFirstMove``(mover)`\n\nDefined by: [dojo/dnd/move](move)\n\ncalled during the very first move notification; can be used to initialize coordinates, can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousedown/ontouchstart, creates a Mover for the node\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousemove/ontouchmove, used only for delayed drags\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmouseup, used only for delayed drags\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMove``(mover,leftTop)`\n\nDefined by: [dojo/dnd/move](move)\n\ncalled during every move notification; should actually move the node; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoved``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoveStart``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoveStop``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoving``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/move.parentConstrainedMoveable.html](http://dojotoolkit.org/api/1.10/dojo/dnd/move.parentConstrainedMoveable.html)"
- name: dnd/Moveable
  id: dojo/dnd/moveable
  summary: See the dojo/dnd/Moveable reference documentation for more information
  description: "# dojo/dnd/Moveable\n\nExtends[dojo/Evented](../evented)\n\n## Summary\n\nan object, which makes a node movable\n\n## Usage\n\nvar foo = new Moveable`(node,params);`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\n[TABLE]\n\nSee the [dojo/dnd/Moveable reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd/Moveable.html) for more information.\n\n## Properties\n\n### delay\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### handle\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### skip\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n## Methods\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\nstops watching for possible move, deletes all references, so the object can be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Events\n\n### `onDragDetected``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled when the drag is detected; responsible for creation of the mover\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event |             |\n\n### `onFirstMove``(mover,e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled during the very first move notification; can be used to initialize coordinates, can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| e         | Event                   |             |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousedown/ontouchstart, creates a Mover for the node\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousemove/ontouchmove, used only for delayed drags\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmouseup, used only for delayed drags\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMove``(mover,leftTop,e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled during every move notification; should actually move the node; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n| e         | Event                   |             |\n\n### `onMoved``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoveStart``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoveStop``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoving``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Moveable.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Moveable.html)"
- name: dnd/Moveable#destroy()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_destroy
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `destroy` `()`

    Defined by [dojo/dnd/Moveable](moveable)

    stops watching for possible move, deletes all references, so the object can be garbage-collected

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined
- name: dnd/Moveable#markupFactory()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_markupFactory
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `markupFactory` `(params,node,Ctor)`

    Defined by [dojo/dnd/Moveable](moveable)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | params    | undefined |             |
    | node      | undefined |             |
    | Ctor      | undefined |             |

    **Returns:** instance

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined

    ## Events
- name: dnd/Moveable#onDragDetected()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onDragDetected
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `onDragDetected` `(e)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called when the drag is detected; responsible for creation of the mover

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event |             |
- name: dnd/Moveable#onFirstMove()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onFirstMove
  summary: called during the very first move notification; can be used to initialize coordinates, can be overwritten
  belongs_to: dnd/Moveable
  description: |-
    ### `onFirstMove` `(mover,e)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called during the very first move notification; can be used to initialize coordinates, can be overwritten.

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
    | e         | Event                   |             |
- name: dnd/Moveable#onMouseDown()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMouseDown
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `onMouseDown` `(e)`

    Defined by: [dojo/dnd/Moveable](moveable)

    event processor for onmousedown/ontouchstart, creates a Mover for the node

    |           |       |                   |
    |-----------|-------|-------------------|
    | Parameter | Type  | Description       |
    | e         | Event | mouse/touch event |
- name: dnd/Moveable#onMouseMove()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMouseMove
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `onMouseMove` `(e)`

    Defined by: [dojo/dnd/Moveable](moveable)

    event processor for onmousemove/ontouchmove, used only for delayed drags

    |           |       |                   |
    |-----------|-------|-------------------|
    | Parameter | Type  | Description       |
    | e         | Event | mouse/touch event |
- name: dnd/Moveable#onMouseUp()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMouseUp
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `onMouseUp` `(e)`

    Defined by: [dojo/dnd/Moveable](moveable)

    event processor for onmouseup, used only for delayed drags

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Moveable#onMove()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMove
  summary: called during every move notification; should actually move the node; can be overwritten
  belongs_to: dnd/Moveable
  description: |-
    ### `onMove` `(mover,leftTop,e)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called during every move notification; should actually move the node; can be overwritten.

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
    | leftTop   | Object                  |             |
    | e         | Event                   |             |
- name: dnd/Moveable#onMoved()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMoved
  summary: called after every incremental move; can be overwritten
  belongs_to: dnd/Moveable
  description: |-
    ### `onMoved` `(mover,leftTop)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called after every incremental move; can be overwritten.

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
    | leftTop   | Object                  |             |
- name: dnd/Moveable#onMoveStart()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMoveStart
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `onMoveStart` `(mover)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called before every move operation

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
- name: dnd/Moveable#onMoveStop()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMoveStop
  summary: null
  belongs_to: dnd/Moveable
  description: |-
    ### `onMoveStop` `(mover)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called after every move operation

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
- name: dnd/Moveable#onMoving()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onMoving
  summary: called before every incremental move; can be overwritten
  belongs_to: dnd/Moveable
  description: |-
    ### `onMoving` `(mover,leftTop)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called before every incremental move; can be overwritten.

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
    | leftTop   | Object                  |             |
- name: dnd/Moveable#onSelectStart()
  id: dojo/dnd/moveable#1_10dojo_dnd_Moveable_onSelectStart
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/Moveable
  description: "### `onSelectStart` `(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Moveable.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Moveable.html)"
- name: dnd/Moveable.__MoveableArgs
  id: dojo/dnd/moveable.__moveableargs
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/dnd/Moveable.\\_\\_MoveableArgs\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new Moveable.__MoveableArgs()`\n\nSee the [dojo/dnd/Moveable.\\_\\_MoveableArgs reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### delay\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ndelay move by this number of pixels\n\n### handle\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nA node (or node's id), which is used as a mouse handle. If omitted, the node itself is used as a handle.\n\n### mover\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\na constructor of custom Mover\n\n### skip\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nskip move of form elements\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Moveable.\\_\\_MoveableArgs.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Moveable.__MoveableArgs.html)"
- name: dnd/Mover
  id: dojo/dnd/mover
  summary: an object which makes a node follow the mouse, or touch-drag on touch devices
  description: "# dojo/dnd/Mover\n\nExtends[dojo/Evented](../evented)\n\n## Summary\n\nan object which makes a node follow the mouse, or touch-drag on touch devices. Used as a default mover, and as a base class for custom movers.\n\n## Usage\n\nvar foo = new Mover`(node,e,host);`\n\nDefined by [dojo/dnd/Mover](mover)\n\n[TABLE]\n\nSee the [dojo/dnd/Mover reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Methods\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Mover](mover)\n\nstops the move, deletes all references, so the object can be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Events\n\n### `onFirstMove``(e)`\n\nDefined by: [dojo/dnd/Mover](mover)\n\nmakes the node absolute; it is meant to be called only once. relative and absolutely positioned nodes are assumed to use pixel units\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| e         | undefined |             |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Mover](mover)\n\nevent processor for onmousemove/ontouchmove\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Mover](mover)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| e         | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Mover.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Mover.html)"
- name: dnd/Mover#destroy()
  id: dojo/dnd/mover#1_10dojo_dnd_Mover_destroy
  summary: null
  belongs_to: dnd/Mover
  description: |-
    ### `destroy` `()`

    Defined by [dojo/dnd/Mover](mover)

    stops the move, deletes all references, so the object can be garbage-collected

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined

    ## Events
- name: dnd/Mover#onFirstMove()
  id: dojo/dnd/mover#1_10dojo_dnd_Mover_onFirstMove
  summary: makes the node absolute; it is meant to be called only once
  belongs_to: dnd/Mover
  description: |-
    ### `onFirstMove` `(e)`

    Defined by: [dojo/dnd/Mover](mover)

    makes the node absolute; it is meant to be called only once. relative and absolutely positioned nodes are assumed to use pixel units

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | e         | undefined |             |
- name: dnd/Mover#onMouseMove()
  id: dojo/dnd/mover#1_10dojo_dnd_Mover_onMouseMove
  summary: null
  belongs_to: dnd/Mover
  description: |-
    ### `onMouseMove` `(e)`

    Defined by: [dojo/dnd/Mover](mover)

    event processor for onmousemove/ontouchmove

    |           |       |                   |
    |-----------|-------|-------------------|
    | Parameter | Type  | Description       |
    | e         | Event | mouse/touch event |
- name: dnd/Mover#onMouseUp()
  id: dojo/dnd/mover#1_10dojo_dnd_Mover_onMouseUp
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/Mover
  description: "### `onMouseUp` `(e)`\n\nDefined by: [dojo/dnd/Mover](mover)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| e         | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Mover.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Mover.html)"
- name: dnd/Selector
  id: dojo/dnd/selector
  summary: See the dojo/dnd/Selector reference documentation for more information
  description: "# dojo/dnd/Selector\n\nExtends[dojo/dnd/Container](container)\n\n## Summary\n\na Selector object, which knows how to select its children\n\n## Usage\n\nvar foo = new Selector`(node,params);`\n\nDefined by [dojo/dnd/Selector](selector)\n\n[TABLE]\n\nSee the [dojo/dnd/Selector reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### allowNested\n\nDefined by: [dojo/dnd/Container](container)\n\nIndicates whether to allow dnd item nodes to be nested within other elements. By default this is false, indicating that only direct children of the container can be draggable dnd item nodes\n\n### current\n\nDefined by: [dojo/dnd/Container](container)\n\nThe DOM node the mouse is currently hovered over\n\n### map\n\nDefined by: [dojo/dnd/Container](container)\n\nMap from an item's id (which is also the DOMNode's id) to the [dojo/dnd/Container.Item](container#Item) itself.\n\n### selection\n\nDefined by: [dojo/dnd/Selector](selector)\n\nThe set of id's that are currently selected, such that this.selection\\[id\\] == 1 if the node w/that id is selected. Can iterate over selected node's id's like:\n\n``` javascript\nfor(var id in this.selection)\n```\n\n### singular\n\nDefined by: [dojo/dnd/Selector](selector)\n\n### skipForm\n\nDefined by: [dojo/dnd/Container](container)\n\n## Methods\n\n### `clearItems``()`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves all data items from the map\n\n### `creator``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncreator function, dummy at the moment\n\n### `deleteSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\ndeletes all selected items\n\n**Returns:** function\n\ndeletes all selected items\n\n### `delItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves a data item from the map by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nprepares the object to be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `forInItems``(f,o)`\n\nDefined by [dojo/dnd/Container](container)\n\niterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).\n\n[TABLE]\n\n**Returns:** string\n\n### `forInSelectedItems``(f,o)`\n\nDefined by [dojo/dnd/Selector](selector)\n\niterates over selected items; see `dojo/dnd/Container.forInItems()` for details\n\n[TABLE]\n\n### `getAllNodes``()`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a list (an array) of all valid child nodes\n\n**Returns:** undefined\n\n### `getItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a data item by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n**Returns:** undefined\n\n### `getSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nreturns a list (an array) of selected nodes\n\n**Returns:** instance\n\n### `insertNodes``(addSelected,data,before,anchor)`\n\nDefined by [dojo/dnd/Selector](selector)\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n|             |         |                                                                                       |\n|-------------|---------|---------------------------------------------------------------------------------------|\n| Parameter   | Type    | Description                                                                           |\n| addSelected | Boolean | all new nodes will be added to selected items, if true, no selection change otherwise |\n| data        | Array   | a list of data items, which should be processed by the creator function               |\n| before      | Boolean | insert before the anchor, if true, and after the anchor otherwise                     |\n| anchor      | Node    | the anchor node to be used as a point of insertion                                    |\n\n**Returns:** function\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Container](container)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `selectAll``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nselects all items\n\n**Returns:** undefined\n\n### `selectNone``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nunselects all items\n\n**Returns:** undefined\n\n### `setItem``(key,data)`\n\nDefined by [dojo/dnd/Container](container)\n\nassociates a data item with its key (id)\n\n|           |                |             |\n|-----------|----------------|-------------|\n| Parameter | Type           | Description |\n| key       | String         |             |\n| data      | Container.Item |             |\n\n### `startup``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncollects valid child items and populate the map\n\n### `sync``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nsync up the node list with the data map\n\n**Returns:** function\n\nsync up the node list with the data map\n\n## Events\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Selector](selector)\n\nevent processor for onmousedown\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Selector](selector)\n\nevent processor for onmousemove\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOut``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseout\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOver``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseover or touch, to mark that element as the current element\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Selector](selector)\n\nevent processor for onmouseup\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onOutEvent``()`\n\nDefined by: [dojo/dnd/Selector](selector)\n\nthis function is called once, when mouse is out of our container\n\n### `onOverEvent``()`\n\nDefined by: [dojo/dnd/Selector](selector)\n\nthis function is called once, when mouse is over our container\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Selector.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Selector.html)"
- name: dnd/Selector#deleteSelectedNodes()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_deleteSelectedNodes
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `deleteSelectedNodes` `()`

    Defined by [dojo/dnd/Selector](selector)

    deletes all selected items

    **Returns:** function

    deletes all selected items

    ### `delItem` `(key)`

    Defined by [dojo/dnd/Container](container)

    removes a data item from the map by its key (id)

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | key       | String |             |
- name: dnd/Selector#destroy()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_destroy
  summary: iterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries)
  belongs_to: dnd/Selector
  description: |-
    ### `destroy` `()`

    Defined by [dojo/dnd/Selector](selector)

    prepares the object to be garbage-collected

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined

    ### `forInItems` `(f,o)`

    Defined by [dojo/dnd/Container](container)

    iterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).

    [TABLE]

    **Returns:** string
- name: dnd/Selector#forInSelectedItems()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_forInSelectedItems
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `forInSelectedItems` `(f,o)`

    Defined by [dojo/dnd/Selector](selector)

    iterates over selected items; see `dojo/dnd/Container.forInItems()` for details

    [TABLE]

    ### `getAllNodes` `()`

    Defined by [dojo/dnd/Container](container)

    returns a list (an array) of all valid child nodes

    **Returns:** undefined

    ### `getItem` `(key)`

    Defined by [dojo/dnd/Container](container)

    returns a data item by its key (id)

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | key       | String |             |

    **Returns:** undefined
- name: dnd/Selector#getSelectedNodes()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_getSelectedNodes
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `getSelectedNodes` `()`

    Defined by [dojo/dnd/Selector](selector)

    returns a list (an array) of selected nodes

    **Returns:** instance
- name: dnd/Selector#insertNodes()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_insertNodes
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `insertNodes` `(addSelected,data,before,anchor)`

    Defined by [dojo/dnd/Selector](selector)

    inserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)

    |             |         |                                                                                       |
    |-------------|---------|---------------------------------------------------------------------------------------|
    | Parameter   | Type    | Description                                                                           |
    | addSelected | Boolean | all new nodes will be added to selected items, if true, no selection change otherwise |
    | data        | Array   | a list of data items, which should be processed by the creator function               |
    | before      | Boolean | insert before the anchor, if true, and after the anchor otherwise                     |
    | anchor      | Node    | the anchor node to be used as a point of insertion                                    |

    **Returns:** function

    inserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)

    ### `markupFactory` `(params,node,Ctor)`

    Defined by [dojo/dnd/Container](container)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | params    | undefined |             |
    | node      | undefined |             |
    | Ctor      | undefined |             |

    **Returns:** instance

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined
- name: dnd/Selector#onMouseDown()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_onMouseDown
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `onMouseDown` `(e)`

    Defined by: [dojo/dnd/Selector](selector)

    event processor for onmousedown

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Selector#onMouseMove()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_onMouseMove
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `onMouseMove` `(e)`

    Defined by: [dojo/dnd/Selector](selector)

    event processor for onmousemove

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |

    ### `onMouseOut` `(e)`

    Defined by: [dojo/dnd/Container](container)

    event processor for onmouseout

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |

    ### `onMouseOver` `(e)`

    Defined by: [dojo/dnd/Container](container)

    event processor for onmouseover or touch, to mark that element as the current element

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Selector#onMouseUp()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_onMouseUp
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `onMouseUp` `(e)`

    Defined by: [dojo/dnd/Selector](selector)

    event processor for onmouseup

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Selector#onOutEvent()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_onOutEvent
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `onOutEvent` `()`

    Defined by: [dojo/dnd/Selector](selector)

    this function is called once, when mouse is out of our container
- name: dnd/Selector#onOverEvent()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_onOverEvent
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/Selector
  description: "### `onOverEvent` `()`\n\nDefined by: [dojo/dnd/Selector](selector)\n\nthis function is called once, when mouse is over our container\n\n### `onSelectStart` `(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Selector.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Selector.html)"
- name: dnd/Selector#selectAll()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_selectAll
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `selectAll` `()`

    Defined by [dojo/dnd/Selector](selector)

    selects all items

    **Returns:** undefined
- name: dnd/Selector#selection
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_selection
  summary: The set of id's that are currently selected, such that this.selection[id] == 1 if the node w/that id is selected
  belongs_to: dnd/Selector
  description: "### selection\n\nDefined by: [dojo/dnd/Selector](selector)\n\nThe set of id's that are currently selected, such that this.selection\\[id\\] == 1 if the node w/that id is selected. Can iterate over selected node's id's like:\n\n``` javascript\n        for(var id in this.selection)\n      \n```\n\n### singular\n\nDefined by: [dojo/dnd/Selector](selector)\n\n### skipForm\n\nDefined by: [dojo/dnd/Container](container)\n\n## Methods\n\n### `clearItems` `()`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves all data items from the map\n\n### `creator` `()`\n\nDefined by [dojo/dnd/Container](container)\n\ncreator function, dummy at the moment"
- name: dnd/Selector#selectNone()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_selectNone
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `selectNone` `()`

    Defined by [dojo/dnd/Selector](selector)

    unselects all items

    **Returns:** undefined

    ### `setItem` `(key,data)`

    Defined by [dojo/dnd/Container](container)

    associates a data item with its key (id)

    |           |                |             |
    |-----------|----------------|-------------|
    | Parameter | Type           | Description |
    | key       | String         |             |
    | data      | Container.Item |             |

    ### `startup` `()`

    Defined by [dojo/dnd/Container](container)

    collects valid child items and populate the map
- name: dnd/Selector#sync()
  id: dojo/dnd/selector#1_10dojo_dnd_Selector_sync
  summary: null
  belongs_to: dnd/Selector
  description: |-
    ### `sync` `()`

    Defined by [dojo/dnd/Selector](selector)

    sync up the node list with the data map

    **Returns:** function

    sync up the node list with the data map

    ## Events
- name: dnd/Source
  id: dojo/dnd/source
  summary: See the dojo/dnd/Source reference documentation for more information
  description: "# dojo/dnd/Source\n\nExtends[dojo/dnd/Selector](selector)\n\n## Summary\n\na Source object, which can be used as a DnD source, or a DnD target\n\n## Usage\n\nvar foo = new Source`(node,params);`\n\nDefined by [dojo/dnd/Source](source)\n\n[TABLE]\n\nSee the [dojo/dnd/Source reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### accept\n\nDefined by: [dojo/dnd/Source](source)\n\n### allowNested\n\nDefined by: [dojo/dnd/Container](container)\n\nIndicates whether to allow dnd item nodes to be nested within other elements. By default this is false, indicating that only direct children of the container can be draggable dnd item nodes\n\n### autoSync\n\nDefined by: [dojo/dnd/Source](source)\n\n### copyOnly\n\nDefined by: [dojo/dnd/Source](source)\n\n### current\n\nDefined by: [dojo/dnd/Container](container)\n\nThe DOM node the mouse is currently hovered over\n\n### delay\n\nDefined by: [dojo/dnd/Source](source)\n\n### generateText\n\nDefined by: [dojo/dnd/Source](source)\n\n### horizontal\n\nDefined by: [dojo/dnd/Source](source)\n\n### isSource\n\nDefined by: [dojo/dnd/Source](source)\n\n### map\n\nDefined by: [dojo/dnd/Container](container)\n\nMap from an item's id (which is also the DOMNode's id) to the [dojo/dnd/Container.Item](container#Item) itself.\n\n### selection\n\nDefined by: [dojo/dnd/Selector](selector)\n\nThe set of id's that are currently selected, such that this.selection\\[id\\] == 1 if the node w/that id is selected. Can iterate over selected node's id's like:\n\n``` javascript\nfor(var id in this.selection)\n```\n\n### selfAccept\n\nDefined by: [dojo/dnd/Source](source)\n\n### selfCopy\n\nDefined by: [dojo/dnd/Source](source)\n\n### singular\n\nDefined by: [dojo/dnd/Selector](selector)\n\n### skipForm\n\nDefined by: [dojo/dnd/Source](source)\n\n### withHandles\n\nDefined by: [dojo/dnd/Source](source)\n\n## Methods\n\n### `checkAcceptance``(source,nodes)`\n\nDefined by [dojo/dnd/Source](source)\n\nchecks if the target can accept nodes from this source\n\n|           |        |                                 |\n|-----------|--------|---------------------------------|\n| Parameter | Type   | Description                     |\n| source    | Object | the source which provides items |\n| nodes     | Array  | the list of transferred items   |\n\n**Returns:** boolean\n\n### `clearItems``()`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves all data items from the map\n\n### `copyState``(keyPressed,self)`\n\nDefined by [dojo/dnd/Source](source)\n\nReturns true if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed.\n\n[TABLE]\n\n**Returns:** boolean \\| undefined\n\n### `creator``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncreator function, dummy at the moment\n\n### `deleteSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\ndeletes all selected items\n\n**Returns:** function\n\ndeletes all selected items\n\n### `delItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves a data item from the map by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Source](source)\n\nprepares the object to be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `forInItems``(f,o)`\n\nDefined by [dojo/dnd/Container](container)\n\niterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).\n\n[TABLE]\n\n**Returns:** string\n\n### `forInSelectedItems``(f,o)`\n\nDefined by [dojo/dnd/Selector](selector)\n\niterates over selected items; see `dojo/dnd/Container.forInItems()` for details\n\n[TABLE]\n\n### `getAllNodes``()`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a list (an array) of all valid child nodes\n\n**Returns:** undefined\n\n### `getItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a data item by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n**Returns:** undefined\n\n### `getSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nreturns a list (an array) of selected nodes\n\n**Returns:** instance\n\n### `insertNodes``(addSelected,data,before,anchor)`\n\nDefined by [dojo/dnd/Selector](selector)\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n|             |         |                                                                                       |\n|-------------|---------|---------------------------------------------------------------------------------------|\n| Parameter   | Type    | Description                                                                           |\n| addSelected | Boolean | all new nodes will be added to selected items, if true, no selection change otherwise |\n| data        | Array   | a list of data items, which should be processed by the creator function               |\n| before      | Boolean | insert before the anchor, if true, and after the anchor otherwise                     |\n| anchor      | Node    | the anchor node to be used as a point of insertion                                    |\n\n**Returns:** function\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Container](container)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `selectAll``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nselects all items\n\n**Returns:** undefined\n\n### `selectNone``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nunselects all items\n\n**Returns:** undefined\n\n### `setItem``(key,data)`\n\nDefined by [dojo/dnd/Container](container)\n\nassociates a data item with its key (id)\n\n|           |                |             |\n|-----------|----------------|-------------|\n| Parameter | Type           | Description |\n| key       | String         |             |\n| data      | Container.Item |             |\n\n### `startup``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncollects valid child items and populate the map\n\n### `sync``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nsync up the node list with the data map\n\n**Returns:** function\n\nsync up the node list with the data map\n\n## Events\n\n### `onDndCancel``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/cancel, called to cancel the DnD operation\n\n### `onDndDrop``(source,nodes,copy,target)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/drop, called to finish the DnD operation\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n| target    | Object  | the target which accepts items            |\n\n### `onDndSourceOver``(source)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/source/over, called when detected a current source\n\n|           |        |                                        |\n|-----------|--------|----------------------------------------|\n| Parameter | Type   | Description                            |\n| source    | Object | the source which has the mouse over it |\n\n### `onDndStart``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/start, called to initiate the DnD operation\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDraggingOut``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled during the active DnD operation, when items are dragged away from this target, and it is not disabled\n\n### `onDraggingOver``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled during the active DnD operation, when items are dragged over this target, and it is not disabled\n\n### `onDrop``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDropExternal``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed from an external source\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDropInternal``(nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed from the same target/source\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmousedown\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmousemove\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOut``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseout\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOver``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseover or touch, to mark that element as the current element\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmouseup\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onOutEvent``()`\n\nDefined by: [dojo/dnd/Source](source)\n\nthis function is called once, when mouse is out of our container\n\n### `onOverEvent``()`\n\nDefined by: [dojo/dnd/Source](source)\n\nthis function is called once, when mouse is over our container\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Source.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Source.html)"
- name: dnd/Source#checkAcceptance()
  id: dojo/dnd/source#1_10dojo_dnd_Source_checkAcceptance
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `checkAcceptance` `(source,nodes)`

    Defined by [dojo/dnd/Source](source)

    checks if the target can accept nodes from this source

    |           |        |                                 |
    |-----------|--------|---------------------------------|
    | Parameter | Type   | Description                     |
    | source    | Object | the source which provides items |
    | nodes     | Array  | the list of transferred items   |

    **Returns:** boolean

    ### `clearItems` `()`

    Defined by [dojo/dnd/Container](container)

    removes all data items from the map
- name: dnd/Source#copyState()
  id: dojo/dnd/source#1_10dojo_dnd_Source_copyState
  summary: Returns true if we need to copy items, false to move
  belongs_to: dnd/Source
  description: |-
    ### `copyState` `(keyPressed,self)`

    Defined by [dojo/dnd/Source](source)

    Returns true if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed.

    [TABLE]

    **Returns:** boolean \| undefined

    ### `creator` `()`

    Defined by [dojo/dnd/Container](container)

    creator function, dummy at the moment

    ### `deleteSelectedNodes` `()`

    Defined by [dojo/dnd/Selector](selector)

    deletes all selected items

    **Returns:** function

    deletes all selected items

    ### `delItem` `(key)`

    Defined by [dojo/dnd/Container](container)

    removes a data item from the map by its key (id)

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | key       | String |             |
- name: dnd/Source#destroy()
  id: dojo/dnd/source#1_10dojo_dnd_Source_destroy
  summary: iterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries)
  belongs_to: dnd/Source
  description: |-
    ### `destroy` `()`

    Defined by [dojo/dnd/Source](source)

    prepares the object to be garbage-collected

    ### `emit` `(type,event)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined

    ### `forInItems` `(f,o)`

    Defined by [dojo/dnd/Container](container)

    iterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).

    [TABLE]

    **Returns:** string

    ### `forInSelectedItems` `(f,o)`

    Defined by [dojo/dnd/Selector](selector)

    iterates over selected items; see `dojo/dnd/Container.forInItems()` for details

    [TABLE]

    ### `getAllNodes` `()`

    Defined by [dojo/dnd/Container](container)

    returns a list (an array) of all valid child nodes

    **Returns:** undefined

    ### `getItem` `(key)`

    Defined by [dojo/dnd/Container](container)

    returns a data item by its key (id)

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | key       | String |             |

    **Returns:** undefined

    ### `getSelectedNodes` `()`

    Defined by [dojo/dnd/Selector](selector)

    returns a list (an array) of selected nodes

    **Returns:** instance

    ### `insertNodes` `(addSelected,data,before,anchor)`

    Defined by [dojo/dnd/Selector](selector)

    inserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)

    |             |         |                                                                                       |
    |-------------|---------|---------------------------------------------------------------------------------------|
    | Parameter   | Type    | Description                                                                           |
    | addSelected | Boolean | all new nodes will be added to selected items, if true, no selection change otherwise |
    | data        | Array   | a list of data items, which should be processed by the creator function               |
    | before      | Boolean | insert before the anchor, if true, and after the anchor otherwise                     |
    | anchor      | Node    | the anchor node to be used as a point of insertion                                    |

    **Returns:** function

    inserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)

    ### `markupFactory` `(params,node,Ctor)`

    Defined by [dojo/dnd/Container](container)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | params    | undefined |             |
    | node      | undefined |             |
    | Ctor      | undefined |             |

    **Returns:** instance

    ### `on` `(type,listener)`

    Defined by [dojo/Evented](../evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | listener  | undefined |             |

    **Returns:** undefined

    ### `selectAll` `()`

    Defined by [dojo/dnd/Selector](selector)

    selects all items

    **Returns:** undefined

    ### `selectNone` `()`

    Defined by [dojo/dnd/Selector](selector)

    unselects all items

    **Returns:** undefined

    ### `setItem` `(key,data)`

    Defined by [dojo/dnd/Container](container)

    associates a data item with its key (id)

    |           |                |             |
    |-----------|----------------|-------------|
    | Parameter | Type           | Description |
    | key       | String         |             |
    | data      | Container.Item |             |

    ### `startup` `()`

    Defined by [dojo/dnd/Container](container)

    collects valid child items and populate the map

    ### `sync` `()`

    Defined by [dojo/dnd/Selector](selector)

    sync up the node list with the data map

    **Returns:** function

    sync up the node list with the data map

    ## Events
- name: dnd/Source#onDndCancel()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDndCancel
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDndCancel` `()`

    Defined by: [dojo/dnd/Source](source)

    topic event processor for /dnd/cancel, called to cancel the DnD operation
- name: dnd/Source#onDndDrop()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDndDrop
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDndDrop` `(source,nodes,copy,target)`

    Defined by: [dojo/dnd/Source](source)

    topic event processor for /dnd/drop, called to finish the DnD operation

    |           |         |                                           |
    |-----------|---------|-------------------------------------------|
    | Parameter | Type    | Description                               |
    | source    | Object  | the source which provides items           |
    | nodes     | Array   | the list of transferred items             |
    | copy      | Boolean | copy items, if true, move items otherwise |
    | target    | Object  | the target which accepts items            |
- name: dnd/Source#onDndSourceOver()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDndSourceOver
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDndSourceOver` `(source)`

    Defined by: [dojo/dnd/Source](source)

    topic event processor for /dnd/source/over, called when detected a current source

    |           |        |                                        |
    |-----------|--------|----------------------------------------|
    | Parameter | Type   | Description                            |
    | source    | Object | the source which has the mouse over it |
- name: dnd/Source#onDndStart()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDndStart
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDndStart` `(source,nodes,copy)`

    Defined by: [dojo/dnd/Source](source)

    topic event processor for /dnd/start, called to initiate the DnD operation

    |           |         |                                           |
    |-----------|---------|-------------------------------------------|
    | Parameter | Type    | Description                               |
    | source    | Object  | the source which provides items           |
    | nodes     | Array   | the list of transferred items             |
    | copy      | Boolean | copy items, if true, move items otherwise |
- name: dnd/Source#onDraggingOut()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDraggingOut
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDraggingOut` `()`

    Defined by: [dojo/dnd/Source](source)

    called during the active DnD operation, when items are dragged away from this target, and it is not disabled
- name: dnd/Source#onDraggingOver()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDraggingOver
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDraggingOver` `()`

    Defined by: [dojo/dnd/Source](source)

    called during the active DnD operation, when items are dragged over this target, and it is not disabled
- name: dnd/Source#onDrop()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDrop
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDrop` `(source,nodes,copy)`

    Defined by: [dojo/dnd/Source](source)

    called only on the current target, when drop is performed

    |           |         |                                           |
    |-----------|---------|-------------------------------------------|
    | Parameter | Type    | Description                               |
    | source    | Object  | the source which provides items           |
    | nodes     | Array   | the list of transferred items             |
    | copy      | Boolean | copy items, if true, move items otherwise |
- name: dnd/Source#onDropExternal()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDropExternal
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDropExternal` `(source,nodes,copy)`

    Defined by: [dojo/dnd/Source](source)

    called only on the current target, when drop is performed from an external source

    |           |         |                                           |
    |-----------|---------|-------------------------------------------|
    | Parameter | Type    | Description                               |
    | source    | Object  | the source which provides items           |
    | nodes     | Array   | the list of transferred items             |
    | copy      | Boolean | copy items, if true, move items otherwise |
- name: dnd/Source#onDropInternal()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onDropInternal
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onDropInternal` `(nodes,copy)`

    Defined by: [dojo/dnd/Source](source)

    called only on the current target, when drop is performed from the same target/source

    |           |         |                                           |
    |-----------|---------|-------------------------------------------|
    | Parameter | Type    | Description                               |
    | nodes     | Array   | the list of transferred items             |
    | copy      | Boolean | copy items, if true, move items otherwise |
- name: dnd/Source#onMouseDown()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onMouseDown
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onMouseDown` `(e)`

    Defined by: [dojo/dnd/Source](source)

    event processor for onmousedown

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Source#onMouseMove()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onMouseMove
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onMouseMove` `(e)`

    Defined by: [dojo/dnd/Source](source)

    event processor for onmousemove

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |

    ### `onMouseOut` `(e)`

    Defined by: [dojo/dnd/Container](container)

    event processor for onmouseout

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |

    ### `onMouseOver` `(e)`

    Defined by: [dojo/dnd/Container](container)

    event processor for onmouseover or touch, to mark that element as the current element

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Source#onMouseUp()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onMouseUp
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onMouseUp` `(e)`

    Defined by: [dojo/dnd/Source](source)

    event processor for onmouseup

    |           |       |             |
    |-----------|-------|-------------|
    | Parameter | Type  | Description |
    | e         | Event | mouse event |
- name: dnd/Source#onOutEvent()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onOutEvent
  summary: null
  belongs_to: dnd/Source
  description: |-
    ### `onOutEvent` `()`

    Defined by: [dojo/dnd/Source](source)

    this function is called once, when mouse is out of our container
- name: dnd/Source#onOverEvent()
  id: dojo/dnd/source#1_10dojo_dnd_Source_onOverEvent
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dnd/Source
  description: "### `onOverEvent` `()`\n\nDefined by: [dojo/dnd/Source](source)\n\nthis function is called once, when mouse is over our container\n\n### `onSelectStart` `(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Source.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Source.html)"
- name: dnd/Target
  id: dojo/dnd/target
  summary: See the dojo/dnd/Target reference documentation for more information
  description: "# dojo/dnd/Target\n\nExtends[dojo/dnd/Source](source)\n\n## Summary\n\na Target object, which can be used as a DnD target\n\n## Usage\n\nvar foo = new Target`(node,params);`\n\nDefined by [dojo/dnd/Target](target)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n| params    | undefined |             |\n\nSee the [dojo/dnd/Target reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### accept\n\nDefined by: [dojo/dnd/Source](source)\n\n### allowNested\n\nDefined by: [dojo/dnd/Container](container)\n\nIndicates whether to allow dnd item nodes to be nested within other elements. By default this is false, indicating that only direct children of the container can be draggable dnd item nodes\n\n### autoSync\n\nDefined by: [dojo/dnd/Source](source)\n\n### copyOnly\n\nDefined by: [dojo/dnd/Source](source)\n\n### current\n\nDefined by: [dojo/dnd/Container](container)\n\nThe DOM node the mouse is currently hovered over\n\n### delay\n\nDefined by: [dojo/dnd/Source](source)\n\n### generateText\n\nDefined by: [dojo/dnd/Source](source)\n\n### horizontal\n\nDefined by: [dojo/dnd/Source](source)\n\n### isSource\n\nDefined by: [dojo/dnd/Source](source)\n\n### map\n\nDefined by: [dojo/dnd/Container](container)\n\nMap from an item's id (which is also the DOMNode's id) to the [dojo/dnd/Container.Item](container#Item) itself.\n\n### selection\n\nDefined by: [dojo/dnd/Selector](selector)\n\nThe set of id's that are currently selected, such that this.selection\\[id\\] == 1 if the node w/that id is selected. Can iterate over selected node's id's like:\n\n``` javascript\nfor(var id in this.selection)\n```\n\n### selfAccept\n\nDefined by: [dojo/dnd/Source](source)\n\n### selfCopy\n\nDefined by: [dojo/dnd/Source](source)\n\n### singular\n\nDefined by: [dojo/dnd/Selector](selector)\n\n### skipForm\n\nDefined by: [dojo/dnd/Source](source)\n\n### withHandles\n\nDefined by: [dojo/dnd/Source](source)\n\n## Methods\n\n### `checkAcceptance``(source,nodes)`\n\nDefined by [dojo/dnd/Source](source)\n\nchecks if the target can accept nodes from this source\n\n|           |        |                                 |\n|-----------|--------|---------------------------------|\n| Parameter | Type   | Description                     |\n| source    | Object | the source which provides items |\n| nodes     | Array  | the list of transferred items   |\n\n**Returns:** boolean\n\n### `clearItems``()`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves all data items from the map\n\n### `copyState``(keyPressed,self)`\n\nDefined by [dojo/dnd/Source](source)\n\nReturns true if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed.\n\n[TABLE]\n\n**Returns:** boolean \\| undefined\n\n### `creator``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncreator function, dummy at the moment\n\n### `deleteSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\ndeletes all selected items\n\n**Returns:** function\n\ndeletes all selected items\n\n### `delItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nremoves a data item from the map by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Source](source)\n\nprepares the object to be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `forInItems``(f,o)`\n\nDefined by [dojo/dnd/Container](container)\n\niterates over a data map skipping members that are present in the empty object (IE and/or 3rd-party libraries).\n\n[TABLE]\n\n**Returns:** string\n\n### `forInSelectedItems``(f,o)`\n\nDefined by [dojo/dnd/Selector](selector)\n\niterates over selected items; see `dojo/dnd/Container.forInItems()` for details\n\n[TABLE]\n\n### `getAllNodes``()`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a list (an array) of all valid child nodes\n\n**Returns:** undefined\n\n### `getItem``(key)`\n\nDefined by [dojo/dnd/Container](container)\n\nreturns a data item by its key (id)\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| key       | String |             |\n\n**Returns:** undefined\n\n### `getSelectedNodes``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nreturns a list (an array) of selected nodes\n\n**Returns:** instance\n\n### `insertNodes``(addSelected,data,before,anchor)`\n\nDefined by [dojo/dnd/Selector](selector)\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n|             |         |                                                                                       |\n|-------------|---------|---------------------------------------------------------------------------------------|\n| Parameter   | Type    | Description                                                                           |\n| addSelected | Boolean | all new nodes will be added to selected items, if true, no selection change otherwise |\n| data        | Array   | a list of data items, which should be processed by the creator function               |\n| before      | Boolean | insert before the anchor, if true, and after the anchor otherwise                     |\n| anchor      | Node    | the anchor node to be used as a point of insertion                                    |\n\n**Returns:** function\n\ninserts new data items (see `dojo/dnd/Container.insertNodes()` method for details)\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Container](container)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n### `selectAll``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nselects all items\n\n**Returns:** undefined\n\n### `selectNone``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nunselects all items\n\n**Returns:** undefined\n\n### `setItem``(key,data)`\n\nDefined by [dojo/dnd/Container](container)\n\nassociates a data item with its key (id)\n\n|           |                |             |\n|-----------|----------------|-------------|\n| Parameter | Type           | Description |\n| key       | String         |             |\n| data      | Container.Item |             |\n\n### `startup``()`\n\nDefined by [dojo/dnd/Container](container)\n\ncollects valid child items and populate the map\n\n### `sync``()`\n\nDefined by [dojo/dnd/Selector](selector)\n\nsync up the node list with the data map\n\n**Returns:** function\n\nsync up the node list with the data map\n\n## Events\n\n### `onDndCancel``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/cancel, called to cancel the DnD operation\n\n### `onDndDrop``(source,nodes,copy,target)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/drop, called to finish the DnD operation\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n| target    | Object  | the target which accepts items            |\n\n### `onDndSourceOver``(source)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/source/over, called when detected a current source\n\n|           |        |                                        |\n|-----------|--------|----------------------------------------|\n| Parameter | Type   | Description                            |\n| source    | Object | the source which has the mouse over it |\n\n### `onDndStart``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ntopic event processor for /dnd/start, called to initiate the DnD operation\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDraggingOut``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled during the active DnD operation, when items are dragged away from this target, and it is not disabled\n\n### `onDraggingOver``()`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled during the active DnD operation, when items are dragged over this target, and it is not disabled\n\n### `onDrop``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDropExternal``(source,nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed from an external source\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| source    | Object  | the source which provides items           |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onDropInternal``(nodes,copy)`\n\nDefined by: [dojo/dnd/Source](source)\n\ncalled only on the current target, when drop is performed from the same target/source\n\n|           |         |                                           |\n|-----------|---------|-------------------------------------------|\n| Parameter | Type    | Description                               |\n| nodes     | Array   | the list of transferred items             |\n| copy      | Boolean | copy items, if true, move items otherwise |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmousedown\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmousemove\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOut``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseout\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseOver``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onmouseover or touch, to mark that element as the current element\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Source](source)\n\nevent processor for onmouseup\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onOutEvent``()`\n\nDefined by: [dojo/dnd/Source](source)\n\nthis function is called once, when mouse is out of our container\n\n### `onOverEvent``()`\n\nDefined by: [dojo/dnd/Source](source)\n\nthis function is called once, when mouse is over our container\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Container](container)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/Target.html](http://dojotoolkit.org/api/1.10/dojo/dnd/Target.html)"
- name: dnd/TimedMoveable
  id: dojo/dnd/timedmoveable
  summary: A specialized version of Moveable to support an FPS throttling
  description: "# dojo/dnd/TimedMoveable\n\nExtends[dojo/dnd/Moveable](moveable)\n\n## Summary\n\nA specialized version of Moveable to support an FPS throttling. This class puts an upper restriction on FPS, which may reduce the CPU load. The additional parameter \"timeout\" regulates the delay before actually moving the moveable object.\n\n## Usage\n\nvar foo = new TimedMoveable`(node,params);`\n\nDefined by [dojo/dnd/TimedMoveable](timedmoveable)\n\n|           |                |                                    |\n|-----------|----------------|------------------------------------|\n| Parameter | Type           | Description                        |\n| node      | Node \\| String | a node (or node's id) to be moved  |\n| params    | Object         | object with additional parameters. |\n\nSee the [dojo/dnd/TimedMoveable reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dnd.html) for more information.\n\n## Properties\n\n### delay\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### handle\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### skip\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\n### timeout\n\nDefined by: [dojo/dnd/TimedMoveable](timedmoveable)\n\n## Methods\n\n### `destroy``()`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\nstops watching for possible move, deletes all references, so the object can be garbage-collected\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `markupFactory``(params,node,Ctor)`\n\nDefined by [dojo/dnd/Moveable](moveable)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| params    | undefined |             |\n| node      | undefined |             |\n| Ctor      | undefined |             |\n\n**Returns:** instance\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](../evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Events\n\n### `onDragDetected``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled when the drag is detected; responsible for creation of the mover\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event |             |\n\n### `onFirstMove``(mover,e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled during the very first move notification; can be used to initialize coordinates, can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| e         | Event                   |             |\n\n### `onMouseDown``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousedown/ontouchstart, creates a Mover for the node\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseMove``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmousemove/ontouchmove, used only for delayed drags\n\n|           |       |                   |\n|-----------|-------|-------------------|\n| Parameter | Type  | Description       |\n| e         | Event | mouse/touch event |\n\n### `onMouseUp``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onmouseup, used only for delayed drags\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n### `onMove``(mover,leftTop)`\n\nDefined by: [dojo/dnd/TimedMoveable](timedmoveable)\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoved``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled after every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onMoveStart``(mover)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every move operation\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoveStop``(mover)`\n\nDefined by: [dojo/dnd/TimedMoveable](timedmoveable)\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoving``(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onSelectStart``(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/TimedMoveable.html](http://dojotoolkit.org/api/1.10/dojo/dnd/TimedMoveable.html)"
- name: dnd/TimedMoveable#onMove()
  id: dojo/dnd/timedmoveable#1_10dojo_dnd_TimedMoveable_onMove
  summary: called after every incremental move; can be overwritten
  belongs_to: dnd/TimedMoveable
  description: |-
    ### `onMove` `(mover,leftTop)`

    Defined by: [dojo/dnd/TimedMoveable](timedmoveable)

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
    | leftTop   | Object                  |             |

    ### `onMoved` `(mover,leftTop)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called after every incremental move; can be overwritten.

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
    | leftTop   | Object                  |             |

    ### `onMoveStart` `(mover)`

    Defined by: [dojo/dnd/Moveable](moveable)

    called before every move operation

    |           |                         |             |
    |-----------|-------------------------|-------------|
    | Parameter | Type                    | Description |
    | mover     | [dojo/dnd/Mover](mover) |             |
- name: dnd/TimedMoveable#onMoveStop()
  id: dojo/dnd/timedmoveable#1_10dojo_dnd_TimedMoveable_onMoveStop
  summary: called before every incremental move; can be overwritten
  belongs_to: dnd/TimedMoveable
  description: "### `onMoveStop` `(mover)`\n\nDefined by: [dojo/dnd/TimedMoveable](timedmoveable)\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n\n### `onMoving` `(mover,leftTop)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\ncalled before every incremental move; can be overwritten.\n\n|           |                         |             |\n|-----------|-------------------------|-------------|\n| Parameter | Type                    | Description |\n| mover     | [dojo/dnd/Mover](mover) |             |\n| leftTop   | Object                  |             |\n\n### `onSelectStart` `(e)`\n\nDefined by: [dojo/dnd/Moveable](moveable)\n\nevent processor for onselectevent and ondragevent\n\n|           |       |             |\n|-----------|-------|-------------|\n| Parameter | Type  | Description |\n| e         | Event | mouse event |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dnd/TimedMoveable.html](http://dojotoolkit.org/api/1.10/dojo/dnd/TimedMoveable.html)"
- name: dom
  id: dojo/dom
  summary: This module defines the core dojo DOM API
  description: "# dojo/dom\n\n## Summary\n\nThis module defines the core dojo DOM API.\n\nSee the [dojo/dom reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom.html) for more information.\n\n## Methods\n\n### `byId``(id,doc)`\n\nDefined by [dojo/dom](dom)\n\nReturns DOM node with matching `id` attribute or falsy value (ex: null or undefined) if not found. If `id` is a DomNode, this function is a no-op.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nLook up a node by ID:\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"foo\");\n});\n```\n\n### Example 2\n\nCheck if a node exists, and use it.\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"bar\");\n    if(n){ doStuff() ... }\n});\n```\n\n### Example 3\n\nAllow string or DomNode references to be passed to a custom function:\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var foo = function(nodeOrId){\n        nodeOrId = dom.byId(nodeOrId);\n        // ... more stuff\n    }\n});\n```\n\n### `isDescendant``(node,ancestor)`\n\nDefined by [dojo/dom](dom)\n\nReturns true if node is a descendant of ancestor\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | string id or node reference to test                             |\n| ancestor  | DOMNode \\| String | string id or node reference of potential parent to test against |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nTest is node id=\"bar\" is a descendant of node id=\"foo\"\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    if(dom.isDescendant(\"bar\", \"foo\")){ ... }\n});\n```\n\n### `setSelectable``(node,selectable)`\n\nDefined by [dojo/dom](dom)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| node       | undefined |             |\n| selectable | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom.html](http://dojotoolkit.org/api/1.10/dojo/dom.html)"
- name: dom#byId()
  id: dojo/dom#1_10dojo_dom_byId
  summary: 'Returns DOM node with matching id attribute or falsy value (ex: null or undefined) if not found'
  belongs_to: dom
  description: "### `byId` `(id,doc)`\n\nDefined by [dojo/dom](dom)\n\nReturns DOM node with matching `id` attribute or falsy value (ex: null or undefined) if not found. If `id` is a DomNode, this function is a no-op.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nLook up a node by ID:\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"foo\");\n});\n    \n```\n\n### Example 2\n\nCheck if a node exists, and use it.\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"bar\");\n    if(n){ doStuff() ... }\n});\n    \n```\n\n### Example 3\n\nAllow string or DomNode references to be passed to a custom function:\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var foo = function(nodeOrId){\n        nodeOrId = dom.byId(nodeOrId);\n        // ... more stuff\n    }\n});\n    \n```"
- name: dom#isDescendant()
  id: dojo/dom#1_10dojo_dom_isDescendant
  summary: null
  belongs_to: dom
  description: "### `isDescendant` `(node,ancestor)`\n\nDefined by [dojo/dom](dom)\n\nReturns true if node is a descendant of ancestor\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | string id or node reference to test                             |\n| ancestor  | DOMNode \\| String | string id or node reference of potential parent to test against |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nTest is node id=\"bar\" is a descendant of node id=\"foo\"\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    if(dom.isDescendant(\"bar\", \"foo\")){ ... }\n});\n    \n```"
- name: dom#setSelectable()
  id: dojo/dom#1_10dojo_dom_setSelectable
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dom
  description: "### `setSelectable` `(node,selectable)`\n\nDefined by [dojo/dom](dom)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| node       | undefined |             |\n| selectable | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom.html](http://dojotoolkit.org/api/1.10/dojo/dom.html)"
- name: dom-attr
  id: dojo/dom-attr
  summary: See the dojo/dom-attr reference documentation for more information
  description: "# dojo/dom-attr\n\nSee the [dojo/dom-attr reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom-attr.html) for more information.\n\n## Methods\n\n### `get``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nGets an attribute on an HTML element.\n\nHandles normalized getting of attributes on DOM Nodes.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | DOMNode \\| String | id or reference to the element to get the attribute on |\n| name      | String            | the name of the attribute to get.                      |\n\n**Returns:** any \\| undefined \\| null\n\nthe value of the requested attribute or null if that attribute does not have a specified or default value;\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" attribute on a node\nrequire([\"dojo/dom-attr\", \"dojo/dom\"], function(domAttr, dom){\n    domAttr.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domAttr.get(\"nodeId\", \"foo\");\n}); \n```\n\n### `getNodeProp``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nReturns an effective value of a property or an attribute.\n\n|           |                   |                                                             |\n|-----------|-------------------|-------------------------------------------------------------|\n| Parameter | Type              | Description                                                 |\n| node      | DOMNode \\| String | id or reference to the element to remove the attribute from |\n| name      | String            | the name of the attribute                                   |\n\n**Returns:** any\n\nthe value of the attribute\n\n### `has``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nReturns true if the requested attribute is specified on the given element, and false otherwise.\n\n|           |                   |                                         |\n|-----------|-------------------|-----------------------------------------|\n| Parameter | Type              | Description                             |\n| node      | DOMNode \\| String | id or reference to the element to check |\n| name      | String            | the name of the attribute               |\n\n**Returns:** Boolean \\| contentWindow.document isn't accessible within IE7/8\n\ntrue if the requested attribute is specified on the given element, and false otherwise\n\n### `remove``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nRemoves an attribute from an HTML element.\n\n|           |                   |                                                             |\n|-----------|-------------------|-------------------------------------------------------------|\n| Parameter | Type              | Description                                                 |\n| node      | DOMNode \\| String | id or reference to the element to remove the attribute from |\n| name      | String            | the name of the attribute to remove                         |\n\n### `set``(node,name,value)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nSets an attribute on an HTML element.\n\nHandles normalized setting of attributes on DOM Nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// use attr() to set the tab index\nrequire([\"dojo/dom-attr\"], function(domAttr){\n    domAttr.set(\"nodeId\", \"tabIndex\", 3);\n});\n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\nrequire([\"dojo/dom-attr\"],\nfunction(domAttr){\n    domAttr.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\"\n    }\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-attr.html](http://dojotoolkit.org/api/1.10/dojo/dom-attr.html)"
- name: dom-attr#get()
  id: dojo/dom-attr#1_10dojo_dom-attr_get
  summary: Gets an attribute on an HTML element
  belongs_to: dom-attr
  description: "### `get` `(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nGets an attribute on an HTML element.\n\nHandles normalized getting of attributes on DOM Nodes.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | DOMNode \\| String | id or reference to the element to get the attribute on |\n| name      | String            | the name of the attribute to get.                      |\n\n**Returns:** any \\| undefined \\| null\n\nthe value of the requested attribute or null if that attribute does not have a specified or default value;\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" attribute on a node\nrequire([\"dojo/dom-attr\", \"dojo/dom\"], function(domAttr, dom){\n    domAttr.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domAttr.get(\"nodeId\", \"foo\");\n}); \n    \n```"
- name: dom-attr#getNodeProp()
  id: dojo/dom-attr#1_10dojo_dom-attr_getNodeProp
  summary: Returns an effective value of a property or an attribute
  belongs_to: dom-attr
  description: |-
    ### `getNodeProp` `(node,name)`

    Defined by [dojo/dom-attr](dom-attr)

    Returns an effective value of a property or an attribute.

    |           |                   |                                                             |
    |-----------|-------------------|-------------------------------------------------------------|
    | Parameter | Type              | Description                                                 |
    | node      | DOMNode \| String | id or reference to the element to remove the attribute from |
    | name      | String            | the name of the attribute                                   |

    **Returns:** any

    the value of the attribute
- name: dom-attr#has()
  id: dojo/dom-attr#1_10dojo_dom-attr_has
  summary: Returns true if the requested attribute is specified on the given element, and false otherwise
  belongs_to: dom-attr
  description: |-
    ### `has` `(node,name)`

    Defined by [dojo/dom-attr](dom-attr)

    Returns true if the requested attribute is specified on the given element, and false otherwise.

    |           |                   |                                         |
    |-----------|-------------------|-----------------------------------------|
    | Parameter | Type              | Description                             |
    | node      | DOMNode \| String | id or reference to the element to check |
    | name      | String            | the name of the attribute               |

    **Returns:** Boolean \| contentWindow.document isn't accessible within IE7/8

    true if the requested attribute is specified on the given element, and false otherwise
- name: dom-attr#remove()
  id: dojo/dom-attr#1_10dojo_dom-attr_remove
  summary: Removes an attribute from an HTML element
  belongs_to: dom-attr
  description: |-
    ### `remove` `(node,name)`

    Defined by [dojo/dom-attr](dom-attr)

    Removes an attribute from an HTML element.

    |           |                   |                                                             |
    |-----------|-------------------|-------------------------------------------------------------|
    | Parameter | Type              | Description                                                 |
    | node      | DOMNode \| String | id or reference to the element to remove the attribute from |
    | name      | String            | the name of the attribute to remove                         |
- name: dom-attr#set()
  id: dojo/dom-attr#1_10dojo_dom-attr_set
  summary: Sets an attribute on an HTML element
  belongs_to: dom-attr
  description: "### `set` `(node,name,value)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nSets an attribute on an HTML element.\n\nHandles normalized setting of attributes on DOM Nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // use attr() to set the tab index\nrequire([\"dojo/dom-attr\"], function(domAttr){\n    domAttr.set(\"nodeId\", \"tabIndex\", 3);\n});\n    \n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      require([\"dojo/dom-attr\"],\nfunction(domAttr){\n    domAttr.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\"\n    }\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-attr.html](http://dojotoolkit.org/api/1.10/dojo/dom-attr.html)"
- name: dom-class
  id: dojo/dom-class
  summary: This module defines the core dojo DOM class API
  description: "# dojo/dom-class\n\n## Summary\n\nThis module defines the core dojo DOM class API.\n\nSee the [dojo/dom-class reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom-class.html) for more information.\n\n## Methods\n\n### `add``(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds the specified classes to the end of the class list on the passed node. Will not re-apply duplicate classes.\n\n|           |                   |                                                                                                 |\n|-----------|-------------------|-------------------------------------------------------------------------------------------------|\n| Parameter | Type              | Description                                                                                     |\n| node      | String \\| DOMNode | String ID or DomNode reference to add a class string too                                        |\n| classStr  | String \\| Array   | A String class name to add, or several space-separated class names, or an array of class names. |\n\n## Examples\n\n### Example 1\n\nAdd a class to some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"anewClass\");\n});\n```\n\n### Example 2\n\nAdd two classes at once:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"firstClass secondClass\");\n});\n```\n\n### Example 3\n\nAdd two classes at once (using array):\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n```\n\n### Example 4\n\nAvailable in `dojo/NodeList` for multiple additions\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\"ul > li\").addClass(\"firstLevel\");\n});\n```\n\n### `contains``(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReturns whether or not the specified classes are a portion of the class list currently applied to the node.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | String \\| DOMNode | String ID or DomNode reference to check the class for. |\n| classStr  | String            | A string class name to look for.                       |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nDo something if a node with id=\"someNode\" has class=\"aSillyClassName\" present\n\n``` javascript\nif(dojo.hasClass(\"someNode\",\"aSillyClassName\")){ ... }\n```\n\n### `remove``(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nRemoves the specified classes from node. No `contains()` check is required.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nRemove a class from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass\");\n});\n```\n\n### Example 2\n\nRemove two classes from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass secondClass\");\n});\n```\n\n### Example 3\n\nRemove two classes from some node (using array):\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n```\n\n### Example 4\n\nRemove all classes from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\");\n});\n```\n\n### Example 5\n\nAvailable in `dojo/NodeList` for multiple removal\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\"ul > li\").removeClass(\"foo\");\n});\n```\n\n### `replace``(node,addClassStr,removeClassStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReplaces one or more classes on a node if not present. Operates more quickly than calling dojo.removeClass and dojo.addClass\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"add1 add2\", \"remove1 remove2\");\n});\n```\n\n### Example 2\n\nReplace all classes with addMe\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"addMe\");\n});\n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\".findMe\").replaceClass(\"addMe\", \"removeMe\");\n});\n```\n\n### `toggle``(node,classStr,condition)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove. Returns the condition that was specified directly or indirectly.\n\n[TABLE]\n\n**Returns:** Boolean\n\nIf passed, true means to add the class, false means to remove. Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\");\n});\n```\n\n### Example 2\n\nForcefully add a class\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\", true);\n});\n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\".toggleMe\").toggleClass(\"toggleMe\");\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-class.html](http://dojotoolkit.org/api/1.10/dojo/dom-class.html)"
- name: dom-class#add()
  id: dojo/dom-class#1_10dojo_dom-class_add
  summary: Adds the specified classes to the end of the class list on the passed node
  belongs_to: dom-class
  description: "### `add` `(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds the specified classes to the end of the class list on the passed node. Will not re-apply duplicate classes.\n\n|           |                   |                                                                                                 |\n|-----------|-------------------|-------------------------------------------------------------------------------------------------|\n| Parameter | Type              | Description                                                                                     |\n| node      | String \\| DOMNode | String ID or DomNode reference to add a class string too                                        |\n| classStr  | String \\| Array   | A String class name to add, or several space-separated class names, or an array of class names. |\n\n## Examples\n\n### Example 1\n\nAdd a class to some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"anewClass\");\n});\n    \n```\n\n### Example 2\n\nAdd two classes at once:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"firstClass secondClass\");\n});\n    \n```\n\n### Example 3\n\nAdd two classes at once (using array):\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n    \n```\n\n### Example 4\n\nAvailable in `dojo/NodeList` for multiple additions\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\"ul > li\").addClass(\"firstLevel\");\n});\n    \n```"
- name: dom-class#contains()
  id: dojo/dom-class#1_10dojo_dom-class_contains
  summary: Returns whether or not the specified classes are a portion of the class list currently applied to the node
  belongs_to: dom-class
  description: "### `contains` `(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReturns whether or not the specified classes are a portion of the class list currently applied to the node.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | String \\| DOMNode | String ID or DomNode reference to check the class for. |\n| classStr  | String            | A string class name to look for.                       |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nDo something if a node with id=\"someNode\" has class=\"aSillyClassName\" present\n\n``` javascript\n      if(dojo.hasClass(\"someNode\",\"aSillyClassName\")){ ... }\n    \n```"
- name: dom-class#remove()
  id: dojo/dom-class#1_10dojo_dom-class_remove
  summary: Removes the specified classes from node
  belongs_to: dom-class
  description: "### `remove` `(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nRemoves the specified classes from node. No `contains()` check is required.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nRemove a class from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass\");\n});\n    \n```\n\n### Example 2\n\nRemove two classes from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass secondClass\");\n});\n    \n```\n\n### Example 3\n\nRemove two classes from some node (using array):\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n    \n```\n\n### Example 4\n\nRemove all classes from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\");\n});\n    \n```\n\n### Example 5\n\nAvailable in `dojo/NodeList` for multiple removal\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\"ul > li\").removeClass(\"foo\");\n});\n    \n```"
- name: dom-class#replace()
  id: dojo/dom-class#1_10dojo_dom-class_replace
  summary: Replaces one or more classes on a node if not present
  belongs_to: dom-class
  description: "### `replace` `(node,addClassStr,removeClassStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReplaces one or more classes on a node if not present. Operates more quickly than calling dojo.removeClass and dojo.addClass\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"add1 add2\", \"remove1 remove2\");\n});\n    \n```\n\n### Example 2\n\nReplace all classes with addMe\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"addMe\");\n});\n    \n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\".findMe\").replaceClass(\"addMe\", \"removeMe\");\n});\n    \n```"
- name: dom-class#toggle()
  id: dojo/dom-class#1_10dojo_dom-class_toggle
  summary: Adds a class to node if not present, or removes if present
  belongs_to: dom-class
  description: "### `toggle` `(node,classStr,condition)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove. Returns the condition that was specified directly or indirectly.\n\n[TABLE]\n\n**Returns:** Boolean\n\nIf passed, true means to add the class, false means to remove. Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\");\n});\n    \n```\n\n### Example 2\n\nForcefully add a class\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\", true);\n});\n    \n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\".toggleMe\").toggleClass(\"toggleMe\");\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-class.html](http://dojotoolkit.org/api/1.10/dojo/dom-class.html)"
- name: dom-construct
  id: dojo/dom-construct
  summary: See the dojo/dom-construct reference documentation for more information
  description: "# dojo/dom-construct\n\nSee the [dojo/dom-construct reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom-construct.html) for more information.\n\n## Methods\n\n### `create``(tag,attrs,refNode,pos)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nCreate an element, allowing for optional attribute decoration and placement.\n\nA DOM Element creation function. A shorthand method for creating a node or a fragment, and allowing for a convenient optional attribute setting step, as well as an optional DOM placement reference.\n\nAttributes are set by passing the optional object through `dojo.setAttr`. See `dojo.setAttr` for noted caveats and nuances, and API if applicable.\n\nPlacement is done via `dojo.place`, assuming the new node to be the action node, passing along the optional reference node and position.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a DIV:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\");\n});\n```\n\n### Example 2\n\nCreate a DIV with content:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", { innerHTML:\"<p>hi</p>\" });\n});\n```\n\n### Example 3\n\nPlace a new DIV in the BODY, with no attributes set\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", null, dojo.body());\n});\n```\n\n### Example 4\n\nCreate an UL, and populate it with LI's. Place the list as the first-child of a node with id=\"someId\":\n\n``` javascript\nrequire([\"dojo/dom-construct\", \"dojo/_base/array\"],\nfunction(domConstruct, arrayUtil){\n    var ul = domConstruct.create(\"ul\", null, \"someId\", \"first\");\n    var items = [\"one\", \"two\", \"three\", \"four\"];\n    arrayUtil.forEach(items, function(data){\n        domConstruct.create(\"li\", { innerHTML: data }, ul);\n    });\n});\n```\n\n### Example 5\n\nCreate an anchor, with an href. Place in BODY:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.create(\"a\", { href:\"foo.html\", title:\"Goto FOO!\" }, dojo.body());\n});\n```\n\n### `destroy``(node)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nRemoves a node from its parent, clobbering it and all of its children.\n\nRemoves a node from its parent, clobbering it and all of its children. Function only works with DomNodes, and returns nothing.\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | A String ID or DomNode reference of the element to be destroyed |\n\n## Examples\n\n### Example 1\n\nDestroy a node byId:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.destroy(\"someId\");\n});\n```\n\n### `empty``(node)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nsafely removes all children of the node.\n\n|           |                   |                                     |\n|-----------|-------------------|-------------------------------------|\n| Parameter | Type              | Description                         |\n| node      | DOMNode \\| String | a reference to a DOM node or an id. |\n\n## Examples\n\n### Example 1\n\nDestroy node's children byId:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.empty(\"someId\");\n});\n```\n\n### `place``(node,refNode,position)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nAttempt to insert node into the DOM, choosing from various positioning options. Returns the first argument resolved to a DOM node.\n\n[TABLE]\n\n**Returns:** DOMNode \\| undefined\n\nReturned values is the first argument resolved to a DOM node.\n\n.place() is also a method of `dojo/NodeList`, allowing `dojo/query` node lookups.\n\n## Examples\n\n### Example 1\n\nPlace a node by string id as the last child of another node by string id:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\");\n});\n```\n\n### Example 2\n\nPlace a node by string id before another node by string id\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\", \"before\");\n});\n```\n\n### Example 3\n\nCreate a Node, and place it in the body element (last child):\n\n``` javascript\nrequire([\"dojo/dom-construct\", \"dojo/_base/window\"\n], function(domConstruct, win){\n    domConstruct.place(\"<div></div>\", win.body());\n});\n```\n\n### Example 4\n\nPut a new LI as the first child of a list by id:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"<li></li>\", \"someUl\", \"first\");\n});\n```\n\n### `toDom``(frag,doc)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\ninstantiates an HTML fragment returning the corresponding DOM.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nDocument fragment, unless it's a single node in which case it returns the node itself\n\n## Examples\n\n### Example 1\n\nCreate a table row:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var tr = domConstruct.toDom(\"<tr><td>First!</td></tr>\");\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-construct.html](http://dojotoolkit.org/api/1.10/dojo/dom-construct.html)"
- name: dom-construct#create()
  id: dojo/dom-construct#1_10dojo_dom-construct_create
  summary: Create an element, allowing for optional attribute decoration and placement
  belongs_to: dom-construct
  description: "### `create` `(tag,attrs,refNode,pos)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nCreate an element, allowing for optional attribute decoration and placement.\n\nA DOM Element creation function. A shorthand method for creating a node or a fragment, and allowing for a convenient optional attribute setting step, as well as an optional DOM placement reference.\n\nAttributes are set by passing the optional object through `dojo.setAttr`. See `dojo.setAttr` for noted caveats and nuances, and API if applicable.\n\nPlacement is done via `dojo.place`, assuming the new node to be the action node, passing along the optional reference node and position.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a DIV:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\");\n});\n    \n```\n\n### Example 2\n\nCreate a DIV with content:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", { innerHTML:\"<p>hi</p>\" });\n});\n    \n```\n\n### Example 3\n\nPlace a new DIV in the BODY, with no attributes set\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", null, dojo.body());\n});\n    \n```\n\n### Example 4\n\nCreate an UL, and populate it with LI's. Place the list as the first-child of a node with id=\"someId\":\n\n``` javascript\n      require([\"dojo/dom-construct\", \"dojo/_base/array\"],\nfunction(domConstruct, arrayUtil){\n    var ul = domConstruct.create(\"ul\", null, \"someId\", \"first\");\n    var items = [\"one\", \"two\", \"three\", \"four\"];\n    arrayUtil.forEach(items, function(data){\n        domConstruct.create(\"li\", { innerHTML: data }, ul);\n    });\n});\n    \n```\n\n### Example 5\n\nCreate an anchor, with an href. Place in BODY:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.create(\"a\", { href:\"foo.html\", title:\"Goto FOO!\" }, dojo.body());\n});\n    \n```"
- name: dom-construct#destroy()
  id: dojo/dom-construct#1_10dojo_dom-construct_destroy
  summary: Removes a node from its parent, clobbering it and all of its children
  belongs_to: dom-construct
  description: "### `destroy` `(node)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nRemoves a node from its parent, clobbering it and all of its children.\n\nRemoves a node from its parent, clobbering it and all of its children. Function only works with DomNodes, and returns nothing.\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | A String ID or DomNode reference of the element to be destroyed |\n\n## Examples\n\n### Example 1\n\nDestroy a node byId:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.destroy(\"someId\");\n});\n    \n```"
- name: dom-construct#empty()
  id: dojo/dom-construct#1_10dojo_dom-construct_empty
  summary: safely removes all children of the node
  belongs_to: dom-construct
  description: "### `empty` `(node)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nsafely removes all children of the node.\n\n|           |                   |                                     |\n|-----------|-------------------|-------------------------------------|\n| Parameter | Type              | Description                         |\n| node      | DOMNode \\| String | a reference to a DOM node or an id. |\n\n## Examples\n\n### Example 1\n\nDestroy node's children byId:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.empty(\"someId\");\n});\n    \n```"
- name: dom-construct#place()
  id: dojo/dom-construct#1_10dojo_dom-construct_place
  summary: Attempt to insert node into the DOM, choosing from various positioning options
  belongs_to: dom-construct
  description: "### `place` `(node,refNode,position)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nAttempt to insert node into the DOM, choosing from various positioning options. Returns the first argument resolved to a DOM node.\n\n[TABLE]\n\n**Returns:** DOMNode \\| undefined\n\nReturned values is the first argument resolved to a DOM node.\n\n.place() is also a method of `dojo/NodeList`, allowing `dojo/query` node lookups.\n\n## Examples\n\n### Example 1\n\nPlace a node by string id as the last child of another node by string id:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\");\n});\n    \n```\n\n### Example 2\n\nPlace a node by string id before another node by string id\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\", \"before\");\n});\n    \n```\n\n### Example 3\n\nCreate a Node, and place it in the body element (last child):\n\n``` javascript\n      require([\"dojo/dom-construct\", \"dojo/_base/window\"\n], function(domConstruct, win){\n    domConstruct.place(\"<div></div>\", win.body());\n});\n    \n```\n\n### Example 4\n\nPut a new LI as the first child of a list by id:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"<li></li>\", \"someUl\", \"first\");\n});\n    \n```"
- name: dom-construct#toDom()
  id: dojo/dom-construct#1_10dojo_dom-construct_toDom
  summary: instantiates an HTML fragment returning the corresponding DOM
  belongs_to: dom-construct
  description: "### `toDom` `(frag,doc)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\ninstantiates an HTML fragment returning the corresponding DOM.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nDocument fragment, unless it's a single node in which case it returns the node itself\n\n## Examples\n\n### Example 1\n\nCreate a table row:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var tr = domConstruct.toDom(\"<tr><td>First!</td></tr>\");\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-construct.html](http://dojotoolkit.org/api/1.10/dojo/dom-construct.html)"
- name: dom-form
  id: dojo/dom-form
  summary: This module defines form-processing functions
  description: "# dojo/dom-form\n\n## Summary\n\nThis module defines form-processing functions.\n\nSee the [dojo/dom-form reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom-form.html) for more information.\n\n## Methods\n\n### `fieldToObject``(inputNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nSerialize a form field to a JavaScript object.\n\nReturns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| inputNode | DOMNode \\| String |             |\n\n**Returns:** Object \\| undefined\n\n### `toJson``(formNode,prettyPrint)`\n\nDefined by [dojo/dom-form](dom-form)\n\nCreate a serialized JSON string from a form node or string ID identifying the form to serialize\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\n### `toObject``(formNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n<form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\n### `toQuery``(formNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nReturns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** String \\| undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-form.html](http://dojotoolkit.org/api/1.10/dojo/dom-form.html)"
- name: dom-form#fieldToObject()
  id: dojo/dom-form#1_10dojo_dom-form_fieldToObject
  summary: Serialize a form field to a JavaScript object
  belongs_to: dom-form
  description: |-
    ### `fieldToObject` `(inputNode)`

    Defined by [dojo/dom-form](dom-form)

    Serialize a form field to a JavaScript object.

    Returns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.

    |           |                   |             |
    |-----------|-------------------|-------------|
    | Parameter | Type              | Description |
    | inputNode | DOMNode \| String |             |

    **Returns:** Object \| undefined
- name: dom-form#toJson()
  id: dojo/dom-form#1_10dojo_dom-form_toJson
  summary: null
  belongs_to: dom-form
  description: |-
    ### `toJson` `(formNode,prettyPrint)`

    Defined by [dojo/dom-form](dom-form)

    Create a serialized JSON string from a form node or string ID identifying the form to serialize

    [TABLE]

    **Returns:** String \| undefined
- name: dom-form#toObject()
  id: dojo/dom-form#1_10dojo_dom-form_toObject
  summary: Serialize a form node to a JavaScript object
  belongs_to: dom-form
  description: "### `toObject` `(formNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n      <form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n    \n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```"
- name: dom-form#toQuery()
  id: dojo/dom-form#1_10dojo_dom-form_toQuery
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: dom-form
  description: "### `toQuery` `(formNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nReturns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** String \\| undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-form.html](http://dojotoolkit.org/api/1.10/dojo/dom-form.html)"
- name: dom-geometry
  id: dojo/dom-geometry
  summary: This module defines the core dojo DOM geometry API
  description: "# dojo/dom-geometry\n\n## Summary\n\nThis module defines the core dojo DOM geometry API.\n\nSee the [dojo/dom-geometry reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom-geometry.html) for more information.\n\n## Properties\n\n### boxModel\n\nDefined by: [dojo/dom-geometry](dom-geometry)\n\n## Methods\n\n### `docScroll``(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns an object with {node, x, y} with corresponding offsets.\n\n[TABLE]\n\n**Returns:** Object \\| undefined\n\n### `fixIeBiDiScrollLeft``(scrollLeft,doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nIn RTL direction, scrollLeft should be a negative value, but IE returns a positive one. All codes using documentElement.scrollLeft must call this function to fix this error, otherwise the position will offset to right when there is a horizontal scrollbar.\n\n[TABLE]\n\n**Returns:** Number \\| number\n\n### `getBorderExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns an object with properties useful for noting the border dimensions.\n\n- l/t/r/b = the sum of left/top/right/bottom border (respectively)\n- w = the sum of the left and right border\n- h = the sum of the top and bottom border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getContentBox``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.\n\n[TABLE]\n\n**Returns:** object\n\n### `getIeDocumentElementOffset``(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns the offset in x and y from the document body to the visual edge of the page for IE\n\nThe following values in IE contain an offset:\n\n``` javascript\nevent.clientX\nevent.clientY\nnode.getBoundingClientRect().left\nnode.getBoundingClientRect().top\n```\n\nBut other position related values do not contain this offset,\n\nsuch as node.offsetLeft, node.offsetTop, node.style.left and node.style.top. The offset is always (2, 2) in LTR direction. When the body is in RTL direction, the offset counts the width of left scroll bar's width. This function computes the actual offset.\n\n[TABLE]\n\n**Returns:** object\n\n### `getMarginBox``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns an object that encodes the width, height, left and top positions of the node's margin box.\n\n[TABLE]\n\n**Returns:** object\n\n### `getMarginExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).\n\n- l/t = marginLeft, marginTop, respectively\n- w = total width, margin inclusive\n- h = total height, margin inclusive\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getMarginSize``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns an object that encodes the width and height of the node's margin box\n\n[TABLE]\n\n**Returns:** object\n\n### `getPadBorderExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns object with properties useful for box fitting with regards to padding.\n\n- l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)\n- w = the sum of the left and right padding and border\n- h = the sum of the top and bottom padding and border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getPadExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns object with special values specifically useful for node fitting.\n\nReturns an object with `w`, `h`, `l`, `t` properties:\n\n``` javascript\nl/t/r/b = left/top/right/bottom padding (respectively)\nw = the total of the left and right padding\nh = the total of the top and bottom padding\n```\n\nIf 'node' has position, l/t forms the origin for child nodes.\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `isBodyLtr``(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns true if the current language is left-to-right, and false otherwise.\n\n[TABLE]\n\n**Returns:** Boolean \\| boolean\n\n### `normalizeEvent``(event)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nNormalizes the geometry of a DOM event, normalizing the pageX, pageY, offsetX, offsetY, layerX, and layerX properties\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| event     | Object |             |\n\n### `position``(node,includeScroll)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nGets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).\n\nReturns an object of the form: `{ x: 100, y: 300, w: 20, h: 15 }`. If includeScroll==true, the x and y values will include any document offsets that may affect the position relative to the viewport. Uses the border-box model (inclusive of border and padding but not margin). Does not act as a setter.\n\n[TABLE]\n\n**Returns:** Object \\| object\n\n### `setContentSize``(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nSets the size of the node's contents, irrespective of margins, padding, or borders.\n\n[TABLE]\n\n### `setMarginBox``(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nsets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to setBox that handles box-model vagaries for you.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-geometry.html](http://dojotoolkit.org/api/1.10/dojo/dom-geometry.html)"
- name: dom-geometry#docScroll()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_docScroll
  summary: Returns an object with {node, x, y} with corresponding offsets
  belongs_to: dom-geometry
  description: |-
    ### `docScroll` `(doc)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Returns an object with {node, x, y} with corresponding offsets.

    [TABLE]

    **Returns:** Object \| undefined
- name: dom-geometry#fixIeBiDiScrollLeft()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_fixIeBiDiScrollLeft
  summary: In RTL direction, scrollLeft should be a negative value, but IE returns a positive one
  belongs_to: dom-geometry
  description: |-
    ### `fixIeBiDiScrollLeft` `(scrollLeft,doc)`

    Defined by [dojo/dom-geometry](dom-geometry)

    In RTL direction, scrollLeft should be a negative value, but IE returns a positive one. All codes using documentElement.scrollLeft must call this function to fix this error, otherwise the position will offset to right when there is a horizontal scrollbar.

    [TABLE]

    **Returns:** Number \| number
- name: dom-geometry#getBorderExtents()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getBorderExtents
  summary: returns an object with properties useful for noting the border dimensions
  belongs_to: dom-geometry
  description: |-
    ### `getBorderExtents` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    returns an object with properties useful for noting the border dimensions.

    - l/t/r/b = the sum of left/top/right/bottom border (respectively)
    - w = the sum of the left and right border
    - h = the sum of the top and bottom border

    The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.

    [TABLE]

    **Returns:** object
- name: dom-geometry#getContentBox()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getContentBox
  summary: Returns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model
  belongs_to: dom-geometry
  description: |-
    ### `getContentBox` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Returns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.

    [TABLE]

    **Returns:** object
- name: dom-geometry#getIeDocumentElementOffset()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getIeDocumentElementOffset
  summary: such as node.offsetLeft, node.offsetTop, node.style.left and node.style.top
  belongs_to: dom-geometry
  description: "### `getIeDocumentElementOffset` `(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns the offset in x and y from the document body to the visual edge of the page for IE\n\nThe following values in IE contain an offset:\n\n``` javascript\n      event.clientX\nevent.clientY\nnode.getBoundingClientRect().left\nnode.getBoundingClientRect().top\n    \n```\n\nBut other position related values do not contain this offset,\n\nsuch as node.offsetLeft, node.offsetTop, node.style.left and node.style.top. The offset is always (2, 2) in LTR direction. When the body is in RTL direction, the offset counts the width of left scroll bar's width. This function computes the actual offset.\n\n[TABLE]\n\n**Returns:** object"
- name: dom-geometry#getMarginBox()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getMarginBox
  summary: returns an object that encodes the width, height, left and top positions of the node's margin box
  belongs_to: dom-geometry
  description: |-
    ### `getMarginBox` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    returns an object that encodes the width, height, left and top positions of the node's margin box.

    [TABLE]

    **Returns:** object
- name: dom-geometry#getMarginExtents()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getMarginExtents
  summary: returns object with properties useful for box fitting with regards to box margins (i.e., the outer-box)
  belongs_to: dom-geometry
  description: |-
    ### `getMarginExtents` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    returns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).

    - l/t = marginLeft, marginTop, respectively
    - w = total width, margin inclusive
    - h = total height, margin inclusive

    The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.

    [TABLE]

    **Returns:** object
- name: dom-geometry#getMarginSize()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getMarginSize
  summary: null
  belongs_to: dom-geometry
  description: |-
    ### `getMarginSize` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    returns an object that encodes the width and height of the node's margin box

    [TABLE]

    **Returns:** object
- name: dom-geometry#getPadBorderExtents()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getPadBorderExtents
  summary: Returns object with properties useful for box fitting with regards to padding
  belongs_to: dom-geometry
  description: |-
    ### `getPadBorderExtents` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Returns object with properties useful for box fitting with regards to padding.

    - l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)
    - w = the sum of the left and right padding and border
    - h = the sum of the top and bottom padding and border

    The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.

    [TABLE]

    **Returns:** object
- name: dom-geometry#getPadExtents()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_getPadExtents
  summary: Returns object with special values specifically useful for node fitting
  belongs_to: dom-geometry
  description: "### `getPadExtents` `(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns object with special values specifically useful for node fitting.\n\nReturns an object with `w`, `h`, `l`, `t` properties:\n\n``` javascript\n      l/t/r/b = left/top/right/bottom padding (respectively)\nw = the total of the left and right padding\nh = the total of the top and bottom padding\n    \n```\n\nIf 'node' has position, l/t forms the origin for child nodes.\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object"
- name: dom-geometry#isBodyLtr()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_isBodyLtr
  summary: Returns true if the current language is left-to-right, and false otherwise
  belongs_to: dom-geometry
  description: |-
    ### `isBodyLtr` `(doc)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Returns true if the current language is left-to-right, and false otherwise.

    [TABLE]

    **Returns:** Boolean \| boolean
- name: dom-geometry#normalizeEvent()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_normalizeEvent
  summary: null
  belongs_to: dom-geometry
  description: |-
    ### `normalizeEvent` `(event)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Normalizes the geometry of a DOM event, normalizing the pageX, pageY, offsetX, offsetY, layerX, and layerX properties

    |           |        |             |
    |-----------|--------|-------------|
    | Parameter | Type   | Description |
    | event     | Object |             |
- name: dom-geometry#position()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_position
  summary: Gets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true)
  belongs_to: dom-geometry
  description: |-
    ### `position` `(node,includeScroll)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Gets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).

    Returns an object of the form: `{ x: 100, y: 300, w: 20, h: 15 }`. If includeScroll==true, the x and y values will include any document offsets that may affect the position relative to the viewport. Uses the border-box model (inclusive of border and padding but not margin). Does not act as a setter.

    [TABLE]

    **Returns:** Object \| object
- name: dom-geometry#setContentSize()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_setContentSize
  summary: Sets the size of the node's contents, irrespective of margins, padding, or borders
  belongs_to: dom-geometry
  description: |-
    ### `setContentSize` `(node,box,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Sets the size of the node's contents, irrespective of margins, padding, or borders.

    [TABLE]
- name: dom-geometry#setMarginBox()
  id: dojo/dom-geometry#1_10dojo_dom-geometry_setMarginBox
  summary: sets the size of the node's margin box and placement (left/top), irrespective of box model
  belongs_to: dom-geometry
  description: "### `setMarginBox` `(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nsets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to setBox that handles box-model vagaries for you.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-geometry.html](http://dojotoolkit.org/api/1.10/dojo/dom-geometry.html)"
- name: dom-prop
  id: dojo/dom-prop
  summary: See the dojo/dom-prop reference documentation for more information
  description: "# dojo/dom-prop\n\nSee the [dojo/dom-prop reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom-prop.html) for more information.\n\n## Properties\n\n### names\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n## Methods\n\n### `get``(node,name)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nGets a property on an HTML element.\n\nHandles normalized getting of properties on DOM nodes.\n\n|           |                   |                                                       |\n|-----------|-------------------|-------------------------------------------------------|\n| Parameter | Type              | Description                                           |\n| node      | DOMNode \\| String | id or reference to the element to get the property on |\n| name      | String            | the name of the property to get.                      |\n\n**Returns:** any \\| undefined\n\nthe value of the requested property or its default value\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" property on a node\nrequire([\"dojo/dom-prop\", \"dojo/dom\"], function(domProp, dom){\n    domProp.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domProp.get(\"nodeId\", \"foo\");\n});\n```\n\n### `set``(node,name,value)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nSets a property on an HTML element.\n\nHandles normalized setting of properties on DOM nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// use prop() to set the tab index\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"nodeId\", \"tabIndex\", 3);\n});\n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\",\n    });\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-prop.html](http://dojotoolkit.org/api/1.10/dojo/dom-prop.html)"
- name: dom-prop#get()
  id: dojo/dom-prop#1_10dojo_dom-prop_get
  summary: Gets a property on an HTML element
  belongs_to: dom-prop
  description: "### `get` `(node,name)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nGets a property on an HTML element.\n\nHandles normalized getting of properties on DOM nodes.\n\n|           |                   |                                                       |\n|-----------|-------------------|-------------------------------------------------------|\n| Parameter | Type              | Description                                           |\n| node      | DOMNode \\| String | id or reference to the element to get the property on |\n| name      | String            | the name of the property to get.                      |\n\n**Returns:** any \\| undefined\n\nthe value of the requested property or its default value\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" property on a node\nrequire([\"dojo/dom-prop\", \"dojo/dom\"], function(domProp, dom){\n    domProp.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domProp.get(\"nodeId\", \"foo\");\n});\n    \n```"
- name: dom-prop#names
  id: dojo/dom-prop#1_10dojo_dom-prop_names
  summary: null
  belongs_to: dom-prop
  description: |-
    ### names

    Defined by: [dojo/dom-prop](dom-prop)

    ## Methods
- name: dom-prop#set()
  id: dojo/dom-prop#1_10dojo_dom-prop_set
  summary: Sets a property on an HTML element
  belongs_to: dom-prop
  description: "### `set` `(node,name,value)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nSets a property on an HTML element.\n\nHandles normalized setting of properties on DOM nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // use prop() to set the tab index\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"nodeId\", \"tabIndex\", 3);\n});\n    \n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      require([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\",\n    });\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-prop.html](http://dojotoolkit.org/api/1.10/dojo/dom-prop.html)"
- name: dom-prop.names
  id: dojo/dom-prop.names
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/dom-prop.names\n\n## Properties\n\n### class\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### colspan\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### for\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### frameborder\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### readonly\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### rowspan\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### tabindex\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### textcontent\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n### valuetype\n\nDefined by: [dojo/dom-prop](dom-prop)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-prop.names.html](http://dojotoolkit.org/api/1.10/dojo/dom-prop.names.html)"
- name: dom-style
  id: dojo/dom-style
  summary: This module defines the core dojo DOM style API
  description: "# dojo/dom-style\n\n## Summary\n\nThis module defines the core dojo DOM style API.\n\nSee the [dojo/dom-style reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/dom-style.html) for more information.\n\n## Methods\n\n### `get``(node,name)`\n\nDefined by [dojox/html/ext-dojo/style](http://dojotoolkit.org/api/1.10/dojox/html/ext-dojo/style)\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| node      | DOMNode \\| String |             |\n| name      | String \\| Object  |             |\n\n**Returns:** undefined\n\n### `getComputedStyle``(node)`\n\nDefined by [dojo/dom-style](dom-style)\n\nReturns a \"computed style\" object.\n\nGets a \"computed style\" object which can be used to gather information about the current state of the rendered node.\n\nNote that this may behave differently on different browsers. Values may have different formats and value encodings across browsers.\n\nNote also that this method is expensive. Wherever possible, reuse the returned object.\n\nUse the [dojo/dom-style.get()](dom-style#get) method for more consistent (pixelized) return values.\n\n|           |         |                                                                                    |\n|-----------|---------|------------------------------------------------------------------------------------|\n| Parameter | Type    | Description                                                                        |\n| node      | DOMNode | A reference to a DOM node. Does NOT support taking an ID string for speed reasons. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.getComputedStyle(dom.byId('foo')).borderWidth;\n});\n```\n\n### Example 2\n\nReusing the returned object, avoiding multiple lookups:\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    var cs = domStyle.getComputedStyle(dom.byId(\"someNode\"));\n    var w = cs.width, h = cs.height;\n});\n```\n\n### `set``(node,name,value)`\n\nDefined by [dojox/html/ext-dojo/style](http://dojotoolkit.org/api/1.10/dojox/html/ext-dojo/style)\n\n[TABLE]\n\n**Returns:** undefined \\| instance\n\n### `toPixelValue``(node,value)`\n\nDefined by [dojo/dom-style](dom-style)\n\nconverts style value to pixels on IE or return a numeric value.\n\n|           |         |             |\n|-----------|---------|-------------|\n| Parameter | Type    | Description |\n| node      | DOMNode |             |\n| value     | String  |             |\n\n**Returns:** Number\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-style.html](http://dojotoolkit.org/api/1.10/dojo/dom-style.html)"
- name: dom-style#get()
  id: dojo/dom-style#1_10dojo_dom-style_get
  summary: null
  belongs_to: dom-style
  description: |-
    ### `get` `(node,name)`

    Defined by [dojox/html/ext-dojo/style](http://dojotoolkit.org/api/1.10/dojox/html/ext-dojo/style)

    |           |                   |             |
    |-----------|-------------------|-------------|
    | Parameter | Type              | Description |
    | node      | DOMNode \| String |             |
    | name      | String \| Object  |             |

    **Returns:** undefined
- name: dom-style#getComputedStyle()
  id: dojo/dom-style#1_10dojo_dom-style_getComputedStyle
  summary: Returns a "computed style" object
  belongs_to: dom-style
  description: "### `getComputedStyle` `(node)`\n\nDefined by [dojo/dom-style](dom-style)\n\nReturns a \"computed style\" object.\n\nGets a \"computed style\" object which can be used to gather information about the current state of the rendered node.\n\nNote that this may behave differently on different browsers. Values may have different formats and value encodings across browsers.\n\nNote also that this method is expensive. Wherever possible, reuse the returned object.\n\nUse the [dojo/dom-style.get()](dom-style#get) method for more consistent (pixelized) return values.\n\n|           |         |                                                                                    |\n|-----------|---------|------------------------------------------------------------------------------------|\n| Parameter | Type    | Description                                                                        |\n| node      | DOMNode | A reference to a DOM node. Does NOT support taking an ID string for speed reasons. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.getComputedStyle(dom.byId('foo')).borderWidth;\n});\n    \n```\n\n### Example 2\n\nReusing the returned object, avoiding multiple lookups:\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    var cs = domStyle.getComputedStyle(dom.byId(\"someNode\"));\n    var w = cs.width, h = cs.height;\n});\n    \n```"
- name: dom-style#set()
  id: dojo/dom-style#1_10dojo_dom-style_set
  summary: null
  belongs_to: dom-style
  description: |-
    ### `set` `(node,name,value)`

    Defined by [dojox/html/ext-dojo/style](http://dojotoolkit.org/api/1.10/dojox/html/ext-dojo/style)

    [TABLE]

    **Returns:** undefined \| instance
- name: dom-style#toPixelValue()
  id: dojo/dom-style#1_10dojo_dom-style_toPixelValue
  summary: converts style value to pixels on IE or return a numeric value
  belongs_to: dom-style
  description: "### `toPixelValue` `(node,value)`\n\nDefined by [dojo/dom-style](dom-style)\n\nconverts style value to pixels on IE or return a numeric value.\n\n|           |         |             |\n|-----------|---------|-------------|\n| Parameter | Type    | Description |\n| node      | DOMNode |             |\n| value     | String  |             |\n\n**Returns:** Number\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/dom-style.html](http://dojotoolkit.org/api/1.10/dojo/dom-style.html)"
- name: domReady
  id: dojo/domready
  summary: Plugin to delay require()/define() callback from firing until the DOM has finished loading
  description: "# dojo/domReady\n\n## Summary\n\nPlugin to delay require()/define() callback from firing until the DOM has finished loading.\n\n## Usage\n\ndomReady`(callback);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| callback  | undefined |             |\n\nSee the [dojo/domReady reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/domReady.html) for more information.\n\n## Properties\n\n## Methods\n\n### `load``(id,req,load)`\n\nDefined by [dojo/domReady](domready)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| req       | undefined |             |\n| load      | undefined |             |\n\n## Events\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/domReady.html](http://dojotoolkit.org/api/1.10/dojo/domReady.html)"
- name: domReady#load()
  id: dojo/domready#1_10dojo_domReady_load
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: domReady
  description: "### `load` `(id,req,load)`\n\nDefined by [dojo/domReady](domready)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| req       | undefined |             |\n| load      | undefined |             |\n\n## Events\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/domReady.html](http://dojotoolkit.org/api/1.10/dojo/domReady.html)"
- name: errors/CancelError
  id: dojo/errors/cancelerror
  summary: Default error if a promise is canceled without a reason
  description: "# dojo/errors/CancelError\n\n## Summary\n\nDefault error if a promise is canceled without a reason.\n\n## Usage\n\nCancelError`();`\n\nSee the [dojo/errors/CancelError reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/errors/CancelError.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/errors/CancelError.html](http://dojotoolkit.org/api/1.10/dojo/errors/CancelError.html)"
- name: errors/create
  id: dojo/errors/create
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/errors/create\n\n## Usage\n\ncreate`(name,ctor,base,props);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| name      | undefined |             |\n| ctor      | undefined |             |\n| base      | undefined |             |\n| props     | undefined |             |\n\n**Returns:** function\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/errors/create.html](http://dojotoolkit.org/api/1.10/dojo/errors/create.html)"
- name: errors/RequestError
  id: dojo/errors/requesterror
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/errors/RequestError\n\n## Summary\n\nTODOC\n\n## Usage\n\nRequestError`();`\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/errors/RequestError.html](http://dojotoolkit.org/api/1.10/dojo/errors/RequestError.html)"
- name: errors/RequestTimeoutError
  id: dojo/errors/requesttimeouterror
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/errors/RequestTimeoutError\n\n## Summary\n\nTODOC\n\n## Usage\n\nRequestTimeoutError`();`\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/errors/RequestTimeoutError.html](http://dojotoolkit.org/api/1.10/dojo/errors/RequestTimeoutError.html)"
- name: Evented
  id: dojo/evented
  summary: See the dojo/Evented reference documentation for more information
  description: "# dojo/Evented\n\n## Summary\n\nA class that can be used as a mixin or base class, to add on() and emit() methods to a class for listening for events and emitting events:\n\nSee the [dojo/Evented reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/Evented.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\ndefine([\"dojo/Evented\", \"dojo/_base/declare\", \"dojo/Stateful\"\n], function(Evented, declare, Stateful){\n    var EventedStateful = declare([Evented, Stateful], {...});\n    var instance = new EventedStateful();\n    instance.on(\"open\", function(event){\n    ... do something with event\n });\n\ninstance.emit(\"open\", {name:\"some event\", ...});\n```\n\n## Methods\n\n### `emit``(type,event)`\n\nDefined by [dojo/Evented](evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `on``(type,listener)`\n\nDefined by [dojo/Evented](evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/Evented.html](http://dojotoolkit.org/api/1.10/dojo/Evented.html)"
- name: Evented#emit()
  id: dojo/evented#1_10dojo_Evented_emit
  summary: null
  belongs_to: Evented
  description: |-
    ### `emit` `(type,event)`

    Defined by [dojo/Evented](evented)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined
- name: Evented#on()
  id: dojo/evented#1_10dojo_Evented_on
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: Evented
  description: "### `on` `(type,listener)`\n\nDefined by [dojo/Evented](evented)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/Evented.html](http://dojotoolkit.org/api/1.10/dojo/Evented.html)"
- name: fx
  id: dojo/fx
  summary: See the dojo/fx reference documentation for more information
  description: "# dojo/fx\n\n## Summary\n\nEffects library on top of Base animations\n\nSee the [dojo/fx reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/fx.html) for more information.\n\n## Properties\n\n### easing\n\nDefined by: [dojo/fx/easing](fx/easing)\n\nCollection of easing functions to use beyond the default `dojo._defaultEasing` function.\n\n## Methods\n\n### `chain``(animations)`\n\nDefined by [dojo/fx](fx)\n\nChain a list of `dojo/_base/fx.Animation`s to run in sequence\n\nReturn a [dojo/\\_base/fx.Animation](_base/fx#Animation) which will play all passed [dojo/\\_base/fx.Animation](_base/fx#Animation) instances in sequence, firing its own synthesized events simulating a single animation. (eg: onEnd of this animation means the end of the chain, not the individual animations within)\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nOnce `node` is faded out, fade in `otherNode`\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.chain([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n```\n\n### `combine``(animations)`\n\nDefined by [dojo/fx](fx)\n\nCombine a list of `dojo/_base/fx.Animation`s to run in parallel\n\nCombine an array of [dojo/\\_base/fx.Animation](_base/fx#Animation)s to run in parallel, providing a new [dojo/\\_base/fx.Animation](_base/fx#Animation) instance encompasing each animation, firing standard animation events.\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nFade out `node` while fading in `otherNode` simultaneously\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.combine([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n```\n\n### Example 2\n\nWhen the longest animation ends, execute a function:\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    var anim = fx.combine([\n        fx.fadeIn({ node: n, duration:700 }),\n        fx.fadeOut({ node: otherNode, duration: 300 })\n    ]);\n    aspect.after(anim, \"onEnd\", function(){\n        // overall animation is done.\n    }, true);\n    anim.play(); // play the animation\n});\n```\n\n### `slideTo``(args)`\n\nDefined by [dojo/fx](fx)\n\nSlide a node to a new top/left position\n\nReturns an animation that will slide \"node\" defined in args Object from its current position to the position defined by (args.left, args.top).\n\n|           |        |                                                                                                                                                                                                              |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                                                  |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on). Special args members are `top` and `left`, which indicate the new position to slide to. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n.slideTo({ node: node, left:\"40\", top:\"50\", units:\"px\" }).play()\n```\n\n### `Toggler``()`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\n### `wipeIn``(args)`\n\nDefined by [dojo/fx](fx)\n\nExpand a node to it's natural height.\n\nReturns an animation that will expand the node defined in 'args' object from it's current height to it's natural height (with no scrollbar). Node must have no margin/border/padding.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.wipeIn({\n        node:\"someId\"\n    }).play()\n});\n```\n\n### `wipeOut``(args)`\n\nDefined by [dojo/fx](fx)\n\nShrink a node to nothing and hide it.\n\nReturns an animation that will shrink node defined in \"args\" from it's current height to 1px, and then hide it.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.wipeOut({ node:\"someId\" }).play()\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx.html](http://dojotoolkit.org/api/1.10/dojo/fx.html)"
- name: fx#chain()
  id: dojo/fx#1_10dojo_fx_chain
  summary: Return a dojo/_base/fx.Animation which will play all passed dojo/_base/fx.Animation instances in sequence, firing its own synthesized events simulating a single animation
  belongs_to: fx
  description: "### `chain` `(animations)`\n\nDefined by [dojo/fx](fx)\n\nChain a list of `dojo/_base/fx.Animation`s to run in sequence\n\nReturn a [dojo/\\_base/fx.Animation](_base/fx#Animation) which will play all passed [dojo/\\_base/fx.Animation](_base/fx#Animation) instances in sequence, firing its own synthesized events simulating a single animation. (eg: onEnd of this animation means the end of the chain, not the individual animations within)\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nOnce `node` is faded out, fade in `otherNode`\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.chain([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n    \n```"
- name: fx#combine()
  id: dojo/fx#1_10dojo_fx_combine
  summary: Combine an array of dojo/_base/fx.Animations to run in parallel, providing a new dojo/_base/fx.Animation instance encompasing each animation, firing standard animation events
  belongs_to: fx
  description: "### `combine` `(animations)`\n\nDefined by [dojo/fx](fx)\n\nCombine a list of `dojo/_base/fx.Animation`s to run in parallel\n\nCombine an array of [dojo/\\_base/fx.Animation](_base/fx#Animation)s to run in parallel, providing a new [dojo/\\_base/fx.Animation](_base/fx#Animation) instance encompasing each animation, firing standard animation events.\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nFade out `node` while fading in `otherNode` simultaneously\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.combine([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n    \n```\n\n### Example 2\n\nWhen the longest animation ends, execute a function:\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    var anim = fx.combine([\n        fx.fadeIn({ node: n, duration:700 }),\n        fx.fadeOut({ node: otherNode, duration: 300 })\n    ]);\n    aspect.after(anim, \"onEnd\", function(){\n        // overall animation is done.\n    }, true);\n    anim.play(); // play the animation\n});\n    \n```"
- name: fx#easing
  id: dojo/fx#1_10dojo_fx_easing
  summary: Collection of easing functions to use beyond the default dojo._defaultEasing function
  belongs_to: fx
  description: |-
    ### easing

    Defined by: [dojo/fx/easing](fx/easing)

    Collection of easing functions to use beyond the default `dojo._defaultEasing` function.

    ## Methods
- name: fx#slideTo()
  id: dojo/fx#1_10dojo_fx_slideTo
  summary: Returns an animation that will slide "node" defined in args Object from its current position to the position defined by (args.left, args.top)
  belongs_to: fx
  description: "### `slideTo` `(args)`\n\nDefined by [dojo/fx](fx)\n\nSlide a node to a new top/left position\n\nReturns an animation that will slide \"node\" defined in args Object from its current position to the position defined by (args.left, args.top).\n\n|           |        |                                                                                                                                                                                                              |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                                                  |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on). Special args members are `top` and `left`, which indicate the new position to slide to. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      .slideTo({ node: node, left:\"40\", top:\"50\", units:\"px\" }).play()\n    \n```"
- name: fx#Toggler()
  id: dojo/fx#1_10dojo_fx_Toggler
  summary: null
  belongs_to: fx
  description: |-
    ### `Toggler` `()`

    Defined by [dojo/fx/Toggler](fx/toggler)
- name: fx#wipeIn()
  id: dojo/fx#1_10dojo_fx_wipeIn
  summary: Expand a node to it's natural height
  belongs_to: fx
  description: "### `wipeIn` `(args)`\n\nDefined by [dojo/fx](fx)\n\nExpand a node to it's natural height.\n\nReturns an animation that will expand the node defined in 'args' object from it's current height to it's natural height (with no scrollbar). Node must have no margin/border/padding.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.wipeIn({\n        node:\"someId\"\n    }).play()\n});\n    \n```"
- name: fx#wipeOut()
  id: dojo/fx#1_10dojo_fx_wipeOut
  summary: Shrink a node to nothing and hide it
  belongs_to: fx
  description: "### `wipeOut` `(args)`\n\nDefined by [dojo/fx](fx)\n\nShrink a node to nothing and hide it.\n\nReturns an animation that will shrink node defined in \"args\" from it's current height to 1px, and then hide it.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.wipeOut({ node:\"someId\" }).play()\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx.html](http://dojotoolkit.org/api/1.10/dojo/fx.html)"
- name: fx.easing
  id: dojo/fx.easing
  summary: Collection of easing functions to use beyond the default dojo._defaultEasing function
  description: "# dojo/fx.easing\n\n## Summary\n\nCollection of easing functions to use beyond the default `dojo._defaultEasing` function.\n\nEasing functions are used to manipulate the iteration through an `dojo.Animation`s \\_Line. \\_Line being the properties of an Animation, and the easing function progresses through that Line determining how quickly (or slowly) it should go. Or more accurately: modify the value of the \\_Line based on the percentage of animation completed.\n\nAll functions follow a simple naming convention of \"ease type\" + \"when\". If the name of the function ends in Out, the easing described appears towards the end of the animation. \"In\" means during the beginning, and InOut means both ranges of the Animation will applied, both beginning and end.\n\nOne does not call the easing function directly, it must be passed to the `easing` property of an animation.\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.require(\"dojo.fx.easing\");\nvar anim = dojo.fadeOut({\n    node: 'node',\n    duration: 2000,\n    //  note there is no ()\n    easing: dojo.fx.easing.quadIn\n}).play();\n```\n\n## Methods\n\n### `backIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function that starts away from the target, and quickly accelerates towards the end value.\n\nUse caution when the easing will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `backInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function combining the effects of `backIn` and `backOut`\n\nAn easing function combining the effects of `backIn` and `backOut`. Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `backOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function that pops past the range briefly, and slowly comes back.\n\nAn easing function that pops past the range briefly, and slowly comes back.\n\nUse caution when the easing will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `bounceIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function that 'bounces' near the beginning of an Animation\n\n[TABLE]\n\n**Returns:** number\n\n### `bounceInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function that 'bounces' at the beginning and end of the Animation\n\n[TABLE]\n\n**Returns:** number\n\n### `bounceOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function that 'bounces' near the end of an Animation\n\n[TABLE]\n\n**Returns:** number\n\n### `circIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `circInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `circOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `cubicIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `cubicInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `cubicOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `elasticIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function the elastically snaps from the start value\n\nAn easing function the elastically snaps from the start value\n\nUse caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** Decimal \\| number\n\n### `elasticInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function that elasticly snaps around the value, near the beginning and end of the Animation.\n\nAn easing function that elasticly snaps around the value, near the beginning and end of the Animation.\n\nUse caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `elasticOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nAn easing function that elasticly snaps around the target value, near the end of the Animation\n\nAn easing function that elasticly snaps around the target value, near the end of the Animation\n\nUse caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** Decimal \\| number\n\n### `expoIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `expoInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `expoOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `linear``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\nA linear easing function\n\n[TABLE]\n\n**Returns:** Decimal\n\n### `quadIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `quadInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quadOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quartIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `quartInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quartOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quintIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `quintInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quintOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `sineIn``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `sineInOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `sineOut``(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx.easing.html](http://dojotoolkit.org/api/1.10/dojo/fx.easing.html)"
- name: fx.easing#backIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_backIn
  summary: An easing function that starts away from the target, and quickly accelerates towards the end value
  belongs_to: fx.easing
  description: |-
    ### `backIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function that starts away from the target, and quickly accelerates towards the end value.

    Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx.easing#backInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_backInOut
  summary: An easing function combining the effects of backIn and backOut
  belongs_to: fx.easing
  description: |-
    ### `backInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function combining the effects of `backIn` and `backOut`

    An easing function combining the effects of `backIn` and `backOut`. Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx.easing#backOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_backOut
  summary: An easing function that pops past the range briefly, and slowly comes back
  belongs_to: fx.easing
  description: |-
    ### `backOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function that pops past the range briefly, and slowly comes back.

    An easing function that pops past the range briefly, and slowly comes back.

    Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx.easing#bounceIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_bounceIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `bounceIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function that 'bounces' near the beginning of an Animation

    [TABLE]

    **Returns:** number
- name: fx.easing#bounceInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_bounceInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `bounceInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function that 'bounces' at the beginning and end of the Animation

    [TABLE]

    **Returns:** number
- name: fx.easing#bounceOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_bounceOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `bounceOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function that 'bounces' near the end of an Animation

    [TABLE]

    **Returns:** number
- name: fx.easing#circIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_circIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `circIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#circInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_circInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `circInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#circOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_circOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `circOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** undefined
- name: fx.easing#cubicIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_cubicIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `cubicIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** undefined
- name: fx.easing#cubicInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_cubicInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `cubicInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#cubicOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_cubicOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `cubicOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#elasticIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_elasticIn
  summary: Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values
  belongs_to: fx.easing
  description: |-
    ### `elasticIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function the elastically snaps from the start value

    An easing function the elastically snaps from the start value

    Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** Decimal \| number
- name: fx.easing#elasticInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_elasticInOut
  summary: An easing function that elasticly snaps around the value, near the beginning and end of the Animation
  belongs_to: fx.easing
  description: |-
    ### `elasticInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function that elasticly snaps around the value, near the beginning and end of the Animation.

    An easing function that elasticly snaps around the value, near the beginning and end of the Animation.

    Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx.easing#elasticOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_elasticOut
  summary: Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values
  belongs_to: fx.easing
  description: |-
    ### `elasticOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    An easing function that elasticly snaps around the target value, near the end of the Animation

    An easing function that elasticly snaps around the target value, near the end of the Animation

    Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** Decimal \| number
- name: fx.easing#expoIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_expoIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `expoIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** undefined
- name: fx.easing#expoInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_expoInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `expoInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#expoOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_expoOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `expoOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#linear()
  id: dojo/fx.easing#1_10dojo_fx_easing_linear
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `linear` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    A linear easing function

    [TABLE]

    **Returns:** Decimal
- name: fx.easing#quadIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_quadIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quadIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** undefined
- name: fx.easing#quadInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_quadInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quadInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#quadOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_quadOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quadOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#quartIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_quartIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quartIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** undefined
- name: fx.easing#quartInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_quartInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quartInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#quartOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_quartOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quartOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#quintIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_quintIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quintIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** undefined
- name: fx.easing#quintInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_quintInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quintInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#quintOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_quintOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `quintOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#sineIn()
  id: dojo/fx.easing#1_10dojo_fx_easing_sineIn
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `sineIn` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#sineInOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_sineInOut
  summary: null
  belongs_to: fx.easing
  description: |-
    ### `sineInOut` `(n)`

    Defined by [dojo/fx/easing](fx/easing)

    [TABLE]

    **Returns:** number
- name: fx.easing#sineOut()
  id: dojo/fx.easing#1_10dojo_fx_easing_sineOut
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: fx.easing
  description: "### `sineOut` `(n)`\n\nDefined by [dojo/fx/easing](fx/easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx.easing.html](http://dojotoolkit.org/api/1.10/dojo/fx.easing.html)"
- name: fx.Toggler
  id: dojo/fx.toggler
  summary: A simple dojo.Animation toggler API
  description: "# dojo/fx.Toggler\n\n## Summary\n\nA simple `dojo.Animation` toggler API.\n\nclass constructor for an animation toggler. It accepts a packed set of arguments about what type of animation to use in each direction, duration, etc. All available members are mixed into these animations from the constructor (for example, `node`, `showDuration`, `hideDuration`).\n\n## Usage\n\nvar foo = new fx.Toggler`(args);`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar t = new dojo/fx/Toggler({\n    node: \"nodeId\",\n    showDuration: 500,\n    // hideDuration will default to \"200\"\n    showFunc: dojo/fx/wipeIn,\n    // hideFunc will default to \"fadeOut\"\n});\nt.show(100); // delay showing for 100ms\n// ...time passes...\nt.hide();\n```\n\n## Properties\n\n### hideDuration\n\nDefined by: [dojo/fx/Toggler](fx/toggler)\n\nTime in milliseconds to run the hide Animation\n\n### node\n\nDefined by: [dojo/fx/Toggler](fx/toggler)\n\nthe node to target for the showing and hiding animations\n\n### showDuration\n\nDefined by: [dojo/fx/Toggler](fx/toggler)\n\nTime in milliseconds to run the show Animation\n\n## Methods\n\n### `hide``(delay)`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\nToggle the node to hidden\n\n[TABLE]\n\n**Returns:** undefined\n\n### `hideFunc``(args)`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\nThe function that returns the `dojo.Animation` to hide the node\n\n[TABLE]\n\n**Returns:** undefined\n\n### `show``(delay)`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\nToggle the node to showing\n\n[TABLE]\n\n**Returns:** undefined\n\n### `showFunc``(args)`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\nThe function that returns the `dojo.Animation` to show the node\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx.Toggler.html](http://dojotoolkit.org/api/1.10/dojo/fx.Toggler.html)"
- name: fx.Toggler#hide()
  id: dojo/fx.toggler#1_10dojo_fx_Toggler_hide
  summary: null
  belongs_to: fx.Toggler
  description: |-
    ### `hide` `(delay)`

    Defined by [dojo/fx/Toggler](fx/toggler)

    Toggle the node to hidden

    [TABLE]

    **Returns:** undefined
- name: fx.Toggler#hideFunc()
  id: dojo/fx.toggler#1_10dojo_fx_Toggler_hideFunc
  summary: null
  belongs_to: fx.Toggler
  description: |-
    ### `hideFunc` `(args)`

    Defined by [dojo/fx/Toggler](fx/toggler)

    The function that returns the `dojo.Animation` to hide the node

    [TABLE]

    **Returns:** undefined
- name: fx.Toggler#show()
  id: dojo/fx.toggler#1_10dojo_fx_Toggler_show
  summary: null
  belongs_to: fx.Toggler
  description: |-
    ### `show` `(delay)`

    Defined by [dojo/fx/Toggler](fx/toggler)

    Toggle the node to showing

    [TABLE]

    **Returns:** undefined
- name: fx.Toggler#showFunc()
  id: dojo/fx.toggler#1_10dojo_fx_Toggler_showFunc
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: fx.Toggler
  description: "### `showFunc` `(args)`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\nThe function that returns the `dojo.Animation` to show the node\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx.Toggler.html](http://dojotoolkit.org/api/1.10/dojo/fx.Toggler.html)"
- name: fx/easing
  id: dojo/fx/easing
  summary: Collection of easing functions to use beyond the default dojo._defaultEasing function
  description: "# dojo/fx/easing\n\n## Summary\n\nCollection of easing functions to use beyond the default `dojo._defaultEasing` function.\n\nEasing functions are used to manipulate the iteration through an `dojo.Animation`s \\_Line. \\_Line being the properties of an Animation, and the easing function progresses through that Line determining how quickly (or slowly) it should go. Or more accurately: modify the value of the \\_Line based on the percentage of animation completed.\n\nAll functions follow a simple naming convention of \"ease type\" + \"when\". If the name of the function ends in Out, the easing described appears towards the end of the animation. \"In\" means during the beginning, and InOut means both ranges of the Animation will applied, both beginning and end.\n\nOne does not call the easing function directly, it must be passed to the `easing` property of an animation.\n\nSee the [dojo/fx/easing reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/fx/easing.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.require(\"dojo.fx.easing\");\nvar anim = dojo.fadeOut({\n    node: 'node',\n    duration: 2000,\n    //  note there is no ()\n    easing: dojo.fx.easing.quadIn\n}).play();\n```\n\n## Methods\n\n### `backIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function that starts away from the target, and quickly accelerates towards the end value.\n\nUse caution when the easing will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `backInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function combining the effects of `backIn` and `backOut`\n\nAn easing function combining the effects of `backIn` and `backOut`. Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `backOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function that pops past the range briefly, and slowly comes back.\n\nAn easing function that pops past the range briefly, and slowly comes back.\n\nUse caution when the easing will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `bounceIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function that 'bounces' near the beginning of an Animation\n\n[TABLE]\n\n**Returns:** number\n\n### `bounceInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function that 'bounces' at the beginning and end of the Animation\n\n[TABLE]\n\n**Returns:** number\n\n### `bounceOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function that 'bounces' near the end of an Animation\n\n[TABLE]\n\n**Returns:** number\n\n### `circIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `circInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `circOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `cubicIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `cubicInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `cubicOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `elasticIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function the elastically snaps from the start value\n\nAn easing function the elastically snaps from the start value\n\nUse caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** Decimal \\| number\n\n### `elasticInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function that elasticly snaps around the value, near the beginning and end of the Animation.\n\nAn easing function that elasticly snaps around the value, near the beginning and end of the Animation.\n\nUse caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** number\n\n### `elasticOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nAn easing function that elasticly snaps around the target value, near the end of the Animation\n\nAn easing function that elasticly snaps around the target value, near the end of the Animation\n\nUse caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.\n\n[TABLE]\n\n**Returns:** Decimal \\| number\n\n### `expoIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `expoInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `expoOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `linear``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\nA linear easing function\n\n[TABLE]\n\n**Returns:** Decimal\n\n### `quadIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `quadInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quadOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quartIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `quartInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quartOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quintIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `quintInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `quintOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `sineIn``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `sineInOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** number\n\n### `sineOut``(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx/easing.html](http://dojotoolkit.org/api/1.10/dojo/fx/easing.html)"
- name: fx/easing#backIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_backIn
  summary: An easing function that starts away from the target, and quickly accelerates towards the end value
  belongs_to: fx/easing
  description: |-
    ### `backIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function that starts away from the target, and quickly accelerates towards the end value.

    Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx/easing#backInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_backInOut
  summary: An easing function combining the effects of backIn and backOut
  belongs_to: fx/easing
  description: |-
    ### `backInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function combining the effects of `backIn` and `backOut`

    An easing function combining the effects of `backIn` and `backOut`. Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx/easing#backOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_backOut
  summary: An easing function that pops past the range briefly, and slowly comes back
  belongs_to: fx/easing
  description: |-
    ### `backOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function that pops past the range briefly, and slowly comes back.

    An easing function that pops past the range briefly, and slowly comes back.

    Use caution when the easing will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx/easing#bounceIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_bounceIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `bounceIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function that 'bounces' near the beginning of an Animation

    [TABLE]

    **Returns:** number
- name: fx/easing#bounceInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_bounceInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `bounceInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function that 'bounces' at the beginning and end of the Animation

    [TABLE]

    **Returns:** number
- name: fx/easing#bounceOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_bounceOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `bounceOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function that 'bounces' near the end of an Animation

    [TABLE]

    **Returns:** number
- name: fx/easing#circIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_circIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `circIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#circInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_circInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `circInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#circOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_circOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `circOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** undefined
- name: fx/easing#cubicIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_cubicIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `cubicIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** undefined
- name: fx/easing#cubicInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_cubicInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `cubicInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#cubicOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_cubicOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `cubicOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#elasticIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_elasticIn
  summary: Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values
  belongs_to: fx/easing
  description: |-
    ### `elasticIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function the elastically snaps from the start value

    An easing function the elastically snaps from the start value

    Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** Decimal \| number
- name: fx/easing#elasticInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_elasticInOut
  summary: An easing function that elasticly snaps around the value, near the beginning and end of the Animation
  belongs_to: fx/easing
  description: |-
    ### `elasticInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function that elasticly snaps around the value, near the beginning and end of the Animation.

    An easing function that elasticly snaps around the value, near the beginning and end of the Animation.

    Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** number
- name: fx/easing#elasticOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_elasticOut
  summary: Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values
  belongs_to: fx/easing
  description: |-
    ### `elasticOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    An easing function that elasticly snaps around the target value, near the end of the Animation

    An easing function that elasticly snaps around the target value, near the end of the Animation

    Use caution when the elasticity will cause values to become negative as some properties cannot be set to negative values.

    [TABLE]

    **Returns:** Decimal \| number
- name: fx/easing#expoIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_expoIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `expoIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** undefined
- name: fx/easing#expoInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_expoInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `expoInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#expoOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_expoOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `expoOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#linear()
  id: dojo/fx/easing#1_10dojo_fx_easing_linear
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `linear` `(n)`

    Defined by [dojo/fx/easing](easing)

    A linear easing function

    [TABLE]

    **Returns:** Decimal
- name: fx/easing#quadIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_quadIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quadIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** undefined
- name: fx/easing#quadInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_quadInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quadInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#quadOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_quadOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quadOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#quartIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_quartIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quartIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** undefined
- name: fx/easing#quartInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_quartInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quartInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#quartOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_quartOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quartOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#quintIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_quintIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quintIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** undefined
- name: fx/easing#quintInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_quintInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quintInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#quintOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_quintOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `quintOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#sineIn()
  id: dojo/fx/easing#1_10dojo_fx_easing_sineIn
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `sineIn` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#sineInOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_sineInOut
  summary: null
  belongs_to: fx/easing
  description: |-
    ### `sineInOut` `(n)`

    Defined by [dojo/fx/easing](easing)

    [TABLE]

    **Returns:** number
- name: fx/easing#sineOut()
  id: dojo/fx/easing#1_10dojo_fx_easing_sineOut
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: fx/easing
  description: "### `sineOut` `(n)`\n\nDefined by [dojo/fx/easing](easing)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx/easing.html](http://dojotoolkit.org/api/1.10/dojo/fx/easing.html)"
- name: fx/Toggler
  id: dojo/fx/toggler
  summary: A simple dojo.Animation toggler API
  description: "# dojo/fx/Toggler\n\n## Summary\n\nA simple `dojo.Animation` toggler API.\n\nclass constructor for an animation toggler. It accepts a packed set of arguments about what type of animation to use in each direction, duration, etc. All available members are mixed into these animations from the constructor (for example, `node`, `showDuration`, `hideDuration`).\n\n## Usage\n\nvar foo = new Toggler`(args);`\n\nDefined by [dojo/fx/Toggler](toggler)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\nSee the [dojo/fx/Toggler reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/fx/Toggler.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar t = new dojo/fx/Toggler({\n    node: \"nodeId\",\n    showDuration: 500,\n    // hideDuration will default to \"200\"\n    showFunc: dojo/fx/wipeIn,\n    // hideFunc will default to \"fadeOut\"\n});\nt.show(100); // delay showing for 100ms\n// ...time passes...\nt.hide();\n```\n\n## Properties\n\n### hideDuration\n\nDefined by: [dojo/fx/Toggler](toggler)\n\nTime in milliseconds to run the hide Animation\n\n### node\n\nDefined by: [dojo/fx/Toggler](toggler)\n\nthe node to target for the showing and hiding animations\n\n### showDuration\n\nDefined by: [dojo/fx/Toggler](toggler)\n\nTime in milliseconds to run the show Animation\n\n## Methods\n\n### `hide``(delay)`\n\nDefined by [dojo/fx/Toggler](toggler)\n\nToggle the node to hidden\n\n[TABLE]\n\n**Returns:** undefined\n\n### `hideFunc``(args)`\n\nDefined by [dojo/fx/Toggler](toggler)\n\nThe function that returns the `dojo.Animation` to hide the node\n\n[TABLE]\n\n**Returns:** undefined\n\n### `show``(delay)`\n\nDefined by [dojo/fx/Toggler](toggler)\n\nToggle the node to showing\n\n[TABLE]\n\n**Returns:** undefined\n\n### `showFunc``(args)`\n\nDefined by [dojo/fx/Toggler](toggler)\n\nThe function that returns the `dojo.Animation` to show the node\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx/Toggler.html](http://dojotoolkit.org/api/1.10/dojo/fx/Toggler.html)"
- name: fx/Toggler#hide()
  id: dojo/fx/toggler#1_10dojo_fx_Toggler_hide
  summary: null
  belongs_to: fx/Toggler
  description: |-
    ### `hide` `(delay)`

    Defined by [dojo/fx/Toggler](toggler)

    Toggle the node to hidden

    [TABLE]

    **Returns:** undefined
- name: fx/Toggler#hideFunc()
  id: dojo/fx/toggler#1_10dojo_fx_Toggler_hideFunc
  summary: null
  belongs_to: fx/Toggler
  description: |-
    ### `hideFunc` `(args)`

    Defined by [dojo/fx/Toggler](toggler)

    The function that returns the `dojo.Animation` to hide the node

    [TABLE]

    **Returns:** undefined
- name: fx/Toggler#show()
  id: dojo/fx/toggler#1_10dojo_fx_Toggler_show
  summary: null
  belongs_to: fx/Toggler
  description: |-
    ### `show` `(delay)`

    Defined by [dojo/fx/Toggler](toggler)

    Toggle the node to showing

    [TABLE]

    **Returns:** undefined
- name: fx/Toggler#showFunc()
  id: dojo/fx/toggler#1_10dojo_fx_Toggler_showFunc
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: fx/Toggler
  description: "### `showFunc` `(args)`\n\nDefined by [dojo/fx/Toggler](toggler)\n\nThe function that returns the `dojo.Animation` to show the node\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/fx/Toggler.html](http://dojotoolkit.org/api/1.10/dojo/fx/Toggler.html)"
- name: gears
  id: dojo/gears
  summary: See the dojo/gears reference documentation for more information
  description: "# dojo/gears\n\n## Summary\n\nTODOC\n\nSee the [dojo/gears reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/gears.html) for more information.\n\n## Properties\n\n### available\n\nDefined by: [dojo/gears](gears)\n\nTrue if client is using Google Gears\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/gears.html](http://dojotoolkit.org/api/1.10/dojo/gears.html)"
- name: gears#available
  id: dojo/gears#1_10dojo_gears_available
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: gears
  description: "### available\n\nDefined by: [dojo/gears](gears)\n\nTrue if client is using Google Gears\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/gears.html](http://dojotoolkit.org/api/1.10/dojo/gears.html)"
- name: gears.available
  id: dojo/gears.available
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/gears.available\n\n## Summary\n\nTrue if client is using Google Gears\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/gears.available.html](http://dojotoolkit.org/api/1.10/dojo/gears.available.html)"
- name: has
  id: dojo/has
  summary: Return the current value of the named feature
  description: "# dojo/has\n\n## Summary\n\nReturn the current value of the named feature.\n\nReturns the value of the feature named by name. The feature must have been previously added to the cache by has.add.\n\n## Usage\n\nhas`(name);`\n\n|           |                   |                                                                              |\n|-----------|-------------------|------------------------------------------------------------------------------|\n| Parameter | Type              | Description                                                                  |\n| name      | String \\| Integer | The name (if a string) or identifier (if an integer) of the feature to test. |\n\n**Returns:** boolean\n\nSee the [dojo/has reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/has.html) for more information.\n\n## Properties\n\n### cache\n\nDefined by: [dojo/has](has)\n\n## Methods\n\n### `add``(name,test,now,force)`\n\nDefined by [dojo/has](has)\n\nRegister a new feature test for some named feature.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA redundant test, testFn with immediate execution:\n\n``` javascript\nhas.add(\"javascript\", function(){ return true; }, true);\n```\n\n### Example 2\n\nAgain with the redundantness. You can do this in your tests, but we should not be doing this in any internal has.js tests\n\n``` javascript\nhas.add(\"javascript\", true);\n```\n\n### Example 3\n\nThree things are passed to the testFunction. `global`, `document`, and a generic element from which to work your test should the need arise.\n\n``` javascript\nhas.add(\"bug-byid\", function(g, d, el){\n    // g    == global, typically window, yadda yadda\n    // d    == document object\n    // el == the generic element. a `has` element.\n    return false; // fake test, byid-when-form-has-name-matching-an-id is slightly longer\n});\n```\n\n### `clearElement``(element)`\n\nDefined by [dojo/has](has)\n\nDeletes the contents of the element passed to test functions.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| element   | undefined |             |\n\n### `load``(id,parentRequire,loaded)`\n\nDefined by [dojo/has](has)\n\nConditional loading of AMD modules based on a has feature test value.\n\n|               |          |                                                                                                                    |\n|---------------|----------|--------------------------------------------------------------------------------------------------------------------|\n| Parameter     | Type     | Description                                                                                                        |\n| id            | String   | Gives the resolved module id to load.                                                                              |\n| parentRequire | Function | The loader require function with respect to the module that contained the plugin resource in it's dependency list. |\n| loaded        | Function | Callback to loader that consumes result of plugin demand.                                                          |\n\n### `normalize``(id,toAbsMid)`\n\nDefined by [dojo/has](has)\n\nResolves id into a module id based on possibly-nested tenary expression that branches on has feature test value(s).\n\n|           |           |                                                          |\n|-----------|-----------|----------------------------------------------------------|\n| Parameter | Type      | Description                                              |\n| id        | undefined |                                                          |\n| toAbsMid  | Function  | Resolves a relative module id into an absolute module id |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/has.html](http://dojotoolkit.org/api/1.10/dojo/has.html)"
- name: has#add()
  id: dojo/has#1_10dojo_has_add
  summary: Register a new feature test for some named feature
  belongs_to: has
  description: "### `add` `(name,test,now,force)`\n\nDefined by [dojo/has](has)\n\nRegister a new feature test for some named feature.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA redundant test, testFn with immediate execution:\n\n``` javascript\n      has.add(\"javascript\", function(){ return true; }, true);\n    \n```\n\n### Example 2\n\nAgain with the redundantness. You can do this in your tests, but we should not be doing this in any internal has.js tests\n\n``` javascript\n      has.add(\"javascript\", true);\n    \n```\n\n### Example 3\n\nThree things are passed to the testFunction. `global`, `document`, and a generic element from which to work your test should the need arise.\n\n``` javascript\n      has.add(\"bug-byid\", function(g, d, el){\n    // g    == global, typically window, yadda yadda\n    // d    == document object\n    // el == the generic element. a `has` element.\n    return false; // fake test, byid-when-form-has-name-matching-an-id is slightly longer\n});\n    \n```"
- name: has#clearElement()
  id: dojo/has#1_10dojo_has_clearElement
  summary: Deletes the contents of the element passed to test functions
  belongs_to: has
  description: |-
    ### `clearElement` `(element)`

    Defined by [dojo/has](has)

    Deletes the contents of the element passed to test functions.

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | element   | undefined |             |
- name: has#load()
  id: dojo/has#1_10dojo_has_load
  summary: Conditional loading of AMD modules based on a has feature test value
  belongs_to: has
  description: |-
    ### `load` `(id,parentRequire,loaded)`

    Defined by [dojo/has](has)

    Conditional loading of AMD modules based on a has feature test value.

    |               |          |                                                                                                                    |
    |---------------|----------|--------------------------------------------------------------------------------------------------------------------|
    | Parameter     | Type     | Description                                                                                                        |
    | id            | String   | Gives the resolved module id to load.                                                                              |
    | parentRequire | Function | The loader require function with respect to the module that contained the plugin resource in it's dependency list. |
    | loaded        | Function | Callback to loader that consumes result of plugin demand.                                                          |
- name: has#normalize()
  id: dojo/has#1_10dojo_has_normalize
  summary: Resolves id into a module id based on possibly-nested tenary expression that branches on has feature test value(s)
  belongs_to: has
  description: "### `normalize` `(id,toAbsMid)`\n\nDefined by [dojo/has](has)\n\nResolves id into a module id based on possibly-nested tenary expression that branches on has feature test value(s).\n\n|           |           |                                                          |\n|-----------|-----------|----------------------------------------------------------|\n| Parameter | Type      | Description                                              |\n| id        | undefined |                                                          |\n| toAbsMid  | Function  | Resolves a relative module id into an absolute module id |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/has.html](http://dojotoolkit.org/api/1.10/dojo/has.html)"
- name: hash
  id: dojo/hash
  summary: Gets or sets the hash string in the browser URL
  description: "# dojo/hash\n\n## Summary\n\nGets or sets the hash string in the browser URL.\n\nHandles getting and setting of location.hash.\n\n- If no arguments are passed, acts as a getter.\n- If a string is passed, acts as a setter.\n\n## Usage\n\nhash`(hash,replace);`\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, returns the current hash string. when used as a setter, returns the new hash string.\n\nSee the [dojo/hash reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/hash.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\ntopic.subscribe(\"/dojo/hashchange\", context, callback);\n\nfunction callback (hashValue){\n    // do something based on the hash value.\n}\n```\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/hash.html](http://dojotoolkit.org/api/1.10/dojo/hash.html)"
- name: hccss
  id: dojo/hccss
  summary: Test if computer is in high contrast mode (i.e
  description: "# dojo/hccss\n\n## Summary\n\nTest if computer is in high contrast mode (i.e. if browser is not displaying background images). Defines `has(\"highcontrast\")` and sets `dj_a11y` CSS class on `<body>` if machine is in high contrast mode. Returns `has()` method;\n\n## Usage\n\nhccss`();`\n\nSee the [dojo/hccss reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/hccss.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/hccss.html](http://dojotoolkit.org/api/1.10/dojo/hccss.html)"
- name: html
  id: dojo/html
  summary: See the dojo/html reference documentation for more information
  description: "# dojo/html\n\n## Summary\n\nTODOC\n\nSee the [dojo/html reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/html.html) for more information.\n\n## Methods\n\n### `set``(node,cont,params)`\n\nDefined by [dojo/html](html)\n\ninserts (replaces) the given content into the given node. dojo/dom-construct.place(cont, node, \"only\") may be a better choice for simple HTML insertion.\n\nUnless you need to use the params capabilities of this method, you should use [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct](dom-construct)..place() has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct](dom-construct)..place does not handle NodeList insertions [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct.place()](dom-construct#place) has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct.place](dom-construct#place) does not handle NodeList insertions or the other capabilities as defined by the params object for this method.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA safe string/node/nodelist content replacement/injection with hooks for extension Example Usage:\n\n``` javascript\nhtml.set(node, \"some string\");\nhtml.set(node, contentNode, {options});\nhtml.set(node, myNode.childNodes, {options});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/html.html](http://dojotoolkit.org/api/1.10/dojo/html.html)"
- name: html#set()
  id: dojo/html#1_10dojo_html_set
  summary: inserts (replaces) the given content into the given node
  belongs_to: html
  description: "### `set` `(node,cont,params)`\n\nDefined by [dojo/html](html)\n\ninserts (replaces) the given content into the given node. dojo/dom-construct.place(cont, node, \"only\") may be a better choice for simple HTML insertion.\n\nUnless you need to use the params capabilities of this method, you should use [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct](dom-construct)..place() has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct](dom-construct)..place does not handle NodeList insertions [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct.place()](dom-construct#place) has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct.place](dom-construct#place) does not handle NodeList insertions or the other capabilities as defined by the params object for this method.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA safe string/node/nodelist content replacement/injection with hooks for extension Example Usage:\n\n``` javascript\n      html.set(node, \"some string\");\nhtml.set(node, contentNode, {options});\nhtml.set(node, myNode.childNodes, {options});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/html.html](http://dojotoolkit.org/api/1.10/dojo/html.html)"
- name: html._ContentSetter
  id: dojo/html._contentsetter
  summary: The content to be placed in the node
  description: "# dojo/html.\\_ContentSetter\n\n## Usage\n\nvar foo = new html.\\_ContentSetter`(params,node);`\n\nDefined by [dojo/html](html)\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| params    | Object            |             |\n| node      | String \\| DomNode |             |\n\n## Properties\n\n### cleanContent\n\nDefined by: [dojo/html](html)\n\nShould the content be treated as a full html document, and the real content stripped of ,\n\nwrapper before injection\n\n### content\n\nDefined by: [dojo/html](html)\n\nThe content to be placed in the node. Can be an HTML string, a node reference, or a enumerable list of nodes\n\n### extractContent\n\nDefined by: [dojo/html](html)\n\nShould the content be treated as a full html document, and the real content stripped of `<html> <body>` wrapper before injection\n\n### id\n\nDefined by: [dojo/html](html)\n\nUsually only used internally, and auto-generated with each instance\n\n### node\n\nDefined by: [dojo/html](html)\n\nAn node which will be the parent element that we set content into\n\n### parseContent\n\nDefined by: [dojo/html](html)\n\nShould the node by passed to the parser after the new content is set\n\n### parserScope\n\nDefined by: [dojo/html](html)\n\nFlag passed to parser. Root for attribute names to search for. If scopeName is dojo, will search for data-dojo-type (or dojoType). For backwards compatibility reasons defaults to dojo.\\_scopeName (which is \"dojo\" except when multi-version support is used, when it will be something like dojo16, dojo20, etc.)\n\n### startup\n\nDefined by: [dojo/html](html)\n\nStart the child widgets after parsing them. Only obeyed if parseContent is true.\n\n## Methods\n\n### `empty``()`\n\nDefined by [dojo/html](html)\n\ncleanly empty out existing content\n\n### `set``(cont,params)`\n\nDefined by [dojo/html](html)\n\nfront-end to the set-content sequence\n\n[TABLE]\n\n**Returns:** undefined\n\n### `setContent``()`\n\nDefined by [dojo/html](html)\n\nsets the content on the node\n\n### `tearDown``()`\n\nDefined by [dojo/html](html)\n\nmanually reset the Setter instance if its being re-used for example for another set()\n\ntearDown() is not called automatically. In normal use, the Setter instance properties are simply allowed to fall out of scope but the tearDown method can be called to explicitly reset this instance.\n\n## Events\n\n### `onBegin``()`\n\nDefined by: [dojo/html](html)\n\nCalled after instantiation, but before set(); It allows modification of any of the object properties - including the node and content provided - before the set operation actually takes place This default implementation checks for cleanContent and extractContent flags to optionally pre-process html string content\n\n**Returns:** undefined\n\n### `onContentError``(err)`\n\nDefined by: [dojo/html](html)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| err       | undefined |             |\n\n**Returns:** string\n\n### `onEnd``()`\n\nDefined by: [dojo/html](html)\n\nCalled after set(), when the new content has been pushed into the node It provides an opportunity for post-processing before handing back the node to the caller This default implementation checks a parseContent flag to optionally run the dojo parser over the new content\n\n**Returns:** undefined\n\n### `onExecError``(err)`\n\nDefined by: [dojo/html](html)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| err       | undefined |             |\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/html.\\_ContentSetter.html](http://dojotoolkit.org/api/1.10/dojo/html._ContentSetter.html)"
- name: i18n
  id: dojo/i18n
  summary: We choose to include our own plugin to leverage functionality already contained in dojo and thereby reduce the size of the plugin compared to various loader implementations
  description: "# dojo/i18n\n\n## Summary\n\nThis module implements the [dojo/i18n](i18n)! plugin and the v1.6- i18n API\n\nWe choose to include our own plugin to leverage functionality already contained in dojo and thereby reduce the size of the plugin compared to various loader implementations. Also, this allows foreign AMD loaders to be used without their plugins.\n\nSee the [dojo/i18n reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/i18n.html) for more information.\n\n## Properties\n\n### cache\n\nDefined by: [dojo/i18n](i18n)\n\n### dynamic\n\nDefined by: [dojo/i18n](i18n)\n\n### unitTests\n\nDefined by: [dojo/i18n](i18n)\n\n## Methods\n\n### `getL10nName``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** string\n\n### `getLocalization``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** undefined\n\n### `load``(id,require,load)`\n\nDefined by [dojo/i18n](i18n)\n\nid is in one of the following formats\n\n1.  /nls/ =\\> load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale.\n\n2.  /nls// =\\> load then return the bundle localized to\n\n3.  *preload*/nls/\\* =\\> for config.locale and all config.extraLocale, load all bundles found in the best-matching bundle rollup. A value of 1 is returned, which is meaningless other than to say the plugin is executing the requested preloads\n\nIn cases 1 and 2, is always normalized to an absolute module id upon entry; see normalize. In case 3, it is assumed to be absolute; this is arranged by the builder.\n\nTo load a bundle means to insert the bundle into the plugin's cache and publish the bundle value to the loader. Given , , and a particular , the cache key\n\n``` markup\n<path>/nls/<bundle>/<locale>\n```\n\nwill hold the value. Similarly, then plugin will publish this value to the loader by\n\n``` javascript\ndefine(\"<path>/nls/<bundle>/<locale>\", <bundle-value>);\n```\n\nGiven this algorithm, other machinery can provide fast load paths be preplacing values in the plugin's cache, which is public. When a load is demanded the cache is inspected before starting any loading. Explicitly placing values in the plugin cache is an advanced/experimental feature that should not be needed; use at your own risk.\n\nFor the normal AMD algorithm, the root bundle is loaded first, which instructs the plugin what additional localized bundles are required for a particular locale. These additional locales are loaded and a mix of the root and each progressively-specific locale is returned. For example:\n\n1.  The client demands \"dojo/i18n!some/path/nls/someBundle\n\n2.  The loader demands load(some/path/nls/someBundle)\n\n3.  This plugin require's \"some/path/nls/someBundle\", which is the root bundle.\n\n4.  Assuming config.locale is \"ab-cd-ef\" and the root bundle indicates that localizations are available for \"ab\" and \"ab-cd-ef\" (note the missing \"ab-cd\", then the plugin requires \"some/path/nls/ab/someBundle\" and \"some/path/nls/ab-cd-ef/someBundle\"\n\n5.  Upon receiving all required bundles, the plugin constructs the value of the bundle ab-cd-ef as...\n\n    ``` javascript\n     mixin(mixin(mixin({}, require(\"some/path/nls/someBundle\"),\n         require(\"some/path/nls/ab/someBundle\")),\n         require(\"some/path/nls/ab-cd-ef/someBundle\"));\n    ```\n\nThis value is inserted into the cache and published to the loader at the key/module-id some/path/nls/someBundle/ab-cd-ef.\n\nThe special preload signature (case 3) instructs the plugin to stop servicing all normal requests (further preload requests will be serviced) until all ongoing preloading has completed.\n\nThe preload signature instructs the plugin that a special rollup module is available that contains one or more flattened, localized bundles. The JSON array of available locales indicates which locales are available. Here is an example:\n\n``` javascript\n*preload*some/path/nls/someModule*[\"root\", \"ab\", \"ab-cd-ef\"]\n```\n\nThis indicates the following rollup modules are available:\n\n``` javascript\nsome/path/nls/someModule_ROOT\nsome/path/nls/someModule_ab\nsome/path/nls/someModule_ab-cd-ef\n```\n\nEach of these modules is a normal AMD module that contains one or more flattened bundles in a hash. For example, assume someModule contained the bundles some/bundle/path/someBundle and some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:\n\n``` javascript\ndefine({\n    some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,\n    some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,\n});\n```\n\nE.g., given this design, preloading for locale==\"ab\" can execute the following algorithm:\n\n``` javascript\nrequire([\"some/path/nls/someModule_ab\"], function(rollup){\n    for(var p in rollup){\n        var id = p + \"/ab\",\n        cache[id] = rollup[p];\n        define(id, rollup[p]);\n    }\n});\n```\n\nSimilarly, if \"ab-cd\" is requested, the algorithm can determine that \"ab\" is the best available and load accordingly.\n\nThe builder will write such rollups for every layer if a non-empty localeList profile property is provided. Further, the builder will include the following cache entry in the cache associated with any layer.\n\n``` javascript\n\"*now\":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}\n```\n\nThe \\*now special cache module instructs the loader to apply the provided function to context-require with respect to the particular layer being defined. This causes the plugin to hold all normal service requests until all preloading is complete.\n\nNotice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case where the target locale has a single segment and a layer depends on a single bundle:\n\nWithout Preloads:\n\n1.  Layer loads root bundle.\n2.  bundle is demanded; plugin loads single localized bundle.\n\nWith Preloads:\n\n1.  Layer causes preloading of target bundle.\n2.  bundle is demanded; service is delayed until preloading complete; bundle is returned.\n\nIn each case a single transaction is required to load the target bundle. In cases where multiple bundles are required and/or the locale has multiple segments, preloads still requires a single transaction whereas the normal path requires an additional transaction for each additional bundle/locale-segment. However all of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| require   | undefined |             |\n| load      | undefined |             |\n\n### `normalize``(id,toAbsMid)`\n\nDefined by [dojo/i18n](i18n)\n\nid may be relative. preload has form `*preload*<path>/nls/<module>*<flattened locales>` and therefore never looks like a relative\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| toAbsMid  | undefined |             |\n\n**Returns:** undefined\n\n### `normalizeLocale``(locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| locale    | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/i18n.html](http://dojotoolkit.org/api/1.10/dojo/i18n.html)"
- name: i18n#cache
  id: dojo/i18n#1_10dojo_i18n_cache
  summary: null
  belongs_to: i18n
  description: |-
    ### cache

    Defined by: [dojo/i18n](i18n)

    ### dynamic

    Defined by: [dojo/i18n](i18n)

    ### unitTests

    Defined by: [dojo/i18n](i18n)

    ## Methods
- name: i18n#getL10nName()
  id: dojo/i18n#1_10dojo_i18n_getL10nName
  summary: null
  belongs_to: i18n
  description: |-
    ### `getL10nName` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** string
- name: i18n#getLocalization()
  id: dojo/i18n#1_10dojo_i18n_getLocalization
  summary: null
  belongs_to: i18n
  description: |-
    ### `getLocalization` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** undefined
- name: i18n#load()
  id: dojo/i18n#1_10dojo_i18n_load
  summary: /nls/ => load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale
  belongs_to: i18n
  description: "### `load` `(id,require,load)`\n\nDefined by [dojo/i18n](i18n)\n\nid is in one of the following formats\n\n1.  /nls/ =\\> load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale.\n\n2.  /nls// =\\> load then return the bundle localized to\n\n3.  *preload* /nls/\\* =\\> for config.locale and all config.extraLocale, load all bundles found in the best-matching bundle rollup. A value of 1 is returned, which is meaningless other than to say the plugin is executing the requested preloads\n\nIn cases 1 and 2, is always normalized to an absolute module id upon entry; see normalize. In case 3, it is assumed to be absolute; this is arranged by the builder.\n\nTo load a bundle means to insert the bundle into the plugin's cache and publish the bundle value to the loader. Given , , and a particular , the cache key\n\n``` markup\n      <path>/nls/<bundle>/<locale>\n    \n```\n\nwill hold the value. Similarly, then plugin will publish this value to the loader by\n\n``` javascript\n      define(\"<path>/nls/<bundle>/<locale>\", <bundle-value>);\n    \n```\n\nGiven this algorithm, other machinery can provide fast load paths be preplacing values in the plugin's cache, which is public. When a load is demanded the cache is inspected before starting any loading. Explicitly placing values in the plugin cache is an advanced/experimental feature that should not be needed; use at your own risk.\n\nFor the normal AMD algorithm, the root bundle is loaded first, which instructs the plugin what additional localized bundles are required for a particular locale. These additional locales are loaded and a mix of the root and each progressively-specific locale is returned. For example:\n\n1.  The client demands \"dojo/i18n!some/path/nls/someBundle\n\n2.  The loader demands load(some/path/nls/someBundle)\n\n3.  This plugin require's \"some/path/nls/someBundle\", which is the root bundle.\n\n4.  Assuming config.locale is \"ab-cd-ef\" and the root bundle indicates that localizations are available for \"ab\" and \"ab-cd-ef\" (note the missing \"ab-cd\", then the plugin requires \"some/path/nls/ab/someBundle\" and \"some/path/nls/ab-cd-ef/someBundle\"\n\n5.  Upon receiving all required bundles, the plugin constructs the value of the bundle ab-cd-ef as...\n\n    ``` javascript\n               mixin(mixin(mixin({}, require(\"some/path/nls/someBundle\"),\n         require(\"some/path/nls/ab/someBundle\")),\n         require(\"some/path/nls/ab-cd-ef/someBundle\"));\n            \n    ```\n\nThis value is inserted into the cache and published to the loader at the key/module-id some/path/nls/someBundle/ab-cd-ef.\n\nThe special preload signature (case 3) instructs the plugin to stop servicing all normal requests (further preload requests will be serviced) until all ongoing preloading has completed.\n\nThe preload signature instructs the plugin that a special rollup module is available that contains one or more flattened, localized bundles. The JSON array of available locales indicates which locales are available. Here is an example:\n\n``` javascript\n      *preload*some/path/nls/someModule*[\"root\", \"ab\", \"ab-cd-ef\"]\n    \n```\n\nThis indicates the following rollup modules are available:\n\n``` javascript\n      some/path/nls/someModule_ROOT\nsome/path/nls/someModule_ab\nsome/path/nls/someModule_ab-cd-ef\n    \n```\n\nEach of these modules is a normal AMD module that contains one or more flattened bundles in a hash. For example, assume someModule contained the bundles some/bundle/path/someBundle and some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:\n\n``` javascript\n      define({\n    some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,\n    some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,\n});\n    \n```\n\nE.g., given this design, preloading for locale==\"ab\" can execute the following algorithm:\n\n``` javascript\n      require([\"some/path/nls/someModule_ab\"], function(rollup){\n    for(var p in rollup){\n        var id = p + \"/ab\",\n        cache[id] = rollup[p];\n        define(id, rollup[p]);\n    }\n});\n    \n```\n\nSimilarly, if \"ab-cd\" is requested, the algorithm can determine that \"ab\" is the best available and load accordingly.\n\nThe builder will write such rollups for every layer if a non-empty localeList profile property is provided. Further, the builder will include the following cache entry in the cache associated with any layer.\n\n``` javascript\n      \"*now\":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}\n    \n```\n\nThe \\*now special cache module instructs the loader to apply the provided function to context-require with respect to the particular layer being defined. This causes the plugin to hold all normal service requests until all preloading is complete.\n\nNotice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case where the target locale has a single segment and a layer depends on a single bundle:\n\nWithout Preloads:\n\n1.  Layer loads root bundle.\n2.  bundle is demanded; plugin loads single localized bundle.\n\nWith Preloads:\n\n1.  Layer causes preloading of target bundle.\n2.  bundle is demanded; service is delayed until preloading complete; bundle is returned.\n\nIn each case a single transaction is required to load the target bundle. In cases where multiple bundles are required and/or the locale has multiple segments, preloads still requires a single transaction whereas the normal path requires an additional transaction for each additional bundle/locale-segment. However all of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| require   | undefined |             |\n| load      | undefined |             |"
- name: i18n#normalize()
  id: dojo/i18n#1_10dojo_i18n_normalize
  summary: id may be relative
  belongs_to: i18n
  description: |-
    ### `normalize` `(id,toAbsMid)`

    Defined by [dojo/i18n](i18n)

    id may be relative. preload has form `*preload*<path>/nls/<module>*<flattened locales>` and therefore never looks like a relative

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | id        | undefined |             |
    | toAbsMid  | undefined |             |

    **Returns:** undefined
- name: i18n#normalizeLocale()
  id: dojo/i18n#1_10dojo_i18n_normalizeLocale
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: i18n
  description: "### `normalizeLocale` `(locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| locale    | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/i18n.html](http://dojotoolkit.org/api/1.10/dojo/i18n.html)"
- name: i18n.cache
  id: dojo/i18n.cache
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/i18n.cache\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/i18n.cache.html](http://dojotoolkit.org/api/1.10/dojo/i18n.cache.html)"
- name: io-query
  id: dojo/io-query
  summary: This module defines query string processing functions
  description: "# dojo/io-query\n\n## Summary\n\nThis module defines query string processing functions.\n\nSee the [dojo/io-query reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/io-query.html) for more information.\n\n## Methods\n\n### `objectToQuery``(map)`\n\nDefined by [dojo/io-query](io-query)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\nyields the following query string:\n\n``` javascript\n\"blah=blah&multi=thud&multi=thonk\"\n```\n\n### `queryToObject``(str)`\n\nDefined by [dojo/io-query](io-query)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n\"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n```\n\nresults in this object structure:\n\n``` javascript\n{\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n```\n\nNote that spaces and other urlencoded entities are correctly handled.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/io-query.html](http://dojotoolkit.org/api/1.10/dojo/io-query.html)"
- name: io-query#objectToQuery()
  id: dojo/io-query#1_10dojo_io-query_objectToQuery
  summary: takes a name/value mapping object and returns a string representing a URL-encoded version of that object
  belongs_to: io-query
  description: "### `objectToQuery` `(map)`\n\nDefined by [dojo/io-query](io-query)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```\n\nyields the following query string:\n\n``` javascript\n      \"blah=blah&multi=thud&multi=thonk\"\n    \n```"
- name: io-query#queryToObject()
  id: dojo/io-query#1_10dojo_io-query_queryToObject
  summary: Create an object representing a de-serialized query section of a URL
  belongs_to: io-query
  description: "### `queryToObject` `(str)`\n\nDefined by [dojo/io-query](io-query)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n      \"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n    \n```\n\nresults in this object structure:\n\n``` javascript\n      {\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n    \n```\n\nNote that spaces and other urlencoded entities are correctly handled.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/io-query.html](http://dojotoolkit.org/api/1.10/dojo/io-query.html)"
- name: io/iframe
  id: dojo/io/iframe
  summary: Deprecated, use dojo/request/iframe instead
  description: "# dojo/io/iframe\n\n## Summary\n\nDeprecated, use [dojo/request/iframe](../request/iframe) instead. Sends an Ajax I/O call using and Iframe (for instance, to upload files)\n\nSee the [dojo/io/iframe reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/io/iframe.html) for more information.\n\n## Methods\n\n### `create``(fname,onloadstr,uri)`\n\nDefined by [dojo/io/iframe](iframe)\n\nCreates a hidden iframe in the page. Used mostly for IO transports. You do not need to call this to start a dojo/io/iframe request. Just call send().\n\n|           |        |                                                                                                                             |\n|-----------|--------|-----------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                 |\n| fname     | String | The name of the iframe. Used for the name attribute on the iframe.                                                          |\n| onloadstr | String | A string of JavaScript that will be executed when the content in the iframe loads.                                          |\n| uri       | String | The value of the src attribute on the iframe element. If a value is not given, then dojo/resources/blank.html will be used. |\n\n### `doc``(iframeNode)`\n\nDefined by [dojo/io/iframe](iframe)\n\nReturns the document object associated with the iframe DOM Node argument.\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| iframeNode | undefined |             |\n\n### `setSrc``(iframe,src,replace)`\n\nDefined by [dojo/io/iframe](iframe)\n\nSets the URL that is loaded in an IFrame. The replace parameter indicates whether location.replace() should be used when changing the location of the iframe.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| iframe    | undefined |             |\n| src       | undefined |             |\n| replace   | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/io/iframe.html](http://dojotoolkit.org/api/1.10/dojo/io/iframe.html)"
- name: io/iframe#create()
  id: dojo/io/iframe#1_10dojo_io_iframe_create
  summary: Creates a hidden iframe in the page
  belongs_to: io/iframe
  description: |-
    ### `create` `(fname,onloadstr,uri)`

    Defined by [dojo/io/iframe](iframe)

    Creates a hidden iframe in the page. Used mostly for IO transports. You do not need to call this to start a dojo/io/iframe request. Just call send().

    |           |        |                                                                                                                             |
    |-----------|--------|-----------------------------------------------------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                                                                 |
    | fname     | String | The name of the iframe. Used for the name attribute on the iframe.                                                          |
    | onloadstr | String | A string of JavaScript that will be executed when the content in the iframe loads.                                          |
    | uri       | String | The value of the src attribute on the iframe element. If a value is not given, then dojo/resources/blank.html will be used. |
- name: io/iframe#doc()
  id: dojo/io/iframe#1_10dojo_io_iframe_doc
  summary: Returns the document object associated with the iframe DOM Node argument
  belongs_to: io/iframe
  description: |-
    ### `doc` `(iframeNode)`

    Defined by [dojo/io/iframe](iframe)

    Returns the document object associated with the iframe DOM Node argument.

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | iframeNode | undefined |             |
- name: io/iframe#setSrc()
  id: dojo/io/iframe#1_10dojo_io_iframe_setSrc
  summary: Sets the URL that is loaded in an IFrame
  belongs_to: io/iframe
  description: "### `setSrc` `(iframe,src,replace)`\n\nDefined by [dojo/io/iframe](iframe)\n\nSets the URL that is loaded in an IFrame. The replace parameter indicates whether location.replace() should be used when changing the location of the iframe.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| iframe    | undefined |             |\n| src       | undefined |             |\n| replace   | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/io/iframe.html](http://dojotoolkit.org/api/1.10/dojo/io/iframe.html)"
- name: io/script
  id: dojo/io/script
  summary: See the dojo/io/script reference documentation for more information
  description: "# dojo/io/script\n\n## Summary\n\nTODOC\n\nSee the [dojo/io/script reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/io/script.html) for more information.\n\n## Properties\n\n## Methods\n\n### `attach``(id,url,frameDocument)`\n\nDefined by [dojo/io/script](script)\n\ncreates a new `<script>` tag pointing to the specified URL and adds it to the document.\n\nAttaches the script element to the DOM. Use this method if you just want to attach a script to the DOM and do not care when or if it loads.\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| url           | undefined |             |\n| frameDocument | undefined |             |\n\n### `get``(args)`\n\nDefined by [dojo/io/script](script)\n\nsends a get request using a dynamically created script tag.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `remove``(id,frameDocument)`\n\nDefined by [dojo/io/script](script)\n\nremoves the script element with the given id, from the given frameDocument. If no frameDocument is passed, the current document is used.\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| frameDocument | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/io/script.html](http://dojotoolkit.org/api/1.10/dojo/io/script.html)"
- name: io/script#attach()
  id: dojo/io/script#1_10dojo_io_script_attach
  summary: creates a new <script> tag pointing to the specified URL and adds it to the document
  belongs_to: io/script
  description: |-
    ### `attach` `(id,url,frameDocument)`

    Defined by [dojo/io/script](script)

    creates a new `<script>` tag pointing to the specified URL and adds it to the document.

    Attaches the script element to the DOM. Use this method if you just want to attach a script to the DOM and do not care when or if it loads.

    |               |           |             |
    |---------------|-----------|-------------|
    | Parameter     | Type      | Description |
    | id            | undefined |             |
    | url           | undefined |             |
    | frameDocument | undefined |             |
- name: io/script#get()
  id: dojo/io/script#1_10dojo_io_script_get
  summary: sends a get request using a dynamically created script tag
  belongs_to: io/script
  description: |-
    ### `get` `(args)`

    Defined by [dojo/io/script](script)

    sends a get request using a dynamically created script tag.

    [TABLE]

    **Returns:** undefined
- name: io/script#remove()
  id: dojo/io/script#1_10dojo_io_script_remove
  summary: removes the script element with the given id, from the given frameDocument
  belongs_to: io/script
  description: "### `remove` `(id,frameDocument)`\n\nDefined by [dojo/io/script](script)\n\nremoves the script element with the given id, from the given frameDocument. If no frameDocument is passed, the current document is used.\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| frameDocument | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/io/script.html](http://dojotoolkit.org/api/1.10/dojo/io/script.html)"
- name: json
  id: dojo/json
  summary: See the dojo/json reference documentation for more information
  description: "# dojo/json\n\n## Summary\n\nFunctions to parse and serialize JSON\n\nSee the [dojo/json reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/json.html) for more information.\n\n## Methods\n\n### `parse``(str,strict)`\n\nDefined by [dojo/json](json)\n\nParses a [JSON](http://json.org) string to return a JavaScript object.\n\nThis function follows [native JSON API](https://developer.mozilla.org/en/JSON) Throws for invalid JSON strings. This delegates to eval() if native JSON support is not available. By default this will evaluate any valid JS expression. With the strict parameter set to true, the parser will ensure that only valid JSON strings are parsed (otherwise throwing an error). Without the strict parameter, the content passed to this method must come from a trusted source.\n\n|           |           |                                                                                                                                                                                                                                       |\n|-----------|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                                                                                                                                                                           |\n| str       | undefined | a string literal of a JSON item, for instance: `'{ \"foo\": [ \"bar\", 1, { \"baz\": \"thud\" } ] }'`                                                                                                                                         |\n| strict    | undefined | When set to true, this will ensure that only valid, secure JSON is ever parsed. Make sure this is set to true for untrusted content. Note that on browsers/engines without native JSON support, setting this to true will run slower. |\n\n### `stringify``(value,replacer,spacer)`\n\nDefined by [dojo/json](json)\n\nReturns a [JSON](http://json.org) serialization of an object.\n\nReturns a [JSON](http://json.org) serialization of an object. This function follows [native JSON API](https://developer.mozilla.org/en/JSON) Note that this doesn't check for infinite recursion, so don't do that!\n\n|           |           |                                                                                |\n|-----------|-----------|--------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                    |\n| value     | undefined | A value to be serialized.                                                      |\n| replacer  | undefined | A replacer function that is called for each value and can return a replacement |\n| spacer    | undefined | A spacer string to be used for pretty printing of JSON                         |\n\n## Examples\n\n### Example 1\n\nsimple serialization of a trivial object\n\n``` javascript\ndefine([\"dojo/json\"], function(JSON){\n    var jsonStr = JSON.stringify({ howdy: \"stranger!\", isStrange: true });\n    doh.is('{\"howdy\":\"stranger!\",\"isStrange\":true}', jsonStr);\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/json.html](http://dojotoolkit.org/api/1.10/dojo/json.html)"
- name: json#parse()
  id: dojo/json#1_10dojo_json_parse
  summary: Parses a JSON string to return a JavaScript object
  belongs_to: json
  description: |-
    ### `parse` `(str,strict)`

    Defined by [dojo/json](json)

    Parses a [JSON](http://json.org) string to return a JavaScript object.

    This function follows [native JSON API](https://developer.mozilla.org/en/JSON) Throws for invalid JSON strings. This delegates to eval() if native JSON support is not available. By default this will evaluate any valid JS expression. With the strict parameter set to true, the parser will ensure that only valid JSON strings are parsed (otherwise throwing an error). Without the strict parameter, the content passed to this method must come from a trusted source.

    |           |           |                                                                                                                                                                                                                                       |
    |-----------|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameter | Type      | Description                                                                                                                                                                                                                           |
    | str       | undefined | a string literal of a JSON item, for instance: `'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'`                                                                                                                                         |
    | strict    | undefined | When set to true, this will ensure that only valid, secure JSON is ever parsed. Make sure this is set to true for untrusted content. Note that on browsers/engines without native JSON support, setting this to true will run slower. |
- name: json#stringify()
  id: dojo/json#1_10dojo_json_stringify
  summary: Returns a JSON serialization of an object
  belongs_to: json
  description: "### `stringify` `(value,replacer,spacer)`\n\nDefined by [dojo/json](json)\n\nReturns a [JSON](http://json.org) serialization of an object.\n\nReturns a [JSON](http://json.org) serialization of an object. This function follows [native JSON API](https://developer.mozilla.org/en/JSON) Note that this doesn't check for infinite recursion, so don't do that!\n\n|           |           |                                                                                |\n|-----------|-----------|--------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                    |\n| value     | undefined | A value to be serialized.                                                      |\n| replacer  | undefined | A replacer function that is called for each value and can return a replacement |\n| spacer    | undefined | A spacer string to be used for pretty printing of JSON                         |\n\n## Examples\n\n### Example 1\n\nsimple serialization of a trivial object\n\n``` javascript\n      define([\"dojo/json\"], function(JSON){\n    var jsonStr = JSON.stringify({ howdy: \"stranger!\", isStrange: true });\n    doh.is('{\"howdy\":\"stranger!\",\"isStrange\":true}', jsonStr);\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/json.html](http://dojotoolkit.org/api/1.10/dojo/json.html)"
- name: keys
  id: dojo/keys
  summary: Definitions for common key values
  description: "# dojo/keys\n\n## Summary\n\nDefinitions for common key values. Client code should test keyCode against these named constants, as the actual codes can vary by browser.\n\nSee the [dojo/keys reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/keys.html) for more information.\n\n## Properties\n\n### ALT\n\nDefined by: [dojo/keys](keys)\n\n### BACKSPACE\n\nDefined by: [dojo/keys](keys)\n\n### CAPS_LOCK\n\nDefined by: [dojo/keys](keys)\n\n### CLEAR\n\nDefined by: [dojo/keys](keys)\n\n### copyKey\n\nDefined by: [dojo/keys](keys)\n\n### CTRL\n\nDefined by: [dojo/keys](keys)\n\n### DELETE\n\nDefined by: [dojo/keys](keys)\n\n### DOWN_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### DOWN_DPAD\n\nDefined by: [dojo/keys](keys)\n\n### END\n\nDefined by: [dojo/keys](keys)\n\n### ENTER\n\nDefined by: [dojo/keys](keys)\n\n### ESCAPE\n\nDefined by: [dojo/keys](keys)\n\n### F1\n\nDefined by: [dojo/keys](keys)\n\n### F10\n\nDefined by: [dojo/keys](keys)\n\n### F11\n\nDefined by: [dojo/keys](keys)\n\n### F12\n\nDefined by: [dojo/keys](keys)\n\n### F13\n\nDefined by: [dojo/keys](keys)\n\n### F14\n\nDefined by: [dojo/keys](keys)\n\n### F15\n\nDefined by: [dojo/keys](keys)\n\n### F2\n\nDefined by: [dojo/keys](keys)\n\n### F3\n\nDefined by: [dojo/keys](keys)\n\n### F4\n\nDefined by: [dojo/keys](keys)\n\n### F5\n\nDefined by: [dojo/keys](keys)\n\n### F6\n\nDefined by: [dojo/keys](keys)\n\n### F7\n\nDefined by: [dojo/keys](keys)\n\n### F8\n\nDefined by: [dojo/keys](keys)\n\n### F9\n\nDefined by: [dojo/keys](keys)\n\n### HELP\n\nDefined by: [dojo/keys](keys)\n\n### HOME\n\nDefined by: [dojo/keys](keys)\n\n### INSERT\n\nDefined by: [dojo/keys](keys)\n\n### LEFT_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### LEFT_DPAD\n\nDefined by: [dojo/keys](keys)\n\n### LEFT_WINDOW\n\nDefined by: [dojo/keys](keys)\n\n### META\n\nDefined by: [dojo/keys](keys)\n\n### NUM_LOCK\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_0\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_1\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_2\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_3\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_4\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_5\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_6\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_7\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_8\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_9\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_DIVIDE\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_ENTER\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_MINUS\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_MULTIPLY\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_PERIOD\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_PLUS\n\nDefined by: [dojo/keys](keys)\n\n### PAGE_DOWN\n\nDefined by: [dojo/keys](keys)\n\n### PAGE_UP\n\nDefined by: [dojo/keys](keys)\n\n### PAUSE\n\nDefined by: [dojo/keys](keys)\n\n### RIGHT_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### RIGHT_DPAD\n\nDefined by: [dojo/keys](keys)\n\n### RIGHT_WINDOW\n\nDefined by: [dojo/keys](keys)\n\n### SCROLL_LOCK\n\nDefined by: [dojo/keys](keys)\n\n### SELECT\n\nDefined by: [dojo/keys](keys)\n\n### SHIFT\n\nDefined by: [dojo/keys](keys)\n\n### SPACE\n\nDefined by: [dojo/keys](keys)\n\n### TAB\n\nDefined by: [dojo/keys](keys)\n\n### UP_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### UP_DPAD\n\nDefined by: [dojo/keys](keys)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/keys.html](http://dojotoolkit.org/api/1.10/dojo/keys.html)"
- name: loadInit
  id: dojo/loadinit
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/loadInit\n\n## Properties\n\n### dynamic\n\nDefined by: [dojo/loadInit](loadinit)\n\n### load\n\nDefined by: [dojo/loadInit](loadinit)\n\n## Methods\n\n### `normalize``(id)`\n\nDefined by [dojo/loadInit](loadinit)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/loadInit.html](http://dojotoolkit.org/api/1.10/dojo/loadInit.html)"
- name: loadInit#load
  id: dojo/loadinit#1_10dojo_loadInit_load
  summary: null
  belongs_to: loadInit
  description: |-
    ### load

    Defined by: [dojo/loadInit](loadinit)

    ## Methods
- name: loadInit#normalize()
  id: dojo/loadinit#1_10dojo_loadInit_normalize
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: loadInit
  description: "### `normalize` `(id)`\n\nDefined by [dojo/loadInit](loadinit)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/loadInit.html](http://dojotoolkit.org/api/1.10/dojo/loadInit.html)"
- name: main
  id: dojo/main
  summary: This module is the foundational module of the dojo boot sequence; it defines the dojo object
  description: "# dojo/main\n\n## Summary\n\nThis module is the foundational module of the dojo boot sequence; it defines the dojo object.\n\n## Properties\n\n### back\n\nDefined by: [dojo/back](back)\n\nBrowser history management resources\n\n### baseUrl\n\nDefined by: [dojo/\\_base/configSpidermonkey](_base/configspidermonkey)\n\n### behavior\n\nDefined by: [dojo/behavior](behavior)\n\n### cldr\n\nDefined by: [dojo/cldr/monetary](cldr/monetary)\n\n### colors\n\nDefined by: [dojo/colors](colors)\n\n### config\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\nThis module defines the user configuration during bootstrap.\n\n### connectPublisher\n\nDefined by: [dojo/robotx](robotx)\n\n### contentHandlers\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\n### currency\n\nDefined by: [dojo/currency](currency)\n\nlocalized formatting and parsing routines for currencies\n\n### data\n\nDefined by: [dojo/data/util/filter](data/util/filter)\n\n### date\n\nDefined by: [dojo/date/stamp](date/stamp)\n\n### dijit\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### dnd\n\nDefined by: [dojo/dnd/common](dnd/common)\n\n### doc\n\nDefined by: [dojo/\\_base/window](_base/window)\n\nAlias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().\n\n### dojox\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### fx\n\nDefined by: [dojo/fx](fx)\n\nEffects library on top of Base animations\n\n### gears\n\nDefined by: [dojo/gears](gears)\n\nTODOC\n\n### global\n\nDefined by: [dojo/\\_base/window](_base/window)\n\nAlias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().\n\n### html\n\nDefined by: [dojo/html](html)\n\nTODOC\n\n### i18n\n\nDefined by: [dojo/i18n](i18n)\n\nThis module implements the [dojo/i18n](i18n)! plugin and the v1.6- i18n API\n\n### io\n\nDefined by: [dojo/io/iframe](io/iframe)\n\n### isAir\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nTrue if client is Adobe Air\n\n### isAndroid\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is android browser. undefined otherwise.\n\n### isAsync\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### isBrowser\n\nDefined by: [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\n### isChrome\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is Chrome browser. undefined otherwise.\n\n### isCopyKey\n\nDefined by: [dojox/grid/\\_Grid](http://dojotoolkit.org/api/1.10/dojox/grid/_Grid)\n\n### isFF\n\nDefined by: [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\n### isIE\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is MSIE(PC). undefined otherwise. Corresponds to major detected IE version (6, 7, 8, etc.)\n\n### isIos\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is iPhone, iPod, or iPad. undefined otherwise.\n\n### isKhtml\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is a KHTML browser. undefined otherwise. Corresponds to major detected version.\n\n### isMac\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nTrue if the client runs on Mac\n\n### isMoz\n\nDefined by: [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\n### isMozilla\n\nDefined by: [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\n### isOpera\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is Opera. undefined otherwise. Corresponds to major detected version.\n\n### isQuirks\n\nDefined by: [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\n### isSafari\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is Safari or iPhone. undefined otherwise.\n\n### isSpidermonkey\n\nDefined by: [dojo/\\_base/configSpidermonkey](_base/configspidermonkey)\n\n### isWebKit\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nVersion as a Number if client is a WebKit-derived browser (Konqueror, Safari, Chrome, etc.). undefined otherwise.\n\n### isWii\n\nDefined by: [dojo/\\_base/sniff](_base/sniff)\n\nTrue if client is Wii\n\n### keys\n\nDefined by: [dojo/keys](keys)\n\nDefinitions for common key values. Client code should test keyCode against these named constants, as the actual codes can vary by browser.\n\n### locale\n\nDefined by: [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\n### mouseButtons\n\nDefined by: [dojo/mouse](mouse)\n\n### number\n\nDefined by: [dojo/number](number)\n\nlocalized formatting and parsing routines for Number\n\n### parser\n\nDefined by: [dojox/mobile/parser](http://dojotoolkit.org/api/1.10/dojox/mobile/parser)\n\n### publish\n\nDefined by: [dojo/robotx](robotx)\n\n### query\n\nDefined by: [dojo/query](query)\n\n### regexp\n\nDefined by: [dojo/regexp](regexp)\n\nRegular expressions and Builder resources\n\n### rpc\n\nDefined by: [dojo/rpc/RpcService](rpc/rpcservice)\n\n### scopeMap\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### store\n\nDefined by: [dojo/store/Cache](store/cache)\n\n### string\n\nDefined by: [dojo/string](string)\n\nString utilities for Dojo\n\n### subscribe\n\nDefined by: [dojo/robotx](robotx)\n\n### tests\n\nDefined by: [dojo/tests](tests)\n\nD.O.H. Test files for Dojo unit testing.\n\n### toJsonIndentStr\n\nDefined by: [dojo/\\_base/json](_base/json)\n\n### touch\n\nDefined by: [dojo/touch](touch)\n\nThis module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop. Based on <http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html> Also, if the dojoClick property is set to truthy on a DOM node, [dojo/touch](touch) generates click events immediately for this node and its descendants (except for descendants that have a dojoClick property set to falsy), to avoid the delay before native browser click events, and regardless of whether evt.preventDefault() was called in a touch.press event listener.\n\n### version\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\nVersion number of the Dojo Toolkit\n\n### window\n\nDefined by: [dojo/window](window)\n\nTODOC\n\n## Methods\n\n### `AdapterRegistry``(returnWrappers)`\n\nDefined by [dojo/AdapterRegistry](adapterregistry)\n\nA registry to make contextual calling/searching easier.\n\nObjects of this class keep list of arrays in the form \\[name, check, wrap, directReturn\\] that are used to determine what the contextual result of a set of checked arguments is. All check/wrap functions in this registry should be of the same arity.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n// create a new registry\nrequire([\"dojo/AdapterRegistry\"],\nfunction(AdapterRegistry){\n    var reg = new AdapterRegistry();\n    reg.register(\"handleString\",\n        function(str){\n            return typeof val == \"string\"\n        },\n        function(str){\n            // do something with the string here\n        }\n    );\n    reg.register(\"handleArr\",\n        dojo.isArray,\n        function(arr){\n            // do something with the array here\n        }\n    );\n\n    // now we can pass reg.match() *either* an array or a string and\n    // the value we pass will get handled by the right function\n    reg.match(\"someValue\"); // will call the first function\n    reg.match([\"someValue\"]); // will call the second\n});\n```\n\n### `addClass``(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds the specified classes to the end of the class list on the passed node. Will not re-apply duplicate classes.\n\n|           |                   |                                                                                                 |\n|-----------|-------------------|-------------------------------------------------------------------------------------------------|\n| Parameter | Type              | Description                                                                                     |\n| node      | String \\| DOMNode | String ID or DomNode reference to add a class string too                                        |\n| classStr  | String \\| Array   | A String class name to add, or several space-separated class names, or an array of class names. |\n\n## Examples\n\n### Example 1\n\nAdd a class to some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"anewClass\");\n});\n```\n\n### Example 2\n\nAdd two classes at once:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"firstClass secondClass\");\n});\n```\n\n### Example 3\n\nAdd two classes at once (using array):\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n```\n\n### Example 4\n\nAvailable in `dojo/NodeList` for multiple additions\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\"ul > li\").addClass(\"firstLevel\");\n});\n```\n\n### `addOnLoad``(priority,context,callback)`\n\nDefined by [dojo/ready](ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n```\n\n### Example 3\n\nUsing context\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n```\n\n### `addOnUnload``(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](_base/unload)\n\nRegisters a function to be triggered when the page unloads. Deprecated, use on(window, \"beforeunload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnUnload is called Dojo will register a page listener to trigger your unload handler with.\n\nIn a browser environment, the functions will be triggered during the window.onbeforeunload event. Be careful of doing too much work in an unload handler. onbeforeunload can be triggered if a link to download a file is clicked, or if the link is a javascript: link. In these cases, the onbeforeunload event fires, but the document is not actually destroyed. So be careful about doing destructive operations in a dojo.addOnUnload callback.\n\nFurther note that calling dojo.addOnUnload will prevent browsers from using a \"fast back\" cache to make page loading via back button instantaneous.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnUnload(afunc);\n    unload.addOnUnload(foo, \"bar\");\n    unload.addOnUnload(foo, function(){console.log(\"\", this.data);});\n});\n```\n\n### `addOnWindowUnload``(obj,functionName)`\n\nDefined by [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\nregisters a function to be triggered when window.onunload fires. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider dojo.addOnUnload() if you need to modify the DOM or do heavy JavaScript work.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.addOnWindowUnload(functionPointer)\ndojo.addOnWindowUnload(object, \"functionName\")\ndojo.addOnWindowUnload(object, function(){ /* ... */});\n```\n\n### `anim``(node,properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/\\_base/fx](_base/fx)\n\nA simpler interface to `animateProperty()`, also returns an instance of `Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.\n\nSimpler (but somewhat less powerful) version of `animateProperty`. It uses defaults for many basic properties and allows for positional parameters to be used in place of the packed \"property bag\" which is used for other Dojo animation methods.\n\nThe `Animation` object returned will be already playing, so calling play() on it again is (usually) a no-op.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nFade out a node\n\n``` javascript\nbasefx.anim(\"id\", { opacity: 0 });\n```\n\n### Example 2\n\nFade out a node over a full second\n\n``` javascript\nbasefx.anim(\"id\", { opacity: 0 }, 1000);\n```\n\n### `animateProperty``(args)`\n\nDefined by [dojo/\\_base/fx](_base/fx)\n\nReturns an animation that will transition the properties of node defined in `args` depending how they are defined in `args.properties`\n\nFoundation of most [dojo/\\_base/fx](_base/fx) animations. It takes an object of \"properties\" corresponding to style properties, and animates them in parallel over a set duration.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nA simple animation that changes the width of the specified node.\n\n``` javascript\nbasefx.animateProperty({\n    node: \"nodeId\",\n    properties: { width: 400 },\n}).play();\n```\n\nDojo figures out the start value for the width and converts the\n\ninteger specified for the width to the more expressive but verbose form `{ width: { end: '400', units: 'px' } }` which you can also specify directly. Defaults to 'px' if omitted.\n\n### Example 2\n\nAnimate width, height, and padding over 2 seconds... the pedantic way:\n\n``` javascript\nbasefx.animateProperty({ node: node, duration:2000,\n    properties: {\n        width: { start: '200', end: '400', units:\"px\" },\n        height: { start:'200', end: '400', units:\"px\" },\n        paddingTop: { start:'5', end:'50', units:\"px\" }\n    }\n}).play();\n```\n\nNote 'paddingTop' is used over 'padding-top'. Multi-name CSS properties\n\nare written using \"mixed case\", as the hyphen is illegal as an object key.\n\n### Example 3\n\nPlug in a different easing function and register a callback for when the animation ends. Easing functions accept values between zero and one and return a value on that basis. In this case, an exponential-in curve.\n\n``` javascript\nbasefx.animateProperty({\n    node: \"nodeId\",\n    // dojo figures out the start value\n    properties: { width: { end: 400 } },\n    easing: function(n){\n        return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));\n    },\n    onEnd: function(node){\n        // called when the animation finishes. The animation\n        // target is passed to this function\n    }\n}).play(500); // delay playing half a second\n```\n\n### Example 4\n\nLike all `Animation`s, animateProperty returns a handle to the Animation instance, which fires the events common to Dojo FX. Use `aspect.after` to access these events outside of the Animation definition:\n\n``` javascript\nvar anim = basefx.animateProperty({\n    node:\"someId\",\n    properties:{\n        width:400, height:500\n    }\n});\naspect.after(anim, \"onEnd\", function(){\n    console.log(\"animation ended\");\n}, true);\n// play the animation now:\nanim.play();\n```\n\n### Example 5\n\nEach property can be a function whose return value is substituted along. Additionally, each measurement (eg: start, end) can be a function. The node reference is passed directly to callbacks.\n\n``` javascript\nbasefx.animateProperty({\n    node:\"mine\",\n    properties:{\n        height:function(node){\n            // shrink this node by 50%\n            return domGeom.position(node).h / 2\n        },\n        width:{\n            start:function(node){ return 100; },\n            end:function(node){ return 200; }\n        }\n    }\n}).play();\n```\n\n### `Animation``(args)`\n\nDefined by [dojo/\\_base/fx](_base/fx)\n\nA generic animation class that fires callbacks into its handlers object at various states.\n\nA generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of `Animation` when one is returned.\n\n|           |        |                                                                               |\n|-----------|--------|-------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                   |\n| args      | Object | The 'magic argument', mixing all the properties into this animation instance. |\n\n### `attr``(node,name,value)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nGets or sets an attribute on an HTML element.\n\nHandles normalized getting and setting of attributes on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, the value of the requested attribute or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" attribute on a node\ndojo.attr(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.attr(\"nodeId\", \"foo\");\n```\n\n### Example 2\n\n``` javascript\n// use attr() to set the tab index\ndojo.attr(\"nodeId\", \"tabIndex\", 3);\n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\ndojo.attr(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\ndojo.attr(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\nvar obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.attr(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n```\n\n### `blendColors``(start,end,weight,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nBlend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated Color object for the result\n\n[TABLE]\n\n**Returns:** undefined\n\n### `body``(doc)`\n\nDefined by [dojo/\\_base/window](_base/window)\n\nReturn the body element of the specified document or of dojo/\\_base/window::doc.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nwin.body().appendChild(dojo.doc.createElement('div'));\n```\n\n### `byId``(id,doc)`\n\nDefined by [dojo/dom](dom)\n\nReturns DOM node with matching `id` attribute or falsy value (ex: null or undefined) if not found. If `id` is a DomNode, this function is a no-op.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nLook up a node by ID:\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"foo\");\n});\n```\n\n### Example 2\n\nCheck if a node exists, and use it.\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"bar\");\n    if(n){ doStuff() ... }\n});\n```\n\n### Example 3\n\nAllow string or DomNode references to be passed to a custom function:\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var foo = function(nodeOrId){\n        nodeOrId = dom.byId(nodeOrId);\n        // ... more stuff\n    }\n});\n```\n\n### `cache``(module,url,value)`\n\nDefined by [dojo/text](text)\n\nA getter and setter for storing the string content associated with the module and url arguments.\n\nIf module is a string that contains slashes, then it is interpretted as a fully resolved path (typically a result returned by require.toUrl), and url should not be provided. This is the preferred signature. If module is a string that does not contain slashes, then url must also be provided and module and url are used to call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated. If value is specified, the cache value for the moduleUrl will be set to that value. Otherwise, dojo.cache will fetch the moduleUrl and store it in its internal cache and return that cached value for the URL. To clear a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the the URL contents, only modules on the same domain of the page can use this capability. The build system can inline the cache values though, to allow for xdomain hosting.\n\n[TABLE]\n\n**Returns:** undefined \\| null\n\n## Examples\n\n### Example 1\n\nTo ask dojo.cache to fetch content and store it in the cache (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n//If template.html contains \"<h1>Hello</h1>\" that will be\n//the value for the text variable.\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\");\n```\n\n### Example 2\n\nTo ask dojo.cache to fetch content and store it in the cache, and sanitize the input (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n//If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\", {sanitize: true});\n```\n\n### Example 3\n\nSame example as previous, but demonstrates how an object can be passed in as the first argument, then the value argument can then be the second argument.\n\n``` javascript\n//If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](new dojo._Url(\"my/module/template.html\"), {sanitize: true});\n```\n\n### `clearCache``()`\n\nDefined by [dojo/\\_base/array](_base/array)\n\n### `Color``(color)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and creates a new Color instance to work from.\n\n|           |                           |             |\n|-----------|---------------------------|-------------|\n| Parameter | Type                      | Description |\n| color     | Array \\| String \\| Object |             |\n\n## Examples\n\n### Example 1\n\nWork with a Color instance:\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var c = new Color();\n    c.setColor([0,0,0]); // black\n    var hex = c.toHex(); // #000000\n});\n```\n\n### Example 2\n\nWork with a node's color:\n\n``` javascript\n  require([\"dojo/_base/color\", \"dojo/dom-style\"], function(Color, domStyle){\n      var color = domStyle(\"someNode\", \"backgroundColor\");\n      var n = new Color(color);\n      // adjust the color some\n      n.r *= .5;\n      console.log(n.toString()); // rgb(128, 255, 255);\n  });\n```\n\n### `colorFromArray``(a,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nBuilds a `Color` from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha\n});\n```\n\n### `colorFromHex``(color,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nConverts a hex string with a '#' prefix to a color object. Supports 12-bit \\#rgb shorthand. Optionally accepts a `Color` object to update with the parsed value.\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var thing = new Color().fromHex(\"#ededed\"); // grey, longhand\n    var thing2 = new Color().fromHex(\"#000\"); // black, shorthand\n});\n```\n\n### `colorFromRgb``(color,obj)`\n\nDefined by [dojo/colors](colors)\n\nget rgb(a) array from css-style color declarations\n\nthis function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values.\n\n[TABLE]\n\n**Returns:** null\n\n### `colorFromString``(str,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nParses `str` for a color value. Accepts hex, rgb, and rgba style color values.\n\nAcceptable input values for str may include arrays of any form accepted by dojo.colorFromArray, hex strings such as \"#aaaaaa\", or rgb or rgba strings such as \"rgb(133, 200, 16)\" or \"rgba(10, 10, 10, 50)\"\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n### `connect``(obj,event,context,method,dontFix)`\n\nDefined by [dojo/\\_base/connect](_base/connect)\n\n`dojo.connect` is a deprecated event handling and delegation method in Dojo. It allows one function to \"listen in\" on the execution of any other, triggering the second whenever the first is called. Many listeners may be attached to a function, and source functions may be either regular function calls or DOM events.\n\nConnects listeners to actions, so that after event fires, a listener is called with the same arguments passed to the original function.\n\nSince `dojo.connect` allows the source of events to be either a \"regular\" JavaScript function or a DOM event, it provides a uniform interface for listening to all the types of events that an application is likely to deal with though a single, unified interface. DOM programmers may want to think of it as \"addEventListener for everything and anything\".\n\nWhen setting up a connection, the `event` parameter must be a string that is the name of the method/event to be listened for. If `obj` is null, `kernel.global` is assumed, meaning that connections to global methods are supported but also that you may inadvertently connect to a global by passing an incorrect object name or invalid reference.\n\n`dojo.connect` generally is forgiving. If you pass the name of a function or method that does not yet exist on `obj`, connect will not fail, but will instead set up a stub method. Similarly, null arguments may simply be omitted such that fewer than 4 arguments may be required to set up a connection See the examples for details.\n\nThe return value is a handle that is needed to remove this connection with `dojo.disconnect`.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nWhen obj.onchange(), do ui.update():\n\n``` javascript\ndojo.connect(obj, \"onchange\", ui, \"update\");\ndojo.connect(obj, \"onchange\", ui, ui.update); // same\n```\n\n### Example 2\n\nUsing return value for disconnect:\n\n``` javascript\nvar link = dojo.connect(obj, \"onchange\", ui, \"update\");\n...\ndojo.disconnect(link);\n```\n\n### Example 3\n\nWhen onglobalevent executes, watcher.handler is invoked:\n\n``` javascript\ndojo.connect(null, \"onglobalevent\", watcher, \"handler\");\n```\n\n### Example 4\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked:\n\n``` javascript\ndojo.connect(ob, \"onCustomEvent\", null, \"customEventHandler\");\ndojo.connect(ob, \"onCustomEvent\", \"customEventHandler\"); // same\n```\n\n### Example 5\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked with the same scope (this):\n\n``` javascript\ndojo.connect(ob, \"onCustomEvent\", null, customEventHandler);\ndojo.connect(ob, \"onCustomEvent\", customEventHandler); // same\n```\n\n### Example 6\n\nWhen globalEvent executes, globalHandler is invoked with the same scope (this):\n\n``` javascript\ndojo.connect(null, \"globalEvent\", null, globalHandler);\ndojo.connect(\"globalEvent\", globalHandler); // same\n```\n\n### `contentBox``(node,box)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nGetter/setter for the content-box of node.\n\nReturns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a content width of 300px and a content-height of 150px. Note that the content box may have a much larger border or margin box, depending on the box model currently in use and CSS values set/inherited for node. While the getter will return top and left values, the setter only accepts setting the width and height.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `cookie``(name,value,props)`\n\nDefined by [dojo/cookie](cookie)\n\nGet or set a cookie.\n\nIf one argument is passed, returns the value of the cookie For two or more arguments, acts as a setter.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nset a cookie with the JSON-serialized contents of an object which will expire 5 days from now:\n\n``` javascript\nrequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    cookie(\"configObj\", json.stringify(config, {expires: 5 }));\n});\n```\n\n### Example 2\n\nde-serialize a cookie back into a JavaScript object:\n\n``` javascript\nrequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    config = json.parse(cookie(\"configObj\"));\n});\n```\n\n### Example 3\n\ndelete a cookie:\n\n``` javascript\nrequire([\"dojo/cookie\"], function(cookie){\n    cookie(\"configObj\", null, {expires: -1});\n});\n```\n\n### `coords``(node,includeScroll)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nDeprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t.\n\nReturns an object that measures margin-box (w)idth/(h)eight and absolute position x/y of the border-box. Also returned is computed (l)eft and (t)op values in pixels from the node's offsetParent as returned from marginBox(). Return value will be in the form:\n\n``` javascript\n{ l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }\n```\n\nDoes not act as a setter. If includeScroll is passed, the x and\n\ny params are affected as one would expect in dojo.position().\n\n[TABLE]\n\n**Returns:** undefined\n\n### `create``(tag,attrs,refNode,pos)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nCreate an element, allowing for optional attribute decoration and placement.\n\nA DOM Element creation function. A shorthand method for creating a node or a fragment, and allowing for a convenient optional attribute setting step, as well as an optional DOM placement reference.\n\nAttributes are set by passing the optional object through `dojo.setAttr`. See `dojo.setAttr` for noted caveats and nuances, and API if applicable.\n\nPlacement is done via `dojo.place`, assuming the new node to be the action node, passing along the optional reference node and position.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a DIV:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\");\n});\n```\n\n### Example 2\n\nCreate a DIV with content:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", { innerHTML:\"<p>hi</p>\" });\n});\n```\n\n### Example 3\n\nPlace a new DIV in the BODY, with no attributes set\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", null, dojo.body());\n});\n```\n\n### Example 4\n\nCreate an UL, and populate it with LI's. Place the list as the first-child of a node with id=\"someId\":\n\n``` javascript\nrequire([\"dojo/dom-construct\", \"dojo/_base/array\"],\nfunction(domConstruct, arrayUtil){\n    var ul = domConstruct.create(\"ul\", null, \"someId\", \"first\");\n    var items = [\"one\", \"two\", \"three\", \"four\"];\n    arrayUtil.forEach(items, function(data){\n        domConstruct.create(\"li\", { innerHTML: data }, ul);\n    });\n});\n```\n\n### Example 5\n\nCreate an anchor, with an href. Place in BODY:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.create(\"a\", { href:\"foo.html\", title:\"Goto FOO!\" }, dojo.body());\n});\n```\n\n### `declare``(className,superclass,props)`\n\nDefined by [dojo/\\_base/declare](_base/declare)\n\nCreate a feature-rich constructor from compact notation.\n\nCreate a constructor using a compact notation for inheritance and prototype extension.\n\nMixin ancestors provide a type of multiple inheritance. Prototypes of mixin ancestors are copied to the new class: changes to mixin prototypes will not affect classes to which they have been mixed in.\n\nAncestors can be compound classes created by this version of declare(). In complex cases all base classes are going to be linearized according to C3 MRO algorithm (see <http://www.python.org/download/releases/2.3/mro/> for more details).\n\n\"className\" is cached in \"declaredClass\" property of the new class, if it was supplied. The immediate super class will be cached in \"superclass\" property of the new class.\n\nMethods in \"props\" will be copied and modified: \"nom\" property (the declared name of the method) will be added to all copied functions to help identify them for the internal machinery. Be very careful, while reusing methods: if you use the same function under different names, it can produce errors in some cases.\n\nIt is possible to use constructors created \"manually\" (without declare()) as bases. They will be called as usual during the creation of an instance, their methods will be chained, and even called by \"this.inherited()\".\n\nSpecial property \"-chains-\" governs how to chain methods. It is a dictionary, which uses method names as keys, and hint strings as values. If a hint string is \"after\", this method will be called after methods of its base classes. If a hint string is \"before\", this method will be called before methods of its base classes.\n\nIf \"constructor\" is not mentioned in \"-chains-\" property, it will be chained using the legacy mode: using \"after\" chaining, calling preamble() method before each constructor, if available, and calling postscript() after all constructors were executed. If the hint is \"after\", it is chained as a regular method, but postscript() will be called after the chain of constructors. \"constructor\" cannot be chained \"before\", but it allows a special hint string: \"manual\", which means that constructors are not going to be chained in any way, and programmer will call them manually using this.inherited(). In the latter case postscript() will be called after the construction.\n\nAll chaining hints are \"inherited\" from base classes and potentially can be overridden. Be very careful when overriding hints! Make sure that all chained methods can work in a proposed manner of chaining.\n\nOnce a method was chained, it is impossible to unchain it. The only exception is \"constructor\". You don't need to define a method in order to supply a chaining hint.\n\nIf a method is chained, it cannot use this.inherited() because all other methods in the hierarchy will be called automatically.\n\nUsually constructors and initializers of any kind are chained using \"after\" and destructors of any kind are chained as \"before\". Note that chaining assumes that chained methods do not return any value: any returned value will be discarded.\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/declare.\\_\\_DeclareCreatedObject](_base/declare.__declarecreatedobject) \\| undefined\n\nNew constructor function.\n\n## Examples\n\n### Example 1\n\n``` javascript\ndeclare(\"my.classes.bar\", my.classes.foo, {\n    // properties to be added to the class prototype\n    someValue: 2,\n    // initialization function\n    constructor: function(){\n        this.myComplicatedObject = new ReallyComplicatedObject();\n    },\n    // other functions\n    someMethod: function(){\n        doStuff();\n    }\n});\n```\n\n### Example 2\n\n``` javascript\nvar MyBase = declare(null, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass1 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass2 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyDiamond = declare([MyClass1, MyClass2], {\n    // constructor, properties, and methods go here\n    // ...\n});\n```\n\n### Example 3\n\n``` javascript\nvar F = function(){ console.log(\"raw constructor\"); };\nF.prototype.method = function(){\n    console.log(\"raw method\");\n};\nvar A = declare(F, {\n    constructor: function(){\n        console.log(\"A.constructor\");\n    },\n    method: function(){\n        console.log(\"before calling F.method...\");\n        this.inherited(arguments);\n        console.log(\"...back in A\");\n    }\n});\nnew A().method();\n// will print:\n// raw constructor\n// A.constructor\n// before calling F.method...\n// raw method\n// ...back in A\n```\n\n### Example 4\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        destroy: \"before\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        console.log(\"B.constructor\");\n    },\n    destroy: function(){\n        console.log(\"B.destroy\");\n    }\n});\nvar C = declare(B, {\n    constructor: function(){\n        console.log(\"C.constructor\");\n    },\n    destroy: function(){\n        console.log(\"C.destroy\");\n    }\n});\nnew C().destroy();\n// prints:\n// B.constructor\n// C.constructor\n// C.destroy\n// B.destroy\n```\n\n### Example 5\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        constructor: \"manual\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        // ...\n        // call the base constructor with new parameters\n        this.inherited(arguments, [1, 2, 3]);\n        // ...\n    }\n});\n```\n\n### Example 6\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        m1: \"before\"\n    },\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    \"-chains-\": {\n        m2: \"after\"\n    },\n    m1: function(){\n        console.log(\"B.m1\");\n    },\n    m2: function(){\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\nx.m1();\n// prints:\n// B.m1\n// A.m1\nx.m2();\n// prints:\n// A.m2\n// B.m2\n```\n\n### `Deferred``(canceller)`\n\nDefined by [dojo/\\_base/Deferred](_base/deferred)\n\nDeprecated. This module defines the legacy dojo/\\_base/Deferred API. New code should use dojo/Deferred instead.\n\nThe Deferred API is based on the concept of promises that provide a generic interface into the eventual completion of an asynchronous action. The motivation for promises fundamentally is about creating a separation of concerns that allows one to achieve the same type of call patterns and logical data flow in asynchronous code as can be achieved in synchronous code. Promises allows one to be able to call a function purely with arguments needed for execution, without conflating the call with concerns of whether it is sync or async. One shouldn't need to alter a call's arguments if the implementation switches from sync to async (or vice versa). By having async functions return promises, the concerns of making the call are separated from the concerns of asynchronous interaction (which are handled by the promise).\n\nThe Deferred is a type of promise that provides methods for fulfilling the promise with a successful result or an error. The most important method for working with Dojo's promises is the then() method, which follows the CommonJS proposed promise API. An example of using a Dojo promise:\n\n``` javascript\nvar resultingPromise = someAsyncOperation.then(function(result){\n    ... handle result ...\n},\nfunction(error){\n    ... handle error ...\n});\n```\n\nThe .then() call returns a new promise that represents the result of the execution of the callback. The callbacks will never affect the original promises value.\n\nThe Deferred instances also provide the following functions for backwards compatibility:\n\n- addCallback(handler)\n- addErrback(handler)\n- callback(result)\n- errback(result)\n\nCallbacks are allowed to return promises themselves, so you can build complicated sequences of events with ease.\n\nThe creator of the Deferred may specify a canceller. The canceller is a function that will be called if Deferred.cancel is called before the Deferred fires. You can use this to implement clean aborting of an XMLHttpRequest, etc. Note that cancel will fire the deferred with a CancelledError (unless your canceller returns another kind of error), so the errbacks should be prepared to handle that error for cancellable Deferreds.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar deferred = new Deferred();\nsetTimeout(function(){ deferred.callback({success: true}); }, 1000);\nreturn deferred;\n```\n\n### Example 2\n\nDeferred objects are often used when making code asynchronous. It may be easiest to write functions in a synchronous manner and then split code using a deferred to trigger a response to a long-lived operation. For example, instead of register a callback function to denote when a rendering operation completes, the function can simply return a deferred:\n\n``` javascript\n// callback style:\nfunction renderLotsOfData(data, callback){\n    var success = false\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        success = true;\n    }catch(e){ }\n    if(callback){\n        callback(success);\n    }\n}\n\n\n// using callback style\nrenderLotsOfData(someDataObj, function(success){\n    // handles success or failure\n    if(!success){\n        promptUserToRecover();\n    }\n});\n// NOTE: no way to add another callback here!!\n```\n\n### Example 3\n\nUsing a Deferred doesn't simplify the sending code any, but it provides a standard interface for callers and senders alike, providing both with a simple way to service multiple callbacks for an operation and freeing both sides from worrying about details such as \"did this get called already?\". With Deferreds, new callbacks can be added at any time.\n\n``` javascript\n// Deferred style:\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        d.callback(true);\n    }catch(e){\n        d.errback(new Error(\"rendering failed\"));\n    }\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n// NOTE: addErrback and addCallback both return the Deferred\n// again, so we could chain adding callbacks or save the\n// deferred for later should we need to be notified again.\n```\n\n### Example 4\n\nIn this example, renderLotsOfData is synchronous and so both versions are pretty artificial. Putting the data display on a timeout helps show why Deferreds rock:\n\n``` javascript\n// Deferred style and async func\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    setTimeout(function(){\n        try{\n            for(var x in data){\n                renderDataitem(data[x]);\n            }\n            d.callback(true);\n        }catch(e){\n            d.errback(new Error(\"rendering failed\"));\n        }\n    }, 100);\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n```\n\nNote that the caller doesn't have to change his code at all to handle the asynchronous case.\n\n### `DeferredList``(list,fireOnOneCallback,fireOnOneErrback,consumeErrors,canceller)`\n\nDefined by [dojo/DeferredList](deferredlist)\n\nDeprecated, use dojo/promise/all instead. Provides event handling for a group of Deferred objects.\n\nDeferredList takes an array of existing deferreds and returns a new deferred of its own this new deferred will typically have its callback fired when all of the deferreds in the given list have fired their own deferreds. The parameters `fireOnOneCallback` and fireOnOneErrback, will fire before all the deferreds as appropriate\n\n[TABLE]\n\n### `deprecated``(behaviour,extra,removal)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nLog a debug message to indicate that a behavior has been deprecated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.deprecated(\"myApp.getTemp()\", \"use myApp.getLocaleTemp() instead\", \"1.0\");\n```\n\n### `destroy``(node)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n\n### `disconnect``(handle)`\n\nDefined by [dojo/\\_base/connect](_base/connect)\n\nRemove a link created by dojo.connect.\n\nRemoves the connection between event and the method referenced by handle.\n\n|           |        |                                                                        |\n|-----------|--------|------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                            |\n| handle    | Handle | the return value of the dojo.connect call that created the connection. |\n\n### `docScroll``(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns an object with {node, x, y} with corresponding offsets.\n\n[TABLE]\n\n**Returns:** Object \\| undefined\n\n### `empty``(node)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n\n### `eval``(scriptText)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nA legacy method created for use exclusively by internal Dojo methods. Do not use this method directly unless you understand its possibly-different implications on the platforms your are targeting.\n\nMakes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers that support indirect eval.\n\nAs usual, IE does not. On IE, the only way to implement global eval is to use execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval. This implementation uses the technique of executing eval in the scope of a function that is a single scope frame below the global scope; thereby coming close to the global scope. Note carefully that\n\ndojo.eval(\"var pi = 3.14;\");\n\nwill define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want to define a global variable using dojo.eval, write something like\n\ndojo.eval(\"window.pi = 3.14;\")\n\n|            |           |                         |\n|------------|-----------|-------------------------|\n| Parameter  | Type      | Description             |\n| scriptText | undefined | The text to evaluation. |\n\n**Returns:** any\n\nThe result of the evaluation. Often `undefined`\n\n### `every``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nDetermines whether or not every item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns false\narray.every([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### Example 2\n\n``` javascript\n// returns true\narray.every([1, 2, 3, 4], function(item){ return item>0; });\n```\n\n### `exit``(exitcode)`\n\nDefined by [dojo/\\_base/configSpidermonkey](_base/configspidermonkey)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| exitcode  | undefined |             |\n\n### `experimental``(moduleName,extra)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nMarks code as experimental.\n\nThis can be used to mark a function, file, or module as experimental. Experimental code is not ready to be used, and the APIs are subject to change without notice. Experimental code may be completed deleted without going through the normal deprecation process.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.experimental(\"dojo.data.Result\");\n```\n\n### Example 2\n\n``` javascript\ndojo.experimental(\"dojo.weather.toKelvin()\", \"PENDING approval from NOAA\");\n```\n\n### `fadeIn``(args)`\n\nDefined by [dojo/\\_base/fx](_base/fx)\n\nReturns an animation that will fade node defined in 'args' from its current opacity to fully opaque.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fadeOut``(args)`\n\nDefined by [dojo/\\_base/fx](_base/fx)\n\nReturns an animation that will fade node defined in 'args' from its current opacity to fully transparent.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fieldToObject``(inputNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nSerialize a form field to a JavaScript object.\n\nReturns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| inputNode | DOMNode \\| String |             |\n\n**Returns:** Object \\| undefined\n\n### `filter``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nReturns a new Array with those items from arr that match the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter>\n\n[TABLE]\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns [2, 3, 4]\narray.filter([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### `fixEvent``(evt,sender)`\n\nDefined by [dojo/\\_base/event](_base/event)\n\nnormalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions\n\n|           |         |                                  |\n|-----------|---------|----------------------------------|\n| Parameter | Type    | Description                      |\n| evt       | Event   | native event object              |\n| sender    | DOMNode | node to treat as \"currentTarget\" |\n\n**Returns:** Event\n\nnative event object\n\n### `fixIeBiDiScrollLeft``(scrollLeft,doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nIn RTL direction, scrollLeft should be a negative value, but IE returns a positive one. All codes using documentElement.scrollLeft must call this function to fix this error, otherwise the position will offset to right when there is a horizontal scrollbar.\n\n[TABLE]\n\n**Returns:** Number \\| number\n\n### `forEach``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nfor every item in arr, callback is invoked. Return values are ignored. If you want to break out of the loop, consider using array.every() or array.some(). forEach does not allow breaking out of the loop over the items in arr.\n\nThis function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach>\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n// log out all members of the array:\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item){\n          console.log(item);\n      }\n);\n```\n\n### Example 2\n\n``` javascript\n// log out the members and their indexes\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item, idx, arr){\n          console.log(item, \"at index:\", idx);\n      }\n);\n```\n\n### Example 3\n\n``` javascript\n// use a scoped object member as the callback\n\nvar obj = {\n      prefix: \"logged via obj.callback:\",\n      callback: function(item){\n          console.log(this.prefix, item);\n      }\n};\n\n// specifying the scope function executes the callback in that scope\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      obj.callback,\n      obj\n);\n\n// alternately, we can accomplish the same thing with lang.hitch()\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      lang.hitch(obj, \"callback\")\n);\n```\n\n### `formToJson``(formNode,prettyPrint)`\n\nDefined by [dojo/dom-form](dom-form)\n\nCreate a serialized JSON string from a form node or string ID identifying the form to serialize\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\n### `formToObject``(formNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n<form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\n### `formToQuery``(formNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nReturns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** String \\| undefined\n\n### `fromJson``(js)`\n\nDefined by [dojo/\\_base/json](_base/json)\n\nParses a JavaScript expression and returns a JavaScript value.\n\nThrows for invalid JavaScript expressions. It does not use a strict JSON parser. It always delegates to eval(). The content passed to this method must therefore come from a trusted source. It is recommend that you use [dojo/json](json)'s parse function for an implementation uses the (faster) native JSON parse when available.\n\n|           |        |                                                                                                           |\n|-----------|--------|-----------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                               |\n| js        | String | a string literal of a JavaScript expression, for instance: `'{ \"foo\": [ \"bar\", 1, { \"baz\": \"thud\" } ] }'` |\n\n**Returns:** undefined\n\n### `getAttr``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nGets an attribute on an HTML element.\n\nHandles normalized getting of attributes on DOM Nodes.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | DOMNode \\| String | id or reference to the element to get the attribute on |\n| name      | String            | the name of the attribute to get.                      |\n\n**Returns:** any \\| undefined \\| null\n\nthe value of the requested attribute or null if that attribute does not have a specified or default value;\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" attribute on a node\nrequire([\"dojo/dom-attr\", \"dojo/dom\"], function(domAttr, dom){\n    domAttr.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domAttr.get(\"nodeId\", \"foo\");\n}); \n```\n\n### `getBorderExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns an object with properties useful for noting the border dimensions.\n\n- l/t/r/b = the sum of left/top/right/bottom border (respectively)\n- w = the sum of the left and right border\n- h = the sum of the top and bottom border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getComputedStyle``(node)`\n\nDefined by [dojo/dom-style](dom-style)\n\nReturns a \"computed style\" object.\n\nGets a \"computed style\" object which can be used to gather information about the current state of the rendered node.\n\nNote that this may behave differently on different browsers. Values may have different formats and value encodings across browsers.\n\nNote also that this method is expensive. Wherever possible, reuse the returned object.\n\nUse the [dojo/dom-style.get()](dom-style#get) method for more consistent (pixelized) return values.\n\n|           |         |                                                                                    |\n|-----------|---------|------------------------------------------------------------------------------------|\n| Parameter | Type    | Description                                                                        |\n| node      | DOMNode | A reference to a DOM node. Does NOT support taking an ID string for speed reasons. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.getComputedStyle(dom.byId('foo')).borderWidth;\n});\n```\n\n### Example 2\n\nReusing the returned object, avoiding multiple lookups:\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    var cs = domStyle.getComputedStyle(dom.byId(\"someNode\"));\n    var w = cs.width, h = cs.height;\n});\n```\n\n### `getContentBox``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.\n\n[TABLE]\n\n**Returns:** object\n\n### `getIeDocumentElementOffset``(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns the offset in x and y from the document body to the visual edge of the page for IE\n\nThe following values in IE contain an offset:\n\n``` javascript\nevent.clientX\nevent.clientY\nnode.getBoundingClientRect().left\nnode.getBoundingClientRect().top\n```\n\nBut other position related values do not contain this offset,\n\nsuch as node.offsetLeft, node.offsetTop, node.style.left and node.style.top. The offset is always (2, 2) in LTR direction. When the body is in RTL direction, the offset counts the width of left scroll bar's width. This function computes the actual offset.\n\n[TABLE]\n\n**Returns:** object\n\n### `getL10nName``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** string\n\n### `getMarginBox``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns an object that encodes the width, height, left and top positions of the node's margin box.\n\n[TABLE]\n\n**Returns:** object\n\n### `getMarginExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).\n\n- l/t = marginLeft, marginTop, respectively\n- w = total width, margin inclusive\n- h = total height, margin inclusive\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getMarginSize``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns an object that encodes the width and height of the node's margin box\n\n[TABLE]\n\n**Returns:** object\n\n### `getNodeProp``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nReturns an effective value of a property or an attribute.\n\n|           |                   |                                                             |\n|-----------|-------------------|-------------------------------------------------------------|\n| Parameter | Type              | Description                                                 |\n| node      | DOMNode \\| String | id or reference to the element to remove the attribute from |\n| name      | String            | the name of the attribute                                   |\n\n**Returns:** any\n\nthe value of the attribute\n\n### `getPadBorderExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns object with properties useful for box fitting with regards to padding.\n\n- l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)\n- w = the sum of the left and right padding and border\n- h = the sum of the top and bottom padding and border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getPadExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns object with special values specifically useful for node fitting.\n\nReturns an object with `w`, `h`, `l`, `t` properties:\n\n``` javascript\nl/t/r/b = left/top/right/bottom padding (respectively)\nw = the total of the left and right padding\nh = the total of the top and bottom padding\n```\n\nIf 'node' has position, l/t forms the origin for child nodes.\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getProp``(node,name)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nGets a property on an HTML element.\n\nHandles normalized getting of properties on DOM nodes.\n\n|           |                   |                                                       |\n|-----------|-------------------|-------------------------------------------------------|\n| Parameter | Type              | Description                                           |\n| node      | DOMNode \\| String | id or reference to the element to get the property on |\n| name      | String            | the name of the property to get.                      |\n\n**Returns:** any \\| undefined\n\nthe value of the requested property or its default value\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" property on a node\nrequire([\"dojo/dom-prop\", \"dojo/dom\"], function(domProp, dom){\n    domProp.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domProp.get(\"nodeId\", \"foo\");\n});\n```\n\n### `getStyle``(node,name)`\n\nDefined by [dojo/dom-style](dom-style)\n\nAccesses styles on a node.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use [dojo/dom-geometry.getMarginBox()](dom-geometry#getMarginBox), [dojo/dom-geometry.getContentBox()](dom-geometry#getContentBox) or [dojo/dom-geometry.getPosition()](dom-geometry#getPosition).\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\");\n});\n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\", \"opacity\"); // 1 by default\n});\n```\n\n### `hasAttr``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nReturns true if the requested attribute is specified on the given element, and false otherwise.\n\n|           |                   |                                         |\n|-----------|-------------------|-----------------------------------------|\n| Parameter | Type              | Description                             |\n| node      | DOMNode \\| String | id or reference to the element to check |\n| name      | String            | the name of the attribute               |\n\n**Returns:** Boolean \\| contentWindow.document isn't accessible within IE7/8\n\ntrue if the requested attribute is specified on the given element, and false otherwise\n\n### `hasClass``(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReturns whether or not the specified classes are a portion of the class list currently applied to the node.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | String \\| DOMNode | String ID or DomNode reference to check the class for. |\n| classStr  | String            | A string class name to look for.                       |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nDo something if a node with id=\"someNode\" has class=\"aSillyClassName\" present\n\n``` javascript\nif(dojo.hasClass(\"someNode\",\"aSillyClassName\")){ ... }\n```\n\n### `hash``(hash,replace)`\n\nDefined by [dojo/hash](hash)\n\nGets or sets the hash string in the browser URL.\n\nHandles getting and setting of location.hash.\n\n- If no arguments are passed, acts as a getter.\n- If a string is passed, acts as a setter.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, returns the current hash string. when used as a setter, returns the new hash string.\n\n## Examples\n\n### Example 1\n\n``` javascript\ntopic.subscribe(\"/dojo/hashchange\", context, callback);\n\nfunction callback (hashValue){\n    // do something based on the hash value.\n}\n```\n\n### `indexOf``(arr,value,fromIndex,findLast)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nlocates the first index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's indexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf>\n\n[TABLE]\n\n**Returns:** Number\n\n### `isBodyLtr``(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns true if the current language is left-to-right, and false otherwise.\n\n[TABLE]\n\n**Returns:** Boolean \\| boolean\n\n### `isDescendant``(node,ancestor)`\n\nDefined by [dojo/dom](dom)\n\nReturns true if node is a descendant of ancestor\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | string id or node reference to test                             |\n| ancestor  | DOMNode \\| String | string id or node reference of potential parent to test against |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nTest is node id=\"bar\" is a descendant of node id=\"foo\"\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    if(dom.isDescendant(\"bar\", \"foo\")){ ... }\n});\n```\n\n### `lastIndexOf``(arr,value,fromIndex)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nlocates the last index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's lasIndexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf>\n\n[TABLE]\n\n**Returns:** Number\n\n### `loadInit``(f)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| f         | undefined |             |\n\n### `map``(arr,callback,thisObject,Ctr)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\napplies callback to each element of arr and returns an Array with the results\n\nThis function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map>\n\n[TABLE]\n\n**Returns:** Array \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns [2, 3, 4, 5]\narray.map([1, 2, 3, 4], function(item){ return item+1 });\n```\n\n### `marginBox``(node,box)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nGetter/setter for the margin-box of node.\n\nGetter/setter for the margin-box of node. Returns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a margin width of 300px and a margin-height of 150px.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nRetrieve the margin box of a passed node\n\n``` javascript\nvar box = dojo.marginBox(\"someNodeId\");\nconsole.dir(box);\n```\n\n### Example 2\n\nSet a node's margin box to the size of another node\n\n``` javascript\nvar box = dojo.marginBox(\"someNodeId\");\ndojo.marginBox(\"someOtherNode\", box);\n```\n\n### `moduleUrl``(module,url)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nReturns a URL relative to a module.\n\n[TABLE]\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar pngPath = dojo.moduleUrl(\"acme\",\"images/small.png\");\nconsole.dir(pngPath); // list the object properties\n// create an image and set it's source to pngPath's value:\nvar img = document.createElement(\"img\");\nimg.src = pngPath;\n// add our image to the document\ndojo.body().appendChild(img);\n```\n\n### Example 2\n\nyou may de-reference as far as you like down the package hierarchy. This is sometimes handy to avoid lengthy relative urls or for building portable sub-packages. In this example, the `acme.widget` and `acme.util` directories may be located under different roots (see `dojo.registerModulePath`) but the the modules which reference them can be unaware of their relative locations on the filesystem:\n\n``` javascript\n// somewhere in a configuration block\ndojo.registerModulePath(\"acme.widget\", \"../../acme/widget\");\ndojo.registerModulePath(\"acme.util\", \"../../util\");\n\n// ...\n\n// code in a module using acme resources\nvar tmpltPath = dojo.moduleUrl(\"acme.widget\",\"templates/template.html\");\nvar dataPath = dojo.moduleUrl(\"acme.util\",\"resources/data.json\");\n```\n\n### `NodeList``(array)`\n\nDefined by [dojo/query](query)\n\nArray-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo/query() calls.\n\nNodeList instances provide many utilities that reflect core Dojo APIs for Array iteration and manipulation, DOM manipulation, and event handling. Instead of needing to dig up functions in the dojo package, NodeLists generally make the full power of Dojo available for DOM manipulation tasks in a simple, chainable way.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| array     | undefined |             |\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\ncreate a node list from a node\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom\"\n], function(query, dom){\n    query.NodeList(dom.byId(\"foo\"));\n});\n```\n\n### Example 2\n\nget a NodeList from a CSS query and iterate on it\n\n``` javascript\nrequire([\"dojo/on\", \"dojo/dom\"\n], function(on, dom){\n    var l = query(\".thinger\");\n    l.forEach(function(node, index, nodeList){\n        console.log(index, node.innerHTML);\n    });\n});\n```\n\n### Example 3\n\nuse native and Dojo-provided array methods to manipulate a NodeList without needing to use dojo.\\* functions explicitly:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom-construct\", \"dojo/dom\"\n], function(query, domConstruct, dom){\n    var l = query(\".thinger\");\n    // since NodeLists are real arrays, they have a length\n    // property that is both readable and writable and\n    // push/pop/shift/unshift methods\n    console.log(l.length);\n    l.push(domConstruct.create(\"span\"));\n\n    // dojo's normalized array methods work too:\n    console.log( l.indexOf(dom.byId(\"foo\")) );\n    // ...including the special \"function as string\" shorthand\n    console.log( l.every(\"item.nodeType == 1\") );\n\n    // NodeLists can be [..] indexed, or you can use the at()\n    // function to get specific items wrapped in a new NodeList:\n    var node = l[3]; // the 4th element\n    var newList = l.at(1, 3); // the 2nd and 4th elements\n});\n```\n\n### Example 4\n\nchainability is a key advantage of NodeLists:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".thinger\")\n        .onclick(function(e){ /* ... */ })\n        .at(1, 3, 8) // get a subset\n            .style(\"padding\", \"5px\")\n            .forEach(console.log);\n});\n```\n\n### `objectToQuery``(map)`\n\nDefined by [dojo/io-query](io-query)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\nyields the following query string:\n\n``` javascript\n\"blah=blah&multi=thud&multi=thonk\"\n```\n\n### `place``(node,refNode,position)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nAttempt to insert node into the DOM, choosing from various positioning options. Returns the first argument resolved to a DOM node.\n\n[TABLE]\n\n**Returns:** DOMNode \\| undefined\n\nReturned values is the first argument resolved to a DOM node.\n\n.place() is also a method of `dojo/NodeList`, allowing `dojo/query` node lookups.\n\n## Examples\n\n### Example 1\n\nPlace a node by string id as the last child of another node by string id:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\");\n});\n```\n\n### Example 2\n\nPlace a node by string id before another node by string id\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\", \"before\");\n});\n```\n\n### Example 3\n\nCreate a Node, and place it in the body element (last child):\n\n``` javascript\nrequire([\"dojo/dom-construct\", \"dojo/_base/window\"\n], function(domConstruct, win){\n    domConstruct.place(\"<div></div>\", win.body());\n});\n```\n\n### Example 4\n\nPut a new LI as the first child of a list by id:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"<li></li>\", \"someUl\", \"first\");\n});\n```\n\n### `platformRequire``(modMap)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nrequire one or more modules based on which host environment Dojo is currently operating in\n\nThis method takes a \"map\" of arrays which one can use to optionally load dojo modules. The map is indexed by the possible dojo.name *values, with two additional values: \"default\" and \"common\". The items in the \"default\" array will be loaded if none of the other items have been chosen based on dojo.name*, set by your host environment. The items in the \"common\" array will *always* be loaded, regardless of which list is chosen.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| modMap    | Object |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.platformRequire({\n    browser: [\n        \"foo.sample\", // simple module\n        \"foo.test\",\n        [\"foo.bar.baz\", true] // skip object check in _loadModule (dojo.require)\n    ],\n    default: [ \"foo.sample._base\" ],\n    common: [ \"important.module.common\" ]\n});\n```\n\n### `popContext``()`\n\nDefined by [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\nIf the context stack contains elements, ensure that subsequent code executes in the *previous* context to the current context. The current context set (\\[global, document\\]) is returned.\n\n### `position``(node,includeScroll)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nGets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).\n\nReturns an object of the form: `{ x: 100, y: 300, w: 20, h: 15 }`. If includeScroll==true, the x and y values will include any document offsets that may affect the position relative to the viewport. Uses the border-box model (inclusive of border and padding but not margin). Does not act as a setter.\n\n[TABLE]\n\n**Returns:** Object \\| object\n\n### `prop``(node,name,value)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nGets or sets a property on an HTML element.\n\nHandles normalized getting and setting of properties on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any\n\nwhen used as a getter, the value of the requested property or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" property on a node\ndojo.prop(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.prop(\"nodeId\", \"foo\");\n```\n\n### Example 2\n\n``` javascript\n// use prop() to set the tab index\ndojo.prop(\"nodeId\", \"tabIndex\", 3);\n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\ndojo.prop(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\ndojo.prop(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\nvar obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.prop(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n```\n\n### `provide``(mid)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| mid       | undefined |             |\n\n### `pushContext``(g,d)`\n\nDefined by [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\ncauses subsequent calls to Dojo methods to assume the passed object and, optionally, document as the default scopes to use. A 2-element array of the previous global and document are returned.\n\ndojo.pushContext treats contexts as a stack. The auto-detected contexts which are initially provided using dojo.setContext() require authors to keep state in order to \"return\" to a previous context, whereas the dojo.pushContext and dojo.popContext methods provide a more natural way to augment blocks of code to ensure that they execute in a different window or frame without issue. If called without any arguments, the default context (the context when Dojo is first loaded) is instead pushed into the stack. If only a single string is passed, a node in the intitial context's document is looked up and its contextWindow and contextDocument properties are used as the context to push. This means that iframes can be given an ID and code can be executed in the scope of the iframe's document in subsequent calls easily.\n\n[TABLE]\n\n### `queryToObject``(str)`\n\nDefined by [dojo/io-query](io-query)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n\"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n```\n\nresults in this object structure:\n\n``` javascript\n{\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n```\n\nNote that spaces and other urlencoded entities are correctly handled.\n\n### `rawXhrPost``(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP POST request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `rawXhrPut``(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `ready``(priority,context,callback)`\n\nDefined by [dojo/ready](ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n```\n\n### Example 3\n\nUsing context\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n```\n\n### `registerModulePath``(moduleName,prefix)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nMaps a module name to a path\n\nAn unregistered module is given the default path of ../\\[module\\], relative to Dojo root. For example, module acme is mapped to ../acme. If you want to use a different module name, use dojo.registerModulePath.\n\n|            |        |             |\n|------------|--------|-------------|\n| Parameter  | Type   | Description |\n| moduleName | String |             |\n| prefix     | String |             |\n\n## Examples\n\n### Example 1\n\nIf your dojo.js is located at this location in the web root:\n\n``` javascript\n/myapp/js/dojo/dojo/dojo.js\n```\n\nand your modules are located at:\n\n``` javascript\n/myapp/js/foo/bar.js\n/myapp/js/foo/baz.js\n/myapp/js/foo/thud/xyzzy.js\n```\n\nYour application can tell Dojo to locate the \"foo\" namespace by calling:\n\n``` javascript\ndojo.registerModulePath(\"foo\", \"../../foo\");\n```\n\nAt which point you can then use dojo.require() to load the\n\nmodules (assuming they provide() the same things which are required). The full code might be:\n\n``` markup\n<script type=\"text/javascript\"\n    src=\"/myapp/js/dojo/dojo/dojo.js\"></script>\n<script type=\"text/javascript\">\n    dojo.registerModulePath(\"foo\", \"../../foo\");\n    dojo.require(\"foo.bar\");\n    dojo.require(\"foo.baz\");\n    dojo.require(\"foo.thud.xyzzy\");\n</script>\n```\n\n### `removeAttr``(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nRemoves an attribute from an HTML element.\n\n|           |                   |                                                             |\n|-----------|-------------------|-------------------------------------------------------------|\n| Parameter | Type              | Description                                                 |\n| node      | DOMNode \\| String | id or reference to the element to remove the attribute from |\n| name      | String            | the name of the attribute to remove                         |\n\n### `removeClass``(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nRemoves the specified classes from node. No `contains()` check is required.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nRemove a class from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass\");\n});\n```\n\n### Example 2\n\nRemove two classes from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass secondClass\");\n});\n```\n\n### Example 3\n\nRemove two classes from some node (using array):\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n```\n\n### Example 4\n\nRemove all classes from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\");\n});\n```\n\n### Example 5\n\nAvailable in `dojo/NodeList` for multiple removal\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\"ul > li\").removeClass(\"foo\");\n});\n```\n\n### `replaceClass``(node,addClassStr,removeClassStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReplaces one or more classes on a node if not present. Operates more quickly than calling dojo.removeClass and dojo.addClass\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"add1 add2\", \"remove1 remove2\");\n});\n```\n\n### Example 2\n\nReplace all classes with addMe\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"addMe\");\n});\n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\".findMe\").replaceClass(\"addMe\", \"removeMe\");\n});\n```\n\n### `require``(moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nloads a Javascript module from the appropriate URI\n\nModules are loaded via dojo.require by using one of two loaders: the normal loader and the xdomain loader. The xdomain loader is used when dojo was built with a custom build that specified loader=xdomain and the module lives on a modulePath that is a whole URL, with protocol and a domain. The versions of Dojo that are on the Google and AOL CDNs use the xdomain loader.\n\nIf the module is loaded via the xdomain loader, it is an asynchronous load, since the module is added via a dynamically created script tag. This means that dojo.require() can return before the module has loaded. However, this should only happen in the case where you do dojo.require calls in the top-level HTML page, or if you purposely avoid the loader checking for dojo.require dependencies in your module by using a syntax like dojo\\[\"require\"\\] to load the module.\n\nSometimes it is useful to not have the loader detect the dojo.require calls in the module so that you can dynamically load the modules as a result of an action on the page, instead of right at module load time.\n\nAlso, for script blocks in an HTML page, the loader does not pre-process them, so it does not know to download the modules before the dojo.require calls occur.\n\nSo, in those two cases, when you want on-the-fly module loading or for script blocks in the HTML page, special care must be taken if the dojo.required code is loaded asynchronously. To make sure you can execute code that depends on the dojo.required modules, be sure to add the code that depends on the modules in a dojo.addOnLoad() callback. dojo.addOnLoad waits for all outstanding modules to finish loading before executing.\n\nThis type of syntax works with both xdomain and normal loaders, so it is good practice to always use this idiom for on-the-fly code loading and in HTML script blocks. If at some point you change loaders and where the code is loaded from, it will all still work.\n\nMore on how dojo.require `dojo.require(\"A.B\")` first checks to see if symbol A.B is defined. If it is, it is simply returned (nothing to do).\n\nIf it is not defined, it will look for `A/B.js` in the script root directory.\n\n`dojo.require` throws an exception if it cannot find a file to load, or if the symbol `A.B` is not defined after loading.\n\nIt returns the object `A.B`, but note the caveats above about on-the-fly loading and HTML script blocks when the xdomain loader is loading a module.\n\n`dojo.require()` does nothing about importing symbols into the current namespace. It is presumed that the caller will take care of that.\n\n[TABLE]\n\n**Returns:** any\n\nthe required namespace object\n\n## Examples\n\n### Example 1\n\nTo use dojo.require in conjunction with dojo.ready:\n\n``` javascript\ndojo.require(\"foo\");\ndojo.require(\"bar\");\ndojo.addOnLoad(function(){\n    //you can now safely do something with foo and bar\n});\n```\n\n### Example 2\n\nFor example, to import all symbols into a local block, you might write:\n\n``` javascript\nwith (dojo.require(\"A.B\")) {\n    ...\n}\n```\n\nAnd to import just the leaf symbol to a local variable:\n\n``` javascript\nvar B = dojo.require(\"A.B\");\n...\n```\n\n### `requireAfterIf``(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n```\n\n### `requireIf``(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n```\n\n### `requireLocalization``(moduleName,bundleName,locale)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\n[TABLE]\n\n### `safeMixin``(target,source)`\n\nDefined by [dojo/\\_base/declare](_base/declare)\n\nMix in properties skipping a constructor and decorating functions like it is done by declare().\n\nThis function is used to mix in properties like lang.mixin does, but it skips a constructor property and decorates functions like declare() does.\n\nIt is meant to be used with classes and objects produced with declare. Functions mixed in with dojo.safeMixin can use this.inherited() like normal methods.\n\nThis function is used to implement extend() method of a constructor produced with declare().\n\n|           |        |                                         |\n|-----------|--------|-----------------------------------------|\n| Parameter | Type   | Description                             |\n| target    | Object | Target object to accept new properties. |\n| source    | Object | Source object for new properties.       |\n\n**Returns:** Object\n\nTarget object to accept new properties.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar A = declare(null, {\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"B.m1\");\n    }\n});\nB.extend({\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\ndojo.safeMixin(x, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"X.m1\");\n    },\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"X.m2\");\n    }\n});\nx.m2();\n// prints:\n// A.m1\n// B.m1\n// X.m1\n```\n\n### `setAttr``(node,name,value)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nSets an attribute on an HTML element.\n\nHandles normalized setting of attributes on DOM Nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// use attr() to set the tab index\nrequire([\"dojo/dom-attr\"], function(domAttr){\n    domAttr.set(\"nodeId\", \"tabIndex\", 3);\n});\n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\nrequire([\"dojo/dom-attr\"],\nfunction(domAttr){\n    domAttr.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\"\n    }\n});\n```\n\n### `setContentSize``(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nSets the size of the node's contents, irrespective of margins, padding, or borders.\n\n[TABLE]\n\n### `setContext``(globalObject,globalDocument)`\n\nDefined by [dojo/\\_base/window](_base/window)\n\nchanges the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.\n\n|                |                 |             |\n|----------------|-----------------|-------------|\n| Parameter      | Type            | Description |\n| globalObject   | Object          |             |\n| globalDocument | DocumentElement |             |\n\n### `setMarginBox``(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nsets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to setBox that handles box-model vagaries for you.\n\n[TABLE]\n\n### `setProp``(node,name,value)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nSets a property on an HTML element.\n\nHandles normalized setting of properties on DOM nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// use prop() to set the tab index\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"nodeId\", \"tabIndex\", 3);\n});\n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\",\n    });\n});\n```\n\n### `setSelectable``(node,selectable)`\n\nDefined by [dojo/dom](dom)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| node       | undefined |             |\n| selectable | undefined |             |\n\n### `setStyle``(node,name,value)`\n\nDefined by [dojo/dom-style](dom-style)\n\nSets styles on a node.\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\nIf passed, sets value on the node for style, handling cross-browser concerns. When setting a pixel value, be sure to include \"px\" in the value. For instance, top: \"200px\". Otherwise, in some cases, some browsers will not apply the style.\n\n## Examples\n\n### Example 1\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\nrequire([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", \"opacity\", 0.5); // == 0.5\n});\n```\n\n### Example 2\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\nrequire([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", {\n        \"opacity\": 0.5,\n        \"border\": \"3px solid black\",\n        \"height\": \"300px\"\n    });\n});\n```\n\n### Example 3\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.set(\"thinger\",{\n        fontSize:\"14pt\",\n        letterSpacing:\"1.2em\"\n    });\n});\n```\n\n### Example 4\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo/dom-style.get() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/query\", \"dojo/NodeList-dom\"],\nfunction(domStyle, query){\n    query(\".someClassName\").style(\"visibility\",\"hidden\");\n    // or\n    query(\"#baz > div\").style({\n        opacity:0.75,\n        fontSize:\"13pt\"\n    });\n});\n```\n\n### `some``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nDetermines whether or not any item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n// is true\narray.some([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### Example 2\n\n``` javascript\n// is false\narray.some([1, 2, 3, 4], function(item){ return item<1; });\n```\n\n### `Stateful``()`\n\nDefined by [dojo/Stateful](stateful)\n\n### `stopEvent``(evt)`\n\nDefined by [dojo/\\_base/event](_base/event)\n\nprevents propagation and clobbers the default action of the passed event\n\n|           |       |                                                           |\n|-----------|-------|-----------------------------------------------------------|\n| Parameter | Type  | Description                                               |\n| evt       | Event | The event object. If omitted, window.event is used on IE. |\n\n### `style``(node,name,value)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nAccesses styles on a node. If 2 arguments are passed, acts as a getter. If 3 arguments are passed, acts as a setter.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use `dojo.marginBox()`, `dojo.contentBox()` or `dojo.position()`.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, return the computed style of the node if passing in an ID or node, or return the normalized, computed value for the property when passing in a node and a style property\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\ndojo.style(\"thinger\");\n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\ndojo.style(\"thinger\", \"opacity\"); // 1 by default\n```\n\n### Example 3\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\ndojo.style(\"thinger\", \"opacity\", 0.5); // == 0.5\n```\n\n### Example 4\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\ndojo.style(\"thinger\", {\n    \"opacity\": 0.5,\n    \"border\": \"3px solid black\",\n    \"height\": \"300px\"\n});\n```\n\n### Example 5\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\ndojo.style(\"thinger\",{\n    fontSize:\"14pt\",\n    letterSpacing:\"1.2em\"\n});\n```\n\n### Example 6\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo.style() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\ndojo.query(\".someClassName\").style(\"visibility\",\"hidden\");\n// or\ndojo.query(\"#baz > div\").style({\n    opacity:0.75,\n    fontSize:\"13pt\"\n});\n```\n\n### `toDom``(frag,doc)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\ninstantiates an HTML fragment returning the corresponding DOM.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nDocument fragment, unless it's a single node in which case it returns the node itself\n\n## Examples\n\n### Example 1\n\nCreate a table row:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var tr = domConstruct.toDom(\"<tr><td>First!</td></tr>\");\n});\n```\n\n### `toggleClass``(node,classStr,condition)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove. Returns the condition that was specified directly or indirectly.\n\n[TABLE]\n\n**Returns:** Boolean\n\nIf passed, true means to add the class, false means to remove. Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\");\n});\n```\n\n### Example 2\n\nForcefully add a class\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\", true);\n});\n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\".toggleMe\").toggleClass(\"toggleMe\");\n});\n```\n\n### `toJson``(it,prettyPrint)`\n\nDefined by [dojo/\\_base/json](_base/json)\n\nReturns a [JSON](http://json.org) serialization of an object.\n\nReturns a [JSON](http://json.org) serialization of an object. Note that this doesn't check for infinite recursion, so don't do that! It is recommend that you use [dojo/json](json)'s stringify function for an lighter and faster implementation that matches the native JSON API and uses the native JSON serializer when available.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA JSON string serialization of the passed-in object.\n\n## Examples\n\n### Example 1\n\nsimple serialization of a trivial object\n\n``` javascript\nvar jsonStr = dojo.toJson({ howdy: \"stranger!\", isStrange: true });\ndoh.is('{\"howdy\":\"stranger!\",\"isStrange\":true}', jsonStr);\n```\n\n### Example 2\n\na custom serializer for an objects of a particular class:\n\n``` javascript\ndojo.declare(\"Furby\", null, {\n    furbies: \"are strange\",\n    furbyCount: 10,\n    __json__: function(){\n    },\n});\n```\n\n### `toPixelValue``(node,value)`\n\nDefined by [dojo/dom-style](dom-style)\n\nconverts style value to pixels on IE or return a numeric value.\n\n|           |         |             |\n|-----------|---------|-------------|\n| Parameter | Type    | Description |\n| node      | DOMNode |             |\n| value     | String  |             |\n\n**Returns:** Number\n\n### `unsubscribe``(handle)`\n\nDefined by [dojo/\\_base/connect](_base/connect)\n\nRemove a topic listener.\n\n|           |        |                                               |\n|-----------|--------|-----------------------------------------------|\n| Parameter | Type   | Description                                   |\n| handle    | Handle | The handle returned from a call to subscribe. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar alerter = dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\n...\ndojo.unsubscribe(alerter);\n```\n\n### `when``(valueOrPromise,callback,errback,progback)`\n\nDefined by [dojo/when](when)\n\nTransparently applies callbacks to values and/or promises.\n\nAccepts promises but also transparently handles non-promises. If no callbacks are provided returns a promise, regardless of the initial value. Foreign promises are converted.\n\nIf callbacks are provided and the initial value is not a promise, the callback is executed immediately with no error handling. Returns a promise if the initial value is a promise, or the result of the callback otherwise.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise) \\| summary: \\| name:\n\nPromise, or if a callback is provided, the result of the callback.\n\n### `windowUnloaded``()`\n\nDefined by [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\nsignal fired by impending window destruction. You may use dojo.addOnWIndowUnload() or dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnWindowUnload for more info.\n\n### `withDoc``(documentObject,callback,thisObject,cbArguments)`\n\nDefined by [dojo/\\_base/window](_base/window)\n\nInvoke callback with documentObject as dojo/\\_base/window::doc.\n\nInvoke callback with documentObject as [dojo/\\_base/window](_base/window)::doc. If provided, callback will be executed in the context of object thisObject When callback() returns or throws an error, the [dojo/\\_base/window](_base/window)::doc will be restored to its previous state.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `withGlobal``(globalObject,callback,thisObject,cbArguments)`\n\nDefined by [dojo/\\_base/window](_base/window)\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc.\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject When callback() returns or throws an error, the dojo.global and dojo.doc will be restored to its previous state.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhr``(method,args)`\n\nDefined by [dojox/rpc/Client](http://dojotoolkit.org/api/1.10/dojox/rpc/Client)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| method    | undefined |             |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n### `xhrDelete``(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP DELETE request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhrGet``(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP GET request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhrPost``(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP POST request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhrPut``(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.html](http://dojotoolkit.org/api/1.10/dojo/main.html)"
- name: main#AdapterRegistry()
  id: dojo/main#1_10dojo_main_AdapterRegistry
  summary: A registry to make contextual calling/searching easier
  belongs_to: main
  description: "### `AdapterRegistry` `(returnWrappers)`\n\nDefined by [dojo/AdapterRegistry](adapterregistry)\n\nA registry to make contextual calling/searching easier.\n\nObjects of this class keep list of arrays in the form \\[name, check, wrap, directReturn\\] that are used to determine what the contextual result of a set of checked arguments is. All check/wrap functions in this registry should be of the same arity.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // create a new registry\nrequire([\"dojo/AdapterRegistry\"],\nfunction(AdapterRegistry){\n    var reg = new AdapterRegistry();\n    reg.register(\"handleString\",\n        function(str){\n            return typeof val == \"string\"\n        },\n        function(str){\n            // do something with the string here\n        }\n    );\n    reg.register(\"handleArr\",\n        dojo.isArray,\n        function(arr){\n            // do something with the array here\n        }\n    );\n\n    // now we can pass reg.match() *either* an array or a string and\n    // the value we pass will get handled by the right function\n    reg.match(\"someValue\"); // will call the first function\n    reg.match([\"someValue\"]); // will call the second\n});\n    \n```"
- name: main#addClass()
  id: dojo/main#1_10dojo_main_addClass
  summary: Adds the specified classes to the end of the class list on the passed node
  belongs_to: main
  description: "### `addClass` `(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds the specified classes to the end of the class list on the passed node. Will not re-apply duplicate classes.\n\n|           |                   |                                                                                                 |\n|-----------|-------------------|-------------------------------------------------------------------------------------------------|\n| Parameter | Type              | Description                                                                                     |\n| node      | String \\| DOMNode | String ID or DomNode reference to add a class string too                                        |\n| classStr  | String \\| Array   | A String class name to add, or several space-separated class names, or an array of class names. |\n\n## Examples\n\n### Example 1\n\nAdd a class to some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"anewClass\");\n});\n    \n```\n\n### Example 2\n\nAdd two classes at once:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"firstClass secondClass\");\n});\n    \n```\n\n### Example 3\n\nAdd two classes at once (using array):\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n    \n```\n\n### Example 4\n\nAvailable in `dojo/NodeList` for multiple additions\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\"ul > li\").addClass(\"firstLevel\");\n});\n    \n```\n\n### `addOnLoad` `(priority,context,callback)`\n\nDefined by [dojo/ready](ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n    \n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n    \n```\n\n### Example 3\n\nUsing context\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n    \n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n    \n```"
- name: main#addOnUnload()
  id: dojo/main#1_10dojo_main_addOnUnload
  summary: Registers a function to be triggered when the page unloads
  belongs_to: main
  description: "### `addOnUnload` `(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](_base/unload)\n\nRegisters a function to be triggered when the page unloads. Deprecated, use on(window, \"beforeunload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnUnload is called Dojo will register a page listener to trigger your unload handler with.\n\nIn a browser environment, the functions will be triggered during the window.onbeforeunload event. Be careful of doing too much work in an unload handler. onbeforeunload can be triggered if a link to download a file is clicked, or if the link is a javascript: link. In these cases, the onbeforeunload event fires, but the document is not actually destroyed. So be careful about doing destructive operations in a dojo.addOnUnload callback.\n\nFurther note that calling dojo.addOnUnload will prevent browsers from using a \"fast back\" cache to make page loading via back button instantaneous.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnUnload(afunc);\n    unload.addOnUnload(foo, \"bar\");\n    unload.addOnUnload(foo, function(){console.log(\"\", this.data);});\n});\n    \n```"
- name: main#addOnWindowUnload()
  id: dojo/main#1_10dojo_main_addOnWindowUnload
  summary: registers a function to be triggered when window.onunload fires
  belongs_to: main
  description: "### `addOnWindowUnload` `(obj,functionName)`\n\nDefined by [dojo/\\_base/configFirefoxExtension](_base/configfirefoxextension)\n\nregisters a function to be triggered when window.onunload fires. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider dojo.addOnUnload() if you need to modify the DOM or do heavy JavaScript work.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.addOnWindowUnload(functionPointer)\ndojo.addOnWindowUnload(object, \"functionName\")\ndojo.addOnWindowUnload(object, function(){ /* ... */});\n    \n```"
- name: main#anim()
  id: dojo/main#1_10dojo_main_anim
  summary: A simpler interface to animateProperty(), also returns an instance of Animation but begins the animation immediately, unlike nearly every other Dojo animation API
  belongs_to: main
  description: "### `anim` `(node,properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/\\_base/fx](_base/fx)\n\nA simpler interface to `animateProperty()`, also returns an instance of `Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.\n\nSimpler (but somewhat less powerful) version of `animateProperty`. It uses defaults for many basic properties and allows for positional parameters to be used in place of the packed \"property bag\" which is used for other Dojo animation methods.\n\nThe `Animation` object returned will be already playing, so calling play() on it again is (usually) a no-op.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nFade out a node\n\n``` javascript\n      basefx.anim(\"id\", { opacity: 0 });\n    \n```\n\n### Example 2\n\nFade out a node over a full second\n\n``` javascript\n      basefx.anim(\"id\", { opacity: 0 }, 1000);\n    \n```"
- name: main#animateProperty()
  id: dojo/main#1_10dojo_main_animateProperty
  summary: Foundation of most dojo/_base/fx animations
  belongs_to: main
  description: "### `animateProperty` `(args)`\n\nDefined by [dojo/\\_base/fx](_base/fx)\n\nReturns an animation that will transition the properties of node defined in `args` depending how they are defined in `args.properties`\n\nFoundation of most [dojo/\\_base/fx](_base/fx) animations. It takes an object of \"properties\" corresponding to style properties, and animates them in parallel over a set duration.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nA simple animation that changes the width of the specified node.\n\n``` javascript\n      basefx.animateProperty({\n    node: \"nodeId\",\n    properties: { width: 400 },\n}).play();\n    \n```\n\nDojo figures out the start value for the width and converts the\n\ninteger specified for the width to the more expressive but verbose form `{ width: { end: '400', units: 'px' } }` which you can also specify directly. Defaults to 'px' if omitted.\n\n### Example 2\n\nAnimate width, height, and padding over 2 seconds... the pedantic way:\n\n``` javascript\n      basefx.animateProperty({ node: node, duration:2000,\n    properties: {\n        width: { start: '200', end: '400', units:\"px\" },\n        height: { start:'200', end: '400', units:\"px\" },\n        paddingTop: { start:'5', end:'50', units:\"px\" }\n    }\n}).play();\n    \n```\n\nNote 'paddingTop' is used over 'padding-top'. Multi-name CSS properties\n\nare written using \"mixed case\", as the hyphen is illegal as an object key.\n\n### Example 3\n\nPlug in a different easing function and register a callback for when the animation ends. Easing functions accept values between zero and one and return a value on that basis. In this case, an exponential-in curve.\n\n``` javascript\n      basefx.animateProperty({\n    node: \"nodeId\",\n    // dojo figures out the start value\n    properties: { width: { end: 400 } },\n    easing: function(n){\n        return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));\n    },\n    onEnd: function(node){\n        // called when the animation finishes. The animation\n        // target is passed to this function\n    }\n}).play(500); // delay playing half a second\n    \n```\n\n### Example 4\n\nLike all `Animation`s, animateProperty returns a handle to the Animation instance, which fires the events common to Dojo FX. Use `aspect.after` to access these events outside of the Animation definition:\n\n``` javascript\n      var anim = basefx.animateProperty({\n    node:\"someId\",\n    properties:{\n        width:400, height:500\n    }\n});\naspect.after(anim, \"onEnd\", function(){\n    console.log(\"animation ended\");\n}, true);\n// play the animation now:\nanim.play();\n    \n```\n\n### Example 5\n\nEach property can be a function whose return value is substituted along. Additionally, each measurement (eg: start, end) can be a function. The node reference is passed directly to callbacks.\n\n``` javascript\n      basefx.animateProperty({\n    node:\"mine\",\n    properties:{\n        height:function(node){\n            // shrink this node by 50%\n            return domGeom.position(node).h / 2\n        },\n        width:{\n            start:function(node){ return 100; },\n            end:function(node){ return 200; }\n        }\n    }\n}).play();\n    \n```"
- name: main#Animation()
  id: dojo/main#1_10dojo_main_Animation
  summary: A generic animation class that fires callbacks into its handlers object at various states
  belongs_to: main
  description: |-
    ### `Animation` `(args)`

    Defined by [dojo/\_base/fx](_base/fx)

    A generic animation class that fires callbacks into its handlers object at various states.

    A generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of `Animation` when one is returned.

    |           |        |                                                                               |
    |-----------|--------|-------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                   |
    | args      | Object | The 'magic argument', mixing all the properties into this animation instance. |
- name: main#attr()
  id: dojo/main#1_10dojo_main_attr
  summary: Gets or sets an attribute on an HTML element
  belongs_to: main
  description: "### `attr` `(node,name,value)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nGets or sets an attribute on an HTML element.\n\nHandles normalized getting and setting of attributes on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, the value of the requested attribute or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" attribute on a node\ndojo.attr(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.attr(\"nodeId\", \"foo\");\n    \n```\n\n### Example 2\n\n``` javascript\n      // use attr() to set the tab index\ndojo.attr(\"nodeId\", \"tabIndex\", 3);\n    \n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      dojo.attr(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n    \n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\n      dojo.attr(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n    \n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\n      var obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.attr(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n    \n```\n\n### `blendColors` `(start,end,weight,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nBlend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated Color object for the result\n\n[TABLE]\n\n**Returns:** undefined\n\n### `body` `(doc)`\n\nDefined by [dojo/\\_base/window](_base/window)\n\nReturn the body element of the specified document or of dojo/\\_base/window::doc.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      win.body().appendChild(dojo.doc.createElement('div'));\n    \n```\n\n### `byId` `(id,doc)`\n\nDefined by [dojo/dom](dom)\n\nReturns DOM node with matching `id` attribute or falsy value (ex: null or undefined) if not found. If `id` is a DomNode, this function is a no-op.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nLook up a node by ID:\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"foo\");\n});\n    \n```\n\n### Example 2\n\nCheck if a node exists, and use it.\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"bar\");\n    if(n){ doStuff() ... }\n});\n    \n```\n\n### Example 3\n\nAllow string or DomNode references to be passed to a custom function:\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var foo = function(nodeOrId){\n        nodeOrId = dom.byId(nodeOrId);\n        // ... more stuff\n    }\n});\n    \n```"
- name: main#back
  id: dojo/main#1_10dojo_main_back
  summary: null
  belongs_to: main
  description: |-
    ### back

    Defined by: [dojo/back](back)

    Browser history management resources

    ### baseUrl

    Defined by: [dojo/\_base/configSpidermonkey](_base/configspidermonkey)
- name: main#behavior
  id: dojo/main#1_10dojo_main_behavior
  summary: null
  belongs_to: main
  description: |-
    ### behavior

    Defined by: [dojo/behavior](behavior)
- name: main#cache()
  id: dojo/main#1_10dojo_main_cache
  summary: A getter and setter for storing the string content associated with the module and url arguments
  belongs_to: main
  description: "### `cache` `(module,url,value)`\n\nDefined by [dojo/text](text)\n\nA getter and setter for storing the string content associated with the module and url arguments.\n\nIf module is a string that contains slashes, then it is interpretted as a fully resolved path (typically a result returned by require.toUrl), and url should not be provided. This is the preferred signature. If module is a string that does not contain slashes, then url must also be provided and module and url are used to call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated. If value is specified, the cache value for the moduleUrl will be set to that value. Otherwise, dojo.cache will fetch the moduleUrl and store it in its internal cache and return that cached value for the URL. To clear a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the the URL contents, only modules on the same domain of the page can use this capability. The build system can inline the cache values though, to allow for xdomain hosting.\n\n[TABLE]\n\n**Returns:** undefined \\| null\n\n## Examples\n\n### Example 1\n\nTo ask dojo.cache to fetch content and store it in the cache (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n      //If template.html contains \"<h1>Hello</h1>\" that will be\n//the value for the text variable.\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\");\n    \n```\n\n### Example 2\n\nTo ask dojo.cache to fetch content and store it in the cache, and sanitize the input (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n      //If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\", {sanitize: true});\n    \n```\n\n### Example 3\n\nSame example as previous, but demonstrates how an object can be passed in as the first argument, then the value argument can then be the second argument.\n\n``` javascript\n      //If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](new dojo._Url(\"my/module/template.html\"), {sanitize: true});\n    \n```\n\n### `clearCache` `()`\n\nDefined by [dojo/\\_base/array](_base/array)\n\n### `Color` `(color)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and creates a new Color instance to work from.\n\n|           |                           |             |\n|-----------|---------------------------|-------------|\n| Parameter | Type                      | Description |\n| color     | Array \\| String \\| Object |             |\n\n## Examples\n\n### Example 1\n\nWork with a Color instance:\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var c = new Color();\n    c.setColor([0,0,0]); // black\n    var hex = c.toHex(); // #000000\n});\n    \n```\n\n### Example 2\n\nWork with a node's color:\n\n``` javascript\n        require([\"dojo/_base/color\", \"dojo/dom-style\"], function(Color, domStyle){\n      var color = domStyle(\"someNode\", \"backgroundColor\");\n      var n = new Color(color);\n      // adjust the color some\n      n.r *= .5;\n      console.log(n.toString()); // rgb(128, 255, 255);\n  });\n    \n```\n\n### `colorFromArray` `(a,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nBuilds a `Color` from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha\n});\n    \n```\n\n### `colorFromHex` `(color,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nConverts a hex string with a '#' prefix to a color object. Supports 12-bit \\#rgb shorthand. Optionally accepts a `Color` object to update with the parsed value.\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var thing = new Color().fromHex(\"#ededed\"); // grey, longhand\n    var thing2 = new Color().fromHex(\"#000\"); // black, shorthand\n});\n    \n```"
- name: main#cldr
  id: dojo/main#1_10dojo_main_cldr
  summary: null
  belongs_to: main
  description: |-
    ### cldr

    Defined by: [dojo/cldr/monetary](cldr/monetary)
- name: main#colorFromRgb()
  id: dojo/main#1_10dojo_main_colorFromRgb
  summary: 'this function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values'
  belongs_to: main
  description: "### `colorFromRgb` `(color,obj)`\n\nDefined by [dojo/colors](colors)\n\nget rgb(a) array from css-style color declarations\n\nthis function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values.\n\n[TABLE]\n\n**Returns:** null\n\n### `colorFromString` `(str,obj)`\n\nDefined by [dojo/\\_base/Color](_base/color)\n\nParses `str` for a color value. Accepts hex, rgb, and rgba style color values.\n\nAcceptable input values for str may include arrays of any form accepted by dojo.colorFromArray, hex strings such as \"#aaaaaa\", or rgb or rgba strings such as \"rgb(133, 200, 16)\" or \"rgba(10, 10, 10, 50)\"\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n### `connect` `(obj,event,context,method,dontFix)`\n\nDefined by [dojo/\\_base/connect](_base/connect)\n\n`dojo.connect` is a deprecated event handling and delegation method in Dojo. It allows one function to \"listen in\" on the execution of any other, triggering the second whenever the first is called. Many listeners may be attached to a function, and source functions may be either regular function calls or DOM events.\n\nConnects listeners to actions, so that after event fires, a listener is called with the same arguments passed to the original function.\n\nSince `dojo.connect` allows the source of events to be either a \"regular\" JavaScript function or a DOM event, it provides a uniform interface for listening to all the types of events that an application is likely to deal with though a single, unified interface. DOM programmers may want to think of it as \"addEventListener for everything and anything\".\n\nWhen setting up a connection, the `event` parameter must be a string that is the name of the method/event to be listened for. If `obj` is null, `kernel.global` is assumed, meaning that connections to global methods are supported but also that you may inadvertently connect to a global by passing an incorrect object name or invalid reference.\n\n`dojo.connect` generally is forgiving. If you pass the name of a function or method that does not yet exist on `obj`, connect will not fail, but will instead set up a stub method. Similarly, null arguments may simply be omitted such that fewer than 4 arguments may be required to set up a connection See the examples for details.\n\nThe return value is a handle that is needed to remove this connection with `dojo.disconnect`.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nWhen obj.onchange(), do ui.update():\n\n``` javascript\n      dojo.connect(obj, \"onchange\", ui, \"update\");\ndojo.connect(obj, \"onchange\", ui, ui.update); // same\n    \n```\n\n### Example 2\n\nUsing return value for disconnect:\n\n``` javascript\n      var link = dojo.connect(obj, \"onchange\", ui, \"update\");\n...\ndojo.disconnect(link);\n    \n```\n\n### Example 3\n\nWhen onglobalevent executes, watcher.handler is invoked:\n\n``` javascript\n      dojo.connect(null, \"onglobalevent\", watcher, \"handler\");\n    \n```\n\n### Example 4\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked:\n\n``` javascript\n      dojo.connect(ob, \"onCustomEvent\", null, \"customEventHandler\");\ndojo.connect(ob, \"onCustomEvent\", \"customEventHandler\"); // same\n    \n```\n\n### Example 5\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked with the same scope (this):\n\n``` javascript\n      dojo.connect(ob, \"onCustomEvent\", null, customEventHandler);\ndojo.connect(ob, \"onCustomEvent\", customEventHandler); // same\n    \n```\n\n### Example 6\n\nWhen globalEvent executes, globalHandler is invoked with the same scope (this):\n\n``` javascript\n      dojo.connect(null, \"globalEvent\", null, globalHandler);\ndojo.connect(\"globalEvent\", globalHandler); // same\n    \n```"
- name: main#colors
  id: dojo/main#1_10dojo_main_colors
  summary: This module defines the user configuration during bootstrap
  belongs_to: main
  description: |-
    ### colors

    Defined by: [dojo/colors](colors)

    ### config

    Defined by: [dojo/\_base/kernel](_base/kernel)

    This module defines the user configuration during bootstrap.
- name: main#connectPublisher
  id: dojo/main#1_10dojo_main_connectPublisher
  summary: null
  belongs_to: main
  description: |-
    ### connectPublisher

    Defined by: [dojo/robotx](robotx)
- name: main#contentBox()
  id: dojo/main#1_10dojo_main_contentBox
  summary: Getter/setter for the content-box of node
  belongs_to: main
  description: |-
    ### `contentBox` `(node,box)`

    Defined by [dojo/\_base/html](_base/html)

    Getter/setter for the content-box of node.

    Returns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a content width of 300px and a content-height of 150px. Note that the content box may have a much larger border or margin box, depending on the box model currently in use and CSS values set/inherited for node. While the getter will return top and left values, the setter only accepts setting the width and height.

    [TABLE]

    **Returns:** undefined
- name: main#contentHandlers
  id: dojo/main#1_10dojo_main_contentHandlers
  summary: A map of available XHR transport handle types
  belongs_to: main
  description: |-
    ### contentHandlers

    Defined by: [dojo/\_base/xhr](_base/xhr)

    A map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.
- name: main#cookie()
  id: dojo/main#1_10dojo_main_cookie
  summary: Get or set a cookie
  belongs_to: main
  description: "### `cookie` `(name,value,props)`\n\nDefined by [dojo/cookie](cookie)\n\nGet or set a cookie.\n\nIf one argument is passed, returns the value of the cookie For two or more arguments, acts as a setter.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nset a cookie with the JSON-serialized contents of an object which will expire 5 days from now:\n\n``` javascript\n      require([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    cookie(\"configObj\", json.stringify(config, {expires: 5 }));\n});\n    \n```\n\n### Example 2\n\nde-serialize a cookie back into a JavaScript object:\n\n``` javascript\n      require([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    config = json.parse(cookie(\"configObj\"));\n});\n    \n```\n\n### Example 3\n\ndelete a cookie:\n\n``` javascript\n      require([\"dojo/cookie\"], function(cookie){\n    cookie(\"configObj\", null, {expires: -1});\n});\n    \n```"
- name: main#coords()
  id: dojo/main#1_10dojo_main_coords
  summary: 'Deprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t'
  belongs_to: main
  description: "### `coords` `(node,includeScroll)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nDeprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t.\n\nReturns an object that measures margin-box (w)idth/(h)eight and absolute position x/y of the border-box. Also returned is computed (l)eft and (t)op values in pixels from the node's offsetParent as returned from marginBox(). Return value will be in the form:\n\n``` javascript\n      { l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }\n    \n```\n\nDoes not act as a setter. If includeScroll is passed, the x and\n\ny params are affected as one would expect in dojo.position().\n\n[TABLE]\n\n**Returns:** undefined"
- name: main#create()
  id: dojo/main#1_10dojo_main_create
  summary: Create an element, allowing for optional attribute decoration and placement
  belongs_to: main
  description: "### `create` `(tag,attrs,refNode,pos)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nCreate an element, allowing for optional attribute decoration and placement.\n\nA DOM Element creation function. A shorthand method for creating a node or a fragment, and allowing for a convenient optional attribute setting step, as well as an optional DOM placement reference.\n\nAttributes are set by passing the optional object through `dojo.setAttr`. See `dojo.setAttr` for noted caveats and nuances, and API if applicable.\n\nPlacement is done via `dojo.place`, assuming the new node to be the action node, passing along the optional reference node and position.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a DIV:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\");\n});\n    \n```\n\n### Example 2\n\nCreate a DIV with content:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", { innerHTML:\"<p>hi</p>\" });\n});\n    \n```\n\n### Example 3\n\nPlace a new DIV in the BODY, with no attributes set\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", null, dojo.body());\n});\n    \n```\n\n### Example 4\n\nCreate an UL, and populate it with LI's. Place the list as the first-child of a node with id=\"someId\":\n\n``` javascript\n      require([\"dojo/dom-construct\", \"dojo/_base/array\"],\nfunction(domConstruct, arrayUtil){\n    var ul = domConstruct.create(\"ul\", null, \"someId\", \"first\");\n    var items = [\"one\", \"two\", \"three\", \"four\"];\n    arrayUtil.forEach(items, function(data){\n        domConstruct.create(\"li\", { innerHTML: data }, ul);\n    });\n});\n    \n```\n\n### Example 5\n\nCreate an anchor, with an href. Place in BODY:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.create(\"a\", { href:\"foo.html\", title:\"Goto FOO!\" }, dojo.body());\n});\n    \n```\n\n### `declare` `(className,superclass,props)`\n\nDefined by [dojo/\\_base/declare](_base/declare)\n\nCreate a feature-rich constructor from compact notation.\n\nCreate a constructor using a compact notation for inheritance and prototype extension.\n\nMixin ancestors provide a type of multiple inheritance. Prototypes of mixin ancestors are copied to the new class: changes to mixin prototypes will not affect classes to which they have been mixed in.\n\nAncestors can be compound classes created by this version of declare(). In complex cases all base classes are going to be linearized according to C3 MRO algorithm (see <http://www.python.org/download/releases/2.3/mro/> for more details).\n\n\"className\" is cached in \"declaredClass\" property of the new class, if it was supplied. The immediate super class will be cached in \"superclass\" property of the new class.\n\nMethods in \"props\" will be copied and modified: \"nom\" property (the declared name of the method) will be added to all copied functions to help identify them for the internal machinery. Be very careful, while reusing methods: if you use the same function under different names, it can produce errors in some cases.\n\nIt is possible to use constructors created \"manually\" (without declare()) as bases. They will be called as usual during the creation of an instance, their methods will be chained, and even called by \"this.inherited()\".\n\nSpecial property \"-chains-\" governs how to chain methods. It is a dictionary, which uses method names as keys, and hint strings as values. If a hint string is \"after\", this method will be called after methods of its base classes. If a hint string is \"before\", this method will be called before methods of its base classes.\n\nIf \"constructor\" is not mentioned in \"-chains-\" property, it will be chained using the legacy mode: using \"after\" chaining, calling preamble() method before each constructor, if available, and calling postscript() after all constructors were executed. If the hint is \"after\", it is chained as a regular method, but postscript() will be called after the chain of constructors. \"constructor\" cannot be chained \"before\", but it allows a special hint string: \"manual\", which means that constructors are not going to be chained in any way, and programmer will call them manually using this.inherited(). In the latter case postscript() will be called after the construction.\n\nAll chaining hints are \"inherited\" from base classes and potentially can be overridden. Be very careful when overriding hints! Make sure that all chained methods can work in a proposed manner of chaining.\n\nOnce a method was chained, it is impossible to unchain it. The only exception is \"constructor\". You don't need to define a method in order to supply a chaining hint.\n\nIf a method is chained, it cannot use this.inherited() because all other methods in the hierarchy will be called automatically.\n\nUsually constructors and initializers of any kind are chained using \"after\" and destructors of any kind are chained as \"before\". Note that chaining assumes that chained methods do not return any value: any returned value will be discarded.\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/declare.\\_\\_DeclareCreatedObject](_base/declare.__declarecreatedobject) \\| undefined\n\nNew constructor function.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      declare(\"my.classes.bar\", my.classes.foo, {\n    // properties to be added to the class prototype\n    someValue: 2,\n    // initialization function\n    constructor: function(){\n        this.myComplicatedObject = new ReallyComplicatedObject();\n    },\n    // other functions\n    someMethod: function(){\n        doStuff();\n    }\n});\n    \n```\n\n### Example 2\n\n``` javascript\n      var MyBase = declare(null, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass1 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass2 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyDiamond = declare([MyClass1, MyClass2], {\n    // constructor, properties, and methods go here\n    // ...\n});\n    \n```\n\n### Example 3\n\n``` javascript\n      var F = function(){ console.log(\"raw constructor\"); };\nF.prototype.method = function(){\n    console.log(\"raw method\");\n};\nvar A = declare(F, {\n    constructor: function(){\n        console.log(\"A.constructor\");\n    },\n    method: function(){\n        console.log(\"before calling F.method...\");\n        this.inherited(arguments);\n        console.log(\"...back in A\");\n    }\n});\nnew A().method();\n// will print:\n// raw constructor\n// A.constructor\n// before calling F.method...\n// raw method\n// ...back in A\n    \n```\n\n### Example 4\n\n``` javascript\n      var A = declare(null, {\n    \"-chains-\": {\n        destroy: \"before\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        console.log(\"B.constructor\");\n    },\n    destroy: function(){\n        console.log(\"B.destroy\");\n    }\n});\nvar C = declare(B, {\n    constructor: function(){\n        console.log(\"C.constructor\");\n    },\n    destroy: function(){\n        console.log(\"C.destroy\");\n    }\n});\nnew C().destroy();\n// prints:\n// B.constructor\n// C.constructor\n// C.destroy\n// B.destroy\n    \n```\n\n### Example 5\n\n``` javascript\n      var A = declare(null, {\n    \"-chains-\": {\n        constructor: \"manual\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        // ...\n        // call the base constructor with new parameters\n        this.inherited(arguments, [1, 2, 3]);\n        // ...\n    }\n});\n    \n```\n\n### Example 6\n\n``` javascript\n      var A = declare(null, {\n    \"-chains-\": {\n        m1: \"before\"\n    },\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    \"-chains-\": {\n        m2: \"after\"\n    },\n    m1: function(){\n        console.log(\"B.m1\");\n    },\n    m2: function(){\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\nx.m1();\n// prints:\n// B.m1\n// A.m1\nx.m2();\n// prints:\n// A.m2\n// B.m2\n    \n```\n\n### `Deferred` `(canceller)`\n\nDefined by [dojo/\\_base/Deferred](_base/deferred)\n\nDeprecated. This module defines the legacy dojo/\\_base/Deferred API. New code should use dojo/Deferred instead.\n\nThe Deferred API is based on the concept of promises that provide a generic interface into the eventual completion of an asynchronous action. The motivation for promises fundamentally is about creating a separation of concerns that allows one to achieve the same type of call patterns and logical data flow in asynchronous code as can be achieved in synchronous code. Promises allows one to be able to call a function purely with arguments needed for execution, without conflating the call with concerns of whether it is sync or async. One shouldn't need to alter a call's arguments if the implementation switches from sync to async (or vice versa). By having async functions return promises, the concerns of making the call are separated from the concerns of asynchronous interaction (which are handled by the promise).\n\nThe Deferred is a type of promise that provides methods for fulfilling the promise with a successful result or an error. The most important method for working with Dojo's promises is the then() method, which follows the CommonJS proposed promise API. An example of using a Dojo promise:\n\n``` javascript\n      var resultingPromise = someAsyncOperation.then(function(result){\n    ... handle result ...\n},\nfunction(error){\n    ... handle error ...\n});\n    \n```\n\nThe .then() call returns a new promise that represents the result of the execution of the callback. The callbacks will never affect the original promises value.\n\nThe Deferred instances also provide the following functions for backwards compatibility:\n\n- addCallback(handler)\n- addErrback(handler)\n- callback(result)\n- errback(result)\n\nCallbacks are allowed to return promises themselves, so you can build complicated sequences of events with ease.\n\nThe creator of the Deferred may specify a canceller. The canceller is a function that will be called if Deferred.cancel is called before the Deferred fires. You can use this to implement clean aborting of an XMLHttpRequest, etc. Note that cancel will fire the deferred with a CancelledError (unless your canceller returns another kind of error), so the errbacks should be prepared to handle that error for cancellable Deferreds.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var deferred = new Deferred();\nsetTimeout(function(){ deferred.callback({success: true}); }, 1000);\nreturn deferred;\n    \n```\n\n### Example 2\n\nDeferred objects are often used when making code asynchronous. It may be easiest to write functions in a synchronous manner and then split code using a deferred to trigger a response to a long-lived operation. For example, instead of register a callback function to denote when a rendering operation completes, the function can simply return a deferred:\n\n``` javascript\n      // callback style:\nfunction renderLotsOfData(data, callback){\n    var success = false\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        success = true;\n    }catch(e){ }\n    if(callback){\n        callback(success);\n    }\n}\n\n\n// using callback style\nrenderLotsOfData(someDataObj, function(success){\n    // handles success or failure\n    if(!success){\n        promptUserToRecover();\n    }\n});\n// NOTE: no way to add another callback here!!\n    \n```\n\n### Example 3\n\nUsing a Deferred doesn't simplify the sending code any, but it provides a standard interface for callers and senders alike, providing both with a simple way to service multiple callbacks for an operation and freeing both sides from worrying about details such as \"did this get called already?\". With Deferreds, new callbacks can be added at any time.\n\n``` javascript\n      // Deferred style:\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        d.callback(true);\n    }catch(e){\n        d.errback(new Error(\"rendering failed\"));\n    }\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n// NOTE: addErrback and addCallback both return the Deferred\n// again, so we could chain adding callbacks or save the\n// deferred for later should we need to be notified again.\n    \n```\n\n### Example 4\n\nIn this example, renderLotsOfData is synchronous and so both versions are pretty artificial. Putting the data display on a timeout helps show why Deferreds rock:\n\n``` javascript\n      // Deferred style and async func\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    setTimeout(function(){\n        try{\n            for(var x in data){\n                renderDataitem(data[x]);\n            }\n            d.callback(true);\n        }catch(e){\n            d.errback(new Error(\"rendering failed\"));\n        }\n    }, 100);\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n    \n```\n\nNote that the caller doesn't have to change his code at all to handle the asynchronous case."
- name: main#currency
  id: dojo/main#1_10dojo_main_currency
  summary: null
  belongs_to: main
  description: |-
    ### currency

    Defined by: [dojo/currency](currency)

    localized formatting and parsing routines for currencies
- name: main#data
  id: dojo/main#1_10dojo_main_data
  summary: null
  belongs_to: main
  description: |-
    ### data

    Defined by: [dojo/data/util/filter](data/util/filter)
- name: main#date
  id: dojo/main#1_10dojo_main_date
  summary: null
  belongs_to: main
  description: |-
    ### date

    Defined by: [dojo/date/stamp](date/stamp)

    ### dijit

    Defined by: [dojo/\_base/kernel](_base/kernel)
- name: main#DeferredList()
  id: dojo/main#1_10dojo_main_DeferredList
  summary: Deprecated, use dojo/promise/all instead
  belongs_to: main
  description: "### `DeferredList` `(list,fireOnOneCallback,fireOnOneErrback,consumeErrors,canceller)`\n\nDefined by [dojo/DeferredList](deferredlist)\n\nDeprecated, use dojo/promise/all instead. Provides event handling for a group of Deferred objects.\n\nDeferredList takes an array of existing deferreds and returns a new deferred of its own this new deferred will typically have its callback fired when all of the deferreds in the given list have fired their own deferreds. The parameters `fireOnOneCallback` and fireOnOneErrback, will fire before all the deferreds as appropriate\n\n[TABLE]\n\n### `deprecated` `(behaviour,extra,removal)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nLog a debug message to indicate that a behavior has been deprecated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.deprecated(\"myApp.getTemp()\", \"use myApp.getLocaleTemp() instead\", \"1.0\");\n    \n```"
- name: main#destroy()
  id: dojo/main#1_10dojo_main_destroy
  summary: Remove a link created by dojo.connect
  belongs_to: main
  description: |-
    ### `destroy` `(node)`

    Defined by [dojo/\_base/html](_base/html)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | node      | undefined |             |

    ### `disconnect` `(handle)`

    Defined by [dojo/\_base/connect](_base/connect)

    Remove a link created by dojo.connect.

    Removes the connection between event and the method referenced by handle.

    |           |        |                                                                        |
    |-----------|--------|------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                            |
    | handle    | Handle | the return value of the dojo.connect call that created the connection. |

    ### `docScroll` `(doc)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Returns an object with {node, x, y} with corresponding offsets.

    [TABLE]

    **Returns:** Object \| undefined
- name: main#dnd
  id: dojo/main#1_10dojo_main_dnd
  summary: Alias for the current document
  belongs_to: main
  description: |-
    ### dnd

    Defined by: [dojo/dnd/common](dnd/common)

    ### doc

    Defined by: [dojo/\_base/window](_base/window)

    Alias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().

    ### dojox

    Defined by: [dojo/\_base/kernel](_base/kernel)
- name: main#empty()
  id: dojo/main#1_10dojo_main_empty
  summary: A legacy method created for use exclusively by internal Dojo methods
  belongs_to: main
  description: "### `empty` `(node)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n\n### `eval` `(scriptText)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nA legacy method created for use exclusively by internal Dojo methods. Do not use this method directly unless you understand its possibly-different implications on the platforms your are targeting.\n\nMakes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers that support indirect eval.\n\nAs usual, IE does not. On IE, the only way to implement global eval is to use execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval. This implementation uses the technique of executing eval in the scope of a function that is a single scope frame below the global scope; thereby coming close to the global scope. Note carefully that\n\ndojo.eval(\"var pi = 3.14;\");\n\nwill define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want to define a global variable using dojo.eval, write something like\n\ndojo.eval(\"window.pi = 3.14;\")\n\n|            |           |                         |\n|------------|-----------|-------------------------|\n| Parameter  | Type      | Description             |\n| scriptText | undefined | The text to evaluation. |\n\n**Returns:** any\n\nThe result of the evaluation. Often `undefined`\n\n### `every` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nDetermines whether or not every item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns false\narray.every([1, 2, 3, 4], function(item){ return item>1; });\n    \n```\n\n### Example 2\n\n``` javascript\n      // returns true\narray.every([1, 2, 3, 4], function(item){ return item>0; });\n    \n```"
- name: main#exit()
  id: dojo/main#1_10dojo_main_exit
  summary: Marks code as experimental
  belongs_to: main
  description: "### `exit` `(exitcode)`\n\nDefined by [dojo/\\_base/configSpidermonkey](_base/configspidermonkey)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| exitcode  | undefined |             |\n\n### `experimental` `(moduleName,extra)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nMarks code as experimental.\n\nThis can be used to mark a function, file, or module as experimental. Experimental code is not ready to be used, and the APIs are subject to change without notice. Experimental code may be completed deleted without going through the normal deprecation process.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.experimental(\"dojo.data.Result\");\n    \n```\n\n### Example 2\n\n``` javascript\n      dojo.experimental(\"dojo.weather.toKelvin()\", \"PENDING approval from NOAA\");\n    \n```"
- name: main#fadeIn()
  id: dojo/main#1_10dojo_main_fadeIn
  summary: Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque
  belongs_to: main
  description: |-
    ### `fadeIn` `(args)`

    Defined by [dojo/\_base/fx](_base/fx)

    Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque.

    [TABLE]

    **Returns:** undefined
- name: main#fadeOut()
  id: dojo/main#1_10dojo_main_fadeOut
  summary: Returns an animation that will fade node defined in 'args' from its current opacity to fully transparent
  belongs_to: main
  description: |-
    ### `fadeOut` `(args)`

    Defined by [dojo/\_base/fx](_base/fx)

    Returns an animation that will fade node defined in 'args' from its current opacity to fully transparent.

    [TABLE]

    **Returns:** undefined
- name: main#fieldToObject()
  id: dojo/main#1_10dojo_main_fieldToObject
  summary: Serialize a form field to a JavaScript object
  belongs_to: main
  description: "### `fieldToObject` `(inputNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nSerialize a form field to a JavaScript object.\n\nReturns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| inputNode | DOMNode \\| String |             |\n\n**Returns:** Object \\| undefined\n\n### `filter` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nReturns a new Array with those items from arr that match the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter>\n\n[TABLE]\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns [2, 3, 4]\narray.filter([1, 2, 3, 4], function(item){ return item>1; });\n    \n```\n\n### `fixEvent` `(evt,sender)`\n\nDefined by [dojo/\\_base/event](_base/event)\n\nnormalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions\n\n|           |         |                                  |\n|-----------|---------|----------------------------------|\n| Parameter | Type    | Description                      |\n| evt       | Event   | native event object              |\n| sender    | DOMNode | node to treat as \"currentTarget\" |\n\n**Returns:** Event\n\nnative event object\n\n### `fixIeBiDiScrollLeft` `(scrollLeft,doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nIn RTL direction, scrollLeft should be a negative value, but IE returns a positive one. All codes using documentElement.scrollLeft must call this function to fix this error, otherwise the position will offset to right when there is a horizontal scrollbar.\n\n[TABLE]\n\n**Returns:** Number \\| number\n\n### `forEach` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nfor every item in arr, callback is invoked. Return values are ignored. If you want to break out of the loop, consider using array.every() or array.some(). forEach does not allow breaking out of the loop over the items in arr.\n\nThis function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach>\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // log out all members of the array:\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item){\n          console.log(item);\n      }\n);\n    \n```\n\n### Example 2\n\n``` javascript\n      // log out the members and their indexes\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item, idx, arr){\n          console.log(item, \"at index:\", idx);\n      }\n);\n    \n```\n\n### Example 3\n\n``` javascript\n      // use a scoped object member as the callback\n\nvar obj = {\n      prefix: \"logged via obj.callback:\",\n      callback: function(item){\n          console.log(this.prefix, item);\n      }\n};\n\n// specifying the scope function executes the callback in that scope\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      obj.callback,\n      obj\n);\n\n// alternately, we can accomplish the same thing with lang.hitch()\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      lang.hitch(obj, \"callback\")\n);\n    \n```"
- name: main#formToJson()
  id: dojo/main#1_10dojo_main_formToJson
  summary: null
  belongs_to: main
  description: |-
    ### `formToJson` `(formNode,prettyPrint)`

    Defined by [dojo/dom-form](dom-form)

    Create a serialized JSON string from a form node or string ID identifying the form to serialize

    [TABLE]

    **Returns:** String \| undefined
- name: main#formToObject()
  id: dojo/main#1_10dojo_main_formToObject
  summary: Serialize a form node to a JavaScript object
  belongs_to: main
  description: "### `formToObject` `(formNode)`\n\nDefined by [dojo/dom-form](dom-form)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n      <form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n    \n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```"
- name: main#formToQuery()
  id: dojo/main#1_10dojo_main_formToQuery
  summary: Parses a JavaScript expression and returns a JavaScript value
  belongs_to: main
  description: |-
    ### `formToQuery` `(formNode)`

    Defined by [dojo/dom-form](dom-form)

    Returns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize

    |           |                   |             |
    |-----------|-------------------|-------------|
    | Parameter | Type              | Description |
    | formNode  | DOMNode \| String |             |

    **Returns:** String \| undefined

    ### `fromJson` `(js)`

    Defined by [dojo/\_base/json](_base/json)

    Parses a JavaScript expression and returns a JavaScript value.

    Throws for invalid JavaScript expressions. It does not use a strict JSON parser. It always delegates to eval(). The content passed to this method must therefore come from a trusted source. It is recommend that you use [dojo/json](json)'s parse function for an implementation uses the (faster) native JSON parse when available.

    |           |        |                                                                                                           |
    |-----------|--------|-----------------------------------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                                               |
    | js        | String | a string literal of a JavaScript expression, for instance: `'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'` |

    **Returns:** undefined
- name: main#fx
  id: dojo/main#1_10dojo_main_fx
  summary: null
  belongs_to: main
  description: |-
    ### fx

    Defined by: [dojo/fx](fx)

    Effects library on top of Base animations
- name: main#gears
  id: dojo/main#1_10dojo_main_gears
  summary: Alias for the current window
  belongs_to: main
  description: |-
    ### gears

    Defined by: [dojo/gears](gears)

    TODOC

    ### global

    Defined by: [dojo/\_base/window](_base/window)

    Alias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().
- name: main#getAttr()
  id: dojo/main#1_10dojo_main_getAttr
  summary: Gets an attribute on an HTML element
  belongs_to: main
  description: "### `getAttr` `(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nGets an attribute on an HTML element.\n\nHandles normalized getting of attributes on DOM Nodes.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | DOMNode \\| String | id or reference to the element to get the attribute on |\n| name      | String            | the name of the attribute to get.                      |\n\n**Returns:** any \\| undefined \\| null\n\nthe value of the requested attribute or null if that attribute does not have a specified or default value;\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" attribute on a node\nrequire([\"dojo/dom-attr\", \"dojo/dom\"], function(domAttr, dom){\n    domAttr.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domAttr.get(\"nodeId\", \"foo\");\n}); \n    \n```\n\n### `getBorderExtents` `(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns an object with properties useful for noting the border dimensions.\n\n- l/t/r/b = the sum of left/top/right/bottom border (respectively)\n- w = the sum of the left and right border\n- h = the sum of the top and bottom border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getComputedStyle` `(node)`\n\nDefined by [dojo/dom-style](dom-style)\n\nReturns a \"computed style\" object.\n\nGets a \"computed style\" object which can be used to gather information about the current state of the rendered node.\n\nNote that this may behave differently on different browsers. Values may have different formats and value encodings across browsers.\n\nNote also that this method is expensive. Wherever possible, reuse the returned object.\n\nUse the [dojo/dom-style.get()](dom-style#get) method for more consistent (pixelized) return values.\n\n|           |         |                                                                                    |\n|-----------|---------|------------------------------------------------------------------------------------|\n| Parameter | Type    | Description                                                                        |\n| node      | DOMNode | A reference to a DOM node. Does NOT support taking an ID string for speed reasons. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.getComputedStyle(dom.byId('foo')).borderWidth;\n});\n    \n```\n\n### Example 2\n\nReusing the returned object, avoiding multiple lookups:\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    var cs = domStyle.getComputedStyle(dom.byId(\"someNode\"));\n    var w = cs.width, h = cs.height;\n});\n    \n```\n\n### `getContentBox` `(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.\n\n[TABLE]\n\n**Returns:** object\n\n### `getIeDocumentElementOffset` `(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nreturns the offset in x and y from the document body to the visual edge of the page for IE\n\nThe following values in IE contain an offset:\n\n``` javascript\n      event.clientX\nevent.clientY\nnode.getBoundingClientRect().left\nnode.getBoundingClientRect().top\n    \n```\n\nBut other position related values do not contain this offset,\n\nsuch as node.offsetLeft, node.offsetTop, node.style.left and node.style.top. The offset is always (2, 2) in LTR direction. When the body is in RTL direction, the offset counts the width of left scroll bar's width. This function computes the actual offset.\n\n[TABLE]\n\n**Returns:** object"
- name: main#getL10nName()
  id: dojo/main#1_10dojo_main_getL10nName
  summary: returns an object that encodes the width, height, left and top positions of the node's margin box
  belongs_to: main
  description: |-
    ### `getL10nName` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** string

    ### `getMarginBox` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    returns an object that encodes the width, height, left and top positions of the node's margin box.

    [TABLE]

    **Returns:** object

    ### `getMarginExtents` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    returns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).

    - l/t = marginLeft, marginTop, respectively
    - w = total width, margin inclusive
    - h = total height, margin inclusive

    The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.

    [TABLE]

    **Returns:** object

    ### `getMarginSize` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](dom-geometry)

    returns an object that encodes the width and height of the node's margin box

    [TABLE]

    **Returns:** object
- name: main#getNodeProp()
  id: dojo/main#1_10dojo_main_getNodeProp
  summary: Returns an effective value of a property or an attribute
  belongs_to: main
  description: "### `getNodeProp` `(node,name)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nReturns an effective value of a property or an attribute.\n\n|           |                   |                                                             |\n|-----------|-------------------|-------------------------------------------------------------|\n| Parameter | Type              | Description                                                 |\n| node      | DOMNode \\| String | id or reference to the element to remove the attribute from |\n| name      | String            | the name of the attribute                                   |\n\n**Returns:** any\n\nthe value of the attribute\n\n### `getPadBorderExtents` `(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns object with properties useful for box fitting with regards to padding.\n\n- l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)\n- w = the sum of the left and right padding and border\n- h = the sum of the top and bottom padding and border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getPadExtents` `(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns object with special values specifically useful for node fitting.\n\nReturns an object with `w`, `h`, `l`, `t` properties:\n\n``` javascript\n      l/t/r/b = left/top/right/bottom padding (respectively)\nw = the total of the left and right padding\nh = the total of the top and bottom padding\n    \n```\n\nIf 'node' has position, l/t forms the origin for child nodes.\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object"
- name: main#getProp()
  id: dojo/main#1_10dojo_main_getProp
  summary: Gets a property on an HTML element
  belongs_to: main
  description: "### `getProp` `(node,name)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nGets a property on an HTML element.\n\nHandles normalized getting of properties on DOM nodes.\n\n|           |                   |                                                       |\n|-----------|-------------------|-------------------------------------------------------|\n| Parameter | Type              | Description                                           |\n| node      | DOMNode \\| String | id or reference to the element to get the property on |\n| name      | String            | the name of the property to get.                      |\n\n**Returns:** any \\| undefined\n\nthe value of the requested property or its default value\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" property on a node\nrequire([\"dojo/dom-prop\", \"dojo/dom\"], function(domProp, dom){\n    domProp.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domProp.get(\"nodeId\", \"foo\");\n});\n    \n```\n\n### `getStyle` `(node,name)`\n\nDefined by [dojo/dom-style](dom-style)\n\nAccesses styles on a node.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use [dojo/dom-geometry.getMarginBox()](dom-geometry#getMarginBox), [dojo/dom-geometry.getContentBox()](dom-geometry#getContentBox) or [dojo/dom-geometry.getPosition()](dom-geometry#getPosition).\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\");\n});\n    \n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\", \"opacity\"); // 1 by default\n});\n    \n```"
- name: main#hasAttr()
  id: dojo/main#1_10dojo_main_hasAttr
  summary: Returns true if the requested attribute is specified on the given element, and false otherwise
  belongs_to: main
  description: |-
    ### `hasAttr` `(node,name)`

    Defined by [dojo/dom-attr](dom-attr)

    Returns true if the requested attribute is specified on the given element, and false otherwise.

    |           |                   |                                         |
    |-----------|-------------------|-----------------------------------------|
    | Parameter | Type              | Description                             |
    | node      | DOMNode \| String | id or reference to the element to check |
    | name      | String            | the name of the attribute               |

    **Returns:** Boolean \| contentWindow.document isn't accessible within IE7/8

    true if the requested attribute is specified on the given element, and false otherwise
- name: main#hasClass()
  id: dojo/main#1_10dojo_main_hasClass
  summary: Returns whether or not the specified classes are a portion of the class list currently applied to the node
  belongs_to: main
  description: "### `hasClass` `(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReturns whether or not the specified classes are a portion of the class list currently applied to the node.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | String \\| DOMNode | String ID or DomNode reference to check the class for. |\n| classStr  | String            | A string class name to look for.                       |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nDo something if a node with id=\"someNode\" has class=\"aSillyClassName\" present\n\n``` javascript\n      if(dojo.hasClass(\"someNode\",\"aSillyClassName\")){ ... }\n    \n```"
- name: main#hash()
  id: dojo/main#1_10dojo_main_hash
  summary: Gets or sets the hash string in the browser URL
  belongs_to: main
  description: "### `hash` `(hash,replace)`\n\nDefined by [dojo/hash](hash)\n\nGets or sets the hash string in the browser URL.\n\nHandles getting and setting of location.hash.\n\n- If no arguments are passed, acts as a getter.\n- If a string is passed, acts as a setter.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, returns the current hash string. when used as a setter, returns the new hash string.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      topic.subscribe(\"/dojo/hashchange\", context, callback);\n\nfunction callback (hashValue){\n    // do something based on the hash value.\n}\n    \n```\n\n### `indexOf` `(arr,value,fromIndex,findLast)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nlocates the first index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's indexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf>\n\n[TABLE]\n\n**Returns:** Number\n\n### `isBodyLtr` `(doc)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nReturns true if the current language is left-to-right, and false otherwise.\n\n[TABLE]\n\n**Returns:** Boolean \\| boolean\n\n### `isDescendant` `(node,ancestor)`\n\nDefined by [dojo/dom](dom)\n\nReturns true if node is a descendant of ancestor\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | string id or node reference to test                             |\n| ancestor  | DOMNode \\| String | string id or node reference of potential parent to test against |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nTest is node id=\"bar\" is a descendant of node id=\"foo\"\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    if(dom.isDescendant(\"bar\", \"foo\")){ ... }\n});\n    \n```\n\n### `lastIndexOf` `(arr,value,fromIndex)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nlocates the last index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's lasIndexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf>\n\n[TABLE]\n\n**Returns:** Number"
- name: main#html
  id: dojo/main#1_10dojo_main_html
  summary: null
  belongs_to: main
  description: |-
    ### html

    Defined by: [dojo/html](html)

    TODOC
- name: main#i18n
  id: dojo/main#1_10dojo_main_i18n
  summary: null
  belongs_to: main
  description: |-
    ### i18n

    Defined by: [dojo/i18n](i18n)

    This module implements the [dojo/i18n](i18n)! plugin and the v1.6- i18n API
- name: main#io
  id: dojo/main#1_10dojo_main_io
  summary: Version as a Number if client is android browser
  belongs_to: main
  description: |-
    ### io

    Defined by: [dojo/io/iframe](io/iframe)

    ### isAir

    Defined by: [dojo/\_base/sniff](_base/sniff)

    True if client is Adobe Air

    ### isAndroid

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is android browser. undefined otherwise.

    ### isAsync

    Defined by: [dojo/\_base/kernel](_base/kernel)

    ### isBrowser

    Defined by: [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    ### isChrome

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is Chrome browser. undefined otherwise.
- name: main#isCopyKey
  id: dojo/main#1_10dojo_main_isCopyKey
  summary: null
  belongs_to: main
  description: |-
    ### isCopyKey

    Defined by: [dojox/grid/\_Grid](http://dojotoolkit.org/api/1.10/dojox/grid/_Grid)
- name: main#isFF
  id: dojo/main#1_10dojo_main_isFF
  summary: Version as a Number if client is MSIE(PC)
  belongs_to: main
  description: |-
    ### isFF

    Defined by: [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    ### isIE

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is MSIE(PC). undefined otherwise. Corresponds to major detected IE version (6, 7, 8, etc.)

    ### isIos

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is iPhone, iPod, or iPad. undefined otherwise.

    ### isKhtml

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is a KHTML browser. undefined otherwise. Corresponds to major detected version.

    ### isMac

    Defined by: [dojo/\_base/sniff](_base/sniff)

    True if the client runs on Mac
- name: main#isMoz
  id: dojo/main#1_10dojo_main_isMoz
  summary: null
  belongs_to: main
  description: |-
    ### isMoz

    Defined by: [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)
- name: main#isMozilla
  id: dojo/main#1_10dojo_main_isMozilla
  summary: Version as a Number if client is Opera
  belongs_to: main
  description: |-
    ### isMozilla

    Defined by: [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    ### isOpera

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is Opera. undefined otherwise. Corresponds to major detected version.

    ### isQuirks

    Defined by: [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    ### isSafari

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is Safari or iPhone. undefined otherwise.

    ### isSpidermonkey

    Defined by: [dojo/\_base/configSpidermonkey](_base/configspidermonkey)

    ### isWebKit

    Defined by: [dojo/\_base/sniff](_base/sniff)

    Version as a Number if client is a WebKit-derived browser (Konqueror, Safari, Chrome, etc.). undefined otherwise.

    ### isWii

    Defined by: [dojo/\_base/sniff](_base/sniff)

    True if client is Wii

    ### keys

    Defined by: [dojo/keys](keys)

    Definitions for common key values. Client code should test keyCode against these named constants, as the actual codes can vary by browser.
- name: main#loadInit()
  id: dojo/main#1_10dojo_main_loadInit
  summary: 'This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the "holes" in the sparse array to the callback function with a value of undefined'
  belongs_to: main
  description: "### `loadInit` `(f)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| f         | undefined |             |\n\n### `map` `(arr,callback,thisObject,Ctr)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\napplies callback to each element of arr and returns an Array with the results\n\nThis function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map>\n\n[TABLE]\n\n**Returns:** Array \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns [2, 3, 4, 5]\narray.map([1, 2, 3, 4], function(item){ return item+1 });\n    \n```"
- name: main#locale
  id: dojo/main#1_10dojo_main_locale
  summary: null
  belongs_to: main
  description: |-
    ### locale

    Defined by: [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    ### mouseButtons

    Defined by: [dojo/mouse](mouse)
- name: main#marginBox()
  id: dojo/main#1_10dojo_main_marginBox
  summary: Getter/setter for the margin-box of node
  belongs_to: main
  description: "### `marginBox` `(node,box)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nGetter/setter for the margin-box of node.\n\nGetter/setter for the margin-box of node. Returns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a margin width of 300px and a margin-height of 150px.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nRetrieve the margin box of a passed node\n\n``` javascript\n      var box = dojo.marginBox(\"someNodeId\");\nconsole.dir(box);\n    \n```\n\n### Example 2\n\nSet a node's margin box to the size of another node\n\n``` javascript\n      var box = dojo.marginBox(\"someNodeId\");\ndojo.marginBox(\"someOtherNode\", box);\n    \n```\n\n### `moduleUrl` `(module,url)`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\nReturns a URL relative to a module.\n\n[TABLE]\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var pngPath = dojo.moduleUrl(\"acme\",\"images/small.png\");\nconsole.dir(pngPath); // list the object properties\n// create an image and set it's source to pngPath's value:\nvar img = document.createElement(\"img\");\nimg.src = pngPath;\n// add our image to the document\ndojo.body().appendChild(img);\n    \n```\n\n### Example 2\n\nyou may de-reference as far as you like down the package hierarchy. This is sometimes handy to avoid lengthy relative urls or for building portable sub-packages. In this example, the `acme.widget` and `acme.util` directories may be located under different roots (see `dojo.registerModulePath`) but the the modules which reference them can be unaware of their relative locations on the filesystem:\n\n``` javascript\n      // somewhere in a configuration block\ndojo.registerModulePath(\"acme.widget\", \"../../acme/widget\");\ndojo.registerModulePath(\"acme.util\", \"../../util\");\n\n// ...\n\n// code in a module using acme resources\nvar tmpltPath = dojo.moduleUrl(\"acme.widget\",\"templates/template.html\");\nvar dataPath = dojo.moduleUrl(\"acme.util\",\"resources/data.json\");\n    \n```"
- name: main#NodeList()
  id: dojo/main#1_10dojo_main_NodeList
  summary: Array-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation
  belongs_to: main
  description: "### `NodeList` `(array)`\n\nDefined by [dojo/query](query)\n\nArray-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo/query() calls.\n\nNodeList instances provide many utilities that reflect core Dojo APIs for Array iteration and manipulation, DOM manipulation, and event handling. Instead of needing to dig up functions in the dojo package, NodeLists generally make the full power of Dojo available for DOM manipulation tasks in a simple, chainable way.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| array     | undefined |             |\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\ncreate a node list from a node\n\n``` javascript\n      require([\"dojo/query\", \"dojo/dom\"\n], function(query, dom){\n    query.NodeList(dom.byId(\"foo\"));\n});\n    \n```\n\n### Example 2\n\nget a NodeList from a CSS query and iterate on it\n\n``` javascript\n      require([\"dojo/on\", \"dojo/dom\"\n], function(on, dom){\n    var l = query(\".thinger\");\n    l.forEach(function(node, index, nodeList){\n        console.log(index, node.innerHTML);\n    });\n});\n    \n```\n\n### Example 3\n\nuse native and Dojo-provided array methods to manipulate a NodeList without needing to use dojo.\\* functions explicitly:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/dom-construct\", \"dojo/dom\"\n], function(query, domConstruct, dom){\n    var l = query(\".thinger\");\n    // since NodeLists are real arrays, they have a length\n    // property that is both readable and writable and\n    // push/pop/shift/unshift methods\n    console.log(l.length);\n    l.push(domConstruct.create(\"span\"));\n\n    // dojo's normalized array methods work too:\n    console.log( l.indexOf(dom.byId(\"foo\")) );\n    // ...including the special \"function as string\" shorthand\n    console.log( l.every(\"item.nodeType == 1\") );\n\n    // NodeLists can be [..] indexed, or you can use the at()\n    // function to get specific items wrapped in a new NodeList:\n    var node = l[3]; // the 4th element\n    var newList = l.at(1, 3); // the 2nd and 4th elements\n});\n    \n```\n\n### Example 4\n\nchainability is a key advantage of NodeLists:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".thinger\")\n        .onclick(function(e){ /* ... */ })\n        .at(1, 3, 8) // get a subset\n            .style(\"padding\", \"5px\")\n            .forEach(console.log);\n});\n    \n```"
- name: main#number
  id: dojo/main#1_10dojo_main_number
  summary: null
  belongs_to: main
  description: |-
    ### number

    Defined by: [dojo/number](number)

    localized formatting and parsing routines for Number

    ### parser

    Defined by: [dojox/mobile/parser](http://dojotoolkit.org/api/1.10/dojox/mobile/parser)
- name: main#objectToQuery()
  id: dojo/main#1_10dojo_main_objectToQuery
  summary: takes a name/value mapping object and returns a string representing a URL-encoded version of that object
  belongs_to: main
  description: "### `objectToQuery` `(map)`\n\nDefined by [dojo/io-query](io-query)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```\n\nyields the following query string:\n\n``` javascript\n      \"blah=blah&multi=thud&multi=thonk\"\n    \n```"
- name: main#place()
  id: dojo/main#1_10dojo_main_place
  summary: Attempt to insert node into the DOM, choosing from various positioning options
  belongs_to: main
  description: "### `place` `(node,refNode,position)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\nAttempt to insert node into the DOM, choosing from various positioning options. Returns the first argument resolved to a DOM node.\n\n[TABLE]\n\n**Returns:** DOMNode \\| undefined\n\nReturned values is the first argument resolved to a DOM node.\n\n.place() is also a method of `dojo/NodeList`, allowing `dojo/query` node lookups.\n\n## Examples\n\n### Example 1\n\nPlace a node by string id as the last child of another node by string id:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\");\n});\n    \n```\n\n### Example 2\n\nPlace a node by string id before another node by string id\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\", \"before\");\n});\n    \n```\n\n### Example 3\n\nCreate a Node, and place it in the body element (last child):\n\n``` javascript\n      require([\"dojo/dom-construct\", \"dojo/_base/window\"\n], function(domConstruct, win){\n    domConstruct.place(\"<div></div>\", win.body());\n});\n    \n```\n\n### Example 4\n\nPut a new LI as the first child of a list by id:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"<li></li>\", \"someUl\", \"first\");\n});\n    \n```"
- name: main#platformRequire()
  id: dojo/main#1_10dojo_main_platformRequire
  summary: This method takes a "map" of arrays which one can use to optionally load dojo modules
  belongs_to: main
  description: "### `platformRequire` `(modMap)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nrequire one or more modules based on which host environment Dojo is currently operating in\n\nThis method takes a \"map\" of arrays which one can use to optionally load dojo modules. The map is indexed by the possible dojo.name *values, with two additional values: \"default\" and \"common\". The items in the \"default\" array will be loaded if none of the other items have been chosen based on dojo.name*, set by your host environment. The items in the \"common\" array will *always* be loaded, regardless of which list is chosen.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| modMap    | Object |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.platformRequire({\n    browser: [\n        \"foo.sample\", // simple module\n        \"foo.test\",\n        [\"foo.bar.baz\", true] // skip object check in _loadModule (dojo.require)\n    ],\n    default: [ \"foo.sample._base\" ],\n    common: [ \"important.module.common\" ]\n});\n    \n```"
- name: main#popContext()
  id: dojo/main#1_10dojo_main_popContext
  summary: If the context stack contains elements, ensure that subsequent code executes in the previous context to the current context
  belongs_to: main
  description: |-
    ### `popContext` `()`

    Defined by [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    If the context stack contains elements, ensure that subsequent code executes in the *previous* context to the current context. The current context set (\[global, document\]) is returned.

    ### `position` `(node,includeScroll)`

    Defined by [dojo/dom-geometry](dom-geometry)

    Gets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).

    Returns an object of the form: `{ x: 100, y: 300, w: 20, h: 15 }`. If includeScroll==true, the x and y values will include any document offsets that may affect the position relative to the viewport. Uses the border-box model (inclusive of border and padding but not margin). Does not act as a setter.

    [TABLE]

    **Returns:** Object \| object
- name: main#prop()
  id: dojo/main#1_10dojo_main_prop
  summary: Gets or sets a property on an HTML element
  belongs_to: main
  description: "### `prop` `(node,name,value)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nGets or sets a property on an HTML element.\n\nHandles normalized getting and setting of properties on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any\n\nwhen used as a getter, the value of the requested property or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" property on a node\ndojo.prop(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.prop(\"nodeId\", \"foo\");\n    \n```\n\n### Example 2\n\n``` javascript\n      // use prop() to set the tab index\ndojo.prop(\"nodeId\", \"tabIndex\", 3);\n    \n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      dojo.prop(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n    \n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\n      dojo.prop(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n    \n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\n      var obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.prop(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n    \n```"
- name: main#provide()
  id: dojo/main#1_10dojo_main_provide
  summary: null
  belongs_to: main
  description: |-
    ### `provide` `(mid)`

    Defined by [dojo/\_base/loader](_base/loader)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | mid       | undefined |             |
- name: main#publish
  id: dojo/main#1_10dojo_main_publish
  summary: null
  belongs_to: main
  description: |-
    ### publish

    Defined by: [dojo/robotx](robotx)
- name: main#pushContext()
  id: dojo/main#1_10dojo_main_pushContext
  summary: causes subsequent calls to Dojo methods to assume the passed object and, optionally, document as the default scopes to use
  belongs_to: main
  description: |-
    ### `pushContext` `(g,d)`

    Defined by [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    causes subsequent calls to Dojo methods to assume the passed object and, optionally, document as the default scopes to use. A 2-element array of the previous global and document are returned.

    dojo.pushContext treats contexts as a stack. The auto-detected contexts which are initially provided using dojo.setContext() require authors to keep state in order to "return" to a previous context, whereas the dojo.pushContext and dojo.popContext methods provide a more natural way to augment blocks of code to ensure that they execute in a different window or frame without issue. If called without any arguments, the default context (the context when Dojo is first loaded) is instead pushed into the stack. If only a single string is passed, a node in the intitial context's document is looked up and its contextWindow and contextDocument properties are used as the context to push. This means that iframes can be given an ID and code can be executed in the scope of the iframe's document in subsequent calls easily.

    [TABLE]
- name: main#query
  id: dojo/main#1_10dojo_main_query
  summary: null
  belongs_to: main
  description: |-
    ### query

    Defined by: [dojo/query](query)
- name: main#queryToObject()
  id: dojo/main#1_10dojo_main_queryToObject
  summary: Create an object representing a de-serialized query section of a URL
  belongs_to: main
  description: "### `queryToObject` `(str)`\n\nDefined by [dojo/io-query](io-query)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n      \"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n    \n```\n\nresults in this object structure:\n\n``` javascript\n      {\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n    \n```\n\nNote that spaces and other urlencoded entities are correctly handled."
- name: main#rawXhrPost()
  id: dojo/main#1_10dojo_main_rawXhrPost
  summary: Sends an HTTP POST request to the server
  belongs_to: main
  description: |-
    ### `rawXhrPost` `(args)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    Sends an HTTP POST request to the server. In addition to the properties listed for the dojo.\_\_XhrArgs type, the following property is allowed:

    [TABLE]

    **Returns:** undefined
- name: main#rawXhrPut()
  id: dojo/main#1_10dojo_main_rawXhrPut
  summary: Sends an HTTP PUT request to the server
  belongs_to: main
  description: "### `rawXhrPut` `(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `ready` `(priority,context,callback)`\n\nDefined by [dojo/ready](ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n    \n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n    \n```\n\n### Example 3\n\nUsing context\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n    \n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n    \n```"
- name: main#regexp
  id: dojo/main#1_10dojo_main_regexp
  summary: null
  belongs_to: main
  description: |-
    ### regexp

    Defined by: [dojo/regexp](regexp)

    Regular expressions and Builder resources
- name: main#registerModulePath()
  id: dojo/main#1_10dojo_main_registerModulePath
  summary: An unregistered module is given the default path of ../[module], relative to Dojo root
  belongs_to: main
  description: "### `registerModulePath` `(moduleName,prefix)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nMaps a module name to a path\n\nAn unregistered module is given the default path of ../\\[module\\], relative to Dojo root. For example, module acme is mapped to ../acme. If you want to use a different module name, use dojo.registerModulePath.\n\n|            |        |             |\n|------------|--------|-------------|\n| Parameter  | Type   | Description |\n| moduleName | String |             |\n| prefix     | String |             |\n\n## Examples\n\n### Example 1\n\nIf your dojo.js is located at this location in the web root:\n\n``` javascript\n      /myapp/js/dojo/dojo/dojo.js\n    \n```\n\nand your modules are located at:\n\n``` javascript\n      /myapp/js/foo/bar.js\n/myapp/js/foo/baz.js\n/myapp/js/foo/thud/xyzzy.js\n    \n```\n\nYour application can tell Dojo to locate the \"foo\" namespace by calling:\n\n``` javascript\n      dojo.registerModulePath(\"foo\", \"../../foo\");\n    \n```\n\nAt which point you can then use dojo.require() to load the\n\nmodules (assuming they provide() the same things which are required). The full code might be:\n\n``` markup\n      <script type=\"text/javascript\"\n    src=\"/myapp/js/dojo/dojo/dojo.js\"></script>\n<script type=\"text/javascript\">\n    dojo.registerModulePath(\"foo\", \"../../foo\");\n    dojo.require(\"foo.bar\");\n    dojo.require(\"foo.baz\");\n    dojo.require(\"foo.thud.xyzzy\");\n</script>\n    \n```"
- name: main#removeAttr()
  id: dojo/main#1_10dojo_main_removeAttr
  summary: Removes an attribute from an HTML element
  belongs_to: main
  description: |-
    ### `removeAttr` `(node,name)`

    Defined by [dojo/dom-attr](dom-attr)

    Removes an attribute from an HTML element.

    |           |                   |                                                             |
    |-----------|-------------------|-------------------------------------------------------------|
    | Parameter | Type              | Description                                                 |
    | node      | DOMNode \| String | id or reference to the element to remove the attribute from |
    | name      | String            | the name of the attribute to remove                         |
- name: main#removeClass()
  id: dojo/main#1_10dojo_main_removeClass
  summary: Removes the specified classes from node
  belongs_to: main
  description: "### `removeClass` `(node,classStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nRemoves the specified classes from node. No `contains()` check is required.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nRemove a class from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass\");\n});\n    \n```\n\n### Example 2\n\nRemove two classes from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass secondClass\");\n});\n    \n```\n\n### Example 3\n\nRemove two classes from some node (using array):\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n    \n```\n\n### Example 4\n\nRemove all classes from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\");\n});\n    \n```\n\n### Example 5\n\nAvailable in `dojo/NodeList` for multiple removal\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\"ul > li\").removeClass(\"foo\");\n});\n    \n```"
- name: main#replaceClass()
  id: dojo/main#1_10dojo_main_replaceClass
  summary: Replaces one or more classes on a node if not present
  belongs_to: main
  description: "### `replaceClass` `(node,addClassStr,removeClassStr)`\n\nDefined by [dojo/dom-class](dom-class)\n\nReplaces one or more classes on a node if not present. Operates more quickly than calling dojo.removeClass and dojo.addClass\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"add1 add2\", \"remove1 remove2\");\n});\n    \n```\n\n### Example 2\n\nReplace all classes with addMe\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"addMe\");\n});\n    \n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\".findMe\").replaceClass(\"addMe\", \"removeMe\");\n});\n    \n```"
- name: main#require()
  id: dojo/main#1_10dojo_main_require
  summary: 'Modules are loaded via dojo.require by using one of two loaders: the normal loader and the xdomain loader'
  belongs_to: main
  description: "### `require` `(moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nloads a Javascript module from the appropriate URI\n\nModules are loaded via dojo.require by using one of two loaders: the normal loader and the xdomain loader. The xdomain loader is used when dojo was built with a custom build that specified loader=xdomain and the module lives on a modulePath that is a whole URL, with protocol and a domain. The versions of Dojo that are on the Google and AOL CDNs use the xdomain loader.\n\nIf the module is loaded via the xdomain loader, it is an asynchronous load, since the module is added via a dynamically created script tag. This means that dojo.require() can return before the module has loaded. However, this should only happen in the case where you do dojo.require calls in the top-level HTML page, or if you purposely avoid the loader checking for dojo.require dependencies in your module by using a syntax like dojo\\[\"require\"\\] to load the module.\n\nSometimes it is useful to not have the loader detect the dojo.require calls in the module so that you can dynamically load the modules as a result of an action on the page, instead of right at module load time.\n\nAlso, for script blocks in an HTML page, the loader does not pre-process them, so it does not know to download the modules before the dojo.require calls occur.\n\nSo, in those two cases, when you want on-the-fly module loading or for script blocks in the HTML page, special care must be taken if the dojo.required code is loaded asynchronously. To make sure you can execute code that depends on the dojo.required modules, be sure to add the code that depends on the modules in a dojo.addOnLoad() callback. dojo.addOnLoad waits for all outstanding modules to finish loading before executing.\n\nThis type of syntax works with both xdomain and normal loaders, so it is good practice to always use this idiom for on-the-fly code loading and in HTML script blocks. If at some point you change loaders and where the code is loaded from, it will all still work.\n\nMore on how dojo.require `dojo.require(\"A.B\")` first checks to see if symbol A.B is defined. If it is, it is simply returned (nothing to do).\n\nIf it is not defined, it will look for `A/B.js` in the script root directory.\n\n`dojo.require` throws an exception if it cannot find a file to load, or if the symbol `A.B` is not defined after loading.\n\nIt returns the object `A.B`, but note the caveats above about on-the-fly loading and HTML script blocks when the xdomain loader is loading a module.\n\n`dojo.require()` does nothing about importing symbols into the current namespace. It is presumed that the caller will take care of that.\n\n[TABLE]\n\n**Returns:** any\n\nthe required namespace object\n\n## Examples\n\n### Example 1\n\nTo use dojo.require in conjunction with dojo.ready:\n\n``` javascript\n      dojo.require(\"foo\");\ndojo.require(\"bar\");\ndojo.addOnLoad(function(){\n    //you can now safely do something with foo and bar\n});\n    \n```\n\n### Example 2\n\nFor example, to import all symbols into a local block, you might write:\n\n``` javascript\n      with (dojo.require(\"A.B\")) {\n    ...\n}\n    \n```\n\nAnd to import just the leaf symbol to a local variable:\n\n``` javascript\n      var B = dojo.require(\"A.B\");\n...\n    \n```"
- name: main#requireAfterIf()
  id: dojo/main#1_10dojo_main_requireAfterIf
  summary: null
  belongs_to: main
  description: "### `requireAfterIf` `(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n    \n```"
- name: main#requireIf()
  id: dojo/main#1_10dojo_main_requireIf
  summary: null
  belongs_to: main
  description: "### `requireIf` `(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n    \n```"
- name: main#requireLocalization()
  id: dojo/main#1_10dojo_main_requireLocalization
  summary: Mix in properties skipping a constructor and decorating functions like it is done by declare()
  belongs_to: main
  description: "### `requireLocalization` `(moduleName,bundleName,locale)`\n\nDefined by [dojo/\\_base/loader](_base/loader)\n\n[TABLE]\n\n### `safeMixin` `(target,source)`\n\nDefined by [dojo/\\_base/declare](_base/declare)\n\nMix in properties skipping a constructor and decorating functions like it is done by declare().\n\nThis function is used to mix in properties like lang.mixin does, but it skips a constructor property and decorates functions like declare() does.\n\nIt is meant to be used with classes and objects produced with declare. Functions mixed in with dojo.safeMixin can use this.inherited() like normal methods.\n\nThis function is used to implement extend() method of a constructor produced with declare().\n\n|           |        |                                         |\n|-----------|--------|-----------------------------------------|\n| Parameter | Type   | Description                             |\n| target    | Object | Target object to accept new properties. |\n| source    | Object | Source object for new properties.       |\n\n**Returns:** Object\n\nTarget object to accept new properties.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var A = declare(null, {\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"B.m1\");\n    }\n});\nB.extend({\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\ndojo.safeMixin(x, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"X.m1\");\n    },\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"X.m2\");\n    }\n});\nx.m2();\n// prints:\n// A.m1\n// B.m1\n// X.m1\n    \n```"
- name: main#rpc
  id: dojo/main#1_10dojo_main_rpc
  summary: null
  belongs_to: main
  description: |-
    ### rpc

    Defined by: [dojo/rpc/RpcService](rpc/rpcservice)

    ### scopeMap

    Defined by: [dojo/\_base/kernel](_base/kernel)
- name: main#setAttr()
  id: dojo/main#1_10dojo_main_setAttr
  summary: Sets an attribute on an HTML element
  belongs_to: main
  description: "### `setAttr` `(node,name,value)`\n\nDefined by [dojo/dom-attr](dom-attr)\n\nSets an attribute on an HTML element.\n\nHandles normalized setting of attributes on DOM Nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // use attr() to set the tab index\nrequire([\"dojo/dom-attr\"], function(domAttr){\n    domAttr.set(\"nodeId\", \"tabIndex\", 3);\n});\n    \n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      require([\"dojo/dom-attr\"],\nfunction(domAttr){\n    domAttr.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\"\n    }\n});\n    \n```\n\n### `setContentSize` `(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nSets the size of the node's contents, irrespective of margins, padding, or borders.\n\n[TABLE]\n\n### `setContext` `(globalObject,globalDocument)`\n\nDefined by [dojo/\\_base/window](_base/window)\n\nchanges the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.\n\n|                |                 |             |\n|----------------|-----------------|-------------|\n| Parameter      | Type            | Description |\n| globalObject   | Object          |             |\n| globalDocument | DocumentElement |             |\n\n### `setMarginBox` `(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](dom-geometry)\n\nsets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to setBox that handles box-model vagaries for you.\n\n[TABLE]"
- name: main#setProp()
  id: dojo/main#1_10dojo_main_setProp
  summary: Sets a property on an HTML element
  belongs_to: main
  description: "### `setProp` `(node,name,value)`\n\nDefined by [dojo/dom-prop](dom-prop)\n\nSets a property on an HTML element.\n\nHandles normalized setting of properties on DOM nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // use prop() to set the tab index\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"nodeId\", \"tabIndex\", 3);\n});\n    \n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      require([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\",\n    });\n});\n    \n```\n\n### `setSelectable` `(node,selectable)`\n\nDefined by [dojo/dom](dom)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| node       | undefined |             |\n| selectable | undefined |             |\n\n### `setStyle` `(node,name,value)`\n\nDefined by [dojo/dom-style](dom-style)\n\nSets styles on a node.\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\nIf passed, sets value on the node for style, handling cross-browser concerns. When setting a pixel value, be sure to include \"px\" in the value. For instance, top: \"200px\". Otherwise, in some cases, some browsers will not apply the style.\n\n## Examples\n\n### Example 1\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\n      require([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", \"opacity\", 0.5); // == 0.5\n});\n    \n```\n\n### Example 2\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\n      require([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", {\n        \"opacity\": 0.5,\n        \"border\": \"3px solid black\",\n        \"height\": \"300px\"\n    });\n});\n    \n```\n\n### Example 3\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.set(\"thinger\",{\n        fontSize:\"14pt\",\n        letterSpacing:\"1.2em\"\n    });\n});\n    \n```\n\n### Example 4\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo/dom-style.get() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/query\", \"dojo/NodeList-dom\"],\nfunction(domStyle, query){\n    query(\".someClassName\").style(\"visibility\",\"hidden\");\n    // or\n    query(\"#baz > div\").style({\n        opacity:0.75,\n        fontSize:\"13pt\"\n    });\n});\n    \n```\n\n### `some` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](_base/array)\n\nDetermines whether or not any item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // is true\narray.some([1, 2, 3, 4], function(item){ return item>1; });\n    \n```\n\n### Example 2\n\n``` javascript\n      // is false\narray.some([1, 2, 3, 4], function(item){ return item<1; });\n    \n```"
- name: main#Stateful()
  id: dojo/main#1_10dojo_main_Stateful
  summary: null
  belongs_to: main
  description: |-
    ### `Stateful` `()`

    Defined by [dojo/Stateful](stateful)

    ### `stopEvent` `(evt)`

    Defined by [dojo/\_base/event](_base/event)

    prevents propagation and clobbers the default action of the passed event

    |           |       |                                                           |
    |-----------|-------|-----------------------------------------------------------|
    | Parameter | Type  | Description                                               |
    | evt       | Event | The event object. If omitted, window.event is used on IE. |
- name: main#store
  id: dojo/main#1_10dojo_main_store
  summary: null
  belongs_to: main
  description: |-
    ### store

    Defined by: [dojo/store/Cache](store/cache)
- name: main#string
  id: dojo/main#1_10dojo_main_string
  summary: null
  belongs_to: main
  description: |-
    ### string

    Defined by: [dojo/string](string)

    String utilities for Dojo
- name: main#style()
  id: dojo/main#1_10dojo_main_style
  summary: Accesses styles on a node
  belongs_to: main
  description: "### `style` `(node,name,value)`\n\nDefined by [dojo/\\_base/html](_base/html)\n\nAccesses styles on a node. If 2 arguments are passed, acts as a getter. If 3 arguments are passed, acts as a setter.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use `dojo.marginBox()`, `dojo.contentBox()` or `dojo.position()`.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, return the computed style of the node if passing in an ID or node, or return the normalized, computed value for the property when passing in a node and a style property\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\n      dojo.style(\"thinger\");\n    \n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\n      dojo.style(\"thinger\", \"opacity\"); // 1 by default\n    \n```\n\n### Example 3\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\n      dojo.style(\"thinger\", \"opacity\", 0.5); // == 0.5\n    \n```\n\n### Example 4\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\n      dojo.style(\"thinger\", {\n    \"opacity\": 0.5,\n    \"border\": \"3px solid black\",\n    \"height\": \"300px\"\n});\n    \n```\n\n### Example 5\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\n      dojo.style(\"thinger\",{\n    fontSize:\"14pt\",\n    letterSpacing:\"1.2em\"\n});\n    \n```\n\n### Example 6\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo.style() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\n      dojo.query(\".someClassName\").style(\"visibility\",\"hidden\");\n// or\ndojo.query(\"#baz > div\").style({\n    opacity:0.75,\n    fontSize:\"13pt\"\n});\n    \n```"
- name: main#subscribe
  id: dojo/main#1_10dojo_main_subscribe
  summary: null
  belongs_to: main
  description: |-
    ### subscribe

    Defined by: [dojo/robotx](robotx)
- name: main#tests
  id: dojo/main#1_10dojo_main_tests
  summary: D.O.H
  belongs_to: main
  description: |-
    ### tests

    Defined by: [dojo/tests](tests)

    D.O.H. Test files for Dojo unit testing.

    ### toJsonIndentStr

    Defined by: [dojo/\_base/json](_base/json)
- name: main#toDom()
  id: dojo/main#1_10dojo_main_toDom
  summary: instantiates an HTML fragment returning the corresponding DOM
  belongs_to: main
  description: "### `toDom` `(frag,doc)`\n\nDefined by [dojo/dom-construct](dom-construct)\n\ninstantiates an HTML fragment returning the corresponding DOM.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nDocument fragment, unless it's a single node in which case it returns the node itself\n\n## Examples\n\n### Example 1\n\nCreate a table row:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var tr = domConstruct.toDom(\"<tr><td>First!</td></tr>\");\n});\n    \n```"
- name: main#toggleClass()
  id: dojo/main#1_10dojo_main_toggleClass
  summary: Adds a class to node if not present, or removes if present
  belongs_to: main
  description: "### `toggleClass` `(node,classStr,condition)`\n\nDefined by [dojo/dom-class](dom-class)\n\nAdds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove. Returns the condition that was specified directly or indirectly.\n\n[TABLE]\n\n**Returns:** Boolean\n\nIf passed, true means to add the class, false means to remove. Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\");\n});\n    \n```\n\n### Example 2\n\nForcefully add a class\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\", true);\n});\n    \n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\".toggleMe\").toggleClass(\"toggleMe\");\n});\n    \n```\n\n### `toJson` `(it,prettyPrint)`\n\nDefined by [dojo/\\_base/json](_base/json)\n\nReturns a [JSON](http://json.org) serialization of an object.\n\nReturns a [JSON](http://json.org) serialization of an object. Note that this doesn't check for infinite recursion, so don't do that! It is recommend that you use [dojo/json](json)'s stringify function for an lighter and faster implementation that matches the native JSON API and uses the native JSON serializer when available.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA JSON string serialization of the passed-in object.\n\n## Examples\n\n### Example 1\n\nsimple serialization of a trivial object\n\n``` javascript\n      var jsonStr = dojo.toJson({ howdy: \"stranger!\", isStrange: true });\ndoh.is('{\"howdy\":\"stranger!\",\"isStrange\":true}', jsonStr);\n    \n```\n\n### Example 2\n\na custom serializer for an objects of a particular class:\n\n``` javascript\n      dojo.declare(\"Furby\", null, {\n    furbies: \"are strange\",\n    furbyCount: 10,\n    __json__: function(){\n    },\n});\n    \n```\n\n### `toPixelValue` `(node,value)`\n\nDefined by [dojo/dom-style](dom-style)\n\nconverts style value to pixels on IE or return a numeric value.\n\n|           |         |             |\n|-----------|---------|-------------|\n| Parameter | Type    | Description |\n| node      | DOMNode |             |\n| value     | String  |             |\n\n**Returns:** Number\n\n### `unsubscribe` `(handle)`\n\nDefined by [dojo/\\_base/connect](_base/connect)\n\nRemove a topic listener.\n\n|           |        |                                               |\n|-----------|--------|-----------------------------------------------|\n| Parameter | Type   | Description                                   |\n| handle    | Handle | The handle returned from a call to subscribe. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var alerter = dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\n...\ndojo.unsubscribe(alerter);\n    \n```\n\n### `when` `(valueOrPromise,callback,errback,progback)`\n\nDefined by [dojo/when](when)\n\nTransparently applies callbacks to values and/or promises.\n\nAccepts promises but also transparently handles non-promises. If no callbacks are provided returns a promise, regardless of the initial value. Foreign promises are converted.\n\nIf callbacks are provided and the initial value is not a promise, the callback is executed immediately with no error handling. Returns a promise if the initial value is a promise, or the result of the callback otherwise.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise) \\| summary: \\| name:\n\nPromise, or if a callback is provided, the result of the callback."
- name: main#touch
  id: dojo/main#1_10dojo_main_touch
  summary: This module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop
  belongs_to: main
  description: |-
    ### touch

    Defined by: [dojo/touch](touch)

    This module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop. Based on <http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html> Also, if the dojoClick property is set to truthy on a DOM node, [dojo/touch](touch) generates click events immediately for this node and its descendants (except for descendants that have a dojoClick property set to falsy), to avoid the delay before native browser click events, and regardless of whether evt.preventDefault() was called in a touch.press event listener.

    ### version

    Defined by: [dojo/\_base/kernel](_base/kernel)

    Version number of the Dojo Toolkit
- name: main#window
  id: dojo/main#1_10dojo_main_window
  summary: null
  belongs_to: main
  description: |-
    ### window

    Defined by: [dojo/window](window)

    TODOC

    ## Methods
- name: main#windowUnloaded()
  id: dojo/main#1_10dojo_main_windowUnloaded
  summary: signal fired by impending window destruction
  belongs_to: main
  description: |-
    ### `windowUnloaded` `()`

    Defined by [dojo/\_base/configFirefoxExtension](_base/configfirefoxextension)

    signal fired by impending window destruction. You may use dojo.addOnWIndowUnload() or dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnWindowUnload for more info.

    ### `withDoc` `(documentObject,callback,thisObject,cbArguments)`

    Defined by [dojo/\_base/window](_base/window)

    Invoke callback with documentObject as dojo/\_base/window::doc.

    Invoke callback with documentObject as [dojo/\_base/window](_base/window)::doc. If provided, callback will be executed in the context of object thisObject When callback() returns or throws an error, the [dojo/\_base/window](_base/window)::doc will be restored to its previous state.

    [TABLE]

    **Returns:** undefined

    ### `withGlobal` `(globalObject,callback,thisObject,cbArguments)`

    Defined by [dojo/\_base/window](_base/window)

    Invoke callback with globalObject as dojo.global and globalObject.document as dojo.doc.

    Invoke callback with globalObject as dojo.global and globalObject.document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject When callback() returns or throws an error, the dojo.global and dojo.doc will be restored to its previous state.

    [TABLE]

    **Returns:** undefined
- name: main#xhr()
  id: dojo/main#1_10dojo_main_xhr
  summary: null
  belongs_to: main
  description: |-
    ### `xhr` `(method,args)`

    Defined by [dojox/rpc/Client](http://dojotoolkit.org/api/1.10/dojox/rpc/Client)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | method    | undefined |             |
    | args      | undefined |             |

    **Returns:** undefined
- name: main#xhrDelete()
  id: dojo/main#1_10dojo_main_xhrDelete
  summary: Sends an HTTP DELETE request to the server
  belongs_to: main
  description: |-
    ### `xhrDelete` `(args)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    Sends an HTTP DELETE request to the server.

    [TABLE]

    **Returns:** undefined
- name: main#xhrGet()
  id: dojo/main#1_10dojo_main_xhrGet
  summary: Sends an HTTP GET request to the server
  belongs_to: main
  description: |-
    ### `xhrGet` `(args)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    Sends an HTTP GET request to the server.

    [TABLE]

    **Returns:** undefined
- name: main#xhrPost()
  id: dojo/main#1_10dojo_main_xhrPost
  summary: Sends an HTTP POST request to the server
  belongs_to: main
  description: |-
    ### `xhrPost` `(args)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    Sends an HTTP POST request to the server. In addition to the properties listed for the dojo.\_\_XhrArgs type, the following property is allowed:

    [TABLE]

    **Returns:** undefined
- name: main#xhrPut()
  id: dojo/main#1_10dojo_main_xhrPut
  summary: Sends an HTTP PUT request to the server
  belongs_to: main
  description: "### `xhrPut` `(args)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.html](http://dojotoolkit.org/api/1.10/dojo/main.html)"
- name: main.back
  id: dojo/main.back
  summary: adds a state object (args) to the history list
  description: "# dojo/main.back\n\n## Summary\n\nBrowser history management resources\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.back.html](http://dojotoolkit.org/api/1.10/dojo/main.back.html)"
- name: main.back#addToHistory()
  id: dojo/main.back#1_10dojo_main_back_addToHistory
  summary: adds a state object (args) to the history list
  belongs_to: main.back
  description: "### `addToHistory` `(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      back.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n    \n```"
- name: main.back#getHash()
  id: dojo/main.back#1_10dojo_main_back_getHash
  summary: null
  belongs_to: main.back
  description: |-
    ### `getHash` `()`

    Defined by [dojo/back](back)

    **Returns:** undefined
- name: main.back#goBack()
  id: dojo/main.back#1_10dojo_main_back_goBack
  summary: private method
  belongs_to: main.back
  description: |-
    ### `goBack` `()`

    Defined by [dojo/back](back)

    private method. Do not call this directly.
- name: main.back#goForward()
  id: dojo/main.back#1_10dojo_main_back_goForward
  summary: private method
  belongs_to: main.back
  description: |-
    ### `goForward` `()`

    Defined by [dojo/back](back)

    private method. Do not call this directly.
- name: main.back#init()
  id: dojo/main.back#1_10dojo_main_back_init
  summary: Initializes the undo stack
  belongs_to: main.back
  description: "### `init` `()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.back.html](http://dojotoolkit.org/api/1.10/dojo/main.back.html)"
- name: main.back#setHash()
  id: dojo/main.back#1_10dojo_main_back_setHash
  summary: adds a state object (args) to the history list
  belongs_to: main.back
  description: "# dojo/main.back\n\n## Summary\n\nBrowser history management resources\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.back.html](http://dojotoolkit.org/api/1.10/dojo/main.back.html)"
- name: main.back#setInitialState()
  id: dojo/main.back#1_10dojo_main_back_setInitialState
  summary: adds a state object (args) to the history list
  belongs_to: main.back
  description: "# dojo/main.back\n\n## Summary\n\nBrowser history management resources\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.back.html](http://dojotoolkit.org/api/1.10/dojo/main.back.html)"
- name: main.cldr
  id: dojo/main.cldr
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.cldr\n\n## Properties\n\n### monetary\n\nDefined by: [dojo/cldr/monetary](cldr/monetary)\n\nTODOC\n\n### supplemental\n\nDefined by: [dojo/cldr/supplemental](cldr/supplemental)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.cldr.html](http://dojotoolkit.org/api/1.10/dojo/main.cldr.html)"
- name: main.cldr#monetary
  id: dojo/main.cldr#1_10dojo_main_cldr_monetary
  summary: null
  belongs_to: main.cldr
  description: |-
    ### monetary

    Defined by: [dojo/cldr/monetary](cldr/monetary)

    TODOC
- name: main.cldr#supplemental
  id: dojo/main.cldr#1_10dojo_main_cldr_supplemental
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.cldr
  description: "### supplemental\n\nDefined by: [dojo/cldr/supplemental](cldr/supplemental)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.cldr.html](http://dojotoolkit.org/api/1.10/dojo/main.cldr.html)"
- name: main.colors
  id: dojo/main.colors
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.colors\n\n## Methods\n\n### `makeGrey``(g,a)`\n\nDefined by [dojo/colors](colors)\n\ncreates a greyscale color with an optional alpha\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.colors.html](http://dojotoolkit.org/api/1.10/dojo/main.colors.html)"
- name: main.colors#makeGrey()
  id: dojo/main.colors#1_10dojo_main_colors_makeGrey
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.colors
  description: "### `makeGrey` `(g,a)`\n\nDefined by [dojo/colors](colors)\n\ncreates a greyscale color with an optional alpha\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.colors.html](http://dojotoolkit.org/api/1.10/dojo/main.colors.html)"
- name: main.config
  id: dojo/main.config
  summary: This module defines the user configuration during bootstrap
  description: "# dojo/main.config\n\n## Summary\n\nThis module defines the user configuration during bootstrap.\n\nBy defining user configuration as a module value, an entire configuration can be specified in a build, thereby eliminating the need for sniffing and or explicitly setting in the global variable dojoConfig. Also, when multiple instances of dojo exist in a single application, each will necessarily be located at an unique absolute module identifier as given by the package configuration. Implementing configuration as a module allows for specifying unique, per-instance configurations.\n\n## Examples\n\n### Example 1\n\nCreate a second instance of dojo with a different, instance-unique configuration (assume the loader and dojo.js are already loaded).\n\n``` javascript\n// specify a configuration that creates a new instance of dojo at the absolute module identifier \"myDojo\"\nrequire({\n    packages:[{\n        name:\"myDojo\",\n        location:\".\", //assume baseUrl points to dojo.js\n    }]\n});\n\n// specify a configuration for the myDojo instance\ndefine(\"myDojo/config\", {\n    // normal configuration variables go here, e.g.,\n    locale:\"fr-ca\"\n});\n\n// load and use the new instance of dojo\nrequire([\"myDojo\"], function(dojo){\n    // dojo is the new instance of dojo\n    // use as required\n});\n```\n\n## Properties\n\n### `addOnLoad`\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nAdds a callback via [dojo/ready](ready). Useful when Dojo is added after the page loads and djConfig.afterOnLoad is true. Supports the same arguments as [dojo/ready](ready). When using a function reference, use `djConfig.addOnLoad = function(){};`. For object with function name use `djConfig.addOnLoad = [myObject, \"functionName\"];` and for object with function reference use `djConfig.addOnLoad = [myObject, function(){}];`\n\n### afterOnLoad\n\nDefined by: [dojo/ready](ready)\n\n### baseUrl\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### `callback`\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nDefines a callback to be used when dependencies are defined before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with deps.\n\n### debugContainerId\n\nDefined by: [dojo/\\_firebug/firebug](_firebug/firebug)\n\n### debugHeight\n\nDefined by: [dojo/robotx](robotx)\n\n### defaultDuration\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nDefault duration, in milliseconds, for wipe and fade animations within dijits. Assigned to dijit.defaultDuration.\n\n### deferredInstrumentation\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nWhether deferred instrumentation should be loaded or included in builds.\n\n### `deps`\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nDefines dependencies to be used before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with callback.\n\n### dojoBlankHtmlUrl\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nUsed by some modules to configure an empty iframe. Used by [dojo/io/iframe](io/iframe) and [dojo/back](back), and [dijit/popup](http://dojotoolkit.org/api/1.10/dijit/popup) support in IE where an iframe is needed to make sure native controls do not bleed through the popups. Normally this configuration variable does not need to be set, except when using cross-domain/CDN Dojo builds. Save dojo/resources/blank.html to your domain and set `djConfig.dojoBlankHtmlUrl` to the path on your domain your copy of blank.html.\n\n### extraLocale\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nNo default value. Specifies additional locales whose resources should also be loaded alongside the default locale when calls to `dojo.requireLocalization()` are processed.\n\n### ioPublish\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nSet this to true to enable publishing of topics for the different phases of IO operations. Publishing is done via [dojo/topic.publish()](topic#publish). See [dojo/main.\\_\\_IoPublish](main.__iopublish) for a list of topics that are published.\n\n### isDebug\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nDefaults to `false`. If set to `true`, ensures that Dojo provides extended debugging feedback via Firebug. If Firebug is not available on your platform, setting `isDebug` to `true` will force Dojo to pull in (and display) the version of Firebug Lite which is integrated into the Dojo distribution, thereby always providing a debugging/logging console when `isDebug` is enabled. Note that Firebug's `console.*` methods are ALWAYS defined by Dojo. If `isDebug` is false and you are on a platform without Firebug, these methods will be defined as no-ops.\n\n### locale\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nThe locale to assume for loading localized resources in this page, specified according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt). Must be specified entirely in lowercase, e.g. `en-us` and `zh-cn`. See the documentation for `dojo.i18n` and `dojo.requireLocalization` for details on loading localized resources. If no locale is specified, Dojo assumes the locale of the user agent, according to `navigator.userLanguage` or `navigator.language` properties.\n\n### modulePaths\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nA map of module names to paths relative to `dojo.baseUrl`. The key/value pairs correspond directly to the arguments which `dojo.registerModulePath` accepts. Specifying `djConfig.modulePaths = { \"foo\": \"../../bar\" }` is the equivalent of calling `dojo.registerModulePath(\"foo\", \"../../bar\");`. Multiple modules may be configured via `djConfig.modulePaths`.\n\n### parseOnLoad\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nRun the parser after the page is loaded\n\n### require\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nAn array of module names to be loaded immediately after dojo.js has been included in a page.\n\n### transparentColor\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nArray containing the r, g, b components used as transparent color in dojo.Color; if undefined, \\[255,255,255\\] (white) will be used.\n\n### urchin\n\nDefined by: [dojox/analytics/Urchin](http://dojotoolkit.org/api/1.10/dojox/analytics/Urchin)\n\nUsed by `dojox.analytics.Urchin` as the default UA-123456-7 account number used when being created. Alternately, you can pass an acct:\"\" parameter to the constructor a la: new dojox.analytics.Urchin({ acct:\"UA-123456-7\" });\n\n### useCustomLogger\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nIf set to a value that evaluates to true such as a string or array and isDebug is true and Firebug is not available or running, then it bypasses the creation of Firebug Lite allowing you to define your own console object.\n\n### useDeferredInstrumentation\n\nDefined by: [dojo/\\_base/config](_base/config)\n\nWhether the deferred instrumentation should be used.\n\n- `\"report-rejections\"`: report each rejection as it occurs.\n- `true` or `1` or `\"report-unhandled-rejections\"`: wait 1 second in an attempt to detect unhandled rejections.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.config.html](http://dojotoolkit.org/api/1.10/dojo/main.config.html)"
- name: main.contentHandlers
  id: dojo/main.contenthandlers
  summary: A map of available XHR transport handle types
  description: "# dojo/main.contentHandlers\n\n## Summary\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls. Each contentHandler is called, passing the xhr object for manipulation. The return value from the contentHandler will be passed to the `load` or `handle` functions defined in the original xhr call.\n\n## Examples\n\n### Example 1\n\nCreating a custom content-handler:\n\n``` javascript\nxhr.contentHandlers.makeCaps = function(xhr){\n    return xhr.responseText.toUpperCase();\n}\n// and later:\ndojo.xhrGet({\n    url:\"foo.txt\",\n    handleAs:\"makeCaps\",\n    load: function(data){ /* data is a toUpper version of foo.txt */ }\n});\n```\n\n## Methods\n\n### `auto``(xhr)`\n\nDefined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n### `javascript``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which evaluates the response data, expecting it to be valid JavaScript\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which returns a JavaScript object created from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-filtered``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which expects comment-filtered JSON.\n\nA contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent \"JavaScript Hijacking\", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.\n\nWill throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your \"JSON\" with: {}&&\n\nuse djConfig.useCommentedJson = true to turn off the notice\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-optional``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `text``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which simply returns the plaintext response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `xml``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/main.contentHandlers.html)"
- name: main.contentHandlers#auto()
  id: dojo/main.contenthandlers#1_10dojo_main_contentHandlers_auto
  summary: null
  belongs_to: main.contentHandlers
  description: |-
    ### `auto` `(xhr)`

    Defined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |
- name: main.contentHandlers#javascript()
  id: dojo/main.contenthandlers#1_10dojo_main_contentHandlers_javascript
  summary: null
  belongs_to: main.contentHandlers
  description: |-
    ### `javascript` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which evaluates the response data, expecting it to be valid JavaScript

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main.contentHandlers#json()
  id: dojo/main.contenthandlers#1_10dojo_main_contentHandlers_json
  summary: null
  belongs_to: main.contentHandlers
  description: |-
    ### `json` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which returns a JavaScript object created from the response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main.contentHandlers#json-comment-filtered()
  id: dojo/main.contenthandlers#1_10dojo_main_contentHandlers_json-comment-filtered
  summary: A contentHandler which expects comment-filtered JSON
  belongs_to: main.contentHandlers
  description: |-
    ### `json-comment-filtered` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which expects comment-filtered JSON.

    A contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent "JavaScript Hijacking", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.

    Will throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your "JSON" with: {}&&

    use djConfig.useCommentedJson = true to turn off the notice

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main.contentHandlers#json-comment-optional()
  id: dojo/main.contenthandlers#1_10dojo_main_contentHandlers_json-comment-optional
  summary: A contentHandler which checks the presence of comment-filtered JSON and alternates between the json and json-comment-filtered contentHandlers
  belongs_to: main.contentHandlers
  description: |-
    ### `json-comment-optional` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main.contentHandlers#text()
  id: dojo/main.contenthandlers#1_10dojo_main_contentHandlers_text
  summary: null
  belongs_to: main.contentHandlers
  description: |-
    ### `text` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which simply returns the plaintext response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main.contentHandlers#xml()
  id: dojo/main.contenthandlers#1_10dojo_main_contentHandlers_xml
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.contentHandlers
  description: "### `xml` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/main.contentHandlers.html)"
- name: main.currency
  id: dojo/main.currency
  summary: extends dojo.number to provide culturally-appropriate formatting of values in various world currencies, including use of a currency symbol
  description: "# dojo/main.currency\n\n## Summary\n\nlocalized formatting and parsing routines for currencies\n\nextends dojo.number to provide culturally-appropriate formatting of values in various world currencies, including use of a currency symbol. The currencies are specified by a three-letter international symbol in all uppercase, and support for the currencies is provided by the data in `dojo.cldr`. The scripts generating dojo.cldr specify which currency support is included. A fixed number of decimal places is determined based on the currency type and is not determined by the 'pattern' argument. The fractional portion is optional, by default, and variable length decimals are not supported.\n\n## Methods\n\n### `format``(value,options)`\n\nDefined by [dojo/currency](currency)\n\nFormat a Number as a currency, using locale-specific settings\n\nCreate a string from a Number using a known, localized pattern. [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements) appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr) as well as the appropriate symbols and delimiters and number of decimal places.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `parse``(expression,options)`\n\nDefined by [dojo/currency](currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `regexp``(options)`\n\nDefined by [dojo/currency](currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.currency.html](http://dojotoolkit.org/api/1.10/dojo/main.currency.html)"
- name: main.currency#format()
  id: dojo/main.currency#1_10dojo_main_currency_format
  summary: Create a string from a Number using a known, localized pattern
  belongs_to: main.currency
  description: |-
    ### `format` `(value,options)`

    Defined by [dojo/currency](currency)

    Format a Number as a currency, using locale-specific settings

    Create a string from a Number using a known, localized pattern. [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements) appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr) as well as the appropriate symbols and delimiters and number of decimal places.

    [TABLE]

    **Returns:** undefined
- name: main.currency#parse()
  id: dojo/main.currency#1_10dojo_main_currency_parse
  summary: null
  belongs_to: main.currency
  description: |-
    ### `parse` `(expression,options)`

    Defined by [dojo/currency](currency)

    [TABLE]

    **Returns:** undefined
- name: main.currency#regexp()
  id: dojo/main.currency#1_10dojo_main_currency_regexp
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.currency
  description: "### `regexp` `(options)`\n\nDefined by [dojo/currency](currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.currency.html](http://dojotoolkit.org/api/1.10/dojo/main.currency.html)"
- name: main.data
  id: dojo/main.data
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.data\n\n## Properties\n\n### api\n\nDefined by: [dojo/data/api/Read](data/api/read)\n\n### util\n\nDefined by: [dojo/data/util/filter](data/util/filter)\n\n## Methods\n\n### `ItemFileReadStore``()`\n\nDefined by [dojo/data/ItemFileReadStore](data/itemfilereadstore)\n\n### `ItemFileWriteStore``()`\n\nDefined by [dojo/data/ItemFileWriteStore](data/itemfilewritestore)\n\n### `ObjectStore``()`\n\nDefined by [dojo/data/ObjectStore](data/objectstore)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.data.html](http://dojotoolkit.org/api/1.10/dojo/main.data.html)"
- name: main.data#api
  id: dojo/main.data#1_10dojo_main_data_api
  summary: null
  belongs_to: main.data
  description: |-
    ### api

    Defined by: [dojo/data/api/Read](data/api/read)
- name: main.data#ItemFileReadStore()
  id: dojo/main.data#1_10dojo_main_data_ItemFileReadStore
  summary: null
  belongs_to: main.data
  description: |-
    ### `ItemFileReadStore` `()`

    Defined by [dojo/data/ItemFileReadStore](data/itemfilereadstore)
- name: main.data#ItemFileWriteStore()
  id: dojo/main.data#1_10dojo_main_data_ItemFileWriteStore
  summary: null
  belongs_to: main.data
  description: |-
    ### `ItemFileWriteStore` `()`

    Defined by [dojo/data/ItemFileWriteStore](data/itemfilewritestore)
- name: main.data#ObjectStore()
  id: dojo/main.data#1_10dojo_main_data_ObjectStore
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.data
  description: "### `ObjectStore` `()`\n\nDefined by [dojo/data/ObjectStore](data/objectstore)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.data.html](http://dojotoolkit.org/api/1.10/dojo/main.data.html)"
- name: main.data#util
  id: dojo/main.data#1_10dojo_main_data_util
  summary: null
  belongs_to: main.data
  description: |-
    ### util

    Defined by: [dojo/data/util/filter](data/util/filter)

    ## Methods
- name: main.date
  id: dojo/main.date
  summary: Compare two date objects by date, time, or both
  description: "# dojo/main.date\n\n## Properties\n\n### stamp\n\nDefined by: [dojo/date/stamp](date/stamp)\n\nTODOC\n\n## Methods\n\n### `add``(date,interval,amount)`\n\nDefined by [dojo/date](date)\n\nAdd to a Date in intervals of different size, from milliseconds to years\n\n|           |        |                                                                                                                                                           |\n|-----------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                               |\n| date      | Date   | Date object to start with                                                                                                                                 |\n| interval  | String | A string representing the interval. One of the following: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"quarter\", \"week\", \"weekday\" |\n| amount    | int    | How much to add to the date.                                                                                                                              |\n\n**Returns:** instance\n\n### `compare``(date1,date2,portion)`\n\nDefined by [dojo/date](date)\n\nCompare two date objects by date, time, or both.\n\nReturns 0 if equal, positive if a \\> b, else negative.\n\n[TABLE]\n\n**Returns:** number\n\n### `difference``(date1,date2,interval)`\n\nDefined by [dojo/date](date)\n\nGet the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `getDaysInMonth``(dateObject)`\n\nDefined by [dojo/date](date)\n\nReturns the number of days in the month used by dateObject\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** number \\| undefined\n\n### `getTimezoneName``(dateObject)`\n\nDefined by [dojo/date](date)\n\nGet the user's time zone as provided by the browser\n\nTry to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See <http://www.twinsun.com/tz/tz-link.htm> Note: results may be inconsistent across browsers.\n\n|            |      |                                                                   |\n|------------|------|-------------------------------------------------------------------|\n| Parameter  | Type | Description                                                       |\n| dateObject | Date | Needed because the timezone may vary with time (daylight savings) |\n\n**Returns:** undefined\n\n### `isLeapYear``(dateObject)`\n\nDefined by [dojo/date](date)\n\nDetermines if the year of the dateObject is a leap year\n\nLeap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.date.html](http://dojotoolkit.org/api/1.10/dojo/main.date.html)"
- name: main.date#add()
  id: dojo/main.date#1_10dojo_main_date_add
  summary: null
  belongs_to: main.date
  description: |-
    ### `add` `(date,interval,amount)`

    Defined by [dojo/date](date)

    Add to a Date in intervals of different size, from milliseconds to years

    |           |        |                                                                                                                                                           |
    |-----------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                                                                                               |
    | date      | Date   | Date object to start with                                                                                                                                 |
    | interval  | String | A string representing the interval. One of the following: "year", "month", "day", "hour", "minute", "second", "millisecond", "quarter", "week", "weekday" |
    | amount    | int    | How much to add to the date.                                                                                                                              |

    **Returns:** instance
- name: main.date#compare()
  id: dojo/main.date#1_10dojo_main_date_compare
  summary: Compare two date objects by date, time, or both
  belongs_to: main.date
  description: |-
    ### `compare` `(date1,date2,portion)`

    Defined by [dojo/date](date)

    Compare two date objects by date, time, or both.

    Returns 0 if equal, positive if a \> b, else negative.

    [TABLE]

    **Returns:** number
- name: main.date#difference()
  id: dojo/main.date#1_10dojo_main_date_difference
  summary: Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer
  belongs_to: main.date
  description: |-
    ### `difference` `(date1,date2,interval)`

    Defined by [dojo/date](date)

    Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.

    [TABLE]

    **Returns:** undefined
- name: main.date#getDaysInMonth()
  id: dojo/main.date#1_10dojo_main_date_getDaysInMonth
  summary: null
  belongs_to: main.date
  description: |-
    ### `getDaysInMonth` `(dateObject)`

    Defined by [dojo/date](date)

    Returns the number of days in the month used by dateObject

    |            |      |             |
    |------------|------|-------------|
    | Parameter  | Type | Description |
    | dateObject | Date |             |

    **Returns:** number \| undefined
- name: main.date#getTimezoneName()
  id: dojo/main.date#1_10dojo_main_date_getTimezoneName
  summary: Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone
  belongs_to: main.date
  description: |-
    ### `getTimezoneName` `(dateObject)`

    Defined by [dojo/date](date)

    Get the user's time zone as provided by the browser

    Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See <http://www.twinsun.com/tz/tz-link.htm> Note: results may be inconsistent across browsers.

    |            |      |                                                                   |
    |------------|------|-------------------------------------------------------------------|
    | Parameter  | Type | Description                                                       |
    | dateObject | Date | Needed because the timezone may vary with time (daylight savings) |

    **Returns:** undefined
- name: main.date#isLeapYear()
  id: dojo/main.date#1_10dojo_main_date_isLeapYear
  summary: 'Leap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400'
  belongs_to: main.date
  description: "### `isLeapYear` `(dateObject)`\n\nDefined by [dojo/date](date)\n\nDetermines if the year of the dateObject is a leap year\n\nLeap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.date.html](http://dojotoolkit.org/api/1.10/dojo/main.date.html)"
- name: main.date#stamp
  id: dojo/main.date#1_10dojo_main_date_stamp
  summary: null
  belongs_to: main.date
  description: |-
    ### stamp

    Defined by: [dojo/date/stamp](date/stamp)

    TODOC

    ## Methods
- name: main.dnd
  id: dojo/main.dnd
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.dnd\n\n## Properties\n\n### autoscroll\n\nDefined by: [dojo/dnd/autoscroll](dnd/autoscroll)\n\nUsed by [dojo/dnd/Manager](dnd/manager) to scroll document or internal node when the user drags near the edge of the viewport or a scrollable node\n\n### move\n\nDefined by: [dojo/dnd/move](dnd/move)\n\n## Methods\n\n### `AutoSource``()`\n\nDefined by [dojo/dnd/AutoSource](dnd/autosource)\n\n### `Avatar``()`\n\nDefined by [dojo/dnd/Avatar](dnd/avatar)\n\n### `Container``()`\n\nDefined by [dojo/dnd/Container](dnd/container)\n\n### `Manager``()`\n\nDefined by [dojo/dnd/Manager](dnd/manager)\n\n### `Moveable``()`\n\nDefined by [dojo/dnd/Moveable](dnd/moveable)\n\n### `Mover``()`\n\nDefined by [dojo/dnd/Mover](dnd/mover)\n\n### `Selector``()`\n\nDefined by [dojo/dnd/Selector](dnd/selector)\n\n### `Source``()`\n\nDefined by [dojo/dnd/Source](dnd/source)\n\n### `Target``()`\n\nDefined by [dojo/dnd/Target](dnd/target)\n\n### `TimedMoveable``()`\n\nDefined by [dojo/dnd/TimedMoveable](dnd/timedmoveable)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.dnd.html](http://dojotoolkit.org/api/1.10/dojo/main.dnd.html)"
- name: main.dnd#autoscroll
  id: dojo/main.dnd#1_10dojo_main_dnd_autoscroll
  summary: null
  belongs_to: main.dnd
  description: |-
    ### autoscroll

    Defined by: [dojo/dnd/autoscroll](dnd/autoscroll)

    Used by [dojo/dnd/Manager](dnd/manager) to scroll document or internal node when the user drags near the edge of the viewport or a scrollable node
- name: main.dnd#AutoSource()
  id: dojo/main.dnd#1_10dojo_main_dnd_AutoSource
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `AutoSource` `()`

    Defined by [dojo/dnd/AutoSource](dnd/autosource)
- name: main.dnd#Avatar()
  id: dojo/main.dnd#1_10dojo_main_dnd_Avatar
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Avatar` `()`

    Defined by [dojo/dnd/Avatar](dnd/avatar)
- name: main.dnd#Container()
  id: dojo/main.dnd#1_10dojo_main_dnd_Container
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Container` `()`

    Defined by [dojo/dnd/Container](dnd/container)
- name: main.dnd#Manager()
  id: dojo/main.dnd#1_10dojo_main_dnd_Manager
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Manager` `()`

    Defined by [dojo/dnd/Manager](dnd/manager)
- name: main.dnd#move
  id: dojo/main.dnd#1_10dojo_main_dnd_move
  summary: null
  belongs_to: main.dnd
  description: |-
    ### move

    Defined by: [dojo/dnd/move](dnd/move)

    ## Methods
- name: main.dnd#Moveable()
  id: dojo/main.dnd#1_10dojo_main_dnd_Moveable
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Moveable` `()`

    Defined by [dojo/dnd/Moveable](dnd/moveable)
- name: main.dnd#Mover()
  id: dojo/main.dnd#1_10dojo_main_dnd_Mover
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Mover` `()`

    Defined by [dojo/dnd/Mover](dnd/mover)
- name: main.dnd#Selector()
  id: dojo/main.dnd#1_10dojo_main_dnd_Selector
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Selector` `()`

    Defined by [dojo/dnd/Selector](dnd/selector)
- name: main.dnd#Source()
  id: dojo/main.dnd#1_10dojo_main_dnd_Source
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Source` `()`

    Defined by [dojo/dnd/Source](dnd/source)
- name: main.dnd#Target()
  id: dojo/main.dnd#1_10dojo_main_dnd_Target
  summary: null
  belongs_to: main.dnd
  description: |-
    ### `Target` `()`

    Defined by [dojo/dnd/Target](dnd/target)
- name: main.dnd#TimedMoveable()
  id: dojo/main.dnd#1_10dojo_main_dnd_TimedMoveable
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.dnd
  description: "### `TimedMoveable` `()`\n\nDefined by [dojo/dnd/TimedMoveable](dnd/timedmoveable)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.dnd.html](http://dojotoolkit.org/api/1.10/dojo/main.dnd.html)"
- name: main.doc
  id: dojo/main.doc
  summary: Alias for the current document
  description: "# dojo/main.doc\n\n## Summary\n\nAlias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().\n\nUse this rather than referring to 'window.document' to ensure your code runs correctly in managed contexts.\n\n## Examples\n\n### Example 1\n\n``` javascript\nn.appendChild(dojo.doc.createElement('div'));\n```\n\n## Properties\n\n### documentElement\n\nDefined by: [dojox/gfx/\\_base](http://dojotoolkit.org/api/1.10/dojox/gfx/_base)\n\n### dojoClick\n\nDefined by: [dojox/mobile/common](http://dojotoolkit.org/api/1.10/dojox/mobile/common)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.doc.html](http://dojotoolkit.org/api/1.10/dojo/main.doc.html)"
- name: main.doc#documentElement
  id: dojo/main.doc#1_10dojo_main_doc_documentElement
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.doc
  description: "### documentElement\n\nDefined by: [dojox/gfx/\\_base](http://dojotoolkit.org/api/1.10/dojox/gfx/_base)\n\n### dojoClick\n\nDefined by: [dojox/mobile/common](http://dojotoolkit.org/api/1.10/dojox/mobile/common)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.doc.html](http://dojotoolkit.org/api/1.10/dojo/main.doc.html)"
- name: main.fx
  id: dojo/main.fx
  summary: Collection of easing functions to use beyond the default dojo._defaultEasing function
  description: "# dojo/main.fx\n\n## Summary\n\nEffects library on top of Base animations\n\n## Properties\n\n### easing\n\nDefined by: [dojo/fx/easing](fx/easing)\n\nCollection of easing functions to use beyond the default `dojo._defaultEasing` function.\n\n## Methods\n\n### `chain``(animations)`\n\nDefined by [dojo/fx](fx)\n\nChain a list of `dojo/_base/fx.Animation`s to run in sequence\n\nReturn a [dojo/\\_base/fx.Animation](_base/fx#Animation) which will play all passed [dojo/\\_base/fx.Animation](_base/fx#Animation) instances in sequence, firing its own synthesized events simulating a single animation. (eg: onEnd of this animation means the end of the chain, not the individual animations within)\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nOnce `node` is faded out, fade in `otherNode`\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.chain([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n```\n\n### `combine``(animations)`\n\nDefined by [dojo/fx](fx)\n\nCombine a list of `dojo/_base/fx.Animation`s to run in parallel\n\nCombine an array of [dojo/\\_base/fx.Animation](_base/fx#Animation)s to run in parallel, providing a new [dojo/\\_base/fx.Animation](_base/fx#Animation) instance encompasing each animation, firing standard animation events.\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nFade out `node` while fading in `otherNode` simultaneously\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.combine([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n```\n\n### Example 2\n\nWhen the longest animation ends, execute a function:\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    var anim = fx.combine([\n        fx.fadeIn({ node: n, duration:700 }),\n        fx.fadeOut({ node: otherNode, duration: 300 })\n    ]);\n    aspect.after(anim, \"onEnd\", function(){\n        // overall animation is done.\n    }, true);\n    anim.play(); // play the animation\n});\n```\n\n### `slideTo``(args)`\n\nDefined by [dojo/fx](fx)\n\nSlide a node to a new top/left position\n\nReturns an animation that will slide \"node\" defined in args Object from its current position to the position defined by (args.left, args.top).\n\n|           |        |                                                                                                                                                                                                              |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                                                  |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on). Special args members are `top` and `left`, which indicate the new position to slide to. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n.slideTo({ node: node, left:\"40\", top:\"50\", units:\"px\" }).play()\n```\n\n### `Toggler``()`\n\nDefined by [dojo/fx/Toggler](fx/toggler)\n\n### `wipeIn``(args)`\n\nDefined by [dojo/fx](fx)\n\nExpand a node to it's natural height.\n\nReturns an animation that will expand the node defined in 'args' object from it's current height to it's natural height (with no scrollbar). Node must have no margin/border/padding.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.wipeIn({\n        node:\"someId\"\n    }).play()\n});\n```\n\n### `wipeOut``(args)`\n\nDefined by [dojo/fx](fx)\n\nShrink a node to nothing and hide it.\n\nReturns an animation that will shrink node defined in \"args\" from it's current height to 1px, and then hide it.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.wipeOut({ node:\"someId\" }).play()\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.fx.html](http://dojotoolkit.org/api/1.10/dojo/main.fx.html)"
- name: main.fx#chain()
  id: dojo/main.fx#1_10dojo_main_fx_chain
  summary: Return a dojo/_base/fx.Animation which will play all passed dojo/_base/fx.Animation instances in sequence, firing its own synthesized events simulating a single animation
  belongs_to: main.fx
  description: "### `chain` `(animations)`\n\nDefined by [dojo/fx](fx)\n\nChain a list of `dojo/_base/fx.Animation`s to run in sequence\n\nReturn a [dojo/\\_base/fx.Animation](_base/fx#Animation) which will play all passed [dojo/\\_base/fx.Animation](_base/fx#Animation) instances in sequence, firing its own synthesized events simulating a single animation. (eg: onEnd of this animation means the end of the chain, not the individual animations within)\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nOnce `node` is faded out, fade in `otherNode`\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.chain([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n    \n```"
- name: main.fx#combine()
  id: dojo/main.fx#1_10dojo_main_fx_combine
  summary: Combine an array of dojo/_base/fx.Animations to run in parallel, providing a new dojo/_base/fx.Animation instance encompasing each animation, firing standard animation events
  belongs_to: main.fx
  description: "### `combine` `(animations)`\n\nDefined by [dojo/fx](fx)\n\nCombine a list of `dojo/_base/fx.Animation`s to run in parallel\n\nCombine an array of [dojo/\\_base/fx.Animation](_base/fx#Animation)s to run in parallel, providing a new [dojo/\\_base/fx.Animation](_base/fx#Animation) instance encompasing each animation, firing standard animation events.\n\n|            |                                                    |             |\n|------------|----------------------------------------------------|-------------|\n| Parameter  | Type                                               | Description |\n| animations | [dojo/\\_base/fx.Animation](_base/fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nFade out `node` while fading in `otherNode` simultaneously\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.combine([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n    \n```\n\n### Example 2\n\nWhen the longest animation ends, execute a function:\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    var anim = fx.combine([\n        fx.fadeIn({ node: n, duration:700 }),\n        fx.fadeOut({ node: otherNode, duration: 300 })\n    ]);\n    aspect.after(anim, \"onEnd\", function(){\n        // overall animation is done.\n    }, true);\n    anim.play(); // play the animation\n});\n    \n```"
- name: main.fx#easing
  id: dojo/main.fx#1_10dojo_main_fx_easing
  summary: Collection of easing functions to use beyond the default dojo._defaultEasing function
  belongs_to: main.fx
  description: |-
    ### easing

    Defined by: [dojo/fx/easing](fx/easing)

    Collection of easing functions to use beyond the default `dojo._defaultEasing` function.

    ## Methods
- name: main.fx#slideTo()
  id: dojo/main.fx#1_10dojo_main_fx_slideTo
  summary: Returns an animation that will slide "node" defined in args Object from its current position to the position defined by (args.left, args.top)
  belongs_to: main.fx
  description: "### `slideTo` `(args)`\n\nDefined by [dojo/fx](fx)\n\nSlide a node to a new top/left position\n\nReturns an animation that will slide \"node\" defined in args Object from its current position to the position defined by (args.left, args.top).\n\n|           |        |                                                                                                                                                                                                              |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                                                  |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on). Special args members are `top` and `left`, which indicate the new position to slide to. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      .slideTo({ node: node, left:\"40\", top:\"50\", units:\"px\" }).play()\n    \n```"
- name: main.fx#Toggler()
  id: dojo/main.fx#1_10dojo_main_fx_Toggler
  summary: null
  belongs_to: main.fx
  description: |-
    ### `Toggler` `()`

    Defined by [dojo/fx/Toggler](fx/toggler)
- name: main.fx#wipeIn()
  id: dojo/main.fx#1_10dojo_main_fx_wipeIn
  summary: Expand a node to it's natural height
  belongs_to: main.fx
  description: "### `wipeIn` `(args)`\n\nDefined by [dojo/fx](fx)\n\nExpand a node to it's natural height.\n\nReturns an animation that will expand the node defined in 'args' object from it's current height to it's natural height (with no scrollbar). Node must have no margin/border/padding.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.wipeIn({\n        node:\"someId\"\n    }).play()\n});\n    \n```"
- name: main.fx#wipeOut()
  id: dojo/main.fx#1_10dojo_main_fx_wipeOut
  summary: Shrink a node to nothing and hide it
  belongs_to: main.fx
  description: "### `wipeOut` `(args)`\n\nDefined by [dojo/fx](fx)\n\nShrink a node to nothing and hide it.\n\nReturns an animation that will shrink node defined in \"args\" from it's current height to 1px, and then hide it.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.wipeOut({ node:\"someId\" }).play()\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.fx.html](http://dojotoolkit.org/api/1.10/dojo/main.fx.html)"
- name: main.gears
  id: dojo/main.gears
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.gears\n\n## Summary\n\nTODOC\n\n## Properties\n\n### available\n\nDefined by: [dojo/gears](gears)\n\nTrue if client is using Google Gears\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.gears.html](http://dojotoolkit.org/api/1.10/dojo/main.gears.html)"
- name: main.gears#available
  id: dojo/main.gears#1_10dojo_main_gears_available
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.gears
  description: "### available\n\nDefined by: [dojo/gears](gears)\n\nTrue if client is using Google Gears\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.gears.html](http://dojotoolkit.org/api/1.10/dojo/main.gears.html)"
- name: main.global
  id: dojo/main.global
  summary: Alias for the current window
  description: "# dojo/main.global\n\n## Summary\n\nAlias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().\n\nUse this rather than referring to 'window' to ensure your code runs correctly in managed contexts.\n\n## Methods\n\n### `$``()`\n\nDefined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)\n\n**Returns:** undefined\n\n### `GoogleSearchStoreCallback_undefined_NaN``(start,data,responseCode,errorMsg)`\n\nDefined by [dojox/data/GoogleSearchStore](http://dojotoolkit.org/api/1.10/dojox/data/GoogleSearchStore)\n\n|              |           |             |\n|--------------|-----------|-------------|\n| Parameter    | Type      | Description |\n| start        | undefined |             |\n| data         | undefined |             |\n| responseCode | undefined |             |\n| errorMsg     | undefined |             |\n\n### `jQuery``()`\n\nDefined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)\n\n**Returns:** undefined\n\n### `swfIsInHTML``()`\n\nDefined by [dojox/av/FLVideo](http://dojotoolkit.org/api/1.10/dojox/av/FLVideo)\n\n### `undefined_onload``()`\n\nDefined by [dojo/request/iframe](request/iframe)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.global.html](http://dojotoolkit.org/api/1.10/dojo/main.global.html)"
- name: main.global#$()
  id: dojo/main.global#1_10dojo_main_global_$
  summary: null
  belongs_to: main.global
  description: |-
    ### `$` `()`

    Defined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)

    **Returns:** undefined
- name: main.global#GoogleSearchStoreCallback_undefined_NaN()
  id: dojo/main.global#1_10dojo_main_global_GoogleSearchStoreCallback_undefined_NaN
  summary: null
  belongs_to: main.global
  description: |-
    ### `GoogleSearchStoreCallback_undefined_NaN` `(start,data,responseCode,errorMsg)`

    Defined by [dojox/data/GoogleSearchStore](http://dojotoolkit.org/api/1.10/dojox/data/GoogleSearchStore)

    |              |           |             |
    |--------------|-----------|-------------|
    | Parameter    | Type      | Description |
    | start        | undefined |             |
    | data         | undefined |             |
    | responseCode | undefined |             |
    | errorMsg     | undefined |             |
- name: main.global#jQuery()
  id: dojo/main.global#1_10dojo_main_global_jQuery
  summary: null
  belongs_to: main.global
  description: |-
    ### `jQuery` `()`

    Defined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)

    **Returns:** undefined
- name: main.global#swfIsInHTML()
  id: dojo/main.global#1_10dojo_main_global_swfIsInHTML
  summary: null
  belongs_to: main.global
  description: |-
    ### `swfIsInHTML` `()`

    Defined by [dojox/av/FLVideo](http://dojotoolkit.org/api/1.10/dojox/av/FLVideo)
- name: main.global#undefined_onload()
  id: dojo/main.global#1_10dojo_main_global_undefined_onload
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.global
  description: "### `undefined_onload` `()`\n\nDefined by [dojo/request/iframe](request/iframe)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.global.html](http://dojotoolkit.org/api/1.10/dojo/main.global.html)"
- name: main.html
  id: dojo/main.html
  summary: inserts (replaces) the given content into the given node
  description: "# dojo/main.html\n\n## Summary\n\nTODOC\n\n## Methods\n\n### `set``(node,cont,params)`\n\nDefined by [dojo/html](html)\n\ninserts (replaces) the given content into the given node. dojo/dom-construct.place(cont, node, \"only\") may be a better choice for simple HTML insertion.\n\nUnless you need to use the params capabilities of this method, you should use [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct](dom-construct)..place() has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct](dom-construct)..place does not handle NodeList insertions [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct.place()](dom-construct#place) has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct.place](dom-construct#place) does not handle NodeList insertions or the other capabilities as defined by the params object for this method.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA safe string/node/nodelist content replacement/injection with hooks for extension Example Usage:\n\n``` javascript\nhtml.set(node, \"some string\");\nhtml.set(node, contentNode, {options});\nhtml.set(node, myNode.childNodes, {options});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.html.html](http://dojotoolkit.org/api/1.10/dojo/main.html.html)"
- name: main.html#set()
  id: dojo/main.html#1_10dojo_main_html_set
  summary: inserts (replaces) the given content into the given node
  belongs_to: main.html
  description: "### `set` `(node,cont,params)`\n\nDefined by [dojo/html](html)\n\ninserts (replaces) the given content into the given node. dojo/dom-construct.place(cont, node, \"only\") may be a better choice for simple HTML insertion.\n\nUnless you need to use the params capabilities of this method, you should use [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct](dom-construct)..place() has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct](dom-construct)..place does not handle NodeList insertions [dojo/dom-construct.place(cont, node, \"only\")](dom-construct#place). [dojo/dom-construct.place()](dom-construct#place) has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct.place](dom-construct#place) does not handle NodeList insertions or the other capabilities as defined by the params object for this method.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA safe string/node/nodelist content replacement/injection with hooks for extension Example Usage:\n\n``` javascript\n      html.set(node, \"some string\");\nhtml.set(node, contentNode, {options});\nhtml.set(node, myNode.childNodes, {options});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.html.html](http://dojotoolkit.org/api/1.10/dojo/main.html.html)"
- name: main.i18n
  id: dojo/main.i18n
  summary: We choose to include our own plugin to leverage functionality already contained in dojo and thereby reduce the size of the plugin compared to various loader implementations
  description: "# dojo/main.i18n\n\n## Summary\n\nThis module implements the [dojo/i18n](i18n)! plugin and the v1.6- i18n API\n\nWe choose to include our own plugin to leverage functionality already contained in dojo and thereby reduce the size of the plugin compared to various loader implementations. Also, this allows foreign AMD loaders to be used without their plugins.\n\n## Properties\n\n### cache\n\nDefined by: [dojo/i18n](i18n)\n\n### dynamic\n\nDefined by: [dojo/i18n](i18n)\n\n### unitTests\n\nDefined by: [dojo/i18n](i18n)\n\n## Methods\n\n### `getL10nName``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** string\n\n### `getLocalization``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** undefined\n\n### `load``(id,require,load)`\n\nDefined by [dojo/i18n](i18n)\n\nid is in one of the following formats\n\n1.  /nls/ =\\> load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale.\n\n2.  /nls// =\\> load then return the bundle localized to\n\n3.  *preload*/nls/\\* =\\> for config.locale and all config.extraLocale, load all bundles found in the best-matching bundle rollup. A value of 1 is returned, which is meaningless other than to say the plugin is executing the requested preloads\n\nIn cases 1 and 2, is always normalized to an absolute module id upon entry; see normalize. In case 3, it is assumed to be absolute; this is arranged by the builder.\n\nTo load a bundle means to insert the bundle into the plugin's cache and publish the bundle value to the loader. Given , , and a particular , the cache key\n\n``` markup\n<path>/nls/<bundle>/<locale>\n```\n\nwill hold the value. Similarly, then plugin will publish this value to the loader by\n\n``` javascript\ndefine(\"<path>/nls/<bundle>/<locale>\", <bundle-value>);\n```\n\nGiven this algorithm, other machinery can provide fast load paths be preplacing values in the plugin's cache, which is public. When a load is demanded the cache is inspected before starting any loading. Explicitly placing values in the plugin cache is an advanced/experimental feature that should not be needed; use at your own risk.\n\nFor the normal AMD algorithm, the root bundle is loaded first, which instructs the plugin what additional localized bundles are required for a particular locale. These additional locales are loaded and a mix of the root and each progressively-specific locale is returned. For example:\n\n1.  The client demands \"dojo/i18n!some/path/nls/someBundle\n\n2.  The loader demands load(some/path/nls/someBundle)\n\n3.  This plugin require's \"some/path/nls/someBundle\", which is the root bundle.\n\n4.  Assuming config.locale is \"ab-cd-ef\" and the root bundle indicates that localizations are available for \"ab\" and \"ab-cd-ef\" (note the missing \"ab-cd\", then the plugin requires \"some/path/nls/ab/someBundle\" and \"some/path/nls/ab-cd-ef/someBundle\"\n\n5.  Upon receiving all required bundles, the plugin constructs the value of the bundle ab-cd-ef as...\n\n    ``` javascript\n     mixin(mixin(mixin({}, require(\"some/path/nls/someBundle\"),\n         require(\"some/path/nls/ab/someBundle\")),\n         require(\"some/path/nls/ab-cd-ef/someBundle\"));\n    ```\n\nThis value is inserted into the cache and published to the loader at the key/module-id some/path/nls/someBundle/ab-cd-ef.\n\nThe special preload signature (case 3) instructs the plugin to stop servicing all normal requests (further preload requests will be serviced) until all ongoing preloading has completed.\n\nThe preload signature instructs the plugin that a special rollup module is available that contains one or more flattened, localized bundles. The JSON array of available locales indicates which locales are available. Here is an example:\n\n``` javascript\n*preload*some/path/nls/someModule*[\"root\", \"ab\", \"ab-cd-ef\"]\n```\n\nThis indicates the following rollup modules are available:\n\n``` javascript\nsome/path/nls/someModule_ROOT\nsome/path/nls/someModule_ab\nsome/path/nls/someModule_ab-cd-ef\n```\n\nEach of these modules is a normal AMD module that contains one or more flattened bundles in a hash. For example, assume someModule contained the bundles some/bundle/path/someBundle and some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:\n\n``` javascript\ndefine({\n    some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,\n    some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,\n});\n```\n\nE.g., given this design, preloading for locale==\"ab\" can execute the following algorithm:\n\n``` javascript\nrequire([\"some/path/nls/someModule_ab\"], function(rollup){\n    for(var p in rollup){\n        var id = p + \"/ab\",\n        cache[id] = rollup[p];\n        define(id, rollup[p]);\n    }\n});\n```\n\nSimilarly, if \"ab-cd\" is requested, the algorithm can determine that \"ab\" is the best available and load accordingly.\n\nThe builder will write such rollups for every layer if a non-empty localeList profile property is provided. Further, the builder will include the following cache entry in the cache associated with any layer.\n\n``` javascript\n\"*now\":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}\n```\n\nThe \\*now special cache module instructs the loader to apply the provided function to context-require with respect to the particular layer being defined. This causes the plugin to hold all normal service requests until all preloading is complete.\n\nNotice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case where the target locale has a single segment and a layer depends on a single bundle:\n\nWithout Preloads:\n\n1.  Layer loads root bundle.\n2.  bundle is demanded; plugin loads single localized bundle.\n\nWith Preloads:\n\n1.  Layer causes preloading of target bundle.\n2.  bundle is demanded; service is delayed until preloading complete; bundle is returned.\n\nIn each case a single transaction is required to load the target bundle. In cases where multiple bundles are required and/or the locale has multiple segments, preloads still requires a single transaction whereas the normal path requires an additional transaction for each additional bundle/locale-segment. However all of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| require   | undefined |             |\n| load      | undefined |             |\n\n### `normalize``(id,toAbsMid)`\n\nDefined by [dojo/i18n](i18n)\n\nid may be relative. preload has form `*preload*<path>/nls/<module>*<flattened locales>` and therefore never looks like a relative\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| toAbsMid  | undefined |             |\n\n**Returns:** undefined\n\n### `normalizeLocale``(locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| locale    | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.i18n.html](http://dojotoolkit.org/api/1.10/dojo/main.i18n.html)"
- name: main.i18n#cache
  id: dojo/main.i18n#1_10dojo_main_i18n_cache
  summary: null
  belongs_to: main.i18n
  description: |-
    ### cache

    Defined by: [dojo/i18n](i18n)

    ### dynamic

    Defined by: [dojo/i18n](i18n)

    ### unitTests

    Defined by: [dojo/i18n](i18n)

    ## Methods
- name: main.i18n#getL10nName()
  id: dojo/main.i18n#1_10dojo_main_i18n_getL10nName
  summary: null
  belongs_to: main.i18n
  description: |-
    ### `getL10nName` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** string
- name: main.i18n#getLocalization()
  id: dojo/main.i18n#1_10dojo_main_i18n_getLocalization
  summary: null
  belongs_to: main.i18n
  description: |-
    ### `getLocalization` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** undefined
- name: main.i18n#load()
  id: dojo/main.i18n#1_10dojo_main_i18n_load
  summary: /nls/ => load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale
  belongs_to: main.i18n
  description: "### `load` `(id,require,load)`\n\nDefined by [dojo/i18n](i18n)\n\nid is in one of the following formats\n\n1.  /nls/ =\\> load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale.\n\n2.  /nls// =\\> load then return the bundle localized to\n\n3.  *preload* /nls/\\* =\\> for config.locale and all config.extraLocale, load all bundles found in the best-matching bundle rollup. A value of 1 is returned, which is meaningless other than to say the plugin is executing the requested preloads\n\nIn cases 1 and 2, is always normalized to an absolute module id upon entry; see normalize. In case 3, it is assumed to be absolute; this is arranged by the builder.\n\nTo load a bundle means to insert the bundle into the plugin's cache and publish the bundle value to the loader. Given , , and a particular , the cache key\n\n``` markup\n      <path>/nls/<bundle>/<locale>\n    \n```\n\nwill hold the value. Similarly, then plugin will publish this value to the loader by\n\n``` javascript\n      define(\"<path>/nls/<bundle>/<locale>\", <bundle-value>);\n    \n```\n\nGiven this algorithm, other machinery can provide fast load paths be preplacing values in the plugin's cache, which is public. When a load is demanded the cache is inspected before starting any loading. Explicitly placing values in the plugin cache is an advanced/experimental feature that should not be needed; use at your own risk.\n\nFor the normal AMD algorithm, the root bundle is loaded first, which instructs the plugin what additional localized bundles are required for a particular locale. These additional locales are loaded and a mix of the root and each progressively-specific locale is returned. For example:\n\n1.  The client demands \"dojo/i18n!some/path/nls/someBundle\n\n2.  The loader demands load(some/path/nls/someBundle)\n\n3.  This plugin require's \"some/path/nls/someBundle\", which is the root bundle.\n\n4.  Assuming config.locale is \"ab-cd-ef\" and the root bundle indicates that localizations are available for \"ab\" and \"ab-cd-ef\" (note the missing \"ab-cd\", then the plugin requires \"some/path/nls/ab/someBundle\" and \"some/path/nls/ab-cd-ef/someBundle\"\n\n5.  Upon receiving all required bundles, the plugin constructs the value of the bundle ab-cd-ef as...\n\n    ``` javascript\n               mixin(mixin(mixin({}, require(\"some/path/nls/someBundle\"),\n         require(\"some/path/nls/ab/someBundle\")),\n         require(\"some/path/nls/ab-cd-ef/someBundle\"));\n            \n    ```\n\nThis value is inserted into the cache and published to the loader at the key/module-id some/path/nls/someBundle/ab-cd-ef.\n\nThe special preload signature (case 3) instructs the plugin to stop servicing all normal requests (further preload requests will be serviced) until all ongoing preloading has completed.\n\nThe preload signature instructs the plugin that a special rollup module is available that contains one or more flattened, localized bundles. The JSON array of available locales indicates which locales are available. Here is an example:\n\n``` javascript\n      *preload*some/path/nls/someModule*[\"root\", \"ab\", \"ab-cd-ef\"]\n    \n```\n\nThis indicates the following rollup modules are available:\n\n``` javascript\n      some/path/nls/someModule_ROOT\nsome/path/nls/someModule_ab\nsome/path/nls/someModule_ab-cd-ef\n    \n```\n\nEach of these modules is a normal AMD module that contains one or more flattened bundles in a hash. For example, assume someModule contained the bundles some/bundle/path/someBundle and some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:\n\n``` javascript\n      define({\n    some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,\n    some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,\n});\n    \n```\n\nE.g., given this design, preloading for locale==\"ab\" can execute the following algorithm:\n\n``` javascript\n      require([\"some/path/nls/someModule_ab\"], function(rollup){\n    for(var p in rollup){\n        var id = p + \"/ab\",\n        cache[id] = rollup[p];\n        define(id, rollup[p]);\n    }\n});\n    \n```\n\nSimilarly, if \"ab-cd\" is requested, the algorithm can determine that \"ab\" is the best available and load accordingly.\n\nThe builder will write such rollups for every layer if a non-empty localeList profile property is provided. Further, the builder will include the following cache entry in the cache associated with any layer.\n\n``` javascript\n      \"*now\":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}\n    \n```\n\nThe \\*now special cache module instructs the loader to apply the provided function to context-require with respect to the particular layer being defined. This causes the plugin to hold all normal service requests until all preloading is complete.\n\nNotice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case where the target locale has a single segment and a layer depends on a single bundle:\n\nWithout Preloads:\n\n1.  Layer loads root bundle.\n2.  bundle is demanded; plugin loads single localized bundle.\n\nWith Preloads:\n\n1.  Layer causes preloading of target bundle.\n2.  bundle is demanded; service is delayed until preloading complete; bundle is returned.\n\nIn each case a single transaction is required to load the target bundle. In cases where multiple bundles are required and/or the locale has multiple segments, preloads still requires a single transaction whereas the normal path requires an additional transaction for each additional bundle/locale-segment. However all of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| require   | undefined |             |\n| load      | undefined |             |"
- name: main.i18n#normalize()
  id: dojo/main.i18n#1_10dojo_main_i18n_normalize
  summary: id may be relative
  belongs_to: main.i18n
  description: |-
    ### `normalize` `(id,toAbsMid)`

    Defined by [dojo/i18n](i18n)

    id may be relative. preload has form `*preload*<path>/nls/<module>*<flattened locales>` and therefore never looks like a relative

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | id        | undefined |             |
    | toAbsMid  | undefined |             |

    **Returns:** undefined
- name: main.i18n#normalizeLocale()
  id: dojo/main.i18n#1_10dojo_main_i18n_normalizeLocale
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.i18n
  description: "### `normalizeLocale` `(locale)`\n\nDefined by [dojo/i18n](i18n)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| locale    | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.i18n.html](http://dojotoolkit.org/api/1.10/dojo/main.i18n.html)"
- name: main.io
  id: dojo/main.io
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.io\n\n## Properties\n\n### iframe\n\nDefined by: [dojo/io/iframe](io/iframe)\n\n### script\n\nDefined by: [dojo/io/script](io/script)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.io.html](http://dojotoolkit.org/api/1.10/dojo/main.io.html)"
- name: main.io#iframe
  id: dojo/main.io#1_10dojo_main_io_iframe
  summary: null
  belongs_to: main.io
  description: |-
    ### iframe

    Defined by: [dojo/io/iframe](io/iframe)
- name: main.io#script
  id: dojo/main.io#1_10dojo_main_io_script
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.io
  description: "### script\n\nDefined by: [dojo/io/script](io/script)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.io.html](http://dojotoolkit.org/api/1.10/dojo/main.io.html)"
- name: main.keys
  id: dojo/main.keys
  summary: Definitions for common key values
  description: "# dojo/main.keys\n\n## Summary\n\nDefinitions for common key values. Client code should test keyCode against these named constants, as the actual codes can vary by browser.\n\n## Properties\n\n### ALT\n\nDefined by: [dojo/keys](keys)\n\n### BACKSPACE\n\nDefined by: [dojo/keys](keys)\n\n### CAPS_LOCK\n\nDefined by: [dojo/keys](keys)\n\n### CLEAR\n\nDefined by: [dojo/keys](keys)\n\n### copyKey\n\nDefined by: [dojo/keys](keys)\n\n### CTRL\n\nDefined by: [dojo/keys](keys)\n\n### DELETE\n\nDefined by: [dojo/keys](keys)\n\n### DOWN_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### DOWN_DPAD\n\nDefined by: [dojo/keys](keys)\n\n### END\n\nDefined by: [dojo/keys](keys)\n\n### ENTER\n\nDefined by: [dojo/keys](keys)\n\n### ESCAPE\n\nDefined by: [dojo/keys](keys)\n\n### F1\n\nDefined by: [dojo/keys](keys)\n\n### F10\n\nDefined by: [dojo/keys](keys)\n\n### F11\n\nDefined by: [dojo/keys](keys)\n\n### F12\n\nDefined by: [dojo/keys](keys)\n\n### F13\n\nDefined by: [dojo/keys](keys)\n\n### F14\n\nDefined by: [dojo/keys](keys)\n\n### F15\n\nDefined by: [dojo/keys](keys)\n\n### F2\n\nDefined by: [dojo/keys](keys)\n\n### F3\n\nDefined by: [dojo/keys](keys)\n\n### F4\n\nDefined by: [dojo/keys](keys)\n\n### F5\n\nDefined by: [dojo/keys](keys)\n\n### F6\n\nDefined by: [dojo/keys](keys)\n\n### F7\n\nDefined by: [dojo/keys](keys)\n\n### F8\n\nDefined by: [dojo/keys](keys)\n\n### F9\n\nDefined by: [dojo/keys](keys)\n\n### HELP\n\nDefined by: [dojo/keys](keys)\n\n### HOME\n\nDefined by: [dojo/keys](keys)\n\n### INSERT\n\nDefined by: [dojo/keys](keys)\n\n### LEFT_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### LEFT_DPAD\n\nDefined by: [dojo/keys](keys)\n\n### LEFT_WINDOW\n\nDefined by: [dojo/keys](keys)\n\n### META\n\nDefined by: [dojo/keys](keys)\n\n### NUM_LOCK\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_0\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_1\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_2\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_3\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_4\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_5\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_6\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_7\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_8\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_9\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_DIVIDE\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_ENTER\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_MINUS\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_MULTIPLY\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_PERIOD\n\nDefined by: [dojo/keys](keys)\n\n### NUMPAD_PLUS\n\nDefined by: [dojo/keys](keys)\n\n### PAGE_DOWN\n\nDefined by: [dojo/keys](keys)\n\n### PAGE_UP\n\nDefined by: [dojo/keys](keys)\n\n### PAUSE\n\nDefined by: [dojo/keys](keys)\n\n### RIGHT_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### RIGHT_DPAD\n\nDefined by: [dojo/keys](keys)\n\n### RIGHT_WINDOW\n\nDefined by: [dojo/keys](keys)\n\n### SCROLL_LOCK\n\nDefined by: [dojo/keys](keys)\n\n### SELECT\n\nDefined by: [dojo/keys](keys)\n\n### SHIFT\n\nDefined by: [dojo/keys](keys)\n\n### SPACE\n\nDefined by: [dojo/keys](keys)\n\n### TAB\n\nDefined by: [dojo/keys](keys)\n\n### UP_ARROW\n\nDefined by: [dojo/keys](keys)\n\n### UP_DPAD\n\nDefined by: [dojo/keys](keys)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.keys.html](http://dojotoolkit.org/api/1.10/dojo/main.keys.html)"
- name: main.mouseButtons
  id: dojo/main.mousebuttons
  summary: Numeric value of the left mouse button for the platform
  description: "# dojo/main.mouseButtons\n\n## Properties\n\n### LEFT\n\nDefined by: [dojo/mouse](mouse)\n\nNumeric value of the left mouse button for the platform.\n\n### MIDDLE\n\nDefined by: [dojo/mouse](mouse)\n\nNumeric value of the middle mouse button for the platform.\n\n### RIGHT\n\nDefined by: [dojo/mouse](mouse)\n\nNumeric value of the right mouse button for the platform.\n\n## Methods\n\n### `isButton``(e,button)`\n\nDefined by [dojo/mouse](mouse)\n\nChecks an event object for a pressed button\n\n|           |        |                                                   |\n|-----------|--------|---------------------------------------------------|\n| Parameter | Type   | Description                                       |\n| e         | Event  | Event object to examine                           |\n| button    | Number | The button value (example: dojo.mouseButton.LEFT) |\n\n**Returns:** boolean\n\n### `isLeft``(e)`\n\nDefined by [dojo/mouse](mouse)\n\nChecks an event object for the pressed left button\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** boolean\n\n### `isMiddle``(e)`\n\nDefined by [dojo/mouse](mouse)\n\nChecks an event object for the pressed middle button\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** boolean\n\n### `isRight``(e)`\n\nDefined by [dojo/mouse](mouse)\n\nChecks an event object for the pressed right button\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.mouseButtons.html](http://dojotoolkit.org/api/1.10/dojo/main.mouseButtons.html)"
- name: main.number
  id: dojo/main.number
  summary: Create a string from a Number using a known localized pattern
  description: "# dojo/main.number\n\n## Summary\n\nlocalized formatting and parsing routines for Number\n\n## Properties\n\n## Methods\n\n### `format``(value,options)`\n\nDefined by [dojo/number](number)\n\nFormat a Number as a String, using locale-specific settings\n\nCreate a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the [Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and delimiters. If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.\n\n[TABLE]\n\n**Returns:** null \\| undefined\n\n### `parse``(expression,options)`\n\nDefined by [dojo/number](number)\n\nConvert a properly formatted string to a primitive Number, using locale-specific settings.\n\nCreate a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale and follow the syntax described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) Note that literal characters in patterns are not supported.\n\n[TABLE]\n\n**Returns:** number\n\n### `regexp``(options)`\n\nDefined by [dojo/number](number)\n\nBuilds the regular needed to parse a number\n\nReturns regular expression with positive and negative match, group and decimal separators\n\n[TABLE]\n\n**Returns:** undefined\n\n### `round``(value,places,increment)`\n\nDefined by [dojo/number](number)\n\nRounds to the nearest value with the given number of decimal places, away from zero\n\nRounds to the nearest value with the given number of decimal places, away from zero if equal. Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by fractional increments also, such as the nearest quarter. NOTE: Subject to floating point errors. See [dojox/math/round](http://dojotoolkit.org/api/1.10/dojox/math/round) for experimental workaround.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n>>> number.round(-0.5)\n-1\n>>> number.round(162.295, 2)\n162.29  // note floating point error.  Should be 162.3\n>>> number.round(10.71, 0, 2.5)\n10.75\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.number.html](http://dojotoolkit.org/api/1.10/dojo/main.number.html)"
- name: main.number#format()
  id: dojo/main.number#1_10dojo_main_number_format
  summary: Create a string from a Number using a known localized pattern
  belongs_to: main.number
  description: |-
    ### `format` `(value,options)`

    Defined by [dojo/number](number)

    Format a Number as a String, using locale-specific settings

    Create a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the [Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and delimiters. If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.

    [TABLE]

    **Returns:** null \| undefined
- name: main.number#parse()
  id: dojo/main.number#1_10dojo_main_number_parse
  summary: Convert a properly formatted string to a primitive Number, using locale-specific settings
  belongs_to: main.number
  description: |-
    ### `parse` `(expression,options)`

    Defined by [dojo/number](number)

    Convert a properly formatted string to a primitive Number, using locale-specific settings.

    Create a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale and follow the syntax described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) Note that literal characters in patterns are not supported.

    [TABLE]

    **Returns:** number
- name: main.number#regexp()
  id: dojo/main.number#1_10dojo_main_number_regexp
  summary: null
  belongs_to: main.number
  description: |-
    ### `regexp` `(options)`

    Defined by [dojo/number](number)

    Builds the regular needed to parse a number

    Returns regular expression with positive and negative match, group and decimal separators

    [TABLE]

    **Returns:** undefined
- name: main.number#round()
  id: dojo/main.number#1_10dojo_main_number_round
  summary: Rounds to the nearest value with the given number of decimal places, away from zero if equal
  belongs_to: main.number
  description: "### `round` `(value,places,increment)`\n\nDefined by [dojo/number](number)\n\nRounds to the nearest value with the given number of decimal places, away from zero\n\nRounds to the nearest value with the given number of decimal places, away from zero if equal. Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by fractional increments also, such as the nearest quarter. NOTE: Subject to floating point errors. See [dojox/math/round](http://dojotoolkit.org/api/1.10/dojox/math/round) for experimental workaround.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n      >>> number.round(-0.5)\n-1\n>>> number.round(162.295, 2)\n162.29  // note floating point error.  Should be 162.3\n>>> number.round(10.71, 0, 2.5)\n10.75\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.number.html](http://dojotoolkit.org/api/1.10/dojo/main.number.html)"
- name: main.regexp
  id: dojo/main.regexp
  summary: A utility function used by some of the RE generators
  description: "# dojo/main.regexp\n\n## Summary\n\nRegular expressions and Builder resources\n\n## Methods\n\n### `buildGroupRE``(arr,re,nonCapture)`\n\nDefined by [dojo/regexp](regexp)\n\nBuilds a regular expression that groups subexpressions\n\nA utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter. re builds one subexpression for each elem in the array a, in the first parameter. Returns a string for a regular expression that groups all the subexpressions.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `escapeString``(str,except)`\n\nDefined by [dojo/regexp](regexp)\n\nAdds escape sequences for special characters in regular expressions\n\n[TABLE]\n\n**Returns:** undefined\n\n### `group``(expression,nonCapture)`\n\nDefined by [dojo/regexp](regexp)\n\nadds group match to expression\n\n[TABLE]\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.regexp.html](http://dojotoolkit.org/api/1.10/dojo/main.regexp.html)"
- name: main.regexp#buildGroupRE()
  id: dojo/main.regexp#1_10dojo_main_regexp_buildGroupRE
  summary: A utility function used by some of the RE generators
  belongs_to: main.regexp
  description: |-
    ### `buildGroupRE` `(arr,re,nonCapture)`

    Defined by [dojo/regexp](regexp)

    Builds a regular expression that groups subexpressions

    A utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter. re builds one subexpression for each elem in the array a, in the first parameter. Returns a string for a regular expression that groups all the subexpressions.

    [TABLE]

    **Returns:** undefined
- name: main.regexp#escapeString()
  id: dojo/main.regexp#1_10dojo_main_regexp_escapeString
  summary: null
  belongs_to: main.regexp
  description: |-
    ### `escapeString` `(str,except)`

    Defined by [dojo/regexp](regexp)

    Adds escape sequences for special characters in regular expressions

    [TABLE]

    **Returns:** undefined
- name: main.regexp#group()
  id: dojo/main.regexp#1_10dojo_main_regexp_group
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.regexp
  description: "### `group` `(expression,nonCapture)`\n\nDefined by [dojo/regexp](regexp)\n\nadds group match to expression\n\n[TABLE]\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.regexp.html](http://dojotoolkit.org/api/1.10/dojo/main.regexp.html)"
- name: main.rpc
  id: dojo/main.rpc
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.rpc\n\n## Methods\n\n### `JsonpService``()`\n\nDefined by [dojo/rpc/JsonpService](rpc/jsonpservice)\n\n### `JsonService``()`\n\nDefined by [dojo/rpc/JsonService](rpc/jsonservice)\n\n### `RpcService``()`\n\nDefined by [dojo/rpc/RpcService](rpc/rpcservice)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.rpc.html](http://dojotoolkit.org/api/1.10/dojo/main.rpc.html)"
- name: main.rpc#JsonpService()
  id: dojo/main.rpc#1_10dojo_main_rpc_JsonpService
  summary: null
  belongs_to: main.rpc
  description: |-
    ### `JsonpService` `()`

    Defined by [dojo/rpc/JsonpService](rpc/jsonpservice)
- name: main.rpc#JsonService()
  id: dojo/main.rpc#1_10dojo_main_rpc_JsonService
  summary: null
  belongs_to: main.rpc
  description: |-
    ### `JsonService` `()`

    Defined by [dojo/rpc/JsonService](rpc/jsonservice)
- name: main.rpc#RpcService()
  id: dojo/main.rpc#1_10dojo_main_rpc_RpcService
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main.rpc
  description: "### `RpcService` `()`\n\nDefined by [dojo/rpc/RpcService](rpc/rpcservice)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.rpc.html](http://dojotoolkit.org/api/1.10/dojo/main.rpc.html)"
- name: main.scopeMap
  id: dojo/main.scopemap
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.scopeMap\n\n## Properties\n\n### dijit\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### dojo\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### dojox\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.scopeMap.html](http://dojotoolkit.org/api/1.10/dojo/main.scopeMap.html)"
- name: main.Stateful
  id: dojo/main.stateful
  summary: The class also provides the functionality to auto-magically manage getters and setters for object attributes/properties
  description: "# dojo/main.Stateful\n\n## Summary\n\nBase class for objects that provide named properties with optional getter/setter control and the ability to watch for property changes\n\nThe class also provides the functionality to auto-magically manage getters and setters for object attributes/properties.\n\nGetters and Setters should follow the format of \\_xxxGetter or \\_xxxSetter where the xxx is a name of the attribute to handle. So an attribute of \"foo\" would have a custom getter of \\_fooGetter and a custom setter of \\_fooSetter.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var obj = new Stateful();\n    obj.watch(\"foo\", function(){\n        console.log(\"foo changed to \" + this.get(\"foo\"));\n    });\n    obj.set(\"foo\",\"bar\");\n});\n```\n\n## Properties\n\n## Methods\n\n### `get``(name)`\n\nDefined by [dojo/Stateful](stateful)\n\nGet a property on a Stateful instance.\n\nGet a named property on a Stateful object. The property may potentially be retrieved via a getter method in subclasses. In the base class this just retrieves the object's property.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| name      | String | The property to get. |\n\n**Returns:** any \\| undefined\n\nThe property value on this Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful({foo: 3});\n    stateful.get(\"foo\") // returns 3\n    stateful.foo // returns 3\n});\n```\n\n### `postscript``(params)`\n\nDefined by [dojo/Stateful](stateful)\n\n[TABLE]\n\n### `set``(name,value)`\n\nDefined by [dojo/Stateful](stateful)\n\nSet a property on a Stateful instance\n\nSets named properties on a stateful object and notifies any watchers of the property. A programmatic setter may be defined in subclasses.\n\n|           |        |                                   |\n|-----------|--------|-----------------------------------|\n| Parameter | Type   | Description                       |\n| name      | String | The property to set.              |\n| value     | Object | The value to set in the property. |\n\n**Returns:** any \\| function\n\nThe function returns this dojo.Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful();\n    stateful.watch(function(name, oldValue, value){\n        // this will be called on the set below\n    }\n    stateful.set(foo, 5);\n```\n\nset() may also be called with a hash of name/value pairs, ex:\n\n``` javascript\nstateful.set({\n    foo: \"Howdy\",\n    bar: 3\n});\n});\n```\n\nThis is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)\n\n### `watch``(name,callback)`\n\nDefined by [dojo/Stateful](stateful)\n\nWatches a property for changes\n\n[TABLE]\n\n**Returns:** any \\| object\n\nAn object handle for the watch. The unwatch method of this object can be used to discontinue watching this property:\n\n``` javascript\nvar watchHandle = obj.watch(\"foo\", callback);\nwatchHandle.unwatch(); // callback won't be called now\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.Stateful.html](http://dojotoolkit.org/api/1.10/dojo/main.Stateful.html)"
- name: main.Stateful#get()
  id: dojo/main.stateful#1_10dojo_main_Stateful_get
  summary: Get a property on a Stateful instance
  belongs_to: main.Stateful
  description: "### `get` `(name)`\n\nDefined by [dojo/Stateful](stateful)\n\nGet a property on a Stateful instance.\n\nGet a named property on a Stateful object. The property may potentially be retrieved via a getter method in subclasses. In the base class this just retrieves the object's property.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| name      | String | The property to get. |\n\n**Returns:** any \\| undefined\n\nThe property value on this Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful({foo: 3});\n    stateful.get(\"foo\") // returns 3\n    stateful.foo // returns 3\n});\n    \n```"
- name: main.Stateful#postscript()
  id: dojo/main.stateful#1_10dojo_main_Stateful_postscript
  summary: null
  belongs_to: main.Stateful
  description: |-
    ### `postscript` `(params)`

    Defined by [dojo/Stateful](stateful)

    [TABLE]
- name: main.Stateful#set()
  id: dojo/main.stateful#1_10dojo_main_Stateful_set
  summary: Sets named properties on a stateful object and notifies any watchers of the property
  belongs_to: main.Stateful
  description: "### `set` `(name,value)`\n\nDefined by [dojo/Stateful](stateful)\n\nSet a property on a Stateful instance\n\nSets named properties on a stateful object and notifies any watchers of the property. A programmatic setter may be defined in subclasses.\n\n|           |        |                                   |\n|-----------|--------|-----------------------------------|\n| Parameter | Type   | Description                       |\n| name      | String | The property to set.              |\n| value     | Object | The value to set in the property. |\n\n**Returns:** any \\| function\n\nThe function returns this dojo.Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful();\n    stateful.watch(function(name, oldValue, value){\n        // this will be called on the set below\n    }\n    stateful.set(foo, 5);\n    \n```\n\nset() may also be called with a hash of name/value pairs, ex:\n\n``` javascript\n      stateful.set({\n    foo: \"Howdy\",\n    bar: 3\n});\n});\n    \n```\n\nThis is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)"
- name: main.Stateful#watch()
  id: dojo/main.stateful#1_10dojo_main_Stateful_watch
  summary: An object handle for the watch
  belongs_to: main.Stateful
  description: "### `watch` `(name,callback)`\n\nDefined by [dojo/Stateful](stateful)\n\nWatches a property for changes\n\n[TABLE]\n\n**Returns:** any \\| object\n\nAn object handle for the watch. The unwatch method of this object can be used to discontinue watching this property:\n\n``` javascript\n      var watchHandle = obj.watch(\"foo\", callback);\nwatchHandle.unwatch(); // callback won't be called now\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.Stateful.html](http://dojotoolkit.org/api/1.10/dojo/main.Stateful.html)"
- name: main.store
  id: dojo/main.store
  summary: The Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes
  description: "# dojo/main.store\n\n## Properties\n\n### util\n\nDefined by: [dojo/store/util/QueryResults](store/util/queryresults)\n\n## Methods\n\n### `Cache``(masterStore,cachingStore,options)`\n\nDefined by [dojo/store/Cache](store/cache)\n\n|              |           |             |\n|--------------|-----------|-------------|\n| Parameter    | Type      | Description |\n| masterStore  | undefined |             |\n| cachingStore | undefined |             |\n| options      | undefined |             |\n\n**Returns:** undefined\n\n### `DataStore``()`\n\nDefined by [dojo/store/DataStore](store/datastore)\n\n### `JsonRest``()`\n\nDefined by [dojo/store/JsonRest](store/jsonrest)\n\n### `Memory``()`\n\nDefined by [dojo/store/Memory](store/memory)\n\n### `Observable``(store)`\n\nDefined by [dojo/store/Observable](store/observable)\n\nThe Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes.\n\nObservable wraps an existing store so that notifications can be made when a query is performed.\n\n|           |                                         |             |\n|-----------|-----------------------------------------|-------------|\n| Parameter | Type                                    | Description |\n| store     | [dojo/store/api/Store](store/api/store) |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a Memory store that returns an observable query, and then log some information about that query.\n\n``` javascript\nvar store = Observable(new Memory({\n    data: [\n        {id: 1, name: \"one\", prime: false},\n        {id: 2, name: \"two\", even: true, prime: true},\n        {id: 3, name: \"three\", prime: true},\n        {id: 4, name: \"four\", even: true, prime: false},\n        {id: 5, name: \"five\", prime: true}\n    ]\n}));\nvar changes = [], results = store.query({ prime: true });\nvar observer = results.observe(function(object, previousIndex, newIndex){\n    changes.push({previousIndex:previousIndex, newIndex:newIndex, object:object});\n});\n```\n\nSee the Observable tests for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.store.html](http://dojotoolkit.org/api/1.10/dojo/main.store.html)"
- name: main.store#Cache()
  id: dojo/main.store#1_10dojo_main_store_Cache
  summary: null
  belongs_to: main.store
  description: |-
    ### `Cache` `(masterStore,cachingStore,options)`

    Defined by [dojo/store/Cache](store/cache)

    |              |           |             |
    |--------------|-----------|-------------|
    | Parameter    | Type      | Description |
    | masterStore  | undefined |             |
    | cachingStore | undefined |             |
    | options      | undefined |             |

    **Returns:** undefined
- name: main.store#DataStore()
  id: dojo/main.store#1_10dojo_main_store_DataStore
  summary: null
  belongs_to: main.store
  description: |-
    ### `DataStore` `()`

    Defined by [dojo/store/DataStore](store/datastore)
- name: main.store#JsonRest()
  id: dojo/main.store#1_10dojo_main_store_JsonRest
  summary: null
  belongs_to: main.store
  description: |-
    ### `JsonRest` `()`

    Defined by [dojo/store/JsonRest](store/jsonrest)
- name: main.store#Memory()
  id: dojo/main.store#1_10dojo_main_store_Memory
  summary: null
  belongs_to: main.store
  description: |-
    ### `Memory` `()`

    Defined by [dojo/store/Memory](store/memory)
- name: main.store#Observable()
  id: dojo/main.store#1_10dojo_main_store_Observable
  summary: The Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes
  belongs_to: main.store
  description: "### `Observable` `(store)`\n\nDefined by [dojo/store/Observable](store/observable)\n\nThe Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes.\n\nObservable wraps an existing store so that notifications can be made when a query is performed.\n\n|           |                                         |             |\n|-----------|-----------------------------------------|-------------|\n| Parameter | Type                                    | Description |\n| store     | [dojo/store/api/Store](store/api/store) |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a Memory store that returns an observable query, and then log some information about that query.\n\n``` javascript\n      var store = Observable(new Memory({\n    data: [\n        {id: 1, name: \"one\", prime: false},\n        {id: 2, name: \"two\", even: true, prime: true},\n        {id: 3, name: \"three\", prime: true},\n        {id: 4, name: \"four\", even: true, prime: false},\n        {id: 5, name: \"five\", prime: true}\n    ]\n}));\nvar changes = [], results = store.query({ prime: true });\nvar observer = results.observe(function(object, previousIndex, newIndex){\n    changes.push({previousIndex:previousIndex, newIndex:newIndex, object:object});\n});\n    \n```\n\nSee the Observable tests for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.store.html](http://dojotoolkit.org/api/1.10/dojo/main.store.html)"
- name: main.store#util
  id: dojo/main.store#1_10dojo_main_store_util
  summary: null
  belongs_to: main.store
  description: |-
    ### util

    Defined by: [dojo/store/util/QueryResults](store/util/queryresults)

    ## Methods
- name: main.string
  id: dojo/main.string
  summary: Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, <, >, ", ', and / characters
  description: "# dojo/main.string\n\n## Summary\n\nString utilities for Dojo\n\n## Methods\n\n### `escape``(str)`\n\nDefined by [dojo/string](string)\n\nEfficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, \\<, \\>, \", ', and / characters.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | the string to escape |\n\n### `pad``(text,size,ch,end)`\n\nDefined by [dojo/string](string)\n\nPad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n// Fill the string to length 10 with \"+\" characters on the right.  Yields \"Dojo++++++\".\nstring.pad(\"Dojo\", 10, \"+\", true);\n```\n\n### `rep``(str,num)`\n\nDefined by [dojo/string](string)\n\nEfficiently replicate a string `n` times.\n\n|           |         |                                         |\n|-----------|---------|-----------------------------------------|\n| Parameter | Type    | Description                             |\n| str       | String  | the string to replicate                 |\n| num       | Integer | number of times to replicate the string |\n\n**Returns:** string \\| undefined\n\n### `substitute``(template,map,transform,thisObject)`\n\nDefined by [dojo/string](string)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nSubstitutes two expressions in a string from an Array or Object\n\n``` javascript\n// returns \"File 'foo.html' is not found in directory '/temp'.\"\n// by providing substitution data in an Array\nstring.substitute(\n    \"File '${0}' is not found in directory '${1}'.\",\n    [\"foo.html\",\"/temp\"]\n);\n\n// also returns \"File 'foo.html' is not found in directory '/temp'.\"\n// but provides substitution data in an Object structure.  Dotted\n// notation may be used to traverse the structure.\nstring.substitute(\n    \"File '${name}' is not found in directory '${info.dir}'.\",\n    { name: \"foo.html\", info: { dir: \"/temp\" } }\n);\n```\n\n### Example 2\n\nUse a transform function to modify the values:\n\n``` javascript\n// returns \"file 'foo.html' is not found in directory '/temp'.\"\nstring.substitute(\n    \"${0} is not found in ${1}.\",\n    [\"foo.html\",\"/temp\"],\n    function(str){\n        // try to figure out the type\n        var prefix = (str.charAt(0) == \"/\") ? \"directory\": \"file\";\n        return prefix + \" '\" + str + \"'\";\n    }\n);\n```\n\n### Example 3\n\nUse a formatter\n\n``` javascript\n// returns \"thinger -- howdy\"\nstring.substitute(\n    \"${0:postfix}\", [\"thinger\"], null, {\n        postfix: function(value, key){\n            return value + \" -- howdy\";\n        }\n    }\n);\n```\n\n### `trim``(str)`\n\nDefined by [dojo/string](string)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript). The short yet performant version of this function is [dojo/\\_base/lang.trim()](_base/lang#trim), which is part of Dojo base. Uses String.prototype.trim instead, if available.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String \\| string\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.string.html](http://dojotoolkit.org/api/1.10/dojo/main.string.html)"
- name: main.string#escape()
  id: dojo/main.string#1_10dojo_main_string_escape
  summary: Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, <, >, ", ', and / characters
  belongs_to: main.string
  description: |-
    ### `escape` `(str)`

    Defined by [dojo/string](string)

    Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, \<, \>, ", ', and / characters.

    |           |        |                      |
    |-----------|--------|----------------------|
    | Parameter | Type   | Description          |
    | str       | String | the string to escape |
- name: main.string#pad()
  id: dojo/main.string#1_10dojo_main_string_pad
  summary: Pad a string to guarantee that it is at least size length by filling with the character ch at either the start or end of the string
  belongs_to: main.string
  description: "### `pad` `(text,size,ch,end)`\n\nDefined by [dojo/string](string)\n\nPad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // Fill the string to length 10 with \"+\" characters on the right.  Yields \"Dojo++++++\".\nstring.pad(\"Dojo\", 10, \"+\", true);\n    \n```"
- name: main.string#rep()
  id: dojo/main.string#1_10dojo_main_string_rep
  summary: Efficiently replicate a string n times
  belongs_to: main.string
  description: |-
    ### `rep` `(str,num)`

    Defined by [dojo/string](string)

    Efficiently replicate a string `n` times.

    |           |         |                                         |
    |-----------|---------|-----------------------------------------|
    | Parameter | Type    | Description                             |
    | str       | String  | the string to replicate                 |
    | num       | Integer | number of times to replicate the string |

    **Returns:** string \| undefined
- name: main.string#substitute()
  id: dojo/main.string#1_10dojo_main_string_substitute
  summary: Performs parameterized substitutions on a string
  belongs_to: main.string
  description: "### `substitute` `(template,map,transform,thisObject)`\n\nDefined by [dojo/string](string)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nSubstitutes two expressions in a string from an Array or Object\n\n``` javascript\n      // returns \"File 'foo.html' is not found in directory '/temp'.\"\n// by providing substitution data in an Array\nstring.substitute(\n    \"File '${0}' is not found in directory '${1}'.\",\n    [\"foo.html\",\"/temp\"]\n);\n\n// also returns \"File 'foo.html' is not found in directory '/temp'.\"\n// but provides substitution data in an Object structure.  Dotted\n// notation may be used to traverse the structure.\nstring.substitute(\n    \"File '${name}' is not found in directory '${info.dir}'.\",\n    { name: \"foo.html\", info: { dir: \"/temp\" } }\n);\n    \n```\n\n### Example 2\n\nUse a transform function to modify the values:\n\n``` javascript\n      // returns \"file 'foo.html' is not found in directory '/temp'.\"\nstring.substitute(\n    \"${0} is not found in ${1}.\",\n    [\"foo.html\",\"/temp\"],\n    function(str){\n        // try to figure out the type\n        var prefix = (str.charAt(0) == \"/\") ? \"directory\": \"file\";\n        return prefix + \" '\" + str + \"'\";\n    }\n);\n    \n```\n\n### Example 3\n\nUse a formatter\n\n``` javascript\n      // returns \"thinger -- howdy\"\nstring.substitute(\n    \"${0:postfix}\", [\"thinger\"], null, {\n        postfix: function(value, key){\n            return value + \" -- howdy\";\n        }\n    }\n);\n    \n```"
- name: main.string#trim()
  id: dojo/main.string#1_10dojo_main_string_trim
  summary: This version of trim() was taken from Steven Levithan's blog
  belongs_to: main.string
  description: "### `trim` `(str)`\n\nDefined by [dojo/string](string)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript). The short yet performant version of this function is [dojo/\\_base/lang.trim()](_base/lang#trim), which is part of Dojo base. Uses String.prototype.trim instead, if available.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String \\| string\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.string.html](http://dojotoolkit.org/api/1.10/dojo/main.string.html)"
- name: main.tests
  id: dojo/main.tests
  summary: D.O.H
  description: "# dojo/main.tests\n\n## Summary\n\nD.O.H. Test files for Dojo unit testing.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.tests.html](http://dojotoolkit.org/api/1.10/dojo/main.tests.html)"
- name: main.touch
  id: dojo/main.touch
  summary: This module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop
  description: "# dojo/main.touch\n\n## Summary\n\nThis module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop. Based on <http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html> Also, if the dojoClick property is set to truthy on a DOM node, [dojo/touch](touch) generates click events immediately for this node and its descendants (except for descendants that have a dojoClick property set to falsy), to avoid the delay before native browser click events, and regardless of whether evt.preventDefault() was called in a touch.press event listener.\n\n## Examples\n\n### Example 1\n\nUsed with dojo/on\n\n``` javascript\ndefine([\"dojo/on\", \"dojo/touch\"], function(on, touch){\n    on(node, touch.press, function(e){});\n    on(node, touch.move, function(e){});\n    on(node, touch.release, function(e){});\n    on(node, touch.cancel, function(e){});\n```\n\n### Example 2\n\nUsed with touch.\\* directly\n\n``` javascript\ntouch.press(node, function(e){});\ntouch.move(node, function(e){});\ntouch.release(node, function(e){});\ntouch.cancel(node, function(e){});\n```\n\n### Example 3\n\nHave dojo/touch generate clicks without delay, with a default move threshold of 4 pixels\n\n``` javascript\nnode.dojoClick = true;\n```\n\n### Example 4\n\nHave dojo/touch generate clicks without delay, with a move threshold of 10 pixels horizontally and vertically\n\n``` javascript\nnode.dojoClick = 10;\n```\n\n### Example 5\n\nHave dojo/touch generate clicks without delay, with a move threshold of 50 pixels horizontally and 10 pixels vertically\n\n``` javascript\nnode.dojoClick = {x:50, y:5};\n```\n\n### Example 6\n\nDisable clicks without delay generated by dojo/touch on a node that has an ancestor with property dojoClick set to truthy\n\n``` javascript\nnode.dojoClick = false;\n```\n\n## Methods\n\n### `cancel``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'touchcancel'\\|'mouseleave' for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `enter``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to mouse.enter or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `leave``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to mouse.leave or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `move``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener that fires when the mouse cursor or a finger is dragged over the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `out``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'mouseout' or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `over``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'mouseover' or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `press``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'touchstart'\\|'mousedown' for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `release``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to releasing the mouse button while the cursor is over the given node (i.e. \"mouseup\") or for removing the finger from the screen while touching the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.touch.html](http://dojotoolkit.org/api/1.10/dojo/main.touch.html)"
- name: main.touch#cancel()
  id: dojo/main.touch#1_10dojo_main_touch_cancel
  summary: null
  belongs_to: main.touch
  description: |-
    ### `cancel` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'touchcancel'\|'mouseleave' for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: main.touch#enter()
  id: dojo/main.touch#1_10dojo_main_touch_enter
  summary: null
  belongs_to: main.touch
  description: |-
    ### `enter` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to mouse.enter or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: main.touch#leave()
  id: dojo/main.touch#1_10dojo_main_touch_leave
  summary: null
  belongs_to: main.touch
  description: |-
    ### `leave` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to mouse.leave or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: main.touch#move()
  id: dojo/main.touch#1_10dojo_main_touch_move
  summary: Register a listener that fires when the mouse cursor or a finger is dragged over the given node
  belongs_to: main.touch
  description: |-
    ### `move` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener that fires when the mouse cursor or a finger is dragged over the given node.

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: main.touch#out()
  id: dojo/main.touch#1_10dojo_main_touch_out
  summary: null
  belongs_to: main.touch
  description: |-
    ### `out` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'mouseout' or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: main.touch#over()
  id: dojo/main.touch#1_10dojo_main_touch_over
  summary: null
  belongs_to: main.touch
  description: |-
    ### `over` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'mouseover' or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: main.touch#press()
  id: dojo/main.touch#1_10dojo_main_touch_press
  summary: null
  belongs_to: main.touch
  description: |-
    ### `press` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'touchstart'\|'mousedown' for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: main.touch#release()
  id: dojo/main.touch#1_10dojo_main_touch_release
  summary: Register a listener to releasing the mouse button while the cursor is over the given node (i.e
  belongs_to: main.touch
  description: "### `release` `(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to releasing the mouse button while the cursor is over the given node (i.e. \"mouseup\") or for removing the finger from the screen while touching the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.touch.html](http://dojotoolkit.org/api/1.10/dojo/main.touch.html)"
- name: main.version
  id: dojo/main.version
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.version\n\n## Summary\n\nVersion number of the Dojo Toolkit\n\nHash about the version, including\n\n- major: Integer: Major version. If total version is \"1.2.0beta1\", will be 1\n- minor: Integer: Minor version. If total version is \"1.2.0beta1\", will be 2\n- patch: Integer: Patch version. If total version is \"1.2.0beta1\", will be 0\n- flag: String: Descriptor flag. If total version is \"1.2.0beta1\", will be \"beta1\"\n- revision: Number: The Git rev from which dojo was pulled\n\n## Properties\n\n### flag\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### major\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### minor\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### patch\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n### revision\n\nDefined by: [dojo/\\_base/kernel](_base/kernel)\n\n## Methods\n\n### `toString``()`\n\nDefined by [dojo/\\_base/kernel](_base/kernel)\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.version.html](http://dojotoolkit.org/api/1.10/dojo/main.version.html)"
- name: main.window
  id: dojo/main.window
  summary: Get window object associated with document doc
  description: "# dojo/main.window\n\n## Summary\n\nTODOC\n\n## Methods\n\n### `get``(doc)`\n\nDefined by [dojo/window](window)\n\nGet window object associated with document doc.\n\n|           |          |                                                |\n|-----------|----------|------------------------------------------------|\n| Parameter | Type     | Description                                    |\n| doc       | Document | The document to get the associated window for. |\n\n**Returns:** undefined\n\n### `getBox``(doc)`\n\nDefined by [dojo/window](window)\n\nReturns the dimensions and scroll position of the viewable area of a browser window\n\n[TABLE]\n\n**Returns:** object\n\n### `scrollIntoView``(node,pos)`\n\nDefined by [dojo/window](window)\n\nScroll the passed node into view using minimal movement, if it is not already.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.window.html](http://dojotoolkit.org/api/1.10/dojo/main.window.html)"
- name: main.window#get()
  id: dojo/main.window#1_10dojo_main_window_get
  summary: Get window object associated with document doc
  belongs_to: main.window
  description: |-
    ### `get` `(doc)`

    Defined by [dojo/window](window)

    Get window object associated with document doc.

    |           |          |                                                |
    |-----------|----------|------------------------------------------------|
    | Parameter | Type     | Description                                    |
    | doc       | Document | The document to get the associated window for. |

    **Returns:** undefined
- name: main.window#getBox()
  id: dojo/main.window#1_10dojo_main_window_getBox
  summary: null
  belongs_to: main.window
  description: |-
    ### `getBox` `(doc)`

    Defined by [dojo/window](window)

    Returns the dimensions and scroll position of the viewable area of a browser window

    [TABLE]

    **Returns:** object
- name: main.window#scrollIntoView()
  id: dojo/main.window#1_10dojo_main_window_scrollIntoView
  summary: Scroll the passed node into view using minimal movement, if it is not already
  belongs_to: main.window
  description: "### `scrollIntoView` `(node,pos)`\n\nDefined by [dojo/window](window)\n\nScroll the passed node into view using minimal movement, if it is not already.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.window.html](http://dojotoolkit.org/api/1.10/dojo/main.window.html)"
- name: main._contentHandlers
  id: dojo/main._contenthandlers
  summary: A map of available XHR transport handle types
  description: "# dojo/main.\\_contentHandlers\n\n## Summary\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls. Each contentHandler is called, passing the xhr object for manipulation. The return value from the contentHandler will be passed to the `load` or `handle` functions defined in the original xhr call.\n\n## Examples\n\n### Example 1\n\nCreating a custom content-handler:\n\n``` javascript\nxhr.contentHandlers.makeCaps = function(xhr){\n    return xhr.responseText.toUpperCase();\n}\n// and later:\ndojo.xhrGet({\n    url:\"foo.txt\",\n    handleAs:\"makeCaps\",\n    load: function(data){ /* data is a toUpper version of foo.txt */ }\n});\n```\n\n## Methods\n\n### `auto``(xhr)`\n\nDefined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n### `javascript``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which evaluates the response data, expecting it to be valid JavaScript\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which returns a JavaScript object created from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-filtered``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which expects comment-filtered JSON.\n\nA contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent \"JavaScript Hijacking\", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.\n\nWill throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your \"JSON\" with: {}&&\n\nuse djConfig.useCommentedJson = true to turn off the notice\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-optional``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `text``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler which simply returns the plaintext response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `xml``(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/main._contentHandlers.html)"
- name: main._contentHandlers#auto()
  id: dojo/main._contenthandlers#1_10dojo_main__contentHandlers_auto
  summary: null
  belongs_to: main._contentHandlers
  description: |-
    ### `auto` `(xhr)`

    Defined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |
- name: main._contentHandlers#javascript()
  id: dojo/main._contenthandlers#1_10dojo_main__contentHandlers_javascript
  summary: null
  belongs_to: main._contentHandlers
  description: |-
    ### `javascript` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which evaluates the response data, expecting it to be valid JavaScript

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main._contentHandlers#json()
  id: dojo/main._contenthandlers#1_10dojo_main__contentHandlers_json
  summary: null
  belongs_to: main._contentHandlers
  description: |-
    ### `json` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which returns a JavaScript object created from the response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main._contentHandlers#json-comment-filtered()
  id: dojo/main._contenthandlers#1_10dojo_main__contentHandlers_json-comment-filtered
  summary: A contentHandler which expects comment-filtered JSON
  belongs_to: main._contentHandlers
  description: |-
    ### `json-comment-filtered` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which expects comment-filtered JSON.

    A contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent "JavaScript Hijacking", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.

    Will throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your "JSON" with: {}&&

    use djConfig.useCommentedJson = true to turn off the notice

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main._contentHandlers#json-comment-optional()
  id: dojo/main._contenthandlers#1_10dojo_main__contentHandlers_json-comment-optional
  summary: A contentHandler which checks the presence of comment-filtered JSON and alternates between the json and json-comment-filtered contentHandlers
  belongs_to: main._contentHandlers
  description: |-
    ### `json-comment-optional` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main._contentHandlers#text()
  id: dojo/main._contenthandlers#1_10dojo_main__contentHandlers_text
  summary: null
  belongs_to: main._contentHandlers
  description: |-
    ### `text` `(xhr)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    A contentHandler which simply returns the plaintext response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: main._contentHandlers#xml()
  id: dojo/main._contenthandlers#1_10dojo_main__contentHandlers_xml
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: main._contentHandlers
  description: "### `xml` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/main._contentHandlers.html)"
- name: main._hasResource
  id: dojo/main._hasresource
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.\\_hasResource\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_hasResource.html](http://dojotoolkit.org/api/1.10/dojo/main._hasResource.html)"
- name: main._nodeDataCache
  id: dojo/main._nodedatacache
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/main.\\_nodeDataCache\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_nodeDataCache.html](http://dojotoolkit.org/api/1.10/dojo/main._nodeDataCache.html)"
- name: main.__IoArgs
  id: dojo/main.__ioargs
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/main.\\_\\_IoArgs\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new main.__IoArgs()`\n\n## Properties\n\n### content\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nContains properties with string values. These properties will be serialized as name1=value2 and passed in the request.\n\n### form\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nDOM node for a form. Used to extract the form values and send to the server.\n\n### handleAs\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nAcceptable values depend on the type of IO transport (see specific IO calls for more information).\n\n### ioPublish\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nSet this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](topic#publish) for different phases of an IO operation. See [dojo/main.\\_\\_IoPublish](main.__iopublish) for a list of topics that are published.\n\n### preventCache\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nDefault is false. If true, then a \"dojo.preventCache\" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.\n\n### rawBody\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nSets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\\_base/xhr.rawXhrPost](_base/xhr#rawXhrPost) and [dojo/\\_base/xhr.rawXhrPut](_base/xhr#rawXhrPut) respectively.\n\n### timeout\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nMilliseconds to wait for the response. If this time passes, the then error callbacks are called.\n\n### url\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nURL to server endpoint.\n\n## Methods\n\n### `error``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.\n\n|           |                                                       |                                                      |\n|-----------|-------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                  | Description                                          |\n| response  | Object                                                | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |\n\n### `handle``(loadOrError,response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called at the end of every request, whether or not an error occurs.\n\n|             |                                                       |                                                                                                                 |\n|-------------|-------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|\n| Parameter   | Type                                                  | Description                                                                                                     |\n| loadOrError | String                                                | Provides a string that tells you whether this function was called because of success (load) or failure (error). |\n| response    | Object                                                | The response in the format as defined with handleAs.                                                            |\n| ioArgs      | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.                                                              |\n\n### `load``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                       |                                                      |\n|-----------|-------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                  | Description                                          |\n| response  | Object                                                | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_\\_IoArgs.html](http://dojotoolkit.org/api/1.10/dojo/main.__IoArgs.html)"
- name: main.__IoArgs#content
  id: dojo/main.__ioargs#1_10dojo_main___IoArgs_content
  summary: Contains properties with string values
  belongs_to: main.__IoArgs
  description: |-
    ### content

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Contains properties with string values. These properties will be serialized as name1=value2 and passed in the request.

    ### form

    Defined by: [dojo/\_base/xhr](_base/xhr)

    DOM node for a form. Used to extract the form values and send to the server.

    ### handleAs

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Acceptable values depend on the type of IO transport (see specific IO calls for more information).

    ### ioPublish

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Set this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](topic#publish) for different phases of an IO operation. See [dojo/main.\_\_IoPublish](main.__iopublish) for a list of topics that are published.

    ### preventCache

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Default is false. If true, then a "dojo.preventCache" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.

    ### rawBody

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Sets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\_base/xhr.rawXhrPost](_base/xhr#rawXhrPost) and [dojo/\_base/xhr.rawXhrPut](_base/xhr#rawXhrPut) respectively.

    ### timeout

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Milliseconds to wait for the response. If this time passes, the then error callbacks are called.

    ### url

    Defined by: [dojo/\_base/xhr](_base/xhr)

    URL to server endpoint.

    ## Methods
- name: main.__IoArgs#error()
  id: dojo/main.__ioargs#1_10dojo_main___IoArgs_error
  summary: This function will be called when the request fails due to a network or server error, the url is invalid, etc
  belongs_to: main.__IoArgs
  description: |-
    ### `error` `(response,ioArgs)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    This function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.

    |           |                                                       |                                                      |
    |-----------|-------------------------------------------------------|------------------------------------------------------|
    | Parameter | Type                                                  | Description                                          |
    | response  | Object                                                | The response in the format as defined with handleAs. |
    | ioArgs    | [dojo/main.\_\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |
- name: main.__IoArgs#handle()
  id: dojo/main.__ioargs#1_10dojo_main___IoArgs_handle
  summary: This function will be called at the end of every request, whether or not an error occurs
  belongs_to: main.__IoArgs
  description: |-
    ### `handle` `(loadOrError,response,ioArgs)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    This function will be called at the end of every request, whether or not an error occurs.

    |             |                                                       |                                                                                                                 |
    |-------------|-------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|
    | Parameter   | Type                                                  | Description                                                                                                     |
    | loadOrError | String                                                | Provides a string that tells you whether this function was called because of success (load) or failure (error). |
    | response    | Object                                                | The response in the format as defined with handleAs.                                                            |
    | ioArgs      | [dojo/main.\_\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.                                                              |
- name: main.__IoArgs#load()
  id: dojo/main.__ioargs#1_10dojo_main___IoArgs_load
  summary: This function will be called on a successful HTTP response code
  belongs_to: main.__IoArgs
  description: "### `load` `(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                       |                                                      |\n|-----------|-------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                  | Description                                          |\n| response  | Object                                                | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_\\_IoArgs.html](http://dojotoolkit.org/api/1.10/dojo/main.__IoArgs.html)"
- name: main.__IoCallbackArgs
  id: dojo/main.__iocallbackargs
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/main.\\_\\_IoCallbackArgs\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new main.__IoCallbackArgs()`\n\n## Properties\n\n### args\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nthe original object argument to the IO call.\n\n### canDelete\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nFor [dojo/io/script](io/script) calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests.\n\n### handleAs\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nThe final indicator on how the response will be handled.\n\n### id\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nFor [dojo/io/script](io/script) calls only, the internal script ID used for the request.\n\n### json\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nFor [dojo/io/script](io/script) calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly.\n\n### query\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nFor non-GET requests, the name1=value1&name2=value2 parameters sent up in the request.\n\n### url\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nThe final URL used for the call. Many times it will be different than the original args.url value.\n\n### xhr\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nFor XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_\\_IoCallbackArgs.html](http://dojotoolkit.org/api/1.10/dojo/main.__IoCallbackArgs.html)"
- name: main.__IoCallbackArgs#args
  id: dojo/main.__iocallbackargs#1_10dojo_main___IoCallbackArgs_args
  summary: the original object argument to the IO call
  belongs_to: main.__IoCallbackArgs
  description: |-
    ### args

    Defined by: [dojo/\_base/xhr](_base/xhr)

    the original object argument to the IO call.

    ### canDelete

    Defined by: [dojo/\_base/xhr](_base/xhr)

    For [dojo/io/script](io/script) calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests.

    ### handleAs

    Defined by: [dojo/\_base/xhr](_base/xhr)

    The final indicator on how the response will be handled.

    ### id

    Defined by: [dojo/\_base/xhr](_base/xhr)

    For [dojo/io/script](io/script) calls only, the internal script ID used for the request.
- name: main.__IoCallbackArgs#json
  id: dojo/main.__iocallbackargs#1_10dojo_main___IoCallbackArgs_json
  summary: 'For dojo/io/script calls only: holds the JSON response for JSONP-type requests'
  belongs_to: main.__IoCallbackArgs
  description: |-
    ### json

    Defined by: [dojo/\_base/xhr](_base/xhr)

    For [dojo/io/script](io/script) calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly.

    ### query

    Defined by: [dojo/\_base/xhr](_base/xhr)

    For non-GET requests, the name1=value1&name2=value2 parameters sent up in the request.

    ### url

    Defined by: [dojo/\_base/xhr](_base/xhr)

    The final URL used for the call. Many times it will be different than the original args.url value.
- name: main.__IoCallbackArgs#xhr
  id: dojo/main.__iocallbackargs#1_10dojo_main___IoCallbackArgs_xhr
  summary: For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request
  belongs_to: main.__IoCallbackArgs
  description: "### xhr\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nFor XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_\\_IoCallbackArgs.html](http://dojotoolkit.org/api/1.10/dojo/main.__IoCallbackArgs.html)"
- name: main.__IoPublish
  id: dojo/main.__iopublish
  summary: This is a list of IO topics that can be published if djConfig.ioPublish is set to true
  description: "# dojo/main.\\_\\_IoPublish\n\n## Summary\n\nThis is a list of IO topics that can be published if djConfig.ioPublish is set to true. IO topics can be published for any Input/Output, network operation. So, dojo.xhr, dojo.io.script and dojo.io.iframe can all trigger these topics to be published.\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new main.__IoPublish()`\n\n## Properties\n\n### done\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\n\"/dojo/io/done\" is sent whenever an IO request has completed, either by loading or by erroring. It passes the error and the dojo.Deferred for the request with the topic.\n\n### error\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\n\"/dojo/io/error\" is sent whenever an IO request has errored. It passes the error and the dojo.Deferred for the request with the topic.\n\n### load\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\n\"/dojo/io/load\" is sent whenever an IO request has loaded successfully. It passes the response and the dojo.Deferred for the request with the topic.\n\n### send\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\n\"/dojo/io/send\" is sent whenever a new IO request is started. It passes the dojo.Deferred for the request with the topic.\n\n### start\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\n\"/dojo/io/start\" is sent when there are no outstanding IO requests, and a new IO request is started. No arguments are passed with this topic.\n\n### stop\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\n\"/dojo/io/stop\" is sent when all outstanding IO requests have finished. No arguments are passed with this topic.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_\\_IoPublish.html](http://dojotoolkit.org/api/1.10/dojo/main.__IoPublish.html)"
- name: main.__XhrArgs
  id: dojo/main.__xhrargs
  summary: In addition to the properties listed for the dojo._IoArgs type, the following properties are allowed for dojo.xhr* methods
  description: "# dojo/main.\\_\\_XhrArgs\n\n## Summary\n\nIn addition to the properties listed for the dojo.\\_IoArgs type, the following properties are allowed for dojo.xhr\\* methods.\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new main.__XhrArgs()`\n\n## Properties\n\n### content\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nContains properties with string values. These properties will be serialized as name1=value2 and passed in the request.\n\n### contentType\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\n\"application/x-www-form-urlencoded\" is default. Set to false to prevent a Content-Type header from being sent, or to a string to send a different Content-Type.\n\n### failOk\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nfalse is default. Indicates whether a request should be allowed to fail (and therefore no console error message in the event of a failure)\n\n### form\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nDOM node for a form. Used to extract the form values and send to the server.\n\n### handleAs\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nAcceptable values are: text (default), json, json-comment-optional, json-comment-filtered, javascript, xml. See [dojo/\\_base/xhr.contentHandlers](_base/xhr.contenthandlers)\n\n### headers\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nAdditional HTTP headers to send in the request.\n\n### ioPublish\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nSet this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](topic#publish) for different phases of an IO operation. See [dojo/main.\\_\\_IoPublish](main.__iopublish) for a list of topics that are published.\n\n### preventCache\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nDefault is false. If true, then a \"dojo.preventCache\" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.\n\n### rawBody\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nSets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\\_base/xhr.rawXhrPost](_base/xhr#rawXhrPost) and [dojo/\\_base/xhr.rawXhrPut](_base/xhr#rawXhrPut) respectively.\n\n### sync\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nfalse is default. Indicates whether the request should be a synchronous (blocking) request.\n\n### timeout\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nMilliseconds to wait for the response. If this time passes, the then error callbacks are called.\n\n### url\n\nDefined by: [dojo/\\_base/xhr](_base/xhr)\n\nURL to server endpoint.\n\n## Methods\n\n### `error``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.\n\n|           |                                                       |                                                      |\n|-----------|-------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                  | Description                                          |\n| response  | Object                                                | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |\n\n### `handle``(loadOrError,response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called at the end of every request, whether or not an error occurs.\n\n|             |                                                       |                                                                                                                 |\n|-------------|-------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|\n| Parameter   | Type                                                  | Description                                                                                                     |\n| loadOrError | String                                                | Provides a string that tells you whether this function was called because of success (load) or failure (error). |\n| response    | Object                                                | The response in the format as defined with handleAs.                                                            |\n| ioArgs      | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.                                                              |\n\n### `load``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                       |                                                      |\n|-----------|-------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                  | Description                                          |\n| response  | Object                                                | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_\\_XhrArgs.html](http://dojotoolkit.org/api/1.10/dojo/main.__XhrArgs.html)"
- name: main.__XhrArgs#content
  id: dojo/main.__xhrargs#1_10dojo_main___XhrArgs_content
  summary: Contains properties with string values
  belongs_to: main.__XhrArgs
  description: |-
    ### content

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Contains properties with string values. These properties will be serialized as name1=value2 and passed in the request.

    ### contentType

    Defined by: [dojo/\_base/xhr](_base/xhr)

    "application/x-www-form-urlencoded" is default. Set to false to prevent a Content-Type header from being sent, or to a string to send a different Content-Type.

    ### failOk

    Defined by: [dojo/\_base/xhr](_base/xhr)

    false is default. Indicates whether a request should be allowed to fail (and therefore no console error message in the event of a failure)

    ### form

    Defined by: [dojo/\_base/xhr](_base/xhr)

    DOM node for a form. Used to extract the form values and send to the server.

    ### handleAs

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Acceptable values are: text (default), json, json-comment-optional, json-comment-filtered, javascript, xml. See [dojo/\_base/xhr.contentHandlers](_base/xhr.contenthandlers)
- name: main.__XhrArgs#error()
  id: dojo/main.__xhrargs#1_10dojo_main___XhrArgs_error
  summary: This function will be called when the request fails due to a network or server error, the url is invalid, etc
  belongs_to: main.__XhrArgs
  description: |-
    ### `error` `(response,ioArgs)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    This function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.

    |           |                                                       |                                                      |
    |-----------|-------------------------------------------------------|------------------------------------------------------|
    | Parameter | Type                                                  | Description                                          |
    | response  | Object                                                | The response in the format as defined with handleAs. |
    | ioArgs    | [dojo/main.\_\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |
- name: main.__XhrArgs#handle()
  id: dojo/main.__xhrargs#1_10dojo_main___XhrArgs_handle
  summary: This function will be called at the end of every request, whether or not an error occurs
  belongs_to: main.__XhrArgs
  description: |-
    ### `handle` `(loadOrError,response,ioArgs)`

    Defined by [dojo/\_base/xhr](_base/xhr)

    This function will be called at the end of every request, whether or not an error occurs.

    |             |                                                       |                                                                                                                 |
    |-------------|-------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|
    | Parameter   | Type                                                  | Description                                                                                                     |
    | loadOrError | String                                                | Provides a string that tells you whether this function was called because of success (load) or failure (error). |
    | response    | Object                                                | The response in the format as defined with handleAs.                                                            |
    | ioArgs      | [dojo/main.\_\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.                                                              |
- name: main.__XhrArgs#headers
  id: dojo/main.__xhrargs#1_10dojo_main___XhrArgs_headers
  summary: Additional HTTP headers to send in the request
  belongs_to: main.__XhrArgs
  description: |-
    ### headers

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Additional HTTP headers to send in the request.

    ### ioPublish

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Set this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](topic#publish) for different phases of an IO operation. See [dojo/main.\_\_IoPublish](main.__iopublish) for a list of topics that are published.

    ### preventCache

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Default is false. If true, then a "dojo.preventCache" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.

    ### rawBody

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Sets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\_base/xhr.rawXhrPost](_base/xhr#rawXhrPost) and [dojo/\_base/xhr.rawXhrPut](_base/xhr#rawXhrPut) respectively.

    ### sync

    Defined by: [dojo/\_base/xhr](_base/xhr)

    false is default. Indicates whether the request should be a synchronous (blocking) request.

    ### timeout

    Defined by: [dojo/\_base/xhr](_base/xhr)

    Milliseconds to wait for the response. If this time passes, the then error callbacks are called.

    ### url

    Defined by: [dojo/\_base/xhr](_base/xhr)

    URL to server endpoint.

    ## Methods
- name: main.__XhrArgs#load()
  id: dojo/main.__xhrargs#1_10dojo_main___XhrArgs_load
  summary: This function will be called on a successful HTTP response code
  belongs_to: main.__XhrArgs
  description: "### `load` `(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](_base/xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                       |                                                      |\n|-----------|-------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                  | Description                                          |\n| response  | Object                                                | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/main.\\_\\_XhrArgs.html](http://dojotoolkit.org/api/1.10/dojo/main.__XhrArgs.html)"
- name: mouse
  id: dojo/mouse
  summary: This module provide mouse event handling utility functions and exports mouseenter and mouseleave event emulation
  description: "# dojo/mouse\n\n## Summary\n\nThis module provide mouse event handling utility functions and exports mouseenter and mouseleave event emulation.\n\nSee the [dojo/mouse reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/mouse.html) for more information.\n\n## Examples\n\n### Example 1\n\nTo use these events, you register a mouseenter like this:\n\n``` javascript\ndefine([\"dojo/on\", dojo/mouse\"], function(on, mouse){\n    on(targetNode, mouse.enter, function(event){\n        dojo.addClass(targetNode, \"highlighted\");\n    });\n    on(targetNode, mouse.leave, function(event){\n        dojo.removeClass(targetNode, \"highlighted\");\n    });\n```\n\n## Properties\n\n### enter\n\nDefined by: [dojo/mouse](mouse)\n\nThis is an extension event for the mouseenter that IE provides, emulating the behavior on other browsers.\n\n### leave\n\nDefined by: [dojo/mouse](mouse)\n\nThis is an extension event for the mouseleave that IE provides, emulating the behavior on other browsers.\n\n## Methods\n\n### `isLeft``()`\n\nDefined by [dojo/mouse](mouse)\n\nTest an event object (from a mousedown event) to see if the left button was pressed.\n\n### `isMiddle``()`\n\nDefined by [dojo/mouse](mouse)\n\nTest an event object (from a mousedown event) to see if the middle button was pressed.\n\n### `isRight``()`\n\nDefined by [dojo/mouse](mouse)\n\nTest an event object (from a mousedown event) to see if the right button was pressed.\n\n### `wheel``(node,listener)`\n\nDefined by [dojo/mouse](mouse)\n\nThis is an extension event for the mousewheel that non-Mozilla browsers provide, emulating the behavior on Mozilla based browsers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/mouse.html](http://dojotoolkit.org/api/1.10/dojo/mouse.html)"
- name: mouse#enter
  id: dojo/mouse#1_10dojo_mouse_enter
  summary: This is an extension event for the mouseenter that IE provides, emulating the behavior on other browsers
  belongs_to: mouse
  description: |-
    ### enter

    Defined by: [dojo/mouse](mouse)

    This is an extension event for the mouseenter that IE provides, emulating the behavior on other browsers.
- name: mouse#isLeft()
  id: dojo/mouse#1_10dojo_mouse_isLeft
  summary: Test an event object (from a mousedown event) to see if the left button was pressed
  belongs_to: mouse
  description: |-
    ### `isLeft` `()`

    Defined by [dojo/mouse](mouse)

    Test an event object (from a mousedown event) to see if the left button was pressed.
- name: mouse#isMiddle()
  id: dojo/mouse#1_10dojo_mouse_isMiddle
  summary: Test an event object (from a mousedown event) to see if the middle button was pressed
  belongs_to: mouse
  description: |-
    ### `isMiddle` `()`

    Defined by [dojo/mouse](mouse)

    Test an event object (from a mousedown event) to see if the middle button was pressed.
- name: mouse#isRight()
  id: dojo/mouse#1_10dojo_mouse_isRight
  summary: Test an event object (from a mousedown event) to see if the right button was pressed
  belongs_to: mouse
  description: |-
    ### `isRight` `()`

    Defined by [dojo/mouse](mouse)

    Test an event object (from a mousedown event) to see if the right button was pressed.
- name: mouse#leave
  id: dojo/mouse#1_10dojo_mouse_leave
  summary: This is an extension event for the mouseleave that IE provides, emulating the behavior on other browsers
  belongs_to: mouse
  description: |-
    ### leave

    Defined by: [dojo/mouse](mouse)

    This is an extension event for the mouseleave that IE provides, emulating the behavior on other browsers.

    ## Methods
- name: mouse#wheel()
  id: dojo/mouse#1_10dojo_mouse_wheel
  summary: This is an extension event for the mousewheel that non-Mozilla browsers provide, emulating the behavior on Mozilla based browsers
  belongs_to: mouse
  description: "### `wheel` `(node,listener)`\n\nDefined by [dojo/mouse](mouse)\n\nThis is an extension event for the mousewheel that non-Mozilla browsers provide, emulating the behavior on Mozilla based browsers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/mouse.html](http://dojotoolkit.org/api/1.10/dojo/mouse.html)"
- name: node
  id: dojo/node
  summary: This AMD plugin module allows native Node.js modules to be loaded by AMD modules using the Dojo loader
  description: "# dojo/node\n\n## Summary\n\nThis AMD plugin module allows native Node.js modules to be loaded by AMD modules using the Dojo loader. Note that this plugin will not work with AMD loaders other than the Dojo loader.\n\nSee the [dojo/node reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/node.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/node!fs\"], function(fs){\n    var fileData = fs.readFileSync(\"foo.txt\", \"utf-8\");\n});\n```\n\n## Methods\n\n### `load``(id,require,load)`\n\nDefined by [dojo/node](node)\n\nStandard AMD plugin interface. See <https://github.com/amdjs/amdjs-api/wiki/Loader-Plugins> for information.\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| id        | string   |             |\n| require   | Function |             |\n| load      | Function |             |\n\n### `normalize``(id,normalize)`\n\nDefined by [dojo/node](node)\n\nProduces a normalized id to be used by node. Relative ids are resolved relative to the requesting module's location in the file system and will return an id with path separators appropriate for the local file system.\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| id        | string   |             |\n| normalize | Function |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/node.html](http://dojotoolkit.org/api/1.10/dojo/node.html)"
- name: node#load()
  id: dojo/node#1_10dojo_node_load
  summary: Standard AMD plugin interface
  belongs_to: node
  description: |-
    ### `load` `(id,require,load)`

    Defined by [dojo/node](node)

    Standard AMD plugin interface. See <https://github.com/amdjs/amdjs-api/wiki/Loader-Plugins> for information.

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | id        | string   |             |
    | require   | Function |             |
    | load      | Function |             |
- name: node#normalize()
  id: dojo/node#1_10dojo_node_normalize
  summary: Produces a normalized id to be used by node
  belongs_to: node
  description: "### `normalize` `(id,normalize)`\n\nDefined by [dojo/node](node)\n\nProduces a normalized id to be used by node. Relative ids are resolved relative to the requesting module's location in the file system and will return an id with path separators appropriate for the local file system.\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| id        | string   |             |\n| normalize | Function |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/node.html](http://dojotoolkit.org/api/1.10/dojo/node.html)"
- name: NodeList
  id: dojo/nodelist
  summary: Array-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation
  description: "# dojo/NodeList\n\n## Summary\n\nArray-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of [dojo/query()](query) calls.\n\nNodeList instances provide many utilities that reflect core Dojo APIs for Array iteration and manipulation, DOM manipulation, and event handling. Instead of needing to dig up functions in the dojo package, NodeLists generally make the full power of Dojo available for DOM manipulation tasks in a simple, chainable way.\n\n## Usage\n\nNodeList`(array);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| array     | undefined |             |\n\n**Returns:** Array\n\nSee the [dojo/NodeList reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/NodeList.html) for more information.\n\n## Examples\n\n### Example 1\n\ncreate a node list from a node\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom\"\n], function(query, dom){\n    query.NodeList(dom.byId(\"foo\"));\n});\n```\n\n### Example 2\n\nget a NodeList from a CSS query and iterate on it\n\n``` javascript\nrequire([\"dojo/on\", \"dojo/dom\"\n], function(on, dom){\n    var l = query(\".thinger\");\n    l.forEach(function(node, index, nodeList){\n        console.log(index, node.innerHTML);\n    });\n});\n```\n\n### Example 3\n\nuse native and Dojo-provided array methods to manipulate a NodeList without needing to use dojo.\\* functions explicitly:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom-construct\", \"dojo/dom\"\n], function(query, domConstruct, dom){\n    var l = query(\".thinger\");\n    // since NodeLists are real arrays, they have a length\n    // property that is both readable and writable and\n    // push/pop/shift/unshift methods\n    console.log(l.length);\n    l.push(domConstruct.create(\"span\"));\n\n    // dojo's normalized array methods work too:\n    console.log( l.indexOf(dom.byId(\"foo\")) );\n    // ...including the special \"function as string\" shorthand\n    console.log( l.every(\"item.nodeType == 1\") );\n\n    // NodeLists can be [..] indexed, or you can use the at()\n    // function to get specific items wrapped in a new NodeList:\n    var node = l[3]; // the 4th element\n    var newList = l.at(1, 3); // the 2nd and 4th elements\n});\n```\n\n### Example 4\n\nchainability is a key advantage of NodeLists:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".thinger\")\n        .onclick(function(e){ /* ... */ })\n        .at(1, 3, 8) // get a subset\n            .style(\"padding\", \"5px\")\n            .forEach(console.log);\n});\n```\n\n## Properties\n\n### events\n\nDefined by: [dojo/\\_base/NodeList](_base/nodelist)\n\n## Methods\n\n### `addClass``(className)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nadds the specified class to every node in the list\n\n|           |                 |                                                                                                 |\n|-----------|-----------------|-------------------------------------------------------------------------------------------------|\n| Parameter | Type            | Description                                                                                     |\n| className | String \\| Array | A String class name to add, or several space-separated class names, or an array of class names. |\n\n### `addClassFx``(cssClass,args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList-style](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList-style)\n\nAnimate the effects of adding a class to all nodes in this list. see `dojox.fx.addClass`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| cssClass  | undefined |             |\n| args      | undefined |             |\n\n**Returns:** \\[object Value(type: function, value: undefined)\\]\n\n## Examples\n\n### Example 1\n\n``` javascript\n// fade all elements with class \"bar\" to to 50% opacity\ndojo.query(\".bar\").addClassFx(\"bar\").play();\n```\n\n### `addContent``(content,position)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nadd a node, NodeList or some HTML as a string to every item in the list. Returns the original list.\n\na copy of the HTML content is added to each item in the list, with an optional position argument. If no position argument is provided, the content is appended to the end of each item.\n\n[TABLE]\n\n**Returns:** function\n\nadd a node, NodeList or some HTML as a string to every item in the list. Returns the original list.\n\n## Examples\n\n### Example 1\n\nappends content to the end if the position is omitted\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"h3 > p\").addContent(\"hey there!\");\n});\n```\n\n### Example 2\n\nadd something to the front of each element that has a \"thinger\" property:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"[thinger]\").addContent(\"...\", \"first\");\n});\n```\n\n### Example 3\n\nadds a header before each element of the list\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".note\").addContent(\"<h4>NOTE:</h4>\", \"before\");\n});\n```\n\n### Example 4\n\nadd a clone of a DOM node to the end of every element in the list, removing it from its existing parent.\n\n``` javascript\nrequire([\"dojo/dom\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(dom, query){\n    query(\".note\").addContent(dom.byId(\"foo\"));\n});\n```\n\n### Example 5\n\nAppend nodes from a templatized string.\n\n``` javascript\nrequire([\"dojo/string\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(string, query){\n    query(\".note\").addContent({\n        template: '<b>${id}: </b><span>${name}</span>',\n        id: \"user332\",\n        name: \"Mr. Anderson\"\n    });\n});\n```\n\n### Example 6\n\nAppend nodes from a templatized string that also has widgets parsed.\n\n``` javascript\nrequire([\"dojo/string\", \"dojo/parser\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(string, parser, query){\n    var notes = query(\".note\").addContent({\n        template: '<button dojoType=\"dijit/form/Button\">${text}</button>',\n        parse: true,\n        text: \"Send\"\n    });\n});\n```\n\n### `adopt``(queryOrListOrNode,position)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nplaces any/all elements in queryOrListOrNode at a position relative to the first element in this list. Returns a dojo/NodeList of the adopted elements.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `after``(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nPlaces the content after every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| Element \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").after(\"<span>after</span>\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p></div><span>after</span>\n<div id=\"bar\"><p>Hello World</p></div><span>after</span>\n```\n\n### `andSelf``()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nAdds the nodes from the previous dojo/NodeList to the current dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red prev\">Red One</div>\n    Some Text\n    <div class=\"blue prev\">Blue One</div>\n    <div class=\"red second\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".second\").prevAll().andSelf();\n});\n```\n\nreturns the two divs with class of \"prev\", as well as the div with class \"second\".\n\n### `anim``(properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nAnimate one or more CSS properties for all nodes in this list. The returned animation object will already be playing when it is returned. See the docs for `dojo.anim` for full details.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nAnother way to fade out:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".thinger\").anim({ opacity: 0 });\n});\n```\n\n### Example 2\n\nanimate all elements with the \"thigner\" class to a width of 500 pixels over half a second\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".thinger\").anim({ width: 500 }, 700);\n});\n```\n\n### `animateProperty``(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nAnimate all elements of this NodeList across the properties specified. syntax identical to `dojo.animateProperty`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".zork\").animateProperty({\n        duration: 500,\n        properties: {\n            color:      { start: \"black\", end: \"white\" },\n            left:       { end: 300 }\n        }\n    }).play();\n});\n```\n\n### Example 2\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".grue\").animateProperty({\n        auto:true,\n        properties: {\n            height:240\n        }\n    }).onclick(handler);\n});\n```\n\n### `append``(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nappends the content to every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").append(\"<span>append</span>\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p><span>append</span></div>\n<div id=\"bar\"><p>Hello World</p><span>append</span></div>\n```\n\n### `appendTo``(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nappends nodes in this NodeList to the nodes matched by the query passed to appendTo.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<span>append</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").appendTo(\"p\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<p>Hello Mars<span>append</span></p>\n<p>Hello World<span>append</span></p>\n```\n\n### `at``(index)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList comprised of items in this NodeList at the given index or indices.\n\n|           |            |                                                                                                                                    |\n|-----------|------------|------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type       | Description                                                                                                                        |\n| index     | Integer... | One or more 0-based indices of items in the current NodeList. A negative index will start at the end of the list and go backwards. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nShorten the list to the first, second, and third elements\n\n``` javascript\nrequire([\"dojo/query\"\n], function(query){\n    query(\"a\").at(0, 1, 2).forEach(fn);\n});\n```\n\n### Example 2\n\nRetrieve the first and last elements of a unordered list:\n\n``` javascript\nrequire([\"dojo/query\"\n], function(query){\n    query(\"ul > li\").at(0, -1).forEach(cb);\n});\n```\n\n### Example 3\n\nDo something for the first element only, but end() out back to the original list and continue chaining:\n\n``` javascript\nrequire([\"dojo/query\"\n], function(query){\n    query(\"a\").at(0).onclick(fn).end().forEach(function(n){\n        console.log(n); // all anchors on the page.\n})\n});\n```\n\n### `attr``(property,value)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\ngets or sets the DOM attribute for every element in the NodeList. See also `dojo/dom-attr`\n\n[TABLE]\n\n**Returns:** any\n\nif no value is passed, the result is an array of attribute values If a value is passed, the return is this NodeList\n\n## Examples\n\n### Example 1\n\nMake all nodes with a particular class focusable:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\n    query(\".focusable\").attr(\"tabIndex\", -1);\n});\n```\n\n### Example 2\n\nDisable a group of buttons:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\n    query(\"button.group\").attr(\"disabled\", true);\n});\n```\n\n### Example 3\n\ninnerHTML can be assigned or retrieved as well:\n\n``` javascript\n// get the innerHTML (as an array) for each list item\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\n    var ih = query(\"li.replaceable\").attr(\"innerHTML\");\n});\n```\n\n### `before``(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nPlaces the content before every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").before(\"<span>before</span>\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<span>before</span><div id=\"foo\"><p>Hello Mars</p></div>\n<span>before</span><div id=\"bar\"><p>Hello World</p></div>\n```\n\n### `children``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all immediate child elements for nodes in this dojo/NodeList. Optionally takes a query to filter the child elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall immediate child elements for the nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".container\").children();\n});\n```\n\nreturns the four divs that are children of the container div.\n\nRunning this code:\n\n``` javascript\ndojo.query(\".container\").children(\".red\");\n```\n\nreturns the two divs that have the class \"red\".\n\n### `clone``()`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nClones all the nodes in this NodeList and returns them as a new NodeList.\n\nOnly the DOM nodes are cloned, not any attached event handlers.\n\n**Returns:** any \\| undefined\n\na cloned set of the original nodes.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").clone().appendTo(\".container\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"red\">Red Two</div>\n</div>\n```\n\n### `closest``(query,root)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns closest parent that matches query, including current node in this dojo/NodeList if it matches the query.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe closest parent that matches the query, including the current node in this dojo/NodeList if it matches the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".red\").closest(\".container\");\n});\n```\n\nreturns the div with class \"container\".\n\n### `concat``(item)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList comprised of items in this NodeList as well as items passed in as parameters\n\nThis method behaves exactly like the Array.concat method with the caveat that it returns a `NodeList` and not a raw Array. For more details, see the [Array.concat docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `connect``(methodName,objOrFunc,funcName)`\n\nDefined by [dojo/\\_base/NodeList](_base/nodelist)\n\nAttach event handlers to every item of the NodeList. Uses dojo.connect() so event properties are normalized.\n\nApplication must manually require() \"dojo/\\_base/connect\" before using this method.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nadd an onclick handler to every button on the page\n\n``` javascript\nquery(\"div:nth-child(odd)\").connect(\"onclick\", function(e){\n    console.log(\"clicked!\");\n});\n```\n\n### Example 2\n\nattach foo.bar() to every odd div's onmouseover\n\n``` javascript\nquery(\"div:nth-child(odd)\").connect(\"onmouseover\", foo, \"bar\");\n```\n\n### `coords``()`\n\nDefined by [dojo/\\_base/NodeList](_base/nodelist)\n\nDeprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t. Returns the box objects of all elements in a node list as an Array (*not* a NodeList). Acts like `domGeom.coords`, though assumes the node passed is each node in this list.\n\n### `data``(key,value)`\n\nDefined by [dojo/NodeList-data](nodelist-data)\n\nstash or get some arbitrary data on/from these nodes.\n\nStash or get some arbitrary data on/from these nodes. This private \\_data function is exposed publicly on [dojo/NodeList](nodelist), eg: as the result of a [dojo/query](query) call. DIFFERS from jQuery.data in that when used as a getter, the entire list is ALWAYS returned. EVEN WHEN THE LIST IS length == 1.\n\nA single-node version of this function is provided as `dojo._nodeData`, which follows the same signature, though expects a String ID or DomNode reference in the first position, before key/value arguments.\n\n[TABLE]\n\n**Returns:** Object\\|Anything\\|Nothing\n\nWhen used as a setter via `dojo/NodeList`, a NodeList instance is returned for further chaining. When used as a getter via `dojo/NodeList` an ARRAY of items is returned. The items in the array correspond to the elements in the original list. This is true even when the list length is 1, eg: when looking up a node by ID (#foo)\n\n## Examples\n\n### Example 1\n\nSet a key `bar` to some data, then retrieve it.\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-data\"], function(query){\n    query(\".foo\").data(\"bar\", \"touched\");\n    var touched = query(\".foo\").data(\"bar\");\n    if(touched[0] == \"touched\"){ alert('win'); }\n});\n```\n\n### Example 2\n\nGet all the data items for a given node.\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-data\"], function(query){\n    var list = query(\".foo\").data();\n    var first = list[0];\n});\n```\n\n### Example 3\n\nSet the data to a complex hash. Overwrites existing keys with new value\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-data\"], function(query){\n    query(\".foo\").data({ bar:\"baz\", foo:\"bar\" });\n```\n\nThen get some random key:\n\n``` javascript\nquery(\".foo\").data(\"foo\"); // returns [`bar`]\n});\n```\n\n### `delegate``(selector,eventName,fn)`\n\nDefined by [dojox/NodeList/delegate](http://dojotoolkit.org/api/1.10/dojox/NodeList/delegate)\n\nMonitor nodes in this NodeList for \\[bubbled\\] events on nodes that match selector. Calls fn(evt) for those events, where (inside of fn()), this == the node that matches the selector.\n\nSets up event handlers that can catch events on any subnodes matching a given selector, including nodes created after delegate() has been called.\n\nThis allows an app to setup a single event handler on a high level node, rather than many event handlers on subnodes. For example, one onclick handler for a Tree widget, rather than separate handlers for each node in the tree. Since setting up many event handlers is expensive, this can increase performance.\n\nNote that delegate() will not work for events that don't bubble, like focus. onmouseenter/onmouseleave also don't currently work.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.query(\"navbar\").delegate(\"a\", \"onclick\", function(evt){\n        console.log(\"user clicked anchor \", this.node);\n});\n```\n\n### `dtl``(template,context)`\n\nDefined by [dojox/dtl/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/dtl/ext-dojo/NodeList)\n\nRenders the specified template in each of the NodeList entries.\n\n|           |                                    |                                 |\n|-----------|------------------------------------|---------------------------------|\n| Parameter | Type                               | Description                     |\n| template  | dojox/dtl/\\_\\_StringArgs \\| String | The template string or location |\n| context   | dojox/dtl/\\_\\_ObjectArgs \\| Object | The context object or location  |\n\n**Returns:** function\n\nRenders the specified template in each of the NodeList entries.\n\n### `empty``()`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nclears all content from each node in the list. Effectively equivalent to removing all child nodes from every item in the list.\n\n**Returns:** undefined\n\n### `end``()`\n\nDefined by [dojo/query](query)\n\nEnds use of the current `NodeList` by returning the previous NodeList that generated the current NodeList.\n\nReturns the `NodeList` that generated the current `NodeList`. If there is no parent NodeList, an empty NodeList is returned.\n\n**Returns:** undefined \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"a\")\n        .filter(\".disabled\")\n            // operate on the anchors that only have a disabled class\n            .style(\"color\", \"grey\")\n        .end()\n        // jump back to the list of anchors\n        .style(...)\n});\n```\n\n### `even``()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the even nodes in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe even nodes in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"interior red\">Red One</div>\n    <div class=\"interior blue\">Blue One</div>\n    <div class=\"interior red\">Red Two</div>\n    <div class=\"interior blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".interior\").even();\n});\n```\n\nreturns the two divs with class \"blue\"\n\n### `every``(callback,thisObject)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.every()` and the [Array.every docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every). Takes the same structure of arguments and returns as dojo/\\_base/array.every() with the caveat that the passed array is implicitly this NodeList\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fadeIn``(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nfade in all elements of this NodeList via `dojo.fadeIn`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nFade in all tables with class \"blah\":\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").fadeIn().play();\n});\n```\n\n### `fadeOut``(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nfade out all elements of this NodeList via `dojo.fadeOut`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nFade out all elements with class \"zork\":\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".zork\").fadeOut().play();\n});\n```\n\n### Example 2\n\nFade them on a delay and do something at the end:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/aspect\", \"dojo/NodeList-fx\"\n], function(query, aspect){\n    var fo = query(\".zork\").fadeOut();\n    aspect.after(fo, \"onEnd\", function(){ /*...*/ }, true);\n    fo.play();\n});\n```\n\n### Example 3\n\nUsing `auto`:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"li\").fadeOut({ auto:true }).filter(filterFn).forEach(doit);\n});\n```\n\n### `filter``(filter)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\n\"masks\" the built-in javascript filter() method (supported in Dojo via `dojo.filter`) to support passing a simple string filter in addition to supporting filtering function objects.\n\n|           |                    |                                                           |\n|-----------|--------------------|-----------------------------------------------------------|\n| Parameter | Type               | Description                                               |\n| filter    | String \\| Function | If a string, a CSS rule like \".thinger\" or \"div \\> span\". |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n\"regular\" JS filter syntax as exposed in dojo.filter:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"*\").filter(function(item){\n        // highlight every paragraph\n        return (item.nodeName == \"p\");\n    }).style(\"backgroundColor\", \"yellow\");\n});\n```\n\n### Example 2\n\nthe same filtering using a CSS selector\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"*\").filter(\"p\").styles(\"backgroundColor\", \"yellow\");\n});\n```\n\n### `first``()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the first node in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe first node in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue last\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".blue\").first();\n});\n```\n\nreturns the div with class \"blue\" and \"first\".\n\n### `forEach``(callback,thisObj)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.forEach()`. The primary difference is that the acted-on array is implicitly this NodeList. If you want the option to break out of the forEach loop, use every() or some() instead.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| callback  | undefined |             |\n| thisObj   | undefined |             |\n\n**Returns:** function\n\nsee `dojo/_base/array.forEach()`. The primary difference is that the acted-on array is implicitly this NodeList. If you want the option to break out of the forEach loop, use every() or some() instead.\n\n### `html``(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nallows setting the innerHTML of each node in the NodeList, if there is a value passed in, otherwise, reads the innerHTML value of the first node.\n\nThis method is simpler than the [dojo/NodeList.html()](nodelist#html) method provided by [dojo/NodeList-html](nodelist-html). This method just does proper innerHTML insertion of HTML fragments, and it allows for the innerHTML to be read for the first node in the node list. Since [dojo/NodeList-html](nodelist-html) already took the \"html\" name, this method is called \"innerHTML\". However, if [dojo/NodeList-html](nodelist-html) has not been loaded yet, this module will define an \"html\" method that can be used instead. Be careful if you are working in an environment where it is possible that [dojo/NodeList-html](nodelist-html) could have been loaded, since its definition of \"html\" will take precedence. The nodes represented by the value argument will be cloned if more than one node is in this NodeList. The nodes in this NodeList are returned in the \"set\" usage of this method, not the HTML that was inserted.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nif no value is passed, the result is String, the innerHTML of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"></div>\n<div id=\"bar\"></div>\n```\n\nThis code inserts `<p>Hello World</p>` into both divs:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").innerHTML(\"<p>Hello World</p>\");\n});\n```\n\n### Example 2\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n```\n\nThis code returns `<p>Hello Mars</p>`:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    var message = query(\"div\").innerHTML();\n});\n```\n\n### `indexOf``(value,fromIndex)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.indexOf()`. The primary difference is that the acted-on array is implicitly this NodeList\n\nFor more details on the behavior of indexOf, see Mozilla's [indexOf docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf)\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nPositive Integer or 0 for a match, -1 of not found.\n\n### `innerHTML``(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nallows setting the innerHTML of each node in the NodeList, if there is a value passed in, otherwise, reads the innerHTML value of the first node.\n\nThis method is simpler than the [dojo/NodeList.html()](nodelist#html) method provided by [dojo/NodeList-html](nodelist-html). This method just does proper innerHTML insertion of HTML fragments, and it allows for the innerHTML to be read for the first node in the node list. Since [dojo/NodeList-html](nodelist-html) already took the \"html\" name, this method is called \"innerHTML\". However, if [dojo/NodeList-html](nodelist-html) has not been loaded yet, this module will define an \"html\" method that can be used instead. Be careful if you are working in an environment where it is possible that [dojo/NodeList-html](nodelist-html) could have been loaded, since its definition of \"html\" will take precedence. The nodes represented by the value argument will be cloned if more than one node is in this NodeList. The nodes in this NodeList are returned in the \"set\" usage of this method, not the HTML that was inserted.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nif no value is passed, the result is String, the innerHTML of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"></div>\n<div id=\"bar\"></div>\n```\n\nThis code inserts `<p>Hello World</p>` into both divs:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").innerHTML(\"<p>Hello World</p>\");\n});\n```\n\n### Example 2\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n```\n\nThis code returns `<p>Hello Mars</p>`:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    var message = query(\"div\").innerHTML();\n});\n```\n\n### `insertAfter``(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nThe nodes in this NodeList will be placed after the nodes matched by the query passed to insertAfter.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<span>after</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").insertAfter(\"p\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<p>Hello Mars</p><span>after</span>\n<p>Hello World</p><span>after</span>\n```\n\n### `insertBefore``(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nThe nodes in this NodeList will be placed after the nodes matched by the query passed to insertAfter.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<span>before</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").insertBefore(\"p\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<span>before</span><p>Hello Mars</p>\n<span>before</span><p>Hello World</p>\n```\n\n### `instantiate``(declaredClass,properties)`\n\nDefined by [dojo/query](query)\n\nCreate a new instance of a specified class, using the specified properties and each node in the NodeList as a srcNodeRef.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nGrabs all buttons in the page and converts them to dijit/form/Button's.\n\n``` javascript\nvar buttons = query(\"button\").instantiate(Button, {showLabel: true});\n```\n\n### `last``()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the last node in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe last node in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue last\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\nquery(\".blue\").last();\n});\n```\n\nreturns the last div with class \"blue\",\n\n### `lastIndexOf``(value,fromIndex)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.lastIndexOf()`. The primary difference is that the acted-on array is implicitly this NodeList\n\nFor more details on the behavior of lastIndexOf, see Mozilla's [lastIndexOf docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nPositive Integer or 0 for a match, -1 of not found.\n\n### `map``(func,obj)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.map()`. The primary difference is that the acted-on array is implicitly this NodeList and the return is a NodeList (a subclass of Array)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `marginBox``()`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nReturns margin-box size of nodes\n\n### `next``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the next element for nodes in this dojo/NodeList. Optionally takes a query to filter the next elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe next element for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue last\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").next();\n});\n```\n\nreturns the div with class \"red\" and has innerHTML of \"Red Two\".\n\nRunning this code:\n\n``` javascript\ndojo.query(\".last\").next(\".red\");\n```\n\ndoes not return any elements.\n\n### `nextAll``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all sibling elements that come after the nodes in this dojo/NodeList. Optionally takes a query to filter the sibling elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall sibling elements that come after the nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red next\">Red Two</div>\n    <div class=\"blue next\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").nextAll();\n});\n```\n\nreturns the two divs with class of \"next\".\n\nRunning this code:\n\n``` javascript\nquery(\".first\").nextAll(\".red\");\n```\n\nreturns the one div with class \"red\" and innerHTML \"Red Two\".\n\n### `odd``()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the odd nodes in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe odd nodes in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"interior red\">Red One</div>\n    <div class=\"interior blue\">Blue One</div>\n    <div class=\"interior red\">Red Two</div>\n    <div class=\"interior blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".interior\").odd();\n});\n```\n\nreturns the two divs with class \"red\"\n\n### `on``(eventName,listener)`\n\nDefined by [dojo/query](query)\n\nListen for events on the nodes in the NodeList. Basic usage is:\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| eventName | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/query\"\n], function(query){\n    query(\".my-class\").on(\"click\", listener);\n```\n\nThis supports event delegation by using selectors as the first argument with the event names as\n\npseudo selectors. For example:\n\n``` javascript\nquery(\"#my-list\").on(\"li:click\", listener);\n```\n\nThis will listen for click events within `<li>` elements that are inside the `#my-list` element.\n\nBecause on supports CSS selector syntax, we can use comma-delimited events as well:\n\n``` javascript\nquery(\"#my-list\").on(\"li button:mouseover, li:click\", listener);\n});\n```\n\n### `orphan``(filter)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nremoves elements in this list that match the filter from their parents and returns them as a new NodeList.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nNodeList containing the orphaned elements\n\n### `parent``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns immediate parent elements for nodes in this dojo/NodeList. Optionally takes a query to filter the parent elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nimmediate parent elements for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\"><span class=\"text\">Blue One</span></div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\"><span class=\"text\">Blue Two</span></div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".text\").parent();\n});\n```\n\nreturns the two divs with class \"blue\".\n\nRunning this code:\n\n``` javascript\nquery(\".text\").parent(\".first\");\n```\n\nreturns the one div with class \"blue\" and \"first\".\n\n### `parents``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all parent elements for nodes in this dojo/NodeList. Optionally takes a query to filter the child elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall parent elements for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\"><span class=\"text\">Blue One</span></div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\"><span class=\"text\">Blue Two</span></div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".text\").parents();\n});\n```\n\nreturns the two divs with class \"blue\", the div with class \"container\",\n\n``` javascript\nthe body element and the html element.\n```\n\nRunning this code:\n\n``` javascript\nquery(\".text\").parents(\".container\");\n```\n\nreturns the one div with class \"container\".\n\n### `place``(queryOrNode,position)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nplaces elements of this node list relative to the first element matched by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\n\n[TABLE]\n\n**Returns:** undefined\n\n### `position``()`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nReturns border-box objects (x/y/w/h) of all elements in a node list as an Array (*not* a NodeList). Acts like `dojo/dom-geometry-position`, though assumes the node passed is each node in this list.\n\n**Returns:** undefined\n\n### `prepend``(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nprepends the content to every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content. assume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").prepend(\"<span>prepend</span>\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div id=\"foo\"><span>prepend</span><p>Hello Mars</p></div>\n<div id=\"bar\"><span>prepend</span><p>Hello World</p></div>\n```\n\n### `prependTo``(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nprepends nodes in this NodeList to the nodes matched by the query passed to prependTo.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<span>prepend</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").prependTo(\"p\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<p><span>prepend</span>Hello Mars</p>\n<p><span>prepend</span>Hello World</p>\n```\n\n### `prev``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the previous element for nodes in this dojo/NodeList. Optionally takes a query to filter the previous elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe previous element for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").prev();\n});\n```\n\nreturns the div with class \"red\" and has innerHTML of \"Red One\".\n\nRunning this code:\n\n``` javascript\nquery(\".first\").prev(\".blue\");\n```\n\ndoes not return any elements.\n\n### `prevAll``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all sibling elements that come before the nodes in this dojo/NodeList. Optionally takes a query to filter the sibling elements.\n\nThe returned nodes will be in reverse DOM order -- the first node in the list will be the node closest to the original node/NodeList. .end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall sibling elements that come before the nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red prev\">Red One</div>\n    Some Text\n    <div class=\"blue prev\">Blue One</div>\n    <div class=\"red second\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".second\").prevAll();\n});\n```\n\nreturns the two divs with class of \"prev\".\n\nRunning this code:\n\n``` javascript\nquery(\".first\").prevAll(\".red\");\n```\n\nreturns the one div with class \"red prev\" and innerHTML \"Red One\".\n\n### `query``(queryStr)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nReturns a new list whose members match the passed query, assuming elements of the current NodeList as the root for each search.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| queryStr  | String |             |\n\n**Returns:** function \\| undefined\n\nReturns a new list whose members match the passed query, assuming elements of the current NodeList as the root for each search.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\">\n    <p>\n        bacon is tasty, <span>dontcha think?</span>\n    </p>\n</div>\n<div id=\"bar\">\n    <p>great comedians may not be funny <span>in person</span></p>\n</div>\n```\n\nIf we are presented with the following definition for a NodeList:\n\n``` javascript\nrequire([\"dojo/dom\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(dom, query){\n    var l = new NodeList(dom.byId(\"foo\"), dom.byId(\"bar\"));\n```\n\nit's possible to find all span elements under paragraphs\n\ncontained by these elements with this sub-query:\n\n``` javascript\nvar spans = l.query(\"p span\");\n});\n```\n\n### `remove``(filter)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nremoves elements in this list that match the filter from their parents and returns them as a new NodeList.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nNodeList containing the orphaned elements\n\n### `removeAttr``(name)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nRemoves an attribute from each node in the list.\n\n|           |        |                                     |\n|-----------|--------|-------------------------------------|\n| Parameter | Type   | Description                         |\n| name      | String | the name of the attribute to remove |\n\n### `removeClass``(className)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nremoves the specified class from every node in the list\n\n[TABLE]\n\n**Returns:** any\n\nthis list\n\n### `removeClassFx``(cssClass,args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList-style](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList-style)\n\nAnimate the effect of removing a class to all nodes in this list. see `dojox.fx.removeClass`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| cssClass  | undefined |             |\n| args      | undefined |             |\n\n**Returns:** \\[object Value(type: function, value: undefined)\\]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.query(\".box\").removeClassFx(\"bar\").play();\n```\n\n### `removeData``(key)`\n\nDefined by [dojo/NodeList-data](nodelist-data)\n\nRemove the data associated with these nodes.\n\n[TABLE]\n\n### `replaceAll``(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nreplaces nodes matched by the query passed to replaceAll with the nodes in this NodeList.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| function\n\nThe nodes currently in this NodeList will be returned, not the matched nodes from the query. The nodes currently in this NodeLIst could have been cloned, so the returned NodeList will include the cloned nodes.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").replaceAll(\".blue\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div class=\"container\">\n    <div class=\"spacer\">___</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"red\">Red Two</div>\n</div>\n```\n\n### `replaceClass``(addClassStr,removeClassStr)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nReplaces one or more classes on a node if not present. Operates more quickly than calling `removeClass()` and `addClass()`\n\n[TABLE]\n\n### `replaceWith``(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nReplaces each node in ths NodeList with the content passed to replaceWith.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| function\n\nThe nodes currently in this NodeList will be returned, not the replacing content. Note that the returned nodes have been removed from the DOM.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").replaceWith('<div class=\"green\">Green</div>');\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div class=\"container\">\n    <div class=\"green\">Green</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"green\">Green</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\n### `siblings``(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all sibling elements for nodes in this dojo/NodeList. Optionally takes a query to filter the sibling elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall sibling elements for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").siblings();\n});\n```\n\nreturns the two divs with class \"red\" and the other div\n\n``` javascript\nwith class \"blue\" that does not have \"first\".\n```\n\nRunning this code:\n\n``` javascript\nquery(\".first\").siblings(\".red\");\n```\n\nreturns the two div with class \"red\".\n\n### `slice``(begin,end)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList, maintaining this one in place\n\nThis method behaves exactly like the Array.slice method with the caveat that it returns a [dojo/NodeList](nodelist) and not a raw Array. For more details, see Mozilla's [slice documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `slideTo``(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nslide all elements of the node list to the specified place via `dojo/fx.slideTo()`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\n``` javascript\nMove all tables with class \"blah\" to 300/300:\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").slideTo({\n        left: 40,\n        top: 50\n    }).play();\n});\n```\n\n### `some``(callback,thisObject)`\n\nDefined by [dojo/query](query)\n\nTakes the same structure of arguments and returns as `dojo/_base/array.some()` with the caveat that the passed array is implicitly this NodeList. See `dojo/_base/array.some()` and Mozilla's [Array.some documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some).\n\n[TABLE]\n\n**Returns:** undefined\n\n### `splice``(index,howmany,item)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList, manipulating this NodeList based on the arguments passed, potentially splicing in new elements at an offset, optionally deleting elements\n\nThis method behaves exactly like the Array.splice method with the caveat that it returns a [dojo/NodeList](nodelist) and not a raw Array. For more details, see Mozilla's [splice documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) For backwards compatibility, calling .end() on the spliced NodeList does not return the original NodeList -- splice alters the NodeList in place.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `style``(property,value)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\ngets or sets the CSS property for every element in the NodeList\n\n[TABLE]\n\n**Returns:** any\n\nif no value is passed, the result is an array of strings. If a value is passed, the return is this NodeList\n\n### `text``(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nallows setting the text value of each node in the NodeList, if there is a value passed in, otherwise, returns the text value for all the nodes in the NodeList in one string.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| value     | String |             |\n\n**Returns:** any \\| function \\| string\n\nif no value is passed, the result is String, the text value of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"></div>\n<div id=\"bar\"></div>\n```\n\nThis code inserts \"Hello World\" into both divs:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").text(\"Hello World\");\n});\n```\n\n### Example 2\n\nassume a DOM created by this markup:\n\n``` markup\n<div id=\"foo\"><p>Hello Mars <span>today</span></p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n```\n\nThis code returns \"Hello Mars today\":\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    var message = query(\"div\").text();\n});\n```\n\n### `toggleClass``(className,condition)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nAdds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove.\n\n[TABLE]\n\n### `toggleClassFx``(cssClass,force,args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList-style](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList-style)\n\nAnimate the effect of adding or removing a class to all nodes in this list. see `dojox.fx.toggleClass`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| cssClass  | undefined |             |\n| force     | undefined |             |\n| args      | undefined |             |\n\n**Returns:** \\[object Value(type: function, value: undefined)\\]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.query(\".box\").toggleClass(\"bar\").play();\n```\n\n### `toString``()`\n\nDefined by [dojo/query](query)\n\n**Returns:** undefined\n\n### `val``(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nIf a value is passed, allows seting the value property of form elements in this NodeList, or properly selecting/checking the right value for radio/checkbox/select elements. If no value is passed, the value of the first node in this NodeList is returned.\n\n|           |                 |             |\n|-----------|-----------------|-------------|\n| Parameter | Type            | Description |\n| value     | String \\| Array |             |\n\n**Returns:** any \\| function \\| undefined \\| null\n\nif no value is passed, the result is String or an Array, for the value of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<input type=\"text\" value=\"foo\">\n<select multiple>\n    <option value=\"red\" selected>Red</option>\n    <option value=\"blue\">Blue</option>\n    <option value=\"yellow\" selected>Yellow</option>\n</select>\n```\n\nThis code gets and sets the values for the form fields above:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query('[type=\"text\"]').val(); //gets value foo\n    query('[type=\"text\"]').val(\"bar\"); //sets the input's value to \"bar\"\n    query(\"select\").val() //gets array value [\"red\", \"yellow\"]\n    query(\"select\").val([\"blue\", \"yellow\"]) //Sets the blue and yellow options to selected.\n});\n```\n\n### `wipeIn``(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nwipe in all elements of this NodeList via `dojo/fx.wipeIn()`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nFade in all tables with class \"blah\":\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").wipeIn().play();\n});\n```\n\n### Example 2\n\nUtilizing `auto` to get the NodeList back:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".titles\").wipeIn({ auto:true }).onclick(someFunction);\n});\n```\n\n### `wipeOut``(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nwipe out all elements of this NodeList via `dojo/fx.wipeOut()`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nWipe out all tables with class \"blah\":\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").wipeOut().play();\n});     \n```\n\n### `wrap``(html)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nWrap each node in the NodeList with html passed to wrap.\n\nhtml will be cloned if the NodeList has more than one element. Only DOM nodes are cloned, not any attached event handlers.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| html      | String \\| DOMNode |             |\n\n**Returns:** any \\| function\n\nthe nodes in the current NodeList will be returned, not the nodes from html argument.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<b>one</b>\n<b>two</b>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"b\").wrap(\"<div><span></span></div>\");\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div><span><b>one</b></span></div>\n<div><span><b>two</b></span></div>\n```\n\n### `wrapAll``(html)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nInsert html where the first node in this NodeList lives, then place all nodes in this NodeList as the child of the html.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| html      | String \\| DOMNode |             |\n\n**Returns:** any \\| function\n\nthe nodes in the current NodeList will be returned, not the nodes from html argument.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").wrapAll('<div class=\"allRed\"></div>');\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div class=\"container\">\n    <div class=\"allRed\">\n        <div class=\"red\">Red One</div>\n        <div class=\"red\">Red Two</div>\n    </div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\n### `wrapInner``(html)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nFor each node in the NodeList, wrap all its children with the passed in html.\n\nhtml will be cloned if the NodeList has more than one element. Only DOM nodes are cloned, not any attached event handlers.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| html      | String \\| DOMNode |             |\n\n**Returns:** any \\| function\n\nthe nodes in the current NodeList will be returned, not the nodes from html argument.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\nRunning this code:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").wrapInner('<span class=\"special\"></span>');\n});\n```\n\nResults in this DOM structure:\n\n``` markup\n<div class=\"container\">\n    <div class=\"red\"><span class=\"special\">Red One</span></div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\"><span class=\"special\">Red Two</span></div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList.html](http://dojotoolkit.org/api/1.10/dojo/NodeList.html)"
- name: NodeList#addClass()
  id: dojo/nodelist#1_10dojo_NodeList_addClass
  summary: null
  belongs_to: NodeList
  description: |-
    ### `addClass` `(className)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    adds the specified class to every node in the list

    |           |                 |                                                                                                 |
    |-----------|-----------------|-------------------------------------------------------------------------------------------------|
    | Parameter | Type            | Description                                                                                     |
    | className | String \| Array | A String class name to add, or several space-separated class names, or an array of class names. |
- name: NodeList#addClassFx()
  id: dojo/nodelist#1_10dojo_NodeList_addClassFx
  summary: Animate the effects of adding a class to all nodes in this list
  belongs_to: NodeList
  description: "### `addClassFx` `(cssClass,args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList-style](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList-style)\n\nAnimate the effects of adding a class to all nodes in this list. see `dojox.fx.addClass`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| cssClass  | undefined |             |\n| args      | undefined |             |\n\n**Returns:** \\[object Value(type: function, value: undefined)\\]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // fade all elements with class \"bar\" to to 50% opacity\ndojo.query(\".bar\").addClassFx(\"bar\").play();\n    \n```"
- name: NodeList#addContent()
  id: dojo/nodelist#1_10dojo_NodeList_addContent
  summary: add a node, NodeList or some HTML as a string to every item in the list
  belongs_to: NodeList
  description: "### `addContent` `(content,position)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nadd a node, NodeList or some HTML as a string to every item in the list. Returns the original list.\n\na copy of the HTML content is added to each item in the list, with an optional position argument. If no position argument is provided, the content is appended to the end of each item.\n\n[TABLE]\n\n**Returns:** function\n\nadd a node, NodeList or some HTML as a string to every item in the list. Returns the original list.\n\n## Examples\n\n### Example 1\n\nappends content to the end if the position is omitted\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"h3 > p\").addContent(\"hey there!\");\n});\n    \n```\n\n### Example 2\n\nadd something to the front of each element that has a \"thinger\" property:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"[thinger]\").addContent(\"...\", \"first\");\n});\n    \n```\n\n### Example 3\n\nadds a header before each element of the list\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".note\").addContent(\"<h4>NOTE:</h4>\", \"before\");\n});\n    \n```\n\n### Example 4\n\nadd a clone of a DOM node to the end of every element in the list, removing it from its existing parent.\n\n``` javascript\n      require([\"dojo/dom\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(dom, query){\n    query(\".note\").addContent(dom.byId(\"foo\"));\n});\n    \n```\n\n### Example 5\n\nAppend nodes from a templatized string.\n\n``` javascript\n      require([\"dojo/string\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(string, query){\n    query(\".note\").addContent({\n        template: '<b>${id}: </b><span>${name}</span>',\n        id: \"user332\",\n        name: \"Mr. Anderson\"\n    });\n});\n    \n```\n\n### Example 6\n\nAppend nodes from a templatized string that also has widgets parsed.\n\n``` javascript\n      require([\"dojo/string\", \"dojo/parser\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(string, parser, query){\n    var notes = query(\".note\").addContent({\n        template: '<button dojoType=\"dijit/form/Button\">${text}</button>',\n        parse: true,\n        text: \"Send\"\n    });\n});\n    \n```"
- name: NodeList#adopt()
  id: dojo/nodelist#1_10dojo_NodeList_adopt
  summary: places any/all elements in queryOrListOrNode at a position relative to the first element in this list
  belongs_to: NodeList
  description: |-
    ### `adopt` `(queryOrListOrNode,position)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    places any/all elements in queryOrListOrNode at a position relative to the first element in this list. Returns a dojo/NodeList of the adopted elements.

    [TABLE]

    **Returns:** undefined
- name: NodeList#after()
  id: dojo/nodelist#1_10dojo_NodeList_after
  summary: Places the content after every node in the NodeList
  belongs_to: NodeList
  description: "### `after` `(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nPlaces the content after every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| Element \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").after(\"<span>after</span>\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p></div><span>after</span>\n<div id=\"bar\"><p>Hello World</p></div><span>after</span>\n    \n```"
- name: NodeList#andSelf()
  id: dojo/nodelist#1_10dojo_NodeList_andSelf
  summary: Adds the nodes from the previous dojo/NodeList to the current dojo/NodeList
  belongs_to: NodeList
  description: "### `andSelf` `()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nAdds the nodes from the previous dojo/NodeList to the current dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red prev\">Red One</div>\n    Some Text\n    <div class=\"blue prev\">Blue One</div>\n    <div class=\"red second\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".second\").prevAll().andSelf();\n});\n    \n```\n\nreturns the two divs with class of \"prev\", as well as the div with class \"second\"."
- name: NodeList#anim()
  id: dojo/nodelist#1_10dojo_NodeList_anim
  summary: Animate one or more CSS properties for all nodes in this list
  belongs_to: NodeList
  description: "### `anim` `(properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nAnimate one or more CSS properties for all nodes in this list. The returned animation object will already be playing when it is returned. See the docs for `dojo.anim` for full details.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nAnother way to fade out:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".thinger\").anim({ opacity: 0 });\n});\n    \n```\n\n### Example 2\n\nanimate all elements with the \"thigner\" class to a width of 500 pixels over half a second\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".thinger\").anim({ width: 500 }, 700);\n});\n    \n```"
- name: NodeList#animateProperty()
  id: dojo/nodelist#1_10dojo_NodeList_animateProperty
  summary: Animate all elements of this NodeList across the properties specified
  belongs_to: NodeList
  description: "### `animateProperty` `(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nAnimate all elements of this NodeList across the properties specified. syntax identical to `dojo.animateProperty`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".zork\").animateProperty({\n        duration: 500,\n        properties: {\n            color:      { start: \"black\", end: \"white\" },\n            left:       { end: 300 }\n        }\n    }).play();\n});\n    \n```\n\n### Example 2\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".grue\").animateProperty({\n        auto:true,\n        properties: {\n            height:240\n        }\n    }).onclick(handler);\n});\n    \n```"
- name: NodeList#append()
  id: dojo/nodelist#1_10dojo_NodeList_append
  summary: appends the content to every node in the NodeList
  belongs_to: NodeList
  description: "### `append` `(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nappends the content to every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").append(\"<span>append</span>\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p><span>append</span></div>\n<div id=\"bar\"><p>Hello World</p><span>append</span></div>\n    \n```"
- name: NodeList#appendTo()
  id: dojo/nodelist#1_10dojo_NodeList_appendTo
  summary: appends nodes in this NodeList to the nodes matched by the query passed to appendTo
  belongs_to: NodeList
  description: "### `appendTo` `(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nappends nodes in this NodeList to the nodes matched by the query passed to appendTo.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <span>append</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").appendTo(\"p\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <p>Hello Mars<span>append</span></p>\n<p>Hello World<span>append</span></p>\n    \n```\n\n### `at` `(index)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList comprised of items in this NodeList at the given index or indices.\n\n|           |            |                                                                                                                                    |\n|-----------|------------|------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type       | Description                                                                                                                        |\n| index     | Integer... | One or more 0-based indices of items in the current NodeList. A negative index will start at the end of the list and go backwards. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nShorten the list to the first, second, and third elements\n\n``` javascript\n      require([\"dojo/query\"\n], function(query){\n    query(\"a\").at(0, 1, 2).forEach(fn);\n});\n    \n```\n\n### Example 2\n\nRetrieve the first and last elements of a unordered list:\n\n``` javascript\n      require([\"dojo/query\"\n], function(query){\n    query(\"ul > li\").at(0, -1).forEach(cb);\n});\n    \n```\n\n### Example 3\n\nDo something for the first element only, but end() out back to the original list and continue chaining:\n\n``` javascript\n      require([\"dojo/query\"\n], function(query){\n    query(\"a\").at(0).onclick(fn).end().forEach(function(n){\n        console.log(n); // all anchors on the page.\n})\n});\n    \n```"
- name: NodeList#attr()
  id: dojo/nodelist#1_10dojo_NodeList_attr
  summary: gets or sets the DOM attribute for every element in the NodeList
  belongs_to: NodeList
  description: "### `attr` `(property,value)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\ngets or sets the DOM attribute for every element in the NodeList. See also `dojo/dom-attr`\n\n[TABLE]\n\n**Returns:** any\n\nif no value is passed, the result is an array of attribute values If a value is passed, the return is this NodeList\n\n## Examples\n\n### Example 1\n\nMake all nodes with a particular class focusable:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\n    query(\".focusable\").attr(\"tabIndex\", -1);\n});\n    \n```\n\n### Example 2\n\nDisable a group of buttons:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\n    query(\"button.group\").attr(\"disabled\", true);\n});\n    \n```\n\n### Example 3\n\ninnerHTML can be assigned or retrieved as well:\n\n``` javascript\n      // get the innerHTML (as an array) for each list item\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\n    var ih = query(\"li.replaceable\").attr(\"innerHTML\");\n});\n    \n```"
- name: NodeList#before()
  id: dojo/nodelist#1_10dojo_NodeList_before
  summary: Places the content before every node in the NodeList
  belongs_to: NodeList
  description: "### `before` `(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nPlaces the content before every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").before(\"<span>before</span>\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <span>before</span><div id=\"foo\"><p>Hello Mars</p></div>\n<span>before</span><div id=\"bar\"><p>Hello World</p></div>\n    \n```"
- name: NodeList#children()
  id: dojo/nodelist#1_10dojo_NodeList_children
  summary: Returns all immediate child elements for nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `children` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all immediate child elements for nodes in this dojo/NodeList. Optionally takes a query to filter the child elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall immediate child elements for the nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".container\").children();\n});\n    \n```\n\nreturns the four divs that are children of the container div.\n\nRunning this code:\n\n``` javascript\n      dojo.query(\".container\").children(\".red\");\n    \n```\n\nreturns the two divs that have the class \"red\"."
- name: NodeList#clone()
  id: dojo/nodelist#1_10dojo_NodeList_clone
  summary: Clones all the nodes in this NodeList and returns them as a new NodeList
  belongs_to: NodeList
  description: "### `clone` `()`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nClones all the nodes in this NodeList and returns them as a new NodeList.\n\nOnly the DOM nodes are cloned, not any attached event handlers.\n\n**Returns:** any \\| undefined\n\na cloned set of the original nodes.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").clone().appendTo(\".container\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"red\">Red Two</div>\n</div>\n    \n```"
- name: NodeList#closest()
  id: dojo/nodelist#1_10dojo_NodeList_closest
  summary: Returns closest parent that matches query, including current node in this dojo/NodeList if it matches the query
  belongs_to: NodeList
  description: "### `closest` `(query,root)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns closest parent that matches query, including current node in this dojo/NodeList if it matches the query.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe closest parent that matches the query, including the current node in this dojo/NodeList if it matches the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".red\").closest(\".container\");\n});\n    \n```\n\nreturns the div with class \"container\".\n\n### `concat` `(item)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList comprised of items in this NodeList as well as items passed in as parameters\n\nThis method behaves exactly like the Array.concat method with the caveat that it returns a `NodeList` and not a raw Array. For more details, see the [Array.concat docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat)\n\n[TABLE]\n\n**Returns:** undefined"
- name: NodeList#connect()
  id: dojo/nodelist#1_10dojo_NodeList_connect
  summary: Attach event handlers to every item of the NodeList
  belongs_to: NodeList
  description: "### `connect` `(methodName,objOrFunc,funcName)`\n\nDefined by [dojo/\\_base/NodeList](_base/nodelist)\n\nAttach event handlers to every item of the NodeList. Uses dojo.connect() so event properties are normalized.\n\nApplication must manually require() \"dojo/\\_base/connect\" before using this method.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nadd an onclick handler to every button on the page\n\n``` javascript\n      query(\"div:nth-child(odd)\").connect(\"onclick\", function(e){\n    console.log(\"clicked!\");\n});\n    \n```\n\n### Example 2\n\nattach foo.bar() to every odd div's onmouseover\n\n``` javascript\n      query(\"div:nth-child(odd)\").connect(\"onmouseover\", foo, \"bar\");\n    \n```"
- name: NodeList#coords()
  id: dojo/nodelist#1_10dojo_NodeList_coords
  summary: 'Deprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t'
  belongs_to: NodeList
  description: |-
    ### `coords` `()`

    Defined by [dojo/\_base/NodeList](_base/nodelist)

    Deprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t. Returns the box objects of all elements in a node list as an Array (*not* a NodeList). Acts like `domGeom.coords`, though assumes the node passed is each node in this list.
- name: NodeList#data()
  id: dojo/nodelist#1_10dojo_NodeList_data
  summary: stash or get some arbitrary data on/from these nodes
  belongs_to: NodeList
  description: "### `data` `(key,value)`\n\nDefined by [dojo/NodeList-data](nodelist-data)\n\nstash or get some arbitrary data on/from these nodes.\n\nStash or get some arbitrary data on/from these nodes. This private \\_data function is exposed publicly on [dojo/NodeList](nodelist), eg: as the result of a [dojo/query](query) call. DIFFERS from jQuery.data in that when used as a getter, the entire list is ALWAYS returned. EVEN WHEN THE LIST IS length == 1.\n\nA single-node version of this function is provided as `dojo._nodeData`, which follows the same signature, though expects a String ID or DomNode reference in the first position, before key/value arguments.\n\n[TABLE]\n\n**Returns:** Object\\|Anything\\|Nothing\n\nWhen used as a setter via `dojo/NodeList`, a NodeList instance is returned for further chaining. When used as a getter via `dojo/NodeList` an ARRAY of items is returned. The items in the array correspond to the elements in the original list. This is true even when the list length is 1, eg: when looking up a node by ID (#foo)\n\n## Examples\n\n### Example 1\n\nSet a key `bar` to some data, then retrieve it.\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-data\"], function(query){\n    query(\".foo\").data(\"bar\", \"touched\");\n    var touched = query(\".foo\").data(\"bar\");\n    if(touched[0] == \"touched\"){ alert('win'); }\n});\n    \n```\n\n### Example 2\n\nGet all the data items for a given node.\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-data\"], function(query){\n    var list = query(\".foo\").data();\n    var first = list[0];\n});\n    \n```\n\n### Example 3\n\nSet the data to a complex hash. Overwrites existing keys with new value\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-data\"], function(query){\n    query(\".foo\").data({ bar:\"baz\", foo:\"bar\" });\n    \n```\n\nThen get some random key:\n\n``` javascript\n      query(\".foo\").data(\"foo\"); // returns [`bar`]\n});\n    \n```"
- name: NodeList#delegate()
  id: dojo/nodelist#1_10dojo_NodeList_delegate
  summary: Monitor nodes in this NodeList for [bubbled] events on nodes that match selector
  belongs_to: NodeList
  description: "### `delegate` `(selector,eventName,fn)`\n\nDefined by [dojox/NodeList/delegate](http://dojotoolkit.org/api/1.10/dojox/NodeList/delegate)\n\nMonitor nodes in this NodeList for \\[bubbled\\] events on nodes that match selector. Calls fn(evt) for those events, where (inside of fn()), this == the node that matches the selector.\n\nSets up event handlers that can catch events on any subnodes matching a given selector, including nodes created after delegate() has been called.\n\nThis allows an app to setup a single event handler on a high level node, rather than many event handlers on subnodes. For example, one onclick handler for a Tree widget, rather than separate handlers for each node in the tree. Since setting up many event handlers is expensive, this can increase performance.\n\nNote that delegate() will not work for events that don't bubble, like focus. onmouseenter/onmouseleave also don't currently work.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.query(\"navbar\").delegate(\"a\", \"onclick\", function(evt){\n        console.log(\"user clicked anchor \", this.node);\n});\n    \n```"
- name: NodeList#dtl()
  id: dojo/nodelist#1_10dojo_NodeList_dtl
  summary: Renders the specified template in each of the NodeList entries
  belongs_to: NodeList
  description: |-
    ### `dtl` `(template,context)`

    Defined by [dojox/dtl/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/dtl/ext-dojo/NodeList)

    Renders the specified template in each of the NodeList entries.

    |           |                                    |                                 |
    |-----------|------------------------------------|---------------------------------|
    | Parameter | Type                               | Description                     |
    | template  | dojox/dtl/\_\_StringArgs \| String | The template string or location |
    | context   | dojox/dtl/\_\_ObjectArgs \| Object | The context object or location  |

    **Returns:** function

    Renders the specified template in each of the NodeList entries.
- name: NodeList#empty()
  id: dojo/nodelist#1_10dojo_NodeList_empty
  summary: clears all content from each node in the list
  belongs_to: NodeList
  description: "### `empty` `()`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nclears all content from each node in the list. Effectively equivalent to removing all child nodes from every item in the list.\n\n**Returns:** undefined\n\n### `end` `()`\n\nDefined by [dojo/query](query)\n\nEnds use of the current `NodeList` by returning the previous NodeList that generated the current NodeList.\n\nReturns the `NodeList` that generated the current `NodeList`. If there is no parent NodeList, an empty NodeList is returned.\n\n**Returns:** undefined \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"a\")\n        .filter(\".disabled\")\n            // operate on the anchors that only have a disabled class\n            .style(\"color\", \"grey\")\n        .end()\n        // jump back to the list of anchors\n        .style(...)\n});\n    \n```"
- name: NodeList#even()
  id: dojo/nodelist#1_10dojo_NodeList_even
  summary: Returns the even nodes in this dojo/NodeList as a dojo/NodeList
  belongs_to: NodeList
  description: "### `even` `()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the even nodes in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe even nodes in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"interior red\">Red One</div>\n    <div class=\"interior blue\">Blue One</div>\n    <div class=\"interior red\">Red Two</div>\n    <div class=\"interior blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".interior\").even();\n});\n    \n```\n\nreturns the two divs with class \"blue\"\n\n### `every` `(callback,thisObject)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.every()` and the [Array.every docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every). Takes the same structure of arguments and returns as dojo/\\_base/array.every() with the caveat that the passed array is implicitly this NodeList\n\n[TABLE]\n\n**Returns:** undefined"
- name: NodeList#fadeIn()
  id: dojo/nodelist#1_10dojo_NodeList_fadeIn
  summary: A special args member auto can be passed to automatically play the animation
  belongs_to: NodeList
  description: "### `fadeIn` `(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nfade in all elements of this NodeList via `dojo.fadeIn`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nFade in all tables with class \"blah\":\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").fadeIn().play();\n});\n    \n```"
- name: NodeList#fadeOut()
  id: dojo/nodelist#1_10dojo_NodeList_fadeOut
  summary: A special args member auto can be passed to automatically play the animation
  belongs_to: NodeList
  description: "### `fadeOut` `(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nfade out all elements of this NodeList via `dojo.fadeOut`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nFade out all elements with class \"zork\":\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".zork\").fadeOut().play();\n});\n    \n```\n\n### Example 2\n\nFade them on a delay and do something at the end:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/aspect\", \"dojo/NodeList-fx\"\n], function(query, aspect){\n    var fo = query(\".zork\").fadeOut();\n    aspect.after(fo, \"onEnd\", function(){ /*...*/ }, true);\n    fo.play();\n});\n    \n```\n\n### Example 3\n\nUsing `auto`:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"li\").fadeOut({ auto:true }).filter(filterFn).forEach(doit);\n});\n    \n```"
- name: NodeList#filter()
  id: dojo/nodelist#1_10dojo_NodeList_filter
  summary: '"masks" the built-in javascript filter() method (supported in Dojo via dojo.filter) to support passing a simple string filter in addition to supporting filtering function objects'
  belongs_to: NodeList
  description: "### `filter` `(filter)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\n\"masks\" the built-in javascript filter() method (supported in Dojo via `dojo.filter`) to support passing a simple string filter in addition to supporting filtering function objects.\n\n|           |                    |                                                           |\n|-----------|--------------------|-----------------------------------------------------------|\n| Parameter | Type               | Description                                               |\n| filter    | String \\| Function | If a string, a CSS rule like \".thinger\" or \"div \\> span\". |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n\"regular\" JS filter syntax as exposed in dojo.filter:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"*\").filter(function(item){\n        // highlight every paragraph\n        return (item.nodeName == \"p\");\n    }).style(\"backgroundColor\", \"yellow\");\n});\n    \n```\n\n### Example 2\n\nthe same filtering using a CSS selector\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\"*\").filter(\"p\").styles(\"backgroundColor\", \"yellow\");\n});\n    \n```"
- name: NodeList#first()
  id: dojo/nodelist#1_10dojo_NodeList_first
  summary: Returns the first node in this dojo/NodeList as a dojo/NodeList
  belongs_to: NodeList
  description: "### `first` `()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the first node in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe first node in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue last\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".blue\").first();\n});\n    \n```\n\nreturns the div with class \"blue\" and \"first\".\n\n### `forEach` `(callback,thisObj)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.forEach()`. The primary difference is that the acted-on array is implicitly this NodeList. If you want the option to break out of the forEach loop, use every() or some() instead.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| callback  | undefined |             |\n| thisObj   | undefined |             |\n\n**Returns:** function\n\nsee `dojo/_base/array.forEach()`. The primary difference is that the acted-on array is implicitly this NodeList. If you want the option to break out of the forEach loop, use every() or some() instead."
- name: NodeList#html()
  id: dojo/nodelist#1_10dojo_NodeList_html
  summary: allows setting the innerHTML of each node in the NodeList, if there is a value passed in, otherwise, reads the innerHTML value of the first node
  belongs_to: NodeList
  description: "### `html` `(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nallows setting the innerHTML of each node in the NodeList, if there is a value passed in, otherwise, reads the innerHTML value of the first node.\n\nThis method is simpler than the [dojo/NodeList.html()](nodelist#html) method provided by [dojo/NodeList-html](nodelist-html). This method just does proper innerHTML insertion of HTML fragments, and it allows for the innerHTML to be read for the first node in the node list. Since [dojo/NodeList-html](nodelist-html) already took the \"html\" name, this method is called \"innerHTML\". However, if [dojo/NodeList-html](nodelist-html) has not been loaded yet, this module will define an \"html\" method that can be used instead. Be careful if you are working in an environment where it is possible that [dojo/NodeList-html](nodelist-html) could have been loaded, since its definition of \"html\" will take precedence. The nodes represented by the value argument will be cloned if more than one node is in this NodeList. The nodes in this NodeList are returned in the \"set\" usage of this method, not the HTML that was inserted.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nif no value is passed, the result is String, the innerHTML of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"></div>\n<div id=\"bar\"></div>\n    \n```\n\nThis code inserts `<p>Hello World</p>` into both divs:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").innerHTML(\"<p>Hello World</p>\");\n});\n    \n```\n\n### Example 2\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n    \n```\n\nThis code returns `<p>Hello Mars</p>`:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    var message = query(\"div\").innerHTML();\n});\n    \n```\n\n### `indexOf` `(value,fromIndex)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.indexOf()`. The primary difference is that the acted-on array is implicitly this NodeList\n\nFor more details on the behavior of indexOf, see Mozilla's [indexOf docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf)\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nPositive Integer or 0 for a match, -1 of not found."
- name: NodeList#innerHTML()
  id: dojo/nodelist#1_10dojo_NodeList_innerHTML
  summary: allows setting the innerHTML of each node in the NodeList, if there is a value passed in, otherwise, reads the innerHTML value of the first node
  belongs_to: NodeList
  description: "### `innerHTML` `(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nallows setting the innerHTML of each node in the NodeList, if there is a value passed in, otherwise, reads the innerHTML value of the first node.\n\nThis method is simpler than the [dojo/NodeList.html()](nodelist#html) method provided by [dojo/NodeList-html](nodelist-html). This method just does proper innerHTML insertion of HTML fragments, and it allows for the innerHTML to be read for the first node in the node list. Since [dojo/NodeList-html](nodelist-html) already took the \"html\" name, this method is called \"innerHTML\". However, if [dojo/NodeList-html](nodelist-html) has not been loaded yet, this module will define an \"html\" method that can be used instead. Be careful if you are working in an environment where it is possible that [dojo/NodeList-html](nodelist-html) could have been loaded, since its definition of \"html\" will take precedence. The nodes represented by the value argument will be cloned if more than one node is in this NodeList. The nodes in this NodeList are returned in the \"set\" usage of this method, not the HTML that was inserted.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nif no value is passed, the result is String, the innerHTML of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"></div>\n<div id=\"bar\"></div>\n    \n```\n\nThis code inserts `<p>Hello World</p>` into both divs:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").innerHTML(\"<p>Hello World</p>\");\n});\n    \n```\n\n### Example 2\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n    \n```\n\nThis code returns `<p>Hello Mars</p>`:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    var message = query(\"div\").innerHTML();\n});\n    \n```"
- name: NodeList#insertAfter()
  id: dojo/nodelist#1_10dojo_NodeList_insertAfter
  summary: The nodes in this NodeList will be placed after the nodes matched by the query passed to insertAfter
  belongs_to: NodeList
  description: "### `insertAfter` `(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nThe nodes in this NodeList will be placed after the nodes matched by the query passed to insertAfter.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <span>after</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").insertAfter(\"p\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <p>Hello Mars</p><span>after</span>\n<p>Hello World</p><span>after</span>\n    \n```"
- name: NodeList#insertBefore()
  id: dojo/nodelist#1_10dojo_NodeList_insertBefore
  summary: The nodes in this NodeList will be placed after the nodes matched by the query passed to insertAfter
  belongs_to: NodeList
  description: "### `insertBefore` `(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nThe nodes in this NodeList will be placed after the nodes matched by the query passed to insertAfter.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <span>before</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").insertBefore(\"p\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <span>before</span><p>Hello Mars</p>\n<span>before</span><p>Hello World</p>\n    \n```\n\n### `instantiate` `(declaredClass,properties)`\n\nDefined by [dojo/query](query)\n\nCreate a new instance of a specified class, using the specified properties and each node in the NodeList as a srcNodeRef.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nGrabs all buttons in the page and converts them to dijit/form/Button's.\n\n``` javascript\n      var buttons = query(\"button\").instantiate(Button, {showLabel: true});\n    \n```"
- name: NodeList#last()
  id: dojo/nodelist#1_10dojo_NodeList_last
  summary: Returns the last node in this dojo/NodeList as a dojo/NodeList
  belongs_to: NodeList
  description: "### `last` `()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the last node in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe last node in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue last\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\nquery(\".blue\").last();\n});\n    \n```\n\nreturns the last div with class \"blue\",\n\n### `lastIndexOf` `(value,fromIndex)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.lastIndexOf()`. The primary difference is that the acted-on array is implicitly this NodeList\n\nFor more details on the behavior of lastIndexOf, see Mozilla's [lastIndexOf docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nPositive Integer or 0 for a match, -1 of not found.\n\n### `map` `(func,obj)`\n\nDefined by [dojo/query](query)\n\nsee `dojo/_base/array.map()`. The primary difference is that the acted-on array is implicitly this NodeList and the return is a NodeList (a subclass of Array)\n\n[TABLE]\n\n**Returns:** undefined"
- name: NodeList#marginBox()
  id: dojo/nodelist#1_10dojo_NodeList_marginBox
  summary: null
  belongs_to: NodeList
  description: |-
    ### `marginBox` `()`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    Returns margin-box size of nodes
- name: NodeList#next()
  id: dojo/nodelist#1_10dojo_NodeList_next
  summary: Returns the next element for nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `next` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the next element for nodes in this dojo/NodeList. Optionally takes a query to filter the next elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe next element for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue last\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").next();\n});\n    \n```\n\nreturns the div with class \"red\" and has innerHTML of \"Red Two\".\n\nRunning this code:\n\n``` javascript\n      dojo.query(\".last\").next(\".red\");\n    \n```\n\ndoes not return any elements."
- name: NodeList#nextAll()
  id: dojo/nodelist#1_10dojo_NodeList_nextAll
  summary: Returns all sibling elements that come after the nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `nextAll` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all sibling elements that come after the nodes in this dojo/NodeList. Optionally takes a query to filter the sibling elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall sibling elements that come after the nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red next\">Red Two</div>\n    <div class=\"blue next\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").nextAll();\n});\n    \n```\n\nreturns the two divs with class of \"next\".\n\nRunning this code:\n\n``` javascript\n      query(\".first\").nextAll(\".red\");\n    \n```\n\nreturns the one div with class \"red\" and innerHTML \"Red Two\"."
- name: NodeList#odd()
  id: dojo/nodelist#1_10dojo_NodeList_odd
  summary: Returns the odd nodes in this dojo/NodeList as a dojo/NodeList
  belongs_to: NodeList
  description: "### `odd` `()`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the odd nodes in this dojo/NodeList as a dojo/NodeList.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n**Returns:** any \\| undefined\n\nthe odd nodes in this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"interior red\">Red One</div>\n    <div class=\"interior blue\">Blue One</div>\n    <div class=\"interior red\">Red Two</div>\n    <div class=\"interior blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".interior\").odd();\n});\n    \n```\n\nreturns the two divs with class \"red\"\n\n### `on` `(eventName,listener)`\n\nDefined by [dojo/query](query)\n\nListen for events on the nodes in the NodeList. Basic usage is:\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| eventName | undefined |             |\n| listener  | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/query\"\n], function(query){\n    query(\".my-class\").on(\"click\", listener);\n    \n```\n\nThis supports event delegation by using selectors as the first argument with the event names as\n\npseudo selectors. For example:\n\n``` javascript\n      query(\"#my-list\").on(\"li:click\", listener);\n    \n```\n\nThis will listen for click events within `<li>` elements that are inside the `#my-list` element.\n\nBecause on supports CSS selector syntax, we can use comma-delimited events as well:\n\n``` javascript\n      query(\"#my-list\").on(\"li button:mouseover, li:click\", listener);\n});\n    \n```"
- name: NodeList#orphan()
  id: dojo/nodelist#1_10dojo_NodeList_orphan
  summary: removes elements in this list that match the filter from their parents and returns them as a new NodeList
  belongs_to: NodeList
  description: |-
    ### `orphan` `(filter)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    removes elements in this list that match the filter from their parents and returns them as a new NodeList.

    [TABLE]

    **Returns:** any \| undefined

    NodeList containing the orphaned elements
- name: NodeList#parent()
  id: dojo/nodelist#1_10dojo_NodeList_parent
  summary: Returns immediate parent elements for nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `parent` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns immediate parent elements for nodes in this dojo/NodeList. Optionally takes a query to filter the parent elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nimmediate parent elements for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\"><span class=\"text\">Blue One</span></div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\"><span class=\"text\">Blue Two</span></div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".text\").parent();\n});\n    \n```\n\nreturns the two divs with class \"blue\".\n\nRunning this code:\n\n``` javascript\n      query(\".text\").parent(\".first\");\n    \n```\n\nreturns the one div with class \"blue\" and \"first\"."
- name: NodeList#parents()
  id: dojo/nodelist#1_10dojo_NodeList_parents
  summary: Returns all parent elements for nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `parents` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all parent elements for nodes in this dojo/NodeList. Optionally takes a query to filter the child elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall parent elements for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue first\"><span class=\"text\">Blue One</span></div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\"><span class=\"text\">Blue Two</span></div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".text\").parents();\n});\n    \n```\n\nreturns the two divs with class \"blue\", the div with class \"container\",\n\n``` javascript\n      the body element and the html element.\n    \n```\n\nRunning this code:\n\n``` javascript\n      query(\".text\").parents(\".container\");\n    \n```\n\nreturns the one div with class \"container\"."
- name: NodeList#place()
  id: dojo/nodelist#1_10dojo_NodeList_place
  summary: places elements of this node list relative to the first element matched by queryOrNode
  belongs_to: NodeList
  description: |-
    ### `place` `(queryOrNode,position)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    places elements of this node list relative to the first element matched by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`

    [TABLE]

    **Returns:** undefined
- name: NodeList#position()
  id: dojo/nodelist#1_10dojo_NodeList_position
  summary: Returns border-box objects (x/y/w/h) of all elements in a node list as an Array (not a NodeList)
  belongs_to: NodeList
  description: |-
    ### `position` `()`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    Returns border-box objects (x/y/w/h) of all elements in a node list as an Array (*not* a NodeList). Acts like `dojo/dom-geometry-position`, though assumes the node passed is each node in this list.

    **Returns:** undefined
- name: NodeList#prepend()
  id: dojo/nodelist#1_10dojo_NodeList_prepend
  summary: prepends the content to every node in the NodeList
  belongs_to: NodeList
  description: "### `prepend` `(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nprepends the content to every node in the NodeList.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the appended content. assume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars</p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").prepend(\"<span>prepend</span>\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div id=\"foo\"><span>prepend</span><p>Hello Mars</p></div>\n<div id=\"bar\"><span>prepend</span><p>Hello World</p></div>\n    \n```"
- name: NodeList#prependTo()
  id: dojo/nodelist#1_10dojo_NodeList_prependTo
  summary: prepends nodes in this NodeList to the nodes matched by the query passed to prependTo
  belongs_to: NodeList
  description: "### `prependTo` `(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nprepends nodes in this NodeList to the nodes matched by the query passed to prependTo.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| undefined\n\ndojo/NodeList, the nodes currently in this NodeList will be returned, not the matched nodes from the query.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <span>prepend</span>\n<p>Hello Mars</p>\n<p>Hello World</p>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"span\").prependTo(\"p\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <p><span>prepend</span>Hello Mars</p>\n<p><span>prepend</span>Hello World</p>\n    \n```"
- name: NodeList#prev()
  id: dojo/nodelist#1_10dojo_NodeList_prev
  summary: Returns the previous element for nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `prev` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns the previous element for nodes in this dojo/NodeList. Optionally takes a query to filter the previous elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe previous element for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").prev();\n});\n    \n```\n\nreturns the div with class \"red\" and has innerHTML of \"Red One\".\n\nRunning this code:\n\n``` javascript\n      query(\".first\").prev(\".blue\");\n    \n```\n\ndoes not return any elements."
- name: NodeList#prevAll()
  id: dojo/nodelist#1_10dojo_NodeList_prevAll
  summary: Returns all sibling elements that come before the nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `prevAll` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all sibling elements that come before the nodes in this dojo/NodeList. Optionally takes a query to filter the sibling elements.\n\nThe returned nodes will be in reverse DOM order -- the first node in the list will be the node closest to the original node/NodeList. .end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall sibling elements that come before the nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red prev\">Red One</div>\n    Some Text\n    <div class=\"blue prev\">Blue One</div>\n    <div class=\"red second\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".second\").prevAll();\n});\n    \n```\n\nreturns the two divs with class of \"prev\".\n\nRunning this code:\n\n``` javascript\n      query(\".first\").prevAll(\".red\");\n    \n```\n\nreturns the one div with class \"red prev\" and innerHTML \"Red One\"."
- name: NodeList#query()
  id: dojo/nodelist#1_10dojo_NodeList_query
  summary: Returns a new list whose members match the passed query, assuming elements of the current NodeList as the root for each search
  belongs_to: NodeList
  description: "### `query` `(queryStr)`\n\nDefined by [dojo/NodeList-dom](nodelist-dom)\n\nReturns a new list whose members match the passed query, assuming elements of the current NodeList as the root for each search.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| queryStr  | String |             |\n\n**Returns:** function \\| undefined\n\nReturns a new list whose members match the passed query, assuming elements of the current NodeList as the root for each search.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\">\n    <p>\n        bacon is tasty, <span>dontcha think?</span>\n    </p>\n</div>\n<div id=\"bar\">\n    <p>great comedians may not be funny <span>in person</span></p>\n</div>\n    \n```\n\nIf we are presented with the following definition for a NodeList:\n\n``` javascript\n      require([\"dojo/dom\", \"dojo/query\", \"dojo/NodeList-dom\"\n], function(dom, query){\n    var l = new NodeList(dom.byId(\"foo\"), dom.byId(\"bar\"));\n    \n```\n\nit's possible to find all span elements under paragraphs\n\ncontained by these elements with this sub-query:\n\n``` javascript\n      var spans = l.query(\"p span\");\n});\n    \n```"
- name: NodeList#remove()
  id: dojo/nodelist#1_10dojo_NodeList_remove
  summary: removes elements in this list that match the filter from their parents and returns them as a new NodeList
  belongs_to: NodeList
  description: |-
    ### `remove` `(filter)`

    Defined by [dojo/NodeList-manipulate](nodelist-manipulate)

    removes elements in this list that match the filter from their parents and returns them as a new NodeList.

    [TABLE]

    **Returns:** any \| undefined

    NodeList containing the orphaned elements
- name: NodeList#removeAttr()
  id: dojo/nodelist#1_10dojo_NodeList_removeAttr
  summary: Removes an attribute from each node in the list
  belongs_to: NodeList
  description: |-
    ### `removeAttr` `(name)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    Removes an attribute from each node in the list.

    |           |        |                                     |
    |-----------|--------|-------------------------------------|
    | Parameter | Type   | Description                         |
    | name      | String | the name of the attribute to remove |
- name: NodeList#removeClass()
  id: dojo/nodelist#1_10dojo_NodeList_removeClass
  summary: null
  belongs_to: NodeList
  description: |-
    ### `removeClass` `(className)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    removes the specified class from every node in the list

    [TABLE]

    **Returns:** any

    this list
- name: NodeList#removeClassFx()
  id: dojo/nodelist#1_10dojo_NodeList_removeClassFx
  summary: Animate the effect of removing a class to all nodes in this list
  belongs_to: NodeList
  description: "### `removeClassFx` `(cssClass,args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList-style](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList-style)\n\nAnimate the effect of removing a class to all nodes in this list. see `dojox.fx.removeClass`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| cssClass  | undefined |             |\n| args      | undefined |             |\n\n**Returns:** \\[object Value(type: function, value: undefined)\\]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.query(\".box\").removeClassFx(\"bar\").play();\n    \n```"
- name: NodeList#removeData()
  id: dojo/nodelist#1_10dojo_NodeList_removeData
  summary: Remove the data associated with these nodes
  belongs_to: NodeList
  description: |-
    ### `removeData` `(key)`

    Defined by [dojo/NodeList-data](nodelist-data)

    Remove the data associated with these nodes.

    [TABLE]
- name: NodeList#replaceAll()
  id: dojo/nodelist#1_10dojo_NodeList_replaceAll
  summary: replaces nodes matched by the query passed to replaceAll with the nodes in this NodeList
  belongs_to: NodeList
  description: "### `replaceAll` `(query)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nreplaces nodes matched by the query passed to replaceAll with the nodes in this NodeList.\n\nThe nodes in this NodeList will be cloned if the query matches more than one element. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| query     | String |             |\n\n**Returns:** any \\| function\n\nThe nodes currently in this NodeList will be returned, not the matched nodes from the query. The nodes currently in this NodeLIst could have been cloned, so the returned NodeList will include the cloned nodes.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").replaceAll(\".blue\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"spacer\">___</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"spacer\">___</div>\n    <div class=\"red\">Red One</div>\n    <div class=\"red\">Red Two</div>\n</div>\n    \n```"
- name: NodeList#replaceClass()
  id: dojo/nodelist#1_10dojo_NodeList_replaceClass
  summary: Replaces one or more classes on a node if not present
  belongs_to: NodeList
  description: |-
    ### `replaceClass` `(addClassStr,removeClassStr)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    Replaces one or more classes on a node if not present. Operates more quickly than calling `removeClass()` and `addClass()`

    [TABLE]
- name: NodeList#replaceWith()
  id: dojo/nodelist#1_10dojo_NodeList_replaceWith
  summary: Replaces each node in ths NodeList with the content passed to replaceWith
  belongs_to: NodeList
  description: "### `replaceWith` `(content)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nReplaces each node in ths NodeList with the content passed to replaceWith.\n\nThe content will be cloned if the length of NodeList is greater than 1. Only the DOM nodes are cloned, not any attached event handlers.\n\n|           |                               |             |\n|-----------|-------------------------------|-------------|\n| Parameter | Type                          | Description |\n| content   | String \\| DOMNode \\| NodeList |             |\n\n**Returns:** any \\| function\n\nThe nodes currently in this NodeList will be returned, not the replacing content. Note that the returned nodes have been removed from the DOM.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").replaceWith('<div class=\"green\">Green</div>');\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"green\">Green</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"green\">Green</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```"
- name: NodeList#siblings()
  id: dojo/nodelist#1_10dojo_NodeList_siblings
  summary: Returns all sibling elements for nodes in this dojo/NodeList
  belongs_to: NodeList
  description: "### `siblings` `(query)`\n\nDefined by [dojo/NodeList-traverse](nodelist-traverse)\n\nReturns all sibling elements for nodes in this dojo/NodeList. Optionally takes a query to filter the sibling elements.\n\n.end() can be used on the returned [dojo/NodeList](nodelist) to get back to the original [dojo/NodeList](nodelist).\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nall sibling elements for nodes in this dojo/NodeList.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    Some Text\n    <div class=\"blue first\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-traverse\"\n], function(query){\n    query(\".first\").siblings();\n});\n    \n```\n\nreturns the two divs with class \"red\" and the other div\n\n``` javascript\n      with class \"blue\" that does not have \"first\".\n    \n```\n\nRunning this code:\n\n``` javascript\n      query(\".first\").siblings(\".red\");\n    \n```\n\nreturns the two div with class \"red\".\n\n### `slice` `(begin,end)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList, maintaining this one in place\n\nThis method behaves exactly like the Array.slice method with the caveat that it returns a [dojo/NodeList](nodelist) and not a raw Array. For more details, see Mozilla's [slice documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice)\n\n[TABLE]\n\n**Returns:** undefined"
- name: NodeList#slideTo()
  id: dojo/nodelist#1_10dojo_NodeList_slideTo
  summary: A special args member auto can be passed to automatically play the animation
  belongs_to: NodeList
  description: "### `slideTo` `(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nslide all elements of the node list to the specified place via `dojo/fx.slideTo()`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\n``` javascript\n      Move all tables with class \"blah\" to 300/300:\nrequire([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").slideTo({\n        left: 40,\n        top: 50\n    }).play();\n});\n    \n```\n\n### `some` `(callback,thisObject)`\n\nDefined by [dojo/query](query)\n\nTakes the same structure of arguments and returns as `dojo/_base/array.some()` with the caveat that the passed array is implicitly this NodeList. See `dojo/_base/array.some()` and Mozilla's [Array.some documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some).\n\n[TABLE]\n\n**Returns:** undefined\n\n### `splice` `(index,howmany,item)`\n\nDefined by [dojo/query](query)\n\nReturns a new NodeList, manipulating this NodeList based on the arguments passed, potentially splicing in new elements at an offset, optionally deleting elements\n\nThis method behaves exactly like the Array.splice method with the caveat that it returns a [dojo/NodeList](nodelist) and not a raw Array. For more details, see Mozilla's [splice documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) For backwards compatibility, calling .end() on the spliced NodeList does not return the original NodeList -- splice alters the NodeList in place.\n\n[TABLE]\n\n**Returns:** undefined"
- name: NodeList#style()
  id: dojo/nodelist#1_10dojo_NodeList_style
  summary: if no value is passed, the result is an array of strings
  belongs_to: NodeList
  description: |-
    ### `style` `(property,value)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    gets or sets the CSS property for every element in the NodeList

    [TABLE]

    **Returns:** any

    if no value is passed, the result is an array of strings. If a value is passed, the return is this NodeList
- name: NodeList#text()
  id: dojo/nodelist#1_10dojo_NodeList_text
  summary: allows setting the text value of each node in the NodeList, if there is a value passed in, otherwise, returns the text value for all the nodes in the NodeList in one string
  belongs_to: NodeList
  description: "### `text` `(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nallows setting the text value of each node in the NodeList, if there is a value passed in, otherwise, returns the text value for all the nodes in the NodeList in one string.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| value     | String |             |\n\n**Returns:** any \\| function \\| string\n\nif no value is passed, the result is String, the text value of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"></div>\n<div id=\"bar\"></div>\n    \n```\n\nThis code inserts \"Hello World\" into both divs:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"div\").text(\"Hello World\");\n});\n    \n```\n\n### Example 2\n\nassume a DOM created by this markup:\n\n``` markup\n      <div id=\"foo\"><p>Hello Mars <span>today</span></p></div>\n<div id=\"bar\"><p>Hello World</p></div>\n    \n```\n\nThis code returns \"Hello Mars today\":\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    var message = query(\"div\").text();\n});\n    \n```"
- name: NodeList#toggleClass()
  id: dojo/nodelist#1_10dojo_NodeList_toggleClass
  summary: Adds a class to node if not present, or removes if present
  belongs_to: NodeList
  description: |-
    ### `toggleClass` `(className,condition)`

    Defined by [dojo/NodeList-dom](nodelist-dom)

    Adds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove.

    [TABLE]
- name: NodeList#toggleClassFx()
  id: dojo/nodelist#1_10dojo_NodeList_toggleClassFx
  summary: Animate the effect of adding or removing a class to all nodes in this list
  belongs_to: NodeList
  description: "### `toggleClassFx` `(cssClass,force,args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList-style](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList-style)\n\nAnimate the effect of adding or removing a class to all nodes in this list. see `dojox.fx.toggleClass`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| cssClass  | undefined |             |\n| force     | undefined |             |\n| args      | undefined |             |\n\n**Returns:** \\[object Value(type: function, value: undefined)\\]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.query(\".box\").toggleClass(\"bar\").play();\n    \n```\n\n### `toString` `()`\n\nDefined by [dojo/query](query)\n\n**Returns:** undefined"
- name: NodeList#val()
  id: dojo/nodelist#1_10dojo_NodeList_val
  summary: If a value is passed, allows seting the value property of form elements in this NodeList, or properly selecting/checking the right value for radio/checkbox/select elements
  belongs_to: NodeList
  description: "### `val` `(value)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nIf a value is passed, allows seting the value property of form elements in this NodeList, or properly selecting/checking the right value for radio/checkbox/select elements. If no value is passed, the value of the first node in this NodeList is returned.\n\n|           |                 |             |\n|-----------|-----------------|-------------|\n| Parameter | Type            | Description |\n| value     | String \\| Array |             |\n\n**Returns:** any \\| function \\| undefined \\| null\n\nif no value is passed, the result is String or an Array, for the value of the first node. If a value is passed, the return is this dojo/NodeList\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <input type=\"text\" value=\"foo\">\n<select multiple>\n    <option value=\"red\" selected>Red</option>\n    <option value=\"blue\">Blue</option>\n    <option value=\"yellow\" selected>Yellow</option>\n</select>\n    \n```\n\nThis code gets and sets the values for the form fields above:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query('[type=\"text\"]').val(); //gets value foo\n    query('[type=\"text\"]').val(\"bar\"); //sets the input's value to \"bar\"\n    query(\"select\").val() //gets array value [\"red\", \"yellow\"]\n    query(\"select\").val([\"blue\", \"yellow\"]) //Sets the blue and yellow options to selected.\n});\n    \n```"
- name: NodeList#wipeIn()
  id: dojo/nodelist#1_10dojo_NodeList_wipeIn
  summary: A special args member auto can be passed to automatically play the animation
  belongs_to: NodeList
  description: "### `wipeIn` `(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nwipe in all elements of this NodeList via `dojo/fx.wipeIn()`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nFade in all tables with class \"blah\":\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").wipeIn().play();\n});\n    \n```\n\n### Example 2\n\nUtilizing `auto` to get the NodeList back:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\".titles\").wipeIn({ auto:true }).onclick(someFunction);\n});\n    \n```"
- name: NodeList#wipeOut()
  id: dojo/nodelist#1_10dojo_NodeList_wipeOut
  summary: A special args member auto can be passed to automatically play the animation
  belongs_to: NodeList
  description: "### `wipeOut` `(args)`\n\nDefined by [dojo/NodeList-fx](nodelist-fx)\n\nwipe out all elements of this NodeList via `dojo/fx.wipeOut()`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/fx.Animation](_base/fx#Animation)\\|[dojo/NodeList](nodelist) \\| undefined\n\nA special args member `auto` can be passed to automatically play the animation. If args.auto is present, the original dojo/NodeList will be returned for further chaining. Otherwise the dojo/\\_base/fx.Animation instance is returned and must be .play()'ed\n\n## Examples\n\n### Example 1\n\nWipe out all tables with class \"blah\":\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-fx\"\n], function(query){\n    query(\"table.blah\").wipeOut().play();\n});     \n    \n```"
- name: NodeList#wrap()
  id: dojo/nodelist#1_10dojo_NodeList_wrap
  summary: Wrap each node in the NodeList with html passed to wrap
  belongs_to: NodeList
  description: "### `wrap` `(html)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nWrap each node in the NodeList with html passed to wrap.\n\nhtml will be cloned if the NodeList has more than one element. Only DOM nodes are cloned, not any attached event handlers.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| html      | String \\| DOMNode |             |\n\n**Returns:** any \\| function\n\nthe nodes in the current NodeList will be returned, not the nodes from html argument.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <b>one</b>\n<b>two</b>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\"b\").wrap(\"<div><span></span></div>\");\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div><span><b>one</b></span></div>\n<div><span><b>two</b></span></div>\n    \n```"
- name: NodeList#wrapAll()
  id: dojo/nodelist#1_10dojo_NodeList_wrapAll
  summary: Insert html where the first node in this NodeList lives, then place all nodes in this NodeList as the child of the html
  belongs_to: NodeList
  description: "### `wrapAll` `(html)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nInsert html where the first node in this NodeList lives, then place all nodes in this NodeList as the child of the html.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| html      | String \\| DOMNode |             |\n\n**Returns:** any \\| function\n\nthe nodes in the current NodeList will be returned, not the nodes from html argument.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").wrapAll('<div class=\"allRed\"></div>');\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"allRed\">\n        <div class=\"red\">Red One</div>\n        <div class=\"red\">Red Two</div>\n    </div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```"
- name: NodeList#wrapInner()
  id: dojo/nodelist#1_10dojo_NodeList_wrapInner
  summary: For each node in the NodeList, wrap all its children with the passed in html
  belongs_to: NodeList
  description: "### `wrapInner` `(html)`\n\nDefined by [dojo/NodeList-manipulate](nodelist-manipulate)\n\nFor each node in the NodeList, wrap all its children with the passed in html.\n\nhtml will be cloned if the NodeList has more than one element. Only DOM nodes are cloned, not any attached event handlers.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| html      | String \\| DOMNode |             |\n\n**Returns:** any \\| function\n\nthe nodes in the current NodeList will be returned, not the nodes from html argument.\n\n## Examples\n\n### Example 1\n\nassume a DOM created by this markup:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\">Red One</div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\">Red Two</div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\nRunning this code:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-manipulate\"\n], function(query){\n    query(\".red\").wrapInner('<span class=\"special\"></span>');\n});\n    \n```\n\nResults in this DOM structure:\n\n``` markup\n      <div class=\"container\">\n    <div class=\"red\"><span class=\"special\">Red One</span></div>\n    <div class=\"blue\">Blue One</div>\n    <div class=\"red\"><span class=\"special\">Red Two</span></div>\n    <div class=\"blue\">Blue Two</div>\n</div>\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList.html](http://dojotoolkit.org/api/1.10/dojo/NodeList.html)"
- name: NodeList-data
  id: dojo/nodelist-data
  summary: Adds data() and removeData() methods to NodeList, and returns NodeList constructor
  description: "# dojo/NodeList-data\n\n## Summary\n\nAdds data() and removeData() methods to NodeList, and returns NodeList constructor.\n\n## Usage\n\nNodeList-data`();`\n\nSee the [dojo/NodeList-data reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/NodeList-data.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList-data.html](http://dojotoolkit.org/api/1.10/dojo/NodeList-data.html)"
- name: NodeList-dom
  id: dojo/nodelist-dom
  summary: Adds DOM related methods to NodeList, and returns NodeList constructor
  description: "# dojo/NodeList-dom\n\n## Summary\n\nAdds DOM related methods to NodeList, and returns NodeList constructor.\n\n## Usage\n\nNodeList-dom`();`\n\nSee the [dojo/NodeList-dom reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/NodeList-dom.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList-dom.html](http://dojotoolkit.org/api/1.10/dojo/NodeList-dom.html)"
- name: NodeList-fx
  id: dojo/nodelist-fx
  summary: Adds dojo.fx animation support to dojo.query() by extending the NodeList class with additional FX functions
  description: "# dojo/NodeList-fx\n\n## Summary\n\nAdds dojo.fx animation support to dojo.query() by extending the NodeList class with additional FX functions. NodeList is the array-like object used to hold query results.\n\n## Usage\n\nNodeList-fx`();`\n\nSee the [dojo/NodeList-fx reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/NodeList-fx.html) for more information.\n\n## Methods\n\n### `fadeTo``(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nfade all elements of the node list to a specified opacity\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n// fade all elements with class \"bar\" to to 50% opacity\ndojo.query(\".bar\").fadeTo({ end: 0.5 }).play();\n```\n\n### `highlight``(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nhighlight all elements of the node list. Returns an instance of dojo.Animation\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n// highlight all links with class \"foo\"\ndojo.query(\"a.foo\").hightlight().play();\n```\n\n### `sizeTo``(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nsize all elements of this NodeList. Returns an instance of dojo.Animation\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n// size all divs with class \"blah\"\ndojo.query(\"div.blah\").sizeTo({\n    width:50,\n    height:50\n}).play();\n```\n\n### `slideBy``(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nslide all elements of this NodeList. Returns an instance of dojo.Animation\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n// slide all tables with class \"blah\" 10 px\ndojo.query(\"table.blah\").slideBy({ top:10, left:10 }).play();\n```\n\n### `wipeTo``(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nWipe all elements of the NodeList to a specified width: or height:\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.query(\".box\").wipeTo({ width: 300px }).play();\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList-fx.html](http://dojotoolkit.org/api/1.10/dojo/NodeList-fx.html)"
- name: NodeList-fx#fadeTo()
  id: dojo/nodelist-fx#1_10dojo_NodeList-fx_fadeTo
  summary: null
  belongs_to: NodeList-fx
  description: "### `fadeTo` `(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nfade all elements of the node list to a specified opacity\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // fade all elements with class \"bar\" to to 50% opacity\ndojo.query(\".bar\").fadeTo({ end: 0.5 }).play();\n    \n```"
- name: NodeList-fx#highlight()
  id: dojo/nodelist-fx#1_10dojo_NodeList-fx_highlight
  summary: highlight all elements of the node list
  belongs_to: NodeList-fx
  description: "### `highlight` `(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nhighlight all elements of the node list. Returns an instance of dojo.Animation\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // highlight all links with class \"foo\"\ndojo.query(\"a.foo\").hightlight().play();\n    \n```"
- name: NodeList-fx#sizeTo()
  id: dojo/nodelist-fx#1_10dojo_NodeList-fx_sizeTo
  summary: size all elements of this NodeList
  belongs_to: NodeList-fx
  description: "### `sizeTo` `(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nsize all elements of this NodeList. Returns an instance of dojo.Animation\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // size all divs with class \"blah\"\ndojo.query(\"div.blah\").sizeTo({\n    width:50,\n    height:50\n}).play();\n    \n```"
- name: NodeList-fx#slideBy()
  id: dojo/nodelist-fx#1_10dojo_NodeList-fx_slideBy
  summary: slide all elements of this NodeList
  belongs_to: NodeList-fx
  description: "### `slideBy` `(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nslide all elements of this NodeList. Returns an instance of dojo.Animation\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // slide all tables with class \"blah\" 10 px\ndojo.query(\"table.blah\").slideBy({ top:10, left:10 }).play();\n    \n```"
- name: NodeList-fx#wipeTo()
  id: dojo/nodelist-fx#1_10dojo_NodeList-fx_wipeTo
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: NodeList-fx
  description: "### `wipeTo` `(args)`\n\nDefined by [dojox/fx/ext-dojo/NodeList](http://dojotoolkit.org/api/1.10/dojox/fx/ext-dojo/NodeList)\n\nWipe all elements of the NodeList to a specified width: or height:\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.query(\".box\").wipeTo({ width: 300px }).play();\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList-fx.html](http://dojotoolkit.org/api/1.10/dojo/NodeList-fx.html)"
- name: NodeList-html
  id: dojo/nodelist-html
  summary: See the dojo/NodeList-html reference documentation for more information
  description: "# dojo/NodeList-html\n\n## Summary\n\nAdds a chainable html method to [dojo/query()](query) / NodeList instances for setting/replacing node content\n\n## Usage\n\nNodeList-html`();`\n\nSee the [dojo/NodeList-html reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/NodeList-html.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList-html.html](http://dojotoolkit.org/api/1.10/dojo/NodeList-html.html)"
- name: NodeList-manipulate
  id: dojo/nodelist-manipulate
  summary: Adds chainable methods to dojo.query() / NodeList instances for manipulating HTML and DOM nodes and their properties
  description: "# dojo/NodeList-manipulate\n\n## Summary\n\nAdds chainable methods to dojo.query() / NodeList instances for manipulating HTML and DOM nodes and their properties.\n\n## Usage\n\nNodeList-manipulate`();`\n\nSee the [dojo/NodeList-manipulate reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/NodeList-manipulate.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList-manipulate.html](http://dojotoolkit.org/api/1.10/dojo/NodeList-manipulate.html)"
- name: NodeList-traverse
  id: dojo/nodelist-traverse
  summary: See the dojo/NodeList-traverse reference documentation for more information
  description: "# dojo/NodeList-traverse\n\n## Summary\n\nAdds chainable methods to [dojo/query()](query) / NodeList instances for traversing the DOM\n\n## Usage\n\nNodeList-traverse`();`\n\nSee the [dojo/NodeList-traverse reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/NodeList-traverse.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList-traverse.html](http://dojotoolkit.org/api/1.10/dojo/NodeList-traverse.html)"
- name: NodeList._nodeDataCache
  id: dojo/nodelist._nodedatacache
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/NodeList.\\_nodeDataCache\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/NodeList.\\_nodeDataCache.html](http://dojotoolkit.org/api/1.10/dojo/NodeList._nodeDataCache.html)"
- name: number
  id: dojo/number
  summary: See the dojo/number reference documentation for more information
  description: "# dojo/number\n\n## Summary\n\nlocalized formatting and parsing routines for Number\n\nSee the [dojo/number reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/number.html) for more information.\n\n## Properties\n\n## Methods\n\n### `format``(value,options)`\n\nDefined by [dojo/number](number)\n\nFormat a Number as a String, using locale-specific settings\n\nCreate a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the [Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and delimiters. If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.\n\n[TABLE]\n\n**Returns:** null \\| undefined\n\n### `parse``(expression,options)`\n\nDefined by [dojo/number](number)\n\nConvert a properly formatted string to a primitive Number, using locale-specific settings.\n\nCreate a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale and follow the syntax described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) Note that literal characters in patterns are not supported.\n\n[TABLE]\n\n**Returns:** number\n\n### `regexp``(options)`\n\nDefined by [dojo/number](number)\n\nBuilds the regular needed to parse a number\n\nReturns regular expression with positive and negative match, group and decimal separators\n\n[TABLE]\n\n**Returns:** undefined\n\n### `round``(value,places,increment)`\n\nDefined by [dojo/number](number)\n\nRounds to the nearest value with the given number of decimal places, away from zero\n\nRounds to the nearest value with the given number of decimal places, away from zero if equal. Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by fractional increments also, such as the nearest quarter. NOTE: Subject to floating point errors. See [dojox/math/round](http://dojotoolkit.org/api/1.10/dojox/math/round) for experimental workaround.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n>>> number.round(-0.5)\n-1\n>>> number.round(162.295, 2)\n162.29  // note floating point error.  Should be 162.3\n>>> number.round(10.71, 0, 2.5)\n10.75\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.html](http://dojotoolkit.org/api/1.10/dojo/number.html)"
- name: number#format()
  id: dojo/number#1_10dojo_number_format
  summary: Create a string from a Number using a known localized pattern
  belongs_to: number
  description: |-
    ### `format` `(value,options)`

    Defined by [dojo/number](number)

    Format a Number as a String, using locale-specific settings

    Create a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the [Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and delimiters. If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.

    [TABLE]

    **Returns:** null \| undefined
- name: number#parse()
  id: dojo/number#1_10dojo_number_parse
  summary: Convert a properly formatted string to a primitive Number, using locale-specific settings
  belongs_to: number
  description: |-
    ### `parse` `(expression,options)`

    Defined by [dojo/number](number)

    Convert a properly formatted string to a primitive Number, using locale-specific settings.

    Create a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale and follow the syntax described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) Note that literal characters in patterns are not supported.

    [TABLE]

    **Returns:** number
- name: number#regexp()
  id: dojo/number#1_10dojo_number_regexp
  summary: null
  belongs_to: number
  description: |-
    ### `regexp` `(options)`

    Defined by [dojo/number](number)

    Builds the regular needed to parse a number

    Returns regular expression with positive and negative match, group and decimal separators

    [TABLE]

    **Returns:** undefined
- name: number#round()
  id: dojo/number#1_10dojo_number_round
  summary: Rounds to the nearest value with the given number of decimal places, away from zero if equal
  belongs_to: number
  description: "### `round` `(value,places,increment)`\n\nDefined by [dojo/number](number)\n\nRounds to the nearest value with the given number of decimal places, away from zero\n\nRounds to the nearest value with the given number of decimal places, away from zero if equal. Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by fractional increments also, such as the nearest quarter. NOTE: Subject to floating point errors. See [dojox/math/round](http://dojotoolkit.org/api/1.10/dojox/math/round) for experimental workaround.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n      >>> number.round(-0.5)\n-1\n>>> number.round(162.295, 2)\n162.29  // note floating point error.  Should be 162.3\n>>> number.round(10.71, 0, 2.5)\n10.75\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.html](http://dojotoolkit.org/api/1.10/dojo/number.html)"
- name: number.__FormatAbsoluteOptions
  id: dojo/number.__formatabsoluteoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/number.\\_\\_FormatAbsoluteOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new number.__FormatAbsoluteOptions()`\n\n## Properties\n\n### decimal\n\nDefined by: [dojo/number](number)\n\nthe decimal separator\n\n### group\n\nDefined by: [dojo/number](number)\n\nthe group separator\n\n### places\n\nDefined by: [dojo/number](number)\n\nnumber of decimal places. the range \"n,m\" will format to m places.\n\n### round\n\nDefined by: [dojo/number](number)\n\n5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means don't round.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.\\_\\_FormatAbsoluteOptions.html](http://dojotoolkit.org/api/1.10/dojo/number.__FormatAbsoluteOptions.html)"
- name: number.__FormatOptions
  id: dojo/number.__formatoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/number.\\_\\_FormatOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new number.__FormatOptions()`\n\n## Properties\n\n### fractional\n\nDefined by: [dojo/number](number)\n\nIf false, show no decimal places, overriding places and pattern settings.\n\n### locale\n\nDefined by: [dojo/number](number)\n\noverride the locale used to determine formatting rules\n\n### pattern\n\nDefined by: [dojo/number](number)\n\noverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string. Default value is based on locale. Overriding this property will defeat localization. Literal characters in patterns are not supported.\n\n### places\n\nDefined by: [dojo/number](number)\n\nfixed number of decimal places to show. This overrides any information in the provided pattern.\n\n### round\n\nDefined by: [dojo/number](number)\n\n5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means do not round.\n\n### type\n\nDefined by: [dojo/number](number)\n\nchoose a format type based on the locale from the following: decimal, scientific (not yet supported), percent, currency. decimal by default.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.\\_\\_FormatOptions.html](http://dojotoolkit.org/api/1.10/dojo/number.__FormatOptions.html)"
- name: number.__IntegerRegexpFlags
  id: dojo/number.__integerregexpflags
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/number.\\_\\_IntegerRegexpFlags\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new number.__IntegerRegexpFlags()`\n\n## Properties\n\n### groupSize\n\nDefined by: [dojo/number](number)\n\ngroup size between separators\n\n### groupSize2\n\nDefined by: [dojo/number](number)\n\nsecond grouping, where separators 2..n have a different interval than the first separator (for India)\n\n### separator\n\nDefined by: [dojo/number](number)\n\nThe character used as the thousands separator. Default is no separator. For more than one symbol use an array, e.g. `[\",\", \"\"]`, makes ',' optional.\n\n### signed\n\nDefined by: [dojo/number](number)\n\nThe leading plus-or-minus sign. Can be true, false, or `[true,false]`. Default is `[true, false]`, (i.e. will match if it is signed or unsigned).\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.\\_\\_IntegerRegexpFlags.html](http://dojotoolkit.org/api/1.10/dojo/number.__IntegerRegexpFlags.html)"
- name: number.__ParseOptions
  id: dojo/number.__parseoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/number.\\_\\_ParseOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new number.__ParseOptions()`\n\n## Properties\n\n### fractional\n\nDefined by: [dojo/number](number)\n\nWhether to include the fractional portion, where the number of decimal places are implied by pattern or explicit 'places' parameter. The value \\[true,false\\] makes the fractional portion optional.\n\n### locale\n\nDefined by: [dojo/number](number)\n\noverride the locale used to determine formatting rules\n\n### pattern\n\nDefined by: [dojo/number](number)\n\noverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string. Default value is based on locale. Overriding this property will defeat localization. Literal characters in patterns are not supported.\n\n### strict\n\nDefined by: [dojo/number](number)\n\nstrict parsing, false by default. Strict parsing requires input as produced by the format() method. Non-strict is more permissive, e.g. flexible on white space, omitting thousands separators\n\n### type\n\nDefined by: [dojo/number](number)\n\nchoose a format type based on the locale from the following: decimal, scientific (not yet supported), percent, currency. decimal by default.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.\\_\\_ParseOptions.html](http://dojotoolkit.org/api/1.10/dojo/number.__ParseOptions.html)"
- name: number.__RealNumberRegexpFlags
  id: dojo/number.__realnumberregexpflags
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/number.\\_\\_RealNumberRegexpFlags\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new number.__RealNumberRegexpFlags()`\n\n## Properties\n\n### decimal\n\nDefined by: [dojo/number](number)\n\nA string for the character used as the decimal point. Default is \".\".\n\n### eSigned\n\nDefined by: [dojo/number](number)\n\nThe leading plus-or-minus sign on the exponent. Can be true, false, or \\[true, false\\]. Default is \\[true, false\\], (i.e. will match if it is signed or unsigned). flags in regexp.integer can be applied.\n\n### exponent\n\nDefined by: [dojo/number](number)\n\nExpress in exponential notation. Can be true, false, or \\[true, false\\]. Default is \\[true, false\\], (i.e. will match if the exponential part is present are not).\n\n### fractional\n\nDefined by: [dojo/number](number)\n\nWhether decimal places are used. Can be true, false, or \\[true, false\\]. Default is \\[true, false\\] which means optional.\n\n### places\n\nDefined by: [dojo/number](number)\n\nThe integer number of decimal places or a range given as \"n,m\". If not given, the decimal part is optional and the number of places is unlimited.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.\\_\\_RealNumberRegexpFlags.html](http://dojotoolkit.org/api/1.10/dojo/number.__RealNumberRegexpFlags.html)"
- name: number.__RegexpOptions
  id: dojo/number.__regexpoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/number.\\_\\_RegexpOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new number.__RegexpOptions()`\n\n## Properties\n\n### locale\n\nDefined by: [dojo/number](number)\n\noverride the locale used to determine formatting rules\n\n### pattern\n\nDefined by: [dojo/number](number)\n\noverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string. Default value is based on locale. Overriding this property will defeat localization.\n\n### places\n\nDefined by: [dojo/number](number)\n\nnumber of decimal places to accept: Infinity, a positive number, or a range \"n,m\". Defined by pattern or Infinity if pattern not provided.\n\n### strict\n\nDefined by: [dojo/number](number)\n\nstrict parsing, false by default. Strict parsing requires input as produced by the format() method. Non-strict is more permissive, e.g. flexible on white space, omitting thousands separators\n\n### type\n\nDefined by: [dojo/number](number)\n\nchoose a format type based on the locale from the following: decimal, scientific (not yet supported), percent, currency. decimal by default.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/number.\\_\\_RegexpOptions.html](http://dojotoolkit.org/api/1.10/dojo/number.__RegexpOptions.html)"
- name: on
  id: dojo/on
  summary: A function that provides core event listening functionality
  description: "# dojo/on\n\n## Summary\n\nA function that provides core event listening functionality. With this function you can provide a target, event type, and listener to be notified of future matching events that are fired.\n\nTo listen for \"click\" events on a button node, we can do:\n\n``` javascript\ndefine([\"dojo/on\"], function(listen){\n    on(button, \"click\", clickHandler);\n    ...\n```\n\nEvented JavaScript objects can also have their own events.\n\n``` javascript\nvar obj = new Evented;\non(obj, \"foo\", fooHandler);\n```\n\nAnd then we could publish a \"foo\" event:\n\n``` javascript\non.emit(obj, \"foo\", {key: \"value\"});\n```\n\nWe can use extension events as well. For example, you could listen for a tap gesture:\n\n``` javascript\ndefine([\"dojo/on\", \"dojo/gesture/tap\", function(listen, tap){\n    on(button, tap, tapHandler);\n    ...\n```\n\nwhich would trigger fooHandler. Note that for a simple object this is equivalent to calling:\n\n``` javascript\nobj.onfoo({key:\"value\"});\n```\n\nIf you use on.emit on a DOM node, it will use native event dispatching when possible.\n\n## Usage\n\non`(target,type,listener,dontFix);`\n\n|           |                    |                                                                         |\n|-----------|--------------------|-------------------------------------------------------------------------|\n| Parameter | Type               | Description                                                             |\n| target    | Element \\| Object  | This is the target object or DOM element that to receive events from    |\n| type      | String \\| Function | This is the name of the event to listen for or an extension event type. |\n| listener  | Function           | This is the function that should be called when the event fires.        |\n| dontFix   | undefined          |                                                                         |\n\n**Returns:** Object \\| undefined\n\nAn object with a remove() method that can be used to stop listening for this event.\n\nSee the [dojo/on reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/on.html) for more information.\n\n## Methods\n\n### `emit``(target,type,event)`\n\nDefined by [dojo/on](on)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| target    | undefined |             |\n| type      | undefined |             |\n| event     | undefined |             |\n\n**Returns:** undefined\n\n### `matches``(node,selector,context,children,matchesTarget)`\n\nDefined by [dojo/on](on)\n\nCheck if a node match the current selector within the constraint of a context\n\n[TABLE]\n\n**Returns:** DOMNode\n\nThe matching node, if any. Else you get false\n\n### `once``(target,type,listener,dontFix)`\n\nDefined by [dojo/on](on)\n\nThis function acts the same as on(), but will only call the listener once. The listener will be called for the first event that takes place and then listener will automatically be removed.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| target    | undefined |             |\n| type      | undefined |             |\n| listener  | undefined |             |\n| dontFix   | undefined |             |\n\n**Returns:** undefined\n\n### `parse``(target,type,listener,addListener,dontFix,matchesTarget)`\n\nDefined by [dojo/on](on)\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| target        | undefined |             |\n| type          | undefined |             |\n| listener      | undefined |             |\n| addListener   | undefined |             |\n| dontFix       | undefined |             |\n| matchesTarget | undefined |             |\n\n**Returns:** undefined\n\n### `pausable``(target,type,listener,dontFix)`\n\nDefined by [dojo/on](on)\n\nThis function acts the same as on(), but with pausable functionality. The returned signal object has pause() and resume() functions. Calling the pause() method will cause the listener to not be called for future events. Calling the resume() method will cause the listener to again be called for future events.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| target    | undefined |             |\n| type      | undefined |             |\n| listener  | undefined |             |\n| dontFix   | undefined |             |\n\n**Returns:** undefined\n\n### `selector``(selector,eventType,children)`\n\nDefined by [dojo/on](on)\n\nCreates a new extension event with event delegation. This is based on the provided event type (can be extension event) that only calls the listener when the CSS selector matches the target of the event.\n\nThe application must require() an appropriate level of dojo/query to handle the selector.\n\n|           |           |                                                                                             |\n|-----------|-----------|---------------------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                                 |\n| selector  | undefined | The CSS selector to use for filter events and determine the \\|this\\| of the event listener. |\n| eventType | undefined | The event to listen for                                                                     |\n| children  | undefined | Indicates if children elements of the selector should be allowed. This defaults to true     |\n\n**Returns:** it, or programatically by arrow key handling code.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/on\", \"dojo/mouse\", \"dojo/query!css2\"], function(listen, mouse){\n    on(node, on.selector(\".my-class\", mouse.enter), handlerForMyHover);\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/on.html](http://dojotoolkit.org/api/1.10/dojo/on.html)"
- name: on#emit()
  id: dojo/on#1_10dojo_on_emit
  summary: null
  belongs_to: on
  description: |-
    ### `emit` `(target,type,event)`

    Defined by [dojo/on](on)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | target    | undefined |             |
    | type      | undefined |             |
    | event     | undefined |             |

    **Returns:** undefined
- name: on#matches()
  id: dojo/on#1_10dojo_on_matches
  summary: The matching node, if any
  belongs_to: on
  description: |-
    ### `matches` `(node,selector,context,children,matchesTarget)`

    Defined by [dojo/on](on)

    Check if a node match the current selector within the constraint of a context

    [TABLE]

    **Returns:** DOMNode

    The matching node, if any. Else you get false
- name: on#once()
  id: dojo/on#1_10dojo_on_once
  summary: This function acts the same as on(), but will only call the listener once
  belongs_to: on
  description: |-
    ### `once` `(target,type,listener,dontFix)`

    Defined by [dojo/on](on)

    This function acts the same as on(), but will only call the listener once. The listener will be called for the first event that takes place and then listener will automatically be removed.

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | target    | undefined |             |
    | type      | undefined |             |
    | listener  | undefined |             |
    | dontFix   | undefined |             |

    **Returns:** undefined
- name: on#parse()
  id: dojo/on#1_10dojo_on_parse
  summary: null
  belongs_to: on
  description: |-
    ### `parse` `(target,type,listener,addListener,dontFix,matchesTarget)`

    Defined by [dojo/on](on)

    |               |           |             |
    |---------------|-----------|-------------|
    | Parameter     | Type      | Description |
    | target        | undefined |             |
    | type          | undefined |             |
    | listener      | undefined |             |
    | addListener   | undefined |             |
    | dontFix       | undefined |             |
    | matchesTarget | undefined |             |

    **Returns:** undefined
- name: on#pausable()
  id: dojo/on#1_10dojo_on_pausable
  summary: This function acts the same as on(), but with pausable functionality
  belongs_to: on
  description: |-
    ### `pausable` `(target,type,listener,dontFix)`

    Defined by [dojo/on](on)

    This function acts the same as on(), but with pausable functionality. The returned signal object has pause() and resume() functions. Calling the pause() method will cause the listener to not be called for future events. Calling the resume() method will cause the listener to again be called for future events.

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | target    | undefined |             |
    | type      | undefined |             |
    | listener  | undefined |             |
    | dontFix   | undefined |             |

    **Returns:** undefined
- name: on#selector()
  id: dojo/on#1_10dojo_on_selector
  summary: Creates a new extension event with event delegation
  belongs_to: on
  description: "### `selector` `(selector,eventType,children)`\n\nDefined by [dojo/on](on)\n\nCreates a new extension event with event delegation. This is based on the provided event type (can be extension event) that only calls the listener when the CSS selector matches the target of the event.\n\nThe application must require() an appropriate level of dojo/query to handle the selector.\n\n|           |           |                                                                                             |\n|-----------|-----------|---------------------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                                 |\n| selector  | undefined | The CSS selector to use for filter events and determine the \\|this\\| of the event listener. |\n| eventType | undefined | The event to listen for                                                                     |\n| children  | undefined | Indicates if children elements of the selector should be allowed. This defaults to true     |\n\n**Returns:** it, or programatically by arrow key handling code.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/on\", \"dojo/mouse\", \"dojo/query!css2\"], function(listen, mouse){\n    on(node, on.selector(\".my-class\", mouse.enter), handlerForMyHover);\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/on.html](http://dojotoolkit.org/api/1.10/dojo/on.html)"
- name: on/asyncEventListener
  id: dojo/on/asynceventlistener
  summary: See the dojo/on/asyncEventListener reference documentation for more information
  description: "# dojo/on/asyncEventListener\n\n## Usage\n\nasyncEventListener`(listener);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| listener  | undefined |             |\n\nSee the [dojo/on/asyncEventListener reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/on.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/on/asyncEventListener.html](http://dojotoolkit.org/api/1.10/dojo/on/asyncEventListener.html)"
- name: on/debounce
  id: dojo/on/debounce
  summary: See the dojo/on/debounce reference documentation for more information
  description: "# dojo/on/debounce\n\n## Summary\n\nevent parser for custom events\n\n## Usage\n\ndebounce`(selector,delay);`\n\n|           |          |                                              |\n|-----------|----------|----------------------------------------------|\n| Parameter | Type     | Description                                  |\n| selector  | String   | The selector to check against                |\n| delay     | Interger | The amount of ms before testing the selector |\n\nSee the [dojo/on/debounce reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/on.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/on/debounce.html](http://dojotoolkit.org/api/1.10/dojo/on/debounce.html)"
- name: on/throttle
  id: dojo/on/throttle
  summary: See the dojo/on/throttle reference documentation for more information
  description: "# dojo/on/throttle\n\n## Summary\n\nevent parser for custom events\n\n## Usage\n\nthrottle`(selector,delay);`\n\n|           |          |                                              |\n|-----------|----------|----------------------------------------------|\n| Parameter | Type     | Description                                  |\n| selector  | String   | The selector to check against                |\n| delay     | Interger | The amount of ms before testing the selector |\n\nSee the [dojo/on/throttle reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/on.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/on/throttle.html](http://dojotoolkit.org/api/1.10/dojo/on/throttle.html)"
- name: parser
  id: dojo/parser
  summary: See the dojo/parser reference documentation for more information
  description: "# dojo/parser\n\n## Summary\n\nThe Dom/Widget parsing package\n\nSee the [dojo/parser reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/parser.html) for more information.\n\n## Properties\n\n## Methods\n\n### `construct``(ctor,node,mixin,options,scripts,inherited)`\n\nDefined by [dojo/parser](parser)\n\nCalls new ctor(params, node), where params is the hash of parameters specified on the node, excluding data-dojo-type and data-dojo-mixins. Does not call startup().\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nInstance or Promise for the instance, if markupFactory() itself returned a promise\n\n### `instantiate``(nodes,mixin,options)`\n\nDefined by [dojo/parser](parser)\n\nTakes array of nodes, and turns them into class instances and potentially calls a startup method to allow them to connect with any children.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nArray of instances.\n\n### `parse``(rootNode,options)`\n\nDefined by [dojo/parser](parser)\n\nScan the DOM for class instances, and instantiate them.\n\nSearch specified node (or root node) recursively for class instances, and instantiate them. Searches for either data-dojo-type=\"Class\" or dojoType=\"Class\" where \"Class\" is a a fully qualified class name, like [dijit/form/Button](http://dojotoolkit.org/api/1.10/dijit/form/Button)\n\nUsing `data-dojo-type`: Attributes using can be mixed into the parameters used to instantiate the Class by using a `data-dojo-props` attribute on the node being converted. `data-dojo-props` should be a string attribute to be converted from JSON.\n\nUsing `dojoType`: Attributes are read from the original domNode and converted to appropriate types by looking up the Class prototype values. This is the default behavior from Dojo 1.0 to Dojo 1.5. `dojoType` support is deprecated, and will go away in Dojo 2.0.\n\n[TABLE]\n\n**Returns:** Mixed \\| Array\n\nReturns a blended object that is an array of the instantiated objects, but also can include a promise that is resolved with the instantiated objects. This is done for backwards compatibility. If the parser auto-requires modules, it will always behave in a promise fashion and `parser.parse().then(function(instances){...})` should be used.\n\n## Examples\n\n### Example 1\n\nParse all widgets on a page:\n\n``` javascript\nparser.parse();\n```\n\n### Example 2\n\nParse all classes within the node with id=\"foo\"\n\n``` javascript\nparser.parse(dojo.byId('foo'));\n```\n\n### Example 3\n\nParse all classes in a page, but do not call .startup() on any child\n\n``` javascript\nparser.parse({ noStart: true })\n```\n\n### Example 4\n\nParse all classes in a node, but do not call .startup()\n\n``` javascript\nparser.parse(someNode, { noStart:true });\n// or\nparser.parse({ noStart:true, rootNode: someNode });\n```\n\n### `scan``(root,options)`\n\nDefined by [dojo/parser](parser)\n\nScan a DOM tree and return an array of objects representing the DOMNodes that need to be turned into widgets.\n\nSearch specified node (or document root node) recursively for class instances and return an array of objects that represent potential widgets to be instantiated. Searches for either data-dojo-type=\"MID\" or dojoType=\"MID\" where \"MID\" is a module ID like \"[dijit/form/Button](http://dojotoolkit.org/api/1.10/dijit/form/Button)\" or a fully qualified Class name like \"[dijit/form/Button](http://dojotoolkit.org/api/1.10/dijit/form/Button)\". If the MID is not currently available, scan will attempt to require() in the module.\n\nSee parser.parse() for details of markup.\n\n[TABLE]\n\n**Returns:** Promise \\| undefined\n\nA promise that is resolved with the nodes that have been parsed.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/parser.html](http://dojotoolkit.org/api/1.10/dojo/parser.html)"
- name: parser#construct()
  id: dojo/parser#1_10dojo_parser_construct
  summary: Calls new ctor(params, node), where params is the hash of parameters specified on the node, excluding data-dojo-type and data-dojo-mixins
  belongs_to: parser
  description: |-
    ### `construct` `(ctor,node,mixin,options,scripts,inherited)`

    Defined by [dojo/parser](parser)

    Calls new ctor(params, node), where params is the hash of parameters specified on the node, excluding data-dojo-type and data-dojo-mixins. Does not call startup().

    [TABLE]

    **Returns:** any \| undefined

    Instance or Promise for the instance, if markupFactory() itself returned a promise
- name: parser#instantiate()
  id: dojo/parser#1_10dojo_parser_instantiate
  summary: Takes array of nodes, and turns them into class instances and potentially calls a startup method to allow them to connect with any children
  belongs_to: parser
  description: |-
    ### `instantiate` `(nodes,mixin,options)`

    Defined by [dojo/parser](parser)

    Takes array of nodes, and turns them into class instances and potentially calls a startup method to allow them to connect with any children.

    [TABLE]

    **Returns:** any \| undefined

    Array of instances.
- name: parser#parse()
  id: dojo/parser#1_10dojo_parser_parse
  summary: Scan the DOM for class instances, and instantiate them
  belongs_to: parser
  description: "### `parse` `(rootNode,options)`\n\nDefined by [dojo/parser](parser)\n\nScan the DOM for class instances, and instantiate them.\n\nSearch specified node (or root node) recursively for class instances, and instantiate them. Searches for either data-dojo-type=\"Class\" or dojoType=\"Class\" where \"Class\" is a a fully qualified class name, like [dijit/form/Button](http://dojotoolkit.org/api/1.10/dijit/form/Button)\n\nUsing `data-dojo-type`: Attributes using can be mixed into the parameters used to instantiate the Class by using a `data-dojo-props` attribute on the node being converted. `data-dojo-props` should be a string attribute to be converted from JSON.\n\nUsing `dojoType`: Attributes are read from the original domNode and converted to appropriate types by looking up the Class prototype values. This is the default behavior from Dojo 1.0 to Dojo 1.5. `dojoType` support is deprecated, and will go away in Dojo 2.0.\n\n[TABLE]\n\n**Returns:** Mixed \\| Array\n\nReturns a blended object that is an array of the instantiated objects, but also can include a promise that is resolved with the instantiated objects. This is done for backwards compatibility. If the parser auto-requires modules, it will always behave in a promise fashion and `parser.parse().then(function(instances){...})` should be used.\n\n## Examples\n\n### Example 1\n\nParse all widgets on a page:\n\n``` javascript\n      parser.parse();\n    \n```\n\n### Example 2\n\nParse all classes within the node with id=\"foo\"\n\n``` javascript\n      parser.parse(dojo.byId('foo'));\n    \n```\n\n### Example 3\n\nParse all classes in a page, but do not call .startup() on any child\n\n``` javascript\n      parser.parse({ noStart: true })\n    \n```\n\n### Example 4\n\nParse all classes in a node, but do not call .startup()\n\n``` javascript\n      parser.parse(someNode, { noStart:true });\n// or\nparser.parse({ noStart:true, rootNode: someNode });\n    \n```"
- name: parser#scan()
  id: dojo/parser#1_10dojo_parser_scan
  summary: Scan a DOM tree and return an array of objects representing the DOMNodes that need to be turned into widgets
  belongs_to: parser
  description: "### `scan` `(root,options)`\n\nDefined by [dojo/parser](parser)\n\nScan a DOM tree and return an array of objects representing the DOMNodes that need to be turned into widgets.\n\nSearch specified node (or document root node) recursively for class instances and return an array of objects that represent potential widgets to be instantiated. Searches for either data-dojo-type=\"MID\" or dojoType=\"MID\" where \"MID\" is a module ID like \"[dijit/form/Button](http://dojotoolkit.org/api/1.10/dijit/form/Button)\" or a fully qualified Class name like \"[dijit/form/Button](http://dojotoolkit.org/api/1.10/dijit/form/Button)\". If the MID is not currently available, scan will attempt to require() in the module.\n\nSee parser.parse() for details of markup.\n\n[TABLE]\n\n**Returns:** Promise \\| undefined\n\nA promise that is resolved with the nodes that have been parsed.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/parser.html](http://dojotoolkit.org/api/1.10/dojo/parser.html)"
- name: promise/all
  id: dojo/promise/all
  summary: Takes multiple promises and returns a new promise that is fulfilled when all promises have been resolved or one has been rejected
  description: "# dojo/promise/all\n\n## Summary\n\nTakes multiple promises and returns a new promise that is fulfilled when all promises have been resolved or one has been rejected.\n\nTakes multiple promises and returns a new promise that is fulfilled when all promises have been resolved or one has been rejected. If one of the promises is rejected, the returned promise is also rejected. Canceling the returned promise will *not* cancel any passed promises.\n\n## Usage\n\nall`(objectOrArray);`\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise) \\| undefined\n\nSee the [dojo/promise/all reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/promise/all.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/promise/all.html](http://dojotoolkit.org/api/1.10/dojo/promise/all.html)"
- name: promise/first
  id: dojo/promise/first
  summary: Takes multiple promises and returns a new promise that is fulfilled when the first of these promises is fulfilled
  description: "# dojo/promise/first\n\n## Summary\n\nTakes multiple promises and returns a new promise that is fulfilled when the first of these promises is fulfilled.\n\nTakes multiple promises and returns a new promise that is fulfilled when the first of these promises is fulfilled. Canceling the returned promise will *not* cancel any passed promises. The promise will be fulfilled with the value of the first fulfilled promise.\n\n## Usage\n\nfirst`(objectOrArray);`\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise)\n\nSee the [dojo/promise/first reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/promise/first.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/promise/first.html](http://dojotoolkit.org/api/1.10/dojo/promise/first.html)"
- name: promise/instrumentation
  id: dojo/promise/instrumentation
  summary: Initialize instrumentation for the Deferred class
  description: "# dojo/promise/instrumentation\n\n## Summary\n\nInitialize instrumentation for the Deferred class.\n\nInitialize instrumentation for the Deferred class. Done automatically by [dojo/Deferred](../deferred) if the `deferredInstrumentation` and `useDeferredInstrumentation` config options are set.\n\nSets up [dojo/promise/tracer](tracer) to log to the console.\n\nSets up instrumentation of rejected deferreds so unhandled errors are logged to the console.\n\n## Usage\n\ninstrumentation`(Deferred);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| Deferred  | undefined |             |\n\nSee the [dojo/promise/instrumentation reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/promise.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/promise/instrumentation.html](http://dojotoolkit.org/api/1.10/dojo/promise/instrumentation.html)"
- name: promise/Promise
  id: dojo/promise/promise
  summary: The public interface to a deferred
  description: "# dojo/promise/Promise\n\n## Summary\n\nThe public interface to a deferred.\n\nThe public interface to a deferred. All promises in Dojo are instances of this class.\n\n## Usage\n\nPromise`();`\n\nSee the [dojo/promise/Promise reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/promise/Promise.html) for more information.\n\n## Methods\n\n### `always``(callbackOrErrback)`\n\nDefined by [dojo/promise/Promise](promise)\n\nAdd a callback to be invoked when the promise is resolved or rejected.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise) \\| undefined\n\nReturns a new promise for the result of the callback/errback.\n\n### `cancel``(reason,strict)`\n\nDefined by [dojo/promise/Promise](promise)\n\nInform the deferred it may cancel its asynchronous operation.\n\nInform the deferred it may cancel its asynchronous operation. The deferred's (optional) canceler is invoked and the deferred will be left in a rejected state. Can affect other promises that originate with the same deferred.\n\n[TABLE]\n\n**Returns:** any\n\nReturns the rejection reason if the deferred was canceled normally.\n\n### `isCanceled``()`\n\nDefined by [dojo/promise/Promise](promise)\n\nChecks whether the promise has been canceled.\n\n**Returns:** Boolean\n\n### `isFulfilled``()`\n\nDefined by [dojo/promise/Promise](promise)\n\nChecks whether the promise has been resolved or rejected.\n\n**Returns:** Boolean\n\n### `isRejected``()`\n\nDefined by [dojo/promise/Promise](promise)\n\nChecks whether the promise has been rejected.\n\n**Returns:** Boolean\n\n### `isResolved``()`\n\nDefined by [dojo/promise/Promise](promise)\n\nChecks whether the promise has been resolved.\n\n**Returns:** Boolean\n\n### `otherwise``(errback)`\n\nDefined by [dojo/promise/Promise](promise)\n\nAdd new errbacks to the promise.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise) \\| undefined\n\nReturns a new promise for the result of the errback.\n\n### `then``(callback,errback,progback)`\n\nDefined by [dojo/promise/Promise](promise)\n\nAdd new callbacks to the promise.\n\nAdd new callbacks to the deferred. Callbacks can be added before or after the deferred is fulfilled.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise)\n\nReturns a new promise for the result of the callback(s). This can be used for chaining many asynchronous operations.\n\n### `toString``()`\n\nDefined by [dojo/promise/Promise](promise)\n\n**Returns:** string\n\nReturns `[object Promise]`.\n\n### `trace``()`\n\nDefined by [dojo/promise/tracer](tracer)\n\nTrace the promise.\n\nTracing allows you to transparently log progress, resolution and rejection of promises, without affecting the promise itself. Any arguments passed to `trace()` are emitted in trace events. See [dojo/promise/tracer](tracer) on how to handle traces.\n\n**Returns:** [dojo/promise/Promise](promise)\n\nThe promise instance `trace()` is called on.\n\n### `traceRejected``()`\n\nDefined by [dojo/promise/tracer](tracer)\n\nTrace rejection of the promise.\n\nTracing allows you to transparently log progress, resolution and rejection of promises, without affecting the promise itself. Any arguments passed to `trace()` are emitted in trace events. See [dojo/promise/tracer](tracer) on how to handle traces.\n\n**Returns:** [dojo/promise/Promise](promise)\n\nThe promise instance `traceRejected()` is called on.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/promise/Promise.html](http://dojotoolkit.org/api/1.10/dojo/promise/Promise.html)"
- name: promise/Promise#always()
  id: dojo/promise/promise#1_10dojo_promise_Promise_always
  summary: Add a callback to be invoked when the promise is resolved or rejected
  belongs_to: promise/Promise
  description: |-
    ### `always` `(callbackOrErrback)`

    Defined by [dojo/promise/Promise](promise)

    Add a callback to be invoked when the promise is resolved or rejected.

    [TABLE]

    **Returns:** [dojo/promise/Promise](promise) \| undefined

    Returns a new promise for the result of the callback/errback.
- name: promise/Promise#cancel()
  id: dojo/promise/promise#1_10dojo_promise_Promise_cancel
  summary: Inform the deferred it may cancel its asynchronous operation
  belongs_to: promise/Promise
  description: |-
    ### `cancel` `(reason,strict)`

    Defined by [dojo/promise/Promise](promise)

    Inform the deferred it may cancel its asynchronous operation.

    Inform the deferred it may cancel its asynchronous operation. The deferred's (optional) canceler is invoked and the deferred will be left in a rejected state. Can affect other promises that originate with the same deferred.

    [TABLE]

    **Returns:** any

    Returns the rejection reason if the deferred was canceled normally.
- name: promise/Promise#isCanceled()
  id: dojo/promise/promise#1_10dojo_promise_Promise_isCanceled
  summary: Checks whether the promise has been canceled
  belongs_to: promise/Promise
  description: |-
    ### `isCanceled` `()`

    Defined by [dojo/promise/Promise](promise)

    Checks whether the promise has been canceled.

    **Returns:** Boolean
- name: promise/Promise#isFulfilled()
  id: dojo/promise/promise#1_10dojo_promise_Promise_isFulfilled
  summary: Checks whether the promise has been resolved or rejected
  belongs_to: promise/Promise
  description: |-
    ### `isFulfilled` `()`

    Defined by [dojo/promise/Promise](promise)

    Checks whether the promise has been resolved or rejected.

    **Returns:** Boolean
- name: promise/Promise#isRejected()
  id: dojo/promise/promise#1_10dojo_promise_Promise_isRejected
  summary: Checks whether the promise has been rejected
  belongs_to: promise/Promise
  description: |-
    ### `isRejected` `()`

    Defined by [dojo/promise/Promise](promise)

    Checks whether the promise has been rejected.

    **Returns:** Boolean
- name: promise/Promise#isResolved()
  id: dojo/promise/promise#1_10dojo_promise_Promise_isResolved
  summary: Checks whether the promise has been resolved
  belongs_to: promise/Promise
  description: |-
    ### `isResolved` `()`

    Defined by [dojo/promise/Promise](promise)

    Checks whether the promise has been resolved.

    **Returns:** Boolean
- name: promise/Promise#otherwise()
  id: dojo/promise/promise#1_10dojo_promise_Promise_otherwise
  summary: Add new errbacks to the promise
  belongs_to: promise/Promise
  description: |-
    ### `otherwise` `(errback)`

    Defined by [dojo/promise/Promise](promise)

    Add new errbacks to the promise.

    [TABLE]

    **Returns:** [dojo/promise/Promise](promise) \| undefined

    Returns a new promise for the result of the errback.
- name: promise/Promise#then()
  id: dojo/promise/promise#1_10dojo_promise_Promise_then
  summary: Add new callbacks to the promise
  belongs_to: promise/Promise
  description: |-
    ### `then` `(callback,errback,progback)`

    Defined by [dojo/promise/Promise](promise)

    Add new callbacks to the promise.

    Add new callbacks to the deferred. Callbacks can be added before or after the deferred is fulfilled.

    [TABLE]

    **Returns:** [dojo/promise/Promise](promise)

    Returns a new promise for the result of the callback(s). This can be used for chaining many asynchronous operations.
- name: promise/Promise#toString()
  id: dojo/promise/promise#1_10dojo_promise_Promise_toString
  summary: Returns [object Promise]
  belongs_to: promise/Promise
  description: |-
    ### `toString` `()`

    Defined by [dojo/promise/Promise](promise)

    **Returns:** string

    Returns `[object Promise]`.
- name: promise/Promise#trace()
  id: dojo/promise/promise#1_10dojo_promise_Promise_trace
  summary: Trace the promise
  belongs_to: promise/Promise
  description: |-
    ### `trace` `()`

    Defined by [dojo/promise/tracer](tracer)

    Trace the promise.

    Tracing allows you to transparently log progress, resolution and rejection of promises, without affecting the promise itself. Any arguments passed to `trace()` are emitted in trace events. See [dojo/promise/tracer](tracer) on how to handle traces.

    **Returns:** [dojo/promise/Promise](promise)

    The promise instance `trace()` is called on.
- name: promise/Promise#traceRejected()
  id: dojo/promise/promise#1_10dojo_promise_Promise_traceRejected
  summary: Trace rejection of the promise
  belongs_to: promise/Promise
  description: "### `traceRejected` `()`\n\nDefined by [dojo/promise/tracer](tracer)\n\nTrace rejection of the promise.\n\nTracing allows you to transparently log progress, resolution and rejection of promises, without affecting the promise itself. Any arguments passed to `trace()` are emitted in trace events. See [dojo/promise/tracer](tracer) on how to handle traces.\n\n**Returns:** [dojo/promise/Promise](promise)\n\nThe promise instance `traceRejected()` is called on.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/promise/Promise.html](http://dojotoolkit.org/api/1.10/dojo/promise/Promise.html)"
- name: promise/tracer
  id: dojo/promise/tracer
  summary: Trace promise fulfillment
  description: "# dojo/promise/tracer\n\n## Summary\n\nTrace promise fulfillment.\n\nTrace promise fulfillment. Calling `.trace()` or `.traceError()` on a promise enables tracing. Will emit `resolved`, `rejected` or `progress` events.\n\nSee the [dojo/promise/tracer reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/promise.html) for more information.\n\n## Methods\n\n### `on``(type,listener)`\n\nDefined by [dojo/promise/tracer](tracer)\n\nSubscribe to traces.\n\nSee [dojo/Evented](../evented)\\#on().\n\n|           |          |                                                                                                    |\n|-----------|----------|----------------------------------------------------------------------------------------------------|\n| Parameter | Type     | Description                                                                                        |\n| type      | String   | `resolved`, `rejected`, or `progress`                                                              |\n| listener  | Function | The listener is passed the traced value and any arguments that were used with the `.trace()` call. |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/promise/tracer.html](http://dojotoolkit.org/api/1.10/dojo/promise/tracer.html)"
- name: promise/tracer#on()
  id: dojo/promise/tracer#1_10dojo_promise_tracer_on
  summary: Subscribe to traces
  belongs_to: promise/tracer
  description: "### `on` `(type,listener)`\n\nDefined by [dojo/promise/tracer](tracer)\n\nSubscribe to traces.\n\nSee [dojo/Evented](../evented)\\#on().\n\n|           |          |                                                                                                    |\n|-----------|----------|----------------------------------------------------------------------------------------------------|\n| Parameter | Type     | Description                                                                                        |\n| type      | String   | `resolved`, `rejected`, or `progress`                                                              |\n| listener  | Function | The listener is passed the traced value and any arguments that were used with the `.trace()` call. |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/promise/tracer.html](http://dojotoolkit.org/api/1.10/dojo/promise/tracer.html)"
- name: query
  id: dojo/query
  summary: This modules provides DOM querying functionality
  description: "# dojo/query\n\n## Summary\n\nThis modules provides DOM querying functionality. The module export is a function that can be used to query for DOM nodes by CSS selector and returns a NodeList representing the matching nodes.\n\n[dojo/query](query) is responsible for loading the appropriate query engine and wrapping its results with a `NodeList`. You can use [dojo/query](query) with a specific selector engine by using it as a plugin. For example, if you installed the sizzle package, you could use it as the selector engine with:\n\n``` javascript\nrequire([\"dojo/query!sizzle\"], function(query){\n    query(\"div\")...\n```\n\nThe id after the ! can be a module id of the selector engine or one of the following values:\n\n- acme: This is the default engine used by Dojo base, and will ensure that the full Acme engine is always loaded.\n\n- css2: If the browser has a native selector engine, this will be used, otherwise a very minimal lightweight selector engine will be loaded that can do simple CSS2 selectors (by \\#id, .class, tag, and \\[name=value\\] attributes, with standard child or descendant (\\>) operators) and nothing more.\n\n- css2.1: If the browser has a native selector engine, this will be used, otherwise the full Acme engine will be loaded.\n\n- css3: If the browser has a native selector engine with support for CSS3 pseudo selectors (most modern browsers except IE8), this will be used, otherwise the full Acme engine will be loaded.\n\n- Or the module id of a selector engine can be used to explicitly choose the selector engine\n\nFor example, if you are using CSS3 pseudo selectors in module, you can specify that you will need support them with:\n\n``` javascript\nrequire([\"dojo/query!css3\"], function(query){\n    query('#t > h3:nth-child(odd)')...\n```\n\nYou can also choose the selector engine/load configuration by setting the query-selector: For example:\n\n``` markup\n<script data-dojo-config=\"query-selector:'css3'\" src=\"dojo.js\"></script>\n```\n\n## Usage\n\nquery`(selector,context);`\n\n[TABLE]\n\n**Returns:** instance\n\nSee the [dojo/query reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/query.html) for more information.\n\n## Examples\n\n### Example 1\n\nadd an onclick handler to every submit button in the document which causes the form to be sent via Ajax instead:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/request\", \"dojo/dom-form\", \"dojo/dom-construct\", \"dojo/dom-style\"\n], function(query, request, domForm, domConstruct, domStyle){\n    query(\"input[type='submit']\").on(\"click\", function(e){\n        e.preventDefault(); // prevent sending the form\n        var btn = e.target;\n        request.post(\"http://example.com/\", {\n            data: domForm.toObject(btn.form)\n        }).then(function(response){\n            // replace the form with the response\n            domConstruct.create(div, {innerHTML: response}, btn.form, \"after\");\n            domStyle.set(btn.form, \"display\", \"none\");\n        });\n    });\n});\n```\n\n## Methods\n\n### `load``(id,parentRequire,loaded)`\n\nDefined by [dojo/query](query)\n\ncan be used as AMD plugin to conditionally load new query engine\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| parentRequire | undefined |             |\n| loaded        | undefined |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/query!custom\"], function(qsa){\n    // loaded selector/custom.js as engine\n    qsa(\"#foobar\").forEach(...);\n});\n```\n\n### `NodeList``(array)`\n\nDefined by [dojo/query](query)\n\nArray-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo/query() calls.\n\nNodeList instances provide many utilities that reflect core Dojo APIs for Array iteration and manipulation, DOM manipulation, and event handling. Instead of needing to dig up functions in the dojo package, NodeLists generally make the full power of Dojo available for DOM manipulation tasks in a simple, chainable way.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| array     | undefined |             |\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\ncreate a node list from a node\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom\"\n], function(query, dom){\n    query.NodeList(dom.byId(\"foo\"));\n});\n```\n\n### Example 2\n\nget a NodeList from a CSS query and iterate on it\n\n``` javascript\nrequire([\"dojo/on\", \"dojo/dom\"\n], function(on, dom){\n    var l = query(\".thinger\");\n    l.forEach(function(node, index, nodeList){\n        console.log(index, node.innerHTML);\n    });\n});\n```\n\n### Example 3\n\nuse native and Dojo-provided array methods to manipulate a NodeList without needing to use dojo.\\* functions explicitly:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom-construct\", \"dojo/dom\"\n], function(query, domConstruct, dom){\n    var l = query(\".thinger\");\n    // since NodeLists are real arrays, they have a length\n    // property that is both readable and writable and\n    // push/pop/shift/unshift methods\n    console.log(l.length);\n    l.push(domConstruct.create(\"span\"));\n\n    // dojo's normalized array methods work too:\n    console.log( l.indexOf(dom.byId(\"foo\")) );\n    // ...including the special \"function as string\" shorthand\n    console.log( l.every(\"item.nodeType == 1\") );\n\n    // NodeLists can be [..] indexed, or you can use the at()\n    // function to get specific items wrapped in a new NodeList:\n    var node = l[3]; // the 4th element\n    var newList = l.at(1, 3); // the 2nd and 4th elements\n});\n```\n\n### Example 4\n\nchainability is a key advantage of NodeLists:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".thinger\")\n        .onclick(function(e){ /* ... */ })\n        .at(1, 3, 8) // get a subset\n            .style(\"padding\", \"5px\")\n            .forEach(console.log);\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/query.html](http://dojotoolkit.org/api/1.10/dojo/query.html)"
- name: query#load()
  id: dojo/query#1_10dojo_query_load
  summary: null
  belongs_to: query
  description: "### `load` `(id,parentRequire,loaded)`\n\nDefined by [dojo/query](query)\n\ncan be used as AMD plugin to conditionally load new query engine\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| parentRequire | undefined |             |\n| loaded        | undefined |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/query!custom\"], function(qsa){\n    // loaded selector/custom.js as engine\n    qsa(\"#foobar\").forEach(...);\n});\n    \n```"
- name: query#NodeList()
  id: dojo/query#1_10dojo_query_NodeList
  summary: Array-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation
  belongs_to: query
  description: "### `NodeList` `(array)`\n\nDefined by [dojo/query](query)\n\nArray-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo/query() calls.\n\nNodeList instances provide many utilities that reflect core Dojo APIs for Array iteration and manipulation, DOM manipulation, and event handling. Instead of needing to dig up functions in the dojo package, NodeLists generally make the full power of Dojo available for DOM manipulation tasks in a simple, chainable way.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| array     | undefined |             |\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\ncreate a node list from a node\n\n``` javascript\n      require([\"dojo/query\", \"dojo/dom\"\n], function(query, dom){\n    query.NodeList(dom.byId(\"foo\"));\n});\n    \n```\n\n### Example 2\n\nget a NodeList from a CSS query and iterate on it\n\n``` javascript\n      require([\"dojo/on\", \"dojo/dom\"\n], function(on, dom){\n    var l = query(\".thinger\");\n    l.forEach(function(node, index, nodeList){\n        console.log(index, node.innerHTML);\n    });\n});\n    \n```\n\n### Example 3\n\nuse native and Dojo-provided array methods to manipulate a NodeList without needing to use dojo.\\* functions explicitly:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/dom-construct\", \"dojo/dom\"\n], function(query, domConstruct, dom){\n    var l = query(\".thinger\");\n    // since NodeLists are real arrays, they have a length\n    // property that is both readable and writable and\n    // push/pop/shift/unshift methods\n    console.log(l.length);\n    l.push(domConstruct.create(\"span\"));\n\n    // dojo's normalized array methods work too:\n    console.log( l.indexOf(dom.byId(\"foo\")) );\n    // ...including the special \"function as string\" shorthand\n    console.log( l.every(\"item.nodeType == 1\") );\n\n    // NodeLists can be [..] indexed, or you can use the at()\n    // function to get specific items wrapped in a new NodeList:\n    var node = l[3]; // the 4th element\n    var newList = l.at(1, 3); // the 2nd and 4th elements\n});\n    \n```\n\n### Example 4\n\nchainability is a key advantage of NodeLists:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".thinger\")\n        .onclick(function(e){ /* ... */ })\n        .at(1, 3, 8) // get a subset\n            .style(\"padding\", \"5px\")\n            .forEach(console.log);\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/query.html](http://dojotoolkit.org/api/1.10/dojo/query.html)"
- name: ready
  id: dojo/ready
  summary: Add a function to execute on DOM content loaded and all requested modules have arrived and been evaluated
  description: "# dojo/ready\n\n## Summary\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n## Usage\n\nready`(priority,context,callback);`\n\n[TABLE]\n\nSee the [dojo/ready reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/ready.html) for more information.\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n```\n\n### Example 3\n\nUsing context\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n```\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/ready.html](http://dojotoolkit.org/api/1.10/dojo/ready.html)"
- name: regexp
  id: dojo/regexp
  summary: See the dojo/regexp reference documentation for more information
  description: "# dojo/regexp\n\n## Summary\n\nRegular expressions and Builder resources\n\nSee the [dojo/regexp reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/regexp.html) for more information.\n\n## Methods\n\n### `buildGroupRE``(arr,re,nonCapture)`\n\nDefined by [dojo/regexp](regexp)\n\nBuilds a regular expression that groups subexpressions\n\nA utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter. re builds one subexpression for each elem in the array a, in the first parameter. Returns a string for a regular expression that groups all the subexpressions.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `escapeString``(str,except)`\n\nDefined by [dojo/regexp](regexp)\n\nAdds escape sequences for special characters in regular expressions\n\n[TABLE]\n\n**Returns:** undefined\n\n### `group``(expression,nonCapture)`\n\nDefined by [dojo/regexp](regexp)\n\nadds group match to expression\n\n[TABLE]\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/regexp.html](http://dojotoolkit.org/api/1.10/dojo/regexp.html)"
- name: regexp#buildGroupRE()
  id: dojo/regexp#1_10dojo_regexp_buildGroupRE
  summary: A utility function used by some of the RE generators
  belongs_to: regexp
  description: |-
    ### `buildGroupRE` `(arr,re,nonCapture)`

    Defined by [dojo/regexp](regexp)

    Builds a regular expression that groups subexpressions

    A utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter. re builds one subexpression for each elem in the array a, in the first parameter. Returns a string for a regular expression that groups all the subexpressions.

    [TABLE]

    **Returns:** undefined
- name: regexp#escapeString()
  id: dojo/regexp#1_10dojo_regexp_escapeString
  summary: null
  belongs_to: regexp
  description: |-
    ### `escapeString` `(str,except)`

    Defined by [dojo/regexp](regexp)

    Adds escape sequences for special characters in regular expressions

    [TABLE]

    **Returns:** undefined
- name: regexp#group()
  id: dojo/regexp#1_10dojo_regexp_group
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: regexp
  description: "### `group` `(expression,nonCapture)`\n\nDefined by [dojo/regexp](regexp)\n\nadds group match to expression\n\n[TABLE]\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/regexp.html](http://dojotoolkit.org/api/1.10/dojo/regexp.html)"
- name: request
  id: dojo/request
  summary: Send a request using the default transport for the current platform
  description: "# dojo/request\n\n## Summary\n\nSend a request using the default transport for the current platform.\n\n## Usage\n\nrequest`(url,options);`\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](request.__promise)\n\nSee the [dojo/request reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Methods\n\n### `del``(url,options)`\n\nDefined by [dojo/request](request)\n\nSend an HTTP DELETE request using the default transport for the current platform.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](request.__promise)\n\n### `get``(url,options)`\n\nDefined by [dojo/request](request)\n\nSend an HTTP GET request using the default transport for the current platform.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](request.__promise)\n\n### `post``(url,options)`\n\nDefined by [dojo/request](request)\n\nSend an HTTP POST request using the default transport for the current platform.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](request.__promise) \\| undefined\n\n### `put``(url,options)`\n\nDefined by [dojo/request](request)\n\nSend an HTTP POST request using the default transport for the current platform.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request.html](http://dojotoolkit.org/api/1.10/dojo/request.html)"
- name: request#del()
  id: dojo/request#1_10dojo_request_del
  summary: Send an HTTP DELETE request using the default transport for the current platform
  belongs_to: request
  description: |-
    ### `del` `(url,options)`

    Defined by [dojo/request](request)

    Send an HTTP DELETE request using the default transport for the current platform.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](request.__promise)
- name: request#get()
  id: dojo/request#1_10dojo_request_get
  summary: Send an HTTP GET request using the default transport for the current platform
  belongs_to: request
  description: |-
    ### `get` `(url,options)`

    Defined by [dojo/request](request)

    Send an HTTP GET request using the default transport for the current platform.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](request.__promise)
- name: request#post()
  id: dojo/request#1_10dojo_request_post
  summary: Send an HTTP POST request using the default transport for the current platform
  belongs_to: request
  description: |-
    ### `post` `(url,options)`

    Defined by [dojo/request](request)

    Send an HTTP POST request using the default transport for the current platform.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](request.__promise) \| undefined
- name: request#put()
  id: dojo/request#1_10dojo_request_put
  summary: Send an HTTP POST request using the default transport for the current platform
  belongs_to: request
  description: "### `put` `(url,options)`\n\nDefined by [dojo/request](request)\n\nSend an HTTP POST request using the default transport for the current platform.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request.html](http://dojotoolkit.org/api/1.10/dojo/request.html)"
- name: request.__BaseOptions
  id: dojo/request.__baseoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request.\\_\\_BaseOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new request.__BaseOptions()`\n\n## Properties\n\n### data\n\nDefined by: [dojo/request](request)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### handleAs\n\nDefined by: [dojo/request](request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### preventCache\n\nDefined by: [dojo/request](request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request.\\_\\_BaseOptions.html](http://dojotoolkit.org/api/1.10/dojo/request.__BaseOptions.html)"
- name: request.__MethodOptions
  id: dojo/request.__methodoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request.\\_\\_MethodOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new request.__MethodOptions()`\n\n## Properties\n\n### method\n\nDefined by: [dojo/request](request)\n\nThe HTTP method to use to make the request. Must be uppercase.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request.\\_\\_MethodOptions.html](http://dojotoolkit.org/api/1.10/dojo/request.__MethodOptions.html)"
- name: request.__Options
  id: dojo/request.__options
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request.\\_\\_Options\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new request.__Options()`\n\n## Properties\n\n### data\n\nDefined by: [dojo/request](request)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### handleAs\n\nDefined by: [dojo/request](request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### method\n\nDefined by: [dojo/request](request)\n\nThe HTTP method to use to make the request. Must be uppercase.\n\n### preventCache\n\nDefined by: [dojo/request](request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request.\\_\\_Options.html](http://dojotoolkit.org/api/1.10/dojo/request.__Options.html)"
- name: request.__Promise
  id: dojo/request.__promise
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request.\\_\\_Promise\n\nExtends[dojo/promise/Promise](promise/promise)\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new request.__Promise()`\n\n## Usage\n\nvar foo = new request.\\_\\_Promise`();`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\n\\<\n\nThe public interface to a deferred. All promises in Dojo are instances of this class.\n\n\\>\n\nThe public interface to a deferred. All promises in Dojo are instances of this class.\n\n\\>\n\n## Properties\n\n### response\n\nDefined by: [dojo/request](request)\n\nA promise resolving to an object representing the response from the server.\n\n## Methods\n\n### `always``(callbackOrErrback)`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nAdd a callback to be invoked when the promise is resolved or rejected.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise) \\| undefined\n\nReturns a new promise for the result of the callback/errback.\n\n### `cancel``(reason,strict)`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nInform the deferred it may cancel its asynchronous operation.\n\nInform the deferred it may cancel its asynchronous operation. The deferred's (optional) canceler is invoked and the deferred will be left in a rejected state. Can affect other promises that originate with the same deferred.\n\n[TABLE]\n\n**Returns:** any\n\nReturns the rejection reason if the deferred was canceled normally.\n\n### `isCanceled``()`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nChecks whether the promise has been canceled.\n\n**Returns:** Boolean\n\n### `isFulfilled``()`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nChecks whether the promise has been resolved or rejected.\n\n**Returns:** Boolean\n\n### `isRejected``()`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nChecks whether the promise has been rejected.\n\n**Returns:** Boolean\n\n### `isResolved``()`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nChecks whether the promise has been resolved.\n\n**Returns:** Boolean\n\n### `otherwise``(errback)`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nAdd new errbacks to the promise.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise) \\| undefined\n\nReturns a new promise for the result of the errback.\n\n### `then``(callback,errback,progback)`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\nAdd new callbacks to the promise.\n\nAdd new callbacks to the deferred. Callbacks can be added before or after the deferred is fulfilled.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise)\n\nReturns a new promise for the result of the callback(s). This can be used for chaining many asynchronous operations.\n\n### `toString``()`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\n**Returns:** string\n\nReturns `[object Promise]`.\n\n### `trace``()`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\n**Returns:** function\n\n### `traceRejected``()`\n\nDefined by [dojo/promise/Promise](promise/promise)\n\n**Returns:** function\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request.\\_\\_Promise.html](http://dojotoolkit.org/api/1.10/dojo/request.__Promise.html)"
- name: request/default
  id: dojo/request/default
  summary: See the dojo/request/default reference documentation for more information
  description: "# dojo/request/default\n\nSee the [dojo/request/default reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/default.html) for more information.\n\n## Methods\n\n### `getPlatformDefaultId``()`\n\nDefined by [dojo/request/default](default)\n\n### `load``(id,parentRequire,loaded,config)`\n\nDefined by [dojo/request/default](default)\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| parentRequire | undefined |             |\n| loaded        | undefined |             |\n| config        | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/default.html](http://dojotoolkit.org/api/1.10/dojo/request/default.html)"
- name: request/default#getPlatformDefaultId()
  id: dojo/request/default#1_10dojo_request_default_getPlatformDefaultId
  summary: null
  belongs_to: request/default
  description: |-
    ### `getPlatformDefaultId` `()`

    Defined by [dojo/request/default](default)
- name: request/default#load()
  id: dojo/request/default#1_10dojo_request_default_load
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: request/default
  description: "### `load` `(id,parentRequire,loaded,config)`\n\nDefined by [dojo/request/default](default)\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| parentRequire | undefined |             |\n| loaded        | undefined |             |\n| config        | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/default.html](http://dojotoolkit.org/api/1.10/dojo/request/default.html)"
- name: request/handlers
  id: dojo/request/handlers
  summary: See the dojo/request/handlers reference documentation for more information
  description: "# dojo/request/handlers\n\n## Usage\n\nhandlers`(response);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| response  | undefined |             |\n\n**Returns:** undefined\n\nSee the [dojo/request/handlers reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/handlers.html) for more information.\n\n## Methods\n\n### `register``(name,handler)`\n\nDefined by [dojo/request/handlers](handlers)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| name      | undefined |             |\n| handler   | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/handlers.html](http://dojotoolkit.org/api/1.10/dojo/request/handlers.html)"
- name: request/handlers#register()
  id: dojo/request/handlers#1_10dojo_request_handlers_register
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: request/handlers
  description: "### `register` `(name,handler)`\n\nDefined by [dojo/request/handlers](handlers)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| name      | undefined |             |\n| handler   | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/handlers.html](http://dojotoolkit.org/api/1.10/dojo/request/handlers.html)"
- name: request/iframe
  id: dojo/request/iframe
  summary: Sends a request using an iframe element with the given URL and options
  description: "# dojo/request/iframe\n\n## Summary\n\nSends a request using an iframe element with the given URL and options.\n\n## Usage\n\niframe`(url,options);`\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\nSee the [dojo/request/iframe reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/iframe.html) for more information.\n\n## Properties\n\n## Methods\n\n### `create``(name,onloadstr,uri)`\n\nDefined by [dojo/request/iframe](iframe)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| name      | undefined |             |\n| onloadstr | undefined |             |\n| uri       | undefined |             |\n\n**Returns:** undefined\n\n### `doc``(iframeNode)`\n\nDefined by [dojo/request/iframe](iframe)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| iframeNode | undefined |             |\n\n**Returns:** undefined \\| null\n\n### `get``(url,options)`\n\nDefined by [dojo/request/iframe](iframe)\n\nSend an HTTP GET request using an iframe element with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `post``(url,options)`\n\nDefined by [dojo/request/iframe](iframe)\n\nSend an HTTP POST request using an iframe element with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `setSrc``(_iframe,src,replace)`\n\nDefined by [dojo/request/iframe](iframe)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| \\_iframe  | undefined |             |\n| src       | undefined |             |\n| replace   | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/iframe.html](http://dojotoolkit.org/api/1.10/dojo/request/iframe.html)"
- name: request/iframe#create()
  id: dojo/request/iframe#1_10dojo_request_iframe_create
  summary: null
  belongs_to: request/iframe
  description: |-
    ### `create` `(name,onloadstr,uri)`

    Defined by [dojo/request/iframe](iframe)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | name      | undefined |             |
    | onloadstr | undefined |             |
    | uri       | undefined |             |

    **Returns:** undefined
- name: request/iframe#doc()
  id: dojo/request/iframe#1_10dojo_request_iframe_doc
  summary: null
  belongs_to: request/iframe
  description: |-
    ### `doc` `(iframeNode)`

    Defined by [dojo/request/iframe](iframe)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | iframeNode | undefined |             |

    **Returns:** undefined \| null
- name: request/iframe#get()
  id: dojo/request/iframe#1_10dojo_request_iframe_get
  summary: Send an HTTP GET request using an iframe element with the given URL and options
  belongs_to: request/iframe
  description: |-
    ### `get` `(url,options)`

    Defined by [dojo/request/iframe](iframe)

    Send an HTTP GET request using an iframe element with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/iframe#post()
  id: dojo/request/iframe#1_10dojo_request_iframe_post
  summary: Send an HTTP POST request using an iframe element with the given URL and options
  belongs_to: request/iframe
  description: |-
    ### `post` `(url,options)`

    Defined by [dojo/request/iframe](iframe)

    Send an HTTP POST request using an iframe element with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/iframe#setSrc()
  id: dojo/request/iframe#1_10dojo_request_iframe_setSrc
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: request/iframe
  description: "### `setSrc` `(_iframe,src,replace)`\n\nDefined by [dojo/request/iframe](iframe)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| \\_iframe  | undefined |             |\n| src       | undefined |             |\n| replace   | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/iframe.html](http://dojotoolkit.org/api/1.10/dojo/request/iframe.html)"
- name: request/iframe.__BaseOptions
  id: dojo/request/iframe.__baseoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/iframe.\\_\\_BaseOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new iframe.__BaseOptions()`\n\nSee the [dojo/request/iframe.\\_\\_BaseOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### data\n\nDefined by: [dojo/request/iframe](iframe)\n\nData to transfer. When making a GET request, this will be converted to key=value parameters and appended to the URL.\n\n### form\n\nDefined by: [dojo/request/iframe](iframe)\n\nA form node to use to submit data to the server.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/iframe.\\_\\_BaseOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/iframe.__BaseOptions.html)"
- name: request/iframe.__MethodOptions
  id: dojo/request/iframe.__methodoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/iframe.\\_\\_MethodOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new iframe.__MethodOptions()`\n\nSee the [dojo/request/iframe.\\_\\_MethodOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### method\n\nDefined by: [dojo/request/iframe](iframe)\n\nThe HTTP method to use to make the request. Must be uppercase. Only `\"GET\"` and `\"POST\"` are accepted. Default is `\"POST\"`.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/iframe.\\_\\_MethodOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/iframe.__MethodOptions.html)"
- name: request/iframe.__Options
  id: dojo/request/iframe.__options
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/iframe.\\_\\_Options\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new iframe.__Options()`\n\nSee the [dojo/request/iframe.\\_\\_Options reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### data\n\nDefined by: [dojo/request/iframe](iframe)\n\nData to transfer. When making a GET request, this will be converted to key=value parameters and appended to the URL.\n\n### form\n\nDefined by: [dojo/request/iframe](iframe)\n\nA form node to use to submit data to the server.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### method\n\nDefined by: [dojo/request/iframe](iframe)\n\nThe HTTP method to use to make the request. Must be uppercase. Only `\"GET\"` and `\"POST\"` are accepted. Default is `\"POST\"`.\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/iframe.\\_\\_Options.html](http://dojotoolkit.org/api/1.10/dojo/request/iframe.__Options.html)"
- name: request/node
  id: dojo/request/node
  summary: Sends a request using the included http or https interface from node.js with the given URL and options
  description: "# dojo/request/node\n\n## Summary\n\nSends a request using the included http or https interface from node.js with the given URL and options.\n\n## Usage\n\nnode`(url,options);`\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\nSee the [dojo/request/node reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/node.html) for more information.\n\n## Methods\n\n### `del``(url,options)`\n\nDefined by [dojo/request/node](node)\n\nSend an HTTP DELETE request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `get``(url,options)`\n\nDefined by [dojo/request/node](node)\n\nSend an HTTP GET request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `post``(url,options)`\n\nDefined by [dojo/request/node](node)\n\nSend an HTTP POST request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `put``(url,options)`\n\nDefined by [dojo/request/node](node)\n\nSend an HTTP PUT request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/node.html](http://dojotoolkit.org/api/1.10/dojo/request/node.html)"
- name: request/node#del()
  id: dojo/request/node#1_10dojo_request_node_del
  summary: Send an HTTP DELETE request using XMLHttpRequest with the given URL and options
  belongs_to: request/node
  description: |-
    ### `del` `(url,options)`

    Defined by [dojo/request/node](node)

    Send an HTTP DELETE request using XMLHttpRequest with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/node#get()
  id: dojo/request/node#1_10dojo_request_node_get
  summary: Send an HTTP GET request using XMLHttpRequest with the given URL and options
  belongs_to: request/node
  description: |-
    ### `get` `(url,options)`

    Defined by [dojo/request/node](node)

    Send an HTTP GET request using XMLHttpRequest with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/node#post()
  id: dojo/request/node#1_10dojo_request_node_post
  summary: Send an HTTP POST request using XMLHttpRequest with the given URL and options
  belongs_to: request/node
  description: |-
    ### `post` `(url,options)`

    Defined by [dojo/request/node](node)

    Send an HTTP POST request using XMLHttpRequest with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/node#put()
  id: dojo/request/node#1_10dojo_request_node_put
  summary: Send an HTTP PUT request using XMLHttpRequest with the given URL and options
  belongs_to: request/node
  description: "### `put` `(url,options)`\n\nDefined by [dojo/request/node](node)\n\nSend an HTTP PUT request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/node.html](http://dojotoolkit.org/api/1.10/dojo/request/node.html)"
- name: request/node.__BaseOptions
  id: dojo/request/node.__baseoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/node.\\_\\_BaseOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new node.__BaseOptions()`\n\nSee the [dojo/request/node.\\_\\_BaseOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### data\n\nDefined by: [dojo/request/node](node)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### headers\n\nDefined by: [dojo/request/node](node)\n\nHeaders to use for the request.\n\n### password\n\nDefined by: [dojo/request/node](node)\n\nPassword to use during the request.\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n### user\n\nDefined by: [dojo/request/node](node)\n\nUsername to use during the request.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/node.\\_\\_BaseOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/node.__BaseOptions.html)"
- name: request/node.__MethodOptions
  id: dojo/request/node.__methodoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/node.\\_\\_MethodOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new node.__MethodOptions()`\n\nSee the [dojo/request/node.\\_\\_MethodOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### method\n\nDefined by: [dojo/request/node](node)\n\nThe HTTP method to use to make the request. Must be uppercase. Default is `\"GET\"`.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/node.\\_\\_MethodOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/node.__MethodOptions.html)"
- name: request/node.__Options
  id: dojo/request/node.__options
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/node.\\_\\_Options\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new node.__Options()`\n\nSee the [dojo/request/node.\\_\\_Options reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### data\n\nDefined by: [dojo/request/node](node)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### headers\n\nDefined by: [dojo/request/node](node)\n\nHeaders to use for the request.\n\n### method\n\nDefined by: [dojo/request/node](node)\n\nThe HTTP method to use to make the request. Must be uppercase. Default is `\"GET\"`.\n\n### password\n\nDefined by: [dojo/request/node](node)\n\nPassword to use during the request.\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n### user\n\nDefined by: [dojo/request/node](node)\n\nUsername to use during the request.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/node.\\_\\_Options.html](http://dojotoolkit.org/api/1.10/dojo/request/node.__Options.html)"
- name: request/notify
  id: dojo/request/notify
  summary: Register a listener to be notified when an event in dojo/request happens
  description: "# dojo/request/notify\n\n## Summary\n\nRegister a listener to be notified when an event in [dojo/request](../request) happens.\n\n## Usage\n\nnotify`(type,listener);`\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA signal object that can be used to cancel the listener. If remove() is called on this signal object, it will stop the listener from being executed.\n\nSee the [dojo/request/notify reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/notify.html) for more information.\n\n## Methods\n\n### `emit``(type,event,cancel)`\n\nDefined by [dojo/request/notify](notify)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n| cancel    | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/notify.html](http://dojotoolkit.org/api/1.10/dojo/request/notify.html)"
- name: request/notify#emit()
  id: dojo/request/notify#1_10dojo_request_notify_emit
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: request/notify
  description: "### `emit` `(type,event,cancel)`\n\nDefined by [dojo/request/notify](notify)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| type      | undefined |             |\n| event     | undefined |             |\n| cancel    | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/notify.html](http://dojotoolkit.org/api/1.10/dojo/request/notify.html)"
- name: request/registry
  id: dojo/request/registry
  summary: See the dojo/request/registry reference documentation for more information
  description: "# dojo/request/registry\n\n## Usage\n\nregistry`(url,options);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| url       | undefined |             |\n| options   | undefined |             |\n\n**Returns:** undefined\n\nSee the [dojo/request/registry reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/registry.html) for more information.\n\n## Methods\n\n### `load``(id,parentRequire,loaded,config)`\n\nDefined by [dojo/request/registry](registry)\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| parentRequire | undefined |             |\n| loaded        | undefined |             |\n| config        | undefined |             |\n\n### `register``(url,provider,first)`\n\nDefined by [dojo/request/registry](registry)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| url       | undefined |             |\n| provider  | undefined |             |\n| first     | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/registry.html](http://dojotoolkit.org/api/1.10/dojo/request/registry.html)"
- name: request/registry#load()
  id: dojo/request/registry#1_10dojo_request_registry_load
  summary: null
  belongs_to: request/registry
  description: |-
    ### `load` `(id,parentRequire,loaded,config)`

    Defined by [dojo/request/registry](registry)

    |               |           |             |
    |---------------|-----------|-------------|
    | Parameter     | Type      | Description |
    | id            | undefined |             |
    | parentRequire | undefined |             |
    | loaded        | undefined |             |
    | config        | undefined |             |
- name: request/registry#register()
  id: dojo/request/registry#1_10dojo_request_registry_register
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: request/registry
  description: "### `register` `(url,provider,first)`\n\nDefined by [dojo/request/registry](registry)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| url       | undefined |             |\n| provider  | undefined |             |\n| first     | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/registry.html](http://dojotoolkit.org/api/1.10/dojo/request/registry.html)"
- name: request/script
  id: dojo/request/script
  summary: Sends a request using a script element with the given URL and options
  description: "# dojo/request/script\n\n## Summary\n\nSends a request using a script element with the given URL and options.\n\n## Usage\n\nscript`(url,options);`\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\nSee the [dojo/request/script reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/script.html) for more information.\n\n## Properties\n\n## Methods\n\n### `get``(url,options)`\n\nDefined by [dojo/request/script](script)\n\nSend an HTTP GET request using a script element with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/script.html](http://dojotoolkit.org/api/1.10/dojo/request/script.html)"
- name: request/script#get()
  id: dojo/request/script#1_10dojo_request_script_get
  summary: Send an HTTP GET request using a script element with the given URL and options
  belongs_to: request/script
  description: "### `get` `(url,options)`\n\nDefined by [dojo/request/script](script)\n\nSend an HTTP GET request using a script element with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/script.html](http://dojotoolkit.org/api/1.10/dojo/request/script.html)"
- name: request/script.__BaseOptions
  id: dojo/request/script.__baseoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/script.\\_\\_BaseOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new script.__BaseOptions()`\n\nSee the [dojo/request/script.\\_\\_BaseOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### checkString\n\nDefined by: [dojo/request/script](script)\n\nA string of JavaScript that when evaluated like so: \"typeof(\" + checkString + \") != 'undefined'\" being true means that the script fetched has been loaded. Do not use this if doing a JSONP type of call (use `jsonp` instead).\n\n### data\n\nDefined by: [dojo/request](../request)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### frameDoc\n\nDefined by: [dojo/request/script](script)\n\nThe Document object of a child iframe. If this is passed in, the script will be attached to that document. This can be helpful in some comet long-polling scenarios with Firefox and Opera.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### jsonp\n\nDefined by: [dojo/request/script](script)\n\nThe URL parameter name that indicates the JSONP callback string. For instance, when using Yahoo JSONP calls it is normally, jsonp: \"callback\". For AOL JSONP calls it is normally jsonp: \"c\".\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/script.\\_\\_BaseOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/script.__BaseOptions.html)"
- name: request/script.__MethodOptions
  id: dojo/request/script.__methodoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/script.\\_\\_MethodOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new script.__MethodOptions()`\n\nSee the [dojo/request/script.\\_\\_MethodOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### method\n\nDefined by: [dojo/request/script](script)\n\nThis option is ignored. All requests using this transport are GET requests.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/script.\\_\\_MethodOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/script.__MethodOptions.html)"
- name: request/script.__Options
  id: dojo/request/script.__options
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/script.\\_\\_Options\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new script.__Options()`\n\nSee the [dojo/request/script.\\_\\_Options reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### checkString\n\nDefined by: [dojo/request/script](script)\n\nA string of JavaScript that when evaluated like so: \"typeof(\" + checkString + \") != 'undefined'\" being true means that the script fetched has been loaded. Do not use this if doing a JSONP type of call (use `jsonp` instead).\n\n### data\n\nDefined by: [dojo/request](../request)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### frameDoc\n\nDefined by: [dojo/request/script](script)\n\nThe Document object of a child iframe. If this is passed in, the script will be attached to that document. This can be helpful in some comet long-polling scenarios with Firefox and Opera.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### jsonp\n\nDefined by: [dojo/request/script](script)\n\nThe URL parameter name that indicates the JSONP callback string. For instance, when using Yahoo JSONP calls it is normally, jsonp: \"callback\". For AOL JSONP calls it is normally jsonp: \"c\".\n\n### method\n\nDefined by: [dojo/request/script](script)\n\nThis option is ignored. All requests using this transport are GET requests.\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/script.\\_\\_Options.html](http://dojotoolkit.org/api/1.10/dojo/request/script.__Options.html)"
- name: request/util
  id: dojo/request/util
  summary: See the dojo/request/util reference documentation for more information
  description: "# dojo/request/util\n\nSee the [dojo/request/util reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/util.html) for more information.\n\n## Methods\n\n### `addCommonMethods``(provider,methods)`\n\nDefined by [dojo/request/util](util)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| provider  | undefined |             |\n| methods   | undefined |             |\n\n### `checkStatus``(stat)`\n\nDefined by [dojo/request/util](util)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| stat      | undefined |             |\n\n**Returns:** boolean\n\n### `deepCopy``(target,source)`\n\nDefined by [dojo/request/util](util)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| target    | undefined |             |\n| source    | undefined |             |\n\n**Returns:** undefined\n\n### `deepCreate``(source,properties)`\n\nDefined by [dojo/request/util](util)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| source     | undefined |             |\n| properties | undefined |             |\n\n**Returns:** undefined\n\n### `deferred``(response,cancel,isValid,isReady,handleResponse,last)`\n\nDefined by [dojo/request/util](util)\n\n|                |           |                                                      |\n|----------------|-----------|------------------------------------------------------|\n| Parameter      | Type      | Description                                          |\n| response       | Object    | The object used as the value of the request promise. |\n| cancel         | undefined |                                                      |\n| isValid        | undefined |                                                      |\n| isReady        | undefined |                                                      |\n| handleResponse | undefined |                                                      |\n| last           | undefined |                                                      |\n\n**Returns:** instance\n\n### `notify``(type,listener)`\n\nDefined by [dojo/request/notify](notify)\n\nRegister a listener to be notified when an event in dojo/request happens.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA signal object that can be used to cancel the listener. If remove() is called on this signal object, it will stop the listener from being executed.\n\n### `parseArgs``(url,options,skipData)`\n\nDefined by [dojo/request/util](util)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| url       | undefined |             |\n| options   | undefined |             |\n| skipData  | undefined |             |\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/util.html](http://dojotoolkit.org/api/1.10/dojo/request/util.html)"
- name: request/util#addCommonMethods()
  id: dojo/request/util#1_10dojo_request_util_addCommonMethods
  summary: null
  belongs_to: request/util
  description: |-
    ### `addCommonMethods` `(provider,methods)`

    Defined by [dojo/request/util](util)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | provider  | undefined |             |
    | methods   | undefined |             |
- name: request/util#checkStatus()
  id: dojo/request/util#1_10dojo_request_util_checkStatus
  summary: null
  belongs_to: request/util
  description: |-
    ### `checkStatus` `(stat)`

    Defined by [dojo/request/util](util)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | stat      | undefined |             |

    **Returns:** boolean
- name: request/util#deepCopy()
  id: dojo/request/util#1_10dojo_request_util_deepCopy
  summary: null
  belongs_to: request/util
  description: |-
    ### `deepCopy` `(target,source)`

    Defined by [dojo/request/util](util)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | target    | undefined |             |
    | source    | undefined |             |

    **Returns:** undefined
- name: request/util#deepCreate()
  id: dojo/request/util#1_10dojo_request_util_deepCreate
  summary: null
  belongs_to: request/util
  description: |-
    ### `deepCreate` `(source,properties)`

    Defined by [dojo/request/util](util)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | source     | undefined |             |
    | properties | undefined |             |

    **Returns:** undefined
- name: request/util#deferred()
  id: dojo/request/util#1_10dojo_request_util_deferred
  summary: null
  belongs_to: request/util
  description: |-
    ### `deferred` `(response,cancel,isValid,isReady,handleResponse,last)`

    Defined by [dojo/request/util](util)

    |                |           |                                                      |
    |----------------|-----------|------------------------------------------------------|
    | Parameter      | Type      | Description                                          |
    | response       | Object    | The object used as the value of the request promise. |
    | cancel         | undefined |                                                      |
    | isValid        | undefined |                                                      |
    | isReady        | undefined |                                                      |
    | handleResponse | undefined |                                                      |
    | last           | undefined |                                                      |

    **Returns:** instance
- name: request/util#notify()
  id: dojo/request/util#1_10dojo_request_util_notify
  summary: Register a listener to be notified when an event in dojo/request happens
  belongs_to: request/util
  description: |-
    ### `notify` `(type,listener)`

    Defined by [dojo/request/notify](notify)

    Register a listener to be notified when an event in dojo/request happens.

    [TABLE]

    **Returns:** any \| undefined

    A signal object that can be used to cancel the listener. If remove() is called on this signal object, it will stop the listener from being executed.
- name: request/util#parseArgs()
  id: dojo/request/util#1_10dojo_request_util_parseArgs
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: request/util
  description: "### `parseArgs` `(url,options,skipData)`\n\nDefined by [dojo/request/util](util)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| url       | undefined |             |\n| options   | undefined |             |\n| skipData  | undefined |             |\n\n**Returns:** object\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/util.html](http://dojotoolkit.org/api/1.10/dojo/request/util.html)"
- name: request/watch
  id: dojo/request/watch
  summary: Watches the io request represented by dfd to see if it completes
  description: "# dojo/request/watch\n\n## Summary\n\nWatches the io request represented by dfd to see if it completes.\n\n## Usage\n\nwatch`(dfd);`\n\n|           |          |                               |\n|-----------|----------|-------------------------------|\n| Parameter | Type     | Description                   |\n| dfd       | Deferred | The Deferred object to watch. |\n\nSee the [dojo/request/watch reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/watch.html) for more information.\n\n## Properties\n\n### `ioCheck`\n\nDefined by: [dojo/request/watch](watch)\n\nFunction used to check if basic IO call worked. Gets the dfd object as its only argument.\n\n### `resHandle`\n\nDefined by: [dojo/request/watch](watch)\n\nFunction used to process response. Gets the dfd object as its only argument.\n\n### `validCheck`\n\nDefined by: [dojo/request/watch](watch)\n\nFunction used to check if the IO request is still valid. Gets the dfd object as its only argument.\n\n## Methods\n\n### `cancelAll``()`\n\nDefined by [dojo/request/watch](watch)\n\nCancels all pending IO requests, regardless of IO type\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/watch.html](http://dojotoolkit.org/api/1.10/dojo/request/watch.html)"
- name: request/watch#cancelAll()
  id: dojo/request/watch#1_10dojo_request_watch_cancelAll
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: request/watch
  description: "### `cancelAll` `()`\n\nDefined by [dojo/request/watch](watch)\n\nCancels all pending IO requests, regardless of IO type\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/watch.html](http://dojotoolkit.org/api/1.10/dojo/request/watch.html)"
- name: request/watch#ioCheck()
  id: dojo/request/watch#1_10dojo_request_watch_ioCheck
  summary: Function used to check if basic IO call worked
  belongs_to: request/watch
  description: |-
    ### `ioCheck`

    Defined by: [dojo/request/watch](watch)

    Function used to check if basic IO call worked. Gets the dfd object as its only argument.
- name: request/watch#resHandle()
  id: dojo/request/watch#1_10dojo_request_watch_resHandle
  summary: Function used to process response
  belongs_to: request/watch
  description: |-
    ### `resHandle`

    Defined by: [dojo/request/watch](watch)

    Function used to process response. Gets the dfd object as its only argument.
- name: request/watch#validCheck()
  id: dojo/request/watch#1_10dojo_request_watch_validCheck
  summary: Function used to check if the IO request is still valid
  belongs_to: request/watch
  description: |-
    ### `validCheck`

    Defined by: [dojo/request/watch](watch)

    Function used to check if the IO request is still valid. Gets the dfd object as its only argument.

    ## Methods
- name: request/xhr
  id: dojo/request/xhr
  summary: Sends a request using XMLHttpRequest with the given URL and options
  description: "# dojo/request/xhr\n\n## Summary\n\nSends a request using XMLHttpRequest with the given URL and options.\n\n## Usage\n\nxhr`(url,options);`\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\nSee the [dojo/request/xhr reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request/xhr.html) for more information.\n\n## Methods\n\n### `del``(url,options)`\n\nDefined by [dojo/request/xhr](xhr)\n\nSend an HTTP DELETE request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `get``(url,options)`\n\nDefined by [dojo/request/xhr](xhr)\n\nSend an HTTP GET request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `post``(url,options)`\n\nDefined by [dojo/request/xhr](xhr)\n\nSend an HTTP POST request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n### `put``(url,options)`\n\nDefined by [dojo/request/xhr](xhr)\n\nSend an HTTP PUT request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/xhr.html](http://dojotoolkit.org/api/1.10/dojo/request/xhr.html)"
- name: request/xhr#del()
  id: dojo/request/xhr#1_10dojo_request_xhr_del
  summary: Send an HTTP DELETE request using XMLHttpRequest with the given URL and options
  belongs_to: request/xhr
  description: |-
    ### `del` `(url,options)`

    Defined by [dojo/request/xhr](xhr)

    Send an HTTP DELETE request using XMLHttpRequest with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/xhr#get()
  id: dojo/request/xhr#1_10dojo_request_xhr_get
  summary: Send an HTTP GET request using XMLHttpRequest with the given URL and options
  belongs_to: request/xhr
  description: |-
    ### `get` `(url,options)`

    Defined by [dojo/request/xhr](xhr)

    Send an HTTP GET request using XMLHttpRequest with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/xhr#post()
  id: dojo/request/xhr#1_10dojo_request_xhr_post
  summary: Send an HTTP POST request using XMLHttpRequest with the given URL and options
  belongs_to: request/xhr
  description: |-
    ### `post` `(url,options)`

    Defined by [dojo/request/xhr](xhr)

    Send an HTTP POST request using XMLHttpRequest with the given URL and options.

    [TABLE]

    **Returns:** [dojo/request.\_\_Promise](../request.__promise)
- name: request/xhr#put()
  id: dojo/request/xhr#1_10dojo_request_xhr_put
  summary: Send an HTTP PUT request using XMLHttpRequest with the given URL and options
  belongs_to: request/xhr
  description: "### `put` `(url,options)`\n\nDefined by [dojo/request/xhr](xhr)\n\nSend an HTTP PUT request using XMLHttpRequest with the given URL and options.\n\n[TABLE]\n\n**Returns:** [dojo/request.\\_\\_Promise](../request.__promise)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/xhr.html](http://dojotoolkit.org/api/1.10/dojo/request/xhr.html)"
- name: request/xhr.__BaseOptions
  id: dojo/request/xhr.__baseoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/xhr.\\_\\_BaseOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new xhr.__BaseOptions()`\n\nSee the [dojo/request/xhr.\\_\\_BaseOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### data\n\nDefined by: [dojo/request/xhr](xhr)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### headers\n\nDefined by: [dojo/request/xhr](xhr)\n\nHeaders to use for the request.\n\n### password\n\nDefined by: [dojo/request/xhr](xhr)\n\nPassword to use during the request.\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### sync\n\nDefined by: [dojo/request/xhr](xhr)\n\nWhether to make a synchronous request or not. Default is `false` (asynchronous).\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n### user\n\nDefined by: [dojo/request/xhr](xhr)\n\nUsername to use during the request.\n\n### withCredentials\n\nDefined by: [dojo/request/xhr](xhr)\n\nFor cross-site requests, whether to send credentials or not.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/xhr.\\_\\_BaseOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/xhr.__BaseOptions.html)"
- name: request/xhr.__MethodOptions
  id: dojo/request/xhr.__methodoptions
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/xhr.\\_\\_MethodOptions\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new xhr.__MethodOptions()`\n\nSee the [dojo/request/xhr.\\_\\_MethodOptions reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### method\n\nDefined by: [dojo/request/xhr](xhr)\n\nThe HTTP method to use to make the request. Must be uppercase. Default is `\"GET\"`.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/xhr.\\_\\_MethodOptions.html](http://dojotoolkit.org/api/1.10/dojo/request/xhr.__MethodOptions.html)"
- name: request/xhr.__Options
  id: dojo/request/xhr.__options
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/request/xhr.\\_\\_Options\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new xhr.__Options()`\n\nSee the [dojo/request/xhr.\\_\\_Options reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/request.html) for more information.\n\n## Properties\n\n### data\n\nDefined by: [dojo/request/xhr](xhr)\n\nData to transfer. This is ignored for GET and DELETE requests.\n\n### handleAs\n\nDefined by: [dojo/request](../request)\n\nHow to handle the response from the server. Default is 'text'. Other values are 'json', 'javascript', and 'xml'.\n\n### headers\n\nDefined by: [dojo/request/xhr](xhr)\n\nHeaders to use for the request.\n\n### method\n\nDefined by: [dojo/request/xhr](xhr)\n\nThe HTTP method to use to make the request. Must be uppercase. Default is `\"GET\"`.\n\n### password\n\nDefined by: [dojo/request/xhr](xhr)\n\nPassword to use during the request.\n\n### preventCache\n\nDefined by: [dojo/request](../request)\n\nWhether to append a cache-busting parameter to the URL.\n\n### query\n\nDefined by: [dojo/request](../request)\n\nQuery parameters to append to the URL.\n\n### sync\n\nDefined by: [dojo/request/xhr](xhr)\n\nWhether to make a synchronous request or not. Default is `false` (asynchronous).\n\n### timeout\n\nDefined by: [dojo/request](../request)\n\nMilliseconds to wait for the response. If this time passes, the then the promise is rejected.\n\n### user\n\nDefined by: [dojo/request/xhr](xhr)\n\nUsername to use during the request.\n\n### withCredentials\n\nDefined by: [dojo/request/xhr](xhr)\n\nFor cross-site requests, whether to send credentials or not.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/request/xhr.\\_\\_Options.html](http://dojotoolkit.org/api/1.10/dojo/request/xhr.__Options.html)"
- name: require
  id: dojo/require
  summary: See the dojo/require reference documentation for more information
  description: "# dojo/require\n\nSee the [dojo/require reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/require.html) for more information.\n\n## Properties\n\n### dynamic\n\nDefined by: [dojo/require](require)\n\n### load\n\nDefined by: [dojo/require](require)\n\n## Methods\n\n### `normalize``(id)`\n\nDefined by [dojo/require](require)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/require.html](http://dojotoolkit.org/api/1.10/dojo/require.html)"
- name: require#load
  id: dojo/require#1_10dojo_require_load
  summary: null
  belongs_to: require
  description: |-
    ### load

    Defined by: [dojo/require](require)

    ## Methods
- name: require#normalize()
  id: dojo/require#1_10dojo_require_normalize
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: require
  description: "### `normalize` `(id)`\n\nDefined by [dojo/require](require)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/require.html](http://dojotoolkit.org/api/1.10/dojo/require.html)"
- name: robot
  id: dojo/robot
  summary: See the dojo/robot reference documentation for more information
  description: "# dojo/robot\n\nSee the [dojo/robot reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/robot.html) for more information.\n\n## Properties\n\n### doc\n\nDefined by: [dojo/robotx](robotx)\n\n### mouseWheelSize\n\nDefined by: [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n### window\n\nDefined by: [dojo/robotx](robotx)\n\n## Methods\n\n### `initRobot``(url)`\n\nDefined by [dojo/robotx](robotx)\n\nOpens the application at the specified URL for testing, redirecting dojo to point to the application environment instead of the test environment.\n\n|           |        |                                                                                                                                                                                |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                    |\n| url       | String | URL to open. Any of the test's dojo.doc calls (e.g. dojo.byId()), and any dijit.registry calls (e.g. dijit.byId()) will point to elements and widgets inside this application. |\n\n### `keyDown``(charOrCode,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nHolds down a single key, like SHIFT or 'a'.\n\nHolds down a single key, like SHIFT or 'a'.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto hold down the 'a' key immediately, call robot.keyDown('a')\n\n### `keyPress``(charOrCode,delay,modifiers,asynchronous)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nTypes a key combination, like SHIFT-TAB.\n\nTypes a key combination, like SHIFT-TAB.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto press shift-tab immediately, call robot.keyPress(dojo.keys.TAB, 0, {shift: true})\n\n### `keyUp``(charOrCode,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nReleases a single key, like SHIFT or 'a'.\n\nReleases a single key, like SHIFT or 'a'.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto release the 'a' key immediately, call robot.keyUp('a')\n\n### `killRobot``()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n### `mouseClick``(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nConvenience function to do a press/release. See robot.mousePress for more info.\n\nConvenience function to do a press/release. See robot.mousePress for more info.\n\n[TABLE]\n\n### `mouseMove``(x,y,delay,duration,absolute)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nMoves the mouse to the specified x,y offset relative to the viewport.\n\n[TABLE]\n\n### `mouseMoveAt``(node,delay,duration,offsetX,offsetY)`\n\nDefined by [dojo/robot](robot)\n\nMoves the mouse over the specified node at the specified relative x,y offset.\n\nMoves the mouse over the specified node at the specified relative x,y offset. If you do not specify an offset, mouseMove will default to move to the middle of the node. Example: to move the mouse over a ComboBox's down arrow node, call doh.mouseMoveAt(dijit.byId('setvaluetest').downArrowNode);\n\n[TABLE]\n\n### `mouseMoveTo``(point,delay,duration,absolute)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nMove the mouse from the current position to the specified point. Delays reading contents point until queued command starts running. See mouseMove() for details.\n\n[TABLE]\n\n### `mousePress``(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nPresses mouse buttons.\n\nPresses the mouse buttons you pass as true. Example: to press the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state.\n\n[TABLE]\n\n### `mouseRelease``(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nReleases mouse buttons.\n\nReleases the mouse buttons you pass as true. Example: to release the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state. See robot.mousePress for more info.\n\n[TABLE]\n\n### `mouseWheel``(wheelAmt,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nSpins the mouse wheel.\n\nSpins the wheel wheelAmt \"notches.\" Negative wheelAmt scrolls up/away from the user. Positive wheelAmt scrolls down/toward the user. Note: this will all happen in one event. Warning: the size of one mouse wheel notch is an OS setting. You can access this size from robot.mouseWheelSize\n\n[TABLE]\n\n### `scrollIntoView``(node,delay)`\n\nDefined by [dojo/robot](robot)\n\nScroll the passed node into view, if it is not.\n\n|           |                               |                                                                                                                                                                                                                                                                 |\n|-----------|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                          | Description                                                                                                                                                                                                                                                     |\n| node      | String \\| DOMNode \\| Function | The id of the node, or the node itself, to move the mouse to. If you pass an id or a function that returns a node, the node will not be evaluated until the movement executes. This is useful if you need to move the mouse to an node that is not yet present. |\n| delay     | Number, optional              | Delay, in milliseconds, to wait before firing. The delay is a delta with respect to the previous automation call.                                                                                                                                               |\n\n### `sequence``(f,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nDefer an action by adding it to the robot's incrementally delayed queue of actions to execute.\n\n[TABLE]\n\n### `setClipboard``(data,format)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nSet clipboard content.\n\nSet data as clipboard content, overriding anything already there. The data will be put to the clipboard using the given format.\n\n[TABLE]\n\n### `startRobot``()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n**Returns:** undefined\n\n### `typeKeys``(chars,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nrobot.typeKeys(\"dijit.ed\", 500);\n```\n\n### `waitForPageToLoad``(submitActions)`\n\nDefined by [dojo/robotx](robotx)\n\nNotifies DOH that the doh.robot is about to make a page change in the application it is driving, returning a doh.Deferred object the user should return in their runTest function as part of a DOH test.\n\n|               |          |                                                                                                                                                                                                                                                                                     |\n|---------------|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter     | Type     | Description                                                                                                                                                                                                                                                                         |\n| submitActions | Function | The doh.robot will execute the actions the test passes into the submitActions argument (like clicking the submit button), expecting these actions to create a page change (like a form submit). After these actions execute and the resulting page loads, the next test will start. |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\n``` javascript\nrunTest: function(){\n    return waitForPageLoad(function(){ doh.robot.keyPress(keys.ENTER, 500); });\n}\n```\n\n## Events\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/robot.html](http://dojotoolkit.org/api/1.10/dojo/robot.html)"
- name: robot#doc
  id: dojo/robot#1_10dojo_robot_doc
  summary: null
  belongs_to: robot
  description: |-
    ### doc

    Defined by: [dojo/robotx](robotx)

    ### mouseWheelSize

    Defined by: [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)
- name: robot#initRobot()
  id: dojo/robot#1_10dojo_robot_initRobot
  summary: Opens the application at the specified URL for testing, redirecting dojo to point to the application environment instead of the test environment
  belongs_to: robot
  description: |-
    ### `initRobot` `(url)`

    Defined by [dojo/robotx](robotx)

    Opens the application at the specified URL for testing, redirecting dojo to point to the application environment instead of the test environment.

    |           |        |                                                                                                                                                                                |
    |-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                                                                                                                    |
    | url       | String | URL to open. Any of the test's dojo.doc calls (e.g. dojo.byId()), and any dijit.registry calls (e.g. dijit.byId()) will point to elements and widgets inside this application. |

    ### `keyDown` `(charOrCode,delay)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Holds down a single key, like SHIFT or 'a'.

    Holds down a single key, like SHIFT or 'a'.

    [TABLE]

    ## Examples

    ### Example 1

    to hold down the 'a' key immediately, call robot.keyDown('a')

    ### `keyPress` `(charOrCode,delay,modifiers,asynchronous)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Types a key combination, like SHIFT-TAB.

    Types a key combination, like SHIFT-TAB.

    [TABLE]

    ## Examples

    ### Example 1

    to press shift-tab immediately, call robot.keyPress(dojo.keys.TAB, 0, {shift: true})

    ### `keyUp` `(charOrCode,delay)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Releases a single key, like SHIFT or 'a'.

    Releases a single key, like SHIFT or 'a'.

    [TABLE]

    ## Examples

    ### Example 1

    to release the 'a' key immediately, call robot.keyUp('a')

    ### `killRobot` `()`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    ### `mouseClick` `(buttons,delay)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Convenience function to do a press/release. See robot.mousePress for more info.

    Convenience function to do a press/release. See robot.mousePress for more info.

    [TABLE]

    ### `mouseMove` `(x,y,delay,duration,absolute)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Moves the mouse to the specified x,y offset relative to the viewport.

    [TABLE]
- name: robot#mouseMoveAt()
  id: dojo/robot#1_10dojo_robot_mouseMoveAt
  summary: Moves the mouse over the specified node at the specified relative x,y offset
  belongs_to: robot
  description: |-
    ### `mouseMoveAt` `(node,delay,duration,offsetX,offsetY)`

    Defined by [dojo/robot](robot)

    Moves the mouse over the specified node at the specified relative x,y offset.

    Moves the mouse over the specified node at the specified relative x,y offset. If you do not specify an offset, mouseMove will default to move to the middle of the node. Example: to move the mouse over a ComboBox's down arrow node, call doh.mouseMoveAt(dijit.byId('setvaluetest').downArrowNode);

    [TABLE]

    ### `mouseMoveTo` `(point,delay,duration,absolute)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Move the mouse from the current position to the specified point. Delays reading contents point until queued command starts running. See mouseMove() for details.

    [TABLE]

    ### `mousePress` `(buttons,delay)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Presses mouse buttons.

    Presses the mouse buttons you pass as true. Example: to press the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state.

    [TABLE]

    ### `mouseRelease` `(buttons,delay)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Releases mouse buttons.

    Releases the mouse buttons you pass as true. Example: to release the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state. See robot.mousePress for more info.

    [TABLE]

    ### `mouseWheel` `(wheelAmt,delay,duration)`

    Defined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)

    Spins the mouse wheel.

    Spins the wheel wheelAmt "notches." Negative wheelAmt scrolls up/away from the user. Positive wheelAmt scrolls down/toward the user. Note: this will all happen in one event. Warning: the size of one mouse wheel notch is an OS setting. You can access this size from robot.mouseWheelSize

    [TABLE]
- name: robot#scrollIntoView()
  id: dojo/robot#1_10dojo_robot_scrollIntoView
  summary: Scroll the passed node into view, if it is not
  belongs_to: robot
  description: "### `scrollIntoView` `(node,delay)`\n\nDefined by [dojo/robot](robot)\n\nScroll the passed node into view, if it is not.\n\n|           |                               |                                                                                                                                                                                                                                                                 |\n|-----------|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                          | Description                                                                                                                                                                                                                                                     |\n| node      | String \\| DOMNode \\| Function | The id of the node, or the node itself, to move the mouse to. If you pass an id or a function that returns a node, the node will not be evaluated until the movement executes. This is useful if you need to move the mouse to an node that is not yet present. |\n| delay     | Number, optional              | Delay, in milliseconds, to wait before firing. The delay is a delta with respect to the previous automation call.                                                                                                                                               |\n\n### `sequence` `(f,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nDefer an action by adding it to the robot's incrementally delayed queue of actions to execute.\n\n[TABLE]\n\n### `setClipboard` `(data,format)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nSet clipboard content.\n\nSet data as clipboard content, overriding anything already there. The data will be put to the clipboard using the given format.\n\n[TABLE]\n\n### `startRobot` `()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n**Returns:** undefined\n\n### `typeKeys` `(chars,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      robot.typeKeys(\"dijit.ed\", 500);\n    \n```"
- name: robot#waitForPageToLoad()
  id: dojo/robot#1_10dojo_robot_waitForPageToLoad
  summary: Notifies DOH that the doh.robot is about to make a page change in the application it is driving, returning a doh.Deferred object the user should return in their runTest function as part of a DOH test
  belongs_to: robot
  description: "### `waitForPageToLoad` `(submitActions)`\n\nDefined by [dojo/robotx](robotx)\n\nNotifies DOH that the doh.robot is about to make a page change in the application it is driving, returning a doh.Deferred object the user should return in their runTest function as part of a DOH test.\n\n|               |          |                                                                                                                                                                                                                                                                                     |\n|---------------|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter     | Type     | Description                                                                                                                                                                                                                                                                         |\n| submitActions | Function | The doh.robot will execute the actions the test passes into the submitActions argument (like clicking the submit button), expecting these actions to create a page change (like a form submit). After these actions execute and the resulting page loads, the next test will start. |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n      runTest: function(){\n    return waitForPageLoad(function(){ doh.robot.keyPress(keys.ENTER, 500); });\n}\n    \n```\n\n## Events\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/robot.html](http://dojotoolkit.org/api/1.10/dojo/robot.html)"
- name: robot#window
  id: dojo/robot#1_10dojo_robot_window
  summary: null
  belongs_to: robot
  description: |-
    ### window

    Defined by: [dojo/robotx](robotx)

    ## Methods
- name: robot._runsemaphore
  id: dojo/robot._runsemaphore
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/robot.\\_runsemaphore\n\n## Properties\n\n### lock\n\nDefined by: [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n## Methods\n\n### `unlock``()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n**Returns:** undefined \\| null\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/robot.\\_runsemaphore.html](http://dojotoolkit.org/api/1.10/dojo/robot._runsemaphore.html)"
- name: robotx
  id: dojo/robotx
  summary: See the dojo/robotx reference documentation for more information
  description: "# dojo/robotx\n\nSee the [dojo/robotx reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/robotx.html) for more information.\n\n## Properties\n\n### doc\n\nDefined by: [dojo/robotx](robotx)\n\n### mouseWheelSize\n\nDefined by: [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n### window\n\nDefined by: [dojo/robotx](robotx)\n\n## Methods\n\n### `initRobot``(url)`\n\nDefined by [dojo/robotx](robotx)\n\nOpens the application at the specified URL for testing, redirecting dojo to point to the application environment instead of the test environment.\n\n|           |        |                                                                                                                                                                                |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                    |\n| url       | String | URL to open. Any of the test's dojo.doc calls (e.g. dojo.byId()), and any dijit.registry calls (e.g. dijit.byId()) will point to elements and widgets inside this application. |\n\n### `keyDown``(charOrCode,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nHolds down a single key, like SHIFT or 'a'.\n\nHolds down a single key, like SHIFT or 'a'.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto hold down the 'a' key immediately, call robot.keyDown('a')\n\n### `keyPress``(charOrCode,delay,modifiers,asynchronous)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nTypes a key combination, like SHIFT-TAB.\n\nTypes a key combination, like SHIFT-TAB.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto press shift-tab immediately, call robot.keyPress(dojo.keys.TAB, 0, {shift: true})\n\n### `keyUp``(charOrCode,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nReleases a single key, like SHIFT or 'a'.\n\nReleases a single key, like SHIFT or 'a'.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto release the 'a' key immediately, call robot.keyUp('a')\n\n### `killRobot``()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n### `mouseClick``(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nConvenience function to do a press/release. See robot.mousePress for more info.\n\nConvenience function to do a press/release. See robot.mousePress for more info.\n\n[TABLE]\n\n### `mouseMove``(x,y,delay,duration,absolute)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nMoves the mouse to the specified x,y offset relative to the viewport.\n\n[TABLE]\n\n### `mouseMoveAt``(node,delay,duration,offsetX,offsetY)`\n\nDefined by [dojo/robot](robot)\n\nMoves the mouse over the specified node at the specified relative x,y offset.\n\nMoves the mouse over the specified node at the specified relative x,y offset. If you do not specify an offset, mouseMove will default to move to the middle of the node. Example: to move the mouse over a ComboBox's down arrow node, call doh.mouseMoveAt(dijit.byId('setvaluetest').downArrowNode);\n\n[TABLE]\n\n### `mouseMoveTo``(point,delay,duration,absolute)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nMove the mouse from the current position to the specified point. Delays reading contents point until queued command starts running. See mouseMove() for details.\n\n[TABLE]\n\n### `mousePress``(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nPresses mouse buttons.\n\nPresses the mouse buttons you pass as true. Example: to press the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state.\n\n[TABLE]\n\n### `mouseRelease``(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nReleases mouse buttons.\n\nReleases the mouse buttons you pass as true. Example: to release the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state. See robot.mousePress for more info.\n\n[TABLE]\n\n### `mouseWheel``(wheelAmt,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nSpins the mouse wheel.\n\nSpins the wheel wheelAmt \"notches.\" Negative wheelAmt scrolls up/away from the user. Positive wheelAmt scrolls down/toward the user. Note: this will all happen in one event. Warning: the size of one mouse wheel notch is an OS setting. You can access this size from robot.mouseWheelSize\n\n[TABLE]\n\n### `scrollIntoView``(node,delay)`\n\nDefined by [dojo/robot](robot)\n\nScroll the passed node into view, if it is not.\n\n|           |                               |                                                                                                                                                                                                                                                                 |\n|-----------|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                          | Description                                                                                                                                                                                                                                                     |\n| node      | String \\| DOMNode \\| Function | The id of the node, or the node itself, to move the mouse to. If you pass an id or a function that returns a node, the node will not be evaluated until the movement executes. This is useful if you need to move the mouse to an node that is not yet present. |\n| delay     | Number, optional              | Delay, in milliseconds, to wait before firing. The delay is a delta with respect to the previous automation call.                                                                                                                                               |\n\n### `sequence``(f,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nDefer an action by adding it to the robot's incrementally delayed queue of actions to execute.\n\n[TABLE]\n\n### `setClipboard``(data,format)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nSet clipboard content.\n\nSet data as clipboard content, overriding anything already there. The data will be put to the clipboard using the given format.\n\n[TABLE]\n\n### `startRobot``()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n**Returns:** undefined\n\n### `typeKeys``(chars,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nrobot.typeKeys(\"dijit.ed\", 500);\n```\n\n### `waitForPageToLoad``(submitActions)`\n\nDefined by [dojo/robotx](robotx)\n\nNotifies DOH that the doh.robot is about to make a page change in the application it is driving, returning a doh.Deferred object the user should return in their runTest function as part of a DOH test.\n\n|               |          |                                                                                                                                                                                                                                                                                     |\n|---------------|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter     | Type     | Description                                                                                                                                                                                                                                                                         |\n| submitActions | Function | The doh.robot will execute the actions the test passes into the submitActions argument (like clicking the submit button), expecting these actions to create a page change (like a form submit). After these actions execute and the resulting page loads, the next test will start. |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\n``` javascript\nrunTest: function(){\n    return waitForPageLoad(function(){ doh.robot.keyPress(keys.ENTER, 500); });\n}\n```\n\n## Events\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/robotx.html](http://dojotoolkit.org/api/1.10/dojo/robotx.html)"
- name: robotx#doc
  id: dojo/robotx#1_10dojo_robotx_doc
  summary: null
  belongs_to: robotx
  description: |-
    ### doc

    Defined by: [dojo/robotx](robotx)

    ### mouseWheelSize

    Defined by: [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)
- name: robotx#initRobot()
  id: dojo/robotx#1_10dojo_robotx_initRobot
  summary: Opens the application at the specified URL for testing, redirecting dojo to point to the application environment instead of the test environment
  belongs_to: robotx
  description: "### `initRobot` `(url)`\n\nDefined by [dojo/robotx](robotx)\n\nOpens the application at the specified URL for testing, redirecting dojo to point to the application environment instead of the test environment.\n\n|           |        |                                                                                                                                                                                |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                    |\n| url       | String | URL to open. Any of the test's dojo.doc calls (e.g. dojo.byId()), and any dijit.registry calls (e.g. dijit.byId()) will point to elements and widgets inside this application. |\n\n### `keyDown` `(charOrCode,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nHolds down a single key, like SHIFT or 'a'.\n\nHolds down a single key, like SHIFT or 'a'.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto hold down the 'a' key immediately, call robot.keyDown('a')\n\n### `keyPress` `(charOrCode,delay,modifiers,asynchronous)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nTypes a key combination, like SHIFT-TAB.\n\nTypes a key combination, like SHIFT-TAB.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto press shift-tab immediately, call robot.keyPress(dojo.keys.TAB, 0, {shift: true})\n\n### `keyUp` `(charOrCode,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nReleases a single key, like SHIFT or 'a'.\n\nReleases a single key, like SHIFT or 'a'.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nto release the 'a' key immediately, call robot.keyUp('a')\n\n### `killRobot` `()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n### `mouseClick` `(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nConvenience function to do a press/release. See robot.mousePress for more info.\n\nConvenience function to do a press/release. See robot.mousePress for more info.\n\n[TABLE]\n\n### `mouseMove` `(x,y,delay,duration,absolute)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nMoves the mouse to the specified x,y offset relative to the viewport.\n\n[TABLE]\n\n### `mouseMoveAt` `(node,delay,duration,offsetX,offsetY)`\n\nDefined by [dojo/robot](robot)\n\nMoves the mouse over the specified node at the specified relative x,y offset.\n\nMoves the mouse over the specified node at the specified relative x,y offset. If you do not specify an offset, mouseMove will default to move to the middle of the node. Example: to move the mouse over a ComboBox's down arrow node, call doh.mouseMoveAt(dijit.byId('setvaluetest').downArrowNode);\n\n[TABLE]\n\n### `mouseMoveTo` `(point,delay,duration,absolute)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nMove the mouse from the current position to the specified point. Delays reading contents point until queued command starts running. See mouseMove() for details.\n\n[TABLE]\n\n### `mousePress` `(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nPresses mouse buttons.\n\nPresses the mouse buttons you pass as true. Example: to press the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state.\n\n[TABLE]\n\n### `mouseRelease` `(buttons,delay)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nReleases mouse buttons.\n\nReleases the mouse buttons you pass as true. Example: to release the left mouse button, pass {left: true}. Mouse buttons you don't specify keep their previous pressed state. See robot.mousePress for more info.\n\n[TABLE]\n\n### `mouseWheel` `(wheelAmt,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nSpins the mouse wheel.\n\nSpins the wheel wheelAmt \"notches.\" Negative wheelAmt scrolls up/away from the user. Positive wheelAmt scrolls down/toward the user. Note: this will all happen in one event. Warning: the size of one mouse wheel notch is an OS setting. You can access this size from robot.mouseWheelSize\n\n[TABLE]\n\n### `scrollIntoView` `(node,delay)`\n\nDefined by [dojo/robot](robot)\n\nScroll the passed node into view, if it is not.\n\n|           |                               |                                                                                                                                                                                                                                                                 |\n|-----------|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                          | Description                                                                                                                                                                                                                                                     |\n| node      | String \\| DOMNode \\| Function | The id of the node, or the node itself, to move the mouse to. If you pass an id or a function that returns a node, the node will not be evaluated until the movement executes. This is useful if you need to move the mouse to an node that is not yet present. |\n| delay     | Number, optional              | Delay, in milliseconds, to wait before firing. The delay is a delta with respect to the previous automation call.                                                                                                                                               |\n\n### `sequence` `(f,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nDefer an action by adding it to the robot's incrementally delayed queue of actions to execute.\n\n[TABLE]\n\n### `setClipboard` `(data,format)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nSet clipboard content.\n\nSet data as clipboard content, overriding anything already there. The data will be put to the clipboard using the given format.\n\n[TABLE]\n\n### `startRobot` `()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n**Returns:** undefined\n\n### `typeKeys` `(chars,delay,duration)`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\nTypes a string of characters in order, or types a dojo.keys.\\* constant.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      robot.typeKeys(\"dijit.ed\", 500);\n    \n```"
- name: robotx#waitForPageToLoad()
  id: dojo/robotx#1_10dojo_robotx_waitForPageToLoad
  summary: Notifies DOH that the doh.robot is about to make a page change in the application it is driving, returning a doh.Deferred object the user should return in their runTest function as part of a DOH test
  belongs_to: robotx
  description: "### `waitForPageToLoad` `(submitActions)`\n\nDefined by [dojo/robotx](robotx)\n\nNotifies DOH that the doh.robot is about to make a page change in the application it is driving, returning a doh.Deferred object the user should return in their runTest function as part of a DOH test.\n\n|               |          |                                                                                                                                                                                                                                                                                     |\n|---------------|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter     | Type     | Description                                                                                                                                                                                                                                                                         |\n| submitActions | Function | The doh.robot will execute the actions the test passes into the submitActions argument (like clicking the submit button), expecting these actions to create a page change (like a form submit). After these actions execute and the resulting page loads, the next test will start. |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n      runTest: function(){\n    return waitForPageLoad(function(){ doh.robot.keyPress(keys.ENTER, 500); });\n}\n    \n```\n\n## Events\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/robotx.html](http://dojotoolkit.org/api/1.10/dojo/robotx.html)"
- name: robotx#window
  id: dojo/robotx#1_10dojo_robotx_window
  summary: null
  belongs_to: robotx
  description: |-
    ### window

    Defined by: [dojo/robotx](robotx)

    ## Methods
- name: robotx._runsemaphore
  id: dojo/robotx._runsemaphore
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/robotx.\\_runsemaphore\n\n## Properties\n\n### lock\n\nDefined by: [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n## Methods\n\n### `unlock``()`\n\nDefined by [doh/robot](http://dojotoolkit.org/api/1.10/doh/robot)\n\n**Returns:** undefined \\| null\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/robotx.\\_runsemaphore.html](http://dojotoolkit.org/api/1.10/dojo/robotx._runsemaphore.html)"
- name: router
  id: dojo/router
  summary: A singleton-style instance of dojo/router/RouterBase
  description: "# dojo/router\n\n## Summary\n\nA singleton-style instance of [dojo/router/RouterBase](router/routerbase). See that module for specifics.\n\nSee the [dojo/router reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/router.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrouter.register(\"/widgets/:id\", function(evt){\n    // If \"/widgets/3\" was matched,\n    // evt.params.id === \"3\"\n    xhr.get({\n        url: \"/some/path/\" + evt.params.id,\n        load: function(data){\n            // ...\n        }\n    });\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/router.html](http://dojotoolkit.org/api/1.10/dojo/router.html)"
- name: router/RouterBase
  id: dojo/router/routerbase
  summary: A module that allows one to easily map hash-based structures into callbacks
  description: "# dojo/router/RouterBase\n\n## Summary\n\nA module that allows one to easily map hash-based structures into callbacks. The router module is a singleton, offering one central point for all registrations of this type.\n\n## Usage\n\nvar foo = new RouterBase`(kwArgs);`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| kwArgs    | undefined |             |\n\nSee the [dojo/router/RouterBase reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/router.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar router = new RouterBase({});\nrouter.register(\"/widgets/:id\", function(evt){\n    // If \"/widgets/3\" was matched,\n    // evt.params.id === \"3\"\n    xhr.get({\n        url: \"/some/path/\" + evt.params.id,\n        load: function(data){\n            // ...\n        }\n    });\n});\n```\n\n## Properties\n\n### globMatch\n\nDefined by: [dojo/router/RouterBase](routerbase)\n\n### globReplacement\n\nDefined by: [dojo/router/RouterBase](routerbase)\n\n### idMatch\n\nDefined by: [dojo/router/RouterBase](routerbase)\n\n### idReplacement\n\nDefined by: [dojo/router/RouterBase](routerbase)\n\n## Methods\n\n### `destroy``()`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\n### `go``(path,replace)`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\nA simple pass-through to make changing the hash easy, without having to require dojo/hash directly. It also synchronously fires off any routes that match.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| path      | undefined |             |\n| replace   | undefined |             |\n\n**Returns:** boolean \\| undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrouter.go(\"/foo/bar\");\n```\n\n### `register``(route,callback)`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\nRegisters a route to a handling callback\n\nGiven either a string or a regular expression, the router will monitor the page's hash and respond to changes that match the string or regex as provided.\n\nWhen provided a regex for the route:\n\n- Matching is performed, and the resulting capture groups are passed through to the callback as an array.\n\nWhen provided a string for the route:\n\n- The string is parsed as a URL-like structure, like \"/foo/bar\"\n- If any portions of that URL are prefixed with a colon (:), they will be parsed out and provided to the callback as properties of an object.\n- If the last piece of the URL-like structure is prefixed with a star (\\*) instead of a colon, it will be replaced in the resulting regex with a greedy (.+) match and anything remaining on the hash will be provided as a property on the object passed into the callback. Think of it like a basic means of globbing the end of a route.\n\n[TABLE]\n\n**Returns:** Object \\| undefined\n\nA plain JavaScript object to be used as a handle for either removing this specific callback's registration, as well as to add new callbacks with the same route initially used.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrouter.register(\"/foo/:bar/*baz\", function(object){\n    // If the hash was \"/foo/abc/def/ghi\",\n    // object.bar === \"abc\"\n    // object.baz === \"def/ghi\"\n});\n```\n\n### `registerBefore``(route,callback)`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\nRegisters a route to a handling callback, except before any previously registered callbacks\n\nMuch like the `register` method, `registerBefore` allows us to register route callbacks to happen before any previously registered callbacks. See the documentation for `register` for more details and examples.\n\n|           |                  |             |\n|-----------|------------------|-------------|\n| Parameter | Type             | Description |\n| route     | String \\| RegExp |             |\n| callback  | Function         |             |\n\n**Returns:** undefined\n\n### `startup``(defaultPath)`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\nThis method must be called to activate the router. Until startup is called, no hash changes will trigger route callbacks.\n\n|             |           |             |\n|-------------|-----------|-------------|\n| Parameter   | Type      | Description |\n| defaultPath | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/router/RouterBase.html](http://dojotoolkit.org/api/1.10/dojo/router/RouterBase.html)"
- name: router/RouterBase#destroy()
  id: dojo/router/routerbase#1_10dojo_router_RouterBase_destroy
  summary: null
  belongs_to: router/RouterBase
  description: |-
    ### `destroy` `()`

    Defined by [dojo/router/RouterBase](routerbase)
- name: router/RouterBase#go()
  id: dojo/router/routerbase#1_10dojo_router_RouterBase_go
  summary: A simple pass-through to make changing the hash easy, without having to require dojo/hash directly
  belongs_to: router/RouterBase
  description: "### `go` `(path,replace)`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\nA simple pass-through to make changing the hash easy, without having to require dojo/hash directly. It also synchronously fires off any routes that match.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| path      | undefined |             |\n| replace   | undefined |             |\n\n**Returns:** boolean \\| undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      router.go(\"/foo/bar\");\n    \n```"
- name: router/RouterBase#register()
  id: dojo/router/routerbase#1_10dojo_router_RouterBase_register
  summary: Given either a string or a regular expression, the router will monitor the page's hash and respond to changes that match the string or regex as provided
  belongs_to: router/RouterBase
  description: "### `register` `(route,callback)`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\nRegisters a route to a handling callback\n\nGiven either a string or a regular expression, the router will monitor the page's hash and respond to changes that match the string or regex as provided.\n\nWhen provided a regex for the route:\n\n- Matching is performed, and the resulting capture groups are passed through to the callback as an array.\n\nWhen provided a string for the route:\n\n- The string is parsed as a URL-like structure, like \"/foo/bar\"\n- If any portions of that URL are prefixed with a colon (:), they will be parsed out and provided to the callback as properties of an object.\n- If the last piece of the URL-like structure is prefixed with a star (\\*) instead of a colon, it will be replaced in the resulting regex with a greedy (.+) match and anything remaining on the hash will be provided as a property on the object passed into the callback. Think of it like a basic means of globbing the end of a route.\n\n[TABLE]\n\n**Returns:** Object \\| undefined\n\nA plain JavaScript object to be used as a handle for either removing this specific callback's registration, as well as to add new callbacks with the same route initially used.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      router.register(\"/foo/:bar/*baz\", function(object){\n    // If the hash was \"/foo/abc/def/ghi\",\n    // object.bar === \"abc\"\n    // object.baz === \"def/ghi\"\n});\n    \n```"
- name: router/RouterBase#registerBefore()
  id: dojo/router/routerbase#1_10dojo_router_RouterBase_registerBefore
  summary: Much like the register method, registerBefore allows us to register route callbacks to happen before any previously registered callbacks
  belongs_to: router/RouterBase
  description: |-
    ### `registerBefore` `(route,callback)`

    Defined by [dojo/router/RouterBase](routerbase)

    Registers a route to a handling callback, except before any previously registered callbacks

    Much like the `register` method, `registerBefore` allows us to register route callbacks to happen before any previously registered callbacks. See the documentation for `register` for more details and examples.

    |           |                  |             |
    |-----------|------------------|-------------|
    | Parameter | Type             | Description |
    | route     | String \| RegExp |             |
    | callback  | Function         |             |

    **Returns:** undefined
- name: router/RouterBase#startup()
  id: dojo/router/routerbase#1_10dojo_router_RouterBase_startup
  summary: This method must be called to activate the router
  belongs_to: router/RouterBase
  description: "### `startup` `(defaultPath)`\n\nDefined by [dojo/router/RouterBase](routerbase)\n\nThis method must be called to activate the router. Until startup is called, no hash changes will trigger route callbacks.\n\n|             |           |             |\n|-------------|-----------|-------------|\n| Parameter   | Type      | Description |\n| defaultPath | undefined |             |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/router/RouterBase.html](http://dojotoolkit.org/api/1.10/dojo/router/RouterBase.html)"
- name: rpc/JsonpService
  id: dojo/rpc/jsonpservice
  summary: Generic JSONP service
  description: "# dojo/rpc/JsonpService\n\nExtends[dojo/rpc/RpcService](rpcservice)\n\n## Summary\n\nGeneric JSONP service. Minimally extends RpcService to allow easy definition of nearly any JSONP style service. Example SMD files exist in dojox.data\n\n## Usage\n\nvar foo = new JsonpService`(args,requiredArgs);`\n\nDefined by [dojo/rpc/JsonpService](jsonpservice)\n\n|              |           |             |\n|--------------|-----------|-------------|\n| Parameter    | Type      | Description |\n| args         | undefined |             |\n| requiredArgs | undefined |             |\n\nSee the [dojo/rpc/JsonpService reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/rpc/JsonpService.html) for more information.\n\n## Properties\n\n### serviceUrl\n\nDefined by: [dojo/rpc/RpcService](rpcservice)\n\n### strictArgChecks\n\nDefined by: [dojo/rpc/JsonpService](jsonpservice)\n\n## Methods\n\n### `bind``(method,parameters,deferredRequestHandler,url)`\n\nDefined by [dojo/rpc/JsonpService](jsonpservice)\n\nJSONP bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.\n\n|                        |                                     |                                                 |\n|------------------------|-------------------------------------|-------------------------------------------------|\n| Parameter              | Type                                | Description                                     |\n| method                 | string                              | The name of the method we are calling           |\n| parameters             | [dojo/\\_base/array](../_base/array) | The parameters we are passing off to the method |\n| deferredRequestHandler | deferred                            | The Deferred object for this particular request |\n| url                    | undefined                           |                                                 |\n\n### `createRequest``(parameters)`\n\nDefined by [dojo/rpc/JsonpService](jsonpservice)\n\ncreate a JSONP req\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| parameters | undefined |             |\n\n**Returns:** object\n\n### `errorCallback``(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred errback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** function\n\n### `generateMethod``(method,parameters,url)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ngenerate the local bind methods for the remote object\n\n|            |                                     |                                          |\n|------------|-------------------------------------|------------------------------------------|\n| Parameter  | Type                                | Description                              |\n| method     | string                              | The name of the method we are generating |\n| parameters | [dojo/\\_base/array](../_base/array) | the array of parameters for this call.   |\n| url        | string                              | the service url for this call            |\n\n**Returns:** undefined\n\n### `parseResults``(obj)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\nparse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results\n\n|           |        |                                                       |\n|-----------|--------|-------------------------------------------------------|\n| Parameter | Type   | Description                                           |\n| obj       | Object | Object that is the return results from an rpc request |\n\n**Returns:** Object\n\nObject that is the return results from an rpc request\n\n### `processSmd``(object)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncallback method for receipt of a smd object. Parse the smd and generate functions based on the description\n\n|           |           |                                   |\n|-----------|-----------|-----------------------------------|\n| Parameter | Type      | Description                       |\n| object    | undefined | smd object defining this service. |\n\n### `resultCallback``(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred's callback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/rpc/JsonpService.html](http://dojotoolkit.org/api/1.10/dojo/rpc/JsonpService.html)"
- name: rpc/JsonpService#bind()
  id: dojo/rpc/jsonpservice#1_10dojo_rpc_JsonpService_bind
  summary: JSONP bind method
  belongs_to: rpc/JsonpService
  description: |-
    ### `bind` `(method,parameters,deferredRequestHandler,url)`

    Defined by [dojo/rpc/JsonpService](jsonpservice)

    JSONP bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.

    |                        |                                     |                                                 |
    |------------------------|-------------------------------------|-------------------------------------------------|
    | Parameter              | Type                                | Description                                     |
    | method                 | string                              | The name of the method we are calling           |
    | parameters             | [dojo/\_base/array](../_base/array) | The parameters we are passing off to the method |
    | deferredRequestHandler | deferred                            | The Deferred object for this particular request |
    | url                    | undefined                           |                                                 |
- name: rpc/JsonpService#createRequest()
  id: dojo/rpc/jsonpservice#1_10dojo_rpc_JsonpService_createRequest
  summary: parse the results coming back from an rpc request
  belongs_to: rpc/JsonpService
  description: "### `createRequest` `(parameters)`\n\nDefined by [dojo/rpc/JsonpService](jsonpservice)\n\ncreate a JSONP req\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| parameters | undefined |             |\n\n**Returns:** object\n\n### `errorCallback` `(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred errback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** function\n\n### `generateMethod` `(method,parameters,url)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ngenerate the local bind methods for the remote object\n\n|            |                                     |                                          |\n|------------|-------------------------------------|------------------------------------------|\n| Parameter  | Type                                | Description                              |\n| method     | string                              | The name of the method we are generating |\n| parameters | [dojo/\\_base/array](../_base/array) | the array of parameters for this call.   |\n| url        | string                              | the service url for this call            |\n\n**Returns:** undefined\n\n### `parseResults` `(obj)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\nparse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results\n\n|           |        |                                                       |\n|-----------|--------|-------------------------------------------------------|\n| Parameter | Type   | Description                                           |\n| obj       | Object | Object that is the return results from an rpc request |\n\n**Returns:** Object\n\nObject that is the return results from an rpc request\n\n### `processSmd` `(object)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncallback method for receipt of a smd object. Parse the smd and generate functions based on the description\n\n|           |           |                                   |\n|-----------|-----------|-----------------------------------|\n| Parameter | Type      | Description                       |\n| object    | undefined | smd object defining this service. |\n\n### `resultCallback` `(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred's callback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/rpc/JsonpService.html](http://dojotoolkit.org/api/1.10/dojo/rpc/JsonpService.html)"
- name: rpc/JsonService
  id: dojo/rpc/jsonservice
  summary: See the dojo/rpc/JsonService reference documentation for more information
  description: "# dojo/rpc/JsonService\n\nExtends[dojo/rpc/RpcService](rpcservice)\n\n## Summary\n\nTODOC\n\n## Usage\n\nvar foo = new JsonService`(args);`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\n|           |        ||\n|-----------|--------||\n| Parameter | Type   | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| args      | object | Takes a number of properties as kwArgs for defining the service. It also accepts a string. When passed a string, it is treated as a url from which it should synchronously retrieve an smd file. Otherwise it is a kwArgs object. It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the \\# of arguments provided in a call matches those defined in the smd. smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly. |\n\nSee the [dojo/rpc/JsonService reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/rpc/JsonService.html) for more information.\n\n## Properties\n\n### bustCache\n\nDefined by: [dojo/rpc/JsonService](jsonservice)\n\n### contentType\n\nDefined by: [dojo/rpc/JsonService](jsonservice)\n\n### lastSubmissionId\n\nDefined by: [dojo/rpc/JsonService](jsonservice)\n\n### serviceUrl\n\nDefined by: [dojo/rpc/RpcService](rpcservice)\n\n### strictArgChecks\n\nDefined by: [dojo/rpc/RpcService](rpcservice)\n\n## Methods\n\n### `bind``(method,parameters,deferredRequestHandler,url)`\n\nDefined by [dojo/rpc/JsonService](jsonservice)\n\nJSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.\n\n|                        |           |                                                 |\n|------------------------|-----------|-------------------------------------------------|\n| Parameter              | Type      | Description                                     |\n| method                 | string    | The name of the method we are calling           |\n| parameters             | array     | The parameters we are passing off to the method |\n| deferredRequestHandler | deferred  | The Deferred object for this particular request |\n| url                    | undefined |                                                 |\n\n### `callRemote``(method,params)`\n\nDefined by [dojo/rpc/JsonService](jsonservice)\n\ncall an arbitrary remote method without requiring it to be predefined with SMD\n\n|           |        |                                                 |\n|-----------|--------|-------------------------------------------------|\n| Parameter | Type   | Description                                     |\n| method    | string | the name of the remote method you want to call. |\n| params    | array  | array of parameters to pass to method           |\n\n**Returns:** instance\n\n### `createRequest``(method,params)`\n\nDefined by [dojo/rpc/JsonService](jsonservice)\n\ncreate a JSON-RPC envelope for the request\n\n|           |                                     |                                                        |\n|-----------|-------------------------------------|--------------------------------------------------------|\n| Parameter | Type                                | Description                                            |\n| method    | string                              | The name of the method we are creating the request for |\n| params    | [dojo/\\_base/array](../_base/array) | The array of parameters for this request;              |\n\n**Returns:** undefined\n\n### `errorCallback``(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred errback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** function\n\n### `generateMethod``(method,parameters,url)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ngenerate the local bind methods for the remote object\n\n|            |                                     |                                          |\n|------------|-------------------------------------|------------------------------------------|\n| Parameter  | Type                                | Description                              |\n| method     | string                              | The name of the method we are generating |\n| parameters | [dojo/\\_base/array](../_base/array) | the array of parameters for this call.   |\n| url        | string                              | the service url for this call            |\n\n**Returns:** undefined\n\n### `parseResults``(obj)`\n\nDefined by [dojo/rpc/JsonService](jsonservice)\n\nparse the result envelope and pass the results back to the callback function\n\n|           |        |                                                               |\n|-----------|--------|---------------------------------------------------------------|\n| Parameter | Type   | Description                                                   |\n| obj       | Object | Object containing envelope of data we receive from the server |\n\n**Returns:** undefined \\| Object\n\nObject containing envelope of data we receive from the server\n\n### `processSmd``(object)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncallback method for receipt of a smd object. Parse the smd and generate functions based on the description\n\n|           |           |                                   |\n|-----------|-----------|-----------------------------------|\n| Parameter | Type      | Description                       |\n| object    | undefined | smd object defining this service. |\n\n### `resultCallback``(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred's callback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/rpc/JsonService.html](http://dojotoolkit.org/api/1.10/dojo/rpc/JsonService.html)"
- name: rpc/JsonService#bind()
  id: dojo/rpc/jsonservice#1_10dojo_rpc_JsonService_bind
  summary: JSON-RPC bind method
  belongs_to: rpc/JsonService
  description: |-
    ### `bind` `(method,parameters,deferredRequestHandler,url)`

    Defined by [dojo/rpc/JsonService](jsonservice)

    JSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.

    |                        |           |                                                 |
    |------------------------|-----------|-------------------------------------------------|
    | Parameter              | Type      | Description                                     |
    | method                 | string    | The name of the method we are calling           |
    | parameters             | array     | The parameters we are passing off to the method |
    | deferredRequestHandler | deferred  | The Deferred object for this particular request |
    | url                    | undefined |                                                 |
- name: rpc/JsonService#callRemote()
  id: dojo/rpc/jsonservice#1_10dojo_rpc_JsonService_callRemote
  summary: null
  belongs_to: rpc/JsonService
  description: |-
    ### `callRemote` `(method,params)`

    Defined by [dojo/rpc/JsonService](jsonservice)

    call an arbitrary remote method without requiring it to be predefined with SMD

    |           |        |                                                 |
    |-----------|--------|-------------------------------------------------|
    | Parameter | Type   | Description                                     |
    | method    | string | the name of the remote method you want to call. |
    | params    | array  | array of parameters to pass to method           |

    **Returns:** instance
- name: rpc/JsonService#createRequest()
  id: dojo/rpc/jsonservice#1_10dojo_rpc_JsonService_createRequest
  summary: null
  belongs_to: rpc/JsonService
  description: |-
    ### `createRequest` `(method,params)`

    Defined by [dojo/rpc/JsonService](jsonservice)

    create a JSON-RPC envelope for the request

    |           |                                     |                                                        |
    |-----------|-------------------------------------|--------------------------------------------------------|
    | Parameter | Type                                | Description                                            |
    | method    | string                              | The name of the method we are creating the request for |
    | params    | [dojo/\_base/array](../_base/array) | The array of parameters for this request;              |

    **Returns:** undefined

    ### `errorCallback` `(deferredRequestHandler)`

    Defined by [dojo/rpc/RpcService](rpcservice)

    create callback that calls the Deferred errback method

    |                        |                                           |                                         |
    |------------------------|-------------------------------------------|-----------------------------------------|
    | Parameter              | Type                                      | Description                             |
    | deferredRequestHandler | [dojo/\_base/Deferred](../_base/deferred) | The deferred object handling a request. |

    **Returns:** function

    ### `generateMethod` `(method,parameters,url)`

    Defined by [dojo/rpc/RpcService](rpcservice)

    generate the local bind methods for the remote object

    |            |                                     |                                          |
    |------------|-------------------------------------|------------------------------------------|
    | Parameter  | Type                                | Description                              |
    | method     | string                              | The name of the method we are generating |
    | parameters | [dojo/\_base/array](../_base/array) | the array of parameters for this call.   |
    | url        | string                              | the service url for this call            |

    **Returns:** undefined
- name: rpc/JsonService#parseResults()
  id: dojo/rpc/jsonservice#1_10dojo_rpc_JsonService_parseResults
  summary: callback method for receipt of a smd object
  belongs_to: rpc/JsonService
  description: "### `parseResults` `(obj)`\n\nDefined by [dojo/rpc/JsonService](jsonservice)\n\nparse the result envelope and pass the results back to the callback function\n\n|           |        |                                                               |\n|-----------|--------|---------------------------------------------------------------|\n| Parameter | Type   | Description                                                   |\n| obj       | Object | Object containing envelope of data we receive from the server |\n\n**Returns:** undefined \\| Object\n\nObject containing envelope of data we receive from the server\n\n### `processSmd` `(object)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncallback method for receipt of a smd object. Parse the smd and generate functions based on the description\n\n|           |           |                                   |\n|-----------|-----------|-----------------------------------|\n| Parameter | Type      | Description                       |\n| object    | undefined | smd object defining this service. |\n\n### `resultCallback` `(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred's callback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/rpc/JsonService.html](http://dojotoolkit.org/api/1.10/dojo/rpc/JsonService.html)"
- name: rpc/RpcService
  id: dojo/rpc/rpcservice
  summary: See the dojo/rpc/RpcService reference documentation for more information
  description: "# dojo/rpc/RpcService\n\n## Summary\n\nTODOC\n\n## Usage\n\nvar foo = new RpcService`(args);`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\n|           |        ||\n|-----------|--------||\n| Parameter | Type   | Description|\n| args      | object | Takes a number of properties as kwArgs for defining the service. It also accepts a string. When passed a string, it is treated as a url from which it should synchronously retrieve an smd file. Otherwise it is a kwArgs object. It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the \\# of arguments provided in a call matches those defined in the smd. smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly. |\n\nSee the [dojo/rpc/RpcService reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/rpc/RpcService.html) for more information.\n\n## Properties\n\n### serviceUrl\n\nDefined by: [dojo/rpc/RpcService](rpcservice)\n\n### strictArgChecks\n\nDefined by: [dojo/rpc/RpcService](rpcservice)\n\n## Methods\n\n### `errorCallback``(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred errback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** function\n\n### `generateMethod``(method,parameters,url)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ngenerate the local bind methods for the remote object\n\n|            |                                     |                                          |\n|------------|-------------------------------------|------------------------------------------|\n| Parameter  | Type                                | Description                              |\n| method     | string                              | The name of the method we are generating |\n| parameters | [dojo/\\_base/array](../_base/array) | the array of parameters for this call.   |\n| url        | string                              | the service url for this call            |\n\n**Returns:** undefined\n\n### `parseResults``(obj)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\nparse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results\n\n|           |        |                                                       |\n|-----------|--------|-------------------------------------------------------|\n| Parameter | Type   | Description                                           |\n| obj       | Object | Object that is the return results from an rpc request |\n\n**Returns:** Object\n\nObject that is the return results from an rpc request\n\n### `processSmd``(object)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncallback method for receipt of a smd object. Parse the smd and generate functions based on the description\n\n|           |           |                                   |\n|-----------|-----------|-----------------------------------|\n| Parameter | Type      | Description                       |\n| object    | undefined | smd object defining this service. |\n\n### `resultCallback``(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred's callback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/rpc/RpcService.html](http://dojotoolkit.org/api/1.10/dojo/rpc/RpcService.html)"
- name: rpc/RpcService#errorCallback()
  id: dojo/rpc/rpcservice#1_10dojo_rpc_RpcService_errorCallback
  summary: null
  belongs_to: rpc/RpcService
  description: |-
    ### `errorCallback` `(deferredRequestHandler)`

    Defined by [dojo/rpc/RpcService](rpcservice)

    create callback that calls the Deferred errback method

    |                        |                                           |                                         |
    |------------------------|-------------------------------------------|-----------------------------------------|
    | Parameter              | Type                                      | Description                             |
    | deferredRequestHandler | [dojo/\_base/Deferred](../_base/deferred) | The deferred object handling a request. |

    **Returns:** function
- name: rpc/RpcService#generateMethod()
  id: dojo/rpc/rpcservice#1_10dojo_rpc_RpcService_generateMethod
  summary: null
  belongs_to: rpc/RpcService
  description: |-
    ### `generateMethod` `(method,parameters,url)`

    Defined by [dojo/rpc/RpcService](rpcservice)

    generate the local bind methods for the remote object

    |            |                                     |                                          |
    |------------|-------------------------------------|------------------------------------------|
    | Parameter  | Type                                | Description                              |
    | method     | string                              | The name of the method we are generating |
    | parameters | [dojo/\_base/array](../_base/array) | the array of parameters for this call.   |
    | url        | string                              | the service url for this call            |

    **Returns:** undefined
- name: rpc/RpcService#parseResults()
  id: dojo/rpc/rpcservice#1_10dojo_rpc_RpcService_parseResults
  summary: parse the results coming back from an rpc request
  belongs_to: rpc/RpcService
  description: |-
    ### `parseResults` `(obj)`

    Defined by [dojo/rpc/RpcService](rpcservice)

    parse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results

    |           |        |                                                       |
    |-----------|--------|-------------------------------------------------------|
    | Parameter | Type   | Description                                           |
    | obj       | Object | Object that is the return results from an rpc request |

    **Returns:** Object

    Object that is the return results from an rpc request
- name: rpc/RpcService#processSmd()
  id: dojo/rpc/rpcservice#1_10dojo_rpc_RpcService_processSmd
  summary: callback method for receipt of a smd object
  belongs_to: rpc/RpcService
  description: |-
    ### `processSmd` `(object)`

    Defined by [dojo/rpc/RpcService](rpcservice)

    callback method for receipt of a smd object. Parse the smd and generate functions based on the description

    |           |           |                                   |
    |-----------|-----------|-----------------------------------|
    | Parameter | Type      | Description                       |
    | object    | undefined | smd object defining this service. |
- name: rpc/RpcService#resultCallback()
  id: dojo/rpc/rpcservice#1_10dojo_rpc_RpcService_resultCallback
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: rpc/RpcService
  description: "### `resultCallback` `(deferredRequestHandler)`\n\nDefined by [dojo/rpc/RpcService](rpcservice)\n\ncreate callback that calls the Deferred's callback method\n\n|                        |                                           |                                         |\n|------------------------|-------------------------------------------|-----------------------------------------|\n| Parameter              | Type                                      | Description                             |\n| deferredRequestHandler | [dojo/\\_base/Deferred](../_base/deferred) | The deferred object handling a request. |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/rpc/RpcService.html](http://dojotoolkit.org/api/1.10/dojo/rpc/RpcService.html)"
- name: selector/acme
  id: dojo/selector/acme
  summary: Returns nodes which match the given CSS3 selector, searching the entire document by default but optionally taking a node to scope the search by
  description: "# dojo/selector/acme\n\n## Summary\n\nReturns nodes which match the given CSS3 selector, searching the entire document by default but optionally taking a node to scope the search by. Returns an array.\n\ndojo.query() is the swiss army knife of DOM node manipulation in Dojo. Much like Prototype's \"$$\" (bling-bling) function or JQuery's \"$\" function, dojo.query provides robust, high-performance CSS-based node selector support with the option of scoping searches to a particular sub-tree of a document.\n\n## Supported Selectors:\n\nacme supports a rich set of CSS3 selectors, including:\n\n- class selectors (e.g., `.foo`)\n- node type selectors like `span`\n- descendant selectors\n- `>` child element selectors\n- `#foo` style ID selectors\n- `*` universal selector\n- `~`, the preceded-by sibling selector\n- `+`, the immediately preceded-by sibling selector\n- attribute queries:\n  - `[foo]` attribute presence selector\n  - `[foo='bar']` attribute value exact match\n  - `[foo~='bar']` attribute value list item match\n  - `[foo^='bar']` attribute start match\n  - `[foo$='bar']` attribute end match\n  - `[foo*='bar']` attribute substring match\n- `:first-child`, `:last-child`, and `:only-child` positional selectors\n- `:empty` content emtpy selector\n- `:checked` pseudo selector\n- `:nth-child(n)`, `:nth-child(2n+1)` style positional calculations\n- `:nth-child(even)`, `:nth-child(odd)` positional selectors\n- `:not(...)` negation pseudo selectors\n\nAny legal combination of these selectors will work with `dojo.query()`, including compound selectors (\",\" delimited). Very complex and useful searches can be constructed with this palette of selectors and when combined with functions for manipulation presented by [dojo/NodeList](../nodelist), many types of DOM manipulation operations become very straightforward.\n\n## Unsupported Selectors:\n\nWhile dojo.query handles many CSS3 selectors, some fall outside of what's reasonable for a programmatic node querying engine to handle. Currently unsupported selectors include:\n\n- namespace-differentiated selectors of any form\n- all `::` pseduo-element selectors\n- certain pseudo-selectors which don't get a lot of day-to-day use:\n  - `:root`, `:lang()`, `:target`, `:focus`\n- all visual and state selectors:\n  - `:root`, `:active`, `:hover`, `:visited`, `:link`,\n\n    ``` javascript\n    `:enabled`, `:disabled`\n    ```\n\n  - `:*-of-type` pseudo selectors\n\n## dojo.query and XML Documents:\n\n`dojo.query` (as of dojo 1.2) supports searching XML documents in a case-sensitive manner. If an HTML document is served with a doctype that forces case-sensitivity (e.g., XHTML 1.1 Strict), dojo.query() will detect this and \"do the right thing\". Case sensitivity is dependent upon the document being searched and not the query used. It is therefore possible to use case-sensitive queries on strict sub-documents (iframes, etc.) or XML documents while still assuming case-insensitivity for a host/root document.\n\n## Non-selector Queries:\n\nIf something other than a String is passed for the query, `dojo.query` will return a new [dojo/NodeList](../nodelist) instance constructed from that parameter alone and all further processing will stop. This means that if you have a reference to a node or NodeList, you can quickly construct a new NodeList from the original by calling `dojo.query(node)` or `dojo.query(list)`.\n\n## Usage\n\nacme`(query,root);`\n\n[TABLE]\n\n**Returns:** Array \\| undefined\n\nSee the [dojo/selector/acme reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/selector/acme.html) for more information.\n\n## Examples\n\n### Example 1\n\nsearch the entire document for elements with the class \"foo\":\n\n``` javascript\nrequire([\"dojo/query\"], function(query) {\n    query(\".foo\").forEach(function(q) { console.log(q); });\n});\n```\n\nthese elements will match:\n\n``` markup\n<span class=\"foo\"></span>\n<span class=\"foo bar\"></span>\n<p class=\"thud foo\"></p>\n```\n\n### Example 2\n\nsearch the entire document for elements with the classes \"foo\" *and* \"bar\":\n\n``` javascript\nrequire([\"dojo/query\"], function(query) {\n    query(\".foo.bar\").forEach(function(q) { console.log(q); });\n});\n```\n\n## Methods\n\n### `filter``(nodeList,filter,root)`\n\nDefined by [dojo/selector/acme](acme)\n\nfunction for filtering a NodeList based on a selector, optimized for simple selectors\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/selector/acme.html](http://dojotoolkit.org/api/1.10/dojo/selector/acme.html)"
- name: selector/acme#filter()
  id: dojo/selector/acme#1_10dojo_selector_acme_filter
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: selector/acme
  description: "### `filter` `(nodeList,filter,root)`\n\nDefined by [dojo/selector/acme](acme)\n\nfunction for filtering a NodeList based on a selector, optimized for simple selectors\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/selector/acme.html](http://dojotoolkit.org/api/1.10/dojo/selector/acme.html)"
- name: selector/lite
  id: dojo/selector/lite
  summary: See the dojo/selector/lite reference documentation for more information
  description: "# dojo/selector/lite\n\n## Summary\n\nA small lightweight query selector engine that implements CSS2.1 selectors minus pseudo-classes and the sibling combinator, plus CSS3 attribute selectors\n\n## Usage\n\nlite`(selector,root);`\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| selector  | undefined |             |\n| root      | undefined |             |\n\n**Returns:** undefined \\| Array\n\nSee the [dojo/selector/lite reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/selector/lite.html) for more information.\n\n## Properties\n\n### match\n\nDefined by: [dojo/selector/lite](lite)\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/selector/lite.html](http://dojotoolkit.org/api/1.10/dojo/selector/lite.html)"
- name: selector/lite#match
  id: dojo/selector/lite#1_10dojo_selector_lite_match
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: selector/lite
  description: "### match\n\nDefined by: [dojo/selector/lite](lite)\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/selector/lite.html](http://dojotoolkit.org/api/1.10/dojo/selector/lite.html)"
- name: selector/_loader
  id: dojo/selector/_loader
  summary: See the dojo/selector/_loader reference documentation for more information
  description: "# dojo/selector/\\_loader\n\n## Summary\n\nThis module handles loading the appropriate selector engine for the given browser\n\nSee the [dojo/selector/\\_loader reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/selector/_loader.html) for more information.\n\n## Methods\n\n### `load``(id,parentRequire,loaded,config)`\n\nDefined by [dojo/selector/\\_loader](_loader)\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| parentRequire | undefined |             |\n| loaded        | undefined |             |\n| config        | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/selector/\\_loader.html](http://dojotoolkit.org/api/1.10/dojo/selector/_loader.html)"
- name: selector/_loader#load()
  id: dojo/selector/_loader#1_10dojo_selector__loader_load
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: selector/_loader
  description: "### `load` `(id,parentRequire,loaded,config)`\n\nDefined by [dojo/selector/\\_loader](_loader)\n\n|               |           |             |\n|---------------|-----------|-------------|\n| Parameter     | Type      | Description |\n| id            | undefined |             |\n| parentRequire | undefined |             |\n| loaded        | undefined |             |\n| config        | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/selector/\\_loader.html](http://dojotoolkit.org/api/1.10/dojo/selector/_loader.html)"
- name: sniff
  id: dojo/sniff
  summary: This module sets has() flags based on the current browser
  description: "# dojo/sniff\n\n## Summary\n\nThis module sets has() flags based on the current browser. It returns the has() function.\n\n## Usage\n\nsniff`();`\n\nSee the [dojo/sniff reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/sniff.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/sniff.html](http://dojotoolkit.org/api/1.10/dojo/sniff.html)"
- name: Stateful
  id: dojo/stateful
  summary: The class also provides the functionality to auto-magically manage getters and setters for object attributes/properties
  description: "# dojo/Stateful\n\n## Summary\n\nBase class for objects that provide named properties with optional getter/setter control and the ability to watch for property changes\n\nThe class also provides the functionality to auto-magically manage getters and setters for object attributes/properties.\n\nGetters and Setters should follow the format of \\_xxxGetter or \\_xxxSetter where the xxx is a name of the attribute to handle. So an attribute of \"foo\" would have a custom getter of \\_fooGetter and a custom setter of \\_fooSetter.\n\nSee the [dojo/Stateful reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/Stateful.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var obj = new Stateful();\n    obj.watch(\"foo\", function(){\n        console.log(\"foo changed to \" + this.get(\"foo\"));\n    });\n    obj.set(\"foo\",\"bar\");\n});\n```\n\n## Properties\n\n## Methods\n\n### `get``(name)`\n\nDefined by [dojo/Stateful](stateful)\n\nGet a property on a Stateful instance.\n\nGet a named property on a Stateful object. The property may potentially be retrieved via a getter method in subclasses. In the base class this just retrieves the object's property.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| name      | String | The property to get. |\n\n**Returns:** any \\| undefined\n\nThe property value on this Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful({foo: 3});\n    stateful.get(\"foo\") // returns 3\n    stateful.foo // returns 3\n});\n```\n\n### `postscript``(params)`\n\nDefined by [dojo/Stateful](stateful)\n\n[TABLE]\n\n### `set``(name,value)`\n\nDefined by [dojo/Stateful](stateful)\n\nSet a property on a Stateful instance\n\nSets named properties on a stateful object and notifies any watchers of the property. A programmatic setter may be defined in subclasses.\n\n|           |        |                                   |\n|-----------|--------|-----------------------------------|\n| Parameter | Type   | Description                       |\n| name      | String | The property to set.              |\n| value     | Object | The value to set in the property. |\n\n**Returns:** any \\| function\n\nThe function returns this dojo.Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful();\n    stateful.watch(function(name, oldValue, value){\n        // this will be called on the set below\n    }\n    stateful.set(foo, 5);\n```\n\nset() may also be called with a hash of name/value pairs, ex:\n\n``` javascript\nstateful.set({\n    foo: \"Howdy\",\n    bar: 3\n});\n});\n```\n\nThis is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)\n\n### `watch``(name,callback)`\n\nDefined by [dojo/Stateful](stateful)\n\nWatches a property for changes\n\n[TABLE]\n\n**Returns:** any \\| object\n\nAn object handle for the watch. The unwatch method of this object can be used to discontinue watching this property:\n\n``` javascript\nvar watchHandle = obj.watch(\"foo\", callback);\nwatchHandle.unwatch(); // callback won't be called now\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/Stateful.html](http://dojotoolkit.org/api/1.10/dojo/Stateful.html)"
- name: Stateful#get()
  id: dojo/stateful#1_10dojo_Stateful_get
  summary: Get a property on a Stateful instance
  belongs_to: Stateful
  description: "### `get` `(name)`\n\nDefined by [dojo/Stateful](stateful)\n\nGet a property on a Stateful instance.\n\nGet a named property on a Stateful object. The property may potentially be retrieved via a getter method in subclasses. In the base class this just retrieves the object's property.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| name      | String | The property to get. |\n\n**Returns:** any \\| undefined\n\nThe property value on this Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful({foo: 3});\n    stateful.get(\"foo\") // returns 3\n    stateful.foo // returns 3\n});\n    \n```"
- name: Stateful#postscript()
  id: dojo/stateful#1_10dojo_Stateful_postscript
  summary: null
  belongs_to: Stateful
  description: |-
    ### `postscript` `(params)`

    Defined by [dojo/Stateful](stateful)

    [TABLE]
- name: Stateful#set()
  id: dojo/stateful#1_10dojo_Stateful_set
  summary: Sets named properties on a stateful object and notifies any watchers of the property
  belongs_to: Stateful
  description: "### `set` `(name,value)`\n\nDefined by [dojo/Stateful](stateful)\n\nSet a property on a Stateful instance\n\nSets named properties on a stateful object and notifies any watchers of the property. A programmatic setter may be defined in subclasses.\n\n|           |        |                                   |\n|-----------|--------|-----------------------------------|\n| Parameter | Type   | Description                       |\n| name      | String | The property to set.              |\n| value     | Object | The value to set in the property. |\n\n**Returns:** any \\| function\n\nThe function returns this dojo.Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful();\n    stateful.watch(function(name, oldValue, value){\n        // this will be called on the set below\n    }\n    stateful.set(foo, 5);\n    \n```\n\nset() may also be called with a hash of name/value pairs, ex:\n\n``` javascript\n      stateful.set({\n    foo: \"Howdy\",\n    bar: 3\n});\n});\n    \n```\n\nThis is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)"
- name: Stateful#watch()
  id: dojo/stateful#1_10dojo_Stateful_watch
  summary: An object handle for the watch
  belongs_to: Stateful
  description: "### `watch` `(name,callback)`\n\nDefined by [dojo/Stateful](stateful)\n\nWatches a property for changes\n\n[TABLE]\n\n**Returns:** any \\| object\n\nAn object handle for the watch. The unwatch method of this object can be used to discontinue watching this property:\n\n``` javascript\n      var watchHandle = obj.watch(\"foo\", callback);\nwatchHandle.unwatch(); // callback won't be called now\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/Stateful.html](http://dojotoolkit.org/api/1.10/dojo/Stateful.html)"
- name: store/api/Store
  id: dojo/store/api/store
  summary: This is an abstract API that data provider implementations conform to
  description: "# dojo/store/api/Store\n\n## Summary\n\nThis is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented. For more information on the , please visit: <http://dojotoolkit.org/reference-guide/dojo/store.html> Every method and property is optional, and is only needed if the functionality it provides is required. Every method may return a promise for the specified return value if the execution of the operation is asynchronous (except for query() which already defines an async return value).\n\n## Properties\n\n### idProperty\n\nDefined by: [dojo/store/api/Store](store)\n\nIf the store has a single primary key, this indicates the property to use as the identity property. The values of this property should be unique.\n\n### `queryEngine`\n\nDefined by: [dojo/store/api/Store](store)\n\nIf the store can be queried locally (on the client side in JS), this defines the query engine to use for querying the data store. This takes a query and query options and returns a function that can execute the provided query on a JavaScript array. The queryEngine may be replace to provide more sophisticated querying capabilities. For example:\n\n``` javascript\nvar query = store.queryEngine({foo:\"bar\"}, {count:10});\nquery(someArray) -> filtered array\n```\n\nThe returned query function may have a \"matches\" property that can be\n\nused to determine if an object matches the query. For example:\n\n``` javascript\nquery.matches({id:\"some-object\", foo:\"bar\"}) -> true\nquery.matches({id:\"some-object\", foo:\"something else\"}) -> false\n```\n\n## Methods\n\n### `add``(object,directives)`\n\nDefined by [dojo/store/api/Store](store)\n\nCreates an object, throws an error if the object already exists\n\n[TABLE]\n\n**Returns:** Number\\|String\n\n### `get``(id)`\n\nDefined by [dojo/store/api/Store](store)\n\nRetrieves an object by its identity\n\n|           |        |                                          |\n|-----------|--------|------------------------------------------|\n| Parameter | Type   | Description                              |\n| id        | Number | The identity to use to lookup the object |\n\n**Returns:** Object\n\nThe object in the store that matches the given id.\n\n### `getChildren``(parent,options)`\n\nDefined by [dojo/store/api/Store](store)\n\nRetrieves the children of an object.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](store.queryresults)\n\nA result set of the children of the parent object.\n\n### `getIdentity``(object)`\n\nDefined by [dojo/store/api/Store](store)\n\nReturns an object's identity\n\n|           |        |                                     |\n|-----------|--------|-------------------------------------|\n| Parameter | Type   | Description                         |\n| object    | Object | The object to get the identity from |\n\n**Returns:** String\\|Number\n\n### `getMetadata``(object)`\n\nDefined by [dojo/store/api/Store](store)\n\nReturns any metadata about the object. This may include attribution, cache directives, history, or version information.\n\n|           |        |                                    |\n|-----------|--------|------------------------------------|\n| Parameter | Type   | Description                        |\n| object    | Object | The object to return metadata for. |\n\n**Returns:** Object\n\nAn object containing metadata.\n\n### `put``(object,directives)`\n\nDefined by [dojo/store/api/Store](store)\n\nStores an object\n\n[TABLE]\n\n**Returns:** Number\\|String\n\n### `PutDirectives``()`\n\nDefined by [dojo/store/api/Store](store)\n\n### `query``(query,options)`\n\nDefined by [dojo/store/api/Store](store)\n\nQueries the store for objects. This does not alter the store, but returns a set of data from the store.\n\n|           |                                                         |                                                         |\n|-----------|---------------------------------------------------------|---------------------------------------------------------|\n| Parameter | Type                                                    | Description                                             |\n| query     | String \\| Object \\| Function                            | The query to use for retrieving objects from the store. |\n| options   | [dojo/store/api/Store.QueryOptions](store.queryoptions) | The optional arguments to apply to the resultset.       |\n\n**Returns:** [dojo/store/api/Store.QueryResults](store.queryresults)\n\nThe results of the query, extended with iterative methods.\n\n## Examples\n\n### Example 1\n\nGiven the following store:\n\n...find all items where \"prime\" is true:\n\n``` javascript\nstore.query({ prime: true }).forEach(function(object){\n    // handle each object\n});\n```\n\n### `QueryOptions``()`\n\nDefined by [dojo/store/api/Store](store)\n\n### `QueryResults``()`\n\nDefined by [dojo/store/api/Store](store)\n\n### `remove``(id)`\n\nDefined by [dojo/store/api/Store](store)\n\nDeletes an object by its identity\n\n|           |        |                                          |\n|-----------|--------|------------------------------------------|\n| Parameter | Type   | Description                              |\n| id        | Number | The identity to use to delete the object |\n\n### `SortInformation``()`\n\nDefined by [dojo/store/api/Store](store)\n\n### `transaction``()`\n\nDefined by [dojo/store/api/Store](store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](store.transaction)\n\nThis represents the new current transaction.\n\n### `Transaction``()`\n\nDefined by [dojo/store/api/Store](store)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/api/Store.html](http://dojotoolkit.org/api/1.10/dojo/store/api/Store.html)"
- name: store/api/Store#add()
  id: dojo/store/api/store#1_10dojo_store_api_Store_add
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `add` `(object,directives)`

    Defined by [dojo/store/api/Store](store)

    Creates an object, throws an error if the object already exists

    [TABLE]

    **Returns:** Number\|String
- name: store/api/Store#get()
  id: dojo/store/api/store#1_10dojo_store_api_Store_get
  summary: The object in the store that matches the given id
  belongs_to: store/api/Store
  description: |-
    ### `get` `(id)`

    Defined by [dojo/store/api/Store](store)

    Retrieves an object by its identity

    |           |        |                                          |
    |-----------|--------|------------------------------------------|
    | Parameter | Type   | Description                              |
    | id        | Number | The identity to use to lookup the object |

    **Returns:** Object

    The object in the store that matches the given id.
- name: store/api/Store#getChildren()
  id: dojo/store/api/store#1_10dojo_store_api_Store_getChildren
  summary: Retrieves the children of an object
  belongs_to: store/api/Store
  description: |-
    ### `getChildren` `(parent,options)`

    Defined by [dojo/store/api/Store](store)

    Retrieves the children of an object.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](store.queryresults)

    A result set of the children of the parent object.
- name: store/api/Store#getIdentity()
  id: dojo/store/api/store#1_10dojo_store_api_Store_getIdentity
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `getIdentity` `(object)`

    Defined by [dojo/store/api/Store](store)

    Returns an object's identity

    |           |        |                                     |
    |-----------|--------|-------------------------------------|
    | Parameter | Type   | Description                         |
    | object    | Object | The object to get the identity from |

    **Returns:** String\|Number
- name: store/api/Store#getMetadata()
  id: dojo/store/api/store#1_10dojo_store_api_Store_getMetadata
  summary: Returns any metadata about the object
  belongs_to: store/api/Store
  description: |-
    ### `getMetadata` `(object)`

    Defined by [dojo/store/api/Store](store)

    Returns any metadata about the object. This may include attribution, cache directives, history, or version information.

    |           |        |                                    |
    |-----------|--------|------------------------------------|
    | Parameter | Type   | Description                        |
    | object    | Object | The object to return metadata for. |

    **Returns:** Object

    An object containing metadata.
- name: store/api/Store#put()
  id: dojo/store/api/store#1_10dojo_store_api_Store_put
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `put` `(object,directives)`

    Defined by [dojo/store/api/Store](store)

    Stores an object

    [TABLE]

    **Returns:** Number\|String
- name: store/api/Store#PutDirectives()
  id: dojo/store/api/store#1_10dojo_store_api_Store_PutDirectives
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `PutDirectives` `()`

    Defined by [dojo/store/api/Store](store)
- name: store/api/Store#query()
  id: dojo/store/api/store#1_10dojo_store_api_Store_query
  summary: Queries the store for objects
  belongs_to: store/api/Store
  description: "### `query` `(query,options)`\n\nDefined by [dojo/store/api/Store](store)\n\nQueries the store for objects. This does not alter the store, but returns a set of data from the store.\n\n|           |                                                         |                                                         |\n|-----------|---------------------------------------------------------|---------------------------------------------------------|\n| Parameter | Type                                                    | Description                                             |\n| query     | String \\| Object \\| Function                            | The query to use for retrieving objects from the store. |\n| options   | [dojo/store/api/Store.QueryOptions](store.queryoptions) | The optional arguments to apply to the resultset.       |\n\n**Returns:** [dojo/store/api/Store.QueryResults](store.queryresults)\n\nThe results of the query, extended with iterative methods.\n\n## Examples\n\n### Example 1\n\nGiven the following store:\n\n...find all items where \"prime\" is true:\n\n``` javascript\n      store.query({ prime: true }).forEach(function(object){\n    // handle each object\n});\n    \n```"
- name: store/api/Store#queryEngine()
  id: dojo/store/api/store#1_10dojo_store_api_Store_queryEngine
  summary: If the store can be queried locally (on the client side in JS), this defines the query engine to use for querying the data store
  belongs_to: store/api/Store
  description: "### `queryEngine`\n\nDefined by: [dojo/store/api/Store](store)\n\nIf the store can be queried locally (on the client side in JS), this defines the query engine to use for querying the data store. This takes a query and query options and returns a function that can execute the provided query on a JavaScript array. The queryEngine may be replace to provide more sophisticated querying capabilities. For example:\n\n``` javascript\n        var query = store.queryEngine({foo:\"bar\"}, {count:10});\nquery(someArray) -> filtered array\n      \n```\n\nThe returned query function may have a \"matches\" property that can be\n\nused to determine if an object matches the query. For example:\n\n``` javascript\n        query.matches({id:\"some-object\", foo:\"bar\"}) -> true\nquery.matches({id:\"some-object\", foo:\"something else\"}) -> false\n      \n```\n\n## Methods"
- name: store/api/Store#QueryOptions()
  id: dojo/store/api/store#1_10dojo_store_api_Store_QueryOptions
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `QueryOptions` `()`

    Defined by [dojo/store/api/Store](store)
- name: store/api/Store#QueryResults()
  id: dojo/store/api/store#1_10dojo_store_api_Store_QueryResults
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `QueryResults` `()`

    Defined by [dojo/store/api/Store](store)
- name: store/api/Store#remove()
  id: dojo/store/api/store#1_10dojo_store_api_Store_remove
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `remove` `(id)`

    Defined by [dojo/store/api/Store](store)

    Deletes an object by its identity

    |           |        |                                          |
    |-----------|--------|------------------------------------------|
    | Parameter | Type   | Description                              |
    | id        | Number | The identity to use to delete the object |
- name: store/api/Store#SortInformation()
  id: dojo/store/api/store#1_10dojo_store_api_Store_SortInformation
  summary: null
  belongs_to: store/api/Store
  description: |-
    ### `SortInformation` `()`

    Defined by [dojo/store/api/Store](store)
- name: store/api/Store#Transaction()
  id: dojo/store/api/store#1_10dojo_store_api_Store_Transaction
  summary: Starts a new transaction
  belongs_to: store/api/Store
  description: |-
    ### `transaction` `()`

    Defined by [dojo/store/api/Store](store)

    Starts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as "auto-commit" style actions.

    **Returns:** [dojo/store/api/Store.Transaction](store.transaction)

    This represents the new current transaction.
- name: store/api/Store#transaction()
  id: dojo/store/api/store#1_10dojo_store_api_Store_transaction
  summary: Starts a new transaction
  belongs_to: store/api/Store
  description: |-
    ### `transaction` `()`

    Defined by [dojo/store/api/Store](store)

    Starts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as "auto-commit" style actions.

    **Returns:** [dojo/store/api/Store.Transaction](store.transaction)

    This represents the new current transaction.
- name: store/api/Store.PutDirectives
  id: dojo/store/api/store.putdirectives
  summary: Directives passed to put() and add() handlers for guiding the update and creation of stored objects
  description: "# dojo/store/api/Store.PutDirectives\n\n## Summary\n\nDirectives passed to put() and add() handlers for guiding the update and creation of stored objects.\n\n## Properties\n\n### before\n\nDefined by: [dojo/store/api/Store](store)\n\nIf the collection of objects in the store has a natural ordering, this indicates that the created or updated object should be placed before the object specified by the value of this property. A value of null indicates that the object should be last.\n\n### id\n\nDefined by: [dojo/store/api/Store](store)\n\nIndicates the identity of the object if a new object is created\n\n### overwrite\n\nDefined by: [dojo/store/api/Store](store)\n\nIf this is provided as a boolean it indicates that the object should or should not overwrite an existing object. A value of true indicates that a new object should not be created, the operation should update an existing object. A value of false indicates that an existing object should not be updated, a new object should be created (which is the same as an add() operation). When this property is not provided, either an update or creation is acceptable.\n\n### parent\n\nDefined by: [dojo/store/api/Store](store)\n\nIf the store is hierarchical (with single parenting) this property indicates the new parent of the created or updated object.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/api/Store.PutDirectives.html](http://dojotoolkit.org/api/1.10/dojo/store/api/Store.PutDirectives.html)"
- name: store/api/Store.QueryOptions
  id: dojo/store/api/store.queryoptions
  summary: Optional object with additional parameters for query results
  description: "# dojo/store/api/Store.QueryOptions\n\n## Summary\n\nOptional object with additional parameters for query results.\n\n## Properties\n\n### count\n\nDefined by: [dojo/store/api/Store](store)\n\nThe number of how many results should be returned.\n\n### sort\n\nDefined by: [dojo/store/api/Store](store)\n\nA list of attributes to sort on, as well as direction For example:\n\n``` javascript\n[{attribute:\"price, descending: true}].\n```\n\nIf the sort parameter is omitted, then the natural order of the store may be\n\napplied if there is a natural order.\n\n### start\n\nDefined by: [dojo/store/api/Store](store)\n\nThe first result to begin iteration on\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/api/Store.QueryOptions.html](http://dojotoolkit.org/api/1.10/dojo/store/api/Store.QueryOptions.html)"
- name: store/api/Store.QueryResults
  id: dojo/store/api/store.queryresults
  summary: This is an object returned from query() calls that provides access to the results of a query
  description: "# dojo/store/api/Store.QueryResults\n\n## Summary\n\nThis is an object returned from query() calls that provides access to the results of a query. Queries may be executed asynchronously.\n\n## Properties\n\n### total\n\nDefined by: [dojo/store/api/Store](store)\n\nThis property should be included in if the query options included the \"count\" property limiting the result set. This property indicates the total number of objects matching the query (as if \"start\" and \"count\" weren't present). This may be a promise if the query is asynchronous.\n\n## Methods\n\n### `filter``(callback,thisObject)`\n\nDefined by [dojo/store/api/Store](store)\n\nFilters the query results, based on <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter>. Note that this may executed asynchronously. The callback may be called after this function returns.\n\n|            |           |                                                              |\n|------------|-----------|--------------------------------------------------------------|\n| Parameter  | Type      | Description                                                  |\n| callback   | undefined | Function that is called for each object in the query results |\n| thisObject | undefined | The object to use as \\|this\\| in the callback.               |\n\n**Returns:** [dojo/store/api/Store.QueryResults](store.queryresults)\n\n### `forEach``(callback,thisObject)`\n\nDefined by [dojo/store/api/Store](store)\n\nIterates over the query results, based on <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach>. Note that this may executed asynchronously. The callback may be called after this function returns.\n\n|            |           |                                                              |\n|------------|-----------|--------------------------------------------------------------|\n| Parameter  | Type      | Description                                                  |\n| callback   | undefined | Function that is called for each object in the query results |\n| thisObject | undefined | The object to use as \\|this\\| in the callback.               |\n\n### `map``(callback,thisObject)`\n\nDefined by [dojo/store/api/Store](store)\n\nMaps the query results, based on <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map>. Note that this may executed asynchronously. The callback may be called after this function returns.\n\n|            |           |                                                              |\n|------------|-----------|--------------------------------------------------------------|\n| Parameter  | Type      | Description                                                  |\n| callback   | undefined | Function that is called for each object in the query results |\n| thisObject | undefined | The object to use as \\|this\\| in the callback.               |\n\n**Returns:** [dojo/store/api/Store.QueryResults](store.queryresults)\n\n### `observe``(listener,includeAllUpdates)`\n\nDefined by [dojo/store/api/Store](store)\n\nThis registers a callback for notification of when data is modified in the query results. This is an optional method, and is usually provided by dojo/store/Observable.\n\n[TABLE]\n\n### `then``(callback,errorHandler)`\n\nDefined by [dojo/store/api/Store](store)\n\nThis registers a callback for when the query is complete, if the query is asynchronous. This is an optional method, and may not be present for synchronous queries.\n\n|              |           |                                                                                                                                           |\n|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter    | Type      | Description                                                                                                                               |\n| callback     | undefined | This is called when the query is completed successfully, and is passed a single argument that is an array representing the query results. |\n| errorHandler | undefined | This is called if the query failed, and is passed a single argument that is the error for the failure.                                    |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/api/Store.QueryResults.html](http://dojotoolkit.org/api/1.10/dojo/store/api/Store.QueryResults.html)"
- name: store/api/Store.SortInformation
  id: dojo/store/api/store.sortinformation
  summary: An object describing what attribute to sort on, and the direction of the sort
  description: "# dojo/store/api/Store.SortInformation\n\n## Summary\n\nAn object describing what attribute to sort on, and the direction of the sort.\n\n## Properties\n\n### attribute\n\nDefined by: [dojo/store/api/Store](store)\n\nThe name of the attribute to sort on.\n\n### descending\n\nDefined by: [dojo/store/api/Store](store)\n\nThe direction of the sort. Default is false.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/api/Store.SortInformation.html](http://dojotoolkit.org/api/1.10/dojo/store/api/Store.SortInformation.html)"
- name: store/api/Store.Transaction
  id: dojo/store/api/store.transaction
  summary: This is an object returned from transaction() calls that represents the current transaction
  description: "# dojo/store/api/Store.Transaction\n\n## Summary\n\nThis is an object returned from transaction() calls that represents the current transaction.\n\n## Methods\n\n### `abort``(callback,thisObject)`\n\nDefined by [dojo/store/api/Store](store)\n\nAborts the transaction. This may throw an error if it fails. Of if the operation is asynchronous, it may return a promise that represents the eventual success or failure of the abort.\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| callback   | undefined |             |\n| thisObject | undefined |             |\n\n### `commit``()`\n\nDefined by [dojo/store/api/Store](store)\n\nCommits the transaction. This may throw an error if it fails. Of if the operation is asynchronous, it may return a promise that represents the eventual success or failure of the commit.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/api/Store.Transaction.html](http://dojotoolkit.org/api/1.10/dojo/store/api/Store.Transaction.html)"
- name: store/Cache
  id: dojo/store/cache
  summary: The Cache store wrapper takes a master store and a caching store, caches data from the master into the caching store for faster lookup
  description: "# dojo/store/Cache\n\nExtends[dojo/store/api/Store](api/store)\n\n## Summary\n\nThe Cache store wrapper takes a master store and a caching store, caches data from the master into the caching store for faster lookup. Normally one would use a memory store for the caching store and a server store like JsonRest for the master store.\n\n## Usage\n\nvar foo = new Cache`(masterStore,cachingStore,options);`\n\nDefined by [dojo/store/Cache](cache)\n\n[TABLE]\n\nSee the [dojo/store/Cache reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/store/Cache.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar master = new Memory(data);\nvar cacher = new Memory();\nvar store = new Cache(master, cacher);\n```\n\n## Properties\n\n### idProperty\n\nDefined by: [dojo/store/api/Store](api/store)\n\nIf the store has a single primary key, this indicates the property to use as the identity property. The values of this property should be unique.\n\n### `queryEngine`\n\nDefined by: [dojo/store/api/Store](api/store)\n\nIf the store can be queried locally (on the client side in JS), this defines the query engine to use for querying the data store. This takes a query and query options and returns a function that can execute the provided query on a JavaScript array. The queryEngine may be replace to provide more sophisticated querying capabilities. For example:\n\n``` javascript\nvar query = store.queryEngine({foo:\"bar\"}, {count:10});\nquery(someArray) -> filtered array\n```\n\nThe returned query function may have a \"matches\" property that can be\n\nused to determine if an object matches the query. For example:\n\n``` javascript\nquery.matches({id:\"some-object\", foo:\"bar\"}) -> true\nquery.matches({id:\"some-object\", foo:\"something else\"}) -> false\n```\n\n## Methods\n\n### `add``(object,directives)`\n\nDefined by [dojo/store/Cache](cache)\n\nAdd the given object to the store.\n\n[TABLE]\n\n**Returns:** Number\n\nThe new id for the object.\n\n### `evict``(id)`\n\nDefined by [dojo/store/Cache](cache)\n\nRemove the object with the given id from the underlying caching store.\n\n|           |        |                                            |\n|-----------|--------|--------------------------------------------|\n| Parameter | Type   | Description                                |\n| id        | Number | The identifier for the object in question. |\n\n### `get``(id,directives)`\n\nDefined by [dojo/store/Cache](cache)\n\nGet the object with the specific id.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)\n\nA QueryResults object.\n\n### `getChildren``(parent,options)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nRetrieves the children of an object.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)\n\nA result set of the children of the parent object.\n\n### `getIdentity``(object)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nReturns an object's identity\n\n|           |        |                                     |\n|-----------|--------|-------------------------------------|\n| Parameter | Type   | Description                         |\n| object    | Object | The object to get the identity from |\n\n**Returns:** String\\|Number\n\n### `getMetadata``(object)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nReturns any metadata about the object. This may include attribution, cache directives, history, or version information.\n\n|           |        |                                    |\n|-----------|--------|------------------------------------|\n| Parameter | Type   | Description                        |\n| object    | Object | The object to return metadata for. |\n\n**Returns:** Object\n\nAn object containing metadata.\n\n### `put``(object,directives)`\n\nDefined by [dojo/store/Cache](cache)\n\nPut the object into the store (similar to an HTTP PUT).\n\n[TABLE]\n\n**Returns:** Number\n\nThe new id for the object.\n\n### `query``(query,directives)`\n\nDefined by [dojo/store/Cache](cache)\n\nQuery the underlying master store and cache any results.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)\n\nA QueryResults object that can be used to iterate over.\n\n### `remove``(id)`\n\nDefined by [dojo/store/Cache](cache)\n\nRemove the object with the specific id.\n\n|           |        |                                            |\n|-----------|--------|--------------------------------------------|\n| Parameter | Type   | Description                                |\n| id        | Number | The identifier for the object in question. |\n\n### `transaction``()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/Cache.html](http://dojotoolkit.org/api/1.10/dojo/store/Cache.html)"
- name: store/Cache#add()
  id: dojo/store/cache#1_10dojo_store_Cache_add
  summary: Add the given object to the store
  belongs_to: store/Cache
  description: |-
    ### `add` `(object,directives)`

    Defined by [dojo/store/Cache](cache)

    Add the given object to the store.

    [TABLE]

    **Returns:** Number

    The new id for the object.
- name: store/Cache#evict()
  id: dojo/store/cache#1_10dojo_store_Cache_evict
  summary: Remove the object with the given id from the underlying caching store
  belongs_to: store/Cache
  description: |-
    ### `evict` `(id)`

    Defined by [dojo/store/Cache](cache)

    Remove the object with the given id from the underlying caching store.

    |           |        |                                            |
    |-----------|--------|--------------------------------------------|
    | Parameter | Type   | Description                                |
    | id        | Number | The identifier for the object in question. |
- name: store/Cache#get()
  id: dojo/store/cache#1_10dojo_store_Cache_get
  summary: Get the object with the specific id
  belongs_to: store/Cache
  description: |-
    ### `get` `(id,directives)`

    Defined by [dojo/store/Cache](cache)

    Get the object with the specific id.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)

    A QueryResults object.

    ### `getChildren` `(parent,options)`

    Defined by [dojo/store/api/Store](api/store)

    Retrieves the children of an object.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)

    A result set of the children of the parent object.

    ### `getIdentity` `(object)`

    Defined by [dojo/store/api/Store](api/store)

    Returns an object's identity

    |           |        |                                     |
    |-----------|--------|-------------------------------------|
    | Parameter | Type   | Description                         |
    | object    | Object | The object to get the identity from |

    **Returns:** String\|Number

    ### `getMetadata` `(object)`

    Defined by [dojo/store/api/Store](api/store)

    Returns any metadata about the object. This may include attribution, cache directives, history, or version information.

    |           |        |                                    |
    |-----------|--------|------------------------------------|
    | Parameter | Type   | Description                        |
    | object    | Object | The object to return metadata for. |

    **Returns:** Object

    An object containing metadata.
- name: store/Cache#put()
  id: dojo/store/cache#1_10dojo_store_Cache_put
  summary: Put the object into the store (similar to an HTTP PUT)
  belongs_to: store/Cache
  description: |-
    ### `put` `(object,directives)`

    Defined by [dojo/store/Cache](cache)

    Put the object into the store (similar to an HTTP PUT).

    [TABLE]

    **Returns:** Number

    The new id for the object.
- name: store/Cache#query()
  id: dojo/store/cache#1_10dojo_store_Cache_query
  summary: Query the underlying master store and cache any results
  belongs_to: store/Cache
  description: |-
    ### `query` `(query,directives)`

    Defined by [dojo/store/Cache](cache)

    Query the underlying master store and cache any results.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)

    A QueryResults object that can be used to iterate over.
- name: store/Cache#remove()
  id: dojo/store/cache#1_10dojo_store_Cache_remove
  summary: Remove the object with the specific id
  belongs_to: store/Cache
  description: "### `remove` `(id)`\n\nDefined by [dojo/store/Cache](cache)\n\nRemove the object with the specific id.\n\n|           |        |                                            |\n|-----------|--------|--------------------------------------------|\n| Parameter | Type   | Description                                |\n| id        | Number | The identifier for the object in question. |\n\n### `transaction` `()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/Cache.html](http://dojotoolkit.org/api/1.10/dojo/store/Cache.html)"
- name: store/DataStore
  id: dojo/store/datastore
  summary: This is an adapter for using Dojo Data stores with an object store consumer
  description: "# dojo/store/DataStore\n\nExtends[dojo/store/api/Store](api/store)\n\n## Summary\n\nThis is an adapter for using Dojo Data stores with an object store consumer. You can provide a Dojo data store and use this adapter to interact with it through the Dojo object store API\n\n## Usage\n\nvar foo = new DataStore`(options);`\n\nDefined by [dojo/store/DataStore](datastore)\n\n[TABLE]\n\nSee the [dojo/store/DataStore reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/store/DataStore.html) for more information.\n\n## Properties\n\n### idProperty\n\nDefined by: [dojo/store/DataStore](datastore)\n\nThe object property to use to store the identity of the store items.\n\n### store\n\nDefined by: [dojo/store/DataStore](datastore)\n\nThe object store to convert to a data store\n\n### target\n\nDefined by: [dojo/store/DataStore](datastore)\n\n## Methods\n\n### `add``(object,options)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nCreates an object, throws an error if the object already exists\n\n[TABLE]\n\n**Returns:** Number \\| undefined\n\n### `get``(id,options)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nRetrieves an object by it's identity. This will trigger a fetchItemByIdentity\n\n[TABLE]\n\n**Returns:** undefined\n\n### `getChildren``(parent,options)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nRetrieves the children of an object.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)\n\nA result set of the children of the parent object.\n\n### `getIdentity``(object)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nFetch the identity for the given object.\n\n|           |        |                                           |\n|-----------|--------|-------------------------------------------|\n| Parameter | Type   | Description                               |\n| object    | Object | The data object to get the identity from. |\n\n**Returns:** Number \\| undefined\n\nThe id of the given object.\n\n### `getMetadata``(object)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nReturns any metadata about the object. This may include attribution, cache directives, history, or version information.\n\n|           |        |                                    |\n|-----------|--------|------------------------------------|\n| Parameter | Type   | Description                        |\n| object    | Object | The object to return metadata for. |\n\n**Returns:** Object\n\nAn object containing metadata.\n\n### `put``(object,options)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nStores an object by its identity.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `query``(query,options)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nQueries the store for objects.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults) \\| undefined\n\nA query results object that can be used to iterate over results.\n\n### `queryEngine``(query,options)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nDefines the query engine to use for querying the data store\n\n[TABLE]\n\n**Returns:** Function \\| function\n\nA function that caches the passed query under the field \"matches\". See any of the \"query\" methods on dojo.stores.\n\n### `remove``(id)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nDeletes an object by its identity.\n\n|           |        |                                          |\n|-----------|--------|------------------------------------------|\n| Parameter | Type   | Description                              |\n| id        | Object | The identity to use to delete the object |\n\n**Returns:** undefined\n\n### `transaction``()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/DataStore.html](http://dojotoolkit.org/api/1.10/dojo/store/DataStore.html)"
- name: store/DataStore#add()
  id: dojo/store/datastore#1_10dojo_store_DataStore_add
  summary: null
  belongs_to: store/DataStore
  description: |-
    ### `add` `(object,options)`

    Defined by [dojo/store/DataStore](datastore)

    Creates an object, throws an error if the object already exists

    [TABLE]

    **Returns:** Number \| undefined
- name: store/DataStore#get()
  id: dojo/store/datastore#1_10dojo_store_DataStore_get
  summary: Retrieves an object by it's identity
  belongs_to: store/DataStore
  description: |-
    ### `get` `(id,options)`

    Defined by [dojo/store/DataStore](datastore)

    Retrieves an object by it's identity. This will trigger a fetchItemByIdentity

    [TABLE]

    **Returns:** undefined

    ### `getChildren` `(parent,options)`

    Defined by [dojo/store/api/Store](api/store)

    Retrieves the children of an object.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)

    A result set of the children of the parent object.
- name: store/DataStore#getIdentity()
  id: dojo/store/datastore#1_10dojo_store_DataStore_getIdentity
  summary: Fetch the identity for the given object
  belongs_to: store/DataStore
  description: |-
    ### `getIdentity` `(object)`

    Defined by [dojo/store/DataStore](datastore)

    Fetch the identity for the given object.

    |           |        |                                           |
    |-----------|--------|-------------------------------------------|
    | Parameter | Type   | Description                               |
    | object    | Object | The data object to get the identity from. |

    **Returns:** Number \| undefined

    The id of the given object.

    ### `getMetadata` `(object)`

    Defined by [dojo/store/api/Store](api/store)

    Returns any metadata about the object. This may include attribution, cache directives, history, or version information.

    |           |        |                                    |
    |-----------|--------|------------------------------------|
    | Parameter | Type   | Description                        |
    | object    | Object | The object to return metadata for. |

    **Returns:** Object

    An object containing metadata.
- name: store/DataStore#put()
  id: dojo/store/datastore#1_10dojo_store_DataStore_put
  summary: Stores an object by its identity
  belongs_to: store/DataStore
  description: |-
    ### `put` `(object,options)`

    Defined by [dojo/store/DataStore](datastore)

    Stores an object by its identity.

    [TABLE]

    **Returns:** undefined
- name: store/DataStore#query()
  id: dojo/store/datastore#1_10dojo_store_DataStore_query
  summary: Queries the store for objects
  belongs_to: store/DataStore
  description: |-
    ### `query` `(query,options)`

    Defined by [dojo/store/DataStore](datastore)

    Queries the store for objects.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults) \| undefined

    A query results object that can be used to iterate over results.
- name: store/DataStore#queryEngine()
  id: dojo/store/datastore#1_10dojo_store_DataStore_queryEngine
  summary: A function that caches the passed query under the field "matches". See any of the "query" methods on dojo.stores
  belongs_to: store/DataStore
  description: |-
    ### `queryEngine` `(query,options)`

    Defined by [dojo/store/DataStore](datastore)

    Defines the query engine to use for querying the data store

    [TABLE]

    **Returns:** Function \| function

    A function that caches the passed query under the field "matches". See any of the "query" methods on dojo.stores.
- name: store/DataStore#remove()
  id: dojo/store/datastore#1_10dojo_store_DataStore_remove
  summary: Deletes an object by its identity
  belongs_to: store/DataStore
  description: "### `remove` `(id)`\n\nDefined by [dojo/store/DataStore](datastore)\n\nDeletes an object by its identity.\n\n|           |        |                                          |\n|-----------|--------|------------------------------------------|\n| Parameter | Type   | Description                              |\n| id        | Object | The identity to use to delete the object |\n\n**Returns:** undefined\n\n### `transaction` `()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/DataStore.html](http://dojotoolkit.org/api/1.10/dojo/store/DataStore.html)"
- name: store/DataStore#store
  id: dojo/store/datastore#1_10dojo_store_DataStore_store
  summary: null
  belongs_to: store/DataStore
  description: |-
    ### store

    Defined by: [dojo/store/DataStore](datastore)

    The object store to convert to a data store

    ### target

    Defined by: [dojo/store/DataStore](datastore)

    ## Methods
- name: store/JsonRest
  id: dojo/store/jsonrest
  summary: This is a basic store for RESTful communicating with a server through JSON formatted data
  description: "# dojo/store/JsonRest\n\nExtends[dojo/store/api/Store](api/store)\n\n## Summary\n\nThis is a basic store for RESTful communicating with a server through JSON formatted data. It implements [dojo/store/api/Store](api/store).\n\n## Usage\n\nvar foo = new JsonRest`(options);`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\n|           |                                 |                                                                               |\n|-----------|---------------------------------|-------------------------------------------------------------------------------|\n| Parameter | Type                            | Description                                                                   |\n| options   | [dojo/store/JsonRest](jsonrest) | This provides any configuration information that will be mixed into the store |\n\nSee the [dojo/store/JsonRest reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/store/JsonRest.html) for more information.\n\n## Properties\n\n### accepts\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nDefines the Accept header to use on HTTP requests\n\n### ascendingPrefix\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nThe prefix to apply to sort attribute names that are ascending\n\n### descendingPrefix\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nThe prefix to apply to sort attribute names that are ascending\n\n### headers\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nAdditional headers to pass in all requests to the server. These can be overridden by passing additional headers to calls to the store.\n\n### idProperty\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nIndicates the property to use as the identity property. The values of this property should be unique.\n\n### `queryEngine`\n\nDefined by: [dojo/store/api/Store](api/store)\n\nIf the store can be queried locally (on the client side in JS), this defines the query engine to use for querying the data store. This takes a query and query options and returns a function that can execute the provided query on a JavaScript array. The queryEngine may be replace to provide more sophisticated querying capabilities. For example:\n\n``` javascript\nvar query = store.queryEngine({foo:\"bar\"}, {count:10});\nquery(someArray) -> filtered array\n```\n\nThe returned query function may have a \"matches\" property that can be\n\nused to determine if an object matches the query. For example:\n\n``` javascript\nquery.matches({id:\"some-object\", foo:\"bar\"}) -> true\nquery.matches({id:\"some-object\", foo:\"something else\"}) -> false\n```\n\n### target\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nThe target base URL to use for all requests to the server. This string will be prepended to the id to generate the URL (relative or absolute) for requests sent to the server\n\n## Methods\n\n### `add``(object,options)`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\nAdds an object. This will trigger a PUT request to the server if the object has an id, otherwise it will trigger a POST request.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `get``(id,options)`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\nRetrieves an object by its identity. This will trigger a GET request to the server using the url `this.target + id`.\n\n[TABLE]\n\n**Returns:** Object \\| undefined\n\nThe object in the store that matches the given id.\n\n### `getChildren``(parent,options)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nRetrieves the children of an object.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)\n\nA result set of the children of the parent object.\n\n### `getIdentity``(object)`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\nReturns an object's identity\n\n|           |        |                                     |\n|-----------|--------|-------------------------------------|\n| Parameter | Type   | Description                         |\n| object    | Object | The object to get the identity from |\n\n**Returns:** Number \\| undefined\n\n### `getMetadata``(object)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nReturns any metadata about the object. This may include attribution, cache directives, history, or version information.\n\n|           |        |                                    |\n|-----------|--------|------------------------------------|\n| Parameter | Type   | Description                        |\n| object    | Object | The object to return metadata for. |\n\n**Returns:** Object\n\nAn object containing metadata.\n\n### `put``(object,options)`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\nStores an object. This will trigger a PUT request to the server if the object has an id, otherwise it will trigger a POST request.\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/Deferred](../_base/deferred) \\| undefined\n\n### `query``(query,options)`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\nQueries the store for objects. This will trigger a GET request to the server, with the query added as a query string.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults) \\| undefined\n\nThe results of the query, extended with iterative methods.\n\n### `remove``(id,options)`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\nDeletes an object by its identity. This will trigger a DELETE request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `transaction``()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/JsonRest.html](http://dojotoolkit.org/api/1.10/dojo/store/JsonRest.html)"
- name: store/JsonRest#add()
  id: dojo/store/jsonrest#1_10dojo_store_JsonRest_add
  summary: Adds an object
  belongs_to: store/JsonRest
  description: |-
    ### `add` `(object,options)`

    Defined by [dojo/store/JsonRest](jsonrest)

    Adds an object. This will trigger a PUT request to the server if the object has an id, otherwise it will trigger a POST request.

    [TABLE]

    **Returns:** undefined
- name: store/JsonRest#get()
  id: dojo/store/jsonrest#1_10dojo_store_JsonRest_get
  summary: Retrieves an object by its identity
  belongs_to: store/JsonRest
  description: |-
    ### `get` `(id,options)`

    Defined by [dojo/store/JsonRest](jsonrest)

    Retrieves an object by its identity. This will trigger a GET request to the server using the url `this.target + id`.

    [TABLE]

    **Returns:** Object \| undefined

    The object in the store that matches the given id.

    ### `getChildren` `(parent,options)`

    Defined by [dojo/store/api/Store](api/store)

    Retrieves the children of an object.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)

    A result set of the children of the parent object.
- name: store/JsonRest#getIdentity()
  id: dojo/store/jsonrest#1_10dojo_store_JsonRest_getIdentity
  summary: Returns any metadata about the object
  belongs_to: store/JsonRest
  description: |-
    ### `getIdentity` `(object)`

    Defined by [dojo/store/JsonRest](jsonrest)

    Returns an object's identity

    |           |        |                                     |
    |-----------|--------|-------------------------------------|
    | Parameter | Type   | Description                         |
    | object    | Object | The object to get the identity from |

    **Returns:** Number \| undefined

    ### `getMetadata` `(object)`

    Defined by [dojo/store/api/Store](api/store)

    Returns any metadata about the object. This may include attribution, cache directives, history, or version information.

    |           |        |                                    |
    |-----------|--------|------------------------------------|
    | Parameter | Type   | Description                        |
    | object    | Object | The object to return metadata for. |

    **Returns:** Object

    An object containing metadata.
- name: store/JsonRest#headers
  id: dojo/store/jsonrest#1_10dojo_store_JsonRest_headers
  summary: Additional headers to pass in all requests to the server
  belongs_to: store/JsonRest
  description: "### headers\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nAdditional headers to pass in all requests to the server. These can be overridden by passing additional headers to calls to the store.\n\n### idProperty\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nIndicates the property to use as the identity property. The values of this property should be unique.\n\n### `queryEngine`\n\nDefined by: [dojo/store/api/Store](api/store)\n\nIf the store can be queried locally (on the client side in JS), this defines the query engine to use for querying the data store. This takes a query and query options and returns a function that can execute the provided query on a JavaScript array. The queryEngine may be replace to provide more sophisticated querying capabilities. For example:\n\n``` javascript\n        var query = store.queryEngine({foo:\"bar\"}, {count:10});\nquery(someArray) -> filtered array\n      \n```\n\nThe returned query function may have a \"matches\" property that can be\n\nused to determine if an object matches the query. For example:\n\n``` javascript\n        query.matches({id:\"some-object\", foo:\"bar\"}) -> true\nquery.matches({id:\"some-object\", foo:\"something else\"}) -> false\n      \n```\n\n### target\n\nDefined by: [dojo/store/JsonRest](jsonrest)\n\nThe target base URL to use for all requests to the server. This string will be prepended to the id to generate the URL (relative or absolute) for requests sent to the server\n\n## Methods"
- name: store/JsonRest#put()
  id: dojo/store/jsonrest#1_10dojo_store_JsonRest_put
  summary: Stores an object
  belongs_to: store/JsonRest
  description: |-
    ### `put` `(object,options)`

    Defined by [dojo/store/JsonRest](jsonrest)

    Stores an object. This will trigger a PUT request to the server if the object has an id, otherwise it will trigger a POST request.

    [TABLE]

    **Returns:** [dojo/\_base/Deferred](../_base/deferred) \| undefined
- name: store/JsonRest#query()
  id: dojo/store/jsonrest#1_10dojo_store_JsonRest_query
  summary: Queries the store for objects
  belongs_to: store/JsonRest
  description: |-
    ### `query` `(query,options)`

    Defined by [dojo/store/JsonRest](jsonrest)

    Queries the store for objects. This will trigger a GET request to the server, with the query added as a query string.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults) \| undefined

    The results of the query, extended with iterative methods.
- name: store/JsonRest#remove()
  id: dojo/store/jsonrest#1_10dojo_store_JsonRest_remove
  summary: Deletes an object by its identity
  belongs_to: store/JsonRest
  description: "### `remove` `(id,options)`\n\nDefined by [dojo/store/JsonRest](jsonrest)\n\nDeletes an object by its identity. This will trigger a DELETE request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `transaction` `()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/JsonRest.html](http://dojotoolkit.org/api/1.10/dojo/store/JsonRest.html)"
- name: store/Memory
  id: dojo/store/memory
  summary: This is a basic in-memory object store
  description: "# dojo/store/Memory\n\nExtends[dojo/store/api/Store](api/store)\n\n## Summary\n\nThis is a basic in-memory object store. It implements [dojo/store/api/Store](api/store).\n\n## Usage\n\nvar foo = new Memory`(options);`\n\nDefined by [dojo/store/Memory](memory)\n\n|           |                             |                                                                                                                                                                     |\n|-----------|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type                        | Description                                                                                                                                                         |\n| options   | [dojo/store/Memory](memory) | This provides any configuration information that will be mixed into the store. This should generally include the data property to provide the starting set of data. |\n\nSee the [dojo/store/Memory reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/store/Memory.html) for more information.\n\n## Properties\n\n### data\n\nDefined by: [dojo/store/Memory](memory)\n\nThe array of all the objects in the memory store\n\n### idProperty\n\nDefined by: [dojo/store/Memory](memory)\n\nIndicates the property to use as the identity property. The values of this property should be unique.\n\n### index\n\nDefined by: [dojo/store/Memory](memory)\n\nAn index of data indices into the data array by id\n\n## Methods\n\n### `add``(object,options)`\n\nDefined by [dojo/store/Memory](memory)\n\nCreates an object, throws an error if the object already exists\n\n[TABLE]\n\n**Returns:** Number \\| undefined\n\n### `get``(id)`\n\nDefined by [dojo/store/Memory](memory)\n\nRetrieves an object by its identity\n\n|           |        |                                          |\n|-----------|--------|------------------------------------------|\n| Parameter | Type   | Description                              |\n| id        | Number | The identity to use to lookup the object |\n\n**Returns:** Object \\| undefined\n\nThe object in the store that matches the given id.\n\n### `getChildren``(parent,options)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nRetrieves the children of an object.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)\n\nA result set of the children of the parent object.\n\n### `getIdentity``(object)`\n\nDefined by [dojo/store/Memory](memory)\n\nReturns an object's identity\n\n|           |        |                                     |\n|-----------|--------|-------------------------------------|\n| Parameter | Type   | Description                         |\n| object    | Object | The object to get the identity from |\n\n**Returns:** Number \\| undefined\n\n### `getMetadata``(object)`\n\nDefined by [dojo/store/api/Store](api/store)\n\nReturns any metadata about the object. This may include attribution, cache directives, history, or version information.\n\n|           |        |                                    |\n|-----------|--------|------------------------------------|\n| Parameter | Type   | Description                        |\n| object    | Object | The object to return metadata for. |\n\n**Returns:** Object\n\nAn object containing metadata.\n\n### `put``(object,options)`\n\nDefined by [dojo/store/Memory](memory)\n\nStores an object\n\n[TABLE]\n\n**Returns:** Number \\| undefined\n\n### `query``(query,options)`\n\nDefined by [dojo/store/Memory](memory)\n\nQueries the store for objects.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults) \\| undefined\n\nThe results of the query, extended with iterative methods.\n\n## Examples\n\n### Example 1\n\nGiven the following store:\n\n``` javascript\nvar store = new Memory({\n    data: [\n        {id: 1, name: \"one\", prime: false },\n        {id: 2, name: \"two\", even: true, prime: true},\n        {id: 3, name: \"three\", prime: true},\n        {id: 4, name: \"four\", even: true, prime: false},\n        {id: 5, name: \"five\", prime: true}\n    ]\n});\n```\n\n...find all items where \"prime\" is true:\n\n``` javascript\nvar results = store.query({ prime: true });\n```\n\n...or find all items where \"even\" is true:\n\n``` javascript\nvar results = store.query({ even: true });\n```\n\n### `queryEngine``(query,options)`\n\nDefined by [dojo/store/Memory](memory)\n\nDefines the query engine to use for querying the data store\n\n[TABLE]\n\n**Returns:** Function \\| function\n\nA function that caches the passed query under the field \"matches\". See any of the \"query\" methods on dojo.stores.\n\n### `remove``(id)`\n\nDefined by [dojo/store/Memory](memory)\n\nDeletes an object by its identity\n\n|           |        |                                          |\n|-----------|--------|------------------------------------------|\n| Parameter | Type   | Description                              |\n| id        | Number | The identity to use to delete the object |\n\n**Returns:** Boolean \\| boolean\n\nReturns true if an object was removed, falsy (undefined) if no object matched the id\n\n### `setData``(data)`\n\nDefined by [dojo/store/Memory](memory)\n\nSets the given data as the source for this store, and indexes it\n\n|           |            |                                                   |\n|-----------|------------|---------------------------------------------------|\n| Parameter | Type       | Description                                       |\n| data      | Object\\[\\] | An array of objects to use as the source of data. |\n\n### `transaction``()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/Memory.html](http://dojotoolkit.org/api/1.10/dojo/store/Memory.html)"
- name: store/Memory#add()
  id: dojo/store/memory#1_10dojo_store_Memory_add
  summary: null
  belongs_to: store/Memory
  description: |-
    ### `add` `(object,options)`

    Defined by [dojo/store/Memory](memory)

    Creates an object, throws an error if the object already exists

    [TABLE]

    **Returns:** Number \| undefined
- name: store/Memory#get()
  id: dojo/store/memory#1_10dojo_store_Memory_get
  summary: The object in the store that matches the given id
  belongs_to: store/Memory
  description: |-
    ### `get` `(id)`

    Defined by [dojo/store/Memory](memory)

    Retrieves an object by its identity

    |           |        |                                          |
    |-----------|--------|------------------------------------------|
    | Parameter | Type   | Description                              |
    | id        | Number | The identity to use to lookup the object |

    **Returns:** Object \| undefined

    The object in the store that matches the given id.

    ### `getChildren` `(parent,options)`

    Defined by [dojo/store/api/Store](api/store)

    Retrieves the children of an object.

    [TABLE]

    **Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults)

    A result set of the children of the parent object.
- name: store/Memory#getIdentity()
  id: dojo/store/memory#1_10dojo_store_Memory_getIdentity
  summary: Returns any metadata about the object
  belongs_to: store/Memory
  description: |-
    ### `getIdentity` `(object)`

    Defined by [dojo/store/Memory](memory)

    Returns an object's identity

    |           |        |                                     |
    |-----------|--------|-------------------------------------|
    | Parameter | Type   | Description                         |
    | object    | Object | The object to get the identity from |

    **Returns:** Number \| undefined

    ### `getMetadata` `(object)`

    Defined by [dojo/store/api/Store](api/store)

    Returns any metadata about the object. This may include attribution, cache directives, history, or version information.

    |           |        |                                    |
    |-----------|--------|------------------------------------|
    | Parameter | Type   | Description                        |
    | object    | Object | The object to return metadata for. |

    **Returns:** Object

    An object containing metadata.
- name: store/Memory#index
  id: dojo/store/memory#1_10dojo_store_Memory_index
  summary: null
  belongs_to: store/Memory
  description: |-
    ### index

    Defined by: [dojo/store/Memory](memory)

    An index of data indices into the data array by id

    ## Methods
- name: store/Memory#put()
  id: dojo/store/memory#1_10dojo_store_Memory_put
  summary: null
  belongs_to: store/Memory
  description: |-
    ### `put` `(object,options)`

    Defined by [dojo/store/Memory](memory)

    Stores an object

    [TABLE]

    **Returns:** Number \| undefined
- name: store/Memory#query()
  id: dojo/store/memory#1_10dojo_store_Memory_query
  summary: Queries the store for objects
  belongs_to: store/Memory
  description: "### `query` `(query,options)`\n\nDefined by [dojo/store/Memory](memory)\n\nQueries the store for objects.\n\n[TABLE]\n\n**Returns:** [dojo/store/api/Store.QueryResults](api/store.queryresults) \\| undefined\n\nThe results of the query, extended with iterative methods.\n\n## Examples\n\n### Example 1\n\nGiven the following store:\n\n``` javascript\n      var store = new Memory({\n    data: [\n        {id: 1, name: \"one\", prime: false },\n        {id: 2, name: \"two\", even: true, prime: true},\n        {id: 3, name: \"three\", prime: true},\n        {id: 4, name: \"four\", even: true, prime: false},\n        {id: 5, name: \"five\", prime: true}\n    ]\n});\n    \n```\n\n...find all items where \"prime\" is true:\n\n``` javascript\n      var results = store.query({ prime: true });\n    \n```\n\n...or find all items where \"even\" is true:\n\n``` javascript\n      var results = store.query({ even: true });\n    \n```"
- name: store/Memory#queryEngine()
  id: dojo/store/memory#1_10dojo_store_Memory_queryEngine
  summary: A function that caches the passed query under the field "matches". See any of the "query" methods on dojo.stores
  belongs_to: store/Memory
  description: |-
    ### `queryEngine` `(query,options)`

    Defined by [dojo/store/Memory](memory)

    Defines the query engine to use for querying the data store

    [TABLE]

    **Returns:** Function \| function

    A function that caches the passed query under the field "matches". See any of the "query" methods on dojo.stores.
- name: store/Memory#remove()
  id: dojo/store/memory#1_10dojo_store_Memory_remove
  summary: null
  belongs_to: store/Memory
  description: |-
    ### `remove` `(id)`

    Defined by [dojo/store/Memory](memory)

    Deletes an object by its identity

    |           |        |                                          |
    |-----------|--------|------------------------------------------|
    | Parameter | Type   | Description                              |
    | id        | Number | The identity to use to delete the object |

    **Returns:** Boolean \| boolean

    Returns true if an object was removed, falsy (undefined) if no object matched the id
- name: store/Memory#setData()
  id: dojo/store/memory#1_10dojo_store_Memory_setData
  summary: Starts a new transaction
  belongs_to: store/Memory
  description: "### `setData` `(data)`\n\nDefined by [dojo/store/Memory](memory)\n\nSets the given data as the source for this store, and indexes it\n\n|           |            |                                                   |\n|-----------|------------|---------------------------------------------------|\n| Parameter | Type       | Description                                       |\n| data      | Object\\[\\] | An array of objects to use as the source of data. |\n\n### `transaction` `()`\n\nDefined by [dojo/store/api/Store](api/store)\n\nStarts a new transaction. Note that a store user might not call transaction() prior to using put, delete, etc. in which case these operations effectively could be thought of as \"auto-commit\" style actions.\n\n**Returns:** [dojo/store/api/Store.Transaction](api/store.transaction)\n\nThis represents the new current transaction.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/Memory.html](http://dojotoolkit.org/api/1.10/dojo/store/Memory.html)"
- name: store/Observable
  id: dojo/store/observable
  summary: The Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes
  description: "# dojo/store/Observable\n\n## Summary\n\nThe Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes.\n\nObservable wraps an existing store so that notifications can be made when a query is performed.\n\n## Usage\n\nObservable`(store);`\n\n|           |                                   |             |\n|-----------|-----------------------------------|-------------|\n| Parameter | Type                              | Description |\n| store     | [dojo/store/api/Store](api/store) |             |\n\n**Returns:** undefined\n\nSee the [dojo/store/Observable reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/store/Observable.html) for more information.\n\n## Examples\n\n### Example 1\n\nCreate a Memory store that returns an observable query, and then log some information about that query.\n\n``` javascript\nvar store = Observable(new Memory({\n    data: [\n        {id: 1, name: \"one\", prime: false},\n        {id: 2, name: \"two\", even: true, prime: true},\n        {id: 3, name: \"three\", prime: true},\n        {id: 4, name: \"four\", even: true, prime: false},\n        {id: 5, name: \"five\", prime: true}\n    ]\n}));\nvar changes = [], results = store.query({ prime: true });\nvar observer = results.observe(function(object, previousIndex, newIndex){\n    changes.push({previousIndex:previousIndex, newIndex:newIndex, object:object});\n});\n```\n\nSee the Observable tests for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/Observable.html](http://dojotoolkit.org/api/1.10/dojo/store/Observable.html)"
- name: store/util/QueryResults
  id: dojo/store/util/queryresults
  summary: A function that wraps the results of a store query with additional methods
  description: "# dojo/store/util/QueryResults\n\n## Summary\n\nA function that wraps the results of a store query with additional methods.\n\nQueryResults is a basic wrapper that allows for array-like iteration over any kind of returned data from a query. While the simplest store will return a plain array of data, other stores may return deferreds or promises; this wrapper makes sure that *all* results can be treated the same.\n\nAdditional methods include `forEach`, `filter` and `map`.\n\n## Usage\n\nQueryResults`(results);`\n\n|           |                                                        |                                                        |\n|-----------|--------------------------------------------------------|--------------------------------------------------------|\n| Parameter | Type                                                   | Description                                            |\n| results   | Array \\| [dojo/promise/Promise](../../promise/promise) | The result set as an array, or a promise for an array. |\n\n**Returns:** any \\| Array\\|[dojo/promise/Promise](../../promise/promise) \\| undefined\n\nAn array-like object that can be used for iterating over.\n\nSee the [dojo/store/util/QueryResults reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/store/util/QueryResults.html) for more information.\n\n## Examples\n\n### Example 1\n\nQuery a store and iterate over the results.\n\n``` javascript\nstore.query({ prime: true }).forEach(function(item){\n    //  do something\n});\n```\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/util/QueryResults.html](http://dojotoolkit.org/api/1.10/dojo/store/util/QueryResults.html)"
- name: store/util/SimpleQueryEngine
  id: dojo/store/util/simplequeryengine
  summary: The SimpleQueryEngine provides a way of getting a QueryResults through the use of a simple object hash as a filter
  description: "# dojo/store/util/SimpleQueryEngine\n\n## Summary\n\nSimple query engine that matches using filter functions, named filter functions or objects by name-value on a query object hash\n\nThe SimpleQueryEngine provides a way of getting a QueryResults through the use of a simple object hash as a filter. The hash will be used to match properties on data objects with the corresponding value given. In other words, only exact matches will be returned.\n\nThis function can be used as a template for more complex query engines; for example, an engine can be created that accepts an object hash that contains filtering functions, or a string that gets evaluated, etc.\n\nWhen creating a new dojo.store, simply set the store's queryEngine field as a reference to this function.\n\n## Usage\n\nSimpleQueryEngine`(query,options);`\n\n[TABLE]\n\n**Returns:** Function \\| function\n\nA function that caches the passed query under the field \"matches\". See any of the \"query\" methods on dojo.stores.\n\nSee the [dojo/store/util/SimpleQueryEngine reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/store/util/SimpleQueryEngine.html) for more information.\n\n## Examples\n\n### Example 1\n\nDefine a store with a reference to this engine, and set up a query method.\n\n``` javascript\nvar myStore = function(options){\n    //  ...more properties here\n    this.queryEngine = SimpleQueryEngine;\n    //  define our query method\n    this.query = function(query, options){\n        return QueryResults(this.queryEngine(query, options)(this.data));\n    };\n};\n```\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/store/util/SimpleQueryEngine.html](http://dojotoolkit.org/api/1.10/dojo/store/util/SimpleQueryEngine.html)"
- name: string
  id: dojo/string
  summary: See the dojo/string reference documentation for more information
  description: "# dojo/string\n\n## Summary\n\nString utilities for Dojo\n\nSee the [dojo/string reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/string.html) for more information.\n\n## Methods\n\n### `escape``(str)`\n\nDefined by [dojo/string](string)\n\nEfficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, \\<, \\>, \", ', and / characters.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | the string to escape |\n\n### `pad``(text,size,ch,end)`\n\nDefined by [dojo/string](string)\n\nPad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n// Fill the string to length 10 with \"+\" characters on the right.  Yields \"Dojo++++++\".\nstring.pad(\"Dojo\", 10, \"+\", true);\n```\n\n### `rep``(str,num)`\n\nDefined by [dojo/string](string)\n\nEfficiently replicate a string `n` times.\n\n|           |         |                                         |\n|-----------|---------|-----------------------------------------|\n| Parameter | Type    | Description                             |\n| str       | String  | the string to replicate                 |\n| num       | Integer | number of times to replicate the string |\n\n**Returns:** string \\| undefined\n\n### `substitute``(template,map,transform,thisObject)`\n\nDefined by [dojo/string](string)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nSubstitutes two expressions in a string from an Array or Object\n\n``` javascript\n// returns \"File 'foo.html' is not found in directory '/temp'.\"\n// by providing substitution data in an Array\nstring.substitute(\n    \"File '${0}' is not found in directory '${1}'.\",\n    [\"foo.html\",\"/temp\"]\n);\n\n// also returns \"File 'foo.html' is not found in directory '/temp'.\"\n// but provides substitution data in an Object structure.  Dotted\n// notation may be used to traverse the structure.\nstring.substitute(\n    \"File '${name}' is not found in directory '${info.dir}'.\",\n    { name: \"foo.html\", info: { dir: \"/temp\" } }\n);\n```\n\n### Example 2\n\nUse a transform function to modify the values:\n\n``` javascript\n// returns \"file 'foo.html' is not found in directory '/temp'.\"\nstring.substitute(\n    \"${0} is not found in ${1}.\",\n    [\"foo.html\",\"/temp\"],\n    function(str){\n        // try to figure out the type\n        var prefix = (str.charAt(0) == \"/\") ? \"directory\": \"file\";\n        return prefix + \" '\" + str + \"'\";\n    }\n);\n```\n\n### Example 3\n\nUse a formatter\n\n``` javascript\n// returns \"thinger -- howdy\"\nstring.substitute(\n    \"${0:postfix}\", [\"thinger\"], null, {\n        postfix: function(value, key){\n            return value + \" -- howdy\";\n        }\n    }\n);\n```\n\n### `trim``(str)`\n\nDefined by [dojo/string](string)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript). The short yet performant version of this function is [dojo/\\_base/lang.trim()](_base/lang#trim), which is part of Dojo base. Uses String.prototype.trim instead, if available.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String \\| string\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/string.html](http://dojotoolkit.org/api/1.10/dojo/string.html)"
- name: string#escape()
  id: dojo/string#1_10dojo_string_escape
  summary: Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, <, >, ", ', and / characters
  belongs_to: string
  description: |-
    ### `escape` `(str)`

    Defined by [dojo/string](string)

    Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, \<, \>, ", ', and / characters.

    |           |        |                      |
    |-----------|--------|----------------------|
    | Parameter | Type   | Description          |
    | str       | String | the string to escape |
- name: string#pad()
  id: dojo/string#1_10dojo_string_pad
  summary: Pad a string to guarantee that it is at least size length by filling with the character ch at either the start or end of the string
  belongs_to: string
  description: "### `pad` `(text,size,ch,end)`\n\nDefined by [dojo/string](string)\n\nPad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // Fill the string to length 10 with \"+\" characters on the right.  Yields \"Dojo++++++\".\nstring.pad(\"Dojo\", 10, \"+\", true);\n    \n```"
- name: string#rep()
  id: dojo/string#1_10dojo_string_rep
  summary: Efficiently replicate a string n times
  belongs_to: string
  description: |-
    ### `rep` `(str,num)`

    Defined by [dojo/string](string)

    Efficiently replicate a string `n` times.

    |           |         |                                         |
    |-----------|---------|-----------------------------------------|
    | Parameter | Type    | Description                             |
    | str       | String  | the string to replicate                 |
    | num       | Integer | number of times to replicate the string |

    **Returns:** string \| undefined
- name: string#substitute()
  id: dojo/string#1_10dojo_string_substitute
  summary: Performs parameterized substitutions on a string
  belongs_to: string
  description: "### `substitute` `(template,map,transform,thisObject)`\n\nDefined by [dojo/string](string)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nSubstitutes two expressions in a string from an Array or Object\n\n``` javascript\n      // returns \"File 'foo.html' is not found in directory '/temp'.\"\n// by providing substitution data in an Array\nstring.substitute(\n    \"File '${0}' is not found in directory '${1}'.\",\n    [\"foo.html\",\"/temp\"]\n);\n\n// also returns \"File 'foo.html' is not found in directory '/temp'.\"\n// but provides substitution data in an Object structure.  Dotted\n// notation may be used to traverse the structure.\nstring.substitute(\n    \"File '${name}' is not found in directory '${info.dir}'.\",\n    { name: \"foo.html\", info: { dir: \"/temp\" } }\n);\n    \n```\n\n### Example 2\n\nUse a transform function to modify the values:\n\n``` javascript\n      // returns \"file 'foo.html' is not found in directory '/temp'.\"\nstring.substitute(\n    \"${0} is not found in ${1}.\",\n    [\"foo.html\",\"/temp\"],\n    function(str){\n        // try to figure out the type\n        var prefix = (str.charAt(0) == \"/\") ? \"directory\": \"file\";\n        return prefix + \" '\" + str + \"'\";\n    }\n);\n    \n```\n\n### Example 3\n\nUse a formatter\n\n``` javascript\n      // returns \"thinger -- howdy\"\nstring.substitute(\n    \"${0:postfix}\", [\"thinger\"], null, {\n        postfix: function(value, key){\n            return value + \" -- howdy\";\n        }\n    }\n);\n    \n```"
- name: string#trim()
  id: dojo/string#1_10dojo_string_trim
  summary: This version of trim() was taken from Steven Levithan's blog
  belongs_to: string
  description: "### `trim` `(str)`\n\nDefined by [dojo/string](string)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript). The short yet performant version of this function is [dojo/\\_base/lang.trim()](_base/lang#trim), which is part of Dojo base. Uses String.prototype.trim instead, if available.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String \\| string\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/string.html](http://dojotoolkit.org/api/1.10/dojo/string.html)"
- name: text
  id: dojo/text
  summary: This module implements the dojo/text! plugin and the dojo.cache API
  description: "# dojo/text\n\n## Summary\n\nThis module implements the [dojo/text](text)! plugin and the dojo.cache API.\n\nWe choose to include our own plugin to leverage functionality already contained in dojo and thereby reduce the size of the plugin compared to various foreign loader implementations. Also, this allows foreign AMD loaders to be used without their plugins.\n\nCAUTION: this module is designed to optionally function synchronously to support the dojo v1.x synchronous loader. This feature is outside the scope of the CommonJS plugins specification.\n\nSee the [dojo/text reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/text.html) for more information.\n\n## Properties\n\n### dynamic\n\nDefined by: [dojo/text](text)\n\n## Methods\n\n### `load``(id,require,load)`\n\nDefined by [dojo/text](text)\n\n|           |          |                                                                                                       |\n|-----------|----------|-------------------------------------------------------------------------------------------------------|\n| Parameter | Type     | Description                                                                                           |\n| id        | String   | Path to the resource.                                                                                 |\n| require   | Function | Object that include the function toUrl with given id returns a valid URL from which to load the text. |\n| load      | Function | Callback function which will be called, when the loading finished.                                    |\n\n### `normalize``(id,toAbsMid)`\n\nDefined by [dojo/text](text)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| toAbsMid  | undefined |             |\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/text.html](http://dojotoolkit.org/api/1.10/dojo/text.html)"
- name: text#load()
  id: dojo/text#1_10dojo_text_load
  summary: null
  belongs_to: text
  description: |-
    ### `load` `(id,require,load)`

    Defined by [dojo/text](text)

    |           |          |                                                                                                       |
    |-----------|----------|-------------------------------------------------------------------------------------------------------|
    | Parameter | Type     | Description                                                                                           |
    | id        | String   | Path to the resource.                                                                                 |
    | require   | Function | Object that include the function toUrl with given id returns a valid URL from which to load the text. |
    | load      | Function | Callback function which will be called, when the loading finished.                                    |
- name: text#normalize()
  id: dojo/text#1_10dojo_text_normalize
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: text
  description: "### `normalize` `(id,toAbsMid)`\n\nDefined by [dojo/text](text)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| toAbsMid  | undefined |             |\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/text.html](http://dojotoolkit.org/api/1.10/dojo/text.html)"
- name: throttle
  id: dojo/throttle
  summary: Create a function that will only execute once per wait periods
  description: "# dojo/throttle\n\n## Summary\n\nCreate a function that will only execute once per `wait` periods.\n\nCreate a function that will only execute once per `wait` periods from last execution when called repeatedly. Useful for preventing excessive calculations in rapidly firing events, such as window.resize, node.mousemove and so on.\n\n## Usage\n\nthrottle`(cb,wait);`\n\n|           |          |                                                 |\n|-----------|----------|-------------------------------------------------|\n| Parameter | Type     | Description                                     |\n| cb        | Function | The callback to fire.                           |\n| wait      | Integer  | time to delay before allowing cb to call again. |\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/throttle.html](http://dojotoolkit.org/api/1.10/dojo/throttle.html)"
- name: topic
  id: dojo/topic
  summary: Pubsub hub
  description: "# dojo/topic\n\n## Summary\n\nPubsub hub.\n\nSee the [dojo/topic reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/topic.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\ntopic.subscribe(\"some/topic\", function(event){\n... do something with event\n});\ntopic.publish(\"some/topic\", {name:\"some event\", ...});\n```\n\n## Methods\n\n### `publish``(topic,event)`\n\nDefined by [dojo/topic](topic)\n\nPublishes a message to a topic on the pub/sub hub. All arguments after the first will be passed to the subscribers, so any number of arguments can be provided (not just event).\n\n|           |        |                                               |\n|-----------|--------|-----------------------------------------------|\n| Parameter | Type   | Description                                   |\n| topic     | String | The name of the topic to publish to           |\n| event     | Object | An event to distribute to the topic listeners |\n\n**Returns:** undefined\n\n### `subscribe``(topic,listener)`\n\nDefined by [dojo/topic](topic)\n\nSubscribes to a topic on the pub/sub hub\n\n|           |          |                                                                   |\n|-----------|----------|-------------------------------------------------------------------|\n| Parameter | Type     | Description                                                       |\n| topic     | String   | The topic to subscribe to                                         |\n| listener  | Function | A function to call when a message is published to the given topic |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/topic.html](http://dojotoolkit.org/api/1.10/dojo/topic.html)"
- name: topic#publish()
  id: dojo/topic#1_10dojo_topic_publish
  summary: Publishes a message to a topic on the pub/sub hub
  belongs_to: topic
  description: |-
    ### `publish` `(topic,event)`

    Defined by [dojo/topic](topic)

    Publishes a message to a topic on the pub/sub hub. All arguments after the first will be passed to the subscribers, so any number of arguments can be provided (not just event).

    |           |        |                                               |
    |-----------|--------|-----------------------------------------------|
    | Parameter | Type   | Description                                   |
    | topic     | String | The name of the topic to publish to           |
    | event     | Object | An event to distribute to the topic listeners |

    **Returns:** undefined
- name: topic#subscribe()
  id: dojo/topic#1_10dojo_topic_subscribe
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: topic
  description: "### `subscribe` `(topic,listener)`\n\nDefined by [dojo/topic](topic)\n\nSubscribes to a topic on the pub/sub hub\n\n|           |          |                                                                   |\n|-----------|----------|-------------------------------------------------------------------|\n| Parameter | Type     | Description                                                       |\n| topic     | String   | The topic to subscribe to                                         |\n| listener  | Function | A function to call when a message is published to the given topic |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/topic.html](http://dojotoolkit.org/api/1.10/dojo/topic.html)"
- name: touch
  id: dojo/touch
  summary: This module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop
  description: "# dojo/touch\n\n## Summary\n\nThis module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop. Based on <http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html> Also, if the dojoClick property is set to truthy on a DOM node, [dojo/touch](touch) generates click events immediately for this node and its descendants (except for descendants that have a dojoClick property set to falsy), to avoid the delay before native browser click events, and regardless of whether evt.preventDefault() was called in a touch.press event listener.\n\nSee the [dojo/touch reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/touch.html) for more information.\n\n## Examples\n\n### Example 1\n\nUsed with dojo/on\n\n``` javascript\ndefine([\"dojo/on\", \"dojo/touch\"], function(on, touch){\n    on(node, touch.press, function(e){});\n    on(node, touch.move, function(e){});\n    on(node, touch.release, function(e){});\n    on(node, touch.cancel, function(e){});\n```\n\n### Example 2\n\nUsed with touch.\\* directly\n\n``` javascript\ntouch.press(node, function(e){});\ntouch.move(node, function(e){});\ntouch.release(node, function(e){});\ntouch.cancel(node, function(e){});\n```\n\n### Example 3\n\nHave dojo/touch generate clicks without delay, with a default move threshold of 4 pixels\n\n``` javascript\nnode.dojoClick = true;\n```\n\n### Example 4\n\nHave dojo/touch generate clicks without delay, with a move threshold of 10 pixels horizontally and vertically\n\n``` javascript\nnode.dojoClick = 10;\n```\n\n### Example 5\n\nHave dojo/touch generate clicks without delay, with a move threshold of 50 pixels horizontally and 10 pixels vertically\n\n``` javascript\nnode.dojoClick = {x:50, y:5};\n```\n\n### Example 6\n\nDisable clicks without delay generated by dojo/touch on a node that has an ancestor with property dojoClick set to truthy\n\n``` javascript\nnode.dojoClick = false;\n```\n\n## Methods\n\n### `cancel``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'touchcancel'\\|'mouseleave' for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `enter``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to mouse.enter or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `leave``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to mouse.leave or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `move``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener that fires when the mouse cursor or a finger is dragged over the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `out``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'mouseout' or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `over``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'mouseover' or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `press``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to 'touchstart'\\|'mousedown' for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `release``(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to releasing the mouse button while the cursor is over the given node (i.e. \"mouseup\") or for removing the finger from the screen while touching the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/touch.html](http://dojotoolkit.org/api/1.10/dojo/touch.html)"
- name: touch#cancel()
  id: dojo/touch#1_10dojo_touch_cancel
  summary: null
  belongs_to: touch
  description: |-
    ### `cancel` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'touchcancel'\|'mouseleave' for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: touch#enter()
  id: dojo/touch#1_10dojo_touch_enter
  summary: null
  belongs_to: touch
  description: |-
    ### `enter` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to mouse.enter or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: touch#leave()
  id: dojo/touch#1_10dojo_touch_leave
  summary: null
  belongs_to: touch
  description: |-
    ### `leave` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to mouse.leave or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: touch#move()
  id: dojo/touch#1_10dojo_touch_move
  summary: Register a listener that fires when the mouse cursor or a finger is dragged over the given node
  belongs_to: touch
  description: |-
    ### `move` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener that fires when the mouse cursor or a finger is dragged over the given node.

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: touch#out()
  id: dojo/touch#1_10dojo_touch_out
  summary: null
  belongs_to: touch
  description: |-
    ### `out` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'mouseout' or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: touch#over()
  id: dojo/touch#1_10dojo_touch_over
  summary: null
  belongs_to: touch
  description: |-
    ### `over` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'mouseover' or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: touch#press()
  id: dojo/touch#1_10dojo_touch_press
  summary: null
  belongs_to: touch
  description: |-
    ### `press` `(node,listener)`

    Defined by [dojo/touch](touch)

    Register a listener to 'touchstart'\|'mousedown' for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: touch#release()
  id: dojo/touch#1_10dojo_touch_release
  summary: Register a listener to releasing the mouse button while the cursor is over the given node (i.e
  belongs_to: touch
  description: "### `release` `(node,listener)`\n\nDefined by [dojo/touch](touch)\n\nRegister a listener to releasing the mouse button while the cursor is over the given node (i.e. \"mouseup\") or for removing the finger from the screen while touching the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/touch.html](http://dojotoolkit.org/api/1.10/dojo/touch.html)"
- name: uacss
  id: dojo/uacss
  summary: In addition, browser, browser version, and box model are combined with an RTL flag when browser text is RTL
  description: "# dojo/uacss\n\n## Summary\n\nApplies pre-set CSS classes to the top-level HTML node, based on:\n\n- browser (ex: dj_ie)\n- browser version (ex: dj_ie6)\n- box model (ex: dj_contentBox)\n- text direction (ex: dijitRtl)\n\nIn addition, browser, browser version, and box model are combined with an RTL flag when browser text is RTL. ex: dj_ie-rtl.\n\nReturns the has() method.\n\nSee the [dojo/uacss reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/uacss.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/uacss.html](http://dojotoolkit.org/api/1.10/dojo/uacss.html)"
- name: when
  id: dojo/when
  summary: Transparently applies callbacks to values and/or promises
  description: "# dojo/when\n\n## Summary\n\nTransparently applies callbacks to values and/or promises.\n\nAccepts promises but also transparently handles non-promises. If no callbacks are provided returns a promise, regardless of the initial value. Foreign promises are converted.\n\nIf callbacks are provided and the initial value is not a promise, the callback is executed immediately with no error handling. Returns a promise if the initial value is a promise, or the result of the callback otherwise.\n\n## Usage\n\nwhen`(valueOrPromise,callback,errback,progback);`\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](promise/promise) \\| summary: \\| name:\n\nPromise, or if a callback is provided, the result of the callback.\n\nSee the [dojo/when reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/when.html) for more information.\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/when.html](http://dojotoolkit.org/api/1.10/dojo/when.html)"
- name: window
  id: dojo/window
  summary: See the dojo/window reference documentation for more information
  description: "# dojo/window\n\n## Summary\n\nTODOC\n\nSee the [dojo/window reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/window.html) for more information.\n\n## Methods\n\n### `get``(doc)`\n\nDefined by [dojo/window](window)\n\nGet window object associated with document doc.\n\n|           |          |                                                |\n|-----------|----------|------------------------------------------------|\n| Parameter | Type     | Description                                    |\n| doc       | Document | The document to get the associated window for. |\n\n**Returns:** undefined\n\n### `getBox``(doc)`\n\nDefined by [dojo/window](window)\n\nReturns the dimensions and scroll position of the viewable area of a browser window\n\n[TABLE]\n\n**Returns:** object\n\n### `scrollIntoView``(node,pos)`\n\nDefined by [dojo/window](window)\n\nScroll the passed node into view using minimal movement, if it is not already.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/window.html](http://dojotoolkit.org/api/1.10/dojo/window.html)"
- name: window#get()
  id: dojo/window#1_10dojo_window_get
  summary: Get window object associated with document doc
  belongs_to: window
  description: |-
    ### `get` `(doc)`

    Defined by [dojo/window](window)

    Get window object associated with document doc.

    |           |          |                                                |
    |-----------|----------|------------------------------------------------|
    | Parameter | Type     | Description                                    |
    | doc       | Document | The document to get the associated window for. |

    **Returns:** undefined
- name: window#getBox()
  id: dojo/window#1_10dojo_window_getBox
  summary: null
  belongs_to: window
  description: |-
    ### `getBox` `(doc)`

    Defined by [dojo/window](window)

    Returns the dimensions and scroll position of the viewable area of a browser window

    [TABLE]

    **Returns:** object
- name: window#scrollIntoView()
  id: dojo/window#1_10dojo_window_scrollIntoView
  summary: Scroll the passed node into view using minimal movement, if it is not already
  belongs_to: window
  description: "### `scrollIntoView` `(node,pos)`\n\nDefined by [dojo/window](window)\n\nScroll the passed node into view using minimal movement, if it is not already.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/window.html](http://dojotoolkit.org/api/1.10/dojo/window.html)"
- name: _base/array
  id: dojo/_base/array
  summary: The Javascript v1.6 array extensions
  description: "# dojo/\\_base/array\n\n## Summary\n\nThe Javascript v1.6 array extensions.\n\nSee the [dojo/\\_base/array reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/array.html) for more information.\n\n## Methods\n\n### `clearCache``()`\n\nDefined by [dojo/\\_base/array](array)\n\n### `every``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not every item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns false\narray.every([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### Example 2\n\n``` javascript\n// returns true\narray.every([1, 2, 3, 4], function(item){ return item>0; });\n```\n\n### `filter``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nReturns a new Array with those items from arr that match the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter>\n\n[TABLE]\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns [2, 3, 4]\narray.filter([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### `forEach``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nfor every item in arr, callback is invoked. Return values are ignored. If you want to break out of the loop, consider using array.every() or array.some(). forEach does not allow breaking out of the loop over the items in arr.\n\nThis function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach>\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n// log out all members of the array:\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item){\n          console.log(item);\n      }\n);\n```\n\n### Example 2\n\n``` javascript\n// log out the members and their indexes\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item, idx, arr){\n          console.log(item, \"at index:\", idx);\n      }\n);\n```\n\n### Example 3\n\n``` javascript\n// use a scoped object member as the callback\n\nvar obj = {\n      prefix: \"logged via obj.callback:\",\n      callback: function(item){\n          console.log(this.prefix, item);\n      }\n};\n\n// specifying the scope function executes the callback in that scope\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      obj.callback,\n      obj\n);\n\n// alternately, we can accomplish the same thing with lang.hitch()\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      lang.hitch(obj, \"callback\")\n);\n```\n\n### `indexOf``(arr,value,fromIndex,findLast)`\n\nDefined by [dojo/\\_base/array](array)\n\nlocates the first index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's indexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf>\n\n[TABLE]\n\n**Returns:** Number\n\n### `lastIndexOf``(arr,value,fromIndex)`\n\nDefined by [dojo/\\_base/array](array)\n\nlocates the last index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's lasIndexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf>\n\n[TABLE]\n\n**Returns:** Number\n\n### `map``(arr,callback,thisObject,Ctr)`\n\nDefined by [dojo/\\_base/array](array)\n\napplies callback to each element of arr and returns an Array with the results\n\nThis function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map>\n\n[TABLE]\n\n**Returns:** Array \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns [2, 3, 4, 5]\narray.map([1, 2, 3, 4], function(item){ return item+1 });\n```\n\n### `some``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not any item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n// is true\narray.some([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### Example 2\n\n``` javascript\n// is false\narray.some([1, 2, 3, 4], function(item){ return item<1; });\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/array.html](http://dojotoolkit.org/api/1.10/dojo/_base/array.html)"
- name: _base/array#clearCache()
  id: dojo/_base/array#1_10dojo__base_array_clearCache
  summary: null
  belongs_to: _base/array
  description: |-
    ### `clearCache` `()`

    Defined by [dojo/\_base/array](array)
- name: _base/array#every()
  id: dojo/_base/array#1_10dojo__base_array_every
  summary: Determines whether or not every item in arr satisfies the condition implemented by callback
  belongs_to: _base/array
  description: "### `every` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not every item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns false\narray.every([1, 2, 3, 4], function(item){ return item>1; });\n    \n```\n\n### Example 2\n\n``` javascript\n      // returns true\narray.every([1, 2, 3, 4], function(item){ return item>0; });\n    \n```"
- name: _base/array#filter()
  id: dojo/_base/array#1_10dojo__base_array_filter
  summary: Returns a new Array with those items from arr that match the condition implemented by callback
  belongs_to: _base/array
  description: "### `filter` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nReturns a new Array with those items from arr that match the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter>\n\n[TABLE]\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns [2, 3, 4]\narray.filter([1, 2, 3, 4], function(item){ return item>1; });\n    \n```"
- name: _base/array#forEach()
  id: dojo/_base/array#1_10dojo__base_array_forEach
  summary: for every item in arr, callback is invoked
  belongs_to: _base/array
  description: "### `forEach` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nfor every item in arr, callback is invoked. Return values are ignored. If you want to break out of the loop, consider using array.every() or array.some(). forEach does not allow breaking out of the loop over the items in arr.\n\nThis function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach>\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // log out all members of the array:\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item){\n          console.log(item);\n      }\n);\n    \n```\n\n### Example 2\n\n``` javascript\n      // log out the members and their indexes\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item, idx, arr){\n          console.log(item, \"at index:\", idx);\n      }\n);\n    \n```\n\n### Example 3\n\n``` javascript\n      // use a scoped object member as the callback\n\nvar obj = {\n      prefix: \"logged via obj.callback:\",\n      callback: function(item){\n          console.log(this.prefix, item);\n      }\n};\n\n// specifying the scope function executes the callback in that scope\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      obj.callback,\n      obj\n);\n\n// alternately, we can accomplish the same thing with lang.hitch()\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      lang.hitch(obj, \"callback\")\n);\n    \n```"
- name: _base/array#indexOf()
  id: dojo/_base/array#1_10dojo__base_array_indexOf
  summary: locates the first index of the provided value in the passed array
  belongs_to: _base/array
  description: |-
    ### `indexOf` `(arr,value,fromIndex,findLast)`

    Defined by [dojo/\_base/array](array)

    locates the first index of the provided value in the passed array. If the value is not found, -1 is returned.

    This method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:

    1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's indexOf skips the holes in the sparse array.
    2.  uses equality (==) rather than strict equality (===)

    For details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf>

    [TABLE]

    **Returns:** Number
- name: _base/array#lastIndexOf()
  id: dojo/_base/array#1_10dojo__base_array_lastIndexOf
  summary: locates the last index of the provided value in the passed array
  belongs_to: _base/array
  description: |-
    ### `lastIndexOf` `(arr,value,fromIndex)`

    Defined by [dojo/\_base/array](array)

    locates the last index of the provided value in the passed array. If the value is not found, -1 is returned.

    This method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:

    1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's lasIndexOf skips the holes in the sparse array.
    2.  uses equality (==) rather than strict equality (===)

    For details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf>

    [TABLE]

    **Returns:** Number
- name: _base/array#map()
  id: dojo/_base/array#1_10dojo__base_array_map
  summary: 'This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the "holes" in the sparse array to the callback function with a value of undefined'
  belongs_to: _base/array
  description: "### `map` `(arr,callback,thisObject,Ctr)`\n\nDefined by [dojo/\\_base/array](array)\n\napplies callback to each element of arr and returns an Array with the results\n\nThis function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map>\n\n[TABLE]\n\n**Returns:** Array \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns [2, 3, 4, 5]\narray.map([1, 2, 3, 4], function(item){ return item+1 });\n    \n```"
- name: _base/array#some()
  id: dojo/_base/array#1_10dojo__base_array_some
  summary: Determines whether or not any item in arr satisfies the condition implemented by callback
  belongs_to: _base/array
  description: "### `some` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not any item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // is true\narray.some([1, 2, 3, 4], function(item){ return item>1; });\n    \n```\n\n### Example 2\n\n``` javascript\n      // is false\narray.some([1, 2, 3, 4], function(item){ return item<1; });\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/array.html](http://dojotoolkit.org/api/1.10/dojo/_base/array.html)"
- name: _base/browser
  id: dojo/_base/browser
  summary: This module causes the browser-only base modules to be loaded
  description: "# dojo/\\_base/browser\n\n## Summary\n\nThis module causes the browser-only base modules to be loaded.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/browser.html](http://dojotoolkit.org/api/1.10/dojo/_base/browser.html)"
- name: _base/Color
  id: dojo/_base/color
  summary: Takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another Color object and creates a new Color instance to work from
  description: "# dojo/\\_base/Color\n\n## Summary\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and creates a new Color instance to work from.\n\n## Usage\n\nColor`(color);`\n\n|           |                           |             |\n|-----------|---------------------------|-------------|\n| Parameter | Type                      | Description |\n| color     | Array \\| String \\| Object |             |\n\nSee the [dojo/\\_base/Color reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/Color.html) for more information.\n\n## Examples\n\n### Example 1\n\nWork with a Color instance:\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var c = new Color();\n    c.setColor([0,0,0]); // black\n    var hex = c.toHex(); // #000000\n});\n```\n\n### Example 2\n\nWork with a node's color:\n\n``` javascript\n  require([\"dojo/_base/color\", \"dojo/dom-style\"], function(Color, domStyle){\n      var color = domStyle(\"someNode\", \"backgroundColor\");\n      var n = new Color(color);\n      // adjust the color some\n      n.r *= .5;\n      console.log(n.toString()); // rgb(128, 255, 255);\n  });\n```\n\n## Properties\n\n### a\n\nDefined by: [dojo/\\_base/Color](color)\n\n### b\n\nDefined by: [dojo/\\_base/Color](color)\n\n### g\n\nDefined by: [dojo/\\_base/Color](color)\n\n### named\n\nDefined by: [dojo/\\_base/Color](color)\n\nDictionary list of all CSS named colors, by name. Values are 3-item arrays with corresponding RG and B values.\n\n### r\n\nDefined by: [dojo/\\_base/Color](color)\n\n## Methods\n\n### `blendColors``(start,end,weight,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nBlend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated Color object for the result\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fromArray``(a,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nBuilds a `Color` from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha\n});\n```\n\n### `fromHex``(color,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nConverts a hex string with a '#' prefix to a color object. Supports 12-bit \\#rgb shorthand. Optionally accepts a `Color` object to update with the parsed value.\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var thing = new Color().fromHex(\"#ededed\"); // grey, longhand\n    var thing2 = new Color().fromHex(\"#000\"); // black, shorthand\n});\n```\n\n### `fromRgb``(color,obj)`\n\nDefined by [dojo/colors](../colors)\n\nget rgb(a) array from css-style color declarations\n\nthis function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values.\n\n[TABLE]\n\n**Returns:** null\n\n### `fromString``(str,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nParses `str` for a color value. Accepts hex, rgb, and rgba style color values.\n\nAcceptable input values for str may include arrays of any form accepted by dojo.colorFromArray, hex strings such as \"#aaaaaa\", or rgb or rgba strings such as \"rgb(133, 200, 16)\" or \"rgba(10, 10, 10, 50)\"\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n### `makeGrey``(g,a)`\n\nDefined by [dojo/colors](../colors)\n\ncreates a greyscale color with an optional alpha\n\n[TABLE]\n\n### `sanitize``()`\n\nDefined by [dojo/colors](../colors)\n\nmakes sure that the object has correct attributes\n\n### `setColor``(color)`\n\nDefined by [dojo/\\_base/Color](color)\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and sets this color instance to that value.\n\n|           |                           |             |\n|-----------|---------------------------|-------------|\n| Parameter | Type                      | Description |\n| color     | Array \\| String \\| Object |             |\n\n**Returns:** function\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and sets this color instance to that value.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var c = new Color(); // no color\n    c.setColor(\"#ededed\"); // greyish\n});\n```\n\n### `toCmy``()`\n\nDefined by [dojox/color/\\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)\n\nConvert this Color to a CMY definition.\n\n**Returns:** object\n\n### `toCmyk``()`\n\nDefined by [dojox/color/\\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)\n\nConvert this Color to a CMYK definition.\n\n**Returns:** object\n\n### `toCss``(includeAlpha)`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns a css color string in rgb(a) representation\n\n[TABLE]\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var c = new Color(\"#FFF\").toCss();\n    console.log(c); // rgb('255','255','255')\n});\n```\n\n### `toHex``()`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns a CSS color string in hexadecimal representation\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    console.log(new Color([0,0,0]).toHex()); // #000000\n});\n```\n\n### `toHsl``()`\n\nDefined by [dojox/color/\\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)\n\nConvert this Color to an HSL definition.\n\n**Returns:** object\n\n### `toHsv``()`\n\nDefined by [dojox/color/\\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)\n\nConvert this Color to an HSV definition.\n\n**Returns:** object\n\n### `toRgb``()`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns 3 component array of rgb values\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var c = new Color(\"#000000\");\n    console.log(c.toRgb()); // [0,0,0]\n});\n```\n\n### `toRgba``()`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns a 4 component array of rgba values from the color represented by this object.\n\n**Returns:** Array\n\n### `toString``()`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns a visual representation of the color\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/Color.html](http://dojotoolkit.org/api/1.10/dojo/_base/Color.html)"
- name: _base/Color#blendColors()
  id: dojo/_base/color#1_10dojo__base_Color_blendColors
  summary: null
  belongs_to: _base/Color
  description: |-
    ### `blendColors` `(start,end,weight,obj)`

    Defined by [dojo/\_base/Color](color)

    Blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated Color object for the result

    [TABLE]

    **Returns:** undefined
- name: _base/Color#fromArray()
  id: dojo/_base/color#1_10dojo__base_Color_fromArray
  summary: Builds a Color from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color
  belongs_to: _base/Color
  description: "### `fromArray` `(a,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nBuilds a `Color` from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha\n});\n    \n```"
- name: _base/Color#fromHex()
  id: dojo/_base/color#1_10dojo__base_Color_fromHex
  summary: Converts a hex string with a '#' prefix to a color object
  belongs_to: _base/Color
  description: "### `fromHex` `(color,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nConverts a hex string with a '#' prefix to a color object. Supports 12-bit \\#rgb shorthand. Optionally accepts a `Color` object to update with the parsed value.\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var thing = new Color().fromHex(\"#ededed\"); // grey, longhand\n    var thing2 = new Color().fromHex(\"#000\"); // black, shorthand\n});\n    \n```"
- name: _base/Color#fromRgb()
  id: dojo/_base/color#1_10dojo__base_Color_fromRgb
  summary: 'this function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values'
  belongs_to: _base/Color
  description: |-
    ### `fromRgb` `(color,obj)`

    Defined by [dojo/colors](../colors)

    get rgb(a) array from css-style color declarations

    this function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values.

    [TABLE]

    **Returns:** null
- name: _base/Color#fromString()
  id: dojo/_base/color#1_10dojo__base_Color_fromString
  summary: Parses str for a color value
  belongs_to: _base/Color
  description: |-
    ### `fromString` `(str,obj)`

    Defined by [dojo/\_base/Color](color)

    Parses `str` for a color value. Accepts hex, rgb, and rgba style color values.

    Acceptable input values for str may include arrays of any form accepted by dojo.colorFromArray, hex strings such as "#aaaaaa", or rgb or rgba strings such as "rgb(133, 200, 16)" or "rgba(10, 10, 10, 50)"

    [TABLE]

    **Returns:** any

    A Color object. If obj is passed, it will be the return value.
- name: _base/Color#makeGrey()
  id: dojo/_base/color#1_10dojo__base_Color_makeGrey
  summary: null
  belongs_to: _base/Color
  description: |-
    ### `makeGrey` `(g,a)`

    Defined by [dojo/colors](../colors)

    creates a greyscale color with an optional alpha

    [TABLE]
- name: _base/Color#named
  id: dojo/_base/color#1_10dojo__base_Color_named
  summary: Dictionary list of all CSS named colors, by name
  belongs_to: _base/Color
  description: |-
    ### named

    Defined by: [dojo/\_base/Color](color)

    Dictionary list of all CSS named colors, by name. Values are 3-item arrays with corresponding RG and B values.

    ### r

    Defined by: [dojo/\_base/Color](color)

    ## Methods
- name: _base/Color#sanitize()
  id: dojo/_base/color#1_10dojo__base_Color_sanitize
  summary: null
  belongs_to: _base/Color
  description: |-
    ### `sanitize` `()`

    Defined by [dojo/colors](../colors)

    makes sure that the object has correct attributes
- name: _base/Color#setColor()
  id: dojo/_base/color#1_10dojo__base_Color_setColor
  summary: Takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another Color object and sets this color instance to that value
  belongs_to: _base/Color
  description: "### `setColor` `(color)`\n\nDefined by [dojo/\\_base/Color](color)\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and sets this color instance to that value.\n\n|           |                           |             |\n|-----------|---------------------------|-------------|\n| Parameter | Type                      | Description |\n| color     | Array \\| String \\| Object |             |\n\n**Returns:** function\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and sets this color instance to that value.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var c = new Color(); // no color\n    c.setColor(\"#ededed\"); // greyish\n});\n    \n```"
- name: _base/Color#toCmy()
  id: dojo/_base/color#1_10dojo__base_Color_toCmy
  summary: Convert this Color to a CMY definition
  belongs_to: _base/Color
  description: |-
    ### `toCmy` `()`

    Defined by [dojox/color/\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)

    Convert this Color to a CMY definition.

    **Returns:** object
- name: _base/Color#toCmyk()
  id: dojo/_base/color#1_10dojo__base_Color_toCmyk
  summary: Convert this Color to a CMYK definition
  belongs_to: _base/Color
  description: |-
    ### `toCmyk` `()`

    Defined by [dojox/color/\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)

    Convert this Color to a CMYK definition.

    **Returns:** object
- name: _base/Color#toCss()
  id: dojo/_base/color#1_10dojo__base_Color_toCss
  summary: null
  belongs_to: _base/Color
  description: "### `toCss` `(includeAlpha)`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns a css color string in rgb(a) representation\n\n[TABLE]\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var c = new Color(\"#FFF\").toCss();\n    console.log(c); // rgb('255','255','255')\n});\n    \n```"
- name: _base/Color#toHex()
  id: dojo/_base/color#1_10dojo__base_Color_toHex
  summary: null
  belongs_to: _base/Color
  description: "### `toHex` `()`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns a CSS color string in hexadecimal representation\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    console.log(new Color([0,0,0]).toHex()); // #000000\n});\n    \n```"
- name: _base/Color#toHsl()
  id: dojo/_base/color#1_10dojo__base_Color_toHsl
  summary: Convert this Color to an HSL definition
  belongs_to: _base/Color
  description: |-
    ### `toHsl` `()`

    Defined by [dojox/color/\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)

    Convert this Color to an HSL definition.

    **Returns:** object
- name: _base/Color#toHsv()
  id: dojo/_base/color#1_10dojo__base_Color_toHsv
  summary: Convert this Color to an HSV definition
  belongs_to: _base/Color
  description: |-
    ### `toHsv` `()`

    Defined by [dojox/color/\_base](http://dojotoolkit.org/api/1.10/dojox/color/_base)

    Convert this Color to an HSV definition.

    **Returns:** object
- name: _base/Color#toRgb()
  id: dojo/_base/color#1_10dojo__base_Color_toRgb
  summary: null
  belongs_to: _base/Color
  description: "### `toRgb` `()`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns 3 component array of rgb values\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var c = new Color(\"#000000\");\n    console.log(c.toRgb()); // [0,0,0]\n});\n    \n```"
- name: _base/Color#toRgba()
  id: dojo/_base/color#1_10dojo__base_Color_toRgba
  summary: Returns a 4 component array of rgba values from the color represented by this object
  belongs_to: _base/Color
  description: |-
    ### `toRgba` `()`

    Defined by [dojo/\_base/Color](color)

    Returns a 4 component array of rgba values from the color represented by this object.

    **Returns:** Array
- name: _base/Color#toString()
  id: dojo/_base/color#1_10dojo__base_Color_toString
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/Color
  description: "### `toString` `()`\n\nDefined by [dojo/\\_base/Color](color)\n\nReturns a visual representation of the color\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/Color.html](http://dojotoolkit.org/api/1.10/dojo/_base/Color.html)"
- name: _base/Color.named
  id: dojo/_base/color.named
  summary: Dictionary list of all CSS named colors, by name
  description: "# dojo/\\_base/Color.named\n\n## Summary\n\nDictionary list of all CSS named colors, by name. Values are 3-item arrays with corresponding RG and B values.\n\n## Properties\n\n### aliceblue\n\nDefined by: [dojo/colors](../colors)\n\n### antiquewhite\n\nDefined by: [dojo/colors](../colors)\n\n### aqua\n\nDefined by: [dojo/\\_base/Color](color)\n\n### aquamarine\n\nDefined by: [dojo/colors](../colors)\n\n### azure\n\nDefined by: [dojo/colors](../colors)\n\n### beige\n\nDefined by: [dojo/colors](../colors)\n\n### bisque\n\nDefined by: [dojo/colors](../colors)\n\n### black\n\nDefined by: [dojo/\\_base/Color](color)\n\n### blanchedalmond\n\nDefined by: [dojo/colors](../colors)\n\n### blue\n\nDefined by: [dojo/\\_base/Color](color)\n\n### blueviolet\n\nDefined by: [dojo/colors](../colors)\n\n### brown\n\nDefined by: [dojo/colors](../colors)\n\n### burlywood\n\nDefined by: [dojo/colors](../colors)\n\n### cadetblue\n\nDefined by: [dojo/colors](../colors)\n\n### chartreuse\n\nDefined by: [dojo/colors](../colors)\n\n### chocolate\n\nDefined by: [dojo/colors](../colors)\n\n### coral\n\nDefined by: [dojo/colors](../colors)\n\n### cornflowerblue\n\nDefined by: [dojo/colors](../colors)\n\n### cornsilk\n\nDefined by: [dojo/colors](../colors)\n\n### crimson\n\nDefined by: [dojo/colors](../colors)\n\n### cyan\n\nDefined by: [dojo/colors](../colors)\n\n### darkblue\n\nDefined by: [dojo/colors](../colors)\n\n### darkcyan\n\nDefined by: [dojo/colors](../colors)\n\n### darkgoldenrod\n\nDefined by: [dojo/colors](../colors)\n\n### darkgray\n\nDefined by: [dojo/colors](../colors)\n\n### darkgreen\n\nDefined by: [dojo/colors](../colors)\n\n### darkgrey\n\nDefined by: [dojo/colors](../colors)\n\n### darkkhaki\n\nDefined by: [dojo/colors](../colors)\n\n### darkmagenta\n\nDefined by: [dojo/colors](../colors)\n\n### darkolivegreen\n\nDefined by: [dojo/colors](../colors)\n\n### darkorange\n\nDefined by: [dojo/colors](../colors)\n\n### darkorchid\n\nDefined by: [dojo/colors](../colors)\n\n### darkred\n\nDefined by: [dojo/colors](../colors)\n\n### darksalmon\n\nDefined by: [dojo/colors](../colors)\n\n### darkseagreen\n\nDefined by: [dojo/colors](../colors)\n\n### darkslateblue\n\nDefined by: [dojo/colors](../colors)\n\n### darkslategray\n\nDefined by: [dojo/colors](../colors)\n\n### darkslategrey\n\nDefined by: [dojo/colors](../colors)\n\n### darkturquoise\n\nDefined by: [dojo/colors](../colors)\n\n### darkviolet\n\nDefined by: [dojo/colors](../colors)\n\n### deeppink\n\nDefined by: [dojo/colors](../colors)\n\n### deepskyblue\n\nDefined by: [dojo/colors](../colors)\n\n### dimgray\n\nDefined by: [dojo/colors](../colors)\n\n### dimgrey\n\nDefined by: [dojo/colors](../colors)\n\n### dodgerblue\n\nDefined by: [dojo/colors](../colors)\n\n### firebrick\n\nDefined by: [dojo/colors](../colors)\n\n### floralwhite\n\nDefined by: [dojo/colors](../colors)\n\n### forestgreen\n\nDefined by: [dojo/colors](../colors)\n\n### fuchsia\n\nDefined by: [dojo/\\_base/Color](color)\n\n### gainsboro\n\nDefined by: [dojo/colors](../colors)\n\n### ghostwhite\n\nDefined by: [dojo/colors](../colors)\n\n### gold\n\nDefined by: [dojo/colors](../colors)\n\n### goldenrod\n\nDefined by: [dojo/colors](../colors)\n\n### gray\n\nDefined by: [dojo/\\_base/Color](color)\n\n### green\n\nDefined by: [dojo/\\_base/Color](color)\n\n### greenyellow\n\nDefined by: [dojo/colors](../colors)\n\n### grey\n\nDefined by: [dojo/colors](../colors)\n\n### honeydew\n\nDefined by: [dojo/colors](../colors)\n\n### hotpink\n\nDefined by: [dojo/colors](../colors)\n\n### indianred\n\nDefined by: [dojo/colors](../colors)\n\n### indigo\n\nDefined by: [dojo/colors](../colors)\n\n### ivory\n\nDefined by: [dojo/colors](../colors)\n\n### khaki\n\nDefined by: [dojo/colors](../colors)\n\n### lavender\n\nDefined by: [dojo/colors](../colors)\n\n### lavenderblush\n\nDefined by: [dojo/colors](../colors)\n\n### lawngreen\n\nDefined by: [dojo/colors](../colors)\n\n### lemonchiffon\n\nDefined by: [dojo/colors](../colors)\n\n### lightblue\n\nDefined by: [dojo/colors](../colors)\n\n### lightcoral\n\nDefined by: [dojo/colors](../colors)\n\n### lightcyan\n\nDefined by: [dojo/colors](../colors)\n\n### lightgoldenrodyellow\n\nDefined by: [dojo/colors](../colors)\n\n### lightgray\n\nDefined by: [dojo/colors](../colors)\n\n### lightgreen\n\nDefined by: [dojo/colors](../colors)\n\n### lightgrey\n\nDefined by: [dojo/colors](../colors)\n\n### lightpink\n\nDefined by: [dojo/colors](../colors)\n\n### lightsalmon\n\nDefined by: [dojo/colors](../colors)\n\n### lightseagreen\n\nDefined by: [dojo/colors](../colors)\n\n### lightskyblue\n\nDefined by: [dojo/colors](../colors)\n\n### lightslategray\n\nDefined by: [dojo/colors](../colors)\n\n### lightslategrey\n\nDefined by: [dojo/colors](../colors)\n\n### lightsteelblue\n\nDefined by: [dojo/colors](../colors)\n\n### lightyellow\n\nDefined by: [dojo/colors](../colors)\n\n### lime\n\nDefined by: [dojo/\\_base/Color](color)\n\n### limegreen\n\nDefined by: [dojo/colors](../colors)\n\n### linen\n\nDefined by: [dojo/colors](../colors)\n\n### magenta\n\nDefined by: [dojo/colors](../colors)\n\n### maroon\n\nDefined by: [dojo/\\_base/Color](color)\n\n### mediumaquamarine\n\nDefined by: [dojo/colors](../colors)\n\n### mediumblue\n\nDefined by: [dojo/colors](../colors)\n\n### mediumorchid\n\nDefined by: [dojo/colors](../colors)\n\n### mediumpurple\n\nDefined by: [dojo/colors](../colors)\n\n### mediumseagreen\n\nDefined by: [dojo/colors](../colors)\n\n### mediumslateblue\n\nDefined by: [dojo/colors](../colors)\n\n### mediumspringgreen\n\nDefined by: [dojo/colors](../colors)\n\n### mediumturquoise\n\nDefined by: [dojo/colors](../colors)\n\n### mediumvioletred\n\nDefined by: [dojo/colors](../colors)\n\n### midnightblue\n\nDefined by: [dojo/colors](../colors)\n\n### mintcream\n\nDefined by: [dojo/colors](../colors)\n\n### mistyrose\n\nDefined by: [dojo/colors](../colors)\n\n### moccasin\n\nDefined by: [dojo/colors](../colors)\n\n### navajowhite\n\nDefined by: [dojo/colors](../colors)\n\n### navy\n\nDefined by: [dojo/\\_base/Color](color)\n\n### oldlace\n\nDefined by: [dojo/colors](../colors)\n\n### olive\n\nDefined by: [dojo/\\_base/Color](color)\n\n### olivedrab\n\nDefined by: [dojo/colors](../colors)\n\n### orange\n\nDefined by: [dojo/colors](../colors)\n\n### orangered\n\nDefined by: [dojo/colors](../colors)\n\n### orchid\n\nDefined by: [dojo/colors](../colors)\n\n### palegoldenrod\n\nDefined by: [dojo/colors](../colors)\n\n### palegreen\n\nDefined by: [dojo/colors](../colors)\n\n### paleturquoise\n\nDefined by: [dojo/colors](../colors)\n\n### palevioletred\n\nDefined by: [dojo/colors](../colors)\n\n### papayawhip\n\nDefined by: [dojo/colors](../colors)\n\n### peachpuff\n\nDefined by: [dojo/colors](../colors)\n\n### peru\n\nDefined by: [dojo/colors](../colors)\n\n### pink\n\nDefined by: [dojo/colors](../colors)\n\n### plum\n\nDefined by: [dojo/colors](../colors)\n\n### powderblue\n\nDefined by: [dojo/colors](../colors)\n\n### purple\n\nDefined by: [dojo/\\_base/Color](color)\n\n### red\n\nDefined by: [dojo/\\_base/Color](color)\n\n### rosybrown\n\nDefined by: [dojo/colors](../colors)\n\n### royalblue\n\nDefined by: [dojo/colors](../colors)\n\n### saddlebrown\n\nDefined by: [dojo/colors](../colors)\n\n### salmon\n\nDefined by: [dojo/colors](../colors)\n\n### sandybrown\n\nDefined by: [dojo/colors](../colors)\n\n### seagreen\n\nDefined by: [dojo/colors](../colors)\n\n### seashell\n\nDefined by: [dojo/colors](../colors)\n\n### sienna\n\nDefined by: [dojo/colors](../colors)\n\n### silver\n\nDefined by: [dojo/\\_base/Color](color)\n\n### skyblue\n\nDefined by: [dojo/colors](../colors)\n\n### slateblue\n\nDefined by: [dojo/colors](../colors)\n\n### slategray\n\nDefined by: [dojo/colors](../colors)\n\n### slategrey\n\nDefined by: [dojo/colors](../colors)\n\n### snow\n\nDefined by: [dojo/colors](../colors)\n\n### springgreen\n\nDefined by: [dojo/colors](../colors)\n\n### steelblue\n\nDefined by: [dojo/colors](../colors)\n\n### tan\n\nDefined by: [dojo/colors](../colors)\n\n### teal\n\nDefined by: [dojo/\\_base/Color](color)\n\n### thistle\n\nDefined by: [dojo/colors](../colors)\n\n### tomato\n\nDefined by: [dojo/colors](../colors)\n\n### transparent\n\nDefined by: [dojo/\\_base/Color](color)\n\n### turquoise\n\nDefined by: [dojo/colors](../colors)\n\n### violet\n\nDefined by: [dojo/colors](../colors)\n\n### wheat\n\nDefined by: [dojo/colors](../colors)\n\n### white\n\nDefined by: [dojo/\\_base/Color](color)\n\n### whitesmoke\n\nDefined by: [dojo/colors](../colors)\n\n### yellow\n\nDefined by: [dojo/\\_base/Color](color)\n\n### yellowgreen\n\nDefined by: [dojo/colors](../colors)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/Color.named.html](http://dojotoolkit.org/api/1.10/dojo/_base/Color.named.html)"
- name: _base/config
  id: dojo/_base/config
  summary: This module defines the user configuration during bootstrap
  description: "# dojo/\\_base/config\n\n## Summary\n\nThis module defines the user configuration during bootstrap.\n\nBy defining user configuration as a module value, an entire configuration can be specified in a build, thereby eliminating the need for sniffing and or explicitly setting in the global variable dojoConfig. Also, when multiple instances of dojo exist in a single application, each will necessarily be located at an unique absolute module identifier as given by the package configuration. Implementing configuration as a module allows for specifying unique, per-instance configurations.\n\nSee the [dojo/\\_base/config reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/config.html) for more information.\n\n## Examples\n\n### Example 1\n\nCreate a second instance of dojo with a different, instance-unique configuration (assume the loader and dojo.js are already loaded).\n\n``` javascript\n// specify a configuration that creates a new instance of dojo at the absolute module identifier \"myDojo\"\nrequire({\n    packages:[{\n        name:\"myDojo\",\n        location:\".\", //assume baseUrl points to dojo.js\n    }]\n});\n\n// specify a configuration for the myDojo instance\ndefine(\"myDojo/config\", {\n    // normal configuration variables go here, e.g.,\n    locale:\"fr-ca\"\n});\n\n// load and use the new instance of dojo\nrequire([\"myDojo\"], function(dojo){\n    // dojo is the new instance of dojo\n    // use as required\n});\n```\n\n## Properties\n\n### `addOnLoad`\n\nDefined by: [dojo/\\_base/config](config)\n\nAdds a callback via [dojo/ready](../ready). Useful when Dojo is added after the page loads and djConfig.afterOnLoad is true. Supports the same arguments as [dojo/ready](../ready). When using a function reference, use `djConfig.addOnLoad = function(){};`. For object with function name use `djConfig.addOnLoad = [myObject, \"functionName\"];` and for object with function reference use `djConfig.addOnLoad = [myObject, function(){}];`\n\n### afterOnLoad\n\nDefined by: [dojo/ready](../ready)\n\n### baseUrl\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### `callback`\n\nDefined by: [dojo/\\_base/config](config)\n\nDefines a callback to be used when dependencies are defined before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with deps.\n\n### debugContainerId\n\nDefined by: [dojo/\\_firebug/firebug](../_firebug/firebug)\n\n### debugHeight\n\nDefined by: [dojo/robotx](../robotx)\n\n### defaultDuration\n\nDefined by: [dojo/\\_base/config](config)\n\nDefault duration, in milliseconds, for wipe and fade animations within dijits. Assigned to dijit.defaultDuration.\n\n### deferredInstrumentation\n\nDefined by: [dojo/\\_base/config](config)\n\nWhether deferred instrumentation should be loaded or included in builds.\n\n### `deps`\n\nDefined by: [dojo/\\_base/config](config)\n\nDefines dependencies to be used before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with callback.\n\n### dojoBlankHtmlUrl\n\nDefined by: [dojo/\\_base/config](config)\n\nUsed by some modules to configure an empty iframe. Used by [dojo/io/iframe](../io/iframe) and [dojo/back](../back), and [dijit/popup](http://dojotoolkit.org/api/1.10/dijit/popup) support in IE where an iframe is needed to make sure native controls do not bleed through the popups. Normally this configuration variable does not need to be set, except when using cross-domain/CDN Dojo builds. Save dojo/resources/blank.html to your domain and set `djConfig.dojoBlankHtmlUrl` to the path on your domain your copy of blank.html.\n\n### extraLocale\n\nDefined by: [dojo/\\_base/config](config)\n\nNo default value. Specifies additional locales whose resources should also be loaded alongside the default locale when calls to `dojo.requireLocalization()` are processed.\n\n### ioPublish\n\nDefined by: [dojo/\\_base/config](config)\n\nSet this to true to enable publishing of topics for the different phases of IO operations. Publishing is done via [dojo/topic.publish()](../topic#publish). See [dojo/main.\\_\\_IoPublish](../main.__iopublish) for a list of topics that are published.\n\n### isDebug\n\nDefined by: [dojo/\\_base/config](config)\n\nDefaults to `false`. If set to `true`, ensures that Dojo provides extended debugging feedback via Firebug. If Firebug is not available on your platform, setting `isDebug` to `true` will force Dojo to pull in (and display) the version of Firebug Lite which is integrated into the Dojo distribution, thereby always providing a debugging/logging console when `isDebug` is enabled. Note that Firebug's `console.*` methods are ALWAYS defined by Dojo. If `isDebug` is false and you are on a platform without Firebug, these methods will be defined as no-ops.\n\n### locale\n\nDefined by: [dojo/\\_base/config](config)\n\nThe locale to assume for loading localized resources in this page, specified according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt). Must be specified entirely in lowercase, e.g. `en-us` and `zh-cn`. See the documentation for `dojo.i18n` and `dojo.requireLocalization` for details on loading localized resources. If no locale is specified, Dojo assumes the locale of the user agent, according to `navigator.userLanguage` or `navigator.language` properties.\n\n### modulePaths\n\nDefined by: [dojo/\\_base/config](config)\n\nA map of module names to paths relative to `dojo.baseUrl`. The key/value pairs correspond directly to the arguments which `dojo.registerModulePath` accepts. Specifying `djConfig.modulePaths = { \"foo\": \"../../bar\" }` is the equivalent of calling `dojo.registerModulePath(\"foo\", \"../../bar\");`. Multiple modules may be configured via `djConfig.modulePaths`.\n\n### parseOnLoad\n\nDefined by: [dojo/\\_base/config](config)\n\nRun the parser after the page is loaded\n\n### require\n\nDefined by: [dojo/\\_base/config](config)\n\nAn array of module names to be loaded immediately after dojo.js has been included in a page.\n\n### transparentColor\n\nDefined by: [dojo/\\_base/config](config)\n\nArray containing the r, g, b components used as transparent color in dojo.Color; if undefined, \\[255,255,255\\] (white) will be used.\n\n### urchin\n\nDefined by: [dojox/analytics/Urchin](http://dojotoolkit.org/api/1.10/dojox/analytics/Urchin)\n\nUsed by `dojox.analytics.Urchin` as the default UA-123456-7 account number used when being created. Alternately, you can pass an acct:\"\" parameter to the constructor a la: new dojox.analytics.Urchin({ acct:\"UA-123456-7\" });\n\n### useCustomLogger\n\nDefined by: [dojo/\\_base/config](config)\n\nIf set to a value that evaluates to true such as a string or array and isDebug is true and Firebug is not available or running, then it bypasses the creation of Firebug Lite allowing you to define your own console object.\n\n### useDeferredInstrumentation\n\nDefined by: [dojo/\\_base/config](config)\n\nWhether the deferred instrumentation should be used.\n\n- `\"report-rejections\"`: report each rejection as it occurs.\n- `true` or `1` or `\"report-unhandled-rejections\"`: wait 1 second in an attempt to detect unhandled rejections.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/config.html](http://dojotoolkit.org/api/1.10/dojo/_base/config.html)"
- name: _base/config#addOnLoad()
  id: dojo/_base/config#1_10dojo__base_config_addOnLoad
  summary: Adds a callback via dojo/ready
  belongs_to: _base/config
  description: |-
    ### `addOnLoad`

    Defined by: [dojo/\_base/config](config)

    Adds a callback via [dojo/ready](../ready). Useful when Dojo is added after the page loads and djConfig.afterOnLoad is true. Supports the same arguments as [dojo/ready](../ready). When using a function reference, use `djConfig.addOnLoad = function(){};`. For object with function name use `djConfig.addOnLoad = [myObject, "functionName"];` and for object with function reference use `djConfig.addOnLoad = [myObject, function(){}];`

    ### afterOnLoad

    Defined by: [dojo/ready](../ready)
- name: _base/config#baseUrl
  id: dojo/_base/config#1_10dojo__base_config_baseUrl
  summary: null
  belongs_to: _base/config
  description: |-
    ### baseUrl

    Defined by: [dojo/\_base/kernel](kernel)
- name: _base/config#callback()
  id: dojo/_base/config#1_10dojo__base_config_callback
  summary: Defines a callback to be used when dependencies are defined before the loader has been loaded
  belongs_to: _base/config
  description: |-
    ### `callback`

    Defined by: [dojo/\_base/config](config)

    Defines a callback to be used when dependencies are defined before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with deps.

    ### debugContainerId

    Defined by: [dojo/\_firebug/firebug](../_firebug/firebug)

    ### debugHeight

    Defined by: [dojo/robotx](../robotx)

    ### defaultDuration

    Defined by: [dojo/\_base/config](config)

    Default duration, in milliseconds, for wipe and fade animations within dijits. Assigned to dijit.defaultDuration.

    ### deferredInstrumentation

    Defined by: [dojo/\_base/config](config)

    Whether deferred instrumentation should be loaded or included in builds.
- name: _base/config#deps()
  id: dojo/_base/config#1_10dojo__base_config_deps
  summary: Defines dependencies to be used before the loader has been loaded
  belongs_to: _base/config
  description: |-
    ### `deps`

    Defined by: [dojo/\_base/config](config)

    Defines dependencies to be used before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with callback.

    ### dojoBlankHtmlUrl

    Defined by: [dojo/\_base/config](config)

    Used by some modules to configure an empty iframe. Used by [dojo/io/iframe](../io/iframe) and [dojo/back](../back), and [dijit/popup](http://dojotoolkit.org/api/1.10/dijit/popup) support in IE where an iframe is needed to make sure native controls do not bleed through the popups. Normally this configuration variable does not need to be set, except when using cross-domain/CDN Dojo builds. Save dojo/resources/blank.html to your domain and set `djConfig.dojoBlankHtmlUrl` to the path on your domain your copy of blank.html.

    ### extraLocale

    Defined by: [dojo/\_base/config](config)

    No default value. Specifies additional locales whose resources should also be loaded alongside the default locale when calls to `dojo.requireLocalization()` are processed.
- name: _base/config#ioPublish
  id: dojo/_base/config#1_10dojo__base_config_ioPublish
  summary: Set this to true to enable publishing of topics for the different phases of IO operations
  belongs_to: _base/config
  description: |-
    ### ioPublish

    Defined by: [dojo/\_base/config](config)

    Set this to true to enable publishing of topics for the different phases of IO operations. Publishing is done via [dojo/topic.publish()](../topic#publish). See [dojo/main.\_\_IoPublish](../main.__iopublish) for a list of topics that are published.

    ### isDebug

    Defined by: [dojo/\_base/config](config)

    Defaults to `false`. If set to `true`, ensures that Dojo provides extended debugging feedback via Firebug. If Firebug is not available on your platform, setting `isDebug` to `true` will force Dojo to pull in (and display) the version of Firebug Lite which is integrated into the Dojo distribution, thereby always providing a debugging/logging console when `isDebug` is enabled. Note that Firebug's `console.*` methods are ALWAYS defined by Dojo. If `isDebug` is false and you are on a platform without Firebug, these methods will be defined as no-ops.

    ### locale

    Defined by: [dojo/\_base/config](config)

    The locale to assume for loading localized resources in this page, specified according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt). Must be specified entirely in lowercase, e.g. `en-us` and `zh-cn`. See the documentation for `dojo.i18n` and `dojo.requireLocalization` for details on loading localized resources. If no locale is specified, Dojo assumes the locale of the user agent, according to `navigator.userLanguage` or `navigator.language` properties.
- name: _base/config#modulePaths
  id: dojo/_base/config#1_10dojo__base_config_modulePaths
  summary: A map of module names to paths relative to dojo.baseUrl
  belongs_to: _base/config
  description: |-
    ### modulePaths

    Defined by: [dojo/\_base/config](config)

    A map of module names to paths relative to `dojo.baseUrl`. The key/value pairs correspond directly to the arguments which `dojo.registerModulePath` accepts. Specifying `djConfig.modulePaths = { "foo": "../../bar" }` is the equivalent of calling `dojo.registerModulePath("foo", "../../bar");`. Multiple modules may be configured via `djConfig.modulePaths`.

    ### parseOnLoad

    Defined by: [dojo/\_base/config](config)

    Run the parser after the page is loaded
- name: _base/config#require
  id: dojo/_base/config#1_10dojo__base_config_require
  summary: An array of module names to be loaded immediately after dojo.js has been included in a page
  belongs_to: _base/config
  description: |-
    ### require

    Defined by: [dojo/\_base/config](config)

    An array of module names to be loaded immediately after dojo.js has been included in a page.

    ### transparentColor

    Defined by: [dojo/\_base/config](config)

    Array containing the r, g, b components used as transparent color in dojo.Color; if undefined, \[255,255,255\] (white) will be used.

    ### urchin

    Defined by: [dojox/analytics/Urchin](http://dojotoolkit.org/api/1.10/dojox/analytics/Urchin)

    Used by `dojox.analytics.Urchin` as the default UA-123456-7 account number used when being created. Alternately, you can pass an acct:"" parameter to the constructor a la: new dojox.analytics.Urchin({ acct:"UA-123456-7" });
- name: _base/config#useCustomLogger
  id: dojo/_base/config#1_10dojo__base_config_useCustomLogger
  summary: If set to a value that evaluates to true such as a string or array and isDebug is true and Firebug is not available or running, then it bypasses the creation of Firebug Lite allowing you to define your own console object
  belongs_to: _base/config
  description: "### useCustomLogger\n\nDefined by: [dojo/\\_base/config](config)\n\nIf set to a value that evaluates to true such as a string or array and isDebug is true and Firebug is not available or running, then it bypasses the creation of Firebug Lite allowing you to define your own console object.\n\n### useDeferredInstrumentation\n\nDefined by: [dojo/\\_base/config](config)\n\nWhether the deferred instrumentation should be used.\n\n- `\"report-rejections\"`: report each rejection as it occurs.\n- `true` or `1` or `\"report-unhandled-rejections\"`: wait 1 second in an attempt to detect unhandled rejections.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/config.html](http://dojotoolkit.org/api/1.10/dojo/_base/config.html)"
- name: _base/config.modulePaths
  id: dojo/_base/config.modulepaths
  summary: A map of module names to paths relative to dojo.baseUrl
  description: "# dojo/\\_base/config.modulePaths\n\n## Summary\n\nA map of module names to paths relative to `dojo.baseUrl`. The key/value pairs correspond directly to the arguments which `dojo.registerModulePath` accepts. Specifying `djConfig.modulePaths = { \"foo\": \"../../bar\" }` is the equivalent of calling `dojo.registerModulePath(\"foo\", \"../../bar\");`. Multiple modules may be configured via `djConfig.modulePaths`.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/config.modulePaths.html](http://dojotoolkit.org/api/1.10/dojo/_base/config.modulePaths.html)"
- name: _base/connect
  id: dojo/_base/connect
  summary: This module defines the dojo.connect API
  description: "# dojo/\\_base/connect\n\n## Summary\n\nThis module defines the dojo.connect API. This modules also provides keyboard event handling helpers. This module exports an extension event for emulating Firefox's keypress handling. However, this extension event exists primarily for backwards compatibility and is not recommended. WebKit and IE uses an alternate keypress handling (only firing for printable characters, to distinguish from keydown events), and most consider the WebKit/IE behavior more desirable.\n\nSee the [dojo/\\_base/connect reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/connect.html) for more information.\n\n## Methods\n\n### `connect``(obj,event,context,method,dontFix)`\n\nDefined by [dojo/\\_base/connect](connect)\n\n`dojo.connect` is a deprecated event handling and delegation method in Dojo. It allows one function to \"listen in\" on the execution of any other, triggering the second whenever the first is called. Many listeners may be attached to a function, and source functions may be either regular function calls or DOM events.\n\nConnects listeners to actions, so that after event fires, a listener is called with the same arguments passed to the original function.\n\nSince `dojo.connect` allows the source of events to be either a \"regular\" JavaScript function or a DOM event, it provides a uniform interface for listening to all the types of events that an application is likely to deal with though a single, unified interface. DOM programmers may want to think of it as \"addEventListener for everything and anything\".\n\nWhen setting up a connection, the `event` parameter must be a string that is the name of the method/event to be listened for. If `obj` is null, `kernel.global` is assumed, meaning that connections to global methods are supported but also that you may inadvertently connect to a global by passing an incorrect object name or invalid reference.\n\n`dojo.connect` generally is forgiving. If you pass the name of a function or method that does not yet exist on `obj`, connect will not fail, but will instead set up a stub method. Similarly, null arguments may simply be omitted such that fewer than 4 arguments may be required to set up a connection See the examples for details.\n\nThe return value is a handle that is needed to remove this connection with `dojo.disconnect`.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nWhen obj.onchange(), do ui.update():\n\n``` javascript\ndojo.connect(obj, \"onchange\", ui, \"update\");\ndojo.connect(obj, \"onchange\", ui, ui.update); // same\n```\n\n### Example 2\n\nUsing return value for disconnect:\n\n``` javascript\nvar link = dojo.connect(obj, \"onchange\", ui, \"update\");\n...\ndojo.disconnect(link);\n```\n\n### Example 3\n\nWhen onglobalevent executes, watcher.handler is invoked:\n\n``` javascript\ndojo.connect(null, \"onglobalevent\", watcher, \"handler\");\n```\n\n### Example 4\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked:\n\n``` javascript\ndojo.connect(ob, \"onCustomEvent\", null, \"customEventHandler\");\ndojo.connect(ob, \"onCustomEvent\", \"customEventHandler\"); // same\n```\n\n### Example 5\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked with the same scope (this):\n\n``` javascript\ndojo.connect(ob, \"onCustomEvent\", null, customEventHandler);\ndojo.connect(ob, \"onCustomEvent\", customEventHandler); // same\n```\n\n### Example 6\n\nWhen globalEvent executes, globalHandler is invoked with the same scope (this):\n\n``` javascript\ndojo.connect(null, \"globalEvent\", null, globalHandler);\ndojo.connect(\"globalEvent\", globalHandler); // same\n```\n\n### `connectPublisher``(topic,obj,event)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nEnsure that every time obj.event() is called, a message is published on the topic. Returns a handle which can be passed to dojo.disconnect() to disable subsequent automatic publication on the topic.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.connectPublisher(\"/ajax/start\", dojo, \"xhrGet\");\n```\n\n### `disconnect``(handle)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nRemove a link created by dojo.connect.\n\nRemoves the connection between event and the method referenced by handle.\n\n|           |        |                                                                        |\n|-----------|--------|------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                            |\n| handle    | Handle | the return value of the dojo.connect call that created the connection. |\n\n### `isCopyKey``(e)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nChecks an event for the copy key (meta on Mac, and ctrl anywhere else)\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** undefined\n\n### `publish``(topic,args)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nInvoke all listener method subscribed to topic.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\ndojo.publish(\"alerts\", [ \"read this\", \"hello world\" ]);\n```\n\n### `subscribe``(topic,context,method)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nAttach a listener to a named topic. The listener function is invoked whenever the named topic is published (see: dojo.publish). Returns a handle which is needed to unsubscribe this listener.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); });\ndojo.publish(\"alerts\", [ \"read this\", \"hello world\" ]);\n```\n\n### `unsubscribe``(handle)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nRemove a topic listener.\n\n|           |        |                                               |\n|-----------|--------|-----------------------------------------------|\n| Parameter | Type   | Description                                   |\n| handle    | Handle | The handle returned from a call to subscribe. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar alerter = dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\n...\ndojo.unsubscribe(alerter);\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/connect.html](http://dojotoolkit.org/api/1.10/dojo/_base/connect.html)"
- name: _base/connect#connect()
  id: dojo/_base/connect#1_10dojo__base_connect_connect
  summary: dojo.connect is a deprecated event handling and delegation method in Dojo
  belongs_to: _base/connect
  description: "### `connect` `(obj,event,context,method,dontFix)`\n\nDefined by [dojo/\\_base/connect](connect)\n\n`dojo.connect` is a deprecated event handling and delegation method in Dojo. It allows one function to \"listen in\" on the execution of any other, triggering the second whenever the first is called. Many listeners may be attached to a function, and source functions may be either regular function calls or DOM events.\n\nConnects listeners to actions, so that after event fires, a listener is called with the same arguments passed to the original function.\n\nSince `dojo.connect` allows the source of events to be either a \"regular\" JavaScript function or a DOM event, it provides a uniform interface for listening to all the types of events that an application is likely to deal with though a single, unified interface. DOM programmers may want to think of it as \"addEventListener for everything and anything\".\n\nWhen setting up a connection, the `event` parameter must be a string that is the name of the method/event to be listened for. If `obj` is null, `kernel.global` is assumed, meaning that connections to global methods are supported but also that you may inadvertently connect to a global by passing an incorrect object name or invalid reference.\n\n`dojo.connect` generally is forgiving. If you pass the name of a function or method that does not yet exist on `obj`, connect will not fail, but will instead set up a stub method. Similarly, null arguments may simply be omitted such that fewer than 4 arguments may be required to set up a connection See the examples for details.\n\nThe return value is a handle that is needed to remove this connection with `dojo.disconnect`.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nWhen obj.onchange(), do ui.update():\n\n``` javascript\n      dojo.connect(obj, \"onchange\", ui, \"update\");\ndojo.connect(obj, \"onchange\", ui, ui.update); // same\n    \n```\n\n### Example 2\n\nUsing return value for disconnect:\n\n``` javascript\n      var link = dojo.connect(obj, \"onchange\", ui, \"update\");\n...\ndojo.disconnect(link);\n    \n```\n\n### Example 3\n\nWhen onglobalevent executes, watcher.handler is invoked:\n\n``` javascript\n      dojo.connect(null, \"onglobalevent\", watcher, \"handler\");\n    \n```\n\n### Example 4\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked:\n\n``` javascript\n      dojo.connect(ob, \"onCustomEvent\", null, \"customEventHandler\");\ndojo.connect(ob, \"onCustomEvent\", \"customEventHandler\"); // same\n    \n```\n\n### Example 5\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked with the same scope (this):\n\n``` javascript\n      dojo.connect(ob, \"onCustomEvent\", null, customEventHandler);\ndojo.connect(ob, \"onCustomEvent\", customEventHandler); // same\n    \n```\n\n### Example 6\n\nWhen globalEvent executes, globalHandler is invoked with the same scope (this):\n\n``` javascript\n      dojo.connect(null, \"globalEvent\", null, globalHandler);\ndojo.connect(\"globalEvent\", globalHandler); // same\n    \n```"
- name: _base/connect#connectPublisher()
  id: dojo/_base/connect#1_10dojo__base_connect_connectPublisher
  summary: Ensure that every time obj.event() is called, a message is published on the topic
  belongs_to: _base/connect
  description: "### `connectPublisher` `(topic,obj,event)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nEnsure that every time obj.event() is called, a message is published on the topic. Returns a handle which can be passed to dojo.disconnect() to disable subsequent automatic publication on the topic.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.connectPublisher(\"/ajax/start\", dojo, \"xhrGet\");\n    \n```"
- name: _base/connect#disconnect()
  id: dojo/_base/connect#1_10dojo__base_connect_disconnect
  summary: Remove a link created by dojo.connect
  belongs_to: _base/connect
  description: |-
    ### `disconnect` `(handle)`

    Defined by [dojo/\_base/connect](connect)

    Remove a link created by dojo.connect.

    Removes the connection between event and the method referenced by handle.

    |           |        |                                                                        |
    |-----------|--------|------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                            |
    | handle    | Handle | the return value of the dojo.connect call that created the connection. |
- name: _base/connect#isCopyKey()
  id: dojo/_base/connect#1_10dojo__base_connect_isCopyKey
  summary: null
  belongs_to: _base/connect
  description: |-
    ### `isCopyKey` `(e)`

    Defined by [dojo/\_base/connect](connect)

    Checks an event for the copy key (meta on Mac, and ctrl anywhere else)

    |           |       |                         |
    |-----------|-------|-------------------------|
    | Parameter | Type  | Description             |
    | e         | Event | Event object to examine |

    **Returns:** undefined
- name: _base/connect#publish()
  id: dojo/_base/connect#1_10dojo__base_connect_publish
  summary: Invoke all listener method subscribed to topic
  belongs_to: _base/connect
  description: "### `publish` `(topic,args)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nInvoke all listener method subscribed to topic.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\ndojo.publish(\"alerts\", [ \"read this\", \"hello world\" ]);\n    \n```"
- name: _base/connect#subscribe()
  id: dojo/_base/connect#1_10dojo__base_connect_subscribe
  summary: Attach a listener to a named topic
  belongs_to: _base/connect
  description: "### `subscribe` `(topic,context,method)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nAttach a listener to a named topic. The listener function is invoked whenever the named topic is published (see: dojo.publish). Returns a handle which is needed to unsubscribe this listener.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); });\ndojo.publish(\"alerts\", [ \"read this\", \"hello world\" ]);\n    \n```"
- name: _base/connect#unsubscribe()
  id: dojo/_base/connect#1_10dojo__base_connect_unsubscribe
  summary: Remove a topic listener
  belongs_to: _base/connect
  description: "### `unsubscribe` `(handle)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nRemove a topic listener.\n\n|           |        |                                               |\n|-----------|--------|-----------------------------------------------|\n| Parameter | Type   | Description                                   |\n| handle    | Handle | The handle returned from a call to subscribe. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var alerter = dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\n...\ndojo.unsubscribe(alerter);\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/connect.html](http://dojotoolkit.org/api/1.10/dojo/_base/connect.html)"
- name: _base/declare
  id: dojo/_base/declare
  summary: Create a feature-rich constructor from compact notation
  description: "# dojo/\\_base/declare\n\n## Summary\n\nCreate a feature-rich constructor from compact notation.\n\nCreate a constructor using a compact notation for inheritance and prototype extension.\n\nMixin ancestors provide a type of multiple inheritance. Prototypes of mixin ancestors are copied to the new class: changes to mixin prototypes will not affect classes to which they have been mixed in.\n\nAncestors can be compound classes created by this version of declare(). In complex cases all base classes are going to be linearized according to C3 MRO algorithm (see <http://www.python.org/download/releases/2.3/mro/> for more details).\n\n\"className\" is cached in \"declaredClass\" property of the new class, if it was supplied. The immediate super class will be cached in \"superclass\" property of the new class.\n\nMethods in \"props\" will be copied and modified: \"nom\" property (the declared name of the method) will be added to all copied functions to help identify them for the internal machinery. Be very careful, while reusing methods: if you use the same function under different names, it can produce errors in some cases.\n\nIt is possible to use constructors created \"manually\" (without declare()) as bases. They will be called as usual during the creation of an instance, their methods will be chained, and even called by \"this.inherited()\".\n\nSpecial property \"-chains-\" governs how to chain methods. It is a dictionary, which uses method names as keys, and hint strings as values. If a hint string is \"after\", this method will be called after methods of its base classes. If a hint string is \"before\", this method will be called before methods of its base classes.\n\nIf \"constructor\" is not mentioned in \"-chains-\" property, it will be chained using the legacy mode: using \"after\" chaining, calling preamble() method before each constructor, if available, and calling postscript() after all constructors were executed. If the hint is \"after\", it is chained as a regular method, but postscript() will be called after the chain of constructors. \"constructor\" cannot be chained \"before\", but it allows a special hint string: \"manual\", which means that constructors are not going to be chained in any way, and programmer will call them manually using this.inherited(). In the latter case postscript() will be called after the construction.\n\nAll chaining hints are \"inherited\" from base classes and potentially can be overridden. Be very careful when overriding hints! Make sure that all chained methods can work in a proposed manner of chaining.\n\nOnce a method was chained, it is impossible to unchain it. The only exception is \"constructor\". You don't need to define a method in order to supply a chaining hint.\n\nIf a method is chained, it cannot use this.inherited() because all other methods in the hierarchy will be called automatically.\n\nUsually constructors and initializers of any kind are chained using \"after\" and destructors of any kind are chained as \"before\". Note that chaining assumes that chained methods do not return any value: any returned value will be discarded.\n\n## Usage\n\ndeclare`(className,superclass,props);`\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/declare.\\_\\_DeclareCreatedObject](declare.__declarecreatedobject) \\| undefined\n\nNew constructor function.\n\nSee the [dojo/\\_base/declare reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/declare.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\ndeclare(\"my.classes.bar\", my.classes.foo, {\n    // properties to be added to the class prototype\n    someValue: 2,\n    // initialization function\n    constructor: function(){\n        this.myComplicatedObject = new ReallyComplicatedObject();\n    },\n    // other functions\n    someMethod: function(){\n        doStuff();\n    }\n});\n```\n\n### Example 2\n\n``` javascript\nvar MyBase = declare(null, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass1 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass2 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyDiamond = declare([MyClass1, MyClass2], {\n    // constructor, properties, and methods go here\n    // ...\n});\n```\n\n### Example 3\n\n``` javascript\nvar F = function(){ console.log(\"raw constructor\"); };\nF.prototype.method = function(){\n    console.log(\"raw method\");\n};\nvar A = declare(F, {\n    constructor: function(){\n        console.log(\"A.constructor\");\n    },\n    method: function(){\n        console.log(\"before calling F.method...\");\n        this.inherited(arguments);\n        console.log(\"...back in A\");\n    }\n});\nnew A().method();\n// will print:\n// raw constructor\n// A.constructor\n// before calling F.method...\n// raw method\n// ...back in A\n```\n\n### Example 4\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        destroy: \"before\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        console.log(\"B.constructor\");\n    },\n    destroy: function(){\n        console.log(\"B.destroy\");\n    }\n});\nvar C = declare(B, {\n    constructor: function(){\n        console.log(\"C.constructor\");\n    },\n    destroy: function(){\n        console.log(\"C.destroy\");\n    }\n});\nnew C().destroy();\n// prints:\n// B.constructor\n// C.constructor\n// C.destroy\n// B.destroy\n```\n\n### Example 5\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        constructor: \"manual\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        // ...\n        // call the base constructor with new parameters\n        this.inherited(arguments, [1, 2, 3]);\n        // ...\n    }\n});\n```\n\n### Example 6\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        m1: \"before\"\n    },\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    \"-chains-\": {\n        m2: \"after\"\n    },\n    m1: function(){\n        console.log(\"B.m1\");\n    },\n    m2: function(){\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\nx.m1();\n// prints:\n// B.m1\n// A.m1\nx.m2();\n// prints:\n// A.m2\n// B.m2\n```\n\n## Properties\n\n## Methods\n\n### `safeMixin``(target,source)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nMix in properties skipping a constructor and decorating functions like it is done by declare().\n\nThis function is used to mix in properties like lang.mixin does, but it skips a constructor property and decorates functions like declare() does.\n\nIt is meant to be used with classes and objects produced with declare. Functions mixed in with dojo.safeMixin can use this.inherited() like normal methods.\n\nThis function is used to implement extend() method of a constructor produced with declare().\n\n|           |        |                                         |\n|-----------|--------|-----------------------------------------|\n| Parameter | Type   | Description                             |\n| target    | Object | Target object to accept new properties. |\n| source    | Object | Source object for new properties.       |\n\n**Returns:** Object\n\nTarget object to accept new properties.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar A = declare(null, {\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"B.m1\");\n    }\n});\nB.extend({\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\ndojo.safeMixin(x, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"X.m1\");\n    },\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"X.m2\");\n    }\n});\nx.m2();\n// prints:\n// A.m1\n// B.m1\n// X.m1\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/declare.html](http://dojotoolkit.org/api/1.10/dojo/_base/declare.html)"
- name: _base/declare#safeMixin()
  id: dojo/_base/declare#1_10dojo__base_declare_safeMixin
  summary: Mix in properties skipping a constructor and decorating functions like it is done by declare()
  belongs_to: _base/declare
  description: "### `safeMixin` `(target,source)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nMix in properties skipping a constructor and decorating functions like it is done by declare().\n\nThis function is used to mix in properties like lang.mixin does, but it skips a constructor property and decorates functions like declare() does.\n\nIt is meant to be used with classes and objects produced with declare. Functions mixed in with dojo.safeMixin can use this.inherited() like normal methods.\n\nThis function is used to implement extend() method of a constructor produced with declare().\n\n|           |        |                                         |\n|-----------|--------|-----------------------------------------|\n| Parameter | Type   | Description                             |\n| target    | Object | Target object to accept new properties. |\n| source    | Object | Source object for new properties.       |\n\n**Returns:** Object\n\nTarget object to accept new properties.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var A = declare(null, {\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"B.m1\");\n    }\n});\nB.extend({\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\ndojo.safeMixin(x, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"X.m1\");\n    },\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"X.m2\");\n    }\n});\nx.m2();\n// prints:\n// A.m1\n// B.m1\n// X.m1\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/declare.html](http://dojotoolkit.org/api/1.10/dojo/_base/declare.html)"
- name: _base/declare.__DeclareCreatedObject
  id: dojo/_base/declare.__declarecreatedobject
  summary: dojo/_base/declare() returns a constructor C
  description: "# dojo/\\_base/declare.\\_\\_DeclareCreatedObject\n\n## Summary\n\n[dojo/\\_base/declare()](declare) returns a constructor `C`. `new C()` returns an Object with the following methods, in addition to the methods and properties specified via the arguments passed to declare().\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new declare.__DeclareCreatedObject()`\n\n## Methods\n\n### `createSubclass``(mixins,props)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nCreate a subclass of the declared class from a list of base classes.\n\nCreate a constructor using a compact notation for inheritance and prototype extension.\n\nMixin ancestors provide a type of multiple inheritance. Prototypes of mixin ancestors are copied to the new class: changes to mixin prototypes will not affect classes to which they have been mixed in.\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/declare.\\_\\_DeclareCreatedObject](declare.__declarecreatedobject)\n\nNew constructor function.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar A = declare(null, {\n    m1: function(){},\n    s1: \"bar\"\n});\nvar B = declare(null, {\n    m2: function(){},\n    s2: \"foo\"\n});\nvar C = declare(null, {\n});\nvar D1 = A.createSubclass([B, C], {\n    m1: function(){},\n    d1: 42\n});\nvar d1 = new D1();\n\n// this is equivalent to:\nvar D2 = declare([A, B, C], {\n    m1: function(){},\n    d1: 42\n});\nvar d2 = new D2();\n```\n\n### `extend``(source)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nAdds all properties and methods of source to constructor's prototype, making them available to all instances created with constructor. This method is specific to constructors created with declare().\n\nAdds source properties to the constructor's prototype. It can override existing properties.\n\nThis method is similar to dojo.extend function, but it is specific to constructors produced by declare(). It is implemented using dojo.safeMixin, and it skips a constructor property, and properly decorates copied functions.\n\n|           |        |                                                                                       |\n|-----------|--------|---------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                           |\n| source    | Object | Source object which properties are going to be copied to the constructor's prototype. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar A = declare(null, {\n    m1: function(){},\n    s1: \"Popokatepetl\"\n});\nA.extend({\n    m1: function(){},\n    m2: function(){},\n    f1: true,\n    d1: 42\n});\n```\n\n### `getInherited``(name,args)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nReturns a super method.\n\nThis method is a convenience method for \"this.inherited()\". It uses the same algorithm but instead of executing a super method, it returns it, or \"undefined\" if not found.\n\n[TABLE]\n\n**Returns:** any \\| object\n\nReturns a super method (Function) or \"undefined\".\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar B = declare(A, {\n    method: function(a, b){\n        var super = this.getInherited(arguments);\n        // ...\n        if(!super){\n            console.log(\"there is no super method\");\n            return 0;\n        }\n        return super.apply(this, arguments);\n    }\n});\n```\n\n### `inherited``(name,args,newArgs)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nCalls a super method.\n\nThis method is used inside method of classes produced with declare() to call a super method (next in the chain). It is used for manually controlled chaining. Consider using the regular chaining, because it is faster. Use \"this.inherited()\" only in complex cases.\n\nThis method cannot me called from automatically chained constructors including the case of a special (legacy) constructor chaining. It cannot be called from chained methods.\n\nIf \"this.inherited()\" cannot find the next-in-chain method, it does nothing and returns \"undefined\". The last method in chain can be a default method implemented in Object, which will be called last.\n\nIf \"name\" is specified, it is assumed that the method that received \"args\" is the parent method for this call. It is looked up in the chain list and if it is found the next-in-chain method is called. If it is not found, the first-in-chain method is called.\n\nIf \"name\" is not specified, it will be derived from the calling method (using a methoid property \"nom\").\n\n[TABLE]\n\n**Returns:** any \\| object\n\nWhatever is returned by a super method, or a super method itself, if \"true\" was specified as newArgs.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar B = declare(A, {\n    method1: function(a, b, c){\n        this.inherited(arguments);\n    },\n    method2: function(a, b){\n        return this.inherited(arguments, [a + b]);\n    }\n});\n// next method is not in the chain list because it is added\n// manually after the class was created.\nB.prototype.method3 = function(){\n    console.log(\"This is a dynamically-added method.\");\n    this.inherited(\"method3\", arguments);\n};\n```\n\n### Example 2\n\n``` javascript\nvar B = declare(A, {\n    method: function(a, b){\n        var super = this.inherited(arguments, true);\n        // ...\n        if(!super){\n            console.log(\"there is no super method\");\n            return 0;\n        }\n        return super.apply(this, arguments);\n    }\n});\n```\n\n### `isInstanceOf``(cls)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nChecks the inheritance chain to see if it is inherited from this class.\n\nThis method is used with instances of classes produced with declare() to determine of they support a certain interface or not. It models \"instanceof\" operator.\n\n|           |          |                    |\n|-----------|----------|--------------------|\n| Parameter | Type     | Description        |\n| cls       | Function | Class constructor. |\n\n**Returns:** any \\| object\n\n\"true\", if this object is inherited from this class, \"false\" otherwise.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar A = declare(null, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar B = declare(null, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar C = declare([A, B], {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar D = declare(A, {\n    // constructor, properties, and methods go here\n    // ...\n});\n\nvar a = new A(), b = new B(), c = new C(), d = new D();\n\nconsole.log(a.isInstanceOf(A)); // true\nconsole.log(b.isInstanceOf(A)); // false\nconsole.log(c.isInstanceOf(A)); // true\nconsole.log(d.isInstanceOf(A)); // true\n\nconsole.log(a.isInstanceOf(B)); // false\nconsole.log(b.isInstanceOf(B)); // true\nconsole.log(c.isInstanceOf(B)); // true\nconsole.log(d.isInstanceOf(B)); // false\n\nconsole.log(a.isInstanceOf(C)); // false\nconsole.log(b.isInstanceOf(C)); // false\nconsole.log(c.isInstanceOf(C)); // true\nconsole.log(d.isInstanceOf(C)); // false\n\nconsole.log(a.isInstanceOf(D)); // false\nconsole.log(b.isInstanceOf(D)); // false\nconsole.log(c.isInstanceOf(D)); // false\nconsole.log(d.isInstanceOf(D)); // true\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/declare.\\_\\_DeclareCreatedObject.html](http://dojotoolkit.org/api/1.10/dojo/_base/declare.__DeclareCreatedObject.html)"
- name: _base/Deferred
  id: dojo/_base/deferred
  summary: Deprecated
  description: "# dojo/\\_base/Deferred\n\n## Summary\n\nDeprecated. This module defines the legacy [dojo/\\_base/Deferred](deferred) API. New code should use [dojo/Deferred](../deferred) instead.\n\nThe Deferred API is based on the concept of promises that provide a generic interface into the eventual completion of an asynchronous action. The motivation for promises fundamentally is about creating a separation of concerns that allows one to achieve the same type of call patterns and logical data flow in asynchronous code as can be achieved in synchronous code. Promises allows one to be able to call a function purely with arguments needed for execution, without conflating the call with concerns of whether it is sync or async. One shouldn't need to alter a call's arguments if the implementation switches from sync to async (or vice versa). By having async functions return promises, the concerns of making the call are separated from the concerns of asynchronous interaction (which are handled by the promise).\n\nThe Deferred is a type of promise that provides methods for fulfilling the promise with a successful result or an error. The most important method for working with Dojo's promises is the then() method, which follows the CommonJS proposed promise API. An example of using a Dojo promise:\n\n``` javascript\nvar resultingPromise = someAsyncOperation.then(function(result){\n    ... handle result ...\n},\nfunction(error){\n    ... handle error ...\n});\n```\n\nThe .then() call returns a new promise that represents the result of the execution of the callback. The callbacks will never affect the original promises value.\n\nThe Deferred instances also provide the following functions for backwards compatibility:\n\n- addCallback(handler)\n- addErrback(handler)\n- callback(result)\n- errback(result)\n\nCallbacks are allowed to return promises themselves, so you can build complicated sequences of events with ease.\n\nThe creator of the Deferred may specify a canceller. The canceller is a function that will be called if Deferred.cancel is called before the Deferred fires. You can use this to implement clean aborting of an XMLHttpRequest, etc. Note that cancel will fire the deferred with a CancelledError (unless your canceller returns another kind of error), so the errbacks should be prepared to handle that error for cancellable Deferreds.\n\n## Usage\n\nDeferred`(canceller);`\n\n[TABLE]\n\nSee the [dojo/\\_base/Deferred reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/Deferred.html) for more information.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar deferred = new Deferred();\nsetTimeout(function(){ deferred.callback({success: true}); }, 1000);\nreturn deferred;\n```\n\n### Example 2\n\nDeferred objects are often used when making code asynchronous. It may be easiest to write functions in a synchronous manner and then split code using a deferred to trigger a response to a long-lived operation. For example, instead of register a callback function to denote when a rendering operation completes, the function can simply return a deferred:\n\n``` javascript\n// callback style:\nfunction renderLotsOfData(data, callback){\n    var success = false\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        success = true;\n    }catch(e){ }\n    if(callback){\n        callback(success);\n    }\n}\n\n\n// using callback style\nrenderLotsOfData(someDataObj, function(success){\n    // handles success or failure\n    if(!success){\n        promptUserToRecover();\n    }\n});\n// NOTE: no way to add another callback here!!\n```\n\n### Example 3\n\nUsing a Deferred doesn't simplify the sending code any, but it provides a standard interface for callers and senders alike, providing both with a simple way to service multiple callbacks for an operation and freeing both sides from worrying about details such as \"did this get called already?\". With Deferreds, new callbacks can be added at any time.\n\n``` javascript\n// Deferred style:\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        d.callback(true);\n    }catch(e){\n        d.errback(new Error(\"rendering failed\"));\n    }\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n// NOTE: addErrback and addCallback both return the Deferred\n// again, so we could chain adding callbacks or save the\n// deferred for later should we need to be notified again.\n```\n\n### Example 4\n\nIn this example, renderLotsOfData is synchronous and so both versions are pretty artificial. Putting the data display on a timeout helps show why Deferreds rock:\n\n``` javascript\n// Deferred style and async func\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    setTimeout(function(){\n        try{\n            for(var x in data){\n                renderDataitem(data[x]);\n            }\n            d.callback(true);\n        }catch(e){\n            d.errback(new Error(\"rendering failed\"));\n        }\n    }, 100);\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n```\n\nNote that the caller doesn't have to change his code at all to handle the asynchronous case.\n\n## Properties\n\n### fired\n\nDefined by: [dojo/\\_base/Deferred](deferred)\n\n### promise\n\nDefined by: [dojo/\\_base/Deferred](deferred)\n\n## Methods\n\n### `addBoth``(callback)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nAdd handler as both successful callback and error callback for this deferred instance.\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| callback  | Function |             |\n\n**Returns:** any \\| undefined\n\nReturns this deferred object.\n\n### `addCallback``(callback)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nAdds successful callback for this deferred instance.\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| callback  | Function |             |\n\n**Returns:** any \\| undefined\n\nReturns this deferred object.\n\n### `addCallbacks``(callback,errback)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nAdds callback and error callback for this deferred instance.\n\n[TABLE]\n\n**Returns:** any\n\nReturns this deferred object.\n\n### `addErrback``(errback)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nAdds error callback for this deferred instance.\n\n|           |          |             |\n|-----------|----------|-------------|\n| Parameter | Type     | Description |\n| errback   | Function |             |\n\n**Returns:** any \\| undefined\n\nReturns this deferred object.\n\n### `callback``(value)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nFulfills the Deferred instance successfully with the provide value\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| value     | undefined |             |\n\n### `cancel``()`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nCancels the asynchronous operation\n\n### `errback``(error)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nFulfills the Deferred instance as an error with the provided error\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| error     | undefined |             |\n\n### `isCanceled``()`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nChecks whether the deferred has been canceled.\n\n**Returns:** Boolean\n\n### `isFulfilled``()`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nChecks whether the deferred has been resolved or rejected.\n\n**Returns:** Boolean\n\n### `isRejected``()`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nChecks whether the deferred has been rejected.\n\n**Returns:** Boolean\n\n### `isResolved``()`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nChecks whether the deferred has been resolved.\n\n**Returns:** Boolean\n\n### `progress``(update)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nSend progress events to all listeners\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| update    | undefined |             |\n\n### `reject``(error)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nFulfills the Deferred instance as an error with the provided error\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| error     | undefined |             |\n\n### `resolve``(value)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nFulfills the Deferred instance successfully with the provide value\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| value     | undefined |             |\n\n### `then``(resolvedCallback,errorCallback,progressCallback)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nAdds a fulfilledHandler, errorHandler, and progressHandler to be called for completion of a promise. The fulfilledHandler is called when the promise is fulfilled. The errorHandler is called when a promise fails. The progressHandler is called for progress events. All arguments are optional and non-function values are ignored. The progressHandler is not only an optional argument, but progress events are purely optional. Promise providers are not required to ever create progress events.\n\nThis function will return a new promise that is fulfilled when the given fulfilledHandler or errorHandler callback is finished. This allows promise operations to be chained together. The value returned from the callback handler is the fulfillment value for the returned promise. If the callback throws an error, the returned promise will be moved to failed state.\n\n[TABLE]\n\n**Returns:** any\n\nReturns a new promise that represents the result of the execution of the callback. The callbacks will never affect the original promises value.\n\n## Examples\n\n### Example 1\n\nAn example of using a CommonJS compliant promise:\n\n``` javascript\nasyncComputeTheAnswerToEverything().\n    then(addTwo).\n    then(printResult, onError);\n>44\n```\n\n### `when``(valueOrPromise,callback,errback,progback)`\n\nDefined by [dojo/when](../when)\n\nTransparently applies callbacks to values and/or promises.\n\nAccepts promises but also transparently handles non-promises. If no callbacks are provided returns a promise, regardless of the initial value. Foreign promises are converted.\n\nIf callbacks are provided and the initial value is not a promise, the callback is executed immediately with no error handling. Returns a promise if the initial value is a promise, or the result of the callback otherwise.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](../promise/promise) \\| summary: \\| name:\n\nPromise, or if a callback is provided, the result of the callback.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/Deferred.html](http://dojotoolkit.org/api/1.10/dojo/_base/Deferred.html)"
- name: _base/Deferred#addBoth()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_addBoth
  summary: Add handler as both successful callback and error callback for this deferred instance
  belongs_to: _base/Deferred
  description: |-
    ### `addBoth` `(callback)`

    Defined by [dojo/\_base/Deferred](deferred)

    Add handler as both successful callback and error callback for this deferred instance.

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | callback  | Function |             |

    **Returns:** any \| undefined

    Returns this deferred object.
- name: _base/Deferred#addCallback()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_addCallback
  summary: Adds successful callback for this deferred instance
  belongs_to: _base/Deferred
  description: |-
    ### `addCallback` `(callback)`

    Defined by [dojo/\_base/Deferred](deferred)

    Adds successful callback for this deferred instance.

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | callback  | Function |             |

    **Returns:** any \| undefined

    Returns this deferred object.
- name: _base/Deferred#addCallbacks()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_addCallbacks
  summary: Adds callback and error callback for this deferred instance
  belongs_to: _base/Deferred
  description: |-
    ### `addCallbacks` `(callback,errback)`

    Defined by [dojo/\_base/Deferred](deferred)

    Adds callback and error callback for this deferred instance.

    [TABLE]

    **Returns:** any

    Returns this deferred object.
- name: _base/Deferred#addErrback()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_addErrback
  summary: Adds error callback for this deferred instance
  belongs_to: _base/Deferred
  description: |-
    ### `addErrback` `(errback)`

    Defined by [dojo/\_base/Deferred](deferred)

    Adds error callback for this deferred instance.

    |           |          |             |
    |-----------|----------|-------------|
    | Parameter | Type     | Description |
    | errback   | Function |             |

    **Returns:** any \| undefined

    Returns this deferred object.
- name: _base/Deferred#callback()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_callback
  summary: null
  belongs_to: _base/Deferred
  description: |-
    ### `callback` `(value)`

    Defined by [dojo/\_base/Deferred](deferred)

    Fulfills the Deferred instance successfully with the provide value

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | value     | undefined |             |
- name: _base/Deferred#cancel()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_cancel
  summary: null
  belongs_to: _base/Deferred
  description: |-
    ### `cancel` `()`

    Defined by [dojo/\_base/Deferred](deferred)

    Cancels the asynchronous operation
- name: _base/Deferred#errback()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_errback
  summary: null
  belongs_to: _base/Deferred
  description: |-
    ### `errback` `(error)`

    Defined by [dojo/\_base/Deferred](deferred)

    Fulfills the Deferred instance as an error with the provided error

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | error     | undefined |             |
- name: _base/Deferred#isCanceled()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_isCanceled
  summary: Checks whether the deferred has been canceled
  belongs_to: _base/Deferred
  description: |-
    ### `isCanceled` `()`

    Defined by [dojo/\_base/Deferred](deferred)

    Checks whether the deferred has been canceled.

    **Returns:** Boolean
- name: _base/Deferred#isFulfilled()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_isFulfilled
  summary: Checks whether the deferred has been resolved or rejected
  belongs_to: _base/Deferred
  description: |-
    ### `isFulfilled` `()`

    Defined by [dojo/\_base/Deferred](deferred)

    Checks whether the deferred has been resolved or rejected.

    **Returns:** Boolean
- name: _base/Deferred#isRejected()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_isRejected
  summary: Checks whether the deferred has been rejected
  belongs_to: _base/Deferred
  description: |-
    ### `isRejected` `()`

    Defined by [dojo/\_base/Deferred](deferred)

    Checks whether the deferred has been rejected.

    **Returns:** Boolean
- name: _base/Deferred#isResolved()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_isResolved
  summary: Checks whether the deferred has been resolved
  belongs_to: _base/Deferred
  description: |-
    ### `isResolved` `()`

    Defined by [dojo/\_base/Deferred](deferred)

    Checks whether the deferred has been resolved.

    **Returns:** Boolean
- name: _base/Deferred#progress()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_progress
  summary: null
  belongs_to: _base/Deferred
  description: |-
    ### `progress` `(update)`

    Defined by [dojo/\_base/Deferred](deferred)

    Send progress events to all listeners

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | update    | undefined |             |
- name: _base/Deferred#promise
  id: dojo/_base/deferred#1_10dojo__base_Deferred_promise
  summary: null
  belongs_to: _base/Deferred
  description: |-
    ### promise

    Defined by: [dojo/\_base/Deferred](deferred)

    ## Methods
- name: _base/Deferred#reject()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_reject
  summary: null
  belongs_to: _base/Deferred
  description: |-
    ### `reject` `(error)`

    Defined by [dojo/\_base/Deferred](deferred)

    Fulfills the Deferred instance as an error with the provided error

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | error     | undefined |             |
- name: _base/Deferred#resolve()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_resolve
  summary: null
  belongs_to: _base/Deferred
  description: |-
    ### `resolve` `(value)`

    Defined by [dojo/\_base/Deferred](deferred)

    Fulfills the Deferred instance successfully with the provide value

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | value     | undefined |             |
- name: _base/Deferred#then()
  id: dojo/_base/deferred#1_10dojo__base_Deferred_then
  summary: Adds a fulfilledHandler, errorHandler, and progressHandler to be called for completion of a promise
  belongs_to: _base/Deferred
  description: "### `then` `(resolvedCallback,errorCallback,progressCallback)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nAdds a fulfilledHandler, errorHandler, and progressHandler to be called for completion of a promise. The fulfilledHandler is called when the promise is fulfilled. The errorHandler is called when a promise fails. The progressHandler is called for progress events. All arguments are optional and non-function values are ignored. The progressHandler is not only an optional argument, but progress events are purely optional. Promise providers are not required to ever create progress events.\n\nThis function will return a new promise that is fulfilled when the given fulfilledHandler or errorHandler callback is finished. This allows promise operations to be chained together. The value returned from the callback handler is the fulfillment value for the returned promise. If the callback throws an error, the returned promise will be moved to failed state.\n\n[TABLE]\n\n**Returns:** any\n\nReturns a new promise that represents the result of the execution of the callback. The callbacks will never affect the original promises value.\n\n## Examples\n\n### Example 1\n\nAn example of using a CommonJS compliant promise:\n\n``` javascript\n      asyncComputeTheAnswerToEverything().\n    then(addTwo).\n    then(printResult, onError);\n>44\n    \n```\n\n### `when` `(valueOrPromise,callback,errback,progback)`\n\nDefined by [dojo/when](../when)\n\nTransparently applies callbacks to values and/or promises.\n\nAccepts promises but also transparently handles non-promises. If no callbacks are provided returns a promise, regardless of the initial value. Foreign promises are converted.\n\nIf callbacks are provided and the initial value is not a promise, the callback is executed immediately with no error handling. Returns a promise if the initial value is a promise, or the result of the callback otherwise.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](../promise/promise) \\| summary: \\| name:\n\nPromise, or if a callback is provided, the result of the callback.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/Deferred.html](http://dojotoolkit.org/api/1.10/dojo/_base/Deferred.html)"
- name: _base/event
  id: dojo/_base/event
  summary: This module defines dojo DOM event API
  description: "# dojo/\\_base/event\n\n## Summary\n\nThis module defines dojo DOM event API. Usually you should use [dojo/on](../on), and evt.stopPropagation() + evt.preventDefault(), rather than this module.\n\nSee the [dojo/\\_base/event reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/event.html) for more information.\n\n## Methods\n\n### `fix``(evt,sender)`\n\nDefined by [dojo/\\_base/event](event)\n\nnormalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions\n\n|           |         |                                  |\n|-----------|---------|----------------------------------|\n| Parameter | Type    | Description                      |\n| evt       | Event   | native event object              |\n| sender    | DOMNode | node to treat as \"currentTarget\" |\n\n**Returns:** Event\n\nnative event object\n\n### `stop``(evt)`\n\nDefined by [dojo/\\_base/event](event)\n\nprevents propagation and clobbers the default action of the passed event\n\n|           |       |                                                           |\n|-----------|-------|-----------------------------------------------------------|\n| Parameter | Type  | Description                                               |\n| evt       | Event | The event object. If omitted, window.event is used on IE. |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/event.html](http://dojotoolkit.org/api/1.10/dojo/_base/event.html)"
- name: _base/event#fix()
  id: dojo/_base/event#1_10dojo__base_event_fix
  summary: null
  belongs_to: _base/event
  description: |-
    ### `fix` `(evt,sender)`

    Defined by [dojo/\_base/event](event)

    normalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions

    |           |         |                                  |
    |-----------|---------|----------------------------------|
    | Parameter | Type    | Description                      |
    | evt       | Event   | native event object              |
    | sender    | DOMNode | node to treat as "currentTarget" |

    **Returns:** Event

    native event object
- name: _base/event#stop()
  id: dojo/_base/event#1_10dojo__base_event_stop
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/event
  description: "### `stop` `(evt)`\n\nDefined by [dojo/\\_base/event](event)\n\nprevents propagation and clobbers the default action of the passed event\n\n|           |       |                                                           |\n|-----------|-------|-----------------------------------------------------------|\n| Parameter | Type  | Description                                               |\n| evt       | Event | The event object. If omitted, window.event is used on IE. |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/event.html](http://dojotoolkit.org/api/1.10/dojo/_base/event.html)"
- name: _base/fx
  id: dojo/_base/fx
  summary: This module defines the base dojo/_base/fx implementation
  description: "# dojo/\\_base/fx\n\n## Summary\n\nThis module defines the base [dojo/\\_base/fx](fx) implementation.\n\nSee the [dojo/\\_base/fx reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/fx.html) for more information.\n\n## Methods\n\n### `anim``(node,properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nA simpler interface to `animateProperty()`, also returns an instance of `Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.\n\nSimpler (but somewhat less powerful) version of `animateProperty`. It uses defaults for many basic properties and allows for positional parameters to be used in place of the packed \"property bag\" which is used for other Dojo animation methods.\n\nThe `Animation` object returned will be already playing, so calling play() on it again is (usually) a no-op.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nFade out a node\n\n``` javascript\nbasefx.anim(\"id\", { opacity: 0 });\n```\n\n### Example 2\n\nFade out a node over a full second\n\n``` javascript\nbasefx.anim(\"id\", { opacity: 0 }, 1000);\n```\n\n### `animateProperty``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will transition the properties of node defined in `args` depending how they are defined in `args.properties`\n\nFoundation of most [dojo/\\_base/fx](fx) animations. It takes an object of \"properties\" corresponding to style properties, and animates them in parallel over a set duration.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nA simple animation that changes the width of the specified node.\n\n``` javascript\nbasefx.animateProperty({\n    node: \"nodeId\",\n    properties: { width: 400 },\n}).play();\n```\n\nDojo figures out the start value for the width and converts the\n\ninteger specified for the width to the more expressive but verbose form `{ width: { end: '400', units: 'px' } }` which you can also specify directly. Defaults to 'px' if omitted.\n\n### Example 2\n\nAnimate width, height, and padding over 2 seconds... the pedantic way:\n\n``` javascript\nbasefx.animateProperty({ node: node, duration:2000,\n    properties: {\n        width: { start: '200', end: '400', units:\"px\" },\n        height: { start:'200', end: '400', units:\"px\" },\n        paddingTop: { start:'5', end:'50', units:\"px\" }\n    }\n}).play();\n```\n\nNote 'paddingTop' is used over 'padding-top'. Multi-name CSS properties\n\nare written using \"mixed case\", as the hyphen is illegal as an object key.\n\n### Example 3\n\nPlug in a different easing function and register a callback for when the animation ends. Easing functions accept values between zero and one and return a value on that basis. In this case, an exponential-in curve.\n\n``` javascript\nbasefx.animateProperty({\n    node: \"nodeId\",\n    // dojo figures out the start value\n    properties: { width: { end: 400 } },\n    easing: function(n){\n        return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));\n    },\n    onEnd: function(node){\n        // called when the animation finishes. The animation\n        // target is passed to this function\n    }\n}).play(500); // delay playing half a second\n```\n\n### Example 4\n\nLike all `Animation`s, animateProperty returns a handle to the Animation instance, which fires the events common to Dojo FX. Use `aspect.after` to access these events outside of the Animation definition:\n\n``` javascript\nvar anim = basefx.animateProperty({\n    node:\"someId\",\n    properties:{\n        width:400, height:500\n    }\n});\naspect.after(anim, \"onEnd\", function(){\n    console.log(\"animation ended\");\n}, true);\n// play the animation now:\nanim.play();\n```\n\n### Example 5\n\nEach property can be a function whose return value is substituted along. Additionally, each measurement (eg: start, end) can be a function. The node reference is passed directly to callbacks.\n\n``` javascript\nbasefx.animateProperty({\n    node:\"mine\",\n    properties:{\n        height:function(node){\n            // shrink this node by 50%\n            return domGeom.position(node).h / 2\n        },\n        width:{\n            start:function(node){ return 100; },\n            end:function(node){ return 200; }\n        }\n    }\n}).play();\n```\n\n### `Animation``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nA generic animation class that fires callbacks into its handlers object at various states.\n\nA generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of `Animation` when one is returned.\n\n|           |        |                                                                               |\n|-----------|--------|-------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                   |\n| args      | Object | The 'magic argument', mixing all the properties into this animation instance. |\n\n### `fadeIn``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will fade node defined in 'args' from its current opacity to fully opaque.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fadeOut``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will fade node defined in 'args' from its current opacity to fully transparent.\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/fx.html](http://dojotoolkit.org/api/1.10/dojo/_base/fx.html)"
- name: _base/fx#anim()
  id: dojo/_base/fx#1_10dojo__base_fx_anim
  summary: A simpler interface to animateProperty(), also returns an instance of Animation but begins the animation immediately, unlike nearly every other Dojo animation API
  belongs_to: _base/fx
  description: "### `anim` `(node,properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nA simpler interface to `animateProperty()`, also returns an instance of `Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.\n\nSimpler (but somewhat less powerful) version of `animateProperty`. It uses defaults for many basic properties and allows for positional parameters to be used in place of the packed \"property bag\" which is used for other Dojo animation methods.\n\nThe `Animation` object returned will be already playing, so calling play() on it again is (usually) a no-op.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nFade out a node\n\n``` javascript\n      basefx.anim(\"id\", { opacity: 0 });\n    \n```\n\n### Example 2\n\nFade out a node over a full second\n\n``` javascript\n      basefx.anim(\"id\", { opacity: 0 }, 1000);\n    \n```"
- name: _base/fx#animateProperty()
  id: dojo/_base/fx#1_10dojo__base_fx_animateProperty
  summary: Foundation of most dojo/_base/fx animations
  belongs_to: _base/fx
  description: "### `animateProperty` `(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will transition the properties of node defined in `args` depending how they are defined in `args.properties`\n\nFoundation of most [dojo/\\_base/fx](fx) animations. It takes an object of \"properties\" corresponding to style properties, and animates them in parallel over a set duration.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nA simple animation that changes the width of the specified node.\n\n``` javascript\n      basefx.animateProperty({\n    node: \"nodeId\",\n    properties: { width: 400 },\n}).play();\n    \n```\n\nDojo figures out the start value for the width and converts the\n\ninteger specified for the width to the more expressive but verbose form `{ width: { end: '400', units: 'px' } }` which you can also specify directly. Defaults to 'px' if omitted.\n\n### Example 2\n\nAnimate width, height, and padding over 2 seconds... the pedantic way:\n\n``` javascript\n      basefx.animateProperty({ node: node, duration:2000,\n    properties: {\n        width: { start: '200', end: '400', units:\"px\" },\n        height: { start:'200', end: '400', units:\"px\" },\n        paddingTop: { start:'5', end:'50', units:\"px\" }\n    }\n}).play();\n    \n```\n\nNote 'paddingTop' is used over 'padding-top'. Multi-name CSS properties\n\nare written using \"mixed case\", as the hyphen is illegal as an object key.\n\n### Example 3\n\nPlug in a different easing function and register a callback for when the animation ends. Easing functions accept values between zero and one and return a value on that basis. In this case, an exponential-in curve.\n\n``` javascript\n      basefx.animateProperty({\n    node: \"nodeId\",\n    // dojo figures out the start value\n    properties: { width: { end: 400 } },\n    easing: function(n){\n        return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));\n    },\n    onEnd: function(node){\n        // called when the animation finishes. The animation\n        // target is passed to this function\n    }\n}).play(500); // delay playing half a second\n    \n```\n\n### Example 4\n\nLike all `Animation`s, animateProperty returns a handle to the Animation instance, which fires the events common to Dojo FX. Use `aspect.after` to access these events outside of the Animation definition:\n\n``` javascript\n      var anim = basefx.animateProperty({\n    node:\"someId\",\n    properties:{\n        width:400, height:500\n    }\n});\naspect.after(anim, \"onEnd\", function(){\n    console.log(\"animation ended\");\n}, true);\n// play the animation now:\nanim.play();\n    \n```\n\n### Example 5\n\nEach property can be a function whose return value is substituted along. Additionally, each measurement (eg: start, end) can be a function. The node reference is passed directly to callbacks.\n\n``` javascript\n      basefx.animateProperty({\n    node:\"mine\",\n    properties:{\n        height:function(node){\n            // shrink this node by 50%\n            return domGeom.position(node).h / 2\n        },\n        width:{\n            start:function(node){ return 100; },\n            end:function(node){ return 200; }\n        }\n    }\n}).play();\n    \n```"
- name: _base/fx#Animation()
  id: dojo/_base/fx#1_10dojo__base_fx_Animation
  summary: A generic animation class that fires callbacks into its handlers object at various states
  belongs_to: _base/fx
  description: |-
    ### `Animation` `(args)`

    Defined by [dojo/\_base/fx](fx)

    A generic animation class that fires callbacks into its handlers object at various states.

    A generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of `Animation` when one is returned.

    |           |        |                                                                               |
    |-----------|--------|-------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                   |
    | args      | Object | The 'magic argument', mixing all the properties into this animation instance. |
- name: _base/fx#fadeIn()
  id: dojo/_base/fx#1_10dojo__base_fx_fadeIn
  summary: Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque
  belongs_to: _base/fx
  description: |-
    ### `fadeIn` `(args)`

    Defined by [dojo/\_base/fx](fx)

    Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque.

    [TABLE]

    **Returns:** undefined
- name: _base/fx#fadeOut()
  id: dojo/_base/fx#1_10dojo__base_fx_fadeOut
  summary: Returns an animation that will fade node defined in 'args' from its current opacity to fully transparent
  belongs_to: _base/fx
  description: "### `fadeOut` `(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will fade node defined in 'args' from its current opacity to fully transparent.\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/fx.html](http://dojotoolkit.org/api/1.10/dojo/_base/fx.html)"
- name: _base/html
  id: dojo/_base/html
  summary: This module is a stub for the core dojo DOM API
  description: "# dojo/\\_base/html\n\n## Summary\n\nThis module is a stub for the core dojo DOM API.\n\nSee the [dojo/\\_base/html reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/html.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/html.html](http://dojotoolkit.org/api/1.10/dojo/_base/html.html)"
- name: _base/json
  id: dojo/_base/json
  summary: This module defines the dojo JSON API
  description: "# dojo/\\_base/json\n\n## Summary\n\nThis module defines the dojo JSON API.\n\nSee the [dojo/\\_base/json reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/json.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/json.html](http://dojotoolkit.org/api/1.10/dojo/_base/json.html)"
- name: _base/kernel
  id: dojo/_base/kernel
  summary: This module is the foundational module of the dojo boot sequence; it defines the dojo object
  description: "# dojo/\\_base/kernel\n\n## Summary\n\nThis module is the foundational module of the dojo boot sequence; it defines the dojo object.\n\nSee the [dojo/\\_base/kernel reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/kernel.html) for more information.\n\n## Properties\n\n### back\n\nDefined by: [dojo/back](../back)\n\nBrowser history management resources\n\n### baseUrl\n\nDefined by: [dojo/\\_base/configSpidermonkey](configspidermonkey)\n\n### behavior\n\nDefined by: [dojo/behavior](../behavior)\n\n### cldr\n\nDefined by: [dojo/cldr/monetary](../cldr/monetary)\n\n### colors\n\nDefined by: [dojo/colors](../colors)\n\n### config\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\nThis module defines the user configuration during bootstrap.\n\n### connectPublisher\n\nDefined by: [dojo/robotx](../robotx)\n\n### contentHandlers\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\n### currency\n\nDefined by: [dojo/currency](../currency)\n\nlocalized formatting and parsing routines for currencies\n\n### data\n\nDefined by: [dojo/data/util/filter](../data/util/filter)\n\n### date\n\nDefined by: [dojo/date/stamp](../date/stamp)\n\n### dijit\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### dnd\n\nDefined by: [dojo/dnd/common](../dnd/common)\n\n### doc\n\nDefined by: [dojo/\\_base/window](window)\n\nAlias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().\n\n### dojox\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### fx\n\nDefined by: [dojo/fx](../fx)\n\nEffects library on top of Base animations\n\n### gears\n\nDefined by: [dojo/gears](../gears)\n\nTODOC\n\n### global\n\nDefined by: [dojo/\\_base/window](window)\n\nAlias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().\n\n### html\n\nDefined by: [dojo/html](../html)\n\nTODOC\n\n### i18n\n\nDefined by: [dojo/i18n](../i18n)\n\nThis module implements the [dojo/i18n](../i18n)! plugin and the v1.6- i18n API\n\n### io\n\nDefined by: [dojo/io/iframe](../io/iframe)\n\n### isAir\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nTrue if client is Adobe Air\n\n### isAndroid\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is android browser. undefined otherwise.\n\n### isAsync\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### isBrowser\n\nDefined by: [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\n### isChrome\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is Chrome browser. undefined otherwise.\n\n### isCopyKey\n\nDefined by: [dojox/grid/\\_Grid](http://dojotoolkit.org/api/1.10/dojox/grid/_Grid)\n\n### isFF\n\nDefined by: [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\n### isIE\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is MSIE(PC). undefined otherwise. Corresponds to major detected IE version (6, 7, 8, etc.)\n\n### isIos\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is iPhone, iPod, or iPad. undefined otherwise.\n\n### isKhtml\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is a KHTML browser. undefined otherwise. Corresponds to major detected version.\n\n### isMac\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nTrue if the client runs on Mac\n\n### isMoz\n\nDefined by: [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\n### isMozilla\n\nDefined by: [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\n### isOpera\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is Opera. undefined otherwise. Corresponds to major detected version.\n\n### isQuirks\n\nDefined by: [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\n### isSafari\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is Safari or iPhone. undefined otherwise.\n\n### isSpidermonkey\n\nDefined by: [dojo/\\_base/configSpidermonkey](configspidermonkey)\n\n### isWebKit\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nVersion as a Number if client is a WebKit-derived browser (Konqueror, Safari, Chrome, etc.). undefined otherwise.\n\n### isWii\n\nDefined by: [dojo/\\_base/sniff](sniff)\n\nTrue if client is Wii\n\n### keys\n\nDefined by: [dojo/keys](../keys)\n\nDefinitions for common key values. Client code should test keyCode against these named constants, as the actual codes can vary by browser.\n\n### locale\n\nDefined by: [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\n### mouseButtons\n\nDefined by: [dojo/mouse](../mouse)\n\n### number\n\nDefined by: [dojo/number](../number)\n\nlocalized formatting and parsing routines for Number\n\n### parser\n\nDefined by: [dojox/mobile/parser](http://dojotoolkit.org/api/1.10/dojox/mobile/parser)\n\n### publish\n\nDefined by: [dojo/robotx](../robotx)\n\n### query\n\nDefined by: [dojo/query](../query)\n\n### regexp\n\nDefined by: [dojo/regexp](../regexp)\n\nRegular expressions and Builder resources\n\n### rpc\n\nDefined by: [dojo/rpc/RpcService](../rpc/rpcservice)\n\n### scopeMap\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### store\n\nDefined by: [dojo/store/Cache](../store/cache)\n\n### string\n\nDefined by: [dojo/string](../string)\n\nString utilities for Dojo\n\n### subscribe\n\nDefined by: [dojo/robotx](../robotx)\n\n### tests\n\nDefined by: [dojo/tests](../tests)\n\nD.O.H. Test files for Dojo unit testing.\n\n### toJsonIndentStr\n\nDefined by: [dojo/\\_base/json](json)\n\n### touch\n\nDefined by: [dojo/touch](../touch)\n\nThis module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop. Based on <http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html> Also, if the dojoClick property is set to truthy on a DOM node, [dojo/touch](../touch) generates click events immediately for this node and its descendants (except for descendants that have a dojoClick property set to falsy), to avoid the delay before native browser click events, and regardless of whether evt.preventDefault() was called in a touch.press event listener.\n\n### version\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\nVersion number of the Dojo Toolkit\n\n### window\n\nDefined by: [dojo/window](../window)\n\nTODOC\n\n## Methods\n\n### `AdapterRegistry``(returnWrappers)`\n\nDefined by [dojo/AdapterRegistry](../adapterregistry)\n\nA registry to make contextual calling/searching easier.\n\nObjects of this class keep list of arrays in the form \\[name, check, wrap, directReturn\\] that are used to determine what the contextual result of a set of checked arguments is. All check/wrap functions in this registry should be of the same arity.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n// create a new registry\nrequire([\"dojo/AdapterRegistry\"],\nfunction(AdapterRegistry){\n    var reg = new AdapterRegistry();\n    reg.register(\"handleString\",\n        function(str){\n            return typeof val == \"string\"\n        },\n        function(str){\n            // do something with the string here\n        }\n    );\n    reg.register(\"handleArr\",\n        dojo.isArray,\n        function(arr){\n            // do something with the array here\n        }\n    );\n\n    // now we can pass reg.match() *either* an array or a string and\n    // the value we pass will get handled by the right function\n    reg.match(\"someValue\"); // will call the first function\n    reg.match([\"someValue\"]); // will call the second\n});\n```\n\n### `addClass``(node,classStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nAdds the specified classes to the end of the class list on the passed node. Will not re-apply duplicate classes.\n\n|           |                   |                                                                                                 |\n|-----------|-------------------|-------------------------------------------------------------------------------------------------|\n| Parameter | Type              | Description                                                                                     |\n| node      | String \\| DOMNode | String ID or DomNode reference to add a class string too                                        |\n| classStr  | String \\| Array   | A String class name to add, or several space-separated class names, or an array of class names. |\n\n## Examples\n\n### Example 1\n\nAdd a class to some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"anewClass\");\n});\n```\n\n### Example 2\n\nAdd two classes at once:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"firstClass secondClass\");\n});\n```\n\n### Example 3\n\nAdd two classes at once (using array):\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n```\n\n### Example 4\n\nAvailable in `dojo/NodeList` for multiple additions\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\"ul > li\").addClass(\"firstLevel\");\n});\n```\n\n### `addOnLoad``(priority,context,callback)`\n\nDefined by [dojo/ready](../ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n```\n\n### Example 3\n\nUsing context\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n```\n\n### `addOnUnload``(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](unload)\n\nRegisters a function to be triggered when the page unloads. Deprecated, use on(window, \"beforeunload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnUnload is called Dojo will register a page listener to trigger your unload handler with.\n\nIn a browser environment, the functions will be triggered during the window.onbeforeunload event. Be careful of doing too much work in an unload handler. onbeforeunload can be triggered if a link to download a file is clicked, or if the link is a javascript: link. In these cases, the onbeforeunload event fires, but the document is not actually destroyed. So be careful about doing destructive operations in a dojo.addOnUnload callback.\n\nFurther note that calling dojo.addOnUnload will prevent browsers from using a \"fast back\" cache to make page loading via back button instantaneous.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnUnload(afunc);\n    unload.addOnUnload(foo, \"bar\");\n    unload.addOnUnload(foo, function(){console.log(\"\", this.data);});\n});\n```\n\n### `addOnWindowUnload``(obj,functionName)`\n\nDefined by [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\nregisters a function to be triggered when window.onunload fires. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider dojo.addOnUnload() if you need to modify the DOM or do heavy JavaScript work.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.addOnWindowUnload(functionPointer)\ndojo.addOnWindowUnload(object, \"functionName\")\ndojo.addOnWindowUnload(object, function(){ /* ... */});\n```\n\n### `anim``(node,properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nA simpler interface to `animateProperty()`, also returns an instance of `Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.\n\nSimpler (but somewhat less powerful) version of `animateProperty`. It uses defaults for many basic properties and allows for positional parameters to be used in place of the packed \"property bag\" which is used for other Dojo animation methods.\n\nThe `Animation` object returned will be already playing, so calling play() on it again is (usually) a no-op.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nFade out a node\n\n``` javascript\nbasefx.anim(\"id\", { opacity: 0 });\n```\n\n### Example 2\n\nFade out a node over a full second\n\n``` javascript\nbasefx.anim(\"id\", { opacity: 0 }, 1000);\n```\n\n### `animateProperty``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will transition the properties of node defined in `args` depending how they are defined in `args.properties`\n\nFoundation of most [dojo/\\_base/fx](fx) animations. It takes an object of \"properties\" corresponding to style properties, and animates them in parallel over a set duration.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nA simple animation that changes the width of the specified node.\n\n``` javascript\nbasefx.animateProperty({\n    node: \"nodeId\",\n    properties: { width: 400 },\n}).play();\n```\n\nDojo figures out the start value for the width and converts the\n\ninteger specified for the width to the more expressive but verbose form `{ width: { end: '400', units: 'px' } }` which you can also specify directly. Defaults to 'px' if omitted.\n\n### Example 2\n\nAnimate width, height, and padding over 2 seconds... the pedantic way:\n\n``` javascript\nbasefx.animateProperty({ node: node, duration:2000,\n    properties: {\n        width: { start: '200', end: '400', units:\"px\" },\n        height: { start:'200', end: '400', units:\"px\" },\n        paddingTop: { start:'5', end:'50', units:\"px\" }\n    }\n}).play();\n```\n\nNote 'paddingTop' is used over 'padding-top'. Multi-name CSS properties\n\nare written using \"mixed case\", as the hyphen is illegal as an object key.\n\n### Example 3\n\nPlug in a different easing function and register a callback for when the animation ends. Easing functions accept values between zero and one and return a value on that basis. In this case, an exponential-in curve.\n\n``` javascript\nbasefx.animateProperty({\n    node: \"nodeId\",\n    // dojo figures out the start value\n    properties: { width: { end: 400 } },\n    easing: function(n){\n        return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));\n    },\n    onEnd: function(node){\n        // called when the animation finishes. The animation\n        // target is passed to this function\n    }\n}).play(500); // delay playing half a second\n```\n\n### Example 4\n\nLike all `Animation`s, animateProperty returns a handle to the Animation instance, which fires the events common to Dojo FX. Use `aspect.after` to access these events outside of the Animation definition:\n\n``` javascript\nvar anim = basefx.animateProperty({\n    node:\"someId\",\n    properties:{\n        width:400, height:500\n    }\n});\naspect.after(anim, \"onEnd\", function(){\n    console.log(\"animation ended\");\n}, true);\n// play the animation now:\nanim.play();\n```\n\n### Example 5\n\nEach property can be a function whose return value is substituted along. Additionally, each measurement (eg: start, end) can be a function. The node reference is passed directly to callbacks.\n\n``` javascript\nbasefx.animateProperty({\n    node:\"mine\",\n    properties:{\n        height:function(node){\n            // shrink this node by 50%\n            return domGeom.position(node).h / 2\n        },\n        width:{\n            start:function(node){ return 100; },\n            end:function(node){ return 200; }\n        }\n    }\n}).play();\n```\n\n### `Animation``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nA generic animation class that fires callbacks into its handlers object at various states.\n\nA generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of `Animation` when one is returned.\n\n|           |        |                                                                               |\n|-----------|--------|-------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                   |\n| args      | Object | The 'magic argument', mixing all the properties into this animation instance. |\n\n### `attr``(node,name,value)`\n\nDefined by [dojo/\\_base/html](html)\n\nGets or sets an attribute on an HTML element.\n\nHandles normalized getting and setting of attributes on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, the value of the requested attribute or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" attribute on a node\ndojo.attr(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.attr(\"nodeId\", \"foo\");\n```\n\n### Example 2\n\n``` javascript\n// use attr() to set the tab index\ndojo.attr(\"nodeId\", \"tabIndex\", 3);\n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\ndojo.attr(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\ndojo.attr(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\nvar obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.attr(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n```\n\n### `blendColors``(start,end,weight,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nBlend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated Color object for the result\n\n[TABLE]\n\n**Returns:** undefined\n\n### `body``(doc)`\n\nDefined by [dojo/\\_base/window](window)\n\nReturn the body element of the specified document or of dojo/\\_base/window::doc.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nwin.body().appendChild(dojo.doc.createElement('div'));\n```\n\n### `byId``(id,doc)`\n\nDefined by [dojo/dom](../dom)\n\nReturns DOM node with matching `id` attribute or falsy value (ex: null or undefined) if not found. If `id` is a DomNode, this function is a no-op.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nLook up a node by ID:\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"foo\");\n});\n```\n\n### Example 2\n\nCheck if a node exists, and use it.\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"bar\");\n    if(n){ doStuff() ... }\n});\n```\n\n### Example 3\n\nAllow string or DomNode references to be passed to a custom function:\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    var foo = function(nodeOrId){\n        nodeOrId = dom.byId(nodeOrId);\n        // ... more stuff\n    }\n});\n```\n\n### `cache``(module,url,value)`\n\nDefined by [dojo/text](../text)\n\nA getter and setter for storing the string content associated with the module and url arguments.\n\nIf module is a string that contains slashes, then it is interpretted as a fully resolved path (typically a result returned by require.toUrl), and url should not be provided. This is the preferred signature. If module is a string that does not contain slashes, then url must also be provided and module and url are used to call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated. If value is specified, the cache value for the moduleUrl will be set to that value. Otherwise, dojo.cache will fetch the moduleUrl and store it in its internal cache and return that cached value for the URL. To clear a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the the URL contents, only modules on the same domain of the page can use this capability. The build system can inline the cache values though, to allow for xdomain hosting.\n\n[TABLE]\n\n**Returns:** undefined \\| null\n\n## Examples\n\n### Example 1\n\nTo ask dojo.cache to fetch content and store it in the cache (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n//If template.html contains \"<h1>Hello</h1>\" that will be\n//the value for the text variable.\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\");\n```\n\n### Example 2\n\nTo ask dojo.cache to fetch content and store it in the cache, and sanitize the input (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n//If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\", {sanitize: true});\n```\n\n### Example 3\n\nSame example as previous, but demonstrates how an object can be passed in as the first argument, then the value argument can then be the second argument.\n\n``` javascript\n//If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](new dojo._Url(\"my/module/template.html\"), {sanitize: true});\n```\n\n### `clearCache``()`\n\nDefined by [dojo/\\_base/array](array)\n\n### `Color``(color)`\n\nDefined by [dojo/\\_base/Color](color)\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and creates a new Color instance to work from.\n\n|           |                           |             |\n|-----------|---------------------------|-------------|\n| Parameter | Type                      | Description |\n| color     | Array \\| String \\| Object |             |\n\n## Examples\n\n### Example 1\n\nWork with a Color instance:\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var c = new Color();\n    c.setColor([0,0,0]); // black\n    var hex = c.toHex(); // #000000\n});\n```\n\n### Example 2\n\nWork with a node's color:\n\n``` javascript\n  require([\"dojo/_base/color\", \"dojo/dom-style\"], function(Color, domStyle){\n      var color = domStyle(\"someNode\", \"backgroundColor\");\n      var n = new Color(color);\n      // adjust the color some\n      n.r *= .5;\n      console.log(n.toString()); // rgb(128, 255, 255);\n  });\n```\n\n### `colorFromArray``(a,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nBuilds a `Color` from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha\n});\n```\n\n### `colorFromHex``(color,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nConverts a hex string with a '#' prefix to a color object. Supports 12-bit \\#rgb shorthand. Optionally accepts a `Color` object to update with the parsed value.\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/_base/color\"], function(Color){\n    var thing = new Color().fromHex(\"#ededed\"); // grey, longhand\n    var thing2 = new Color().fromHex(\"#000\"); // black, shorthand\n});\n```\n\n### `colorFromRgb``(color,obj)`\n\nDefined by [dojo/colors](../colors)\n\nget rgb(a) array from css-style color declarations\n\nthis function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values.\n\n[TABLE]\n\n**Returns:** null\n\n### `colorFromString``(str,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nParses `str` for a color value. Accepts hex, rgb, and rgba style color values.\n\nAcceptable input values for str may include arrays of any form accepted by dojo.colorFromArray, hex strings such as \"#aaaaaa\", or rgb or rgba strings such as \"rgb(133, 200, 16)\" or \"rgba(10, 10, 10, 50)\"\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n### `connect``(obj,event,context,method,dontFix)`\n\nDefined by [dojo/\\_base/connect](connect)\n\n`dojo.connect` is a deprecated event handling and delegation method in Dojo. It allows one function to \"listen in\" on the execution of any other, triggering the second whenever the first is called. Many listeners may be attached to a function, and source functions may be either regular function calls or DOM events.\n\nConnects listeners to actions, so that after event fires, a listener is called with the same arguments passed to the original function.\n\nSince `dojo.connect` allows the source of events to be either a \"regular\" JavaScript function or a DOM event, it provides a uniform interface for listening to all the types of events that an application is likely to deal with though a single, unified interface. DOM programmers may want to think of it as \"addEventListener for everything and anything\".\n\nWhen setting up a connection, the `event` parameter must be a string that is the name of the method/event to be listened for. If `obj` is null, `kernel.global` is assumed, meaning that connections to global methods are supported but also that you may inadvertently connect to a global by passing an incorrect object name or invalid reference.\n\n`dojo.connect` generally is forgiving. If you pass the name of a function or method that does not yet exist on `obj`, connect will not fail, but will instead set up a stub method. Similarly, null arguments may simply be omitted such that fewer than 4 arguments may be required to set up a connection See the examples for details.\n\nThe return value is a handle that is needed to remove this connection with `dojo.disconnect`.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nWhen obj.onchange(), do ui.update():\n\n``` javascript\ndojo.connect(obj, \"onchange\", ui, \"update\");\ndojo.connect(obj, \"onchange\", ui, ui.update); // same\n```\n\n### Example 2\n\nUsing return value for disconnect:\n\n``` javascript\nvar link = dojo.connect(obj, \"onchange\", ui, \"update\");\n...\ndojo.disconnect(link);\n```\n\n### Example 3\n\nWhen onglobalevent executes, watcher.handler is invoked:\n\n``` javascript\ndojo.connect(null, \"onglobalevent\", watcher, \"handler\");\n```\n\n### Example 4\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked:\n\n``` javascript\ndojo.connect(ob, \"onCustomEvent\", null, \"customEventHandler\");\ndojo.connect(ob, \"onCustomEvent\", \"customEventHandler\"); // same\n```\n\n### Example 5\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked with the same scope (this):\n\n``` javascript\ndojo.connect(ob, \"onCustomEvent\", null, customEventHandler);\ndojo.connect(ob, \"onCustomEvent\", customEventHandler); // same\n```\n\n### Example 6\n\nWhen globalEvent executes, globalHandler is invoked with the same scope (this):\n\n``` javascript\ndojo.connect(null, \"globalEvent\", null, globalHandler);\ndojo.connect(\"globalEvent\", globalHandler); // same\n```\n\n### `contentBox``(node,box)`\n\nDefined by [dojo/\\_base/html](html)\n\nGetter/setter for the content-box of node.\n\nReturns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a content width of 300px and a content-height of 150px. Note that the content box may have a much larger border or margin box, depending on the box model currently in use and CSS values set/inherited for node. While the getter will return top and left values, the setter only accepts setting the width and height.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `cookie``(name,value,props)`\n\nDefined by [dojo/cookie](../cookie)\n\nGet or set a cookie.\n\nIf one argument is passed, returns the value of the cookie For two or more arguments, acts as a setter.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nset a cookie with the JSON-serialized contents of an object which will expire 5 days from now:\n\n``` javascript\nrequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    cookie(\"configObj\", json.stringify(config, {expires: 5 }));\n});\n```\n\n### Example 2\n\nde-serialize a cookie back into a JavaScript object:\n\n``` javascript\nrequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    config = json.parse(cookie(\"configObj\"));\n});\n```\n\n### Example 3\n\ndelete a cookie:\n\n``` javascript\nrequire([\"dojo/cookie\"], function(cookie){\n    cookie(\"configObj\", null, {expires: -1});\n});\n```\n\n### `coords``(node,includeScroll)`\n\nDefined by [dojo/\\_base/html](html)\n\nDeprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t.\n\nReturns an object that measures margin-box (w)idth/(h)eight and absolute position x/y of the border-box. Also returned is computed (l)eft and (t)op values in pixels from the node's offsetParent as returned from marginBox(). Return value will be in the form:\n\n``` javascript\n{ l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }\n```\n\nDoes not act as a setter. If includeScroll is passed, the x and\n\ny params are affected as one would expect in dojo.position().\n\n[TABLE]\n\n**Returns:** undefined\n\n### `create``(tag,attrs,refNode,pos)`\n\nDefined by [dojo/dom-construct](../dom-construct)\n\nCreate an element, allowing for optional attribute decoration and placement.\n\nA DOM Element creation function. A shorthand method for creating a node or a fragment, and allowing for a convenient optional attribute setting step, as well as an optional DOM placement reference.\n\nAttributes are set by passing the optional object through `dojo.setAttr`. See `dojo.setAttr` for noted caveats and nuances, and API if applicable.\n\nPlacement is done via `dojo.place`, assuming the new node to be the action node, passing along the optional reference node and position.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a DIV:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\");\n});\n```\n\n### Example 2\n\nCreate a DIV with content:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", { innerHTML:\"<p>hi</p>\" });\n});\n```\n\n### Example 3\n\nPlace a new DIV in the BODY, with no attributes set\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", null, dojo.body());\n});\n```\n\n### Example 4\n\nCreate an UL, and populate it with LI's. Place the list as the first-child of a node with id=\"someId\":\n\n``` javascript\nrequire([\"dojo/dom-construct\", \"dojo/_base/array\"],\nfunction(domConstruct, arrayUtil){\n    var ul = domConstruct.create(\"ul\", null, \"someId\", \"first\");\n    var items = [\"one\", \"two\", \"three\", \"four\"];\n    arrayUtil.forEach(items, function(data){\n        domConstruct.create(\"li\", { innerHTML: data }, ul);\n    });\n});\n```\n\n### Example 5\n\nCreate an anchor, with an href. Place in BODY:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.create(\"a\", { href:\"foo.html\", title:\"Goto FOO!\" }, dojo.body());\n});\n```\n\n### `declare``(className,superclass,props)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nCreate a feature-rich constructor from compact notation.\n\nCreate a constructor using a compact notation for inheritance and prototype extension.\n\nMixin ancestors provide a type of multiple inheritance. Prototypes of mixin ancestors are copied to the new class: changes to mixin prototypes will not affect classes to which they have been mixed in.\n\nAncestors can be compound classes created by this version of declare(). In complex cases all base classes are going to be linearized according to C3 MRO algorithm (see <http://www.python.org/download/releases/2.3/mro/> for more details).\n\n\"className\" is cached in \"declaredClass\" property of the new class, if it was supplied. The immediate super class will be cached in \"superclass\" property of the new class.\n\nMethods in \"props\" will be copied and modified: \"nom\" property (the declared name of the method) will be added to all copied functions to help identify them for the internal machinery. Be very careful, while reusing methods: if you use the same function under different names, it can produce errors in some cases.\n\nIt is possible to use constructors created \"manually\" (without declare()) as bases. They will be called as usual during the creation of an instance, their methods will be chained, and even called by \"this.inherited()\".\n\nSpecial property \"-chains-\" governs how to chain methods. It is a dictionary, which uses method names as keys, and hint strings as values. If a hint string is \"after\", this method will be called after methods of its base classes. If a hint string is \"before\", this method will be called before methods of its base classes.\n\nIf \"constructor\" is not mentioned in \"-chains-\" property, it will be chained using the legacy mode: using \"after\" chaining, calling preamble() method before each constructor, if available, and calling postscript() after all constructors were executed. If the hint is \"after\", it is chained as a regular method, but postscript() will be called after the chain of constructors. \"constructor\" cannot be chained \"before\", but it allows a special hint string: \"manual\", which means that constructors are not going to be chained in any way, and programmer will call them manually using this.inherited(). In the latter case postscript() will be called after the construction.\n\nAll chaining hints are \"inherited\" from base classes and potentially can be overridden. Be very careful when overriding hints! Make sure that all chained methods can work in a proposed manner of chaining.\n\nOnce a method was chained, it is impossible to unchain it. The only exception is \"constructor\". You don't need to define a method in order to supply a chaining hint.\n\nIf a method is chained, it cannot use this.inherited() because all other methods in the hierarchy will be called automatically.\n\nUsually constructors and initializers of any kind are chained using \"after\" and destructors of any kind are chained as \"before\". Note that chaining assumes that chained methods do not return any value: any returned value will be discarded.\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/declare.\\_\\_DeclareCreatedObject](declare.__declarecreatedobject) \\| undefined\n\nNew constructor function.\n\n## Examples\n\n### Example 1\n\n``` javascript\ndeclare(\"my.classes.bar\", my.classes.foo, {\n    // properties to be added to the class prototype\n    someValue: 2,\n    // initialization function\n    constructor: function(){\n        this.myComplicatedObject = new ReallyComplicatedObject();\n    },\n    // other functions\n    someMethod: function(){\n        doStuff();\n    }\n});\n```\n\n### Example 2\n\n``` javascript\nvar MyBase = declare(null, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass1 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass2 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyDiamond = declare([MyClass1, MyClass2], {\n    // constructor, properties, and methods go here\n    // ...\n});\n```\n\n### Example 3\n\n``` javascript\nvar F = function(){ console.log(\"raw constructor\"); };\nF.prototype.method = function(){\n    console.log(\"raw method\");\n};\nvar A = declare(F, {\n    constructor: function(){\n        console.log(\"A.constructor\");\n    },\n    method: function(){\n        console.log(\"before calling F.method...\");\n        this.inherited(arguments);\n        console.log(\"...back in A\");\n    }\n});\nnew A().method();\n// will print:\n// raw constructor\n// A.constructor\n// before calling F.method...\n// raw method\n// ...back in A\n```\n\n### Example 4\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        destroy: \"before\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        console.log(\"B.constructor\");\n    },\n    destroy: function(){\n        console.log(\"B.destroy\");\n    }\n});\nvar C = declare(B, {\n    constructor: function(){\n        console.log(\"C.constructor\");\n    },\n    destroy: function(){\n        console.log(\"C.destroy\");\n    }\n});\nnew C().destroy();\n// prints:\n// B.constructor\n// C.constructor\n// C.destroy\n// B.destroy\n```\n\n### Example 5\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        constructor: \"manual\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        // ...\n        // call the base constructor with new parameters\n        this.inherited(arguments, [1, 2, 3]);\n        // ...\n    }\n});\n```\n\n### Example 6\n\n``` javascript\nvar A = declare(null, {\n    \"-chains-\": {\n        m1: \"before\"\n    },\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    \"-chains-\": {\n        m2: \"after\"\n    },\n    m1: function(){\n        console.log(\"B.m1\");\n    },\n    m2: function(){\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\nx.m1();\n// prints:\n// B.m1\n// A.m1\nx.m2();\n// prints:\n// A.m2\n// B.m2\n```\n\n### `Deferred``(canceller)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nDeprecated. This module defines the legacy dojo/\\_base/Deferred API. New code should use dojo/Deferred instead.\n\nThe Deferred API is based on the concept of promises that provide a generic interface into the eventual completion of an asynchronous action. The motivation for promises fundamentally is about creating a separation of concerns that allows one to achieve the same type of call patterns and logical data flow in asynchronous code as can be achieved in synchronous code. Promises allows one to be able to call a function purely with arguments needed for execution, without conflating the call with concerns of whether it is sync or async. One shouldn't need to alter a call's arguments if the implementation switches from sync to async (or vice versa). By having async functions return promises, the concerns of making the call are separated from the concerns of asynchronous interaction (which are handled by the promise).\n\nThe Deferred is a type of promise that provides methods for fulfilling the promise with a successful result or an error. The most important method for working with Dojo's promises is the then() method, which follows the CommonJS proposed promise API. An example of using a Dojo promise:\n\n``` javascript\nvar resultingPromise = someAsyncOperation.then(function(result){\n    ... handle result ...\n},\nfunction(error){\n    ... handle error ...\n});\n```\n\nThe .then() call returns a new promise that represents the result of the execution of the callback. The callbacks will never affect the original promises value.\n\nThe Deferred instances also provide the following functions for backwards compatibility:\n\n- addCallback(handler)\n- addErrback(handler)\n- callback(result)\n- errback(result)\n\nCallbacks are allowed to return promises themselves, so you can build complicated sequences of events with ease.\n\nThe creator of the Deferred may specify a canceller. The canceller is a function that will be called if Deferred.cancel is called before the Deferred fires. You can use this to implement clean aborting of an XMLHttpRequest, etc. Note that cancel will fire the deferred with a CancelledError (unless your canceller returns another kind of error), so the errbacks should be prepared to handle that error for cancellable Deferreds.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar deferred = new Deferred();\nsetTimeout(function(){ deferred.callback({success: true}); }, 1000);\nreturn deferred;\n```\n\n### Example 2\n\nDeferred objects are often used when making code asynchronous. It may be easiest to write functions in a synchronous manner and then split code using a deferred to trigger a response to a long-lived operation. For example, instead of register a callback function to denote when a rendering operation completes, the function can simply return a deferred:\n\n``` javascript\n// callback style:\nfunction renderLotsOfData(data, callback){\n    var success = false\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        success = true;\n    }catch(e){ }\n    if(callback){\n        callback(success);\n    }\n}\n\n\n// using callback style\nrenderLotsOfData(someDataObj, function(success){\n    // handles success or failure\n    if(!success){\n        promptUserToRecover();\n    }\n});\n// NOTE: no way to add another callback here!!\n```\n\n### Example 3\n\nUsing a Deferred doesn't simplify the sending code any, but it provides a standard interface for callers and senders alike, providing both with a simple way to service multiple callbacks for an operation and freeing both sides from worrying about details such as \"did this get called already?\". With Deferreds, new callbacks can be added at any time.\n\n``` javascript\n// Deferred style:\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        d.callback(true);\n    }catch(e){\n        d.errback(new Error(\"rendering failed\"));\n    }\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n// NOTE: addErrback and addCallback both return the Deferred\n// again, so we could chain adding callbacks or save the\n// deferred for later should we need to be notified again.\n```\n\n### Example 4\n\nIn this example, renderLotsOfData is synchronous and so both versions are pretty artificial. Putting the data display on a timeout helps show why Deferreds rock:\n\n``` javascript\n// Deferred style and async func\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    setTimeout(function(){\n        try{\n            for(var x in data){\n                renderDataitem(data[x]);\n            }\n            d.callback(true);\n        }catch(e){\n            d.errback(new Error(\"rendering failed\"));\n        }\n    }, 100);\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n```\n\nNote that the caller doesn't have to change his code at all to handle the asynchronous case.\n\n### `DeferredList``(list,fireOnOneCallback,fireOnOneErrback,consumeErrors,canceller)`\n\nDefined by [dojo/DeferredList](../deferredlist)\n\nDeprecated, use dojo/promise/all instead. Provides event handling for a group of Deferred objects.\n\nDeferredList takes an array of existing deferreds and returns a new deferred of its own this new deferred will typically have its callback fired when all of the deferreds in the given list have fired their own deferreds. The parameters `fireOnOneCallback` and fireOnOneErrback, will fire before all the deferreds as appropriate\n\n[TABLE]\n\n### `deprecated``(behaviour,extra,removal)`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\nLog a debug message to indicate that a behavior has been deprecated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.deprecated(\"myApp.getTemp()\", \"use myApp.getLocaleTemp() instead\", \"1.0\");\n```\n\n### `destroy``(node)`\n\nDefined by [dojo/\\_base/html](html)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n\n### `disconnect``(handle)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nRemove a link created by dojo.connect.\n\nRemoves the connection between event and the method referenced by handle.\n\n|           |        |                                                                        |\n|-----------|--------|------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                            |\n| handle    | Handle | the return value of the dojo.connect call that created the connection. |\n\n### `docScroll``(doc)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nReturns an object with {node, x, y} with corresponding offsets.\n\n[TABLE]\n\n**Returns:** Object \\| undefined\n\n### `empty``(node)`\n\nDefined by [dojo/\\_base/html](html)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| node      | undefined |             |\n\n### `eval``(scriptText)`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\nA legacy method created for use exclusively by internal Dojo methods. Do not use this method directly unless you understand its possibly-different implications on the platforms your are targeting.\n\nMakes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers that support indirect eval.\n\nAs usual, IE does not. On IE, the only way to implement global eval is to use execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval. This implementation uses the technique of executing eval in the scope of a function that is a single scope frame below the global scope; thereby coming close to the global scope. Note carefully that\n\ndojo.eval(\"var pi = 3.14;\");\n\nwill define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want to define a global variable using dojo.eval, write something like\n\ndojo.eval(\"window.pi = 3.14;\")\n\n|            |           |                         |\n|------------|-----------|-------------------------|\n| Parameter  | Type      | Description             |\n| scriptText | undefined | The text to evaluation. |\n\n**Returns:** any\n\nThe result of the evaluation. Often `undefined`\n\n### `every``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not every item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns false\narray.every([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### Example 2\n\n``` javascript\n// returns true\narray.every([1, 2, 3, 4], function(item){ return item>0; });\n```\n\n### `exit``(exitcode)`\n\nDefined by [dojo/\\_base/configSpidermonkey](configspidermonkey)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| exitcode  | undefined |             |\n\n### `experimental``(moduleName,extra)`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\nMarks code as experimental.\n\nThis can be used to mark a function, file, or module as experimental. Experimental code is not ready to be used, and the APIs are subject to change without notice. Experimental code may be completed deleted without going through the normal deprecation process.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.experimental(\"dojo.data.Result\");\n```\n\n### Example 2\n\n``` javascript\ndojo.experimental(\"dojo.weather.toKelvin()\", \"PENDING approval from NOAA\");\n```\n\n### `fadeIn``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will fade node defined in 'args' from its current opacity to fully opaque.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fadeOut``(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will fade node defined in 'args' from its current opacity to fully transparent.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fieldToObject``(inputNode)`\n\nDefined by [dojo/dom-form](../dom-form)\n\nSerialize a form field to a JavaScript object.\n\nReturns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| inputNode | DOMNode \\| String |             |\n\n**Returns:** Object \\| undefined\n\n### `filter``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nReturns a new Array with those items from arr that match the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter>\n\n[TABLE]\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns [2, 3, 4]\narray.filter([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### `fixEvent``(evt,sender)`\n\nDefined by [dojo/\\_base/event](event)\n\nnormalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions\n\n|           |         |                                  |\n|-----------|---------|----------------------------------|\n| Parameter | Type    | Description                      |\n| evt       | Event   | native event object              |\n| sender    | DOMNode | node to treat as \"currentTarget\" |\n\n**Returns:** Event\n\nnative event object\n\n### `fixIeBiDiScrollLeft``(scrollLeft,doc)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nIn RTL direction, scrollLeft should be a negative value, but IE returns a positive one. All codes using documentElement.scrollLeft must call this function to fix this error, otherwise the position will offset to right when there is a horizontal scrollbar.\n\n[TABLE]\n\n**Returns:** Number \\| number\n\n### `forEach``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nfor every item in arr, callback is invoked. Return values are ignored. If you want to break out of the loop, consider using array.every() or array.some(). forEach does not allow breaking out of the loop over the items in arr.\n\nThis function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach>\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n// log out all members of the array:\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item){\n          console.log(item);\n      }\n);\n```\n\n### Example 2\n\n``` javascript\n// log out the members and their indexes\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item, idx, arr){\n          console.log(item, \"at index:\", idx);\n      }\n);\n```\n\n### Example 3\n\n``` javascript\n// use a scoped object member as the callback\n\nvar obj = {\n      prefix: \"logged via obj.callback:\",\n      callback: function(item){\n          console.log(this.prefix, item);\n      }\n};\n\n// specifying the scope function executes the callback in that scope\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      obj.callback,\n      obj\n);\n\n// alternately, we can accomplish the same thing with lang.hitch()\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      lang.hitch(obj, \"callback\")\n);\n```\n\n### `formToJson``(formNode,prettyPrint)`\n\nDefined by [dojo/dom-form](../dom-form)\n\nCreate a serialized JSON string from a form node or string ID identifying the form to serialize\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\n### `formToObject``(formNode)`\n\nDefined by [dojo/dom-form](../dom-form)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n<form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\n### `formToQuery``(formNode)`\n\nDefined by [dojo/dom-form](../dom-form)\n\nReturns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** String \\| undefined\n\n### `fromJson``(js)`\n\nDefined by [dojo/\\_base/json](json)\n\nParses a JavaScript expression and returns a JavaScript value.\n\nThrows for invalid JavaScript expressions. It does not use a strict JSON parser. It always delegates to eval(). The content passed to this method must therefore come from a trusted source. It is recommend that you use [dojo/json](../json)'s parse function for an implementation uses the (faster) native JSON parse when available.\n\n|           |        |                                                                                                           |\n|-----------|--------|-----------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                               |\n| js        | String | a string literal of a JavaScript expression, for instance: `'{ \"foo\": [ \"bar\", 1, { \"baz\": \"thud\" } ] }'` |\n\n**Returns:** undefined\n\n### `getAttr``(node,name)`\n\nDefined by [dojo/dom-attr](../dom-attr)\n\nGets an attribute on an HTML element.\n\nHandles normalized getting of attributes on DOM Nodes.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | DOMNode \\| String | id or reference to the element to get the attribute on |\n| name      | String            | the name of the attribute to get.                      |\n\n**Returns:** any \\| undefined \\| null\n\nthe value of the requested attribute or null if that attribute does not have a specified or default value;\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" attribute on a node\nrequire([\"dojo/dom-attr\", \"dojo/dom\"], function(domAttr, dom){\n    domAttr.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domAttr.get(\"nodeId\", \"foo\");\n}); \n```\n\n### `getBorderExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nreturns an object with properties useful for noting the border dimensions.\n\n- l/t/r/b = the sum of left/top/right/bottom border (respectively)\n- w = the sum of the left and right border\n- h = the sum of the top and bottom border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getComputedStyle``(node)`\n\nDefined by [dojo/dom-style](../dom-style)\n\nReturns a \"computed style\" object.\n\nGets a \"computed style\" object which can be used to gather information about the current state of the rendered node.\n\nNote that this may behave differently on different browsers. Values may have different formats and value encodings across browsers.\n\nNote also that this method is expensive. Wherever possible, reuse the returned object.\n\nUse the [dojo/dom-style.get()](../dom-style#get) method for more consistent (pixelized) return values.\n\n|           |         |                                                                                    |\n|-----------|---------|------------------------------------------------------------------------------------|\n| Parameter | Type    | Description                                                                        |\n| node      | DOMNode | A reference to a DOM node. Does NOT support taking an ID string for speed reasons. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.getComputedStyle(dom.byId('foo')).borderWidth;\n});\n```\n\n### Example 2\n\nReusing the returned object, avoiding multiple lookups:\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    var cs = domStyle.getComputedStyle(dom.byId(\"someNode\"));\n    var w = cs.width, h = cs.height;\n});\n```\n\n### `getContentBox``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nReturns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.\n\n[TABLE]\n\n**Returns:** object\n\n### `getIeDocumentElementOffset``(doc)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nreturns the offset in x and y from the document body to the visual edge of the page for IE\n\nThe following values in IE contain an offset:\n\n``` javascript\nevent.clientX\nevent.clientY\nnode.getBoundingClientRect().left\nnode.getBoundingClientRect().top\n```\n\nBut other position related values do not contain this offset,\n\nsuch as node.offsetLeft, node.offsetTop, node.style.left and node.style.top. The offset is always (2, 2) in LTR direction. When the body is in RTL direction, the offset counts the width of left scroll bar's width. This function computes the actual offset.\n\n[TABLE]\n\n**Returns:** object\n\n### `getL10nName``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](../i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** string\n\n### `getMarginBox``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nreturns an object that encodes the width, height, left and top positions of the node's margin box.\n\n[TABLE]\n\n**Returns:** object\n\n### `getMarginExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nreturns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).\n\n- l/t = marginLeft, marginTop, respectively\n- w = total width, margin inclusive\n- h = total height, margin inclusive\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getMarginSize``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nreturns an object that encodes the width and height of the node's margin box\n\n[TABLE]\n\n**Returns:** object\n\n### `getNodeProp``(node,name)`\n\nDefined by [dojo/dom-attr](../dom-attr)\n\nReturns an effective value of a property or an attribute.\n\n|           |                   |                                                             |\n|-----------|-------------------|-------------------------------------------------------------|\n| Parameter | Type              | Description                                                 |\n| node      | DOMNode \\| String | id or reference to the element to remove the attribute from |\n| name      | String            | the name of the attribute                                   |\n\n**Returns:** any\n\nthe value of the attribute\n\n### `getPadBorderExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nReturns object with properties useful for box fitting with regards to padding.\n\n- l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)\n- w = the sum of the left and right padding and border\n- h = the sum of the top and bottom padding and border\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getPadExtents``(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nReturns object with special values specifically useful for node fitting.\n\nReturns an object with `w`, `h`, `l`, `t` properties:\n\n``` javascript\nl/t/r/b = left/top/right/bottom padding (respectively)\nw = the total of the left and right padding\nh = the total of the top and bottom padding\n```\n\nIf 'node' has position, l/t forms the origin for child nodes.\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object\n\n### `getProp``(node,name)`\n\nDefined by [dojo/dom-prop](../dom-prop)\n\nGets a property on an HTML element.\n\nHandles normalized getting of properties on DOM nodes.\n\n|           |                   |                                                       |\n|-----------|-------------------|-------------------------------------------------------|\n| Parameter | Type              | Description                                           |\n| node      | DOMNode \\| String | id or reference to the element to get the property on |\n| name      | String            | the name of the property to get.                      |\n\n**Returns:** any \\| undefined\n\nthe value of the requested property or its default value\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" property on a node\nrequire([\"dojo/dom-prop\", \"dojo/dom\"], function(domProp, dom){\n    domProp.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domProp.get(\"nodeId\", \"foo\");\n});\n```\n\n### `getStyle``(node,name)`\n\nDefined by [dojo/dom-style](../dom-style)\n\nAccesses styles on a node.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use [dojo/dom-geometry.getMarginBox()](../dom-geometry#getMarginBox), [dojo/dom-geometry.getContentBox()](../dom-geometry#getContentBox) or [dojo/dom-geometry.getPosition()](../dom-geometry#getPosition).\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\");\n});\n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\", \"opacity\"); // 1 by default\n});\n```\n\n### `hasAttr``(node,name)`\n\nDefined by [dojo/dom-attr](../dom-attr)\n\nReturns true if the requested attribute is specified on the given element, and false otherwise.\n\n|           |                   |                                         |\n|-----------|-------------------|-----------------------------------------|\n| Parameter | Type              | Description                             |\n| node      | DOMNode \\| String | id or reference to the element to check |\n| name      | String            | the name of the attribute               |\n\n**Returns:** Boolean \\| contentWindow.document isn't accessible within IE7/8\n\ntrue if the requested attribute is specified on the given element, and false otherwise\n\n### `hasClass``(node,classStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nReturns whether or not the specified classes are a portion of the class list currently applied to the node.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | String \\| DOMNode | String ID or DomNode reference to check the class for. |\n| classStr  | String            | A string class name to look for.                       |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nDo something if a node with id=\"someNode\" has class=\"aSillyClassName\" present\n\n``` javascript\nif(dojo.hasClass(\"someNode\",\"aSillyClassName\")){ ... }\n```\n\n### `hash``(hash,replace)`\n\nDefined by [dojo/hash](../hash)\n\nGets or sets the hash string in the browser URL.\n\nHandles getting and setting of location.hash.\n\n- If no arguments are passed, acts as a getter.\n- If a string is passed, acts as a setter.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, returns the current hash string. when used as a setter, returns the new hash string.\n\n## Examples\n\n### Example 1\n\n``` javascript\ntopic.subscribe(\"/dojo/hashchange\", context, callback);\n\nfunction callback (hashValue){\n    // do something based on the hash value.\n}\n```\n\n### `indexOf``(arr,value,fromIndex,findLast)`\n\nDefined by [dojo/\\_base/array](array)\n\nlocates the first index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's indexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf>\n\n[TABLE]\n\n**Returns:** Number\n\n### `isBodyLtr``(doc)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nReturns true if the current language is left-to-right, and false otherwise.\n\n[TABLE]\n\n**Returns:** Boolean \\| boolean\n\n### `isDescendant``(node,ancestor)`\n\nDefined by [dojo/dom](../dom)\n\nReturns true if node is a descendant of ancestor\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | string id or node reference to test                             |\n| ancestor  | DOMNode \\| String | string id or node reference of potential parent to test against |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nTest is node id=\"bar\" is a descendant of node id=\"foo\"\n\n``` javascript\nrequire([\"dojo/dom\"], function(dom){\n    if(dom.isDescendant(\"bar\", \"foo\")){ ... }\n});\n```\n\n### `lastIndexOf``(arr,value,fromIndex)`\n\nDefined by [dojo/\\_base/array](array)\n\nlocates the last index of the provided value in the passed array. If the value is not found, -1 is returned.\n\nThis method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:\n\n1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's lasIndexOf skips the holes in the sparse array.\n2.  uses equality (==) rather than strict equality (===)\n\nFor details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf>\n\n[TABLE]\n\n**Returns:** Number\n\n### `loadInit``(f)`\n\nDefined by [dojo/\\_base/loader](loader)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| f         | undefined |             |\n\n### `map``(arr,callback,thisObject,Ctr)`\n\nDefined by [dojo/\\_base/array](array)\n\napplies callback to each element of arr and returns an Array with the results\n\nThis function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map>\n\n[TABLE]\n\n**Returns:** Array \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n// returns [2, 3, 4, 5]\narray.map([1, 2, 3, 4], function(item){ return item+1 });\n```\n\n### `marginBox``(node,box)`\n\nDefined by [dojo/\\_base/html](html)\n\nGetter/setter for the margin-box of node.\n\nGetter/setter for the margin-box of node. Returns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a margin width of 300px and a margin-height of 150px.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nRetrieve the margin box of a passed node\n\n``` javascript\nvar box = dojo.marginBox(\"someNodeId\");\nconsole.dir(box);\n```\n\n### Example 2\n\nSet a node's margin box to the size of another node\n\n``` javascript\nvar box = dojo.marginBox(\"someNodeId\");\ndojo.marginBox(\"someOtherNode\", box);\n```\n\n### `moduleUrl``(module,url)`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\nReturns a URL relative to a module.\n\n[TABLE]\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar pngPath = dojo.moduleUrl(\"acme\",\"images/small.png\");\nconsole.dir(pngPath); // list the object properties\n// create an image and set it's source to pngPath's value:\nvar img = document.createElement(\"img\");\nimg.src = pngPath;\n// add our image to the document\ndojo.body().appendChild(img);\n```\n\n### Example 2\n\nyou may de-reference as far as you like down the package hierarchy. This is sometimes handy to avoid lengthy relative urls or for building portable sub-packages. In this example, the `acme.widget` and `acme.util` directories may be located under different roots (see `dojo.registerModulePath`) but the the modules which reference them can be unaware of their relative locations on the filesystem:\n\n``` javascript\n// somewhere in a configuration block\ndojo.registerModulePath(\"acme.widget\", \"../../acme/widget\");\ndojo.registerModulePath(\"acme.util\", \"../../util\");\n\n// ...\n\n// code in a module using acme resources\nvar tmpltPath = dojo.moduleUrl(\"acme.widget\",\"templates/template.html\");\nvar dataPath = dojo.moduleUrl(\"acme.util\",\"resources/data.json\");\n```\n\n### `NodeList``(array)`\n\nDefined by [dojo/query](../query)\n\nArray-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo/query() calls.\n\nNodeList instances provide many utilities that reflect core Dojo APIs for Array iteration and manipulation, DOM manipulation, and event handling. Instead of needing to dig up functions in the dojo package, NodeLists generally make the full power of Dojo available for DOM manipulation tasks in a simple, chainable way.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| array     | undefined |             |\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\ncreate a node list from a node\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom\"\n], function(query, dom){\n    query.NodeList(dom.byId(\"foo\"));\n});\n```\n\n### Example 2\n\nget a NodeList from a CSS query and iterate on it\n\n``` javascript\nrequire([\"dojo/on\", \"dojo/dom\"\n], function(on, dom){\n    var l = query(\".thinger\");\n    l.forEach(function(node, index, nodeList){\n        console.log(index, node.innerHTML);\n    });\n});\n```\n\n### Example 3\n\nuse native and Dojo-provided array methods to manipulate a NodeList without needing to use dojo.\\* functions explicitly:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/dom-construct\", \"dojo/dom\"\n], function(query, domConstruct, dom){\n    var l = query(\".thinger\");\n    // since NodeLists are real arrays, they have a length\n    // property that is both readable and writable and\n    // push/pop/shift/unshift methods\n    console.log(l.length);\n    l.push(domConstruct.create(\"span\"));\n\n    // dojo's normalized array methods work too:\n    console.log( l.indexOf(dom.byId(\"foo\")) );\n    // ...including the special \"function as string\" shorthand\n    console.log( l.every(\"item.nodeType == 1\") );\n\n    // NodeLists can be [..] indexed, or you can use the at()\n    // function to get specific items wrapped in a new NodeList:\n    var node = l[3]; // the 4th element\n    var newList = l.at(1, 3); // the 2nd and 4th elements\n});\n```\n\n### Example 4\n\nchainability is a key advantage of NodeLists:\n\n``` javascript\nrequire([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".thinger\")\n        .onclick(function(e){ /* ... */ })\n        .at(1, 3, 8) // get a subset\n            .style(\"padding\", \"5px\")\n            .forEach(console.log);\n});\n```\n\n### `objectToQuery``(map)`\n\nDefined by [dojo/io-query](../io-query)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\nyields the following query string:\n\n``` javascript\n\"blah=blah&multi=thud&multi=thonk\"\n```\n\n### `place``(node,refNode,position)`\n\nDefined by [dojo/dom-construct](../dom-construct)\n\nAttempt to insert node into the DOM, choosing from various positioning options. Returns the first argument resolved to a DOM node.\n\n[TABLE]\n\n**Returns:** DOMNode \\| undefined\n\nReturned values is the first argument resolved to a DOM node.\n\n.place() is also a method of `dojo/NodeList`, allowing `dojo/query` node lookups.\n\n## Examples\n\n### Example 1\n\nPlace a node by string id as the last child of another node by string id:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\");\n});\n```\n\n### Example 2\n\nPlace a node by string id before another node by string id\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\", \"before\");\n});\n```\n\n### Example 3\n\nCreate a Node, and place it in the body element (last child):\n\n``` javascript\nrequire([\"dojo/dom-construct\", \"dojo/_base/window\"\n], function(domConstruct, win){\n    domConstruct.place(\"<div></div>\", win.body());\n});\n```\n\n### Example 4\n\nPut a new LI as the first child of a list by id:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"<li></li>\", \"someUl\", \"first\");\n});\n```\n\n### `platformRequire``(modMap)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nrequire one or more modules based on which host environment Dojo is currently operating in\n\nThis method takes a \"map\" of arrays which one can use to optionally load dojo modules. The map is indexed by the possible dojo.name *values, with two additional values: \"default\" and \"common\". The items in the \"default\" array will be loaded if none of the other items have been chosen based on dojo.name*, set by your host environment. The items in the \"common\" array will *always* be loaded, regardless of which list is chosen.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| modMap    | Object |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.platformRequire({\n    browser: [\n        \"foo.sample\", // simple module\n        \"foo.test\",\n        [\"foo.bar.baz\", true] // skip object check in _loadModule (dojo.require)\n    ],\n    default: [ \"foo.sample._base\" ],\n    common: [ \"important.module.common\" ]\n});\n```\n\n### `popContext``()`\n\nDefined by [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\nIf the context stack contains elements, ensure that subsequent code executes in the *previous* context to the current context. The current context set (\\[global, document\\]) is returned.\n\n### `position``(node,includeScroll)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nGets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).\n\nReturns an object of the form: `{ x: 100, y: 300, w: 20, h: 15 }`. If includeScroll==true, the x and y values will include any document offsets that may affect the position relative to the viewport. Uses the border-box model (inclusive of border and padding but not margin). Does not act as a setter.\n\n[TABLE]\n\n**Returns:** Object \\| object\n\n### `prop``(node,name,value)`\n\nDefined by [dojo/\\_base/html](html)\n\nGets or sets a property on an HTML element.\n\nHandles normalized getting and setting of properties on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any\n\nwhen used as a getter, the value of the requested property or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// get the current value of the \"foo\" property on a node\ndojo.prop(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.prop(\"nodeId\", \"foo\");\n```\n\n### Example 2\n\n``` javascript\n// use prop() to set the tab index\ndojo.prop(\"nodeId\", \"tabIndex\", 3);\n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\ndojo.prop(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\ndojo.prop(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\nvar obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.prop(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n```\n\n### `provide``(mid)`\n\nDefined by [dojo/\\_base/loader](loader)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| mid       | undefined |             |\n\n### `pushContext``(g,d)`\n\nDefined by [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\ncauses subsequent calls to Dojo methods to assume the passed object and, optionally, document as the default scopes to use. A 2-element array of the previous global and document are returned.\n\ndojo.pushContext treats contexts as a stack. The auto-detected contexts which are initially provided using dojo.setContext() require authors to keep state in order to \"return\" to a previous context, whereas the dojo.pushContext and dojo.popContext methods provide a more natural way to augment blocks of code to ensure that they execute in a different window or frame without issue. If called without any arguments, the default context (the context when Dojo is first loaded) is instead pushed into the stack. If only a single string is passed, a node in the intitial context's document is looked up and its contextWindow and contextDocument properties are used as the context to push. This means that iframes can be given an ID and code can be executed in the scope of the iframe's document in subsequent calls easily.\n\n[TABLE]\n\n### `queryToObject``(str)`\n\nDefined by [dojo/io-query](../io-query)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n\"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n```\n\nresults in this object structure:\n\n``` javascript\n{\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n```\n\nNote that spaces and other urlencoded entities are correctly handled.\n\n### `rawXhrPost``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP POST request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `rawXhrPut``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `ready``(priority,context,callback)`\n\nDefined by [dojo/ready](../ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n```\n\n### Example 3\n\nUsing context\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\nrequire([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n```\n\n### `registerModulePath``(moduleName,prefix)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nMaps a module name to a path\n\nAn unregistered module is given the default path of ../\\[module\\], relative to Dojo root. For example, module acme is mapped to ../acme. If you want to use a different module name, use dojo.registerModulePath.\n\n|            |        |             |\n|------------|--------|-------------|\n| Parameter  | Type   | Description |\n| moduleName | String |             |\n| prefix     | String |             |\n\n## Examples\n\n### Example 1\n\nIf your dojo.js is located at this location in the web root:\n\n``` javascript\n/myapp/js/dojo/dojo/dojo.js\n```\n\nand your modules are located at:\n\n``` javascript\n/myapp/js/foo/bar.js\n/myapp/js/foo/baz.js\n/myapp/js/foo/thud/xyzzy.js\n```\n\nYour application can tell Dojo to locate the \"foo\" namespace by calling:\n\n``` javascript\ndojo.registerModulePath(\"foo\", \"../../foo\");\n```\n\nAt which point you can then use dojo.require() to load the\n\nmodules (assuming they provide() the same things which are required). The full code might be:\n\n``` markup\n<script type=\"text/javascript\"\n    src=\"/myapp/js/dojo/dojo/dojo.js\"></script>\n<script type=\"text/javascript\">\n    dojo.registerModulePath(\"foo\", \"../../foo\");\n    dojo.require(\"foo.bar\");\n    dojo.require(\"foo.baz\");\n    dojo.require(\"foo.thud.xyzzy\");\n</script>\n```\n\n### `removeAttr``(node,name)`\n\nDefined by [dojo/dom-attr](../dom-attr)\n\nRemoves an attribute from an HTML element.\n\n|           |                   |                                                             |\n|-----------|-------------------|-------------------------------------------------------------|\n| Parameter | Type              | Description                                                 |\n| node      | DOMNode \\| String | id or reference to the element to remove the attribute from |\n| name      | String            | the name of the attribute to remove                         |\n\n### `removeClass``(node,classStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nRemoves the specified classes from node. No `contains()` check is required.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nRemove a class from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass\");\n});\n```\n\n### Example 2\n\nRemove two classes from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass secondClass\");\n});\n```\n\n### Example 3\n\nRemove two classes from some node (using array):\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n```\n\n### Example 4\n\nRemove all classes from some node:\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\");\n});\n```\n\n### Example 5\n\nAvailable in `dojo/NodeList` for multiple removal\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\"ul > li\").removeClass(\"foo\");\n});\n```\n\n### `replaceClass``(node,addClassStr,removeClassStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nReplaces one or more classes on a node if not present. Operates more quickly than calling dojo.removeClass and dojo.addClass\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"add1 add2\", \"remove1 remove2\");\n});\n```\n\n### Example 2\n\nReplace all classes with addMe\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"addMe\");\n});\n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\".findMe\").replaceClass(\"addMe\", \"removeMe\");\n});\n```\n\n### `require``(moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nloads a Javascript module from the appropriate URI\n\nModules are loaded via dojo.require by using one of two loaders: the normal loader and the xdomain loader. The xdomain loader is used when dojo was built with a custom build that specified loader=xdomain and the module lives on a modulePath that is a whole URL, with protocol and a domain. The versions of Dojo that are on the Google and AOL CDNs use the xdomain loader.\n\nIf the module is loaded via the xdomain loader, it is an asynchronous load, since the module is added via a dynamically created script tag. This means that dojo.require() can return before the module has loaded. However, this should only happen in the case where you do dojo.require calls in the top-level HTML page, or if you purposely avoid the loader checking for dojo.require dependencies in your module by using a syntax like dojo\\[\"require\"\\] to load the module.\n\nSometimes it is useful to not have the loader detect the dojo.require calls in the module so that you can dynamically load the modules as a result of an action on the page, instead of right at module load time.\n\nAlso, for script blocks in an HTML page, the loader does not pre-process them, so it does not know to download the modules before the dojo.require calls occur.\n\nSo, in those two cases, when you want on-the-fly module loading or for script blocks in the HTML page, special care must be taken if the dojo.required code is loaded asynchronously. To make sure you can execute code that depends on the dojo.required modules, be sure to add the code that depends on the modules in a dojo.addOnLoad() callback. dojo.addOnLoad waits for all outstanding modules to finish loading before executing.\n\nThis type of syntax works with both xdomain and normal loaders, so it is good practice to always use this idiom for on-the-fly code loading and in HTML script blocks. If at some point you change loaders and where the code is loaded from, it will all still work.\n\nMore on how dojo.require `dojo.require(\"A.B\")` first checks to see if symbol A.B is defined. If it is, it is simply returned (nothing to do).\n\nIf it is not defined, it will look for `A/B.js` in the script root directory.\n\n`dojo.require` throws an exception if it cannot find a file to load, or if the symbol `A.B` is not defined after loading.\n\nIt returns the object `A.B`, but note the caveats above about on-the-fly loading and HTML script blocks when the xdomain loader is loading a module.\n\n`dojo.require()` does nothing about importing symbols into the current namespace. It is presumed that the caller will take care of that.\n\n[TABLE]\n\n**Returns:** any\n\nthe required namespace object\n\n## Examples\n\n### Example 1\n\nTo use dojo.require in conjunction with dojo.ready:\n\n``` javascript\ndojo.require(\"foo\");\ndojo.require(\"bar\");\ndojo.addOnLoad(function(){\n    //you can now safely do something with foo and bar\n});\n```\n\n### Example 2\n\nFor example, to import all symbols into a local block, you might write:\n\n``` javascript\nwith (dojo.require(\"A.B\")) {\n    ...\n}\n```\n\nAnd to import just the leaf symbol to a local variable:\n\n``` javascript\nvar B = dojo.require(\"A.B\");\n...\n```\n\n### `requireAfterIf``(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n```\n\n### `requireIf``(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\ndojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n```\n\n### `requireLocalization``(moduleName,bundleName,locale)`\n\nDefined by [dojo/\\_base/loader](loader)\n\n[TABLE]\n\n### `safeMixin``(target,source)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nMix in properties skipping a constructor and decorating functions like it is done by declare().\n\nThis function is used to mix in properties like lang.mixin does, but it skips a constructor property and decorates functions like declare() does.\n\nIt is meant to be used with classes and objects produced with declare. Functions mixed in with dojo.safeMixin can use this.inherited() like normal methods.\n\nThis function is used to implement extend() method of a constructor produced with declare().\n\n|           |        |                                         |\n|-----------|--------|-----------------------------------------|\n| Parameter | Type   | Description                             |\n| target    | Object | Target object to accept new properties. |\n| source    | Object | Source object for new properties.       |\n\n**Returns:** Object\n\nTarget object to accept new properties.\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar A = declare(null, {\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"B.m1\");\n    }\n});\nB.extend({\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\ndojo.safeMixin(x, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"X.m1\");\n    },\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"X.m2\");\n    }\n});\nx.m2();\n// prints:\n// A.m1\n// B.m1\n// X.m1\n```\n\n### `setAttr``(node,name,value)`\n\nDefined by [dojo/dom-attr](../dom-attr)\n\nSets an attribute on an HTML element.\n\nHandles normalized setting of attributes on DOM Nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// use attr() to set the tab index\nrequire([\"dojo/dom-attr\"], function(domAttr){\n    domAttr.set(\"nodeId\", \"tabIndex\", 3);\n});\n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\nrequire([\"dojo/dom-attr\"],\nfunction(domAttr){\n    domAttr.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\"\n    }\n});\n```\n\n### `setContentSize``(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nSets the size of the node's contents, irrespective of margins, padding, or borders.\n\n[TABLE]\n\n### `setContext``(globalObject,globalDocument)`\n\nDefined by [dojo/\\_base/window](window)\n\nchanges the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.\n\n|                |                 |             |\n|----------------|-----------------|-------------|\n| Parameter      | Type            | Description |\n| globalObject   | Object          |             |\n| globalDocument | DocumentElement |             |\n\n### `setMarginBox``(node,box,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nsets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to setBox that handles box-model vagaries for you.\n\n[TABLE]\n\n### `setProp``(node,name,value)`\n\nDefined by [dojo/dom-prop](../dom-prop)\n\nSets a property on an HTML element.\n\nHandles normalized setting of properties on DOM nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n// use prop() to set the tab index\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"nodeId\", \"tabIndex\", 3);\n});\n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\",\n    });\n});\n```\n\n### `setSelectable``(node,selectable)`\n\nDefined by [dojo/dom](../dom)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| node       | undefined |             |\n| selectable | undefined |             |\n\n### `setStyle``(node,name,value)`\n\nDefined by [dojo/dom-style](../dom-style)\n\nSets styles on a node.\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\nIf passed, sets value on the node for style, handling cross-browser concerns. When setting a pixel value, be sure to include \"px\" in the value. For instance, top: \"200px\". Otherwise, in some cases, some browsers will not apply the style.\n\n## Examples\n\n### Example 1\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\nrequire([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", \"opacity\", 0.5); // == 0.5\n});\n```\n\n### Example 2\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\nrequire([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", {\n        \"opacity\": 0.5,\n        \"border\": \"3px solid black\",\n        \"height\": \"300px\"\n    });\n});\n```\n\n### Example 3\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.set(\"thinger\",{\n        fontSize:\"14pt\",\n        letterSpacing:\"1.2em\"\n    });\n});\n```\n\n### Example 4\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo/dom-style.get() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\nrequire([\"dojo/dom-style\", \"dojo/query\", \"dojo/NodeList-dom\"],\nfunction(domStyle, query){\n    query(\".someClassName\").style(\"visibility\",\"hidden\");\n    // or\n    query(\"#baz > div\").style({\n        opacity:0.75,\n        fontSize:\"13pt\"\n    });\n});\n```\n\n### `some``(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not any item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n// is true\narray.some([1, 2, 3, 4], function(item){ return item>1; });\n```\n\n### Example 2\n\n``` javascript\n// is false\narray.some([1, 2, 3, 4], function(item){ return item<1; });\n```\n\n### `Stateful``()`\n\nDefined by [dojo/Stateful](../stateful)\n\n### `stopEvent``(evt)`\n\nDefined by [dojo/\\_base/event](event)\n\nprevents propagation and clobbers the default action of the passed event\n\n|           |       |                                                           |\n|-----------|-------|-----------------------------------------------------------|\n| Parameter | Type  | Description                                               |\n| evt       | Event | The event object. If omitted, window.event is used on IE. |\n\n### `style``(node,name,value)`\n\nDefined by [dojo/\\_base/html](html)\n\nAccesses styles on a node. If 2 arguments are passed, acts as a getter. If 3 arguments are passed, acts as a setter.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use `dojo.marginBox()`, `dojo.contentBox()` or `dojo.position()`.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, return the computed style of the node if passing in an ID or node, or return the normalized, computed value for the property when passing in a node and a style property\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\ndojo.style(\"thinger\");\n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\ndojo.style(\"thinger\", \"opacity\"); // 1 by default\n```\n\n### Example 3\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\ndojo.style(\"thinger\", \"opacity\", 0.5); // == 0.5\n```\n\n### Example 4\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\ndojo.style(\"thinger\", {\n    \"opacity\": 0.5,\n    \"border\": \"3px solid black\",\n    \"height\": \"300px\"\n});\n```\n\n### Example 5\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\ndojo.style(\"thinger\",{\n    fontSize:\"14pt\",\n    letterSpacing:\"1.2em\"\n});\n```\n\n### Example 6\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo.style() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\ndojo.query(\".someClassName\").style(\"visibility\",\"hidden\");\n// or\ndojo.query(\"#baz > div\").style({\n    opacity:0.75,\n    fontSize:\"13pt\"\n});\n```\n\n### `toDom``(frag,doc)`\n\nDefined by [dojo/dom-construct](../dom-construct)\n\ninstantiates an HTML fragment returning the corresponding DOM.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nDocument fragment, unless it's a single node in which case it returns the node itself\n\n## Examples\n\n### Example 1\n\nCreate a table row:\n\n``` javascript\nrequire([\"dojo/dom-construct\"], function(domConstruct){\n    var tr = domConstruct.toDom(\"<tr><td>First!</td></tr>\");\n});\n```\n\n### `toggleClass``(node,classStr,condition)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nAdds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove. Returns the condition that was specified directly or indirectly.\n\n[TABLE]\n\n**Returns:** Boolean\n\nIf passed, true means to add the class, false means to remove. Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\");\n});\n```\n\n### Example 2\n\nForcefully add a class\n\n``` javascript\nrequire([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\", true);\n});\n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\nrequire([\"dojo/query\"], function(query){\n    query(\".toggleMe\").toggleClass(\"toggleMe\");\n});\n```\n\n### `toJson``(it,prettyPrint)`\n\nDefined by [dojo/\\_base/json](json)\n\nReturns a [JSON](http://json.org) serialization of an object.\n\nReturns a [JSON](http://json.org) serialization of an object. Note that this doesn't check for infinite recursion, so don't do that! It is recommend that you use [dojo/json](../json)'s stringify function for an lighter and faster implementation that matches the native JSON API and uses the native JSON serializer when available.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA JSON string serialization of the passed-in object.\n\n## Examples\n\n### Example 1\n\nsimple serialization of a trivial object\n\n``` javascript\nvar jsonStr = dojo.toJson({ howdy: \"stranger!\", isStrange: true });\ndoh.is('{\"howdy\":\"stranger!\",\"isStrange\":true}', jsonStr);\n```\n\n### Example 2\n\na custom serializer for an objects of a particular class:\n\n``` javascript\ndojo.declare(\"Furby\", null, {\n    furbies: \"are strange\",\n    furbyCount: 10,\n    __json__: function(){\n    },\n});\n```\n\n### `toPixelValue``(node,value)`\n\nDefined by [dojo/dom-style](../dom-style)\n\nconverts style value to pixels on IE or return a numeric value.\n\n|           |         |             |\n|-----------|---------|-------------|\n| Parameter | Type    | Description |\n| node      | DOMNode |             |\n| value     | String  |             |\n\n**Returns:** Number\n\n### `unsubscribe``(handle)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nRemove a topic listener.\n\n|           |        |                                               |\n|-----------|--------|-----------------------------------------------|\n| Parameter | Type   | Description                                   |\n| handle    | Handle | The handle returned from a call to subscribe. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar alerter = dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\n...\ndojo.unsubscribe(alerter);\n```\n\n### `when``(valueOrPromise,callback,errback,progback)`\n\nDefined by [dojo/when](../when)\n\nTransparently applies callbacks to values and/or promises.\n\nAccepts promises but also transparently handles non-promises. If no callbacks are provided returns a promise, regardless of the initial value. Foreign promises are converted.\n\nIf callbacks are provided and the initial value is not a promise, the callback is executed immediately with no error handling. Returns a promise if the initial value is a promise, or the result of the callback otherwise.\n\n[TABLE]\n\n**Returns:** [dojo/promise/Promise](../promise/promise) \\| summary: \\| name:\n\nPromise, or if a callback is provided, the result of the callback.\n\n### `windowUnloaded``()`\n\nDefined by [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\nsignal fired by impending window destruction. You may use dojo.addOnWIndowUnload() or dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnWindowUnload for more info.\n\n### `withDoc``(documentObject,callback,thisObject,cbArguments)`\n\nDefined by [dojo/\\_base/window](window)\n\nInvoke callback with documentObject as dojo/\\_base/window::doc.\n\nInvoke callback with documentObject as [dojo/\\_base/window](window)::doc. If provided, callback will be executed in the context of object thisObject When callback() returns or throws an error, the [dojo/\\_base/window](window)::doc will be restored to its previous state.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `withGlobal``(globalObject,callback,thisObject,cbArguments)`\n\nDefined by [dojo/\\_base/window](window)\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc.\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject When callback() returns or throws an error, the dojo.global and dojo.doc will be restored to its previous state.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhr``(method,args)`\n\nDefined by [dojox/rpc/Client](http://dojotoolkit.org/api/1.10/dojox/rpc/Client)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| method    | undefined |             |\n| args      | undefined |             |\n\n**Returns:** undefined\n\n### `xhrDelete``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP DELETE request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhrGet``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP GET request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhrPost``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP POST request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `xhrPut``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.html)"
- name: _base/kernel#AdapterRegistry()
  id: dojo/_base/kernel#1_10dojo__base_kernel_AdapterRegistry
  summary: A registry to make contextual calling/searching easier
  belongs_to: _base/kernel
  description: "### `AdapterRegistry` `(returnWrappers)`\n\nDefined by [dojo/AdapterRegistry](../adapterregistry)\n\nA registry to make contextual calling/searching easier.\n\nObjects of this class keep list of arrays in the form \\[name, check, wrap, directReturn\\] that are used to determine what the contextual result of a set of checked arguments is. All check/wrap functions in this registry should be of the same arity.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // create a new registry\nrequire([\"dojo/AdapterRegistry\"],\nfunction(AdapterRegistry){\n    var reg = new AdapterRegistry();\n    reg.register(\"handleString\",\n        function(str){\n            return typeof val == \"string\"\n        },\n        function(str){\n            // do something with the string here\n        }\n    );\n    reg.register(\"handleArr\",\n        dojo.isArray,\n        function(arr){\n            // do something with the array here\n        }\n    );\n\n    // now we can pass reg.match() *either* an array or a string and\n    // the value we pass will get handled by the right function\n    reg.match(\"someValue\"); // will call the first function\n    reg.match([\"someValue\"]); // will call the second\n});\n    \n```"
- name: _base/kernel#addClass()
  id: dojo/_base/kernel#1_10dojo__base_kernel_addClass
  summary: Adds the specified classes to the end of the class list on the passed node
  belongs_to: _base/kernel
  description: "### `addClass` `(node,classStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nAdds the specified classes to the end of the class list on the passed node. Will not re-apply duplicate classes.\n\n|           |                   |                                                                                                 |\n|-----------|-------------------|-------------------------------------------------------------------------------------------------|\n| Parameter | Type              | Description                                                                                     |\n| node      | String \\| DOMNode | String ID or DomNode reference to add a class string too                                        |\n| classStr  | String \\| Array   | A String class name to add, or several space-separated class names, or an array of class names. |\n\n## Examples\n\n### Example 1\n\nAdd a class to some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"anewClass\");\n});\n    \n```\n\n### Example 2\n\nAdd two classes at once:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", \"firstClass secondClass\");\n});\n    \n```\n\n### Example 3\n\nAdd two classes at once (using array):\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.add(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n    \n```\n\n### Example 4\n\nAvailable in `dojo/NodeList` for multiple additions\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\"ul > li\").addClass(\"firstLevel\");\n});\n    \n```"
- name: _base/kernel#addOnLoad()
  id: dojo/_base/kernel#1_10dojo__base_kernel_addOnLoad
  summary: Add a function to execute on DOM content loaded and all requested modules have arrived and been evaluated
  belongs_to: _base/kernel
  description: "### `addOnLoad` `(priority,context,callback)`\n\nDefined by [dojo/ready](../ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n    \n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n    \n```\n\n### Example 3\n\nUsing context\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n    \n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n    \n```"
- name: _base/kernel#addOnUnload()
  id: dojo/_base/kernel#1_10dojo__base_kernel_addOnUnload
  summary: Registers a function to be triggered when the page unloads
  belongs_to: _base/kernel
  description: "### `addOnUnload` `(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](unload)\n\nRegisters a function to be triggered when the page unloads. Deprecated, use on(window, \"beforeunload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnUnload is called Dojo will register a page listener to trigger your unload handler with.\n\nIn a browser environment, the functions will be triggered during the window.onbeforeunload event. Be careful of doing too much work in an unload handler. onbeforeunload can be triggered if a link to download a file is clicked, or if the link is a javascript: link. In these cases, the onbeforeunload event fires, but the document is not actually destroyed. So be careful about doing destructive operations in a dojo.addOnUnload callback.\n\nFurther note that calling dojo.addOnUnload will prevent browsers from using a \"fast back\" cache to make page loading via back button instantaneous.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnUnload(afunc);\n    unload.addOnUnload(foo, \"bar\");\n    unload.addOnUnload(foo, function(){console.log(\"\", this.data);});\n});\n    \n```"
- name: _base/kernel#addOnWindowUnload()
  id: dojo/_base/kernel#1_10dojo__base_kernel_addOnWindowUnload
  summary: registers a function to be triggered when window.onunload fires
  belongs_to: _base/kernel
  description: "### `addOnWindowUnload` `(obj,functionName)`\n\nDefined by [dojo/\\_base/configFirefoxExtension](configfirefoxextension)\n\nregisters a function to be triggered when window.onunload fires. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider dojo.addOnUnload() if you need to modify the DOM or do heavy JavaScript work.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.addOnWindowUnload(functionPointer)\ndojo.addOnWindowUnload(object, \"functionName\")\ndojo.addOnWindowUnload(object, function(){ /* ... */});\n    \n```"
- name: _base/kernel#anim()
  id: dojo/_base/kernel#1_10dojo__base_kernel_anim
  summary: A simpler interface to animateProperty(), also returns an instance of Animation but begins the animation immediately, unlike nearly every other Dojo animation API
  belongs_to: _base/kernel
  description: "### `anim` `(node,properties,duration,easing,onEnd,delay)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nA simpler interface to `animateProperty()`, also returns an instance of `Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.\n\nSimpler (but somewhat less powerful) version of `animateProperty`. It uses defaults for many basic properties and allows for positional parameters to be used in place of the packed \"property bag\" which is used for other Dojo animation methods.\n\nThe `Animation` object returned will be already playing, so calling play() on it again is (usually) a no-op.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nFade out a node\n\n``` javascript\n      basefx.anim(\"id\", { opacity: 0 });\n    \n```\n\n### Example 2\n\nFade out a node over a full second\n\n``` javascript\n      basefx.anim(\"id\", { opacity: 0 }, 1000);\n    \n```"
- name: _base/kernel#animateProperty()
  id: dojo/_base/kernel#1_10dojo__base_kernel_animateProperty
  summary: Foundation of most dojo/_base/fx animations
  belongs_to: _base/kernel
  description: "### `animateProperty` `(args)`\n\nDefined by [dojo/\\_base/fx](fx)\n\nReturns an animation that will transition the properties of node defined in `args` depending how they are defined in `args.properties`\n\nFoundation of most [dojo/\\_base/fx](fx) animations. It takes an object of \"properties\" corresponding to style properties, and animates them in parallel over a set duration.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nA simple animation that changes the width of the specified node.\n\n``` javascript\n      basefx.animateProperty({\n    node: \"nodeId\",\n    properties: { width: 400 },\n}).play();\n    \n```\n\nDojo figures out the start value for the width and converts the\n\ninteger specified for the width to the more expressive but verbose form `{ width: { end: '400', units: 'px' } }` which you can also specify directly. Defaults to 'px' if omitted.\n\n### Example 2\n\nAnimate width, height, and padding over 2 seconds... the pedantic way:\n\n``` javascript\n      basefx.animateProperty({ node: node, duration:2000,\n    properties: {\n        width: { start: '200', end: '400', units:\"px\" },\n        height: { start:'200', end: '400', units:\"px\" },\n        paddingTop: { start:'5', end:'50', units:\"px\" }\n    }\n}).play();\n    \n```\n\nNote 'paddingTop' is used over 'padding-top'. Multi-name CSS properties\n\nare written using \"mixed case\", as the hyphen is illegal as an object key.\n\n### Example 3\n\nPlug in a different easing function and register a callback for when the animation ends. Easing functions accept values between zero and one and return a value on that basis. In this case, an exponential-in curve.\n\n``` javascript\n      basefx.animateProperty({\n    node: \"nodeId\",\n    // dojo figures out the start value\n    properties: { width: { end: 400 } },\n    easing: function(n){\n        return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));\n    },\n    onEnd: function(node){\n        // called when the animation finishes. The animation\n        // target is passed to this function\n    }\n}).play(500); // delay playing half a second\n    \n```\n\n### Example 4\n\nLike all `Animation`s, animateProperty returns a handle to the Animation instance, which fires the events common to Dojo FX. Use `aspect.after` to access these events outside of the Animation definition:\n\n``` javascript\n      var anim = basefx.animateProperty({\n    node:\"someId\",\n    properties:{\n        width:400, height:500\n    }\n});\naspect.after(anim, \"onEnd\", function(){\n    console.log(\"animation ended\");\n}, true);\n// play the animation now:\nanim.play();\n    \n```\n\n### Example 5\n\nEach property can be a function whose return value is substituted along. Additionally, each measurement (eg: start, end) can be a function. The node reference is passed directly to callbacks.\n\n``` javascript\n      basefx.animateProperty({\n    node:\"mine\",\n    properties:{\n        height:function(node){\n            // shrink this node by 50%\n            return domGeom.position(node).h / 2\n        },\n        width:{\n            start:function(node){ return 100; },\n            end:function(node){ return 200; }\n        }\n    }\n}).play();\n    \n```"
- name: _base/kernel#Animation()
  id: dojo/_base/kernel#1_10dojo__base_kernel_Animation
  summary: A generic animation class that fires callbacks into its handlers object at various states
  belongs_to: _base/kernel
  description: |-
    ### `Animation` `(args)`

    Defined by [dojo/\_base/fx](fx)

    A generic animation class that fires callbacks into its handlers object at various states.

    A generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of `Animation` when one is returned.

    |           |        |                                                                               |
    |-----------|--------|-------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                   |
    | args      | Object | The 'magic argument', mixing all the properties into this animation instance. |
- name: _base/kernel#attr()
  id: dojo/_base/kernel#1_10dojo__base_kernel_attr
  summary: Gets or sets an attribute on an HTML element
  belongs_to: _base/kernel
  description: "### `attr` `(node,name,value)`\n\nDefined by [dojo/\\_base/html](html)\n\nGets or sets an attribute on an HTML element.\n\nHandles normalized getting and setting of attributes on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, the value of the requested attribute or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" attribute on a node\ndojo.attr(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.attr(\"nodeId\", \"foo\");\n    \n```\n\n### Example 2\n\n``` javascript\n      // use attr() to set the tab index\ndojo.attr(\"nodeId\", \"tabIndex\", 3);\n    \n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      dojo.attr(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n    \n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\n      dojo.attr(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n    \n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\n      var obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.attr(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n    \n```"
- name: _base/kernel#back
  id: dojo/_base/kernel#1_10dojo__base_kernel_back
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### back

    Defined by: [dojo/back](../back)

    Browser history management resources

    ### baseUrl

    Defined by: [dojo/\_base/configSpidermonkey](configspidermonkey)
- name: _base/kernel#behavior
  id: dojo/_base/kernel#1_10dojo__base_kernel_behavior
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### behavior

    Defined by: [dojo/behavior](../behavior)
- name: _base/kernel#blendColors()
  id: dojo/_base/kernel#1_10dojo__base_kernel_blendColors
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `blendColors` `(start,end,weight,obj)`

    Defined by [dojo/\_base/Color](color)

    Blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated Color object for the result

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#body()
  id: dojo/_base/kernel#1_10dojo__base_kernel_body
  summary: Return the body element of the specified document or of dojo/_base/window::doc
  belongs_to: _base/kernel
  description: "### `body` `(doc)`\n\nDefined by [dojo/\\_base/window](window)\n\nReturn the body element of the specified document or of dojo/\\_base/window::doc.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      win.body().appendChild(dojo.doc.createElement('div'));\n    \n```"
- name: _base/kernel#byId()
  id: dojo/_base/kernel#1_10dojo__base_kernel_byId
  summary: 'Returns DOM node with matching id attribute or falsy value (ex: null or undefined) if not found'
  belongs_to: _base/kernel
  description: "### `byId` `(id,doc)`\n\nDefined by [dojo/dom](../dom)\n\nReturns DOM node with matching `id` attribute or falsy value (ex: null or undefined) if not found. If `id` is a DomNode, this function is a no-op.\n\n[TABLE]\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nLook up a node by ID:\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"foo\");\n});\n    \n```\n\n### Example 2\n\nCheck if a node exists, and use it.\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var n = dom.byId(\"bar\");\n    if(n){ doStuff() ... }\n});\n    \n```\n\n### Example 3\n\nAllow string or DomNode references to be passed to a custom function:\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    var foo = function(nodeOrId){\n        nodeOrId = dom.byId(nodeOrId);\n        // ... more stuff\n    }\n});\n    \n```"
- name: _base/kernel#cache()
  id: dojo/_base/kernel#1_10dojo__base_kernel_cache
  summary: A getter and setter for storing the string content associated with the module and url arguments
  belongs_to: _base/kernel
  description: "### `cache` `(module,url,value)`\n\nDefined by [dojo/text](../text)\n\nA getter and setter for storing the string content associated with the module and url arguments.\n\nIf module is a string that contains slashes, then it is interpretted as a fully resolved path (typically a result returned by require.toUrl), and url should not be provided. This is the preferred signature. If module is a string that does not contain slashes, then url must also be provided and module and url are used to call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated. If value is specified, the cache value for the moduleUrl will be set to that value. Otherwise, dojo.cache will fetch the moduleUrl and store it in its internal cache and return that cached value for the URL. To clear a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the the URL contents, only modules on the same domain of the page can use this capability. The build system can inline the cache values though, to allow for xdomain hosting.\n\n[TABLE]\n\n**Returns:** undefined \\| null\n\n## Examples\n\n### Example 1\n\nTo ask dojo.cache to fetch content and store it in the cache (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n      //If template.html contains \"<h1>Hello</h1>\" that will be\n//the value for the text variable.\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\");\n    \n```\n\n### Example 2\n\nTo ask dojo.cache to fetch content and store it in the cache, and sanitize the input (the dojo\\[\"cache\"\\] style of call is used to avoid an issue with the build system erroneously trying to intern this example. To get the build system to intern your dojo.cache calls, use the \"dojo.cache\" style of call):\n\n``` javascript\n      //If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](\"my.module\", \"template.html\", {sanitize: true});\n    \n```\n\n### Example 3\n\nSame example as previous, but demonstrates how an object can be passed in as the first argument, then the value argument can then be the second argument.\n\n``` javascript\n      //If template.html contains \"<html><body><h1>Hello</h1></body></html>\", the\n//text variable will contain just \"<h1>Hello</h1>\".\n//Note: This is pre-AMD, deprecated syntax\nvar text = dojo[\"cache\"](new dojo._Url(\"my/module/template.html\"), {sanitize: true});\n    \n```"
- name: _base/kernel#cldr
  id: dojo/_base/kernel#1_10dojo__base_kernel_cldr
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### cldr

    Defined by: [dojo/cldr/monetary](../cldr/monetary)
- name: _base/kernel#clearCache()
  id: dojo/_base/kernel#1_10dojo__base_kernel_clearCache
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `clearCache` `()`

    Defined by [dojo/\_base/array](array)
- name: _base/kernel#Color()
  id: dojo/_base/kernel#1_10dojo__base_kernel_Color
  summary: Takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another Color object and creates a new Color instance to work from
  belongs_to: _base/kernel
  description: "### `Color` `(color)`\n\nDefined by [dojo/\\_base/Color](color)\n\nTakes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another `Color` object and creates a new Color instance to work from.\n\n|           |                           |             |\n|-----------|---------------------------|-------------|\n| Parameter | Type                      | Description |\n| color     | Array \\| String \\| Object |             |\n\n## Examples\n\n### Example 1\n\nWork with a Color instance:\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var c = new Color();\n    c.setColor([0,0,0]); // black\n    var hex = c.toHex(); // #000000\n});\n    \n```\n\n### Example 2\n\nWork with a node's color:\n\n``` javascript\n        require([\"dojo/_base/color\", \"dojo/dom-style\"], function(Color, domStyle){\n      var color = domStyle(\"someNode\", \"backgroundColor\");\n      var n = new Color(color);\n      // adjust the color some\n      n.r *= .5;\n      console.log(n.toString()); // rgb(128, 255, 255);\n  });\n    \n```"
- name: _base/kernel#colorFromArray()
  id: dojo/_base/kernel#1_10dojo__base_kernel_colorFromArray
  summary: Builds a Color from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color
  belongs_to: _base/kernel
  description: "### `colorFromArray` `(a,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nBuilds a `Color` from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha\n});\n    \n```"
- name: _base/kernel#colorFromHex()
  id: dojo/_base/kernel#1_10dojo__base_kernel_colorFromHex
  summary: Converts a hex string with a '#' prefix to a color object
  belongs_to: _base/kernel
  description: "### `colorFromHex` `(color,obj)`\n\nDefined by [dojo/\\_base/Color](color)\n\nConverts a hex string with a '#' prefix to a color object. Supports 12-bit \\#rgb shorthand. Optionally accepts a `Color` object to update with the parsed value.\n\n[TABLE]\n\n**Returns:** any\n\nA Color object. If obj is passed, it will be the return value.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/_base/color\"], function(Color){\n    var thing = new Color().fromHex(\"#ededed\"); // grey, longhand\n    var thing2 = new Color().fromHex(\"#000\"); // black, shorthand\n});\n    \n```"
- name: _base/kernel#colorFromRgb()
  id: dojo/_base/kernel#1_10dojo__base_kernel_colorFromRgb
  summary: 'this function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values'
  belongs_to: _base/kernel
  description: |-
    ### `colorFromRgb` `(color,obj)`

    Defined by [dojo/colors](../colors)

    get rgb(a) array from css-style color declarations

    this function can handle all 4 CSS3 Color Module formats: rgb, rgba, hsl, hsla, including rgb(a) with percentage values.

    [TABLE]

    **Returns:** null
- name: _base/kernel#colorFromString()
  id: dojo/_base/kernel#1_10dojo__base_kernel_colorFromString
  summary: Parses str for a color value
  belongs_to: _base/kernel
  description: |-
    ### `colorFromString` `(str,obj)`

    Defined by [dojo/\_base/Color](color)

    Parses `str` for a color value. Accepts hex, rgb, and rgba style color values.

    Acceptable input values for str may include arrays of any form accepted by dojo.colorFromArray, hex strings such as "#aaaaaa", or rgb or rgba strings such as "rgb(133, 200, 16)" or "rgba(10, 10, 10, 50)"

    [TABLE]

    **Returns:** any

    A Color object. If obj is passed, it will be the return value.
- name: _base/kernel#colors
  id: dojo/_base/kernel#1_10dojo__base_kernel_colors
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### colors

    Defined by: [dojo/colors](../colors)
- name: _base/kernel#config
  id: dojo/_base/kernel#1_10dojo__base_kernel_config
  summary: This module defines the user configuration during bootstrap
  belongs_to: _base/kernel
  description: |-
    ### config

    Defined by: [dojo/\_base/kernel](kernel)

    This module defines the user configuration during bootstrap.
- name: _base/kernel#connect()
  id: dojo/_base/kernel#1_10dojo__base_kernel_connect
  summary: dojo.connect is a deprecated event handling and delegation method in Dojo
  belongs_to: _base/kernel
  description: "### `connect` `(obj,event,context,method,dontFix)`\n\nDefined by [dojo/\\_base/connect](connect)\n\n`dojo.connect` is a deprecated event handling and delegation method in Dojo. It allows one function to \"listen in\" on the execution of any other, triggering the second whenever the first is called. Many listeners may be attached to a function, and source functions may be either regular function calls or DOM events.\n\nConnects listeners to actions, so that after event fires, a listener is called with the same arguments passed to the original function.\n\nSince `dojo.connect` allows the source of events to be either a \"regular\" JavaScript function or a DOM event, it provides a uniform interface for listening to all the types of events that an application is likely to deal with though a single, unified interface. DOM programmers may want to think of it as \"addEventListener for everything and anything\".\n\nWhen setting up a connection, the `event` parameter must be a string that is the name of the method/event to be listened for. If `obj` is null, `kernel.global` is assumed, meaning that connections to global methods are supported but also that you may inadvertently connect to a global by passing an incorrect object name or invalid reference.\n\n`dojo.connect` generally is forgiving. If you pass the name of a function or method that does not yet exist on `obj`, connect will not fail, but will instead set up a stub method. Similarly, null arguments may simply be omitted such that fewer than 4 arguments may be required to set up a connection See the examples for details.\n\nThe return value is a handle that is needed to remove this connection with `dojo.disconnect`.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nWhen obj.onchange(), do ui.update():\n\n``` javascript\n      dojo.connect(obj, \"onchange\", ui, \"update\");\ndojo.connect(obj, \"onchange\", ui, ui.update); // same\n    \n```\n\n### Example 2\n\nUsing return value for disconnect:\n\n``` javascript\n      var link = dojo.connect(obj, \"onchange\", ui, \"update\");\n...\ndojo.disconnect(link);\n    \n```\n\n### Example 3\n\nWhen onglobalevent executes, watcher.handler is invoked:\n\n``` javascript\n      dojo.connect(null, \"onglobalevent\", watcher, \"handler\");\n    \n```\n\n### Example 4\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked:\n\n``` javascript\n      dojo.connect(ob, \"onCustomEvent\", null, \"customEventHandler\");\ndojo.connect(ob, \"onCustomEvent\", \"customEventHandler\"); // same\n    \n```\n\n### Example 5\n\nWhen ob.onCustomEvent executes, customEventHandler is invoked with the same scope (this):\n\n``` javascript\n      dojo.connect(ob, \"onCustomEvent\", null, customEventHandler);\ndojo.connect(ob, \"onCustomEvent\", customEventHandler); // same\n    \n```\n\n### Example 6\n\nWhen globalEvent executes, globalHandler is invoked with the same scope (this):\n\n``` javascript\n      dojo.connect(null, \"globalEvent\", null, globalHandler);\ndojo.connect(\"globalEvent\", globalHandler); // same\n    \n```"
- name: _base/kernel#connectPublisher
  id: dojo/_base/kernel#1_10dojo__base_kernel_connectPublisher
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### connectPublisher

    Defined by: [dojo/robotx](../robotx)
- name: _base/kernel#contentBox()
  id: dojo/_base/kernel#1_10dojo__base_kernel_contentBox
  summary: Getter/setter for the content-box of node
  belongs_to: _base/kernel
  description: |-
    ### `contentBox` `(node,box)`

    Defined by [dojo/\_base/html](html)

    Getter/setter for the content-box of node.

    Returns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a content width of 300px and a content-height of 150px. Note that the content box may have a much larger border or margin box, depending on the box model currently in use and CSS values set/inherited for node. While the getter will return top and left values, the setter only accepts setting the width and height.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#contentHandlers
  id: dojo/_base/kernel#1_10dojo__base_kernel_contentHandlers
  summary: A map of available XHR transport handle types
  belongs_to: _base/kernel
  description: |-
    ### contentHandlers

    Defined by: [dojo/\_base/xhr](xhr)

    A map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.
- name: _base/kernel#cookie()
  id: dojo/_base/kernel#1_10dojo__base_kernel_cookie
  summary: Get or set a cookie
  belongs_to: _base/kernel
  description: "### `cookie` `(name,value,props)`\n\nDefined by [dojo/cookie](../cookie)\n\nGet or set a cookie.\n\nIf one argument is passed, returns the value of the cookie For two or more arguments, acts as a setter.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nset a cookie with the JSON-serialized contents of an object which will expire 5 days from now:\n\n``` javascript\n      require([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    cookie(\"configObj\", json.stringify(config, {expires: 5 }));\n});\n    \n```\n\n### Example 2\n\nde-serialize a cookie back into a JavaScript object:\n\n``` javascript\n      require([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){\n    config = json.parse(cookie(\"configObj\"));\n});\n    \n```\n\n### Example 3\n\ndelete a cookie:\n\n``` javascript\n      require([\"dojo/cookie\"], function(cookie){\n    cookie(\"configObj\", null, {expires: -1});\n});\n    \n```"
- name: _base/kernel#coords()
  id: dojo/_base/kernel#1_10dojo__base_kernel_coords
  summary: 'Deprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t'
  belongs_to: _base/kernel
  description: "### `coords` `(node,includeScroll)`\n\nDefined by [dojo/\\_base/html](html)\n\nDeprecated: Use position() for border-box x/y/w/h or marginBox() for margin-box w/h/l/t.\n\nReturns an object that measures margin-box (w)idth/(h)eight and absolute position x/y of the border-box. Also returned is computed (l)eft and (t)op values in pixels from the node's offsetParent as returned from marginBox(). Return value will be in the form:\n\n``` javascript\n      { l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }\n    \n```\n\nDoes not act as a setter. If includeScroll is passed, the x and\n\ny params are affected as one would expect in dojo.position().\n\n[TABLE]\n\n**Returns:** undefined"
- name: _base/kernel#create()
  id: dojo/_base/kernel#1_10dojo__base_kernel_create
  summary: Create an element, allowing for optional attribute decoration and placement
  belongs_to: _base/kernel
  description: "### `create` `(tag,attrs,refNode,pos)`\n\nDefined by [dojo/dom-construct](../dom-construct)\n\nCreate an element, allowing for optional attribute decoration and placement.\n\nA DOM Element creation function. A shorthand method for creating a node or a fragment, and allowing for a convenient optional attribute setting step, as well as an optional DOM placement reference.\n\nAttributes are set by passing the optional object through `dojo.setAttr`. See `dojo.setAttr` for noted caveats and nuances, and API if applicable.\n\nPlacement is done via `dojo.place`, assuming the new node to be the action node, passing along the optional reference node and position.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a DIV:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\");\n});\n    \n```\n\n### Example 2\n\nCreate a DIV with content:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", { innerHTML:\"<p>hi</p>\" });\n});\n    \n```\n\n### Example 3\n\nPlace a new DIV in the BODY, with no attributes set\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var n = domConstruct.create(\"div\", null, dojo.body());\n});\n    \n```\n\n### Example 4\n\nCreate an UL, and populate it with LI's. Place the list as the first-child of a node with id=\"someId\":\n\n``` javascript\n      require([\"dojo/dom-construct\", \"dojo/_base/array\"],\nfunction(domConstruct, arrayUtil){\n    var ul = domConstruct.create(\"ul\", null, \"someId\", \"first\");\n    var items = [\"one\", \"two\", \"three\", \"four\"];\n    arrayUtil.forEach(items, function(data){\n        domConstruct.create(\"li\", { innerHTML: data }, ul);\n    });\n});\n    \n```\n\n### Example 5\n\nCreate an anchor, with an href. Place in BODY:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.create(\"a\", { href:\"foo.html\", title:\"Goto FOO!\" }, dojo.body());\n});\n    \n```"
- name: _base/kernel#currency
  id: dojo/_base/kernel#1_10dojo__base_kernel_currency
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### currency

    Defined by: [dojo/currency](../currency)

    localized formatting and parsing routines for currencies
- name: _base/kernel#data
  id: dojo/_base/kernel#1_10dojo__base_kernel_data
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### data

    Defined by: [dojo/data/util/filter](../data/util/filter)
- name: _base/kernel#date
  id: dojo/_base/kernel#1_10dojo__base_kernel_date
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### date

    Defined by: [dojo/date/stamp](../date/stamp)
- name: _base/kernel#declare()
  id: dojo/_base/kernel#1_10dojo__base_kernel_declare
  summary: Create a feature-rich constructor from compact notation
  belongs_to: _base/kernel
  description: "### `declare` `(className,superclass,props)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nCreate a feature-rich constructor from compact notation.\n\nCreate a constructor using a compact notation for inheritance and prototype extension.\n\nMixin ancestors provide a type of multiple inheritance. Prototypes of mixin ancestors are copied to the new class: changes to mixin prototypes will not affect classes to which they have been mixed in.\n\nAncestors can be compound classes created by this version of declare(). In complex cases all base classes are going to be linearized according to C3 MRO algorithm (see <http://www.python.org/download/releases/2.3/mro/> for more details).\n\n\"className\" is cached in \"declaredClass\" property of the new class, if it was supplied. The immediate super class will be cached in \"superclass\" property of the new class.\n\nMethods in \"props\" will be copied and modified: \"nom\" property (the declared name of the method) will be added to all copied functions to help identify them for the internal machinery. Be very careful, while reusing methods: if you use the same function under different names, it can produce errors in some cases.\n\nIt is possible to use constructors created \"manually\" (without declare()) as bases. They will be called as usual during the creation of an instance, their methods will be chained, and even called by \"this.inherited()\".\n\nSpecial property \"-chains-\" governs how to chain methods. It is a dictionary, which uses method names as keys, and hint strings as values. If a hint string is \"after\", this method will be called after methods of its base classes. If a hint string is \"before\", this method will be called before methods of its base classes.\n\nIf \"constructor\" is not mentioned in \"-chains-\" property, it will be chained using the legacy mode: using \"after\" chaining, calling preamble() method before each constructor, if available, and calling postscript() after all constructors were executed. If the hint is \"after\", it is chained as a regular method, but postscript() will be called after the chain of constructors. \"constructor\" cannot be chained \"before\", but it allows a special hint string: \"manual\", which means that constructors are not going to be chained in any way, and programmer will call them manually using this.inherited(). In the latter case postscript() will be called after the construction.\n\nAll chaining hints are \"inherited\" from base classes and potentially can be overridden. Be very careful when overriding hints! Make sure that all chained methods can work in a proposed manner of chaining.\n\nOnce a method was chained, it is impossible to unchain it. The only exception is \"constructor\". You don't need to define a method in order to supply a chaining hint.\n\nIf a method is chained, it cannot use this.inherited() because all other methods in the hierarchy will be called automatically.\n\nUsually constructors and initializers of any kind are chained using \"after\" and destructors of any kind are chained as \"before\". Note that chaining assumes that chained methods do not return any value: any returned value will be discarded.\n\n[TABLE]\n\n**Returns:** [dojo/\\_base/declare.\\_\\_DeclareCreatedObject](declare.__declarecreatedobject) \\| undefined\n\nNew constructor function.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      declare(\"my.classes.bar\", my.classes.foo, {\n    // properties to be added to the class prototype\n    someValue: 2,\n    // initialization function\n    constructor: function(){\n        this.myComplicatedObject = new ReallyComplicatedObject();\n    },\n    // other functions\n    someMethod: function(){\n        doStuff();\n    }\n});\n    \n```\n\n### Example 2\n\n``` javascript\n      var MyBase = declare(null, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass1 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyClass2 = declare(MyBase, {\n    // constructor, properties, and methods go here\n    // ...\n});\nvar MyDiamond = declare([MyClass1, MyClass2], {\n    // constructor, properties, and methods go here\n    // ...\n});\n    \n```\n\n### Example 3\n\n``` javascript\n      var F = function(){ console.log(\"raw constructor\"); };\nF.prototype.method = function(){\n    console.log(\"raw method\");\n};\nvar A = declare(F, {\n    constructor: function(){\n        console.log(\"A.constructor\");\n    },\n    method: function(){\n        console.log(\"before calling F.method...\");\n        this.inherited(arguments);\n        console.log(\"...back in A\");\n    }\n});\nnew A().method();\n// will print:\n// raw constructor\n// A.constructor\n// before calling F.method...\n// raw method\n// ...back in A\n    \n```\n\n### Example 4\n\n``` javascript\n      var A = declare(null, {\n    \"-chains-\": {\n        destroy: \"before\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        console.log(\"B.constructor\");\n    },\n    destroy: function(){\n        console.log(\"B.destroy\");\n    }\n});\nvar C = declare(B, {\n    constructor: function(){\n        console.log(\"C.constructor\");\n    },\n    destroy: function(){\n        console.log(\"C.destroy\");\n    }\n});\nnew C().destroy();\n// prints:\n// B.constructor\n// C.constructor\n// C.destroy\n// B.destroy\n    \n```\n\n### Example 5\n\n``` javascript\n      var A = declare(null, {\n    \"-chains-\": {\n        constructor: \"manual\"\n    }\n});\nvar B = declare(A, {\n    constructor: function(){\n        // ...\n        // call the base constructor with new parameters\n        this.inherited(arguments, [1, 2, 3]);\n        // ...\n    }\n});\n    \n```\n\n### Example 6\n\n``` javascript\n      var A = declare(null, {\n    \"-chains-\": {\n        m1: \"before\"\n    },\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    \"-chains-\": {\n        m2: \"after\"\n    },\n    m1: function(){\n        console.log(\"B.m1\");\n    },\n    m2: function(){\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\nx.m1();\n// prints:\n// B.m1\n// A.m1\nx.m2();\n// prints:\n// A.m2\n// B.m2\n    \n```"
- name: _base/kernel#Deferred()
  id: dojo/_base/kernel#1_10dojo__base_kernel_Deferred
  summary: Deprecated
  belongs_to: _base/kernel
  description: "### `Deferred` `(canceller)`\n\nDefined by [dojo/\\_base/Deferred](deferred)\n\nDeprecated. This module defines the legacy dojo/\\_base/Deferred API. New code should use dojo/Deferred instead.\n\nThe Deferred API is based on the concept of promises that provide a generic interface into the eventual completion of an asynchronous action. The motivation for promises fundamentally is about creating a separation of concerns that allows one to achieve the same type of call patterns and logical data flow in asynchronous code as can be achieved in synchronous code. Promises allows one to be able to call a function purely with arguments needed for execution, without conflating the call with concerns of whether it is sync or async. One shouldn't need to alter a call's arguments if the implementation switches from sync to async (or vice versa). By having async functions return promises, the concerns of making the call are separated from the concerns of asynchronous interaction (which are handled by the promise).\n\nThe Deferred is a type of promise that provides methods for fulfilling the promise with a successful result or an error. The most important method for working with Dojo's promises is the then() method, which follows the CommonJS proposed promise API. An example of using a Dojo promise:\n\n``` javascript\n      var resultingPromise = someAsyncOperation.then(function(result){\n    ... handle result ...\n},\nfunction(error){\n    ... handle error ...\n});\n    \n```\n\nThe .then() call returns a new promise that represents the result of the execution of the callback. The callbacks will never affect the original promises value.\n\nThe Deferred instances also provide the following functions for backwards compatibility:\n\n- addCallback(handler)\n- addErrback(handler)\n- callback(result)\n- errback(result)\n\nCallbacks are allowed to return promises themselves, so you can build complicated sequences of events with ease.\n\nThe creator of the Deferred may specify a canceller. The canceller is a function that will be called if Deferred.cancel is called before the Deferred fires. You can use this to implement clean aborting of an XMLHttpRequest, etc. Note that cancel will fire the deferred with a CancelledError (unless your canceller returns another kind of error), so the errbacks should be prepared to handle that error for cancellable Deferreds.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var deferred = new Deferred();\nsetTimeout(function(){ deferred.callback({success: true}); }, 1000);\nreturn deferred;\n    \n```\n\n### Example 2\n\nDeferred objects are often used when making code asynchronous. It may be easiest to write functions in a synchronous manner and then split code using a deferred to trigger a response to a long-lived operation. For example, instead of register a callback function to denote when a rendering operation completes, the function can simply return a deferred:\n\n``` javascript\n      // callback style:\nfunction renderLotsOfData(data, callback){\n    var success = false\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        success = true;\n    }catch(e){ }\n    if(callback){\n        callback(success);\n    }\n}\n\n\n// using callback style\nrenderLotsOfData(someDataObj, function(success){\n    // handles success or failure\n    if(!success){\n        promptUserToRecover();\n    }\n});\n// NOTE: no way to add another callback here!!\n    \n```\n\n### Example 3\n\nUsing a Deferred doesn't simplify the sending code any, but it provides a standard interface for callers and senders alike, providing both with a simple way to service multiple callbacks for an operation and freeing both sides from worrying about details such as \"did this get called already?\". With Deferreds, new callbacks can be added at any time.\n\n``` javascript\n      // Deferred style:\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    try{\n        for(var x in data){\n            renderDataitem(data[x]);\n        }\n        d.callback(true);\n    }catch(e){\n        d.errback(new Error(\"rendering failed\"));\n    }\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n// NOTE: addErrback and addCallback both return the Deferred\n// again, so we could chain adding callbacks or save the\n// deferred for later should we need to be notified again.\n    \n```\n\n### Example 4\n\nIn this example, renderLotsOfData is synchronous and so both versions are pretty artificial. Putting the data display on a timeout helps show why Deferreds rock:\n\n``` javascript\n      // Deferred style and async func\nfunction renderLotsOfData(data){\n    var d = new Deferred();\n    setTimeout(function(){\n        try{\n            for(var x in data){\n                renderDataitem(data[x]);\n            }\n            d.callback(true);\n        }catch(e){\n            d.errback(new Error(\"rendering failed\"));\n        }\n    }, 100);\n    return d;\n}\n\n\n// using Deferred style\nrenderLotsOfData(someDataObj).then(null, function(){\n    promptUserToRecover();\n});\n    \n```\n\nNote that the caller doesn't have to change his code at all to handle the asynchronous case."
- name: _base/kernel#DeferredList()
  id: dojo/_base/kernel#1_10dojo__base_kernel_DeferredList
  summary: Deprecated, use dojo/promise/all instead
  belongs_to: _base/kernel
  description: |-
    ### `DeferredList` `(list,fireOnOneCallback,fireOnOneErrback,consumeErrors,canceller)`

    Defined by [dojo/DeferredList](../deferredlist)

    Deprecated, use dojo/promise/all instead. Provides event handling for a group of Deferred objects.

    DeferredList takes an array of existing deferreds and returns a new deferred of its own this new deferred will typically have its callback fired when all of the deferreds in the given list have fired their own deferreds. The parameters `fireOnOneCallback` and fireOnOneErrback, will fire before all the deferreds as appropriate

    [TABLE]
- name: _base/kernel#deprecated()
  id: dojo/_base/kernel#1_10dojo__base_kernel_deprecated
  summary: Log a debug message to indicate that a behavior has been deprecated
  belongs_to: _base/kernel
  description: "### `deprecated` `(behaviour,extra,removal)`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\nLog a debug message to indicate that a behavior has been deprecated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.deprecated(\"myApp.getTemp()\", \"use myApp.getLocaleTemp() instead\", \"1.0\");\n    \n```"
- name: _base/kernel#destroy()
  id: dojo/_base/kernel#1_10dojo__base_kernel_destroy
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `destroy` `(node)`

    Defined by [dojo/\_base/html](html)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | node      | undefined |             |
- name: _base/kernel#dijit
  id: dojo/_base/kernel#1_10dojo__base_kernel_dijit
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### dijit

    Defined by: [dojo/\_base/kernel](kernel)
- name: _base/kernel#disconnect()
  id: dojo/_base/kernel#1_10dojo__base_kernel_disconnect
  summary: Remove a link created by dojo.connect
  belongs_to: _base/kernel
  description: |-
    ### `disconnect` `(handle)`

    Defined by [dojo/\_base/connect](connect)

    Remove a link created by dojo.connect.

    Removes the connection between event and the method referenced by handle.

    |           |        |                                                                        |
    |-----------|--------|------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                            |
    | handle    | Handle | the return value of the dojo.connect call that created the connection. |
- name: _base/kernel#dnd
  id: dojo/_base/kernel#1_10dojo__base_kernel_dnd
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### dnd

    Defined by: [dojo/dnd/common](../dnd/common)
- name: _base/kernel#doc
  id: dojo/_base/kernel#1_10dojo__base_kernel_doc
  summary: Alias for the current document
  belongs_to: _base/kernel
  description: |-
    ### doc

    Defined by: [dojo/\_base/window](window)

    Alias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().
- name: _base/kernel#docScroll()
  id: dojo/_base/kernel#1_10dojo__base_kernel_docScroll
  summary: Returns an object with {node, x, y} with corresponding offsets
  belongs_to: _base/kernel
  description: |-
    ### `docScroll` `(doc)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    Returns an object with {node, x, y} with corresponding offsets.

    [TABLE]

    **Returns:** Object \| undefined
- name: _base/kernel#dojox
  id: dojo/_base/kernel#1_10dojo__base_kernel_dojox
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### dojox

    Defined by: [dojo/\_base/kernel](kernel)
- name: _base/kernel#empty()
  id: dojo/_base/kernel#1_10dojo__base_kernel_empty
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `empty` `(node)`

    Defined by [dojo/\_base/html](html)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | node      | undefined |             |
- name: _base/kernel#eval()
  id: dojo/_base/kernel#1_10dojo__base_kernel_eval
  summary: A legacy method created for use exclusively by internal Dojo methods
  belongs_to: _base/kernel
  description: |-
    ### `eval` `(scriptText)`

    Defined by [dojo/\_base/kernel](kernel)

    A legacy method created for use exclusively by internal Dojo methods. Do not use this method directly unless you understand its possibly-different implications on the platforms your are targeting.

    Makes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers that support indirect eval.

    As usual, IE does not. On IE, the only way to implement global eval is to use execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval. This implementation uses the technique of executing eval in the scope of a function that is a single scope frame below the global scope; thereby coming close to the global scope. Note carefully that

    dojo.eval("var pi = 3.14;");

    will define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want to define a global variable using dojo.eval, write something like

    dojo.eval("window.pi = 3.14;")

    |            |           |                         |
    |------------|-----------|-------------------------|
    | Parameter  | Type      | Description             |
    | scriptText | undefined | The text to evaluation. |

    **Returns:** any

    The result of the evaluation. Often `undefined`
- name: _base/kernel#every()
  id: dojo/_base/kernel#1_10dojo__base_kernel_every
  summary: Determines whether or not every item in arr satisfies the condition implemented by callback
  belongs_to: _base/kernel
  description: "### `every` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not every item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns false\narray.every([1, 2, 3, 4], function(item){ return item>1; });\n    \n```\n\n### Example 2\n\n``` javascript\n      // returns true\narray.every([1, 2, 3, 4], function(item){ return item>0; });\n    \n```"
- name: _base/kernel#exit()
  id: dojo/_base/kernel#1_10dojo__base_kernel_exit
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `exit` `(exitcode)`

    Defined by [dojo/\_base/configSpidermonkey](configspidermonkey)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | exitcode  | undefined |             |
- name: _base/kernel#experimental()
  id: dojo/_base/kernel#1_10dojo__base_kernel_experimental
  summary: Marks code as experimental
  belongs_to: _base/kernel
  description: "### `experimental` `(moduleName,extra)`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\nMarks code as experimental.\n\nThis can be used to mark a function, file, or module as experimental. Experimental code is not ready to be used, and the APIs are subject to change without notice. Experimental code may be completed deleted without going through the normal deprecation process.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.experimental(\"dojo.data.Result\");\n    \n```\n\n### Example 2\n\n``` javascript\n      dojo.experimental(\"dojo.weather.toKelvin()\", \"PENDING approval from NOAA\");\n    \n```"
- name: _base/kernel#fadeIn()
  id: dojo/_base/kernel#1_10dojo__base_kernel_fadeIn
  summary: Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque
  belongs_to: _base/kernel
  description: |-
    ### `fadeIn` `(args)`

    Defined by [dojo/\_base/fx](fx)

    Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#fadeOut()
  id: dojo/_base/kernel#1_10dojo__base_kernel_fadeOut
  summary: Returns an animation that will fade node defined in 'args' from its current opacity to fully transparent
  belongs_to: _base/kernel
  description: |-
    ### `fadeOut` `(args)`

    Defined by [dojo/\_base/fx](fx)

    Returns an animation that will fade node defined in 'args' from its current opacity to fully transparent.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#fieldToObject()
  id: dojo/_base/kernel#1_10dojo__base_kernel_fieldToObject
  summary: Serialize a form field to a JavaScript object
  belongs_to: _base/kernel
  description: |-
    ### `fieldToObject` `(inputNode)`

    Defined by [dojo/dom-form](../dom-form)

    Serialize a form field to a JavaScript object.

    Returns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.

    |           |                   |             |
    |-----------|-------------------|-------------|
    | Parameter | Type              | Description |
    | inputNode | DOMNode \| String |             |

    **Returns:** Object \| undefined
- name: _base/kernel#filter()
  id: dojo/_base/kernel#1_10dojo__base_kernel_filter
  summary: Returns a new Array with those items from arr that match the condition implemented by callback
  belongs_to: _base/kernel
  description: "### `filter` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nReturns a new Array with those items from arr that match the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter>\n\n[TABLE]\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns [2, 3, 4]\narray.filter([1, 2, 3, 4], function(item){ return item>1; });\n    \n```"
- name: _base/kernel#fixEvent()
  id: dojo/_base/kernel#1_10dojo__base_kernel_fixEvent
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `fixEvent` `(evt,sender)`

    Defined by [dojo/\_base/event](event)

    normalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions

    |           |         |                                  |
    |-----------|---------|----------------------------------|
    | Parameter | Type    | Description                      |
    | evt       | Event   | native event object              |
    | sender    | DOMNode | node to treat as "currentTarget" |

    **Returns:** Event

    native event object
- name: _base/kernel#fixIeBiDiScrollLeft()
  id: dojo/_base/kernel#1_10dojo__base_kernel_fixIeBiDiScrollLeft
  summary: In RTL direction, scrollLeft should be a negative value, but IE returns a positive one
  belongs_to: _base/kernel
  description: |-
    ### `fixIeBiDiScrollLeft` `(scrollLeft,doc)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    In RTL direction, scrollLeft should be a negative value, but IE returns a positive one. All codes using documentElement.scrollLeft must call this function to fix this error, otherwise the position will offset to right when there is a horizontal scrollbar.

    [TABLE]

    **Returns:** Number \| number
- name: _base/kernel#forEach()
  id: dojo/_base/kernel#1_10dojo__base_kernel_forEach
  summary: for every item in arr, callback is invoked
  belongs_to: _base/kernel
  description: "### `forEach` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nfor every item in arr, callback is invoked. Return values are ignored. If you want to break out of the loop, consider using array.every() or array.some(). forEach does not allow breaking out of the loop over the items in arr.\n\nThis function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach>\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // log out all members of the array:\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item){\n          console.log(item);\n      }\n);\n    \n```\n\n### Example 2\n\n``` javascript\n      // log out the members and their indexes\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      function(item, idx, arr){\n          console.log(item, \"at index:\", idx);\n      }\n);\n    \n```\n\n### Example 3\n\n``` javascript\n      // use a scoped object member as the callback\n\nvar obj = {\n      prefix: \"logged via obj.callback:\",\n      callback: function(item){\n          console.log(this.prefix, item);\n      }\n};\n\n// specifying the scope function executes the callback in that scope\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      obj.callback,\n      obj\n);\n\n// alternately, we can accomplish the same thing with lang.hitch()\narray.forEach(\n      [ \"thinger\", \"blah\", \"howdy\", 10 ],\n      lang.hitch(obj, \"callback\")\n);\n    \n```"
- name: _base/kernel#formToJson()
  id: dojo/_base/kernel#1_10dojo__base_kernel_formToJson
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `formToJson` `(formNode,prettyPrint)`

    Defined by [dojo/dom-form](../dom-form)

    Create a serialized JSON string from a form node or string ID identifying the form to serialize

    [TABLE]

    **Returns:** String \| undefined
- name: _base/kernel#formToObject()
  id: dojo/_base/kernel#1_10dojo__base_kernel_formToObject
  summary: Serialize a form node to a JavaScript object
  belongs_to: _base/kernel
  description: "### `formToObject` `(formNode)`\n\nDefined by [dojo/dom-form](../dom-form)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n      <form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n    \n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```"
- name: _base/kernel#formToQuery()
  id: dojo/_base/kernel#1_10dojo__base_kernel_formToQuery
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `formToQuery` `(formNode)`

    Defined by [dojo/dom-form](../dom-form)

    Returns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize

    |           |                   |             |
    |-----------|-------------------|-------------|
    | Parameter | Type              | Description |
    | formNode  | DOMNode \| String |             |

    **Returns:** String \| undefined
- name: _base/kernel#fromJson()
  id: dojo/_base/kernel#1_10dojo__base_kernel_fromJson
  summary: Parses a JavaScript expression and returns a JavaScript value
  belongs_to: _base/kernel
  description: |-
    ### `fromJson` `(js)`

    Defined by [dojo/\_base/json](json)

    Parses a JavaScript expression and returns a JavaScript value.

    Throws for invalid JavaScript expressions. It does not use a strict JSON parser. It always delegates to eval(). The content passed to this method must therefore come from a trusted source. It is recommend that you use [dojo/json](../json)'s parse function for an implementation uses the (faster) native JSON parse when available.

    |           |        |                                                                                                           |
    |-----------|--------|-----------------------------------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                                               |
    | js        | String | a string literal of a JavaScript expression, for instance: `'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'` |

    **Returns:** undefined
- name: _base/kernel#fx
  id: dojo/_base/kernel#1_10dojo__base_kernel_fx
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### fx

    Defined by: [dojo/fx](../fx)

    Effects library on top of Base animations
- name: _base/kernel#gears
  id: dojo/_base/kernel#1_10dojo__base_kernel_gears
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### gears

    Defined by: [dojo/gears](../gears)

    TODOC
- name: _base/kernel#getAttr()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getAttr
  summary: Gets an attribute on an HTML element
  belongs_to: _base/kernel
  description: "### `getAttr` `(node,name)`\n\nDefined by [dojo/dom-attr](../dom-attr)\n\nGets an attribute on an HTML element.\n\nHandles normalized getting of attributes on DOM Nodes.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | DOMNode \\| String | id or reference to the element to get the attribute on |\n| name      | String            | the name of the attribute to get.                      |\n\n**Returns:** any \\| undefined \\| null\n\nthe value of the requested attribute or null if that attribute does not have a specified or default value;\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" attribute on a node\nrequire([\"dojo/dom-attr\", \"dojo/dom\"], function(domAttr, dom){\n    domAttr.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domAttr.get(\"nodeId\", \"foo\");\n}); \n    \n```"
- name: _base/kernel#getBorderExtents()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getBorderExtents
  summary: returns an object with properties useful for noting the border dimensions
  belongs_to: _base/kernel
  description: |-
    ### `getBorderExtents` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    returns an object with properties useful for noting the border dimensions.

    - l/t/r/b = the sum of left/top/right/bottom border (respectively)
    - w = the sum of the left and right border
    - h = the sum of the top and bottom border

    The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.

    [TABLE]

    **Returns:** object
- name: _base/kernel#getComputedStyle()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getComputedStyle
  summary: Returns a "computed style" object
  belongs_to: _base/kernel
  description: "### `getComputedStyle` `(node)`\n\nDefined by [dojo/dom-style](../dom-style)\n\nReturns a \"computed style\" object.\n\nGets a \"computed style\" object which can be used to gather information about the current state of the rendered node.\n\nNote that this may behave differently on different browsers. Values may have different formats and value encodings across browsers.\n\nNote also that this method is expensive. Wherever possible, reuse the returned object.\n\nUse the [dojo/dom-style.get()](../dom-style#get) method for more consistent (pixelized) return values.\n\n|           |         |                                                                                    |\n|-----------|---------|------------------------------------------------------------------------------------|\n| Parameter | Type    | Description                                                                        |\n| node      | DOMNode | A reference to a DOM node. Does NOT support taking an ID string for speed reasons. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.getComputedStyle(dom.byId('foo')).borderWidth;\n});\n    \n```\n\n### Example 2\n\nReusing the returned object, avoiding multiple lookups:\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    var cs = domStyle.getComputedStyle(dom.byId(\"someNode\"));\n    var w = cs.width, h = cs.height;\n});\n    \n```"
- name: _base/kernel#getContentBox()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getContentBox
  summary: Returns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model
  belongs_to: _base/kernel
  description: |-
    ### `getContentBox` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    Returns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.

    [TABLE]

    **Returns:** object
- name: _base/kernel#getIeDocumentElementOffset()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getIeDocumentElementOffset
  summary: such as node.offsetLeft, node.offsetTop, node.style.left and node.style.top
  belongs_to: _base/kernel
  description: "### `getIeDocumentElementOffset` `(doc)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nreturns the offset in x and y from the document body to the visual edge of the page for IE\n\nThe following values in IE contain an offset:\n\n``` javascript\n      event.clientX\nevent.clientY\nnode.getBoundingClientRect().left\nnode.getBoundingClientRect().top\n    \n```\n\nBut other position related values do not contain this offset,\n\nsuch as node.offsetLeft, node.offsetTop, node.style.left and node.style.top. The offset is always (2, 2) in LTR direction. When the body is in RTL direction, the offset counts the width of left scroll bar's width. This function computes the actual offset.\n\n[TABLE]\n\n**Returns:** object"
- name: _base/kernel#getL10nName()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getL10nName
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `getL10nName` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](../i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** string
- name: _base/kernel#getMarginBox()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getMarginBox
  summary: returns an object that encodes the width, height, left and top positions of the node's margin box
  belongs_to: _base/kernel
  description: |-
    ### `getMarginBox` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    returns an object that encodes the width, height, left and top positions of the node's margin box.

    [TABLE]

    **Returns:** object
- name: _base/kernel#getMarginExtents()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getMarginExtents
  summary: returns object with properties useful for box fitting with regards to box margins (i.e., the outer-box)
  belongs_to: _base/kernel
  description: |-
    ### `getMarginExtents` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    returns object with properties useful for box fitting with regards to box margins (i.e., the outer-box).

    - l/t = marginLeft, marginTop, respectively
    - w = total width, margin inclusive
    - h = total height, margin inclusive

    The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.

    [TABLE]

    **Returns:** object
- name: _base/kernel#getMarginSize()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getMarginSize
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `getMarginSize` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    returns an object that encodes the width and height of the node's margin box

    [TABLE]

    **Returns:** object
- name: _base/kernel#getNodeProp()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getNodeProp
  summary: Returns an effective value of a property or an attribute
  belongs_to: _base/kernel
  description: |-
    ### `getNodeProp` `(node,name)`

    Defined by [dojo/dom-attr](../dom-attr)

    Returns an effective value of a property or an attribute.

    |           |                   |                                                             |
    |-----------|-------------------|-------------------------------------------------------------|
    | Parameter | Type              | Description                                                 |
    | node      | DOMNode \| String | id or reference to the element to remove the attribute from |
    | name      | String            | the name of the attribute                                   |

    **Returns:** any

    the value of the attribute
- name: _base/kernel#getPadBorderExtents()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getPadBorderExtents
  summary: Returns object with properties useful for box fitting with regards to padding
  belongs_to: _base/kernel
  description: |-
    ### `getPadBorderExtents` `(node,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    Returns object with properties useful for box fitting with regards to padding.

    - l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)
    - w = the sum of the left and right padding and border
    - h = the sum of the top and bottom padding and border

    The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.

    [TABLE]

    **Returns:** object
- name: _base/kernel#getPadExtents()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getPadExtents
  summary: Returns object with special values specifically useful for node fitting
  belongs_to: _base/kernel
  description: "### `getPadExtents` `(node,computedStyle)`\n\nDefined by [dojo/dom-geometry](../dom-geometry)\n\nReturns object with special values specifically useful for node fitting.\n\nReturns an object with `w`, `h`, `l`, `t` properties:\n\n``` javascript\n      l/t/r/b = left/top/right/bottom padding (respectively)\nw = the total of the left and right padding\nh = the total of the top and bottom padding\n    \n```\n\nIf 'node' has position, l/t forms the origin for child nodes.\n\nThe w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.\n\n[TABLE]\n\n**Returns:** object"
- name: _base/kernel#getProp()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getProp
  summary: Gets a property on an HTML element
  belongs_to: _base/kernel
  description: "### `getProp` `(node,name)`\n\nDefined by [dojo/dom-prop](../dom-prop)\n\nGets a property on an HTML element.\n\nHandles normalized getting of properties on DOM nodes.\n\n|           |                   |                                                       |\n|-----------|-------------------|-------------------------------------------------------|\n| Parameter | Type              | Description                                           |\n| node      | DOMNode \\| String | id or reference to the element to get the property on |\n| name      | String            | the name of the property to get.                      |\n\n**Returns:** any \\| undefined\n\nthe value of the requested property or its default value\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" property on a node\nrequire([\"dojo/dom-prop\", \"dojo/dom\"], function(domProp, dom){\n    domProp.get(dom.byId(\"nodeId\"), \"foo\");\n    // or we can just pass the id:\n    domProp.get(\"nodeId\", \"foo\");\n});\n    \n```"
- name: _base/kernel#getStyle()
  id: dojo/_base/kernel#1_10dojo__base_kernel_getStyle
  summary: Accesses styles on a node
  belongs_to: _base/kernel
  description: "### `getStyle` `(node,name)`\n\nDefined by [dojo/dom-style](../dom-style)\n\nAccesses styles on a node.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use [dojo/dom-geometry.getMarginBox()](../dom-geometry#getMarginBox), [dojo/dom-geometry.getContentBox()](../dom-geometry#getContentBox) or [dojo/dom-geometry.getPosition()](../dom-geometry#getPosition).\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\");\n});\n    \n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.get(\"thinger\", \"opacity\"); // 1 by default\n});\n    \n```"
- name: _base/kernel#global
  id: dojo/_base/kernel#1_10dojo__base_kernel_global
  summary: Alias for the current window
  belongs_to: _base/kernel
  description: |-
    ### global

    Defined by: [dojo/\_base/window](window)

    Alias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().
- name: _base/kernel#hasAttr()
  id: dojo/_base/kernel#1_10dojo__base_kernel_hasAttr
  summary: Returns true if the requested attribute is specified on the given element, and false otherwise
  belongs_to: _base/kernel
  description: |-
    ### `hasAttr` `(node,name)`

    Defined by [dojo/dom-attr](../dom-attr)

    Returns true if the requested attribute is specified on the given element, and false otherwise.

    |           |                   |                                         |
    |-----------|-------------------|-----------------------------------------|
    | Parameter | Type              | Description                             |
    | node      | DOMNode \| String | id or reference to the element to check |
    | name      | String            | the name of the attribute               |

    **Returns:** Boolean \| contentWindow.document isn't accessible within IE7/8

    true if the requested attribute is specified on the given element, and false otherwise
- name: _base/kernel#hasClass()
  id: dojo/_base/kernel#1_10dojo__base_kernel_hasClass
  summary: Returns whether or not the specified classes are a portion of the class list currently applied to the node
  belongs_to: _base/kernel
  description: "### `hasClass` `(node,classStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nReturns whether or not the specified classes are a portion of the class list currently applied to the node.\n\n|           |                   |                                                        |\n|-----------|-------------------|--------------------------------------------------------|\n| Parameter | Type              | Description                                            |\n| node      | String \\| DOMNode | String ID or DomNode reference to check the class for. |\n| classStr  | String            | A string class name to look for.                       |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nDo something if a node with id=\"someNode\" has class=\"aSillyClassName\" present\n\n``` javascript\n      if(dojo.hasClass(\"someNode\",\"aSillyClassName\")){ ... }\n    \n```"
- name: _base/kernel#hash()
  id: dojo/_base/kernel#1_10dojo__base_kernel_hash
  summary: Gets or sets the hash string in the browser URL
  belongs_to: _base/kernel
  description: "### `hash` `(hash,replace)`\n\nDefined by [dojo/hash](../hash)\n\nGets or sets the hash string in the browser URL.\n\nHandles getting and setting of location.hash.\n\n- If no arguments are passed, acts as a getter.\n- If a string is passed, acts as a setter.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, returns the current hash string. when used as a setter, returns the new hash string.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      topic.subscribe(\"/dojo/hashchange\", context, callback);\n\nfunction callback (hashValue){\n    // do something based on the hash value.\n}\n    \n```"
- name: _base/kernel#html
  id: dojo/_base/kernel#1_10dojo__base_kernel_html
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### html

    Defined by: [dojo/html](../html)

    TODOC
- name: _base/kernel#i18n
  id: dojo/_base/kernel#1_10dojo__base_kernel_i18n
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### i18n

    Defined by: [dojo/i18n](../i18n)

    This module implements the [dojo/i18n](../i18n)! plugin and the v1.6- i18n API
- name: _base/kernel#indexOf()
  id: dojo/_base/kernel#1_10dojo__base_kernel_indexOf
  summary: locates the first index of the provided value in the passed array
  belongs_to: _base/kernel
  description: |-
    ### `indexOf` `(arr,value,fromIndex,findLast)`

    Defined by [dojo/\_base/array](array)

    locates the first index of the provided value in the passed array. If the value is not found, -1 is returned.

    This method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:

    1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's indexOf skips the holes in the sparse array.
    2.  uses equality (==) rather than strict equality (===)

    For details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf>

    [TABLE]

    **Returns:** Number
- name: _base/kernel#io
  id: dojo/_base/kernel#1_10dojo__base_kernel_io
  summary: Version as a Number if client is android browser
  belongs_to: _base/kernel
  description: |-
    ### io

    Defined by: [dojo/io/iframe](../io/iframe)

    ### isAir

    Defined by: [dojo/\_base/sniff](sniff)

    True if client is Adobe Air

    ### isAndroid

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is android browser. undefined otherwise.

    ### isAsync

    Defined by: [dojo/\_base/kernel](kernel)

    ### isBrowser

    Defined by: [dojo/\_base/configFirefoxExtension](configfirefoxextension)

    ### isChrome

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is Chrome browser. undefined otherwise.
- name: _base/kernel#isBodyLtr()
  id: dojo/_base/kernel#1_10dojo__base_kernel_isBodyLtr
  summary: Returns true if the current language is left-to-right, and false otherwise
  belongs_to: _base/kernel
  description: |-
    ### `isBodyLtr` `(doc)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    Returns true if the current language is left-to-right, and false otherwise.

    [TABLE]

    **Returns:** Boolean \| boolean
- name: _base/kernel#isCopyKey
  id: dojo/_base/kernel#1_10dojo__base_kernel_isCopyKey
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### isCopyKey

    Defined by: [dojox/grid/\_Grid](http://dojotoolkit.org/api/1.10/dojox/grid/_Grid)
- name: _base/kernel#isDescendant()
  id: dojo/_base/kernel#1_10dojo__base_kernel_isDescendant
  summary: null
  belongs_to: _base/kernel
  description: "### `isDescendant` `(node,ancestor)`\n\nDefined by [dojo/dom](../dom)\n\nReturns true if node is a descendant of ancestor\n\n|           |                   |                                                                 |\n|-----------|-------------------|-----------------------------------------------------------------|\n| Parameter | Type              | Description                                                     |\n| node      | DOMNode \\| String | string id or node reference to test                             |\n| ancestor  | DOMNode \\| String | string id or node reference of potential parent to test against |\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\nTest is node id=\"bar\" is a descendant of node id=\"foo\"\n\n``` javascript\n      require([\"dojo/dom\"], function(dom){\n    if(dom.isDescendant(\"bar\", \"foo\")){ ... }\n});\n    \n```"
- name: _base/kernel#isFF
  id: dojo/_base/kernel#1_10dojo__base_kernel_isFF
  summary: Version as a Number if client is MSIE(PC)
  belongs_to: _base/kernel
  description: |-
    ### isFF

    Defined by: [dojo/\_base/configFirefoxExtension](configfirefoxextension)

    ### isIE

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is MSIE(PC). undefined otherwise. Corresponds to major detected IE version (6, 7, 8, etc.)

    ### isIos

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is iPhone, iPod, or iPad. undefined otherwise.

    ### isKhtml

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is a KHTML browser. undefined otherwise. Corresponds to major detected version.

    ### isMac

    Defined by: [dojo/\_base/sniff](sniff)

    True if the client runs on Mac
- name: _base/kernel#isMoz
  id: dojo/_base/kernel#1_10dojo__base_kernel_isMoz
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### isMoz

    Defined by: [dojo/\_base/configFirefoxExtension](configfirefoxextension)
- name: _base/kernel#isMozilla
  id: dojo/_base/kernel#1_10dojo__base_kernel_isMozilla
  summary: Version as a Number if client is Opera
  belongs_to: _base/kernel
  description: |-
    ### isMozilla

    Defined by: [dojo/\_base/configFirefoxExtension](configfirefoxextension)

    ### isOpera

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is Opera. undefined otherwise. Corresponds to major detected version.

    ### isQuirks

    Defined by: [dojo/\_base/configFirefoxExtension](configfirefoxextension)

    ### isSafari

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is Safari or iPhone. undefined otherwise.

    ### isSpidermonkey

    Defined by: [dojo/\_base/configSpidermonkey](configspidermonkey)

    ### isWebKit

    Defined by: [dojo/\_base/sniff](sniff)

    Version as a Number if client is a WebKit-derived browser (Konqueror, Safari, Chrome, etc.). undefined otherwise.

    ### isWii

    Defined by: [dojo/\_base/sniff](sniff)

    True if client is Wii
- name: _base/kernel#keys
  id: dojo/_base/kernel#1_10dojo__base_kernel_keys
  summary: Definitions for common key values
  belongs_to: _base/kernel
  description: |-
    ### keys

    Defined by: [dojo/keys](../keys)

    Definitions for common key values. Client code should test keyCode against these named constants, as the actual codes can vary by browser.
- name: _base/kernel#lastIndexOf()
  id: dojo/_base/kernel#1_10dojo__base_kernel_lastIndexOf
  summary: locates the last index of the provided value in the passed array
  belongs_to: _base/kernel
  description: |-
    ### `lastIndexOf` `(arr,value,fromIndex)`

    Defined by [dojo/\_base/array](array)

    locates the last index of the provided value in the passed array. If the value is not found, -1 is returned.

    This method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:

    1.  when run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript 1.6's lasIndexOf skips the holes in the sparse array.
    2.  uses equality (==) rather than strict equality (===)

    For details on this method, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf>

    [TABLE]

    **Returns:** Number
- name: _base/kernel#loadInit()
  id: dojo/_base/kernel#1_10dojo__base_kernel_loadInit
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `loadInit` `(f)`

    Defined by [dojo/\_base/loader](loader)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | f         | undefined |             |
- name: _base/kernel#locale
  id: dojo/_base/kernel#1_10dojo__base_kernel_locale
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### locale

    Defined by: [dojo/\_base/configFirefoxExtension](configfirefoxextension)
- name: _base/kernel#map()
  id: dojo/_base/kernel#1_10dojo__base_kernel_map
  summary: 'This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the "holes" in the sparse array to the callback function with a value of undefined'
  belongs_to: _base/kernel
  description: "### `map` `(arr,callback,thisObject,Ctr)`\n\nDefined by [dojo/\\_base/array](array)\n\napplies callback to each element of arr and returns an Array with the results\n\nThis function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map>\n\n[TABLE]\n\n**Returns:** Array \\| instance\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // returns [2, 3, 4, 5]\narray.map([1, 2, 3, 4], function(item){ return item+1 });\n    \n```"
- name: _base/kernel#marginBox()
  id: dojo/_base/kernel#1_10dojo__base_kernel_marginBox
  summary: Getter/setter for the margin-box of node
  belongs_to: _base/kernel
  description: "### `marginBox` `(node,box)`\n\nDefined by [dojo/\\_base/html](html)\n\nGetter/setter for the margin-box of node.\n\nGetter/setter for the margin-box of node. Returns an object in the expected format of box (regardless if box is passed). The object might look like: `{ l: 50, t: 200, w: 300: h: 150 }` for a node offset from its parent 50px to the left, 200px from the top with a margin width of 300px and a margin-height of 150px.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nRetrieve the margin box of a passed node\n\n``` javascript\n      var box = dojo.marginBox(\"someNodeId\");\nconsole.dir(box);\n    \n```\n\n### Example 2\n\nSet a node's margin box to the size of another node\n\n``` javascript\n      var box = dojo.marginBox(\"someNodeId\");\ndojo.marginBox(\"someOtherNode\", box);\n    \n```"
- name: _base/kernel#moduleUrl()
  id: dojo/_base/kernel#1_10dojo__base_kernel_moduleUrl
  summary: Returns a URL relative to a module
  belongs_to: _base/kernel
  description: "### `moduleUrl` `(module,url)`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\nReturns a URL relative to a module.\n\n[TABLE]\n\n**Returns:** string\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var pngPath = dojo.moduleUrl(\"acme\",\"images/small.png\");\nconsole.dir(pngPath); // list the object properties\n// create an image and set it's source to pngPath's value:\nvar img = document.createElement(\"img\");\nimg.src = pngPath;\n// add our image to the document\ndojo.body().appendChild(img);\n    \n```\n\n### Example 2\n\nyou may de-reference as far as you like down the package hierarchy. This is sometimes handy to avoid lengthy relative urls or for building portable sub-packages. In this example, the `acme.widget` and `acme.util` directories may be located under different roots (see `dojo.registerModulePath`) but the the modules which reference them can be unaware of their relative locations on the filesystem:\n\n``` javascript\n      // somewhere in a configuration block\ndojo.registerModulePath(\"acme.widget\", \"../../acme/widget\");\ndojo.registerModulePath(\"acme.util\", \"../../util\");\n\n// ...\n\n// code in a module using acme resources\nvar tmpltPath = dojo.moduleUrl(\"acme.widget\",\"templates/template.html\");\nvar dataPath = dojo.moduleUrl(\"acme.util\",\"resources/data.json\");\n    \n```"
- name: _base/kernel#mouseButtons
  id: dojo/_base/kernel#1_10dojo__base_kernel_mouseButtons
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### mouseButtons

    Defined by: [dojo/mouse](../mouse)
- name: _base/kernel#NodeList()
  id: dojo/_base/kernel#1_10dojo__base_kernel_NodeList
  summary: Array-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation
  belongs_to: _base/kernel
  description: "### `NodeList` `(array)`\n\nDefined by [dojo/query](../query)\n\nArray-like object which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo/query() calls.\n\nNodeList instances provide many utilities that reflect core Dojo APIs for Array iteration and manipulation, DOM manipulation, and event handling. Instead of needing to dig up functions in the dojo package, NodeLists generally make the full power of Dojo available for DOM manipulation tasks in a simple, chainable way.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| array     | undefined |             |\n\n**Returns:** Array\n\n## Examples\n\n### Example 1\n\ncreate a node list from a node\n\n``` javascript\n      require([\"dojo/query\", \"dojo/dom\"\n], function(query, dom){\n    query.NodeList(dom.byId(\"foo\"));\n});\n    \n```\n\n### Example 2\n\nget a NodeList from a CSS query and iterate on it\n\n``` javascript\n      require([\"dojo/on\", \"dojo/dom\"\n], function(on, dom){\n    var l = query(\".thinger\");\n    l.forEach(function(node, index, nodeList){\n        console.log(index, node.innerHTML);\n    });\n});\n    \n```\n\n### Example 3\n\nuse native and Dojo-provided array methods to manipulate a NodeList without needing to use dojo.\\* functions explicitly:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/dom-construct\", \"dojo/dom\"\n], function(query, domConstruct, dom){\n    var l = query(\".thinger\");\n    // since NodeLists are real arrays, they have a length\n    // property that is both readable and writable and\n    // push/pop/shift/unshift methods\n    console.log(l.length);\n    l.push(domConstruct.create(\"span\"));\n\n    // dojo's normalized array methods work too:\n    console.log( l.indexOf(dom.byId(\"foo\")) );\n    // ...including the special \"function as string\" shorthand\n    console.log( l.every(\"item.nodeType == 1\") );\n\n    // NodeLists can be [..] indexed, or you can use the at()\n    // function to get specific items wrapped in a new NodeList:\n    var node = l[3]; // the 4th element\n    var newList = l.at(1, 3); // the 2nd and 4th elements\n});\n    \n```\n\n### Example 4\n\nchainability is a key advantage of NodeLists:\n\n``` javascript\n      require([\"dojo/query\", \"dojo/NodeList-dom\"\n], function(query){\n    query(\".thinger\")\n        .onclick(function(e){ /* ... */ })\n        .at(1, 3, 8) // get a subset\n            .style(\"padding\", \"5px\")\n            .forEach(console.log);\n});\n    \n```"
- name: _base/kernel#number
  id: dojo/_base/kernel#1_10dojo__base_kernel_number
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### number

    Defined by: [dojo/number](../number)

    localized formatting and parsing routines for Number

    ### parser

    Defined by: [dojox/mobile/parser](http://dojotoolkit.org/api/1.10/dojox/mobile/parser)
- name: _base/kernel#objectToQuery()
  id: dojo/_base/kernel#1_10dojo__base_kernel_objectToQuery
  summary: takes a name/value mapping object and returns a string representing a URL-encoded version of that object
  belongs_to: _base/kernel
  description: "### `objectToQuery` `(map)`\n\nDefined by [dojo/io-query](../io-query)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```\n\nyields the following query string:\n\n``` javascript\n      \"blah=blah&multi=thud&multi=thonk\"\n    \n```"
- name: _base/kernel#place()
  id: dojo/_base/kernel#1_10dojo__base_kernel_place
  summary: Attempt to insert node into the DOM, choosing from various positioning options
  belongs_to: _base/kernel
  description: "### `place` `(node,refNode,position)`\n\nDefined by [dojo/dom-construct](../dom-construct)\n\nAttempt to insert node into the DOM, choosing from various positioning options. Returns the first argument resolved to a DOM node.\n\n[TABLE]\n\n**Returns:** DOMNode \\| undefined\n\nReturned values is the first argument resolved to a DOM node.\n\n.place() is also a method of `dojo/NodeList`, allowing `dojo/query` node lookups.\n\n## Examples\n\n### Example 1\n\nPlace a node by string id as the last child of another node by string id:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\");\n});\n    \n```\n\n### Example 2\n\nPlace a node by string id before another node by string id\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"someNode\", \"anotherNode\", \"before\");\n});\n    \n```\n\n### Example 3\n\nCreate a Node, and place it in the body element (last child):\n\n``` javascript\n      require([\"dojo/dom-construct\", \"dojo/_base/window\"\n], function(domConstruct, win){\n    domConstruct.place(\"<div></div>\", win.body());\n});\n    \n```\n\n### Example 4\n\nPut a new LI as the first child of a list by id:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    domConstruct.place(\"<li></li>\", \"someUl\", \"first\");\n});\n    \n```"
- name: _base/kernel#platformRequire()
  id: dojo/_base/kernel#1_10dojo__base_kernel_platformRequire
  summary: This method takes a "map" of arrays which one can use to optionally load dojo modules
  belongs_to: _base/kernel
  description: "### `platformRequire` `(modMap)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nrequire one or more modules based on which host environment Dojo is currently operating in\n\nThis method takes a \"map\" of arrays which one can use to optionally load dojo modules. The map is indexed by the possible dojo.name *values, with two additional values: \"default\" and \"common\". The items in the \"default\" array will be loaded if none of the other items have been chosen based on dojo.name*, set by your host environment. The items in the \"common\" array will *always* be loaded, regardless of which list is chosen.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| modMap    | Object |             |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.platformRequire({\n    browser: [\n        \"foo.sample\", // simple module\n        \"foo.test\",\n        [\"foo.bar.baz\", true] // skip object check in _loadModule (dojo.require)\n    ],\n    default: [ \"foo.sample._base\" ],\n    common: [ \"important.module.common\" ]\n});\n    \n```"
- name: _base/kernel#popContext()
  id: dojo/_base/kernel#1_10dojo__base_kernel_popContext
  summary: If the context stack contains elements, ensure that subsequent code executes in the previous context to the current context
  belongs_to: _base/kernel
  description: |-
    ### `popContext` `()`

    Defined by [dojo/\_base/configFirefoxExtension](configfirefoxextension)

    If the context stack contains elements, ensure that subsequent code executes in the *previous* context to the current context. The current context set (\[global, document\]) is returned.
- name: _base/kernel#position()
  id: dojo/_base/kernel#1_10dojo__base_kernel_position
  summary: Gets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true)
  belongs_to: _base/kernel
  description: |-
    ### `position` `(node,includeScroll)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    Gets the position and size of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).

    Returns an object of the form: `{ x: 100, y: 300, w: 20, h: 15 }`. If includeScroll==true, the x and y values will include any document offsets that may affect the position relative to the viewport. Uses the border-box model (inclusive of border and padding but not margin). Does not act as a setter.

    [TABLE]

    **Returns:** Object \| object
- name: _base/kernel#prop()
  id: dojo/_base/kernel#1_10dojo__base_kernel_prop
  summary: Gets or sets a property on an HTML element
  belongs_to: _base/kernel
  description: "### `prop` `(node,name,value)`\n\nDefined by [dojo/\\_base/html](html)\n\nGets or sets a property on an HTML element.\n\nHandles normalized getting and setting of properties on DOM Nodes. If 2 arguments are passed, and a the second argument is a string, acts as a getter.\n\nIf a third argument is passed, or if the second argument is a map of attributes, acts as a setter.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any\n\nwhen used as a getter, the value of the requested property or null if that attribute does not have a specified or default value;\n\nwhen used as a setter, the DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // get the current value of the \"foo\" property on a node\ndojo.prop(dojo.byId(\"nodeId\"), \"foo\");\n// or we can just pass the id:\ndojo.prop(\"nodeId\", \"foo\");\n    \n```\n\n### Example 2\n\n``` javascript\n      // use prop() to set the tab index\ndojo.prop(\"nodeId\", \"tabIndex\", 3);\n    \n```\n\n### Example 3\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      dojo.prop(\"formId\", {\n    \"foo\": \"bar\",\n    \"tabIndex\": -1,\n    \"method\": \"POST\",\n    \"onsubmit\": function(e){\n        // stop submitting the form. Note that the IE behavior\n        // of returning true or false will have no effect here\n        // since our handler is connect()ed to the built-in\n        // onsubmit behavior and so we need to use\n        // dojo.stopEvent() to ensure that the submission\n        // doesn't proceed.\n        dojo.stopEvent(e);\n\n        // submit the form with Ajax\n        dojo.xhrPost({ form: \"formId\" });\n    }\n});\n    \n```\n\n### Example 4\n\nStyle is s special case: Only set with an object hash of styles\n\n``` javascript\n      dojo.prop(\"someNode\",{\n    id:\"bar\",\n    style:{\n        width:\"200px\", height:\"100px\", color:\"#000\"\n    }\n});\n    \n```\n\n### Example 5\n\nAgain, only set style as an object hash of styles:\n\n``` javascript\n      var obj = { color:\"#fff\", backgroundColor:\"#000\" };\ndojo.prop(\"someNode\", \"style\", obj);\n\n// though shorter to use `dojo.style()` in this case:\ndojo.style(\"someNode\", obj);\n    \n```"
- name: _base/kernel#provide()
  id: dojo/_base/kernel#1_10dojo__base_kernel_provide
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `provide` `(mid)`

    Defined by [dojo/\_base/loader](loader)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | mid       | undefined |             |
- name: _base/kernel#publish
  id: dojo/_base/kernel#1_10dojo__base_kernel_publish
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### publish

    Defined by: [dojo/robotx](../robotx)
- name: _base/kernel#pushContext()
  id: dojo/_base/kernel#1_10dojo__base_kernel_pushContext
  summary: causes subsequent calls to Dojo methods to assume the passed object and, optionally, document as the default scopes to use
  belongs_to: _base/kernel
  description: |-
    ### `pushContext` `(g,d)`

    Defined by [dojo/\_base/configFirefoxExtension](configfirefoxextension)

    causes subsequent calls to Dojo methods to assume the passed object and, optionally, document as the default scopes to use. A 2-element array of the previous global and document are returned.

    dojo.pushContext treats contexts as a stack. The auto-detected contexts which are initially provided using dojo.setContext() require authors to keep state in order to "return" to a previous context, whereas the dojo.pushContext and dojo.popContext methods provide a more natural way to augment blocks of code to ensure that they execute in a different window or frame without issue. If called without any arguments, the default context (the context when Dojo is first loaded) is instead pushed into the stack. If only a single string is passed, a node in the intitial context's document is looked up and its contextWindow and contextDocument properties are used as the context to push. This means that iframes can be given an ID and code can be executed in the scope of the iframe's document in subsequent calls easily.

    [TABLE]
- name: _base/kernel#query
  id: dojo/_base/kernel#1_10dojo__base_kernel_query
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### query

    Defined by: [dojo/query](../query)
- name: _base/kernel#queryToObject()
  id: dojo/_base/kernel#1_10dojo__base_kernel_queryToObject
  summary: Create an object representing a de-serialized query section of a URL
  belongs_to: _base/kernel
  description: "### `queryToObject` `(str)`\n\nDefined by [dojo/io-query](../io-query)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n      \"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n    \n```\n\nresults in this object structure:\n\n``` javascript\n      {\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n    \n```\n\nNote that spaces and other urlencoded entities are correctly handled."
- name: _base/kernel#rawXhrPost()
  id: dojo/_base/kernel#1_10dojo__base_kernel_rawXhrPost
  summary: Sends an HTTP POST request to the server
  belongs_to: _base/kernel
  description: |-
    ### `rawXhrPost` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP POST request to the server. In addition to the properties listed for the dojo.\_\_XhrArgs type, the following property is allowed:

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#rawXhrPut()
  id: dojo/_base/kernel#1_10dojo__base_kernel_rawXhrPut
  summary: Sends an HTTP PUT request to the server
  belongs_to: _base/kernel
  description: |-
    ### `rawXhrPut` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\_\_XhrArgs type, the following property is allowed:

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#ready()
  id: dojo/_base/kernel#1_10dojo__base_kernel_ready
  summary: Add a function to execute on DOM content loaded and all requested modules have arrived and been evaluated
  belongs_to: _base/kernel
  description: "### `ready` `(priority,context,callback)`\n\nDefined by [dojo/ready](../ready)\n\nAdd a function to execute on DOM content loaded and all requested modules have arrived and been evaluated. In most cases, the `domReady` plug-in should suffice and this method should not be needed.\n\nWhen called in a non-browser environment, just checks that all requested modules have arrived and been evaluated.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nSimple DOM and Modules ready syntax\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(function(){ alert(\"Dom ready!\"); });\n});\n    \n```\n\n### Example 2\n\nUsing a priority\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(2, function(){ alert(\"low priority ready!\"); })\n});\n    \n```\n\n### Example 3\n\nUsing context\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    ready(foo, function(){\n        // in here, this == foo\n    });\n});\n    \n```\n\n### Example 4\n\nUsing dojo/hitch style args:\n\n``` javascript\n      require([\"dojo/ready\"], function(ready){\n    var foo = { dojoReady: function(){ console.warn(this, \"dojo dom and modules ready.\"); } };\n    ready(foo, \"dojoReady\");\n});\n    \n```"
- name: _base/kernel#regexp
  id: dojo/_base/kernel#1_10dojo__base_kernel_regexp
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### regexp

    Defined by: [dojo/regexp](../regexp)

    Regular expressions and Builder resources
- name: _base/kernel#registerModulePath()
  id: dojo/_base/kernel#1_10dojo__base_kernel_registerModulePath
  summary: An unregistered module is given the default path of ../[module], relative to Dojo root
  belongs_to: _base/kernel
  description: "### `registerModulePath` `(moduleName,prefix)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nMaps a module name to a path\n\nAn unregistered module is given the default path of ../\\[module\\], relative to Dojo root. For example, module acme is mapped to ../acme. If you want to use a different module name, use dojo.registerModulePath.\n\n|            |        |             |\n|------------|--------|-------------|\n| Parameter  | Type   | Description |\n| moduleName | String |             |\n| prefix     | String |             |\n\n## Examples\n\n### Example 1\n\nIf your dojo.js is located at this location in the web root:\n\n``` javascript\n      /myapp/js/dojo/dojo/dojo.js\n    \n```\n\nand your modules are located at:\n\n``` javascript\n      /myapp/js/foo/bar.js\n/myapp/js/foo/baz.js\n/myapp/js/foo/thud/xyzzy.js\n    \n```\n\nYour application can tell Dojo to locate the \"foo\" namespace by calling:\n\n``` javascript\n      dojo.registerModulePath(\"foo\", \"../../foo\");\n    \n```\n\nAt which point you can then use dojo.require() to load the\n\nmodules (assuming they provide() the same things which are required). The full code might be:\n\n``` markup\n      <script type=\"text/javascript\"\n    src=\"/myapp/js/dojo/dojo/dojo.js\"></script>\n<script type=\"text/javascript\">\n    dojo.registerModulePath(\"foo\", \"../../foo\");\n    dojo.require(\"foo.bar\");\n    dojo.require(\"foo.baz\");\n    dojo.require(\"foo.thud.xyzzy\");\n</script>\n    \n```"
- name: _base/kernel#removeAttr()
  id: dojo/_base/kernel#1_10dojo__base_kernel_removeAttr
  summary: Removes an attribute from an HTML element
  belongs_to: _base/kernel
  description: |-
    ### `removeAttr` `(node,name)`

    Defined by [dojo/dom-attr](../dom-attr)

    Removes an attribute from an HTML element.

    |           |                   |                                                             |
    |-----------|-------------------|-------------------------------------------------------------|
    | Parameter | Type              | Description                                                 |
    | node      | DOMNode \| String | id or reference to the element to remove the attribute from |
    | name      | String            | the name of the attribute to remove                         |
- name: _base/kernel#removeClass()
  id: dojo/_base/kernel#1_10dojo__base_kernel_removeClass
  summary: Removes the specified classes from node
  belongs_to: _base/kernel
  description: "### `removeClass` `(node,classStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nRemoves the specified classes from node. No `contains()` check is required.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\nRemove a class from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass\");\n});\n    \n```\n\n### Example 2\n\nRemove two classes from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", \"firstClass secondClass\");\n});\n    \n```\n\n### Example 3\n\nRemove two classes from some node (using array):\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\", [\"firstClass\", \"secondClass\"]);\n});\n    \n```\n\n### Example 4\n\nRemove all classes from some node:\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.remove(\"someNode\");\n});\n    \n```\n\n### Example 5\n\nAvailable in `dojo/NodeList` for multiple removal\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\"ul > li\").removeClass(\"foo\");\n});\n    \n```"
- name: _base/kernel#replaceClass()
  id: dojo/_base/kernel#1_10dojo__base_kernel_replaceClass
  summary: Replaces one or more classes on a node if not present
  belongs_to: _base/kernel
  description: "### `replaceClass` `(node,addClassStr,removeClassStr)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nReplaces one or more classes on a node if not present. Operates more quickly than calling dojo.removeClass and dojo.addClass\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"add1 add2\", \"remove1 remove2\");\n});\n    \n```\n\n### Example 2\n\nReplace all classes with addMe\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.replace(\"someNode\", \"addMe\");\n});\n    \n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\".findMe\").replaceClass(\"addMe\", \"removeMe\");\n});\n    \n```"
- name: _base/kernel#require()
  id: dojo/_base/kernel#1_10dojo__base_kernel_require
  summary: 'Modules are loaded via dojo.require by using one of two loaders: the normal loader and the xdomain loader'
  belongs_to: _base/kernel
  description: "### `require` `(moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nloads a Javascript module from the appropriate URI\n\nModules are loaded via dojo.require by using one of two loaders: the normal loader and the xdomain loader. The xdomain loader is used when dojo was built with a custom build that specified loader=xdomain and the module lives on a modulePath that is a whole URL, with protocol and a domain. The versions of Dojo that are on the Google and AOL CDNs use the xdomain loader.\n\nIf the module is loaded via the xdomain loader, it is an asynchronous load, since the module is added via a dynamically created script tag. This means that dojo.require() can return before the module has loaded. However, this should only happen in the case where you do dojo.require calls in the top-level HTML page, or if you purposely avoid the loader checking for dojo.require dependencies in your module by using a syntax like dojo\\[\"require\"\\] to load the module.\n\nSometimes it is useful to not have the loader detect the dojo.require calls in the module so that you can dynamically load the modules as a result of an action on the page, instead of right at module load time.\n\nAlso, for script blocks in an HTML page, the loader does not pre-process them, so it does not know to download the modules before the dojo.require calls occur.\n\nSo, in those two cases, when you want on-the-fly module loading or for script blocks in the HTML page, special care must be taken if the dojo.required code is loaded asynchronously. To make sure you can execute code that depends on the dojo.required modules, be sure to add the code that depends on the modules in a dojo.addOnLoad() callback. dojo.addOnLoad waits for all outstanding modules to finish loading before executing.\n\nThis type of syntax works with both xdomain and normal loaders, so it is good practice to always use this idiom for on-the-fly code loading and in HTML script blocks. If at some point you change loaders and where the code is loaded from, it will all still work.\n\nMore on how dojo.require `dojo.require(\"A.B\")` first checks to see if symbol A.B is defined. If it is, it is simply returned (nothing to do).\n\nIf it is not defined, it will look for `A/B.js` in the script root directory.\n\n`dojo.require` throws an exception if it cannot find a file to load, or if the symbol `A.B` is not defined after loading.\n\nIt returns the object `A.B`, but note the caveats above about on-the-fly loading and HTML script blocks when the xdomain loader is loading a module.\n\n`dojo.require()` does nothing about importing symbols into the current namespace. It is presumed that the caller will take care of that.\n\n[TABLE]\n\n**Returns:** any\n\nthe required namespace object\n\n## Examples\n\n### Example 1\n\nTo use dojo.require in conjunction with dojo.ready:\n\n``` javascript\n      dojo.require(\"foo\");\ndojo.require(\"bar\");\ndojo.addOnLoad(function(){\n    //you can now safely do something with foo and bar\n});\n    \n```\n\n### Example 2\n\nFor example, to import all symbols into a local block, you might write:\n\n``` javascript\n      with (dojo.require(\"A.B\")) {\n    ...\n}\n    \n```\n\nAnd to import just the leaf symbol to a local variable:\n\n``` javascript\n      var B = dojo.require(\"A.B\");\n...\n    \n```"
- name: _base/kernel#requireAfterIf()
  id: dojo/_base/kernel#1_10dojo__base_kernel_requireAfterIf
  summary: null
  belongs_to: _base/kernel
  description: "### `requireAfterIf` `(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n    \n```"
- name: _base/kernel#requireIf()
  id: dojo/_base/kernel#1_10dojo__base_kernel_requireIf
  summary: null
  belongs_to: _base/kernel
  description: "### `requireIf` `(condition,moduleName,omitModuleCheck)`\n\nDefined by [dojo/\\_base/loader](loader)\n\nIf the condition is true then call `dojo.require()` for the specified resource\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      dojo.requireIf(dojo.isBrowser, \"my.special.Module\");\n    \n```"
- name: _base/kernel#requireLocalization()
  id: dojo/_base/kernel#1_10dojo__base_kernel_requireLocalization
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `requireLocalization` `(moduleName,bundleName,locale)`

    Defined by [dojo/\_base/loader](loader)

    [TABLE]
- name: _base/kernel#rpc
  id: dojo/_base/kernel#1_10dojo__base_kernel_rpc
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### rpc

    Defined by: [dojo/rpc/RpcService](../rpc/rpcservice)
- name: _base/kernel#safeMixin()
  id: dojo/_base/kernel#1_10dojo__base_kernel_safeMixin
  summary: Mix in properties skipping a constructor and decorating functions like it is done by declare()
  belongs_to: _base/kernel
  description: "### `safeMixin` `(target,source)`\n\nDefined by [dojo/\\_base/declare](declare)\n\nMix in properties skipping a constructor and decorating functions like it is done by declare().\n\nThis function is used to mix in properties like lang.mixin does, but it skips a constructor property and decorates functions like declare() does.\n\nIt is meant to be used with classes and objects produced with declare. Functions mixed in with dojo.safeMixin can use this.inherited() like normal methods.\n\nThis function is used to implement extend() method of a constructor produced with declare().\n\n|           |        |                                         |\n|-----------|--------|-----------------------------------------|\n| Parameter | Type   | Description                             |\n| target    | Object | Target object to accept new properties. |\n| source    | Object | Source object for new properties.       |\n\n**Returns:** Object\n\nTarget object to accept new properties.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var A = declare(null, {\n    m1: function(){\n        console.log(\"A.m1\");\n    },\n    m2: function(){\n        console.log(\"A.m2\");\n    }\n});\nvar B = declare(A, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"B.m1\");\n    }\n});\nB.extend({\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"B.m2\");\n    }\n});\nvar x = new B();\ndojo.safeMixin(x, {\n    m1: function(){\n        this.inherited(arguments);\n        console.log(\"X.m1\");\n    },\n    m2: function(){\n        this.inherited(arguments);\n        console.log(\"X.m2\");\n    }\n});\nx.m2();\n// prints:\n// A.m1\n// B.m1\n// X.m1\n    \n```"
- name: _base/kernel#scopeMap
  id: dojo/_base/kernel#1_10dojo__base_kernel_scopeMap
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### scopeMap

    Defined by: [dojo/\_base/kernel](kernel)
- name: _base/kernel#setAttr()
  id: dojo/_base/kernel#1_10dojo__base_kernel_setAttr
  summary: Sets an attribute on an HTML element
  belongs_to: _base/kernel
  description: "### `setAttr` `(node,name,value)`\n\nDefined by [dojo/dom-attr](../dom-attr)\n\nSets an attribute on an HTML element.\n\nHandles normalized setting of attributes on DOM Nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // use attr() to set the tab index\nrequire([\"dojo/dom-attr\"], function(domAttr){\n    domAttr.set(\"nodeId\", \"tabIndex\", 3);\n});\n    \n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      require([\"dojo/dom-attr\"],\nfunction(domAttr){\n    domAttr.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\"\n    }\n});\n    \n```"
- name: _base/kernel#setContentSize()
  id: dojo/_base/kernel#1_10dojo__base_kernel_setContentSize
  summary: Sets the size of the node's contents, irrespective of margins, padding, or borders
  belongs_to: _base/kernel
  description: |-
    ### `setContentSize` `(node,box,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    Sets the size of the node's contents, irrespective of margins, padding, or borders.

    [TABLE]
- name: _base/kernel#setContext()
  id: dojo/_base/kernel#1_10dojo__base_kernel_setContext
  summary: changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe)
  belongs_to: _base/kernel
  description: |-
    ### `setContext` `(globalObject,globalDocument)`

    Defined by [dojo/\_base/window](window)

    changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.

    |                |                 |             |
    |----------------|-----------------|-------------|
    | Parameter      | Type            | Description |
    | globalObject   | Object          |             |
    | globalDocument | DocumentElement |             |
- name: _base/kernel#setMarginBox()
  id: dojo/_base/kernel#1_10dojo__base_kernel_setMarginBox
  summary: sets the size of the node's margin box and placement (left/top), irrespective of box model
  belongs_to: _base/kernel
  description: |-
    ### `setMarginBox` `(node,box,computedStyle)`

    Defined by [dojo/dom-geometry](../dom-geometry)

    sets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to setBox that handles box-model vagaries for you.

    [TABLE]
- name: _base/kernel#setProp()
  id: dojo/_base/kernel#1_10dojo__base_kernel_setProp
  summary: Sets a property on an HTML element
  belongs_to: _base/kernel
  description: "### `setProp` `(node,name,value)`\n\nDefined by [dojo/dom-prop](../dom-prop)\n\nSets a property on an HTML element.\n\nHandles normalized setting of properties on DOM nodes.\n\nWhen passing functions as values, note that they will not be directly assigned to slots on the node, but rather the default behavior will be removed and the new behavior will be added using `dojo.connect()`, meaning that event handler properties will be normalized and that some caveats with regards to non-standard behaviors for onsubmit apply. Namely that you should cancel form submission using `dojo.stopEvent()` on the passed event object instead of returning a boolean value from the handler itself.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nthe DOM node\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // use prop() to set the tab index\nrequire([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"nodeId\", \"tabIndex\", 3);\n});\n    \n```\n\n### Example 2\n\nSet multiple values at once, including event handlers:\n\n``` javascript\n      require([\"dojo/dom-prop\"], function(domProp){\n    domProp.set(\"formId\", {\n        \"foo\": \"bar\",\n        \"tabIndex\": -1,\n        \"method\": \"POST\",\n    });\n});\n    \n```"
- name: _base/kernel#setSelectable()
  id: dojo/_base/kernel#1_10dojo__base_kernel_setSelectable
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `setSelectable` `(node,selectable)`

    Defined by [dojo/dom](../dom)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | node       | undefined |             |
    | selectable | undefined |             |
- name: _base/kernel#setStyle()
  id: dojo/_base/kernel#1_10dojo__base_kernel_setStyle
  summary: Sets styles on a node
  belongs_to: _base/kernel
  description: "### `setStyle` `(node,name,value)`\n\nDefined by [dojo/dom-style](../dom-style)\n\nSets styles on a node.\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\nIf passed, sets value on the node for style, handling cross-browser concerns. When setting a pixel value, be sure to include \"px\" in the value. For instance, top: \"200px\". Otherwise, in some cases, some browsers will not apply the style.\n\n## Examples\n\n### Example 1\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\n      require([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", \"opacity\", 0.5); // == 0.5\n});\n    \n```\n\n### Example 2\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\n      require([\"dojo/dom-style\"], function(domStyle){\n    domStyle.set(\"thinger\", {\n        \"opacity\": 0.5,\n        \"border\": \"3px solid black\",\n        \"height\": \"300px\"\n    });\n});\n    \n```\n\n### Example 3\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\n    domStyle.set(\"thinger\",{\n        fontSize:\"14pt\",\n        letterSpacing:\"1.2em\"\n    });\n});\n    \n```\n\n### Example 4\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo/dom-style.get() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\n      require([\"dojo/dom-style\", \"dojo/query\", \"dojo/NodeList-dom\"],\nfunction(domStyle, query){\n    query(\".someClassName\").style(\"visibility\",\"hidden\");\n    // or\n    query(\"#baz > div\").style({\n        opacity:0.75,\n        fontSize:\"13pt\"\n    });\n});\n    \n```"
- name: _base/kernel#some()
  id: dojo/_base/kernel#1_10dojo__base_kernel_some
  summary: Determines whether or not any item in arr satisfies the condition implemented by callback
  belongs_to: _base/kernel
  description: "### `some` `(arr,callback,thisObject)`\n\nDefined by [dojo/\\_base/array](array)\n\nDetermines whether or not any item in arr satisfies the condition implemented by callback.\n\nThis function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when run over sparse arrays, this implementation passes the \"holes\" in the sparse array to the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array. For more details, see: <https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some>\n\n[TABLE]\n\n**Returns:** Boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // is true\narray.some([1, 2, 3, 4], function(item){ return item>1; });\n    \n```\n\n### Example 2\n\n``` javascript\n      // is false\narray.some([1, 2, 3, 4], function(item){ return item<1; });\n    \n```"
- name: _base/kernel#Stateful()
  id: dojo/_base/kernel#1_10dojo__base_kernel_Stateful
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `Stateful` `()`

    Defined by [dojo/Stateful](../stateful)
- name: _base/kernel#stopEvent()
  id: dojo/_base/kernel#1_10dojo__base_kernel_stopEvent
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `stopEvent` `(evt)`

    Defined by [dojo/\_base/event](event)

    prevents propagation and clobbers the default action of the passed event

    |           |       |                                                           |
    |-----------|-------|-----------------------------------------------------------|
    | Parameter | Type  | Description                                               |
    | evt       | Event | The event object. If omitted, window.event is used on IE. |
- name: _base/kernel#store
  id: dojo/_base/kernel#1_10dojo__base_kernel_store
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### store

    Defined by: [dojo/store/Cache](../store/cache)
- name: _base/kernel#string
  id: dojo/_base/kernel#1_10dojo__base_kernel_string
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### string

    Defined by: [dojo/string](../string)

    String utilities for Dojo
- name: _base/kernel#style()
  id: dojo/_base/kernel#1_10dojo__base_kernel_style
  summary: Accesses styles on a node
  belongs_to: _base/kernel
  description: "### `style` `(node,name,value)`\n\nDefined by [dojo/\\_base/html](html)\n\nAccesses styles on a node. If 2 arguments are passed, acts as a getter. If 3 arguments are passed, acts as a setter.\n\nGetting the style value uses the computed style for the node, so the value will be a calculated value, not just the immediate node.style value. Also when getting values, use specific style names, like \"borderBottomWidth\" instead of \"border\" since compound values like \"border\" are not necessarily reflected as expected. If you want to get node dimensions, use `dojo.marginBox()`, `dojo.contentBox()` or `dojo.position()`.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nwhen used as a getter, return the computed style of the node if passing in an ID or node, or return the normalized, computed value for the property when passing in a node and a style property\n\n## Examples\n\n### Example 1\n\nPassing only an ID or node returns the computed style object of the node:\n\n``` javascript\n      dojo.style(\"thinger\");\n    \n```\n\n### Example 2\n\nPassing a node and a style property returns the current normalized, computed value for that property:\n\n``` javascript\n      dojo.style(\"thinger\", \"opacity\"); // 1 by default\n    \n```\n\n### Example 3\n\nPassing a node, a style property, and a value changes the current display of the node and returns the new computed value\n\n``` javascript\n      dojo.style(\"thinger\", \"opacity\", 0.5); // == 0.5\n    \n```\n\n### Example 4\n\nPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\n\n``` javascript\n      dojo.style(\"thinger\", {\n    \"opacity\": 0.5,\n    \"border\": \"3px solid black\",\n    \"height\": \"300px\"\n});\n    \n```\n\n### Example 5\n\nWhen the CSS style property is hyphenated, the JavaScript property is camelCased. font-size becomes fontSize, and so on.\n\n``` javascript\n      dojo.style(\"thinger\",{\n    fontSize:\"14pt\",\n    letterSpacing:\"1.2em\"\n});\n    \n```\n\n### Example 6\n\ndojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling dojo.style() on every element of the list. See: `dojo/query` and `dojo/NodeList`\n\n``` javascript\n      dojo.query(\".someClassName\").style(\"visibility\",\"hidden\");\n// or\ndojo.query(\"#baz > div\").style({\n    opacity:0.75,\n    fontSize:\"13pt\"\n});\n    \n```"
- name: _base/kernel#subscribe
  id: dojo/_base/kernel#1_10dojo__base_kernel_subscribe
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### subscribe

    Defined by: [dojo/robotx](../robotx)
- name: _base/kernel#tests
  id: dojo/_base/kernel#1_10dojo__base_kernel_tests
  summary: D.O.H
  belongs_to: _base/kernel
  description: |-
    ### tests

    Defined by: [dojo/tests](../tests)

    D.O.H. Test files for Dojo unit testing.

    ### toJsonIndentStr

    Defined by: [dojo/\_base/json](json)
- name: _base/kernel#toDom()
  id: dojo/_base/kernel#1_10dojo__base_kernel_toDom
  summary: instantiates an HTML fragment returning the corresponding DOM
  belongs_to: _base/kernel
  description: "### `toDom` `(frag,doc)`\n\nDefined by [dojo/dom-construct](../dom-construct)\n\ninstantiates an HTML fragment returning the corresponding DOM.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nDocument fragment, unless it's a single node in which case it returns the node itself\n\n## Examples\n\n### Example 1\n\nCreate a table row:\n\n``` javascript\n      require([\"dojo/dom-construct\"], function(domConstruct){\n    var tr = domConstruct.toDom(\"<tr><td>First!</td></tr>\");\n});\n    \n```"
- name: _base/kernel#toggleClass()
  id: dojo/_base/kernel#1_10dojo__base_kernel_toggleClass
  summary: Adds a class to node if not present, or removes if present
  belongs_to: _base/kernel
  description: "### `toggleClass` `(node,classStr,condition)`\n\nDefined by [dojo/dom-class](../dom-class)\n\nAdds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove. Returns the condition that was specified directly or indirectly.\n\n[TABLE]\n\n**Returns:** Boolean\n\nIf passed, true means to add the class, false means to remove. Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\");\n});\n    \n```\n\n### Example 2\n\nForcefully add a class\n\n``` javascript\n      require([\"dojo/dom-class\"], function(domClass){\n    domClass.toggle(\"someNode\", \"hovered\", true);\n});\n    \n```\n\n### Example 3\n\nAvailable in `dojo/NodeList` for multiple toggles\n\n``` javascript\n      require([\"dojo/query\"], function(query){\n    query(\".toggleMe\").toggleClass(\"toggleMe\");\n});\n    \n```"
- name: _base/kernel#toJson()
  id: dojo/_base/kernel#1_10dojo__base_kernel_toJson
  summary: Returns a JSON serialization of an object
  belongs_to: _base/kernel
  description: "### `toJson` `(it,prettyPrint)`\n\nDefined by [dojo/\\_base/json](json)\n\nReturns a [JSON](http://json.org) serialization of an object.\n\nReturns a [JSON](http://json.org) serialization of an object. Note that this doesn't check for infinite recursion, so don't do that! It is recommend that you use [dojo/json](../json)'s stringify function for an lighter and faster implementation that matches the native JSON API and uses the native JSON serializer when available.\n\n[TABLE]\n\n**Returns:** any \\| undefined\n\nA JSON string serialization of the passed-in object.\n\n## Examples\n\n### Example 1\n\nsimple serialization of a trivial object\n\n``` javascript\n      var jsonStr = dojo.toJson({ howdy: \"stranger!\", isStrange: true });\ndoh.is('{\"howdy\":\"stranger!\",\"isStrange\":true}', jsonStr);\n    \n```\n\n### Example 2\n\na custom serializer for an objects of a particular class:\n\n``` javascript\n      dojo.declare(\"Furby\", null, {\n    furbies: \"are strange\",\n    furbyCount: 10,\n    __json__: function(){\n    },\n});\n    \n```"
- name: _base/kernel#toPixelValue()
  id: dojo/_base/kernel#1_10dojo__base_kernel_toPixelValue
  summary: converts style value to pixels on IE or return a numeric value
  belongs_to: _base/kernel
  description: |-
    ### `toPixelValue` `(node,value)`

    Defined by [dojo/dom-style](../dom-style)

    converts style value to pixels on IE or return a numeric value.

    |           |         |             |
    |-----------|---------|-------------|
    | Parameter | Type    | Description |
    | node      | DOMNode |             |
    | value     | String  |             |

    **Returns:** Number
- name: _base/kernel#touch
  id: dojo/_base/kernel#1_10dojo__base_kernel_touch
  summary: This module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop
  belongs_to: _base/kernel
  description: |-
    ### touch

    Defined by: [dojo/touch](../touch)

    This module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop. Based on <http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html> Also, if the dojoClick property is set to truthy on a DOM node, [dojo/touch](../touch) generates click events immediately for this node and its descendants (except for descendants that have a dojoClick property set to falsy), to avoid the delay before native browser click events, and regardless of whether evt.preventDefault() was called in a touch.press event listener.
- name: _base/kernel#unsubscribe()
  id: dojo/_base/kernel#1_10dojo__base_kernel_unsubscribe
  summary: Remove a topic listener
  belongs_to: _base/kernel
  description: "### `unsubscribe` `(handle)`\n\nDefined by [dojo/\\_base/connect](connect)\n\nRemove a topic listener.\n\n|           |        |                                               |\n|-----------|--------|-----------------------------------------------|\n| Parameter | Type   | Description                                   |\n| handle    | Handle | The handle returned from a call to subscribe. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var alerter = dojo.subscribe(\"alerts\", null, function(caption, message){ alert(caption + \"\\n\" + message); };\n...\ndojo.unsubscribe(alerter);\n    \n```"
- name: _base/kernel#version
  id: dojo/_base/kernel#1_10dojo__base_kernel_version
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### version

    Defined by: [dojo/\_base/kernel](kernel)

    Version number of the Dojo Toolkit
- name: _base/kernel#when()
  id: dojo/_base/kernel#1_10dojo__base_kernel_when
  summary: Transparently applies callbacks to values and/or promises
  belongs_to: _base/kernel
  description: |-
    ### `when` `(valueOrPromise,callback,errback,progback)`

    Defined by [dojo/when](../when)

    Transparently applies callbacks to values and/or promises.

    Accepts promises but also transparently handles non-promises. If no callbacks are provided returns a promise, regardless of the initial value. Foreign promises are converted.

    If callbacks are provided and the initial value is not a promise, the callback is executed immediately with no error handling. Returns a promise if the initial value is a promise, or the result of the callback otherwise.

    [TABLE]

    **Returns:** [dojo/promise/Promise](../promise/promise) \| summary: \| name:

    Promise, or if a callback is provided, the result of the callback.
- name: _base/kernel#window
  id: dojo/_base/kernel#1_10dojo__base_kernel_window
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### window

    Defined by: [dojo/window](../window)

    TODOC

    ## Methods
- name: _base/kernel#windowUnloaded()
  id: dojo/_base/kernel#1_10dojo__base_kernel_windowUnloaded
  summary: signal fired by impending window destruction
  belongs_to: _base/kernel
  description: |-
    ### `windowUnloaded` `()`

    Defined by [dojo/\_base/configFirefoxExtension](configfirefoxextension)

    signal fired by impending window destruction. You may use dojo.addOnWIndowUnload() or dojo.connect() to this method to perform page/application cleanup methods. See dojo.addOnWindowUnload for more info.
- name: _base/kernel#withDoc()
  id: dojo/_base/kernel#1_10dojo__base_kernel_withDoc
  summary: Invoke callback with documentObject as dojo/_base/window::doc
  belongs_to: _base/kernel
  description: |-
    ### `withDoc` `(documentObject,callback,thisObject,cbArguments)`

    Defined by [dojo/\_base/window](window)

    Invoke callback with documentObject as dojo/\_base/window::doc.

    Invoke callback with documentObject as [dojo/\_base/window](window)::doc. If provided, callback will be executed in the context of object thisObject When callback() returns or throws an error, the [dojo/\_base/window](window)::doc will be restored to its previous state.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#withGlobal()
  id: dojo/_base/kernel#1_10dojo__base_kernel_withGlobal
  summary: Invoke callback with globalObject as dojo.global and globalObject.document as dojo.doc
  belongs_to: _base/kernel
  description: |-
    ### `withGlobal` `(globalObject,callback,thisObject,cbArguments)`

    Defined by [dojo/\_base/window](window)

    Invoke callback with globalObject as dojo.global and globalObject.document as dojo.doc.

    Invoke callback with globalObject as dojo.global and globalObject.document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject When callback() returns or throws an error, the dojo.global and dojo.doc will be restored to its previous state.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#xhr()
  id: dojo/_base/kernel#1_10dojo__base_kernel_xhr
  summary: null
  belongs_to: _base/kernel
  description: |-
    ### `xhr` `(method,args)`

    Defined by [dojox/rpc/Client](http://dojotoolkit.org/api/1.10/dojox/rpc/Client)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | method    | undefined |             |
    | args      | undefined |             |

    **Returns:** undefined
- name: _base/kernel#xhrDelete()
  id: dojo/_base/kernel#1_10dojo__base_kernel_xhrDelete
  summary: Sends an HTTP DELETE request to the server
  belongs_to: _base/kernel
  description: |-
    ### `xhrDelete` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP DELETE request to the server.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#xhrGet()
  id: dojo/_base/kernel#1_10dojo__base_kernel_xhrGet
  summary: Sends an HTTP GET request to the server
  belongs_to: _base/kernel
  description: |-
    ### `xhrGet` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP GET request to the server.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#xhrPost()
  id: dojo/_base/kernel#1_10dojo__base_kernel_xhrPost
  summary: Sends an HTTP POST request to the server
  belongs_to: _base/kernel
  description: |-
    ### `xhrPost` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP POST request to the server. In addition to the properties listed for the dojo.\_\_XhrArgs type, the following property is allowed:

    [TABLE]

    **Returns:** undefined
- name: _base/kernel#xhrPut()
  id: dojo/_base/kernel#1_10dojo__base_kernel_xhrPut
  summary: Sends an HTTP PUT request to the server
  belongs_to: _base/kernel
  description: "### `xhrPut` `(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.html)"
- name: _base/kernel.back
  id: dojo/_base/kernel.back
  summary: adds a state object (args) to the history list
  description: "# dojo/\\_base/kernel.back\n\n## Summary\n\nBrowser history management resources\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](../back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](../back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](../back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](../hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](../back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](../back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](../back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](../back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.back.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.back.html)"
- name: _base/kernel.back#addToHistory()
  id: dojo/_base/kernel.back#1_10dojo__base_kernel_back_addToHistory
  summary: adds a state object (args) to the history list
  belongs_to: _base/kernel.back
  description: "### `addToHistory` `(args)`\n\nDefined by [dojo/back](../back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](../back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](../back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](../hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\n      back.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n    \n```"
- name: _base/kernel.back#getHash()
  id: dojo/_base/kernel.back#1_10dojo__base_kernel_back_getHash
  summary: null
  belongs_to: _base/kernel.back
  description: |-
    ### `getHash` `()`

    Defined by [dojo/back](../back)

    **Returns:** undefined
- name: _base/kernel.back#goBack()
  id: dojo/_base/kernel.back#1_10dojo__base_kernel_back_goBack
  summary: private method
  belongs_to: _base/kernel.back
  description: |-
    ### `goBack` `()`

    Defined by [dojo/back](../back)

    private method. Do not call this directly.
- name: _base/kernel.back#goForward()
  id: dojo/_base/kernel.back#1_10dojo__base_kernel_back_goForward
  summary: private method
  belongs_to: _base/kernel.back
  description: |-
    ### `goForward` `()`

    Defined by [dojo/back](../back)

    private method. Do not call this directly.
- name: _base/kernel.back#init()
  id: dojo/_base/kernel.back#1_10dojo__base_kernel_back_init
  summary: Initializes the undo stack
  belongs_to: _base/kernel.back
  description: "### `init` `()`\n\nDefined by [dojo/back](../back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.back.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.back.html)"
- name: _base/kernel.back#setHash()
  id: dojo/_base/kernel.back#1_10dojo__base_kernel_back_setHash
  summary: adds a state object (args) to the history list
  belongs_to: _base/kernel.back
  description: "# dojo/\\_base/kernel.back\n\n## Summary\n\nBrowser history management resources\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](../back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](../back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](../back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](../hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](../back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](../back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](../back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](../back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.back.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.back.html)"
- name: _base/kernel.back#setInitialState()
  id: dojo/_base/kernel.back#1_10dojo__base_kernel_back_setInitialState
  summary: adds a state object (args) to the history list
  belongs_to: _base/kernel.back
  description: "# dojo/\\_base/kernel.back\n\n## Summary\n\nBrowser history management resources\n\n## Methods\n\n### `addToHistory``(args)`\n\nDefined by [dojo/back](../back)\n\nadds a state object (args) to the history list.\n\nTo support getting back button notifications, the object argument should implement a function called either \"back\", \"backButton\", or \"handle\". The string \"back\" will be passed as the first and only argument to this callback.\n\nTo support getting forward button notifications, the object argument should implement a function called either \"forward\", \"forwardButton\", or \"handle\". The string \"forward\" will be passed as the first and only argument to this callback.\n\nIf you want the browser location string to change, define \"changeUrl\" on the object. If the value of \"changeUrl\" is true, then a unique number will be appended to the URL as a fragment identifier (<http://some.domain.com/path#uniquenumber>). If it is any other value that does not evaluate to false, that value will be used as the fragment identifier. For example, if changeUrl: 'page1', then the URL will look like: <http://some.domain.com/path#page1>\n\nThere are problems with using [dojo/back](../back) with semantically-named fragment identifiers (\"hash values\" on an URL). In most browsers it will be hard for [dojo/back](../back) to know distinguish a back from a forward event in those cases. For back/forward support to work best, the fragment ID should always be a unique value (something using new Date().getTime() for example). If you want to detect hash changes using semantic fragment IDs, then consider using [dojo/hash](../hash) instead (in Dojo 1.4+).\n\n|           |        |                                                          |\n|-----------|--------|----------------------------------------------------------|\n| Parameter | Type   | Description                                              |\n| args      | Object | The state object that will be added to the history list. |\n\n## Examples\n\n### Example 1\n\n``` javascript\nback.addToHistory({\n    back: function(){ console.log('back pressed'); },\n    forward: function(){ console.log('forward pressed'); },\n    changeUrl: true\n});\n```\n\n### `getHash``()`\n\nDefined by [dojo/back](../back)\n\n**Returns:** undefined\n\n### `goBack``()`\n\nDefined by [dojo/back](../back)\n\nprivate method. Do not call this directly.\n\n### `goForward``()`\n\nDefined by [dojo/back](../back)\n\nprivate method. Do not call this directly.\n\n### `init``()`\n\nDefined by [dojo/back](../back)\n\nInitializes the undo stack. This must be called from a\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.back.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.back.html)"
- name: _base/kernel.cldr
  id: dojo/_base/kernel.cldr
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.cldr\n\n## Properties\n\n### monetary\n\nDefined by: [dojo/cldr/monetary](../cldr/monetary)\n\nTODOC\n\n### supplemental\n\nDefined by: [dojo/cldr/supplemental](../cldr/supplemental)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.cldr.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.cldr.html)"
- name: _base/kernel.cldr#monetary
  id: dojo/_base/kernel.cldr#1_10dojo__base_kernel_cldr_monetary
  summary: null
  belongs_to: _base/kernel.cldr
  description: |-
    ### monetary

    Defined by: [dojo/cldr/monetary](../cldr/monetary)

    TODOC
- name: _base/kernel.cldr#supplemental
  id: dojo/_base/kernel.cldr#1_10dojo__base_kernel_cldr_supplemental
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.cldr
  description: "### supplemental\n\nDefined by: [dojo/cldr/supplemental](../cldr/supplemental)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.cldr.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.cldr.html)"
- name: _base/kernel.colors
  id: dojo/_base/kernel.colors
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.colors\n\n## Methods\n\n### `makeGrey``(g,a)`\n\nDefined by [dojo/colors](../colors)\n\ncreates a greyscale color with an optional alpha\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.colors.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.colors.html)"
- name: _base/kernel.colors#makeGrey()
  id: dojo/_base/kernel.colors#1_10dojo__base_kernel_colors_makeGrey
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.colors
  description: "### `makeGrey` `(g,a)`\n\nDefined by [dojo/colors](../colors)\n\ncreates a greyscale color with an optional alpha\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.colors.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.colors.html)"
- name: _base/kernel.config
  id: dojo/_base/kernel.config
  summary: This module defines the user configuration during bootstrap
  description: "# dojo/\\_base/kernel.config\n\n## Summary\n\nThis module defines the user configuration during bootstrap.\n\nBy defining user configuration as a module value, an entire configuration can be specified in a build, thereby eliminating the need for sniffing and or explicitly setting in the global variable dojoConfig. Also, when multiple instances of dojo exist in a single application, each will necessarily be located at an unique absolute module identifier as given by the package configuration. Implementing configuration as a module allows for specifying unique, per-instance configurations.\n\n## Examples\n\n### Example 1\n\nCreate a second instance of dojo with a different, instance-unique configuration (assume the loader and dojo.js are already loaded).\n\n``` javascript\n// specify a configuration that creates a new instance of dojo at the absolute module identifier \"myDojo\"\nrequire({\n    packages:[{\n        name:\"myDojo\",\n        location:\".\", //assume baseUrl points to dojo.js\n    }]\n});\n\n// specify a configuration for the myDojo instance\ndefine(\"myDojo/config\", {\n    // normal configuration variables go here, e.g.,\n    locale:\"fr-ca\"\n});\n\n// load and use the new instance of dojo\nrequire([\"myDojo\"], function(dojo){\n    // dojo is the new instance of dojo\n    // use as required\n});\n```\n\n## Properties\n\n### `addOnLoad`\n\nDefined by: [dojo/\\_base/config](config)\n\nAdds a callback via [dojo/ready](../ready). Useful when Dojo is added after the page loads and djConfig.afterOnLoad is true. Supports the same arguments as [dojo/ready](../ready). When using a function reference, use `djConfig.addOnLoad = function(){};`. For object with function name use `djConfig.addOnLoad = [myObject, \"functionName\"];` and for object with function reference use `djConfig.addOnLoad = [myObject, function(){}];`\n\n### afterOnLoad\n\nDefined by: [dojo/ready](../ready)\n\n### baseUrl\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### `callback`\n\nDefined by: [dojo/\\_base/config](config)\n\nDefines a callback to be used when dependencies are defined before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with deps.\n\n### debugContainerId\n\nDefined by: [dojo/\\_firebug/firebug](../_firebug/firebug)\n\n### debugHeight\n\nDefined by: [dojo/robotx](../robotx)\n\n### defaultDuration\n\nDefined by: [dojo/\\_base/config](config)\n\nDefault duration, in milliseconds, for wipe and fade animations within dijits. Assigned to dijit.defaultDuration.\n\n### deferredInstrumentation\n\nDefined by: [dojo/\\_base/config](config)\n\nWhether deferred instrumentation should be loaded or included in builds.\n\n### `deps`\n\nDefined by: [dojo/\\_base/config](config)\n\nDefines dependencies to be used before the loader has been loaded. When provided, they cause the loader to execute require(deps, callback) once it has finished loading. Should be used with callback.\n\n### dojoBlankHtmlUrl\n\nDefined by: [dojo/\\_base/config](config)\n\nUsed by some modules to configure an empty iframe. Used by [dojo/io/iframe](../io/iframe) and [dojo/back](../back), and [dijit/popup](http://dojotoolkit.org/api/1.10/dijit/popup) support in IE where an iframe is needed to make sure native controls do not bleed through the popups. Normally this configuration variable does not need to be set, except when using cross-domain/CDN Dojo builds. Save dojo/resources/blank.html to your domain and set `djConfig.dojoBlankHtmlUrl` to the path on your domain your copy of blank.html.\n\n### extraLocale\n\nDefined by: [dojo/\\_base/config](config)\n\nNo default value. Specifies additional locales whose resources should also be loaded alongside the default locale when calls to `dojo.requireLocalization()` are processed.\n\n### ioPublish\n\nDefined by: [dojo/\\_base/config](config)\n\nSet this to true to enable publishing of topics for the different phases of IO operations. Publishing is done via [dojo/topic.publish()](../topic#publish). See [dojo/main.\\_\\_IoPublish](../main.__iopublish) for a list of topics that are published.\n\n### isDebug\n\nDefined by: [dojo/\\_base/config](config)\n\nDefaults to `false`. If set to `true`, ensures that Dojo provides extended debugging feedback via Firebug. If Firebug is not available on your platform, setting `isDebug` to `true` will force Dojo to pull in (and display) the version of Firebug Lite which is integrated into the Dojo distribution, thereby always providing a debugging/logging console when `isDebug` is enabled. Note that Firebug's `console.*` methods are ALWAYS defined by Dojo. If `isDebug` is false and you are on a platform without Firebug, these methods will be defined as no-ops.\n\n### locale\n\nDefined by: [dojo/\\_base/config](config)\n\nThe locale to assume for loading localized resources in this page, specified according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt). Must be specified entirely in lowercase, e.g. `en-us` and `zh-cn`. See the documentation for `dojo.i18n` and `dojo.requireLocalization` for details on loading localized resources. If no locale is specified, Dojo assumes the locale of the user agent, according to `navigator.userLanguage` or `navigator.language` properties.\n\n### modulePaths\n\nDefined by: [dojo/\\_base/config](config)\n\nA map of module names to paths relative to `dojo.baseUrl`. The key/value pairs correspond directly to the arguments which `dojo.registerModulePath` accepts. Specifying `djConfig.modulePaths = { \"foo\": \"../../bar\" }` is the equivalent of calling `dojo.registerModulePath(\"foo\", \"../../bar\");`. Multiple modules may be configured via `djConfig.modulePaths`.\n\n### parseOnLoad\n\nDefined by: [dojo/\\_base/config](config)\n\nRun the parser after the page is loaded\n\n### require\n\nDefined by: [dojo/\\_base/config](config)\n\nAn array of module names to be loaded immediately after dojo.js has been included in a page.\n\n### transparentColor\n\nDefined by: [dojo/\\_base/config](config)\n\nArray containing the r, g, b components used as transparent color in dojo.Color; if undefined, \\[255,255,255\\] (white) will be used.\n\n### urchin\n\nDefined by: [dojox/analytics/Urchin](http://dojotoolkit.org/api/1.10/dojox/analytics/Urchin)\n\nUsed by `dojox.analytics.Urchin` as the default UA-123456-7 account number used when being created. Alternately, you can pass an acct:\"\" parameter to the constructor a la: new dojox.analytics.Urchin({ acct:\"UA-123456-7\" });\n\n### useCustomLogger\n\nDefined by: [dojo/\\_base/config](config)\n\nIf set to a value that evaluates to true such as a string or array and isDebug is true and Firebug is not available or running, then it bypasses the creation of Firebug Lite allowing you to define your own console object.\n\n### useDeferredInstrumentation\n\nDefined by: [dojo/\\_base/config](config)\n\nWhether the deferred instrumentation should be used.\n\n- `\"report-rejections\"`: report each rejection as it occurs.\n- `true` or `1` or `\"report-unhandled-rejections\"`: wait 1 second in an attempt to detect unhandled rejections.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.config.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.config.html)"
- name: _base/kernel.contentHandlers
  id: dojo/_base/kernel.contenthandlers
  summary: A map of available XHR transport handle types
  description: "# dojo/\\_base/kernel.contentHandlers\n\n## Summary\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls. Each contentHandler is called, passing the xhr object for manipulation. The return value from the contentHandler will be passed to the `load` or `handle` functions defined in the original xhr call.\n\n## Examples\n\n### Example 1\n\nCreating a custom content-handler:\n\n``` javascript\nxhr.contentHandlers.makeCaps = function(xhr){\n    return xhr.responseText.toUpperCase();\n}\n// and later:\ndojo.xhrGet({\n    url:\"foo.txt\",\n    handleAs:\"makeCaps\",\n    load: function(data){ /* data is a toUpper version of foo.txt */ }\n});\n```\n\n## Methods\n\n### `auto``(xhr)`\n\nDefined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n### `javascript``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which evaluates the response data, expecting it to be valid JavaScript\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which returns a JavaScript object created from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-filtered``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which expects comment-filtered JSON.\n\nA contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent \"JavaScript Hijacking\", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.\n\nWill throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your \"JSON\" with: {}&&\n\nuse djConfig.useCommentedJson = true to turn off the notice\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-optional``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `text``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which simply returns the plaintext response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `xml``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.contentHandlers.html)"
- name: _base/kernel.contentHandlers#auto()
  id: dojo/_base/kernel.contenthandlers#1_10dojo__base_kernel_contentHandlers_auto
  summary: null
  belongs_to: _base/kernel.contentHandlers
  description: |-
    ### `auto` `(xhr)`

    Defined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |
- name: _base/kernel.contentHandlers#javascript()
  id: dojo/_base/kernel.contenthandlers#1_10dojo__base_kernel_contentHandlers_javascript
  summary: null
  belongs_to: _base/kernel.contentHandlers
  description: |-
    ### `javascript` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which evaluates the response data, expecting it to be valid JavaScript

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel.contentHandlers#json()
  id: dojo/_base/kernel.contenthandlers#1_10dojo__base_kernel_contentHandlers_json
  summary: null
  belongs_to: _base/kernel.contentHandlers
  description: |-
    ### `json` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which returns a JavaScript object created from the response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel.contentHandlers#json-comment-filtered()
  id: dojo/_base/kernel.contenthandlers#1_10dojo__base_kernel_contentHandlers_json-comment-filtered
  summary: A contentHandler which expects comment-filtered JSON
  belongs_to: _base/kernel.contentHandlers
  description: |-
    ### `json-comment-filtered` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which expects comment-filtered JSON.

    A contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent "JavaScript Hijacking", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.

    Will throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your "JSON" with: {}&&

    use djConfig.useCommentedJson = true to turn off the notice

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel.contentHandlers#json-comment-optional()
  id: dojo/_base/kernel.contenthandlers#1_10dojo__base_kernel_contentHandlers_json-comment-optional
  summary: A contentHandler which checks the presence of comment-filtered JSON and alternates between the json and json-comment-filtered contentHandlers
  belongs_to: _base/kernel.contentHandlers
  description: |-
    ### `json-comment-optional` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel.contentHandlers#text()
  id: dojo/_base/kernel.contenthandlers#1_10dojo__base_kernel_contentHandlers_text
  summary: null
  belongs_to: _base/kernel.contentHandlers
  description: |-
    ### `text` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which simply returns the plaintext response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel.contentHandlers#xml()
  id: dojo/_base/kernel.contenthandlers#1_10dojo__base_kernel_contentHandlers_xml
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.contentHandlers
  description: "### `xml` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.contentHandlers.html)"
- name: _base/kernel.currency
  id: dojo/_base/kernel.currency
  summary: extends dojo.number to provide culturally-appropriate formatting of values in various world currencies, including use of a currency symbol
  description: "# dojo/\\_base/kernel.currency\n\n## Summary\n\nlocalized formatting and parsing routines for currencies\n\nextends dojo.number to provide culturally-appropriate formatting of values in various world currencies, including use of a currency symbol. The currencies are specified by a three-letter international symbol in all uppercase, and support for the currencies is provided by the data in `dojo.cldr`. The scripts generating dojo.cldr specify which currency support is included. A fixed number of decimal places is determined based on the currency type and is not determined by the 'pattern' argument. The fractional portion is optional, by default, and variable length decimals are not supported.\n\n## Methods\n\n### `format``(value,options)`\n\nDefined by [dojo/currency](../currency)\n\nFormat a Number as a currency, using locale-specific settings\n\nCreate a string from a Number using a known, localized pattern. [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements) appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr) as well as the appropriate symbols and delimiters and number of decimal places.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `parse``(expression,options)`\n\nDefined by [dojo/currency](../currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n### `regexp``(options)`\n\nDefined by [dojo/currency](../currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.currency.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.currency.html)"
- name: _base/kernel.currency#format()
  id: dojo/_base/kernel.currency#1_10dojo__base_kernel_currency_format
  summary: Create a string from a Number using a known, localized pattern
  belongs_to: _base/kernel.currency
  description: |-
    ### `format` `(value,options)`

    Defined by [dojo/currency](../currency)

    Format a Number as a currency, using locale-specific settings

    Create a string from a Number using a known, localized pattern. [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements) appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr) as well as the appropriate symbols and delimiters and number of decimal places.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel.currency#parse()
  id: dojo/_base/kernel.currency#1_10dojo__base_kernel_currency_parse
  summary: null
  belongs_to: _base/kernel.currency
  description: |-
    ### `parse` `(expression,options)`

    Defined by [dojo/currency](../currency)

    [TABLE]

    **Returns:** undefined
- name: _base/kernel.currency#regexp()
  id: dojo/_base/kernel.currency#1_10dojo__base_kernel_currency_regexp
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.currency
  description: "### `regexp` `(options)`\n\nDefined by [dojo/currency](../currency)\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.currency.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.currency.html)"
- name: _base/kernel.data
  id: dojo/_base/kernel.data
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.data\n\n## Properties\n\n### api\n\nDefined by: [dojo/data/api/Read](../data/api/read)\n\n### util\n\nDefined by: [dojo/data/util/filter](../data/util/filter)\n\n## Methods\n\n### `ItemFileReadStore``()`\n\nDefined by [dojo/data/ItemFileReadStore](../data/itemfilereadstore)\n\n### `ItemFileWriteStore``()`\n\nDefined by [dojo/data/ItemFileWriteStore](../data/itemfilewritestore)\n\n### `ObjectStore``()`\n\nDefined by [dojo/data/ObjectStore](../data/objectstore)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.data.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.data.html)"
- name: _base/kernel.data#api
  id: dojo/_base/kernel.data#1_10dojo__base_kernel_data_api
  summary: null
  belongs_to: _base/kernel.data
  description: |-
    ### api

    Defined by: [dojo/data/api/Read](../data/api/read)
- name: _base/kernel.data#ItemFileReadStore()
  id: dojo/_base/kernel.data#1_10dojo__base_kernel_data_ItemFileReadStore
  summary: null
  belongs_to: _base/kernel.data
  description: |-
    ### `ItemFileReadStore` `()`

    Defined by [dojo/data/ItemFileReadStore](../data/itemfilereadstore)
- name: _base/kernel.data#ItemFileWriteStore()
  id: dojo/_base/kernel.data#1_10dojo__base_kernel_data_ItemFileWriteStore
  summary: null
  belongs_to: _base/kernel.data
  description: |-
    ### `ItemFileWriteStore` `()`

    Defined by [dojo/data/ItemFileWriteStore](../data/itemfilewritestore)
- name: _base/kernel.data#ObjectStore()
  id: dojo/_base/kernel.data#1_10dojo__base_kernel_data_ObjectStore
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.data
  description: "### `ObjectStore` `()`\n\nDefined by [dojo/data/ObjectStore](../data/objectstore)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.data.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.data.html)"
- name: _base/kernel.data#util
  id: dojo/_base/kernel.data#1_10dojo__base_kernel_data_util
  summary: null
  belongs_to: _base/kernel.data
  description: |-
    ### util

    Defined by: [dojo/data/util/filter](../data/util/filter)

    ## Methods
- name: _base/kernel.date
  id: dojo/_base/kernel.date
  summary: Compare two date objects by date, time, or both
  description: "# dojo/\\_base/kernel.date\n\n## Properties\n\n### stamp\n\nDefined by: [dojo/date/stamp](../date/stamp)\n\nTODOC\n\n## Methods\n\n### `add``(date,interval,amount)`\n\nDefined by [dojo/date](../date)\n\nAdd to a Date in intervals of different size, from milliseconds to years\n\n|           |        |                                                                                                                                                           |\n|-----------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                               |\n| date      | Date   | Date object to start with                                                                                                                                 |\n| interval  | String | A string representing the interval. One of the following: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"quarter\", \"week\", \"weekday\" |\n| amount    | int    | How much to add to the date.                                                                                                                              |\n\n**Returns:** instance\n\n### `compare``(date1,date2,portion)`\n\nDefined by [dojo/date](../date)\n\nCompare two date objects by date, time, or both.\n\nReturns 0 if equal, positive if a \\> b, else negative.\n\n[TABLE]\n\n**Returns:** number\n\n### `difference``(date1,date2,interval)`\n\nDefined by [dojo/date](../date)\n\nGet the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `getDaysInMonth``(dateObject)`\n\nDefined by [dojo/date](../date)\n\nReturns the number of days in the month used by dateObject\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** number \\| undefined\n\n### `getTimezoneName``(dateObject)`\n\nDefined by [dojo/date](../date)\n\nGet the user's time zone as provided by the browser\n\nTry to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See <http://www.twinsun.com/tz/tz-link.htm> Note: results may be inconsistent across browsers.\n\n|            |      |                                                                   |\n|------------|------|-------------------------------------------------------------------|\n| Parameter  | Type | Description                                                       |\n| dateObject | Date | Needed because the timezone may vary with time (daylight savings) |\n\n**Returns:** undefined\n\n### `isLeapYear``(dateObject)`\n\nDefined by [dojo/date](../date)\n\nDetermines if the year of the dateObject is a leap year\n\nLeap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.date.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.date.html)"
- name: _base/kernel.date#add()
  id: dojo/_base/kernel.date#1_10dojo__base_kernel_date_add
  summary: null
  belongs_to: _base/kernel.date
  description: |-
    ### `add` `(date,interval,amount)`

    Defined by [dojo/date](../date)

    Add to a Date in intervals of different size, from milliseconds to years

    |           |        |                                                                                                                                                           |
    |-----------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameter | Type   | Description                                                                                                                                               |
    | date      | Date   | Date object to start with                                                                                                                                 |
    | interval  | String | A string representing the interval. One of the following: "year", "month", "day", "hour", "minute", "second", "millisecond", "quarter", "week", "weekday" |
    | amount    | int    | How much to add to the date.                                                                                                                              |

    **Returns:** instance
- name: _base/kernel.date#compare()
  id: dojo/_base/kernel.date#1_10dojo__base_kernel_date_compare
  summary: Compare two date objects by date, time, or both
  belongs_to: _base/kernel.date
  description: |-
    ### `compare` `(date1,date2,portion)`

    Defined by [dojo/date](../date)

    Compare two date objects by date, time, or both.

    Returns 0 if equal, positive if a \> b, else negative.

    [TABLE]

    **Returns:** number
- name: _base/kernel.date#difference()
  id: dojo/_base/kernel.date#1_10dojo__base_kernel_date_difference
  summary: Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer
  belongs_to: _base/kernel.date
  description: |-
    ### `difference` `(date1,date2,interval)`

    Defined by [dojo/date](../date)

    Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel.date#getDaysInMonth()
  id: dojo/_base/kernel.date#1_10dojo__base_kernel_date_getDaysInMonth
  summary: null
  belongs_to: _base/kernel.date
  description: |-
    ### `getDaysInMonth` `(dateObject)`

    Defined by [dojo/date](../date)

    Returns the number of days in the month used by dateObject

    |            |      |             |
    |------------|------|-------------|
    | Parameter  | Type | Description |
    | dateObject | Date |             |

    **Returns:** number \| undefined
- name: _base/kernel.date#getTimezoneName()
  id: dojo/_base/kernel.date#1_10dojo__base_kernel_date_getTimezoneName
  summary: Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone
  belongs_to: _base/kernel.date
  description: |-
    ### `getTimezoneName` `(dateObject)`

    Defined by [dojo/date](../date)

    Get the user's time zone as provided by the browser

    Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See <http://www.twinsun.com/tz/tz-link.htm> Note: results may be inconsistent across browsers.

    |            |      |                                                                   |
    |------------|------|-------------------------------------------------------------------|
    | Parameter  | Type | Description                                                       |
    | dateObject | Date | Needed because the timezone may vary with time (daylight savings) |

    **Returns:** undefined
- name: _base/kernel.date#isLeapYear()
  id: dojo/_base/kernel.date#1_10dojo__base_kernel_date_isLeapYear
  summary: 'Leap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400'
  belongs_to: _base/kernel.date
  description: "### `isLeapYear` `(dateObject)`\n\nDefined by [dojo/date](../date)\n\nDetermines if the year of the dateObject is a leap year\n\nLeap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.\n\n|            |      |             |\n|------------|------|-------------|\n| Parameter  | Type | Description |\n| dateObject | Date |             |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.date.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.date.html)"
- name: _base/kernel.date#stamp
  id: dojo/_base/kernel.date#1_10dojo__base_kernel_date_stamp
  summary: null
  belongs_to: _base/kernel.date
  description: |-
    ### stamp

    Defined by: [dojo/date/stamp](../date/stamp)

    TODOC

    ## Methods
- name: _base/kernel.dnd
  id: dojo/_base/kernel.dnd
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.dnd\n\n## Properties\n\n### autoscroll\n\nDefined by: [dojo/dnd/autoscroll](../dnd/autoscroll)\n\nUsed by [dojo/dnd/Manager](../dnd/manager) to scroll document or internal node when the user drags near the edge of the viewport or a scrollable node\n\n### move\n\nDefined by: [dojo/dnd/move](../dnd/move)\n\n## Methods\n\n### `AutoSource``()`\n\nDefined by [dojo/dnd/AutoSource](../dnd/autosource)\n\n### `Avatar``()`\n\nDefined by [dojo/dnd/Avatar](../dnd/avatar)\n\n### `Container``()`\n\nDefined by [dojo/dnd/Container](../dnd/container)\n\n### `Manager``()`\n\nDefined by [dojo/dnd/Manager](../dnd/manager)\n\n### `Moveable``()`\n\nDefined by [dojo/dnd/Moveable](../dnd/moveable)\n\n### `Mover``()`\n\nDefined by [dojo/dnd/Mover](../dnd/mover)\n\n### `Selector``()`\n\nDefined by [dojo/dnd/Selector](../dnd/selector)\n\n### `Source``()`\n\nDefined by [dojo/dnd/Source](../dnd/source)\n\n### `Target``()`\n\nDefined by [dojo/dnd/Target](../dnd/target)\n\n### `TimedMoveable``()`\n\nDefined by [dojo/dnd/TimedMoveable](../dnd/timedmoveable)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.dnd.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.dnd.html)"
- name: _base/kernel.dnd#autoscroll
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_autoscroll
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### autoscroll

    Defined by: [dojo/dnd/autoscroll](../dnd/autoscroll)

    Used by [dojo/dnd/Manager](../dnd/manager) to scroll document or internal node when the user drags near the edge of the viewport or a scrollable node
- name: _base/kernel.dnd#AutoSource()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_AutoSource
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `AutoSource` `()`

    Defined by [dojo/dnd/AutoSource](../dnd/autosource)
- name: _base/kernel.dnd#Avatar()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Avatar
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Avatar` `()`

    Defined by [dojo/dnd/Avatar](../dnd/avatar)
- name: _base/kernel.dnd#Container()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Container
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Container` `()`

    Defined by [dojo/dnd/Container](../dnd/container)
- name: _base/kernel.dnd#Manager()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Manager
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Manager` `()`

    Defined by [dojo/dnd/Manager](../dnd/manager)
- name: _base/kernel.dnd#move
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_move
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### move

    Defined by: [dojo/dnd/move](../dnd/move)

    ## Methods
- name: _base/kernel.dnd#Moveable()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Moveable
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Moveable` `()`

    Defined by [dojo/dnd/Moveable](../dnd/moveable)
- name: _base/kernel.dnd#Mover()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Mover
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Mover` `()`

    Defined by [dojo/dnd/Mover](../dnd/mover)
- name: _base/kernel.dnd#Selector()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Selector
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Selector` `()`

    Defined by [dojo/dnd/Selector](../dnd/selector)
- name: _base/kernel.dnd#Source()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Source
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Source` `()`

    Defined by [dojo/dnd/Source](../dnd/source)
- name: _base/kernel.dnd#Target()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_Target
  summary: null
  belongs_to: _base/kernel.dnd
  description: |-
    ### `Target` `()`

    Defined by [dojo/dnd/Target](../dnd/target)
- name: _base/kernel.dnd#TimedMoveable()
  id: dojo/_base/kernel.dnd#1_10dojo__base_kernel_dnd_TimedMoveable
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.dnd
  description: "### `TimedMoveable` `()`\n\nDefined by [dojo/dnd/TimedMoveable](../dnd/timedmoveable)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.dnd.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.dnd.html)"
- name: _base/kernel.doc
  id: dojo/_base/kernel.doc
  summary: Alias for the current document
  description: "# dojo/\\_base/kernel.doc\n\n## Summary\n\nAlias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().\n\nUse this rather than referring to 'window.document' to ensure your code runs correctly in managed contexts.\n\n## Examples\n\n### Example 1\n\n``` javascript\nn.appendChild(dojo.doc.createElement('div'));\n```\n\n## Properties\n\n### documentElement\n\nDefined by: [dojox/gfx/\\_base](http://dojotoolkit.org/api/1.10/dojox/gfx/_base)\n\n### dojoClick\n\nDefined by: [dojox/mobile/common](http://dojotoolkit.org/api/1.10/dojox/mobile/common)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.doc.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.doc.html)"
- name: _base/kernel.doc#documentElement
  id: dojo/_base/kernel.doc#1_10dojo__base_kernel_doc_documentElement
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.doc
  description: "### documentElement\n\nDefined by: [dojox/gfx/\\_base](http://dojotoolkit.org/api/1.10/dojox/gfx/_base)\n\n### dojoClick\n\nDefined by: [dojox/mobile/common](http://dojotoolkit.org/api/1.10/dojox/mobile/common)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.doc.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.doc.html)"
- name: _base/kernel.fx
  id: dojo/_base/kernel.fx
  summary: Collection of easing functions to use beyond the default dojo._defaultEasing function
  description: "# dojo/\\_base/kernel.fx\n\n## Summary\n\nEffects library on top of Base animations\n\n## Properties\n\n### easing\n\nDefined by: [dojo/fx/easing](../fx/easing)\n\nCollection of easing functions to use beyond the default `dojo._defaultEasing` function.\n\n## Methods\n\n### `chain``(animations)`\n\nDefined by [dojo/fx](../fx)\n\nChain a list of `dojo/_base/fx.Animation`s to run in sequence\n\nReturn a [dojo/\\_base/fx.Animation](fx#Animation) which will play all passed [dojo/\\_base/fx.Animation](fx#Animation) instances in sequence, firing its own synthesized events simulating a single animation. (eg: onEnd of this animation means the end of the chain, not the individual animations within)\n\n|            |                                              |             |\n|------------|----------------------------------------------|-------------|\n| Parameter  | Type                                         | Description |\n| animations | [dojo/\\_base/fx.Animation](fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nOnce `node` is faded out, fade in `otherNode`\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.chain([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n```\n\n### `combine``(animations)`\n\nDefined by [dojo/fx](../fx)\n\nCombine a list of `dojo/_base/fx.Animation`s to run in parallel\n\nCombine an array of [dojo/\\_base/fx.Animation](fx#Animation)s to run in parallel, providing a new [dojo/\\_base/fx.Animation](fx#Animation) instance encompasing each animation, firing standard animation events.\n\n|            |                                              |             |\n|------------|----------------------------------------------|-------------|\n| Parameter  | Type                                         | Description |\n| animations | [dojo/\\_base/fx.Animation](fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nFade out `node` while fading in `otherNode` simultaneously\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.combine([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n```\n\n### Example 2\n\nWhen the longest animation ends, execute a function:\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    var anim = fx.combine([\n        fx.fadeIn({ node: n, duration:700 }),\n        fx.fadeOut({ node: otherNode, duration: 300 })\n    ]);\n    aspect.after(anim, \"onEnd\", function(){\n        // overall animation is done.\n    }, true);\n    anim.play(); // play the animation\n});\n```\n\n### `slideTo``(args)`\n\nDefined by [dojo/fx](../fx)\n\nSlide a node to a new top/left position\n\nReturns an animation that will slide \"node\" defined in args Object from its current position to the position defined by (args.left, args.top).\n\n|           |        |                                                                                                                                                                                                              |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                                                  |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on). Special args members are `top` and `left`, which indicate the new position to slide to. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n.slideTo({ node: node, left:\"40\", top:\"50\", units:\"px\" }).play()\n```\n\n### `Toggler``()`\n\nDefined by [dojo/fx/Toggler](../fx/toggler)\n\n### `wipeIn``(args)`\n\nDefined by [dojo/fx](../fx)\n\nExpand a node to it's natural height.\n\nReturns an animation that will expand the node defined in 'args' object from it's current height to it's natural height (with no scrollbar). Node must have no margin/border/padding.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.wipeIn({\n        node:\"someId\"\n    }).play()\n});\n```\n\n### `wipeOut``(args)`\n\nDefined by [dojo/fx](../fx)\n\nShrink a node to nothing and hide it.\n\nReturns an animation that will shrink node defined in \"args\" from it's current height to 1px, and then hide it.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/fx\"], function(fx){\n    fx.wipeOut({ node:\"someId\" }).play()\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.fx.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.fx.html)"
- name: _base/kernel.fx#chain()
  id: dojo/_base/kernel.fx#1_10dojo__base_kernel_fx_chain
  summary: Return a dojo/_base/fx.Animation which will play all passed dojo/_base/fx.Animation instances in sequence, firing its own synthesized events simulating a single animation
  belongs_to: _base/kernel.fx
  description: "### `chain` `(animations)`\n\nDefined by [dojo/fx](../fx)\n\nChain a list of `dojo/_base/fx.Animation`s to run in sequence\n\nReturn a [dojo/\\_base/fx.Animation](fx#Animation) which will play all passed [dojo/\\_base/fx.Animation](fx#Animation) instances in sequence, firing its own synthesized events simulating a single animation. (eg: onEnd of this animation means the end of the chain, not the individual animations within)\n\n|            |                                              |             |\n|------------|----------------------------------------------|-------------|\n| Parameter  | Type                                         | Description |\n| animations | [dojo/\\_base/fx.Animation](fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nOnce `node` is faded out, fade in `otherNode`\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.chain([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n    \n```"
- name: _base/kernel.fx#combine()
  id: dojo/_base/kernel.fx#1_10dojo__base_kernel_fx_combine
  summary: Combine an array of dojo/_base/fx.Animations to run in parallel, providing a new dojo/_base/fx.Animation instance encompasing each animation, firing standard animation events
  belongs_to: _base/kernel.fx
  description: "### `combine` `(animations)`\n\nDefined by [dojo/fx](../fx)\n\nCombine a list of `dojo/_base/fx.Animation`s to run in parallel\n\nCombine an array of [dojo/\\_base/fx.Animation](fx#Animation)s to run in parallel, providing a new [dojo/\\_base/fx.Animation](fx#Animation) instance encompasing each animation, firing standard animation events.\n\n|            |                                              |             |\n|------------|----------------------------------------------|-------------|\n| Parameter  | Type                                         | Description |\n| animations | [dojo/\\_base/fx.Animation](fx#Animation)\\[\\] |             |\n\n**Returns:** instance\n\n## Examples\n\n### Example 1\n\nFade out `node` while fading in `otherNode` simultaneously\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.combine([\n        fx.fadeIn({ node:node }),\n        fx.fadeOut({ node:otherNode })\n    ]).play();\n});\n    \n```\n\n### Example 2\n\nWhen the longest animation ends, execute a function:\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    var anim = fx.combine([\n        fx.fadeIn({ node: n, duration:700 }),\n        fx.fadeOut({ node: otherNode, duration: 300 })\n    ]);\n    aspect.after(anim, \"onEnd\", function(){\n        // overall animation is done.\n    }, true);\n    anim.play(); // play the animation\n});\n    \n```"
- name: _base/kernel.fx#easing
  id: dojo/_base/kernel.fx#1_10dojo__base_kernel_fx_easing
  summary: Collection of easing functions to use beyond the default dojo._defaultEasing function
  belongs_to: _base/kernel.fx
  description: |-
    ### easing

    Defined by: [dojo/fx/easing](../fx/easing)

    Collection of easing functions to use beyond the default `dojo._defaultEasing` function.

    ## Methods
- name: _base/kernel.fx#slideTo()
  id: dojo/_base/kernel.fx#1_10dojo__base_kernel_fx_slideTo
  summary: Returns an animation that will slide "node" defined in args Object from its current position to the position defined by (args.left, args.top)
  belongs_to: _base/kernel.fx
  description: "### `slideTo` `(args)`\n\nDefined by [dojo/fx](../fx)\n\nSlide a node to a new top/left position\n\nReturns an animation that will slide \"node\" defined in args Object from its current position to the position defined by (args.left, args.top).\n\n|           |        |                                                                                                                                                                                                              |\n|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                                                                                                                  |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on). Special args members are `top` and `left`, which indicate the new position to slide to. |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      .slideTo({ node: node, left:\"40\", top:\"50\", units:\"px\" }).play()\n    \n```"
- name: _base/kernel.fx#Toggler()
  id: dojo/_base/kernel.fx#1_10dojo__base_kernel_fx_Toggler
  summary: null
  belongs_to: _base/kernel.fx
  description: |-
    ### `Toggler` `()`

    Defined by [dojo/fx/Toggler](../fx/toggler)
- name: _base/kernel.fx#wipeIn()
  id: dojo/_base/kernel.fx#1_10dojo__base_kernel_fx_wipeIn
  summary: Expand a node to it's natural height
  belongs_to: _base/kernel.fx
  description: "### `wipeIn` `(args)`\n\nDefined by [dojo/fx](../fx)\n\nExpand a node to it's natural height.\n\nReturns an animation that will expand the node defined in 'args' object from it's current height to it's natural height (with no scrollbar). Node must have no margin/border/padding.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.wipeIn({\n        node:\"someId\"\n    }).play()\n});\n    \n```"
- name: _base/kernel.fx#wipeOut()
  id: dojo/_base/kernel.fx#1_10dojo__base_kernel_fx_wipeOut
  summary: Shrink a node to nothing and hide it
  belongs_to: _base/kernel.fx
  description: "### `wipeOut` `(args)`\n\nDefined by [dojo/fx](../fx)\n\nShrink a node to nothing and hide it.\n\nReturns an animation that will shrink node defined in \"args\" from it's current height to 1px, and then hide it.\n\n|           |        |                                                                                                                     |\n|-----------|--------|---------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type   | Description                                                                                                         |\n| args      | Object | A hash-map of standard `dojo/_base/fx.Animation` constructor properties (such as easing: node: duration: and so on) |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/fx\"], function(fx){\n    fx.wipeOut({ node:\"someId\" }).play()\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.fx.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.fx.html)"
- name: _base/kernel.gears
  id: dojo/_base/kernel.gears
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.gears\n\n## Summary\n\nTODOC\n\n## Properties\n\n### available\n\nDefined by: [dojo/gears](../gears)\n\nTrue if client is using Google Gears\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.gears.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.gears.html)"
- name: _base/kernel.gears#available
  id: dojo/_base/kernel.gears#1_10dojo__base_kernel_gears_available
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.gears
  description: "### available\n\nDefined by: [dojo/gears](../gears)\n\nTrue if client is using Google Gears\n\n## Methods\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.gears.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.gears.html)"
- name: _base/kernel.global
  id: dojo/_base/kernel.global
  summary: Alias for the current window
  description: "# dojo/\\_base/kernel.global\n\n## Summary\n\nAlias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().\n\nUse this rather than referring to 'window' to ensure your code runs correctly in managed contexts.\n\n## Methods\n\n### `$``()`\n\nDefined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)\n\n**Returns:** undefined\n\n### `GoogleSearchStoreCallback_undefined_NaN``(start,data,responseCode,errorMsg)`\n\nDefined by [dojox/data/GoogleSearchStore](http://dojotoolkit.org/api/1.10/dojox/data/GoogleSearchStore)\n\n|              |           |             |\n|--------------|-----------|-------------|\n| Parameter    | Type      | Description |\n| start        | undefined |             |\n| data         | undefined |             |\n| responseCode | undefined |             |\n| errorMsg     | undefined |             |\n\n### `jQuery``()`\n\nDefined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)\n\n**Returns:** undefined\n\n### `swfIsInHTML``()`\n\nDefined by [dojox/av/FLVideo](http://dojotoolkit.org/api/1.10/dojox/av/FLVideo)\n\n### `undefined_onload``()`\n\nDefined by [dojo/request/iframe](../request/iframe)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.global.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.global.html)"
- name: _base/kernel.global#$()
  id: dojo/_base/kernel.global#1_10dojo__base_kernel_global_$
  summary: null
  belongs_to: _base/kernel.global
  description: |-
    ### `$` `()`

    Defined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)

    **Returns:** undefined
- name: _base/kernel.global#GoogleSearchStoreCallback_undefined_NaN()
  id: dojo/_base/kernel.global#1_10dojo__base_kernel_global_GoogleSearchStoreCallback_undefined_NaN
  summary: null
  belongs_to: _base/kernel.global
  description: |-
    ### `GoogleSearchStoreCallback_undefined_NaN` `(start,data,responseCode,errorMsg)`

    Defined by [dojox/data/GoogleSearchStore](http://dojotoolkit.org/api/1.10/dojox/data/GoogleSearchStore)

    |              |           |             |
    |--------------|-----------|-------------|
    | Parameter    | Type      | Description |
    | start        | undefined |             |
    | data         | undefined |             |
    | responseCode | undefined |             |
    | errorMsg     | undefined |             |
- name: _base/kernel.global#jQuery()
  id: dojo/_base/kernel.global#1_10dojo__base_kernel_global_jQuery
  summary: null
  belongs_to: _base/kernel.global
  description: |-
    ### `jQuery` `()`

    Defined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)

    **Returns:** undefined
- name: _base/kernel.global#swfIsInHTML()
  id: dojo/_base/kernel.global#1_10dojo__base_kernel_global_swfIsInHTML
  summary: null
  belongs_to: _base/kernel.global
  description: |-
    ### `swfIsInHTML` `()`

    Defined by [dojox/av/FLVideo](http://dojotoolkit.org/api/1.10/dojox/av/FLVideo)
- name: _base/kernel.global#undefined_onload()
  id: dojo/_base/kernel.global#1_10dojo__base_kernel_global_undefined_onload
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.global
  description: "### `undefined_onload` `()`\n\nDefined by [dojo/request/iframe](../request/iframe)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.global.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.global.html)"
- name: _base/kernel.html
  id: dojo/_base/kernel.html
  summary: inserts (replaces) the given content into the given node
  description: "# dojo/\\_base/kernel.html\n\n## Summary\n\nTODOC\n\n## Methods\n\n### `set``(node,cont,params)`\n\nDefined by [dojo/html](../html)\n\ninserts (replaces) the given content into the given node. dojo/dom-construct.place(cont, node, \"only\") may be a better choice for simple HTML insertion.\n\nUnless you need to use the params capabilities of this method, you should use [dojo/dom-construct.place(cont, node, \"only\")](../dom-construct#place). [dojo/dom-construct](../dom-construct)..place() has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct](../dom-construct)..place does not handle NodeList insertions [dojo/dom-construct.place(cont, node, \"only\")](../dom-construct#place). [dojo/dom-construct.place()](../dom-construct#place) has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct.place](../dom-construct#place) does not handle NodeList insertions or the other capabilities as defined by the params object for this method.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA safe string/node/nodelist content replacement/injection with hooks for extension Example Usage:\n\n``` javascript\nhtml.set(node, \"some string\");\nhtml.set(node, contentNode, {options});\nhtml.set(node, myNode.childNodes, {options});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.html.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.html.html)"
- name: _base/kernel.html#set()
  id: dojo/_base/kernel.html#1_10dojo__base_kernel_html_set
  summary: inserts (replaces) the given content into the given node
  belongs_to: _base/kernel.html
  description: "### `set` `(node,cont,params)`\n\nDefined by [dojo/html](../html)\n\ninserts (replaces) the given content into the given node. dojo/dom-construct.place(cont, node, \"only\") may be a better choice for simple HTML insertion.\n\nUnless you need to use the params capabilities of this method, you should use [dojo/dom-construct.place(cont, node, \"only\")](../dom-construct#place). [dojo/dom-construct](../dom-construct)..place() has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct](../dom-construct)..place does not handle NodeList insertions [dojo/dom-construct.place(cont, node, \"only\")](../dom-construct#place). [dojo/dom-construct.place()](../dom-construct#place) has more robust support for injecting an HTML string into the DOM, but it only handles inserting an HTML string as DOM elements, or inserting a DOM node. [dojo/dom-construct.place](../dom-construct#place) does not handle NodeList insertions or the other capabilities as defined by the params object for this method.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nA safe string/node/nodelist content replacement/injection with hooks for extension Example Usage:\n\n``` javascript\n      html.set(node, \"some string\");\nhtml.set(node, contentNode, {options});\nhtml.set(node, myNode.childNodes, {options});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.html.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.html.html)"
- name: _base/kernel.i18n
  id: dojo/_base/kernel.i18n
  summary: We choose to include our own plugin to leverage functionality already contained in dojo and thereby reduce the size of the plugin compared to various loader implementations
  description: "# dojo/\\_base/kernel.i18n\n\n## Summary\n\nThis module implements the [dojo/i18n](../i18n)! plugin and the v1.6- i18n API\n\nWe choose to include our own plugin to leverage functionality already contained in dojo and thereby reduce the size of the plugin compared to various loader implementations. Also, this allows foreign AMD loaders to be used without their plugins.\n\n## Properties\n\n### cache\n\nDefined by: [dojo/i18n](../i18n)\n\n### dynamic\n\nDefined by: [dojo/i18n](../i18n)\n\n### unitTests\n\nDefined by: [dojo/i18n](../i18n)\n\n## Methods\n\n### `getL10nName``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](../i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** string\n\n### `getLocalization``(moduleName,bundleName,locale)`\n\nDefined by [dojo/i18n](../i18n)\n\n|            |           |             |\n|------------|-----------|-------------|\n| Parameter  | Type      | Description |\n| moduleName | undefined |             |\n| bundleName | undefined |             |\n| locale     | undefined |             |\n\n**Returns:** undefined\n\n### `load``(id,require,load)`\n\nDefined by [dojo/i18n](../i18n)\n\nid is in one of the following formats\n\n1.  /nls/ =\\> load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale.\n\n2.  /nls// =\\> load then return the bundle localized to\n\n3.  *preload*/nls/\\* =\\> for config.locale and all config.extraLocale, load all bundles found in the best-matching bundle rollup. A value of 1 is returned, which is meaningless other than to say the plugin is executing the requested preloads\n\nIn cases 1 and 2, is always normalized to an absolute module id upon entry; see normalize. In case 3, it is assumed to be absolute; this is arranged by the builder.\n\nTo load a bundle means to insert the bundle into the plugin's cache and publish the bundle value to the loader. Given , , and a particular , the cache key\n\n``` markup\n<path>/nls/<bundle>/<locale>\n```\n\nwill hold the value. Similarly, then plugin will publish this value to the loader by\n\n``` javascript\ndefine(\"<path>/nls/<bundle>/<locale>\", <bundle-value>);\n```\n\nGiven this algorithm, other machinery can provide fast load paths be preplacing values in the plugin's cache, which is public. When a load is demanded the cache is inspected before starting any loading. Explicitly placing values in the plugin cache is an advanced/experimental feature that should not be needed; use at your own risk.\n\nFor the normal AMD algorithm, the root bundle is loaded first, which instructs the plugin what additional localized bundles are required for a particular locale. These additional locales are loaded and a mix of the root and each progressively-specific locale is returned. For example:\n\n1.  The client demands \"dojo/i18n!some/path/nls/someBundle\n\n2.  The loader demands load(some/path/nls/someBundle)\n\n3.  This plugin require's \"some/path/nls/someBundle\", which is the root bundle.\n\n4.  Assuming config.locale is \"ab-cd-ef\" and the root bundle indicates that localizations are available for \"ab\" and \"ab-cd-ef\" (note the missing \"ab-cd\", then the plugin requires \"some/path/nls/ab/someBundle\" and \"some/path/nls/ab-cd-ef/someBundle\"\n\n5.  Upon receiving all required bundles, the plugin constructs the value of the bundle ab-cd-ef as...\n\n    ``` javascript\n     mixin(mixin(mixin({}, require(\"some/path/nls/someBundle\"),\n         require(\"some/path/nls/ab/someBundle\")),\n         require(\"some/path/nls/ab-cd-ef/someBundle\"));\n    ```\n\nThis value is inserted into the cache and published to the loader at the key/module-id some/path/nls/someBundle/ab-cd-ef.\n\nThe special preload signature (case 3) instructs the plugin to stop servicing all normal requests (further preload requests will be serviced) until all ongoing preloading has completed.\n\nThe preload signature instructs the plugin that a special rollup module is available that contains one or more flattened, localized bundles. The JSON array of available locales indicates which locales are available. Here is an example:\n\n``` javascript\n*preload*some/path/nls/someModule*[\"root\", \"ab\", \"ab-cd-ef\"]\n```\n\nThis indicates the following rollup modules are available:\n\n``` javascript\nsome/path/nls/someModule_ROOT\nsome/path/nls/someModule_ab\nsome/path/nls/someModule_ab-cd-ef\n```\n\nEach of these modules is a normal AMD module that contains one or more flattened bundles in a hash. For example, assume someModule contained the bundles some/bundle/path/someBundle and some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:\n\n``` javascript\ndefine({\n    some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,\n    some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,\n});\n```\n\nE.g., given this design, preloading for locale==\"ab\" can execute the following algorithm:\n\n``` javascript\nrequire([\"some/path/nls/someModule_ab\"], function(rollup){\n    for(var p in rollup){\n        var id = p + \"/ab\",\n        cache[id] = rollup[p];\n        define(id, rollup[p]);\n    }\n});\n```\n\nSimilarly, if \"ab-cd\" is requested, the algorithm can determine that \"ab\" is the best available and load accordingly.\n\nThe builder will write such rollups for every layer if a non-empty localeList profile property is provided. Further, the builder will include the following cache entry in the cache associated with any layer.\n\n``` javascript\n\"*now\":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}\n```\n\nThe \\*now special cache module instructs the loader to apply the provided function to context-require with respect to the particular layer being defined. This causes the plugin to hold all normal service requests until all preloading is complete.\n\nNotice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case where the target locale has a single segment and a layer depends on a single bundle:\n\nWithout Preloads:\n\n1.  Layer loads root bundle.\n2.  bundle is demanded; plugin loads single localized bundle.\n\nWith Preloads:\n\n1.  Layer causes preloading of target bundle.\n2.  bundle is demanded; service is delayed until preloading complete; bundle is returned.\n\nIn each case a single transaction is required to load the target bundle. In cases where multiple bundles are required and/or the locale has multiple segments, preloads still requires a single transaction whereas the normal path requires an additional transaction for each additional bundle/locale-segment. However all of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| require   | undefined |             |\n| load      | undefined |             |\n\n### `normalize``(id,toAbsMid)`\n\nDefined by [dojo/i18n](../i18n)\n\nid may be relative. preload has form `*preload*<path>/nls/<module>*<flattened locales>` and therefore never looks like a relative\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| toAbsMid  | undefined |             |\n\n**Returns:** undefined\n\n### `normalizeLocale``(locale)`\n\nDefined by [dojo/i18n](../i18n)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| locale    | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.i18n.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.i18n.html)"
- name: _base/kernel.i18n#cache
  id: dojo/_base/kernel.i18n#1_10dojo__base_kernel_i18n_cache
  summary: null
  belongs_to: _base/kernel.i18n
  description: |-
    ### cache

    Defined by: [dojo/i18n](../i18n)

    ### dynamic

    Defined by: [dojo/i18n](../i18n)

    ### unitTests

    Defined by: [dojo/i18n](../i18n)

    ## Methods
- name: _base/kernel.i18n#getL10nName()
  id: dojo/_base/kernel.i18n#1_10dojo__base_kernel_i18n_getL10nName
  summary: null
  belongs_to: _base/kernel.i18n
  description: |-
    ### `getL10nName` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](../i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** string
- name: _base/kernel.i18n#getLocalization()
  id: dojo/_base/kernel.i18n#1_10dojo__base_kernel_i18n_getLocalization
  summary: null
  belongs_to: _base/kernel.i18n
  description: |-
    ### `getLocalization` `(moduleName,bundleName,locale)`

    Defined by [dojo/i18n](../i18n)

    |            |           |             |
    |------------|-----------|-------------|
    | Parameter  | Type      | Description |
    | moduleName | undefined |             |
    | bundleName | undefined |             |
    | locale     | undefined |             |

    **Returns:** undefined
- name: _base/kernel.i18n#load()
  id: dojo/_base/kernel.i18n#1_10dojo__base_kernel_i18n_load
  summary: /nls/ => load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale
  belongs_to: _base/kernel.i18n
  description: "### `load` `(id,require,load)`\n\nDefined by [dojo/i18n](../i18n)\n\nid is in one of the following formats\n\n1.  /nls/ =\\> load the bundle, localized to config.locale; load all bundles localized to config.extraLocale (if any); return the loaded bundle localized to config.locale.\n\n2.  /nls// =\\> load then return the bundle localized to\n\n3.  *preload* /nls/\\* =\\> for config.locale and all config.extraLocale, load all bundles found in the best-matching bundle rollup. A value of 1 is returned, which is meaningless other than to say the plugin is executing the requested preloads\n\nIn cases 1 and 2, is always normalized to an absolute module id upon entry; see normalize. In case 3, it is assumed to be absolute; this is arranged by the builder.\n\nTo load a bundle means to insert the bundle into the plugin's cache and publish the bundle value to the loader. Given , , and a particular , the cache key\n\n``` markup\n      <path>/nls/<bundle>/<locale>\n    \n```\n\nwill hold the value. Similarly, then plugin will publish this value to the loader by\n\n``` javascript\n      define(\"<path>/nls/<bundle>/<locale>\", <bundle-value>);\n    \n```\n\nGiven this algorithm, other machinery can provide fast load paths be preplacing values in the plugin's cache, which is public. When a load is demanded the cache is inspected before starting any loading. Explicitly placing values in the plugin cache is an advanced/experimental feature that should not be needed; use at your own risk.\n\nFor the normal AMD algorithm, the root bundle is loaded first, which instructs the plugin what additional localized bundles are required for a particular locale. These additional locales are loaded and a mix of the root and each progressively-specific locale is returned. For example:\n\n1.  The client demands \"dojo/i18n!some/path/nls/someBundle\n\n2.  The loader demands load(some/path/nls/someBundle)\n\n3.  This plugin require's \"some/path/nls/someBundle\", which is the root bundle.\n\n4.  Assuming config.locale is \"ab-cd-ef\" and the root bundle indicates that localizations are available for \"ab\" and \"ab-cd-ef\" (note the missing \"ab-cd\", then the plugin requires \"some/path/nls/ab/someBundle\" and \"some/path/nls/ab-cd-ef/someBundle\"\n\n5.  Upon receiving all required bundles, the plugin constructs the value of the bundle ab-cd-ef as...\n\n    ``` javascript\n               mixin(mixin(mixin({}, require(\"some/path/nls/someBundle\"),\n         require(\"some/path/nls/ab/someBundle\")),\n         require(\"some/path/nls/ab-cd-ef/someBundle\"));\n            \n    ```\n\nThis value is inserted into the cache and published to the loader at the key/module-id some/path/nls/someBundle/ab-cd-ef.\n\nThe special preload signature (case 3) instructs the plugin to stop servicing all normal requests (further preload requests will be serviced) until all ongoing preloading has completed.\n\nThe preload signature instructs the plugin that a special rollup module is available that contains one or more flattened, localized bundles. The JSON array of available locales indicates which locales are available. Here is an example:\n\n``` javascript\n      *preload*some/path/nls/someModule*[\"root\", \"ab\", \"ab-cd-ef\"]\n    \n```\n\nThis indicates the following rollup modules are available:\n\n``` javascript\n      some/path/nls/someModule_ROOT\nsome/path/nls/someModule_ab\nsome/path/nls/someModule_ab-cd-ef\n    \n```\n\nEach of these modules is a normal AMD module that contains one or more flattened bundles in a hash. For example, assume someModule contained the bundles some/bundle/path/someBundle and some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:\n\n``` javascript\n      define({\n    some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,\n    some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,\n});\n    \n```\n\nE.g., given this design, preloading for locale==\"ab\" can execute the following algorithm:\n\n``` javascript\n      require([\"some/path/nls/someModule_ab\"], function(rollup){\n    for(var p in rollup){\n        var id = p + \"/ab\",\n        cache[id] = rollup[p];\n        define(id, rollup[p]);\n    }\n});\n    \n```\n\nSimilarly, if \"ab-cd\" is requested, the algorithm can determine that \"ab\" is the best available and load accordingly.\n\nThe builder will write such rollups for every layer if a non-empty localeList profile property is provided. Further, the builder will include the following cache entry in the cache associated with any layer.\n\n``` javascript\n      \"*now\":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}\n    \n```\n\nThe \\*now special cache module instructs the loader to apply the provided function to context-require with respect to the particular layer being defined. This causes the plugin to hold all normal service requests until all preloading is complete.\n\nNotice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case where the target locale has a single segment and a layer depends on a single bundle:\n\nWithout Preloads:\n\n1.  Layer loads root bundle.\n2.  bundle is demanded; plugin loads single localized bundle.\n\nWith Preloads:\n\n1.  Layer causes preloading of target bundle.\n2.  bundle is demanded; service is delayed until preloading complete; bundle is returned.\n\nIn each case a single transaction is required to load the target bundle. In cases where multiple bundles are required and/or the locale has multiple segments, preloads still requires a single transaction whereas the normal path requires an additional transaction for each additional bundle/locale-segment. However all of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| id        | undefined |             |\n| require   | undefined |             |\n| load      | undefined |             |"
- name: _base/kernel.i18n#normalize()
  id: dojo/_base/kernel.i18n#1_10dojo__base_kernel_i18n_normalize
  summary: id may be relative
  belongs_to: _base/kernel.i18n
  description: |-
    ### `normalize` `(id,toAbsMid)`

    Defined by [dojo/i18n](../i18n)

    id may be relative. preload has form `*preload*<path>/nls/<module>*<flattened locales>` and therefore never looks like a relative

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | id        | undefined |             |
    | toAbsMid  | undefined |             |

    **Returns:** undefined
- name: _base/kernel.i18n#normalizeLocale()
  id: dojo/_base/kernel.i18n#1_10dojo__base_kernel_i18n_normalizeLocale
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.i18n
  description: "### `normalizeLocale` `(locale)`\n\nDefined by [dojo/i18n](../i18n)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| locale    | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.i18n.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.i18n.html)"
- name: _base/kernel.io
  id: dojo/_base/kernel.io
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.io\n\n## Properties\n\n### iframe\n\nDefined by: [dojo/io/iframe](../io/iframe)\n\n### script\n\nDefined by: [dojo/io/script](../io/script)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.io.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.io.html)"
- name: _base/kernel.io#iframe
  id: dojo/_base/kernel.io#1_10dojo__base_kernel_io_iframe
  summary: null
  belongs_to: _base/kernel.io
  description: |-
    ### iframe

    Defined by: [dojo/io/iframe](../io/iframe)
- name: _base/kernel.io#script
  id: dojo/_base/kernel.io#1_10dojo__base_kernel_io_script
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.io
  description: "### script\n\nDefined by: [dojo/io/script](../io/script)\n\nTODOC\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.io.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.io.html)"
- name: _base/kernel.keys
  id: dojo/_base/kernel.keys
  summary: Definitions for common key values
  description: "# dojo/\\_base/kernel.keys\n\n## Summary\n\nDefinitions for common key values. Client code should test keyCode against these named constants, as the actual codes can vary by browser.\n\n## Properties\n\n### ALT\n\nDefined by: [dojo/keys](../keys)\n\n### BACKSPACE\n\nDefined by: [dojo/keys](../keys)\n\n### CAPS_LOCK\n\nDefined by: [dojo/keys](../keys)\n\n### CLEAR\n\nDefined by: [dojo/keys](../keys)\n\n### copyKey\n\nDefined by: [dojo/keys](../keys)\n\n### CTRL\n\nDefined by: [dojo/keys](../keys)\n\n### DELETE\n\nDefined by: [dojo/keys](../keys)\n\n### DOWN_ARROW\n\nDefined by: [dojo/keys](../keys)\n\n### DOWN_DPAD\n\nDefined by: [dojo/keys](../keys)\n\n### END\n\nDefined by: [dojo/keys](../keys)\n\n### ENTER\n\nDefined by: [dojo/keys](../keys)\n\n### ESCAPE\n\nDefined by: [dojo/keys](../keys)\n\n### F1\n\nDefined by: [dojo/keys](../keys)\n\n### F10\n\nDefined by: [dojo/keys](../keys)\n\n### F11\n\nDefined by: [dojo/keys](../keys)\n\n### F12\n\nDefined by: [dojo/keys](../keys)\n\n### F13\n\nDefined by: [dojo/keys](../keys)\n\n### F14\n\nDefined by: [dojo/keys](../keys)\n\n### F15\n\nDefined by: [dojo/keys](../keys)\n\n### F2\n\nDefined by: [dojo/keys](../keys)\n\n### F3\n\nDefined by: [dojo/keys](../keys)\n\n### F4\n\nDefined by: [dojo/keys](../keys)\n\n### F5\n\nDefined by: [dojo/keys](../keys)\n\n### F6\n\nDefined by: [dojo/keys](../keys)\n\n### F7\n\nDefined by: [dojo/keys](../keys)\n\n### F8\n\nDefined by: [dojo/keys](../keys)\n\n### F9\n\nDefined by: [dojo/keys](../keys)\n\n### HELP\n\nDefined by: [dojo/keys](../keys)\n\n### HOME\n\nDefined by: [dojo/keys](../keys)\n\n### INSERT\n\nDefined by: [dojo/keys](../keys)\n\n### LEFT_ARROW\n\nDefined by: [dojo/keys](../keys)\n\n### LEFT_DPAD\n\nDefined by: [dojo/keys](../keys)\n\n### LEFT_WINDOW\n\nDefined by: [dojo/keys](../keys)\n\n### META\n\nDefined by: [dojo/keys](../keys)\n\n### NUM_LOCK\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_0\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_1\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_2\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_3\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_4\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_5\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_6\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_7\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_8\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_9\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_DIVIDE\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_ENTER\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_MINUS\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_MULTIPLY\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_PERIOD\n\nDefined by: [dojo/keys](../keys)\n\n### NUMPAD_PLUS\n\nDefined by: [dojo/keys](../keys)\n\n### PAGE_DOWN\n\nDefined by: [dojo/keys](../keys)\n\n### PAGE_UP\n\nDefined by: [dojo/keys](../keys)\n\n### PAUSE\n\nDefined by: [dojo/keys](../keys)\n\n### RIGHT_ARROW\n\nDefined by: [dojo/keys](../keys)\n\n### RIGHT_DPAD\n\nDefined by: [dojo/keys](../keys)\n\n### RIGHT_WINDOW\n\nDefined by: [dojo/keys](../keys)\n\n### SCROLL_LOCK\n\nDefined by: [dojo/keys](../keys)\n\n### SELECT\n\nDefined by: [dojo/keys](../keys)\n\n### SHIFT\n\nDefined by: [dojo/keys](../keys)\n\n### SPACE\n\nDefined by: [dojo/keys](../keys)\n\n### TAB\n\nDefined by: [dojo/keys](../keys)\n\n### UP_ARROW\n\nDefined by: [dojo/keys](../keys)\n\n### UP_DPAD\n\nDefined by: [dojo/keys](../keys)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.keys.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.keys.html)"
- name: _base/kernel.mouseButtons
  id: dojo/_base/kernel.mousebuttons
  summary: Numeric value of the left mouse button for the platform
  description: "# dojo/\\_base/kernel.mouseButtons\n\n## Properties\n\n### LEFT\n\nDefined by: [dojo/mouse](../mouse)\n\nNumeric value of the left mouse button for the platform.\n\n### MIDDLE\n\nDefined by: [dojo/mouse](../mouse)\n\nNumeric value of the middle mouse button for the platform.\n\n### RIGHT\n\nDefined by: [dojo/mouse](../mouse)\n\nNumeric value of the right mouse button for the platform.\n\n## Methods\n\n### `isButton``(e,button)`\n\nDefined by [dojo/mouse](../mouse)\n\nChecks an event object for a pressed button\n\n|           |        |                                                   |\n|-----------|--------|---------------------------------------------------|\n| Parameter | Type   | Description                                       |\n| e         | Event  | Event object to examine                           |\n| button    | Number | The button value (example: dojo.mouseButton.LEFT) |\n\n**Returns:** boolean\n\n### `isLeft``(e)`\n\nDefined by [dojo/mouse](../mouse)\n\nChecks an event object for the pressed left button\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** boolean\n\n### `isMiddle``(e)`\n\nDefined by [dojo/mouse](../mouse)\n\nChecks an event object for the pressed middle button\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** boolean\n\n### `isRight``(e)`\n\nDefined by [dojo/mouse](../mouse)\n\nChecks an event object for the pressed right button\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.mouseButtons.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.mouseButtons.html)"
- name: _base/kernel.mouseButtons#isButton()
  id: dojo/_base/kernel.mousebuttons#1_10dojo__base_kernel_mouseButtons_isButton
  summary: null
  belongs_to: _base/kernel.mouseButtons
  description: |-
    ### `isButton` `(e,button)`

    Defined by [dojo/mouse](../mouse)

    Checks an event object for a pressed button

    |           |        |                                                   |
    |-----------|--------|---------------------------------------------------|
    | Parameter | Type   | Description                                       |
    | e         | Event  | Event object to examine                           |
    | button    | Number | The button value (example: dojo.mouseButton.LEFT) |

    **Returns:** boolean
- name: _base/kernel.mouseButtons#isLeft()
  id: dojo/_base/kernel.mousebuttons#1_10dojo__base_kernel_mouseButtons_isLeft
  summary: null
  belongs_to: _base/kernel.mouseButtons
  description: |-
    ### `isLeft` `(e)`

    Defined by [dojo/mouse](../mouse)

    Checks an event object for the pressed left button

    |           |       |                         |
    |-----------|-------|-------------------------|
    | Parameter | Type  | Description             |
    | e         | Event | Event object to examine |

    **Returns:** boolean
- name: _base/kernel.mouseButtons#isMiddle()
  id: dojo/_base/kernel.mousebuttons#1_10dojo__base_kernel_mouseButtons_isMiddle
  summary: null
  belongs_to: _base/kernel.mouseButtons
  description: |-
    ### `isMiddle` `(e)`

    Defined by [dojo/mouse](../mouse)

    Checks an event object for the pressed middle button

    |           |       |                         |
    |-----------|-------|-------------------------|
    | Parameter | Type  | Description             |
    | e         | Event | Event object to examine |

    **Returns:** boolean
- name: _base/kernel.mouseButtons#isRight()
  id: dojo/_base/kernel.mousebuttons#1_10dojo__base_kernel_mouseButtons_isRight
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.mouseButtons
  description: "### `isRight` `(e)`\n\nDefined by [dojo/mouse](../mouse)\n\nChecks an event object for the pressed right button\n\n|           |       |                         |\n|-----------|-------|-------------------------|\n| Parameter | Type  | Description             |\n| e         | Event | Event object to examine |\n\n**Returns:** boolean\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.mouseButtons.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.mouseButtons.html)"
- name: _base/kernel.number
  id: dojo/_base/kernel.number
  summary: Create a string from a Number using a known localized pattern
  description: "# dojo/\\_base/kernel.number\n\n## Summary\n\nlocalized formatting and parsing routines for Number\n\n## Properties\n\n## Methods\n\n### `format``(value,options)`\n\nDefined by [dojo/number](../number)\n\nFormat a Number as a String, using locale-specific settings\n\nCreate a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the [Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and delimiters. If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.\n\n[TABLE]\n\n**Returns:** null \\| undefined\n\n### `parse``(expression,options)`\n\nDefined by [dojo/number](../number)\n\nConvert a properly formatted string to a primitive Number, using locale-specific settings.\n\nCreate a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale and follow the syntax described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) Note that literal characters in patterns are not supported.\n\n[TABLE]\n\n**Returns:** number\n\n### `regexp``(options)`\n\nDefined by [dojo/number](../number)\n\nBuilds the regular needed to parse a number\n\nReturns regular expression with positive and negative match, group and decimal separators\n\n[TABLE]\n\n**Returns:** undefined\n\n### `round``(value,places,increment)`\n\nDefined by [dojo/number](../number)\n\nRounds to the nearest value with the given number of decimal places, away from zero\n\nRounds to the nearest value with the given number of decimal places, away from zero if equal. Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by fractional increments also, such as the nearest quarter. NOTE: Subject to floating point errors. See [dojox/math/round](http://dojotoolkit.org/api/1.10/dojox/math/round) for experimental workaround.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n>>> number.round(-0.5)\n-1\n>>> number.round(162.295, 2)\n162.29  // note floating point error.  Should be 162.3\n>>> number.round(10.71, 0, 2.5)\n10.75\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.number.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.number.html)"
- name: _base/kernel.number#format()
  id: dojo/_base/kernel.number#1_10dojo__base_kernel_number_format
  summary: Create a string from a Number using a known localized pattern
  belongs_to: _base/kernel.number
  description: |-
    ### `format` `(value,options)`

    Defined by [dojo/number](../number)

    Format a Number as a String, using locale-specific settings

    Create a string from a Number using a known localized pattern. Formatting patterns appropriate to the locale are chosen from the [Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and delimiters. If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.

    [TABLE]

    **Returns:** null \| undefined
- name: _base/kernel.number#parse()
  id: dojo/_base/kernel.number#1_10dojo__base_kernel_number_parse
  summary: Convert a properly formatted string to a primitive Number, using locale-specific settings
  belongs_to: _base/kernel.number
  description: |-
    ### `parse` `(expression,options)`

    Defined by [dojo/number](../number)

    Convert a properly formatted string to a primitive Number, using locale-specific settings.

    Create a Number from a string using a known localized pattern. Formatting patterns are chosen appropriate to the locale and follow the syntax described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) Note that literal characters in patterns are not supported.

    [TABLE]

    **Returns:** number
- name: _base/kernel.number#regexp()
  id: dojo/_base/kernel.number#1_10dojo__base_kernel_number_regexp
  summary: null
  belongs_to: _base/kernel.number
  description: |-
    ### `regexp` `(options)`

    Defined by [dojo/number](../number)

    Builds the regular needed to parse a number

    Returns regular expression with positive and negative match, group and decimal separators

    [TABLE]

    **Returns:** undefined
- name: _base/kernel.number#round()
  id: dojo/_base/kernel.number#1_10dojo__base_kernel_number_round
  summary: Rounds to the nearest value with the given number of decimal places, away from zero if equal
  belongs_to: _base/kernel.number
  description: "### `round` `(value,places,increment)`\n\nDefined by [dojo/number](../number)\n\nRounds to the nearest value with the given number of decimal places, away from zero\n\nRounds to the nearest value with the given number of decimal places, away from zero if equal. Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by fractional increments also, such as the nearest quarter. NOTE: Subject to floating point errors. See [dojox/math/round](http://dojotoolkit.org/api/1.10/dojox/math/round) for experimental workaround.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n      >>> number.round(-0.5)\n-1\n>>> number.round(162.295, 2)\n162.29  // note floating point error.  Should be 162.3\n>>> number.round(10.71, 0, 2.5)\n10.75\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.number.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.number.html)"
- name: _base/kernel.regexp
  id: dojo/_base/kernel.regexp
  summary: A utility function used by some of the RE generators
  description: "# dojo/\\_base/kernel.regexp\n\n## Summary\n\nRegular expressions and Builder resources\n\n## Methods\n\n### `buildGroupRE``(arr,re,nonCapture)`\n\nDefined by [dojo/regexp](../regexp)\n\nBuilds a regular expression that groups subexpressions\n\nA utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter. re builds one subexpression for each elem in the array a, in the first parameter. Returns a string for a regular expression that groups all the subexpressions.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `escapeString``(str,except)`\n\nDefined by [dojo/regexp](../regexp)\n\nAdds escape sequences for special characters in regular expressions\n\n[TABLE]\n\n**Returns:** undefined\n\n### `group``(expression,nonCapture)`\n\nDefined by [dojo/regexp](../regexp)\n\nadds group match to expression\n\n[TABLE]\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.regexp.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.regexp.html)"
- name: _base/kernel.regexp#buildGroupRE()
  id: dojo/_base/kernel.regexp#1_10dojo__base_kernel_regexp_buildGroupRE
  summary: A utility function used by some of the RE generators
  belongs_to: _base/kernel.regexp
  description: |-
    ### `buildGroupRE` `(arr,re,nonCapture)`

    Defined by [dojo/regexp](../regexp)

    Builds a regular expression that groups subexpressions

    A utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter. re builds one subexpression for each elem in the array a, in the first parameter. Returns a string for a regular expression that groups all the subexpressions.

    [TABLE]

    **Returns:** undefined
- name: _base/kernel.regexp#escapeString()
  id: dojo/_base/kernel.regexp#1_10dojo__base_kernel_regexp_escapeString
  summary: null
  belongs_to: _base/kernel.regexp
  description: |-
    ### `escapeString` `(str,except)`

    Defined by [dojo/regexp](../regexp)

    Adds escape sequences for special characters in regular expressions

    [TABLE]

    **Returns:** undefined
- name: _base/kernel.regexp#group()
  id: dojo/_base/kernel.regexp#1_10dojo__base_kernel_regexp_group
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.regexp
  description: "### `group` `(expression,nonCapture)`\n\nDefined by [dojo/regexp](../regexp)\n\nadds group match to expression\n\n[TABLE]\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.regexp.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.regexp.html)"
- name: _base/kernel.rpc
  id: dojo/_base/kernel.rpc
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.rpc\n\n## Methods\n\n### `JsonpService``()`\n\nDefined by [dojo/rpc/JsonpService](../rpc/jsonpservice)\n\n### `JsonService``()`\n\nDefined by [dojo/rpc/JsonService](../rpc/jsonservice)\n\n### `RpcService``()`\n\nDefined by [dojo/rpc/RpcService](../rpc/rpcservice)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.rpc.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.rpc.html)"
- name: _base/kernel.rpc#JsonpService()
  id: dojo/_base/kernel.rpc#1_10dojo__base_kernel_rpc_JsonpService
  summary: null
  belongs_to: _base/kernel.rpc
  description: |-
    ### `JsonpService` `()`

    Defined by [dojo/rpc/JsonpService](../rpc/jsonpservice)
- name: _base/kernel.rpc#JsonService()
  id: dojo/_base/kernel.rpc#1_10dojo__base_kernel_rpc_JsonService
  summary: null
  belongs_to: _base/kernel.rpc
  description: |-
    ### `JsonService` `()`

    Defined by [dojo/rpc/JsonService](../rpc/jsonservice)
- name: _base/kernel.rpc#RpcService()
  id: dojo/_base/kernel.rpc#1_10dojo__base_kernel_rpc_RpcService
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel.rpc
  description: "### `RpcService` `()`\n\nDefined by [dojo/rpc/RpcService](../rpc/rpcservice)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.rpc.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.rpc.html)"
- name: _base/kernel.scopeMap
  id: dojo/_base/kernel.scopemap
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.scopeMap\n\n## Properties\n\n### dijit\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### dojo\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### dojox\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.scopeMap.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.scopeMap.html)"
- name: _base/kernel.Stateful
  id: dojo/_base/kernel.stateful
  summary: The class also provides the functionality to auto-magically manage getters and setters for object attributes/properties
  description: "# dojo/\\_base/kernel.Stateful\n\n## Summary\n\nBase class for objects that provide named properties with optional getter/setter control and the ability to watch for property changes\n\nThe class also provides the functionality to auto-magically manage getters and setters for object attributes/properties.\n\nGetters and Setters should follow the format of \\_xxxGetter or \\_xxxSetter where the xxx is a name of the attribute to handle. So an attribute of \"foo\" would have a custom getter of \\_fooGetter and a custom setter of \\_fooSetter.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var obj = new Stateful();\n    obj.watch(\"foo\", function(){\n        console.log(\"foo changed to \" + this.get(\"foo\"));\n    });\n    obj.set(\"foo\",\"bar\");\n});\n```\n\n## Properties\n\n## Methods\n\n### `get``(name)`\n\nDefined by [dojo/Stateful](../stateful)\n\nGet a property on a Stateful instance.\n\nGet a named property on a Stateful object. The property may potentially be retrieved via a getter method in subclasses. In the base class this just retrieves the object's property.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| name      | String | The property to get. |\n\n**Returns:** any \\| undefined\n\nThe property value on this Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful({foo: 3});\n    stateful.get(\"foo\") // returns 3\n    stateful.foo // returns 3\n});\n```\n\n### `postscript``(params)`\n\nDefined by [dojo/Stateful](../stateful)\n\n[TABLE]\n\n### `set``(name,value)`\n\nDefined by [dojo/Stateful](../stateful)\n\nSet a property on a Stateful instance\n\nSets named properties on a stateful object and notifies any watchers of the property. A programmatic setter may be defined in subclasses.\n\n|           |        |                                   |\n|-----------|--------|-----------------------------------|\n| Parameter | Type   | Description                       |\n| name      | String | The property to set.              |\n| value     | Object | The value to set in the property. |\n\n**Returns:** any \\| function\n\nThe function returns this dojo.Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\nrequire([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful();\n    stateful.watch(function(name, oldValue, value){\n        // this will be called on the set below\n    }\n    stateful.set(foo, 5);\n```\n\nset() may also be called with a hash of name/value pairs, ex:\n\n``` javascript\nstateful.set({\n    foo: \"Howdy\",\n    bar: 3\n});\n});\n```\n\nThis is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)\n\n### `watch``(name,callback)`\n\nDefined by [dojo/Stateful](../stateful)\n\nWatches a property for changes\n\n[TABLE]\n\n**Returns:** any \\| object\n\nAn object handle for the watch. The unwatch method of this object can be used to discontinue watching this property:\n\n``` javascript\nvar watchHandle = obj.watch(\"foo\", callback);\nwatchHandle.unwatch(); // callback won't be called now\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.Stateful.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.Stateful.html)"
- name: _base/kernel.Stateful#get()
  id: dojo/_base/kernel.stateful#1_10dojo__base_kernel_Stateful_get
  summary: Get a property on a Stateful instance
  belongs_to: _base/kernel.Stateful
  description: "### `get` `(name)`\n\nDefined by [dojo/Stateful](../stateful)\n\nGet a property on a Stateful instance.\n\nGet a named property on a Stateful object. The property may potentially be retrieved via a getter method in subclasses. In the base class this just retrieves the object's property.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| name      | String | The property to get. |\n\n**Returns:** any \\| undefined\n\nThe property value on this Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful({foo: 3});\n    stateful.get(\"foo\") // returns 3\n    stateful.foo // returns 3\n});\n    \n```"
- name: _base/kernel.Stateful#postscript()
  id: dojo/_base/kernel.stateful#1_10dojo__base_kernel_Stateful_postscript
  summary: null
  belongs_to: _base/kernel.Stateful
  description: |-
    ### `postscript` `(params)`

    Defined by [dojo/Stateful](../stateful)

    [TABLE]
- name: _base/kernel.Stateful#set()
  id: dojo/_base/kernel.stateful#1_10dojo__base_kernel_Stateful_set
  summary: Sets named properties on a stateful object and notifies any watchers of the property
  belongs_to: _base/kernel.Stateful
  description: "### `set` `(name,value)`\n\nDefined by [dojo/Stateful](../stateful)\n\nSet a property on a Stateful instance\n\nSets named properties on a stateful object and notifies any watchers of the property. A programmatic setter may be defined in subclasses.\n\n|           |        |                                   |\n|-----------|--------|-----------------------------------|\n| Parameter | Type   | Description                       |\n| name      | String | The property to set.              |\n| value     | Object | The value to set in the property. |\n\n**Returns:** any \\| function\n\nThe function returns this dojo.Stateful instance.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      require([\"dojo/Stateful\", function(Stateful) {\n    var stateful = new Stateful();\n    stateful.watch(function(name, oldValue, value){\n        // this will be called on the set below\n    }\n    stateful.set(foo, 5);\n    \n```\n\nset() may also be called with a hash of name/value pairs, ex:\n\n``` javascript\n      stateful.set({\n    foo: \"Howdy\",\n    bar: 3\n});\n});\n    \n```\n\nThis is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)"
- name: _base/kernel.Stateful#watch()
  id: dojo/_base/kernel.stateful#1_10dojo__base_kernel_Stateful_watch
  summary: An object handle for the watch
  belongs_to: _base/kernel.Stateful
  description: "### `watch` `(name,callback)`\n\nDefined by [dojo/Stateful](../stateful)\n\nWatches a property for changes\n\n[TABLE]\n\n**Returns:** any \\| object\n\nAn object handle for the watch. The unwatch method of this object can be used to discontinue watching this property:\n\n``` javascript\n      var watchHandle = obj.watch(\"foo\", callback);\nwatchHandle.unwatch(); // callback won't be called now\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.Stateful.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.Stateful.html)"
- name: _base/kernel.store
  id: dojo/_base/kernel.store
  summary: The Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes
  description: "# dojo/\\_base/kernel.store\n\n## Properties\n\n### util\n\nDefined by: [dojo/store/util/QueryResults](../store/util/queryresults)\n\n## Methods\n\n### `Cache``(masterStore,cachingStore,options)`\n\nDefined by [dojo/store/Cache](../store/cache)\n\n|              |           |             |\n|--------------|-----------|-------------|\n| Parameter    | Type      | Description |\n| masterStore  | undefined |             |\n| cachingStore | undefined |             |\n| options      | undefined |             |\n\n**Returns:** undefined\n\n### `DataStore``()`\n\nDefined by [dojo/store/DataStore](../store/datastore)\n\n### `JsonRest``()`\n\nDefined by [dojo/store/JsonRest](../store/jsonrest)\n\n### `Memory``()`\n\nDefined by [dojo/store/Memory](../store/memory)\n\n### `Observable``(store)`\n\nDefined by [dojo/store/Observable](../store/observable)\n\nThe Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes.\n\nObservable wraps an existing store so that notifications can be made when a query is performed.\n\n|           |                                            |             |\n|-----------|--------------------------------------------|-------------|\n| Parameter | Type                                       | Description |\n| store     | [dojo/store/api/Store](../store/api/store) |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a Memory store that returns an observable query, and then log some information about that query.\n\n``` javascript\nvar store = Observable(new Memory({\n    data: [\n        {id: 1, name: \"one\", prime: false},\n        {id: 2, name: \"two\", even: true, prime: true},\n        {id: 3, name: \"three\", prime: true},\n        {id: 4, name: \"four\", even: true, prime: false},\n        {id: 5, name: \"five\", prime: true}\n    ]\n}));\nvar changes = [], results = store.query({ prime: true });\nvar observer = results.observe(function(object, previousIndex, newIndex){\n    changes.push({previousIndex:previousIndex, newIndex:newIndex, object:object});\n});\n```\n\nSee the Observable tests for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.store.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.store.html)"
- name: _base/kernel.store#Cache()
  id: dojo/_base/kernel.store#1_10dojo__base_kernel_store_Cache
  summary: null
  belongs_to: _base/kernel.store
  description: |-
    ### `Cache` `(masterStore,cachingStore,options)`

    Defined by [dojo/store/Cache](../store/cache)

    |              |           |             |
    |--------------|-----------|-------------|
    | Parameter    | Type      | Description |
    | masterStore  | undefined |             |
    | cachingStore | undefined |             |
    | options      | undefined |             |

    **Returns:** undefined
- name: _base/kernel.store#DataStore()
  id: dojo/_base/kernel.store#1_10dojo__base_kernel_store_DataStore
  summary: null
  belongs_to: _base/kernel.store
  description: |-
    ### `DataStore` `()`

    Defined by [dojo/store/DataStore](../store/datastore)
- name: _base/kernel.store#JsonRest()
  id: dojo/_base/kernel.store#1_10dojo__base_kernel_store_JsonRest
  summary: null
  belongs_to: _base/kernel.store
  description: |-
    ### `JsonRest` `()`

    Defined by [dojo/store/JsonRest](../store/jsonrest)
- name: _base/kernel.store#Memory()
  id: dojo/_base/kernel.store#1_10dojo__base_kernel_store_Memory
  summary: null
  belongs_to: _base/kernel.store
  description: |-
    ### `Memory` `()`

    Defined by [dojo/store/Memory](../store/memory)
- name: _base/kernel.store#Observable()
  id: dojo/_base/kernel.store#1_10dojo__base_kernel_store_Observable
  summary: The Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes
  belongs_to: _base/kernel.store
  description: "### `Observable` `(store)`\n\nDefined by [dojo/store/Observable](../store/observable)\n\nThe Observable store wrapper takes a store and sets an observe method on query() results that can be used to monitor results for changes.\n\nObservable wraps an existing store so that notifications can be made when a query is performed.\n\n|           |                                            |             |\n|-----------|--------------------------------------------|-------------|\n| Parameter | Type                                       | Description |\n| store     | [dojo/store/api/Store](../store/api/store) |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nCreate a Memory store that returns an observable query, and then log some information about that query.\n\n``` javascript\n      var store = Observable(new Memory({\n    data: [\n        {id: 1, name: \"one\", prime: false},\n        {id: 2, name: \"two\", even: true, prime: true},\n        {id: 3, name: \"three\", prime: true},\n        {id: 4, name: \"four\", even: true, prime: false},\n        {id: 5, name: \"five\", prime: true}\n    ]\n}));\nvar changes = [], results = store.query({ prime: true });\nvar observer = results.observe(function(object, previousIndex, newIndex){\n    changes.push({previousIndex:previousIndex, newIndex:newIndex, object:object});\n});\n    \n```\n\nSee the Observable tests for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.store.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.store.html)"
- name: _base/kernel.store#util
  id: dojo/_base/kernel.store#1_10dojo__base_kernel_store_util
  summary: null
  belongs_to: _base/kernel.store
  description: |-
    ### util

    Defined by: [dojo/store/util/QueryResults](../store/util/queryresults)

    ## Methods
- name: _base/kernel.string
  id: dojo/_base/kernel.string
  summary: Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, <, >, ", ', and / characters
  description: "# dojo/\\_base/kernel.string\n\n## Summary\n\nString utilities for Dojo\n\n## Methods\n\n### `escape``(str)`\n\nDefined by [dojo/string](../string)\n\nEfficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, \\<, \\>, \", ', and / characters.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | the string to escape |\n\n### `pad``(text,size,ch,end)`\n\nDefined by [dojo/string](../string)\n\nPad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n// Fill the string to length 10 with \"+\" characters on the right.  Yields \"Dojo++++++\".\nstring.pad(\"Dojo\", 10, \"+\", true);\n```\n\n### `rep``(str,num)`\n\nDefined by [dojo/string](../string)\n\nEfficiently replicate a string `n` times.\n\n|           |         |                                         |\n|-----------|---------|-----------------------------------------|\n| Parameter | Type    | Description                             |\n| str       | String  | the string to replicate                 |\n| num       | Integer | number of times to replicate the string |\n\n**Returns:** string \\| undefined\n\n### `substitute``(template,map,transform,thisObject)`\n\nDefined by [dojo/string](../string)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nSubstitutes two expressions in a string from an Array or Object\n\n``` javascript\n// returns \"File 'foo.html' is not found in directory '/temp'.\"\n// by providing substitution data in an Array\nstring.substitute(\n    \"File '${0}' is not found in directory '${1}'.\",\n    [\"foo.html\",\"/temp\"]\n);\n\n// also returns \"File 'foo.html' is not found in directory '/temp'.\"\n// but provides substitution data in an Object structure.  Dotted\n// notation may be used to traverse the structure.\nstring.substitute(\n    \"File '${name}' is not found in directory '${info.dir}'.\",\n    { name: \"foo.html\", info: { dir: \"/temp\" } }\n);\n```\n\n### Example 2\n\nUse a transform function to modify the values:\n\n``` javascript\n// returns \"file 'foo.html' is not found in directory '/temp'.\"\nstring.substitute(\n    \"${0} is not found in ${1}.\",\n    [\"foo.html\",\"/temp\"],\n    function(str){\n        // try to figure out the type\n        var prefix = (str.charAt(0) == \"/\") ? \"directory\": \"file\";\n        return prefix + \" '\" + str + \"'\";\n    }\n);\n```\n\n### Example 3\n\nUse a formatter\n\n``` javascript\n// returns \"thinger -- howdy\"\nstring.substitute(\n    \"${0:postfix}\", [\"thinger\"], null, {\n        postfix: function(value, key){\n            return value + \" -- howdy\";\n        }\n    }\n);\n```\n\n### `trim``(str)`\n\nDefined by [dojo/string](../string)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript). The short yet performant version of this function is [dojo/\\_base/lang.trim()](lang#trim), which is part of Dojo base. Uses String.prototype.trim instead, if available.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String \\| string\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.string.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.string.html)"
- name: _base/kernel.string#escape()
  id: dojo/_base/kernel.string#1_10dojo__base_kernel_string_escape
  summary: Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, <, >, ", ', and / characters
  belongs_to: _base/kernel.string
  description: |-
    ### `escape` `(str)`

    Defined by [dojo/string](../string)

    Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, \<, \>, ", ', and / characters.

    |           |        |                      |
    |-----------|--------|----------------------|
    | Parameter | Type   | Description          |
    | str       | String | the string to escape |
- name: _base/kernel.string#pad()
  id: dojo/_base/kernel.string#1_10dojo__base_kernel_string_pad
  summary: Pad a string to guarantee that it is at least size length by filling with the character ch at either the start or end of the string
  belongs_to: _base/kernel.string
  description: "### `pad` `(text,size,ch,end)`\n\nDefined by [dojo/string](../string)\n\nPad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default.\n\n[TABLE]\n\n**Returns:** number\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // Fill the string to length 10 with \"+\" characters on the right.  Yields \"Dojo++++++\".\nstring.pad(\"Dojo\", 10, \"+\", true);\n    \n```"
- name: _base/kernel.string#rep()
  id: dojo/_base/kernel.string#1_10dojo__base_kernel_string_rep
  summary: Efficiently replicate a string n times
  belongs_to: _base/kernel.string
  description: |-
    ### `rep` `(str,num)`

    Defined by [dojo/string](../string)

    Efficiently replicate a string `n` times.

    |           |         |                                         |
    |-----------|---------|-----------------------------------------|
    | Parameter | Type    | Description                             |
    | str       | String  | the string to replicate                 |
    | num       | Integer | number of times to replicate the string |

    **Returns:** string \| undefined
- name: _base/kernel.string#substitute()
  id: dojo/_base/kernel.string#1_10dojo__base_kernel_string_substitute
  summary: Performs parameterized substitutions on a string
  belongs_to: _base/kernel.string
  description: "### `substitute` `(template,map,transform,thisObject)`\n\nDefined by [dojo/string](../string)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nSubstitutes two expressions in a string from an Array or Object\n\n``` javascript\n      // returns \"File 'foo.html' is not found in directory '/temp'.\"\n// by providing substitution data in an Array\nstring.substitute(\n    \"File '${0}' is not found in directory '${1}'.\",\n    [\"foo.html\",\"/temp\"]\n);\n\n// also returns \"File 'foo.html' is not found in directory '/temp'.\"\n// but provides substitution data in an Object structure.  Dotted\n// notation may be used to traverse the structure.\nstring.substitute(\n    \"File '${name}' is not found in directory '${info.dir}'.\",\n    { name: \"foo.html\", info: { dir: \"/temp\" } }\n);\n    \n```\n\n### Example 2\n\nUse a transform function to modify the values:\n\n``` javascript\n      // returns \"file 'foo.html' is not found in directory '/temp'.\"\nstring.substitute(\n    \"${0} is not found in ${1}.\",\n    [\"foo.html\",\"/temp\"],\n    function(str){\n        // try to figure out the type\n        var prefix = (str.charAt(0) == \"/\") ? \"directory\": \"file\";\n        return prefix + \" '\" + str + \"'\";\n    }\n);\n    \n```\n\n### Example 3\n\nUse a formatter\n\n``` javascript\n      // returns \"thinger -- howdy\"\nstring.substitute(\n    \"${0:postfix}\", [\"thinger\"], null, {\n        postfix: function(value, key){\n            return value + \" -- howdy\";\n        }\n    }\n);\n    \n```"
- name: _base/kernel.string#trim()
  id: dojo/_base/kernel.string#1_10dojo__base_kernel_string_trim
  summary: This version of trim() was taken from Steven Levithan's blog
  belongs_to: _base/kernel.string
  description: "### `trim` `(str)`\n\nDefined by [dojo/string](../string)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript). The short yet performant version of this function is [dojo/\\_base/lang.trim()](lang#trim), which is part of Dojo base. Uses String.prototype.trim instead, if available.\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String \\| string\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.string.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.string.html)"
- name: _base/kernel.tests
  id: dojo/_base/kernel.tests
  summary: D.O.H
  description: "# dojo/\\_base/kernel.tests\n\n## Summary\n\nD.O.H. Test files for Dojo unit testing.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.tests.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.tests.html)"
- name: _base/kernel.touch
  id: dojo/_base/kernel.touch
  summary: This module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop
  description: "# dojo/\\_base/kernel.touch\n\n## Summary\n\nThis module provides unified touch event handlers by exporting press, move, release and cancel which can also run well on desktop. Based on <http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html> Also, if the dojoClick property is set to truthy on a DOM node, [dojo/touch](../touch) generates click events immediately for this node and its descendants (except for descendants that have a dojoClick property set to falsy), to avoid the delay before native browser click events, and regardless of whether evt.preventDefault() was called in a touch.press event listener.\n\n## Examples\n\n### Example 1\n\nUsed with dojo/on\n\n``` javascript\ndefine([\"dojo/on\", \"dojo/touch\"], function(on, touch){\n    on(node, touch.press, function(e){});\n    on(node, touch.move, function(e){});\n    on(node, touch.release, function(e){});\n    on(node, touch.cancel, function(e){});\n```\n\n### Example 2\n\nUsed with touch.\\* directly\n\n``` javascript\ntouch.press(node, function(e){});\ntouch.move(node, function(e){});\ntouch.release(node, function(e){});\ntouch.cancel(node, function(e){});\n```\n\n### Example 3\n\nHave dojo/touch generate clicks without delay, with a default move threshold of 4 pixels\n\n``` javascript\nnode.dojoClick = true;\n```\n\n### Example 4\n\nHave dojo/touch generate clicks without delay, with a move threshold of 10 pixels horizontally and vertically\n\n``` javascript\nnode.dojoClick = 10;\n```\n\n### Example 5\n\nHave dojo/touch generate clicks without delay, with a move threshold of 50 pixels horizontally and 10 pixels vertically\n\n``` javascript\nnode.dojoClick = {x:50, y:5};\n```\n\n### Example 6\n\nDisable clicks without delay generated by dojo/touch on a node that has an ancestor with property dojoClick set to truthy\n\n``` javascript\nnode.dojoClick = false;\n```\n\n## Methods\n\n### `cancel``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to 'touchcancel'\\|'mouseleave' for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `enter``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to mouse.enter or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `leave``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to mouse.leave or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `move``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener that fires when the mouse cursor or a finger is dragged over the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `out``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to 'mouseout' or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `over``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to 'mouseover' or touch equivalent for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `press``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to 'touchstart'\\|'mousedown' for the given node\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n### `release``(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to releasing the mouse button while the cursor is over the given node (i.e. \"mouseup\") or for removing the finger from the screen while touching the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.touch.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.touch.html)"
- name: _base/kernel.touch#cancel()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_cancel
  summary: null
  belongs_to: _base/kernel.touch
  description: |-
    ### `cancel` `(node,listener)`

    Defined by [dojo/touch](../touch)

    Register a listener to 'touchcancel'\|'mouseleave' for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: _base/kernel.touch#enter()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_enter
  summary: null
  belongs_to: _base/kernel.touch
  description: |-
    ### `enter` `(node,listener)`

    Defined by [dojo/touch](../touch)

    Register a listener to mouse.enter or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: _base/kernel.touch#leave()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_leave
  summary: null
  belongs_to: _base/kernel.touch
  description: |-
    ### `leave` `(node,listener)`

    Defined by [dojo/touch](../touch)

    Register a listener to mouse.leave or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: _base/kernel.touch#move()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_move
  summary: Register a listener that fires when the mouse cursor or a finger is dragged over the given node
  belongs_to: _base/kernel.touch
  description: |-
    ### `move` `(node,listener)`

    Defined by [dojo/touch](../touch)

    Register a listener that fires when the mouse cursor or a finger is dragged over the given node.

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: _base/kernel.touch#out()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_out
  summary: null
  belongs_to: _base/kernel.touch
  description: |-
    ### `out` `(node,listener)`

    Defined by [dojo/touch](../touch)

    Register a listener to 'mouseout' or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: _base/kernel.touch#over()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_over
  summary: null
  belongs_to: _base/kernel.touch
  description: |-
    ### `over` `(node,listener)`

    Defined by [dojo/touch](../touch)

    Register a listener to 'mouseover' or touch equivalent for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: _base/kernel.touch#press()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_press
  summary: null
  belongs_to: _base/kernel.touch
  description: |-
    ### `press` `(node,listener)`

    Defined by [dojo/touch](../touch)

    Register a listener to 'touchstart'\|'mousedown' for the given node

    |           |          |                          |
    |-----------|----------|--------------------------|
    | Parameter | Type     | Description              |
    | node      | Dom      | Target node to listen to |
    | listener  | Function | Callback function        |

    **Returns:** any

    A handle which will be used to remove the listener by handle.remove()
- name: _base/kernel.touch#release()
  id: dojo/_base/kernel.touch#1_10dojo__base_kernel_touch_release
  summary: Register a listener to releasing the mouse button while the cursor is over the given node (i.e
  belongs_to: _base/kernel.touch
  description: "### `release` `(node,listener)`\n\nDefined by [dojo/touch](../touch)\n\nRegister a listener to releasing the mouse button while the cursor is over the given node (i.e. \"mouseup\") or for removing the finger from the screen while touching the given node.\n\n|           |          |                          |\n|-----------|----------|--------------------------|\n| Parameter | Type     | Description              |\n| node      | Dom      | Target node to listen to |\n| listener  | Function | Callback function        |\n\n**Returns:** any\n\nA handle which will be used to remove the listener by handle.remove()\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.touch.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.touch.html)"
- name: _base/kernel.version
  id: dojo/_base/kernel.version
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.version\n\n## Summary\n\nVersion number of the Dojo Toolkit\n\nHash about the version, including\n\n- major: Integer: Major version. If total version is \"1.2.0beta1\", will be 1\n- minor: Integer: Minor version. If total version is \"1.2.0beta1\", will be 2\n- patch: Integer: Patch version. If total version is \"1.2.0beta1\", will be 0\n- flag: String: Descriptor flag. If total version is \"1.2.0beta1\", will be \"beta1\"\n- revision: Number: The Git rev from which dojo was pulled\n\n## Properties\n\n### flag\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### major\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### minor\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### patch\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n### revision\n\nDefined by: [dojo/\\_base/kernel](kernel)\n\n## Methods\n\n### `toString``()`\n\nDefined by [dojo/\\_base/kernel](kernel)\n\n**Returns:** string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.version.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.version.html)"
- name: _base/kernel.window
  id: dojo/_base/kernel.window
  summary: Get window object associated with document doc
  description: "# dojo/\\_base/kernel.window\n\n## Summary\n\nTODOC\n\n## Methods\n\n### `get``(doc)`\n\nDefined by [dojo/window](../window)\n\nGet window object associated with document doc.\n\n|           |          |                                                |\n|-----------|----------|------------------------------------------------|\n| Parameter | Type     | Description                                    |\n| doc       | Document | The document to get the associated window for. |\n\n**Returns:** undefined\n\n### `getBox``(doc)`\n\nDefined by [dojo/window](../window)\n\nReturns the dimensions and scroll position of the viewable area of a browser window\n\n[TABLE]\n\n**Returns:** object\n\n### `scrollIntoView``(node,pos)`\n\nDefined by [dojo/window](../window)\n\nScroll the passed node into view using minimal movement, if it is not already.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.window.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.window.html)"
- name: _base/kernel.window#get()
  id: dojo/_base/kernel.window#1_10dojo__base_kernel_window_get
  summary: Get window object associated with document doc
  belongs_to: _base/kernel.window
  description: |-
    ### `get` `(doc)`

    Defined by [dojo/window](../window)

    Get window object associated with document doc.

    |           |          |                                                |
    |-----------|----------|------------------------------------------------|
    | Parameter | Type     | Description                                    |
    | doc       | Document | The document to get the associated window for. |

    **Returns:** undefined
- name: _base/kernel.window#getBox()
  id: dojo/_base/kernel.window#1_10dojo__base_kernel_window_getBox
  summary: null
  belongs_to: _base/kernel.window
  description: |-
    ### `getBox` `(doc)`

    Defined by [dojo/window](../window)

    Returns the dimensions and scroll position of the viewable area of a browser window

    [TABLE]

    **Returns:** object
- name: _base/kernel.window#scrollIntoView()
  id: dojo/_base/kernel.window#1_10dojo__base_kernel_window_scrollIntoView
  summary: Scroll the passed node into view using minimal movement, if it is not already
  belongs_to: _base/kernel.window
  description: "### `scrollIntoView` `(node,pos)`\n\nDefined by [dojo/window](../window)\n\nScroll the passed node into view using minimal movement, if it is not already.\n\n[TABLE]\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.window.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.window.html)"
- name: _base/kernel._contentHandlers
  id: dojo/_base/kernel._contenthandlers
  summary: A map of available XHR transport handle types
  description: "# dojo/\\_base/kernel.\\_contentHandlers\n\n## Summary\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls. Each contentHandler is called, passing the xhr object for manipulation. The return value from the contentHandler will be passed to the `load` or `handle` functions defined in the original xhr call.\n\n## Examples\n\n### Example 1\n\nCreating a custom content-handler:\n\n``` javascript\nxhr.contentHandlers.makeCaps = function(xhr){\n    return xhr.responseText.toUpperCase();\n}\n// and later:\ndojo.xhrGet({\n    url:\"foo.txt\",\n    handleAs:\"makeCaps\",\n    load: function(data){ /* data is a toUpper version of foo.txt */ }\n});\n```\n\n## Methods\n\n### `auto``(xhr)`\n\nDefined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n### `javascript``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which evaluates the response data, expecting it to be valid JavaScript\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which returns a JavaScript object created from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-filtered``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which expects comment-filtered JSON.\n\nA contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent \"JavaScript Hijacking\", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.\n\nWill throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your \"JSON\" with: {}&&\n\nuse djConfig.useCommentedJson = true to turn off the notice\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-optional``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `text``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which simply returns the plaintext response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `xml``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel._contentHandlers.html)"
- name: _base/kernel._contentHandlers#auto()
  id: dojo/_base/kernel._contenthandlers#1_10dojo__base_kernel__contentHandlers_auto
  summary: null
  belongs_to: _base/kernel._contentHandlers
  description: |-
    ### `auto` `(xhr)`

    Defined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |
- name: _base/kernel._contentHandlers#javascript()
  id: dojo/_base/kernel._contenthandlers#1_10dojo__base_kernel__contentHandlers_javascript
  summary: null
  belongs_to: _base/kernel._contentHandlers
  description: |-
    ### `javascript` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which evaluates the response data, expecting it to be valid JavaScript

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel._contentHandlers#json()
  id: dojo/_base/kernel._contenthandlers#1_10dojo__base_kernel__contentHandlers_json
  summary: null
  belongs_to: _base/kernel._contentHandlers
  description: |-
    ### `json` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which returns a JavaScript object created from the response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel._contentHandlers#json-comment-filtered()
  id: dojo/_base/kernel._contenthandlers#1_10dojo__base_kernel__contentHandlers_json-comment-filtered
  summary: A contentHandler which expects comment-filtered JSON
  belongs_to: _base/kernel._contentHandlers
  description: |-
    ### `json-comment-filtered` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which expects comment-filtered JSON.

    A contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent "JavaScript Hijacking", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.

    Will throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your "JSON" with: {}&&

    use djConfig.useCommentedJson = true to turn off the notice

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel._contentHandlers#json-comment-optional()
  id: dojo/_base/kernel._contenthandlers#1_10dojo__base_kernel__contentHandlers_json-comment-optional
  summary: A contentHandler which checks the presence of comment-filtered JSON and alternates between the json and json-comment-filtered contentHandlers
  belongs_to: _base/kernel._contentHandlers
  description: |-
    ### `json-comment-optional` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel._contentHandlers#text()
  id: dojo/_base/kernel._contenthandlers#1_10dojo__base_kernel__contentHandlers_text
  summary: null
  belongs_to: _base/kernel._contentHandlers
  description: |-
    ### `text` `(xhr)`

    Defined by [dojo/\_base/xhr](xhr)

    A contentHandler which simply returns the plaintext response data

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | xhr       | undefined |             |

    **Returns:** undefined
- name: _base/kernel._contentHandlers#xml()
  id: dojo/_base/kernel._contenthandlers#1_10dojo__base_kernel__contentHandlers_xml
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/kernel._contentHandlers
  description: "### `xml` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel._contentHandlers.html)"
- name: _base/kernel._hasResource
  id: dojo/_base/kernel._hasresource
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.\\_hasResource\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_hasResource.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel._hasResource.html)"
- name: _base/kernel._nodeDataCache
  id: dojo/_base/kernel._nodedatacache
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/kernel.\\_nodeDataCache\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_nodeDataCache.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel._nodeDataCache.html)"
- name: _base/kernel.__IoArgs
  id: dojo/_base/kernel.__ioargs
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/\\_base/kernel.\\_\\_IoArgs\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new kernel.__IoArgs()`\n\n## Properties\n\n### content\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nContains properties with string values. These properties will be serialized as name1=value2 and passed in the request.\n\n### form\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nDOM node for a form. Used to extract the form values and send to the server.\n\n### handleAs\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nAcceptable values depend on the type of IO transport (see specific IO calls for more information).\n\n### ioPublish\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nSet this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](../topic#publish) for different phases of an IO operation. See [dojo/main.\\_\\_IoPublish](../main.__iopublish) for a list of topics that are published.\n\n### preventCache\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nDefault is false. If true, then a \"dojo.preventCache\" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.\n\n### rawBody\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nSets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\\_base/xhr.rawXhrPost](xhr#rawXhrPost) and [dojo/\\_base/xhr.rawXhrPut](xhr#rawXhrPut) respectively.\n\n### timeout\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nMilliseconds to wait for the response. If this time passes, the then error callbacks are called.\n\n### url\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nURL to server endpoint.\n\n## Methods\n\n### `error``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.\n\n|           |                                                          |                                                      |\n|-----------|----------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                     | Description                                          |\n| response  | Object                                                   | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |\n\n### `handle``(loadOrError,response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called at the end of every request, whether or not an error occurs.\n\n|             |                                                          |                                                                                                                 |\n|-------------|----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|\n| Parameter   | Type                                                     | Description                                                                                                     |\n| loadOrError | String                                                   | Provides a string that tells you whether this function was called because of success (load) or failure (error). |\n| response    | Object                                                   | The response in the format as defined with handleAs.                                                            |\n| ioArgs      | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.                                                              |\n\n### `load``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                          |                                                      |\n|-----------|----------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                     | Description                                          |\n| response  | Object                                                   | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_\\_IoArgs.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.__IoArgs.html)"
- name: _base/kernel.__IoArgs#content
  id: dojo/_base/kernel.__ioargs#1_10dojo__base_kernel___IoArgs_content
  summary: Contains properties with string values
  belongs_to: _base/kernel.__IoArgs
  description: |-
    ### content

    Defined by: [dojo/\_base/xhr](xhr)

    Contains properties with string values. These properties will be serialized as name1=value2 and passed in the request.

    ### form

    Defined by: [dojo/\_base/xhr](xhr)

    DOM node for a form. Used to extract the form values and send to the server.

    ### handleAs

    Defined by: [dojo/\_base/xhr](xhr)

    Acceptable values depend on the type of IO transport (see specific IO calls for more information).

    ### ioPublish

    Defined by: [dojo/\_base/xhr](xhr)

    Set this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](../topic#publish) for different phases of an IO operation. See [dojo/main.\_\_IoPublish](../main.__iopublish) for a list of topics that are published.

    ### preventCache

    Defined by: [dojo/\_base/xhr](xhr)

    Default is false. If true, then a "dojo.preventCache" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.

    ### rawBody

    Defined by: [dojo/\_base/xhr](xhr)

    Sets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\_base/xhr.rawXhrPost](xhr#rawXhrPost) and [dojo/\_base/xhr.rawXhrPut](xhr#rawXhrPut) respectively.

    ### timeout

    Defined by: [dojo/\_base/xhr](xhr)

    Milliseconds to wait for the response. If this time passes, the then error callbacks are called.

    ### url

    Defined by: [dojo/\_base/xhr](xhr)

    URL to server endpoint.

    ## Methods
- name: _base/kernel.__IoArgs#error()
  id: dojo/_base/kernel.__ioargs#1_10dojo__base_kernel___IoArgs_error
  summary: This function will be called when the request fails due to a network or server error, the url is invalid, etc
  belongs_to: _base/kernel.__IoArgs
  description: |-
    ### `error` `(response,ioArgs)`

    Defined by [dojo/\_base/xhr](xhr)

    This function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.

    |           |                                                          |                                                      |
    |-----------|----------------------------------------------------------|------------------------------------------------------|
    | Parameter | Type                                                     | Description                                          |
    | response  | Object                                                   | The response in the format as defined with handleAs. |
    | ioArgs    | [dojo/main.\_\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |
- name: _base/kernel.__IoArgs#handle()
  id: dojo/_base/kernel.__ioargs#1_10dojo__base_kernel___IoArgs_handle
  summary: This function will be called at the end of every request, whether or not an error occurs
  belongs_to: _base/kernel.__IoArgs
  description: |-
    ### `handle` `(loadOrError,response,ioArgs)`

    Defined by [dojo/\_base/xhr](xhr)

    This function will be called at the end of every request, whether or not an error occurs.

    |             |                                                          |                                                                                                                 |
    |-------------|----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|
    | Parameter   | Type                                                     | Description                                                                                                     |
    | loadOrError | String                                                   | Provides a string that tells you whether this function was called because of success (load) or failure (error). |
    | response    | Object                                                   | The response in the format as defined with handleAs.                                                            |
    | ioArgs      | [dojo/main.\_\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.                                                              |
- name: _base/kernel.__IoArgs#load()
  id: dojo/_base/kernel.__ioargs#1_10dojo__base_kernel___IoArgs_load
  summary: This function will be called on a successful HTTP response code
  belongs_to: _base/kernel.__IoArgs
  description: "### `load` `(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                          |                                                      |\n|-----------|----------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                     | Description                                          |\n| response  | Object                                                   | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_\\_IoArgs.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.__IoArgs.html)"
- name: _base/kernel.__IoCallbackArgs
  id: dojo/_base/kernel.__iocallbackargs
  summary: 'Note: This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s)'
  description: "# dojo/\\_base/kernel.\\_\\_IoCallbackArgs\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new kernel.__IoCallbackArgs()`\n\n## Properties\n\n### args\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nthe original object argument to the IO call.\n\n### canDelete\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nFor [dojo/io/script](../io/script) calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests.\n\n### handleAs\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nThe final indicator on how the response will be handled.\n\n### id\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nFor [dojo/io/script](../io/script) calls only, the internal script ID used for the request.\n\n### json\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nFor [dojo/io/script](../io/script) calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly.\n\n### query\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nFor non-GET requests, the name1=value1&name2=value2 parameters sent up in the request.\n\n### url\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nThe final URL used for the call. Many times it will be different than the original args.url value.\n\n### xhr\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nFor XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_\\_IoCallbackArgs.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.__IoCallbackArgs.html)"
- name: _base/kernel.__IoCallbackArgs#args
  id: dojo/_base/kernel.__iocallbackargs#1_10dojo__base_kernel___IoCallbackArgs_args
  summary: the original object argument to the IO call
  belongs_to: _base/kernel.__IoCallbackArgs
  description: |-
    ### args

    Defined by: [dojo/\_base/xhr](xhr)

    the original object argument to the IO call.

    ### canDelete

    Defined by: [dojo/\_base/xhr](xhr)

    For [dojo/io/script](../io/script) calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests.

    ### handleAs

    Defined by: [dojo/\_base/xhr](xhr)

    The final indicator on how the response will be handled.

    ### id

    Defined by: [dojo/\_base/xhr](xhr)

    For [dojo/io/script](../io/script) calls only, the internal script ID used for the request.
- name: _base/kernel.__IoCallbackArgs#json
  id: dojo/_base/kernel.__iocallbackargs#1_10dojo__base_kernel___IoCallbackArgs_json
  summary: 'For dojo/io/script calls only: holds the JSON response for JSONP-type requests'
  belongs_to: _base/kernel.__IoCallbackArgs
  description: |-
    ### json

    Defined by: [dojo/\_base/xhr](xhr)

    For [dojo/io/script](../io/script) calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly.

    ### query

    Defined by: [dojo/\_base/xhr](xhr)

    For non-GET requests, the name1=value1&name2=value2 parameters sent up in the request.

    ### url

    Defined by: [dojo/\_base/xhr](xhr)

    The final URL used for the call. Many times it will be different than the original args.url value.
- name: _base/kernel.__IoCallbackArgs#xhr
  id: dojo/_base/kernel.__iocallbackargs#1_10dojo__base_kernel___IoCallbackArgs_xhr
  summary: For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request
  belongs_to: _base/kernel.__IoCallbackArgs
  description: "### xhr\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nFor XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_\\_IoCallbackArgs.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.__IoCallbackArgs.html)"
- name: _base/kernel.__IoPublish
  id: dojo/_base/kernel.__iopublish
  summary: This is a list of IO topics that can be published if djConfig.ioPublish is set to true
  description: "# dojo/\\_base/kernel.\\_\\_IoPublish\n\n## Summary\n\nThis is a list of IO topics that can be published if djConfig.ioPublish is set to true. IO topics can be published for any Input/Output, network operation. So, dojo.xhr, dojo.io.script and dojo.io.iframe can all trigger these topics to be published.\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new kernel.__IoPublish()`\n\n## Properties\n\n### done\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\n\"/dojo/io/done\" is sent whenever an IO request has completed, either by loading or by erroring. It passes the error and the dojo.Deferred for the request with the topic.\n\n### error\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\n\"/dojo/io/error\" is sent whenever an IO request has errored. It passes the error and the dojo.Deferred for the request with the topic.\n\n### load\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\n\"/dojo/io/load\" is sent whenever an IO request has loaded successfully. It passes the response and the dojo.Deferred for the request with the topic.\n\n### send\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\n\"/dojo/io/send\" is sent whenever a new IO request is started. It passes the dojo.Deferred for the request with the topic.\n\n### start\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\n\"/dojo/io/start\" is sent when there are no outstanding IO requests, and a new IO request is started. No arguments are passed with this topic.\n\n### stop\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\n\"/dojo/io/stop\" is sent when all outstanding IO requests have finished. No arguments are passed with this topic.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_\\_IoPublish.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.__IoPublish.html)"
- name: _base/kernel.__XhrArgs
  id: dojo/_base/kernel.__xhrargs
  summary: In addition to the properties listed for the dojo._IoArgs type, the following properties are allowed for dojo.xhr* methods
  description: "# dojo/\\_base/kernel.\\_\\_XhrArgs\n\n## Summary\n\nIn addition to the properties listed for the dojo.\\_IoArgs type, the following properties are allowed for dojo.xhr\\* methods.\n\n**Note:** This is not a real constructor, but just a description of the type of object that should be passed as a parameter to some method(s), and/or the return value from some method(s). In other words, the type exists only for documentation purposes, and you **cannot** call `new kernel.__XhrArgs()`\n\n## Properties\n\n### content\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nContains properties with string values. These properties will be serialized as name1=value2 and passed in the request.\n\n### contentType\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\n\"application/x-www-form-urlencoded\" is default. Set to false to prevent a Content-Type header from being sent, or to a string to send a different Content-Type.\n\n### failOk\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nfalse is default. Indicates whether a request should be allowed to fail (and therefore no console error message in the event of a failure)\n\n### form\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nDOM node for a form. Used to extract the form values and send to the server.\n\n### handleAs\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nAcceptable values are: text (default), json, json-comment-optional, json-comment-filtered, javascript, xml. See [dojo/\\_base/xhr.contentHandlers](xhr.contenthandlers)\n\n### headers\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nAdditional HTTP headers to send in the request.\n\n### ioPublish\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nSet this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](../topic#publish) for different phases of an IO operation. See [dojo/main.\\_\\_IoPublish](../main.__iopublish) for a list of topics that are published.\n\n### preventCache\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nDefault is false. If true, then a \"dojo.preventCache\" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.\n\n### rawBody\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nSets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\\_base/xhr.rawXhrPost](xhr#rawXhrPost) and [dojo/\\_base/xhr.rawXhrPut](xhr#rawXhrPut) respectively.\n\n### sync\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nfalse is default. Indicates whether the request should be a synchronous (blocking) request.\n\n### timeout\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nMilliseconds to wait for the response. If this time passes, the then error callbacks are called.\n\n### url\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nURL to server endpoint.\n\n## Methods\n\n### `error``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.\n\n|           |                                                          |                                                      |\n|-----------|----------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                     | Description                                          |\n| response  | Object                                                   | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |\n\n### `handle``(loadOrError,response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called at the end of every request, whether or not an error occurs.\n\n|             |                                                          |                                                                                                                 |\n|-------------|----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|\n| Parameter   | Type                                                     | Description                                                                                                     |\n| loadOrError | String                                                   | Provides a string that tells you whether this function was called because of success (load) or failure (error). |\n| response    | Object                                                   | The response in the format as defined with handleAs.                                                            |\n| ioArgs      | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.                                                              |\n\n### `load``(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                          |                                                      |\n|-----------|----------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                     | Description                                          |\n| response  | Object                                                   | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_\\_XhrArgs.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.__XhrArgs.html)"
- name: _base/kernel.__XhrArgs#content
  id: dojo/_base/kernel.__xhrargs#1_10dojo__base_kernel___XhrArgs_content
  summary: Contains properties with string values
  belongs_to: _base/kernel.__XhrArgs
  description: |-
    ### content

    Defined by: [dojo/\_base/xhr](xhr)

    Contains properties with string values. These properties will be serialized as name1=value2 and passed in the request.

    ### contentType

    Defined by: [dojo/\_base/xhr](xhr)

    "application/x-www-form-urlencoded" is default. Set to false to prevent a Content-Type header from being sent, or to a string to send a different Content-Type.

    ### failOk

    Defined by: [dojo/\_base/xhr](xhr)

    false is default. Indicates whether a request should be allowed to fail (and therefore no console error message in the event of a failure)

    ### form

    Defined by: [dojo/\_base/xhr](xhr)

    DOM node for a form. Used to extract the form values and send to the server.

    ### handleAs

    Defined by: [dojo/\_base/xhr](xhr)

    Acceptable values are: text (default), json, json-comment-optional, json-comment-filtered, javascript, xml. See [dojo/\_base/xhr.contentHandlers](xhr.contenthandlers)
- name: _base/kernel.__XhrArgs#error()
  id: dojo/_base/kernel.__xhrargs#1_10dojo__base_kernel___XhrArgs_error
  summary: This function will be called when the request fails due to a network or server error, the url is invalid, etc
  belongs_to: _base/kernel.__XhrArgs
  description: |-
    ### `error` `(response,ioArgs)`

    Defined by [dojo/\_base/xhr](xhr)

    This function will be called when the request fails due to a network or server error, the url is invalid, etc. It will also be called if the load or handle callback throws an exception, unless djConfig.debugAtAllCosts is true. This allows deployed applications to continue to run even when a logic error happens in the callback, while making it easier to troubleshoot while in debug mode.

    |           |                                                          |                                                      |
    |-----------|----------------------------------------------------------|------------------------------------------------------|
    | Parameter | Type                                                     | Description                                          |
    | response  | Object                                                   | The response in the format as defined with handleAs. |
    | ioArgs    | [dojo/main.\_\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |
- name: _base/kernel.__XhrArgs#handle()
  id: dojo/_base/kernel.__xhrargs#1_10dojo__base_kernel___XhrArgs_handle
  summary: This function will be called at the end of every request, whether or not an error occurs
  belongs_to: _base/kernel.__XhrArgs
  description: |-
    ### `handle` `(loadOrError,response,ioArgs)`

    Defined by [dojo/\_base/xhr](xhr)

    This function will be called at the end of every request, whether or not an error occurs.

    |             |                                                          |                                                                                                                 |
    |-------------|----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|
    | Parameter   | Type                                                     | Description                                                                                                     |
    | loadOrError | String                                                   | Provides a string that tells you whether this function was called because of success (load) or failure (error). |
    | response    | Object                                                   | The response in the format as defined with handleAs.                                                            |
    | ioArgs      | [dojo/main.\_\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.                                                              |
- name: _base/kernel.__XhrArgs#headers
  id: dojo/_base/kernel.__xhrargs#1_10dojo__base_kernel___XhrArgs_headers
  summary: Additional HTTP headers to send in the request
  belongs_to: _base/kernel.__XhrArgs
  description: |-
    ### headers

    Defined by: [dojo/\_base/xhr](xhr)

    Additional HTTP headers to send in the request.

    ### ioPublish

    Defined by: [dojo/\_base/xhr](xhr)

    Set this explicitly to false to prevent publishing of topics related to IO operations. Otherwise, if djConfig.ioPublish is set to true, topics will be published via [dojo/topic.publish()](../topic#publish) for different phases of an IO operation. See [dojo/main.\_\_IoPublish](../main.__iopublish) for a list of topics that are published.

    ### preventCache

    Defined by: [dojo/\_base/xhr](xhr)

    Default is false. If true, then a "dojo.preventCache" parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.

    ### rawBody

    Defined by: [dojo/\_base/xhr](xhr)

    Sets the raw body for an HTTP request. If this is used, then the content property is ignored. This is mostly useful for HTTP methods that have a body to their requests, like PUT or POST. This property can be used instead of postData and putData for [dojo/\_base/xhr.rawXhrPost](xhr#rawXhrPost) and [dojo/\_base/xhr.rawXhrPut](xhr#rawXhrPut) respectively.

    ### sync

    Defined by: [dojo/\_base/xhr](xhr)

    false is default. Indicates whether the request should be a synchronous (blocking) request.

    ### timeout

    Defined by: [dojo/\_base/xhr](xhr)

    Milliseconds to wait for the response. If this time passes, the then error callbacks are called.

    ### url

    Defined by: [dojo/\_base/xhr](xhr)

    URL to server endpoint.

    ## Methods
- name: _base/kernel.__XhrArgs#load()
  id: dojo/_base/kernel.__xhrargs#1_10dojo__base_kernel___XhrArgs_load
  summary: This function will be called on a successful HTTP response code
  belongs_to: _base/kernel.__XhrArgs
  description: "### `load` `(response,ioArgs)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nThis function will be called on a successful HTTP response code.\n\n|           |                                                          |                                                      |\n|-----------|----------------------------------------------------------|------------------------------------------------------|\n| Parameter | Type                                                     | Description                                          |\n| response  | Object                                                   | The response in the format as defined with handleAs. |\n| ioArgs    | [dojo/main.\\_\\_IoCallbackArgs](../main.__iocallbackargs) | Provides additional information about the request.   |\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/kernel.\\_\\_XhrArgs.html](http://dojotoolkit.org/api/1.10/dojo/_base/kernel.__XhrArgs.html)"
- name: _base/lang
  id: dojo/_base/lang
  summary: This module defines Javascript language extensions
  description: "# dojo/\\_base/lang\n\n## Summary\n\nThis module defines Javascript language extensions.\n\nSee the [dojo/\\_base/lang reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/lang.html) for more information.\n\n## Properties\n\n## Methods\n\n### `clone``(src)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nClones objects (including DOM nodes) and all children. Warning: do not clone cyclic structures.\n\n|           |          |                     |\n|-----------|----------|---------------------|\n| Parameter | Type     | Description         |\n| src       | anything | The object to clone |\n\n**Returns:** anything \\| undefined \\| instance\n\nThe object to clone\n\n### `delegate``(obj,props)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturns a new object which \"looks\" to obj for properties which it does not have a value for. Optionally takes a bag of properties to seed the returned object with initially.\n\nThis is a small implementation of the Boodman/Crockford delegation pattern in JavaScript. An intermediate object constructor mediates the prototype chain for the returned object, using it to delegate down to obj for property lookup when object-local lookup fails. This can be thought of similarly to ES4's \"wrap\", save that it does not act on types but rather on pure objects.\n\n|           |           |                                                                                               |\n|-----------|-----------|-----------------------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                                   |\n| obj       | Object    | The object to delegate to for properties not found directly on the return object or in props. |\n| props     | Object... | an object containing properties to assign to the returned object                              |\n\n**Returns:** any\n\nan Object of anonymous type\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar foo = { bar: \"baz\" };\nvar thinger = lang.delegate(foo, { thud: \"xyzzy\"});\nthinger.bar == \"baz\"; // delegated to foo\nfoo.thud == undefined; // by definition\nthinger.thud == \"xyzzy\"; // mixed in from props\nfoo.bar = \"thonk\";\nthinger.bar == \"thonk\"; // still delegated to foo's bar\n```\n\n### `exists``(name,obj)`\n\nDefined by [dojo/\\_base/lang](lang)\n\ndetermine if an object supports a given method\n\nuseful for longer api chains where you have to test each object in the chain. Useful for object and method detection.\n\n[TABLE]\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n// define an object\nvar foo = {\n      bar: { }\n};\n\n// search the global scope\nlang.exists(\"foo.bar\"); // true\nlang.exists(\"foo.bar.baz\"); // false\n\n// search from a particular scope\nlang.exists(\"bar\", foo); // true\nlang.exists(\"bar.baz\", foo); // false\n```\n\n### `extend``(ctor,props)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nAdds all properties and methods of props to constructor's prototype, making them available to all instances created with constructor.\n\n|           |        |                                                |\n|-----------|--------|------------------------------------------------|\n| Parameter | Type   | Description                                    |\n| ctor      | Object | Target constructor to extend.                  |\n| props     | Object | One or more objects to mix into ctor.prototype |\n\n**Returns:** Object\n\nTarget constructor to extend.\n\n### `getObject``(name,create,context)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nGet a property from a dot-separated string, such as \"A.B.C\"\n\nUseful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `hitch``(scope,method)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturns a function that will only ever execute in the given scope. This allows for easy use of object member functions in callbacks and other places in which the \"this\" keyword may otherwise not reference the expected scope. Any number of default positional arguments may be passed as parameters beyond \"method\". Each of these values will be used to \"placehold\" (similar to curry) for the hitched function.\n\n|           |                       |                                                                                                           |\n|-----------|-----------------------|-----------------------------------------------------------------------------------------------------------|\n| Parameter | Type                  | Description                                                                                               |\n| scope     | Object                | The scope to use when method executes. If method is a string, scope is also the object containing method. |\n| method    | Function \\| String... | A function to be hitched to scope, or the name of the method in scope to be hitched.                      |\n\n**Returns:** undefined \\| function\n\n## Examples\n\n### Example 1\n\n``` javascript\nlang.hitch(foo, \"bar\")();\n```\n\nruns foo.bar() in the scope of foo\n\n### Example 2\n\n``` javascript\nlang.hitch(foo, myFunction);\n```\n\nreturns a function that runs myFunction in the scope of foo\n\n### Example 3\n\nExpansion on the default positional arguments passed along from hitch. Passed args are mixed first, additional args after.\n\n``` javascript\nvar foo = { bar: function(a, b, c){ console.log(a, b, c); } };\nvar fn = lang.hitch(foo, \"bar\", 1, 2);\nfn(3); // logs \"1, 2, 3\"\n```\n\n### Example 4\n\n``` javascript\nvar foo = { bar: 2 };\nlang.hitch(foo, function(){ this.bar = 10; })();\n```\n\nexecute an anonymous function in scope of foo\n\n### `isAlien``(it)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturns true if it is a built-in function or some other kind of oddball that *should* report as a function but doesn't\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| it        | undefined |             |\n\n**Returns:** undefined\n\n### `isArray``(it)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturn true if it is an Array. Does not work on Arrays created in other windows.\n\n|           |          |               |\n|-----------|----------|---------------|\n| Parameter | Type     | Description   |\n| it        | anything | Item to test. |\n\n**Returns:** undefined\n\n### `isArrayLike``(it)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nsimilar to isArray() but more permissive\n\nDoesn't strongly test for \"arrayness\". Instead, settles for \"isn't a string or number and has a length property\". Arguments objects and DOM collections will return true when passed to isArrayLike(), but will return false when passed to isArray().\n\n|           |          |               |\n|-----------|----------|---------------|\n| Parameter | Type     | Description   |\n| it        | anything | Item to test. |\n\n**Returns:** any \\| Boolean\n\nIf it walks like a duck and quacks like a duck, return `true`\n\n### `isFunction``(it)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturn true if it is a Function\n\n|           |          |               |\n|-----------|----------|---------------|\n| Parameter | Type     | Description   |\n| it        | anything | Item to test. |\n\n**Returns:** boolean\n\n### `isObject``(it)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturns true if it is a JavaScript object (or an Array, a Function or null)\n\n|           |          |               |\n|-----------|----------|---------------|\n| Parameter | Type     | Description   |\n| it        | anything | Item to test. |\n\n**Returns:** boolean\n\n### `isString``(it)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturn true if it is a String\n\n|           |          |               |\n|-----------|----------|---------------|\n| Parameter | Type     | Description   |\n| it        | anything | Item to test. |\n\n**Returns:** boolean\n\n### `mixin``(dest,sources)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nCopies/adds all properties of one or more sources to dest; returns dest.\n\nAll properties, including functions (sometimes termed \"methods\"), excluding any non-standard extensions found in Object.prototype, are copied/added from sources to dest. sources are processed left to right. The Javascript assignment operator is used to copy/add each property; therefore, by default, mixin executes a so-called \"shallow copy\" and aggregate types are copied/added by reference.\n\n|           |           |                                                                                                                                                                                                                 |\n|-----------|-----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                                                                                                                                                     |\n| dest      | Object    | The object to which to copy/add all properties contained in source. If dest is falsy, then a new object is manufactured before copying/adding properties begins.                                                |\n| sources   | Object... | One of more objects from which to draw all properties to copy into dest. sources are processed left-to-right and if more than one of these objects contain the same property name, the right-most value \"wins\". |\n\n**Returns:** Object \\| object\n\ndest, as modified\n\n## Examples\n\n### Example 1\n\nmake a shallow copy of an object\n\n``` javascript\nvar copy = lang.mixin({}, source);\n```\n\n### Example 2\n\nmany class constructors often take an object which specifies values to be configured on the object. In this case, it is often simplest to call `lang.mixin` on the `this` object:\n\n``` javascript\ndeclare(\"acme.Base\", null, {\n    constructor: function(properties){\n        // property configuration:\n        lang.mixin(this, properties);\n\n        console.log(this.quip);\n        //  ...\n    },\n    quip: \"I wasn't born yesterday, you know - I've seen movies.\",\n    // ...\n});\n\n// create an instance of the class and configure it\nvar b = new acme.Base({quip: \"That's what it does!\" });\n```\n\n### Example 3\n\ncopy in properties from multiple objects\n\n``` javascript\nvar flattened = lang.mixin(\n    {\n        name: \"Frylock\",\n        braces: true\n    },\n    {\n        name: \"Carl Brutanananadilewski\"\n    }\n);\n\n// will print \"Carl Brutanananadilewski\"\nconsole.log(flattened.name);\n// will print \"true\"\nconsole.log(flattened.braces);\n```\n\n### `partial``(method)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nsimilar to hitch() except that the scope object is left to be whatever the execution context eventually becomes.\n\nCalling lang.partial is the functional equivalent of calling:\n\n``` javascript\nlang.hitch(null, funcName, ...);\n```\n\n|           |                    |                        |\n|-----------|--------------------|------------------------|\n| Parameter | Type               | Description            |\n| method    | Function \\| String | The function to \"wrap\" |\n\n**Returns:** undefined\n\n### `replace``(tmpl,map,pattern)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\nReturns the substituted string.\n\n## Examples\n\n### Example 1\n\n``` javascript\n// uses a dictionary for substitutions:\nlang.replace(\"Hello, {name.first} {name.last} AKA {nick}!\",\n    {\n        nick: \"Bob\",\n        name: {\n            first:  \"Robert\",\n            middle: \"X\",\n            last:       \"Cringely\"\n        }\n    });\n// returns: Hello, Robert Cringely AKA Bob!\n```\n\n### Example 2\n\n``` javascript\n// uses an array for substitutions:\nlang.replace(\"Hello, {0} {2}!\",\n    [\"Robert\", \"X\", \"Cringely\"]);\n// returns: Hello, Robert Cringely!\n```\n\n### Example 3\n\n``` javascript\n// uses a function for substitutions:\nfunction sum(a){\n    var t = 0;\n    arrayforEach(a, function(x){ t += x; });\n    return t;\n}\nlang.replace(\n    \"{count} payments averaging {avg} USD per payment.\",\n    lang.hitch(\n        { payments: [11, 16, 12] },\n        function(_, key){\n            switch(key){\n                case \"count\": return this.payments.length;\n                case \"min\":     return Math.min.apply(Math, this.payments);\n                case \"max\":     return Math.max.apply(Math, this.payments);\n                case \"sum\":     return sum(this.payments);\n                case \"avg\":     return sum(this.payments) / this.payments.length;\n            }\n        }\n    )\n);\n// prints: 3 payments averaging 13 USD per payment.\n```\n\n### Example 4\n\n``` javascript\n// uses an alternative PHP-like pattern for substitutions:\nlang.replace(\"Hello, ${0} ${2}!\",\n    [\"Robert\", \"X\", \"Cringely\"], /\\$\\{([^\\}]+)\\}/g);\n// returns: Hello, Robert Cringely!\n```\n\n### `setObject``(name,value,context)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nSet a property from a dot-separated string, such as \"A.B.C\"\n\nUseful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format. Objects are created as needed along `path`. Returns the passed value if setting is successful or `undefined` if not.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nset the value of `foo.bar.baz`, regardless of whether intermediate objects already exist:\n\n``` javascript\nlang.setObject(\"foo.bar.baz\", value);\n```\n\n### Example 2\n\nwithout `lang.setObject`, we often see code like this:\n\n``` javascript\n// ensure that intermediate objects are available\nif(!obj[\"parent\"]){ obj.parent = {}; }\nif(!obj.parent[\"child\"]){ obj.parent.child = {}; }\n// now we can safely set the property\nobj.parent.child.prop = \"some value\";\n```\n\nwhereas with `lang.setObject`, we can shorten that to:\n\n``` javascript\nlang.setObject(\"parent.child.prop\", \"some value\", obj);\n```\n\n### `trim``(str)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was selected for inclusion into the base due to its compact size and relatively good performance (see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript) Uses String.prototype.trim instead, if available. The fastest but longest version of this function is located at lang.string.trim()\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/lang.html](http://dojotoolkit.org/api/1.10/dojo/_base/lang.html)"
- name: _base/lang#clone()
  id: dojo/_base/lang#1_10dojo__base_lang_clone
  summary: Clones objects (including DOM nodes) and all children
  belongs_to: _base/lang
  description: |-
    ### `clone` `(src)`

    Defined by [dojo/\_base/lang](lang)

    Clones objects (including DOM nodes) and all children. Warning: do not clone cyclic structures.

    |           |          |                     |
    |-----------|----------|---------------------|
    | Parameter | Type     | Description         |
    | src       | anything | The object to clone |

    **Returns:** anything \| undefined \| instance

    The object to clone
- name: _base/lang#delegate()
  id: dojo/_base/lang#1_10dojo__base_lang_delegate
  summary: Returns a new object which "looks" to obj for properties which it does not have a value for
  belongs_to: _base/lang
  description: "### `delegate` `(obj,props)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturns a new object which \"looks\" to obj for properties which it does not have a value for. Optionally takes a bag of properties to seed the returned object with initially.\n\nThis is a small implementation of the Boodman/Crockford delegation pattern in JavaScript. An intermediate object constructor mediates the prototype chain for the returned object, using it to delegate down to obj for property lookup when object-local lookup fails. This can be thought of similarly to ES4's \"wrap\", save that it does not act on types but rather on pure objects.\n\n|           |           |                                                                                               |\n|-----------|-----------|-----------------------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                                   |\n| obj       | Object    | The object to delegate to for properties not found directly on the return object or in props. |\n| props     | Object... | an object containing properties to assign to the returned object                              |\n\n**Returns:** any\n\nan Object of anonymous type\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var foo = { bar: \"baz\" };\nvar thinger = lang.delegate(foo, { thud: \"xyzzy\"});\nthinger.bar == \"baz\"; // delegated to foo\nfoo.thud == undefined; // by definition\nthinger.thud == \"xyzzy\"; // mixed in from props\nfoo.bar = \"thonk\";\nthinger.bar == \"thonk\"; // still delegated to foo's bar\n    \n```"
- name: _base/lang#exists()
  id: dojo/_base/lang#1_10dojo__base_lang_exists
  summary: useful for longer api chains where you have to test each object in the chain
  belongs_to: _base/lang
  description: "### `exists` `(name,obj)`\n\nDefined by [dojo/\\_base/lang](lang)\n\ndetermine if an object supports a given method\n\nuseful for longer api chains where you have to test each object in the chain. Useful for object and method detection.\n\n[TABLE]\n\n**Returns:** boolean\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // define an object\nvar foo = {\n      bar: { }\n};\n\n// search the global scope\nlang.exists(\"foo.bar\"); // true\nlang.exists(\"foo.bar.baz\"); // false\n\n// search from a particular scope\nlang.exists(\"bar\", foo); // true\nlang.exists(\"bar.baz\", foo); // false\n    \n```"
- name: _base/lang#extend()
  id: dojo/_base/lang#1_10dojo__base_lang_extend
  summary: Adds all properties and methods of props to constructor's prototype, making them available to all instances created with constructor
  belongs_to: _base/lang
  description: |-
    ### `extend` `(ctor,props)`

    Defined by [dojo/\_base/lang](lang)

    Adds all properties and methods of props to constructor's prototype, making them available to all instances created with constructor.

    |           |        |                                                |
    |-----------|--------|------------------------------------------------|
    | Parameter | Type   | Description                                    |
    | ctor      | Object | Target constructor to extend.                  |
    | props     | Object | One or more objects to mix into ctor.prototype |

    **Returns:** Object

    Target constructor to extend.
- name: _base/lang#getObject()
  id: dojo/_base/lang#1_10dojo__base_lang_getObject
  summary: Useful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format
  belongs_to: _base/lang
  description: |-
    ### `getObject` `(name,create,context)`

    Defined by [dojo/\_base/lang](lang)

    Get a property from a dot-separated string, such as "A.B.C"

    Useful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format.

    [TABLE]

    **Returns:** undefined
- name: _base/lang#hitch()
  id: dojo/_base/lang#1_10dojo__base_lang_hitch
  summary: Returns a function that will only ever execute in the given scope
  belongs_to: _base/lang
  description: "### `hitch` `(scope,method)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nReturns a function that will only ever execute in the given scope. This allows for easy use of object member functions in callbacks and other places in which the \"this\" keyword may otherwise not reference the expected scope. Any number of default positional arguments may be passed as parameters beyond \"method\". Each of these values will be used to \"placehold\" (similar to curry) for the hitched function.\n\n|           |                       |                                                                                                           |\n|-----------|-----------------------|-----------------------------------------------------------------------------------------------------------|\n| Parameter | Type                  | Description                                                                                               |\n| scope     | Object                | The scope to use when method executes. If method is a string, scope is also the object containing method. |\n| method    | Function \\| String... | A function to be hitched to scope, or the name of the method in scope to be hitched.                      |\n\n**Returns:** undefined \\| function\n\n## Examples\n\n### Example 1\n\n``` javascript\n      lang.hitch(foo, \"bar\")();\n    \n```\n\nruns foo.bar() in the scope of foo\n\n### Example 2\n\n``` javascript\n      lang.hitch(foo, myFunction);\n    \n```\n\nreturns a function that runs myFunction in the scope of foo\n\n### Example 3\n\nExpansion on the default positional arguments passed along from hitch. Passed args are mixed first, additional args after.\n\n``` javascript\n      var foo = { bar: function(a, b, c){ console.log(a, b, c); } };\nvar fn = lang.hitch(foo, \"bar\", 1, 2);\nfn(3); // logs \"1, 2, 3\"\n    \n```\n\n### Example 4\n\n``` javascript\n      var foo = { bar: 2 };\nlang.hitch(foo, function(){ this.bar = 10; })();\n    \n```\n\nexecute an anonymous function in scope of foo"
- name: _base/lang#isAlien()
  id: dojo/_base/lang#1_10dojo__base_lang_isAlien
  summary: null
  belongs_to: _base/lang
  description: |-
    ### `isAlien` `(it)`

    Defined by [dojo/\_base/lang](lang)

    Returns true if it is a built-in function or some other kind of oddball that *should* report as a function but doesn't

    |           |           |             |
    |-----------|-----------|-------------|
    | Parameter | Type      | Description |
    | it        | undefined |             |

    **Returns:** undefined
- name: _base/lang#isArray()
  id: dojo/_base/lang#1_10dojo__base_lang_isArray
  summary: Return true if it is an Array
  belongs_to: _base/lang
  description: |-
    ### `isArray` `(it)`

    Defined by [dojo/\_base/lang](lang)

    Return true if it is an Array. Does not work on Arrays created in other windows.

    |           |          |               |
    |-----------|----------|---------------|
    | Parameter | Type     | Description   |
    | it        | anything | Item to test. |

    **Returns:** undefined
- name: _base/lang#isArrayLike()
  id: dojo/_base/lang#1_10dojo__base_lang_isArrayLike
  summary: Doesn't strongly test for "arrayness". Instead, settles for "isn't a string or number and has a length property". Arguments objects and DOM collections will return true when passed to isArrayLike(), but will return false when passed to isArray()
  belongs_to: _base/lang
  description: |-
    ### `isArrayLike` `(it)`

    Defined by [dojo/\_base/lang](lang)

    similar to isArray() but more permissive

    Doesn't strongly test for "arrayness". Instead, settles for "isn't a string or number and has a length property". Arguments objects and DOM collections will return true when passed to isArrayLike(), but will return false when passed to isArray().

    |           |          |               |
    |-----------|----------|---------------|
    | Parameter | Type     | Description   |
    | it        | anything | Item to test. |

    **Returns:** any \| Boolean

    If it walks like a duck and quacks like a duck, return `true`
- name: _base/lang#isFunction()
  id: dojo/_base/lang#1_10dojo__base_lang_isFunction
  summary: null
  belongs_to: _base/lang
  description: |-
    ### `isFunction` `(it)`

    Defined by [dojo/\_base/lang](lang)

    Return true if it is a Function

    |           |          |               |
    |-----------|----------|---------------|
    | Parameter | Type     | Description   |
    | it        | anything | Item to test. |

    **Returns:** boolean
- name: _base/lang#isObject()
  id: dojo/_base/lang#1_10dojo__base_lang_isObject
  summary: null
  belongs_to: _base/lang
  description: |-
    ### `isObject` `(it)`

    Defined by [dojo/\_base/lang](lang)

    Returns true if it is a JavaScript object (or an Array, a Function or null)

    |           |          |               |
    |-----------|----------|---------------|
    | Parameter | Type     | Description   |
    | it        | anything | Item to test. |

    **Returns:** boolean
- name: _base/lang#isString()
  id: dojo/_base/lang#1_10dojo__base_lang_isString
  summary: null
  belongs_to: _base/lang
  description: |-
    ### `isString` `(it)`

    Defined by [dojo/\_base/lang](lang)

    Return true if it is a String

    |           |          |               |
    |-----------|----------|---------------|
    | Parameter | Type     | Description   |
    | it        | anything | Item to test. |

    **Returns:** boolean
- name: _base/lang#mixin()
  id: dojo/_base/lang#1_10dojo__base_lang_mixin
  summary: Copies/adds all properties of one or more sources to dest; returns dest
  belongs_to: _base/lang
  description: "### `mixin` `(dest,sources)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nCopies/adds all properties of one or more sources to dest; returns dest.\n\nAll properties, including functions (sometimes termed \"methods\"), excluding any non-standard extensions found in Object.prototype, are copied/added from sources to dest. sources are processed left to right. The Javascript assignment operator is used to copy/add each property; therefore, by default, mixin executes a so-called \"shallow copy\" and aggregate types are copied/added by reference.\n\n|           |           |                                                                                                                                                                                                                 |\n|-----------|-----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameter | Type      | Description                                                                                                                                                                                                     |\n| dest      | Object    | The object to which to copy/add all properties contained in source. If dest is falsy, then a new object is manufactured before copying/adding properties begins.                                                |\n| sources   | Object... | One of more objects from which to draw all properties to copy into dest. sources are processed left-to-right and if more than one of these objects contain the same property name, the right-most value \"wins\". |\n\n**Returns:** Object \\| object\n\ndest, as modified\n\n## Examples\n\n### Example 1\n\nmake a shallow copy of an object\n\n``` javascript\n      var copy = lang.mixin({}, source);\n    \n```\n\n### Example 2\n\nmany class constructors often take an object which specifies values to be configured on the object. In this case, it is often simplest to call `lang.mixin` on the `this` object:\n\n``` javascript\n      declare(\"acme.Base\", null, {\n    constructor: function(properties){\n        // property configuration:\n        lang.mixin(this, properties);\n\n        console.log(this.quip);\n        //  ...\n    },\n    quip: \"I wasn't born yesterday, you know - I've seen movies.\",\n    // ...\n});\n\n// create an instance of the class and configure it\nvar b = new acme.Base({quip: \"That's what it does!\" });\n    \n```\n\n### Example 3\n\ncopy in properties from multiple objects\n\n``` javascript\n      var flattened = lang.mixin(\n    {\n        name: \"Frylock\",\n        braces: true\n    },\n    {\n        name: \"Carl Brutanananadilewski\"\n    }\n);\n\n// will print \"Carl Brutanananadilewski\"\nconsole.log(flattened.name);\n// will print \"true\"\nconsole.log(flattened.braces);\n    \n```"
- name: _base/lang#partial()
  id: dojo/_base/lang#1_10dojo__base_lang_partial
  summary: similar to hitch() except that the scope object is left to be whatever the execution context eventually becomes
  belongs_to: _base/lang
  description: "### `partial` `(method)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nsimilar to hitch() except that the scope object is left to be whatever the execution context eventually becomes.\n\nCalling lang.partial is the functional equivalent of calling:\n\n``` javascript\n      lang.hitch(null, funcName, ...);\n    \n```\n\n|           |                    |                        |\n|-----------|--------------------|------------------------|\n| Parameter | Type               | Description            |\n| method    | Function \\| String | The function to \"wrap\" |\n\n**Returns:** undefined"
- name: _base/lang#replace()
  id: dojo/_base/lang#1_10dojo__base_lang_replace
  summary: Performs parameterized substitutions on a string
  belongs_to: _base/lang
  description: "### `replace` `(tmpl,map,pattern)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nPerforms parameterized substitutions on a string. Throws an exception if any parameter is unmatched.\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\nReturns the substituted string.\n\n## Examples\n\n### Example 1\n\n``` javascript\n      // uses a dictionary for substitutions:\nlang.replace(\"Hello, {name.first} {name.last} AKA {nick}!\",\n    {\n        nick: \"Bob\",\n        name: {\n            first:  \"Robert\",\n            middle: \"X\",\n            last:       \"Cringely\"\n        }\n    });\n// returns: Hello, Robert Cringely AKA Bob!\n    \n```\n\n### Example 2\n\n``` javascript\n      // uses an array for substitutions:\nlang.replace(\"Hello, {0} {2}!\",\n    [\"Robert\", \"X\", \"Cringely\"]);\n// returns: Hello, Robert Cringely!\n    \n```\n\n### Example 3\n\n``` javascript\n      // uses a function for substitutions:\nfunction sum(a){\n    var t = 0;\n    arrayforEach(a, function(x){ t += x; });\n    return t;\n}\nlang.replace(\n    \"{count} payments averaging {avg} USD per payment.\",\n    lang.hitch(\n        { payments: [11, 16, 12] },\n        function(_, key){\n            switch(key){\n                case \"count\": return this.payments.length;\n                case \"min\":     return Math.min.apply(Math, this.payments);\n                case \"max\":     return Math.max.apply(Math, this.payments);\n                case \"sum\":     return sum(this.payments);\n                case \"avg\":     return sum(this.payments) / this.payments.length;\n            }\n        }\n    )\n);\n// prints: 3 payments averaging 13 USD per payment.\n    \n```\n\n### Example 4\n\n``` javascript\n      // uses an alternative PHP-like pattern for substitutions:\nlang.replace(\"Hello, ${0} ${2}!\",\n    [\"Robert\", \"X\", \"Cringely\"], /\\$\\{([^\\}]+)\\}/g);\n// returns: Hello, Robert Cringely!\n    \n```"
- name: _base/lang#setObject()
  id: dojo/_base/lang#1_10dojo__base_lang_setObject
  summary: Useful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format
  belongs_to: _base/lang
  description: "### `setObject` `(name,value,context)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nSet a property from a dot-separated string, such as \"A.B.C\"\n\nUseful for longer api chains where you have to test each object in the chain, or when you have an object reference in string format. Objects are created as needed along `path`. Returns the passed value if setting is successful or `undefined` if not.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nset the value of `foo.bar.baz`, regardless of whether intermediate objects already exist:\n\n``` javascript\n      lang.setObject(\"foo.bar.baz\", value);\n    \n```\n\n### Example 2\n\nwithout `lang.setObject`, we often see code like this:\n\n``` javascript\n      // ensure that intermediate objects are available\nif(!obj[\"parent\"]){ obj.parent = {}; }\nif(!obj.parent[\"child\"]){ obj.parent.child = {}; }\n// now we can safely set the property\nobj.parent.child.prop = \"some value\";\n    \n```\n\nwhereas with `lang.setObject`, we can shorten that to:\n\n``` javascript\n      lang.setObject(\"parent.child.prop\", \"some value\", obj);\n    \n```"
- name: _base/lang#trim()
  id: dojo/_base/lang#1_10dojo__base_lang_trim
  summary: This version of trim() was selected for inclusion into the base due to its compact size and relatively good performance (see Steven Levithan's blog Uses String.prototype.trim instead, if available
  belongs_to: _base/lang
  description: "### `trim` `(str)`\n\nDefined by [dojo/\\_base/lang](lang)\n\nTrims whitespace from both sides of the string\n\nThis version of trim() was selected for inclusion into the base due to its compact size and relatively good performance (see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript) Uses String.prototype.trim instead, if available. The fastest but longest version of this function is located at lang.string.trim()\n\n|           |        |                      |\n|-----------|--------|----------------------|\n| Parameter | Type   | Description          |\n| str       | String | String to be trimmed |\n\n**Returns:** String\n\nReturns the trimmed string\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/lang.html](http://dojotoolkit.org/api/1.10/dojo/_base/lang.html)"
- name: _base/loader
  id: dojo/_base/loader
  summary: See the dojo/_base/loader reference documentation for more information
  description: "# dojo/\\_base/loader\n\nSee the [dojo/\\_base/loader reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/loader.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/loader.html](http://dojotoolkit.org/api/1.10/dojo/_base/loader.html)"
- name: _base/NodeList
  id: dojo/_base/nodelist
  summary: This module extends dojo/NodeList with the legacy connect(), coords(), blur(), focus(), change(), click(), error(), keydown(), keypress(), keyup(), load(), mousedown(), mouseenter(), mouseleave(), mousemove(), mouseout(), mouseover(), mouseup(), and submit() methods
  description: "# dojo/\\_base/NodeList\n\n## Summary\n\nThis module extends [dojo/NodeList](../nodelist) with the legacy connect(), coords(), blur(), focus(), change(), click(), error(), keydown(), keypress(), keyup(), load(), mousedown(), mouseenter(), mouseleave(), mousemove(), mouseout(), mouseover(), mouseup(), and submit() methods.\n\nSee the [dojo/\\_base/NodeList reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/NodeList.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/NodeList.html](http://dojotoolkit.org/api/1.10/dojo/_base/NodeList.html)"
- name: _base/query
  id: dojo/_base/query
  summary: Deprecated
  description: "# dojo/\\_base/query\n\n## Summary\n\nDeprecated. Use [dojo/query](../query) instead.\n\nSee the [dojo/\\_base/query reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/query.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/query.html](http://dojotoolkit.org/api/1.10/dojo/_base/query.html)"
- name: _base/sniff
  id: dojo/_base/sniff
  summary: Deprecated
  description: "# dojo/\\_base/sniff\n\n## Summary\n\nDeprecated. New code should use [dojo/sniff](../sniff). This module populates the dojo browser version sniffing properties like dojo.isIE.\n\nSee the [dojo/\\_base/sniff reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/sniff.html) for more information.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/sniff.html](http://dojotoolkit.org/api/1.10/dojo/_base/sniff.html)"
- name: _base/unload
  id: dojo/_base/unload
  summary: This module contains the document and window unload detection API
  description: "# dojo/\\_base/unload\n\n## Summary\n\nThis module contains the document and window unload detection API. This module is deprecated. Use on(window, \"unload\", func) and on(window, \"beforeunload\", func) instead.\n\nSee the [dojo/\\_base/unload reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/unload.html) for more information.\n\n## Methods\n\n### `addOnUnload``(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](unload)\n\nRegisters a function to be triggered when the page unloads. Deprecated, use on(window, \"beforeunload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnUnload is called Dojo will register a page listener to trigger your unload handler with.\n\nIn a browser environment, the functions will be triggered during the window.onbeforeunload event. Be careful of doing too much work in an unload handler. onbeforeunload can be triggered if a link to download a file is clicked, or if the link is a javascript: link. In these cases, the onbeforeunload event fires, but the document is not actually destroyed. So be careful about doing destructive operations in a dojo.addOnUnload callback.\n\nFurther note that calling dojo.addOnUnload will prevent browsers from using a \"fast back\" cache to make page loading via back button instantaneous.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnUnload(afunc);\n    unload.addOnUnload(foo, \"bar\");\n    unload.addOnUnload(foo, function(){console.log(\"\", this.data);});\n});\n```\n\n### `addOnWindowUnload``(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](unload)\n\nRegisters a function to be triggered when window.onunload fires. Deprecated, use on(window, \"unload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnWindowUnload is called Dojo will register a page listener to trigger your unload handler with. Note that registering these handlers may destroy \"fastback\" page caching in browsers that support it. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider addOnUnload() if you need to modify the DOM or do heavy JavaScript work since it fires at the equivalent of the page's \"onbeforeunload\" event.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\nvar afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnWindowUnload(afunc);\n    unload.addOnWindowUnload(foo, \"bar\");\n    unload.addOnWindowUnload(foo, function(){console.log(\"\", this.data);});\n});\n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/unload.html](http://dojotoolkit.org/api/1.10/dojo/_base/unload.html)"
- name: _base/unload#addOnUnload()
  id: dojo/_base/unload#1_10dojo__base_unload_addOnUnload
  summary: Registers a function to be triggered when the page unloads
  belongs_to: _base/unload
  description: "### `addOnUnload` `(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](unload)\n\nRegisters a function to be triggered when the page unloads. Deprecated, use on(window, \"beforeunload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnUnload is called Dojo will register a page listener to trigger your unload handler with.\n\nIn a browser environment, the functions will be triggered during the window.onbeforeunload event. Be careful of doing too much work in an unload handler. onbeforeunload can be triggered if a link to download a file is clicked, or if the link is a javascript: link. In these cases, the onbeforeunload event fires, but the document is not actually destroyed. So be careful about doing destructive operations in a dojo.addOnUnload callback.\n\nFurther note that calling dojo.addOnUnload will prevent browsers from using a \"fast back\" cache to make page loading via back button instantaneous.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnUnload(afunc);\n    unload.addOnUnload(foo, \"bar\");\n    unload.addOnUnload(foo, function(){console.log(\"\", this.data);});\n});\n    \n```"
- name: _base/unload#addOnWindowUnload()
  id: dojo/_base/unload#1_10dojo__base_unload_addOnWindowUnload
  summary: Registers a function to be triggered when window.onunload fires
  belongs_to: _base/unload
  description: "### `addOnWindowUnload` `(obj,functionName)`\n\nDefined by [dojo/\\_base/unload](unload)\n\nRegisters a function to be triggered when window.onunload fires. Deprecated, use on(window, \"unload\", lang.hitch(obj, functionName)) instead.\n\nThe first time that addOnWindowUnload is called Dojo will register a page listener to trigger your unload handler with. Note that registering these handlers may destroy \"fastback\" page caching in browsers that support it. Be careful trying to modify the DOM or access JavaScript properties during this phase of page unloading: they may not always be available. Consider addOnUnload() if you need to modify the DOM or do heavy JavaScript work since it fires at the equivalent of the page's \"onbeforeunload\" event.\n\n[TABLE]\n\n## Examples\n\n### Example 1\n\n``` javascript\n      var afunc = function() {console.log(\"global function\");};\nrequire([\"dojo/_base/unload\"], function(unload) {\n    var foo = {bar: function(){ console.log(\"bar unloading...\");}, \n               data: \"mydata\"};\n    unload.addOnWindowUnload(afunc);\n    unload.addOnWindowUnload(foo, \"bar\");\n    unload.addOnWindowUnload(foo, function(){console.log(\"\", this.data);});\n});\n    \n```\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/unload.html](http://dojotoolkit.org/api/1.10/dojo/_base/unload.html)"
- name: _base/url
  id: dojo/_base/url
  summary: See the dojo/_base/url reference documentation for more information
  description: "# dojo/\\_base/url\n\n## Usage\n\nurl`();`\n\nSee the [dojo/\\_base/url reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/url.html) for more information.\n\n## Properties\n\n### authority\n\nDefined by: [dojo/\\_base/url](url)\n\n### fragment\n\nDefined by: [dojo/\\_base/url](url)\n\n### host\n\nDefined by: [dojo/\\_base/url](url)\n\n### password\n\nDefined by: [dojo/\\_base/url](url)\n\n### path\n\nDefined by: [dojo/\\_base/url](url)\n\n### port\n\nDefined by: [dojo/\\_base/url](url)\n\n### query\n\nDefined by: [dojo/\\_base/url](url)\n\n### scheme\n\nDefined by: [dojo/\\_base/url](url)\n\n### uri\n\nDefined by: [dojo/\\_base/url](url)\n\n### user\n\nDefined by: [dojo/\\_base/url](url)\n\n## Methods\n\n### `toString``()`\n\nDefined by [dojo/\\_base/url](url)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.html)"
- name: _base/url#authority
  id: dojo/_base/url#1_10dojo__base_url_authority
  summary: null
  belongs_to: _base/url
  description: |-
    ### authority

    Defined by: [dojo/\_base/url](url)
- name: _base/url#fragment
  id: dojo/_base/url#1_10dojo__base_url_fragment
  summary: null
  belongs_to: _base/url
  description: |-
    ### fragment

    Defined by: [dojo/\_base/url](url)
- name: _base/url#host
  id: dojo/_base/url#1_10dojo__base_url_host
  summary: null
  belongs_to: _base/url
  description: |-
    ### host

    Defined by: [dojo/\_base/url](url)
- name: _base/url#password
  id: dojo/_base/url#1_10dojo__base_url_password
  summary: null
  belongs_to: _base/url
  description: |-
    ### password

    Defined by: [dojo/\_base/url](url)
- name: _base/url#path
  id: dojo/_base/url#1_10dojo__base_url_path
  summary: null
  belongs_to: _base/url
  description: |-
    ### path

    Defined by: [dojo/\_base/url](url)
- name: _base/url#port
  id: dojo/_base/url#1_10dojo__base_url_port
  summary: null
  belongs_to: _base/url
  description: |-
    ### port

    Defined by: [dojo/\_base/url](url)
- name: _base/url#query
  id: dojo/_base/url#1_10dojo__base_url_query
  summary: null
  belongs_to: _base/url
  description: |-
    ### query

    Defined by: [dojo/\_base/url](url)
- name: _base/url#scheme
  id: dojo/_base/url#1_10dojo__base_url_scheme
  summary: null
  belongs_to: _base/url
  description: |-
    ### scheme

    Defined by: [dojo/\_base/url](url)
- name: _base/url#toString()
  id: dojo/_base/url#1_10dojo__base_url_toString
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/url
  description: "### `toString` `()`\n\nDefined by [dojo/\\_base/url](url)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.html)"
- name: _base/url#uri
  id: dojo/_base/url#1_10dojo__base_url_uri
  summary: null
  belongs_to: _base/url
  description: |-
    ### uri

    Defined by: [dojo/\_base/url](url)
- name: _base/url#user
  id: dojo/_base/url#1_10dojo__base_url_user
  summary: null
  belongs_to: _base/url
  description: |-
    ### user

    Defined by: [dojo/\_base/url](url)

    ## Methods
- name: _base/url.authority
  id: dojo/_base/url.authority
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/url.authority\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.authority.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.authority.html)"
- name: _base/url.fragment
  id: dojo/_base/url.fragment
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/url.fragment\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.fragment.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.fragment.html)"
- name: _base/url.password
  id: dojo/_base/url.password
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/url.password\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.password.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.password.html)"
- name: _base/url.port
  id: dojo/_base/url.port
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/url.port\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.port.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.port.html)"
- name: _base/url.query
  id: dojo/_base/url.query
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/url.query\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.query.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.query.html)"
- name: _base/url.scheme
  id: dojo/_base/url.scheme
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/url.scheme\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.scheme.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.scheme.html)"
- name: _base/url.user
  id: dojo/_base/url.user
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_base/url.user\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/url.user.html](http://dojotoolkit.org/api/1.10/dojo/_base/url.user.html)"
- name: _base/window
  id: dojo/_base/window
  summary: API to save/set/restore the global/document scope
  description: "# dojo/\\_base/window\n\n## Summary\n\nAPI to save/set/restore the global/document scope.\n\nSee the [dojo/\\_base/window reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/window.html) for more information.\n\n## Properties\n\n### doc\n\nDefined by: [dojo/\\_base/window](window)\n\nAlias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().\n\n### global\n\nDefined by: [dojo/\\_base/window](window)\n\nAlias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().\n\n## Methods\n\n### `body``(doc)`\n\nDefined by [dojo/\\_base/window](window)\n\nReturn the body element of the specified document or of dojo/\\_base/window::doc.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\nwin.body().appendChild(dojo.doc.createElement('div'));\n```\n\n### `setContext``(globalObject,globalDocument)`\n\nDefined by [dojo/\\_base/window](window)\n\nchanges the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.\n\n|                |                 |             |\n|----------------|-----------------|-------------|\n| Parameter      | Type            | Description |\n| globalObject   | Object          |             |\n| globalDocument | DocumentElement |             |\n\n### `withDoc``(documentObject,callback,thisObject,cbArguments)`\n\nDefined by [dojo/\\_base/window](window)\n\nInvoke callback with documentObject as dojo/\\_base/window::doc.\n\nInvoke callback with documentObject as [dojo/\\_base/window](window)::doc. If provided, callback will be executed in the context of object thisObject When callback() returns or throws an error, the [dojo/\\_base/window](window)::doc will be restored to its previous state.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `withGlobal``(globalObject,callback,thisObject,cbArguments)`\n\nDefined by [dojo/\\_base/window](window)\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc.\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject When callback() returns or throws an error, the dojo.global and dojo.doc will be restored to its previous state.\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/window.html](http://dojotoolkit.org/api/1.10/dojo/_base/window.html)"
- name: _base/window#body()
  id: dojo/_base/window#1_10dojo__base_window_body
  summary: Return the body element of the specified document or of dojo/_base/window::doc
  belongs_to: _base/window
  description: "### `body` `(doc)`\n\nDefined by [dojo/\\_base/window](window)\n\nReturn the body element of the specified document or of dojo/\\_base/window::doc.\n\n[TABLE]\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\n``` javascript\n      win.body().appendChild(dojo.doc.createElement('div'));\n    \n```"
- name: _base/window#doc
  id: dojo/_base/window#1_10dojo__base_window_doc
  summary: Alias for the current document
  belongs_to: _base/window
  description: |-
    ### doc

    Defined by: [dojo/\_base/window](window)

    Alias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().
- name: _base/window#global
  id: dojo/_base/window#1_10dojo__base_window_global
  summary: Alias for the current window
  belongs_to: _base/window
  description: |-
    ### global

    Defined by: [dojo/\_base/window](window)

    Alias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().

    ## Methods
- name: _base/window#setContext()
  id: dojo/_base/window#1_10dojo__base_window_setContext
  summary: changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe)
  belongs_to: _base/window
  description: |-
    ### `setContext` `(globalObject,globalDocument)`

    Defined by [dojo/\_base/window](window)

    changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.

    |                |                 |             |
    |----------------|-----------------|-------------|
    | Parameter      | Type            | Description |
    | globalObject   | Object          |             |
    | globalDocument | DocumentElement |             |
- name: _base/window#withDoc()
  id: dojo/_base/window#1_10dojo__base_window_withDoc
  summary: Invoke callback with documentObject as dojo/_base/window::doc
  belongs_to: _base/window
  description: |-
    ### `withDoc` `(documentObject,callback,thisObject,cbArguments)`

    Defined by [dojo/\_base/window](window)

    Invoke callback with documentObject as dojo/\_base/window::doc.

    Invoke callback with documentObject as [dojo/\_base/window](window)::doc. If provided, callback will be executed in the context of object thisObject When callback() returns or throws an error, the [dojo/\_base/window](window)::doc will be restored to its previous state.

    [TABLE]

    **Returns:** undefined
- name: _base/window#withGlobal()
  id: dojo/_base/window#1_10dojo__base_window_withGlobal
  summary: Invoke callback with globalObject as dojo.global and globalObject.document as dojo.doc
  belongs_to: _base/window
  description: "### `withGlobal` `(globalObject,callback,thisObject,cbArguments)`\n\nDefined by [dojo/\\_base/window](window)\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc.\n\nInvoke callback with globalObject as dojo.global and globalObject.document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject When callback() returns or throws an error, the dojo.global and dojo.doc will be restored to its previous state.\n\n[TABLE]\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/window.html](http://dojotoolkit.org/api/1.10/dojo/_base/window.html)"
- name: _base/window.doc
  id: dojo/_base/window.doc
  summary: Alias for the current document
  description: "# dojo/\\_base/window.doc\n\n## Summary\n\nAlias for the current document. 'doc' can be modified for temporary context shifting. See also withDoc().\n\nUse this rather than referring to 'window.document' to ensure your code runs correctly in managed contexts.\n\n## Examples\n\n### Example 1\n\n``` javascript\nn.appendChild(dojo.doc.createElement('div'));\n```\n\n## Properties\n\n### documentElement\n\nDefined by: [dojox/gfx/\\_base](http://dojotoolkit.org/api/1.10/dojox/gfx/_base)\n\n### dojoClick\n\nDefined by: [dojox/mobile/common](http://dojotoolkit.org/api/1.10/dojox/mobile/common)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/window.doc.html](http://dojotoolkit.org/api/1.10/dojo/_base/window.doc.html)"
- name: _base/window.doc#documentElement
  id: dojo/_base/window.doc#1_10dojo__base_window_doc_documentElement
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/window.doc
  description: "### documentElement\n\nDefined by: [dojox/gfx/\\_base](http://dojotoolkit.org/api/1.10/dojox/gfx/_base)\n\n### dojoClick\n\nDefined by: [dojox/mobile/common](http://dojotoolkit.org/api/1.10/dojox/mobile/common)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/window.doc.html](http://dojotoolkit.org/api/1.10/dojo/_base/window.doc.html)"
- name: _base/window.global
  id: dojo/_base/window.global
  summary: Alias for the current window
  description: "# dojo/\\_base/window.global\n\n## Summary\n\nAlias for the current window. 'global' can be modified for temporary context shifting. See also withGlobal().\n\nUse this rather than referring to 'window' to ensure your code runs correctly in managed contexts.\n\n## Methods\n\n### `$``()`\n\nDefined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)\n\n**Returns:** undefined\n\n### `GoogleSearchStoreCallback_undefined_NaN``(start,data,responseCode,errorMsg)`\n\nDefined by [dojox/data/GoogleSearchStore](http://dojotoolkit.org/api/1.10/dojox/data/GoogleSearchStore)\n\n|              |           |             |\n|--------------|-----------|-------------|\n| Parameter    | Type      | Description |\n| start        | undefined |             |\n| data         | undefined |             |\n| responseCode | undefined |             |\n| errorMsg     | undefined |             |\n\n### `jQuery``()`\n\nDefined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)\n\n**Returns:** undefined\n\n### `swfIsInHTML``()`\n\nDefined by [dojox/av/FLVideo](http://dojotoolkit.org/api/1.10/dojox/av/FLVideo)\n\n### `undefined_onload``()`\n\nDefined by [dojo/request/iframe](../request/iframe)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/window.global.html](http://dojotoolkit.org/api/1.10/dojo/_base/window.global.html)"
- name: _base/window.global#$()
  id: dojo/_base/window.global#1_10dojo__base_window_global_$
  summary: null
  belongs_to: _base/window.global
  description: |-
    ### `$` `()`

    Defined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)

    **Returns:** undefined
- name: _base/window.global#GoogleSearchStoreCallback_undefined_NaN()
  id: dojo/_base/window.global#1_10dojo__base_window_global_GoogleSearchStoreCallback_undefined_NaN
  summary: null
  belongs_to: _base/window.global
  description: |-
    ### `GoogleSearchStoreCallback_undefined_NaN` `(start,data,responseCode,errorMsg)`

    Defined by [dojox/data/GoogleSearchStore](http://dojotoolkit.org/api/1.10/dojox/data/GoogleSearchStore)

    |              |           |             |
    |--------------|-----------|-------------|
    | Parameter    | Type      | Description |
    | start        | undefined |             |
    | data         | undefined |             |
    | responseCode | undefined |             |
    | errorMsg     | undefined |             |
- name: _base/window.global#jQuery()
  id: dojo/_base/window.global#1_10dojo__base_window_global_jQuery
  summary: null
  belongs_to: _base/window.global
  description: |-
    ### `jQuery` `()`

    Defined by [dojox/jq](http://dojotoolkit.org/api/1.10/dojox/jq)

    **Returns:** undefined
- name: _base/window.global#swfIsInHTML()
  id: dojo/_base/window.global#1_10dojo__base_window_global_swfIsInHTML
  summary: null
  belongs_to: _base/window.global
  description: |-
    ### `swfIsInHTML` `()`

    Defined by [dojox/av/FLVideo](http://dojotoolkit.org/api/1.10/dojox/av/FLVideo)
- name: _base/window.global#undefined_onload()
  id: dojo/_base/window.global#1_10dojo__base_window_global_undefined_onload
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  belongs_to: _base/window.global
  description: "### `undefined_onload` `()`\n\nDefined by [dojo/request/iframe](../request/iframe)\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/window.global.html](http://dojotoolkit.org/api/1.10/dojo/_base/window.global.html)"
- name: _base/xhr
  id: dojo/_base/xhr
  summary: Deprecated
  description: "# dojo/\\_base/xhr\n\n## Summary\n\nDeprecated. Use [dojo/request](../request) instead.\n\nSends an HTTP request with the given method. See also dojo.xhrGet(), xhrPost(), xhrPut() and dojo.xhrDelete() for shortcuts for those HTTP methods. There are also methods for \"raw\" PUT and POST methods via dojo.rawXhrPut() and dojo.rawXhrPost() respectively.\n\n## Usage\n\nxhr`(method,args,hasBody);`\n\n[TABLE]\n\n**Returns:** undefined\n\nSee the [dojo/\\_base/xhr reference documentation](http://dojotoolkit.org/reference-guide/1.10/dojo/_base/xhr.html) for more information.\n\n## Properties\n\n### contentHandlers\n\nDefined by: [dojo/\\_base/xhr](xhr)\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\n## Methods\n\n### `del``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP DELETE request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `fieldToObject``(inputNode)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSerialize a form field to a JavaScript object.\n\nReturns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| inputNode | DOMNode \\| String |             |\n\n**Returns:** Object \\| undefined\n\n### `formToJson``(formNode,prettyPrint)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nCreate a serialized JSON string from a form node or string ID identifying the form to serialize\n\n[TABLE]\n\n**Returns:** String \\| undefined\n\n### `formToObject``(formNode)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n<form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\n### `formToQuery``(formNode)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nReturns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** String \\| undefined\n\n### `get``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP GET request to the server.\n\n[TABLE]\n\n**Returns:** undefined\n\n### `objectToQuery``(map)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n{\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n```\n\nyields the following query string:\n\n``` javascript\n\"blah=blah&multi=thud&multi=thonk\"\n```\n\n### `post``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP POST request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `put``(args)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\\_\\_XhrArgs type, the following property is allowed:\n\n[TABLE]\n\n**Returns:** undefined\n\n### `queryToObject``(str)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n\"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n```\n\nresults in this object structure:\n\n``` javascript\n{\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n```\n\nNote that spaces and other urlencoded entities are correctly handled.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/xhr.html](http://dojotoolkit.org/api/1.10/dojo/_base/xhr.html)"
- name: _base/xhr#contentHandlers
  id: dojo/_base/xhr#1_10dojo__base_xhr_contentHandlers
  summary: A map of available XHR transport handle types
  belongs_to: _base/xhr
  description: |-
    ### contentHandlers

    Defined by: [dojo/\_base/xhr](xhr)

    A map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.

    ## Methods
- name: _base/xhr#del()
  id: dojo/_base/xhr#1_10dojo__base_xhr_del
  summary: Sends an HTTP DELETE request to the server
  belongs_to: _base/xhr
  description: |-
    ### `del` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP DELETE request to the server.

    [TABLE]

    **Returns:** undefined
- name: _base/xhr#fieldToObject()
  id: dojo/_base/xhr#1_10dojo__base_xhr_fieldToObject
  summary: Serialize a form field to a JavaScript object
  belongs_to: _base/xhr
  description: |-
    ### `fieldToObject` `(inputNode)`

    Defined by [dojo/\_base/xhr](xhr)

    Serialize a form field to a JavaScript object.

    Returns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.

    |           |                   |             |
    |-----------|-------------------|-------------|
    | Parameter | Type              | Description |
    | inputNode | DOMNode \| String |             |

    **Returns:** Object \| undefined
- name: _base/xhr#formToJson()
  id: dojo/_base/xhr#1_10dojo__base_xhr_formToJson
  summary: null
  belongs_to: _base/xhr
  description: |-
    ### `formToJson` `(formNode,prettyPrint)`

    Defined by [dojo/\_base/xhr](xhr)

    Create a serialized JSON string from a form node or string ID identifying the form to serialize

    [TABLE]

    **Returns:** String \| undefined
- name: _base/xhr#formToObject()
  id: dojo/_base/xhr#1_10dojo__base_xhr_formToObject
  summary: Serialize a form node to a JavaScript object
  belongs_to: _base/xhr
  description: "### `formToObject` `(formNode)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nSerialize a form node to a JavaScript object.\n\nReturns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.\n\n|           |                   |             |\n|-----------|-------------------|-------------|\n| Parameter | Type              | Description |\n| formNode  | DOMNode \\| String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis form:\n\n``` markup\n      <form id=\"test_form\">\n    <input type=\"text\" name=\"blah\" value=\"blah\">\n    <input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\n    <input type=\"button\" name=\"no_value2\" value=\"blah\">\n    <select type=\"select\" multiple name=\"multi\" size=\"5\">\n        <option value=\"blah\">blah</option>\n        <option value=\"thud\" selected>thud</option>\n        <option value=\"thonk\" selected>thonk</option>\n    </select>\n</form>\n    \n```\n\nyields this object structure as the result of a call to formToObject():\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```"
- name: _base/xhr#formToQuery()
  id: dojo/_base/xhr#1_10dojo__base_xhr_formToQuery
  summary: null
  belongs_to: _base/xhr
  description: |-
    ### `formToQuery` `(formNode)`

    Defined by [dojo/\_base/xhr](xhr)

    Returns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize

    |           |                   |             |
    |-----------|-------------------|-------------|
    | Parameter | Type              | Description |
    | formNode  | DOMNode \| String |             |

    **Returns:** String \| undefined
- name: _base/xhr#get()
  id: dojo/_base/xhr#1_10dojo__base_xhr_get
  summary: Sends an HTTP GET request to the server
  belongs_to: _base/xhr
  description: |-
    ### `get` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP GET request to the server.

    [TABLE]

    **Returns:** undefined
- name: _base/xhr#objectToQuery()
  id: dojo/_base/xhr#1_10dojo__base_xhr_objectToQuery
  summary: takes a name/value mapping object and returns a string representing a URL-encoded version of that object
  belongs_to: _base/xhr
  description: "### `objectToQuery` `(map)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\ntakes a name/value mapping object and returns a string representing a URL-encoded version of that object.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| map       | Object |             |\n\n**Returns:** undefined\n\n## Examples\n\n### Example 1\n\nthis object:\n\n``` javascript\n      {\n    blah: \"blah\",\n    multi: [\n        \"thud\",\n        \"thonk\"\n    ]\n};\n    \n```\n\nyields the following query string:\n\n``` javascript\n      \"blah=blah&multi=thud&multi=thonk\"\n    \n```"
- name: _base/xhr#post()
  id: dojo/_base/xhr#1_10dojo__base_xhr_post
  summary: Sends an HTTP POST request to the server
  belongs_to: _base/xhr
  description: |-
    ### `post` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP POST request to the server. In addition to the properties listed for the dojo.\_\_XhrArgs type, the following property is allowed:

    [TABLE]

    **Returns:** undefined
- name: _base/xhr#put()
  id: dojo/_base/xhr#1_10dojo__base_xhr_put
  summary: Sends an HTTP PUT request to the server
  belongs_to: _base/xhr
  description: |-
    ### `put` `(args)`

    Defined by [dojo/\_base/xhr](xhr)

    Sends an HTTP PUT request to the server. In addition to the properties listed for the dojo.\_\_XhrArgs type, the following property is allowed:

    [TABLE]

    **Returns:** undefined
- name: _base/xhr#queryToObject()
  id: dojo/_base/xhr#1_10dojo__base_xhr_queryToObject
  summary: Create an object representing a de-serialized query section of a URL
  belongs_to: _base/xhr
  description: "### `queryToObject` `(str)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nCreate an object representing a de-serialized query section of a URL. Query keys with multiple values are returned in an array.\n\n|           |        |             |\n|-----------|--------|-------------|\n| Parameter | Type   | Description |\n| str       | String |             |\n\n**Returns:** object\n\n## Examples\n\n### Example 1\n\nThis string:\n\n``` javascript\n      \"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\n    \n```\n\nresults in this object structure:\n\n``` javascript\n      {\n    foo: [ \"bar\", \"baz\" ],\n    thinger: \" spaces =blah\",\n    zonk: \"blarg\"\n}\n    \n```\n\nNote that spaces and other urlencoded entities are correctly handled.\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/xhr.html](http://dojotoolkit.org/api/1.10/dojo/_base/xhr.html)"
- name: _base/xhr.contentHandlers
  id: dojo/_base/xhr.contenthandlers
  summary: A map of available XHR transport handle types
  description: "# dojo/\\_base/xhr.contentHandlers\n\n## Summary\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls.\n\nA map of available XHR transport handle types. Name matches the `handleAs` attribute passed to XHR calls. Each contentHandler is called, passing the xhr object for manipulation. The return value from the contentHandler will be passed to the `load` or `handle` functions defined in the original xhr call.\n\n## Examples\n\n### Example 1\n\nCreating a custom content-handler:\n\n``` javascript\nxhr.contentHandlers.makeCaps = function(xhr){\n    return xhr.responseText.toUpperCase();\n}\n// and later:\ndojo.xhrGet({\n    url:\"foo.txt\",\n    handleAs:\"makeCaps\",\n    load: function(data){ /* data is a toUpper version of foo.txt */ }\n});\n```\n\n## Methods\n\n### `auto``(xhr)`\n\nDefined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n### `javascript``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which evaluates the response data, expecting it to be valid JavaScript\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which returns a JavaScript object created from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-filtered``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which expects comment-filtered JSON.\n\nA contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent \"JavaScript Hijacking\", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.\n\nWill throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your \"JSON\" with: {}&&\n\nuse djConfig.useCommentedJson = true to turn off the notice\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-optional``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `text``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which simply returns the plaintext response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `xml``(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/xhr.contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/_base/xhr.contentHandlers.html)"
- name: _base/xhr.contentHandlers#auto()
  id: dojo/_base/xhr.contenthandlers#1_10dojo__base_xhr_contentHandlers_auto
  summary: A contentHandler which expects comment-filtered JSON
  belongs_to: _base/xhr.contentHandlers
  description: "### `auto` `(xhr)`\n\nDefined by [dojox/rpc/Service](http://dojotoolkit.org/api/1.10/dojox/rpc/Service)\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n### `javascript` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which evaluates the response data, expecting it to be valid JavaScript\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which returns a JavaScript object created from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-filtered` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which expects comment-filtered JSON.\n\nA contentHandler which expects comment-filtered JSON. the json-comment-filtered option was implemented to prevent \"JavaScript Hijacking\", but it is less secure than standard JSON. Use standard JSON instead. JSON prefixing can be used to subvert hijacking.\n\nWill throw a notice suggesting to use application/json mimetype, as json-commenting can introduce security issues. To decrease the chances of hijacking, use the standard `json` contentHandler, and prefix your \"JSON\" with: {}&&\n\nuse djConfig.useCommentedJson = true to turn off the notice\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `json-comment-optional` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which checks the presence of comment-filtered JSON and alternates between the `json` and `json-comment-filtered` contentHandlers.\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `text` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler which simply returns the plaintext response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n### `xml` `(xhr)`\n\nDefined by [dojo/\\_base/xhr](xhr)\n\nA contentHandler returning an XML Document parsed from the response data\n\n|           |           |             |\n|-----------|-----------|-------------|\n| Parameter | Type      | Description |\n| xhr       | undefined |             |\n\n**Returns:** undefined\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_base/xhr.contentHandlers.html](http://dojotoolkit.org/api/1.10/dojo/_base/xhr.contentHandlers.html)"
- name: _firebug/firebug
  id: dojo/_firebug/firebug
  summary: © 2005–2017 JS Foundation Licensed under the AFL 2.1 and BSD 3-Clause licenses
  description: "# dojo/\\_firebug/firebug\n\n© 2005–2017 JS Foundation  \nLicensed under the AFL 2.1 and BSD 3-Clause licenses.  \n[http://dojotoolkit.org/api/1.10/dojo/\\_firebug/firebug.html](http://dojotoolkit.org/api/1.10/dojo/_firebug/firebug.html)"
