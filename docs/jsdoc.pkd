---
name: JSDoc
slug: jsdoc
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2011–2017 the contributors to the JSDoc 3 documentation project
  Licensed under the Creative Commons Attribution-ShareAlike Unported
  License v3.0.
  https://jsdoc.app/index.html
homepage: https://jsdoc.app/

---
- name: '@abstract'
  id: tags-abstract
  summary: The @abstract tag identifies members that must be implemented (or overridden) by objects that inherit the member
  description: "# @abstract\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Overview](#overview)\n- [Example](#example)\n\n## Synonyms\n\n`@virtual`\n\n## Overview\n\nThe @abstract tag identifies members that must be implemented (or overridden) by objects that inherit the member.\n\n## Example\n\nParent class with abstract method, and child class that implements the method\n\n``` js\n/**\n * Generic dairy product.\n * @constructor\n */\nfunction DairyProduct() {}\n\n/**\n * Check whether the dairy product is solid at room temperature.\n * @abstract\n * @return {boolean}\n */\nDairyProduct.prototype.isSolid = function() {\n    throw new Error('must be implemented by subclass!');\n};\n\n/**\n * Cool, refreshing milk.\n * @constructor\n * @augments DairyProduct\n */\nfunction Milk() {}\n\n/**\n * Check whether milk is solid at room temperature.\n * @return {boolean} Always returns false.\n */\nMilk.prototype.isSolid = function() {\n    return false;\n};\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-abstract.html](https://jsdoc.app/tags-abstract.html)"
- name: '@access'
  id: tags-access
  summary: The @access tag specifies the access level of a member
  description: "# @access\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@access <package|private|protected|public>`\n\n## Overview\n\nThe `@access` tag specifies the access level of a member. You can use the `@access` tag as a synonym for other tags:\n\n- `@access package` is the same as `@package`. This option is available in JSDoc 3.5.0 and later.\n- `@access private` is the same as `@private`.\n- `@access protected` is the same as `@protected`.\n- `@access public` is the same as `@public`.\n\nPrivate members are not shown in the generated output unless JSDoc is run with the `-p/--private` command-line option. In JSDoc 3.3.0 and later, you can also use the [`-a/--access` command-line option](about-commandline) to change this behavior.\n\nNote that a doclet's *access level* is different from its *scope*. For example, if `Parent` has an inner variable named `child` that is documented as `@public`, the `child` variable will still be treated as an inner variable with the namepath `Parent~child`. In other words, the `child` variable will have an inner scope, even though the variable is public. To change a doclet's scope, use the [`@instance`](tags-instance), [`@static`](tags-static), and [`@global`](tags-global) tags.\n\n## Examples\n\nUsing @access as a synonym for other tags\n\n``` js\n/** @constructor */\nfunction Thingy() {\n\n    /** @access private */\n    var foo = 0;\n\n    /** @access protected */\n    this._bar = 1;\n\n    /** @access package */\n    this.baz = 2;\n\n    /** @access public */\n    this.pez = 3;\n\n}\n\n// same as...\n\n/** @constructor */\nfunction OtherThingy() {\n\n    /** @private */\n    var foo = 0;\n\n    /** @protected */\n    this._bar = 1;\n\n    /** @package */\n    this.baz = 2;\n\n    /** @public */\n    this.pez = 3;\n\n}\n```\n\n## Related Links\n\n- [@global](tags-global)\n- [@instance](tags-instance)\n- [@package](tags-package)\n- [@private](tags-private)\n- [@protected](tags-protected)\n- [@public](tags-public)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-access.html](https://jsdoc.app/tags-access.html)"
- name: '@alias'
  id: tags-alias
  summary: The @alias tag causes JSDoc to treat all references to a member as if the member had a different name
  description: "# @alias\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@alias <aliasNamepath>`\n\n## Overview\n\nThe @alias tag causes JSDoc to treat all references to a member as if the member had a different name. This tag is especially useful if you define a class within an inner function; in this case, you can use the @alias tag to tell JSDoc how the class is exposed in your app.\n\nWhile the @alias tag may sound similar to the @name tag, these tags behave very differently. The @name tag tells JSDoc to ignore any code associated with the comment. For example, when JSDoc processes the following code, it ignores the fact that the comment for `bar` is attached to a function:\n\n``` js\n/**\n * Bar function.\n * @name bar\n */\nfunction foo() {}\n```\n\nThe @alias tag tells JSDoc to pretend that Member A is actually named Member B. For example, when JSDoc processes the following code, it recognizes that `foo` is a function, then renames `foo` to `bar` in the documentation:\n\n``` js\n/**\n * Bar function.\n * @alias bar\n */\nfunction foo() {}\n```\n\n## Examples\n\nSuppose you are using a class framework that expects you to pass in a constructor function when you define a class. You can use the @alias tag to tell JSDoc how the class will be exposed in your app.\n\nIn the following example, the @alias tag tells JSDoc to treat the anonymous function as if it were the constructor for the class \"trackr.CookieManager\". Within the function, JSDoc interprets the `this` keyword relative to trackr.CookieManager, so the \"value\" method has the namepath \"trackr.CookieManager#value\".\n\nUsing @alias with an anonymous constructor function\n\n``` js\nKlass('trackr.CookieManager',\n\n    /**\n     * @class\n     * @alias trackr.CookieManager\n     * @param {Object} kv\n     */\n    function(kv) {\n        /** The value. */\n        this.value = kv;\n    }\n\n);\n```\n\nYou can also use the @alias tag with members that are created within an immediately invoked function expression (IIFE). The @alias tag tells JSDoc that these members are exposed outside of the IIFE's scope.\n\nUsing @alias for static members of a namespace\n\n``` js\n/** @namespace */\nvar Apple = {};\n\n(function(ns) {\n    /**\n     * @namespace\n     * @alias Apple.Core\n     */\n    var core = {};\n\n    /** Documented as Apple.Core.seed */\n    core.seed = function() {};\n\n    ns.Core = core;\n})(Apple);\n```\n\nFor members that are defined within an object literal, you can use the @alias tag as an alternative to the [@lends](tags-lends) tag.\n\nUsing @alias for an object literal\n\n``` js\n// Documenting objectA with @alias\n\nvar objectA = (function() {\n\n    /**\n     * Documented as objectA\n     * @alias objectA\n     * @namespace\n     */\n    var x = {\n        /**\n         * Documented as objectA.myProperty\n         * @member\n         */\n        myProperty: 'foo'\n    };\n\n    return x;\n})();\n\n// Documenting objectB with @lends\n\n/**\n * Documented as objectB\n * @namespace\n */\nvar objectB = (function() {\n\n    /** @lends objectB */\n    var x = {\n        /**\n         * Documented as objectB.myProperty\n         * @member\n         */\n        myProperty: 'bar'\n    };\n\n    return x;\n})();\n```\n\n## Related Links\n\n- [@name](tags-name)\n- [@lends](tags-lends)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-alias.html](https://jsdoc.app/tags-alias.html)"
- name: '@async'
  id: tags-async
  summary: The @async tag indicates that a function is asynchronous, meaning that it was declared using the syntax async function foo() {}. Do not use this tag for other types of asynchronous functions, such as functions that provide a callback
  description: "# @async\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Example](#example)\n\n## Syntax\n\n`@async`\n\n## Overview\n\nThe `@async` tag indicates that a function is [asynchronous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function), meaning that it was declared using the syntax `async function foo() {}`. Do not use this tag for other types of asynchronous functions, such as functions that provide a callback. This tag is available in JSDoc 3.5.0 and later.\n\nIn general, you do not need to use this tag, because JSDoc automatically detects asynchronous functions and identifies them in the generated documentation. However, if you are writing a virtual comment for an asynchronous function that does not appear in your code, you can use this tag to tell JSDoc that the function is asynchronous.\n\n## Example\n\nThe following example shows a virtual comment that uses the `@async` tag:\n\nVirtual comment with @async tag\n\n``` js\n/**\n * Download data from the specified URL.\n *\n * @async\n * @function downloadData\n * @param {string} url - The URL to download from.\n * @return {Promise<string>} The data from the URL.\n */\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-async.html](https://jsdoc.app/tags-async.html)"
- name: '@augments'
  id: tags-augments
  summary: The @augments or@extends tag indicates that a symbol inherits from, and potentially adds to, a parent symbol
  description: "# @augments\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@extends`\n\n## Syntax\n\n`@augments <namepath>`\n\n## Overview\n\nThe `@augments` or`@extends` tag indicates that a symbol inherits from, and potentially adds to, a parent symbol. You can use this tag to document both class-based and prototype-based inheritance.\n\nIn JSDoc 3.3.0 and later, if a symbol inherits from multiple parents, and both parents have identically named members, JSDoc uses the documentation from the last parent that is listed in the JSDoc comment.\n\n## Examples\n\nIn the following example, the `Duck` class is defined as a subclass of `Animal`. `Duck` instances have the same properties as `Animal` instances, as well as a `speak` method that is unique to `Duck` instances.\n\nDocumenting a class/subclass relationship\n\n``` js\n/**\n * @constructor\n */\nfunction Animal() {\n    /** Is this animal alive? */\n    this.alive = true;\n}\n\n/**\n * @constructor\n * @augments Animal\n */\nfunction Duck() {}\nDuck.prototype = new Animal();\n\n/** What do ducks say? */\nDuck.prototype.speak = function() {\n    if (this.alive) {\n        alert('Quack!');\n    }\n};\n\nvar d = new Duck();\nd.speak(); // Quack!\nd.alive = false;\nd.speak(); // (nothing)\n```\n\nIn the following example, the `Duck` class inherits from both the `Flyable` and `Bird` classes, both of which define a `takeOff` method. Because the documentation for `Duck` lists `@augments Bird` last, JSDoc automatically documents `Duck#takeOff` using the comment from `Bird#takeOff`.\n\nMultiple inheritance with duplicated method names\n\n``` js\n/**\n * Abstract class for things that can fly.\n * @class\n */\nfunction Flyable() {\n    this.canFly = true;\n}\n\n/** Take off. */\nFlyable.prototype.takeOff = function() {\n    // ...\n};\n\n/**\n * Abstract class representing a bird.\n * @class\n */\nfunction Bird(canFly) {\n    this.canFly = canFly;\n}\n\n/** Spread your wings and fly, if possible. */\nBird.prototype.takeOff = function() {\n    if (this.canFly) {\n        this._spreadWings()\n            ._run()\n            ._flapWings();\n    }\n};\n\n/**\n * Class representing a duck.\n * @class\n * @augments Flyable\n * @augments Bird\n */\nfunction Duck() {}\n\n// Described in the docs as \"Spread your wings and fly, if possible.\"\nDuck.prototype.takeOff = function() {\n    // ...\n};\n```\n\n## Related Links\n\n- [@borrows](tags-borrows)\n- [@class](tags-class)\n- [@mixes](tags-mixes)\n- [@mixin](tags-mixin)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-augments.html](https://jsdoc.app/tags-augments.html)"
- name: '@author'
  id: tags-author
  summary: The @author tag identifies the author of an item
  description: "# @author\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@author <name> [<emailAddress>]`\n\n## Overview\n\nThe @author tag identifies the author of an item. In JSDoc 3.2 and later, if the author's name is followed by an email address enclosed in angle brackets, the default template will convert the email address to a `mailto:` link.\n\n## Examples\n\nDocumenting the author of an item\n\n``` js\n/**\n * @author Jane Smith <jsmith@example.com>\n */\nfunction MyClass() {}\n```\n\n## Related Links\n\n- [@file](tags-file)\n- [@version](tags-version)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-author.html](https://jsdoc.app/tags-author.html)"
- name: '@borrows'
  id: tags-borrows
  summary: The @borrows tag allows you to add documentation for another symbol to your documentation
  description: "# @borrows\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Syntax\n\n`@borrows <that namepath> as <this namepath>`\n\n## Overview\n\nThe @borrows tag allows you to add documentation for another symbol to your documentation.\n\nThis tag would be useful if you had more than one way to reference a function, but you didn't want to duplicate the same documentation in two places.\n\n## Examples\n\nIn this example there exists documentation for the \"trstr\" function, but \"util.trim\" is just a reference to that same function by a different name.\n\nDuplicate the documentation for trstr as util.trim\n\n``` js\n/**\n * @namespace\n * @borrows trstr as trim\n */\nvar util = {\n    trim: trstr\n};\n\n/**\n * Remove whitespace from around a string.\n * @param {string} str\n */\nfunction trstr(str) {\n}\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-borrows.html](https://jsdoc.app/tags-borrows.html)"
- name: '@callback'
  id: tags-callback
  summary: The @callback tag provides information about a callback function that can be passed to other functions, including the callback's parameters and return value
  description: "# @callback\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@callback <namepath>`\n\n## Overview\n\nThe @callback tag provides information about a callback function that can be passed to other functions, including the callback's parameters and return value. You can include any of the tags that you can provide for a @method.\n\nOnce you define a callback, you can use it in the same way as a custom type defined with the @typedef tag. In particular, you can use the callback's name as a type name. This allows you to indicate that a function parameter should contain a certain type of callback.\n\nIf you want a callback to be displayed with the type definitions for a specific class, you can give the callback a namepath indicating that it is an inner function of that class. You can also define a global callback type that is referenced from multiple classes.\n\n## Examples\n\nDocumenting a class-specific callback\n\n``` js\n/**\n * @class\n */\nfunction Requester() {}\n\n/**\n * Send a request.\n * @param {Requester~requestCallback} cb - The callback that handles the response.\n */\nRequester.prototype.send = function(cb) {\n    // code\n};\n\n/**\n * This callback is displayed as part of the Requester class.\n * @callback Requester~requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n```\n\nDocumenting a global callback\n\n``` js\n/**\n * @class\n */\nfunction Requester() {}\n\n/**\n * Send a request.\n * @param {requestCallback} cb - The callback that handles the response.\n */\nRequester.prototype.send = function(cb) {\n    // code\n};\n\n/**\n * This callback is displayed as a global member.\n * @callback requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n```\n\n## Related Links\n\n- [@function](tags-function)\n- [@typedef](tags-typedef)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-callback.html](https://jsdoc.app/tags-callback.html)"
- name: '@class'
  id: tags-class
  summary: The @class tag marks a function as being a constructor, meant to be called with the new keyword to return an instance
  description: "# @class\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@constructor`\n\n## Syntax\n\n`@class [<type> <name>]`\n\n## Overview\n\nThe @class tag marks a function as being a constructor, meant to be called with the new keyword to return an instance.\n\n## Examples\n\nA function that constructs Person instances.\n\n``` js\n/**\n * Creates a new Person.\n * @class\n */\nfunction Person() {\n}\n\nvar p = new Person();\n```\n\n## Related Links\n\n[@constructs](tags-constructs)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-class.html](https://jsdoc.app/tags-class.html)"
- name: '@classdesc'
  id: tags-classdesc
  summary: The @classdesc tag is used to provide a description for a class, separate from the constructor function's description
  description: "# @classdesc\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@classdesc <some description>`\n\n## Overview\n\nThe @classdesc tag is used to provide a description for a class, separate from the constructor function's description. Use the @classdesc tag in combination with the [@class (or @constructor) tag](tags-class).\n\nThe functionality of the @classdesc tag in JSDoc 3 duplicates that of the @class in previous versions. As of version 3, the syntax and functionality of the @class tag now exactly matches the @constructor tag, and the @classdesc tag more explicitly communicates its purpose: to document a class's description.\n\n## Examples\n\nAs shown below, a class has places for two descriptions, one applies to the function itself, while the other applies to the class in general.\n\nA doclet with both a constructor function description and a class description\n\n``` js\n/**\n * This is a description of the MyClass constructor function.\n * @class\n * @classdesc This is a description of the MyClass class.\n */\nfunction MyClass() {\n}\n```\n\n## Related Links\n\n- [@class](tags-class)\n- [@description](tags-description)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-classdesc.html](https://jsdoc.app/tags-classdesc.html)"
- name: '@constant'
  id: tags-constant
  summary: The @constant tag is used to mark the documentation as belonging to a symbol that is a constant
  description: "# @constant\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@const`\n\n## Syntax\n\n`@constant [<type> <name>]`\n\n## Overview\n\nThe @constant tag is used to mark the documentation as belonging to a symbol that is a constant.\n\n## Examples\n\nIn this example we are documenting a string constant. Note that although the code is using the `const` keyword, this is not required by JSDoc. If your JavaScript host environment doesn't yet support constant declarations, the @const documentation can just as effectively be used on `var` declarations.\n\nA string constant representing the color red\n\n``` js\n/** @constant\n    @type {string}\n    @default\n*/\nconst RED = 'FF0000';\n\n/** @constant {number} */\nvar ONE = 1;\n```\n\nNote that the example provides the type in a @type tag. This is optional. Also the optional @default tag is used here too, this will automatically add whatever the assigned value is (for example 'FF0000') to the documentation.\n\n## Related Links\n\n- [@default](tags-default)\n- [@type](tags-type)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-constant.html](https://jsdoc.app/tags-constant.html)"
- name: '@constructs'
  id: tags-constructs
  summary: When using an object literal to define a class (for example with the @lends tag) the @constructs tag allows you to document that a particular function will be used to construct instances of that class
  description: "# @constructs\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Syntax](#syntax)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nWhen using an object literal to define a class (for example with the `@lends` tag) the `@constructs` tag allows you to document that a particular function will be used to construct instances of that class.\n\n## Syntax\n\n`@constructs [<name>]`\n\n## Examples\n\nUsing the @constructs tag with @lends\n\n``` js\nvar Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /** @constructs */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /** Describe me. */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\nWithout @lends you must provide the name of the class\n\n``` js\nmakeClass('Menu',\n    /**\n     * @constructs Menu\n     * @param items\n     */\n    function (items) { },\n    {\n        /** @memberof Menu# */\n        show: function(){\n        }\n    }\n);\n```\n\n## Related Links\n\n[@lends](tags-lends)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-constructs.html](https://jsdoc.app/tags-constructs.html)"
- name: '@copyright'
  id: tags-copyright
  summary: The @copyright tag is used to document copyright information in a file overview comment
  description: "# @copyright\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@copyright <some copyright text>`\n\n## Overview\n\nThe @copyright tag is used to document copyright information in a file overview comment. Use this tag in combination with the [@file tag](tags-file).\n\n## Examples\n\n``` js\n/**\n * @file This is my cool script.\n * @copyright Michael Mathews 2011\n */\n```\n\n## Related Links\n\n[@file](tags-file)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-copyright.html](https://jsdoc.app/tags-copyright.html)"
- name: '@default'
  id: tags-default
  summary: The @default tag allows you to document the assigned value of a symbol
  description: "# @default\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Synonyms\n\n`@defaultvalue`\n\n## Syntax\n\n`@default [<some value>]`\n\n## Overview\n\nThe @default tag allows you to document the assigned value of a symbol. You can supply this tag with a value yourself or you can allow JSDoc to automatically document the value from the source code -- only possible when the documented symbol is being assigned a single, simple value that is either: a string, a number, a boolean or null.\n\n## Examples\n\nIn this example a constant is documented. The value of the constant is `0xff0000`. By adding the @default tag this value is automatically added to the documentation.\n\nDocument the number value of a constant\n\n``` js\n/**\n *  @constant\n *  @default\n */\nconst RED = 0xff0000;\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-default.html](https://jsdoc.app/tags-default.html)"
- name: '@deprecated'
  id: tags-deprecated
  summary: The @deprecated tag marks a symbol in your code as being deprecated
  description: "# @deprecated\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Syntax\n\n`@deprecated [<some text>]`\n\n## Overview\n\nThe @deprecated tag marks a symbol in your code as being deprecated.\n\n## Examples\n\nYou can use the @deprecated tag by itself, or include some text that describes more about the deprecation.\n\nDocument that the old function has been deprecated since version 2.0\n\n``` js\n/**\n * @deprecated since version 2.0\n */\nfunction old() {\n}\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-deprecated.html](https://jsdoc.app/tags-deprecated.html)"
- name: '@description'
  id: tags-description
  summary: The @description tag allows you to provide a general description of the symbol you are documenting
  description: "# @description\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@desc`\n\n## Syntax\n\n`@description <some description>`\n\n## Overview\n\nThe @description tag allows you to provide a general description of the symbol you are documenting. The description may include HTML markup. It may also include Markdown formatting if the [Markdown plugin](plugins-markdown) is enabled.\n\n## Examples\n\nIf you describe a symbol at the very beginning of a JSDoc comment, before using any block tags, you may omit the @description tag.\n\nDescribing a symbol without the @description tag\n\n``` js\n/**\n * Add two numbers.\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction add(a, b) {\n    return a + b;\n}\n```\n\nBy using the @description tag, you can place the description anywhere in the JSDoc comment.\n\nDescribing a symbol with the @description tag\n\n``` js\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n * @description Add two numbers.\n */\nfunction add(a, b) {\n    return a + b;\n}\n```\n\nIf there's both a description at the beginning of a JSDoc comment and a description provided with the @description tag, the description specified with the @description will override the description at the beginning of the comment.\n\n## Related Links\n\n- [@classdesc](tags-classdesc)\n- [@summary](tags-summary)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-description.html](https://jsdoc.app/tags-description.html)"
- name: '@enum'
  id: tags-enum
  summary: The @enum tag documents a collection of static properties whose values are all of the same type
  description: "# @enum\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@enum [<type>]`\n\n## Overview\n\nThe @enum tag documents a collection of static properties whose values are all of the same type.\n\nAn enum is similar a collection of properties, except that an enum is documented in its own doc comment, whereas properties are documented within the doc comment of their container. Often this tag is used with @readonly, as an enum typically represents a collection of constants.\n\n## Examples\n\nThis shows how to document an object that represents a value with three possible states. Note that the enum members can have optional descriptions added if you wish. Also you can override the type, as is shown with \"MAYBE\" -- by default enum members will be documented with the same type as the enum itself.\n\nA numeric enum, representing three states\n\n``` js\n/**\n * Enum for tri-state values.\n * @readonly\n * @enum {number}\n */\nvar triState = {\n    /** The true value */\n    TRUE: 1,\n    FALSE: -1,\n    /** @type {boolean} */\n    MAYBE: true\n};\n```\n\n## Related Links\n\n[@property](tags-property)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-enum.html](https://jsdoc.app/tags-enum.html)"
- name: '@event'
  id: tags-event
  summary: The @event tag allows you to document an event that can be fired
  description: "# @event\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@event <className>#[event:]<eventName>`\n\n## Overview\n\nThe @event tag allows you to document an event that can be fired. A typical event is represented by an object with a defined set of properties.\n\nOnce you have used the @event tag to define a specific type of event, you can use the @fires tag to indicate that a method can fire that event. You can also use the @listens tag to indicate that a symbol listens for the event.\n\nJSDoc automatically prepends the namespace `event:` to each event's name. In general, you must include this namespace when you link to the event in another doclet. (The @fires tag is a notable exception; it allows you to omit the namespace.)\n\n**Note**: JSDoc 3 uses @event doclets to document the content of an event. In contrast, JSDoc Toolkit 2 used @event doclets to identify a function that can be fired when an event of the same name occurs.\n\n## Examples\n\nThe following examples show how to document an event in the `Hurl` class called `snowball`. The event contains an object with a single property.\n\nDocumenting a function call as an event\n\n``` js\n/**\n * Throw a snowball.\n *\n * @fires Hurl#snowball\n */\nHurl.prototype.snowball = function() {\n    /**\n     * Snowball event.\n     *\n     * @event Hurl#snowball\n     * @type {object}\n     * @property {boolean} isPacked - Indicates whether the snowball is tightly packed.\n     */\n    this.emit('snowball', {\n        isPacked: this._snowball.isPacked\n    });\n};\n```\n\nUsing a named doclet to document an event\n\n``` js\n/**\n * Throw a snowball.\n *\n * @fires Hurl#snowball\n */\nHurl.prototype.snowball = function() {\n    // ...\n};\n\n/**\n * Snowball event.\n *\n * @event Hurl#snowball\n * @type {object}\n * @property {boolean} isPacked - Indicates whether the snowball is tightly packed.\n */\n```\n\n## Related Links\n\n- [@fires](tags-fires)\n- [@listens](tags-listens)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-event.html](https://jsdoc.app/tags-event.html)"
- name: '@example'
  id: tags-example
  summary: Provide an example of how to use a documented item
  description: "# @example\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Overview\n\nProvide an example of how to use a documented item. The text that follows this tag will be displayed as highlighted code.\n\n## Examples\n\nNote that a doclet may have multiple examples.\n\nDocumenting examples\n\n``` js\n/**\n * Solves equations of the form a * x = b\n * @example\n * // returns 2\n * globalNS.method1(5, 10);\n * @example\n * // returns 3\n * globalNS.method(5, 15);\n * @returns {Number} Returns the value of x for the equation.\n */\nglobalNS.method1 = function (a, b) {\n    return b / a;\n};\n```\n\nExamples can also be captioned using `<caption></caption>` after the @example tag.\n\nDocumenting examples with a caption\n\n``` js\n/**\n * Solves equations of the form a * x = b\n * @example <caption>Example usage of method1.</caption>\n * // returns 2\n * globalNS.method1(5, 10);\n * @returns {Number} Returns the value of x for the equation.\n */\nglobalNS.method1 = function (a, b) {\n    return b / a;\n};\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-example.html](https://jsdoc.app/tags-example.html)"
- name: '@exports'
  id: tags-exports
  summary: 'In JSDoc 3.3.0 and later, <moduleName> may include the module: prefix'
  description: "# @exports\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@exports <moduleName>`\n\nIn JSDoc 3.3.0 and later, `<moduleName>` may include the `module:` prefix. In previous versions, you must omit this prefix.\n\n## Overview\n\nUse the @exports tag when documenting JavaScript modules that export anything other than the \"exports\" object or the \"module.exports\" property.\n\n## Examples\n\nIn modules where you are using the special \"exports\" object, the @exports tag is never needed. JSDoc automatically recognizes that this object's members are being exported. Similarly, JSDoc automatically recognizes the special \"module.exports\" property in Node.js modules.\n\nCommonJS module\n\n``` js\n/**\n * A module that says hello!\n * @module hello/world\n */\n\n/** Say hello. */\nexports.sayHello = function() {\n    return 'Hello world';\n};\n```\n\nNode.js module\n\n``` js\n/**\n * A module that shouts hello!\n * @module hello/world\n */\n\n/** SAY HELLO. */\nmodule.exports = function() {\n    return \"HELLO WORLD\";\n};\n```\n\nAMD module that exports an object literal\n\n``` js\ndefine(function() {\n\n    /**\n     * A module that whispers hello!\n     * @module hello/world\n     */\n    var exports = {};\n\n    /** say hello. */\n    exports.sayHello = function() {\n        return 'hello world';\n    };\n\n    return exports;\n});\n```\n\nAMD module that exports a constructor\n\n``` js\ndefine(function() {\n    /**\n     * A module that creates greeters.\n     * @module greeter\n     */\n\n    /**\n     * @constructor\n     * @param {string} subject - The subject to greet.\n     */\n    var exports = function(subject) {\n        this.subject = subject || 'world';\n    };\n\n    /** Say hello to the subject. */\n    exports.prototype.sayHello = function() {\n        return 'Hello ' + this.subject;\n    };\n\n    return exports;\n});\n```\n\nIf your module exports an object named anything other than \"exports\" or \"module.exports\", use the @exports tag to indicate what is being exported.\n\nAMD module that exports an object\n\n``` js\ndefine(function () {\n\n    /**\n     * A module that says hello!\n     * @exports hello/world\n     */\n    var ns = {};\n\n    /** Say hello. */\n    ns.sayHello = function() {\n        return 'Hello world';\n    };\n\n    return ns;\n});\n```\n\n## Related Links\n\n- [@module](tags-module)\n- [CommonJS Modules](howto-commonjs-modules)\n- [AMD Modules](howto-amd-modules)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-exports.html](https://jsdoc.app/tags-exports.html)"
- name: '@external'
  id: tags-external
  summary: The @external tag identifies a class, namespace, or module that is defined outside of the current package
  description: "# @external\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Synonyms\n\n`@host`\n\n## Syntax\n\n`@external <NameOfExternal>`\n\n## Overview\n\nThe `@external` tag identifies a class, namespace, or module that is defined outside of the current package. By using this tag, you can document your package's extensions to the external symbol, or you can provide information about the external symbol to your package's users. You can also refer to the external symbol's namepath in any other JSDoc tag.\n\nThe namepath for an external symbol always uses the prefix `external:` (for example, `{@link external:Foo}` or `@augments external:Foo`). However, you can omit this prefix from the `@external` tag.\n\n**Note**: You should only add the `@external` tag to the highest-level symbol that is defined outside of your project. See \"[Documenting a nested external symbol](#nested-external-symbol)\" for an example.\n\n## Examples\n\nThe following example shows how to document the built-in `String` object as an external, along with the new instance method `external:String#rot13`:\n\nDocumenting methods added to built-in classes\n\n``` js\n/**\n * The built in string object.\n * @external String\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String}\n */\n\n/**\n * Create a ROT13-encoded version of the string. Added by the `foo` package.\n * @function external:String#rot13\n * @example\n * var greeting = new String('hello world');\n * console.log( greeting.rot13() ); // uryyb jbeyq\n */\n```\n\nThe following example documents a new `starfairy` function added to the external namespace `\"jQuery.fn\"`:\n\nDocumenting external namespaces\n\n``` js\n/**\n * The jQuery plugin namespace.\n * @external \"jQuery.fn\"\n * @see {@link http://learn.jquery.com/plugins/|jQuery Plugins}\n */\n\n/**\n * A jQuery plugin to make stars fly around your home page.\n * @function external:\"jQuery.fn\".starfairy\n */\n```\n\nIn the following example, the class `EncryptedRequest` is documented as a subclass of the built-in class `XMLHttpRequest`:\n\nExtending an external.\n\n``` js\n/**\n * The built-in class for sending HTTP requests.\n * @external XMLHttpRequest\n * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n */\n\n/**\n * Extends the built-in `XMLHttpRequest` class to send data encoded with a secret key.\n * @class EncodedRequest\n * @extends external:XMLHttpRequest\n */\n```\n\nYou should only add the `@external` tag to the highest-level symbol that is defined outside of your project. In the following example, the documentation refers to the external class `security.TLS`. As a result, the `@external` tag is used to document the external namespace `external:security`, but *not* the external class `external:security.TLS`.\n\nDocumenting a nested external symbol\n\n``` js\n/**\n * External namespace for security-related classes.\n * @external security\n * @see http://example.org/docs/security\n */\n\n/**\n * External class that provides Transport Layer Security (TLS) encryption.\n * @class TLS\n * @memberof external:security\n */\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-external.html](https://jsdoc.app/tags-external.html)"
- name: '@file'
  id: tags-file
  summary: The @file tag provides a description for a file
  description: "# @file\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Overview](#overview)\n- [Example](#example)\n- [Related Links](#related-links)\n\n## Synonyms\n\n- `@fileoverview`\n- `@overview`\n\n## Overview\n\nThe @file tag provides a description for a file. Use the tag in a JSDoc comment at the beginning of the file.\n\n## Example\n\nFile description\n\n``` js\n/**\n * @file Manages the configuration settings for the widget.\n * @author Rowina Sanela \n */\n```\n\n## Related Links\n\n- [@author](tags-author)\n- [@version](tags-version)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-file.html](https://jsdoc.app/tags-file.html)"
- name: '@fires'
  id: tags-fires
  summary: The @fires tag indicates that a method can fire a specified type of event when it is called
  description: "# @fires\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@emits`\n\n## Syntax\n\n`@fires <className>#[event:]<eventName>`\n\n## Overview\n\nThe @fires tag indicates that a method can fire a specified type of event when it is called. Use the [@event tag](tags-event) to document the event's content.\n\n## Examples\n\nMethod that fires a 'drain' event\n\n``` js\n/**\n * Drink the milkshake.\n *\n * @fires Milkshake#drain\n */\nMilkshake.prototype.drink = function() {\n    // ...\n};\n```\n\n## Related Links\n\n- [@event](tags-event)\n- [@listens](tags-listens)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-fires.html](https://jsdoc.app/tags-fires.html)"
- name: '@function'
  id: tags-function
  summary: This marks an object as being a function, even though it may not appear to be one to the parser
  description: "# @function\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Synonyms\n\n- `@func`\n- `@method`\n\n## Syntax\n\n`@function [<FunctionName>]`\n\n## Overview\n\nThis marks an object as being a function, even though it may not appear to be one to the parser. It sets the doclet's [@kind](tags-kind) to 'function'.\n\n## Examples\n\nUsing @function to mark a function.\n\n``` js\n/** @function */\nvar paginate = paginateFactory(pages);\n```\n\nWithout the @function tag, the `paginate` object would be documented as a generic object (a [@member](tags-member)), because it isn't possible to tell from examining the line of code what type of value `paginate` will hold when it is run.\n\nUsing @function with a name.\n\n``` js\n/** @function myFunction */\n\n// the above is the same as:\n/** @function\n * @name myFunction */\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-function.html](https://jsdoc.app/tags-function.html)"
- name: '@generator'
  id: tags-generator
  summary: The @generator tag indicates that a function is a generator function, meaning that it was declared using the syntax function* foo() {}. This tag is available in JSDoc 3.5.0 and later
  description: "# @generator\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Example](#example)\n\n## Syntax\n\n`@generator`\n\n## Overview\n\nThe `@generator` tag indicates that a function is a [generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*), meaning that it was declared using the syntax `function* foo() {}`. This tag is available in JSDoc 3.5.0 and later.\n\nIn general, you do not need to use this tag, because JSDoc automatically detects generator functions and identifies them in the generated documentation. However, if you are writing a virtual comment for a generator function that does not appear in your code, you can use this tag to tell JSDoc that the function is a generator function.\n\n## Example\n\nThe following example shows a virtual comment that uses the `@generator` tag:\n\nVirtual comment with @generator tag\n\n``` js\n/**\n * Generate numbers in the Fibonacci sequence.\n *\n * @generator\n * @function fibonacci\n * @yields {number} The next number in the Fibonacci sequence.\n */\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-generator.html](https://jsdoc.app/tags-generator.html)"
- name: '@global'
  id: tags-global
  summary: The @global tag specifies that a symbol should appear in the documentation as a global symbol
  description: "# @global\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nThe @global tag specifies that a symbol should appear in the documentation as a *global* symbol. JSDoc ignores the symbol's actual scope within the source file. This tag is especially useful for symbols that are defined locally, then assigned to a global symbol.\n\n## Examples\n\nUse the @global tag to specify that a symbol should be documented as global.\n\nDocument an inner variable as a global\n\n``` js\n(function() {\n    /** @global */\n    var foo = 'hello foo';\n\n    this.foo = foo;\n}).apply(window);\n```\n\n## Related Links\n\n- [@inner](tags-inner)\n- [@instance](tags-instance)\n- [@memberof](tags-memberof)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-global.html](https://jsdoc.app/tags-global.html)"
- name: '@hideconstructor'
  id: tags-hideconstructor
  summary: The @hideconstructor tag tells JSDoc that the generated documentation should not display the constructor for a class
  description: "# @hideconstructor\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@hideconstructor`\n\n## Overview\n\nThe `@hideconstructor` tag tells JSDoc that the generated documentation should not display the constructor for a class. This tag is available in JSDoc 3.5.0 and later.\n\nFor pre-ES2015 classes, use this tag in combination with the [`@class` or `@constructor` tag](tags-class).\n\nFor ES2015 classes, use this tag in the JSDoc comment for your constructor. If your class does not have an explicit constructor, use this tag in the JSDoc comment for the class.\n\n## Examples\n\n@hideconstructor tag with pre-ES2015 class\n\n``` js\n/**\n * @classdesc Toaster singleton.\n * @class\n * @hideconstructor\n */\nvar Toaster = (function() {\n    var instance = null;\n\n    function Toaster() {}\n\n    /**\n     * Toast an item.\n     *\n     * @alias toast\n     * @memberof Toaster\n     * @instance\n     * @param {BreadyThing} item - The item to toast.\n     * @return {Toast} A toasted bready thing.\n     */\n    Toaster.prototype.toast = function(item) {};\n\n    return {\n        /**\n         * Get the Toaster instance.\n         *\n         * @alias Toaster.getInstance\n         * @returns {Toaster} The Toaster instance.\n         */\n        getInstance: function() {\n            if (instance === null) {\n                instance = new Toaster();\n                delete instance.constructor;\n            }\n\n            return instance;\n        }\n    };\n})();\n```\n\n@hideconstructor tag with ES2015 class\n\n``` js\n/**\n * Waffle iron singleton.\n */\nclass WaffleIron {\n    #instance = null;\n\n    /**\n     * Create the waffle iron.\n     *\n     * @hideconstructor\n     */\n    constructor() {\n        if (#instance) {\n            return #instance;\n        }\n\n        /**\n         * Cook a waffle.\n         *\n         * @param {Batter} batter - The waffle batter.\n         * @return {Waffle} The cooked waffle.\n         */\n        this.cook = function(batter) {};\n\n        this.#instance = this;\n    }\n\n    /**\n     * Get the WaffleIron instance.\n     *\n     * @return {WaffleIron} The WaffleIron instance.\n     */\n    getInstance() {\n        return new WaffleIron();\n    }\n}\n```\n\n## Related Links\n\n[@class](tags-class)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-hideconstructor.html](https://jsdoc.app/tags-hideconstructor.html)"
- name: '@ignore'
  id: tags-ignore
  summary: The @ignore tag indicates that a symbol in your code should never appear in the documentation
  description: "# @ignore\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Overview\n\nThe `@ignore` tag indicates that a symbol in your code should never appear in the documentation. This tag takes precedence over all others.\n\nFor most JSDoc templates, including the default template, the `@ignore` tag has the following effects:\n\n- If you use the `@ignore` tag with the `@class` or `@module` tag, the entire class or module will be omitted from the documentation.\n- If you use the `@ignore` tag with the `@namespace` tag, you must also add the `@ignore` tag to any child classes and namespaces. Otherwise, your documentation will show the child classes and namespaces, but with incomplete names.\n\n## Examples\n\nIn the following example, `Jacket` and `Jacket#color` will not appear in the documentation.\n\nClass with `@ignore` tag\n\n``` js\n/**\n * @class\n * @ignore\n */\nfunction Jacket() {\n    /** The jacket's color. */\n    this.color = null;\n}\n```\n\nIn the following example, the `Clothes` namespace contains a `Jacket` class. The `@ignore` tag must be added to both `Clothes` and `Clothes.Jacket`. `Clothes`, `Clothes.Jacket`, and `Clothes.Jacket#color` will not appear in the documentation.\n\nNamespace with child class\n\n``` js\n/**\n * @namespace\n * @ignore\n */\nvar Clothes = {\n    /**\n     * @class\n     * @ignore\n     */\n    Jacket: function() {\n        /** The jacket's color. */\n        this.color = null;\n    }\n};\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-ignore.html](https://jsdoc.app/tags-ignore.html)"
- name: '@implements'
  id: tags-implements
  summary: The @implements tag indicates that a symbol implements an interface
  description: "# @implements\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@implements {typeExpression}`\n\n## Overview\n\nThe `@implements` tag indicates that a symbol implements an interface.\n\nAdd the `@implements` tag to the top-level symbol that implements the interface (for example, a constructor function). You do not need to add the `@implements` tag to each member of the implementation (for example, the implementation's instance methods).\n\nIf you do not document one of the symbols in the implementation, JSDoc will automatically use the interface's documentation for that symbol.\n\n## Examples\n\nIn the following example, the `TransparentColor` class implements the `Color` interface and adds a `TransparentColor#rgba` method.\n\nUsing the @implements tag\n\n``` js\n/**\n * Interface for classes that represent a color.\n *\n * @interface\n */\nfunction Color() {}\n\n/**\n * Get the color as an array of red, green, and blue values, represented as\n * decimal numbers between 0 and 1.\n *\n * @returns {Array<number>} An array containing the red, green, and blue values,\n * in that order.\n */\nColor.prototype.rgb = function() {\n    throw new Error('not implemented');\n};\n\n/**\n * Class representing a color with transparency information.\n *\n * @class\n * @implements {Color}\n */\nfunction TransparentColor() {}\n\n// inherits the documentation from `Color#rgb`\nTransparentColor.prototype.rgb = function() {\n    // ...\n};\n\n/**\n * Get the color as an array of red, green, blue, and alpha values, represented\n * as decimal numbers between 0 and 1.\n *\n * @returns {Array<number>} An array containing the red, green, blue, and alpha\n * values, in that order.\n */\nTransparentColor.prototype.rgba = function() {\n    // ...\n};\n```\n\n## Related Links\n\n[@interface](tags-interface)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-implements.html](https://jsdoc.app/tags-implements.html)"
- name: '@inheritdoc'
  id: tags-inheritdoc
  summary: The @inheritdoc tag indicates that a symbol should inherit its documentation from its parent class
  description: "# @inheritdoc\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nThe `@inheritdoc` tag indicates that a symbol should inherit its documentation from its parent class. Any other tags that you include in the JSDoc comment will be ignored.\n\nThis tag is provided for compatibility with [Closure Compiler](https://developers.google.com/closure/compiler/). By default, if you do not add a JSDoc comment to a symbol, the symbol will inherit documentation from its parent.\n\nThe presence of the `@inheritdoc` tag implies the presence of the [`@override` tag](tags-override).\n\n## Examples\n\nThe following example shows how a class can indicate that it inherits documentation from its parent class:\n\nClass that inherits from a parent class\n\n``` js\n/**\n * @classdesc Abstract class representing a network connection.\n * @class\n */\nfunction Connection() {}\n\n/**\n * Open the connection.\n */\nConnection.prototype.open = function() {\n    // ...\n};\n\n\n/**\n * @classdesc Class representing a socket connection.\n * @class\n * @augments Connection\n */\nfunction Socket() {}\n\n/** @inheritdoc */\nSocket.prototype.open = function() {\n    // ...\n};\n```\n\nYou can get the same result by omitting the JSDoc comment from `Socket#open`:\n\nInheriting documentation without the `@inheritdoc` tag\n\n``` js\n/**\n * @classdesc Abstract class representing a network connection.\n * @class\n */\nfunction Connection() {}\n\n/**\n * Open the connection.\n */\nConnection.prototype.open = function() {\n    // ...\n};\n\n\n/**\n * @classdesc Class representing a socket connection.\n * @class\n * @augments Connection\n */\nfunction Socket() {}\n\nSocket.prototype.open = function() {\n    // ...\n};\n```\n\n## Related Links\n\n[@override](tags-override)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-inheritdoc.html](https://jsdoc.app/tags-inheritdoc.html)"
- name: '@inner'
  id: tags-inner
  summary: Using the @inner tag will mark a symbol as an inner member of its parent symbol
  description: "# @inner\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nUsing the @inner tag will mark a symbol as an inner member of its parent symbol. This means it can be referred to by \"Parent~Child\".\n\nUsing @inner will override a doclet's default scope (unless it is in the global scope, in which case it will remain global).\n\n## Examples\n\nUsing @inner to make a virtual doclet an inner member\n\n``` js\n/** @namespace MyNamespace */\n/**\n * myFunction is now MyNamespace~myFunction.\n * @function myFunction\n * @memberof MyNamespace\n * @inner\n */\n```\n\nNote that in the above we could have used \"@function MyNamespace~myFunction\" instead of the @memberof and @inner tags.\n\nUsing @inner\n\n``` js\n/** @namespace */\nvar MyNamespace = {\n    /**\n     * foo is now MyNamespace~foo rather than MyNamespace.foo.\n     * @inner\n     */\n    foo: 1\n};\n```\n\nIn the above example, we use @inner to force a member of a namespace to be documented as an inner member (by default, it would be a static member). This means that `foo` now has the longname `MyNamespace~foo` instead of `MyNamespace.foo`.\n\n## Related Links\n\n- [@global](tags-global)\n- [@instance](tags-instance)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-inner.html](https://jsdoc.app/tags-inner.html)"
- name: '@instance'
  id: tags-instance
  summary: Using the @instance tag will mark a symbol as an instance member of its parent symbol
  description: "# @instance\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nUsing the @instance tag will mark a symbol as an instance member of its parent symbol. This means it can be referred to by \"Parent#Child\".\n\nUsing @instance will override a doclet's default scope (unless it is in the global scope, in which case it will remain global).\n\n## Examples\n\nThe following example is a longhand way of writing \"@function MyNamespace#myFunction\":\n\nUsing @instance to make a virtual doclet an instance member\n\n``` js\n/** @namespace MyNamespace */\n/**\n * myFunction is now MyNamespace#myFunction.\n * @function myFunction\n * @memberof MyNamespace\n * @instance\n */\n```\n\nMore usefully, you can use the @instance tag to override the scope that JSDoc infers. For example, you can indicate that a static member is used as an instance member:\n\nUsing @instance to identify an instance member\n\n``` js\n/** @namespace */\nvar BaseObject = {\n    /**\n     * foo is now BaseObject#foo rather than BaseObject.foo.\n     * @instance\n     */\n    foo: null\n};\n\n/** Generates BaseObject instances. */\nfunction fooFactory(fooValue) {\n    var props = { foo: fooValue };\n    return Object.create(BaseObject, props);\n}\n```\n\n## Related Links\n\n- [@global](tags-global)\n- [@inner](tags-inner)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-instance.html](https://jsdoc.app/tags-instance.html)"
- name: '@interface'
  id: tags-interface
  summary: The @interface tag marks a symbol as an interface that other symbols can implement
  description: "# @interface\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\nWith the JSDoc tag dictionary (enabled by default):\n\n`@interface [<name>]`\n\nWith the [Closure Compiler](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags) tag dictionary:\n\n`@interface`\n\n## Overview\n\nThe `@interface` tag marks a symbol as an interface that other symbols can implement. For example, your code might define a parent class whose methods and properties are stubbed out. You can add the `@interface` tag to the parent class to indicate that child classes must implement the parent class' methods and properties.\n\nAdd the `@interface` tag to the top-level symbol for the interface (for example, a constructor function). You do not need to add the `@interface` tag to each member of the interface (for example, the interface's instance methods).\n\nIf you are using the JSDoc tag dictionary (enabled by default), you can also define an interface with virtual comments, rather than by writing code for the interface. See \"[Virtual comments that define an interface](#virtual-comments)\" for an example.\n\n## Examples\n\nIn the following example, the `Color` function represents an interface that other classes can implement:\n\nUsing the @interface tag\n\n``` js\n/**\n * Interface for classes that represent a color.\n *\n * @interface\n */\nfunction Color() {}\n\n/**\n * Get the color as an array of red, green, and blue values, represented as\n * decimal numbers between 0 and 1.\n *\n * @returns {Array<number>} An array containing the red, green, and blue values,\n * in that order.\n */\nColor.prototype.rgb = function() {\n    throw new Error('not implemented');\n};\n```\n\nThe following example uses virtual comments, rather than code, to define the `Color` interface:\n\nVirtual comments that define an interface\n\n``` js\n/**\n * Interface for classes that represent a color.\n *\n * @interface Color\n */\n\n/**\n * Get the color as an array of red, green, and blue values, represented as\n * decimal numbers between 0 and 1.\n *\n * @function\n * @name Color#rgb\n * @returns {Array<number>} An array containing the red, green, and blue values,\n * in that order.\n */\n```\n\n## Related Links\n\n[@implements](tags-implements)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-interface.html](https://jsdoc.app/tags-interface.html)"
- name: '@kind'
  id: tags-kind
  summary: The @kind tag is used to document what kind of symbol is being documented (for example, a class or a module)
  description: "# @kind\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@kind <kindName>`\n\nwhere `<kindName>` is one of:\n\n- class\n- constant\n- event\n- external\n- file\n- function\n- member\n- mixin\n- module\n- namespace\n- typedef\n\n## Overview\n\nThe @kind tag is used to document what *kind* of symbol is being documented (for example, a class or a module). The *kind* of symbol differs from a symbol's *type* (for example, string or boolean).\n\nUsually you do not need the @kind tag, because the symbol's kind is determined by other tags in the doclet. For example, using the @class tag automatically implies \"@kind class\", and using the @namespace tag implies \"@kind namespace\".\n\n## Examples\n\nUsing @kind\n\n``` js\n// The following examples produce the same result:\n\n/**\n * A constant.\n * @kind constant\n */\nconst asdf = 1;\n\n/**\n * A constant.\n * @constant\n */\nconst asdf = 1;\n```\n\nIn the case of tags with conflicting kinds (for example, using both @module, which sets the kind to \"module\", and \"@kind constant\" which sets the kind to \"constant\"), the last tag determines the kind.\n\nConflicting @kind statements\n\n``` js\n/**\n * This will show up as a constant\n * @module myModule\n * @kind constant\n */\n\n/**\n * This will show up as a module.\n * @kind constant\n * @module myModule\n */\n```\n\n## Related Links\n\n[@type](tags-type)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-kind.html](https://jsdoc.app/tags-kind.html)"
- name: '@lends'
  id: tags-lends
  summary: The @lends tag allows you to document all the members of an object literal as if they were members of a symbol with the given name
  description: "# @lends\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@lends <namepath>`\n\n## Overview\n\nThe `@lends` tag allows you to document all the members of an object literal as if they were members of a symbol with the given name. You might want to do this if you are passing an object literal into a function that creates a named class from its members.\n\n## Examples\n\nIn this example, we want to use a helper function to make a class named `Person`, along with instance methods named `initialize` and `say`. This is similar to how some popular frameworks handle class creation.\n\nExample class\n\n``` js\n// We want to document this as being a class\nvar Person = makeClass(\n    // We want to document these as being methods\n    {\n        initialize: function(name) {\n            this.name = name;\n        },\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\nWithout any comments, JSDoc won't recognize that this code creates a `Person` class with two methods. To document the methods, we must use a `@lends` tag in a doc comment immediately before the object literal. The `@lends` tag tells JSDoc that all the member names of that object literal are being \"loaned\" to a variable named `Person`. We must also add comments to each of the methods.\n\nThe following example gets us closer to what we want:\n\nDocumented as static methods\n\n``` js\n/** @class */\nvar Person = makeClass(\n    /** @lends Person */\n    {\n        /**\n         * Create a `Person` instance.\n         * @param {string} name - The person's name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\nNow the functions named `initialize` and `say` will be documented, but they appear as static methods of the `Person` class. That is possibly what you meant, but in this case we want `initialize` and `say` to belong to the instances of the `Person` class. So we change things slightly by lending the methods to the class's prototype:\n\nDocumented as instance methods\n\n``` js\n/** @class */\nvar Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /**\n         * Create a `Person` instance.\n         * @param {string} name - The person's name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\nOne final step: Our class framework uses the loaned `initialize` function to construct `Person` instances, but a `Person` instance does not have its own `initialize` method. The solution is to add the `@constructs` tag to the loaned function. Remember to remove the `@class` tag as well, or else two classes will be documented.\n\nDocumented with a constructor\n\n``` js\nvar Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /**\n         * Create a `Person` instance.\n         * @constructs\n         * @param {string} name - The person's name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\n## Related Links\n\n- [@borrows](tags-borrows)\n- [@constructs](tags-constructs)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-lends.html](https://jsdoc.app/tags-lends.html)"
- name: '@license'
  id: tags-license
  summary: The @license tag identifies the software license that applies to any portion of your code
  description: "# @license\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Syntax\n\n`@license <identifier>`\n\n## Overview\n\nThe `@license` tag identifies the software license that applies to any portion of your code.\n\nYou can use any text to identify the license you are using. If your code uses a standard open-source license, consider using the appropriate identifier from the [Software Package Data Exchange (SPDX) License List](https://spdx.org/licenses/).\n\nSome JavaScript processing tools, such as Google's Closure Compiler, will automatically preserve any JSDoc comment that includes a `@license` tag. If you are using one of these tools, you may wish to add a standalone JSDoc comment that includes the `@license` tag, along with the entire text of the license, so that the license text will be included in generated JavaScript files.\n\n## Examples\n\nA module that is distributed under the Apache License 2.0\n\n``` js\n/**\n * Utility functions for the foo package.\n * @module foo/util\n * @license Apache-2.0\n */\n```\n\nA standalone JSDoc comment with the complete MIT license\n\n``` js\n/**\n * @license\n * Copyright (c) 2015 Example Corporation Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-license.html](https://jsdoc.app/tags-license.html)"
- name: '@listens'
  id: tags-listens
  summary: The @listens tag indicates that a symbol listens for the specified event
  description: "# @listens\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Example](#example)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@listens <eventName>`\n\n## Overview\n\nThe `@listens` tag indicates that a symbol listens for the specified event. Use the [`@event tag`](tags-event) to document the event's content.\n\n## Example\n\nThe following example shows how to document an event named `module:hurler~event:snowball`, as well as a method named `module:playground/monitor.reportThrowage` that listens for the event.\n\nDocumenting an event and its listener\n\n``` js\ndefine('hurler', [], function () {\n    /**\n     * Event reporting that a snowball has been hurled.\n     *\n     * @event module:hurler~snowball\n     * @property {number} velocity - The snowball's velocity, in meters per second.\n     */\n\n    /**\n     * Snowball-hurling module.\n     *\n     * @module hurler\n     */\n    var exports = {\n        /**\n         * Attack an innocent (or guilty) person with a snowball.\n         *\n         * @method\n         * @fires module:hurler~snowball\n         */\n        attack: function () {\n            this.emit('snowball', { velocity: 10 });\n        }\n    };\n\n    return exports;\n});\n\ndefine('playground/monitor', [], function () {\n    /**\n     * Keeps an eye out for snowball-throwers.\n     *\n     * @module playground/monitor\n     */\n    var exports = {\n        /**\n         * Report the throwing of a snowball.\n         *\n         * @method\n         * @param {module:hurler~event:snowball} e - A snowball event.\n         * @listens module:hurler~event:snowball\n         */\n        reportThrowage: function (e) {\n            this.log('snowball thrown: velocity ' + e.velocity);\n        }\n    };\n\n    return exports;\n});\n```\n\n## Related Links\n\n- [@event](tags-event)\n- [@fires](tags-fires)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-listens.html](https://jsdoc.app/tags-listens.html)"
- name: '@member'
  id: tags-member
  summary: The @member tag identifies any member that does not have a more specialized kind, such as "class", "function", or "constant". A member can optionally have a type as well as a name
  description: "# @member\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Synonyms\n\n`@var`\n\n## Syntax\n\n`@member [<type>] [<name>]`\n\n## Overview\n\nThe @member tag identifies any member that does not have a more specialized kind, such as \"class\", \"function\", or \"constant\". A member can optionally have a type as well as a name.\n\n## Examples\n\nUsing @member with Data#point\n\n``` js\n/** @class */\nfunction Data() {\n    /** @member {Object} */\n    this.point = {};\n}\n```\n\nHere is an example of using @var, a synonym of @member, to document a (virtual) variable 'foo'.\n\nUsing @var to document a virtual member\n\n``` js\n/**\n * A variable in the global namespace called 'foo'.\n * @var {number} foo\n */\n```\n\nThe above example is equivalent to the following:\n\n``` js\n/**\n * A variable in the global namespace called 'foo'.\n * @type {number}\n */\nvar foo;\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-member.html](https://jsdoc.app/tags-member.html)"
- name: '@memberof'
  id: tags-memberof
  summary: The @memberof tag identifies a member symbol that belongs to a parent symbol
  description: "# @memberof\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n- `@memberof <parentNamepath>`\n- `@memberof! <parentNamepath>`\n\n## Overview\n\nThe @memberof tag identifies a member symbol that belongs to a parent symbol.\n\nBy default, the @memberof tag documents member symbols as static members. For inner and instance members, you can use scoping punctuation after the namepath, or you can add the [@inner](tags-inner) or [@instance](tags-instance) tag.\n\nThe \"forced\" @memberof tag, @memberof!, forces the object to be documented as belonging to a specific parent even if it appears to have a different parent.\n\n## Examples\n\nIn the following example, the `hammer` function would normally be documented as a global function. That's because, in fact, it is a global function, but it is also a member of the `Tools` namespace, and that's how you wish to document it. The solution is to add a @memberof tag:\n\nUsing @memberof\n\n``` js\n/** @namespace */\nvar Tools = {};\n\n/** @memberof Tools */\nvar hammer = function() {\n};\n\nTools.hammer = hammer;\n```\n\nFor instance members of a class, use the syntax \"@memberof ClassName.prototype\" or \"@memberof ClassName#\". Alternatively, you can combine \"@memberof ClassName\" with the \"@instance\" tag.\n\nUsing @memberof with a class prototype\n\n``` js\n/** @class Observable */\ncreate(\n    'Observable',\n    {\n        /**\n         * This will be a static member, Observable.cache.\n         * @memberof Observable\n         */\n        cache: [],\n\n        /**\n         * This will be an instance member, Observable#publish.\n         * @memberof Observable.prototype\n         */\n        publish: function(msg) {},\n\n        /**\n         * This will also be an instance member, Observable#save.\n         * @memberof Observable#\n         */\n        save: function() {},\n\n        /**\n         * This will also be an instance member, Observable#end.\n         * @memberof Observable\n         * @instance\n         */\n        end: function() {}\n    }\n);\n```\n\nThe following example uses the forced @memberof tag, \"@memberof!\", to document a property of an object (Data#point) that is an instance member of a class (Data).\n\nWhen you use the @property tag to document a property, you cannot link to the property using its longname. We can force the property to be linkable by using \"@alias\" and \"@memberof!\" to tell JSDoc that Data#point.y should be documented as a member \"point.y\" of \"Data#\", rather than a member \"y\" of \"point\" of \"Data#\".\n\nUsing @memberof! for object properties\n\n``` js\n/** @class */\nfunction Data() {\n    /**\n     * @type {object}\n     * @property {number} y This will show up as a property of `Data#point`,\n     * but you cannot link to the property as {@link Data#point.y}.\n     */\n    this.point = {\n        /**\n         * The @alias and @memberof! tags force JSDoc to document the\n         * property as `point.x` (rather than `x`) and to be a member of\n         * `Data#`. You can link to the property as {@link Data#point.x}.\n         * @alias point.x\n         * @memberof! Data#\n         */\n        x: 0,\n        y: 1\n    };\n}\n```\n\n## Related Links\n\n[@name](tags-name)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-memberof.html](https://jsdoc.app/tags-memberof.html)"
- name: '@mixes'
  id: tags-mixes
  summary: The @mixes tag indicates that the current object mixes in all the members from OtherObjectPath, which is a @mixin
  description: "# @mixes\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@mixes <OtherObjectPath>`\n\n## Overview\n\nThe @mixes tag indicates that the current object mixes in all the members from `OtherObjectPath`, which is a [@mixin](tags-mixin).\n\n## Examples\n\nTo start, we document a mixin with the [@mixin](tags-mixin) tag:\n\nExample of a @mixin\n\n``` js\n/**\n * This provides methods used for event handling. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nvar Eventful = {\n    /**\n     * Register a handler function to be called whenever this event is fired.\n     * @param {string} eventName - Name of the event.\n     * @param {function(Object)} handler - The handler to call.\n     */\n    on: function(eventName, handler) {\n        // code...\n    },\n\n    /**\n     * Fire an event, causing all handlers for that event name to run.\n     * @param {string} eventName - Name of the event.\n     * @param {Object} eventData - The data provided to each handler.\n     */\n    fire: function(eventName, eventData) {\n        // code...\n    }\n};\n```\n\nNow we add a FormButton class and call a \"mix\" function that mixes all of the Eventful functions into FormButton, so that FormButton can also fire events and have listeners. We use the @mixes tag to indicate that FormButton mixes the Eventful functions.\n\nUsing the @mixes tag\n\n``` js\n/**\n * @constructor FormButton\n * @mixes Eventful\n */\nvar FormButton = function() {\n    // code...\n};\nFormButton.prototype.press = function() {\n  this.fire('press', {});\n}\nmix(Eventful).into(FormButton.prototype);\n```\n\n## Related Links\n\n- [@borrows](tags-borrows)\n- [@class](tags-class)\n- [@mixin](tags-mixin)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-mixes.html](https://jsdoc.app/tags-mixes.html)"
- name: '@mixin'
  id: tags-mixin
  summary: A mixin provides functionality that is intended to be added to other objects
  description: "# @mixin\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@mixin [<MixinName>]`\n\n## Overview\n\nA mixin provides functionality that is intended to be added to other objects. If desired, you can use the @mixin tag to indicate that an object is a mixin. You can then add the @mixes tag to objects that use the mixin.\n\n## Examples\n\nUsing @mixin\n\n``` js\n/**\n * This provides methods used for event handling. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nvar Eventful = {\n    /**\n     * Register a handler function to be called whenever this event is fired.\n     * @param {string} eventName - Name of the event.\n     * @param {function(Object)} handler - The handler to call.\n     */\n    on: function(eventName, handler) {\n        // code...\n    },\n\n    /**\n     * Fire an event, causing all handlers for that event name to run.\n     * @param {string} eventName - Name of the event.\n     * @param {Object} eventData - The data provided to each handler.\n     */\n    fire: function(eventName, eventData) {\n        // code...\n    }\n};\n```\n\n## Related Links\n\n- [@borrows](tags-borrows)\n- [@class](tags-class)\n- [@mixes](tags-mixes)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-mixin.html](https://jsdoc.app/tags-mixin.html)"
- name: '@module'
  id: tags-module
  summary: 'In JSDoc 3.3.0 and later, <moduleName> may include the module: prefix'
  description: "# @module\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@module [[{<type>}] <moduleName>]`\n\nIn JSDoc 3.3.0 and later, `<moduleName>` may include the `module:` prefix. In previous versions, you must omit this prefix.\n\nNote: If you provide a type, you *must* also provide a name.\n\n## Overview\n\nThe @module tag marks the current file as being its own module. All symbols in the file are assumed to be members of the module unless documented otherwise.\n\nLink to a module (e.g. within a [@link](tags-inline-link) or [@see](tags-see) tag) using \"module:moduleName\". For example, \"@module foo/bar\" can be linked to using \"{@link module:foo/bar}\".\n\nIf the module name is not provided, it is derived from the module's path and filename. For example, suppose I have a file `test.js`, located in the `src` directory, that contains the block comment `/** @module */`. Here are some scenarios for running JSDoc and the resulting module names for test.js:\n\nDerived module names if none is provided.\n\n``` \n# from src/\njsdoc ./test.js   # module name 'test'\n\n# from src's parent directory:\njsdoc src/test.js # module name 'src/test'\njsdoc -r src/     # module name 'test'\n```\n\n## Examples\n\nThe following example shows the namepaths that are used for symbols in a module. The first symbol is a module-private, or \"inner,\" variable--it can be only accessed within the module. The second symbol is a static function that is exported by the module.\n\nBasic @module use\n\n``` js\n/** @module myModule */\n\n/** will be module:myModule~foo */\nvar foo = 1;\n\n/** will be module:myModule.bar */\nvar bar = function() {};\n```\n\nWhen an exported symbol is defined as a member of `module.exports`, `exports`, or `this`, JSDoc infers that the symbol is a static member of the module.\n\nIn the following example, the Book class is documented as a static member, \"module:bookshelf.Book\", with one instance member, \"module:bookshelf.Book#title\".\n\nDefining exported symbols as a member of 'this'\n\n``` js\n/** @module bookshelf */\n/** @class */\nthis.Book = function (title) {\n    /** The title. */\n    this.title = title;\n};\n```\n\nIn the following example, the two functions have the namepaths \"module:color/mixer.blend\" and \"module:color/mixer.darken\".\n\nDefining exported symbols as a member of 'module.exports' or 'exports'\n\n``` js\n/** @module color/mixer */\nmodule.exports = {\n    /** Blend two colours together. */\n    blend: function (color1, color2) {}\n};\n/** Darkens a color. */\nexports.darken = function (color, shade) {};\n```\n\nSee [Documenting JavaScript Modules](howto-commonjs-modules) for further examples.\n\n## Related Links\n\n- [@exports](tags-exports)\n- [CommonJS Modules](howto-commonjs-modules)\n- [AMD Modules](howto-amd-modules)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-module.html](https://jsdoc.app/tags-module.html)"
- name: '@name'
  id: tags-name
  summary: The @name tag forces JSDoc to associate the remainder of the JSDoc comment with the given name, ignoring all surrounding code
  description: "# @name\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@name <namePath>`\n\n## Overview\n\nThe @name tag forces JSDoc to associate the remainder of the JSDoc comment with the given name, ignoring all surrounding code. This tag is best used in \"virtual comments\" for symbols that are not readily visible in the code, such as methods that are generated at runtime.\n\nWhen you use the @name tag, you must provide additional tags that tell JSDoc what kind of symbol you are documenting; whether the symbol is a member of another symbol; and so on. If you do not provide this information, the symbol will not be documented correctly.\n\n**Warning**: By using the @name tag, you are telling JSDoc to *ignore the surrounding code* and treat your documentation comment in isolation. In many cases, it is best to use the [@alias tag](tags-alias) instead, which changes a symbol's name in the documentation but preserves other information about the symbol.\n\n## Examples\n\nThe following example shows how to use the @name tag to document a function that JSDoc would not normally recognize.\n\nUsing the @name tag\n\n``` js\n/**\n * @name highlightSearchTerm\n * @function\n * @global\n * @param {string} term - The search term to highlight.\n */\neval(\"window.highlightSearchTerm = function(term) {};\")\n```\n\n## Related Links\n\n- [Using namepaths with JSDoc 3](about-namepaths)\n- [@alias](tags-alias)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-name.html](https://jsdoc.app/tags-name.html)"
- name: '@namespace'
  id: tags-namespace
  summary: The @namespace tag indicates that an object creates a namespace for its members
  description: "# @namespace\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@namespace [[{<type>}] <SomeName>]`\n\n## Overview\n\nThe @namespace tag indicates that an object creates a namespace for its members. You can also write a virtual JSDoc comment that defines a namespace used by your code.\n\nIf a namespace is defined by a symbol other than an object literal, you can include a type expression along with the @namespace tag. If the @namespace tag includes a type, it must also include a name.\n\nYou may need to document a namespace whose name includes unusual characters, such as \"#\" or \"!\". In these cases, when you document or link to the namespace, you must add quotation marks around the portion of the namespace that includes unusual characters. See the examples below for details.\n\n## Examples\n\nUsing the @namespace tag with an object\n\n``` js\n/**\n * My namespace.\n * @namespace\n */\nvar MyNamespace = {\n    /** documented as MyNamespace.foo */\n    foo: function() {},\n    /** documented as MyNamespace.bar */\n    bar: 1\n};\n```\n\nUsing the @namespace tag for virtual comments\n\n``` js\n/**\n * A namespace.\n * @namespace MyNamespace\n */\n\n/**\n * A function in MyNamespace (MyNamespace.myFunction).\n * @function myFunction\n * @memberof MyNamespace\n */\n```\n\nIf a @namespace includes a symbol whose name has unusual characters, you must enclose the symbol's name in double quotes. If the symbol's name already contains one or more double quotes, escape the double quotes with a leading backslash (\\\\.\n\nUsing the @namespace tag with unusual member names\n\n``` js\n/** @namespace window */\n\n/**\n * Shorthand for the alert function.\n * Refer to it as {@link window.\"!\"} (note the double quotes).\n */\nwindow[\"!\"] = function(msg) { alert(msg); };\n```\n\n## Related Links\n\n[@module](tags-module)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-namespace.html](https://jsdoc.app/tags-namespace.html)"
- name: '@override'
  id: tags-override
  summary: The @override tag indicates that a symbol overrides a symbol with the same name in a parent class
  description: "# @override\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Example](#example)\n- [Related Links](#related-links)\n\n## Overview\n\nThe `@override` tag indicates that a symbol overrides a symbol with the same name in a parent class.\n\nThis tag is provided for compatibility with [Closure Compiler](https://developers.google.com/closure/compiler/). By default, JSDoc automatically identifies symbols that override a parent.\n\nIf your JSDoc comment includes the [`@inheritdoc` tag](tags-inheritdoc), you do not need to include the `@override` tag. The presence of the `@inheritdoc` tag implies the presence of the `@override` tag.\n\n## Example\n\nThe following example shows how to indicate that a method overrides a method in its parent class:\n\nMethod that overrides a parent\n\n``` js\n/**\n * @classdesc Abstract class representing a network connection.\n * @class\n */\nfunction Connection() {}\n\n/**\n * Open the connection.\n */\nConnection.prototype.open = function() {\n    // ...\n};\n\n\n/**\n * @classdesc Class representing a socket connection.\n * @class\n * @augments Connection\n */\nfunction Socket() {}\n\n/**\n * Open the socket.\n * @override\n */\nSocket.prototype.open = function() {\n    // ...\n};\n```\n\n## Related Links\n\n[@inheritdoc](tags-inheritdoc)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-override.html](https://jsdoc.app/tags-override.html)"
- name: '@package'
  id: tags-package
  summary: The @package tag marks a symbol as package-private
  description: "# @package\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\nWith the JSDoc tag dictionary (enabled by default):\n\n`@package`\n\nWith the [Closure Compiler](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags) tag dictionary:\n\n`@package [{typeExpression}]`\n\n## Overview\n\nThe `@package` tag marks a symbol as package-private. Typically, this tag indicates that a symbol is available only to code in the same directory as the source file for this symbol. This tag is available in JSDoc 3.5.0 and later.\n\nBy default, symbols marked with the `@package` tag will appear in your documentation. In JSDoc 3.3.0 and later, you can use the [`-a/--access` command-line option](about-commandline) to change this behavior.\n\nThe `@package` tag is equivalent to `@access package`.\n\n## Examples\n\nIn the following example, the instance member `Thingy#_bar` appears in the generated documentation, but with an annotation indicating that it is package-private:\n\nUsing the @package tag\n\n``` js\n/** @constructor */\nfunction Thingy() {\n    /** @package */\n    this._bar = 1;\n}\n```\n\n## Related Links\n\n- [@access](tags-access)\n- [@global](tags-global)\n- [@instance](tags-instance)\n- [@private](tags-private)\n- [@protected](tags-protected)\n- [@public](tags-public)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-package.html](https://jsdoc.app/tags-package.html)"
- name: '@param'
  id: tags-param
  summary: The @param tag provides the name, type, and description of a function parameter
  description: "# @param\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Overview](#overview)\n- [Examples](#examples)\n  - [Names, types, and descriptions](#names-types-and-descriptions)\n  - [Parameters with properties](#parameters-with-properties)\n  - [Optional parameters and default values](#optional-parameters-and-default-values)\n  - [Multiple types and repeatable parameters](#multiple-types-and-repeatable-parameters)\n  - [Callback functions](#callback-functions)\n- [Related Links](#related-links)\n\n## Synonyms\n\n- `@arg`\n- `@argument`\n\n## Overview\n\nThe `@param` tag provides the name, type, and description of a function parameter.\n\nThe `@param` tag requires you to specify the name of the parameter you are documenting. You can also include the parameter's type, enclosed in curly brackets, and a description of the parameter.\n\nThe parameter type can be a built-in JavaScript type, such as `string` or `Object`, or a [JSDoc namepath](about-namepaths) to another symbol in your code. If you have written documentation for the symbol at that namepath, JSDoc will automatically link to the documentation for that symbol. You can also use a type expression to indicate, for example, that a parameter is not nullable or can accept any type; see the [`@type` tag documentation](tags-type) for details.\n\nIf you provide a description, you can make the JSDoc comment more readable by inserting a hyphen before the description. Be sure to include a space before and after the hyphen.\n\n## Examples\n\n### Names, types, and descriptions\n\nThe following examples show how to include names, types, and descriptions in a `@param` tag.\n\nName only\n\n``` js\n/**\n * @param somebody\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\nName and type\n\n``` js\n/**\n * @param {string} somebody\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\nName, type, and description\n\n``` js\n/**\n * @param {string} somebody Somebody's name.\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\nYou can add a hyphen before the description to make it more readable. Be sure to include a space before and after the hyphen.\n\nName, type, and description, with a hyphen before the description\n\n``` js\n/**\n * @param {string} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\n### Parameters with properties\n\nIf a parameter is expected to have a specific property, you can document that property by providing an additional `@param` tag. For example, if an `employee` parameter is expected to have `name` and `department` properties, you can document it as follows:\n\nDocumenting a parameter's properties\n\n``` js\n/**\n * Assign the project to an employee.\n * @param {Object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nProject.prototype.assign = function(employee) {\n    // ...\n};\n```\n\nIf a parameter is destructured without an explicit name, you can give the object an appropriate one and document its properties.\n\nDocumenting a destructuring parameter\n\n``` js\n/**\n * Assign the project to an employee.\n * @param {Object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nProject.prototype.assign = function({ name, department }) {\n    // ...\n};\n```\n\nYou can also combine this syntax with JSDoc's syntax for array parameters. For example, if multiple employees can be assigned to a project:\n\nDocumenting properties of values in an array\n\n``` js\n/**\n * Assign the project to a list of employees.\n * @param {Object[]} employees - The employees who are responsible for the project.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].department - The employee's department.\n */\nProject.prototype.assign = function(employees) {\n    // ...\n};\n```\n\n### Optional parameters and default values\n\nThe following examples show how to indicate that a parameter is optional and has a default value.\n\nAn optional parameter (using JSDoc syntax)\n\n``` js\n/**\n * @param {string} [somebody] - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n```\n\nAn optional parameter (using Google Closure Compiler syntax)\n\n``` js\n/**\n * @param {string=} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n```\n\nAn optional parameter and default value\n\n``` js\n/**\n * @param {string} [somebody=John Doe] - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n```\n\n### Multiple types and repeatable parameters\n\nThe following examples show how to use type expressions to indicate that a parameter can accept multiple types (or any type), and that a parameter can be provided more than once. See the [`@type` tag documentation](tags-type) for details about the type expressions that JSDoc supports.\n\nAllows one type OR another type (type union)\n\n``` js\n/**\n * @param {(string|string[])} [somebody=John Doe] - Somebody's name, or an array of names.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    } else if (Array.isArray(somebody)) {\n        somebody = somebody.join(', ');\n    }\n    alert('Hello ' + somebody);\n}\n```\n\nAllows any type\n\n``` js\n/**\n * @param {*} somebody - Whatever you want.\n */\nfunction sayHello(somebody) {\n    console.log('Hello ' + JSON.stringify(somebody));\n}\n```\n\nAllows a parameter to be repeated\n\n``` js\n/**\n * Returns the sum of all numbers passed to the function.\n * @param {...number} num - A positive or negative number.\n */\nfunction sum(num) {\n    var i = 0, n = arguments.length, t = 0;\n    for (; i < n; i++) {\n        t += arguments[i];\n    }\n    return t;\n}\n```\n\n### Callback functions\n\nIf a parameter accepts a callback function, you can use the [`@callback` tag](tags-callback) to define a callback type, then include the callback type in the `@param` tag.\n\nParameters that accept a callback\n\n``` js\n/**\n * This callback type is called `requestCallback` and is displayed as a global symbol.\n *\n * @callback requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n\n/**\n * Does something asynchronously and executes the callback on completion.\n * @param {requestCallback} cb - The callback that handles the response.\n */\nfunction doSomethingAsynchronously(cb) {\n    // code\n};\n```\n\n## Related Links\n\n- [@callback](tags-callback)\n- [@returns](tags-returns)\n- [@type](tags-type)\n- [@typedef](tags-typedef)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-param.html](https://jsdoc.app/tags-param.html)"
- name: '@private'
  id: tags-private
  summary: The @private tag marks a symbol as private, or not meant for general use
  description: "# @private\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\nWith the JSDoc tag dictionary (enabled by default):\n\n`@private`\n\nWith the [Closure Compiler](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags) tag dictionary:\n\n`@private [{typeExpression}]`\n\n## Overview\n\nThe `@private` tag marks a symbol as private, or not meant for general use. Private members are not shown in the generated output unless JSDoc is run with the `-p/--private` command-line option. In JSDoc 3.3.0 and later, you can also use the [`-a/--access` command-line option](about-commandline) to change this behavior.\n\nThe `@private` tag is not inherited by child members. For example, if the `@private` tag is added to a namespace, members of the namespace can still appear in the generated output; because the namespace is private, the members' namepath will not include the namespace.\n\nThe `@private` tag is equivalent to `@access private`.\n\n## Examples\n\nIn the following example, `Documents` and `Documents.Newspaper` appear in the generated documentation, but not `Documents.Diary`.\n\nUsing the @private tag\n\n``` js\n/** @namespace */\nvar Documents = {\n    /**\n     * An ordinary newspaper.\n     */\n    Newspaper: 1,\n    /**\n     * My diary.\n     * @private\n     */\n    Diary: 2\n};\n```\n\n## Related Links\n\n- [@access](tags-access)\n- [@global](tags-global)\n- [@instance](tags-instance)\n- [@package](tags-package)\n- [@protected](tags-protected)\n- [@public](tags-public)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-private.html](https://jsdoc.app/tags-private.html)"
- name: '@property'
  id: tags-property
  summary: The @property tag is a way to easily document a list of static properties of a class, namespace or other object
  description: "# @property\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@prop`\n\n## Overview\n\nThe @property tag is a way to easily document a list of static properties of a class, namespace or other object.\n\nNormally JSDoc templates would create an entire new page to display information about each level of a nested namespace hierarchy. Sometimes what you really want is to just list all the properties, including nested properties, all together on the same page.\n\nNote that property tags must be used in doc comments for the thing that they are properties of, a namespace or a class for example. This tag is intended for simple collections of static properties, it does not allow you to provide @examples or similar complex information for each property, just the type, name and description.\n\n## Examples\n\nIn this example we have a namespace named \"config.\" We want all the information about the defaults property, including its nested values, to appear on the same page with the documentation for config.\n\nA namespace with defaults and nested default properties\n\n``` js\n/**\n * @namespace\n * @property {object}  defaults               - The default values for parties.\n * @property {number}  defaults.players       - The default number of players.\n * @property {string}  defaults.level         - The default level for the party.\n * @property {object}  defaults.treasure      - The default treasure.\n * @property {number}  defaults.treasure.gold - How much gold the party starts with.\n */\nvar config = {\n    defaults: {\n        players: 1,\n        level:   'beginner',\n        treasure: {\n            gold: 0\n        }\n    }\n};\n```\n\nThe following example shows how to indicate that a property is optional.\n\nA type definition with required and optional property\n\n``` \n/**\n * User type definition\n * @typedef {Object} User\n * @property {string} email\n * @property {string} [nickName]\n */\n```\n\n## Related Links\n\n- [@enum](tags-enum)\n- [@member](tags-member)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-property.html](https://jsdoc.app/tags-property.html)"
- name: '@protected'
  id: tags-protected
  summary: The @protected tag marks a symbol as protected
  description: "# @protected\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\nWith the JSDoc tag dictionary (enabled by default):\n\n`@protected`\n\nWith the [Closure Compiler](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags) tag dictionary:\n\n`@protected [{typeExpression}]`\n\n## Overview\n\nThe `@protected` tag marks a symbol as protected. Typically, this tag indicates that a symbol is only available, or should only be used, within the current module.\n\nBy default, symbols marked with the `@protected` tag will appear in your documentation. In JSDoc 3.3.0 and later, you can use the [`-a/--access` command-line option](about-commandline) to change this behavior.\n\nThe `@protected` tag is equivalent to `@access protected`.\n\n## Examples\n\nIn the following example, the instance member `Thingy#_bar` appears in the generated documentation, but with an annotation indicating that it is protected:\n\nUsing the @protected tag\n\n``` js\n/** @constructor */\nfunction Thingy() {\n    /** @protected */\n    this._bar = 1;\n}\n```\n\n## Related Links\n\n- [@access](tags-access)\n- [@global](tags-global)\n- [@instance](tags-instance)\n- [@package](tags-package)\n- [@private](tags-private)\n- [@public](tags-public)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-protected.html](https://jsdoc.app/tags-protected.html)"
- name: '@public'
  id: tags-public
  summary: The @public tag indicates that a symbol should be documented as if it were public
  description: "# @public\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nThe `@public` tag indicates that a symbol should be documented as if it were public.\n\nBy default, JSDoc treats all symbols as public, so using this tag does not normally affect the generated documentation. However, you may prefer to use the `@public` tag explicitly so it is clear to others that you intended to make the symbol public.\n\nIn JSDoc 3, the `@public` tag does *not* affect a symbol's scope. Use the [`@instance`](tags-instance), [`@static`](tags-static), and [`@global`](tags-global) tags to change a symbol's scope.\n\n## Examples\n\nUsing the @public tag\n\n``` js\n/**\n * The Thingy class is available to all.\n * @public\n * @class\n */\nfunction Thingy() {\n    /**\n     * The Thingy~foo member. Note that 'foo' is still an inner member\n     * of 'Thingy', in spite of the @public tag.\n     * @public\n     */\n    var foo = 0;\n}\n```\n\n## Related Links\n\n- [@access](tags-access)\n- [@global](tags-global)\n- [@instance](tags-instance)\n- [@package](tags-package)\n- [@private](tags-private)\n- [@protected](tags-protected)\n- [@static](tags-static)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-public.html](https://jsdoc.app/tags-public.html)"
- name: '@readonly'
  id: tags-readonly
  summary: The @readonly tag indicates that a symbol is intended to be read-only
  description: "# @readonly\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Overview\n\nThe @readonly tag indicates that a symbol is intended to be read-only. Note this is for the purpose of documentation only - JSDoc won't check whether you've *actually* treated the symbol as read-only in your code.\n\n## Examples\n\nUsing the @readonly tag\n\n``` js\n/**\n * A constant.\n * @readonly\n * @const {number}\n */\nconst FOO = 1;\n```\n\nUsing the @readonly tag with a getter\n\n``` js\n/**\n * Options for ordering a delicious slice of pie.\n * @namespace\n */\nvar pieOptions = {\n    /**\n     * Plain.\n     */\n    plain: 'pie',\n    /**\n     * A la mode.\n     * @readonly\n     */\n    get aLaMode() {\n        return this.plain + ' with ice cream';\n    }\n};\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-readonly.html](https://jsdoc.app/tags-readonly.html)"
- name: '@requires'
  id: tags-requires
  summary: The @requires tag allows you to document that a module is needed to use this code
  description: "# @requires\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Syntax\n\n`@requires <someModuleName>`\n\n## Overview\n\nThe @requires tag allows you to document that a module is needed to use this code. A JSDoc comment can have multiple @require tags. The module name can be specified as \"moduleName\" or \"module:moduleName\"; both forms will be interpreted as modules.\n\nJSDoc does not attempt to process the module that is being included. If you want the module to be included in the documentation, you must include the module in the list of JavaScript files to process.\n\n## Examples\n\nUsing the @requires tag\n\n``` js\n/**\n * This class requires the modules {@link module:xyzcorp/helper} and\n * {@link module:xyzcorp/helper.ShinyWidget#polish}.\n * @class\n * @requires module:xyzcorp/helper\n * @requires xyzcorp/helper.ShinyWidget#polish\n */\nfunction Widgetizer() {}\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-requires.html](https://jsdoc.app/tags-requires.html)"
- name: '@returns'
  id: tags-returns
  summary: The @returns tag documents the value that a function returns
  description: "# @returns\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@return`\n\n## Syntax\n\n`@returns [{type}] [description]`\n\n## Overview\n\nThe `@returns` tag documents the value that a function returns.\n\nIf you are documenting a generator function, use the [`@yields` tag](tags-yields) instead of this tag.\n\n## Examples\n\nReturn value with a type\n\n``` js\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction sum(a, b) {\n    return a + b;\n}\n```\n\nReturn value with a type and description\n\n``` js\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @returns {number} Sum of a and b\n */\nfunction sum(a, b) {\n    return a + b;\n}\n```\n\nReturn value with multiple types\n\n``` js\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @param {boolean} retArr If set to true, the function will return an array\n * @returns {(number|Array)} Sum of a and b or an array that contains a, b and the sum of a and b.\n */\nfunction sum(a, b, retArr) {\n    if (retArr) {\n        return [a, b, a + b];\n    }\n    return a + b;\n}\n```\n\nReturns a promise\n\n``` js\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @returns {Promise} Promise object represents the sum of a and b\n */\nfunction sumAsync(a, b) {\n    return new Promise(function(resolve, reject) {\n        resolve(a + b);\n    });\n}\n```\n\n## Related Links\n\n- [@param](tags-param)\n- [@yields](tags-yields)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-returns.html](https://jsdoc.app/tags-returns.html)"
- name: '@see'
  id: tags-see
  summary: The @see tag allows you to refer to another symbol or resource that may be related to the one being documented
  description: "# @see\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n- `@see <namepath>`\n- `@see <text>`\n\n## Overview\n\nThe @see tag allows you to refer to another symbol or resource that may be related to the one being documented. You can provide either a symbol's namepath or free-form text. If you provide a namepath, JSDoc's default template automatically converts the namepath to a link.\n\n## Examples\n\nUsing the @see tag\n\n``` js\n/**\n * Both of these will link to the bar function.\n * @see {@link bar}\n * @see bar\n */\nfunction foo() {}\n\n// Use the inline {@link} tag to include a link within a free-form description.\n/**\n * @see {@link foo} for further information.\n * @see {@link http://github.com|GitHub}\n */\nfunction bar() {}\n```\n\n## Related Links\n\n[{@link}](tags-inline-link)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-see.html](https://jsdoc.app/tags-see.html)"
- name: '@since'
  id: tags-since
  summary: The @since tag indicates that a class, method, or other symbol was added in a specific version
  description: "# @since\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@since <versionDescription>`\n\n## Overview\n\nThe @since tag indicates that a class, method, or other symbol was added in a specific version.\n\n## Examples\n\nUsing the @since tag\n\n``` js\n/**\n * Provides access to user information.\n * @since 1.0.1\n */\nfunction UserRecord() {}\n```\n\n## Related Links\n\n[@version](tags-version)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-since.html](https://jsdoc.app/tags-since.html)"
- name: '@static'
  id: tags-static
  summary: The @static tag indicates that a symbol is contained within a parent and can be accessed without instantiating the parent
  description: "# @static\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nThe @static tag indicates that a symbol is contained within a parent and can be accessed without instantiating the parent.\n\nUsing the @static tag will override a symbol's default scope, with one exception: Symbols in global scope will remain global.\n\n## Examples\n\nThe following example has the same effect as writing \"@function MyNamespace.myFunction\" and omitting the @memberof and @static tags:\n\nUsing @static in a virtual comment\n\n``` js\n/** @namespace MyNamespace */\n\n/**\n * @function myFunction\n * @memberof MyNamespace\n * @static\n */\n```\n\nThe following example forces a module's inner member to be documented as a static member:\n\nUsing @static to override the default scope\n\n``` js\n/** @module Rollerskate */\n\n/**\n * The 'wheel' variable is documented as Rollerskate.wheel\n * rather than Rollerskate~wheel.\n * @static\n */\nvar wheel = 1;\n```\n\n## Related Links\n\n- [@global](tags-global)\n- [@inner](tags-inner)\n- [@instance](tags-instance)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-static.html](https://jsdoc.app/tags-static.html)"
- name: '@summary'
  id: tags-summary
  summary: '@summary Summary goes here'
  description: "# @summary\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@summary Summary goes here.`\n\n## Overview\n\nThe @summary tag is a shorter version of the full description. It can be added to any doclet.\n\n## Examples\n\n``` js\n/**\n * A very long, verbose, wordy, long-winded, tedious, verbacious, tautological,\n * profuse, expansive, enthusiastic, redundant, flowery, eloquent, articulate,\n * loquacious, garrulous, chatty, extended, babbling description.\n * @summary A concise summary.\n */\nfunction bloviate() {}\n```\n\n## Related Links\n\n- [@classdesc](tags-classdesc)\n- [@description](tags-description)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-summary.html](https://jsdoc.app/tags-summary.html)"
- name: '@this'
  id: tags-this
  summary: The @this tag indicates what the this keyword refers to when used within another symbol
  description: "# @this\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@this <namePath>`\n\n## Overview\n\nThe @this tag indicates what the `this` keyword refers to when used within another symbol.\n\n## Examples\n\nIn the following example, the @this tag causes \"this.name\" to be documented as \"Greeter#name\" rather than a global symbol called \"name\".\n\n``` js\n/** @constructor */\nfunction Greeter(name) {\n    setName.apply(this, name);\n}\n\n/** @this Greeter */\nfunction setName(name) {\n    /** document me */\n    this.name = name;\n}\n```\n\n## Related Links\n\n[@memberof](tags-memberof)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-this.html](https://jsdoc.app/tags-this.html)"
- name: '@throws'
  id: tags-throws
  summary: The @throws tag allows you to document an error that a function might throw
  description: "# @throws\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Synonyms\n\n`@exception`\n\n## Syntax\n\n- `@throws free-form description`\n- `@throws {<type>}`\n- `@throws {<type>} free-form description`\n\n## Overview\n\nThe @throws tag allows you to document an error that a function might throw. You can include the @throws tag more than once in a single JSDoc comment.\n\n## Examples\n\nUsing the @throws tag with a type\n\n``` js\n/**\n * @throws {InvalidArgumentException}\n */\nfunction foo(x) {}\n```\n\nUsing the @throws tag with a description\n\n``` js\n/**\n * @throws Will throw an error if the argument is null.\n */\nfunction bar(x) {}\n```\n\nUsing the @throws tag with a type and description\n\n``` js\n/**\n * @throws {DivideByZero} Argument x must be non-zero.\n */\nfunction baz(x) {}\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-throws.html](https://jsdoc.app/tags-throws.html)"
- name: '@todo'
  id: tags-todo
  summary: '@todo text describing thing to do'
  description: "# @todo\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Syntax\n\n`@todo text describing thing to do.`\n\n## Overview\n\nThe @todo tag allows you to document tasks to be completed for some part of your code. You can use the @todo tag more than once in a single JSDoc comment.\n\n## Examples\n\nUsing the @todo tag\n\n``` js\n/**\n * @todo Write the documentation.\n * @todo Implement this function.\n */\nfunction foo() {\n    // write me\n}\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-todo.html](https://jsdoc.app/tags-todo.html)"
- name: '@tutorial'
  id: tags-tutorial
  summary: The @tutorial tag inserts a link to a tutorial file that is provided as part of the documentation
  description: "# @tutorial\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n``` \n@tutorial \n```\n\n## Overview\n\nThe `@tutorial` tag inserts a link to a tutorial file that is provided as part of the documentation. See the [tutorials overview](about-tutorials) for instructions on creating tutorials.\n\nYou can use the `@tutorial` tag more than once in a single JSDoc comment.\n\n## Examples\n\nIn the following example, the documentation for `MyClass` will link to the tutorials that have the identifiers `tutorial-1` and `tutorial-2`:\n\nUsing the @tutorial tag\n\n``` js\n/**\n * Description\n * @class\n * @tutorial tutorial-1\n * @tutorial tutorial-2\n */\nfunction MyClass() {}\n```\n\n## Related Links\n\n- [Tutorials](about-tutorials)\n- [{@tutorial}](tags-inline-tutorial)\n- [@see](tags-see)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-tutorial.html](https://jsdoc.app/tags-tutorial.html)"
- name: '@type'
  id: tags-type
  summary: The @type tag allows you to provide a type expression identifying the type of value that a symbol may contain, or the type of value returned by a function
  description: "# @type\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@type {typeName}`\n\n## Overview\n\nThe @type tag allows you to provide a type expression identifying the type of value that a symbol may contain, or the type of value returned by a function. You can also include type expressions with many other JSDoc tags, such as the [@param tag](tags-param).\n\nA type expression can include the JSDoc namepath to a symbol (for example, `myNamespace.MyClass`); a built-in JavaScript type (for example, `string`); or a combination of these. You can use any [Google Closure Compiler type expression](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#type-expressions), as well as several other formats that are specific to JSDoc.\n\nIf JSDoc determines that a type expression is invalid, it will display an error and stop running. You can turn this error into a warning by running JSDoc with the `--lenient` option.\n\n**Note**: Full support for Google Closure Compiler-style type expressions is available in JSDoc 3.2 and later. Earlier versions of JSDoc included partial support for Closure Compiler type expressions.\n\nEach type is specified by providing a type expression, using one of the formats described below. Where appropriate, JSDoc will automatically create links to the documentation for other symbols. For example, `@type {MyClass}` will link to the MyClass documentation if that symbol has been documented.\n\n[TABLE]\n\n## Examples\n\nExample\n\n``` js\n/** @type {(string|Array.)} */\nvar foo;\n/** @type {number} */\nvar bar = 1;\n```\n\nIn many cases, you can include a type expression as part of another tag, rather than including a separate @type tag in your JSDoc comment.\n\nType expressions can accompany many tags.\n\n``` js\n/**\n * @type {number}\n * @const\n */\nvar FOO = 1;\n\n// same as:\n\n/** @const {number} */\nvar FOO = 1;\n```\n\n## Related Links\n\n- [@callback](tags-callback)\n- [@typedef](tags-typedef)\n- [@param](tags-param)\n- [@property](tags-property)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-type.html](https://jsdoc.app/tags-type.html)"
- name: '@typedef'
  id: tags-typedef
  summary: The @typedef tag is useful for documenting custom types, particularly if you wish to refer to them repeatedly
  description: "# @typedef\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@typedef [<type>] <namepath>`\n\n## Overview\n\nThe @typedef tag is useful for documenting custom types, particularly if you wish to refer to them repeatedly. These types can then be used within other tags expecting a type, such as [@type](tags-type) or [@param](tags-param).\n\nUse the [@callback](tags-callback) tag to document the type of callback functions.\n\n## Examples\n\nThis example defines a union type for parameters that can contain either numbers or strings that represent numbers.\n\nUsing the @typedef tag\n\n``` js\n/**\n * A number, or a string containing a number.\n * @typedef {(number|string)} NumberLike\n */\n\n/**\n * Set the magic number.\n * @param {NumberLike} x - The magic number.\n */\nfunction setMagicNumber(x) {\n}\n```\n\nThis example defines a more complex type, an object with several properties, and sets its namepath so it will be displayed along with the class that uses the type. Because the type definition is not actually exposed by the class, it is customary to document the type definition as an inner member.\n\nUsing @typedef to document a complex type for a class\n\n``` js\n/**\n * The complete Triforce, or one or more components of the Triforce.\n * @typedef {Object} WishGranter~Triforce\n * @property {boolean} hasCourage - Indicates whether the Courage component is present.\n * @property {boolean} hasPower - Indicates whether the Power component is present.\n * @property {boolean} hasWisdom - Indicates whether the Wisdom component is present.\n */\n\n/**\n * A class for granting wishes, powered by the Triforce.\n * @class\n * @param {...WishGranter~Triforce} triforce - One to three {@link WishGranter~Triforce} objects\n * containing all three components of the Triforce.\n */\nfunction WishGranter(triforce) {}\n```\n\n## Related Links\n\n- [@callback](tags-callback)\n- [@param](tags-param)\n- [@type](tags-type)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-typedef.html](https://jsdoc.app/tags-typedef.html)"
- name: '@variation'
  id: tags-variation
  summary: Sometimes your code may include multiple symbols with the same longname
  description: "# @variation\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n`@variation <variationNumber>`\n\n## Overview\n\nSometimes your code may include multiple symbols with the same longname. For example, you might have both a global class and a top-level namespace called `Widget`. In cases such as these, what does \"{@link Widget}\" or \"@memberof Widget\" mean? The global namespace, or the global class?\n\nVariations help JSDoc distinguish between different symbols with the same longname. For example, if \"@variation 2\" is added to the JSDoc comment for the Widget class, \"{@link Widget(2)}\" will refer to the class, and \"{@link Widget}\" will refer to the namespace. Alternatively, you can include the variation when you specify the symbol's with tags such as [@alias](tags-alias) or [@name](tags-name) (for example, \"@alias Widget(2)\").\n\nYou can provide any value with the @variation tag, as long as the combination of the value and the longname results in a globally unique version of the longname. As a best practice, use a predictable pattern for choosing the values, which will make it easier for you to document your code.\n\n## Examples\n\nThe following example uses the @variation tag to distinguish between the Widget class and the Widget namespace.\n\nUsing the @variation tag\n\n``` js\n/**\n * The Widget namespace.\n * @namespace Widget\n */\n\n// you can also use '@class Widget(2)' and omit the @variation tag\n/**\n * The Widget class. Defaults to the properties in {@link Widget.properties}.\n * @class\n * @variation 2\n * @param {Object} props - Name-value pairs to add to the widget.\n */\nfunction Widget(props) {}\n\n/**\n * Properties added by default to a new {@link Widget(2)} instance.\n */\nWidget.properties = {\n    /**\n     * Indicates whether the widget is shiny.\n     */\n    shiny: true,\n    /**\n     * Indicates whether the widget is metallic.\n     */\n    metallic: true\n};\n```\n\n## Related Links\n\n- [@alias](tags-alias)\n- [@name](tags-name)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-variation.html](https://jsdoc.app/tags-variation.html)"
- name: '@version'
  id: tags-version
  summary: Documents the version of an item
  description: "# @version\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Overview\n\nDocuments the version of an item. The text following the @version tag will be used to denote the version of the item.\n\n## Examples\n\nUsing the @version tag\n\n``` js\n/**\n * Solves equations of the form a * x = b. Returns the value\n * of x.\n * @version 1.2.3\n * @tutorial solver\n */\nfunction solver(a, b) {\n    return b / a;\n}\n```\n\n## Related Links\n\n[@since](tags-since)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-version.html](https://jsdoc.app/tags-version.html)"
- name: '@yields'
  id: tags-yields
  summary: The @yields tag documents the value that is yielded by a generator function
  description: "# @yields\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n`@yield`\n\n## Syntax\n\n`@yields [{type}] [description]`\n\n## Overview\n\nThe `@yields` tag documents the value that is yielded by a generator function. This tag is available in JSDoc 3.5.0 and later.\n\nIf you are documenting a regular function, use the [`@returns` tag](tags-returns) instead of this tag.\n\n## Examples\n\n@yields tag with a type\n\n``` js\n/**\n * Generate the Fibonacci sequence of numbers.\n *\n * @yields {number}\n */\nfunction* fibonacci() {}\n```\n\n@yields tag with a type and description\n\n``` js\n/**\n * Generate the Fibonacci sequence of numbers.\n *\n * @yields {number} The next number in the Fibonacci sequence.\n */\nfunction* fibonacci() {}\n```\n\n## Related Links\n\n[@returns](tags-returns)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-yields.html](https://jsdoc.app/tags-yields.html)"
- name: About JSDoc plugins
  id: about-plugins
  summary: JSDoc executes plugins in the order that they are listed in the configuration file
  description: "# About JSDoc plugins\n\n## Table of Contents\n\n- [Creating and Enabling a Plugin](#creating-and-enabling-a-plugin)\n- [Authoring JSDoc 3 Plugins](#authoring-jsdoc-3-plugins)\n  - [Event Handlers](#event-handlers)\n  - [Tag Definitions](#tag-definitions)\n  - [Node Visitors](#node-visitors)\n- [Reporting Errors](#reporting-errors)\n\n## Creating and Enabling a Plugin\n\nThere are two steps required to create and enable a new JSDoc plugin:\n\n1.  Create a JavaScript module to contain your plugin code.\n2.  Include that module in the `plugins` array of [JSDoc's configuration file](about-configuring-jsdoc). You can specify an absolute or relative path. If you use a relative path, JSDoc searches for the plugin in the current working directory; the directory where the configuration file is located; and the JSDoc directory, in that order.\n\nFor example, if your plugin is defined in the `plugins/shout.js` file in the current working directory, you would add the string `plugins/shout` to the `plugins` array in your JSDoc configuration file:\n\nAdding a plugin to JSDoc's configuration file\n\n``` json\n{\n    \"plugins\": [\"plugins/shout\"]\n}\n```\n\nJSDoc executes plugins in the order that they are listed in the configuration file.\n\n## Authoring JSDoc 3 Plugins\n\nJSDoc 3's plugin system offers extensive control over the parsing process. A plugin can affect the parse results by doing any of the following:\n\n- Defining event handlers\n- Defining tags\n- Defining a visitor for abstract syntax tree nodes\n\n### Event Handlers\n\nAt the highest level, a plugin may register handlers for specific named events that JSDoc fires. JSDoc will pass an event object to the handler. Your plugin module should export a `handlers` object that contains your handler, like so:\n\nEvent-handler plugin for 'newDoclet' events\n\n``` js\nexports.handlers = {\n    newDoclet: function(e) {\n        // Do something when we see a new doclet\n    }\n};\n```\n\nJSDoc fires events in the same order as the underlying code.\n\nAn event-handler plugin can stop later plugins from running by setting a `stopPropagation` property on the event object (`e.stopPropagation = true`). A plugin can stop the event from firing by setting a `preventDefault` property (`e.preventDefault = true`).\n\n#### Event: parseBegin\n\nThe `parseBegin` event is fired before JSDoc starts loading and parsing the source files. Your plugin can control which files JSDoc will parse by modifying the event's contents.\n\n**Note**: This event is fired in JSDoc 3.2 and later.\n\nThe event object contains the following properties:\n\n- `sourcefiles`: An array of paths to source files that will be parsed.\n\n#### Event: fileBegin\n\nThe `fileBegin` event is fired when the parser is about to parse a file. Your plugin can use this event to trigger per-file initialization if necessary.\n\nThe event object contains the following properties:\n\n- `filename`: The name of the file.\n\n#### Event: beforeParse\n\nThe `beforeParse` event is fired before parsing has begun. Plugins can use this method to modify the source code that will be parsed. For instance, your plugin could add a JSDoc comment, or it could remove preprocessing tags that are not valid JavaScript.\n\nThe event object contains the following properties:\n\n- `filename`: The name of the file.\n- `source`: The contents of the file.\n\nBelow is an example that adds a virtual comment for a function to the source so that it will get parsed and added to the documentation. This might be done to document methods that will be available to users, but might not appear in the source code being documented, such as methods provided by an external superclass:\n\nExample\n\n``` js\nexports.handlers = {\n    beforeParse: function(e) {\n        var extraDoc = [\n            '/**',\n            ' * Function provided by a superclass.',\n            ' * @name superFunc',\n            ' * @memberof ui.mywidget',\n            ' * @function',\n            ' */'\n        ];\n        e.source += extraDoc.join('\\n');\n    }\n};\n```\n\n#### Event: jsdocCommentFound\n\nThe `jsdocCommentFound` event is fired whenever a JSDoc comment is found. The comment may or may not be associated with any code. You might use this event to modify the contents of a comment before it is processed.\n\nThe event object contains the following properties:\n\n- `filename`: The name of the file.\n- `comment`: The text of the JSDoc comment.\n- `lineno`: The line number on which the comment was found.\n- `columnno`: The column number on which the comment was found. Available in JSDoc 3.5.0 and later.\n\n#### Event: symbolFound\n\nThe `symbolFound` event is fired when the parser comes across a symbol in the code that may need to be documented. For example, the parser fires a `symbolFound` event for each variable, function, and object literal in a source file.\n\nThe event object contains the following properties:\n\n- `filename`: The name of the file.\n- `comment`: The text of the comment associated with the symbol, if any.\n- `id`: The unique ID of the symbol.\n- `lineno`: The line number on which the symbol was found.\n- `columnno`: The column number on which the symbol was found. Available in JSDoc 3.5.0 and later.\n- `range`: An array containing the numeric index of the first and last characters in the source file that are associated with the symbol.\n- `astnode`: The symbol's node from the abstract syntax tree.\n- `code`: Object with detailed information about the code. This object usually contains `name`, `type`, and `node` properties. The object might also have `value`, `paramnames`, or `funcscope` properties depending on the symbol.\n\n#### Event: newDoclet\n\nThe `newDoclet` event is the highest-level event. It is fired when a new doclet has been created. This means that a JSDoc comment or a symbol has been processed, and the actual doclet that will be passed to the template has been created.\n\nThe event object contains the following properties:\n\n- `doclet`: The new doclet that was created.\n\nThe doclet's properties can vary depending on the comment or symbol that the doclet represents. Some common properties you're likely to see include:\n\n- `comment`: The text of the JSDoc comment, or an empty string if the symbol is undocumented.\n- `meta`: Object that describes how the doclet relates to the source file (for example, the location within the source file).\n- `description`: A description of the symbol being documented.\n- `kind`: The kind of symbol being documented (for example, `class` or `function`).\n- `name`: The short name for the symbol (for example, `myMethod`).\n- `longname`: The fully qualified name, including memberof info (for example, `MyClass#myMethod`).\n- `memberof`: The module, namespace, or class that this symbol belongs to (for example, `MyClass`), or an empty string if the symbol does not have a parent.\n- `scope`: The scope of the symbol within its parent (for example, `global`, `static`, `instance`, or `inner`).\n- `undocumented`: Set to `true` if the symbol did not have a JSDoc comment.\n- `defaultvalue`: The default value for a symbol.\n- `type`: Object containing details about the symbol's type.\n- `params`: Object containing the list of parameters to a function.\n- `tags`: Object containing a list of tags that JSDoc did not recognize. Only available if `allowUnknownTags` is set to `true` in JSDoc's configuration file.\n\nTo see the doclets that JSDoc generates for your code, run JSDoc with the [`-X` command-line option](about-commandline).\n\nBelow is an example of a `newDoclet` handler that shouts the descriptions:\n\nExample\n\n``` js\nexports.handlers = {\n    newDoclet: function(e) {\n        // e.doclet will refer to the newly created doclet\n        // you can read and modify properties of that doclet if you wish\n        if (typeof e.doclet.description === 'string') {\n            e.doclet.description = e.doclet.description.toUpperCase();\n        }\n    }\n};\n```\n\n#### Event: fileComplete\n\nThe `fileComplete` event is fired when the parser has finished parsing a file. Your plugin could use this event to trigger per-file cleanup.\n\nThe event object contains the following properties:\n\n- `filename`: The name of the file.\n- `source`: The contents of the file.\n\n#### Event: parseComplete\n\nThe `parseComplete` event is fired after JSDoc has parsed all of the specified source files.\n\n**Note**: This event is fired in JSDoc 3.2 and later.\n\nThe event object contains the following properties:\n\n- `sourcefiles`: An array of paths to source files that were parsed.\n- `doclets`: An array of doclet objects. See the [`newDoclet` event](#event-newdoclet) for details about the properties that each doclet can contain. Available in JSDoc 3.2.1 and later.\n\n#### Event: processingComplete\n\nThe `processingComplete` event is fired after JSDoc updates the parse results to reflect inherited and borrowed symbols.\n\n**Note**: This event is fired in JSDoc 3.2.1 and later.\n\nThe event object contains the following properties:\n\n- `doclets`: An array of doclet objects. See the [`newDoclet` event](#event-newdoclet) for details about the properties that each doclet can contain.\n\n### Tag Definitions\n\nAdding tags to the tag dictionary is a mid-level way to affect documentation generation. Before a `newDoclet` event is triggered, JSDoc comment blocks are parsed to determine the description and any JSDoc tags that may be present. When a tag is found, if it has been defined in the tag dictionary, it is given a chance to modify the doclet.\n\nPlugins can define tags by exporting a `defineTags` function. That function will be passed a dictionary that can be used to define tags, like so:\n\nExample\n\n``` js\nexports.defineTags = function(dictionary) {\n    // define tags here\n};\n```\n\n#### The Dictionary\n\nThe dictionary provides the following methods:\n\n- `defineTag(title, opts)`: Used to define tags. The first parameter is the name of the tag (for example, `param` or `overview`). The second is an object containing options for the tag. You can include any of the following options; the default value for each option is `false`:\n  - `canHaveType (boolean)`: Set to `true` if the tag text can include a type expression (such as `{string}` in `@param {string} name - Description`).\n  - `canHaveName (boolean)`: Set to `true` if the tag text can include a name (such as `name` in `@param {string} name - Description`).\n  - `isNamespace (boolean)`: Set to `true` if the tag should be applied to the doclet's longname as a namespace. For example, the `@module` tag sets this option to `true`, and using the tag `@module myModuleName` results in the longname `module:myModuleName`.\n  - `mustHaveValue (boolean)`: Set to `true` if the tag must have a value (such as `TheName` in `@name TheName`).\n  - `mustNotHaveDescription (boolean)`: Set to `true` if the tag may have a value but must not have a description (such as `TheDescription` in `@tag {typeExpr} TheDescription`).\n  - `mustNotHaveValue (boolean)`: Set to `true` if the tag must not have a value.\n  - `onTagged (function)`: A callback function executed when the tag is found. The function is passed two parameters: the doclet and the tag object.\n- `lookUp(tagName)`: Retrieve a tag object by name. Returns the tag object, including its options, or `false` if the tag is not defined.\n- `isNamespace(tagName)`: Returns `true` if the tag is applied to a doclet's longname as a namespace.\n- `normalise(tagName)`: Returns the canonical name of a tag. For example, the `@const` tag is a synonym for `@constant`; as a result, if you call `normalise('const')`, it returns the string `constant`.\n- `normalize(tagName)`: Synonym for `normalise`. Available in JSDoc 3.3.0 and later.\n\nA tag's `onTagged` callback can modify the contents of the doclet or tag.\n\nDefining an onTagged callback\n\n``` js\ndictionary.defineTag('instance', {\n    onTagged: function(doclet, tag) {\n        doclet.scope = \"instance\";\n    }\n});\n```\n\nThe `defineTag` method returns a `Tag` object, which has a `synonym` method that can be used to declare a synonym for the tag.\n\nDefining a tag synonym\n\n``` js\ndictionary.defineTag('exception', { /* options for exception tag */ })\n    .synonym('throws');\n```\n\n### Node Visitors\n\nAt the lowest level, plugin authors can process each node in the abstract syntax tree (AST) by defining a node visitor that will visit each node. By using a node-visitor plugin, you can modify comments and trigger parser events for any arbitrary piece of code.\n\nPlugins can define a node visitor by exporting an `astNodeVisitor` object that contains a `visitNode` function, like so:\n\nExample\n\n``` js\nexports.astNodeVisitor = {\n    visitNode: function(node, e, parser, currentSourceName) {\n        // do all sorts of crazy things here\n    }\n};\n```\n\nThe function is called on each node with the following parameters:\n\n- `node`: The AST node. AST nodes are JavaScript objects that use the format defined by the [ESTree spec](https://github.com/estree/estree). You can use [AST Explorer](https://astexplorer.net/) to see the AST that will be created for your source code. As of version 3.5.0, JSDoc uses the current version of the [Babylon](https://github.com/babel/babylon) parser with all plugins enabled.\n- `e`: The event. If the node is one that the parser handles, the event object will already be populated with the same things described in the `symbolFound` event above. Otherwise, it will be an empty object on which to set various properties.\n- `parser`: The JSDoc parser instance.\n- `currentSourceName`: The name of the file being parsed.\n\n#### Making things happen\n\nThe primary reasons to implement a node visitor are to be able to document things that aren't normally documented (like function calls that create classes) or to auto generate documentation for code that isn't documented. For instance, a plugin might look for calls to a `_trigger` method since it knows that means an event is fired and then generate documentation for the event.\n\nTo make things happen, the `visitNode` function should modify properties of the event parameter. In general the goal is to construct a comment and then get an event to fire. After the parser lets all of the node visitors have a look at the node, it looks to see if the event object has a `comment` property and an `event` property. If it has both, the event named in the event property is fired. The event is usually `symbolFound` or `jsdocCommentFound`, but theoretically, a plugin could define its own events and handle them.\n\nAs with event-handler plugins, a node-visitor plugin can stop later plugins from running by setting a `stopPropagation` property on the event object (`e.stopPropagation = true`). A plugin can stop the event from firing by setting a `preventDefault` property (`e.preventDefault = true`).\n\n## Reporting Errors\n\nIf your plugin needs to report an error, use one of the following methods in the `jsdoc/util/logger` module:\n\n- `logger.warn`: Warn the user about a possible problem.\n- `logger.error`: Report an error from which the plugin can recover.\n- `logger.fatal`: Report an error that should cause JSDoc to stop running.\n\nUsing these methods creates a better user experience than simply throwing an error.\n\n**Note**: Do not use the `jsdoc/util/error` module to report errors. This module is deprecated and will be removed in a future version of JSDoc.\n\nReporting a non-fatal error\n\n``` js\nvar logger = require('jsdoc/util/logger');\n\nexports.handlers = {\n    newDoclet: function(e) {\n        // Your code here.\n\n        if (somethingBadHappened) {\n            logger.error('Oh, no, something bad happened!');\n        }\n    }\n};\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-plugins.html](https://jsdoc.app/about-plugins.html)"
- name: Command-line arguments to JSDoc
  id: about-commandline
  summary: where ... are paths to other files to generate documentation for
  description: "# Command-line arguments to JSDoc\n\n## Table of Contents\n\n- [Examples](#examples)\n- [Related Links](#related-links)\n\nAt its most basic level, JSDoc is used like so:\n\n``` \n/path/to/jsdoc yourSourceCodeFile.js anotherSourceCodeFile.js ...\n```\n\nwhere `...` are paths to other files to generate documentation for.\n\nAdditionally, one may provide the path to a [Markdown file](http://daringfireball.net/projects/markdown/) (ending in \".md\") or a file named \"README\", and this will be added to the documentation on the front page. See [these instructions](about-including-readme).\n\nJSDoc supports a number of command-line options, many of which have both long and short forms. Alternatively, the command-line options may be [specified in a configuration file](about-configuring-jsdoc) given to JSDoc. The command-line options are:\n\n| Option                                | Description                                                                                                                                                                                  |\n|---------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `-a <value>`, `--access <value>`      | Only display symbols with the given `access` property: `private`, `protected`, `public`, or `undefined`, or `all` for all access levels. By default, all except `private` symbols are shown. |\n| `-c <value>`, `--configure <value>`   | The path to a JSDoc [configuration file](about-configuring-jsdoc). Defaults to `conf.json` or `conf.json.EXAMPLE` in the directory where JSDoc is installed.                                 |\n| `-d <value>`, `--destination <value>` | The path to the output folder for the generated documentation. For JSDoc's built-in Haruki template, use `console` to dump data to the console. Defaults to `./out`.                         |\n| `--debug`                             | Log information that can help debug issues in JSDoc itself.                                                                                                                                  |\n| `-e <value>`, `--encoding <value>`    | Assume this encoding when reading all source files. Defaults to `utf8`.                                                                                                                      |\n| `-h`, `--help`                        | Display information about JSDoc's command-line options, then exit.                                                                                                                           |\n| `--match <value>`                     | Only run tests whose names contain `value`.                                                                                                                                                  |\n| `--nocolor`                           | When running tests, do not use color in the console output. On Windows, this option is enabled by default.                                                                                   |\n| `-p`, `--private`                     | Include symbols marked with the [`@private` tag](tags-private) in the generated documentation. By default, private symbols are not included.                                                 |\n| `-P`, `--package`                     | The `package.json` file that contains the project name, version, and other details. Defaults to the first `package.json` file found in the source paths.                                     |\n| `--pedantic`                          | Treat errors as fatal errors, and treat warnings as errors. Defaults to `false`.                                                                                                             |\n| `-q <value>`, `--query <value>`       | A query string to parse and store in the global variable `env.opts.query`. Example: `foo=bar&baz=true`.                                                                                      |\n| `-r`, `--recurse`                     | Recurse into subdirectories when scanning for source files and tutorials.                                                                                                                    |\n| `-R`, `--readme`                      | The `README.md` file to include in the generated documentation. Defaults to the first `README.md` file found in the source paths.                                                            |\n| `-t <value>`, `--template <value>`    | The path to the template to use for generating output. Defaults to `templates/default`, JSDoc's built-in default template.                                                                   |\n| `-T`, `--test`                        | Run JSDoc's test suite, and print the results to the console.                                                                                                                                |\n| `-u <value>`, `--tutorials <value>`   | Directory in which JSDoc should search for tutorials. If omitted, no tutorial pages will be generated. See the [tutorial instructions](about-tutorials) for more information.                |\n| `-v`, `--version`                     | Displays JSDoc's version number, then exits.                                                                                                                                                 |\n| `--verbose`                           | Log detailed information to the console as JSDoc runs. Defaults to `false`.                                                                                                                  |\n| `-X`, `--explain`                     | Dump all doclets to the console in JSON format, then exit.                                                                                                                                   |\n\n## Examples\n\nGenerate documentation for files in the `./src` directory, using the configuration file `/path/to/my/conf.json`, and save the output in the `./docs` directory:\n\n``` \n/path/to/jsdoc src -r -c /path/to/my/conf.json -d docs\n```\n\nRun all JSDoc tests whose names include the word `tag`, and log information about each test:\n\n``` \n/path/to/jsdoc -T --match tag --verbose\n```\n\n## Related Links\n\n[Configuring JSDoc with a configuration file](about-configuring-jsdoc)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-commandline.html](https://jsdoc.app/about-commandline.html)"
- name: Configuring JSDoc with a configuration file
  id: about-configuring-jsdoc
  summary: 3.5.0 and later
  description: "# Configuring JSDoc with a configuration file\n\n## Table of Contents\n\n- [Configuration file formats](#configuration-file-formats)\n- [Default configuration options](#default-configuration-options)\n- [Configuring plugins](#configuring-plugins)\n- [Specifying recursion depth](#specifying-recursion-depth)\n- [Specifying input files](#specifying-input-files)\n- [Specifying the source type](#specifying-the-source-type)\n- [Incorporating command-line options into the configuration file](#incorporating-command-line-options-into-the-configuration-file)\n- [Configuring tags and tag dictionaries](#configuring-tags-and-tag-dictionaries)\n- [Configuring templates](#configuring-templates)\n- [Related Links](#related-links)\n\n## Configuration file formats\n\nTo customize JSDoc's behavior, you can provide a configuration file to JSDoc in one of the following formats:\n\n- A JSON file. In JSDoc 3.3.0 and later, this file may include comments.\n- A CommonJS module that exports a single configuration object. This format is supported in JSDoc\n\n3.5.0 and later.\n\nTo run JSDoc with a configuration file, use the [`-c` command-line option](about-commandline) (for example, `jsdoc -c /path/to/conf.json` or `jsdoc -c /path/to/conf.js`).\n\nThe following examples show a simple configuration file that enables JSDoc's [Markdown plugin](plugins-markdown). JSDoc's configuration options are explained in detail in the following sections.\n\nJSON configuration file\n\n``` js\n{\n    \"plugins\": [\"plugins/markdown\"]\n}\n```\n\nJavaScript configuration file\n\n``` js\n'use strict';\n\nmodule.exports = {\n    plugins: ['plugins/markdown']\n};\n```\n\nFor a more comprehensive example of a JSON configuration file, see the file [`conf.json.EXAMPLE`](https://github.com/jsdoc3/jsdoc/blob/master/conf.json.EXAMPLE).\n\n## Default configuration options\n\nIf you do not specify a configuration file, JSDoc uses the following configuration options:\n\n``` js\n{\n    \"plugins\": [],\n    \"recurseDepth\": 10,\n    \"source\": {\n        \"includePattern\": \".+\\\\.js(doc|x)?$\",\n        \"excludePattern\": \"(^|\\\\/|\\\\\\\\)_\"\n    },\n    \"sourceType\": \"module\",\n    \"tags\": {\n        \"allowUnknownTags\": true,\n        \"dictionaries\": [\"jsdoc\",\"closure\"]\n    },\n    \"templates\": {\n        \"cleverLinks\": false,\n        \"monospaceLinks\": false\n    }\n}\n```\n\nThis means:\n\n- No plugins are loaded (`plugins`).\n- If recursion is enabled with the [`-r` command-line flag](about-commandline), JSDoc will search for files 10 levels deep (`recurseDepth`).\n- Only files ending in `.js`, `.jsdoc`, and `.jsx` will be processed (`source.includePattern`).\n- Any file starting with an underscore, or in a directory starting with an underscore, will be ignored (`source.excludePattern`).\n- JSDoc supports code that uses [ES2015 modules](howto-es2015-modules) (`sourceType`).\n- JSDoc allows you to use unrecognized tags (`tags.allowUnknownTags`).\n- Both standard JSDoc tags and [Closure Compiler tags](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags) are enabled (`tags.dictionaries`).\n- [Inline `{@link}` tags](tags-inline-link) are rendered in plain text (`templates.cleverLinks`, `templates.monospaceLinks`).\n\nThese options and others are explained in the following sections.\n\n## Configuring plugins\n\nTo enable plugins, add their paths (relative to the JSDoc folder) into the `plugins` array.\n\nFor example, the following JSON configuration file will enable the Markdown plugin, which converts Markdown-formatted text to HTML, and the \"summarize\" plugin, which autogenerates a summary for each doclet:\n\nJSON configuration file with plugins\n\n``` \n{\n    \"plugins\": [\n        \"plugins/markdown\",\n        \"plugins/summarize\"\n    ]\n}\n```\n\nSee the [plugin reference](about-plugins) for further information, and look in [JSDoc's `plugins` directory](https://github.com/jsdoc3/jsdoc/tree/master/plugins) for the plugins built into JSDoc.\n\nYou can configure the Markdown plugin by adding a `markdown` object to your configuration file. See [Configuring the Markdown Plugin](plugins-markdown) for details.\n\n## Specifying recursion depth\n\nThe `recurseDepth` option controls how many levels deep JSDoc will recursively search for source files and tutorials. This option is available in JSDoc 3.5.0 and later. This option is used only if you also specify the [`-r` command-line flag](about-commandline), which tells JSDoc to recursively search for input files.\n\n``` js\n{\n    \"recurseDepth\": 10\n}\n```\n\n## Specifying input files\n\nThe `source` set of options, in combination with paths given to JSDoc on the command line, determines the set of input files that JSDoc uses to generate documentation.\n\n``` js\n{\n    \"source\": {\n        \"include\": [ /* array of paths to files to generate documentation for */ ],\n        \"exclude\": [ /* array of paths to exclude */ ],\n        \"includePattern\": \".+\\\\.js(doc|x)?$\",\n        \"excludePattern\": \"(^|\\\\/|\\\\\\\\)_\"\n    }\n}\n```\n\n- `source.include`: An optional array of paths that contain files for which JSDoc should generate documentation. The paths given to JSDoc on the command line are combined with these paths. You can use the [`-r` command-line option](about-commandline) to recurse into subdirectories.\n- `source.exclude`: An optional array of paths that JSDoc should ignore. In JSDoc 3.3.0 and later, this array may include subdirectories of the paths in `source.include`.\n- `source.includePattern`: An optional string, interpreted as a regular expression. If present, all filenames must match this regular expression to be processed by JSDoc. By default, this option is set to \".+\\\\js(doc\\|x)?$\", meaning that only files with the extensions `.js`, `.jsdoc`, and `.jsx` will be processed.\n- `source.excludePattern`: An optional string, interpreted as a regular expression. If present, any file matching this regular expression will be ignored. By default, this option is set so that files beginning with an underscore (or anything under a directory beginning with an underscore) is ignored.\n\nThese options are interpreted in the following order:\n\n1.  Start with all paths given on the command line and in `source.include`.\n2.  For each file found in Step 1, if the regular expression `source.includePattern` is present, the filename must match it, or it is ignored.\n3.  For each file left from Step 2, if the regular expression `source.excludePattern` is present, any filename matching this regular expression is ignored.\n4.  For each file left from Step 3, if the file's path is in `source.exclude`, it is ignored.\n\nAll remaining files after these four steps are processed by JSDoc.\n\nAs an example, suppose you have the following file structure:\n\n``` \nmyProject/\n|- a.js\n|- b.js\n|- c.js\n|- _private\n|  |- a.js\n|- lib/\n   |- a.js\n   |- ignore.js\n   |- d.txt\n```\n\nIn addition, suppose your `conf.json` file looks like this example:\n\n``` js\n{\n    \"source\": {\n        \"include\": [\"myProject/a.js\", \"myProject/lib\", \"myProject/_private\"],\n        \"exclude\": [\"myProject/lib/ignore.js\"],\n        \"includePattern\": \".+\\\\.js(doc|x)?$\",\n        \"excludePattern\": \"(^|\\\\/|\\\\\\\\)_\"\n    }\n}\n```\n\nIf you run `jsdoc myProject/c.js -c /path/to/my/conf.json -r` from the file containing the `myProject` folder, JSDoc will generate documentation for the following files:\n\n- `myProject/a.js`\n- `myProject/c.js`\n- `myProject/lib/a.js`\n\nHere's why:\n\n1.  Given `source.include` and the paths given on the command line, JSDoc starts off with these files:\n    - `myProject/c.js` (from the command line)\n    - `myProject/a.js` (from `source.include`)\n    - `myProject/lib/a.js`, `myProject/lib/ignore.js`, `myProject/lib/d.txt` (from `source.include` and using the `-r` option)\n    - `myProject/_private/a.js` (from `source.include`)\n2.  JSDoc applies `source.includePattern`, leaving us with all of the above files *except* `myProject/lib/d.txt`, which does not end in `.js`, `.jsdoc`, or `.jsx`.\n3.  JSDoc applies `source.excludePattern`, which removes `myProject/_private/a.js`.\n4.  JSDoc applies `source.exclude`, which removes `myProject/lib/ignore.js`.\n\n## Specifying the source type\n\nThe `sourceType` option affects how JSDoc parses your JavaScript files. This option is available in JSDoc 3.5.0 and later. This option accepts the following values:\n\n- `module` (default): Use this value for most types of JavaScript files.\n- `script`: Use this value if JSDoc logs errors such as `Delete of an unqualified identifier in strict mode` when it parses your code.\n\n``` js\n{\n    \"sourceType\": \"module\"\n}\n```\n\n## Incorporating command-line options into the configuration file\n\nYou can put many of JSDoc's [command-line options](about-commandline) into the configuration file instead of specifying them on the command line. To do this, add the long names of the relevant options into an `opts` section of the configuration file, with the value set to the option's value.\n\nJSON configuration file with command-line options\n\n``` js\n{\n    \"opts\": {\n        \"template\": \"templates/default\",  // same as -t templates/default\n        \"encoding\": \"utf8\",               // same as -e utf8\n        \"destination\": \"./out/\",          // same as -d ./out/\n        \"recurse\": true,                  // same as -r\n        \"tutorials\": \"path/to/tutorials\", // same as -u path/to/tutorials\n    }\n}\n```\n\nBy using the `source.include` and `opts` options, you can put almost all of the arguments to JSDoc in a configuration file, so that the command line reduces to:\n\n``` \njsdoc -c /path/to/conf.json\n```\n\nWhen options are specified on the command line *and* in the configuration file, the command line takes precedence.\n\n## Configuring tags and tag dictionaries\n\nThe options in `tags` control which JSDoc tags are allowed and how each tag is interpreted.\n\n``` js\n{\n    \"tags\": {\n        \"allowUnknownTags\": true,\n        \"dictionaries\": [\"jsdoc\",\"closure\"]\n    }\n}\n```\n\nThe `tags.allowUnknownTags` property affects how JSDoc handles unrecognized tags. If you set this option to `false`, and JSDoc finds a tag that it does not recognize (for example, `@foo`), JSDoc logs a warning. By default, this option is set to `true`. In JSDoc 3.4.1 and later, you can also set this property to an array of tag names that JSDoc should allow (for example, `[\"foo\",\"bar\"]`).\n\nThe `tags.dictionaries` property controls which tags JSDoc recognizes, as well as how JSDoc interprets the tags that it recognizes. In JSDoc 3.3.0 and later, there are two built-in tag dictionaries:\n\n- `jsdoc`: Core JSDoc tags.\n- `closure`: [Closure Compiler tags](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#jsdoc-tags).\n\nBy default, both dictionaries are enabled. Also, by default, the `jsdoc` dictionary is listed first; as a result, if the `jsdoc` dictionary handles a tag differently than the `closure` dictionary, the `jsdoc` version of the tag takes precedence.\n\nIf you are using JSDoc with a Closure Compiler project, and you want to avoid using tags that Closure Compiler does not recognize, change the `tags.dictionaries` setting to `[\"closure\"]`. You can also change this setting to `[\"closure\",\"jsdoc\"]` if you want to allow core JSDoc tags, but you want to ensure that Closure Compiler-specific tags are interpreted as Closure Compiler would interpret them.\n\n## Configuring templates\n\nThe options in `templates` affect the appearance and content of generated documentation. Third-party templates may not implement all of these options. See [Configuring JSDoc's Default Template](about-configuring-default-template) for additional options that the default template supports.\n\n``` js\n{\n    \"templates\": {\n        \"cleverLinks\": false,\n        \"monospaceLinks\": false\n    }\n}\n```\n\nIf `templates.monospaceLinks` is true, all link text from the [inline `{@link}` tag](tags-inline-link) will be rendered in monospace.\n\nIf `templates.cleverLinks` is true, `{@link asdf}` will be rendered in normal font if `asdf` is a URL, and monospace otherwise. For example, `{@link http://github.com}` will render in plain text, but `{@link MyNamespace.myFunction}` will be in monospace.\n\nIf `templates.cleverLinks` is true, `templates.monospaceLinks` is ignored.\n\n## Related Links\n\n- [Command-line arguments to JSDoc](about-commandline)\n- [About JSDoc plugins](about-plugins)\n- [Using the Markdown plugin](plugins-markdown)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-configuring-jsdoc.html](https://jsdoc.app/about-configuring-jsdoc.html)"
- name: Configuring JSDoc's default template
  id: about-configuring-default-template
  summary: JSDoc's default template provides several options that you can use to customize the appearance and content of generated documentation
  description: "# Configuring JSDoc's default template\n\n## Table of Contents\n\n- [Generating pretty-printed source files](#generating-pretty-printed-source-files)\n- [Copying static files to the output directory](#copying-static-files-to-the-output-directory)\n- [Showing the current date in the page footer](#showing-the-current-date-in-the-page-footer)\n- [Showing longnames in the navigation column](#showing-longnames-in-the-navigation-column)\n- [Overriding the default template's layout file](#overriding-the-default-templates-layout-file)\n- [Related Links](#related-links)\n\nJSDoc's default template provides several options that you can use to customize the appearance and content of generated documentation.\n\nTo use these options, you must [create a configuration file](about-configuring-jsdoc) for JSDoc and set the appropriate options in the configuration file.\n\n## Generating pretty-printed source files\n\nBy default, JSDoc's default template generates pretty-printed versions of your source files. It also links to these pretty-printed files in the documentation.\n\nTo disable pretty-printed files, set the option `templates.default.outputSourceFiles` to `false`. Using this option also removes links to your source files from the documentation. This option is available in JSDoc 3.3.0 and later.\n\n## Copying static files to the output directory\n\nJSDoc's default template automatically copies a few static files, such as CSS stylesheets, to the output directory. In JSDoc 3.3.0 and later, you can tell the default template to copy additional static files to the output directory. For example, you might want to copy a directory of images to the output directory so you can display these images in your documentation.\n\nTo copy additional static files to the output directory, use the following options:\n\n- `templates.default.staticFiles.include`: An array of paths whose contents should be copied to the output directory. Subdirectories will be copied as well.\n- `templates.default.staticFiles.exclude`: An array of paths that should *not* be copied to the output directory.\n- `templates.default.staticFiles.includePattern`: A regular expression indicating which files to copy. If this property is not defined, all files will be copied.\n- `templates.default.staticFiles.excludePattern`: A regular expression indicating which files to skip. If this property is not defined, nothing will be skipped.\n\nCopying a directory of images to the output directory\n\nTo copy all of the static files in `./myproject/static` to the output directory:\n\n``` json\n{\n  \"templates\": {\n    \"default\": {\n      \"staticFiles\": {\n        \"include\": [\n            \"./myproject/static\"\n        ]\n      }\n    }\n  }\n}\n```\n\nIf your static files directory contains the file `./myproject/static/img/screen.png`, you can display the image in your docs by using the HTML tag `<img src=\"img/screen.png\">`.\n\n## Showing the current date in the page footer\n\nBy default, JSDoc's default template always shows the current date in the footer of the generated documentation. In JSDoc 3.3.0 and later, you can omit the current date by setting the option `templates.default.includeDate` to `false`.\n\n## Showing longnames in the navigation column\n\nBy default, JSDoc's default template shows a shortened version of each symbol's name in the navigation column. For example, the symbol `my.namespace.MyClass` would be displayed simply as `MyClass`. To show the complete longname instead, set the option `templates.default.useLongnameInNav` to `true`. This option is available in JSDoc 3.4.0 and later.\n\n## Overriding the default template's layout file\n\nThe default template uses a file named `layout.tmpl` to specify the header and footer for each page in the generated documentation. In particular, this file defines which CSS and JavaScript files are loaded for each page. In JSDoc 3.3.0 and later, you can specify your own `layout.tmpl` file to use, which allows you to load your own custom CSS and JavaScript files in addition to, or instead of, the standard files.\n\nTo use this feature, set the option `templates.default.layoutFile` to the path to your customized layout file. Relative paths are resolved against the current working directory; the path to the configuration file; and the JSDoc directory, in that order.\n\n## Related Links\n\n[Configuring JSDoc with a configuration file](about-configuring-jsdoc)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-configuring-default-template.html](https://jsdoc.app/about-configuring-default-template.html)"
- name: Getting Started with JSDoc 3
  id: about-getting-started
  summary: JSDoc 3 is an API documentation generator for JavaScript, similar to Javadoc or phpDocumentor
  description: "# Getting Started with JSDoc 3\n\n## Table of Contents\n\n- [Getting started](#getting-started)\n- [Adding documentation comments to your code](#adding-documentation-comments-to-your-code)\n- [Generating a website](#generating-a-website)\n\n## Getting started\n\nJSDoc 3 is an API documentation generator for JavaScript, similar to Javadoc or phpDocumentor. You add documentation comments directly to your source code, right alongside the code itself. The JSDoc tool will scan your source code and generate an HTML documentation website for you.\n\n## Adding documentation comments to your code\n\nJSDoc's purpose is to document the API of your JavaScript application or library. It is assumed that you will want to document things like modules, namespaces, classes, methods, method parameters, and so on.\n\nJSDoc comments should generally be placed immediately before the code being documented. Each comment must start with a `/**` sequence in order to be recognized by the JSDoc parser. Comments beginning with `/*`, `/***`, or more than 3 stars will be ignored. This is a feature to allow you to suppress parsing of comment blocks.\n\nThe simplest documentation is just a description\n\n``` js\n/** This is a description of the foo function. */\nfunction foo() {\n}\n```\n\nAdding a description is simple—just type the description you want in the documentation comment.\n\nSpecial \"JSDoc tags\" can be used to give more information. For example, if the function is a constructor for a class, you can indicate this by adding a `@constructor` tag.\n\nUse a JSDoc tag to describe your code\n\n``` js\n/**\n * Represents a book.\n * @constructor\n */\nfunction Book(title, author) {\n}\n```\n\nMore tags can be used to add more information. See the [home page](index#block-tags) for a complete list of tags that are recognized by JSDoc 3.\n\nAdding more information with tags\n\n``` js\n/**\n * Represents a book.\n * @constructor\n * @param {string} title - The title of the book.\n * @param {string} author - The author of the book.\n */\nfunction Book(title, author) {\n}\n```\n\n## Generating a website\n\nOnce your code is commented, you can use the JSDoc 3 tool to generate an HTML website from your source files.\n\nBy default, JSDoc uses the built-in \"default\" template to turn the documentation into HTML. You can edit this template to suit your own needs or create an entirely new template if that is what you prefer.\n\nRunning the documentation generator on the command line\n\n``` \njsdoc book.js\n```\n\nThis command will create a directory named `out/` in the current working directory. Within that directory, you will find the generated HTML pages.\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-getting-started.html](https://jsdoc.app/about-getting-started.html)"
- name: 'JSDoc: AMD Modules'
  id: howto-amd-modules
  summary: JSDoc 3 makes it possible to document modules that use the Asynchronous Module Definition (AMD) API, which is implemented by libraries such as RequireJS
  description: "# AMD Modules\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Module identifiers](#module-identifiers)\n- [Function that returns an object literal](#function-that-returns-an-object-literal)\n- [Function that returns another function](#function-that-returns-another-function)\n- [Module declared in a return statement](#module-declared-in-a-return-statement)\n- [Module object passed to a function](#module-object-passed-to-a-function)\n- [Multiple modules defined in one file](#multiple-modules-defined-in-one-file)\n- [Related Links](#related-links)\n\n## Overview\n\nJSDoc 3 makes it possible to document modules that use the [Asynchronous Module Definition (AMD) API](https://github.com/amdjs/amdjs-api/blob/master/AMD.md), which is implemented by libraries such as [RequireJS](http://requirejs.org/). This page explains how to document an AMD module for JSDoc, based on the coding conventions that your module uses.\n\nIf you're documenting CommonJS or Node.js modules, see [CommonJS Modules](howto-commonjs-modules) for instructions.\n\n## Module identifiers\n\nWhen you document an AMD module, you'll use an [`@exports` tag](tags-exports) or [`@module` tag](tags-module) to document the identifier that's passed to the `require()` function. For example, if users load the module by calling `require('my/shirt', /* callback */)`, you'll write a JSDoc comment that contains the tag `@exports my/shirt` or `@module my/shirt`. The examples below can help you decide which of these tags to use.\n\nIf you use the `@exports` or `@module` tag without a value, JSDoc will try to guess the correct module identifier based on the filepath.\n\nWhen you use a JSDoc [namepath](about-namepaths) to refer to a module from another JSDoc comment, you must add the prefix `module:`. For example, if you want the documentation for the module `my/pants` to link to the module `my/shirt`, you could use the [`@see` tag](tags-see) to document `my/pants` as follows:\n\n``` js\n/**\n * Pants module.\n * @module my/pants\n * @see module:my/shirt\n */\n```\n\nSimilarly, the namepath for each member of the module will start with `module:`, followed by the module name. For example, if your `my/pants` module exports a `Jeans` constructor, and `Jeans` has an instance method named `hem`, the instance method's longname is `module:my/pants.Jeans#hem`.\n\n## Function that returns an object literal\n\nIf you define your AMD module as a function that returns an object literal, use the [`@exports` tag](tags-exports) to document the module's name. JSDoc will automatically detect that the object's properties are members of the module.\n\nFunction that returns an object literal\n\n``` js\ndefine('my/shirt', function() {\n   /**\n    * A module representing a shirt.\n    * @exports my/shirt\n    */\n    var shirt = {\n        /** The module's `color` property. */\n        color: 'black',\n\n        /**\n         * Create a new Turtleneck.\n         * @class\n         * @param {string} size - The size (`XS`, `S`, `M`, `L`, `XL`, or `XXL`).\n         */\n        Turtleneck: function(size) {\n            /** The class's `size` property. */\n            this.size = size;\n        }\n    };\n\n    return shirt;\n});\n```\n\n## Function that returns another function\n\nIf you define your module as a function that exports another function, such as a constructor, you can use a standalone comment with a [`@module` tag](tags-module) to document the module. You can then use an [`@alias` tag](tags-alias) to tell JSDoc that the function uses the same longname as the module.\n\nFunction that returns a constructor\n\n``` js\n/**\n * A module representing a jacket.\n * @module my/jacket\n */\ndefine('my/jacket', function() {\n    /**\n     * Create a new jacket.\n     * @class\n     * @alias module:my/jacket\n     */\n    var Jacket = function() {\n        // ...\n    };\n\n    /** Zip up the jacket. */\n    Jacket.prototype.zip = function() {\n        // ...\n    };\n\n    return Jacket;\n});\n```\n\n## Module declared in a return statement\n\nIf you declare your module object in a function's `return` statement, you can use a standalone comment with a [`@module` tag](tags-module) to document the module. You can then add an [`@alias` tag](tags-alias) to tell JSDoc that the module object has the same longname as the module.\n\nModule declared in a return statement\n\n``` js\n/**\n * Module representing a shirt.\n * @module my/shirt\n */\n\ndefine('my/shirt', function() {\n    // Do setup work here.\n\n    return /** @alias module:my/shirt */ {\n        /** Color. */\n        color: 'black',\n        /** Size. */\n        size: 'unisize'\n    };\n});\n```\n\n## Module object passed to a function\n\nIf the module object is passed into the function that defines your module, you can document the module by adding an [`@exports` tag](tags-exports) to the function parameter. This pattern is supported in JSDoc 3.3.0 and later.\n\nModule object passed to a function\n\n``` js\ndefine('my/jacket', function(\n    /**\n     * Utility functions for jackets.\n     * @exports my/jacket\n     */\n    module) {\n\n    /**\n     * Zip up a jacket.\n     * @param {Jacket} jacket - The jacket to zip up.\n     */\n    module.zip = function(jacket) {\n        // ...\n    };\n});\n```\n\n## Multiple modules defined in one file\n\nIf you define more than one AMD module in a single JavaScript file, use the [`@exports` tag](tags-exports) to document each module object.\n\nMultiple AMD modules defined in one file\n\n``` js\n// one module\ndefine('html/utils', function() {\n    /**\n     * Utility functions to ease working with DOM elements.\n     * @exports html/utils\n     */\n    var utils = {\n        /**\n         * Get the value of a property on an element.\n         * @param {HTMLElement} element - The element.\n         * @param {string} propertyName - The name of the property.\n         * @return {*} The value of the property.\n         */\n        getStyleProperty: function(element, propertyName) { }\n    };\n\n    /**\n     * Determine if an element is in the document head.\n     * @param {HTMLElement} element - The element.\n     * @return {boolean} Set to `true` if the element is in the document head,\n     * `false` otherwise.\n     */\n    utils.isInHead = function(element) { }\n\n    return utils;\n    }\n);\n\n// another module\ndefine('tag', function() {\n    /** @exports tag */\n    var tag = {\n        /**\n         * Create a new Tag.\n         * @class\n         * @param {string} tagName - The name of the tag.\n         */\n        Tag: function(tagName) {\n            // ...\n        }\n    };\n\n    return tag;\n});\n```\n\n## Related Links\n\n- [Using namepaths with JSDoc 3](about-namepaths)\n- [@exports](tags-exports)\n- [@module](tags-module)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/howto-amd-modules.html](https://jsdoc.app/howto-amd-modules.html)"
- name: 'JSDoc: Block and inline tags'
  id: about-block-inline-tags
  summary: Block tags usually provide detailed information about your code, such as the parameters that a function accepts
  description: "# Block and inline tags\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Examples](#examples)\n\n## Overview\n\nJSDoc supports two different kinds of tags:\n\n- **Block tags**, which are at the top level of a JSDoc comment.\n- **Inline tags**, which are within the text of a block tag or a description.\n\nBlock tags usually provide detailed information about your code, such as the parameters that a function accepts. Inline tags usually link to other parts of the documentation, similar to the anchor tag (`<a>`) in HTML.\n\nBlock tags always begin with an at sign (`@`). Each block tag must be followed by a line break, with the exception of the last block tag in a JSDoc comment.\n\nInline tags also begin with an at sign. However, inline tags and their text must be enclosed in curly braces (`{` and `}`). The `{` denotes the start of the inline tag, and the `}` denotes the end of the inline tag. If your tag's text includes a closing curly brace (`}`), you must escape it with a leading backslash (`\\`). You do not need to use a line break after inline tags.\n\nMost JSDoc tags are block tags. In general, when this site refers to \"JSDoc tags,\" we really mean \"block tags.\"\n\n## Examples\n\nIn the following example, `@param` is a block tag, and `{@link}` is an inline tag:\n\nBlock and inline tags in JSDoc comments\n\n``` js\n/**\n * Set the shoe's color. Use {@link Shoe#setSize} to set the shoe size.\n *\n * @param {string} color - The shoe's color.\n */\nShoe.prototype.setColor = function(color) {\n    // ...\n};\n```\n\nYou can use inline tags within a description, as shown above, or within a block tag, as shown below:\n\nInline tag used within a block tag\n\n``` js\n/**\n * Set the shoe's color.\n *\n * @param {SHOE_COLORS} color - The shoe color. Must be an enumerated\n * value of {@link SHOE_COLORS}.\n */\nShoe.prototype.setColor = function(color) {\n    // ...\n};\n```\n\nWhen you use multiple block tags in a JSDoc comment, they must be separated by line breaks:\n\nMultiple block tags separated by line breaks\n\n``` js\n/**\n * Set the color and type of the shoelaces.\n *\n * @param {LACE_COLORS} color - The shoelace color.\n * @param {LACE_TYPES} type - The type of shoelace.\n */\nShoe.prototype.setLaceType = function(color, type) {\n    // ...\n};\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-block-inline-tags.html](https://jsdoc.app/about-block-inline-tags.html)"
- name: 'JSDoc: CommonJS Modules'
  id: howto-commonjs-modules
  summary: To help you document CommonJS modules, JSDoc 3 understands many of the conventions used in the CommonJS specification (for example, adding properties to the exports object)
  description: "# CommonJS Modules\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Module identifiers](#module-identifiers)\n- [Properties of the 'exports' object](#properties-of-the-exports-object)\n- [Values assigned to local variables](#values-assigned-to-local-variables)\n- [Values assigned to 'module.exports'](#values-assigned-to-moduleexports)\n  - [Object literal assigned to 'module.exports'](#object-literal-assigned-to-moduleexports)\n  - [Function assigned to 'module.exports'](#function-assigned-to-moduleexports)\n  - [String, number, or boolean assigned to 'module.exports'](#string-number-or-boolean-assigned-to-moduleexports)\n- [Values assigned to 'module.exports' and local variables](#values-assigned-to-moduleexports-and-local-variables)\n- [Properties added to 'this'](#properties-added-to-this)\n- [Related Links](#related-links)\n\n## Overview\n\nTo help you document [CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1), JSDoc 3 understands many of the conventions used in the CommonJS specification (for example, adding properties to the `exports` object). In addition, JSDoc recognizes the conventions of [Node.js modules](http://nodejs.org/api/modules.html), which extend the CommonJS standard (for example, assigning a value to `module.exports`). Depending on the coding conventions you follow, you may need to provide some additional tags to help JSDoc understand your code.\n\nThis page explains how to document CommonJS and Node.js modules that use several different coding conventions. If you're documenting Asynchronous Module Definition (AMD) modules (also known as \"RequireJS modules\"), see [AMD Modules](howto-amd-modules).\n\n## Module identifiers\n\nIn most cases, your CommonJS or Node.js module should include a standalone JSDoc comment that contains a [`@module` tag](tags-module). The `@module` tag's value should be the module identifier that's passed to the `require()` function. For example, if users load the module by calling `require('my/shirt')`, your JSDoc comment would contain the tag `@module my/shirt`.\n\nIf you use the `@module` tag without a value, JSDoc will try to guess the correct module identifier based on the filepath.\n\nWhen you use a JSDoc [namepath](about-namepaths) to refer to a module from another JSDoc comment, you must add the prefix `module:`. For example, if you want the documentation for the module `my/pants` to link to the module `my/shirt`, you could use the [`@see` tag](tags-see) to document `my/pants` as follows:\n\n``` js\n/**\n * Pants module.\n * @module my/pants\n * @see module:my/shirt\n */\n```\n\nSimilarly, the namepath for each member of the module will start with `module:`, followed by the module name. For example, if your `my/pants` module exports a `Jeans` constructor, and `Jeans` has an instance method named `hem`, the instance method's longname is `module:my/pants.Jeans#hem`.\n\n## Properties of the 'exports' object\n\nIt's easiest to document symbols that are directly assigned to a property of the `exports` object. JSDoc will automatically recognize that the module exports these symbols.\n\nIn the following example, the `my/shirt` module exports the methods `button` and `unbutton`. JSDoc will automatically detect that the module exports these methods.\n\nMethods added to the exports object\n\n``` js\n/**\n * Shirt module.\n * @module my/shirt\n */\n\n/** Button the shirt. */\nexports.button = function() {\n    // ...\n};\n\n/** Unbutton the shirt. */\nexports.unbutton = function() {\n    // ...\n};\n```\n\n## Values assigned to local variables\n\nIn some cases, an exported symbol may be assigned to a local variable before it's added to the `exports` object. For example, if your module exports a `wash` method, and the module itself often calls the `wash` method, you might write the module as follows:\n\nMethod assigned to a local variable and added to the exports object\n\n``` js\n/**\n * Shirt module.\n * @module my/shirt\n */\n\n/** Wash the shirt. */\nvar wash = exports.wash = function() {\n    // ...\n};\n```\n\nIn this case, JSDoc will *not* automatically document `wash` as an exported method, because the JSDoc comment appears immediately before the local variable `wash` rather than `exports.wash`. One solution is to add an [`@alias` tag](tags-alias) that defines the correct longname for the method. In this case, the method is a static member of the module `my/shirt`, so the correct longname is `module:my/shirt.wash`:\n\nLongname defined in an @alias tag\n\n``` js\n/**\n * Shirt module.\n * @module my/shirt\n */\n\n/**\n * Wash the shirt.\n * @alias module:my/shirt.wash\n */\nvar wash = exports.wash = function() {\n    // ...\n};\n```\n\nAnother solution is to move the method's JSDoc comment so it comes immediately before `exports.wash`. This change allows JSDoc to detect that `wash` is exported by the module `my/shirt`:\n\nJSDoc comment immediately before exports.wash\n\n``` js\n/**\n * Shirt module.\n * @module my/shirt\n */\n\nvar wash =\n/** Wash the shirt. */\nexports.wash = function() {\n    // ...\n};\n```\n\n## Values assigned to 'module.exports'\n\nIn a Node.js module, you can assign a value directly to `module.exports`. This section explains how to document different types of values when they are assigned to `module.exports`.\n\n### Object literal assigned to 'module.exports'\n\nIf a module assigns an object literal to `module.exports`. JSDoc automatically recognizes that the module exports only this value. In addition, JSDoc automatically sets the correct longname for each property:\n\nObject literal assigned to module.exports\n\n``` js\n/**\n * Color mixer.\n * @module color/mixer\n */\n\nmodule.exports = {\n    /**\n     * Blend two colors together.\n     * @param {string} color1 - The first color, in hexadecimal format.\n     * @param {string} color2 - The second color, in hexadecimal format.\n     * @return {string} The blended color.\n     */\n    blend: function(color1, color2) {\n        // ...\n    },\n\n    /**\n     * Darken a color by the given percentage.\n     * @param {string} color - The color, in hexadecimal format.\n     * @param {number} percent - The percentage, ranging from 0 to 100.\n     * @return {string} The darkened color.\n     */\n    darken: function(color, percent) {\n        // ..\n    }\n};\n```\n\nYou can also use this pattern if you add properties to `module.exports` outside of the object literal:\n\nAssignment to module.exports followed by property definition\n\n``` js\n/**\n * Color mixer.\n * @module color/mixer\n */\n\nmodule.exports = {\n    /**\n     * Blend two colors together.\n     * @param {string} color1 - The first color, in hexadecimal format.\n     * @param {string} color2 - The second color, in hexadecimal format.\n     * @return {string} The blended color.\n     */\n    blend: function(color1, color2) {\n        // ...\n    }\n};\n\n/**\n * Darken a color by the given percentage.\n * @param {string} color - The color, in hexadecimal format.\n * @param {number} percent - The percentage, ranging from 0 to 100.\n * @return {string} The darkened color.\n */\nmodule.exports.darken = function(color, percent) {\n    // ..\n};\n```\n\n### Function assigned to 'module.exports'\n\nIf you assign a function to `module.exports`, JSDoc will automatically set the correct longname for the function:\n\nFunction assigned to 'module.exports'\n\n``` js\n/**\n * Color mixer.\n * @module color/mixer\n */\n\n/**\n * Blend two colors together.\n * @param {string} color1 - The first color, in hexadecimal format.\n * @param {string} color2 - The second color, in hexadecimal format.\n * @return {string} The blended color.\n */\nmodule.exports = function(color1, color2) {\n    // ...\n};\n```\n\nThe same pattern works for constructor functions:\n\nConstructor assigned to 'module.exports'\n\n``` js\n/**\n * Color mixer.\n * @module color/mixer\n */\n\n/** Create a color mixer. */\nmodule.exports = function ColorMixer() {\n    // ...\n};\n```\n\n### String, number, or boolean assigned to 'module.exports'\n\nFor value types (strings, numbers, and booleans) assigned to `module.exports`, you must document the exported value's type by using the [`@type` tag](tags-type) in the same JSDoc comment as the `@module` tag:\n\nString assigned to module.exports\n\n``` js\n/**\n * Module representing the word of the day.\n * @module wotd\n * @type {string}\n */\n\nmodule.exports = 'perniciousness';\n```\n\n## Values assigned to 'module.exports' and local variables\n\nIf your module exports symbols that are not directly assigned to `module.exports`, you can use the [`@exports` tag](tags-exports) in place of the `@module` tag. The `@exports` tag tells JSDoc that a symbol represents the value exported by a module.\n\nObject literal assigned to a local variable and module.exports\n\n``` js\n/**\n * Color mixer.\n * @exports color/mixer\n */\nvar mixer = module.exports = {\n    /**\n     * Blend two colors together.\n     * @param {string} color1 - The first color, in hexadecimal format.\n     * @param {string} color2 - The second color, in hexadecimal format.\n     * @return {string} The blended color.\n     */\n    blend: function(color1, color2) {\n        // ...\n    }\n};\n```\n\n## Properties added to 'this'\n\nWhen a module adds a property to its `this` object, JSDoc 3 automatically recognizes that the new property is exported by the module:\n\nProperties added to a module's 'this' object\n\n``` js\n/**\n * Module for bookshelf-related utilities.\n * @module bookshelf\n */\n\n/**\n * Create a new Book.\n * @class\n * @param {string} title - The title of the book.\n */\nthis.Book = function(title) {\n    /** The title of the book. */\n    this.title = title;\n}\n```\n\n## Related Links\n\n- [Using namepaths with JSDoc 3](about-namepaths)\n- [@exports](tags-exports)\n- [@module](tags-module)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/howto-commonjs-modules.html](https://jsdoc.app/howto-commonjs-modules.html)"
- name: 'JSDoc: ES 2015 Classes'
  id: howto-es2015-classes
  summary: JSDoc 3 makes it easy to document classes that follow the ECMAScript 2015 specification
  description: "# ES 2015 Classes\n\n## Table of Contents\n\n- [Documenting a simple class](#documenting-a-simple-class)\n- [Extending classes](#extending-classes)\n- [Related Links](#related-links)\n\nJSDoc 3 makes it easy to document classes that follow the [ECMAScript 2015 specification](http://www.ecma-international.org/ecma-262/6.0/#sec-class-definitions). You don't need to use tags such as `@class` and `@constructor` with ES 2015 classes—JSDoc automatically identifies classes and their constructors simply by parsing your code. ES 2015 classes are supported in JSDoc 3.4.0 and later.\n\n## Documenting a simple class\n\nThe following example shows how to document a simple class with a constructor, two instance methods, and one static method:\n\nSimple ES 2015 class\n\n``` js\n/** Class representing a point. */\nclass Point {\n    /**\n     * Create a point.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     */\n    constructor(x, y) {\n        // ...\n    }\n\n    /**\n     * Get the x value.\n     * @return {number} The x value.\n     */\n    getX() {\n        // ...\n    }\n\n    /**\n     * Get the y value.\n     * @return {number} The y value.\n     */\n    getY() {\n        // ...\n    }\n\n    /**\n     * Convert a string containing two comma-separated numbers into a point.\n     * @param {string} str - The string containing two comma-separated numbers.\n     * @return {Point} A Point object.\n     */\n    static fromString(str) {\n        // ...\n    }\n}\n```\n\nYou can also document classes that are defined in a class expression, which assigns the class to a variable or constant:\n\nES 2015 class expression\n\n``` js\n/** Class representing a point. */\nconst Point = class {\n    // and so on\n}\n```\n\n## Extending classes\n\nWhen you use the `extends` keyword to extend an existing class, you also need to tell JSDoc which class you're extending. You do this with the [`@augments` (or `@extends`) tag](tags-augments).\n\nFor example, to extend the `Point` class shown above:\n\nExtending an ES 2015 class\n\n``` js\n/**\n * Class representing a dot.\n * @extends Point\n */\nclass Dot extends Point {\n    /**\n     * Create a dot.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     * @param {number} width - The width of the dot, in pixels.\n     */\n    constructor(x, y, width) {\n        // ...\n    }\n\n    /**\n     * Get the dot's width.\n     * @return {number} The dot's width, in pixels.\n     */\n    getWidth() {\n        // ...\n    }\n}\n```\n\n## Related Links\n\n[@augments](tags-augments)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/howto-es2015-classes.html](https://jsdoc.app/howto-es2015-classes.html)"
- name: 'JSDoc: ES 2015 Modules'
  id: howto-es2015-modules
  summary: JSDoc 3 makes it possible to document modules that follow the ECMAScript 2015 specification
  description: "# ES 2015 Modules\n\n## Table of Contents\n\n- [Module identifiers](#module-identifiers)\n- [Exported values](#exported-values)\n- [Related Links](#related-links)\n\nJSDoc 3 makes it possible to document modules that follow the [ECMAScript 2015 specification](http://www.ecma-international.org/ecma-262/6.0/#sec-modules). ES 2015 modules are supported in JSDoc 3.4.0 and later.\n\n## Module identifiers\n\nWhen you document an ES 2015 module, you'll use a [`@module` tag](tags-module) to document the identifier for the module. For example, if users load the module by calling `import * as myShirt from 'my/shirt'`, you'll write a JSDoc comment that contains the tag `@module my/shirt`.\n\nIf you use the `@module` tag without a value, JSDoc will try to guess the correct module identifier based on the filepath.\n\nWhen you use a JSDoc [namepath](about-namepaths) to refer to a module from another JSDoc comment, you must add the prefix `module:`. For example, if you want the documentation for the module `my/pants` to link to the module `my/shirt`, you could use the [`@see` tag](tags-see) to document `my/pants` as follows:\n\n``` js\n/**\n * Pants module.\n * @module my/pants\n * @see module:my/shirt\n */\n```\n\nSimilarly, the namepath for each member of the module will start with `module:`, followed by the module name. For example, if your `my/pants` module exports a `Jeans` class, and `Jeans` has an instance method named `hem`, the instance method's longname is `module:my/pants.Jeans#hem`.\n\n## Exported values\n\nThe following example shows how to document different kinds of exported values in an ES 2015 module. In most cases, you can simply add a JSDoc comment to the `export` statement that defines the exported value. If you are exporting a value under another name, you can document the exported value within its `export` block.\n\nDocumenting values exported by a module\n\n``` js\n/** @module color/mixer */\n\n/** The name of the module. */\nexport const name = 'mixer';\n\n/** The most recent blended color. */\nexport var lastColor = null;\n\n/**\n * Blend two colors together.\n * @param {string} color1 - The first color, in hexadecimal format.\n * @param {string} color2 - The second color, in hexadecimal format.\n * @return {string} The blended color.\n */\nexport function blend(color1, color2) {}\n\n// convert color to array of RGB values (0-255)\nfunction rgbify(color) {}\n\nexport {\n    /**\n     * Get the red, green, and blue values of a color.\n     * @function\n     * @param {string} color - A color, in hexadecimal format.\n     * @returns {Array.<number>} An array of the red, green, and blue values,\n     * each ranging from 0 to 255.\n     */\n    rgbify as toRgb\n}\n```\n\n## Related Links\n\n- [Using namepaths with JSDoc 3](about-namepaths)\n- [@module](tags-module)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/howto-es2015-modules.html](https://jsdoc.app/howto-es2015-modules.html)"
- name: 'JSDoc: Including a Package File'
  id: about-including-package
  summary: Package files contain information that can be useful for your project's documentation, such as the project's name and version number
  description: "# Including a Package File\n\nPackage files contain information that can be useful for your project's documentation, such as the project's name and version number. JSDoc can automatically use information from your project's `package.json` file when it generates documentation. For example, the default template shows the project's name and version number in the documentation.\n\nThere are two ways to incorporate a `package.json` file into your documentation:\n\n1.  In the source paths to your JavaScript files, include the path to a `package.json` file. JSDoc will use the first `package.json` file that it finds in your source paths.\n2.  Run JSDoc with the `-P/--package` command-line option, specifying the path to your `package.json` file. This option is available in JSDoc 3.3.0 and later.\n\nThe `-P/--package` command-line option takes precedence over your source paths. If you use the `-P/--package` command-line option, JSDoc will ignore any `package.json` files in your source paths.\n\nThe `package.json` file must use [npm's package format](https://docs.npmjs.com/files/package.json).\n\n## Examples\n\nIncluding a package file in your source paths\n\n``` \njsdoc path/to/js path/to/package/package.json\n```\n\nUsing the -P/--package option\n\n``` \njsdoc --package path/to/package/package-docs.json path/to/js\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-including-package.html](https://jsdoc.app/about-including-package.html)"
- name: 'JSDoc: Including a README File'
  id: about-including-readme
  summary: The -R/--readme command-line option takes precedence over your source paths
  description: "# Including a README File\n\nThere are two ways to incorporate a `README` file into your documentation:\n\n1.  In the source paths to your JavaScript files, include the path to a Markdown file named `README.md`. JSDoc will use the first `README.md` file that it finds in your source paths.\n2.  Run JSDoc with the `-R/--readme` command-line option, specifying the path to your `README` file. This option is available in JSDoc 3.3.0 and later. The `README` file may have any name and extension, but it must be in Markdown format.\n\nThe `-R/--readme` command-line option takes precedence over your source paths. If you use the `-R/--readme` command-line option, JSDoc will ignore any `README.md` files in your source paths.\n\nIf you are using JSDoc's default template, the `README` file's contents will be rendered in HTML in the generated documentation's `index.html` file.\n\n## Examples\n\nIncluding a README file in your source paths\n\n``` \njsdoc path/to/js path/to/readme/README.md\n```\n\nUsing the -R/--readme option\n\n``` \njsdoc --readme path/to/readme/README path/to/js\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-including-readme.html](https://jsdoc.app/about-including-readme.html)"
- name: 'JSDoc: Tutorials'
  id: about-tutorials
  summary: JSDoc allows you to include tutorials alongside your API documentation
  description: "# Tutorials\n\n## Table of Contents\n\n- [Adding tutorials](#adding-tutorials)\n- [Configuring titles, order, and hierarchy](#configuring-titles-order-and-hierarchy)\n- [Linking to tutorials from API documentation](#linking-to-tutorials-from-api-documentation)\n  - [@tutorial block tag](#tutorial-block-tag)\n  - [{@tutorial} inline tag](#tutorial-inline-tag)\n\nJSDoc allows you to include tutorials alongside your API documentation. You can use this feature to provide detailed instructions for using your API, such as a \"getting started\" guide or a step-by-step process for implementing a feature.\n\n## Adding tutorials\n\nTo add tutorials to your API documentation, run JSDoc with the `--tutorials` or `-u` option, and provide a directory that JSDoc should search for tutorials. For example:\n\n``` \njsdoc -u path/to/tutorials path/to/js/files\n```\n\nJSDoc searches the tutorials directory for files with the following extensions:\n\n- `.htm`\n- `.html`\n- `.markdown` (converted from Markdown to HTML)\n- `.md` (converted from Markdown to HTML)\n- `.xhtml`\n- `.xml` (treated as HTML)\n\nJSDoc also searches for JSON files that contain information about the titles, ordering, and hierarchy of your tutorials, as discussed in the following section.\n\nJSDoc assigns an identifier to each tutorial. The identifier is the filename without its extension. For example, the identifier for `/path/to/tutorials/overview.md` is `overview`.\n\nIn tutorial files, you can use the [`{@link}`](tags-inline-link) and [`{@tutorial}`](tags-inline-tutorial) inline tags to link to other parts of the documentation. JSDoc will automatically resolve the links.\n\n## Configuring titles, order, and hierarchy\n\nBy default, JSDoc uses the filename as the tutorial's title, and all tutorials are at the same level. You can use a JSON file to provide a title for each tutorial and indicates how the tutorials should be sorted and grouped in the documentation.\n\nThe JSON file must use the extension `.json`. In the JSON file, you can use the tutorial identifiers to provide two properties for each tutorial:\n\n- `title`: The title to display in the documentation.\n- `children`: The children of the tutorial.\n\nIn JSDoc 3.2.0 and later, you can use the following formats for the JSON file:\n\n1.  A tree of objects, with child tutorials defined in the `children` property of their parent. For example, if `tutorial1` has two children, `childA` and `childB`, and `tutorial2` is at the same level as `tutorial1` and has no children:\n\n    ``` json\n     {\n         \"tutorial1\": {\n             \"title\": \"Tutorial One\",\n             \"children\": {\n                 \"childA\": {\n                     \"title\": \"Child A\"\n                 },\n                 \"childB\": {\n                     \"title\": \"Child B\"\n                 }\n             }\n         },\n         \"tutorial2\": {\n             \"title\": \"Tutorial Two\"\n         }\n     }\n    ```\n\n2.  A top-level object whose properties are all tutorial objects, with child tutorials listed by name in an array. For example, if `tutorial1` has two children, `childA` and `childB`, and `tutorial2` is at the same level as `tutorial1` and has no children:\n\n    ``` json\n     {\n         \"tutorial1\": {\n             \"title\": \"Tutorial One\",\n             \"children\": [\"childA\", \"childB\"]\n         },\n         \"tutorial2\": {\n             \"title\": \"Tutorial Two\"\n         },\n         \"childA\": {\n             \"title\": \"Child A\"\n         },\n         \"childB\": {\n             \"title\": \"Child B\"\n         }\n     }\n    ```\n\nYou can also provide an individual `.json` file for each tutorial, using the tutorial identifier as the filename. This method is deprecated and should not be used for new projects.\n\n## Linking to tutorials from API documentation\n\nThere are multiple ways to link to a tutorial from your API documentation:\n\n### @tutorial block tag\n\nIf you include a [`@tutorial` block tag](tags-tutorial) in a JSDoc comment, the generated documentation will include a link to the tutorial you specify.\n\nUsing the `@tutorial` block tag\n\n``` js\n/**\n * Class representing a socket connection.\n *\n * @class\n * @tutorial socket-tutorial\n */\nfunction Socket() {}\n```\n\n### {@tutorial} inline tag\n\nYou can also use the [`{@tutorial}` inline tag](tags-inline-tutorial) to link to a tutorial within the text of another tag. By default, JSDoc will use the tutorial's title as the link text.\n\nUsing the `{@tutorial}` inline tag\n\n``` js\n/**\n * Class representing a socket connection. See {@tutorial socket-tutorial}\n * for an overview.\n *\n * @class\n */\nfunction Socket() {}\n```\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-tutorials.html](https://jsdoc.app/about-tutorials.html)"
- name: 'JSDoc: Using the Markdown plugin'
  id: plugins-markdown
  summary: JSDoc includes a Markdown plugin that automatically converts Markdown-formatted text to HTML
  description: "# Using the Markdown plugin\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Enabling the Markdown plugin](#enabling-the-markdown-plugin)\n- [Converting Markdown in additional JSDoc tags](#converting-markdown-in-additional-jsdoc-tags)\n- [Excluding the default tags from Markdown processing](#excluding-the-default-tags-from-markdown-processing)\n- [Hard-wrapping text at line breaks](#hard-wrapping-text-at-line-breaks)\n- [Adding ID attributes to headings](#adding-id-attributes-to-headings)\n\n## Overview\n\nJSDoc includes a Markdown plugin that automatically converts Markdown-formatted text to HTML. You can use this plugin with any JSDoc template. In JSDoc 3.2.2 and later, the Markdown plugin uses the [marked Markdown parser](https://github.com/chjj/marked).\n\n**Note**: When you enable the Markdown plugin, be sure to include a leading asterisk on each line of your JSDoc comments. If you omit the leading asterisks, JSDoc's parser may remove asterisks that are used for Markdown formatting.\n\nBy default, JSDoc looks for Markdown-formatted text in the following JSDoc tags:\n\n- [`@author`](tags-author)\n- [`@classdesc`](tags-classdesc)\n- [`@description`](tags-description) (including untagged descriptions at the start of a JSDoc comment)\n- [`@param`](tags-param)\n- [`@property`](tags-property)\n- [`@returns`](tags-returns)\n- [`@see`](tags-see)\n- [`@throws`](tags-throws)\n\n## Enabling the Markdown plugin\n\nTo enable the Markdown plugin, add the string `plugins/markdown` to the `plugins` array in your [JSDoc configuration file](about-configuring-jsdoc):\n\nJSON configuration file that enables the Markdown plugin\n\n``` json\n{\n    \"plugins\": [\"plugins/markdown\"]\n}\n```\n\n## Converting Markdown in additional JSDoc tags\n\nBy default, the Markdown plugin only processes [specific JSDoc tags](#default-tags) for Markdown text. You can handle Markdown text in other tags by adding a `markdown.tags` property to your JSDoc configuration file. The `markdown.tags` property contains an array of the additional doclet properties that can contain Markdown text. (In most cases, the name of the doclet property is the same as the tag name. However, some tags are stored differently; for example, the `@param` tag is stored in a doclet's `params` property. If you're not sure how a tag's text is stored in a doclet, run JSDoc with the `-X/--explain` tag, which prints each doclet to the console.)\n\nFor example, if the `foo` and `bar` tags accept values that are stored in a doclet's `foo` and `bar` properties, you could enable Markdown processing of these tags by adding the following settings to your JSDoc configuration file:\n\nConverting Markdown in 'foo' and 'bar' tags\n\n``` json\n{\n    \"plugins\": [\"plugins/markdown\"],\n    \"markdown\": {\n        \"tags\": [\"foo\", \"bar\"]\n    }\n}\n```\n\n## Excluding the default tags from Markdown processing\n\nTo prevent the Markdown plugin from processing any of the [default JSDoc tags](#default-tags), add a `markdown.excludeTags` property to your JSDoc configuration file. The `markdown.excludeTags` property contains an array of the default tags that should not be processed for Markdown text.\n\nFor example, to exclude the `author` tag from Markdown processing:\n\nExcluding the 'author' tag from Markdown processing\n\n``` json\n{\n    \"plugins\": [\"plugins/markdown\"],\n    \"markdown\": {\n        \"excludeTags\": [\"author\"]\n    }\n}\n```\n\n## Hard-wrapping text at line breaks\n\nBy default, the Markdown plugin does not hard-wrap text at line breaks. This is because it's normal for a JSDoc comment to be wrapped across multiple lines. If you prefer to hard-wrap text at line breaks, set your JSDoc configuration file's `markdown.hardwrap` property to `true`. This property is available in JSDoc 3.4.0 and later.\n\n## Adding ID attributes to headings\n\nBy default, the Markdown plugin does not add an `id` attribute to each HTML heading. To automatically add `id` attributes based on the heading's text, set your JSDoc configuration file's `markdown.idInHeadings` property to `true`. This property is available in JSDoc 3.4.0 and later.\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/plugins-markdown.html](https://jsdoc.app/plugins-markdown.html)"
- name: Using namepaths with JSDoc 3
  id: about-namepaths
  summary: When referring to a JavaScript variable that is elsewhere in your documentation, you must provide a unique identifier that maps to that variable
  description: "# Using namepaths with JSDoc 3\n\n## Table of Contents\n\n- [Namepaths in JSDoc 3](#namepaths-in-jsdoc-3)\n- [Related Links](#related-links)\n\n## Namepaths in JSDoc 3\n\nWhen referring to a JavaScript variable that is elsewhere in your documentation, you must provide a unique identifier that maps to that variable. A namepath provides a way to do so and disambiguate between instance members, static members and inner variables.\n\nBasic Syntax Examples of Namepaths in JSDoc 3\n\n``` \nmyFunction\nMyConstructor\nMyConstructor#instanceMember\nMyConstructor.staticMember\nMyConstructor~innerMember // note that JSDoc 2 uses a dash\n```\n\nThe example below shows: an *instance* method named \"say,\" an *inner* function also named \"say,\" and a *static* method also named \"say.\" These are three distinct methods that all exist independently of one another.\n\nUse a documentation tag to describe your code.\n\n``` js\n/** @constructor */\nPerson = function() {\n    this.say = function() {\n        return \"I'm an instance.\";\n    }\n\n    function say() {\n        return \"I'm inner.\";\n    }\n}\nPerson.say = function() {\n    return \"I'm static.\";\n}\n\nvar p = new Person();\np.say();      // I'm an instance.\nPerson.say(); // I'm static.\n// there is no way to directly access the inner function from here\n```\n\nYou would use three different namepath syntaxes to refer to the three different methods:\n\nUse a documentation tag to describe your code.\n\n``` \nPerson#say  // the instance method named \"say.\"\nPerson.say  // the static method named \"say.\"\nPerson~say  // the inner method named \"say.\"\n```\n\nYou might wonder why there is a syntax to refer to an inner method when that method isn't directly accessible from outside the function it is defined in. While that is true, and thus the \"~\" syntax is rarely used, it *is* possible to return a reference to an inner method from another method inside that container, so it is possible that some object elsewhere in your code might borrow an inner method.\n\nNote that if a constructor has an instance member that is also a constructor, you can simply chain the namepaths together to form a longer namepath:\n\nUse a documentation tag to describe your code.\n\n``` js\n/** @constructor */\nPerson = function() {\n    /** @constructor */\n    this.Idea = function() {\n        this.consider = function(){\n            return \"hmmm\";\n        }\n    }\n}\n\nvar p = new Person();\nvar i = new p.Idea();\ni.consider();\n```\n\nIn this case, to refer to the method named \"consider,\" you would use the following namepath: `Person#Idea#consider`\n\nThis chaining can be used with any combination of the connecting symbols: `# . ~`\n\nSpecial cases: modules, externals and events.\n\n``` js\n/** A module. Its name is module:foo/bar.\n * @module foo/bar\n */\n/** The built in string object. Its name is external:String.\n * @external String\n */\n/** An event. Its name is module:foo/bar.event:MyEvent.\n * @event module:foo/bar.event:MyEvent\n */\n```\n\nThere are some special cases with namepaths: [@module](tags-module) names are prefixed by \"module:\", [@external](tags-external) names are prefixed by \"external:\", and [@event](tags-event) names are prefixed by \"event:\".\n\nNamepaths of objects with special characters in the name.\n\n``` js\n/** @namespace */\nvar chat = {\n    /**\n     * Refer to this by {@link chat.\"#channel\"}.\n     * @namespace\n     */\n    \"#channel\": {\n        /**\n         * Refer to this by {@link chat.\"#channel\".open}.\n         * @type {boolean}\n         * @defaultvalue\n         */\n        open: true,\n        /**\n         * Internal quotes have to be escaped by backslash. This is\n         * {@link chat.\"#channel\".\"say-\\\"hello\\\"\"}.\n         */\n        'say-\"hello\"': function (msg) {}\n    }\n};\n\n/**\n * Now we define an event in our {@link chat.\"#channel\"} namespace.\n * @event chat.\"#channel\".\"op:announce-motd\"\n */\n```\n\nAbove is an example of a namespace with \"unusual\" characters in its member names (the hash character, dashes, even quotes). To refer to these you just need quote the names: chat.\"#channel\", chat.\"#channel\".\"op:announce-motd\", and so on. Internal quotes in names should be escaped with backslashes: chat.\"#channel\".\"say-\"hello\"\".\n\n## Related Links\n\n- [Block and inline tags](about-block-inline-tags)\n- [{@link}](tags-inline-link)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/about-namepaths.html](https://jsdoc.app/about-namepaths.html)"
- name: '{@link}'
  id: tags-inline-link
  summary: The {@link} inline tag creates a link to the namepath or URL that you specify
  description: "# {@link}\n\n## Table of Contents\n\n- [Synonyms](#synonyms)\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Link formatting](#link-formatting)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Synonyms\n\n- `{@linkcode}`\n- `{@linkplain}`\n\n## Syntax\n\n``` \n{@link namepathOrURL}\n[link text]{@link namepathOrURL}\n{@link namepathOrURL|link text}\n{@link namepathOrURL link text (after the first space)}\n```\n\n## Overview\n\nThe `{@link}` inline tag creates a link to the namepath or URL that you specify. When you use the `{@link}` tag, you can also provide link text, using one of several different formats. If you don't provide any link text, JSDoc uses the namepath or URL as the link text.\n\nIf you need to link to a tutorial, use the [`{@tutorial}` inline tag](tags-inline-tutorial) instead of the `{@link}` tag.\n\n## Link formatting\n\nBy default, `{@link}` generates standard HTML anchor tags. However, you may prefer to render certain links in a monospace font, or to specify the format of individual links. You can use the following synonyms for the `{@link}` tag to control the formatting of links:\n\n- `{@linkcode}`: Forces the link's text to use a monospace font.\n- `{@linkplain}`: Forces the link's text to appear as normal text, without a monospace font.\n\nYou can also set one of the following options in JSDoc's configuration file; see [Configuring JSDoc](about-configuring-jsdoc) for more details:\n\n- `templates.cleverLinks`: When set to `true`, links to URLs use normal text, and links to code use a monospace font.\n- `templates.monospaceLinks`: When set to `true`, all links use a monospace font, except for links created with the `{@linkplain}` tag.\n\n**Note**: Although the default JSDoc template renders all of these tags correctly, other templates may not recognize the `{@linkcode}` and `{@linkplain}` tags. In addition, other templates may ignore the configuration options for link rendering.\n\n## Examples\n\nThe following example shows all of the ways to provide link text for the `{@link}` tag:\n\nProviding link text\n\n``` js\n/**\n * See {@link MyClass} and [MyClass's foo property]{@link MyClass#foo}.\n * Also, check out {@link http://www.google.com|Google} and\n * {@link https://github.com GitHub}.\n */\nfunction myFunction() {}\n```\n\nBy default, the example above produces output similar to the following:\n\nOutput for {@link} tags\n\n``` html\nSee <a href=\"MyClass.html\">MyClass</a> and <a href=\"MyClass.html#foo\">MyClass's foo\nproperty</a>. Also, check out <a href=\"http://www.google.com\">Google</a> and\n<a href=\"https://github.com\">GitHub</a>.\n```\n\nIf the configuration property `templates.cleverLinks` were set to `true`, the example above would produce the following output:\n\nOutput with clever links enabled\n\n``` html\nSee <a href=\"MyClass.html\"><code>MyClass</code></a> and <a href=\"MyClass.html#foo\">\n<code>MyClass's foo property</code></a>. Also, check out\n<a href=\"http://www.google.com\">Google</a> and <a href=\"https://github.com\">GitHub</a>.\n```\n\n## Related Links\n\n- [Configuring JSDoc with a configuration file](about-configuring-jsdoc)\n- [Using namepaths with JSDoc 3](about-namepaths)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-inline-link.html](https://jsdoc.app/tags-inline-link.html)"
- name: '{@tutorial}'
  id: tags-inline-tutorial
  summary: The {@tutorial} inline tag creates a link to the tutorial identifier that you specify
  description: "# {@tutorial}\n\n## Table of Contents\n\n- [Syntax](#syntax)\n- [Overview](#overview)\n- [Examples](#examples)\n- [Related Links](#related-links)\n\n## Syntax\n\n``` \n{@tutorial tutorialID}\n[link text]{@tutorial tutorialID}\n{@tutorial tutorialID|link text}\n{@tutorial tutorialID link text (after the first space)}\n```\n\n## Overview\n\nThe `{@tutorial}` inline tag creates a link to the tutorial identifier that you specify. When you use the `{@tutorial}` tag, you can also provide link text, using one of several different formats. If you don't provide any link text, JSDoc uses the tutorial's title as the link text.\n\nIf you need to link to a namepath or a URL, use the [`{@link}` inline tag](tags-inline-link) instead of the `{@tutorial}` tag.\n\n## Examples\n\nThe following example shows all of the ways to provide link text for the `{@tutorial}` tag:\n\nProviding link text\n\n``` js\n/**\n * See {@tutorial gettingstarted} and [Configuring the Dashboard]{@tutorial dashboard}.\n * For more information, see {@tutorial create|Creating a Widget} and\n * {@tutorial destroy Destroying a Widget}.\n */\nfunction myFunction() {}\n```\n\nIf all of these tutorials are defined, and the title of the `gettingstarted` tutorial is \"Getting Started,\" the example above produces output similar to the following:\n\nOutput for {@link} tags\n\n``` html\nSee <a href=\"tutorial-gettingstarted.html\">Getting Started</a> and\n<a href=\"tutorial-dashboard.html\">Configuring the Dashboard</a>.\nFor more information, see <a href=\"tutorial-create.html\">Creating a Widget</a> and\n<a href=\"tutorial-destroy.html\">Destroying a Widget</a>.\n```\n\n## Related Links\n\n[@tutorial](tags-tutorial)\n\n© 2011–2017 the contributors to the JSDoc 3 documentation project  \nLicensed under the Creative Commons Attribution-ShareAlike Unported License v3.0.  \n[https://jsdoc.app/tags-inline-tutorial.html](https://jsdoc.app/tags-inline-tutorial.html)"
