---
name: Express
slug: express
text_format: markdown
generator: src:devdocs
version: null
copyright: |-
  © 2017 StrongLoop, IBM, and other expressjs.com contributors.
  Licensed under the Creative Commons Attribution-ShareAlike License v3.0.
  https://expressjs.com/en/4x/api.html
homepage: https://expressjs.com/
generator_command: doc src:devdocs use express

---
- name: 1. Developing template engines for Express
  id: advanced/developing-template-engines
  summary: Use the app.engine(ext, callback) method to create your own template engine
  description: "# Developing template engines for Express\n\nUse the `app.engine(ext, callback)` method to create your own template engine. `ext` refers to the file extension, and `callback` is the template engine function, which accepts the following items as parameters: the location of the file, the options object, and the callback function.\n\nThe following code is an example of implementing a very simple template engine for rendering `.ntl` files.\n\n``` js\nconst fs = require('fs') // this engine requires the fs module\napp.engine('ntl', (filePath, options, callback) => { // define the template engine\n  fs.readFile(filePath, (err, content) => {\n    if (err) return callback(err)\n    // this is an extremely simple template engine\n    const rendered = content.toString()\n      .replace('#title#', `<title>${options.title}</title>`)\n      .replace('#message#', `<h1>${options.message}</h1>`)\n    return callback(null, rendered)\n  })\n})\napp.set('views', './views') // specify the views directory\napp.set('view engine', 'ntl') // register the template engine\n```\n\nYour app will now be able to render `.ntl` files. Create a file named `index.ntl` in the `views` directory with the following content.\n\n``` text\n#title#\n#message#\n```\n\nThen, create the following route in your app.\n\n``` js\napp.get('/', (req, res) => {\n  res.render('index', { title: 'Hey', message: 'Hello there!' })\n})\n```\n\nWhen you make a request to the home page, `index.ntl` will be rendered as HTML.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/advanced/developing-template-engines.html](https://expressjs.com/en/advanced/developing-template-engines.html)"
- name: 1. Installing
  id: starter/installing
  summary: Assuming you’ve already installed Node.js, create a directory to hold your application, and make that your working directory
  description: "# Installing\n\nAssuming you’ve already installed [Node.js](https://nodejs.org/), create a directory to hold your application, and make that your working directory.\n\n``` console\n$ mkdir myapp\n$ cd myapp\n```\n\nUse the `npm init` command to create a `package.json` file for your application. For more information on how `package.json` works, see [Specifics of npm’s package.json handling](https://docs.npmjs.com/files/package.json).\n\n``` console\n$ npm init\n```\n\nThis command prompts you for a number of things, such as the name and version of your application. For now, you can simply hit RETURN to accept the defaults for most of them, with the following exception:\n\n    entry point: (index.js)\n\nEnter `app.js`, or whatever you want the name of the main file to be. If you want it to be `index.js`, hit RETURN to accept the suggested default file name.\n\nNow install Express in the `myapp` directory and save it in the dependencies list. For example:\n\n``` console\n$ npm install express\n```\n\nTo install Express temporarily and not add it to the dependencies list:\n\n``` console\n$ npm install express --no-save\n```\n\nBy default with version npm 5.0+ npm install adds the module to the `dependencies` list in the `package.json` file; with earlier versions of npm, you must specify the `--save` option explicitly. Then, afterwards, running `npm install` in the app directory will automatically install modules in the dependencies list.\n\n### [Next: Hello World](hello-world)\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/starter/installing.html](https://expressjs.com/en/starter/installing.html)"
- name: 1. Routing
  id: guide/routing
  summary: Routing refers to how an application’s endpoints (URIs) respond to client requests
  description: "# Routing\n\n*Routing* refers to how an application’s endpoints (URIs) respond to client requests. For an introduction to routing, see [Basic routing](../starter/basic-routing).\n\nYou define routing using methods of the Express `app` object that correspond to HTTP methods; for example, `app.get()` to handle GET requests and `app.post` to handle POST requests. For a full list, see [app.METHOD](../index#app.METHOD). You can also use [app.all()](../index#app.all) to handle all HTTP methods and [app.use()](../index#app.use) to specify middleware as the callback function (See [Using middleware](using-middleware) for details).\n\nThese routing methods specify a callback function (sometimes called “handler functions”) called when the application receives a request to the specified route (endpoint) and HTTP method. In other words, the application “listens” for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.\n\nIn fact, the routing methods can have more than one callback function as arguments. With multiple callback functions, it is important to provide `next` as an argument to the callback function and then call `next()` within the body of the function to hand off control to the next callback.\n\nThe following code is an example of a very basic route.\n\n``` js\nconst express = require('express')\nconst app = express()\n\n// respond with \"hello world\" when a GET request is made to the homepage\napp.get('/', (req, res) => {\n  res.send('hello world')\n})\n```\n\n## Route methods\n\nA route method is derived from one of the HTTP methods, and is attached to an instance of the `express` class.\n\nThe following code is an example of routes that are defined for the GET and the POST methods to the root of the app.\n\n``` js\n// GET method route\napp.get('/', (req, res) => {\n  res.send('GET request to the homepage')\n})\n\n// POST method route\napp.post('/', (req, res) => {\n  res.send('POST request to the homepage')\n})\n```\n\nExpress supports methods that correspond to all HTTP request methods: `get`, `post`, and so on. For a full list, see [app.METHOD](../index#app.METHOD).\n\nThere is a special routing method, `app.all()`, used to load middleware functions at a path for *all* HTTP request methods. For example, the following handler is executed for requests to the route “/secret” whether using GET, POST, PUT, DELETE, or any other HTTP request method supported in the [http module](https://nodejs.org/api/http.html#http_http_methods).\n\n``` js\napp.all('/secret', (req, res, next) => {\n  console.log('Accessing the secret section ...')\n  next() // pass control to the next handler\n})\n```\n\n## Route paths\n\nRoute paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.\n\nThe characters `?`, `+`, `*`, and `()` are subsets of their regular expression counterparts. The hyphen (`-`) and the dot (`.`) are interpreted literally by string-based paths.\n\nIf you need to use the dollar character (`$`) in a path string, enclose it escaped within `([` and `])`. For example, the path string for requests at “`/data/$book`”, would be “`/data/([\\$])book`”.\n\nExpress uses [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) for matching the route paths; see the path-to-regexp documentation for all the possibilities in defining route paths. [Express Route Tester](http://forbeslindesay.github.io/express-route-tester/) is a handy tool for testing basic Express routes, although it does not support pattern matching.\n\nQuery strings are not part of the route path.\n\nHere are some examples of route paths based on strings.\n\nThis route path will match requests to the root route, `/`.\n\n``` js\napp.get('/', (req, res) => {\n  res.send('root')\n})\n```\n\nThis route path will match requests to `/about`.\n\n``` js\napp.get('/about', (req, res) => {\n  res.send('about')\n})\n```\n\nThis route path will match requests to `/random.text`.\n\n``` js\napp.get('/random.text', (req, res) => {\n  res.send('random.text')\n})\n```\n\nHere are some examples of route paths based on string patterns.\n\nThis route path will match `acd` and `abcd`.\n\n``` js\napp.get('/ab?cd', (req, res) => {\n  res.send('ab?cd')\n})\n```\n\nThis route path will match `abcd`, `abbcd`, `abbbcd`, and so on.\n\n``` js\napp.get('/ab+cd', (req, res) => {\n  res.send('ab+cd')\n})\n```\n\nThis route path will match `abcd`, `abxcd`, `abRANDOMcd`, `ab123cd`, and so on.\n\n``` js\napp.get('/ab*cd', (req, res) => {\n  res.send('ab*cd')\n})\n```\n\nThis route path will match `/abe` and `/abcde`.\n\n``` js\napp.get('/ab(cd)?e', (req, res) => {\n  res.send('ab(cd)?e')\n})\n```\n\nExamples of route paths based on regular expressions:\n\nThis route path will match anything with an “a” in it.\n\n``` js\napp.get(/a/, (req, res) => {\n  res.send('/a/')\n})\n```\n\nThis route path will match `butterfly` and `dragonfly`, but not `butterflyman`, `dragonflyman`, and so on.\n\n``` js\napp.get(/.*fly$/, (req, res) => {\n  res.send('/.*fly$/')\n})\n```\n\n### Route parameters\n\nRoute parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the `req.params` object, with the name of the route parameter specified in the path as their respective keys.\n\n    Route path: /users/:userId/books/:bookId\n    Request URL: http://localhost:3000/users/34/books/8989\n    req.params: { \"userId\": \"34\", \"bookId\": \"8989\" }\n\nTo define routes with route parameters, simply specify the route parameters in the path of the route as shown below.\n\n``` js\napp.get('/users/:userId/books/:bookId', (req, res) => {\n  res.send(req.params)\n})\n```\n\nThe name of route parameters must be made up of “word characters” (\\[A-Za-z0-9\\_\\]).\n\nSince the hyphen (`-`) and the dot (`.`) are interpreted literally, they can be used along with route parameters for useful purposes.\n\n    Route path: /flights/:from-:to\n    Request URL: http://localhost:3000/flights/LAX-SFO\n    req.params: { \"from\": \"LAX\", \"to\": \"SFO\" }\n\n    Route path: /plantae/:genus.:species\n    Request URL: http://localhost:3000/plantae/Prunus.persica\n    req.params: { \"genus\": \"Prunus\", \"species\": \"persica\" }\n\nTo have more control over the exact string that can be matched by a route parameter, you can append a regular expression in parentheses (`()`):\n\n    Route path: /user/:userId(\\d+)\n    Request URL: http://localhost:3000/user/42\n    req.params: {\"userId\": \"42\"}\n\nBecause the regular expression is usually part of a literal string, be sure to escape any `\\` characters with an additional backslash, for example `\\\\d+`.\n\nIn Express 4.x, [the `*` character in regular expressions is not interpreted in the usual way](https://github.com/expressjs/express/issues/2495). As a workaround, use `{0,}` instead of `*`. This will likely be fixed in Express 5.\n\n## Route handlers\n\nYou can provide multiple callback functions that behave like [middleware](using-middleware) to handle a request. The only exception is that these callbacks might invoke `next('route')` to bypass the remaining route callbacks. You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there’s no reason to proceed with the current route.\n\nRoute handlers can be in the form of a function, an array of functions, or combinations of both, as shown in the following examples.\n\nA single callback function can handle a route. For example:\n\n``` js\napp.get('/example/a', (req, res) => {\n  res.send('Hello from A!')\n})\n```\n\nMore than one callback function can handle a route (make sure you specify the `next` object). For example:\n\n``` js\napp.get('/example/b', (req, res, next) => {\n  console.log('the response will be sent by the next function ...')\n  next()\n}, (req, res) => {\n  res.send('Hello from B!')\n})\n```\n\nAn array of callback functions can handle a route. For example:\n\n``` js\nconst cb0 = function (req, res, next) {\n  console.log('CB0')\n  next()\n}\n\nconst cb1 = function (req, res, next) {\n  console.log('CB1')\n  next()\n}\n\nconst cb2 = function (req, res) {\n  res.send('Hello from C!')\n}\n\napp.get('/example/c', [cb0, cb1, cb2])\n```\n\nA combination of independent functions and arrays of functions can handle a route. For example:\n\n``` js\nconst cb0 = function (req, res, next) {\n  console.log('CB0')\n  next()\n}\n\nconst cb1 = function (req, res, next) {\n  console.log('CB1')\n  next()\n}\n\napp.get('/example/d', [cb0, cb1], (req, res, next) => {\n  console.log('the response will be sent by the next function ...')\n  next()\n}, (req, res) => {\n  res.send('Hello from D!')\n})\n```\n\n## Response methods\n\nThe methods on the response object (`res`) in the following table can send a response to the client, and terminate the request-response cycle. If none of these methods are called from a route handler, the client request will be left hanging.\n\n| Method                                      | Description                                                                           |\n|---------------------------------------------|---------------------------------------------------------------------------------------|\n| [res.download()](../index#res.download)     | Prompt a file to be downloaded.                                                       |\n| [res.end()](../index#res.end)               | End the response process.                                                             |\n| [res.json()](../index#res.json)             | Send a JSON response.                                                                 |\n| [res.jsonp()](../index#res.jsonp)           | Send a JSON response with JSONP support.                                              |\n| [res.redirect()](../index#res.redirect)     | Redirect a request.                                                                   |\n| [res.render()](../index#res.render)         | Render a view template.                                                               |\n| [res.send()](../index#res.send)             | Send a response of various types.                                                     |\n| [res.sendFile()](../index#res.sendFile)     | Send a file as an octet stream.                                                       |\n| [res.sendStatus()](../index#res.sendStatus) | Set the response status code and send its string representation as the response body. |\n\n## app.route()\n\nYou can create chainable route handlers for a route path by using `app.route()`. Because the path is specified at a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see: [Router() documentation](../index#router).\n\nHere is an example of chained route handlers that are defined by using `app.route()`.\n\n``` js\napp.route('/book')\n  .get((req, res) => {\n    res.send('Get a random book')\n  })\n  .post((req, res) => {\n    res.send('Add a book')\n  })\n  .put((req, res) => {\n    res.send('Update the book')\n  })\n```\n\n## express.Router\n\nUse the `express.Router` class to create modular, mountable route handlers. A `Router` instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini-app”.\n\nThe following example creates a router as a module, loads a middleware function in it, defines some routes, and mounts the router module on a path in the main app.\n\nCreate a router file named `birds.js` in the app directory, with the following content:\n\n``` js\nconst express = require('express')\nconst router = express.Router()\n\n// middleware that is specific to this router\nrouter.use((req, res, next) => {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', (req, res) => {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', (req, res) => {\n  res.send('About birds')\n})\n\nmodule.exports = router\n```\n\nThen, load the router module in the app:\n\n``` js\nconst birds = require('./birds')\n\n// ...\n\napp.use('/birds', birds)\n```\n\nThe app will now be able to handle requests to `/birds` and `/birds/about`, as well as call the `timeLog` middleware function that is specific to the route.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/routing.html](https://expressjs.com/en/guide/routing.html)"
- name: 2. Hello world example
  id: starter/hello-world
  summary: Embedded below is essentially the simplest Express app you can create
  description: "# Hello world example\n\nEmbedded below is essentially the simplest Express app you can create. It is a single file app — *not* what you’d get if you use the [Express generator](generator), which creates the scaffolding for a full app with numerous JavaScript files, Jade templates, and sub-directories for various purposes.\n\n``` js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n```\n\nThis app starts a server and listens on port 3000 for connections. The app responds with “Hello World!” for requests to the root URL (`/`) or *route*. For every other path, it will respond with a **404 Not Found**.\n\nThe example above is actually a working server: Go ahead and click on the URL shown. You’ll get a response, with real-time logs on the page, and any changes you make will be reflected in real time. This is powered by [RunKit](https://runkit.com), which provides an interactive JavaScript playground connected to a complete Node environment that runs in your web browser. Below are instructions for running the same app on your local machine.\n\nRunKit is a third-party service not affiliated with the Express project.\n\n### Running Locally\n\nFirst create a directory named `myapp`, change to it and run `npm init`. Then install `express` as a dependency, as per the [installation guide](installing).\n\nIn the `myapp` directory, create a file named `app.js` and copy in the code from the example above.\n\nThe `req` (request) and `res` (response) are the exact same objects that Node provides, so you can invoke `req.pipe()`, `req.on('data', callback)`, and anything else you would do without Express involved.\n\nRun the app with the following command:\n\n``` console\n$ node app.js\n```\n\nThen, load `http://localhost:3000/` in a browser to see the output.\n\n### [Previous: Installing](installing) [Next: Express Generator](generator)\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/starter/hello-world.html](https://expressjs.com/en/starter/hello-world.html)"
- name: 2. Process managers for Express apps
  id: advanced/pm
  summary: 'Warning: This information refers to third-party sites, products, or modules that are not maintained by the Expressjs team'
  description: "# Process managers for Express apps\n\n**Warning**: This information refers to third-party sites, products, or modules that are not maintained by the Expressjs team. Listing here does not constitute an endorsement or recommendation from the Expressjs project team.\n\nWhen you run Express apps for production, it is helpful to use a *process manager* to:\n\n- Restart the app automatically if it crashes.\n- Gain insights into runtime performance and resource consumption.\n- Modify settings dynamically to improve performance.\n- Control clustering.\n\nA process manager is somewhat like an application server: it’s a “container” for applications that facilitates deployment, provides high availability, and enables you to manage the application at runtime.\n\nThe most popular process managers for Express and other Node.js applications are:\n\n- **[Forever](https://github.com/foreverjs/forever)**: A simple command-line interface tool to ensure that a script runs continuously (forever). Forever’s simple interface makes it ideal for running smaller deployments of Node.js apps and scripts.\n- **[PM2](https://github.com/Unitech/pm2)**: A production process manager for Node.js applications that has a built-in load balancer. PM2 enables you to keep applications alive forever, reloads them without downtime, helps you to manage application logging, monitoring, and clustering.\n- **[StrongLoop Process Manager (Strong-PM)](http://strong-pm.io/)**: A production process manager for Node.js applications with built-in load balancing, monitoring, and multi-host deployment. Includes a CLI to build, package, and deploy Node.js applications to a local or remote system.\n- **SystemD**: The default process manager on modern Linux distributions, that makes it simple to run a Node application as a service. For more information, see [“Run node.js service with systemd” by Ralph Slooten (@axllent)](https://www.axllent.org/docs/view/nodejs-service-with-systemd/).\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/advanced/pm.html](https://expressjs.com/en/advanced/pm.html)"
- name: 2. Writing middleware for use in Express apps
  id: guide/writing-middleware
  summary: Middleware functions are functions that have access to the request object (req), the response object (res), and the next function in the application’s request-response cycle
  description: "# Writing middleware for use in Express apps\n\n## Overview\n\n*Middleware* functions are functions that have access to the [request object](../index#req) (`req`), the [response object](../index#res) (`res`), and the `next` function in the application’s request-response cycle. The `next` function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.\n\nMiddleware functions can perform the following tasks:\n\n- Execute any code.\n- Make changes to the request and the response objects.\n- End the request-response cycle.\n- Call the next middleware in the stack.\n\nIf the current middleware function does not end the request-response cycle, it must call `next()` to pass control to the next middleware function. Otherwise, the request will be left hanging.\n\nThe following figure shows the elements of a middleware function call:\n\n[TABLE]\n\nStarting with Express 5, middleware functions that return a Promise will call `next(value)` when they reject or throw an error. `next` will be called with either the rejected value or the thrown Error.\n\n## Example\n\nHere is an example of a simple “Hello World” Express application. The remainder of this article will define and add three middleware functions to the application: one called `myLogger` that prints a simple log message, one called `requestTime` that displays the timestamp of the HTTP request, and one called `validateCookies` that validates incoming cookies.\n\n``` js\nconst express = require('express')\nconst app = express()\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(3000)\n```\n\n### Middleware function myLogger\n\nHere is a simple example of a middleware function called “myLogger”. This function just prints “LOGGED” when a request to the app passes through it. The middleware function is assigned to a variable named `myLogger`.\n\n``` js\nconst myLogger = function (req, res, next) {\n  console.log('LOGGED')\n  next()\n}\n```\n\nNotice the call above to `next()`. Calling this function invokes the next middleware function in the app. The `next()` function is not a part of the Node.js or Express API, but is the third argument that is passed to the middleware function. The `next()` function could be named anything, but by convention it is always named “next”. To avoid confusion, always use this convention.\n\nTo load the middleware function, call `app.use()`, specifying the middleware function. For example, the following code loads the `myLogger` middleware function before the route to the root path (/).\n\n``` js\nconst express = require('express')\nconst app = express()\n\nconst myLogger = function (req, res, next) {\n  console.log('LOGGED')\n  next()\n}\n\napp.use(myLogger)\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(3000)\n```\n\nEvery time the app receives a request, it prints the message “LOGGED” to the terminal.\n\nThe order of middleware loading is important: middleware functions that are loaded first are also executed first.\n\nIf `myLogger` is loaded after the route to the root path, the request never reaches it and the app doesn’t print “LOGGED”, because the route handler of the root path terminates the request-response cycle.\n\nThe middleware function `myLogger` simply prints a message, then passes on the request to the next middleware function in the stack by calling the `next()` function.\n\n### Middleware function requestTime\n\nNext, we’ll create a middleware function called “requestTime” and add a property called `requestTime` to the request object.\n\n``` js\nconst requestTime = function (req, res, next) {\n  req.requestTime = Date.now()\n  next()\n}\n```\n\nThe app now uses the `requestTime` middleware function. Also, the callback function of the root path route uses the property that the middleware function adds to `req` (the request object).\n\n``` js\nconst express = require('express')\nconst app = express()\n\nconst requestTime = function (req, res, next) {\n  req.requestTime = Date.now()\n  next()\n}\n\napp.use(requestTime)\n\napp.get('/', (req, res) => {\n  let responseText = 'Hello World!<br>'\n  responseText += `<small>Requested at: ${req.requestTime}</small>`\n  res.send(responseText)\n})\n\napp.listen(3000)\n```\n\nWhen you make a request to the root of the app, the app now displays the timestamp of your request in the browser.\n\n### Middleware function validateCookies\n\nFinally, we’ll create a middleware function that validates incoming cookies and sends a 400 response if cookies are invalid.\n\nHere’s an example function that validates cookies with an external async service.\n\n``` js\nasync function cookieValidator (cookies) {\n  try {\n    await externallyValidateCookie(cookies.testCookie)\n  } catch {\n    throw new Error('Invalid cookies')\n  }\n}\n```\n\nHere we use the [`cookie-parser`](https://expressjs.com/resources/middleware/cookie-parser.html) middleware to parse incoming cookies off the `req` object and pass them to our `cookieValidator` function. The `validateCookies` middleware returns a Promise that upon rejection will automatically trigger our error handler.\n\n``` js\nconst express = require('express')\nconst cookieParser = require('cookie-parser')\nconst cookieValidator = require('./cookieValidator')\n\nconst app = express()\n\nasync function validateCookies (req, res, next) {\n  await cookieValidator(req.cookies)\n  next()\n}\n\napp.use(cookieParser())\n\napp.use(validateCookies)\n\n// error handler\napp.use((err, req, res, next) => {\n  res.status(400).send(err.message)\n})\n\napp.listen(3000)\n```\n\nNote how `next()` is called after `await cookieValidator(req.cookies)`. This ensures that if `cookieValidator` resolves, the next middleware in the stack will get called. If you pass anything to the `next()` function (except the string `'route'` or `'router'`), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions.\n\nBecause you have access to the request object, the response object, the next middleware function in the stack, and the whole Node.js API, the possibilities with middleware functions are endless.\n\nFor more information about Express middleware, see: [Using Express middleware](using-middleware).\n\n## Configurable middleware\n\nIf you need your middleware to be configurable, export a function which accepts an options object or other parameters, which, then returns the middleware implementation based on the input parameters.\n\nFile: `my-middleware.js`\n\n``` js\nmodule.exports = function (options) {\n  return function (req, res, next) {\n    // Implement the middleware function based on the options object\n    next()\n  }\n}\n```\n\nThe middleware can now be used as shown below.\n\n``` js\nconst mw = require('./my-middleware.js')\n\napp.use(mw({ option1: '1', option2: '2' }))\n```\n\nRefer to [cookie-session](https://github.com/expressjs/cookie-session) and [compression](https://github.com/expressjs/compression) for examples of configurable middleware.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/writing-middleware.html](https://expressjs.com/en/guide/writing-middleware.html)"
- name: 3. Express application generator
  id: starter/generator
  summary: Use the application generator tool, express-generator, to quickly create an application skeleton
  description: "# Express application generator\n\nUse the application generator tool, `express-generator`, to quickly create an application skeleton.\n\nYou can run the application generator with the `npx` command (available in Node.js 8.2.0).\n\n``` console\n$ npx express-generator\n```\n\nFor earlier Node versions, install the application generator as a global npm package and then launch it:\n\n``` console\n$ npm install -g express-generator\n$ express\n```\n\nDisplay the command options with the `-h` option:\n\n``` console\n$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n        --no-view       generate without view engine\n    -v, --view <engine> add view <engine> support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n```\n\nFor example, the following creates an Express app named *myapp*. The app will be created in a folder named *myapp* in the current working directory and the view engine will be set to [Pug](https://pugjs.org/ \"Pug documentation\"):\n\n``` console\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/bin\n   create : myapp/bin/www\n```\n\nThen install dependencies:\n\n``` console\n$ cd myapp\n$ npm install\n```\n\nOn MacOS or Linux, run the app with this command:\n\n``` console\n$ DEBUG=myapp:* npm start\n```\n\nOn Windows Command Prompt, use this command:\n\n``` console\n> set DEBUG=myapp:* & npm start\n```\n\nOn Windows PowerShell, use this command:\n\n``` console\nPS> $env:DEBUG='myapp:*'; npm start\n```\n\nThen load `http://localhost:3000/` in your browser to access the app.\n\nThe generated app has the following directory structure:\n\n``` console\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n```\n\nThe app structure created by the generator is just one of many ways to structure Express apps. Feel free to use this structure or modify it to best suit your needs.\n\n### [Previous: Hello World](hello-world) [Next: Basic routing](basic-routing)\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/starter/generator.html](https://expressjs.com/en/starter/generator.html)"
- name: 3. Security updates
  id: advanced/security-updates
  summary: Node.js vulnerabilities directly affect Express
  description: "# Security updates\n\nNode.js vulnerabilities directly affect Express. Therefore [keep a watch on Node.js vulnerabilities](http://blog.nodejs.org/vulnerability/) and make sure you are using the latest stable version of Node.js.\n\nThe list below enumerates the Express vulnerabilities that were fixed in the specified version update.\n\n**NOTE**: If you believe you have discovered a security vulnerability in Express, please see [Security Policies and Procedures](https://expressjs.com/en/resources/contributing.html#security-policies-and-procedures).\n\n## 4.x\n\n- 4.16.0\n  - The dependency `forwarded` has been updated to address a [vulnerability](https://npmjs.com/advisories/527). This may affect your application if the following APIs are used: `req.host`, `req.hostname`, `req.ip`, `req.ips`, `req.protocol`.\n  - The dependency `mime` has been updated to address a [vulnerability](https://npmjs.com/advisories/535), but this issue does not impact Express.\n  - The dependency `send` has been updated to provide a protection against a [Node.js 8.5.0 vulnerability](https://nodejs.org/en/blog/vulnerability/september-2017-path-validation/). This only impacts running Express on the specific Node.js version 8.5.0.\n- 4.15.5\n  - The dependency `debug` has been updated to address a [vulnerability](https://snyk.io/vuln/npm:debug:20170905), but this issue does not impact Express.\n  - The dependency `fresh` has been updated to address a [vulnerability](https://npmjs.com/advisories/526). This will affect your application if the following APIs are used: `express.static`, `req.fresh`, `res.json`, `res.jsonp`, `res.send`, `res.sendfile` `res.sendFile`, `res.sendStatus`.\n- 4.15.3\n  - The dependency `ms` has been updated to address a [vulnerability](https://snyk.io/vuln/npm:ms:20170412). This may affect your application if untrusted string input is passed to the `maxAge` option in the following APIs: `express.static`, `res.sendfile`, and `res.sendFile`.\n- 4.15.2\n  - The dependency `qs` has been updated to address a [vulnerability](https://snyk.io/vuln/npm:qs:20170213), but this issue does not impact Express. Updating to 4.15.2 is a good practice, but not required to address the vulnerability.\n- 4.11.1\n  - Fixed root path disclosure vulnerability in `express.static`, `res.sendfile`, and `res.sendFile`\n- 4.10.7\n  - Fixed open redirect vulnerability in `express.static` ([advisory](https://npmjs.com/advisories/35), [CVE-2015-1164](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1164)).\n- 4.8.8\n  - Fixed directory traversal vulnerabilities in `express.static` ([advisory](http://npmjs.com/advisories/32) , [CVE-2014-6394](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6394)).\n- 4.8.4\n  - Node.js 0.10 can leak `fd`s in certain situations that affect `express.static` and `res.sendfile`. Malicious requests could cause `fd`s to leak and eventually lead to `EMFILE` errors and server unresponsiveness.\n- 4.8.0\n  - Sparse arrays that have extremely high indexes in the query string could cause the process to run out of memory and crash the server.\n  - Extremely nested query string objects could cause the process to block and make the server unresponsive temporarily.\n\n## 3.x\n\n**Express 3.x IS NO LONGER MAINTAINED**\n\nKnown and unknown security issues in 3.x have not been addressed since the last update (1 August, 2015). Using the 3.x line should not be considered secure.\n\n- 3.19.1\n  - Fixed root path disclosure vulnerability in `express.static`, `res.sendfile`, and `res.sendFile`\n- 3.19.0\n  - Fixed open redirect vulnerability in `express.static` ([advisory](https://npmjs.com/advisories/35), [CVE-2015-1164](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1164)).\n- 3.16.10\n  - Fixed directory traversal vulnerabilities in `express.static`.\n- 3.16.6\n  - Node.js 0.10 can leak `fd`s in certain situations that affect `express.static` and `res.sendfile`. Malicious requests could cause `fd`s to leak and eventually lead to `EMFILE` errors and server unresponsiveness.\n- 3.16.0\n  - Sparse arrays that have extremely high indexes in query string could cause the process to run out of memory and crash the server.\n  - Extremely nested query string objects could cause the process to block and make the server unresponsive temporarily.\n- 3.3.0\n  - The 404 response of an unsupported method override attempt was susceptible to cross-site scripting attacks.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/advanced/security-updates.html](https://expressjs.com/en/advanced/security-updates.html)"
- name: 3. Using middleware
  id: guide/using-middleware
  summary: 'Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls'
  description: "# Using middleware\n\nExpress is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls.\n\n*Middleware* functions are functions that have access to the [request object](../index#req) (`req`), the [response object](../index#res) (`res`), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named `next`.\n\nMiddleware functions can perform the following tasks:\n\n- Execute any code.\n- Make changes to the request and the response objects.\n- End the request-response cycle.\n- Call the next middleware function in the stack.\n\nIf the current middleware function does not end the request-response cycle, it must call `next()` to pass control to the next middleware function. Otherwise, the request will be left hanging.\n\nAn Express application can use the following types of middleware:\n\n- [Application-level middleware](#middleware.application)\n- [Router-level middleware](#middleware.router)\n- [Error-handling middleware](#middleware.error-handling)\n- [Built-in middleware](#middleware.built-in)\n- [Third-party middleware](#middleware.third-party)\n\nYou can load application-level and router-level middleware with an optional mount path. You can also load a series of middleware functions together, which creates a sub-stack of the middleware system at a mount point.\n\n## Application-level middleware\n\nBind application-level middleware to an instance of the [app object](../index#app) by using the `app.use()` and `app.METHOD()` functions, where `METHOD` is the HTTP method of the request that the middleware function handles (such as GET, PUT, or POST) in lowercase.\n\nThis example shows a middleware function with no mount path. The function is executed every time the app receives a request.\n\n``` js\nconst express = require('express')\nconst app = express()\n\napp.use((req, res, next) => {\n  console.log('Time:', Date.now())\n  next()\n})\n```\n\nThis example shows a middleware function mounted on the `/user/:id` path. The function is executed for any type of HTTP request on the `/user/:id` path.\n\n``` js\napp.use('/user/:id', (req, res, next) => {\n  console.log('Request Type:', req.method)\n  next()\n})\n```\n\nThis example shows a route and its handler function (middleware system). The function handles GET requests to the `/user/:id` path.\n\n``` js\napp.get('/user/:id', (req, res, next) => {\n  res.send('USER')\n})\n```\n\nHere is an example of loading a series of middleware functions at a mount point, with a mount path. It illustrates a middleware sub-stack that prints request info for any type of HTTP request to the `/user/:id` path.\n\n``` js\napp.use('/user/:id', (req, res, next) => {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}, (req, res, next) => {\n  console.log('Request Type:', req.method)\n  next()\n})\n```\n\nRoute handlers enable you to define multiple routes for a path. The example below defines two routes for GET requests to the `/user/:id` path. The second route will not cause any problems, but it will never get called because the first route ends the request-response cycle.\n\nThis example shows a middleware sub-stack that handles GET requests to the `/user/:id` path.\n\n``` js\napp.get('/user/:id', (req, res, next) => {\n  console.log('ID:', req.params.id)\n  next()\n}, (req, res, next) => {\n  res.send('User Info')\n})\n\n// handler for the /user/:id path, which prints the user ID\napp.get('/user/:id', (req, res, next) => {\n  res.send(req.params.id)\n})\n```\n\nTo skip the rest of the middleware functions from a router middleware stack, call `next('route')` to pass control to the next route. **NOTE**: `next('route')` will work only in middleware functions that were loaded by using the `app.METHOD()` or `router.METHOD()` functions.\n\nThis example shows a middleware sub-stack that handles GET requests to the `/user/:id` path.\n\n``` js\napp.get('/user/:id', (req, res, next) => {\n  // if the user ID is 0, skip to the next route\n  if (req.params.id === '0') next('route')\n  // otherwise pass the control to the next middleware function in this stack\n  else next()\n}, (req, res, next) => {\n  // send a regular response\n  res.send('regular')\n})\n\n// handler for the /user/:id path, which sends a special response\napp.get('/user/:id', (req, res, next) => {\n  res.send('special')\n})\n```\n\nMiddleware can also be declared in an array for reusability.\n\nThis example shows an array with a middleware sub-stack that handles GET requests to the `/user/:id` path\n\n``` js\nfunction logOriginalUrl (req, res, next) {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}\n\nfunction logMethod (req, res, next) {\n  console.log('Request Type:', req.method)\n  next()\n}\n\nconst logStuff = [logOriginalUrl, logMethod]\napp.get('/user/:id', logStuff, (req, res, next) => {\n  res.send('User Info')\n})\n```\n\n## Router-level middleware\n\nRouter-level middleware works in the same way as application-level middleware, except it is bound to an instance of `express.Router()`.\n\n``` js\nconst router = express.Router()\n```\n\nLoad router-level middleware by using the `router.use()` and `router.METHOD()` functions.\n\nThe following example code replicates the middleware system that is shown above for application-level middleware, by using router-level middleware:\n\n``` js\nconst express = require('express')\nconst app = express()\nconst router = express.Router()\n\n// a middleware function with no mount path. This code is executed for every request to the router\nrouter.use((req, res, next) => {\n  console.log('Time:', Date.now())\n  next()\n})\n\n// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path\nrouter.use('/user/:id', (req, res, next) => {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}, (req, res, next) => {\n  console.log('Request Type:', req.method)\n  next()\n})\n\n// a middleware sub-stack that handles GET requests to the /user/:id path\nrouter.get('/user/:id', (req, res, next) => {\n  // if the user ID is 0, skip to the next router\n  if (req.params.id === '0') next('route')\n  // otherwise pass control to the next middleware function in this stack\n  else next()\n}, (req, res, next) => {\n  // render a regular page\n  res.render('regular')\n})\n\n// handler for the /user/:id path, which renders a special page\nrouter.get('/user/:id', (req, res, next) => {\n  console.log(req.params.id)\n  res.render('special')\n})\n\n// mount the router on the app\napp.use('/', router)\n```\n\nTo skip the rest of the router’s middleware functions, call `next('router')` to pass control back out of the router instance.\n\nThis example shows a middleware sub-stack that handles GET requests to the `/user/:id` path.\n\n``` js\nconst express = require('express')\nconst app = express()\nconst router = express.Router()\n\n// predicate the router with a check and bail out when needed\nrouter.use((req, res, next) => {\n  if (!req.headers['x-auth']) return next('router')\n  next()\n})\n\nrouter.get('/user/:id', (req, res) => {\n  res.send('hello, user!')\n})\n\n// use the router and 401 anything falling through\napp.use('/admin', router, (req, res) => {\n  res.sendStatus(401)\n})\n```\n\n## Error-handling middleware\n\nError-handling middleware always takes *four* arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you don’t need to use the `next` object, you must specify it to maintain the signature. Otherwise, the `next` object will be interpreted as regular middleware and will fail to handle errors.\n\nDefine error-handling middleware functions in the same way as other middleware functions, except with four arguments instead of three, specifically with the signature `(err, req, res, next)`):\n\n``` js\napp.use((err, req, res, next) => {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n```\n\nFor details about error-handling middleware, see: [Error handling](error-handling).\n\n## Built-in middleware\n\nStarting with version 4.x, Express no longer depends on [Connect](https://github.com/senchalabs/connect). The middleware functions that were previously included with Express are now in separate modules; see [the list of middleware functions](https://github.com/senchalabs/connect#middleware).\n\nExpress has the following built-in middleware functions:\n\n- [express.static](../index#express.static) serves static assets such as HTML files, images, and so on.\n- [express.json](../index#express.json) parses incoming requests with JSON payloads. **NOTE: Available with Express 4.16.0+**\n- [express.urlencoded](../index#express.urlencoded) parses incoming requests with URL-encoded payloads. **NOTE: Available with Express 4.16.0+**\n\n## Third-party middleware\n\nUse third-party middleware to add functionality to Express apps.\n\nInstall the Node.js module for the required functionality, then load it in your app at the application level or at the router level.\n\nThe following example illustrates installing and loading the cookie-parsing middleware function `cookie-parser`.\n\n``` console\n$ npm install cookie-parser\n```\n\n``` js\nconst express = require('express')\nconst app = express()\nconst cookieParser = require('cookie-parser')\n\n// load the cookie-parsing middleware\napp.use(cookieParser())\n```\n\nFor a partial list of third-party middleware functions that are commonly used with Express, see: [Third-party middleware](https://expressjs.com/en/resources/middleware.html).\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/using-middleware.html](https://expressjs.com/en/guide/using-middleware.html)"
- name: 4. Basic routing
  id: starter/basic-routing
  summary: Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on)
  description: "# Basic routing\n\n*Routing* refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).\n\nEach route can have one or more handler functions, which are executed when the route is matched.\n\nRoute definition takes the following structure:\n\n``` js\napp.METHOD(PATH, HANDLER)\n```\n\nWhere:\n\n- `app` is an instance of `express`.\n- `METHOD` is an [HTTP request method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), in lowercase.\n- `PATH` is a path on the server.\n- `HANDLER` is the function executed when the route is matched.\n\nThis tutorial assumes that an instance of `express` named `app` is created and the server is running. If you are not familiar with creating an app and starting it, see the [Hello world example](hello-world).\n\nThe following examples illustrate defining simple routes.\n\nRespond with `Hello World!` on the homepage:\n\n``` js\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n```\n\nRespond to POST request on the root route (`/`), the application’s home page:\n\n``` js\napp.post('/', (req, res) => {\n  res.send('Got a POST request')\n})\n```\n\nRespond to a PUT request to the `/user` route:\n\n``` js\napp.put('/user', (req, res) => {\n  res.send('Got a PUT request at /user')\n})\n```\n\nRespond to a DELETE request to the `/user` route:\n\n``` js\napp.delete('/user', (req, res) => {\n  res.send('Got a DELETE request at /user')\n})\n```\n\nFor more details about routing, see the [routing guide](../guide/routing).\n\n### [Previous: Express application generator](generator) [Next: Serving static files in Express](static-files)\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/starter/basic-routing.html](https://expressjs.com/en/starter/basic-routing.html)"
- name: 4. Overriding the Express API
  id: guide/overriding-express-api
  summary: The Express API consists of various methods and properties on the request and response objects
  description: "# Overriding the Express API\n\nThe Express API consists of various methods and properties on the request and response objects. These are inherited by prototype. There are two extension points for the Express API:\n\n1.  The global prototypes at `express.request` and `express.response`.\n2.  App-specific prototypes at `app.request` and `app.response`.\n\nAltering the global prototypes will affect all loaded Express apps in the same process. If desired, alterations can be made app-specific by only altering the app-specific prototypes after creating a new app.\n\n## Methods\n\nYou can override the signature and behavior of existing methods with your own, by assigning a custom function.\n\nFollowing is an example of overriding the behavior of [res.sendStatus](https://expressjs.com/index.html#res.sendStatus).\n\n``` js\napp.response.sendStatus = function (statusCode, type, message) {\n  // code is intentionally kept simple for demonstration purpose\n  return this.contentType(type)\n    .status(statusCode)\n    .send(message)\n}\n```\n\nThe above implementation completely changes the original signature of `res.sendStatus`. It now accepts a status code, encoding type, and the message to be sent to the client.\n\nThe overridden method may now be used this way:\n\n``` js\nres.sendStatus(404, 'application/json', '{\"error\":\"resource not found\"}')\n```\n\n## Properties\n\nProperties in the Express API are either:\n\n1.  Assigned properties (ex: `req.baseUrl`, `req.originalUrl`)\n2.  Defined as getters (ex: `req.secure`, `req.ip`)\n\nSince properties under category 1 are dynamically assigned on the `request` and `response` objects in the context of the current request-response cycle, their behavior cannot be overridden.\n\nProperties under category 2 can be overwritten using the Express API extensions API.\n\nThe following code rewrites how the value of `req.ip` is to be derived. Now, it simply returns the value of the `Client-IP` request header.\n\n``` js\nObject.defineProperty(app.request, 'ip', {\n  configurable: true,\n  enumerable: true,\n  get () { return this.get('Client-IP') }\n})\n```\n\n## Prototype\n\nIn order to provide the Express.js API, the request/response obects passed to Express.js (via `app(req, res)`, for example) need to inherit from the same prototype chain. By default this is `http.IncomingRequest.prototype` for the request and `http.ServerResponse.prototype` for the response.\n\nUnless necessary, it is recommended that this be done only at the application level, rather than globally. Also, take care that the prototype that is being used matches the functionality as closely as possible to the default prototypes.\n\n``` js\n// Use FakeRequest and FakeResponse in place of http.IncomingRequest and http.ServerResponse\n// for the given app reference\nObject.setPrototypeOf(Object.getPrototypeOf(app.request), FakeRequest.prototype)\nObject.setPrototypeOf(Object.getPrototypeOf(app.response), FakeResponse.prototype)\n```\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/overriding-express-api.html](https://expressjs.com/en/guide/overriding-express-api.html)"
- name: '4. Production Best Practices: Security'
  id: advanced/best-practice-security
  summary: The term “production” refers to the stage in the software lifecycle when an application or API is generally available to its end-users or consumers
  description: "# Production Best Practices: Security\n\n## Overview\n\nThe term *“production”* refers to the stage in the software lifecycle when an application or API is generally available to its end-users or consumers. In contrast, in the *“development”* stage, you’re still actively writing and testing code, and the application is not open to external access. The corresponding system environments are known as *production* and *development* environments, respectively.\n\nDevelopment and production environments are usually set up differently and have vastly different requirements. What’s fine in development may not be acceptable in production. For example, in a development environment you may want verbose logging of errors for debugging, while the same behavior can become a security concern in a production environment. And in development, you don’t need to worry about scalability, reliability, and performance, while those concerns become critical in production.\n\n**Note**: If you believe you have discovered a security vulnerability in Express, please see [Security Policies and Procedures](https://expressjs.com/en/resources/contributing.html#security-policies-and-procedures).\n\nSecurity best practices for Express applications in production include:\n\n- [Don’t use deprecated or vulnerable versions of Express](#dont-use-deprecated-or-vulnerable-versions-of-express)\n- [Use TLS](#use-tls)\n- [Use Helmet](#use-helmet)\n- [Use cookies securely](#use-cookies-securely)\n- [Prevent brute-force attacks against authorization](#prevent-brute-force-attacks-against-authorization)\n- [Ensure your dependencies are secure](#ensure-your-dependencies-are-secure)\n- [Avoid other known vulnerabilities](#avoid-other-known-vulnerabilities)\n- [Additional considerations](#additional-considerations)\n\n## Don’t use deprecated or vulnerable versions of Express\n\nExpress 2.x and 3.x are no longer maintained. Security and performance issues in these versions won’t be fixed. Do not use them! If you haven’t moved to version 4, follow the [migration guide](../guide/migrating-4).\n\nAlso ensure you are not using any of the vulnerable Express versions listed on the [Security updates page](security-updates). If you are, update to one of the stable releases, preferably the latest.\n\n## Use TLS\n\nIf your app deals with or transmits sensitive data, use [Transport Layer Security](https://en.wikipedia.org/wiki/Transport_Layer_Security) (TLS) to secure the connection and the data. This technology encrypts data before it is sent from the client to the server, thus preventing some common (and easy) hacks. Although Ajax and POST requests might not be visibly obvious and seem “hidden” in browsers, their network traffic is vulnerable to [packet sniffing](https://en.wikipedia.org/wiki/Packet_analyzer) and [man-in-the-middle attacks](https://en.wikipedia.org/wiki/Man-in-the-middle_attack).\n\nYou may be familiar with Secure Socket Layer (SSL) encryption. [TLS is simply the next progression of SSL](https://msdn.microsoft.com/en-us/library/windows/desktop/aa380515(v=vs.85).aspx). In other words, if you were using SSL before, consider upgrading to TLS. In general, we recommend Nginx to handle TLS. For a good reference to configure TLS on Nginx (and other servers), see [Recommended Server Configurations (Mozilla Wiki)](https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Server_Configurations).\n\nAlso, a handy tool to get a free TLS certificate is [Let’s Encrypt](https://letsencrypt.org/about/), a free, automated, and open certificate authority (CA) provided by the [Internet Security Research Group (ISRG)](https://www.abetterinternet.org/).\n\n## Use Helmet\n\n[Helmet](https://helmetjs.github.io/) can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately.\n\nHelmet is a collection of several smaller middleware functions that set security-related HTTP response headers. Some examples include:\n\n- `helmet.contentSecurityPolicy` which sets the `Content-Security-Policy` header. This helps prevent cross-site scripting attacks among many other things.\n- `helmet.hsts` which sets the `Strict-Transport-Security` header. This helps enforce secure (HTTPS) connections to the server.\n- `helmet.frameguard` which sets the `X-Frame-Options` header. This provides [clickjacking](https://www.owasp.org/index.php/Clickjacking) protection.\n\nHelmet includes several other middleware functions which you can read about [at its documentation website](https://helmetjs.github.io/).\n\nInstall Helmet like any other module:\n\n``` console\n$ npm install --save helmet\n```\n\nThen to use it in your code:\n\n``` js\n// ...\n\nconst helmet = require('helmet')\napp.use(helmet())\n\n// ...\n```\n\n### Reduce Fingerprinting\n\nIt can help to provide an extra layer of obsecurity to reduce server fingerprinting. Though not a security issue itself, a method to improve the overall posture of a web server is to take measures to reduce the ability to fingerprint the software being used on the server. Server software can be fingerprinted by kwirks in how they respond to specific requests.\n\nBy default, Express.js sends the `X-Powered-By` response header banner. This can be disabled using the `app.disable()` method:\n\n``` js\napp.disable('x-powered-by')\n```\n\n**Note**: Disabling the `X-Powered-By header` does not prevent a sophisticated attacker from determining that an app is running Express. It may discourage a casual exploit, but there are other ways to determine an app is running Express.\n\nExpress.js also sends it’s own formatted 404 Not Found messages and own formatter error response messages. These can be changed by [adding your own not found handler](../starter/faq#how-do-i-handle-404-responses) and [writing your own error handler](../guide/error-handling#writing-error-handlers):\n\n``` js\n// last app.use calls right before app.listen():\n\n// custom 404\napp.use((req, res, next) => {\n  res.status(404).send(\"Sorry can't find that!\")\n})\n\n// custom error handler\napp.use((err, req, res, next) => {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n```\n\n## Use cookies securely\n\nTo ensure cookies don’t open your app to exploits, don’t use the default session cookie name and set cookie security options appropriately.\n\nThere are two main middleware cookie session modules:\n\n- [express-session](https://www.npmjs.com/package/express-session) that replaces `express.session` middleware built-in to Express 3.x.\n- [cookie-session](https://www.npmjs.com/package/cookie-session) that replaces `express.cookieSession` middleware built-in to Express 3.x.\n\nThe main difference between these two modules is how they save cookie session data. The [express-session](https://www.npmjs.com/package/express-session) middleware stores session data on the server; it only saves the session ID in the cookie itself, not session data. By default, it uses in-memory storage and is not designed for a production environment. In production, you’ll need to set up a scalable session-store; see the list of [compatible session stores](https://github.com/expressjs/session#compatible-session-stores).\n\nIn contrast, [cookie-session](https://www.npmjs.com/package/cookie-session) middleware implements cookie-backed storage: it serializes the entire session to the cookie, rather than just a session key. Only use it when session data is relatively small and easily encoded as primitive values (rather than objects). Although browsers are supposed to support at least 4096 bytes per cookie, to ensure you don’t exceed the limit, don’t exceed a size of 4093 bytes per domain. Also, be aware that the cookie data will be visible to the client, so if there is any reason to keep it secure or obscure, then express-session may be a better choice.\n\n### Don’t use the default session cookie name\n\nUsing the default session cookie name can open your app to attacks. The security issue posed is similar to `X-Powered-By`: a potential attacker can use it to fingerprint the server and target attacks accordingly.\n\nTo avoid this problem, use generic cookie names; for example using [express-session](https://www.npmjs.com/package/express-session) middleware:\n\n``` js\nconst session = require('express-session')\napp.set('trust proxy', 1) // trust first proxy\napp.use(session({\n  secret: 's3Cur3',\n  name: 'sessionId'\n}))\n```\n\n### Set cookie security options\n\nSet the following cookie options to enhance security:\n\n- `secure` - Ensures the browser only sends the cookie over HTTPS.\n- `httpOnly` - Ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.\n- `domain` - indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.\n- `path` - indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.\n- `expires` - use to set expiration date for persistent cookies.\n\nHere is an example using [cookie-session](https://www.npmjs.com/package/cookie-session) middleware:\n\n``` js\nconst session = require('cookie-session')\nconst express = require('express')\nconst app = express()\n\nconst expiryDate = new Date(Date.now() + 60 * 60 * 1000) // 1 hour\napp.use(session({\n  name: 'session',\n  keys: ['key1', 'key2'],\n  cookie: {\n    secure: true,\n    httpOnly: true,\n    domain: 'example.com',\n    path: 'foo/bar',\n    expires: expiryDate\n  }\n}))\n```\n\n## Prevent brute-force attacks against authorization\n\nMake sure login endpoints are protected to make private data more secure.\n\nA simple and powerful technique is to block authorization attempts using two metrics:\n\n1.  The first is number of consecutive failed attempts by the same user name and IP address.\n2.  The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.\n\n[rate-limiter-flexible](https://github.com/animir/node-rate-limiter-flexible) package provides tools to make this technique easy and fast. You can find [an example of brute-force protection in the documentation](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection)\n\n## Ensure your dependencies are secure\n\nUsing npm to manage your application’s dependencies is powerful and convenient. But the packages that you use may contain critical security vulnerabilities that could also affect your application. The security of your app is only as strong as the “weakest link” in your dependencies.\n\nSince npm@6, npm automatically reviews every install request. Also you can use ‘npm audit’ to analyze your dependency tree.\n\n``` console\n$ npm audit\n```\n\nIf you want to stay more secure, consider [Snyk](https://snyk.io/).\n\nSnyk offers both a [command-line tool](https://www.npmjs.com/package/snyk) and a [Github integration](https://snyk.io/docs/github) that checks your application against [Snyk’s open source vulnerability database](https://snyk.io/vuln/) for any known vulnerabilities in your dependencies. Install the CLI as follows:\n\n``` console\n$ npm install -g snyk\n$ cd your-app\n```\n\nUse this command to test your application for vulnerabilities:\n\n``` console\n$ snyk test\n```\n\nUse this command to open a wizard that walks you through the process of applying updates or patches to fix the vulnerabilities that were found:\n\n``` console\n$ snyk wizard\n```\n\n## Avoid other known vulnerabilities\n\nKeep an eye out for [Node Security Project](https://npmjs.com/advisories) or [Snyk](https://snyk.io/vuln/) advisories that may affect Express or other modules that your app uses. In general, these databases are excellent resources for knowledge and tools about Node security.\n\nFinally, Express apps - like any other web apps - can be vulnerable to a variety of web-based attacks. Familiarize yourself with known [web vulnerabilities](https://www.owasp.org/www-project-top-ten/) and take precautions to avoid them.\n\n## Additional considerations\n\nHere are some further recommendations from the excellent [Node.js Security Checklist](https://blog.risingstack.com/node-js-security-checklist/). Refer to that blog post for all the details on these recommendations:\n\n- Use [csurf](https://www.npmjs.com/package/csurf) middleware to protect against cross-site request forgery (CSRF).\n- Always filter and sanitize user input to protect against cross-site scripting (XSS) and command injection attacks.\n- Defend against SQL injection attacks by using parameterized queries or prepared statements.\n- Use the open-source [sqlmap](http://sqlmap.org/) tool to detect SQL injection vulnerabilities in your app.\n- Use the [nmap](https://nmap.org/) and [sslyze](https://github.com/nabla-c0d3/sslyze) tools to test the configuration of your SSL ciphers, keys, and renegotiation as well as the validity of your certificate.\n- Use [safe-regex](https://www.npmjs.com/package/safe-regex) to ensure your regular expressions are not susceptible to [regular expression denial of service](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS) attacks.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/advanced/best-practice-security.html](https://expressjs.com/en/advanced/best-practice-security.html)"
- name: '5. Production best practices: performance and reliability'
  id: advanced/best-practice-performance
  summary: This article discusses performance and reliability best practices for Express applications deployed to production
  description: "# Production best practices: performance and reliability\n\n## Overview\n\nThis article discusses performance and reliability best practices for Express applications deployed to production.\n\nThis topic clearly falls into the “devops” world, spanning both traditional development and operations. Accordingly, the information is divided into two parts:\n\n- Things to do in your code (the dev part):\n  - [Use gzip compression](#use-gzip-compression)\n  - [Don’t use synchronous functions](#dont-use-synchronous-functions)\n  - [Do logging correctly](#do-logging-correctly)\n  - [Handle exceptions properly](#handle-exceptions-properly)\n- Things to do in your environment / setup (the ops part):\n  - [Set NODE_ENV to “production”](#set-node_env-to-production)\n  - [Ensure your app automatically restarts](#ensure-your-app-automatically-restarts)\n  - [Run your app in a cluster](#run-your-app-in-a-cluster)\n  - [Cache request results](#cache-request-results)\n  - [Use a load balancer](#use-a-load-balancer)\n  - [Use a reverse proxy](#use-a-reverse-proxy)\n\n## Things to do in your code\n\nHere are some things you can do in your code to improve your application’s performance:\n\n- [Use gzip compression](#use-gzip-compression)\n- [Don’t use synchronous functions](#dont-use-synchronous-functions)\n- [Do logging correctly](#do-logging-correctly)\n- [Handle exceptions properly](#handle-exceptions-properly)\n\n### Use gzip compression\n\nGzip compressing can greatly decrease the size of the response body and hence increase the speed of a web app. Use the [compression](https://www.npmjs.com/package/compression) middleware for gzip compression in your Express app. For example:\n\n``` js\nconst compression = require('compression')\nconst express = require('express')\nconst app = express()\napp.use(compression())\n```\n\nFor a high-traffic website in production, the best way to put compression in place is to implement it at a reverse proxy level (see [Use a reverse proxy](#use-a-reverse-proxy)). In that case, you do not need to use compression middleware. For details on enabling gzip compression in Nginx, see [Module ngx_http_gzip_module](http://nginx.org/en/docs/http/ngx_http_gzip_module.html) in the Nginx documentation.\n\n### Don’t use synchronous functions\n\nSynchronous functions and methods tie up the executing process until they return. A single call to a synchronous function might return in a few microseconds or milliseconds, however in high-traffic websites, these calls add up and reduce the performance of the app. Avoid their use in production.\n\nAlthough Node and many modules provide synchronous and asynchronous versions of their functions, always use the asynchronous version in production. The only time when a synchronous function can be justified is upon initial startup.\n\nIf you are using Node.js 4.0+ or io.js 2.1.0+, you can use the `--trace-sync-io` command-line flag to print a warning and a stack trace whenever your application uses a synchronous API. Of course, you wouldn’t want to use this in production, but rather to ensure that your code is ready for production. See the [node command-line options documentation](https://nodejs.org/api/cli.html#cli_trace_sync_io) for more information.\n\n### Do logging correctly\n\nIn general, there are two reasons for logging from your app: For debugging and for logging app activity (essentially, everything else). Using `console.log()` or `console.error()` to print log messages to the terminal is common practice in development. But [these functions are synchronous](https://nodejs.org/api/console.html#console_console_1) when the destination is a terminal or a file, so they are not suitable for production, unless you pipe the output to another program.\n\n#### For debugging\n\nIf you’re logging for purposes of debugging, then instead of using `console.log()`, use a special debugging module like [debug](https://www.npmjs.com/package/debug). This module enables you to use the DEBUG environment variable to control what debug messages are sent to `console.error()`, if any. To keep your app purely asynchronous, you’d still want to pipe `console.error()` to another program. But then, you’re not really going to debug in production, are you?\n\n#### For app activity\n\nIf you’re logging app activity (for example, tracking traffic or API calls), instead of using `console.log()`, use a logging library like [Winston](https://www.npmjs.com/package/winston) or [Bunyan](https://www.npmjs.com/package/bunyan). For a detailed comparison of these two libraries, see the StrongLoop blog post [Comparing Winston and Bunyan Node.js Logging](https://strongloop.com/strongblog/compare-node-js-logging-winston-bunyan/).\n\n### Handle exceptions properly\n\nNode apps crash when they encounter an uncaught exception. Not handling exceptions and taking appropriate actions will make your Express app crash and go offline. If you follow the advice in [Ensure your app automatically restarts](#ensure-your-app-automatically-restarts) below, then your app will recover from a crash. Fortunately, Express apps typically have a short startup time. Nevertheless, you want to avoid crashing in the first place, and to do that, you need to handle exceptions properly.\n\nTo ensure you handle all exceptions, use the following techniques:\n\n- [Use try-catch](#use-try-catch)\n- [Use promises](#use-promises)\n\nBefore diving into these topics, you should have a basic understanding of Node/Express error handling: using error-first callbacks, and propagating errors in middleware. Node uses an “error-first callback” convention for returning errors from asynchronous functions, where the first parameter to the callback function is the error object, followed by result data in succeeding parameters. To indicate no error, pass null as the first parameter. The callback function must correspondingly follow the error-first callback convention to meaningfully handle the error. And in Express, the best practice is to use the next() function to propagate errors through the middleware chain.\n\nFor more on the fundamentals of error handling, see:\n\n- [Error Handling in Node.js](https://www.joyent.com/developers/node/design/errors)\n- [Building Robust Node Applications: Error Handling](https://strongloop.com/strongblog/robust-node-applications-error-handling/) (StrongLoop blog)\n\n#### What not to do\n\nOne thing you should *not* do is to listen for the `uncaughtException` event, emitted when an exception bubbles all the way back to the event loop. Adding an event listener for `uncaughtException` will change the default behavior of the process that is encountering an exception; the process will continue to run despite the exception. This might sound like a good way of preventing your app from crashing, but continuing to run the app after an uncaught exception is a dangerous practice and is not recommended, because the state of the process becomes unreliable and unpredictable.\n\nAdditionally, using `uncaughtException` is officially recognized as [crude](https://nodejs.org/api/process.html#process_event_uncaughtexception). So listening for `uncaughtException` is just a bad idea. This is why we recommend things like multiple processes and supervisors: crashing and restarting is often the most reliable way to recover from an error.\n\nWe also don’t recommend using [domains](https://nodejs.org/api/domain.html). It generally doesn’t solve the problem and is a deprecated module.\n\n#### Use try-catch\n\nTry-catch is a JavaScript language construct that you can use to catch exceptions in synchronous code. Use try-catch, for example, to handle JSON parsing errors as shown below.\n\nUse a tool such as [JSHint](http://jshint.com/) or [JSLint](http://www.jslint.com/) to help you find implicit exceptions like [reference errors on undefined variables](http://www.jshint.com/docs/options/#undef).\n\nHere is an example of using try-catch to handle a potential process-crashing exception. This middleware function accepts a query field parameter named “params” that is a JSON object.\n\n``` js\napp.get('/search', (req, res) => {\n  // Simulating async operation\n  setImmediate(() => {\n    const jsonStr = req.query.params\n    try {\n      const jsonObj = JSON.parse(jsonStr)\n      res.send('Success')\n    } catch (e) {\n      res.status(400).send('Invalid JSON string')\n    }\n  })\n})\n```\n\nHowever, try-catch works only for synchronous code. Because the Node platform is primarily asynchronous (particularly in a production environment), try-catch won’t catch a lot of exceptions.\n\n#### Use promises\n\nPromises will handle any exceptions (both explicit and implicit) in asynchronous code blocks that use `then()`. Just add `.catch(next)` to the end of promise chains. For example:\n\n``` js\napp.get('/', (req, res, next) => {\n  // do some sync stuff\n  queryDb()\n    .then((data) => makeCsv(data)) // handle data\n    .then((csv) => { /* handle csv */ })\n    .catch(next)\n})\n\napp.use((err, req, res, next) => {\n  // handle error\n})\n```\n\nNow all errors asynchronous and synchronous get propagated to the error middleware.\n\nHowever, there are two caveats:\n\n1.  All your asynchronous code must return promises (except emitters). If a particular library does not return promises, convert the base object by using a helper function like [Bluebird.promisifyAll()](http://bluebirdjs.com/docs/api/promise.promisifyall.html).\n2.  Event emitters (like streams) can still cause uncaught exceptions. So make sure you are handling the error event properly; for example:\n\n``` js\nconst wrap = fn => (...args) => fn(...args).catch(args[2])\n\napp.get('/', wrap(async (req, res, next) => {\n  const company = await getCompanyById(req.query.id)\n  const stream = getLogoStreamById(company.id)\n  stream.on('error', next).pipe(res)\n}))\n```\n\nThe `wrap()` function is a wrapper that catches rejected promises and calls `next()` with the error as the first argument. For details, see [Asynchronous Error Handling in Express with Promises, Generators and ES7](https://strongloop.com/strongblog/async-error-handling-expressjs-es7-promises-generators/#cleaner-code-with-generators).\n\nFor more information about error-handling by using promises, see [Promises in Node.js with Q – An Alternative to Callbacks](https://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/).\n\n## Things to do in your environment / setup\n\nHere are some things you can do in your system environment to improve your app’s performance:\n\n- [Set NODE_ENV to “production”](#set-node_env-to-production)\n- [Ensure your app automatically restarts](#ensure-your-app-automatically-restarts)\n- [Run your app in a cluster](#run-your-app-in-a-cluster)\n- [Cache request results](#cache-request-results)\n- [Use a load balancer](#use-a-load-balancer)\n- [Use a reverse proxy](#use-a-reverse-proxy)\n\n### Set NODE_ENV to “production”\n\nThe NODE_ENV environment variable specifies the environment in which an application is running (usually, development or production). One of the simplest things you can do to improve performance is to set NODE_ENV to “production.”\n\nSetting NODE_ENV to “production” makes Express:\n\n- Cache view templates.\n- Cache CSS files generated from CSS extensions.\n- Generate less verbose error messages.\n\n[Tests indicate](http://apmblog.dynatrace.com/2015/07/22/the-drastic-effects-of-omitting-node_env-in-your-express-js-applications/) that just doing this can improve app performance by a factor of three!\n\nIf you need to write environment-specific code, you can check the value of NODE_ENV with `process.env.NODE_ENV`. Be aware that checking the value of any environment variable incurs a performance penalty, and so should be done sparingly.\n\nIn development, you typically set environment variables in your interactive shell, for example by using `export` or your `.bash_profile` file. But in general you shouldn’t do that on a production server; instead, use your OS’s init system (systemd or Upstart). The next section provides more details about using your init system in general, but setting NODE_ENV is so important for performance (and easy to do), that it’s highlighted here.\n\nWith Upstart, use the `env` keyword in your job file. For example:\n\n``` sh\n# /etc/init/env.conf\n env NODE_ENV=production\n```\n\nFor more information, see the [Upstart Intro, Cookbook and Best Practices](http://upstart.ubuntu.com/cookbook/#environment-variables).\n\nWith systemd, use the `Environment` directive in your unit file. For example:\n\n``` sh\n# /etc/systemd/system/myservice.service\nEnvironment=NODE_ENV=production\n```\n\nFor more information, see [Using Environment Variables In systemd Units](https://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html).\n\n### Ensure your app automatically restarts\n\nIn production, you don’t want your application to be offline, ever. This means you need to make sure it restarts both if the app crashes and if the server itself crashes. Although you hope that neither of those events occurs, realistically you must account for both eventualities by:\n\n- Using a process manager to restart the app (and Node) when it crashes.\n- Using the init system provided by your OS to restart the process manager when the OS crashes. It’s also possible to use the init system without a process manager.\n\nNode applications crash if they encounter an uncaught exception. The foremost thing you need to do is to ensure your app is well-tested and handles all exceptions (see [handle exceptions properly](#handle-exceptions-properly) for details). But as a fail-safe, put a mechanism in place to ensure that if and when your app crashes, it will automatically restart.\n\n#### Use a process manager\n\nIn development, you started your app simply from the command line with `node server.js` or something similar. But doing this in production is a recipe for disaster. If the app crashes, it will be offline until you restart it. To ensure your app restarts if it crashes, use a process manager. A process manager is a “container” for applications that facilitates deployment, provides high availability, and enables you to manage the application at runtime.\n\nIn addition to restarting your app when it crashes, a process manager can enable you to:\n\n- Gain insights into runtime performance and resource consumption.\n- Modify settings dynamically to improve performance.\n- Control clustering (StrongLoop PM and pm2).\n\nThe most popular process managers for Node are as follows:\n\n- [StrongLoop Process Manager](http://strong-pm.io/)\n- [PM2](https://github.com/Unitech/pm2)\n- [Forever](https://www.npmjs.com/package/forever)\n\nFor a feature-by-feature comparison of the three process managers, see <http://strong-pm.io/compare/>. For a more detailed introduction to all three, see [Process managers for Express apps](pm).\n\nUsing any of these process managers will suffice to keep your application up, even if it does crash from time to time.\n\nHowever, StrongLoop PM has lots of features that specifically target production deployment. You can use it and the related StrongLoop tools to:\n\n- Build and package your app locally, then deploy it securely to your production system.\n- Automatically restart your app if it crashes for any reason.\n- Manage your clusters remotely.\n- View CPU profiles and heap snapshots to optimize performance and diagnose memory leaks.\n- View performance metrics for your application.\n- Easily scale to multiple hosts with integrated control for Nginx load balancer.\n\nAs explained below, when you install StrongLoop PM as an operating system service using your init system, it will automatically restart when the system restarts. Thus, it will keep your application processes and clusters alive forever.\n\n#### Use an init system\n\nThe next layer of reliability is to ensure that your app restarts when the server restarts. Systems can still go down for a variety of reasons. To ensure that your app restarts if the server crashes, use the init system built into your OS. The two main init systems in use today are [systemd](https://wiki.debian.org/systemd) and [Upstart](http://upstart.ubuntu.com/).\n\nThere are two ways to use init systems with your Express app:\n\n- Run your app in a process manager, and install the process manager as a service with the init system. The process manager will restart your app when the app crashes, and the init system will restart the process manager when the OS restarts. This is the recommended approach.\n- Run your app (and Node) directly with the init system. This is somewhat simpler, but you don’t get the additional advantages of using a process manager.\n\n##### Systemd\n\nSystemd is a Linux system and service manager. Most major Linux distributions have adopted systemd as their default init system.\n\nA systemd service configuration file is called a *unit file*, with a filename ending in `.service`. Here’s an example unit file to manage a Node app directly. Replace the values enclosed in `<angle brackets>` for your system and app:\n\n``` sh\n[Unit]\nDescription=<Awesome Express App>\n\n[Service]\nType=simple\nExecStart=/usr/local/bin/node </projects/myapp/index.js>\nWorkingDirectory=</projects/myapp>\n\nUser=nobody\nGroup=nogroup\n\n# Environment variables:\nEnvironment=NODE_ENV=production\n\n# Allow many incoming connections\nLimitNOFILE=infinity\n\n# Allow core dumps for debugging\nLimitCORE=infinity\n\nStandardInput=null\nStandardOutput=syslog\nStandardError=syslog\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\nFor more information on systemd, see the [systemd reference (man page)](http://www.freedesktop.org/software/systemd/man/systemd.unit.html).\n\n##### StrongLoop PM as a systemd service\n\nYou can easily install StrongLoop Process Manager as a systemd service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.\n\nTo install StrongLoop PM as a systemd service:\n\n``` console\n$ sudo sl-pm-install --systemd\n```\n\nThen start the service with:\n\n``` console\n$ sudo /usr/bin/systemctl start strong-pm\n```\n\nFor more information, see [Setting up a production host (StrongLoop documentation)](https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHEL7+,Ubuntu15.04or15.10).\n\n##### Upstart\n\nUpstart is a system tool available on many Linux distributions for starting tasks and services during system startup, stopping them during shutdown, and supervising them. You can configure your Express app or process manager as a service and then Upstart will automatically restart it when it crashes.\n\nAn Upstart service is defined in a job configuration file (also called a “job”) with filename ending in `.conf`. The following example shows how to create a job called “myapp” for an app named “myapp” with the main file located at `/projects/myapp/index.js`.\n\nCreate a file named `myapp.conf` at `/etc/init/` with the following content (replace the bold text with values for your system and app):\n\n``` sh\n# When to start the process\nstart on runlevel [2345]\n\n# When to stop the process\nstop on runlevel [016]\n\n# Increase file descriptor limit to be able to handle more requests\nlimit nofile 50000 50000\n\n# Use production mode\nenv NODE_ENV=production\n\n# Run as www-data\nsetuid www-data\nsetgid www-data\n\n# Run from inside the app dir\nchdir /projects/myapp\n\n# The process to start\nexec /usr/local/bin/node /projects/myapp/index.js\n\n# Restart the process if it is down\nrespawn\n\n# Limit restart attempt to 10 times within 10 seconds\nrespawn limit 10 10\n```\n\nNOTE: This script requires Upstart 1.4 or newer, supported on Ubuntu 12.04-14.10.\n\nSince the job is configured to run when the system starts, your app will be started along with the operating system, and automatically restarted if the app crashes or the system goes down.\n\nApart from automatically restarting the app, Upstart enables you to use these commands:\n\n- `start myapp` – Start the app\n- `restart myapp` – Restart the app\n- `stop myapp` – Stop the app.\n\nFor more information on Upstart, see [Upstart Intro, Cookbook and Best Practises](http://upstart.ubuntu.com/cookbook).\n\n##### StrongLoop PM as an Upstart service\n\nYou can easily install StrongLoop Process Manager as an Upstart service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.\n\nTo install StrongLoop PM as an Upstart 1.4 service:\n\n``` console\n$ sudo sl-pm-install\n```\n\nThen run the service with:\n\n``` console\n$ sudo /sbin/initctl start strong-pm\n```\n\nNOTE: On systems that don’t support Upstart 1.4, the commands are slightly different. See [Setting up a production host (StrongLoop documentation)](https://docs.strongloop.com/display/SLC/Setting+up+a+production+host#Settingupaproductionhost-RHELLinux5and6,Ubuntu10.04-.10,11.04-.10) for more information.\n\n### Run your app in a cluster\n\nIn a multi-core system, you can increase the performance of a Node app by many times by launching a cluster of processes. A cluster runs multiple instances of the app, ideally one instance on each CPU core, thereby distributing the load and tasks among the instances.\n\nIMPORTANT: Since the app instances run as separate processes, they do not share the same memory space. That is, objects are local to each instance of the app. Therefore, you cannot maintain state in the application code. However, you can use an in-memory datastore like [Redis](http://redis.io/) to store session-related data and state. This caveat applies to essentially all forms of horizontal scaling, whether clustering with multiple processes or multiple physical servers.\n\nIn clustered apps, worker processes can crash individually without affecting the rest of the processes. Apart from performance advantages, failure isolation is another reason to run a cluster of app processes. Whenever a worker process crashes, always make sure to log the event and spawn a new process using cluster.fork().\n\n#### Using Node’s cluster module\n\nClustering is made possible with Node’s [cluster module](https://nodejs.org/dist/latest-v4.x/docs/api/cluster.html). This enables a master process to spawn worker processes and distribute incoming connections among the workers. However, rather than using this module directly, it’s far better to use one of the many tools out there that does it for you automatically; for example [node-pm](https://www.npmjs.com/package/node-pm) or [cluster-service](https://www.npmjs.com/package/cluster-service).\n\n#### Using StrongLoop PM\n\nIf you deploy your application to StrongLoop Process Manager (PM), then you can take advantage of clustering *without* modifying your application code.\n\nWhen StrongLoop Process Manager (PM) runs an application, it automatically runs it in a cluster with a number of workers equal to the number of CPU cores on the system. You can manually change the number of worker processes in the cluster using the slc command line tool without stopping the app.\n\nFor example, assuming you’ve deployed your app to prod.foo.com and StrongLoop PM is listening on port 8701 (the default), then to set the cluster size to eight using slc:\n\n``` console\n$ slc ctl -C http://prod.foo.com:8701 set-size my-app 8\n```\n\nFor more information on clustering with StrongLoop PM, see [Clustering](https://docs.strongloop.com/display/SLC/Clustering) in StrongLoop documentation.\n\n#### Using PM2\n\nIf you deploy your application with PM2, then you can take advantage of clustering *without* modifying your application code. You should ensure your [application is stateless](http://pm2.keymetrics.io/docs/usage/specifics/#stateless-apps) first, meaning no local data is stored in the process (such as sessions, websocket connections and the like).\n\nWhen running an application with PM2, you can enable **cluster mode** to run it in a cluster with a number of instances of your choosing, such as the matching the number of available CPUs on the machine. You can manually change the number of processes in the cluster using the `pm2` command line tool without stopping the app.\n\nTo enable cluster mode, start your application like so:\n\n``` console\n# Start 4 worker processes\n$ pm2 start npm --name my-app -i 4 -- start\n# Auto-detect number of available CPUs and start that many worker processes\n$ pm2 start npm --name my-app -i max -- start\n```\n\nThis can also be configured within a PM2 process file (`ecosystem.config.js` or similar) by setting `exec_mode` to `cluster` and `instances` to the number of workers to start.\n\nOnce running, the application can be scaled like so:\n\n``` console\n# Add 3 more workers\n$ pm2 scale my-app +3\n# Scale to a specific number of workers\n$ pm2 scale my-app 2\n```\n\nFor more information on clustering with PM2, see [Cluster Mode](https://pm2.keymetrics.io/docs/usage/cluster-mode/) in the PM2 documentation.\n\n### Cache request results\n\nAnother strategy to improve the performance in production is to cache the result of requests, so that your app does not repeat the operation to serve the same request repeatedly.\n\nUse a caching server like [Varnish](https://www.varnish-cache.org/) or [Nginx](https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/) (see also [Nginx Caching](https://serversforhackers.com/nginx-caching/)) to greatly improve the speed and performance of your app.\n\n### Use a load balancer\n\nNo matter how optimized an app is, a single instance can handle only a limited amount of load and traffic. One way to scale an app is to run multiple instances of it and distribute the traffic via a load balancer. Setting up a load balancer can improve your app’s performance and speed, and enable it to scale more than is possible with a single instance.\n\nA load balancer is usually a reverse proxy that orchestrates traffic to and from multiple application instances and servers. You can easily set up a load balancer for your app by using [Nginx](http://nginx.org/en/docs/http/load_balancing.html) or [HAProxy](https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts).\n\nWith load balancing, you might have to ensure that requests that are associated with a particular session ID connect to the process that originated them. This is known as *session affinity*, or *sticky sessions*, and may be addressed by the suggestion above to use a data store such as Redis for session data (depending on your application). For a discussion, see [Using multiple nodes](https://socket.io/docs/using-multiple-nodes).\n\n### Use a reverse proxy\n\nA reverse proxy sits in front of a web app and performs supporting operations on the requests, apart from directing requests to the app. It can handle error pages, compression, caching, serving files, and load balancing among other things.\n\nHanding over tasks that do not require knowledge of application state to a reverse proxy frees up Express to perform specialized application tasks. For this reason, it is recommended to run Express behind a reverse proxy like [Nginx](https://www.nginx.com/) or [HAProxy](http://www.haproxy.org/) in production.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/advanced/best-practice-performance.html](https://expressjs.com/en/advanced/best-practice-performance.html)"
- name: 5. Serving static files in Express
  id: starter/static-files
  summary: To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express
  description: "# Serving static files in Express\n\nTo serve static files such as images, CSS files, and JavaScript files, use the `express.static` built-in middleware function in Express.\n\nThe function signature is:\n\n``` js\nexpress.static(root, [options])\n```\n\nThe `root` argument specifies the root directory from which to serve static assets. For more information on the `options` argument, see [express.static](../index#express.static).\n\nFor example, use the following code to serve images, CSS files, and JavaScript files in a directory named `public`:\n\n``` js\napp.use(express.static('public'))\n```\n\nNow, you can load the files that are in the `public` directory:\n\n``` plain\nhttp://localhost:3000/images/kitten.jpg\nhttp://localhost:3000/css/style.css\nhttp://localhost:3000/js/app.js\nhttp://localhost:3000/images/bg.png\nhttp://localhost:3000/hello.html\n```\n\nExpress looks up the files relative to the static directory, so the name of the static directory is not part of the URL.\n\nTo use multiple static assets directories, call the `express.static` middleware function multiple times:\n\n``` js\napp.use(express.static('public'))\napp.use(express.static('files'))\n```\n\nExpress looks up the files in the order in which you set the static directories with the `express.static` middleware function.\n\nNOTE: For best results, [use a reverse proxy](../advanced/best-practice-performance#use-a-reverse-proxy) cache to improve performance of serving static assets.\n\nTo create a virtual path prefix (where the path does not actually exist in the file system) for files that are served by the `express.static` function, [specify a mount path](../index#app.use) for the static directory, as shown below:\n\n``` js\napp.use('/static', express.static('public'))\n```\n\nNow, you can load the files that are in the `public` directory from the `/static` path prefix.\n\n``` plain\nhttp://localhost:3000/static/images/kitten.jpg\nhttp://localhost:3000/static/css/style.css\nhttp://localhost:3000/static/js/app.js\nhttp://localhost:3000/static/images/bg.png\nhttp://localhost:3000/static/hello.html\n```\n\nHowever, the path that you provide to the `express.static` function is relative to the directory from where you launch your `node` process. If you run the express app from another directory, it’s safer to use the absolute path of the directory that you want to serve:\n\n``` js\nconst path = require('path')\napp.use('/static', express.static(path.join(__dirname, 'public')))\n```\n\nFor more details about the `serve-static` function and its options, see [serve-static](https://expressjs.com/resources/middleware/serve-static.html).\n\n### [Previous: Basic Routing](basic-routing) [Next: More examples](examples)\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/starter/static-files.html](https://expressjs.com/en/starter/static-files.html)"
- name: 5. Using template engines with Express
  id: guide/using-template-engines
  summary: A template engine enables you to use static template files in your application
  description: "# Using template engines with Express\n\nA *template engine* enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page.\n\nSome popular template engines that work with Express are [Pug](https://pugjs.org/api/getting-started.html), [Mustache](https://www.npmjs.com/package/mustache), and [EJS](https://www.npmjs.com/package/ejs). The [Express application generator](../starter/generator) uses [Jade](https://www.npmjs.com/package/jade) as its default, but it also supports several others.\n\nSee [Template Engines (Express wiki)](https://github.com/expressjs/express/wiki#template-engines) for a list of template engines you can use with Express. See also [Comparing JavaScript Templating Engines: Jade, Mustache, Dust and More](https://strongloop.com/strongblog/compare-javascript-templates-jade-mustache-dust/).\n\n**Note**: Jade has been renamed to [Pug](https://www.npmjs.com/package/pug). You can continue to use Jade in your app, and it will work just fine. However if you want the latest updates to the template engine, you must replace Jade with Pug in your app.\n\nTo render template files, set the following [application setting properties](../index#app.set), set in `app.js` in the default app created by the generator:\n\n- `views`, the directory where the template files are located. Eg: `app.set('views', './views')`. This defaults to the `views` directory in the application root directory.\n- `view engine`, the template engine to use. For example, to use the Pug template engine: `app.set('view engine', 'pug')`.\n\nThen install the corresponding template engine npm package; for example to install Pug:\n\n``` console\n$ npm install pug --save\n```\n\nExpress-compliant template engines such as Jade and Pug export a function named `__express(filePath, options, callback)`, which is called by the `res.render()` function to render the template code.\n\nSome template engines do not follow this convention. The [Consolidate.js](https://www.npmjs.org/package/consolidate) library follows this convention by mapping all of the popular Node.js template engines, and therefore works seamlessly within Express.\n\nAfter the view engine is set, you don’t have to specify the engine or load the template engine module in your app; Express loads the module internally, as shown below (for the above example).\n\n``` js\napp.set('view engine', 'pug')\n```\n\nCreate a Pug template file named `index.pug` in the `views` directory, with the following content:\n\n``` pug\nhtml\n  head\n    title= title\n  body\n    h1= message\n```\n\nThen create a route to render the `index.pug` file. If the `view engine` property is not set, you must specify the extension of the `view` file. Otherwise, you can omit it.\n\n``` js\napp.get('/', (req, res) => {\n  res.render('index', { title: 'Hey', message: 'Hello there!' })\n})\n```\n\nWhen you make a request to the home page, the `index.pug` file will be rendered as HTML.\n\nNote: The view engine cache does not cache the contents of the template’s output, only the underlying template itself. The view is still re-rendered with every request even when the cache is on.\n\nTo learn more about how template engines work in Express, see: [“Developing template engines for Express”](../advanced/developing-template-engines).\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/using-template-engines.html](https://expressjs.com/en/guide/using-template-engines.html)"
- name: 6. Error Handling
  id: guide/error-handling
  summary: Error Handling refers to how Express catches and processes errors that occur both synchronously and asynchronously
  description: "# Error Handling\n\n*Error Handling* refers to how Express catches and processes errors that occur both synchronously and asynchronously. Express comes with a default error handler so you don’t need to write your own to get started.\n\n## Catching Errors\n\nIt’s important to ensure that Express catches all errors that occur while running route handlers and middleware.\n\nErrors that occur in synchronous code inside route handlers and middleware require no extra work. If synchronous code throws an error, then Express will catch and process it. For example:\n\n``` js\napp.get('/', (req, res) => {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n```\n\nFor errors returned from asynchronous functions invoked by route handlers and middleware, you must pass them to the `next()` function, where Express will catch and process them. For example:\n\n``` js\napp.get('/', (req, res, next) => {\n  fs.readFile('/file-does-not-exist', (err, data) => {\n    if (err) {\n      next(err) // Pass errors to Express.\n    } else {\n      res.send(data)\n    }\n  })\n})\n```\n\nStarting with Express 5, route handlers and middleware that return a Promise will call `next(value)` automatically when they reject or throw an error. For example:\n\n``` js\napp.get('/user/:id', async (req, res, next) => {\n  const user = await getUserById(req.params.id)\n  res.send(user)\n})\n```\n\nIf `getUserById` throws an error or rejects, `next` will be called with either the thrown error or the rejected value. If no rejected value is provided, `next` will be called with a default Error object provided by the Express router.\n\nIf you pass anything to the `next()` function (except the string `'route'`), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions.\n\nIf the callback in a sequence provides no data, only errors, you can simplify this code as follows:\n\n``` js\napp.get('/', [\n  function (req, res, next) {\n    fs.writeFile('/inaccessible-path', 'data', next)\n  },\n  function (req, res) {\n    res.send('OK')\n  }\n])\n```\n\nIn the above example `next` is provided as the callback for `fs.writeFile`, which is called with or without errors. If there is no error the second handler is executed, otherwise Express catches and processes the error.\n\nYou must catch errors that occur in asynchronous code invoked by route handlers or middleware and pass them to Express for processing. For example:\n\n``` js\napp.get('/', (req, res, next) => {\n  setTimeout(() => {\n    try {\n      throw new Error('BROKEN')\n    } catch (err) {\n      next(err)\n    }\n  }, 100)\n})\n```\n\nThe above example uses a `try...catch` block to catch errors in the asynchronous code and pass them to Express. If the `try...catch` block were omitted, Express would not catch the error since it is not part of the synchronous handler code.\n\nUse promises to avoid the overhead of the `try...catch` block or when using functions that return promises. For example:\n\n``` js\napp.get('/', (req, res, next) => {\n  Promise.resolve().then(() => {\n    throw new Error('BROKEN')\n  }).catch(next) // Errors will be passed to Express.\n})\n```\n\nSince promises automatically catch both synchronous errors and rejected promises, you can simply provide `next` as the final catch handler and Express will catch errors, because the catch handler is given the error as the first argument.\n\nYou could also use a chain of handlers to rely on synchronous error catching, by reducing the asynchronous code to something trivial. For example:\n\n``` js\napp.get('/', [\n  function (req, res, next) {\n    fs.readFile('/maybe-valid-file', 'utf-8', (err, data) => {\n      res.locals.data = data\n      next(err)\n    })\n  },\n  function (req, res) {\n    res.locals.data = res.locals.data.split(',')[1]\n    res.send(res.locals.data)\n  }\n])\n```\n\nThe above example has a couple of trivial statements from the `readFile` call. If `readFile` causes an error, then it passes the error to Express, otherwise you quickly return to the world of synchronous error handling in the next handler in the chain. Then, the example above tries to process the data. If this fails then the synchronous error handler will catch it. If you had done this processing inside the `readFile` callback then the application might exit and the Express error handlers would not run.\n\nWhichever method you use, if you want Express error handlers to be called in and the application to survive, you must ensure that Express receives the error.\n\n## The default error handler\n\nExpress comes with a built-in error handler that takes care of any errors that might be encountered in the app. This default error-handling middleware function is added at the end of the middleware function stack.\n\nIf you pass an error to `next()` and you do not handle it in a custom error handler, it will be handled by the built-in error handler; the error will be written to the client with the stack trace. The stack trace is not included in the production environment.\n\nSet the environment variable `NODE_ENV` to `production`, to run the app in production mode.\n\nWhen an error is written, the following information is added to the response:\n\n- The `res.statusCode` is set from `err.status` (or `err.statusCode`). If this value is outside the 4xx or 5xx range, it will be set to 500.\n- The `res.statusMessage` is set according to the status code.\n- The body will be the HTML of the status code message when in production environment, otherwise will be `err.stack`.\n- Any headers specified in an `err.headers` object.\n\nIf you call `next()` with an error after you have started writing the response (for example, if you encounter an error while streaming the response to the client) the Express default error handler closes the connection and fails the request.\n\nSo when you add a custom error handler, you must delegate to the default Express error handler, when the headers have already been sent to the client:\n\n``` js\nfunction errorHandler (err, req, res, next) {\n  if (res.headersSent) {\n    return next(err)\n  }\n  res.status(500)\n  res.render('error', { error: err })\n}\n```\n\nNote that the default error handler can get triggered if you call `next()` with an error in your code more than once, even if custom error handling middleware is in place.\n\n## Writing error handlers\n\nDefine error-handling middleware functions in the same way as other middleware functions, except error-handling functions have four arguments instead of three: `(err, req, res, next)`. For example:\n\n``` js\napp.use((err, req, res, next) => {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n```\n\nYou define error-handling middleware last, after other `app.use()` and routes calls; for example:\n\n``` js\nconst bodyParser = require('body-parser')\nconst methodOverride = require('method-override')\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}))\napp.use(bodyParser.json())\napp.use(methodOverride())\napp.use((err, req, res, next) => {\n  // logic\n})\n```\n\nResponses from within a middleware function can be in any format, such as an HTML error page, a simple message, or a JSON string.\n\nFor organizational (and higher-level framework) purposes, you can define several error-handling middleware functions, much as you would with regular middleware functions. For example, to define an error-handler for requests made by using `XHR` and those without:\n\n``` js\nconst bodyParser = require('body-parser')\nconst methodOverride = require('method-override')\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}))\napp.use(bodyParser.json())\napp.use(methodOverride())\napp.use(logErrors)\napp.use(clientErrorHandler)\napp.use(errorHandler)\n```\n\nIn this example, the generic `logErrors` might write request and error information to `stderr`, for example:\n\n``` js\nfunction logErrors (err, req, res, next) {\n  console.error(err.stack)\n  next(err)\n}\n```\n\nAlso in this example, `clientErrorHandler` is defined as follows; in this case, the error is explicitly passed along to the next one.\n\nNotice that when *not* calling “next” in an error-handling function, you are responsible for writing (and ending) the response. Otherwise those requests will “hang” and will not be eligible for garbage collection.\n\n``` js\nfunction clientErrorHandler (err, req, res, next) {\n  if (req.xhr) {\n    res.status(500).send({ error: 'Something failed!' })\n  } else {\n    next(err)\n  }\n}\n```\n\nImplement the “catch-all” `errorHandler` function as follows (for example):\n\n``` js\nfunction errorHandler (err, req, res, next) {\n  res.status(500)\n  res.render('error', { error: err })\n}\n```\n\nIf you have a route handler with multiple callback functions you can use the `route` parameter to skip to the next route handler. For example:\n\n``` js\napp.get('/a_route_behind_paywall',\n  (req, res, next) => {\n    if (!req.user.hasPaid) {\n      // continue handling this request\n      next('route')\n    } else {\n      next()\n    }\n  }, (req, res, next) => {\n    PaidContent.find((err, doc) => {\n      if (err) return next(err)\n      res.json(doc)\n    })\n  })\n```\n\nIn this example, the `getPaidContent` handler will be skipped but any remaining handlers in `app` for `/a_route_behind_paywall` would continue to be executed.\n\nCalls to `next()` and `next(err)` indicate that the current handler is complete and in what state. `next(err)` will skip all remaining handlers in the chain except for those that are set up to handle errors as described above.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/error-handling.html](https://expressjs.com/en/guide/error-handling.html)"
- name: 6. Express examples
  id: starter/examples
  summary: This page contains list of examples using Express
  description: "# Express examples\n\nThis page contains list of examples using Express.\n\n- [auth](https://github.com/expressjs/express/tree/master/examples/auth) - Authentication with login and password\n- [content-negotiation](https://github.com/expressjs/express/tree/master/examples/content-negotiation) - HTTP content negotiation\n- [cookie-sessions](https://github.com/expressjs/express/tree/master/examples/cookie-sessions) - Working with cookie-based sessions\n- [cookies](https://github.com/expressjs/express/tree/master/examples/cookies) - Working with cookies\n- [downloads](https://github.com/expressjs/express/tree/master/examples/downloads) - Transferring files to client\n- [ejs](https://github.com/expressjs/express/tree/master/examples/ejs) - Working with Embedded JavaScript templating (ejs)\n- [error-pages](https://github.com/expressjs/express/tree/master/examples/error-pages) - Creating error pages\n- [error](https://github.com/expressjs/express/tree/master/examples/error) - Working with error middleware\n- [hello-world](https://github.com/expressjs/express/tree/master/examples/hello-world) - Simple request handler\n- [markdown](https://github.com/expressjs/express/tree/master/examples/markdown) - Markdown as template engine\n- [multi-router](https://github.com/expressjs/express/tree/master/examples/multi-router) - Working with multiple Express routers\n- [multipart](https://github.com/expressjs/express/tree/master/examples/multipart) - Accepting multipart-encoded forms\n- [mvc](https://github.com/expressjs/express/tree/master/examples/mvc) - MVC-style controllers\n- [online](https://github.com/expressjs/express/tree/master/examples/online) - Tracking online user activity with `online` and `redis` packages\n- [params](https://github.com/expressjs/express/tree/master/examples/params) - Working with route parameters\n- [resource](https://github.com/expressjs/express/tree/master/examples/resource) - Multiple HTTP operations on the same resource\n- [route-map](https://github.com/expressjs/express/tree/master/examples/route-map) - Organizing routes using a map\n- [route-middleware](https://github.com/expressjs/express/tree/master/examples/route-middleware) - Working with route middleware\n- [route-separation](https://github.com/expressjs/express/tree/master/examples/route-separation) - Organizing routes per each resource\n- [search](https://github.com/expressjs/express/tree/master/examples/search) - Search API\n- [session](https://github.com/expressjs/express/tree/master/examples/session) - User sessions\n- [static-files](https://github.com/expressjs/express/tree/master/examples/static-files) - Serving static files\n- [vhost](https://github.com/expressjs/express/tree/master/examples/vhost) - Working with virtual hosts\n- [view-constructor](https://github.com/expressjs/express/tree/master/examples/view-constructor) - Rendering views dynamically\n- [view-locals](https://github.com/expressjs/express/tree/master/examples/view-locals) - Saving data in request object between middleware calls\n- [web-service](https://github.com/expressjs/express/tree/master/examples/web-service) - Simple API service\n\n## Additional examples\n\nThese are some additional examples with more extensive integrations.\n\n**Warning**: This information refers to third-party sites, products, or modules that are not maintained by the Expressjs team. Listing here does not constitute an endorsement or recommendation from the Expressjs project team.\n\n- [prisma-express-graphql](https://github.com/prisma/prisma-examples/tree/latest/typescript/graphql-express) - GraphQL API with `express-graphql` using [Prisma](https://www.npmjs.com/package/prisma) as an ORM\n- [prisma-fullstack](https://github.com/prisma/prisma-examples/tree/latest/typescript/rest-nextjs-express) - Fullstack app with Next.js using [Prisma](https://www.npmjs.com/package/prisma) as an ORM\n- [prisma-rest-api-js](https://github.com/prisma/prisma-examples/tree/latest/javascript/rest-express) - REST API with Express in JavaScript using [Prisma](https://www.npmjs.com/package/prisma) as an ORM\n- [prisma-rest-api-ts](https://github.com/prisma/prisma-examples/tree/latest/typescript/rest-express) - REST API with Express in TypeScript using [Prisma](https://www.npmjs.com/package/prisma) as an ORM\n\n### [Previous: Static Files](static-files) [Next: FAQ](faq)\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/starter/examples.html](https://expressjs.com/en/starter/examples.html)"
- name: 6. Health Checks and Graceful Shutdown
  id: advanced/healthcheck-graceful-shutdown
  summary: When you deploy a new version of your application, you must replace the previous version
  description: "# Health Checks and Graceful Shutdown\n\n## Graceful shutdown\n\nWhen you deploy a new version of your application, you must replace the previous version. The [process manager](pm) you’re using will first send a SIGTERM signal to the application to notify it that it will be killed. Once the application gets this signal, it should stop accepting new requests, finish all the ongoing requests, clean up the resources it used, including database connections and file locks then exit.\n\n### Example Graceful Shutdown\n\n``` js\nconst server = app.listen(port)\n\nprocess.on('SIGTERM', () => {\n  debug('SIGTERM signal received: closing HTTP server')\n  server.close(() => {\n    debug('HTTP server closed')\n  })\n})\n```\n\n## Health checks\n\nA load balancer uses health checks to determine if an application instance is healthy and can accept requests. For example, [Kubernetes has two health checks](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/):\n\n- `liveness`, that determines when to restart a container.\n- `readiness`, that determines when a container is ready to start accepting traffic. When a pod is not ready, it is removed from the service load balancers.\n\n## Third-party solutions\n\n**Warning**: This information refers to third-party sites, products, or modules that are not maintained by the Expressjs team. Listing here does not constitute an endorsement or recommendation from the Expressjs project team.\n\n### Terminus\n\n[Terminus](https://github.com/godaddy/terminus) is an open-source project that adds health checks and graceful shutdown to your application to eliminate the need to write boilerplate code. You just provide the cleanup logic for graceful shutdowns and the health check logic for health checks, and terminus handles the rest.\n\nInstall terminus as follows:\n\n``` console\n$ npm i @godaddy/terminus --save\n```\n\nHere’s a basic template that illustrates using terminus. For more information, see <https://github.com/godaddy/terminus>.\n\n``` js\nconst http = require('http')\nconst express = require('express')\nconst { createTerminus } = require('@godaddy/terminus')\n\nconst app = express()\n\napp.get('/', (req, res) => {\n  res.send('ok')\n})\n\nconst server = http.createServer(app)\n\nfunction onSignal () {\n  console.log('server is starting cleanup')\n  // start cleanup of resource, like databases or file descriptors\n}\n\nasync function onHealthCheck () {\n  // checks if the system is healthy, like the db connection is live\n  // resolves, if health, rejects if not\n}\n\ncreateTerminus(server, {\n  signal: 'SIGINT',\n  healthChecks: { '/healthcheck': onHealthCheck },\n  onSignal\n})\n\nserver.listen(3000)\n```\n\n### Lightship\n\n[Lightship](https://github.com/gajus/lightship) is an open-source project that adds health, readiness and liveness checks to your application. Lightship is a standalone HTTP-service that runs as a separate HTTP service; this allows having health-readiness-liveness HTTP endpoints without exposing them on the public interface.\n\nInstall Lightship as follows:\n\n``` console\n$ npm install lightship\n```\n\nBasic template that illustrates using Lightship:\n\n``` js\nconst http = require('http')\nconst express = require('express')\nconst {\n  createLightship\n} = require('lightship')\n\n// Lightship will start a HTTP service on port 9000.\nconst lightship = createLightship()\n\nconst app = express()\n\napp.get('/', (req, res) => {\n  res.send('ok')\n})\n\napp.listen(3000, () => {\n  lightship.signalReady()\n})\n\n// You can signal that the service is not ready using `lightship.signalNotReady()`.\n```\n\n[Lightship documentation](https://github.com/gajus/lightship) provides examples of the corresponding [Kubernetes configuration](https://github.com/gajus/lightship#lightship-usage-kubernetes-container-probe-configuration) and a complete example of integration with [Express.js](https://github.com/gajus/lightship#using-with-expressjs).\n\n### http-terminator\n\n[http-terminator](https://github.com/gajus/http-terminator) implements logic for gracefully terminating an express.js server.\n\nTerminating a HTTP server in Node.js requires keeping track of all open connections and signaling them that the server is shutting down. http-terminator implements the logic for tracking all connections and their termination upon a timeout. http-terminator also ensures graceful communication of the server intention to shutdown to any clients that are currently receiving response from this server.\n\nInstall http-terminator as follows:\n\n``` console\n$ npm install http-terminator\n```\n\nBasic template that illustrates using http-terminator:\n\n``` js\nconst express = require('express')\nconst { createHttpTerminator } = require('http-terminator')\n\nconst app = express()\n\nconst server = app.listen(3000)\n\nconst httpTerminator = createHttpTerminator({ server })\n\napp.get('/', (req, res) => {\n  res.send('ok')\n})\n\n// A server will terminate after invoking `httpTerminator.terminate()`.\n// Note: Timeout is used for illustration of delayed termination purposes only.\nsetTimeout(() => {\n  httpTerminator.terminate()\n}, 1000)\n```\n\n[http-terminator documentation](https://github.com/gajus/http-terminator) provides API documentation and comparison to other existing third-party solutions.\n\n### express-actuator\n\n[express-actuator](https://github.com/rcruzper/express-actuator) is a middleware to add endpoints to help you monitor and manage applications.\n\nInstall express-actuator as follows:\n\n``` console\n$ npm install --save express-actuator\n```\n\nBasic template that illustrates using express-actuator:\n\n``` js\nconst express = require('express')\nconst actuator = require('express-actuator')\n\nconst app = express()\n\napp.use(actuator())\n\napp.listen(3000)\n```\n\nThe [express-actuator documentation](https://github.com/rcruzper/express-actuator) provides different options for customization.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/advanced/healthcheck-graceful-shutdown.html](https://expressjs.com/en/advanced/healthcheck-graceful-shutdown.html)"
- name: 7. Debugging Express
  id: guide/debugging
  summary: Express uses the debug module internally to log information about route matches, middleware functions that are in use, application mode, and the flow of the request-response cycle
  description: "# Debugging Express\n\nExpress uses the [debug](https://www.npmjs.com/package/debug) module internally to log information about route matches, middleware functions that are in use, application mode, and the flow of the request-response cycle.\n\n`debug` is like an augmented version of `console.log`, but unlike `console.log`, you don’t have to comment out `debug` logs in production code. Logging is turned off by default and can be conditionally turned on by using the `DEBUG` environment variable.\n\nTo see all the internal logs used in Express, set the `DEBUG` environment variable to `express:*` when launching your app.\n\n``` console\n$ DEBUG=express:* node index.js\n```\n\nOn Windows, use the corresponding command.\n\n``` console\n> set DEBUG=express:* & node index.js\n```\n\nRunning this command on the default app generated by the [express generator](../starter/generator) prints the following output:\n\n``` console\n$ DEBUG=express:* node ./bin/www\n  express:router:route new / +0ms\n  express:router:layer new / +1ms\n  express:router:route get / +1ms\n  express:router:layer new / +0ms\n  express:router:route new / +1ms\n  express:router:layer new / +0ms\n  express:router:route get / +0ms\n  express:router:layer new / +0ms\n  express:application compile etag weak +1ms\n  express:application compile query parser extended +0ms\n  express:application compile trust proxy false +0ms\n  express:application booting in development mode +1ms\n  express:router use / query +0ms\n  express:router:layer new / +0ms\n  express:router use / expressInit +0ms\n  express:router:layer new / +0ms\n  express:router use / favicon +1ms\n  express:router:layer new / +0ms\n  express:router use / logger +0ms\n  express:router:layer new / +0ms\n  express:router use / jsonParser +0ms\n  express:router:layer new / +1ms\n  express:router use / urlencodedParser +0ms\n  express:router:layer new / +0ms\n  express:router use / cookieParser +0ms\n  express:router:layer new / +0ms\n  express:router use / stylus +90ms\n  express:router:layer new / +0ms\n  express:router use / serveStatic +0ms\n  express:router:layer new / +0ms\n  express:router use / router +0ms\n  express:router:layer new / +1ms\n  express:router use /users router +0ms\n  express:router:layer new /users +0ms\n  express:router use / &lt;anonymous&gt; +0ms\n  express:router:layer new / +0ms\n  express:router use / &lt;anonymous&gt; +0ms\n  express:router:layer new / +0ms\n  express:router use / &lt;anonymous&gt; +0ms\n  express:router:layer new / +0ms\n```\n\nWhen a request is then made to the app, you will see the logs specified in the Express code:\n\n``` console\n  express:router dispatching GET / +4h\n  express:router query  : / +2ms\n  express:router expressInit  : / +0ms\n  express:router favicon  : / +0ms\n  express:router logger  : / +1ms\n  express:router jsonParser  : / +0ms\n  express:router urlencodedParser  : / +1ms\n  express:router cookieParser  : / +0ms\n  express:router stylus  : / +0ms\n  express:router serveStatic  : / +2ms\n  express:router router  : / +2ms\n  express:router dispatching GET / +1ms\n  express:view lookup \"index.pug\" +338ms\n  express:view stat \"/projects/example/views/index.pug\" +0ms\n  express:view render \"/projects/example/views/index.pug\" +1ms\n```\n\nTo see the logs only from the router implementation set the value of `DEBUG` to `express:router`. Likewise, to see logs only from the application implementation set the value of `DEBUG` to `express:application`, and so on.\n\n## Applications generated by `express`\n\nAn application generated by the `express` command also uses the `debug` module and its debug namespace is scoped to the name of the application.\n\nFor example, if you generated the app with `$ express sample-app`, you can enable the debug statements with the following command:\n\n``` console\n$ DEBUG=sample-app:* node ./bin/www\n```\n\nYou can specify more than one debug namespace by assigning a comma-separated list of names:\n\n``` console\n$ DEBUG=http,mail,express:* node index.js\n```\n\n## Advanced options\n\nWhen running through Node.js, you can set a few environment variables that will change the behavior of the debug logging:\n\n| Name                | Purpose                                           |\n|---------------------|---------------------------------------------------|\n| `DEBUG`             | Enables/disables specific debugging namespaces.   |\n| `DEBUG_COLORS`      | Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH`       | Object inspection depth.                          |\n| `DEBUG_FD`          | File descriptor to write debug output to.         |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects.     |\n\n**Note:** The environment variables beginning with `DEBUG_` end up being converted into an Options object that gets used with `%o`/`%O` formatters. See the Node.js documentation for [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options) for the complete list.\n\n## Resources\n\nFor more information about `debug`, see the [debug](https://www.npmjs.com/package/debug).\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/debugging.html](https://expressjs.com/en/guide/debugging.html)"
- name: 7. FAQ
  id: starter/faq
  summary: There is no definitive answer to this question
  description: "# FAQ\n\n## How should I structure my application?\n\nThere is no definitive answer to this question. The answer depends on the scale of your application and the team that is involved. To be as flexible as possible, Express makes no assumptions in terms of structure.\n\nRoutes and other application-specific logic can live in as many files as you wish, in any directory structure you prefer. View the following examples for inspiration:\n\n- [Route listings](https://github.com/expressjs/express/blob/4.13.1/examples/route-separation/index.js#L32-L47)\n- [Route map](https://github.com/expressjs/express/blob/4.13.1/examples/route-map/index.js#L52-L66)\n- [MVC style controllers](https://github.com/expressjs/express/tree/master/examples/mvc)\n\nAlso, there are third-party extensions for Express, which simplify some of these patterns:\n\n- [Resourceful routing](https://github.com/expressjs/express-resource)\n\n## How do I define models?\n\nExpress has no notion of a database. This concept is left up to third-party Node modules, allowing you to interface with nearly any database.\n\nSee [LoopBack](http://loopback.io) for an Express-based framework that is centered around models.\n\n## How can I authenticate users?\n\nAuthentication is another opinionated area that Express does not venture into. You may use any authentication scheme you wish. For a simple username / password scheme, see [this example](https://github.com/expressjs/express/tree/master/examples/auth).\n\n## Which template engines does Express support?\n\nExpress supports any template engine that conforms with the `(path, locals, callback)` signature. To normalize template engine interfaces and caching, see the [consolidate.js](https://github.com/visionmedia/consolidate.js) project for support. Unlisted template engines might still support the Express signature.\n\nFor more information, see [Using template engines with Express](../guide/using-template-engines).\n\n## How do I handle 404 responses?\n\nIn Express, 404 responses are not the result of an error, so the error-handler middleware will not capture them. This behavior is because a 404 response simply indicates the absence of additional work to do; in other words, Express has executed all middleware functions and routes, and found that none of them responded. All you need to do is add a middleware function at the very bottom of the stack (below all other functions) to handle a 404 response:\n\n``` js\napp.use((req, res, next) => {\n  res.status(404).send(\"Sorry can't find that!\")\n})\n```\n\nAdd routes dynamically at runtime on an instance of `express.Router()` so the routes are not superseded by a middleware function.\n\n## How do I setup an error handler?\n\nYou define error-handling middleware in the same way as other middleware, except with four arguments instead of three; specifically with the signature `(err, req, res, next)`:\n\n``` js\napp.use((err, req, res, next) => {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n```\n\nFor more information, see [Error handling](../guide/error-handling).\n\n## How do I render plain HTML?\n\nYou don’t! There’s no need to “render” HTML with the `res.render()` function. If you have a specific file, use the `res.sendFile()` function. If you are serving many assets from a directory, use the `express.static()` middleware function.\n\n### [Previous: More examples](examples)\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/starter/faq.html](https://expressjs.com/en/starter/faq.html)"
- name: 8. Express behind proxies
  id: guide/behind-proxies
  summary: When running an Express app behind a reverse proxy, some of the Express APIs may return different values than expected
  description: "# Express behind proxies\n\nWhen running an Express app behind a reverse proxy, some of the Express APIs may return different values than expected. In order to adjust for this, the `trust proxy` application setting may be used to expose information provided by the reverse proxy in the Express APIs. The most common issue is express APIs that expose the client’s IP address may instead show an internal IP address of the reverse proxy.\n\nWhen configuring the `trust proxy` setting, it is important to understand the exact setup of the reverse proxy. Since this setting will trust values provided in the request, it is important that the combination of the setting in Express matches how the reverse proxy operates.\n\nThe application setting `trust proxy` may be set to one of the values listed in the following table.\n\n[TABLE]\n\nEnabling `trust proxy` will have the following impact:\n\n- The value of [req.hostname](https://expressjs.com/en/api.html#req.hostname) is derived from the value set in the `X-Forwarded-Host` header, which can be set by the client or by the proxy.\n\n- `X-Forwarded-Proto` can be set by the reverse proxy to tell the app whether it is `https` or `http` or even an invalid name. This value is reflected by [req.protocol](https://expressjs.com/en/api.html#req.protocol).\n\n- The [req.ip](https://expressjs.com/en/api.html#req.ip) and [req.ips](https://expressjs.com/en/api.html#req.ips) values are populated based on the socket address and `X-Forwarded-For` header, starting at the first untrusted address.\n\nThe `trust proxy` setting is implemented using the [proxy-addr](https://www.npmjs.com/package/proxy-addr) package. For more information, see its documentation.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/behind-proxies.html](https://expressjs.com/en/guide/behind-proxies.html)"
- name: 9. Moving to Express 4
  id: guide/migrating-4
  summary: Express 4 is a breaking change from Express 3
  description: "# Moving to Express 4\n\n## Overview\n\nExpress 4 is a breaking change from Express 3. That means an existing Express 3 app will *not* work if you update the Express version in its dependencies.\n\nThis article covers:\n\n- [Changes in Express 4](#changes).\n- [An example](#example-migration) of migrating an Express 3 app to Express 4.\n- [Upgrading to the Express 4 app generator](#app-gen).\n\n## Changes in Express 4\n\nThere are several significant changes in Express 4:\n\n- [Changes to Express core and middleware system.](#core-changes) The dependencies on Connect and built-in middleware were removed, so you must add middleware yourself.\n- [Changes to the routing system.](#routing)\n- [Various other changes.](#other-changes)\n\nSee also:\n\n- [New features in 4.x.](https://github.com/expressjs/express/wiki/New-features-in-4.x)\n- [Migrating from 3.x to 4.x.](https://github.com/expressjs/express/wiki/Migrating-from-3.x-to-4.x)\n\n### Changes to Express core and middleware system\n\nExpress 4 no longer depends on Connect, and removes all built-in middleware from its core, except for the `express.static` function. This means that Express is now an independent routing and middleware web framework, and Express versioning and releases are not affected by middleware updates.\n\nWithout built-in middleware, you must explicitly add all the middleware that is required to run your app. Simply follow these steps:\n\n1.  Install the module: `npm install --save <module-name>`\n2.  In your app, require the module: `require('module-name')`\n3.  Use the module according to its documentation: `app.use( ... )`\n\nThe following table lists Express 3 middleware and their counterparts in Express 4.\n\n|                          |                                                                                                         |\n|--------------------------|---------------------------------------------------------------------------------------------------------|\n| Express 3                | Express 4                                                                                               |\n| `express.bodyParser`     | [body-parser](https://github.com/expressjs/body-parser) + [multer](https://github.com/expressjs/multer) |\n| `express.compress`       | [compression](https://github.com/expressjs/compression)                                                 |\n| `express.cookieSession`  | [cookie-session](https://github.com/expressjs/cookie-session)                                           |\n| `express.cookieParser`   | [cookie-parser](https://github.com/expressjs/cookie-parser)                                             |\n| `express.logger`         | [morgan](https://github.com/expressjs/morgan)                                                           |\n| `express.session`        | [express-session](https://github.com/expressjs/session)                                                 |\n| `express.favicon`        | [serve-favicon](https://github.com/expressjs/serve-favicon)                                             |\n| `express.responseTime`   | [response-time](https://github.com/expressjs/response-time)                                             |\n| `express.errorHandler`   | [errorhandler](https://github.com/expressjs/errorhandler)                                               |\n| `express.methodOverride` | [method-override](https://github.com/expressjs/method-override)                                         |\n| `express.timeout`        | [connect-timeout](https://github.com/expressjs/timeout)                                                 |\n| `express.vhost`          | [vhost](https://github.com/expressjs/vhost)                                                             |\n| `express.csrf`           | [csurf](https://github.com/expressjs/csurf)                                                             |\n| `express.directory`      | [serve-index](https://github.com/expressjs/serve-index)                                                 |\n| `express.static`         | [serve-static](https://github.com/expressjs/serve-static)                                               |\n\nHere is the [complete list](https://github.com/senchalabs/connect#middleware) of Express 4 middleware.\n\nIn most cases, you can simply replace the old version 3 middleware with its Express 4 counterpart. For details, see the module documentation in GitHub.\n\n#### `app.use` accepts parameters\n\nIn version 4 you can use a variable parameter to define the path where middleware functions are loaded, then read the value of the parameter from the route handler. For example:\n\n``` js\napp.use('/book/:id', (req, res, next) => {\n  console.log('ID:', req.params.id)\n  next()\n})\n```\n\n### The routing system\n\nApps now implicitly load routing middleware, so you no longer have to worry about the order in which middleware is loaded with respect to the `router` middleware.\n\nThe way you define routes is unchanged, but the routing system has two new features to help organize your routes:\n\n- A new method, `app.route()`, to create chainable route handlers for a route path.\n- A new class, `express.Router`, to create modular mountable route handlers.\n\n#### `app.route()` method\n\nThe new `app.route()` method enables you to create chainable route handlers for a route path. Because the path is specified in a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see [`Router()` documentation](../index#router).\n\nHere is an example of chained route handlers that are defined by using the `app.route()` function.\n\n``` js\napp.route('/book')\n  .get((req, res) => {\n    res.send('Get a random book')\n  })\n  .post((req, res) => {\n    res.send('Add a book')\n  })\n  .put((req, res) => {\n    res.send('Update the book')\n  })\n```\n\n#### `express.Router` class\n\nThe other feature that helps to organize routes is a new class, `express.Router`, that you can use to create modular mountable route handlers. A `Router` instance is a complete middleware and routing system; for this reason it is often referred to as a “mini-app”.\n\nThe following example creates a router as a module, loads middleware in it, defines some routes, and mounts it on a path on the main app.\n\nFor example, create a router file named `birds.js` in the app directory, with the following content:\n\n``` js\nvar express = require('express')\nvar router = express.Router()\n\n// middleware specific to this router\nrouter.use((req, res, next) => {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', (req, res) => {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', (req, res) => {\n  res.send('About birds')\n})\n\nmodule.exports = router\n```\n\nThen, load the router module in the app:\n\n``` js\nvar birds = require('./birds')\n\n// ...\n\napp.use('/birds', birds)\n```\n\nThe app will now be able to handle requests to the `/birds` and `/birds/about` paths, and will call the `timeLog` middleware that is specific to the route.\n\n### Other changes\n\nThe following table lists other small but important changes in Express 4:\n\n|                                    |                                                                                                                                                                           |\n|------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Object                             | Description                                                                                                                                                               |\n| Node.js                            | Express 4 requires Node.js 0.10.x or later and has dropped support for Node.js 0.8.x.                                                                                     |\n| `http.createServer()`              | The `http` module is no longer needed, unless you need to directly work with it (socket.io/SPDY/HTTPS). The app can be started by using the `app.listen()` function.      |\n| `app.configure()`                  | The `app.configure()` function has been removed. Use the `process.env.NODE_ENV` or `app.get('env')` function to detect the environment and configure the app accordingly. |\n| `json spaces`                      | The `json spaces` application property is disabled by default in Express 4.                                                                                               |\n| `req.accepted()`                   | Use `req.accepts()`, `req.acceptsEncodings()`, `req.acceptsCharsets()`, and `req.acceptsLanguages()`.                                                                     |\n| `res.location()`                   | No longer resolves relative URLs.                                                                                                                                         |\n| `req.params`                       | Was an array; now an object.                                                                                                                                              |\n| `res.locals`                       | Was a function; now an object.                                                                                                                                            |\n| `res.headerSent`                   | Changed to `res.headersSent`.                                                                                                                                             |\n| `app.route`                        | Now available as `app.mountpath`.                                                                                                                                         |\n| `res.on('header')`                 | Removed.                                                                                                                                                                  |\n| `res.charset`                      | Removed.                                                                                                                                                                  |\n| `res.setHeader('Set-Cookie', val)` | Functionality is now limited to setting the basic cookie value. Use `res.cookie()` for added functionality.                                                               |\n\n## Example app migration\n\nHere is an example of migrating an Express 3 application to Express 4. The files of interest are `app.js` and `package.json`.\n\n### Version 3 app\n\n#### `app.js`\n\nConsider an Express v.3 application with the following `app.js` file:\n\n``` js\nvar express = require('express')\nvar routes = require('./routes')\nvar user = require('./routes/user')\nvar http = require('http')\nvar path = require('path')\n\nvar app = express()\n\n// all environments\napp.set('port', process.env.PORT || 3000)\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'pug')\napp.use(express.favicon())\napp.use(express.logger('dev'))\napp.use(express.methodOverride())\napp.use(express.session({ secret: 'your secret here' }))\napp.use(express.bodyParser())\napp.use(app.router)\napp.use(express.static(path.join(__dirname, 'public')))\n\n// development only\nif (app.get('env') === 'development') {\n  app.use(express.errorHandler())\n}\n\napp.get('/', routes.index)\napp.get('/users', user.list)\n\nhttp.createServer(app).listen(app.get('port'), () => {\n  console.log('Express server listening on port ' + app.get('port'))\n})\n```\n\n#### `package.json`\n\nThe accompanying version 3 `package.json` file might look something like this:\n\n``` json\n{\n  \"name\": \"application-name\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"3.12.0\",\n    \"pug\": \"*\"\n  }\n}\n```\n\n### Process\n\nBegin the migration process by installing the required middleware for the Express 4 app and updating Express and Pug to their respective latest version with the following command:\n\n``` console\n$ npm install serve-favicon morgan method-override express-session body-parser multer errorhandler express@latest pug@latest --save\n```\n\nMake the following changes to `app.js`:\n\n1.  The built-in Express middleware functions `express.favicon`, `express.logger`, `express.methodOverride`, `express.session`, `express.bodyParser` and `express.errorHandler` are no longer available on the `express` object. You must install their alternatives manually and load them in the app.\n\n2.  You no longer need to load the `app.router` function. It is not a valid Express 4 app object, so remove the `app.use(app.router);` code.\n\n3.  Make sure that the middleware functions are loaded in the correct order - load `errorHandler` after loading the app routes.\n\n### Version 4 app\n\n#### `package.json`\n\nRunning the above `npm` command will update `package.json` as follows:\n\n``` json\n{\n  \"name\": \"application-name\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  },\n  \"dependencies\": {\n    \"body-parser\": \"^1.5.2\",\n    \"errorhandler\": \"^1.1.1\",\n    \"express\": \"^4.8.0\",\n    \"express-session\": \"^1.7.2\",\n    \"pug\": \"^2.0.0\",\n    \"method-override\": \"^2.1.2\",\n    \"morgan\": \"^1.2.2\",\n    \"multer\": \"^0.1.3\",\n    \"serve-favicon\": \"^2.0.1\"\n  }\n}\n```\n\n#### `app.js`\n\nThen, remove invalid code, load the required middleware, and make other changes as necessary. The `app.js` file will look like this:\n\n``` js\nvar http = require('http')\nvar express = require('express')\nvar routes = require('./routes')\nvar user = require('./routes/user')\nvar path = require('path')\n\nvar favicon = require('serve-favicon')\nvar logger = require('morgan')\nvar methodOverride = require('method-override')\nvar session = require('express-session')\nvar bodyParser = require('body-parser')\nvar multer = require('multer')\nvar errorHandler = require('errorhandler')\n\nvar app = express()\n\n// all environments\napp.set('port', process.env.PORT || 3000)\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'pug')\napp.use(favicon(path.join(__dirname, '/public/favicon.ico')))\napp.use(logger('dev'))\napp.use(methodOverride())\napp.use(session({\n  resave: true,\n  saveUninitialized: true,\n  secret: 'uwotm8'\n}))\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(multer())\napp.use(express.static(path.join(__dirname, 'public')))\n\napp.get('/', routes.index)\napp.get('/users', user.list)\n\n// error handling middleware should be loaded after the loading the routes\nif (app.get('env') === 'development') {\n  app.use(errorHandler())\n}\n\nvar server = http.createServer(app)\nserver.listen(app.get('port'), () => {\n  console.log('Express server listening on port ' + app.get('port'))\n})\n```\n\nUnless you need to work directly with the `http` module (socket.io/SPDY/HTTPS), loading it is not required, and the app can be simply started this way:\n\n``` js\napp.listen(app.get('port'), () => {\n  console.log('Express server listening on port ' + app.get('port'))\n})\n```\n\n### Run the app\n\nThe migration process is complete, and the app is now an Express 4 app. To confirm, start the app by using the following command:\n\n``` console\n$ node .\n```\n\nLoad <http://localhost:3000> and see the home page being rendered by Express 4.\n\n## Upgrading to the Express 4 app generator\n\nThe command-line tool to generate an Express app is still `express`, but to upgrade to the new version, you must uninstall the Express 3 app generator and then install the new `express-generator`.\n\n### Installing\n\nIf you already have the Express 3 app generator installed on your system, you must uninstall it:\n\n``` console\n$ npm uninstall -g express\n```\n\nDepending on how your file and directory privileges are configured, you might need to run this command with `sudo`.\n\nNow install the new generator:\n\n``` console\n$ npm install -g express-generator\n```\n\nDepending on how your file and directory privileges are configured, you might need to run this command with `sudo`.\n\nNow the `express` command on your system is updated to the Express 4 generator.\n\n### Changes to the app generator\n\nCommand options and use largely remain the same, with the following exceptions:\n\n- Removed the `--sessions` option.\n- Removed the `--jshtml` option.\n- Added the `--hogan` option to support [Hogan.js](http://twitter.github.io/hogan.js/).\n\n### Example\n\nExecute the following command to create an Express 4 app:\n\n``` console\n$ express app4\n```\n\nIf you look at the contents of the `app4/app.js` file, you will notice that all the middleware functions (except `express.static`) that are required for the app are loaded as independent modules, and the `router` middleware is no longer explicitly loaded in the app.\n\nYou will also notice that the `app.js` file is now a Node.js module, in contrast to the standalone app that was generated by the old generator.\n\nAfter installing the dependencies, start the app by using the following command:\n\n``` console\n$ npm start\n```\n\nIf you look at the npm start script in the `package.json` file, you will notice that the actual command that starts the app is `node ./bin/www`, which used to be `node app.js` in Express 3.\n\nBecause the `app.js` file that was generated by the Express 4 generator is now a Node.js module, it can no longer be started independently as an app (unless you modify the code). The module must be loaded in a Node.js file and started via the Node.js file. The Node.js file is `./bin/www` in this case.\n\nNeither the `bin` directory nor the extensionless `www` file is mandatory for creating an Express app or starting the app. They are just suggestions made by the generator, so feel free to modify them to suit your needs.\n\nTo get rid of the `www` directory and keep things the “Express 3 way”, delete the line that says `module.exports = app;` at the end of the `app.js` file, then paste the following code in its place:\n\n``` js\napp.set('port', process.env.PORT || 3000)\n\nvar server = app.listen(app.get('port'), () => {\n  debug('Express server listening on port ' + server.address().port)\n})\n```\n\nEnsure that you load the `debug` module at the top of the `app.js` file by using the following code:\n\n``` js\nvar debug = require('debug')('app4')\n```\n\nNext, change `\"start\": \"node ./bin/www\"` in the `package.json` file to `\"start\": \"node app.js\"`.\n\nYou have now moved the functionality of `./bin/www` back to `app.js`. This change is not recommended, but the exercise helps you to understand how the `./bin/www` file works, and why the `app.js` file no longer starts on its own.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/migrating-4.html](https://expressjs.com/en/guide/migrating-4.html)"
- name: 10. Moving to Express 5
  id: guide/migrating-5
  summary: Express 5.0 is still in the beta release stage, but here is a preview of the changes that will be in the release and how to migrate your Express 4 app to Express 5
  description: "# Moving to Express 5\n\n## Overview\n\nExpress 5.0 is still in the beta release stage, but here is a preview of the changes that will be in the release and how to migrate your Express 4 app to Express 5.\n\nTo install the latest beta and to preview Express 5, enter the following command in your application root directory:\n\n``` console\n$ npm install \"express@>=5.0.0-beta.1\" --save\n```\n\nYou can then run your automated tests to see what fails, and fix problems according to the updates listed below. After addressing test failures, run your app to see what errors occur. You’ll find out right away if the app uses any methods or properties that are not supported.\n\n## Changes in Express 5\n\n**Removed methods and properties**\n\n- [app.del()](#app.del)\n- [app.param(fn)](#app.param)\n- [Pluralized method names](#plural)\n- [Leading colon in name argument to app.param(name, fn)](#leading)\n- [req.param(name)](#req.param)\n- [res.json(obj, status)](#res.json)\n- [res.jsonp(obj, status)](#res.jsonp)\n- [res.send(body, status)](#res.send.body)\n- [res.send(status)](#res.send.status)\n- [res.sendfile()](#res.sendfile)\n\n**Changed**\n\n- [Path route matching syntax](#path-syntax)\n- [Rejected promises handled from middleware and handlers](#rejected-promises)\n- [app.router](#app.router)\n- [req.host](#req.host)\n- [req.query](#req.query)\n\n**Improvements**\n\n- [res.render()](#res.render)\n\n### Removed methods and properties\n\nIf you use any of these methods or properties in your app, it will crash. So, you’ll need to change your app after you update to version 5.\n\n#### app.del()\n\nExpress 5 no longer supports the `app.del()` function. If you use this function an error is thrown. For registering HTTP DELETE routes, use the `app.delete()` function instead.\n\nInitially `del` was used instead of `delete`, because `delete` is a reserved keyword in JavaScript. However, as of ECMAScript 6, `delete` and other reserved keywords can legally be used as property names.\n\n#### app.param(fn)\n\nThe `app.param(fn)` signature was used for modifying the behavior of the `app.param(name, fn)` function. It has been deprecated since v4.11.0, and Express 5 no longer supports it at all.\n\n#### Pluralized method names\n\nThe following method names have been pluralized. In Express 4, using the old methods resulted in a deprecation warning. Express 5 no longer supports them at all:\n\n`req.acceptsCharset()` is replaced by `req.acceptsCharsets()`.\n\n`req.acceptsEncoding()` is replaced by `req.acceptsEncodings()`.\n\n`req.acceptsLanguage()` is replaced by `req.acceptsLanguages()`.\n\n#### Leading colon (:) in the name for app.param(name, fn)\n\nA leading colon character (:) in the name for the `app.param(name, fn)` function is a remnant of Express 3, and for the sake of backwards compatibility, Express 4 supported it with a deprecation notice. Express 5 will silently ignore it and use the name parameter without prefixing it with a colon.\n\nThis should not affect your code if you follow the Express 4 documentation of [app.param](../index#app.param), as it makes no mention of the leading colon.\n\n#### req.param(name)\n\nThis potentially confusing and dangerous method of retrieving form data has been removed. You will now need to specifically look for the submitted parameter name in the `req.params`, `req.body`, or `req.query` object.\n\n#### res.json(obj, status)\n\nExpress 5 no longer supports the signature `res.json(obj, status)`. Instead, set the status and then chain it to the `res.json()` method like this: `res.status(status).json(obj)`.\n\n#### res.jsonp(obj, status)\n\nExpress 5 no longer supports the signature `res.jsonp(obj, status)`. Instead, set the status and then chain it to the `res.jsonp()` method like this: `res.status(status).jsonp(obj)`.\n\n#### res.send(body, status)\n\nExpress 5 no longer supports the signature `res.send(obj, status)`. Instead, set the status and then chain it to the `res.send()` method like this: `res.status(status).send(obj)`.\n\n#### res.send(status)\n\nExpress 5 no longer supports the signature `res.send(`*`status`*`)`, where *`status`* is a number. Instead, use the `res.sendStatus(statusCode)` function, which sets the HTTP response header status code and sends the text version of the code: “Not Found”, “Internal Server Error”, and so on. If you need to send a number by using the `res.send()` function, quote the number to convert it to a string, so that Express does not interpret it as an attempt to use the unsupported old signature.\n\n#### res.sendfile()\n\nThe `res.sendfile()` function has been replaced by a camel-cased version `res.sendFile()` in Express 5.\n\n### Changed\n\n#### Path route matching syntax\n\nPath route matching syntax is when a string is supplied as the first parameter to the `app.all()`, `app.use()`, `app.METHOD()`, `router.all()`, `router.METHOD()`, and `router.use()` APIs. The following changes have been made to how the path string is matched to an incoming request:\n\n- Add new `?`, `*`, and `+` parameter modifiers.\n- Matching group expressions are only RegExp syntax.\n  - `(*)` is no longer valid and must be written as `(.*)`, for example.\n- Named matching groups no longer available by position in `req.params`.\n  - `/:foo(.*)` only captures as `req.params.foo` and not available as `req.params[0]`.\n- Regular expressions can only be used in a matching group.\n  - `/\\\\d+` is no longer valid and must be written as `/(\\\\d+)`.\n- Special `*` path segment behavior removed.\n  - `/foo/*/bar` will match a literal `*` as the middle segment.\n\n#### Rejected promises handled from middleware and handlers\n\nRequest middleware and handlers that return rejected promises are now handled by forwarding the rejected value as an `Error` to the error handling middleware. This means that using `async` functions as middleware and handlers are easier than ever. When an error is thrown in an `async` function or a rejected promise is `await`ed inside an async function, those errors will be passed to the error handler as if calling `next(err)`.\n\nDetails of how Express handles errors is covered in the [error handling documentation](error-handling).\n\n#### app.router\n\nThe `app.router` object, which was removed in Express 4, has made a comeback in Express 5. In the new version, this object is a just a reference to the base Express router, unlike in Express 3, where an app had to explicitly load it.\n\n#### req.host\n\nIn Express 4, the `req.host` function incorrectly stripped off the port number if it was present. In Express 5 the port number is maintained.\n\n#### req.query\n\nThe `req.query` property is no longer a writable property and is instead a getter. The default query parser has been changed from “extended” to “simple”.\n\n### Improvements\n\n#### res.render()\n\nThis method now enforces asynchronous behavior for all view engines, avoiding bugs caused by view engines that had a synchronous implementation and that violated the recommended interface.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/migrating-5.html](https://expressjs.com/en/guide/migrating-5.html)"
- name: 11. Database integration
  id: guide/database-integration
  summary: Adding the capability to connect databases to Express apps is just a matter of loading an appropriate Node.js driver for the database in your app
  description: "# Database integration\n\nAdding the capability to connect databases to Express apps is just a matter of loading an appropriate Node.js driver for the database in your app. This document briefly explains how to add and use some of the most popular Node.js modules for database systems in your Express app:\n\n- [Cassandra](#cassandra)\n- [Couchbase](#couchbase)\n- [CouchDB](#couchdb)\n- [LevelDB](#leveldb)\n- [MySQL](#mysql)\n- [MongoDB](#mongodb)\n- [Neo4j](#neo4j)\n- [Oracle](#oracle)\n- [PostgreSQL](#postgresql)\n- [Redis](#redis)\n- [SQL Server](#sql-server)\n- [SQLite](#sqlite)\n- [Elasticsearch](#elasticsearch)\n\nThese database drivers are among many that are available. For other options, search on the [npm](https://www.npmjs.com/) site.\n\n## Cassandra\n\n**Module**: [cassandra-driver](https://github.com/datastax/nodejs-driver)\n\n### Installation\n\n``` console\n$ npm install cassandra-driver\n```\n\n### Example\n\n``` js\nconst cassandra = require('cassandra-driver')\nconst client = new cassandra.Client({ contactPoints: ['localhost'] })\n\nclient.execute('select key from system.local', (err, result) => {\n  if (err) throw err\n  console.log(result.rows[0])\n})\n```\n\n## Couchbase\n\n**Module**: [couchnode](https://github.com/couchbase/couchnode)\n\n### Installation\n\n``` console\n$ npm install couchbase\n```\n\n### Example\n\n``` js\nconst couchbase = require('couchbase')\nconst bucket = (new couchbase.Cluster('http://localhost:8091')).openBucket('bucketName')\n\n// add a document to a bucket\nbucket.insert('document-key', { name: 'Matt', shoeSize: 13 }, (err, result) => {\n  if (err) {\n    console.log(err)\n  } else {\n    console.log(result)\n  }\n})\n\n// get all documents with shoe size 13\nconst n1ql = 'SELECT d.* FROM `bucketName` d WHERE shoeSize = $1'\nconst query = N1qlQuery.fromString(n1ql)\nbucket.query(query, [13], (err, result) => {\n  if (err) {\n    console.log(err)\n  } else {\n    console.log(result)\n  }\n})\n```\n\n## CouchDB\n\n**Module**: [nano](https://github.com/dscape/nano)\n\n### Installation\n\n``` console\n$ npm install nano\n```\n\n### Example\n\n``` js\nconst nano = require('nano')('http://localhost:5984')\nnano.db.create('books')\nconst books = nano.db.use('books')\n\n// Insert a book document in the books database\nbooks.insert({ name: 'The Art of war' }, null, (err, body) => {\n  if (err) {\n    console.log(err)\n  } else {\n    console.log(body)\n  }\n})\n\n// Get a list of all books\nbooks.list((err, body) => {\n  if (err) {\n    console.log(err)\n  } else {\n    console.log(body.rows)\n  }\n})\n```\n\n## LevelDB\n\n**Module**: [levelup](https://github.com/rvagg/node-levelup)\n\n### Installation\n\n``` console\n$ npm install level levelup leveldown\n```\n\n### Example\n\n``` js\nconst levelup = require('levelup')\nconst db = levelup('./mydb')\n\ndb.put('name', 'LevelUP', (err) => {\n  if (err) return console.log('Ooops!', err)\n\n  db.get('name', (err, value) => {\n    if (err) return console.log('Ooops!', err)\n\n    console.log(`name=${value}`)\n  })\n})\n```\n\n## MySQL\n\n**Module**: [mysql](https://github.com/felixge/node-mysql/)\n\n### Installation\n\n``` console\n$ npm install mysql\n```\n\n### Example\n\n``` js\nconst mysql = require('mysql')\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', (err, rows, fields) => {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\n```\n\n## MongoDB\n\n**Module**: [mongodb](https://github.com/mongodb/node-mongodb-native)\n\n### Installation\n\n``` console\n$ npm install mongodb\n```\n\n### Example (v2.\\*)\n\n``` js\nconst MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', (err, db) => {\n  if (err) throw err\n\n  db.collection('mammals').find().toArray((err, result) => {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\n```\n\n### Example (v3.\\*)\n\n``` js\nconst MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', (err, client) => {\n  if (err) throw err\n\n  const db = client.db('animals')\n\n  db.collection('mammals').find().toArray((err, result) => {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\n```\n\nIf you want an object model driver for MongoDB, look at [Mongoose](https://github.com/LearnBoost/mongoose).\n\n## Neo4j\n\n**Module**: [neo4j-driver](https://github.com/neo4j/neo4j-javascript-driver)\n\n### Installation\n\n``` console\n$ npm install neo4j-driver\n```\n\n### Example\n\n``` js\nconst neo4j = require('neo4j-driver')\nconst driver = neo4j.driver('neo4j://localhost:7687', neo4j.auth.basic('neo4j', 'letmein'))\n\nconst session = driver.session()\n\nsession.readTransaction((tx) => {\n  return tx.run('MATCH (n) RETURN count(n) AS count')\n    .then((res) => {\n      console.log(res.records[0].get('count'))\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n})\n```\n\n## Oracle\n\n**Module**: [oracledb](https://github.com/oracle/node-oracledb)\n\n### Installation\n\nNOTE: [See installation prerequisites](https://github.com/oracle/node-oracledb#-installation).\n\n``` console\n$ npm install oracledb\n```\n\n### Example\n\n``` js\nconst oracledb = require('oracledb')\nconst config = {\n  user: '<your db user>',\n  password: '<your db password>',\n  connectString: 'localhost:1521/orcl'\n}\n\nasync function getEmployee (empId) {\n  let conn\n\n  try {\n    conn = await oracledb.getConnection(config)\n\n    const result = await conn.execute(\n      'select * from employees where employee_id = :id',\n      [empId]\n    )\n\n    console.log(result.rows[0])\n  } catch (err) {\n    console.log('Ouch!', err)\n  } finally {\n    if (conn) { // conn assignment worked, need to close\n      await conn.close()\n    }\n  }\n}\n\ngetEmployee(101)\n```\n\n## PostgreSQL\n\n**Module**: [pg-promise](https://github.com/vitaly-t/pg-promise)\n\n### Installation\n\n``` console\n$ npm install pg-promise\n```\n\n### Example\n\n``` js\nconst pgp = require('pg-promise')(/* options */)\nconst db = pgp('postgres://username:password@host:port/database')\n\ndb.one('SELECT $1 AS value', 123)\n  .then((data) => {\n    console.log('DATA:', data.value)\n  })\n  .catch((error) => {\n    console.log('ERROR:', error)\n  })\n```\n\n## Redis\n\n**Module**: [redis](https://github.com/mranney/node_redis)\n\n### Installation\n\n``` console\n$ npm install redis\n```\n\n### Example\n\n``` js\nconst redis = require('redis')\nconst client = redis.createClient()\n\nclient.on('error', (err) => {\n  console.log(`Error ${err}`)\n})\n\nclient.set('string key', 'string val', redis.print)\nclient.hset('hash key', 'hashtest 1', 'some value', redis.print)\nclient.hset(['hash key', 'hashtest 2', 'some other value'], redis.print)\n\nclient.hkeys('hash key', (err, replies) => {\n  console.log(`${replies.length} replies:`)\n\n  replies.forEach((reply, i) => {\n    console.log(`    ${i}: ${reply}`)\n  })\n\n  client.quit()\n})\n```\n\n## SQL Server\n\n**Module**: [tedious](https://github.com/tediousjs/tedious)\n\n### Installation\n\n``` console\n$ npm install tedious\n```\n\n### Example\n\n``` js\nconst Connection = require('tedious').Connection\nconst Request = require('tedious').Request\n\nconst config = {\n  server: 'localhost',\n  authentication: {\n    type: 'default',\n    options: {\n      userName: 'your_username', // update me\n      password: 'your_password' // update me\n    }\n  }\n}\n\nconst connection = new Connection(config)\n\nconnection.on('connect', (err) => {\n  if (err) {\n    console.log(err)\n  } else {\n    executeStatement()\n  }\n})\n\nfunction executeStatement () {\n  request = new Request(\"select 123, 'hello world'\", (err, rowCount) => {\n    if (err) {\n      console.log(err)\n    } else {\n      console.log(`${rowCount} rows`)\n    }\n    connection.close()\n  })\n\n  request.on('row', (columns) => {\n    columns.forEach((column) => {\n      if (column.value === null) {\n        console.log('NULL')\n      } else {\n        console.log(column.value)\n      }\n    })\n  })\n\n  connection.execSql(request)\n}\n```\n\n## SQLite\n\n**Module**: [sqlite3](https://github.com/mapbox/node-sqlite3)\n\n### Installation\n\n``` console\n$ npm install sqlite3\n```\n\n### Example\n\n``` js\nconst sqlite3 = require('sqlite3').verbose()\nconst db = new sqlite3.Database(':memory:')\n\ndb.serialize(() => {\n  db.run('CREATE TABLE lorem (info TEXT)')\n  const stmt = db.prepare('INSERT INTO lorem VALUES (?)')\n\n  for (let i = 0; i < 10; i++) {\n    stmt.run(`Ipsum ${i}`)\n  }\n\n  stmt.finalize()\n\n  db.each('SELECT rowid AS id, info FROM lorem', (err, row) => {\n    console.log(`${row.id}: ${row.info}`)\n  })\n})\n\ndb.close()\n```\n\n## Elasticsearch\n\n**Module**: [elasticsearch](https://github.com/elastic/elasticsearch-js)\n\n### Installation\n\n``` console\n$ npm install elasticsearch\n```\n\n### Example\n\n``` js\nconst elasticsearch = require('elasticsearch')\nconst client = elasticsearch.Client({\n  host: 'localhost:9200'\n})\n\nclient.search({\n  index: 'books',\n  type: 'book',\n  body: {\n    query: {\n      multi_match: {\n        query: 'express js',\n        fields: ['title', 'description']\n      }\n    }\n  }\n}).then((response) => {\n  const hits = response.hits.hits\n}, (error) => {\n  console.trace(error.message)\n})\n```\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/guide/database-integration.html](https://expressjs.com/en/guide/database-integration.html)"
- name: app.all()
  id: index#app.all
  summary: This method is like the standard app.METHOD() methods, except it matches all HTTP verbs
  description: |-
    ### app.all(path, callback \[, callback ...\])

    This method is like the standard [app.METHOD()](#app.METHOD) methods, except it matches all HTTP verbs.

    #### Arguments

    [TABLE]

    #### Examples

    The following callback is executed for requests to `/secret` whether using GET, POST, PUT, DELETE, or any other HTTP request method:

    ``` js
    app.all('/secret', function (req, res, next) {
      console.log('Accessing the secret section ...')
      next() // pass control to the next handler
    })
    ```

    The `app.all()` method is useful for mapping “global” logic for specific path prefixes or arbitrary matches. For example, if you put the following at the top of all other route definitions, it requires that all routes from that point on require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end-points: `loadUser` can perform a task, then call `next()` to continue matching subsequent routes.

    ``` js
    app.all('*', requireAuthentication, loadUser)
    ```

    Or the equivalent:

    ``` js
    app.all('*', requireAuthentication)
    app.all('*', loadUser)
    ```

    Another example is white-listed “global” functionality. The example is similar to the ones above, but it only restricts paths that start with “/api”:

    ``` js
    app.all('/api/*', requireAuthentication)
    ```
- name: app.delete()
  id: index#app.delete.method
  summary: Routes HTTP DELETE requests to the specified path with the specified callback functions
  description: |-
    ### app.delete(path, callback \[, callback ...\])

    Routes HTTP DELETE requests to the specified path with the specified callback functions. For more information, see the [routing guide](https://expressjs.com/guide/routing.html).

    #### Arguments

    [TABLE]

    #### Example

    ``` js
    app.delete('/', function (req, res) {
      res.send('DELETE request to homepage')
    })
    ```
- name: app.disable()
  id: index#app.disable
  summary: Sets the Boolean setting name to false, where name is one of the properties from the app settings table
  description: |-
    ### app.disable(name)

    Sets the Boolean setting `name` to `false`, where `name` is one of the properties from the [app settings table](#app.settings.table). Calling `app.set('foo', false)` for a Boolean property is the same as calling `app.disable('foo')`.

    For example:

    ``` js
    app.disable('trust proxy')
    app.get('trust proxy')
    // => false
    ```
- name: app.disabled()
  id: index#app.disabled
  summary: Returns true if the Boolean setting name is disabled (false), where name is one of the properties from the app settings table
  description: |-
    ### app.disabled(name)

    Returns `true` if the Boolean setting `name` is disabled (`false`), where `name` is one of the properties from the [app settings table](#app.settings.table).

    ``` js
    app.disabled('trust proxy')
    // => true

    app.enable('trust proxy')
    app.disabled('trust proxy')
    // => false
    ```
- name: app.enable()
  id: index#app.enable
  summary: Sets the Boolean setting name to true, where name is one of the properties from the app settings table
  description: |-
    ### app.enable(name)

    Sets the Boolean setting `name` to `true`, where `name` is one of the properties from the [app settings table](#app.settings.table). Calling `app.set('foo', true)` for a Boolean property is the same as calling `app.enable('foo')`.

    ``` js
    app.enable('trust proxy')
    app.get('trust proxy')
    // => true
    ```
- name: app.enabled()
  id: index#app.enabled
  summary: Returns true if the setting name is enabled (true), where name is one of the properties from the app settings table
  description: |-
    ### app.enabled(name)

    Returns `true` if the setting `name` is enabled (`true`), where `name` is one of the properties from the [app settings table](#app.settings.table).

    ``` js
    app.enabled('trust proxy')
    // => false

    app.enable('trust proxy')
    app.enabled('trust proxy')
    // => true
    ```
- name: app.engine()
  id: index#app.engine
  summary: Registers the given template engine callback as ext
  description: |-
    ### app.engine(ext, callback)

    Registers the given template engine `callback` as `ext`.

    By default, Express will `require()` the engine based on the file extension. For example, if you try to render a “foo.pug” file, Express invokes the following internally, and caches the `require()` on subsequent calls to increase performance.

    ``` js
    app.engine('pug', require('pug').__express)
    ```

    Use this method for engines that do not provide `.__express` out of the box, or if you wish to “map” a different extension to the template engine.

    For example, to map the EJS template engine to “.html” files:

    ``` js
    app.engine('html', require('ejs').renderFile)
    ```

    In this case, EJS provides a `.renderFile()` method with the same signature that Express expects: `(path, options, callback)`, though note that it aliases this method as `ejs.__express` internally so if you’re using “.ejs” extensions you don’t need to do anything.

    Some template engines do not follow this convention. The [consolidate.js](https://github.com/tj/consolidate.js) library maps Node template engines to follow this convention, so they work seamlessly with Express.

    ``` js
    var engines = require('consolidate')
    app.engine('haml', engines.haml)
    app.engine('html', engines.hogan)
    ```
- name: app.get()
  id: index#app.get
  summary: Returns the value of name app setting, where name is one of the strings in the app settings table
  description: |-
    ### app.get(name)

    Returns the value of `name` app setting, where `name` is one of the strings in the [app settings table](#app.settings.table). For example:

    ``` js
    app.get('title')
    // => undefined

    app.set('title', 'My Site')
    app.get('title')
    // => "My Site"
    ```
- name: app.get()
  id: index#app.get.method
  summary: Routes HTTP GET requests to the specified path with the specified callback functions
  description: |-
    ### app.get(path, callback \[, callback ...\])

    Routes HTTP GET requests to the specified path with the specified callback functions.

    #### Arguments

    [TABLE]

    For more information, see the [routing guide](https://expressjs.com/guide/routing.html).

    #### Example

    ``` js
    app.get('/', function (req, res) {
      res.send('GET request to homepage')
    })
    ```
- name: app.listen()
  id: index#app.listen_path_callback
  summary: Starts a UNIX socket and listens for connections on the given path
  description: |-
    ### app.listen(path, \[callback\])

    Starts a UNIX socket and listens for connections on the given path. This method is identical to Node’s [http.Server.listen()](https://nodejs.org/api/http.html#http_server_listen).

    ``` js
    var express = require('express')
    var app = express()
    app.listen('/tmp/sock')
    ```
- name: app.listen()
  id: index#app.listen
  summary: Binds and listens for connections on the specified host and port
  description: |-
    ### app.listen(\[port\[, host\[, backlog\]\]\]\[, callback\])

    Binds and listens for connections on the specified host and port. This method is identical to Node’s [http.Server.listen()](https://nodejs.org/api/http.html#http_server_listen).

    If port is omitted or is 0, the operating system will assign an arbitrary unused port, which is useful for cases like automated tasks (tests, etc.).

    ``` js
    var express = require('express')
    var app = express()
    app.listen(3000)
    ```

    The `app` returned by `express()` is in fact a JavaScript `Function`, designed to be passed to Node’s HTTP servers as a callback to handle requests. This makes it easy to provide both HTTP and HTTPS versions of your app with the same code base, as the app does not inherit from these (it is simply a callback):

    ``` js
    var express = require('express')
    var https = require('https')
    var http = require('http')
    var app = express()

    http.createServer(app).listen(80)
    https.createServer(options, app).listen(443)
    ```

    The `app.listen()` method returns an [http.Server](https://nodejs.org/api/http.html#http_class_http_server) object and (for HTTP) is a convenience method for the following:

    ``` js
    app.listen = function () {
      var server = http.createServer(this)
      return server.listen.apply(server, arguments)
    }
    ```

    NOTE: All the forms of Node’s [http.Server.listen()](https://nodejs.org/api/http.html#http_server_listen) method are in fact actually supported.
- name: app.locals
  id: index#app.locals
  summary: The app.locals object has properties that are local variables within the application, and will be available in templates rendered with res.render
  description: |-
    ### app.locals

    The `app.locals` object has properties that are local variables within the application, and will be available in templates rendered with [res.render](#res.render).

    ``` js
    console.dir(app.locals.title)
    // => 'My App'

    console.dir(app.locals.email)
    // => 'me@myapp.com'
    ```

    Once set, the value of `app.locals` properties persist throughout the life of the application, in contrast with [res.locals](#res.locals) properties that are valid only for the lifetime of the request.

    You can access local variables in templates rendered within the application. This is useful for providing helper functions to templates, as well as application-level data. Local variables are available in middleware via `req.app.locals` (see [req.app](#req.app))

    ``` js
    app.locals.title = 'My App'
    app.locals.strftime = require('strftime')
    app.locals.email = 'me@myapp.com'
    ```
- name: app.METHOD()
  id: index#app.METHOD
  summary: Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET, PUT, POST, and so on, in lowercase
  description: |-
    ### app.METHOD(path, callback \[, callback ...\])

    Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are `app.get()`, `app.post()`, `app.put()`, and so on. See [Routing methods](#routing-methods) below for the complete list.

    #### Arguments

    [TABLE]

    #### Routing methods

    Express supports the following routing methods corresponding to the HTTP methods of the same names:

    [TABLE]

    The API documentation has explicit entries only for the most popular HTTP methods `app.get()`, `app.post()`, `app.put()`, and `app.delete()`. However, the other methods listed above work in exactly the same way.

    To route methods that translate to invalid JavaScript variable names, use the bracket notation. For example, `app['m-search']('/', function ...`.

    The `app.get()` function is automatically called for the HTTP `HEAD` method in addition to the `GET` method if `app.head()` was not called for the path before `app.get()`.

    The method, `app.all()`, is not derived from any HTTP method and loads middleware at the specified path for *all* HTTP request methods. For more information, see [app.all](#app.all).

    For more information on routing, see the [routing guide](https://expressjs.com/guide/routing.html).
- name: app.mountpath
  id: index#app.mountpath
  summary: The app.mountpath property contains one or more path patterns on which a sub-app was mounted
  description: |-
    ### app.mountpath

    The `app.mountpath` property contains one or more path patterns on which a sub-app was mounted.

    A sub-app is an instance of `express` that may be used for handling the request to a route.

    ``` js
    var express = require('express')

    var app = express() // the main app
    var admin = express() // the sub app

    admin.get('/', function (req, res) {
      console.log(admin.mountpath) // /admin
      res.send('Admin Homepage')
    })

    app.use('/admin', admin) // mount the sub app
    ```

    It is similar to the [baseUrl](#req.baseUrl) property of the `req` object, except `req.baseUrl` returns the matched URL path, instead of the matched patterns.

    If a sub-app is mounted on multiple path patterns, `app.mountpath` returns the list of patterns it is mounted on, as shown in the following example.

    ``` js
    var admin = express()

    admin.get('/', function (req, res) {
      console.dir(admin.mountpath) // [ '/adm*n', '/manager' ]
      res.send('Admin Homepage')
    })

    var secret = express()
    secret.get('/', function (req, res) {
      console.log(secret.mountpath) // /secr*t
      res.send('Admin Secret')
    })

    admin.use('/secr*t', secret) // load the 'secret' router on '/secr*t', on the 'admin' sub app
    app.use(['/adm*n', '/manager'], admin) // load the 'admin' router on '/adm*n' and '/manager', on the parent app
    ```
- name: app.on()
  id: index#app.onmount
  summary: The mount event is fired on a sub-app, when it is mounted on a parent app
  description: |-
    ### app.on('mount', callback(parent))

    The `mount` event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function.

    **NOTE**

    Sub-apps will:

    - Not inherit the value of settings that have a default value. You must set the value in the sub-app.
    - Inherit the value of settings with no default value.

    For details, see [Application settings](index#app.settings.table).

    ``` js
    var admin = express()

    admin.on('mount', function (parent) {
      console.log('Admin Mounted')
      console.log(parent) // refers to the parent app
    })

    admin.get('/', function (req, res) {
      res.send('Admin Homepage')
    })

    app.use('/admin', admin)
    ```

    ### Methods
- name: app.param()
  id: index#app.param
  summary: Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function
  description: |-
    ### app.param(\[name\], callback)

    Add callback triggers to [route parameters](guide/routing#route-parameters), where `name` is the name of the parameter or an array of them, and `callback` is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order.

    If `name` is an array, the `callback` trigger is registered for each parameter declared in it, in the order in which they are declared. Furthermore, for each declared parameter except the last one, a call to `next` inside the callback will call the callback for the next declared parameter. For the last parameter, a call to `next` will call the next middleware in place for the route currently being processed, just like it would if `name` were just a string.

    For example, when `:user` is present in a route path, you may map user loading logic to automatically provide `req.user` to the route, or perform validations on the parameter input.

    ``` js
    app.param('user', function (req, res, next, id) {
      // try to get the user details from the User model and attach it to the request object
      User.find(id, function (err, user) {
        if (err) {
          next(err)
        } else if (user) {
          req.user = user
          next()
        } else {
          next(new Error('failed to load user'))
        }
      })
    })
    ```

    Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers. Hence, param callbacks defined on `app` will be triggered only by route parameters defined on `app` routes.

    All param callbacks will be called before any handler of any route in which the param occurs, and they will each be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples.

    ``` js
    app.param('id', function (req, res, next, id) {
      console.log('CALLED ONLY ONCE')
      next()
    })

    app.get('/user/:id', function (req, res, next) {
      console.log('although this matches')
      next()
    })

    app.get('/user/:id', function (req, res) {
      console.log('and this matches too')
      res.end()
    })
    ```

    On `GET /user/42`, the following is printed:

        CALLED ONLY ONCE
        although this matches
        and this matches too

    ``` js
    app.param(['id', 'page'], function (req, res, next, value) {
      console.log('CALLED ONLY ONCE with', value)
      next()
    })

    app.get('/user/:id/:page', function (req, res, next) {
      console.log('although this matches')
      next()
    })

    app.get('/user/:id/:page', function (req, res) {
      console.log('and this matches too')
      res.end()
    })
    ```

    On `GET /user/42/3`, the following is printed:

        CALLED ONLY ONCE with 42
        CALLED ONLY ONCE with 3
        although this matches
        and this matches too

    The following section describes `app.param(callback)`, which is deprecated as of v4.11.0.

    The behavior of the `app.param(name, callback)` method can be altered entirely by passing only a function to `app.param()`. This function is a custom implementation of how `app.param(name, callback)` should behave - it accepts two parameters and must return a middleware.

    The first parameter of this function is the name of the URL parameter that should be captured, the second parameter can be any JavaScript object which might be used for returning the middleware implementation.

    The middleware returned by the function decides the behavior of what happens when a URL parameter is captured.

    In this example, the `app.param(name, callback)` signature is modified to `app.param(name, accessId)`. Instead of accepting a name and a callback, `app.param()` will now accept a name and a number.

    ``` js
    var express = require('express')
    var app = express()

    // customizing the behavior of app.param()
    app.param(function (param, option) {
      return function (req, res, next, val) {
        if (val === option) {
          next()
        } else {
          next('route')
        }
      }
    })

    // using the customized app.param()
    app.param('id', 1337)

    // route to trigger the capture
    app.get('/user/:id', function (req, res) {
      res.send('OK')
    })

    app.listen(3000, function () {
      console.log('Ready')
    })
    ```

    In this example, the `app.param(name, callback)` signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id.

    ``` js
    app.param(function (param, validator) {
      return function (req, res, next, val) {
        if (validator(val)) {
          next()
        } else {
          next('route')
        }
      }
    })

    app.param('id', function (candidate) {
      return !isNaN(parseFloat(candidate)) && isFinite(candidate)
    })
    ```

    The ‘`.`’ character can’t be used to capture a character in your capturing regexp. For example you can’t use `'/user-.+/'` to capture `'users-gami'`, use `[\\s\\S]` or `[\\w\\W]` instead (as in `'/user-[\\s\\S]+/'`.

    Examples:

    ``` js
    // captures '1-a_6' but not '543-azser-sder'
    router.get('/[0-9]+-[[\\w]]*', function (req, res, next) { next() })

    // captures '1-a_6' and '543-az(ser"-sder' but not '5-a s'
    router.get('/[0-9]+-[[\\S]]*', function (req, res, next) { next() })

    // captures all (equivalent to '.*')
    router.get('[[\\s\\S]]*', function (req, res, next) { next() })
    ```
- name: app.path()
  id: index#app.path
  summary: Returns the canonical path of the app, a string
  description: |-
    ### app.path()

    Returns the canonical path of the app, a string.

    ``` js
    var app = express()
    var blog = express()
    var blogAdmin = express()

    app.use('/blog', blog)
    blog.use('/admin', blogAdmin)

    console.dir(app.path()) // ''
    console.dir(blog.path()) // '/blog'
    console.dir(blogAdmin.path()) // '/blog/admin'
    ```

    The behavior of this method can become very complicated in complex cases of mounted apps: it is usually better to use [req.baseUrl](#req.baseUrl) to get the canonical path of the app.
- name: app.post()
  id: index#app.post.method
  summary: Routes HTTP POST requests to the specified path with the specified callback functions
  description: |-
    ### app.post(path, callback \[, callback ...\])

    Routes HTTP POST requests to the specified path with the specified callback functions. For more information, see the [routing guide](https://expressjs.com/guide/routing.html).

    #### Arguments

    [TABLE]

    #### Example

    ``` js
    app.post('/', function (req, res) {
      res.send('POST request to homepage')
    })
    ```
- name: app.put()
  id: index#app.put.method
  summary: Routes HTTP PUT requests to the specified path with the specified callback functions
  description: |-
    ### app.put(path, callback \[, callback ...\])

    Routes HTTP PUT requests to the specified path with the specified callback functions.

    #### Arguments

    [TABLE]

    #### Example

    ``` js
    app.put('/', function (req, res) {
      res.send('PUT request to homepage')
    })
    ```
- name: app.render()
  id: index#app.render
  summary: Returns the rendered HTML of a view via the callback function
  description: |-
    ### app.render(view, \[locals\], callback)

    Returns the rendered HTML of a view via the `callback` function. It accepts an optional parameter that is an object containing local variables for the view. It is like [res.render()](#res.render), except it cannot send the rendered view to the client on its own.

    Think of `app.render()` as a utility function for generating rendered view strings. Internally `res.render()` uses `app.render()` to render views.

    The local variable `cache` is reserved for enabling view cache. Set it to `true`, if you want to cache view during development; view caching is enabled in production by default.

    ``` js
    app.render('email', function (err, html) {
      // ...
    })

    app.render('email', { name: 'Tobi' }, function (err, html) {
      // ...
    })
    ```
- name: app.route()
  id: index#app.route
  summary: Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware
  description: |-
    ### app.route(path)

    Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware. Use `app.route()` to avoid duplicate route names (and thus typo errors).

    ``` js
    var app = express()

    app.route('/events')
      .all(function (req, res, next) {
        // runs for all HTTP verbs first
        // think of it as route specific middleware!
      })
      .get(function (req, res, next) {
        res.json({})
      })
      .post(function (req, res, next) {
        // maybe add a new event...
      })
    ```
- name: app.set()
  id: index#app.set
  summary: Assigns setting name to value
  description: |-
    ### app.set(name, value)

    Assigns setting `name` to `value`. You may store any value that you want, but certain names can be used to configure the behavior of the server. These special names are listed in the [app settings table](#app.settings.table).

    Calling `app.set('foo', true)` for a Boolean property is the same as calling `app.enable('foo')`. Similarly, calling `app.set('foo', false)` for a Boolean property is the same as calling `app.disable('foo')`.

    Retrieve the value of a setting with [`app.get()`](#app.get).

    ``` js
    app.set('title', 'My Site')
    app.get('title') // "My Site"
    ```

    #### Application Settings

    The following table lists application settings.

    Note that sub-apps will:

    - Not inherit the value of settings that have a default value. You must set the value in the sub-app.
    - Inherit the value of settings with no default value; these are explicitly noted in the table below.

    Exceptions: Sub-apps will inherit the value of `trust proxy` even though it has a default value (for backward-compatibility); Sub-apps will not inherit the value of `view cache` in production (when `NODE_ENV` is “production”).

    [TABLE]

    ##### Options for \`trust proxy\` setting

    Read [Express behind proxies](https://expressjs.com/guide/behind-proxies.html) for more information.

    [TABLE]

    ##### Options for \`etag\` setting

    **NOTE**: These settings apply only to dynamic files, not static files. The [express.static](#express.static) middleware ignores these settings.

    The ETag functionality is implemented using the [etag](https://www.npmjs.org/package/etag) package. For more information, see its documentation.

    [TABLE]
- name: app.use()
  id: index#app.use
  summary: 'Mounts the specified middleware function or functions at the specified path: the middleware function is executed when the base of the requested path matches path'
  description: "### app.use(\\[path,\\] callback \\[, callback...\\])\n\nMounts the specified [middleware](https://expressjs.com/guide/using-middleware.html) function or functions at the specified path: the middleware function is executed when the base of the requested path matches `path`.\n\n#### Arguments\n\n[TABLE]\n\n#### Description\n\nA route will match any path that follows its path immediately with a “`/`”. For example: `app.use('/apple', ...)` will match “/apple”, “/apple/images”, “/apple/images/news”, and so on.\n\nSince `path` defaults to “/”, middleware mounted without a path will be executed for every request to the app.  \nFor example, this middleware function will be executed for *every* request to the app:\n\n``` js\napp.use(function (req, res, next) {\n  console.log('Time: %d', Date.now())\n  next()\n})\n```\n\n**NOTE**\n\nSub-apps will:\n\n- Not inherit the value of settings that have a default value. You must set the value in the sub-app.\n- Inherit the value of settings with no default value.\n\nFor details, see [Application settings](index#app.settings.table).\n\nMiddleware functions are executed sequentially, therefore the order of middleware inclusion is important.\n\n``` js\n// this middleware will not allow the request to go beyond it\napp.use(function (req, res, next) {\n  res.send('Hello World')\n})\n\n// requests will never reach this route\napp.get('/', function (req, res) {\n  res.send('Welcome')\n})\n```\n\n**Error-handling middleware**\n\nError-handling middleware always takes *four* arguments. You must provide four arguments to identify it as an error-handling middleware function. Even if you don’t need to use the `next` object, you must specify it to maintain the signature. Otherwise, the `next` object will be interpreted as regular middleware and will fail to handle errors. For details about error-handling middleware, see: [Error handling](guide/error-handling).\n\nDefine error-handling middleware functions in the same way as other middleware functions, except with four arguments instead of three, specifically with the signature `(err, req, res, next)`):\n\n``` js\napp.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n```\n\n#### Path examples\n\nThe following table provides some simple examples of valid `path` values for mounting middleware.\n\n[TABLE]\n\n#### Middleware callback function examples\n\nThe following table provides some simple examples of middleware functions that can be used as the `callback` argument to `app.use()`, `app.METHOD()`, and `app.all()`. Even though the examples are for `app.use()`, they are also valid for `app.use()`, `app.METHOD()`, and `app.all()`.\n\n[TABLE]\n\nFollowing are some examples of using the [express.static](https://expressjs.com/guide/using-middleware.html#middleware.built-in) middleware in an Express app.\n\nServe static content for the app from the “public” directory in the application directory:\n\n``` js\n// GET /style.css etc\napp.use(express.static(path.join(__dirname, 'public')))\n```\n\nMount the middleware at “/static” to serve static content only when their request path is prefixed with “/static”:\n\n``` js\n// GET /static/style.css etc.\napp.use('/static', express.static(path.join(__dirname, 'public')))\n```\n\nDisable logging for static content requests by loading the logger middleware after the static middleware:\n\n``` js\napp.use(express.static(path.join(__dirname, 'public')))\napp.use(logger())\n```\n\nServe static files from multiple directories, but give precedence to “./public” over the others:\n\n``` js\napp.use(express.static(path.join(__dirname, 'public')))\napp.use(express.static(path.join(__dirname, 'files')))\napp.use(express.static(path.join(__dirname, 'uploads')))\n```\n\n## Request\n\nThe `req` object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as `req` (and the HTTP response is `res`) but its actual name is determined by the parameters to the callback function in which you’re working.\n\nFor example:\n\n``` js\napp.get('/user/:id', function (req, res) {\n  res.send('user ' + req.params.id)\n})\n```\n\nBut you could just as well have:\n\n``` js\napp.get('/user/:id', function (request, response) {\n  response.send('user ' + request.params.id)\n})\n```\n\nThe `req` object is an enhanced version of Node’s own request object and supports all [built-in fields and methods](https://nodejs.org/api/http.html#http_class_http_incomingmessage).\n\n### Properties\n\nIn Express 4, `req.files` is no longer available on the `req` object by default. To access uploaded files on the `req.files` object, use multipart-handling middleware like [busboy](#), [multer](https://www.npmjs.com/package/multer), [formidable](https://www.npmjs.com/package/formidable), [multiparty](https://www.npmjs.com/package/multiparty), [connect-multiparty](https://www.npmjs.com/package/connect-multiparty), or [pez](https://www.npmjs.com/package/pez)."
- name: Events
  id: index#app.events
  summary: null
  description: '### Events'
- name: express.json()
  id: index#express.json
  summary: This middleware is available in Express v4.16.0 onwards
  description: |-
    ### express.json(\[options\])

    This middleware is available in Express v4.16.0 onwards.

    This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on [body-parser](https://expressjs.com/resources/middleware/body-parser.html).

    Returns middleware that only parses JSON and only looks at requests where the `Content-Type` header matches the `type` option. This parser accepts any Unicode encoding of the body and supports automatic inflation of `gzip` and `deflate` encodings.

    A new `body` object containing the parsed data is populated on the `request` object after the middleware (i.e. `req.body`), or an empty object (`{}`) if there was no body to parse, the `Content-Type` was not matched, or an error occurred.

    As `req.body`’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, `req.body.foo.toString()` may fail in multiple ways, for example `foo` may not be there or may not be a string, and `toString` may not be a function and instead a string or other user-input.

    The following table describes the properties of the optional `options` object.

    | Property  | Description| Type     | Default              |
    |-----------||----------|----------------------|
    | `inflate` | Enables or disables handling deflated (compressed) bodies; when disabled, deflated bodies are rejected.                                                                                                                                                                                                                                                                                                                                                                                                                        | Boolean  | `true`               |
    | `limit`   | Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the [bytes](https://www.npmjs.com/package/bytes) library for parsing.                                                                                                                                                                                                                                                                                                     | Mixed    | `"100kb"`            |
    | `reviver` | The `reviver` option is passed directly to `JSON.parse` as the second argument. You can find more information on this argument [in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).                                                                                                                                                                                                                | Function | `null`               |
    | `strict`  | Enables or disables only accepting arrays and objects; when disabled will accept anything `JSON.parse` accepts.                                                                                                                                                                                                                                                                                                                                                                                                                | Boolean  | `true`               |
    | `type`    | This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, `type` option is passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme) library and this can be an extension name (like `json`), a mime type (like `application/json`), or a mime type with a wildcard (like `*/*` or `*/json`). If a function, the `type` option is called as `fn(req)` and the request is parsed if it returns a truthy value. | Mixed    | `"application/json"` |
    | `verify`  | This option, if supplied, is called as `verify(req, res, buf, encoding)`, where `buf` is a `Buffer` of the raw request body and `encoding` is the encoding of the request. The parsing can be aborted by throwing an error.                                                                                                                                                                                                                                                                                                    | Function | `undefined`          |
- name: express.raw()
  id: index#express.raw
  summary: This middleware is available in Express v4.17.0 onwards
  description: |-
    ### express.raw(\[options\])

    This middleware is available in Express v4.17.0 onwards.

    This is a built-in middleware function in Express. It parses incoming request payloads into a `Buffer` and is based on [body-parser](https://expressjs.com/resources/middleware/body-parser.html).

    Returns middleware that parses all bodies as a `Buffer` and only looks at requests where the `Content-Type` header matches the `type` option. This parser accepts any Unicode encoding of the body and supports automatic inflation of `gzip` and `deflate` encodings.

    A new `body` `Buffer` containing the parsed data is populated on the `request` object after the middleware (i.e. `req.body`), or an empty object (`{}`) if there was no body to parse, the `Content-Type` was not matched, or an error occurred.

    As `req.body`’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, `req.body.toString()` may fail in multiple ways, for example stacking multiple parsers `req.body` may be from a different parser. Testing that `req.body` is a `Buffer` before calling buffer methods is recommended.

    The following table describes the properties of the optional `options` object.

    | Property  | Description| Type     | Default                      |
    |-----------||----------|------------------------------|
    | `inflate` | Enables or disables handling deflated (compressed) bodies; when disabled, deflated bodies are rejected.                                                                                                                                                                                                                                                                                                                                                                                                                                      | Boolean  | `true`                       |
    | `limit`   | Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the [bytes](https://www.npmjs.com/package/bytes) library for parsing.                                                                                                                                                                                                                                                                                                                   | Mixed    | `"100kb"`                    |
    | `type`    | This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, `type` option is passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme) library and this can be an extension name (like `bin`), a mime type (like `application/octet-stream`), or a mime type with a wildcard (like `*/*` or `application/*`). If a function, the `type` option is called as `fn(req)` and the request is parsed if it returns a truthy value. | Mixed    | `"application/octet-stream"` |
    | `verify`  | This option, if supplied, is called as `verify(req, res, buf, encoding)`, where `buf` is a `Buffer` of the raw request body and `encoding` is the encoding of the request. The parsing can be aborted by throwing an error.                                                                                                                                                                                                                                                                                                                  | Function | `undefined`                  |
- name: express.Router()
  id: index#express.router
  summary: Creates a new router object
  description: |-
    ### express.Router(\[options\])

    Creates a new [router](#router) object.

    ``` js
    var router = express.Router([options])
    ```

    The optional `options` parameter specifies the behavior of the router.

    | Property        | Description                                                                                                                                           | Default                                                                     | Availability |
    |-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|--------------|
    | `caseSensitive` | Enable case sensitivity.                                                                                                                              | Disabled by default, treating “/Foo” and “/foo” as the same.                |              |
    | `mergeParams`   | Preserve the `req.params` values from the parent router. If the parent and the child have conflicting param names, the child’s value take precedence. | `false`                                                                     | 4.5.0+       |
    | `strict`        | Enable strict routing.                                                                                                                                | Disabled by default, “/foo” and “/foo/” are treated the same by the router. |              |

    You can add middleware and HTTP method routes (such as `get`, `put`, `post`, and so on) to `router` just like an application.

    For more information, see [Router](#router).
- name: express.static()
  id: index#express.static
  summary: This is a built-in middleware function in Express
  description: |-
    ### express.static(root, \[options\])

    This is a built-in middleware function in Express. It serves static files and is based on [serve-static](https://expressjs.com/resources/middleware/serve-static.html).

    NOTE: For best results, [use a reverse proxy](advanced/best-practice-performance#use-a-reverse-proxy) cache to improve performance of serving static assets.

    The `root` argument specifies the root directory from which to serve static assets. The function determines the file to serve by combining `req.url` with the provided `root` directory. When a file is not found, instead of sending a 404 response, it calls `next()` to move on to the next middleware, allowing for stacking and fall-backs.

    The following table describes the properties of the `options` object. See also the [example below](#example.of.express.static).

    | Property       | Description                                                                                                                                                                                                                                                                                                                        | Type     | Default      |
    |----------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|--------------|
    | `dotfiles`     | Determines how dotfiles (files or directories that begin with a dot “.”) are treated. See [dotfiles](#dotfiles) below.                                                                                                                                                                                                             | String   | “ignore”     |
    | `etag`         | Enable or disable etag generation NOTE: `express.static` always sends weak ETags.                                                                                                                                                                                                                                                  | Boolean  | `true`       |
    | `extensions`   | Sets file extension fallbacks: If a file is not found, search for files with the specified extensions and serve the first one found. Example: `['html', 'htm']`.                                                                                                                                                                   | Mixed    | `false`      |
    | `fallthrough`  | Let client errors fall-through as unhandled requests, otherwise forward a client error. See [fallthrough](#fallthrough) below.                                                                                                                                                                                                     | Boolean  | `true`       |
    | `immutable`    | Enable or disable the `immutable` directive in the `Cache-Control` response header. If enabled, the `maxAge` option should also be specified to enable caching. The `immutable` directive will prevent supported clients from making conditional requests during the life of the `maxAge` option to check if the file has changed. | Boolean  | `false`      |
    | `index`        | Sends the specified directory index file. Set to `false` to disable directory indexing.                                                                                                                                                                                                                                            | Mixed    | “index.html” |
    | `lastModified` | Set the `Last-Modified` header to the last modified date of the file on the OS.                                                                                                                                                                                                                                                    | Boolean  | `true`       |
    | `maxAge`       | Set the max-age property of the Cache-Control header in milliseconds or a string in [ms format](https://www.npmjs.org/package/ms).                                                                                                                                                                                                 | Number   | 0            |
    | `redirect`     | Redirect to trailing “/” when the pathname is a directory.                                                                                                                                                                                                                                                                         | Boolean  | `true`       |
    | `setHeaders`   | Function for setting HTTP headers to serve with the file. See [setHeaders](#setHeaders) below.                                                                                                                                                                                                                                     | Function |              |

    For more information, see [Serving static files in Express](https://expressjs.com/starter/static-files.html). and [Using middleware - Built-in middleware](guide/using-middleware#middleware.built-in).

    ##### dotfiles

    Possible values for this option are:

    - “allow” - No special treatment for dotfiles.
    - “deny” - Deny a request for a dotfile, respond with `403`, then call `next()`.
    - “ignore” - Act as if the dotfile does not exist, respond with `404`, then call `next()`.

    **NOTE**: With the default value, it will not ignore files in a directory that begins with a dot.

    ##### fallthrough

    When this option is `true`, client errors such as a bad request or a request to a non-existent file will cause this middleware to simply call `next()` to invoke the next middleware in the stack. When false, these errors (even 404s), will invoke `next(err)`.

    Set this option to `true` so you can map multiple physical directories to the same web address or for routes to fill in non-existent files.

    Use `false` if you have mounted this middleware at a path designed to be strictly a single file system directory, which allows for short-circuiting 404s for less overhead. This middleware will also reply to all methods.

    ##### setHeaders

    For this option, specify a function to set custom response headers. Alterations to the headers must occur synchronously.

    The signature of the function is:

    ``` js
    fn(res, path, stat)
    ```

    Arguments:

    - `res`, the [response object](#res).
    - `path`, the file path that is being sent.
    - `stat`, the `stat` object of the file that is being sent.

    #### Example of express.static

    Here is an example of using the `express.static` middleware function with an elaborate options object:

    ``` js
    var options = {
      dotfiles: 'ignore',
      etag: false,
      extensions: ['htm', 'html'],
      index: false,
      maxAge: '1d',
      redirect: false,
      setHeaders: function (res, path, stat) {
        res.set('x-timestamp', Date.now())
      }
    }

    app.use(express.static('public', options))
    ```
- name: express.text()
  id: index#express.text
  summary: This middleware is available in Express v4.17.0 onwards
  description: |-
    ### express.text(\[options\])

    This middleware is available in Express v4.17.0 onwards.

    This is a built-in middleware function in Express. It parses incoming request payloads into a string and is based on [body-parser](https://expressjs.com/resources/middleware/body-parser.html).

    Returns middleware that parses all bodies as a string and only looks at requests where the `Content-Type` header matches the `type` option. This parser accepts any Unicode encoding of the body and supports automatic inflation of `gzip` and `deflate` encodings.

    A new `body` string containing the parsed data is populated on the `request` object after the middleware (i.e. `req.body`), or an empty object (`{}`) if there was no body to parse, the `Content-Type` was not matched, or an error occurred.

    As `req.body`’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, `req.body.trim()` may fail in multiple ways, for example stacking multiple parsers `req.body` may be from a different parser. Testing that `req.body` is a string before calling string methods is recommended.

    The following table describes the properties of the optional `options` object.

    | Property         | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | Type     | Default        |
    |------------------||----------|----------------|
    | `defaultCharset` | Specify the default character set for the text content if the charset is not specified in the `Content-Type` header of the request.                                                                                                                                                                                                                                                                                                                                                                                     | String   | `"utf-8"`      |
    | `inflate`        | Enables or disables handling deflated (compressed) bodies; when disabled, deflated bodies are rejected.                                                                                                                                                                                                                                                                                                                                                                                                                 | Boolean  | `true`         |
    | `limit`          | Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the [bytes](https://www.npmjs.com/package/bytes) library for parsing.                                                                                                                                                                                                                                                                                              | Mixed    | `"100kb"`      |
    | `type`           | This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, `type` option is passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme) library and this can be an extension name (like `txt`), a mime type (like `text/plain`), or a mime type with a wildcard (like `*/*` or `text/*`). If a function, the `type` option is called as `fn(req)` and the request is parsed if it returns a truthy value. | Mixed    | `"text/plain"` |
    | `verify`         | This option, if supplied, is called as `verify(req, res, buf, encoding)`, where `buf` is a `Buffer` of the raw request body and `encoding` is the encoding of the request. The parsing can be aborted by throwing an error.                                                                                                                                                                                                                                                                                             | Function | `undefined`    |
- name: express.urlencoded()
  id: index#express.urlencoded
  summary: This middleware is available in Express v4.16.0 onwards
  description: |-
    ### express.urlencoded(\[options\])

    This middleware is available in Express v4.16.0 onwards.

    This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on [body-parser](https://expressjs.com/resources/middleware/body-parser.html).

    Returns middleware that only parses urlencoded bodies and only looks at requests where the `Content-Type` header matches the `type` option. This parser accepts only UTF-8 encoding of the body and supports automatic inflation of `gzip` and `deflate` encodings.

    A new `body` object containing the parsed data is populated on the `request` object after the middleware (i.e. `req.body`), or an empty object (`{}`) if there was no body to parse, the `Content-Type` was not matched, or an error occurred. This object will contain key-value pairs, where the value can be a string or array (when `extended` is `false`), or any type (when `extended` is `true`).

    As `req.body`’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, `req.body.foo.toString()` may fail in multiple ways, for example `foo` may not be there or may not be a string, and `toString` may not be a function and instead a string or other user-input.

    The following table describes the properties of the optional `options` object.

    | Property         | Description| Type     | Default                               |
    |------------------||----------|---------------------------------------|
    | `extended`       | This option allows to choose between parsing the URL-encoded data with the `querystring` library (when `false`) or the `qs` library (when `true`). The “extended” syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please [see the qs library](https://www.npmjs.org/package/qs#readme).                                                                                                                                                      | Boolean  | `true`                                |
    | `inflate`        | Enables or disables handling deflated (compressed) bodies; when disabled, deflated bodies are rejected.                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean  | `true`                                |
    | `limit`          | Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the [bytes](https://www.npmjs.com/package/bytes) library for parsing.                                                                                                                                                                                                                                                                                                                                    | Mixed    | `"100kb"`                             |
    | `parameterLimit` | This option controls the maximum number of parameters that are allowed in the URL-encoded data. If a request contains more parameters than this value, an error will be raised.                                                                                                                                                                                                                                                                                                                                                                               | Number   | `1000`                                |
    | `type`           | This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, `type` option is passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme) library and this can be an extension name (like `urlencoded`), a mime type (like `application/x-www-form-urlencoded`), or a mime type with a wildcard (like `*/x-www-form-urlencoded`). If a function, the `type` option is called as `fn(req)` and the request is parsed if it returns a truthy value. | Mixed    | `"application/x-www-form-urlencoded"` |
    | `verify`         | This option, if supplied, is called as `verify(req, res, buf, encoding)`, where `buf` is a `Buffer` of the raw request body and `encoding` is the encoding of the request. The parsing can be aborted by throwing an error.                                                                                                                                                                                                                                                                                                                                   | Function | `undefined`                           |

    ## Application

    The `app` object conventionally denotes the Express application. Create it by calling the top-level `express()` function exported by the Express module:

    ``` js
    var express = require('express')
    var app = express()

    app.get('/', function (req, res) {
      res.send('hello world')
    })

    app.listen(3000)
    ```

    The `app` object has methods for

    - Routing HTTP requests; see for example, [app.METHOD](#app.METHOD) and [app.param](#app.param).
    - Configuring middleware; see [app.route](#app.route).
    - Rendering HTML views; see [app.render](#app.render).
    - Registering a template engine; see [app.engine](#app.engine).

    It also has settings (properties) that affect how the application behaves; for more information, see [Application settings](#app.settings.table).

    The Express application object can be referred from the [request object](#req) and the [response object](#res) as `req.app`, and `res.app`, respectively.

    ### Properties
- name: req.accepts()
  id: index#req.accepts
  summary: Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field
  description: |-
    ### req.accepts(types)

    Checks if the specified content types are acceptable, based on the request’s `Accept` HTTP header field. The method returns the best match, or if none of the specified content types is acceptable, returns `false` (in which case, the application should respond with `406 "Not Acceptable"`).

    The `type` value may be a single MIME type string (such as “application/json”), an extension name such as “json”, a comma-delimited list, or an array. For a list or array, the method returns the *best* match (if any).

    ``` js
    // Accept: text/html
    req.accepts('html')
    // => "html"

    // Accept: text/*, application/json
    req.accepts('html')
    // => "html"
    req.accepts('text/html')
    // => "text/html"
    req.accepts(['json', 'text'])
    // => "json"
    req.accepts('application/json')
    // => "application/json"

    // Accept: text/*, application/json
    req.accepts('image/png')
    req.accepts('png')
    // => false

    // Accept: text/*;q=.5, application/json
    req.accepts(['html', 'json'])
    // => "json"
    ```

    For more information, or if you have issues or concerns, see [accepts](https://github.com/expressjs/accepts).
- name: req.acceptsCharsets()
  id: index#req.acceptsCharsets
  summary: Returns the first accepted charset of the specified character sets, based on the request’s Accept-Charset HTTP header field
  description: |-
    ### req.acceptsCharsets(charset \[, ...\])

    Returns the first accepted charset of the specified character sets, based on the request’s `Accept-Charset` HTTP header field. If none of the specified charsets is accepted, returns `false`.

    For more information, or if you have issues or concerns, see [accepts](https://github.com/expressjs/accepts).
- name: req.acceptsEncodings()
  id: index#req.acceptsEncodings
  summary: Returns the first accepted encoding of the specified encodings, based on the request’s Accept-Encoding HTTP header field
  description: |-
    ### req.acceptsEncodings(encoding \[, ...\])

    Returns the first accepted encoding of the specified encodings, based on the request’s `Accept-Encoding` HTTP header field. If none of the specified encodings is accepted, returns `false`.

    For more information, or if you have issues or concerns, see [accepts](https://github.com/expressjs/accepts).
- name: req.acceptsLanguages()
  id: index#req.acceptsLanguages
  summary: Returns the first accepted language of the specified languages, based on the request’s Accept-Language HTTP header field
  description: |-
    ### req.acceptsLanguages(lang \[, ...\])

    Returns the first accepted language of the specified languages, based on the request’s `Accept-Language` HTTP header field. If none of the specified languages is accepted, returns `false`.

    For more information, or if you have issues or concerns, see [accepts](https://github.com/expressjs/accepts).
- name: req.app
  id: index#req.app
  summary: This property holds a reference to the instance of the Express application that is using the middleware
  description: |-
    ### req.app

    This property holds a reference to the instance of the Express application that is using the middleware.

    If you follow the pattern in which you create a module that just exports a middleware function and `require()` it in your main file, then the middleware can access the Express instance via `req.app`

    For example:

    ``` js
    // index.js
    app.get('/viewdirectory', require('./mymiddleware.js'))
    ```

    ``` js
    // mymiddleware.js
    module.exports = function (req, res) {
      res.send('The views directory is ' + req.app.get('views'))
    }
    ```
- name: req.baseUrl
  id: index#req.baseUrl
  summary: The URL path on which a router instance was mounted
  description: |-
    ### req.baseUrl

    The URL path on which a router instance was mounted.

    The `req.baseUrl` property is similar to the [mountpath](#app.mountpath) property of the `app` object, except `app.mountpath` returns the matched path pattern(s).

    For example:

    ``` js
    var greet = express.Router()

    greet.get('/jp', function (req, res) {
      console.log(req.baseUrl) // /greet
      res.send('Konichiwa!')
    })

    app.use('/greet', greet) // load the router on '/greet'
    ```

    Even if you use a path pattern or a set of path patterns to load the router, the `baseUrl` property returns the matched string, not the pattern(s). In the following example, the `greet` router is loaded on two path patterns.

    ``` js
    app.use(['/gre+t', '/hel{2}o'], greet) // load the router on '/gre+t' and '/hel{2}o'
    ```

    When a request is made to `/greet/jp`, `req.baseUrl` is “/greet”. When a request is made to `/hello/jp`, `req.baseUrl` is “/hello”.
- name: req.body
  id: index#req.body
  summary: Contains key-value pairs of data submitted in the request body
  description: |-
    ### req.body

    Contains key-value pairs of data submitted in the request body. By default, it is `undefined`, and is populated when you use body-parsing middleware such as [`express.json()`](#express.json) or [`express.urlencoded()`](#express.urlencoded).

    As `req.body`’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, `req.body.foo.toString()` may fail in multiple ways, for example `foo` may not be there or may not be a string, and `toString` may not be a function and instead a string or other user-input.

    The following example shows how to use body-parsing middleware to populate `req.body`.

    ``` js
    var express = require('express')

    var app = express()

    app.use(express.json()) // for parsing application/json
    app.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded

    app.post('/profile', function (req, res, next) {
      console.log(req.body)
      res.json(req.body)
    })
    ```
- name: req.cookies
  id: index#req.cookies
  summary: When using cookie-parser middleware, this property is an object that contains cookies sent by the request
  description: |-
    ### req.cookies

    When using [cookie-parser](https://www.npmjs.com/package/cookie-parser) middleware, this property is an object that contains cookies sent by the request. If the request contains no cookies, it defaults to `{}`.

    ``` js
    // Cookie: name=tj
    console.dir(req.cookies.name)
    // => 'tj'
    ```

    If the cookie has been signed, you have to use [req.signedCookies](#req.signedCookies).

    For more information, issues, or concerns, see [cookie-parser](https://github.com/expressjs/cookie-parser).
- name: req.fresh
  id: index#req.fresh
  summary: When the response is still “fresh” in the client’s cache true is returned, otherwise false is returned to indicate that the client cache is now stale and the full response should be sent
  description: |-
    ### req.fresh

    When the response is still “fresh” in the client’s cache `true` is returned, otherwise `false` is returned to indicate that the client cache is now stale and the full response should be sent.

    When a client sends the `Cache-Control: no-cache` request header to indicate an end-to-end reload request, this module will return `false` to make handling these requests transparent.

    Further details for how cache validation works can be found in the [HTTP/1.1 Caching Specification](https://tools.ietf.org/html/rfc7234).

    ``` js
    console.dir(req.fresh)
    // => true
    ```
- name: req.get()
  id: index#req.get
  summary: Returns the specified HTTP request header field (case-insensitive match)
  description: |-
    ### req.get(field)

    Returns the specified HTTP request header field (case-insensitive match). The `Referrer` and `Referer` fields are interchangeable.

    ``` js
    req.get('Content-Type')
    // => "text/plain"

    req.get('content-type')
    // => "text/plain"

    req.get('Something')
    // => undefined
    ```

    Aliased as `req.header(field)`.
- name: req.hostname
  id: index#req.hostname
  summary: Contains the hostname derived from the Host HTTP header
  description: |-
    ### req.hostname

    Contains the hostname derived from the `Host` HTTP header.

    When the [`trust proxy` setting](https://expressjs.com/index.html#trust.proxy.options.table) does not evaluate to `false`, this property will instead get the value from the `X-Forwarded-Host` header field. This header can be set by the client or by the proxy.

    If there is more than one `X-Forwarded-Host` header in the request, the value of the first header is used. This includes a single header with comma-separated values, in which the first value is used.

    Prior to Express v4.17.0, the `X-Forwarded-Host` could not contain multiple values or be present more than once.

    ``` js
    // Host: "example.com:3000"
    console.dir(req.hostname)
    // => 'example.com'
    ```
- name: req.ip
  id: index#req.ip
  summary: Contains the remote IP address of the request
  description: |-
    ### req.ip

    Contains the remote IP address of the request.

    When the [`trust proxy` setting](https://expressjs.com/index.html#trust.proxy.options.table) does not evaluate to `false`, the value of this property is derived from the left-most entry in the `X-Forwarded-For` header. This header can be set by the client or by the proxy.

    ``` js
    console.dir(req.ip)
    // => '127.0.0.1'
    ```
- name: req.ips
  id: index#req.ips
  summary: When the trust proxy setting does not evaluate to false, this property contains an array of IP addresses specified in the X-Forwarded-For request header
  description: |-
    ### req.ips

    When the [`trust proxy` setting](https://expressjs.com/index.html#trust.proxy.options.table) does not evaluate to `false`, this property contains an array of IP addresses specified in the `X-Forwarded-For` request header. Otherwise, it contains an empty array. This header can be set by the client or by the proxy.

    For example, if `X-Forwarded-For` is `client, proxy1, proxy2`, `req.ips` would be `["client", "proxy1", "proxy2"]`, where `proxy2` is the furthest downstream.
- name: req.is()
  id: index#req.is
  summary: Returns the matching content type if the incoming request’s “Content-Type” HTTP header field matches the MIME type specified by the type parameter
  description: |-
    ### req.is(type)

    Returns the matching content type if the incoming request’s “Content-Type” HTTP header field matches the MIME type specified by the `type` parameter. If the request has no body, returns `null`. Returns `false` otherwise.

    ``` js
    // With Content-Type: text/html; charset=utf-8
    req.is('html')
    // => 'html'
    req.is('text/html')
    // => 'text/html'
    req.is('text/*')
    // => 'text/*'

    // When Content-Type is application/json
    req.is('json')
    // => 'json'
    req.is('application/json')
    // => 'application/json'
    req.is('application/*')
    // => 'application/*'

    req.is('html')
    // => false
    ```

    For more information, or if you have issues or concerns, see [type-is](https://github.com/expressjs/type-is).
- name: req.method
  id: index#req.method
  summary: 'Contains a string corresponding to the HTTP method of the request: GET, POST, PUT, and so on'
  description: |-
    ### req.method

    Contains a string corresponding to the HTTP method of the request: `GET`, `POST`, `PUT`, and so on.
- name: req.originalUrl
  id: index#req.originalUrl
  summary: req.url is not a native Express property, it is inherited from Node’s http module
  description: |-
    ### req.originalUrl

    `req.url` is not a native Express property, it is inherited from Node’s [http module](https://nodejs.org/api/http.html#http_message_url).

    This property is much like `req.url`; however, it retains the original request URL, allowing you to rewrite `req.url` freely for internal routing purposes. For example, the “mounting” feature of [app.use()](#app.use) will rewrite `req.url` to strip the mount point.

    ``` js
    // GET /search?q=something
    console.dir(req.originalUrl)
    // => '/search?q=something'
    ```

    `req.originalUrl` is available both in middleware and router objects, and is a combination of `req.baseUrl` and `req.url`. Consider following example:

    ``` js
    app.use('/admin', function (req, res, next) { // GET 'http://www.example.com/admin/new?sort=desc'
      console.dir(req.originalUrl) // '/admin/new?sort=desc'
      console.dir(req.baseUrl) // '/admin'
      console.dir(req.path) // '/new'
      next()
    })
    ```
- name: req.param()
  id: index#req.param
  summary: Deprecated
  description: |-
    ### req.param(name \[, defaultValue\])

    Deprecated. Use either `req.params`, `req.body` or `req.query`, as applicable.

    Returns the value of param `name` when present.

    ``` js
    // ?name=tobi
    req.param('name')
    // => "tobi"

    // POST name=tobi
    req.param('name')
    // => "tobi"

    // /user/tobi for /user/:name
    req.param('name')
    // => "tobi"
    ```

    Lookup is performed in the following order:

    - `req.params`
    - `req.body`
    - `req.query`

    Optionally, you can specify `defaultValue` to set a default value if the parameter is not found in any of the request objects.

    Direct access to `req.body`, `req.params`, and `req.query` should be favoured for clarity - unless you truly accept input from each object.

    Body-parsing middleware must be loaded for `req.param()` to work predictably. Refer [req.body](#req.body) for details.
- name: req.params
  id: index#req.params
  summary: This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name
  description: |-
    ### req.params

    This property is an object containing properties mapped to the [named route “parameters”](guide/routing#route-parameters). For example, if you have the route `/user/:name`, then the “name” property is available as `req.params.name`. This object defaults to `{}`.

    ``` js
    // GET /user/tj
    console.dir(req.params.name)
    // => 'tj'
    ```

    When you use a regular expression for the route definition, capture groups are provided in the array using `req.params[n]`, where `n` is the n^(th) capture group. This rule is applied to unnamed wild card matches with string routes such as `/file/*`:

    ``` js
    // GET /file/javascripts/jquery.js
    console.dir(req.params[0])
    // => 'javascripts/jquery.js'
    ```

    If you need to make changes to a key in `req.params`, use the [app.param](index#app.param) handler. Changes are applicable only to [parameters](guide/routing#route-parameters) already defined in the route path.

    Any changes made to the `req.params` object in a middleware or route handler will be reset.

    NOTE: Express automatically decodes the values in `req.params` (using `decodeURIComponent`).
- name: req.path
  id: index#req.path
  summary: Contains the path part of the request URL
  description: |-
    ### req.path

    Contains the path part of the request URL.

    ``` js
    // example.com/users?sort=desc
    console.dir(req.path)
    // => '/users'
    ```

    When called from a middleware, the mount point is not included in `req.path`. See [app.use()](https://expressjs.com/index.html#app.use) for more details.
- name: req.protocol
  id: index#req.protocol
  summary: 'Contains the request protocol string: either http or (for TLS requests) https'
  description: |-
    ### req.protocol

    Contains the request protocol string: either `http` or (for TLS requests) `https`.

    When the [`trust proxy` setting](#trust.proxy.options.table) does not evaluate to `false`, this property will use the value of the `X-Forwarded-Proto` header field if present. This header can be set by the client or by the proxy.

    ``` js
    console.dir(req.protocol)
    // => 'http'
    ```
- name: req.query
  id: index#req.query
  summary: This property is an object containing a property for each query string parameter in the route
  description: |-
    ### req.query

    This property is an object containing a property for each query string parameter in the route. When [query parser](#app.settings.table) is set to disabled, it is an empty object `{}`, otherwise it is the result of the configured query parser.

    As `req.query`’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, `req.query.foo.toString()` may fail in multiple ways, for example `foo` may not be there or may not be a string, and `toString` may not be a function and instead a string or other user-input.

    The value of this property can be configured with the [query parser application setting](#app.settings.table) to work how your application needs it. A very popular query string parser is the [`qs` module](https://www.npmjs.org/package/qs), and this is used by default. The `qs` module is very configurable with many settings, and it may be desirable to use different settings than the default to populate `req.query`:

    ``` js
    var qs = require('qs')
    app.setting('query parser', function (str) {
      return qs.parse(str, { /* custom options */ })
    })
    ```

    Check out the [query parser application setting](#app.settings.table) documentation for other customization options.
- name: req.range()
  id: index#req.range
  summary: Range header parser
  description: |-
    ### req.range(size\[, options\])

    `Range` header parser.

    The `size` parameter is the maximum size of the resource.

    The `options` parameter is an object that can have the following properties.

    | Property  | Type    | Description                                                                                                                                                                           |
    |-----------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `combine` | Boolean | Specify if overlapping & adjacent ranges should be combined, defaults to `false`. When `true`, ranges will be combined and returned as if they were specified that way in the header. |

    An array of ranges will be returned or negative numbers indicating an error parsing.

    - `-2` signals a malformed header string
    - `-1` signals an unsatisfiable range

    ``` js
    // parse header from request
    var range = req.range(1000)

    // the type of the range
    if (range.type === 'bytes') {
      // the ranges
      range.forEach(function (r) {
        // do something with r.start and r.end
      })
    }
    ```

    ## Response

    The `res` object represents the HTTP response that an Express app sends when it gets an HTTP request.

    In this documentation and by convention, the object is always referred to as `res` (and the HTTP request is `req`) but its actual name is determined by the parameters to the callback function in which you’re working.

    For example:

    ``` js
    app.get('/user/:id', function (req, res) {
      res.send('user ' + req.params.id)
    })
    ```

    But you could just as well have:

    ``` js
    app.get('/user/:id', function (request, response) {
      response.send('user ' + request.params.id)
    })
    ```

    The `res` object is an enhanced version of Node’s own response object and supports all [built-in fields and methods](https://nodejs.org/api/http.html#http_class_http_serverresponse).

    ### Properties
- name: req.res
  id: index#req.res
  summary: This property holds a reference to the response object that relates to this request object
  description: |-
    ### req.res

    This property holds a reference to the [response object](#res) that relates to this request object.
- name: req.route
  id: index#req.route
  summary: Contains the currently-matched route, a string
  description: |-
    ### req.route

    Contains the currently-matched route, a string. For example:

    ``` js
    app.get('/user/:id?', function userIdHandler (req, res) {
      console.log(req.route)
      res.send('GET')
    })
    ```

    Example output from the previous snippet:

        { path: '/user/:id?',
          stack:
           [ { handle: [Function: userIdHandler],
               name: 'userIdHandler',
               params: undefined,
               path: undefined,
               keys: [],
               regexp: /^\/?$/i,
               method: 'get' } ],
          methods: { get: true } }
- name: req.secure
  id: index#req.secure
  summary: A Boolean property that is true if a TLS connection is established
  description: |-
    ### req.secure

    A Boolean property that is true if a TLS connection is established. Equivalent to:

    ``` js
    console.dir(req.protocol === 'https')
    // => true
    ```
- name: req.signedCookies
  id: index#req.signedCookies
  summary: When using cookie-parser middleware, this property contains signed cookies sent by the request, unsigned and ready for use
  description: |-
    ### req.signedCookies

    When using [cookie-parser](https://www.npmjs.com/package/cookie-parser) middleware, this property contains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside in a different object to show developer intent; otherwise, a malicious attack could be placed on `req.cookie` values (which are easy to spoof). Note that signing a cookie does not make it “hidden” or encrypted; but simply prevents tampering (because the secret used to sign is private).

    If no signed cookies are sent, the property defaults to `{}`.

    ``` js
    // Cookie: user=tobi.CP7AWaXDfAKIRfH49dQzKJx7sKzzSoPq7/AcBBRVwlI3
    console.dir(req.signedCookies.user)
    // => 'tobi'
    ```

    For more information, issues, or concerns, see [cookie-parser](https://github.com/expressjs/cookie-parser).
- name: req.stale
  id: index#req.stale
  summary: Indicates whether the request is “stale,” and is the opposite of req.fresh
  description: |-
    ### req.stale

    Indicates whether the request is “stale,” and is the opposite of `req.fresh`. For more information, see [req.fresh](#req.fresh).

    ``` js
    console.dir(req.stale)
    // => true
    ```
- name: req.subdomains
  id: index#req.subdomains
  summary: An array of subdomains in the domain name of the request
  description: |-
    ### req.subdomains

    An array of subdomains in the domain name of the request.

    ``` js
    // Host: "tobi.ferrets.example.com"
    console.dir(req.subdomains)
    // => ['ferrets', 'tobi']
    ```

    The application property `subdomain offset`, which defaults to 2, is used for determining the beginning of the subdomain segments. To change this behavior, change its value using [app.set](index#app.set).
- name: req.xhr
  id: index#req.xhr
  summary: A Boolean property that is true if the request’s X-Requested-With header field is “XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery
  description: |-
    ### req.xhr

    A Boolean property that is `true` if the request’s `X-Requested-With` header field is “XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery.

    ``` js
    console.dir(req.xhr)
    // => true
    ```

    ### Methods
- name: res.app
  id: index#res.app
  summary: This property holds a reference to the instance of the Express application that is using the middleware
  description: |-
    ### res.app

    This property holds a reference to the instance of the Express application that is using the middleware.

    `res.app` is identical to the [req.app](#req.app) property in the request object.
- name: res.append()
  id: index#res.append
  summary: Appends the specified value to the HTTP response header field
  description: |-
    ### res.append(field \[, value\])

    `res.append()` is supported by Express v4.11.0+

    Appends the specified `value` to the HTTP response header `field`. If the header is not already set, it creates the header with the specified value. The `value` parameter can be a string or an array.

    Note: calling `res.set()` after `res.append()` will reset the previously-set header value.

    ``` js
    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>'])
    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly')
    res.append('Warning', '199 Miscellaneous warning')
    ```
- name: res.attachment()
  id: index#res.attachment
  summary: Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given, then it sets the Content-Type based on the extension name via res.type(), and sets the Content-Disposition “filename=” parameter
  description: |-
    ### res.attachment(\[filename\])

    Sets the HTTP response `Content-Disposition` header field to “attachment”. If a `filename` is given, then it sets the Content-Type based on the extension name via `res.type()`, and sets the `Content-Disposition` “filename=” parameter.

    ``` js
    res.attachment()
    // Content-Disposition: attachment

    res.attachment('path/to/logo.png')
    // Content-Disposition: attachment; filename="logo.png"
    // Content-Type: image/png
    ```
- name: res.clearCookie()
  id: index#res.clearCookie
  summary: Clears the cookie specified by name
  description: |-
    ### res.clearCookie(name \[, options\])

    Clears the cookie specified by `name`. For details about the `options` object, see [res.cookie()](#res.cookie).

    Web browsers and other compliant clients will only clear the cookie if the given `options` is identical to those given to [res.cookie()](#res.cookie), excluding `expires` and `maxAge`.

    ``` js
    res.cookie('name', 'tobi', { path: '/admin' })
    res.clearCookie('name', { path: '/admin' })
    ```
- name: res.cookie()
  id: index#res.cookie
  summary: Sets cookie name to value
  description: |-
    ### res.cookie(name, value \[, options\])

    Sets cookie `name` to `value`. The `value` parameter may be a string or object converted to JSON.

    The `options` parameter is an object that can have the following properties.

    | Property   | Type              | Description                                                                                                                                               |
    |------------|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `domain`   | String            | Domain name for the cookie. Defaults to the domain name of the app.                                                                                       |
    | `encode`   | Function          | A synchronous function used for cookie value encoding. Defaults to `encodeURIComponent`.                                                                  |
    | `expires`  | Date              | Expiry date of the cookie in GMT. If not specified or set to 0, creates a session cookie.                                                                 |
    | `httpOnly` | Boolean           | Flags the cookie to be accessible only by the web server.                                                                                                 |
    | `maxAge`   | Number            | Convenient option for setting the expiry time relative to the current time in milliseconds.                                                               |
    | `path`     | String            | Path for the cookie. Defaults to “/”.                                                                                                                     |
    | `priority` | String            | Value of the “Priority” **Set-Cookie** attribute.                                                                                                         |
    | `secure`   | Boolean           | Marks the cookie to be used with HTTPS only.                                                                                                              |
    | `signed`   | Boolean           | Indicates if the cookie should be signed.                                                                                                                 |
    | `sameSite` | Boolean or String | Value of the “SameSite” **Set-Cookie** attribute. More information at <https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1>. |

    All `res.cookie()` does is set the HTTP `Set-Cookie` header with the options provided. Any option not specified defaults to the value stated in [RFC 6265](http://tools.ietf.org/html/rfc6265).

    For example:

    ``` js
    res.cookie('name', 'tobi', { domain: '.example.com', path: '/admin', secure: true })
    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true })
    ```

    You can set multiple cookies in a single response by calling `res.cookie` multiple times, for example:

    ``` js
    res
      .status(201)
      .cookie('access_token', 'Bearer ' + token, {
        expires: new Date(Date.now() + 8 * 3600000) // cookie will be removed after 8 hours
      })
      .cookie('test', 'test')
      .redirect(301, '/admin')
    ```

    The `encode` option allows you to choose the function used for cookie value encoding. Does not support asynchronous functions.

    Example use case: You need to set a domain-wide cookie for another site in your organization. This other site (not under your administrative control) does not use URI-encoded cookie values.

    ``` js
    // Default encoding
    res.cookie('some_cross_domain_cookie', 'http://mysubdomain.example.com', { domain: 'example.com' })
    // Result: 'some_cross_domain_cookie=http%3A%2F%2Fmysubdomain.example.com; Domain=example.com; Path=/'

    // Custom encoding
    res.cookie('some_cross_domain_cookie', 'http://mysubdomain.example.com', { domain: 'example.com', encode: String })
    // Result: 'some_cross_domain_cookie=http://mysubdomain.example.com; Domain=example.com; Path=/;'
    ```

    The `maxAge` option is a convenience option for setting “expires” relative to the current time in milliseconds. The following is equivalent to the second example above.

    ``` js
    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })
    ```

    You can pass an object as the `value` parameter; it is then serialized as JSON and parsed by `bodyParser()` middleware.

    ``` js
    res.cookie('cart', { items: [1, 2, 3] })
    res.cookie('cart', { items: [1, 2, 3] }, { maxAge: 900000 })
    ```

    When using [cookie-parser](https://www.npmjs.com/package/cookie-parser) middleware, this method also supports signed cookies. Simply include the `signed` option set to `true`. Then `res.cookie()` will use the secret passed to `cookieParser(secret)` to sign the value.

    ``` js
    res.cookie('name', 'tobi', { signed: true })
    ```

    Later you may access this value through the [req.signedCookie](#req.signedCookies) object.
- name: res.download()
  id: index#res.download
  summary: Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download
  description: |-
    ### res.download(path \[, filename\] \[, options\] \[, fn\])

    Transfers the file at `path` as an “attachment”. Typically, browsers will prompt the user for download. By default, the `Content-Disposition` header “filename=” parameter is derrived from the `path` argument, but can be overridden with the `filename` parameter. If `path` is relative, then it will be based on the current working directory of the process or the `root` option, if provided.

    This API provides access to data on the running file system. Ensure that either (a) the way in which the `path` argument was constructed is secure if it contains user input or (b) set the `root` option to the absolute path of a directory to contain access within.

    When the `root` option is provided, Express will validate that the relative path provided as `path` will resolve within the given `root` option.

    The following table provides details on the `options` parameter.

    The optional `options` argument is supported by Express v4.16.0 onwards.

    | Property       | Description                                                                                                                                                                                                                                                                                                                        | Default  | Availability |
    |----------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|--------------|
    | `maxAge`       | Sets the max-age property of the `Cache-Control` header in milliseconds or a string in [ms format](https://www.npmjs.org/package/ms)                                                                                                                                                                                               | 0        | 4.16+        |
    | `root`         | Root directory for relative filenames.                                                                                                                                                                                                                                                                                             |          | 4.18+        |
    | `lastModified` | Sets the `Last-Modified` header to the last modified date of the file on the OS. Set `false` to disable it.                                                                                                                                                                                                                        | Enabled  | 4.16+        |
    | `headers`      | Object containing HTTP headers to serve with the file. The header `Content-Disposition` will be overriden by the `filename` argument.                                                                                                                                                                                              |          | 4.16+        |
    | `dotfiles`     | Option for serving dotfiles. Possible values are “allow”, “deny”, “ignore”.                                                                                                                                                                                                                                                        | “ignore” | 4.16+        |
    | `acceptRanges` | Enable or disable accepting ranged requests.                                                                                                                                                                                                                                                                                       | `true`   | 4.16+        |
    | `cacheControl` | Enable or disable setting `Cache-Control` response header.                                                                                                                                                                                                                                                                         | `true`   | 4.16+        |
    | `immutable`    | Enable or disable the `immutable` directive in the `Cache-Control` response header. If enabled, the `maxAge` option should also be specified to enable caching. The `immutable` directive will prevent supported clients from making conditional requests during the life of the `maxAge` option to check if the file has changed. | `false`  | 4.16+        |

    The method invokes the callback function `fn(err)` when the transfer is complete or when an error occurs. If the callback function is specified and an error occurs, the callback function must explicitly handle the response process either by ending the request-response cycle, or by passing control to the next route.

    ``` js
    res.download('/report-12345.pdf')

    res.download('/report-12345.pdf', 'report.pdf')

    res.download('/report-12345.pdf', 'report.pdf', function (err) {
      if (err) {
        // Handle error, but keep in mind the response may be partially-sent
        // so check res.headersSent
      } else {
        // decrement a download credit, etc.
      }
    })
    ```
- name: res.end()
  id: index#res.end
  summary: Ends the response process
  description: |-
    ### res.end(\[data\] \[, encoding\])

    Ends the response process. This method actually comes from Node core, specifically the [response.end() method of http.ServerResponse](https://nodejs.org/api/http.html#http_response_end_data_encoding_callback).

    Use to quickly end the response without any data. If you need to respond with data, instead use methods such as [res.send()](#res.send) and [res.json()](#res.json).

    ``` js
    res.end()
    res.status(404).end()
    ```
- name: res.format()
  id: index#res.format
  summary: Performs content-negotiation on the Accept HTTP header on the request object, when present
  description: |-
    ### res.format(object)

    Performs content-negotiation on the `Accept` HTTP header on the request object, when present. It uses [req.accepts()](#req.accepts) to select a handler for the request, based on the acceptable types ordered by their quality values. If the header is not specified, the first callback is invoked. When no match is found, the server responds with 406 “Not Acceptable”, or invokes the `default` callback.

    The `Content-Type` response header is set when a callback is selected. However, you may alter this within the callback using methods such as `res.set()` or `res.type()`.

    The following example would respond with `{ "message": "hey" }` when the `Accept` header field is set to “application/json” or “\*/json” (however if it is “\*/\*”, then the response will be “hey”).

    ``` js
    res.format({
      'text/plain': function () {
        res.send('hey')
      },

      'text/html': function () {
        res.send('<p>hey</p>')
      },

      'application/json': function () {
        res.send({ message: 'hey' })
      },

      default: function () {
        // log the request and respond with 406
        res.status(406).send('Not Acceptable')
      }
    })
    ```

    In addition to canonicalized MIME types, you may also use extension names mapped to these types for a slightly less verbose implementation:

    ``` js
    res.format({
      text: function () {
        res.send('hey')
      },

      html: function () {
        res.send('<p>hey</p>')
      },

      json: function () {
        res.send({ message: 'hey' })
      }
    })
    ```
- name: res.get()
  id: index#res.get
  summary: Returns the HTTP response header specified by field
  description: |-
    ### res.get(field)

    Returns the HTTP response header specified by `field`. The match is case-insensitive.

    ``` js
    res.get('Content-Type')
    // => "text/plain"
    ```
- name: res.headersSent
  id: index#res.headersSent
  summary: Boolean property that indicates if the app sent HTTP headers for the response
  description: |-
    ### res.headersSent

    Boolean property that indicates if the app sent HTTP headers for the response.

    ``` js
    app.get('/', function (req, res) {
      console.dir(res.headersSent) // false
      res.send('OK')
      console.dir(res.headersSent) // true
    })
    ```
- name: res.json()
  id: index#res.json
  summary: Sends a JSON response
  description: |-
    ### res.json(\[body\])

    Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a JSON string using [JSON.stringify()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).

    The parameter can be any JSON type, including object, array, string, Boolean, number, or null, and you can also use it to convert other values to JSON.

    ``` js
    res.json(null)
    res.json({ user: 'tobi' })
    res.status(500).json({ error: 'message' })
    ```
- name: res.jsonp()
  id: index#res.jsonp
  summary: Sends a JSON response with JSONP support
  description: |-
    ### res.jsonp(\[body\])

    Sends a JSON response with JSONP support. This method is identical to `res.json()`, except that it opts-in to JSONP callback support.

    ``` js
    res.jsonp(null)
    // => callback(null)

    res.jsonp({ user: 'tobi' })
    // => callback({ "user": "tobi" })

    res.status(500).jsonp({ error: 'message' })
    // => callback({ "error": "message" })
    ```

    By default, the JSONP callback name is simply `callback`. Override this with the [jsonp callback name](#app.settings.table) setting.

    The following are some examples of JSONP responses using the same code:

    ``` js
    // ?callback=foo
    res.jsonp({ user: 'tobi' })
    // => foo({ "user": "tobi" })

    app.set('jsonp callback name', 'cb')

    // ?cb=foo
    res.status(500).jsonp({ error: 'message' })
    // => foo({ "error": "message" })
    ```
- name: res.links()
  id: index#res.links
  summary: Joins the links provided as properties of the parameter to populate the response’s Link HTTP header field
  description: |-
    ### res.links(links)

    Joins the `links` provided as properties of the parameter to populate the response’s `Link` HTTP header field.

    For example, the following call:

    ``` js
    res.links({
      next: 'http://api.example.com/users?page=2',
      last: 'http://api.example.com/users?page=5'
    })
    ```

    Yields the following results:

        Link: <http://api.example.com/users?page=2>; rel="next",
              <http://api.example.com/users?page=5>; rel="last"
- name: res.locals
  id: index#res.locals
  summary: Use this property to set variables accessible in templates rendered with res.render
  description: |-
    ### res.locals

    Use this property to set variables accessible in templates rendered with [res.render](#res.render). The variables set on `res.locals` are available within a single request-response cycle, and will not be shared between requests.

    In order to keep local variables for use in template rendering between requests, use [app.locals](#app.locals) instead.

    This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on to templates rendered within the application.

    ``` js
    app.use(function (req, res, next) {
      // Make `user` and `authenticated` available in templates
      res.locals.user = req.user
      res.locals.authenticated = !req.user.anonymous
      next()
    })
    ```

    ### Methods
- name: res.location()
  id: index#res.location
  summary: Sets the response Location HTTP header to the specified path parameter
  description: |-
    ### res.location(path)

    Sets the response `Location` HTTP header to the specified `path` parameter.

    ``` js
    res.location('/foo/bar')
    res.location('http://example.com')
    res.location('back')
    ```

    A `path` value of “back” has a special meaning, it refers to the URL specified in the `Referer` header of the request. If the `Referer` header was not specified, it refers to “/”.

    After encoding the URL, if not encoded already, Express passes the specified URL to the browser in the `Location` header, without any validation.

    Browsers take the responsibility of deriving the intended URL from the current URL or the referring URL, and the URL specified in the `Location` header; and redirect the user accordingly.
- name: res.redirect()
  id: index#res.redirect
  summary: Redirects can be relative to the root of the host name
  description: |-
    ### res.redirect(\[status,\] path)

    Redirects to the URL derived from the specified `path`, with specified `status`, a positive integer that corresponds to an [HTTP status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) . If not specified, `status` defaults to “302 “Found”.

    ``` js
    res.redirect('/foo/bar')
    res.redirect('http://example.com')
    res.redirect(301, 'http://example.com')
    res.redirect('../login')
    ```

    Redirects can be a fully-qualified URL for redirecting to a different site:

    ``` js
    res.redirect('http://google.com')
    ```

    Redirects can be relative to the root of the host name. For example, if the application is on `http://example.com/admin/post/new`, the following would redirect to the URL `http://example.com/admin`:

    ``` js
    res.redirect('/admin')
    ```

    Redirects can be relative to the current URL. For example, from `http://example.com/blog/admin/` (notice the trailing slash), the following would redirect to the URL `http://example.com/blog/admin/post/new`.

    ``` js
    res.redirect('post/new')
    ```

    Redirecting to `post/new` from `http://example.com/blog/admin` (no trailing slash), will redirect to `http://example.com/blog/post/new`.

    If you found the above behavior confusing, think of path segments as directories (with trailing slashes) and files, it will start to make sense.

    Path-relative redirects are also possible. If you were on `http://example.com/admin/post/new`, the following would redirect to `http://example.com/admin/post`:

    ``` js
    res.redirect('..')
    ```

    A `back` redirection redirects the request back to the [referer](http://en.wikipedia.org/wiki/HTTP_referer), defaulting to `/` when the referer is missing.

    ``` js
    res.redirect('back')
    ```
- name: res.render()
  id: index#res.render
  summary: Renders a view and sends the rendered HTML string to the client
  description: |-
    ### res.render(view \[, locals\] \[, callback\])

    Renders a `view` and sends the rendered HTML string to the client. Optional parameters:

    - `locals`, an object whose properties define local variables for the view.
    - `callback`, a callback function. If provided, the method returns both the possible error and rendered string, but does not perform an automated response. When an error occurs, the method invokes `next(err)` internally.

    The `view` argument is a string that is the file path of the view file to render. This can be an absolute path, or a path relative to the `views` setting. If the path does not contain a file extension, then the `view engine` setting determines the file extension. If the path does contain a file extension, then Express will load the module for the specified template engine (via `require()`) and render it using the loaded module’s `__express` function.

    For more information, see [Using template engines with Express](https://expressjs.com/guide/using-template-engines.html).

    **NOTE:** The `view` argument performs file system operations like reading a file from disk and evaluating Node.js modules, and as so for security reasons should not contain input from the end-user.

    The local variable `cache` enables view caching. Set it to `true`, to cache the view during development; view caching is enabled in production by default.

    ``` js
    // send the rendered view to the client
    res.render('index')

    // if a callback is specified, the rendered HTML string has to be sent explicitly
    res.render('index', function (err, html) {
      res.send(html)
    })

    // pass a local variable to the view
    res.render('user', { name: 'Tobi' }, function (err, html) {
      // ...
    })
    ```
- name: res.req
  id: index#res.req
  summary: This property holds a reference to the request object that relates to this response object
  description: |-
    ### res.req

    This property holds a reference to the [request object](#req) that relates to this response object.
- name: res.send()
  id: index#res.send
  summary: Sends the HTTP response
  description: |-
    ### res.send(\[body\])

    Sends the HTTP response.

    The `body` parameter can be a `Buffer` object, a `String`, an object, `Boolean`, or an `Array`. For example:

    ``` js
    res.send(Buffer.from('whoop'))
    res.send({ some: 'json' })
    res.send('<p>some html</p>')
    res.status(404).send('Sorry, we cannot find that!')
    res.status(500).send({ error: 'something blew up' })
    ```

    This method performs many useful tasks for simple non-streaming responses: For example, it automatically assigns the `Content-Length` HTTP response header field (unless previously defined) and provides automatic HEAD and HTTP cache freshness support.

    When the parameter is a `Buffer` object, the method sets the `Content-Type` response header field to “application/octet-stream”, unless previously defined as shown below:

    ``` js
    res.set('Content-Type', 'text/html')
    res.send(Buffer.from('<p>some html</p>'))
    ```

    When the parameter is a `String`, the method sets the `Content-Type` to “text/html”:

    ``` js
    res.send('<p>some html</p>')
    ```

    When the parameter is an `Array` or `Object`, Express responds with the JSON representation:

    ``` js
    res.send({ user: 'tobi' })
    res.send([1, 2, 3])
    ```
- name: res.sendFile()
  id: index#res.sendFile
  summary: res.sendFile() is supported by Express v4.8.0 onwards
  description: |-
    ### res.sendFile(path \[, options\] \[, fn\])

    `res.sendFile()` is supported by Express v4.8.0 onwards.

    Transfers the file at the given `path`. Sets the `Content-Type` response HTTP header field based on the filename’s extension. Unless the `root` option is set in the options object, `path` must be an absolute path to the file.

    This API provides access to data on the running file system. Ensure that either (a) the way in which the `path` argument was constructed into an absolute path is secure if it contains user input or (b) set the `root` option to the absolute path of a directory to contain access within.

    When the `root` option is provided, the `path` argument is allowed to be a relative path, including containing `..`. Express will validate that the relative path provided as `path` will resolve within the given `root` option.

    The following table provides details on the `options` parameter.

    | Property       | Description                                                                                                                                                                                                                                                                                                                        | Default  | Availability |
    |----------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|--------------|
    | `maxAge`       | Sets the max-age property of the `Cache-Control` header in milliseconds or a string in [ms format](https://www.npmjs.org/package/ms)                                                                                                                                                                                               | 0        |              |
    | `root`         | Root directory for relative filenames.                                                                                                                                                                                                                                                                                             |          |              |
    | `lastModified` | Sets the `Last-Modified` header to the last modified date of the file on the OS. Set `false` to disable it.                                                                                                                                                                                                                        | Enabled  | 4.9.0+       |
    | `headers`      | Object containing HTTP headers to serve with the file.                                                                                                                                                                                                                                                                             |          |              |
    | `dotfiles`     | Option for serving dotfiles. Possible values are “allow”, “deny”, “ignore”.                                                                                                                                                                                                                                                        | “ignore” |              |
    | `acceptRanges` | Enable or disable accepting ranged requests.                                                                                                                                                                                                                                                                                       | `true`   | 4.14+        |
    | `cacheControl` | Enable or disable setting `Cache-Control` response header.                                                                                                                                                                                                                                                                         | `true`   | 4.14+        |
    | `immutable`    | Enable or disable the `immutable` directive in the `Cache-Control` response header. If enabled, the `maxAge` option should also be specified to enable caching. The `immutable` directive will prevent supported clients from making conditional requests during the life of the `maxAge` option to check if the file has changed. | `false`  | 4.16+        |

    The method invokes the callback function `fn(err)` when the transfer is complete or when an error occurs. If the callback function is specified and an error occurs, the callback function must explicitly handle the response process either by ending the request-response cycle, or by passing control to the next route.

    Here is an example of using `res.sendFile` with all its arguments.

    ``` js
    app.get('/file/:name', function (req, res, next) {
      var options = {
        root: path.join(__dirname, 'public'),
        dotfiles: 'deny',
        headers: {
          'x-timestamp': Date.now(),
          'x-sent': true
        }
      }

      var fileName = req.params.name
      res.sendFile(fileName, options, function (err) {
        if (err) {
          next(err)
        } else {
          console.log('Sent:', fileName)
        }
      })
    })
    ```

    The following example illustrates using `res.sendFile` to provide fine-grained support for serving files:

    ``` js
    app.get('/user/:uid/photos/:file', function (req, res) {
      var uid = req.params.uid
      var file = req.params.file

      req.user.mayViewFilesFrom(uid, function (yes) {
        if (yes) {
          res.sendFile('/uploads/' + uid + '/' + file)
        } else {
          res.status(403).send("Sorry! You can't see that.")
        }
      })
    })
    ```

    For more information, or if you have issues or concerns, see [send](https://github.com/pillarjs/send).
- name: res.sendStatus()
  id: index#res.sendStatus
  summary: Sets the response HTTP status code to statusCode and sends the registered status message as the text response body
  description: |-
    ### res.sendStatus(statusCode)

    Sets the response HTTP status code to `statusCode` and sends the registered status message as the text response body. If an unknown status code is specified, the response body will just be the code number.

    ``` js
    res.sendStatus(404)
    ```

    Some versions of Node.js will throw when `res.statusCode` is set to an invalid HTTP status code (outside of the range `100` to `599`). Consult the HTTP server documentation for the Node.js version being used.

    [More about HTTP Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)
- name: res.set()
  id: index#res.set
  summary: Sets the response’s HTTP header field to value
  description: |-
    ### res.set(field \[, value\])

    Sets the response’s HTTP header `field` to `value`. To set multiple fields at once, pass an object as the parameter.

    ``` js
    res.set('Content-Type', 'text/plain')

    res.set({
      'Content-Type': 'text/plain',
      'Content-Length': '123',
      ETag: '12345'
    })
    ```

    Aliased as `res.header(field [, value])`.
- name: res.status()
  id: index#res.status
  summary: Sets the HTTP status for the response
  description: |-
    ### res.status(code)

    Sets the HTTP status for the response. It is a chainable alias of Node’s [response.statusCode](http://nodejs.org/api/http.html#http_response_statuscode).

    ``` js
    res.status(403).end()
    res.status(400).send('Bad Request')
    res.status(404).sendFile('/absolute/path/to/404.png')
    ```
- name: res.type()
  id: index#res.type
  summary: Sets the Content-Type HTTP header to the MIME type as determined by the specified type
  description: |-
    ### res.type(type)

    Sets the `Content-Type` HTTP header to the MIME type as determined by the specified `type`. If `type` contains the “/” character, then it sets the `Content-Type` to the exact value of `type`, otherwise it is assumed to be a file extension and the MIME type is looked up in a mapping using the `express.static.mime.lookup()` method.

    ``` js
    res.type('.html')
    // => 'text/html'
    res.type('html')
    // => 'text/html'
    res.type('json')
    // => 'application/json'
    res.type('application/json')
    // => 'application/json'
    res.type('png')
    // => 'image/png'
    ```
- name: res.vary()
  id: index#res.vary
  summary: Adds the field to the Vary response header, if it is not there already
  description: |-
    ### res.vary(field)

    Adds the field to the `Vary` response header, if it is not there already.

    ``` js
    res.vary('User-Agent').render('docs')
    ```

    ## Router

    A `router` object is an isolated instance of middleware and routes. You can think of it as a “mini-application,” capable only of performing middleware and routing functions. Every Express application has a built-in app router.

    A router behaves like middleware itself, so you can use it as an argument to [app.use()](#app.use) or as the argument to another router’s [use()](#router.use) method.

    The top-level `express` object has a [Router()](#express.router) method that creates a new `router` object.

    Once you’ve created a router object, you can add middleware and HTTP method routes (such as `get`, `put`, `post`, and so on) to it just like an application. For example:

    ``` js
    // invoked for any requests passed to this router
    router.use(function (req, res, next) {
      // .. some logic here .. like any other middleware
      next()
    })

    // will handle any request that ends in /events
    // depends on where the router is "use()'d"
    router.get('/events', function (req, res, next) {
      // ..
    })
    ```

    You can then use a router for a particular root URL in this way separating your routes into files or even mini-apps.

    ``` js
    // only requests to /calendar/* will be sent to our "router"
    app.use('/calendar', router)
    ```

    ### Methods
- name: router.all()
  id: index#router.all
  summary: This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)
  description: |-
    ### router.all(path, \[callback, ...\] callback)

    This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).

    This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches. For example, if you placed the following route at the top of all other route definitions, it would require that all routes from that point on would require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end points; `loadUser` can perform a task, then call `next()` to continue matching subsequent routes.

    ``` js
    router.all('*', requireAuthentication, loadUser)
    ```

    Or the equivalent:

    ``` js
    router.all('*', requireAuthentication)
    router.all('*', loadUser)
    ```

    Another example of this is white-listed “global” functionality. Here the example is much like before, but it only restricts paths prefixed with “/api”:

    ``` js
    router.all('/api/*', requireAuthentication)
    ```
- name: router.METHOD()
  id: index#router.METHOD
  summary: The router.METHOD() methods provide the routing functionality in Express, where METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on, in lowercase
  description: |-
    ### router.METHOD(path, \[callback, ...\] callback)

    The `router.METHOD()` methods provide the routing functionality in Express, where METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are `router.get()`, `router.post()`, `router.put()`, and so on.

    The `router.get()` function is automatically called for the HTTP `HEAD` method in addition to the `GET` method if `router.head()` was not called for the path before `router.get()`.

    You can provide multiple callbacks, and all are treated equally, and behave just like middleware, except that these callbacks may invoke `next('route')` to bypass the remaining route callback(s). You can use this mechanism to perform pre-conditions on a route then pass control to subsequent routes when there is no reason to proceed with the route matched.

    The following snippet illustrates the most simple route definition possible. Express translates the path strings to regular expressions, used internally to match incoming requests. Query strings are *not* considered when performing these matches, for example “GET /” would match the following route, as would “GET /?name=tobi”.

    ``` js
    router.get('/', function (req, res) {
      res.send('hello world')
    })
    ```

    You can also use regular expressions—useful if you have very specific constraints, for example the following would match “GET /commits/71dbb9c” as well as “GET /commits/71dbb9c..4c084f9”.

    ``` js
    router.get(/^\/commits\/(\w+)(?:\.\.(\w+))?$/, function (req, res) {
      var from = req.params[0]
      var to = req.params[1] || 'HEAD'
      res.send('commit range ' + from + '..' + to)
    })
    ```
- name: router.param()
  id: index#router.param
  summary: Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function
  description: |-
    ### router.param(name, callback)

    Adds callback triggers to route parameters, where `name` is the name of the parameter and `callback` is the callback function. Although `name` is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below).

    The parameters of the callback function are:

    - `req`, the request object.
    - `res`, the response object.
    - `next`, indicating the next middleware function.
    - The value of the `name` parameter.
    - The name of the parameter.

    Unlike `app.param()`, `router.param()` does not accept an array of route parameters.

    For example, when `:user` is present in a route path, you may map user loading logic to automatically provide `req.user` to the route, or perform validations on the parameter input.

    ``` js
    router.param('user', function (req, res, next, id) {
      // try to get the user details from the User model and attach it to the request object
      User.find(id, function (err, user) {
        if (err) {
          next(err)
        } else if (user) {
          req.user = user
          next()
        } else {
          next(new Error('failed to load user'))
        }
      })
    })
    ```

    Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers. Hence, param callbacks defined on `router` will be triggered only by route parameters defined on `router` routes.

    A param callback will be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples.

    ``` js
    router.param('id', function (req, res, next, id) {
      console.log('CALLED ONLY ONCE')
      next()
    })

    router.get('/user/:id', function (req, res, next) {
      console.log('although this matches')
      next()
    })

    router.get('/user/:id', function (req, res) {
      console.log('and this matches too')
      res.end()
    })
    ```

    On `GET /user/42`, the following is printed:

        CALLED ONLY ONCE
        although this matches
        and this matches too

    The following section describes `router.param(callback)`, which is deprecated as of v4.11.0.

    The behavior of the `router.param(name, callback)` method can be altered entirely by passing only a function to `router.param()`. This function is a custom implementation of how `router.param(name, callback)` should behave - it accepts two parameters and must return a middleware.

    The first parameter of this function is the name of the URL parameter that should be captured, the second parameter can be any JavaScript object which might be used for returning the middleware implementation.

    The middleware returned by the function decides the behavior of what happens when a URL parameter is captured.

    In this example, the `router.param(name, callback)` signature is modified to `router.param(name, accessId)`. Instead of accepting a name and a callback, `router.param()` will now accept a name and a number.

    ``` js
    var express = require('express')
    var app = express()
    var router = express.Router()

    // customizing the behavior of router.param()
    router.param(function (param, option) {
      return function (req, res, next, val) {
        if (val === option) {
          next()
        } else {
          res.sendStatus(403)
        }
      }
    })

    // using the customized router.param()
    router.param('id', '1337')

    // route to trigger the capture
    router.get('/user/:id', function (req, res) {
      res.send('OK')
    })

    app.use(router)

    app.listen(3000, function () {
      console.log('Ready')
    })
    ```

    In this example, the `router.param(name, callback)` signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id.

    ``` js
    router.param(function (param, validator) {
      return function (req, res, next, val) {
        if (validator(val)) {
          next()
        } else {
          res.sendStatus(403)
        }
      }
    })

    router.param('id', function (candidate) {
      return !isNaN(parseFloat(candidate)) && isFinite(candidate)
    })
    ```
- name: router.route()
  id: index#router.route
  summary: Returns an instance of a single route which you can then use to handle HTTP verbs with optional middleware
  description: |-
    ### router.route(path)

    Returns an instance of a single route which you can then use to handle HTTP verbs with optional middleware. Use `router.route()` to avoid duplicate route naming and thus typing errors.

    Building on the `router.param()` example above, the following code shows how to use `router.route()` to specify various HTTP method handlers.

    ``` js
    var router = express.Router()

    router.param('user_id', function (req, res, next, id) {
      // sample user, would actually fetch from DB, etc...
      req.user = {
        id: id,
        name: 'TJ'
      }
      next()
    })

    router.route('/users/:user_id')
      .all(function (req, res, next) {
        // runs for all HTTP verbs first
        // think of it as route specific middleware!
        next()
      })
      .get(function (req, res, next) {
        res.json(req.user)
      })
      .put(function (req, res, next) {
        // just an example of maybe updating the user
        req.user.name = req.params.name
        // save user ... etc
        res.json(req.user)
      })
      .post(function (req, res, next) {
        next(new Error('not implemented'))
      })
      .delete(function (req, res, next) {
        next(new Error('not implemented'))
      })
    ```

    This approach re-uses the single `/users/:user_id` path and adds handlers for various HTTP methods.

    NOTE: When you use `router.route()`, middleware ordering is based on when the *route* is created, not when method handlers are added to the route. For this purpose, you can consider method handlers to belong to the route to which they were added.
- name: router.use()
  id: index#router.use
  summary: This method is similar to app.use()
  description: "### router.use(\\[path\\], \\[function, ...\\] function)\n\nUses the specified middleware function or functions, with optional mount path `path`, that defaults to “/”.\n\nThis method is similar to [app.use()](#app.use). A simple example and use case is described below. See [app.use()](#app.use) for more information.\n\nMiddleware is like a plumbing pipe: requests start at the first middleware function defined and work their way “down” the middleware stack processing for each path they match.\n\n``` js\nvar express = require('express')\nvar app = express()\nvar router = express.Router()\n\n// simple logger for this router's requests\n// all requests to this router will first hit this middleware\nrouter.use(function (req, res, next) {\n  console.log('%s %s %s', req.method, req.url, req.path)\n  next()\n})\n\n// this will only be invoked if the path starts with /bar from the mount point\nrouter.use('/bar', function (req, res, next) {\n  // ... maybe some additional /bar logging ...\n  next()\n})\n\n// always invoked\nrouter.use(function (req, res, next) {\n  res.send('Hello World')\n})\n\napp.use('/foo', router)\n\napp.listen(3000)\n```\n\nThe “mount” path is stripped and is *not* visible to the middleware function. The main effect of this feature is that a mounted middleware function may operate without code changes regardless of its “prefix” pathname.\n\nThe order in which you define middleware with `router.use()` is very important. They are invoked sequentially, thus the order defines middleware precedence. For example, usually a logger is the very first middleware you would use, so that every request gets logged.\n\n``` js\nvar logger = require('morgan')\nvar path = require('path')\n\nrouter.use(logger())\nrouter.use(express.static(path.join(__dirname, 'public')))\nrouter.use(function (req, res) {\n  res.send('Hello')\n})\n```\n\nNow suppose you wanted to ignore logging requests for static files, but to continue logging routes and middleware defined after `logger()`. You would simply move the call to `express.static()` to the top, before adding the logger middleware:\n\n``` js\nrouter.use(express.static(path.join(__dirname, 'public')))\nrouter.use(logger())\nrouter.use(function (req, res) {\n  res.send('Hello')\n})\n```\n\nAnother example is serving files from multiple directories, giving precedence to “./public” over the others:\n\n``` js\nrouter.use(express.static(path.join(__dirname, 'public')))\nrouter.use(express.static(path.join(__dirname, 'files')))\nrouter.use(express.static(path.join(__dirname, 'uploads')))\n```\n\nThe `router.use()` method also supports named parameters so that your mount points for other routers can benefit from preloading using named parameters.\n\n**NOTE**: Although these middleware functions are added via a particular router, *when* they run is defined by the path they are attached to (not the router). Therefore, middleware added via one router may run for other routers if its routes match. For example, this code shows two different routers mounted on the same path:\n\n``` js\nvar authRouter = express.Router()\nvar openRouter = express.Router()\n\nauthRouter.use(require('./authenticate').basic(usersdb))\n\nauthRouter.get('/:user_id/edit', function (req, res, next) {\n  // ... Edit user UI ...\n})\nopenRouter.get('/', function (req, res, next) {\n  // ... List users ...\n})\nopenRouter.get('/:user_id', function (req, res, next) {\n  // ... View user ...\n})\n\napp.use('/users', authRouter)\napp.use('/users', openRouter)\n```\n\nEven though the authentication middleware was added via the `authRouter` it will run on the routes defined by the `openRouter` as well since both routers were mounted on `/users`. To avoid this behavior, use different paths for each router.\n\n© 2017 StrongLoop, IBM, and other expressjs.com contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v3.0.  \n[https://expressjs.com/en/4x/api.html](https://expressjs.com/en/4x/api.html)"
