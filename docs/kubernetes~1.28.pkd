---
name: Kubernetes
slug: kubernetes~1.28
text_format: markdown
generator: src:devdocs
version: '1.28'
copyright: |-
  © 2022 The Kubernetes Authors | Documentation Distributed under CC BY
  4.0
  Copyright © 2022 The Linux Foundation ®. All rights reserved.
  https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/
homepage: https://kubernetes.io/

---
- name: allowWatchBookmarks
  id: common-parameters/common-parameters/index#allowWatchBookmarks
  summary: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion
  belongs_to: Common Parameters
  description: |-
    ## allowWatchBookmarks

    allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
- name: APIService
  id: cluster-resources/api-service-v1/index
  summary: APIService represents a server for a particular GroupVersion
  description: "# APIService\n\nAPIService represents a server for a particular GroupVersion.\n\n`apiVersion: apiregistration.k8s.io/v1`\n\n`import \"k8s.io/kube-aggregator/pkg/apis/apiregistration/v1\"`\n\n## APIService\n\nAPIService represents a server for a particular GroupVersion. Name must be \"version.group\".\n\n- **apiVersion**: apiregistration.k8s.io/v1\n\n- **kind**: APIService\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([APIServiceSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/#APIServiceSpec))\n\n  Spec contains information for locating and communicating with a server\n\n- **status** ([APIServiceStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/#APIServiceStatus))\n\n  Status contains derived information about an API server\n\n## APIServiceSpec\n\nAPIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.\n\n- **groupPriorityMinimum** (int32), required\n\n  GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: \\*.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s\n\n- **versionPriority** (int32), required\n\n  VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA \\> beta \\> alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.\n\n- **caBundle** (\\[\\]byte)\n\n  *Atomic: will be replaced during a merge*\n\n  CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.\n\n- **group** (string)\n\n  Group is the API group name this server hosts\n\n- **insecureSkipTLSVerify** (boolean)\n\n  InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead.\n\n- **service** (ServiceReference)\n\n  Service is a reference to the service for this API server. It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.\n\n  *ServiceReference holds a reference to Service.legacy.k8s.io*\n\n  - **service.name** (string)\n\n    Name is the name of the service\n\n  - **service.namespace** (string)\n\n    Namespace is the namespace of the service\n\n  - **service.port** (int32)\n\n    If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).\n\n- **version** (string)\n\n  Version is the API version this server hosts. For example, \"v1\"\n\n## APIServiceStatus\n\nAPIServiceStatus contains derived information about an API server\n\n- **conditions** (\\[\\]APIServiceCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  Current service state of apiService.\n\n  *APIServiceCondition describes the state of an APIService at a particular point*\n\n  - **conditions.status** (string), required\n\n    Status is the status of the condition. Can be True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type is the type of the condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    Unique, one-word, CamelCase reason for the condition's last transition.\n\n## APIServiceList\n\nAPIServiceList is a list of APIService objects.\n\n- **apiVersion**: apiregistration.k8s.io/v1\n\n- **kind**: APIServiceList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][APIService](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/#APIService)), required\n\n  Items is the list of APIService\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/)"
- name: APIService.Spec
  id: cluster-resources/api-service-v1/index#APIServiceSpec
  summary: APIServiceSpec contains information for locating and communicating with a server
  belongs_to: APIService
  description: |-
    ## APIServiceSpec

    APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.

    - **groupPriorityMinimum** (int32), required

      GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: \*.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s

    - **versionPriority** (int32), required

      VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA \> beta \> alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.

    - **caBundle** (\[\]byte)

      *Atomic: will be replaced during a merge*

      CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.

    - **group** (string)

      Group is the API group name this server hosts

    - **insecureSkipTLSVerify** (boolean)

      InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead.

    - **service** (ServiceReference)

      Service is a reference to the service for this API server. It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.

      *ServiceReference holds a reference to Service.legacy.k8s.io*

      - **service.name** (string)

        Name is the name of the service

      - **service.namespace** (string)

        Namespace is the namespace of the service

      - **service.port** (int32)

        If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).

    - **version** (string)

      Version is the API version this server hosts. For example, "v1"

    &nbsp;
- name: APIService.Status
  id: cluster-resources/api-service-v1/index#APIServiceStatus
  summary: Current service state of apiService
  belongs_to: APIService
  description: "## APIServiceStatus\n\nAPIServiceStatus contains derived information about an API server\n\n- **conditions** (\\[\\]APIServiceCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  Current service state of apiService.\n\n  *APIServiceCondition describes the state of an APIService at a particular point*\n\n  - **conditions.status** (string), required\n\n    Status is the status of the condition. Can be True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type is the type of the condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    Unique, one-word, CamelCase reason for the condition's last transition.\n\n## APIServiceList\n\nAPIServiceList is a list of APIService objects.\n\n- **apiVersion**: apiregistration.k8s.io/v1\n\n- **kind**: APIServiceList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][APIService](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/#APIService)), required\n\n  Items is the list of APIService\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/api-service-v1/)"
- name: Authentication Resources
  id: authentication-resources/index
  summary: 'ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets'
  description: "# Authentication Resources\n\n##### [ServiceAccount](service-account-v1/index)\n\nServiceAccount binds together: \\* a name, understood by users, and perhaps by peripheral systems, for an identity \\* a principal that can be authenticated and authorized \\* a set of secrets.\n\n##### [TokenRequest](token-request-v1/index)\n\nTokenRequest requests a token for a given service account.\n\n##### [TokenReview](token-review-v1/index)\n\nTokenReview attempts to authenticate a token to a known user.\n\n##### [CertificateSigningRequest](certificate-signing-request-v1/index)\n\nCertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\n##### [ClusterTrustBundle v1alpha1](cluster-trust-bundle-v1alpha1/index)\n\nClusterTrustBundle is a cluster-scoped container for X.\n\n##### [SelfSubjectReview](self-subject-review-v1/index)\n\nSelfSubjectReview contains the user information that the kube-apiserver has about the user making this request.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/)"
- name: Authorization Resources
  id: authorization-resources/index
  summary: LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace
  description: "# Authorization Resources\n\n##### [LocalSubjectAccessReview](local-subject-access-review-v1/index)\n\nLocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace.\n\n##### [SelfSubjectAccessReview](self-subject-access-review-v1/index)\n\nSelfSubjectAccessReview checks whether or the current user can perform an action.\n\n##### [SelfSubjectRulesReview](self-subject-rules-review-v1/index)\n\nSelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace.\n\n##### [SubjectAccessReview](subject-access-review-v1/index)\n\nSubjectAccessReview checks whether or not a user or group can perform an action.\n\n##### [ClusterRole](cluster-role-v1/index)\n\nClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\n\n##### [ClusterRoleBinding](cluster-role-binding-v1/index)\n\nClusterRoleBinding references a ClusterRole, but not contain it.\n\n##### [Role](role-v1/index)\n\nRole is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\n\n##### [RoleBinding](role-binding-v1/index)\n\nRoleBinding references a role, but does not contain it.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/)"
- name: Binding
  id: cluster-resources/binding-v1/index
  summary: Binding ties one object to another; for example, a pod is bound to a node by a scheduler
  description: "# Binding\n\nBinding ties one object to another; for example, a pod is bound to a node by a scheduler.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## Binding\n\nBinding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.\n\n- **apiVersion**: v1\n\n- **kind**: Binding\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **target** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference)), required\n\n  The target object that you want to bind to the standard object.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/binding-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/binding-v1/)"
- name: CertificateSigningRequest
  id: authentication-resources/certificate-signing-request-v1/index
  summary: CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued
  description: "# CertificateSigningRequest\n\nCertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\n`apiVersion: certificates.k8s.io/v1`\n\n`import \"k8s.io/api/certificates/v1\"`\n\n## CertificateSigningRequest\n\nCertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\nKubelets use this API to obtain:\n\n1.  client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client-kubelet\" signerName).\n2.  serving certificates for TLS endpoints kube-apiserver can connect to securely (with the \"kubernetes.io/kubelet-serving\" signerName).\n\nThis API can be used to request client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client\" signerName), or to obtain certificates from custom non-Kubernetes signers.\n\n- **apiVersion**: certificates.k8s.io/v1\n\n- **kind**: CertificateSigningRequest\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n- **spec** ([CertificateSigningRequestSpec](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/#CertificateSigningRequestSpec)), required\n\n  spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.\n\n- **status** ([CertificateSigningRequestStatus](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/#CertificateSigningRequestStatus))\n\n  status contains information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure.\n\n## CertificateSigningRequestSpec\n\nCertificateSigningRequestSpec contains the certificate request.\n\n- **request** (\\[\\]byte), required\n\n  *Atomic: will be replaced during a merge*\n\n  request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.\n\n- **signerName** (string), required\n\n  signerName indicates the requested signer, and is a qualified name.\n\n  List/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.\n\n  Well-known Kubernetes signers are:\n\n  1.  \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver. Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.\n  2.  \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver. Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n  3.  \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely. Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n\n  More details are available at <https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers>\n\n  Custom signerNames can also be specified. The signer defines:\n\n  1.  Trust distribution: how trust (CA bundles) are distributed.\n  2.  Permitted subjects: and behavior when a disallowed subject is requested.\n  3.  Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n  4.  Required, permitted, or forbidden key usages / extended key usages.\n  5.  Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n  6.  Whether or not requests for CA certificates are allowed.\n\n- **expirationSeconds** (int32)\n\n  expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.\n\n  The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.\n\n  Certificate signers may not honor this field for various reasons:\n\n  1.  Old signer that is unaware of the field (such as the in-tree implementations prior to v1.22)\n  2.  Signer whose configured maximum is shorter than the requested duration\n  3.  Signer whose configured minimum is longer than the requested duration\n\n  The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.\n\n- **extra** (map\\[string\\]\\[\\]string)\n\n  extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.\n\n- **groups** (\\[\\]string)\n\n  *Atomic: will be replaced during a merge*\n\n  groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.\n\n- **uid** (string)\n\n  uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.\n\n- **usages** (\\[\\]string)\n\n  *Atomic: will be replaced during a merge*\n\n  usages specifies a set of key usages requested in the issued certificate.\n\n  Requests for TLS client certificates typically request: \"digital signature\", \"key encipherment\", \"client auth\".\n\n  Requests for TLS serving certificates typically request: \"key encipherment\", \"digital signature\", \"server auth\".\n\n  Valid values are: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"\n\n- **username** (string)\n\n  username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.\n\n## CertificateSigningRequestStatus\n\nCertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.\n\n- **certificate** (\\[\\]byte)\n\n  *Atomic: will be replaced during a merge*\n\n  certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.\n\n  If the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\n  Validation requirements:\n\n  1.  certificate must contain one or more PEM blocks.\n  2.  All PEM blocks must have the \"CERTIFICATE\" label, contain no headers, and the encoded data must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n  3.  Non-PEM content may appear before or after the \"CERTIFICATE\" PEM blocks and is unvalidated, to allow for explanatory text as described in section 5.2 of RFC7468.\n\n  If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.\n\n  The certificate is encoded in PEM format.\n\n  When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:\n\n      base64(\n      -----BEGIN CERTIFICATE-----\n      ...\n      -----END CERTIFICATE-----\n      )\n\n- **conditions** (\\[\\]CertificateSigningRequestCondition)\n\n  *Map: unique values on key type will be kept during a merge*\n\n  conditions applied to the request. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\n  *CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object*\n\n  - **conditions.status** (string), required\n\n    status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".\n\n  - **conditions.type** (string), required\n\n    type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\n    An \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\n    A \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\n    A \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\n    Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\n    Only one condition of a given type is allowed.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastUpdateTime** (Time)\n\n    lastUpdateTime is the time of the last update to this condition\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message contains a human readable message with details about the request state\n\n  - **conditions.reason** (string)\n\n    reason indicates a brief reason for the request state\n\n## CertificateSigningRequestList\n\nCertificateSigningRequestList is a collection of CertificateSigningRequest objects\n\n- **apiVersion**: certificates.k8s.io/v1\n\n- **kind**: CertificateSigningRequestList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n- **items** (\\[\\][CertificateSigningRequest](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/#CertificateSigningRequest)), required\n\n  items is a collection of CertificateSigningRequest objects\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/)"
- name: CertificateSigningRequest.Spec
  id: authentication-resources/certificate-signing-request-v1/index#CertificateSigningRequestSpec
  summary: CertificateSigningRequestSpec contains the certificate request
  belongs_to: CertificateSigningRequest
  description: |-
    ## CertificateSigningRequestSpec

    CertificateSigningRequestSpec contains the certificate request.

    - **request** (\[\]byte), required

      *Atomic: will be replaced during a merge*

      request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.

    - **signerName** (string), required

      signerName indicates the requested signer, and is a qualified name.

      List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.

      Well-known Kubernetes signers are:

      1.  "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver. Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
      2.  "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver. Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
      3.  "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely. Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.

      More details are available at <https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers>

      Custom signerNames can also be specified. The signer defines:

      1.  Trust distribution: how trust (CA bundles) are distributed.
      2.  Permitted subjects: and behavior when a disallowed subject is requested.
      3.  Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
      4.  Required, permitted, or forbidden key usages / extended key usages.
      5.  Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
      6.  Whether or not requests for CA certificates are allowed.

    - **expirationSeconds** (int32)

      expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.

      The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.

      Certificate signers may not honor this field for various reasons:

      1.  Old signer that is unaware of the field (such as the in-tree implementations prior to v1.22)
      2.  Signer whose configured maximum is shorter than the requested duration
      3.  Signer whose configured minimum is longer than the requested duration

      The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.

    - **extra** (map\[string\]\[\]string)

      extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.

    - **groups** (\[\]string)

      *Atomic: will be replaced during a merge*

      groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.

    - **uid** (string)

      uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.

    - **usages** (\[\]string)

      *Atomic: will be replaced during a merge*

      usages specifies a set of key usages requested in the issued certificate.

      Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".

      Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".

      Valid values are: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"

    - **username** (string)

      username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.

    &nbsp;
- name: CertificateSigningRequest.Status
  id: authentication-resources/certificate-signing-request-v1/index#CertificateSigningRequestStatus
  summary: CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate
  belongs_to: CertificateSigningRequest
  description: "## CertificateSigningRequestStatus\n\nCertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.\n\n- **certificate** (\\[\\]byte)\n\n  *Atomic: will be replaced during a merge*\n\n  certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.\n\n  If the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\n  Validation requirements:\n\n  1.  certificate must contain one or more PEM blocks.\n  2.  All PEM blocks must have the \"CERTIFICATE\" label, contain no headers, and the encoded data must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n  3.  Non-PEM content may appear before or after the \"CERTIFICATE\" PEM blocks and is unvalidated, to allow for explanatory text as described in section 5.2 of RFC7468.\n\n  If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.\n\n  The certificate is encoded in PEM format.\n\n  When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:\n\n                base64(\n      -----BEGIN CERTIFICATE-----\n      ...\n      -----END CERTIFICATE-----\n      )\n\n              \n\n- **conditions** (\\[\\]CertificateSigningRequestCondition)\n\n  *Map: unique values on key type will be kept during a merge*\n\n  conditions applied to the request. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\n  *CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object*\n\n  - **conditions.status** (string), required\n\n    status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".\n\n  - **conditions.type** (string), required\n\n    type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\n    An \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\n    A \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\n    A \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\n    Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\n    Only one condition of a given type is allowed.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastUpdateTime** (Time)\n\n    lastUpdateTime is the time of the last update to this condition\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message contains a human readable message with details about the request state\n\n  - **conditions.reason** (string)\n\n    reason indicates a brief reason for the request state\n\n## CertificateSigningRequestList\n\nCertificateSigningRequestList is a collection of CertificateSigningRequest objects\n\n- **apiVersion**: certificates.k8s.io/v1\n\n- **kind**: CertificateSigningRequestList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n- **items** (\\[\\][CertificateSigningRequest](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/#CertificateSigningRequest)), required\n\n  items is a collection of CertificateSigningRequest objects\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/)"
- name: Cluster Resources
  id: cluster-resources/index
  summary: Node is a worker node in Kubernetes
  description: "# Cluster Resources\n\n##### [Node](node-v1/index)\n\nNode is a worker node in Kubernetes.\n\n##### [Namespace](namespace-v1/index)\n\nNamespace provides a scope for Names.\n\n##### [Event](event-v1/index)\n\nEvent is a report of an event somewhere in the cluster.\n\n##### [APIService](api-service-v1/index)\n\nAPIService represents a server for a particular GroupVersion.\n\n##### [Lease](lease-v1/index)\n\nLease defines a lease concept.\n\n##### [RuntimeClass](runtime-class-v1/index)\n\nRuntimeClass defines a class of container runtime supported in the cluster.\n\n##### [FlowSchema v1beta3](flow-schema-v1beta3/index)\n\nFlowSchema defines the schema of a group of flows.\n\n##### [PriorityLevelConfiguration v1beta3](priority-level-configuration-v1beta3/index)\n\nPriorityLevelConfiguration represents the configuration of a priority level.\n\n##### [Binding](binding-v1/index)\n\nBinding ties one object to another; for example, a pod is bound to a node by a scheduler.\n\n##### [ComponentStatus](component-status-v1/index)\n\nComponentStatus (and ComponentStatusList) holds the cluster validation info.\n\n##### [ClusterCIDR v1alpha1](cluster-cidr-v1alpha1/index)\n\nClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/)"
- name: ClusterCIDR
  id: cluster-resources/cluster-cidr-v1alpha1/index#ClusterCIDR
  summary: ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager)
  belongs_to: ClusterCIDR v1alpha1
  description: |-
    ## ClusterCIDR

    ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager). A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node. A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate. In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.

    - **apiVersion**: networking.k8s.io/v1alpha1

    - **kind**: ClusterCIDR

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>

    - **spec** ([ClusterCIDRSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/#ClusterCIDRSpec))

      spec is the desired state of the ClusterCIDR. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
- name: ClusterCIDR v1alpha1
  id: cluster-resources/cluster-cidr-v1alpha1/index
  summary: ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager)
  description: "# ClusterCIDR v1alpha1\n\nClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).\n\n`apiVersion: networking.k8s.io/v1alpha1`\n\n`import \"k8s.io/api/networking/v1alpha1\"`\n\n## ClusterCIDR\n\nClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager). A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node. A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate. In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used.\n\n- **apiVersion**: networking.k8s.io/v1alpha1\n\n- **kind**: ClusterCIDR\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([ClusterCIDRSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/#ClusterCIDRSpec))\n\n  spec is the desired state of the ClusterCIDR. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## ClusterCIDRSpec\n\nClusterCIDRSpec defines the desired state of ClusterCIDR.\n\n- **perNodeHostBits** (int32), required\n\n  perNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.\n\n- **ipv4** (string)\n\n  ipv4 defines an IPv4 IP block in CIDR notation(e.g. \"10.0.0.0/8\"). At least one of ipv4 and ipv6 must be specified. This field is immutable.\n\n- **ipv6** (string)\n\n  ipv6 defines an IPv6 IP block in CIDR notation(e.g. \"2001:db8::/64\"). At least one of ipv4 and ipv6 must be specified. This field is immutable.\n\n- **nodeSelector** (NodeSelector)\n\n  nodeSelector defines which nodes the config is applicable to. An empty or nil nodeSelector selects all nodes. This field is immutable.\n\n  *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*\n\n  - **nodeSelector.nodeSelectorTerms** (\\[\\]NodeSelectorTerm), required\n\n    Required. A list of node selector terms. The terms are ORed.\n\n    *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*\n\n    - **nodeSelector.nodeSelectorTerms.matchExpressions** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's labels.\n\n    - **nodeSelector.nodeSelectorTerms.matchFields** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's fields.\n\n## ClusterCIDRList\n\nClusterCIDRList contains a list of ClusterCIDR.\n\n- **apiVersion**: networking.k8s.io/v1alpha1\n\n- **kind**: ClusterCIDRList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][ClusterCIDR](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/#ClusterCIDR)), required\n\n  items is the list of ClusterCIDRs.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/)"
- name: ClusterCIDRList
  id: cluster-resources/cluster-cidr-v1alpha1/index#ClusterCIDRList
  summary: ClusterCIDRList contains a list of ClusterCIDR
  belongs_to: ClusterCIDR v1alpha1
  description: "## ClusterCIDRList\n\nClusterCIDRList contains a list of ClusterCIDR.\n\n- **apiVersion**: networking.k8s.io/v1alpha1\n\n- **kind**: ClusterCIDRList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][ClusterCIDR](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/#ClusterCIDR)), required\n\n  items is the list of ClusterCIDRs.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/cluster-cidr-v1alpha1/)"
- name: ClusterCIDRSpec
  id: cluster-resources/cluster-cidr-v1alpha1/index#ClusterCIDRSpec
  summary: ClusterCIDRSpec defines the desired state of ClusterCIDR
  belongs_to: ClusterCIDR v1alpha1
  description: |-
    ## ClusterCIDRSpec

    ClusterCIDRSpec defines the desired state of ClusterCIDR.

    - **perNodeHostBits** (int32), required

      perNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.

    - **ipv4** (string)

      ipv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one of ipv4 and ipv6 must be specified. This field is immutable.

    - **ipv6** (string)

      ipv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least one of ipv4 and ipv6 must be specified. This field is immutable.

    - **nodeSelector** (NodeSelector)

      nodeSelector defines which nodes the config is applicable to. An empty or nil nodeSelector selects all nodes. This field is immutable.

      *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*

      - **nodeSelector.nodeSelectorTerms** (\[\]NodeSelectorTerm), required

        Required. A list of node selector terms. The terms are ORed.

        *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*

        - **nodeSelector.nodeSelectorTerms.matchExpressions** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's labels.

        - **nodeSelector.nodeSelectorTerms.matchFields** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's fields.

    &nbsp;
- name: ClusterRole
  id: authorization-resources/cluster-role-v1/index
  summary: ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding
  description: "# ClusterRole\n\nClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\n\n`apiVersion: rbac.authorization.k8s.io/v1`\n\n`import \"k8s.io/api/rbac/v1\"`\n\n## ClusterRole\n\nClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: ClusterRole\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata.\n\n- **aggregationRule** (AggregationRule)\n\n  AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.\n\n  *AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole*\n\n  - **aggregationRule.clusterRoleSelectors** (\\[\\][LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added\n\n- **rules** (\\[\\]PolicyRule)\n\n  Rules holds all the PolicyRules for this ClusterRole\n\n  *PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.*\n\n  - **rules.apiGroups** (\\[\\]string)\n\n    APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"\\*\" represents all API groups.\n\n  - **rules.resources** (\\[\\]string)\n\n    Resources is a list of resources this rule applies to. '\\*' represents all resources.\n\n  - **rules.verbs** (\\[\\]string), required\n\n    Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '\\*' represents all verbs.\n\n  - **rules.resourceNames** (\\[\\]string)\n\n    ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n  - **rules.nonResourceURLs** (\\[\\]string)\n\n    NonResourceURLs is a set of partial urls that a user should have access to. \\*s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both.\n\n## ClusterRoleList\n\nClusterRoleList is a collection of ClusterRoles\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: ClusterRoleList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata.\n\n- **items** (\\[\\][ClusterRole](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-v1/#ClusterRole)), required\n\n  Items is a list of ClusterRoles\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-v1/)"
- name: ClusterRoleBinding
  id: authorization-resources/cluster-role-binding-v1/index
  summary: ClusterRoleBinding references a ClusterRole, but not contain it
  description: "# ClusterRoleBinding\n\nClusterRoleBinding references a ClusterRole, but not contain it.\n\n`apiVersion: rbac.authorization.k8s.io/v1`\n\n`import \"k8s.io/api/rbac/v1\"`\n\n## ClusterRoleBinding\n\nClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject.\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: ClusterRoleBinding\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata.\n\n- **roleRef** (RoleRef), required\n\n  RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.\n\n  *RoleRef contains information that points to the role being used*\n\n  - **roleRef.apiGroup** (string), required\n\n    APIGroup is the group for the resource being referenced\n\n  - **roleRef.kind** (string), required\n\n    Kind is the type of resource being referenced\n\n  - **roleRef.name** (string), required\n\n    Name is the name of resource being referenced\n\n- **subjects** (\\[\\]Subject)\n\n  Subjects holds references to the objects the role applies to.\n\n  *Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names.*\n\n  - **subjects.kind** (string), required\n\n    Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\n\n  - **subjects.name** (string), required\n\n    Name of the object being referenced.\n\n  - **subjects.apiGroup** (string)\n\n    APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.\n\n  - **subjects.namespace** (string)\n\n    Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.\n\n## ClusterRoleBindingList\n\nClusterRoleBindingList is a collection of ClusterRoleBindings\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: ClusterRoleBindingList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata.\n\n- **items** (\\[\\][ClusterRoleBinding](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-binding-v1/#ClusterRoleBinding)), required\n\n  Items is a list of ClusterRoleBindings\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-binding-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-binding-v1/)"
- name: ClusterTrustBundle
  id: authentication-resources/cluster-trust-bundle-v1alpha1/index#ClusterTrustBundle
  summary: ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates)
  belongs_to: ClusterTrustBundle v1alpha1
  description: |-
    ## ClusterTrustBundle

    ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).

    ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection. All service accounts have read access to ClusterTrustBundles by default. Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.

    It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.

    - **apiVersion**: certificates.k8s.io/v1alpha1

    - **kind**: ClusterTrustBundle

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      metadata contains the object metadata.

    - **spec** ([ClusterTrustBundleSpec](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/#ClusterTrustBundleSpec)), required

      spec contains the signer (if any) and trust anchors.
- name: ClusterTrustBundle v1alpha1
  id: authentication-resources/cluster-trust-bundle-v1alpha1/index
  summary: ClusterTrustBundle is a cluster-scoped container for X
  description: "# ClusterTrustBundle v1alpha1\n\nClusterTrustBundle is a cluster-scoped container for X.\n\n`apiVersion: certificates.k8s.io/v1alpha1`\n\n`import \"k8s.io/api/certificates/v1alpha1\"`\n\n## ClusterTrustBundle\n\nClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).\n\nClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection. All service accounts have read access to ClusterTrustBundles by default. Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.\n\nIt can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.\n\n- **apiVersion**: certificates.k8s.io/v1alpha1\n\n- **kind**: ClusterTrustBundle\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  metadata contains the object metadata.\n\n- **spec** ([ClusterTrustBundleSpec](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/#ClusterTrustBundleSpec)), required\n\n  spec contains the signer (if any) and trust anchors.\n\n## ClusterTrustBundleSpec\n\nClusterTrustBundleSpec contains the signer and trust anchors.\n\n- **trustBundle** (string), required\n\n  trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.\n\n  The data must consist only of PEM certificate blocks that parse as valid X.509 certificates. Each certificate must include a basic constraints extension with the CA bit set. The API server will reject objects that contain duplicate certificates, or that use PEM block headers.\n\n  Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.\n\n- **signerName** (string)\n\n  signerName indicates the associated signer, if any.\n\n  In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=\\<the signer name\\> verb=attest.\n\n  If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.\n\n  If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.\n\n  List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.\n\n## ClusterTrustBundleList\n\nClusterTrustBundleList is a collection of ClusterTrustBundle objects\n\n- **apiVersion**: certificates.k8s.io/v1alpha1\n\n- **kind**: ClusterTrustBundleList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  metadata contains the list metadata.\n\n- **items** (\\[\\][ClusterTrustBundle](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/#ClusterTrustBundle)), required\n\n  items is a collection of ClusterTrustBundle objects\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/)"
- name: ClusterTrustBundleList
  id: authentication-resources/cluster-trust-bundle-v1alpha1/index#ClusterTrustBundleList
  summary: metadata contains the list metadata
  belongs_to: ClusterTrustBundle v1alpha1
  description: "## ClusterTrustBundleList\n\nClusterTrustBundleList is a collection of ClusterTrustBundle objects\n\n- **apiVersion**: certificates.k8s.io/v1alpha1\n\n- **kind**: ClusterTrustBundleList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  metadata contains the list metadata.\n\n- **items** (\\[\\][ClusterTrustBundle](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/#ClusterTrustBundle)), required\n\n  items is a collection of ClusterTrustBundle objects\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/cluster-trust-bundle-v1alpha1/)"
- name: ClusterTrustBundleSpec
  id: authentication-resources/cluster-trust-bundle-v1alpha1/index#ClusterTrustBundleSpec
  summary: ClusterTrustBundleSpec contains the signer and trust anchors
  belongs_to: ClusterTrustBundle v1alpha1
  description: |-
    ## ClusterTrustBundleSpec

    ClusterTrustBundleSpec contains the signer and trust anchors.

    - **trustBundle** (string), required

      trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.

      The data must consist only of PEM certificate blocks that parse as valid X.509 certificates. Each certificate must include a basic constraints extension with the CA bit set. The API server will reject objects that contain duplicate certificates, or that use PEM block headers.

      Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.

    - **signerName** (string)

      signerName indicates the associated signer, if any.

      In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=\<the signer name\> verb=attest.

      If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.

      If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.

      List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.

    &nbsp;
- name: Common Definitions
  id: common-definitions/index
  summary: DeleteOptions may be provided when deleting an API object
  description: "# Common Definitions\n\n##### [DeleteOptions](delete-options/index)\n\nDeleteOptions may be provided when deleting an API object.\n\n##### [LabelSelector](label-selector/index)\n\nA label selector is a label query over a set of resources.\n\n##### [ListMeta](list-meta/index)\n\nListMeta describes metadata that synthetic resources must have, including lists and various status objects.\n\n##### [LocalObjectReference](local-object-reference/index)\n\nLocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\n\n##### [NodeSelectorRequirement](node-selector-requirement/index)\n\nA node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\n\n##### [ObjectFieldSelector](object-field-selector/index)\n\nObjectFieldSelector selects an APIVersioned field of an object.\n\n##### [ObjectMeta](object-meta/index)\n\nObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\n\n##### [ObjectReference](object-reference/index)\n\nObjectReference contains enough information to let you inspect or modify the referred object.\n\n##### [Patch](patch/index)\n\nPatch is provided to give a concrete name and type to the Kubernetes PATCH request body.\n\n##### [Quantity](quantity/index)\n\nQuantity is a fixed-point representation of a number.\n\n##### [ResourceFieldSelector](resource-field-selector/index)\n\nResourceFieldSelector represents container resources (cpu, memory) and their output format.\n\n##### [Status](status/index)\n\nStatus is a return value for calls that don't return other objects.\n\n##### [TypedLocalObjectReference](typed-local-object-reference/index)\n\nTypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/)"
- name: Common Parameters
  id: common-parameters/common-parameters/index
  summary: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion
  description: "# Common Parameters\n\n## allowWatchBookmarks\n\nallowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.\n\n## continue\n\nThe continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.\n\n## dryRun\n\nWhen present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n\n## fieldManager\n\nfieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by <https://golang.org/pkg/unicode/#IsPrint>.\n\n## fieldSelector\n\nA selector to restrict the list of returned objects by their fields. Defaults to everything.\n\n## fieldValidation\n\nfieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.\n\n## force\n\nForce is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.\n\n## gracePeriodSeconds\n\nThe duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n\n## labelSelector\n\nA selector to restrict the list of returned objects by their labels. Defaults to everything.\n\n## limit\n\nlimit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.\n\n## namespace\n\nobject name and auth scope, such as for teams and projects\n\n## pretty\n\nIf 'true', then the output is pretty printed.\n\n## propagationPolicy\n\nWhether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.\n\n## resourceVersion\n\nresourceVersion sets a constraint on what resource versions a request may be served from. See <https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions> for details.\n\nDefaults to unset\n\n## resourceVersionMatch\n\nresourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See <https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions> for details.\n\nDefaults to unset\n\n## sendInitialEvents\n\n`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan is interpreted as \"data at least as new as the provided `resourceVersion`\" and the bookmark event is send when the state is synced to a `resourceVersion` at least as fresh as the one provided by the ListOptions. If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the bookmark event is send when the state is synced at least to the moment when request started being processed.\n\n- `resourceVersionMatch` set to any other value or unset Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.\n\n## timeoutSeconds\n\nTimeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.\n\n## watch\n\nWatch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-parameters/common-parameters/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-parameters/common-parameters/)"
- name: ComponentStatus
  id: cluster-resources/component-status-v1/index
  summary: ComponentStatus (and ComponentStatusList) holds the cluster validation info
  description: "# ComponentStatus\n\nComponentStatus (and ComponentStatusList) holds the cluster validation info.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## ComponentStatus\n\nComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+\n\n- **apiVersion**: v1\n\n- **kind**: ComponentStatus\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **conditions** (\\[\\]ComponentCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  List of component conditions observed\n\n  *Information about the condition of a component.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".\n\n  - **conditions.type** (string), required\n\n    Type of condition for a component. Valid value: \"Healthy\"\n\n  - **conditions.error** (string)\n\n    Condition error code for a component. For example, a health check error code.\n\n  - **conditions.message** (string)\n\n    Message about the condition for a component. For example, information about a health check.\n\n## ComponentStatusList\n\nStatus of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+\n\n- **apiVersion**: v1\n\n- **kind**: ComponentStatusList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ComponentStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/component-status-v1/#ComponentStatus)), required\n\n  List of ComponentStatus objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/component-status-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/component-status-v1/)"
- name: Config and Storage Resources
  id: config-and-storage-resources/index
  summary: ConfigMap holds configuration data for pods to consume
  description: "# Config and Storage Resources\n\n##### [ConfigMap](config-map-v1/index)\n\nConfigMap holds configuration data for pods to consume.\n\n##### [Secret](secret-v1/index)\n\nSecret holds secret data of a certain type.\n\n##### [Volume](volume/index)\n\nVolume represents a named volume in a pod that may be accessed by any container in the pod.\n\n##### [PersistentVolumeClaim](persistent-volume-claim-v1/index)\n\nPersistentVolumeClaim is a user's request for and claim to a persistent volume.\n\n##### [PersistentVolume](persistent-volume-v1/index)\n\nPersistentVolume (PV) is a storage resource provisioned by an administrator.\n\n##### [StorageClass](storage-class-v1/index)\n\nStorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\n##### [VolumeAttachment](volume-attachment-v1/index)\n\nVolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\n##### [CSIDriver](csi-driver-v1/index)\n\nCSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster.\n\n##### [CSINode](csi-node-v1/index)\n\nCSINode holds information about all CSI drivers installed on a node.\n\n##### [CSIStorageCapacity](csi-storage-capacity-v1/index)\n\nCSIStorageCapacity stores the result of one CSI GetCapacity call.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/)"
- name: ConfigMap
  id: config-and-storage-resources/config-map-v1/index
  summary: ConfigMap holds configuration data for pods to consume
  description: "# ConfigMap\n\nConfigMap holds configuration data for pods to consume.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## ConfigMap\n\nConfigMap holds configuration data for pods to consume.\n\n- **apiVersion**: v1\n\n- **kind**: ConfigMap\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **binaryData** (map\\[string\\]\\[\\]byte)\n\n  BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '\\_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.\n\n- **data** (map\\[string\\]string)\n\n  Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '\\_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.\n\n- **immutable** (boolean)\n\n  Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.\n\n## ConfigMapList\n\nConfigMapList is a resource containing a list of ConfigMap objects.\n\n- **apiVersion**: v1\n\n- **kind**: ConfigMapList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][ConfigMap](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/config-map-v1/#ConfigMap)), required\n\n  Items is the list of ConfigMaps.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/config-map-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/config-map-v1/)"
- name: Container
  id: workload-resources/pod-v1/index#Container
  summary: A single application container that you want to run within a pod
  belongs_to: Pod
  description: |-
    ## Container

    A single application container that you want to run within a pod.

    - **name** (string), required

      Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.

    ### Image

    - **image** (string)

      Container image name. More info: <https://kubernetes.io/docs/concepts/containers/images> This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.

    - **imagePullPolicy** (string)

      Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>

    ### Entrypoint

    - **command** (\[\]string)

      Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>

    - **args** (\[\]string)

      Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>

    - **workingDir** (string)

      Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.

    ### Ports

    - **ports** (\[\]ContainerPort)

      *Patch strategy: merge on key `containerPort`*

      *Map: unique values on keys `containerPort, protocol` will be kept during a merge*

      List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See <https://github.com/kubernetes/kubernetes/issues/108255>. Cannot be updated.

      *ContainerPort represents a network port in a single container.*

      - **ports.containerPort** (int32), required

        Number of port to expose on the pod's IP address. This must be a valid port number, 0 \< x \< 65536.

      - **ports.hostIP** (string)

        What host IP to bind the external port to.

      - **ports.hostPort** (int32)

        Number of port to expose on the host. If specified, this must be a valid port number, 0 \< x \< 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.

      - **ports.name** (string)

        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.

      - **ports.protocol** (string)

        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".

    ### Environment variables

    - **env** (\[\]EnvVar)

      *Patch strategy: merge on key `name`*

      List of environment variables to set in the container. Cannot be updated.

      *EnvVar represents an environment variable present in a Container.*

      - **env.name** (string), required

        Name of the environment variable. Must be a C_IDENTIFIER.

      - **env.value** (string)

        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".

      - **env.valueFrom** (EnvVarSource)

        Source for the environment variable's value. Cannot be used if value is not empty.

        *EnvVarSource represents a source for the value of an EnvVar.*

        - **env.valueFrom.configMapKeyRef** (ConfigMapKeySelector)

          Selects a key of a ConfigMap.

          *Selects a key from a ConfigMap.*

          - **env.valueFrom.configMapKeyRef.key** (string), required

            The key to select.

          - **env.valueFrom.configMapKeyRef.name** (string)

            Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

          - **env.valueFrom.configMapKeyRef.optional** (boolean)

            Specify whether the ConfigMap or its key must be defined

        - **env.valueFrom.fieldRef** ([ObjectFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/#ObjectFieldSelector))

          Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\<KEY>']`, `metadata.annotations['\<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

        - **env.valueFrom.resourceFieldRef** ([ResourceFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/#ResourceFieldSelector))

          Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

        - **env.valueFrom.secretKeyRef** (SecretKeySelector)

          Selects a key of a secret in the pod's namespace

          *SecretKeySelector selects a key of a Secret.*

          - **env.valueFrom.secretKeyRef.key** (string), required

            The key of the secret to select from. Must be a valid secret key.

          - **env.valueFrom.secretKeyRef.name** (string)

            Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

          - **env.valueFrom.secretKeyRef.optional** (boolean)

            Specify whether the Secret or its key must be defined

    - **envFrom** (\[\]EnvFromSource)

      List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.

      *EnvFromSource represents the source of a set of ConfigMaps*

      - **envFrom.configMapRef** (ConfigMapEnvSource)

        The ConfigMap to select from

        \*ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

        The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\*

        - **envFrom.configMapRef.name** (string)

          Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

        - **envFrom.configMapRef.optional** (boolean)

          Specify whether the ConfigMap must be defined

      - **envFrom.prefix** (string)

        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.

      - **envFrom.secretRef** (SecretEnvSource)

        The Secret to select from

        \*SecretEnvSource selects a Secret to populate the environment variables with.

        The contents of the target Secret's Data field will represent the key-value pairs as environment variables.\*

        - **envFrom.secretRef.name** (string)

          Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

        - **envFrom.secretRef.optional** (boolean)

          Specify whether the Secret must be defined

    ### Volumes

    - **volumeMounts** (\[\]VolumeMount)

      *Patch strategy: merge on key `mountPath`*

      Pod volumes to mount into the container's filesystem. Cannot be updated.

      *VolumeMount describes a mounting of a Volume within a container.*

      - **volumeMounts.mountPath** (string), required

        Path within the container at which the volume should be mounted. Must not contain ':'.

      - **volumeMounts.name** (string), required

        This must match the Name of a Volume.

      - **volumeMounts.mountPropagation** (string)

        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.

      - **volumeMounts.readOnly** (boolean)

        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.

      - **volumeMounts.subPath** (string)

        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).

      - **volumeMounts.subPathExpr** (string)

        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.

    - **volumeDevices** (\[\]VolumeDevice)

      *Patch strategy: merge on key `devicePath`*

      volumeDevices is the list of block devices to be used by the container.

      *volumeDevice describes a mapping of a raw block device within a container.*

      - **volumeDevices.devicePath** (string), required

        devicePath is the path inside of the container that the device will be mapped to.

      - **volumeDevices.name** (string), required

        name must match the name of a persistentVolumeClaim in the pod

    ### Resources

    - **resources** (ResourceRequirements)

      Compute Resources required by this container. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>

      *ResourceRequirements describes the compute resource requirements.*

      - **resources.claims** (\[\]ResourceClaim)

        *Map: unique values on key name will be kept during a merge*

        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

        This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.

        *ResourceClaim references one entry in PodSpec.ResourceClaims.*

        - **resources.claims.name** (string), required

          Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.

      - **resources.limits** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

        Limits describes the maximum amount of compute resources allowed. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>

      - **resources.requests** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>

    - **resizePolicy** (\[\]ContainerResizePolicy)

      *Atomic: will be replaced during a merge*

      Resources resize policy for the container.

      *ContainerResizePolicy represents resource resize policy for the container.*

      - **resizePolicy.resourceName** (string), required

        Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.

      - **resizePolicy.restartPolicy** (string), required

        Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.

    ### Lifecycle

    - **lifecycle** (Lifecycle)

      Actions that the management system should take in response to container lifecycle events. Cannot be updated.

      *Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.*

      - **lifecycle.postStart** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))

        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>

      - **lifecycle.preStop** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))

        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>

    - **terminationMessagePath** (string)

      Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.

    - **terminationMessagePolicy** (string)

      Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

    - **livenessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))

      Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>

    - **readinessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))

      Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>

    - **startupProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))

      StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>

    - **restartPolicy** (string)

      RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.

    ### Security Context

    - **securityContext** (SecurityContext)

      SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/>

      *SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.*

      - **securityContext.runAsUser** (int64)

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.runAsNonRoot** (boolean)

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

      - **securityContext.runAsGroup** (int64)

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.readOnlyRootFilesystem** (boolean)

        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.procMount** (string)

        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.privileged** (boolean)

        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.allowPrivilegeEscalation** (boolean)

        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.capabilities** (Capabilities)

        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.

        *Adds and removes POSIX capabilities from running containers.*

        - **securityContext.capabilities.add** (\[\]string)

          Added capabilities

        - **securityContext.capabilities.drop** (\[\]string)

          Removed capabilities

      - **securityContext.seccompProfile** (SeccompProfile)

        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.

        *SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.*

        - **securityContext.seccompProfile.type** (string), required

          type indicates which kind of seccomp profile will be applied. Valid options are:

          Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

        - **securityContext.seccompProfile.localhostProfile** (string)

          localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.

      - **securityContext.seLinuxOptions** (SELinuxOptions)

        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.

        *SELinuxOptions are the labels to be applied to the container*

        - **securityContext.seLinuxOptions.level** (string)

          Level is SELinux level label that applies to the container.

        - **securityContext.seLinuxOptions.role** (string)

          Role is a SELinux role label that applies to the container.

        - **securityContext.seLinuxOptions.type** (string)

          Type is a SELinux type label that applies to the container.

        - **securityContext.seLinuxOptions.user** (string)

          User is a SELinux user label that applies to the container.

      - **securityContext.windowsOptions** (WindowsSecurityContextOptions)

        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.

        *WindowsSecurityContextOptions contain Windows-specific options and credentials.*

        - **securityContext.windowsOptions.gmsaCredentialSpec** (string)

          GMSACredentialSpec is where the GMSA admission webhook (<https://github.com/kubernetes-sigs/windows-gmsa>) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.

        - **securityContext.windowsOptions.gmsaCredentialSpecName** (string)

          GMSACredentialSpecName is the name of the GMSA credential spec to use.

        - **securityContext.windowsOptions.hostProcess** (boolean)

          HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.

        - **securityContext.windowsOptions.runAsUserName** (string)

          The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

    ### Debugging

    - **stdin** (boolean)

      Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.

    - **stdinOnce** (boolean)

      Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false

    - **tty** (boolean)

      Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.

    &nbsp;
- name: continue
  id: common-parameters/common-parameters/index#continue
  summary: The continue option should be set when retrieving more results from the server
  belongs_to: Common Parameters
  description: |-
    ## continue

    The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
- name: ControllerRevision
  id: workload-resources/controller-revision-v1/index
  summary: ControllerRevision implements an immutable snapshot of state data
  description: "# ControllerRevision\n\nControllerRevision implements an immutable snapshot of state data.\n\n`apiVersion: apps/v1`\n\n`import \"k8s.io/api/apps/v1\"`\n\n## ControllerRevision\n\nControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.\n\n- **apiVersion**: apps/v1\n\n- **kind**: ControllerRevision\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **revision** (int64), required\n\n  Revision indicates the revision of the state represented by Data.\n\n- **data** (RawExtension)\n\n  Data is the serialized representation of the state.\n\n  \\*RawExtension is used to hold extensions in external versions.\n\n  To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n  // Internal package:\n\n  type MyAPIObject struct { runtime.TypeMeta `json:\",inline\"` MyPlugin runtime.Object `json:\"myPlugin\"` }\n\n  type PluginA struct { AOption string `json:\"aOption\"` }\n\n  // External package:\n\n  type MyAPIObject struct { runtime.TypeMeta `json:\",inline\"` MyPlugin runtime.RawExtension `json:\"myPlugin\"` }\n\n  type PluginA struct { AOption string `json:\"aOption\"` }\n\n  // On the wire, the JSON will look something like this:\n\n  { \"kind\":\"MyAPIObject\", \"apiVersion\":\"v1\", \"myPlugin\": { \"kind\":\"PluginA\", \"aOption\":\"foo\", }, }\n\n  So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)\\*\n\n## ControllerRevisionList\n\nControllerRevisionList is a resource containing a list of ControllerRevision objects.\n\n- **apiVersion**: apps/v1\n\n- **kind**: ControllerRevisionList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][ControllerRevision](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/controller-revision-v1/#ControllerRevision)), required\n\n  Items is the list of ControllerRevisions\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/controller-revision-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/controller-revision-v1/)"
- name: CronJob
  id: workload-resources/cron-job-v1/index
  summary: CronJob represents the configuration of a single cron job
  description: "# CronJob\n\nCronJob represents the configuration of a single cron job.\n\n`apiVersion: batch/v1`\n\n`import \"k8s.io/api/batch/v1\"`\n\n## CronJob\n\nCronJob represents the configuration of a single cron job.\n\n- **apiVersion**: batch/v1\n\n- **kind**: CronJob\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([CronJobSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/#CronJobSpec))\n\n  Specification of the desired behavior of a cron job, including the schedule. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([CronJobStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/#CronJobStatus))\n\n  Current status of a cron job. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## CronJobSpec\n\nCronJobSpec describes how the job execution will look like and when it will actually run.\n\n- **jobTemplate** (JobTemplateSpec), required\n\n  Specifies the job that will be created when executing a CronJob.\n\n  *JobTemplateSpec describes the data a Job should have when created from a template*\n\n  - **jobTemplate.metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n    Standard object's metadata of the jobs created from this template. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n  - **jobTemplate.spec** ([JobSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/#JobSpec))\n\n    Specification of the desired behavior of the job. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **schedule** (string), required\n\n  The schedule in Cron format, see <https://en.wikipedia.org/wiki/Cron>.\n\n- **timeZone** (string)\n\n  The time zone name for the given schedule, see <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in <https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones>\n\n- **concurrencyPolicy** (string)\n\n  Specifies how to treat concurrent executions of a Job. Valid values are:\n\n  - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one\n\n- **startingDeadlineSeconds** (int64)\n\n  Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.\n\n- **suspend** (boolean)\n\n  This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false.\n\n- **successfulJobsHistoryLimit** (int32)\n\n  The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.\n\n- **failedJobsHistoryLimit** (int32)\n\n  The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.\n\n## CronJobStatus\n\nCronJobStatus represents the current state of a cron job.\n\n- **active** (\\[\\][ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n  *Atomic: will be replaced during a merge*\n\n  A list of pointers to currently running jobs.\n\n- **lastScheduleTime** (Time)\n\n  Information when was the last time the job was successfully scheduled.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **lastSuccessfulTime** (Time)\n\n  Information when was the last time the job successfully completed.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n## CronJobList\n\nCronJobList is a collection of cron jobs.\n\n- **apiVersion**: batch/v1\n\n- **kind**: CronJobList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][CronJob](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/#CronJob)), required\n\n  items is the list of CronJobs.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/)"
- name: CronJob.Spec
  id: workload-resources/cron-job-v1/index#CronJobSpec
  summary: CronJobSpec describes how the job execution will look like and when it will actually run
  belongs_to: CronJob
  description: |-
    ## CronJobSpec

    CronJobSpec describes how the job execution will look like and when it will actually run.

    - **jobTemplate** (JobTemplateSpec), required

      Specifies the job that will be created when executing a CronJob.

      *JobTemplateSpec describes the data a Job should have when created from a template*

      - **jobTemplate.metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

        Standard object's metadata of the jobs created from this template. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>

      - **jobTemplate.spec** ([JobSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/#JobSpec))

        Specification of the desired behavior of the job. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>

    - **schedule** (string), required

      The schedule in Cron format, see <https://en.wikipedia.org/wiki/Cron>.

    - **timeZone** (string)

      The time zone name for the given schedule, see <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in <https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones>

    - **concurrencyPolicy** (string)

      Specifies how to treat concurrent executions of a Job. Valid values are:

      - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one

    - **startingDeadlineSeconds** (int64)

      Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.

    - **suspend** (boolean)

      This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false.

    - **successfulJobsHistoryLimit** (int32)

      The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.

    - **failedJobsHistoryLimit** (int32)

      The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.

    &nbsp;
- name: CronJob.Status
  id: workload-resources/cron-job-v1/index#CronJobStatus
  summary: CronJobStatus represents the current state of a cron job
  belongs_to: CronJob
  description: "## CronJobStatus\n\nCronJobStatus represents the current state of a cron job.\n\n- **active** (\\[\\][ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n  *Atomic: will be replaced during a merge*\n\n  A list of pointers to currently running jobs.\n\n- **lastScheduleTime** (Time)\n\n  Information when was the last time the job was successfully scheduled.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **lastSuccessfulTime** (Time)\n\n  Information when was the last time the job successfully completed.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n## CronJobList\n\nCronJobList is a collection of cron jobs.\n\n- **apiVersion**: batch/v1\n\n- **kind**: CronJobList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][CronJob](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/#CronJob)), required\n\n  items is the list of CronJobs.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/)"
- name: CSIDriver
  id: config-and-storage-resources/csi-driver-v1/index
  summary: CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster
  description: "# CSIDriver\n\nCSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster.\n\n`apiVersion: storage.k8s.io/v1`\n\n`import \"k8s.io/api/storage/v1\"`\n\n## CSIDriver\n\nCSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSIDriver\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (\\[a-z0-9A-Z\\]) with dashes (-), dots (.), and alphanumerics between. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([CSIDriverSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/#CSIDriverSpec)), required\n\n  spec represents the specification of the CSI Driver.\n\n## CSIDriverSpec\n\nCSIDriverSpec is the specification of a CSIDriver.\n\n- **attachRequired** (boolean)\n\n  attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.\n\n  This field is immutable.\n\n- **fsGroupPolicy** (string)\n\n  fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.\n\n  This field is immutable.\n\n  Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.\n\n- **podInfoOnMount** (boolean)\n\n  podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.\n\n  The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.\n\n  The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" if the volume is an ephemeral inline volume defined by a CSIVolumeSource, otherwise \"false\"\n\n  \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\n  This field is immutable.\n\n- **requiresRepublish** (boolean)\n\n  requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.\n\n  Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.\n\n- **seLinuxMount** (boolean)\n\n  seLinuxMount specifies if the CSI driver supports \"-o context\" mount option.\n\n  When \"true\", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with \"-o context=xyz\" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.\n\n  When \"false\", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.\n\n  Default is \"false\".\n\n- **storageCapacity** (boolean)\n\n  storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.\n\n  The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\n  Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\n  This field was immutable in Kubernetes \\<= 1.22 and now is mutable.\n\n- **tokenRequests** (\\[\\]TokenRequest)\n\n  *Atomic: will be replaced during a merge*\n\n  tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: \"csi.storage.k8s.io/serviceAccount.tokens\": { \"\\<audience\\>\": { \"token\": \\<token\\>, \"expirationTimestamp\": \\<expiration timestamp in RFC3339\\>, }, ... }\n\n  Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.\n\n  *TokenRequest contains parameters of a service account token.*\n\n  - **tokenRequests.audience** (string), required\n\n    audience is the intended audience of the token in \"TokenRequestSpec\". It will default to the audiences of kube apiserver.\n\n  - **tokenRequests.expirationSeconds** (int64)\n\n    expirationSeconds is the duration of validity of the token in \"TokenRequestSpec\". It has the same default value of \"ExpirationSeconds\" in \"TokenRequestSpec\".\n\n- **volumeLifecycleModes** (\\[\\]string)\n\n  *Set: unique values will be kept during a merge*\n\n  volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.\n\n  The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.\n\n  For more information about implementing this mode, see <https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html> A driver can support one or more of these modes and more modes may be added in the future.\n\n  This field is beta. This field is immutable.\n\n## CSIDriverList\n\nCSIDriverList is a collection of CSIDriver objects.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSIDriverList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][CSIDriver](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/#CSIDriver)), required\n\n  items is the list of CSIDriver\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/)"
- name: CSIDriver.Spec
  id: config-and-storage-resources/csi-driver-v1/index#CSIDriverSpec
  summary: CSIDriverSpec is the specification of a CSIDriver
  belongs_to: CSIDriver
  description: "## CSIDriverSpec\n\nCSIDriverSpec is the specification of a CSIDriver.\n\n- **attachRequired** (boolean)\n\n  attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.\n\n  This field is immutable.\n\n- **fsGroupPolicy** (string)\n\n  fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.\n\n  This field is immutable.\n\n  Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.\n\n- **podInfoOnMount** (boolean)\n\n  podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.\n\n  The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.\n\n  The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" if the volume is an ephemeral inline volume defined by a CSIVolumeSource, otherwise \"false\"\n\n  \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\n  This field is immutable.\n\n- **requiresRepublish** (boolean)\n\n  requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.\n\n  Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.\n\n- **seLinuxMount** (boolean)\n\n  seLinuxMount specifies if the CSI driver supports \"-o context\" mount option.\n\n  When \"true\", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with \"-o context=xyz\" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.\n\n  When \"false\", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.\n\n  Default is \"false\".\n\n- **storageCapacity** (boolean)\n\n  storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.\n\n  The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\n  Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\n  This field was immutable in Kubernetes \\<= 1.22 and now is mutable.\n\n- **tokenRequests** (\\[\\]TokenRequest)\n\n  *Atomic: will be replaced during a merge*\n\n  tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: \"csi.storage.k8s.io/serviceAccount.tokens\": { \"\\<audience\\>\": { \"token\": \\<token\\>, \"expirationTimestamp\": \\<expiration timestamp in RFC3339\\>, }, ... }\n\n  Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.\n\n  *TokenRequest contains parameters of a service account token.*\n\n  - **tokenRequests.audience** (string), required\n\n    audience is the intended audience of the token in \"TokenRequestSpec\". It will default to the audiences of kube apiserver.\n\n  - **tokenRequests.expirationSeconds** (int64)\n\n    expirationSeconds is the duration of validity of the token in \"TokenRequestSpec\". It has the same default value of \"ExpirationSeconds\" in \"TokenRequestSpec\".\n\n- **volumeLifecycleModes** (\\[\\]string)\n\n  *Set: unique values will be kept during a merge*\n\n  volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.\n\n  The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.\n\n  For more information about implementing this mode, see <https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html> A driver can support one or more of these modes and more modes may be added in the future.\n\n  This field is beta. This field is immutable.\n\n## CSIDriverList\n\nCSIDriverList is a collection of CSIDriver objects.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSIDriverList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][CSIDriver](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/#CSIDriver)), required\n\n  items is the list of CSIDriver\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-driver-v1/)"
- name: CSINode
  id: config-and-storage-resources/csi-node-v1/index
  summary: CSINode holds information about all CSI drivers installed on a node
  description: "# CSINode\n\nCSINode holds information about all CSI drivers installed on a node.\n\n`apiVersion: storage.k8s.io/v1`\n\n`import \"k8s.io/api/storage/v1\"`\n\n## CSINode\n\nCSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSINode\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. metadata.name must be the Kubernetes node name.\n\n- **spec** ([CSINodeSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/#CSINodeSpec)), required\n\n  spec is the specification of CSINode\n\n## CSINodeSpec\n\nCSINodeSpec holds information about the specification of all CSI drivers installed on a node\n\n- **drivers** (\\[\\]CSINodeDriver), required\n\n  *Patch strategy: merge on key `name`*\n\n  drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.\n\n  *CSINodeDriver holds information about the specification of one CSI driver installed on a node*\n\n  - **drivers.name** (string), required\n\n    name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.\n\n  - **drivers.nodeID** (string), required\n\n    nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.\n\n  - **drivers.allocatable** (VolumeNodeResources)\n\n    allocatable represents the volume resources of a node that are available for scheduling. This field is beta.\n\n    *VolumeNodeResources is a set of resource limits for scheduling of volumes.*\n\n    - **drivers.allocatable.count** (int32)\n\n      count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.\n\n  - **drivers.topologyKeys** (\\[\\]string)\n\n    topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.\n\n## CSINodeList\n\nCSINodeList is a collection of CSINode objects.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSINodeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][CSINode](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/#CSINode)), required\n\n  items is the list of CSINode\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/)"
- name: CSINode.Spec
  id: config-and-storage-resources/csi-node-v1/index#CSINodeSpec
  summary: drivers is a list of information of all CSI Drivers existing on a node
  belongs_to: CSINode
  description: "## CSINodeSpec\n\nCSINodeSpec holds information about the specification of all CSI drivers installed on a node\n\n- **drivers** (\\[\\]CSINodeDriver), required\n\n  *Patch strategy: merge on key `name`*\n\n  drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.\n\n  *CSINodeDriver holds information about the specification of one CSI driver installed on a node*\n\n  - **drivers.name** (string), required\n\n    name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.\n\n  - **drivers.nodeID** (string), required\n\n    nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.\n\n  - **drivers.allocatable** (VolumeNodeResources)\n\n    allocatable represents the volume resources of a node that are available for scheduling. This field is beta.\n\n    *VolumeNodeResources is a set of resource limits for scheduling of volumes.*\n\n    - **drivers.allocatable.count** (int32)\n\n      count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.\n\n  - **drivers.topologyKeys** (\\[\\]string)\n\n    topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.\n\n## CSINodeList\n\nCSINodeList is a collection of CSINode objects.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSINodeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][CSINode](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/#CSINode)), required\n\n  items is the list of CSINode\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-node-v1/)"
- name: CSIStorageCapacity
  id: config-and-storage-resources/csi-storage-capacity-v1/index
  summary: CSIStorageCapacity stores the result of one CSI GetCapacity call
  description: "# CSIStorageCapacity\n\nCSIStorageCapacity stores the result of one CSI GetCapacity call.\n\n`apiVersion: storage.k8s.io/v1`\n\n`import \"k8s.io/api/storage/v1\"`\n\n## CSIStorageCapacity\n\nCSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment. This can be used when considering where to instantiate new PersistentVolumes.\n\nFor example this can express things like: - StorageClass \"standard\" has \"1234 GiB\" available in \"topology.kubernetes.io/zone=us-east1\" - StorageClass \"localssd\" has \"10 GiB\" available in \"kubernetes.io/hostname=knode-abc123\"\n\nThe following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero\n\nThe producer of these objects can decide which approach is more suitable.\n\nThey are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSIStorageCapacity\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-\\<uuid\\>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\n  Objects are namespaced.\n\n  More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **storageClassName** (string), required\n\n  storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.\n\n- **capacity** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\n  The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.\n\n- **maximumVolumeSize** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\n  This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.\n\n- **nodeTopology** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n  nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.\n\n## CSIStorageCapacityList\n\nCSIStorageCapacityList is a collection of CSIStorageCapacity objects.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: CSIStorageCapacityList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][CSIStorageCapacity](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-storage-capacity-v1/#CSIStorageCapacity)), required\n\n  *Map: unique values on key name will be kept during a merge*\n\n  items is the list of CSIStorageCapacity objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-storage-capacity-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/csi-storage-capacity-v1/)"
- name: CustomResourceDefinition
  id: extend-resources/custom-resource-definition-v1/index
  summary: CustomResourceDefinition represents a resource that should be exposed on the API server
  description: "# CustomResourceDefinition\n\nCustomResourceDefinition represents a resource that should be exposed on the API server.\n\n`apiVersion: apiextensions.k8s.io/v1`\n\n`import \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"`\n\n## CustomResourceDefinition\n\nCustomResourceDefinition represents a resource that should be exposed on the API server. Its name MUST be in the format \\<.spec.name\\>.\\<.spec.group\\>.\n\n- **apiVersion**: apiextensions.k8s.io/v1\n\n- **kind**: CustomResourceDefinition\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([CustomResourceDefinitionSpec](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#CustomResourceDefinitionSpec)), required\n\n  spec describes how the user wants the resources to appear\n\n- **status** ([CustomResourceDefinitionStatus](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#CustomResourceDefinitionStatus))\n\n  status indicates the actual state of the CustomResourceDefinition\n\n## CustomResourceDefinitionSpec\n\nCustomResourceDefinitionSpec describes how a user wants their resource to appear\n\n- **group** (string), required\n\n  group is the API group of the defined custom resource. The custom resources are served under `/apis/\\<group>/...`. Must match the name of the CustomResourceDefinition (in the form `\\<names.plural>.\\<group>`).\n\n- **names** (CustomResourceDefinitionNames), required\n\n  names specify the resource and kind names for the custom resource.\n\n  *CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition*\n\n  - **names.kind** (string), required\n\n    kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.\n\n  - **names.plural** (string), required\n\n    plural is the plural name of the resource to serve. The custom resources are served under `/apis/\\<group>/\\<version>/.../\\<plural>`. Must match the name of the CustomResourceDefinition (in the form `\\<names.plural>.\\<group>`). Must be all lowercase.\n\n  - **names.categories** (\\[\\]string)\n\n    categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.\n\n  - **names.listKind** (string)\n\n    listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".\n\n  - **names.shortNames** (\\[\\]string)\n\n    shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get \\<shortname>`. It must be all lowercase.\n\n  - **names.singular** (string)\n\n    singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.\n\n- **scope** (string), required\n\n  scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.\n\n- **versions** (\\[\\]CustomResourceDefinitionVersion), required\n\n  versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA \\> beta \\> alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.\n\n  *CustomResourceDefinitionVersion describes a version for CRD.*\n\n  - **versions.name** (string), required\n\n    name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/\\<group>/\\<version>/...` if `served` is true.\n\n  - **versions.served** (boolean), required\n\n    served is a flag enabling/disabling this version from being served via REST APIs\n\n  - **versions.storage** (boolean), required\n\n    storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.\n\n  - **versions.additionalPrinterColumns** (\\[\\]CustomResourceColumnDefinition)\n\n    additionalPrinterColumns specifies additional columns returned in Table output. See <https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables> for details. If no columns are specified, a single column displaying the age of the custom resource is used.\n\n    *CustomResourceColumnDefinition specifies a column for server side printing.*\n\n    - **versions.additionalPrinterColumns.jsonPath** (string), required\n\n      jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.\n\n    - **versions.additionalPrinterColumns.name** (string), required\n\n      name is a human readable name for the column.\n\n    - **versions.additionalPrinterColumns.type** (string), required\n\n      type is an OpenAPI type definition for this column. See <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types> for details.\n\n    - **versions.additionalPrinterColumns.description** (string)\n\n      description is a human readable description of this column.\n\n    - **versions.additionalPrinterColumns.format** (string)\n\n      format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types> for details.\n\n    - **versions.additionalPrinterColumns.priority** (int32)\n\n      priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.\n\n  - **versions.deprecated** (boolean)\n\n    deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.\n\n  - **versions.deprecationWarning** (string)\n\n    deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.\n\n  - **versions.schema** (CustomResourceValidation)\n\n    schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.\n\n    *CustomResourceValidation is a list of validation methods for CustomResources.*\n\n    - **versions.schema.openAPIV3Schema** ([JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n      openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.\n\n  - **versions.subresources** (CustomResourceSubresources)\n\n    subresources specify what subresources this version of the defined custom resource have.\n\n    *CustomResourceSubresources defines the status and scale subresources for CustomResources.*\n\n    - **versions.subresources.scale** (CustomResourceSubresourceScale)\n\n      scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.\n\n      *CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.*\n\n      - **versions.subresources.scale.specReplicasPath** (string), required\n\n        specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.\n\n      - **versions.subresources.scale.statusReplicasPath** (string), required\n\n        statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.\n\n      - **versions.subresources.scale.labelSelectorPath** (string)\n\n        labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: <https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource> If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.\n\n    - **versions.subresources.status** (CustomResourceSubresourceStatus)\n\n      status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.\n\n      *CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, \\* exposes a /status subresource for the custom resource \\* PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza \\* PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza*\n\n- **conversion** (CustomResourceConversion)\n\n  conversion defines conversion settings for the CRD.\n\n  *CustomResourceConversion describes how to convert different versions of a CR.*\n\n  - **conversion.strategy** (string), required\n\n    strategy specifies how custom resources are converted between versions. Allowed values are: - `\"None\"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `\"Webhook\"`: API Server will call to an external webhook to do the conversion. Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.\n\n  - **conversion.webhook** (WebhookConversion)\n\n    webhook describes how to call the conversion webhook. Required when `strategy` is set to `\"Webhook\"`.\n\n    *WebhookConversion describes how to call a conversion webhook*\n\n    - **conversion.webhook.conversionReviewVersions** (\\[\\]string), required\n\n      conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.\n\n    - **conversion.webhook.clientConfig** (WebhookClientConfig)\n\n      clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.\n\n      *WebhookClientConfig contains the information to make a TLS connection with the webhook.*\n\n      - **conversion.webhook.clientConfig.caBundle** (\\[\\]byte)\n\n        caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.\n\n      - **conversion.webhook.clientConfig.service** (ServiceReference)\n\n        service is a reference to the service for this webhook. Either service or url must be specified.\n\n        If the webhook is running within the cluster, then you should use `service`.\n\n        *ServiceReference holds a reference to Service.legacy.k8s.io*\n\n        - **conversion.webhook.clientConfig.service.name** (string), required\n\n          name is the name of the service. Required\n\n        - **conversion.webhook.clientConfig.service.namespace** (string), required\n\n          namespace is the namespace of the service. Required\n\n        - **conversion.webhook.clientConfig.service.path** (string)\n\n          path is an optional URL path at which the webhook will be contacted.\n\n        - **conversion.webhook.clientConfig.service.port** (int32)\n\n          port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.\n\n      - **conversion.webhook.clientConfig.url** (string)\n\n        url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\n        The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\n        Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\n        The scheme must be \"https\"; the URL must begin with \"https://\".\n\n        A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\n        Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.\n\n- **preserveUnknownFields** (boolean)\n\n  preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See <https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning> for details.\n\n## JSONSchemaProps\n\nJSONSchemaProps is a JSON-Schema following Specification Draft 4 (<http://json-schema.org/)>.\n\n- **$ref** (string)\n\n- **$schema** (string)\n\n- **additionalItems** (JSONSchemaPropsOrBool)\n\n  *JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.*\n\n- **additionalProperties** (JSONSchemaPropsOrBool)\n\n  *JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.*\n\n- **allOf** (\\[\\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n- **anyOf** (\\[\\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n- **default** (JSON)\n\n  default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.\n\n  *JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, \\[\\]interface{}, map\\[string\\]interface{} and nil.*\n\n- **definitions** (map\\[string\\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n- **dependencies** (map\\[string\\]JSONSchemaPropsOrStringArray)\n\n  *JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.*\n\n- **description** (string)\n\n- **enum** (\\[\\]JSON)\n\n  *JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, \\[\\]interface{}, map\\[string\\]interface{} and nil.*\n\n- **example** (JSON)\n\n  *JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, \\[\\]interface{}, map\\[string\\]interface{} and nil.*\n\n- **exclusiveMaximum** (boolean)\n\n- **exclusiveMinimum** (boolean)\n\n- **externalDocs** (ExternalDocumentation)\n\n  *ExternalDocumentation allows referencing an external resource for extended documentation.*\n\n  - **externalDocs.description** (string)\n\n  - **externalDocs.url** (string)\n\n- **format** (string)\n\n  format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 \\[RFC1034\\]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^\\[0-9a-f\\]{8}-?\\[0-9a-f\\]{4}-?\\[0-9a-f\\]{4}-?\\[0-9a-f\\]{4}-?\\[0-9a-f\\]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^\\[0-9a-f\\]{8}-?\\[0-9a-f\\]{4}-?3\\[0-9a-f\\]{3}-?\\[0-9a-f\\]{4}-?\\[0-9a-f\\]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^\\[0-9a-f\\]{8}-?\\[0-9a-f\\]{4}-?4\\[0-9a-f\\]{3}-?\\[89ab\\]\\[0-9a-f\\]{3}-?\\[0-9a-f\\]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^\\[0-9a-f\\]{8}-?\\[0-9a-f\\]{4}-?5\\[0-9a-f\\]{3}-?\\[89ab\\]\\[0-9a-f\\]{3}-?\\[0-9a-f\\]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4\\[0-9\\]{12}(?:\\[0-9\\]{3})?\\|5\\[1-5\\]\\[0-9\\]{14}\\|6(?:011\\|5\\[0-9\\]\\[0-9\\])\\[0-9\\]{12}\\|3\\[47\\]\\[0-9\\]{13}\\|3(?:0\\[0-5\\]\\|\\[68\\]\\[0-9\\])\\[0-9\\]{11}\\|(?:2131\\|1800\\|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}\\[- \\]?\\d{2}\\[- \\]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?(\\[0-9a-fA-F\\]{3}\\|\\[0-9a-fA-F\\]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.\n\n- **id** (string)\n\n- **items** (JSONSchemaPropsOrArray)\n\n  *JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.*\n\n- **maxItems** (int64)\n\n- **maxLength** (int64)\n\n- **maxProperties** (int64)\n\n- **maximum** (double)\n\n- **minItems** (int64)\n\n- **minLength** (int64)\n\n- **minProperties** (int64)\n\n- **minimum** (double)\n\n- **multipleOf** (double)\n\n- **not** ([JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n- **nullable** (boolean)\n\n- **oneOf** (\\[\\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n- **pattern** (string)\n\n- **patternProperties** (map\\[string\\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n- **properties** (map\\[string\\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))\n\n- **required** (\\[\\]string)\n\n- **title** (string)\n\n- **type** (string)\n\n- **uniqueItems** (boolean)\n\n- **x-kubernetes-embedded-resource** (boolean)\n\n  x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).\n\n- **x-kubernetes-int-or-string** (boolean)\n\n  x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:\n\n  1.  anyOf:\n      - type: integer\n      - type: string\n  2.  allOf:\n      - anyOf:\n        - type: integer\n        - type: string\n      - ... zero or more\n\n- **x-kubernetes-list-map-keys** (\\[\\]string)\n\n  x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.\n\n  This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).\n\n  The properties specified must either be required or have a default value, to ensure those properties are present for all list items.\n\n- **x-kubernetes-list-type** (string)\n\n  x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n  1.  `atomic`: the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...).\n  2.  `set`: Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with x-kubernetes-map-type `atomic` or an array with x-kubernetes-list-type `atomic`.\n  3.  `map`: These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type object. Defaults to atomic for arrays.\n\n- **x-kubernetes-map-type** (string)\n\n  x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:\n\n  1.  `granular`: These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps.\n  2.  `atomic`: the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated.\n\n- **x-kubernetes-preserve-unknown-fields** (boolean)\n\n  x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.\n\n- **x-kubernetes-validations** (\\[\\]ValidationRule)\n\n  *Patch strategy: merge on key `rule`*\n\n  *Map: unique values on key rule will be kept during a merge*\n\n  x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.\n\n  *ValidationRule describes a validation rule written in the CEL expression language.*\n\n  - **x-kubernetes-validations.rule** (string), required\n\n    Rule represents the expression which will be evaluated by CEL. ref: <https://github.com/google/cel-spec> The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {\"rule\": \"self.status.actual \\<= self.spec.maxDesired\"}\n\n    If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {\"rule\": \"self.components\\['Widget'\\].priority \\< 10\"} - Rule scoped to a list of integers: {\"rule\": \"self.values.all(value, value \\>= 0 && value \\< 100)\"} - Rule scoped to a string value: {\"rule\": \"self.startsWith('kube')\"}\n\n    The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.\n\n    Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an \"unknown type\". An \"unknown type\" is recursively defined as:\n\n    - A schema with no type and x-kubernetes-preserve-unknown-fields set to true\n    - An array where the items schema is of an \"unknown type\"\n    - An object where the additionalProperties schema is of an \"unknown type\"\n\n    Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '**' escapes to '**underscores**' - '.' escapes to '**dot**' - '-' escapes to '**dash**' - '/' escapes to '**slash**' - Property names that exactly match a CEL RESERVED keyword escape to '**{keyword}\\_\\_'. The keywords are: \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\", \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\". Examples:\n\n    - Rule accessing a property named \"namespace\": {\"rule\": \"self.**namespace** \\> 0\"}\n    - Rule accessing a property named \"x-prop\": {\"rule\": \"self.x\\_\\_dash\\_\\_prop \\> 0\"}\n    - Rule accessing a property named \"redact\\_\\_d\": {\"rule\": \"self.redact\\_\\_underscores\\_\\_d \\> 0\"}\n\n    Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. \\[1, 2\\] == \\[2, 1\\]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n\n    - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and non-intersecting elements in `Y` are appended, retaining their partial order.\n    - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting keys are appended, retaining their partial order.\n\n  - **x-kubernetes-validations.fieldPath** (string)\n\n    fieldPath represents the field path returned when the validation fails. It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field. e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList` It does not support list numeric index. It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info. Numeric index of array is not supported. For field name which contains special characters, use `['specialName']` to refer the field name. e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`\n\n  - **x-kubernetes-validations.message** (string)\n\n    Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\"\n\n  - **x-kubernetes-validations.messageExpression** (string)\n\n    MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: \"x must be less than max (\"+string(self.max)+\")\"\n\n  - **x-kubernetes-validations.reason** (string)\n\n    reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule. The HTTP status code returned to the caller will match the reason of the reason of the first failed validation rule. The currently supported reasons are: \"FieldValueInvalid\", \"FieldValueForbidden\", \"FieldValueRequired\", \"FieldValueDuplicate\". If not set, default to use \"FieldValueInvalid\". All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid.\n\n## CustomResourceDefinitionStatus\n\nCustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition\n\n- **acceptedNames** (CustomResourceDefinitionNames)\n\n  acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.\n\n  *CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition*\n\n  - **acceptedNames.kind** (string), required\n\n    kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.\n\n  - **acceptedNames.plural** (string), required\n\n    plural is the plural name of the resource to serve. The custom resources are served under `/apis/\\<group>/\\<version>/.../\\<plural>`. Must match the name of the CustomResourceDefinition (in the form `\\<names.plural>.\\<group>`). Must be all lowercase.\n\n  - **acceptedNames.categories** (\\[\\]string)\n\n    categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.\n\n  - **acceptedNames.listKind** (string)\n\n    listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".\n\n  - **acceptedNames.shortNames** (\\[\\]string)\n\n    shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get \\<shortname>`. It must be all lowercase.\n\n  - **acceptedNames.singular** (string)\n\n    singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.\n\n- **conditions** (\\[\\]CustomResourceDefinitionCondition)\n\n  *Map: unique values on key type will be kept during a merge*\n\n  conditions indicate state for particular aspects of a CustomResourceDefinition\n\n  *CustomResourceDefinitionCondition contains details for the current condition of this pod.*\n\n  - **conditions.status** (string), required\n\n    status is the status of the condition. Can be True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    type is the type of the condition. Types include Established, NamesAccepted and Terminating.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message is a human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    reason is a unique, one-word, CamelCase reason for the condition's last transition.\n\n- **storedVersions** (\\[\\]string)\n\n  storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.\n\n## CustomResourceDefinitionList\n\nCustomResourceDefinitionList is a list of CustomResourceDefinition objects.\n\n- **items** (\\[\\][CustomResourceDefinition](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#CustomResourceDefinition)), required\n\n  items list individual CustomResourceDefinition objects\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/)"
- name: CustomResourceDefinition.Spec
  id: extend-resources/custom-resource-definition-v1/index#CustomResourceDefinitionSpec
  summary: group is the API group of the defined custom resource
  belongs_to: CustomResourceDefinition
  description: |-
    ## CustomResourceDefinitionSpec

    CustomResourceDefinitionSpec describes how a user wants their resource to appear

    - **group** (string), required

      group is the API group of the defined custom resource. The custom resources are served under `/apis/\<group>/...`. Must match the name of the CustomResourceDefinition (in the form `\<names.plural>.\<group>`).

    - **names** (CustomResourceDefinitionNames), required

      names specify the resource and kind names for the custom resource.

      *CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition*

      - **names.kind** (string), required

        kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.

      - **names.plural** (string), required

        plural is the plural name of the resource to serve. The custom resources are served under `/apis/\<group>/\<version>/.../\<plural>`. Must match the name of the CustomResourceDefinition (in the form `\<names.plural>.\<group>`). Must be all lowercase.

      - **names.categories** (\[\]string)

        categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.

      - **names.listKind** (string)

        listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".

      - **names.shortNames** (\[\]string)

        shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get \<shortname>`. It must be all lowercase.

      - **names.singular** (string)

        singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.

    - **scope** (string), required

      scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.

    - **versions** (\[\]CustomResourceDefinitionVersion), required

      versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA \> beta \> alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.

      *CustomResourceDefinitionVersion describes a version for CRD.*

      - **versions.name** (string), required

        name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/\<group>/\<version>/...` if `served` is true.

      - **versions.served** (boolean), required

        served is a flag enabling/disabling this version from being served via REST APIs

      - **versions.storage** (boolean), required

        storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.

      - **versions.additionalPrinterColumns** (\[\]CustomResourceColumnDefinition)

        additionalPrinterColumns specifies additional columns returned in Table output. See <https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables> for details. If no columns are specified, a single column displaying the age of the custom resource is used.

        *CustomResourceColumnDefinition specifies a column for server side printing.*

        - **versions.additionalPrinterColumns.jsonPath** (string), required

          jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.

        - **versions.additionalPrinterColumns.name** (string), required

          name is a human readable name for the column.

        - **versions.additionalPrinterColumns.type** (string), required

          type is an OpenAPI type definition for this column. See <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types> for details.

        - **versions.additionalPrinterColumns.description** (string)

          description is a human readable description of this column.

        - **versions.additionalPrinterColumns.format** (string)

          format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types> for details.

        - **versions.additionalPrinterColumns.priority** (int32)

          priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.

      - **versions.deprecated** (boolean)

        deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.

      - **versions.deprecationWarning** (string)

        deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.

      - **versions.schema** (CustomResourceValidation)

        schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.

        *CustomResourceValidation is a list of validation methods for CustomResources.*

        - **versions.schema.openAPIV3Schema** ([JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

          openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.

      - **versions.subresources** (CustomResourceSubresources)

        subresources specify what subresources this version of the defined custom resource have.

        *CustomResourceSubresources defines the status and scale subresources for CustomResources.*

        - **versions.subresources.scale** (CustomResourceSubresourceScale)

          scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.

          *CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.*

          - **versions.subresources.scale.specReplicasPath** (string), required

            specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.

          - **versions.subresources.scale.statusReplicasPath** (string), required

            statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.

          - **versions.subresources.scale.labelSelectorPath** (string)

            labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: <https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource> If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.

        - **versions.subresources.status** (CustomResourceSubresourceStatus)

          status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.

          *CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, \* exposes a /status subresource for the custom resource \* PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza \* PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza*

    - **conversion** (CustomResourceConversion)

      conversion defines conversion settings for the CRD.

      *CustomResourceConversion describes how to convert different versions of a CR.*

      - **conversion.strategy** (string), required

        strategy specifies how custom resources are converted between versions. Allowed values are: - `"None"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `"Webhook"`: API Server will call to an external webhook to do the conversion. Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.

      - **conversion.webhook** (WebhookConversion)

        webhook describes how to call the conversion webhook. Required when `strategy` is set to `"Webhook"`.

        *WebhookConversion describes how to call a conversion webhook*

        - **conversion.webhook.conversionReviewVersions** (\[\]string), required

          conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.

        - **conversion.webhook.clientConfig** (WebhookClientConfig)

          clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.

          *WebhookClientConfig contains the information to make a TLS connection with the webhook.*

          - **conversion.webhook.clientConfig.caBundle** (\[\]byte)

            caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.

          - **conversion.webhook.clientConfig.service** (ServiceReference)

            service is a reference to the service for this webhook. Either service or url must be specified.

            If the webhook is running within the cluster, then you should use `service`.

            *ServiceReference holds a reference to Service.legacy.k8s.io*

            - **conversion.webhook.clientConfig.service.name** (string), required

              name is the name of the service. Required

            - **conversion.webhook.clientConfig.service.namespace** (string), required

              namespace is the namespace of the service. Required

            - **conversion.webhook.clientConfig.service.path** (string)

              path is an optional URL path at which the webhook will be contacted.

            - **conversion.webhook.clientConfig.service.port** (int32)

              port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.

          - **conversion.webhook.clientConfig.url** (string)

            url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.

            The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.

            Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.

            The scheme must be "https"; the URL must begin with "https://".

            A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.

            Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.

    - **preserveUnknownFields** (boolean)

      preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See <https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning> for details.

    &nbsp;
- name: CustomResourceDefinition.Status
  id: extend-resources/custom-resource-definition-v1/index#CustomResourceDefinitionStatus
  summary: acceptedNames are the names that are actually being used to serve discovery
  belongs_to: CustomResourceDefinition
  description: "## CustomResourceDefinitionStatus\n\nCustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition\n\n- **acceptedNames** (CustomResourceDefinitionNames)\n\n  acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.\n\n  *CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition*\n\n  - **acceptedNames.kind** (string), required\n\n    kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.\n\n  - **acceptedNames.plural** (string), required\n\n    plural is the plural name of the resource to serve. The custom resources are served under `/apis/\\<group>/\\<version>/.../\\<plural>`. Must match the name of the CustomResourceDefinition (in the form `\\<names.plural>.\\<group>`). Must be all lowercase.\n\n  - **acceptedNames.categories** (\\[\\]string)\n\n    categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.\n\n  - **acceptedNames.listKind** (string)\n\n    listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".\n\n  - **acceptedNames.shortNames** (\\[\\]string)\n\n    shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get \\<shortname>`. It must be all lowercase.\n\n  - **acceptedNames.singular** (string)\n\n    singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.\n\n- **conditions** (\\[\\]CustomResourceDefinitionCondition)\n\n  *Map: unique values on key type will be kept during a merge*\n\n  conditions indicate state for particular aspects of a CustomResourceDefinition\n\n  *CustomResourceDefinitionCondition contains details for the current condition of this pod.*\n\n  - **conditions.status** (string), required\n\n    status is the status of the condition. Can be True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    type is the type of the condition. Types include Established, NamesAccepted and Terminating.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message is a human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    reason is a unique, one-word, CamelCase reason for the condition's last transition.\n\n- **storedVersions** (\\[\\]string)\n\n  storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.\n\n## CustomResourceDefinitionList\n\nCustomResourceDefinitionList is a list of CustomResourceDefinition objects.\n\n- **items** (\\[\\][CustomResourceDefinition](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#CustomResourceDefinition)), required\n\n  items list individual CustomResourceDefinition objects\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/)"
- name: DaemonSet
  id: workload-resources/daemon-set-v1/index
  summary: DaemonSet represents the configuration of a daemon set
  description: "# DaemonSet\n\nDaemonSet represents the configuration of a daemon set.\n\n`apiVersion: apps/v1`\n\n`import \"k8s.io/api/apps/v1\"`\n\n## DaemonSet\n\nDaemonSet represents the configuration of a daemon set.\n\n- **apiVersion**: apps/v1\n\n- **kind**: DaemonSet\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([DaemonSetSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/#DaemonSetSpec))\n\n  The desired behavior of this daemon set. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([DaemonSetStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/#DaemonSetStatus))\n\n  The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## DaemonSetSpec\n\nDaemonSetSpec is the specification of a daemon set.\n\n- **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required\n\n  A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>\n\n- **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required\n\n  An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). The only allowed template.spec.restartPolicy value is \"Always\". More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>\n\n- **minReadySeconds** (int32)\n\n  The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).\n\n- **updateStrategy** (DaemonSetUpdateStrategy)\n\n  An update strategy to replace existing DaemonSet pods with new pods.\n\n  *DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.*\n\n  - **updateStrategy.type** (string)\n\n    Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.\n\n  - **updateStrategy.rollingUpdate** (RollingUpdateDaemonSet)\n\n    Rolling update config params. Present only if type = \"RollingUpdate\".\n\n    *Spec to control the desired behavior of daemon set rolling update.*\n\n    - **updateStrategy.rollingUpdate.maxSurge** (IntOrString)\n\n      The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n    - **updateStrategy.rollingUpdate.maxUnavailable** (IntOrString)\n\n      The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n- **revisionHistoryLimit** (int32)\n\n  The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.\n\n## DaemonSetStatus\n\nDaemonSetStatus represents the current status of a daemon set.\n\n- **numberReady** (int32), required\n\n  numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.\n\n- **numberAvailable** (int32)\n\n  The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)\n\n- **numberUnavailable** (int32)\n\n  The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)\n\n- **numberMisscheduled** (int32), required\n\n  The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/>\n\n- **desiredNumberScheduled** (int32), required\n\n  The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: <https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/>\n\n- **currentNumberScheduled** (int32), required\n\n  The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/>\n\n- **updatedNumberScheduled** (int32)\n\n  The total number of nodes that are running updated daemon pod\n\n- **collisionCount** (int32)\n\n  Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.\n\n- **conditions** (\\[\\]DaemonSetCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a DaemonSet's current state.\n\n  *DaemonSetCondition describes the state of a DaemonSet at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of DaemonSet condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  The most recent generation observed by the daemon set controller.\n\n## DaemonSetList\n\nDaemonSetList is a collection of daemon sets.\n\n- **apiVersion**: apps/v1\n\n- **kind**: DaemonSetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][DaemonSet](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/#DaemonSet)), required\n\n  A list of daemon sets.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/)"
- name: DaemonSet.Spec
  id: workload-resources/daemon-set-v1/index#DaemonSetSpec
  summary: DaemonSetSpec is the specification of a daemon set
  belongs_to: DaemonSet
  description: |-
    ## DaemonSetSpec

    DaemonSetSpec is the specification of a daemon set.

    - **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required

      A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>

    - **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required

      An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). The only allowed template.spec.restartPolicy value is "Always". More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>

    - **minReadySeconds** (int32)

      The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).

    - **updateStrategy** (DaemonSetUpdateStrategy)

      An update strategy to replace existing DaemonSet pods with new pods.

      *DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.*

      - **updateStrategy.type** (string)

        Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.

      - **updateStrategy.rollingUpdate** (RollingUpdateDaemonSet)

        Rolling update config params. Present only if type = "RollingUpdate".

        *Spec to control the desired behavior of daemon set rolling update.*

        - **updateStrategy.rollingUpdate.maxSurge** (IntOrString)

          The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption.

          *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

        - **updateStrategy.rollingUpdate.maxUnavailable** (IntOrString)

          The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.

          *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

    - **revisionHistoryLimit** (int32)

      The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.

    &nbsp;
- name: DaemonSet.Status
  id: workload-resources/daemon-set-v1/index#DaemonSetStatus
  summary: DaemonSetStatus represents the current status of a daemon set
  belongs_to: DaemonSet
  description: "## DaemonSetStatus\n\nDaemonSetStatus represents the current status of a daemon set.\n\n- **numberReady** (int32), required\n\n  numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.\n\n- **numberAvailable** (int32)\n\n  The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)\n\n- **numberUnavailable** (int32)\n\n  The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)\n\n- **numberMisscheduled** (int32), required\n\n  The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/>\n\n- **desiredNumberScheduled** (int32), required\n\n  The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: <https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/>\n\n- **currentNumberScheduled** (int32), required\n\n  The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/>\n\n- **updatedNumberScheduled** (int32)\n\n  The total number of nodes that are running updated daemon pod\n\n- **collisionCount** (int32)\n\n  Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.\n\n- **conditions** (\\[\\]DaemonSetCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a DaemonSet's current state.\n\n  *DaemonSetCondition describes the state of a DaemonSet at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of DaemonSet condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  The most recent generation observed by the daemon set controller.\n\n## DaemonSetList\n\nDaemonSetList is a collection of daemon sets.\n\n- **apiVersion**: apps/v1\n\n- **kind**: DaemonSetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][DaemonSet](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/#DaemonSet)), required\n\n  A list of daemon sets.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/)"
- name: DeleteOptions
  id: common-definitions/delete-options/index
  summary: DeleteOptions may be provided when deleting an API object
  description: "# DeleteOptions\n\nDeleteOptions may be provided when deleting an API object.\n\n`import \"k8s.io/apimachinery/pkg/apis/meta/v1\"`\n\nDeleteOptions may be provided when deleting an API object.\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **dryRun** (\\[\\]string)\n\n  When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n\n- **gracePeriodSeconds** (int64)\n\n  The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **orphanDependents** (boolean)\n\n  Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\n\n- **preconditions** (Preconditions)\n\n  Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.\n\n  *Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.*\n\n  - **preconditions.resourceVersion** (string)\n\n    Specifies the target ResourceVersion\n\n  - **preconditions.uid** (string)\n\n    Specifies the target UID.\n\n- **propagationPolicy** (string)\n\n  Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/delete-options/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/delete-options/)"
- name: Deployment
  id: workload-resources/deployment-v1/index
  summary: Deployment enables declarative updates for Pods and ReplicaSets
  description: "# Deployment\n\nDeployment enables declarative updates for Pods and ReplicaSets.\n\n`apiVersion: apps/v1`\n\n`import \"k8s.io/api/apps/v1\"`\n\n## Deployment\n\nDeployment enables declarative updates for Pods and ReplicaSets.\n\n- **apiVersion**: apps/v1\n\n- **kind**: Deployment\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([DeploymentSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentSpec))\n\n  Specification of the desired behavior of the Deployment.\n\n- **status** ([DeploymentStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentStatus))\n\n  Most recently observed status of the Deployment.\n\n## DeploymentSpec\n\nDeploymentSpec is the specification of the desired behavior of the Deployment.\n\n- **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required\n\n  Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.\n\n- **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required\n\n  Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is \"Always\".\n\n- **replicas** (int32)\n\n  Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n\n- **minReadySeconds** (int32)\n\n  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n\n- **strategy** (DeploymentStrategy)\n\n  *Patch strategy: retainKeys*\n\n  The deployment strategy to use to replace existing pods with new ones.\n\n  *DeploymentStrategy describes how to replace existing pods with new ones.*\n\n  - **strategy.type** (string)\n\n    Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n\n  - **strategy.rollingUpdate** (RollingUpdateDeployment)\n\n    Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n\n    *Spec to control the desired behavior of rolling update.*\n\n    - **strategy.rollingUpdate.maxSurge** (IntOrString)\n\n      The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n    - **strategy.rollingUpdate.maxUnavailable** (IntOrString)\n\n      The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n- **revisionHistoryLimit** (int32)\n\n  The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.\n\n- **progressDeadlineSeconds** (int32)\n\n  The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.\n\n- **paused** (boolean)\n\n  Indicates that the deployment is paused.\n\n## DeploymentStatus\n\nDeploymentStatus is the most recently observed status of the Deployment.\n\n- **replicas** (int32)\n\n  Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n\n- **availableReplicas** (int32)\n\n  Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n\n- **readyReplicas** (int32)\n\n  readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.\n\n- **unavailableReplicas** (int32)\n\n  Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.\n\n- **updatedReplicas** (int32)\n\n  Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n\n- **collisionCount** (int32)\n\n  Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.\n\n- **conditions** (\\[\\]DeploymentCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a deployment's current state.\n\n  *DeploymentCondition describes the state of a deployment at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of deployment condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastUpdateTime** (Time)\n\n    The last time this condition was updated.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  The generation observed by the deployment controller.\n\n## DeploymentList\n\nDeploymentList is a list of Deployments.\n\n- **apiVersion**: apps/v1\n\n- **kind**: DeploymentList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata.\n\n- **items** (\\[\\][Deployment](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#Deployment)), required\n\n  Items is the list of Deployments.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/)"
- name: Deployment.Spec
  id: workload-resources/deployment-v1/index#DeploymentSpec
  summary: DeploymentSpec is the specification of the desired behavior of the Deployment
  belongs_to: Deployment
  description: |-
    ## DeploymentSpec

    DeploymentSpec is the specification of the desired behavior of the Deployment.

    - **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required

      Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.

    - **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required

      Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is "Always".

    - **replicas** (int32)

      Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.

    - **minReadySeconds** (int32)

      Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)

    - **strategy** (DeploymentStrategy)

      *Patch strategy: retainKeys*

      The deployment strategy to use to replace existing pods with new ones.

      *DeploymentStrategy describes how to replace existing pods with new ones.*

      - **strategy.type** (string)

        Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.

      - **strategy.rollingUpdate** (RollingUpdateDeployment)

        Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.

        *Spec to control the desired behavior of rolling update.*

        - **strategy.rollingUpdate.maxSurge** (IntOrString)

          The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.

          *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

        - **strategy.rollingUpdate.maxUnavailable** (IntOrString)

          The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.

          *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

    - **revisionHistoryLimit** (int32)

      The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.

    - **progressDeadlineSeconds** (int32)

      The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.

    - **paused** (boolean)

      Indicates that the deployment is paused.

    &nbsp;
- name: Deployment.Status
  id: workload-resources/deployment-v1/index#DeploymentStatus
  summary: DeploymentStatus is the most recently observed status of the Deployment
  belongs_to: Deployment
  description: "## DeploymentStatus\n\nDeploymentStatus is the most recently observed status of the Deployment.\n\n- **replicas** (int32)\n\n  Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n\n- **availableReplicas** (int32)\n\n  Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n\n- **readyReplicas** (int32)\n\n  readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.\n\n- **unavailableReplicas** (int32)\n\n  Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.\n\n- **updatedReplicas** (int32)\n\n  Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n\n- **collisionCount** (int32)\n\n  Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.\n\n- **conditions** (\\[\\]DeploymentCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a deployment's current state.\n\n  *DeploymentCondition describes the state of a deployment at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of deployment condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastUpdateTime** (Time)\n\n    The last time this condition was updated.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  The generation observed by the deployment controller.\n\n## DeploymentList\n\nDeploymentList is a list of Deployments.\n\n- **apiVersion**: apps/v1\n\n- **kind**: DeploymentList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata.\n\n- **items** (\\[\\][Deployment](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#Deployment)), required\n\n  Items is the list of Deployments.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/)"
- name: DownwardAPIVolumeFile
  id: config-and-storage-resources/volume/index#DownwardAPIVolumeFile
  summary: 'Required: Path is the relative path name of the file to be created'
  belongs_to: Volume
  description: |-
    ## DownwardAPIVolumeFile

    DownwardAPIVolumeFile represents information to create the file containing the pod field

    - **path** (string), required

      Required: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'

    - **fieldRef** ([ObjectFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/#ObjectFieldSelector))

      Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.

    - **mode** (int32)

      Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.

    - **resourceFieldRef** ([ResourceFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/#ResourceFieldSelector))

      Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

    &nbsp;
- name: dryRun
  id: common-parameters/common-parameters/index#dryRun
  summary: When present, indicates that modifications should not be persisted
  belongs_to: Common Parameters
  description: |-
    ## dryRun

    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
- name: Endpoints
  id: service-resources/endpoints-v1/index
  summary: Endpoints is a collection of endpoints that implement the actual service
  description: "# Endpoints\n\nEndpoints is a collection of endpoints that implement the actual service.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## Endpoints\n\nEndpoints is a collection of endpoints that implement the actual service. Example:\n\n     Name: \"mysvc\",\n     Subsets: [\n       {\n         Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n         Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n       },\n       {\n         Addresses: [{\"ip\": \"10.10.3.3\"}],\n         Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n       },\n    ]\n\n- **apiVersion**: v1\n\n- **kind**: Endpoints\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **subsets** (\\[\\]EndpointSubset)\n\n  The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.\n\n  \\*EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n\n  { Addresses: \\[{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}\\], Ports: \\[{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}\\] }\n\n  The resulting set of endpoints can be viewed as:\n\n  a: \\[ 10.10.1.1:8675, 10.10.2.2:8675 \\], b: \\[ 10.10.1.1:309, 10.10.2.2:309 \\]\\*\n\n  - **subsets.addresses** (\\[\\]EndpointAddress)\n\n    IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.\n\n    *EndpointAddress is a tuple that describes single IP address.*\n\n    - **subsets.addresses.ip** (string), required\n\n      The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).\n\n    - **subsets.addresses.hostname** (string)\n\n      The Hostname of this endpoint\n\n    - **subsets.addresses.nodeName** (string)\n\n      Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.\n\n    - **subsets.addresses.targetRef** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n      Reference to object providing the endpoint.\n\n  - **subsets.notReadyAddresses** (\\[\\]EndpointAddress)\n\n    IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.\n\n    *EndpointAddress is a tuple that describes single IP address.*\n\n    - **subsets.notReadyAddresses.ip** (string), required\n\n      The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).\n\n    - **subsets.notReadyAddresses.hostname** (string)\n\n      The Hostname of this endpoint\n\n    - **subsets.notReadyAddresses.nodeName** (string)\n\n      Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.\n\n    - **subsets.notReadyAddresses.targetRef** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n      Reference to object providing the endpoint.\n\n  - **subsets.ports** (\\[\\]EndpointPort)\n\n    Port numbers available on the related IP addresses.\n\n    *EndpointPort is a tuple that describes a single port.*\n\n    - **subsets.ports.port** (int32), required\n\n      The port number of the endpoint.\n\n    - **subsets.ports.protocol** (string)\n\n      The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.\n\n    - **subsets.ports.name** (string)\n\n      The name of this port. This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.\n\n    - **subsets.ports.appProtocol** (string)\n\n      The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n      - Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and <https://www.iana.org/assignments/service-names)>.\n\n      - Kubernetes-defined prefixed names:\n\n        - 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in <https://www.rfc-editor.org/rfc/rfc7540>\n        - 'kubernetes.io/ws' - WebSocket over cleartext as described in <https://www.rfc-editor.org/rfc/rfc6455>\n        - 'kubernetes.io/wss' - WebSocket over TLS as described in <https://www.rfc-editor.org/rfc/rfc6455>\n\n      - Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.\n\n## EndpointsList\n\nEndpointsList is a list of endpoints.\n\n- **apiVersion**: v1\n\n- **kind**: EndpointsList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Endpoints](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/endpoints-v1/#Endpoints)), required\n\n  List of endpoints.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/endpoints-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/endpoints-v1/)"
- name: EndpointSlice
  id: service-resources/endpoint-slice-v1/index
  summary: EndpointSlice represents a subset of the endpoints that implement a service
  description: "# EndpointSlice\n\nEndpointSlice represents a subset of the endpoints that implement a service.\n\n`apiVersion: discovery.k8s.io/v1`\n\n`import \"k8s.io/api/discovery/v1\"`\n\n## EndpointSlice\n\nEndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.\n\n- **apiVersion**: discovery.k8s.io/v1\n\n- **kind**: EndpointSlice\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata.\n\n- **addressType** (string), required\n\n  addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: \\* IPv4: Represents an IPv4 Address. \\* IPv6: Represents an IPv6 Address. \\* FQDN: Represents a Fully Qualified Domain Name.\n\n- **endpoints** (\\[\\]Endpoint), required\n\n  *Atomic: will be replaced during a merge*\n\n  endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.\n\n  *Endpoint represents a single logical \"backend\" implementing a service.*\n\n  - **endpoints.addresses** (\\[\\]string), required\n\n    *Set: unique values will be kept during a merge*\n\n    addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: <https://issue.k8s.io/106267>\n\n  - **endpoints.conditions** (EndpointConditions)\n\n    conditions contains information about the current status of the endpoint.\n\n    *EndpointConditions represents the current condition of an endpoint.*\n\n    - **endpoints.conditions.ready** (boolean)\n\n      ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be \"true\" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.\n\n    - **endpoints.conditions.serving** (boolean)\n\n      serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.\n\n    - **endpoints.conditions.terminating** (boolean)\n\n      terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.\n\n  - **endpoints.deprecatedTopology** (map\\[string\\]string)\n\n    deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24). While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.\n\n  - **endpoints.hints** (EndpointHints)\n\n    hints contains information associated with how an endpoint should be consumed.\n\n    *EndpointHints provides hints describing how an endpoint should be consumed.*\n\n    - **endpoints.hints.forZones** (\\[\\]ForZone)\n\n      *Atomic: will be replaced during a merge*\n\n      forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.\n\n      *ForZone provides information about which zones should consume this endpoint.*\n\n      - **endpoints.hints.forZones.name** (string), required\n\n        name represents the name of the zone.\n\n  - **endpoints.hostname** (string)\n\n    hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.\n\n  - **endpoints.nodeName** (string)\n\n    nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.\n\n  - **endpoints.targetRef** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n    targetRef is a reference to a Kubernetes object that represents this endpoint.\n\n  - **endpoints.zone** (string)\n\n    zone is the name of the Zone this endpoint exists in.\n\n- **ports** (\\[\\]EndpointPort)\n\n  *Atomic: will be replaced during a merge*\n\n  ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates \"all ports\". Each slice may include a maximum of 100 ports.\n\n  *EndpointPort represents a Port used by an EndpointSlice*\n\n  - **ports.port** (int32)\n\n    port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.\n\n  - **ports.protocol** (string)\n\n    protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.\n\n  - **ports.name** (string)\n\n    name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports\\[\\].name. Name must either be an empty string or pass DNS_LABEL validation: \\* must be no more than 63 characters long. \\* must consist of lower case alphanumeric characters or '-'. \\* must start and end with an alphanumeric character. Default is empty string.\n\n  - **ports.appProtocol** (string)\n\n    The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n    - Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and <https://www.iana.org/assignments/service-names)>.\n\n    - Kubernetes-defined prefixed names:\n\n      - 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in <https://www.rfc-editor.org/rfc/rfc7540>\n      - 'kubernetes.io/ws' - WebSocket over cleartext as described in <https://www.rfc-editor.org/rfc/rfc6455>\n      - 'kubernetes.io/wss' - WebSocket over TLS as described in <https://www.rfc-editor.org/rfc/rfc6455>\n\n    - Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.\n\n## EndpointSliceList\n\nEndpointSliceList represents a list of endpoint slices\n\n- **apiVersion**: discovery.k8s.io/v1\n\n- **kind**: EndpointSliceList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata.\n\n- **items** (\\[\\][EndpointSlice](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/endpoint-slice-v1/#EndpointSlice)), required\n\n  items is the list of endpoint slices\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/endpoint-slice-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/endpoint-slice-v1/)"
- name: EphemeralContainer
  id: workload-resources/pod-v1/index#EphemeralContainer
  summary: An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging
  belongs_to: Pod
  description: |-
    ## EphemeralContainer

    An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.

    To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.

    - **name** (string), required

      Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.

    - **targetContainerName** (string)

      If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.

      The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.

    ### Image

    - **image** (string)

      Container image name. More info: <https://kubernetes.io/docs/concepts/containers/images>

    - **imagePullPolicy** (string)

      Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>

    ### Entrypoint

    - **command** (\[\]string)

      Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>

    - **args** (\[\]string)

      Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>

    - **workingDir** (string)

      Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.

    ### Environment variables

    - **env** (\[\]EnvVar)

      *Patch strategy: merge on key `name`*

      List of environment variables to set in the container. Cannot be updated.

      *EnvVar represents an environment variable present in a Container.*

      - **env.name** (string), required

        Name of the environment variable. Must be a C_IDENTIFIER.

      - **env.value** (string)

        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".

      - **env.valueFrom** (EnvVarSource)

        Source for the environment variable's value. Cannot be used if value is not empty.

        *EnvVarSource represents a source for the value of an EnvVar.*

        - **env.valueFrom.configMapKeyRef** (ConfigMapKeySelector)

          Selects a key of a ConfigMap.

          *Selects a key from a ConfigMap.*

          - **env.valueFrom.configMapKeyRef.key** (string), required

            The key to select.

          - **env.valueFrom.configMapKeyRef.name** (string)

            Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

          - **env.valueFrom.configMapKeyRef.optional** (boolean)

            Specify whether the ConfigMap or its key must be defined

        - **env.valueFrom.fieldRef** ([ObjectFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/#ObjectFieldSelector))

          Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\<KEY>']`, `metadata.annotations['\<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

        - **env.valueFrom.resourceFieldRef** ([ResourceFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/#ResourceFieldSelector))

          Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

        - **env.valueFrom.secretKeyRef** (SecretKeySelector)

          Selects a key of a secret in the pod's namespace

          *SecretKeySelector selects a key of a Secret.*

          - **env.valueFrom.secretKeyRef.key** (string), required

            The key of the secret to select from. Must be a valid secret key.

          - **env.valueFrom.secretKeyRef.name** (string)

            Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

          - **env.valueFrom.secretKeyRef.optional** (boolean)

            Specify whether the Secret or its key must be defined

    - **envFrom** (\[\]EnvFromSource)

      List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.

      *EnvFromSource represents the source of a set of ConfigMaps*

      - **envFrom.configMapRef** (ConfigMapEnvSource)

        The ConfigMap to select from

        \*ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

        The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\*

        - **envFrom.configMapRef.name** (string)

          Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

        - **envFrom.configMapRef.optional** (boolean)

          Specify whether the ConfigMap must be defined

      - **envFrom.prefix** (string)

        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.

      - **envFrom.secretRef** (SecretEnvSource)

        The Secret to select from

        \*SecretEnvSource selects a Secret to populate the environment variables with.

        The contents of the target Secret's Data field will represent the key-value pairs as environment variables.\*

        - **envFrom.secretRef.name** (string)

          Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

        - **envFrom.secretRef.optional** (boolean)

          Specify whether the Secret must be defined

    ### Volumes

    - **volumeMounts** (\[\]VolumeMount)

      *Patch strategy: merge on key `mountPath`*

      Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.

      *VolumeMount describes a mounting of a Volume within a container.*

      - **volumeMounts.mountPath** (string), required

        Path within the container at which the volume should be mounted. Must not contain ':'.

      - **volumeMounts.name** (string), required

        This must match the Name of a Volume.

      - **volumeMounts.mountPropagation** (string)

        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.

      - **volumeMounts.readOnly** (boolean)

        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.

      - **volumeMounts.subPath** (string)

        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).

      - **volumeMounts.subPathExpr** (string)

        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.

    - **volumeDevices** (\[\]VolumeDevice)

      *Patch strategy: merge on key `devicePath`*

      volumeDevices is the list of block devices to be used by the container.

      *volumeDevice describes a mapping of a raw block device within a container.*

      - **volumeDevices.devicePath** (string), required

        devicePath is the path inside of the container that the device will be mapped to.

      - **volumeDevices.name** (string), required

        name must match the name of a persistentVolumeClaim in the pod

    ### Resources

    - **resizePolicy** (\[\]ContainerResizePolicy)

      *Atomic: will be replaced during a merge*

      Resources resize policy for the container.

      *ContainerResizePolicy represents resource resize policy for the container.*

      - **resizePolicy.resourceName** (string), required

        Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.

      - **resizePolicy.restartPolicy** (string), required

        Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.

    ### Lifecycle

    - **terminationMessagePath** (string)

      Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.

    - **terminationMessagePolicy** (string)

      Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

    - **restartPolicy** (string)

      Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.

    ### Debugging

    - **stdin** (boolean)

      Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.

    - **stdinOnce** (boolean)

      Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false

    - **tty** (boolean)

      Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.

    ### Security context

    - **securityContext** (SecurityContext)

      Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.

      *SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.*

      - **securityContext.runAsUser** (int64)

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.runAsNonRoot** (boolean)

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

      - **securityContext.runAsGroup** (int64)

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.readOnlyRootFilesystem** (boolean)

        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.procMount** (string)

        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.privileged** (boolean)

        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.allowPrivilegeEscalation** (boolean)

        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.capabilities** (Capabilities)

        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.

        *Adds and removes POSIX capabilities from running containers.*

        - **securityContext.capabilities.add** (\[\]string)

          Added capabilities

        - **securityContext.capabilities.drop** (\[\]string)

          Removed capabilities

      - **securityContext.seccompProfile** (SeccompProfile)

        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.

        *SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.*

        - **securityContext.seccompProfile.type** (string), required

          type indicates which kind of seccomp profile will be applied. Valid options are:

          Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

        - **securityContext.seccompProfile.localhostProfile** (string)

          localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.

      - **securityContext.seLinuxOptions** (SELinuxOptions)

        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.

        *SELinuxOptions are the labels to be applied to the container*

        - **securityContext.seLinuxOptions.level** (string)

          Level is SELinux level label that applies to the container.

        - **securityContext.seLinuxOptions.role** (string)

          Role is a SELinux role label that applies to the container.

        - **securityContext.seLinuxOptions.type** (string)

          Type is a SELinux type label that applies to the container.

        - **securityContext.seLinuxOptions.user** (string)

          User is a SELinux user label that applies to the container.

      - **securityContext.windowsOptions** (WindowsSecurityContextOptions)

        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.

        *WindowsSecurityContextOptions contain Windows-specific options and credentials.*

        - **securityContext.windowsOptions.gmsaCredentialSpec** (string)

          GMSACredentialSpec is where the GMSA admission webhook (<https://github.com/kubernetes-sigs/windows-gmsa>) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.

        - **securityContext.windowsOptions.gmsaCredentialSpecName** (string)

          GMSACredentialSpecName is the name of the GMSA credential spec to use.

        - **securityContext.windowsOptions.hostProcess** (boolean)

          HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.

        - **securityContext.windowsOptions.runAsUserName** (string)

          The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

    ### Not allowed

    - **ports** (\[\]ContainerPort)

      *Patch strategy: merge on key `containerPort`*

      *Map: unique values on keys `containerPort, protocol` will be kept during a merge*

      Ports are not allowed for ephemeral containers.

      *ContainerPort represents a network port in a single container.*

      - **ports.containerPort** (int32), required

        Number of port to expose on the pod's IP address. This must be a valid port number, 0 \< x \< 65536.

      - **ports.hostIP** (string)

        What host IP to bind the external port to.

      - **ports.hostPort** (int32)

        Number of port to expose on the host. If specified, this must be a valid port number, 0 \< x \< 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.

      - **ports.name** (string)

        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.

      - **ports.protocol** (string)

        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".

    - **resources** (ResourceRequirements)

      Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.

      *ResourceRequirements describes the compute resource requirements.*

      - **resources.claims** (\[\]ResourceClaim)

        *Map: unique values on key name will be kept during a merge*

        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

        This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.

        *ResourceClaim references one entry in PodSpec.ResourceClaims.*

        - **resources.claims.name** (string), required

          Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.

      - **resources.limits** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

        Limits describes the maximum amount of compute resources allowed. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>

      - **resources.requests** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>

    - **lifecycle** (Lifecycle)

      Lifecycle is not allowed for ephemeral containers.

      *Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.*

      - **lifecycle.postStart** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))

        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>

      - **lifecycle.preStop** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))

        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>

    - **livenessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))

      Probes are not allowed for ephemeral containers.

    - **readinessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))

      Probes are not allowed for ephemeral containers.

    - **startupProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))

      Probes are not allowed for ephemeral containers.

    &nbsp;
- name: Event
  id: cluster-resources/event-v1/index
  summary: Event is a report of an event somewhere in the cluster
  description: "# Event\n\nEvent is a report of an event somewhere in the cluster.\n\n`apiVersion: events.k8s.io/v1`\n\n`import \"k8s.io/api/events/v1\"`\n\n## Event\n\nEvent is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason. Events should be treated as informative, best-effort, supplemental data.\n\n- **apiVersion**: events.k8s.io/v1\n\n- **kind**: Event\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **eventTime** (MicroTime), required\n\n  eventTime is the time when this Event was first observed. It is required.\n\n  *MicroTime is version of Time with microsecond level precision.*\n\n- **action** (string)\n\n  action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.\n\n- **deprecatedCount** (int32)\n\n  deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.\n\n- **deprecatedFirstTimestamp** (Time)\n\n  deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **deprecatedLastTimestamp** (Time)\n\n  deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **deprecatedSource** (EventSource)\n\n  deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.\n\n  *EventSource contains information for an event.*\n\n  - **deprecatedSource.component** (string)\n\n    Component from which the event is generated.\n\n  - **deprecatedSource.host** (string)\n\n    Node name on which the event is generated.\n\n- **note** (string)\n\n  note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.\n\n- **reason** (string)\n\n  reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.\n\n- **regarding** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n  regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.\n\n- **related** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n  related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.\n\n- **reportingController** (string)\n\n  reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.\n\n- **reportingInstance** (string)\n\n  reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.\n\n- **series** (EventSeries)\n\n  series is data about the Event series this event represents or nil if it's a singleton Event.\n\n  *EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in \"k8s.io/client-go/tools/events/event_broadcaster.go\" shows how this struct is updated on heartbeats and can guide customized reporter implementations.*\n\n  - **series.count** (int32), required\n\n    count is the number of occurrences in this series up to the last heartbeat time.\n\n  - **series.lastObservedTime** (MicroTime), required\n\n    lastObservedTime is the time when last Event from the series was seen before last heartbeat.\n\n    *MicroTime is version of Time with microsecond level precision.*\n\n- **type** (string)\n\n  type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.\n\n## EventList\n\nEventList is a list of Event objects.\n\n- **apiVersion**: events.k8s.io/v1\n\n- **kind**: EventList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][Event](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/event-v1/#Event)), required\n\n  items is a list of schema objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/event-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/event-v1/)"
- name: Extend Resources
  id: extend-resources/index
  summary: CustomResourceDefinition represents a resource that should be exposed on the API server
  description: "# Extend Resources\n\n##### [CustomResourceDefinition](custom-resource-definition-v1/index)\n\nCustomResourceDefinition represents a resource that should be exposed on the API server.\n\n##### [MutatingWebhookConfiguration](mutating-webhook-configuration-v1/index)\n\nMutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.\n\n##### [ValidatingWebhookConfiguration](validating-webhook-configuration-v1/index)\n\nValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.\n\n##### [ValidatingAdmissionPolicy v1beta1](validating-admission-policy-v1beta1/index)\n\nValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/)"
- name: fieldManager
  id: common-parameters/common-parameters/index#fieldManager
  summary: fieldManager is a name associated with the actor or entity that is making these changes
  belongs_to: Common Parameters
  description: |-
    ## fieldManager

    fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by <https://golang.org/pkg/unicode/#IsPrint>.
- name: fieldSelector
  id: common-parameters/common-parameters/index#fieldSelector
  summary: A selector to restrict the list of returned objects by their fields
  belongs_to: Common Parameters
  description: |-
    ## fieldSelector

    A selector to restrict the list of returned objects by their fields. Defaults to everything.
- name: fieldValidation
  id: common-parameters/common-parameters/index#fieldValidation
  summary: fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields
  belongs_to: Common Parameters
  description: |-
    ## fieldValidation

    fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
- name: FlowSchema
  id: cluster-resources/flow-schema-v1beta3/index#FlowSchema
  summary: FlowSchema defines the schema of a group of flows
  belongs_to: FlowSchema v1beta3
  description: |-
    ## FlowSchema

    FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".

    - **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3

    - **kind**: FlowSchema

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      `metadata` is the standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>

    - **spec** ([FlowSchemaSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/#FlowSchemaSpec))

      `spec` is the specification of the desired behavior of a FlowSchema. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>

    - **status** ([FlowSchemaStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/#FlowSchemaStatus))

      `status` is the current status of a FlowSchema. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
- name: FlowSchema v1beta3
  id: cluster-resources/flow-schema-v1beta3/index
  summary: FlowSchema defines the schema of a group of flows
  description: "# FlowSchema v1beta3\n\nFlowSchema defines the schema of a group of flows.\n\n`apiVersion: flowcontrol.apiserver.k8s.io/v1beta3`\n\n`import \"k8s.io/api/flowcontrol/v1beta3\"`\n\n## FlowSchema\n\nFlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a \"flow distinguisher\".\n\n- **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3\n\n- **kind**: FlowSchema\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  `metadata` is the standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([FlowSchemaSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/#FlowSchemaSpec))\n\n  `spec` is the specification of the desired behavior of a FlowSchema. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([FlowSchemaStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/#FlowSchemaStatus))\n\n  `status` is the current status of a FlowSchema. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## FlowSchemaSpec\n\nFlowSchemaSpec describes how the FlowSchema's specification looks like.\n\n- **priorityLevelConfiguration** (PriorityLevelConfigurationReference), required\n\n  `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.\n\n  *PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used.*\n\n  - **priorityLevelConfiguration.name** (string), required\n\n    `name` is the name of the priority level configuration being referenced Required.\n\n- **distinguisherMethod** (FlowDistinguisherMethod)\n\n  `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.\n\n  *FlowDistinguisherMethod specifies the method of a flow distinguisher.*\n\n  - **distinguisherMethod.type** (string), required\n\n    `type` is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required.\n\n- **matchingPrecedence** (int32)\n\n  `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence. Each MatchingPrecedence value must be ranged in \\[1,10000\\]. Note that if the precedence is not specified, it will be set to 1000 as default.\n\n- **rules** (\\[\\]PolicyRulesWithSubjects)\n\n  *Atomic: will be replaced during a merge*\n\n  `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.\n\n  *PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.*\n\n  - **rules.subjects** (\\[\\]Subject), required\n\n    *Atomic: will be replaced during a merge*\n\n    subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.\n\n    *Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.*\n\n    - **rules.subjects.kind** (string), required\n\n      `kind` indicates which one of the other fields is non-empty. Required\n\n    - **rules.subjects.group** (GroupSubject)\n\n      `group` matches based on user group name.\n\n      *GroupSubject holds detailed information for group-kind subject.*\n\n      - **rules.subjects.group.name** (string), required\n\n        name is the user group that matches, or \"\\*\" to match all user groups. See <https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go> for some well-known group names. Required.\n\n    - **rules.subjects.serviceAccount** (ServiceAccountSubject)\n\n      `serviceAccount` matches ServiceAccounts.\n\n      *ServiceAccountSubject holds detailed information for service-account-kind subject.*\n\n      - **rules.subjects.serviceAccount.name** (string), required\n\n        `name` is the name of matching ServiceAccount objects, or \"\\*\" to match regardless of name. Required.\n\n      - **rules.subjects.serviceAccount.namespace** (string), required\n\n        `namespace` is the namespace of matching ServiceAccount objects. Required.\n\n    - **rules.subjects.user** (UserSubject)\n\n      `user` matches based on username.\n\n      *UserSubject holds detailed information for user-kind subject.*\n\n      - **rules.subjects.user.name** (string), required\n\n        `name` is the username that matches, or \"\\*\" to match all usernames. Required.\n\n  - **rules.nonResourceRules** (\\[\\]NonResourcePolicyRule)\n\n    *Atomic: will be replaced during a merge*\n\n    `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.\n\n    *NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.*\n\n    - **rules.nonResourceRules.nonResourceURLs** (\\[\\]string), required\n\n      *Set: unique values will be kept during a merge*\n\n      `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:\n\n      - \"/healthz\" is legal\n      - \"/hea\\*\" is illegal\n      - \"/hea\" is legal but matches nothing\n      - \"/hea/\\*\" also matches nothing\n      - \"/healthz/*\" matches all per-component health checks. \"*\" matches all non-resource urls. if it is present, it must be the only entry. Required.\n\n    - **rules.nonResourceRules.verbs** (\\[\\]string), required\n\n      *Set: unique values will be kept during a merge*\n\n      `verbs` is a list of matching verbs and may not be empty. \"\\*\" matches all verbs. If it is present, it must be the only entry. Required.\n\n  - **rules.resourceRules** (\\[\\]ResourcePolicyRule)\n\n    *Atomic: will be replaced during a merge*\n\n    `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.\n\n    *ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==\"\"`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.*\n\n    - **rules.resourceRules.apiGroups** (\\[\\]string), required\n\n      *Set: unique values will be kept during a merge*\n\n      `apiGroups` is a list of matching API groups and may not be empty. \"\\*\" matches all API groups and, if present, must be the only entry. Required.\n\n    - **rules.resourceRules.resources** (\\[\\]string), required\n\n      *Set: unique values will be kept during a merge*\n\n      `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource. For example, \\[ \"services\", \"nodes/status\" \\]. This list may not be empty. \"\\*\" matches all resources and, if present, must be the only entry. Required.\n\n    - **rules.resourceRules.verbs** (\\[\\]string), required\n\n      *Set: unique values will be kept during a merge*\n\n      `verbs` is a list of matching verbs and may not be empty. \"\\*\" matches all verbs and, if present, must be the only entry. Required.\n\n    - **rules.resourceRules.clusterScope** (boolean)\n\n      `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.\n\n    - **rules.resourceRules.namespaces** (\\[\\]string)\n\n      *Set: unique values will be kept during a merge*\n\n      `namespaces` is a list of target namespaces that restricts matches. A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\". Note that \"*\" matches any specified namespace but does not match a request that *does not specify* a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.\n\n## FlowSchemaStatus\n\nFlowSchemaStatus represents the current state of a FlowSchema.\n\n- **conditions** (\\[\\]FlowSchemaCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  `conditions` is a list of the current states of FlowSchema.\n\n  *FlowSchemaCondition describes conditions for a FlowSchema.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    `lastTransitionTime` is the last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    `message` is a human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    `reason` is a unique, one-word, CamelCase reason for the condition's last transition.\n\n  - **conditions.status** (string)\n\n    `status` is the status of the condition. Can be True, False, Unknown. Required.\n\n  - **conditions.type** (string)\n\n    `type` is the type of the condition. Required.\n\n## FlowSchemaList\n\nFlowSchemaList is a list of FlowSchema objects.\n\n- **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3\n\n- **kind**: FlowSchemaList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  `metadata` is the standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][FlowSchema](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/#FlowSchema)), required\n\n  `items` is a list of FlowSchemas.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/)"
- name: FlowSchemaList
  id: cluster-resources/flow-schema-v1beta3/index#FlowSchemaList
  summary: FlowSchemaList is a list of FlowSchema objects
  belongs_to: FlowSchema v1beta3
  description: "## FlowSchemaList\n\nFlowSchemaList is a list of FlowSchema objects.\n\n- **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3\n\n- **kind**: FlowSchemaList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  `metadata` is the standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][FlowSchema](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/#FlowSchema)), required\n\n  `items` is a list of FlowSchemas.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/flow-schema-v1beta3/)"
- name: FlowSchemaSpec
  id: cluster-resources/flow-schema-v1beta3/index#FlowSchemaSpec
  summary: FlowSchemaSpec describes how the FlowSchema's specification looks like
  belongs_to: FlowSchema v1beta3
  description: |-
    ## FlowSchemaSpec

    FlowSchemaSpec describes how the FlowSchema's specification looks like.

    - **priorityLevelConfiguration** (PriorityLevelConfigurationReference), required

      `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.

      *PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.*

      - **priorityLevelConfiguration.name** (string), required

        `name` is the name of the priority level configuration being referenced Required.

    - **distinguisherMethod** (FlowDistinguisherMethod)

      `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.

      *FlowDistinguisherMethod specifies the method of a flow distinguisher.*

      - **distinguisherMethod.type** (string), required

        `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.

    - **matchingPrecedence** (int32)

      `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence. Each MatchingPrecedence value must be ranged in \[1,10000\]. Note that if the precedence is not specified, it will be set to 1000 as default.

    - **rules** (\[\]PolicyRulesWithSubjects)

      *Atomic: will be replaced during a merge*

      `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.

      *PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.*

      - **rules.subjects** (\[\]Subject), required

        *Atomic: will be replaced during a merge*

        subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.

        *Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.*

        - **rules.subjects.kind** (string), required

          `kind` indicates which one of the other fields is non-empty. Required

        - **rules.subjects.group** (GroupSubject)

          `group` matches based on user group name.

          *GroupSubject holds detailed information for group-kind subject.*

          - **rules.subjects.group.name** (string), required

            name is the user group that matches, or "\*" to match all user groups. See <https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go> for some well-known group names. Required.

        - **rules.subjects.serviceAccount** (ServiceAccountSubject)

          `serviceAccount` matches ServiceAccounts.

          *ServiceAccountSubject holds detailed information for service-account-kind subject.*

          - **rules.subjects.serviceAccount.name** (string), required

            `name` is the name of matching ServiceAccount objects, or "\*" to match regardless of name. Required.

          - **rules.subjects.serviceAccount.namespace** (string), required

            `namespace` is the namespace of matching ServiceAccount objects. Required.

        - **rules.subjects.user** (UserSubject)

          `user` matches based on username.

          *UserSubject holds detailed information for user-kind subject.*

          - **rules.subjects.user.name** (string), required

            `name` is the username that matches, or "\*" to match all usernames. Required.

      - **rules.nonResourceRules** (\[\]NonResourcePolicyRule)

        *Atomic: will be replaced during a merge*

        `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.

        *NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.*

        - **rules.nonResourceRules.nonResourceURLs** (\[\]string), required

          *Set: unique values will be kept during a merge*

          `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:

          - "/healthz" is legal
          - "/hea\*" is illegal
          - "/hea" is legal but matches nothing
          - "/hea/\*" also matches nothing
          - "/healthz/*" matches all per-component health checks. "*" matches all non-resource urls. if it is present, it must be the only entry. Required.

        - **rules.nonResourceRules.verbs** (\[\]string), required

          *Set: unique values will be kept during a merge*

          `verbs` is a list of matching verbs and may not be empty. "\*" matches all verbs. If it is present, it must be the only entry. Required.

      - **rules.resourceRules** (\[\]ResourcePolicyRule)

        *Atomic: will be replaced during a merge*

        `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.

        *ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.*

        - **rules.resourceRules.apiGroups** (\[\]string), required

          *Set: unique values will be kept during a merge*

          `apiGroups` is a list of matching API groups and may not be empty. "\*" matches all API groups and, if present, must be the only entry. Required.

        - **rules.resourceRules.resources** (\[\]string), required

          *Set: unique values will be kept during a merge*

          `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource. For example, \[ "services", "nodes/status" \]. This list may not be empty. "\*" matches all resources and, if present, must be the only entry. Required.

        - **rules.resourceRules.verbs** (\[\]string), required

          *Set: unique values will be kept during a merge*

          `verbs` is a list of matching verbs and may not be empty. "\*" matches all verbs and, if present, must be the only entry. Required.

        - **rules.resourceRules.clusterScope** (boolean)

          `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.

        - **rules.resourceRules.namespaces** (\[\]string)

          *Set: unique values will be kept during a merge*

          `namespaces` is a list of target namespaces that restricts matches. A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*". Note that "*" matches any specified namespace but does not match a request that *does not specify* a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.

    &nbsp;
- name: FlowSchemaStatus
  id: cluster-resources/flow-schema-v1beta3/index#FlowSchemaStatus
  summary: FlowSchemaStatus represents the current state of a FlowSchema
  belongs_to: FlowSchema v1beta3
  description: |-
    ## FlowSchemaStatus

    FlowSchemaStatus represents the current state of a FlowSchema.

    - **conditions** (\[\]FlowSchemaCondition)

      *Patch strategy: merge on key `type`*

      *Map: unique values on key type will be kept during a merge*

      `conditions` is a list of the current states of FlowSchema.

      *FlowSchemaCondition describes conditions for a FlowSchema.*

      - **conditions.lastTransitionTime** (Time)

        `lastTransitionTime` is the last time the condition transitioned from one status to another.

        *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*

      - **conditions.message** (string)

        `message` is a human-readable message indicating details about last transition.

      - **conditions.reason** (string)

        `reason` is a unique, one-word, CamelCase reason for the condition's last transition.

      - **conditions.status** (string)

        `status` is the status of the condition. Can be True, False, Unknown. Required.

      - **conditions.type** (string)

        `type` is the type of the condition. Required.

    &nbsp;
- name: force
  id: common-parameters/common-parameters/index#force
  summary: Force is going to "force" Apply requests
  belongs_to: Common Parameters
  description: |-
    ## force

    Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
- name: gracePeriodSeconds
  id: common-parameters/common-parameters/index#gracePeriodSeconds
  summary: The duration in seconds before the object should be deleted
  belongs_to: Common Parameters
  description: |-
    ## gracePeriodSeconds

    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
- name: HorizontalPodAutoscaler
  id: workload-resources/horizontal-pod-autoscaler-v2/index
  summary: HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified
  description: "# HorizontalPodAutoscaler\n\nHorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.\n\n`apiVersion: autoscaling/v2`\n\n`import \"k8s.io/api/autoscaling/v2\"`\n\n## HorizontalPodAutoscaler\n\nHorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.\n\n- **apiVersion**: autoscaling/v2\n\n- **kind**: HorizontalPodAutoscaler\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  metadata is the standard object metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscalerSpec))\n\n  spec is the specification for the behaviour of the autoscaler. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>.\n\n- **status** ([HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscalerStatus))\n\n  status is the current information about the autoscaler.\n\n## HorizontalPodAutoscalerSpec\n\nHorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.\n\n- **maxReplicas** (int32), required\n\n  maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.\n\n- **scaleTargetRef** (CrossVersionObjectReference), required\n\n  scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.\n\n  *CrossVersionObjectReference contains enough information to let you identify the referred resource.*\n\n  - **scaleTargetRef.kind** (string), required\n\n    kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n  - **scaleTargetRef.name** (string), required\n\n    name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n  - **scaleTargetRef.apiVersion** (string)\n\n    apiVersion is the API version of the referent\n\n- **minReplicas** (int32)\n\n  minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.\n\n- **behavior** (HorizontalPodAutoscalerBehavior)\n\n  behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.\n\n  *HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).*\n\n  - **behavior.scaleDown** (HPAScalingRules)\n\n    scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).\n\n    *HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.*\n\n    - **behavior.scaleDown.policies** (\\[\\]HPAScalingPolicy)\n\n      *Atomic: will be replaced during a merge*\n\n      policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid\n\n      *HPAScalingPolicy is a single policy which must hold true for a specified past interval.*\n\n      - **behavior.scaleDown.policies.type** (string), required\n\n        type is used to specify the scaling policy.\n\n      - **behavior.scaleDown.policies.value** (int32), required\n\n        value contains the amount of change which is permitted by the policy. It must be greater than zero\n\n      - **behavior.scaleDown.policies.periodSeconds** (int32), required\n\n        periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).\n\n    - **behavior.scaleDown.selectPolicy** (string)\n\n      selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.\n\n    - **behavior.scaleDown.stabilizationWindowSeconds** (int32)\n\n      stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).\n\n  - **behavior.scaleUp** (HPAScalingRules)\n\n    scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n\n    - increase no more than 4 pods per 60 seconds\n    - double the number of pods per 60 seconds No stabilization is used.\n\n    *HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.*\n\n    - **behavior.scaleUp.policies** (\\[\\]HPAScalingPolicy)\n\n      *Atomic: will be replaced during a merge*\n\n      policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid\n\n      *HPAScalingPolicy is a single policy which must hold true for a specified past interval.*\n\n      - **behavior.scaleUp.policies.type** (string), required\n\n        type is used to specify the scaling policy.\n\n      - **behavior.scaleUp.policies.value** (int32), required\n\n        value contains the amount of change which is permitted by the policy. It must be greater than zero\n\n      - **behavior.scaleUp.policies.periodSeconds** (int32), required\n\n        periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).\n\n    - **behavior.scaleUp.selectPolicy** (string)\n\n      selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.\n\n    - **behavior.scaleUp.stabilizationWindowSeconds** (int32)\n\n      stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).\n\n- **metrics** (\\[\\]MetricSpec)\n\n  *Atomic: will be replaced during a merge*\n\n  metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.\n\n  *MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).*\n\n  - **metrics.type** (string), required\n\n    type is the type of metric source. It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled\n\n  - **metrics.containerResource** (ContainerResourceMetricSource)\n\n    containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.\n\n    *ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. Only one \"target\" type should be set.*\n\n    - **metrics.containerResource.container** (string), required\n\n      container is the name of the container in the pods of the scaling target\n\n    - **metrics.containerResource.name** (string), required\n\n      name is the name of the resource in question.\n\n    - **metrics.containerResource.target** (MetricTarget), required\n\n      target specifies the target value for the given metric\n\n      *MetricTarget defines the target value, average value, or average utilization of a specific metric*\n\n      - **metrics.containerResource.target.type** (string), required\n\n        type represents whether the metric type is Utilization, Value, or AverageValue\n\n      - **metrics.containerResource.target.averageUtilization** (int32)\n\n        averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type\n\n      - **metrics.containerResource.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the target value of the average of the metric across all relevant pods (as a quantity)\n\n      - **metrics.containerResource.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the target value of the metric (as a quantity).\n\n  - **metrics.external** (ExternalMetricSource)\n\n    external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).\n\n    *ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).*\n\n    - **metrics.external.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **metrics.external.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **metrics.external.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n    - **metrics.external.target** (MetricTarget), required\n\n      target specifies the target value for the given metric\n\n      *MetricTarget defines the target value, average value, or average utilization of a specific metric*\n\n      - **metrics.external.target.type** (string), required\n\n        type represents whether the metric type is Utilization, Value, or AverageValue\n\n      - **metrics.external.target.averageUtilization** (int32)\n\n        averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type\n\n      - **metrics.external.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the target value of the average of the metric across all relevant pods (as a quantity)\n\n      - **metrics.external.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the target value of the metric (as a quantity).\n\n  - **metrics.object** (ObjectMetricSource)\n\n    object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).\n\n    *ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).*\n\n    - **metrics.object.describedObject** (CrossVersionObjectReference), required\n\n      describedObject specifies the descriptions of a object,such as kind,name apiVersion\n\n      *CrossVersionObjectReference contains enough information to let you identify the referred resource.*\n\n      - **metrics.object.describedObject.kind** (string), required\n\n        kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n      - **metrics.object.describedObject.name** (string), required\n\n        name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **metrics.object.describedObject.apiVersion** (string)\n\n        apiVersion is the API version of the referent\n\n    - **metrics.object.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **metrics.object.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **metrics.object.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n    - **metrics.object.target** (MetricTarget), required\n\n      target specifies the target value for the given metric\n\n      *MetricTarget defines the target value, average value, or average utilization of a specific metric*\n\n      - **metrics.object.target.type** (string), required\n\n        type represents whether the metric type is Utilization, Value, or AverageValue\n\n      - **metrics.object.target.averageUtilization** (int32)\n\n        averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type\n\n      - **metrics.object.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the target value of the average of the metric across all relevant pods (as a quantity)\n\n      - **metrics.object.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the target value of the metric (as a quantity).\n\n  - **metrics.pods** (PodsMetricSource)\n\n    pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.\n\n    *PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.*\n\n    - **metrics.pods.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **metrics.pods.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **metrics.pods.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n    - **metrics.pods.target** (MetricTarget), required\n\n      target specifies the target value for the given metric\n\n      *MetricTarget defines the target value, average value, or average utilization of a specific metric*\n\n      - **metrics.pods.target.type** (string), required\n\n        type represents whether the metric type is Utilization, Value, or AverageValue\n\n      - **metrics.pods.target.averageUtilization** (int32)\n\n        averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type\n\n      - **metrics.pods.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the target value of the average of the metric across all relevant pods (as a quantity)\n\n      - **metrics.pods.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the target value of the metric (as a quantity).\n\n  - **metrics.resource** (ResourceMetricSource)\n\n    resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n\n    *ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. Only one \"target\" type should be set.*\n\n    - **metrics.resource.name** (string), required\n\n      name is the name of the resource in question.\n\n    - **metrics.resource.target** (MetricTarget), required\n\n      target specifies the target value for the given metric\n\n      *MetricTarget defines the target value, average value, or average utilization of a specific metric*\n\n      - **metrics.resource.target.type** (string), required\n\n        type represents whether the metric type is Utilization, Value, or AverageValue\n\n      - **metrics.resource.target.averageUtilization** (int32)\n\n        averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type\n\n      - **metrics.resource.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the target value of the average of the metric across all relevant pods (as a quantity)\n\n      - **metrics.resource.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the target value of the metric (as a quantity).\n\n## HorizontalPodAutoscalerStatus\n\nHorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.\n\n- **desiredReplicas** (int32), required\n\n  desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.\n\n- **conditions** (\\[\\]HorizontalPodAutoscalerCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.\n\n  *HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.*\n\n  - **conditions.status** (string), required\n\n    status is the status of the condition (True, False, Unknown)\n\n  - **conditions.type** (string), required\n\n    type describes the current condition\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime is the last time the condition transitioned from one status to another\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message is a human-readable explanation containing details about the transition\n\n  - **conditions.reason** (string)\n\n    reason is the reason for the condition's last transition.\n\n- **currentMetrics** (\\[\\]MetricStatus)\n\n  *Atomic: will be replaced during a merge*\n\n  currentMetrics is the last read state of the metrics used by this autoscaler.\n\n  *MetricStatus describes the last-read state of a single metric.*\n\n  - **currentMetrics.type** (string), required\n\n    type is the type of metric source. It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled\n\n  - **currentMetrics.containerResource** (ContainerResourceMetricStatus)\n\n    container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n\n    *ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.*\n\n    - **currentMetrics.containerResource.container** (string), required\n\n      container is the name of the container in the pods of the scaling target\n\n    - **currentMetrics.containerResource.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.containerResource.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.containerResource.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.containerResource.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.containerResource.name** (string), required\n\n      name is the name of the resource in question.\n\n  - **currentMetrics.external** (ExternalMetricStatus)\n\n    external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).\n\n    *ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.*\n\n    - **currentMetrics.external.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.external.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.external.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.external.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.external.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **currentMetrics.external.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **currentMetrics.external.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n  - **currentMetrics.object** (ObjectMetricStatus)\n\n    object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).\n\n    *ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).*\n\n    - **currentMetrics.object.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.object.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.object.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.object.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.object.describedObject** (CrossVersionObjectReference), required\n\n      DescribedObject specifies the descriptions of a object,such as kind,name apiVersion\n\n      *CrossVersionObjectReference contains enough information to let you identify the referred resource.*\n\n      - **currentMetrics.object.describedObject.kind** (string), required\n\n        kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n      - **currentMetrics.object.describedObject.name** (string), required\n\n        name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **currentMetrics.object.describedObject.apiVersion** (string)\n\n        apiVersion is the API version of the referent\n\n    - **currentMetrics.object.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **currentMetrics.object.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **currentMetrics.object.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n  - **currentMetrics.pods** (PodsMetricStatus)\n\n    pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.\n\n    *PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).*\n\n    - **currentMetrics.pods.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.pods.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.pods.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.pods.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.pods.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **currentMetrics.pods.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **currentMetrics.pods.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n  - **currentMetrics.resource** (ResourceMetricStatus)\n\n    resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n\n    *ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.*\n\n    - **currentMetrics.resource.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.resource.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.resource.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.resource.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.resource.name** (string), required\n\n      name is the name of the resource in question.\n\n- **currentReplicas** (int32)\n\n  currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.\n\n- **lastScaleTime** (Time)\n\n  lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **observedGeneration** (int64)\n\n  observedGeneration is the most recent generation observed by this autoscaler.\n\n## HorizontalPodAutoscalerList\n\nHorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.\n\n- **apiVersion**: autoscaling/v2\n\n- **kind**: HorizontalPodAutoscalerList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  metadata is the standard list metadata.\n\n- **items** (\\[\\][HorizontalPodAutoscaler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscaler)), required\n\n  items is the list of horizontal pod autoscaler objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/)"
- name: HorizontalPodAutoscaler
  id: workload-resources/horizontal-pod-autoscaler-v1/index
  summary: configuration of a horizontal pod autoscaler
  description: "# HorizontalPodAutoscaler\n\nconfiguration of a horizontal pod autoscaler.\n\n`apiVersion: autoscaling/v1`\n\n`import \"k8s.io/api/autoscaling/v1\"`\n\n## HorizontalPodAutoscaler\n\nconfiguration of a horizontal pod autoscaler.\n\n- **apiVersion**: autoscaling/v1\n\n- **kind**: HorizontalPodAutoscaler\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/#HorizontalPodAutoscalerSpec))\n\n  spec defines the behaviour of autoscaler. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>.\n\n- **status** ([HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/#HorizontalPodAutoscalerStatus))\n\n  status is the current information about the autoscaler.\n\n## HorizontalPodAutoscalerSpec\n\nspecification of a horizontal pod autoscaler.\n\n- **maxReplicas** (int32), required\n\n  maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.\n\n- **scaleTargetRef** (CrossVersionObjectReference), required\n\n  reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.\n\n  *CrossVersionObjectReference contains enough information to let you identify the referred resource.*\n\n  - **scaleTargetRef.kind** (string), required\n\n    kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n  - **scaleTargetRef.name** (string), required\n\n    name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n  - **scaleTargetRef.apiVersion** (string)\n\n    apiVersion is the API version of the referent\n\n- **minReplicas** (int32)\n\n  minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.\n\n- **targetCPUUtilizationPercentage** (int32)\n\n  targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.\n\n## HorizontalPodAutoscalerStatus\n\ncurrent status of a horizontal pod autoscaler\n\n- **currentReplicas** (int32), required\n\n  currentReplicas is the current number of replicas of pods managed by this autoscaler.\n\n- **desiredReplicas** (int32), required\n\n  desiredReplicas is the desired number of replicas of pods managed by this autoscaler.\n\n- **currentCPUUtilizationPercentage** (int32)\n\n  currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.\n\n- **lastScaleTime** (Time)\n\n  lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **observedGeneration** (int64)\n\n  observedGeneration is the most recent generation observed by this autoscaler.\n\n## HorizontalPodAutoscalerList\n\nlist of horizontal pod autoscaler objects.\n\n- **apiVersion**: autoscaling/v1\n\n- **kind**: HorizontalPodAutoscalerList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata.\n\n- **items** (\\[\\][HorizontalPodAutoscaler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/#HorizontalPodAutoscaler)), required\n\n  items is the list of horizontal pod autoscaler objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/)"
- name: HorizontalPodAutoscaler.Spec
  id: workload-resources/horizontal-pod-autoscaler-v1/index#HorizontalPodAutoscalerSpec
  summary: specification of a horizontal pod autoscaler
  belongs_to: HorizontalPodAutoscaler
  description: |-
    ## HorizontalPodAutoscalerSpec

    specification of a horizontal pod autoscaler.

    - **maxReplicas** (int32), required

      maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.

    - **scaleTargetRef** (CrossVersionObjectReference), required

      reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.

      *CrossVersionObjectReference contains enough information to let you identify the referred resource.*

      - **scaleTargetRef.kind** (string), required

        kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>

      - **scaleTargetRef.name** (string), required

        name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

      - **scaleTargetRef.apiVersion** (string)

        apiVersion is the API version of the referent

    - **minReplicas** (int32)

      minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.

    - **targetCPUUtilizationPercentage** (int32)

      targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.

    &nbsp;
- name: HorizontalPodAutoscaler.Spec
  id: workload-resources/horizontal-pod-autoscaler-v2/index#HorizontalPodAutoscalerSpec
  summary: HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler
  belongs_to: HorizontalPodAutoscaler
  description: |-
    ## HorizontalPodAutoscalerSpec

    HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.

    - **maxReplicas** (int32), required

      maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.

    - **scaleTargetRef** (CrossVersionObjectReference), required

      scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.

      *CrossVersionObjectReference contains enough information to let you identify the referred resource.*

      - **scaleTargetRef.kind** (string), required

        kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>

      - **scaleTargetRef.name** (string), required

        name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

      - **scaleTargetRef.apiVersion** (string)

        apiVersion is the API version of the referent

    - **minReplicas** (int32)

      minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.

    - **behavior** (HorizontalPodAutoscalerBehavior)

      behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.

      *HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).*

      - **behavior.scaleDown** (HPAScalingRules)

        scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).

        *HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.*

        - **behavior.scaleDown.policies** (\[\]HPAScalingPolicy)

          *Atomic: will be replaced during a merge*

          policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid

          *HPAScalingPolicy is a single policy which must hold true for a specified past interval.*

          - **behavior.scaleDown.policies.type** (string), required

            type is used to specify the scaling policy.

          - **behavior.scaleDown.policies.value** (int32), required

            value contains the amount of change which is permitted by the policy. It must be greater than zero

          - **behavior.scaleDown.policies.periodSeconds** (int32), required

            periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).

        - **behavior.scaleDown.selectPolicy** (string)

          selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.

        - **behavior.scaleDown.stabilizationWindowSeconds** (int32)

          stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).

      - **behavior.scaleUp** (HPAScalingRules)

        scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:

        - increase no more than 4 pods per 60 seconds
        - double the number of pods per 60 seconds No stabilization is used.

        *HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.*

        - **behavior.scaleUp.policies** (\[\]HPAScalingPolicy)

          *Atomic: will be replaced during a merge*

          policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid

          *HPAScalingPolicy is a single policy which must hold true for a specified past interval.*

          - **behavior.scaleUp.policies.type** (string), required

            type is used to specify the scaling policy.

          - **behavior.scaleUp.policies.value** (int32), required

            value contains the amount of change which is permitted by the policy. It must be greater than zero

          - **behavior.scaleUp.policies.periodSeconds** (int32), required

            periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).

        - **behavior.scaleUp.selectPolicy** (string)

          selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.

        - **behavior.scaleUp.stabilizationWindowSeconds** (int32)

          stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).

    - **metrics** (\[\]MetricSpec)

      *Atomic: will be replaced during a merge*

      metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.

      *MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).*

      - **metrics.type** (string), required

        type is the type of metric source. It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled

      - **metrics.containerResource** (ContainerResourceMetricSource)

        containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.

        *ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source. Only one "target" type should be set.*

        - **metrics.containerResource.container** (string), required

          container is the name of the container in the pods of the scaling target

        - **metrics.containerResource.name** (string), required

          name is the name of the resource in question.

        - **metrics.containerResource.target** (MetricTarget), required

          target specifies the target value for the given metric

          *MetricTarget defines the target value, average value, or average utilization of a specific metric*

          - **metrics.containerResource.target.type** (string), required

            type represents whether the metric type is Utilization, Value, or AverageValue

          - **metrics.containerResource.target.averageUtilization** (int32)

            averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type

          - **metrics.containerResource.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            averageValue is the target value of the average of the metric across all relevant pods (as a quantity)

          - **metrics.containerResource.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            value is the target value of the metric (as a quantity).

      - **metrics.external** (ExternalMetricSource)

        external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).

        *ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).*

        - **metrics.external.metric** (MetricIdentifier), required

          metric identifies the target metric by name and selector

          *MetricIdentifier defines the name and optionally selector for a metric*

          - **metrics.external.metric.name** (string), required

            name is the name of the given metric

          - **metrics.external.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

            selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.

        - **metrics.external.target** (MetricTarget), required

          target specifies the target value for the given metric

          *MetricTarget defines the target value, average value, or average utilization of a specific metric*

          - **metrics.external.target.type** (string), required

            type represents whether the metric type is Utilization, Value, or AverageValue

          - **metrics.external.target.averageUtilization** (int32)

            averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type

          - **metrics.external.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            averageValue is the target value of the average of the metric across all relevant pods (as a quantity)

          - **metrics.external.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            value is the target value of the metric (as a quantity).

      - **metrics.object** (ObjectMetricSource)

        object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).

        *ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).*

        - **metrics.object.describedObject** (CrossVersionObjectReference), required

          describedObject specifies the descriptions of a object,such as kind,name apiVersion

          *CrossVersionObjectReference contains enough information to let you identify the referred resource.*

          - **metrics.object.describedObject.kind** (string), required

            kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>

          - **metrics.object.describedObject.name** (string), required

            name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>

          - **metrics.object.describedObject.apiVersion** (string)

            apiVersion is the API version of the referent

        - **metrics.object.metric** (MetricIdentifier), required

          metric identifies the target metric by name and selector

          *MetricIdentifier defines the name and optionally selector for a metric*

          - **metrics.object.metric.name** (string), required

            name is the name of the given metric

          - **metrics.object.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

            selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.

        - **metrics.object.target** (MetricTarget), required

          target specifies the target value for the given metric

          *MetricTarget defines the target value, average value, or average utilization of a specific metric*

          - **metrics.object.target.type** (string), required

            type represents whether the metric type is Utilization, Value, or AverageValue

          - **metrics.object.target.averageUtilization** (int32)

            averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type

          - **metrics.object.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            averageValue is the target value of the average of the metric across all relevant pods (as a quantity)

          - **metrics.object.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            value is the target value of the metric (as a quantity).

      - **metrics.pods** (PodsMetricSource)

        pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.

        *PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.*

        - **metrics.pods.metric** (MetricIdentifier), required

          metric identifies the target metric by name and selector

          *MetricIdentifier defines the name and optionally selector for a metric*

          - **metrics.pods.metric.name** (string), required

            name is the name of the given metric

          - **metrics.pods.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

            selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.

        - **metrics.pods.target** (MetricTarget), required

          target specifies the target value for the given metric

          *MetricTarget defines the target value, average value, or average utilization of a specific metric*

          - **metrics.pods.target.type** (string), required

            type represents whether the metric type is Utilization, Value, or AverageValue

          - **metrics.pods.target.averageUtilization** (int32)

            averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type

          - **metrics.pods.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            averageValue is the target value of the average of the metric across all relevant pods (as a quantity)

          - **metrics.pods.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            value is the target value of the metric (as a quantity).

      - **metrics.resource** (ResourceMetricSource)

        resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.

        *ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source. Only one "target" type should be set.*

        - **metrics.resource.name** (string), required

          name is the name of the resource in question.

        - **metrics.resource.target** (MetricTarget), required

          target specifies the target value for the given metric

          *MetricTarget defines the target value, average value, or average utilization of a specific metric*

          - **metrics.resource.target.type** (string), required

            type represents whether the metric type is Utilization, Value, or AverageValue

          - **metrics.resource.target.averageUtilization** (int32)

            averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type

          - **metrics.resource.target.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            averageValue is the target value of the average of the metric across all relevant pods (as a quantity)

          - **metrics.resource.target.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

            value is the target value of the metric (as a quantity).

    &nbsp;
- name: HorizontalPodAutoscaler.Status
  id: workload-resources/horizontal-pod-autoscaler-v2/index#HorizontalPodAutoscalerStatus
  summary: HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler
  belongs_to: HorizontalPodAutoscaler
  description: "## HorizontalPodAutoscalerStatus\n\nHorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.\n\n- **desiredReplicas** (int32), required\n\n  desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.\n\n- **conditions** (\\[\\]HorizontalPodAutoscalerCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.\n\n  *HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.*\n\n  - **conditions.status** (string), required\n\n    status is the status of the condition (True, False, Unknown)\n\n  - **conditions.type** (string), required\n\n    type describes the current condition\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime is the last time the condition transitioned from one status to another\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message is a human-readable explanation containing details about the transition\n\n  - **conditions.reason** (string)\n\n    reason is the reason for the condition's last transition.\n\n- **currentMetrics** (\\[\\]MetricStatus)\n\n  *Atomic: will be replaced during a merge*\n\n  currentMetrics is the last read state of the metrics used by this autoscaler.\n\n  *MetricStatus describes the last-read state of a single metric.*\n\n  - **currentMetrics.type** (string), required\n\n    type is the type of metric source. It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled\n\n  - **currentMetrics.containerResource** (ContainerResourceMetricStatus)\n\n    container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n\n    *ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.*\n\n    - **currentMetrics.containerResource.container** (string), required\n\n      container is the name of the container in the pods of the scaling target\n\n    - **currentMetrics.containerResource.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.containerResource.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.containerResource.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.containerResource.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.containerResource.name** (string), required\n\n      name is the name of the resource in question.\n\n  - **currentMetrics.external** (ExternalMetricStatus)\n\n    external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).\n\n    *ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.*\n\n    - **currentMetrics.external.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.external.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.external.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.external.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.external.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **currentMetrics.external.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **currentMetrics.external.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n  - **currentMetrics.object** (ObjectMetricStatus)\n\n    object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).\n\n    *ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).*\n\n    - **currentMetrics.object.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.object.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.object.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.object.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.object.describedObject** (CrossVersionObjectReference), required\n\n      DescribedObject specifies the descriptions of a object,such as kind,name apiVersion\n\n      *CrossVersionObjectReference contains enough information to let you identify the referred resource.*\n\n      - **currentMetrics.object.describedObject.kind** (string), required\n\n        kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n      - **currentMetrics.object.describedObject.name** (string), required\n\n        name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **currentMetrics.object.describedObject.apiVersion** (string)\n\n        apiVersion is the API version of the referent\n\n    - **currentMetrics.object.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **currentMetrics.object.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **currentMetrics.object.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n  - **currentMetrics.pods** (PodsMetricStatus)\n\n    pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.\n\n    *PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).*\n\n    - **currentMetrics.pods.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.pods.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.pods.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.pods.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.pods.metric** (MetricIdentifier), required\n\n      metric identifies the target metric by name and selector\n\n      *MetricIdentifier defines the name and optionally selector for a metric*\n\n      - **currentMetrics.pods.metric.name** (string), required\n\n        name is the name of the given metric\n\n      - **currentMetrics.pods.metric.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.\n\n  - **currentMetrics.resource** (ResourceMetricStatus)\n\n    resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n\n    *ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.*\n\n    - **currentMetrics.resource.current** (MetricValueStatus), required\n\n      current contains the current value for the given metric\n\n      *MetricValueStatus holds the current value for a metric*\n\n      - **currentMetrics.resource.current.averageUtilization** (int32)\n\n        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n\n      - **currentMetrics.resource.current.averageValue** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n\n      - **currentMetrics.resource.current.value** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n        value is the current value of the metric (as a quantity).\n\n    - **currentMetrics.resource.name** (string), required\n\n      name is the name of the resource in question.\n\n- **currentReplicas** (int32)\n\n  currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.\n\n- **lastScaleTime** (Time)\n\n  lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **observedGeneration** (int64)\n\n  observedGeneration is the most recent generation observed by this autoscaler.\n\n## HorizontalPodAutoscalerList\n\nHorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.\n\n- **apiVersion**: autoscaling/v2\n\n- **kind**: HorizontalPodAutoscalerList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  metadata is the standard list metadata.\n\n- **items** (\\[\\][HorizontalPodAutoscaler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscaler)), required\n\n  items is the list of horizontal pod autoscaler objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/)"
- name: HorizontalPodAutoscaler.Status
  id: workload-resources/horizontal-pod-autoscaler-v1/index#HorizontalPodAutoscalerStatus
  summary: currentReplicas is the current number of replicas of pods managed by this autoscaler
  belongs_to: HorizontalPodAutoscaler
  description: "## HorizontalPodAutoscalerStatus\n\ncurrent status of a horizontal pod autoscaler\n\n- **currentReplicas** (int32), required\n\n  currentReplicas is the current number of replicas of pods managed by this autoscaler.\n\n- **desiredReplicas** (int32), required\n\n  desiredReplicas is the desired number of replicas of pods managed by this autoscaler.\n\n- **currentCPUUtilizationPercentage** (int32)\n\n  currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.\n\n- **lastScaleTime** (Time)\n\n  lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **observedGeneration** (int64)\n\n  observedGeneration is the most recent generation observed by this autoscaler.\n\n## HorizontalPodAutoscalerList\n\nlist of horizontal pod autoscaler objects.\n\n- **apiVersion**: autoscaling/v1\n\n- **kind**: HorizontalPodAutoscalerList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata.\n\n- **items** (\\[\\][HorizontalPodAutoscaler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/#HorizontalPodAutoscaler)), required\n\n  items is the list of horizontal pod autoscaler objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v1/)"
- name: Ingress
  id: service-resources/ingress-v1/index
  summary: Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend
  description: "# Ingress\n\nIngress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend.\n\n`apiVersion: networking.k8s.io/v1`\n\n`import \"k8s.io/api/networking/v1\"`\n\n## Ingress\n\nIngress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.\n\n- **apiVersion**: networking.k8s.io/v1\n\n- **kind**: Ingress\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([IngressSpec](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressSpec))\n\n  spec is the desired state of the Ingress. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([IngressStatus](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressStatus))\n\n  status is the current state of the Ingress. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## IngressSpec\n\nIngressSpec describes the Ingress the user wishes to exist.\n\n- **defaultBackend** ([IngressBackend](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressBackend))\n\n  defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.\n\n- **ingressClassName** (string)\n\n  ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -\\> IngressClass -\\> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.\n\n- **rules** (\\[\\]IngressRule)\n\n  *Atomic: will be replaced during a merge*\n\n  rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.\n\n  *IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.*\n\n  - **rules.host** (string)\n\n    host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\n    host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"\\*\"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.\n\n  - **rules.http** (HTTPIngressRuleValue)\n\n    *HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http:///? -\\> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.*\n\n    - **rules.http.paths** (\\[\\]HTTPIngressPath), required\n\n      *Atomic: will be replaced during a merge*\n\n      paths is a collection of paths that map requests to backends.\n\n      *HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.*\n\n      - **rules.http.paths.backend** ([IngressBackend](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressBackend)), required\n\n        backend defines the referenced service endpoint to which the traffic will be forwarded to.\n\n      - **rules.http.paths.pathType** (string), required\n\n        pathType determines the interpretation of the path matching. PathType can be one of the following values: \\* Exact: Matches the URL path exactly. \\* Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz).\n\n        - ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.\n\n      - **rules.http.paths.path** (string)\n\n        path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".\n\n- **tls** (\\[\\]IngressTLS)\n\n  *Atomic: will be replaced during a merge*\n\n  tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.\n\n  *IngressTLS describes the transport layer security associated with an ingress.*\n\n  - **tls.hosts** (\\[\\]string)\n\n    *Atomic: will be replaced during a merge*\n\n    hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.\n\n  - **tls.secretName** (string)\n\n    secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.\n\n## IngressBackend\n\nIngressBackend describes all endpoints for a given service and port.\n\n- **resource** ([TypedLocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/typed-local-object-reference/#TypedLocalObjectReference))\n\n  resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\".\n\n- **service** (IngressServiceBackend)\n\n  service references a service as a backend. This is a mutually exclusive setting with \"Resource\".\n\n  *IngressServiceBackend references a Kubernetes Service as a Backend.*\n\n  - **service.name** (string), required\n\n    name is the referenced service. The service must exist in the same namespace as the Ingress object.\n\n  - **service.port** (ServiceBackendPort)\n\n    port of the referenced service. A port name or port number is required for a IngressServiceBackend.\n\n    *ServiceBackendPort is the service port being referenced.*\n\n    - **service.port.name** (string)\n\n      name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".\n\n    - **service.port.number** (int32)\n\n      number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".\n\n## IngressStatus\n\nIngressStatus describe the current state of the Ingress.\n\n- **loadBalancer** (IngressLoadBalancerStatus)\n\n  loadBalancer contains the current status of the load-balancer.\n\n  *IngressLoadBalancerStatus represents the status of a load-balancer.*\n\n  - **loadBalancer.ingress** (\\[\\]IngressLoadBalancerIngress)\n\n    ingress is a list containing ingress points for the load-balancer.\n\n    *IngressLoadBalancerIngress represents the status of a load-balancer ingress point.*\n\n    - **loadBalancer.ingress.hostname** (string)\n\n      hostname is set for load-balancer ingress points that are DNS based.\n\n    - **loadBalancer.ingress.ip** (string)\n\n      ip is set for load-balancer ingress points that are IP based.\n\n    - **loadBalancer.ingress.ports** (\\[\\]IngressPortStatus)\n\n      *Atomic: will be replaced during a merge*\n\n      ports provides information about the ports exposed by this LoadBalancer.\n\n      *IngressPortStatus represents the error condition of a service port*\n\n      - **loadBalancer.ingress.ports.port** (int32), required\n\n        port is the port number of the ingress port.\n\n      - **loadBalancer.ingress.ports.protocol** (string), required\n\n        protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\n      - **loadBalancer.ingress.ports.error** (string)\n\n        error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names\n\n        - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase.\n\n## IngressList\n\nIngressList is a collection of Ingress.\n\n- **items** (\\[\\][Ingress](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#Ingress)), required\n\n  items is the list of Ingress.\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/)"
- name: Ingress.Backend
  id: service-resources/ingress-v1/index#IngressBackend
  summary: IngressBackend describes all endpoints for a given service and port
  belongs_to: Ingress
  description: |-
    ## IngressBackend

    IngressBackend describes all endpoints for a given service and port.

    - **resource** ([TypedLocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/typed-local-object-reference/#TypedLocalObjectReference))

      resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".

    - **service** (IngressServiceBackend)

      service references a service as a backend. This is a mutually exclusive setting with "Resource".

      *IngressServiceBackend references a Kubernetes Service as a Backend.*

      - **service.name** (string), required

        name is the referenced service. The service must exist in the same namespace as the Ingress object.

      - **service.port** (ServiceBackendPort)

        port of the referenced service. A port name or port number is required for a IngressServiceBackend.

        *ServiceBackendPort is the service port being referenced.*

        - **service.port.name** (string)

          name is the name of the port on the Service. This is a mutually exclusive setting with "Number".

        - **service.port.number** (int32)

          number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".

    &nbsp;
- name: Ingress.Spec
  id: service-resources/ingress-v1/index#IngressSpec
  summary: IngressSpec describes the Ingress the user wishes to exist
  belongs_to: Ingress
  description: |-
    ## IngressSpec

    IngressSpec describes the Ingress the user wishes to exist.

    - **defaultBackend** ([IngressBackend](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressBackend))

      defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.

    - **ingressClassName** (string)

      ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -\> IngressClass -\> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.

    - **rules** (\[\]IngressRule)

      *Atomic: will be replaced during a merge*

      rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.

      *IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.*

      - **rules.host** (string)

        host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.

        host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "\*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.

      - **rules.http** (HTTPIngressRuleValue)

        *HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http:///? -\> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.*

        - **rules.http.paths** (\[\]HTTPIngressPath), required

          *Atomic: will be replaced during a merge*

          paths is a collection of paths that map requests to backends.

          *HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.*

          - **rules.http.paths.backend** ([IngressBackend](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressBackend)), required

            backend defines the referenced service endpoint to which the traffic will be forwarded to.

          - **rules.http.paths.pathType** (string), required

            pathType determines the interpretation of the path matching. PathType can be one of the following values: \* Exact: Matches the URL path exactly. \* Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz).

            - ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.

          - **rules.http.paths.path** (string)

            path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".

    - **tls** (\[\]IngressTLS)

      *Atomic: will be replaced during a merge*

      tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.

      *IngressTLS describes the transport layer security associated with an ingress.*

      - **tls.hosts** (\[\]string)

        *Atomic: will be replaced during a merge*

        hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.

      - **tls.secretName** (string)

        secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.

    &nbsp;
- name: Ingress.Status
  id: service-resources/ingress-v1/index#IngressStatus
  summary: IngressStatus describe the current state of the Ingress
  belongs_to: Ingress
  description: "## IngressStatus\n\nIngressStatus describe the current state of the Ingress.\n\n- **loadBalancer** (IngressLoadBalancerStatus)\n\n  loadBalancer contains the current status of the load-balancer.\n\n  *IngressLoadBalancerStatus represents the status of a load-balancer.*\n\n  - **loadBalancer.ingress** (\\[\\]IngressLoadBalancerIngress)\n\n    ingress is a list containing ingress points for the load-balancer.\n\n    *IngressLoadBalancerIngress represents the status of a load-balancer ingress point.*\n\n    - **loadBalancer.ingress.hostname** (string)\n\n      hostname is set for load-balancer ingress points that are DNS based.\n\n    - **loadBalancer.ingress.ip** (string)\n\n      ip is set for load-balancer ingress points that are IP based.\n\n    - **loadBalancer.ingress.ports** (\\[\\]IngressPortStatus)\n\n      *Atomic: will be replaced during a merge*\n\n      ports provides information about the ports exposed by this LoadBalancer.\n\n      *IngressPortStatus represents the error condition of a service port*\n\n      - **loadBalancer.ingress.ports.port** (int32), required\n\n        port is the port number of the ingress port.\n\n      - **loadBalancer.ingress.ports.protocol** (string), required\n\n        protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\n      - **loadBalancer.ingress.ports.error** (string)\n\n        error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names\n\n        - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase.\n\n## IngressList\n\nIngressList is a collection of Ingress.\n\n- **items** (\\[\\][Ingress](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#Ingress)), required\n\n  items is the list of Ingress.\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/)"
- name: IngressClass
  id: service-resources/ingress-class-v1/index
  summary: IngressClass represents the class of the Ingress, referenced by the Ingress Spec
  description: "# IngressClass\n\nIngressClass represents the class of the Ingress, referenced by the Ingress Spec.\n\n`apiVersion: networking.k8s.io/v1`\n\n`import \"k8s.io/api/networking/v1\"`\n\n## IngressClass\n\nIngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.\n\n- **apiVersion**: networking.k8s.io/v1\n\n- **kind**: IngressClass\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([IngressClassSpec](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/#IngressClassSpec))\n\n  spec is the desired state of the IngressClass. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## IngressClassSpec\n\nIngressClassSpec provides information about the class of an Ingress.\n\n- **controller** (string)\n\n  controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.\n\n- **parameters** (IngressClassParametersReference)\n\n  parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.\n\n  *IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.*\n\n  - **parameters.kind** (string), required\n\n    kind is the type of resource being referenced.\n\n  - **parameters.name** (string), required\n\n    name is the name of resource being referenced.\n\n  - **parameters.apiGroup** (string)\n\n    apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.\n\n  - **parameters.namespace** (string)\n\n    namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\".\n\n  - **parameters.scope** (string)\n\n    scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".\n\n## IngressClassList\n\nIngressClassList is a collection of IngressClasses.\n\n- **apiVersion**: networking.k8s.io/v1\n\n- **kind**: IngressClassList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata.\n\n- **items** (\\[\\][IngressClass](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/#IngressClass)), required\n\n  items is the list of IngressClasses.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/)"
- name: IngressClass.Spec
  id: service-resources/ingress-class-v1/index#IngressClassSpec
  summary: IngressClassSpec provides information about the class of an Ingress
  belongs_to: IngressClass
  description: "## IngressClassSpec\n\nIngressClassSpec provides information about the class of an Ingress.\n\n- **controller** (string)\n\n  controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.\n\n- **parameters** (IngressClassParametersReference)\n\n  parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.\n\n  *IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.*\n\n  - **parameters.kind** (string), required\n\n    kind is the type of resource being referenced.\n\n  - **parameters.name** (string), required\n\n    name is the name of resource being referenced.\n\n  - **parameters.apiGroup** (string)\n\n    apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.\n\n  - **parameters.namespace** (string)\n\n    namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\".\n\n  - **parameters.scope** (string)\n\n    scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".\n\n## IngressClassList\n\nIngressClassList is a collection of IngressClasses.\n\n- **apiVersion**: networking.k8s.io/v1\n\n- **kind**: IngressClassList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata.\n\n- **items** (\\[\\][IngressClass](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/#IngressClass)), required\n\n  items is the list of IngressClasses.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-class-v1/)"
- name: IPAddress
  id: policy-resources/ip-address-v1alpha1/index#IPAddress
  summary: IPAddress represents a single IP of a single IP Family
  belongs_to: IPAddress v1alpha1
  description: |-
    ## IPAddress

    IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1

    - **apiVersion**: networking.k8s.io/v1alpha1

    - **kind**: IPAddress

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>

    - **spec** ([IPAddressSpec](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/#IPAddressSpec))

      spec is the desired state of the IPAddress. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
- name: IPAddress v1alpha1
  id: policy-resources/ip-address-v1alpha1/index
  summary: IPAddress represents a single IP of a single IP Family
  description: "# IPAddress v1alpha1\n\nIPAddress represents a single IP of a single IP Family.\n\n`apiVersion: networking.k8s.io/v1alpha1`\n\n`import \"k8s.io/api/networking/v1alpha1\"`\n\n## IPAddress\n\nIPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1\n\n- **apiVersion**: networking.k8s.io/v1alpha1\n\n- **kind**: IPAddress\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([IPAddressSpec](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/#IPAddressSpec))\n\n  spec is the desired state of the IPAddress. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## IPAddressSpec\n\nIPAddressSpec describe the attributes in an IP Address.\n\n- **parentRef** (ParentReference)\n\n  ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.\n\n  *ParentReference describes a reference to a parent object.*\n\n  - **parentRef.group** (string)\n\n    Group is the group of the object being referenced.\n\n  - **parentRef.name** (string)\n\n    Name is the name of the object being referenced.\n\n  - **parentRef.namespace** (string)\n\n    Namespace is the namespace of the object being referenced.\n\n  - **parentRef.resource** (string)\n\n    Resource is the resource of the object being referenced.\n\n  - **parentRef.uid** (string)\n\n    UID is the uid of the object being referenced.\n\n## IPAddressList\n\nIPAddressList contains a list of IPAddress.\n\n- **apiVersion**: networking.k8s.io/v1alpha1\n\n- **kind**: IPAddressList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][IPAddress](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/#IPAddress)), required\n\n  items is the list of IPAddresses.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/)"
- name: IPAddressList
  id: policy-resources/ip-address-v1alpha1/index#IPAddressList
  summary: IPAddressList contains a list of IPAddress
  belongs_to: IPAddress v1alpha1
  description: "## IPAddressList\n\nIPAddressList contains a list of IPAddress.\n\n- **apiVersion**: networking.k8s.io/v1alpha1\n\n- **kind**: IPAddressList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][IPAddress](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/#IPAddress)), required\n\n  items is the list of IPAddresses.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/ip-address-v1alpha1/)"
- name: IPAddressSpec
  id: policy-resources/ip-address-v1alpha1/index#IPAddressSpec
  summary: IPAddressSpec describe the attributes in an IP Address
  belongs_to: IPAddress v1alpha1
  description: |-
    ## IPAddressSpec

    IPAddressSpec describe the attributes in an IP Address.

    - **parentRef** (ParentReference)

      ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.

      *ParentReference describes a reference to a parent object.*

      - **parentRef.group** (string)

        Group is the group of the object being referenced.

      - **parentRef.name** (string)

        Name is the name of the object being referenced.

      - **parentRef.namespace** (string)

        Namespace is the namespace of the object being referenced.

      - **parentRef.resource** (string)

        Resource is the resource of the object being referenced.

      - **parentRef.uid** (string)

        UID is the uid of the object being referenced.

    &nbsp;
- name: Job
  id: workload-resources/job-v1/index
  summary: Job represents the configuration of a single job
  description: "# Job\n\nJob represents the configuration of a single job.\n\n`apiVersion: batch/v1`\n\n`import \"k8s.io/api/batch/v1\"`\n\n## Job\n\nJob represents the configuration of a single job.\n\n- **apiVersion**: batch/v1\n\n- **kind**: Job\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([JobSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/#JobSpec))\n\n  Specification of the desired behavior of a job. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([JobStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/#JobStatus))\n\n  Current status of a job. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## JobSpec\n\nJobSpec describes how the job execution will look like.\n\n### Replicas\n\n- **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required\n\n  Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are \"Never\" or \"OnFailure\". More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>\n\n- **parallelism** (int32)\n\n  Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \\< .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>\n\n### Lifecycle\n\n- **completions** (int32)\n\n  Specifies the desired number of successfully finished pods the job should be run with. Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>\n\n- **completionMode** (string)\n\n  completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.\n\n  `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.\n\n  `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.\n\n  More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.\n\n- **backoffLimit** (int32)\n\n  Specifies the number of retries before marking this job failed. Defaults to 6\n\n- **activeDeadlineSeconds** (int64)\n\n  Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.\n\n- **ttlSecondsAfterFinished** (int32)\n\n  ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.\n\n- **suspend** (boolean)\n\n  suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.\n\n### Selector\n\n- **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n  A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>\n\n- **manualSelector** (boolean)\n\n  manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector>\n\n### Beta level\n\n- **podFailurePolicy** (PodFailurePolicy)\n\n  Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.\n\n  This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).\n\n  *PodFailurePolicy describes how failed pods influence the backoffLimit.*\n\n  - **podFailurePolicy.rules** (\\[\\]PodFailurePolicyRule), required\n\n    *Atomic: will be replaced during a merge*\n\n    A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.\n\n    *PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.*\n\n    - **podFailurePolicy.rules.action** (string), required\n\n      Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:\n\n      - FailJob: indicates that the pod's job is marked as Failed and all running pods are terminated.\n      - FailIndex: indicates that the pod's index is marked as Failed and will not be restarted. This value is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).\n      - Ignore: indicates that the counter towards the .backoffLimit is not incremented and a replacement pod is created.\n      - Count: indicates that the pod is handled in the default way - the counter towards the .backoffLimit is incremented. Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.\n\n    - **podFailurePolicy.rules.onPodConditions** (\\[\\]PodFailurePolicyOnPodConditionsPattern), required\n\n      *Atomic: will be replaced during a merge*\n\n      Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.\n\n      *PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.*\n\n      - **podFailurePolicy.rules.onPodConditions.status** (string), required\n\n        Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.\n\n      - **podFailurePolicy.rules.onPodConditions.type** (string), required\n\n        Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.\n\n    - **podFailurePolicy.rules.onExitCodes** (PodFailurePolicyOnExitCodesRequirement)\n\n      Represents the requirement on the container exit codes.\n\n      *PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.*\n\n      - **podFailurePolicy.rules.onExitCodes.operator** (string), required\n\n        Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:\n\n        - In: the requirement is satisfied if at least one container exit code (might be multiple if there are multiple containers not restricted by the 'containerName' field) is in the set of specified values.\n        - NotIn: the requirement is satisfied if at least one container exit code (might be multiple if there are multiple containers not restricted by the 'containerName' field) is not in the set of specified values. Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.\n\n      - **podFailurePolicy.rules.onExitCodes.values** (\\[\\]int32), required\n\n        *Set: unique values will be kept during a merge*\n\n        Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.\n\n      - **podFailurePolicy.rules.onExitCodes.containerName** (string)\n\n        Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.\n\n### Alpha level\n\n- **backoffLimitPerIndex** (int32)\n\n  Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).\n\n- **maxFailedIndexes** (int32)\n\n  Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).\n\n- **podReplacementPolicy** (string)\n\n  podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods when they are terminating (has a metadata.deletionTimestamp) or failed.\n\n  - Failed means to wait until a previously created Pod is fully terminated (has phase Failed or Succeeded) before creating a replacement Pod.\n\n  When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an alpha field. Enable JobPodReplacementPolicy to be able to use this field.\n\n## JobStatus\n\nJobStatus represents the current state of a Job.\n\n- **startTime** (Time)\n\n  Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **completionTime** (Time)\n\n  Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **active** (int32)\n\n  The number of pending and running pods.\n\n- **failed** (int32)\n\n  The number of pods which reached phase Failed.\n\n- **succeeded** (int32)\n\n  The number of pods which reached phase Succeeded.\n\n- **completedIndexes** (string)\n\n  completedIndexes holds the completed indexes when .spec.completionMode = \"Indexed\" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\".\n\n- **conditions** (\\[\\]JobCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Atomic: will be replaced during a merge*\n\n  The latest available observations of an object's current state. When a Job fails, one of the conditions will have type \"Failed\" and status true. When a Job is suspended, one of the conditions will have type \"Suspended\" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type \"Complete\" and status true. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>\n\n  *JobCondition describes current state of a job.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of job condition, Complete or Failed.\n\n  - **conditions.lastProbeTime** (Time)\n\n    Last time the condition was checked.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transit from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    (brief) reason for the condition's last transition.\n\n- **uncountedTerminatedPods** (UncountedTerminatedPods)\n\n  uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\n  The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:\n\n  1.  Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding counter.\n\n  Old jobs might not be tracked using this field, in which case the field remains null.\n\n  *UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.*\n\n  - **uncountedTerminatedPods.failed** (\\[\\]string)\n\n    *Set: unique values will be kept during a merge*\n\n    failed holds UIDs of failed Pods.\n\n  - **uncountedTerminatedPods.succeeded** (\\[\\]string)\n\n    *Set: unique values will be kept during a merge*\n\n    succeeded holds UIDs of succeeded Pods.\n\n### Beta level\n\n- **ready** (int32)\n\n  The number of pods which have a Ready condition.\n\n  This field is beta-level. The job controller populates the field when the feature gate JobReadyPods is enabled (enabled by default).\n\n### Alpha level\n\n- **failedIndexes** (string)\n\n  FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).\n\n- **terminating** (int32)\n\n  The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).\n\n  This field is alpha-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (disabled by default).\n\n## JobList\n\nJobList is a collection of jobs.\n\n- **apiVersion**: batch/v1\n\n- **kind**: JobList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][Job](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/#Job)), required\n\n  items is the list of Jobs.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/)"
- name: Job.Spec
  id: workload-resources/job-v1/index#JobSpec
  summary: JobSpec describes how the job execution will look like
  belongs_to: Job
  description: |-
    ## JobSpec

    JobSpec describes how the job execution will look like.

    ### Replicas

    - **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required

      Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are "Never" or "OnFailure". More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>

    - **parallelism** (int32)

      Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \< .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>

    ### Lifecycle

    - **completions** (int32)

      Specifies the desired number of successfully finished pods the job should be run with. Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>

    - **completionMode** (string)

      completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.

      `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.

      `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.

      More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.

    - **backoffLimit** (int32)

      Specifies the number of retries before marking this job failed. Defaults to 6

    - **activeDeadlineSeconds** (int64)

      Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.

    - **ttlSecondsAfterFinished** (int32)

      ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.

    - **suspend** (boolean)

      suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.

    ### Selector

    - **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

      A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>

    - **manualSelector** (boolean)

      manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector>

    ### Beta level

    - **podFailurePolicy** (PodFailurePolicy)

      Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.

      This field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).

      *PodFailurePolicy describes how failed pods influence the backoffLimit.*

      - **podFailurePolicy.rules** (\[\]PodFailurePolicyRule), required

        *Atomic: will be replaced during a merge*

        A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.

        *PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.*

        - **podFailurePolicy.rules.action** (string), required

          Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:

          - FailJob: indicates that the pod's job is marked as Failed and all running pods are terminated.
          - FailIndex: indicates that the pod's index is marked as Failed and will not be restarted. This value is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).
          - Ignore: indicates that the counter towards the .backoffLimit is not incremented and a replacement pod is created.
          - Count: indicates that the pod is handled in the default way - the counter towards the .backoffLimit is incremented. Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.

        - **podFailurePolicy.rules.onPodConditions** (\[\]PodFailurePolicyOnPodConditionsPattern), required

          *Atomic: will be replaced during a merge*

          Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.

          *PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.*

          - **podFailurePolicy.rules.onPodConditions.status** (string), required

            Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.

          - **podFailurePolicy.rules.onPodConditions.type** (string), required

            Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.

        - **podFailurePolicy.rules.onExitCodes** (PodFailurePolicyOnExitCodesRequirement)

          Represents the requirement on the container exit codes.

          *PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.*

          - **podFailurePolicy.rules.onExitCodes.operator** (string), required

            Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:

            - In: the requirement is satisfied if at least one container exit code (might be multiple if there are multiple containers not restricted by the 'containerName' field) is in the set of specified values.
            - NotIn: the requirement is satisfied if at least one container exit code (might be multiple if there are multiple containers not restricted by the 'containerName' field) is not in the set of specified values. Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.

          - **podFailurePolicy.rules.onExitCodes.values** (\[\]int32), required

            *Set: unique values will be kept during a merge*

            Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.

          - **podFailurePolicy.rules.onExitCodes.containerName** (string)

            Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.

    ### Alpha level

    - **backoffLimitPerIndex** (int32)

      Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).

    - **maxFailedIndexes** (int32)

      Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).

    - **podReplacementPolicy** (string)

      podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods when they are terminating (has a metadata.deletionTimestamp) or failed.

      - Failed means to wait until a previously created Pod is fully terminated (has phase Failed or Succeeded) before creating a replacement Pod.

      When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an alpha field. Enable JobPodReplacementPolicy to be able to use this field.

    &nbsp;
- name: Job.Status
  id: workload-resources/job-v1/index#JobStatus
  summary: JobStatus represents the current state of a Job
  belongs_to: Job
  description: "## JobStatus\n\nJobStatus represents the current state of a Job.\n\n- **startTime** (Time)\n\n  Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **completionTime** (Time)\n\n  Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **active** (int32)\n\n  The number of pending and running pods.\n\n- **failed** (int32)\n\n  The number of pods which reached phase Failed.\n\n- **succeeded** (int32)\n\n  The number of pods which reached phase Succeeded.\n\n- **completedIndexes** (string)\n\n  completedIndexes holds the completed indexes when .spec.completionMode = \"Indexed\" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\".\n\n- **conditions** (\\[\\]JobCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Atomic: will be replaced during a merge*\n\n  The latest available observations of an object's current state. When a Job fails, one of the conditions will have type \"Failed\" and status true. When a Job is suspended, one of the conditions will have type \"Suspended\" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type \"Complete\" and status true. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/>\n\n  *JobCondition describes current state of a job.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of job condition, Complete or Failed.\n\n  - **conditions.lastProbeTime** (Time)\n\n    Last time the condition was checked.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transit from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    (brief) reason for the condition's last transition.\n\n- **uncountedTerminatedPods** (UncountedTerminatedPods)\n\n  uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\n  The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:\n\n  1.  Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding counter.\n\n  Old jobs might not be tracked using this field, in which case the field remains null.\n\n  *UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.*\n\n  - **uncountedTerminatedPods.failed** (\\[\\]string)\n\n    *Set: unique values will be kept during a merge*\n\n    failed holds UIDs of failed Pods.\n\n  - **uncountedTerminatedPods.succeeded** (\\[\\]string)\n\n    *Set: unique values will be kept during a merge*\n\n    succeeded holds UIDs of succeeded Pods.\n\n### Beta level\n\n- **ready** (int32)\n\n  The number of pods which have a Ready condition.\n\n  This field is beta-level. The job controller populates the field when the feature gate JobReadyPods is enabled (enabled by default).\n\n### Alpha level\n\n- **failedIndexes** (string)\n\n  FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (disabled by default).\n\n- **terminating** (int32)\n\n  The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).\n\n  This field is alpha-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (disabled by default).\n\n## JobList\n\nJobList is a collection of jobs.\n\n- **apiVersion**: batch/v1\n\n- **kind**: JobList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][Job](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/#Job)), required\n\n  items is the list of Jobs.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/)"
- name: JSONSchemaProps
  id: extend-resources/custom-resource-definition-v1/index#JSONSchemaProps
  summary: JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/)
  belongs_to: CustomResourceDefinition
  description: |-
    ## JSONSchemaProps

    JSONSchemaProps is a JSON-Schema following Specification Draft 4 (<http://json-schema.org/)>.

    - **$ref** (string)

    - **$schema** (string)

    - **additionalItems** (JSONSchemaPropsOrBool)

      *JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.*

    - **additionalProperties** (JSONSchemaPropsOrBool)

      *JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.*

    - **allOf** (\[\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

    - **anyOf** (\[\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

    - **default** (JSON)

      default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.

      *JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, \[\]interface{}, map\[string\]interface{} and nil.*

    - **definitions** (map\[string\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

    - **dependencies** (map\[string\]JSONSchemaPropsOrStringArray)

      *JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.*

    - **description** (string)

    - **enum** (\[\]JSON)

      *JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, \[\]interface{}, map\[string\]interface{} and nil.*

    - **example** (JSON)

      *JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, \[\]interface{}, map\[string\]interface{} and nil.*

    - **exclusiveMaximum** (boolean)

    - **exclusiveMinimum** (boolean)

    - **externalDocs** (ExternalDocumentation)

      *ExternalDocumentation allows referencing an external resource for extended documentation.*

      - **externalDocs.description** (string)

      - **externalDocs.url** (string)

    - **format** (string)

      format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:

      - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 \[RFC1034\]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^\[0-9a-f\]{8}-?\[0-9a-f\]{4}-?\[0-9a-f\]{4}-?\[0-9a-f\]{4}-?\[0-9a-f\]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^\[0-9a-f\]{8}-?\[0-9a-f\]{4}-?3\[0-9a-f\]{3}-?\[0-9a-f\]{4}-?\[0-9a-f\]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^\[0-9a-f\]{8}-?\[0-9a-f\]{4}-?4\[0-9a-f\]{3}-?\[89ab\]\[0-9a-f\]{3}-?\[0-9a-f\]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^\[0-9a-f\]{8}-?\[0-9a-f\]{4}-?5\[0-9a-f\]{3}-?\[89ab\]\[0-9a-f\]{3}-?\[0-9a-f\]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4\[0-9\]{12}(?:\[0-9\]{3})?\|5\[1-5\]\[0-9\]{14}\|6(?:011\|5\[0-9\]\[0-9\])\[0-9\]{12}\|3\[47\]\[0-9\]{13}\|3(?:0\[0-5\]\|\[68\]\[0-9\])\[0-9\]{11}\|(?:2131\|1800\|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}\[- \]?\d{2}\[- \]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?(\[0-9a-fA-F\]{3}\|\[0-9a-fA-F\]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.

    - **id** (string)

    - **items** (JSONSchemaPropsOrArray)

      *JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.*

    - **maxItems** (int64)

    - **maxLength** (int64)

    - **maxProperties** (int64)

    - **maximum** (double)

    - **minItems** (int64)

    - **minLength** (int64)

    - **minProperties** (int64)

    - **minimum** (double)

    - **multipleOf** (double)

    - **not** ([JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

    - **nullable** (boolean)

    - **oneOf** (\[\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

    - **pattern** (string)

    - **patternProperties** (map\[string\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

    - **properties** (map\[string\][JSONSchemaProps](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/custom-resource-definition-v1/#JSONSchemaProps))

    - **required** (\[\]string)

    - **title** (string)

    - **type** (string)

    - **uniqueItems** (boolean)

    - **x-kubernetes-embedded-resource** (boolean)

      x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).

    - **x-kubernetes-int-or-string** (boolean)

      x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:

      1.  anyOf:
          - type: integer
          - type: string
      2.  allOf:
          - anyOf:
            - type: integer
            - type: string
          - ... zero or more

    - **x-kubernetes-list-map-keys** (\[\]string)

      x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.

      This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).

      The properties specified must either be required or have a default value, to ensure those properties are present for all list items.

    - **x-kubernetes-list-type** (string)

      x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:

      1.  `atomic`: the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...).
      2.  `set`: Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with x-kubernetes-map-type `atomic` or an array with x-kubernetes-list-type `atomic`.
      3.  `map`: These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type object. Defaults to atomic for arrays.

    - **x-kubernetes-map-type** (string)

      x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:

      1.  `granular`: These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps.
      2.  `atomic`: the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated.

    - **x-kubernetes-preserve-unknown-fields** (boolean)

      x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.

    - **x-kubernetes-validations** (\[\]ValidationRule)

      *Patch strategy: merge on key `rule`*

      *Map: unique values on key rule will be kept during a merge*

      x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.

      *ValidationRule describes a validation rule written in the CEL expression language.*

      - **x-kubernetes-validations.rule** (string), required

        Rule represents the expression which will be evaluated by CEL. ref: <https://github.com/google/cel-spec> The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {"rule": "self.status.actual \<= self.spec.maxDesired"}

        If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {"rule": "self.components\['Widget'\].priority \< 10"} - Rule scoped to a list of integers: {"rule": "self.values.all(value, value \>= 0 && value \< 100)"} - Rule scoped to a string value: {"rule": "self.startsWith('kube')"}

        The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.

        Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an "unknown type". An "unknown type" is recursively defined as:

        - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
        - An array where the items schema is of an "unknown type"
        - An object where the additionalProperties schema is of an "unknown type"

        Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '**' escapes to '**underscores**' - '.' escapes to '**dot**' - '-' escapes to '**dash**' - '/' escapes to '**slash**' - Property names that exactly match a CEL RESERVED keyword escape to '**{keyword}\_\_'. The keywords are: "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if", "import", "let", "loop", "package", "namespace", "return". Examples:

        - Rule accessing a property named "namespace": {"rule": "self.**namespace** \> 0"}
        - Rule accessing a property named "x-prop": {"rule": "self.x\_\_dash\_\_prop \> 0"}
        - Rule accessing a property named "redact\_\_d": {"rule": "self.redact\_\_underscores\_\_d \> 0"}

        Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. \[1, 2\] == \[2, 1\]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:

        - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and non-intersecting elements in `Y` are appended, retaining their partial order.
        - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting keys are appended, retaining their partial order.

      - **x-kubernetes-validations.fieldPath** (string)

        fieldPath represents the field path returned when the validation fails. It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field. e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList` It does not support list numeric index. It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info. Numeric index of array is not supported. For field name which contains special characters, use `['specialName']` to refer the field name. e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`

      - **x-kubernetes-validations.message** (string)

        Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host"

      - **x-kubernetes-validations.messageExpression** (string)

        MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: "x must be less than max ("+string(self.max)+")"

      - **x-kubernetes-validations.reason** (string)

        reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule. The HTTP status code returned to the caller will match the reason of the reason of the first failed validation rule. The currently supported reasons are: "FieldValueInvalid", "FieldValueForbidden", "FieldValueRequired", "FieldValueDuplicate". If not set, default to use "FieldValueInvalid". All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid.

    &nbsp;
- name: KeyToPath
  id: config-and-storage-resources/volume/index#KeyToPath
  summary: Maps a string key to a path within a volume
  belongs_to: Volume
  description: "## KeyToPath\n\nMaps a string key to a path within a volume.\n\n- **key** (string), required\n\n  key is the key to project.\n\n- **path** (string), required\n\n  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n\n- **mode** (int32)\n\n  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/)"
- name: LabelSelector
  id: common-definitions/label-selector/index
  summary: A label selector is a label query over a set of resources
  description: "# LabelSelector\n\nA label selector is a label query over a set of resources.\n\n`import \"k8s.io/apimachinery/pkg/apis/meta/v1\"`\n\nA label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\n\n- **matchExpressions** (\\[\\]LabelSelectorRequirement)\n\n  matchExpressions is a list of label selector requirements. The requirements are ANDed.\n\n  *A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.*\n\n  - **matchExpressions.key** (string), required\n\n    key is the label key that the selector applies to.\n\n  - **matchExpressions.operator** (string), required\n\n    operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\n\n  - **matchExpressions.values** (\\[\\]string)\n\n    values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\n\n- **matchLabels** (map\\[string\\]string)\n\n  matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/)"
- name: labelSelector
  id: common-parameters/common-parameters/index#labelSelector
  summary: A selector to restrict the list of returned objects by their labels
  belongs_to: Common Parameters
  description: |-
    ## labelSelector

    A selector to restrict the list of returned objects by their labels. Defaults to everything.
- name: Lease
  id: cluster-resources/lease-v1/index
  summary: Lease defines a lease concept
  description: "# Lease\n\nLease defines a lease concept.\n\n`apiVersion: coordination.k8s.io/v1`\n\n`import \"k8s.io/api/coordination/v1\"`\n\n## Lease\n\nLease defines a lease concept.\n\n- **apiVersion**: coordination.k8s.io/v1\n\n- **kind**: Lease\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([LeaseSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/#LeaseSpec))\n\n  spec contains the specification of the Lease. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## LeaseSpec\n\nLeaseSpec is a specification of a Lease.\n\n- **acquireTime** (MicroTime)\n\n  acquireTime is a time when the current lease was acquired.\n\n  *MicroTime is version of Time with microsecond level precision.*\n\n- **holderIdentity** (string)\n\n  holderIdentity contains the identity of the holder of a current lease.\n\n- **leaseDurationSeconds** (int32)\n\n  leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed renewTime.\n\n- **leaseTransitions** (int32)\n\n  leaseTransitions is the number of transitions of a lease between holders.\n\n- **renewTime** (MicroTime)\n\n  renewTime is a time when the current holder of a lease has last updated the lease.\n\n  *MicroTime is version of Time with microsecond level precision.*\n\n## LeaseList\n\nLeaseList is a list of Lease objects.\n\n- **apiVersion**: coordination.k8s.io/v1\n\n- **kind**: LeaseList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][Lease](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/#Lease)), required\n\n  items is a list of schema objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/)"
- name: Lease.Spec
  id: cluster-resources/lease-v1/index#LeaseSpec
  summary: LeaseSpec is a specification of a Lease
  belongs_to: Lease
  description: "## LeaseSpec\n\nLeaseSpec is a specification of a Lease.\n\n- **acquireTime** (MicroTime)\n\n  acquireTime is a time when the current lease was acquired.\n\n  *MicroTime is version of Time with microsecond level precision.*\n\n- **holderIdentity** (string)\n\n  holderIdentity contains the identity of the holder of a current lease.\n\n- **leaseDurationSeconds** (int32)\n\n  leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed renewTime.\n\n- **leaseTransitions** (int32)\n\n  leaseTransitions is the number of transitions of a lease between holders.\n\n- **renewTime** (MicroTime)\n\n  renewTime is a time when the current holder of a lease has last updated the lease.\n\n  *MicroTime is version of Time with microsecond level precision.*\n\n## LeaseList\n\nLeaseList is a list of Lease objects.\n\n- **apiVersion**: coordination.k8s.io/v1\n\n- **kind**: LeaseList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][Lease](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/#Lease)), required\n\n  items is a list of schema objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/)"
- name: LifecycleHandler
  id: workload-resources/pod-v1/index#LifecycleHandler
  summary: LifecycleHandler defines a specific action that should be taken in a lifecycle hook
  belongs_to: Pod
  description: |-
    ## LifecycleHandler

    LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.

    - **exec** (ExecAction)

      Exec specifies the action to take.

      *ExecAction describes a "run in container" action.*

      - **exec.command** (\[\]string)

        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('\|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.

    - **httpGet** (HTTPGetAction)

      HTTPGet specifies the http request to perform.

      *HTTPGetAction describes an action based on HTTP Get requests.*

      - **httpGet.port** (IntOrString), required

        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.

        *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

      - **httpGet.host** (string)

        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.

      - **httpGet.httpHeaders** (\[\]HTTPHeader)

        Custom headers to set in the request. HTTP allows repeated headers.

        *HTTPHeader describes a custom header to be used in HTTP probes*

        - **httpGet.httpHeaders.name** (string), required

          The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.

        - **httpGet.httpHeaders.value** (string), required

          The header field value

      - **httpGet.path** (string)

        Path to access on the HTTP server.

      - **httpGet.scheme** (string)

        Scheme to use for connecting to the host. Defaults to HTTP.

    - **tcpSocket** (TCPSocketAction)

      Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.

      *TCPSocketAction describes an action based on opening a socket*

      - **tcpSocket.port** (IntOrString), required

        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.

        *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

      - **tcpSocket.host** (string)

        Optional: Host name to connect to, defaults to the pod IP.

    &nbsp;
- name: limit
  id: common-parameters/common-parameters/index#limit
  summary: limit is a maximum number of responses to return for a list call
  belongs_to: Common Parameters
  description: |-
    ## limit

    limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
- name: LimitRange
  id: policy-resources/limit-range-v1/index
  summary: LimitRange sets resource usage limits for each kind of resource in a Namespace
  description: "# LimitRange\n\nLimitRange sets resource usage limits for each kind of resource in a Namespace.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## LimitRange\n\nLimitRange sets resource usage limits for each kind of resource in a Namespace.\n\n- **apiVersion**: v1\n\n- **kind**: LimitRange\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([LimitRangeSpec](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/#LimitRangeSpec))\n\n  Spec defines the limits enforced. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## LimitRangeSpec\n\nLimitRangeSpec defines a min/max usage limit for resources that match on kind.\n\n- **limits** (\\[\\]LimitRangeItem), required\n\n  Limits is the list of LimitRangeItem objects that are enforced.\n\n  *LimitRangeItem defines a min/max usage limit for any resource that matches on kind.*\n\n  - **limits.type** (string), required\n\n    Type of resource that this limit applies to.\n\n  - **limits.default** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Default resource requirement limit value by resource name if resource limit is omitted.\n\n  - **limits.defaultRequest** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.\n\n  - **limits.max** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Max usage constraints on this kind by resource name.\n\n  - **limits.maxLimitRequestRatio** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.\n\n  - **limits.min** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Min usage constraints on this kind by resource name.\n\n## LimitRangeList\n\nLimitRangeList is a list of LimitRange items.\n\n- **apiVersion**: v1\n\n- **kind**: LimitRangeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][LimitRange](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/#LimitRange)), required\n\n  Items is a list of LimitRange objects. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/)"
- name: LimitRange.Spec
  id: policy-resources/limit-range-v1/index#LimitRangeSpec
  summary: LimitRangeSpec defines a min/max usage limit for resources that match on kind
  belongs_to: LimitRange
  description: "## LimitRangeSpec\n\nLimitRangeSpec defines a min/max usage limit for resources that match on kind.\n\n- **limits** (\\[\\]LimitRangeItem), required\n\n  Limits is the list of LimitRangeItem objects that are enforced.\n\n  *LimitRangeItem defines a min/max usage limit for any resource that matches on kind.*\n\n  - **limits.type** (string), required\n\n    Type of resource that this limit applies to.\n\n  - **limits.default** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Default resource requirement limit value by resource name if resource limit is omitted.\n\n  - **limits.defaultRequest** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.\n\n  - **limits.max** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Max usage constraints on this kind by resource name.\n\n  - **limits.maxLimitRequestRatio** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.\n\n  - **limits.min** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Min usage constraints on this kind by resource name.\n\n## LimitRangeList\n\nLimitRangeList is a list of LimitRange items.\n\n- **apiVersion**: v1\n\n- **kind**: LimitRangeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][LimitRange](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/#LimitRange)), required\n\n  Items is a list of LimitRange objects. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/limit-range-v1/)"
- name: ListMeta
  id: common-definitions/list-meta/index
  summary: ListMeta describes metadata that synthetic resources must have, including lists and various status objects
  description: "# ListMeta\n\nListMeta describes metadata that synthetic resources must have, including lists and various status objects.\n\n`import \"k8s.io/apimachinery/pkg/apis/meta/v1\"`\n\nListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.\n\n- **continue** (string)\n\n  continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.\n\n- **remainingItemCount** (int64)\n\n  remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\n- **resourceVersion** (string)\n\n  String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency>\n\n- **selfLink** (string)\n\n  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/)"
- name: LocalObjectReference
  id: common-definitions/local-object-reference/index
  summary: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace
  description: "# LocalObjectReference\n\nLocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\n\n`import \"k8s.io/api/core/v1\"`\n\nLocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\n\n- **name** (string)\n\n  Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/)"
- name: LocalSubjectAccessReview
  id: authorization-resources/local-subject-access-review-v1/index
  summary: LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace
  description: "# LocalSubjectAccessReview\n\nLocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace.\n\n`apiVersion: authorization.k8s.io/v1`\n\n`import \"k8s.io/api/authorization/v1\"`\n\n## LocalSubjectAccessReview\n\nLocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.\n\n- **apiVersion**: authorization.k8s.io/v1\n\n- **kind**: LocalSubjectAccessReview\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([SubjectAccessReviewSpec](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/#SubjectAccessReviewSpec)), required\n\n  Spec holds information about the request being evaluated. spec.namespace must be equal to the namespace you made the request against. If empty, it is defaulted.\n\n- **status** ([SubjectAccessReviewStatus](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/#SubjectAccessReviewStatus))\n\n  Status is filled in by the server and indicates whether the request is allowed or not\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/local-subject-access-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/local-subject-access-review-v1/)"
- name: MutatingWebhookConfiguration
  id: extend-resources/mutating-webhook-configuration-v1/index
  summary: MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object
  description: "# MutatingWebhookConfiguration\n\nMutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.\n\n`apiVersion: admissionregistration.k8s.io/v1`\n\n`import \"k8s.io/api/admissionregistration/v1\"`\n\n## MutatingWebhookConfiguration\n\nMutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.\n\n- **apiVersion**: admissionregistration.k8s.io/v1\n\n- **kind**: MutatingWebhookConfiguration\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.\n\n- **webhooks** (\\[\\]MutatingWebhook)\n\n  *Patch strategy: merge on key `name`*\n\n  Webhooks is a list of webhooks and the affected resources and operations.\n\n  *MutatingWebhook describes an admission webhook and the resources and operations it applies to.*\n\n  - **webhooks.admissionReviewVersions** (\\[\\]string), required\n\n    AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.\n\n  - **webhooks.clientConfig** (WebhookClientConfig), required\n\n    ClientConfig defines how to communicate with the hook. Required\n\n    *WebhookClientConfig contains the information to make a TLS connection with the webhook*\n\n    - **webhooks.clientConfig.caBundle** (\\[\\]byte)\n\n      `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.\n\n    - **webhooks.clientConfig.service** (ServiceReference)\n\n      `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\n      If the webhook is running within the cluster, then you should use `service`.\n\n      *ServiceReference holds a reference to Service.legacy.k8s.io*\n\n      - **webhooks.clientConfig.service.name** (string), required\n\n        `name` is the name of the service. Required\n\n      - **webhooks.clientConfig.service.namespace** (string), required\n\n        `namespace` is the namespace of the service. Required\n\n      - **webhooks.clientConfig.service.path** (string)\n\n        `path` is an optional URL path which will be sent in any request to this service.\n\n      - **webhooks.clientConfig.service.port** (int32)\n\n        If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).\n\n    - **webhooks.clientConfig.url** (string)\n\n      `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\n      The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\n      Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\n      The scheme must be \"https\"; the URL must begin with \"https://\".\n\n      A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\n      Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.\n\n  - **webhooks.name** (string), required\n\n    The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.\n\n  - **webhooks.sideEffects** (string), required\n\n    SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.\n\n  - **webhooks.failurePolicy** (string)\n\n    FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n\n  - **webhooks.matchConditions** (\\[\\]MatchCondition)\n\n    *Patch strategy: merge on key `name`*\n\n    *Map: unique values on key name will be kept during a merge*\n\n    MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\n    The exact matching logic is (in order):\n\n    1.  If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n    2.  If ALL matchConditions evaluate to TRUE, the webhook is called.\n    3.  If any matchCondition evaluates to an error (but none are FALSE):\n        - If failurePolicy=Fail, reject the request\n        - If failurePolicy=Ignore, the error is ignored and the webhook is skipped\n\n    This is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.\n\n    *MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.*\n\n    - **webhooks.matchConditions.expression** (string), required\n\n      Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n      'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz> 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: <https://kubernetes.io/docs/reference/using-api/cel/>\n\n      Required.\n\n    - **webhooks.matchConditions.name** (string), required\n\n      Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '*' or '.', and must start and end with an alphanumeric character (e.g. 'MyName', or 'my.name', or '123-abc', regex used for validation is '(\\[A-Za-z0-9\\]\\[-A-Za-z0-9*.\\]\\*)?\\[A-Za-z0-9\\]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\n      Required.\n\n  - **webhooks.matchPolicy** (string)\n\n    matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n    - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n    - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\n    Defaults to \"Equivalent\"\n\n  - **webhooks.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\n    For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": \\[ \"0\", \"1\" \\] } \\] }\n\n    If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"environment\", \"operator\": \"In\", \"values\": \\[ \"prod\", \"staging\" \\] } \\] }\n\n    See <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/> for more examples of label selectors.\n\n    Default to the empty LabelSelector, which matches everything.\n\n  - **webhooks.objectSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.\n\n  - **webhooks.reinvocationPolicy** (string)\n\n    reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\n    Never: the webhook will not be called more than once in a single admission evaluation.\n\n    IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: \\* the number of additional invocations is not guaranteed to be exactly one. \\* if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. \\* webhooks that use this option may be reordered to minimize the number of additional invocations. \\* to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\n    Defaults to \"Never\".\n\n  - **webhooks.rules** (\\[\\]RuleWithOperations)\n\n    Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches *any* Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.\n\n    *RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.*\n\n    - **webhooks.rules.apiGroups** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n    - **webhooks.rules.apiVersions** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n    - **webhooks.rules.operations** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n    - **webhooks.rules.resources** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      Resources is a list of resources this rule applies to.\n\n      For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n      If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n      Depending on the enclosing object, subresources might not be allowed. Required.\n\n    - **webhooks.rules.scope** (string)\n\n      scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n  - **webhooks.timeoutSeconds** (int32)\n\n    TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.\n\n## MutatingWebhookConfigurationList\n\nMutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.\n\n- **apiVersion**: admissionregistration.k8s.io/v1\n\n- **kind**: MutatingWebhookConfigurationList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][MutatingWebhookConfiguration](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/mutating-webhook-configuration-v1/#MutatingWebhookConfiguration)), required\n\n  List of MutatingWebhookConfiguration.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/mutating-webhook-configuration-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/mutating-webhook-configuration-v1/)"
- name: Namespace
  id: cluster-resources/namespace-v1/index
  summary: Namespace provides a scope for Names
  description: "# Namespace\n\nNamespace provides a scope for Names.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## Namespace\n\nNamespace provides a scope for Names. Use of multiple namespaces is optional.\n\n- **apiVersion**: v1\n\n- **kind**: Namespace\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([NamespaceSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/#NamespaceSpec))\n\n  Spec defines the behavior of the Namespace. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([NamespaceStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/#NamespaceStatus))\n\n  Status describes the current status of a Namespace. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## NamespaceSpec\n\nNamespaceSpec describes the attributes on a Namespace.\n\n- **finalizers** (\\[\\]string)\n\n  Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: <https://kubernetes.io/docs/tasks/administer-cluster/namespaces/>\n\n## NamespaceStatus\n\nNamespaceStatus is information about the current status of a Namespace.\n\n- **conditions** (\\[\\]NamespaceCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a namespace's current state.\n\n  *NamespaceCondition contains details about state of namespace.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of namespace controller condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n  - **conditions.reason** (string)\n\n- **phase** (string)\n\n  Phase is the current lifecycle phase of the namespace. More info: <https://kubernetes.io/docs/tasks/administer-cluster/namespaces/>\n\n## NamespaceList\n\nNamespaceList is a list of Namespaces.\n\n- **apiVersion**: v1\n\n- **kind**: NamespaceList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Namespace](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/#Namespace)), required\n\n  Items is the list of Namespace objects in the list. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/)"
- name: namespace
  id: common-parameters/common-parameters/index#namespace
  summary: null
  belongs_to: Common Parameters
  description: |-
    ## namespace

    object name and auth scope, such as for teams and projects
- name: Namespace.Spec
  id: cluster-resources/namespace-v1/index#NamespaceSpec
  summary: NamespaceSpec describes the attributes on a Namespace
  belongs_to: Namespace
  description: |-
    ## NamespaceSpec

    NamespaceSpec describes the attributes on a Namespace.

    - **finalizers** (\[\]string)

      Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: <https://kubernetes.io/docs/tasks/administer-cluster/namespaces/>

    &nbsp;
- name: Namespace.Status
  id: cluster-resources/namespace-v1/index#NamespaceStatus
  summary: NamespaceStatus is information about the current status of a Namespace
  belongs_to: Namespace
  description: "## NamespaceStatus\n\nNamespaceStatus is information about the current status of a Namespace.\n\n- **conditions** (\\[\\]NamespaceCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a namespace's current state.\n\n  *NamespaceCondition contains details about state of namespace.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of namespace controller condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n  - **conditions.reason** (string)\n\n- **phase** (string)\n\n  Phase is the current lifecycle phase of the namespace. More info: <https://kubernetes.io/docs/tasks/administer-cluster/namespaces/>\n\n## NamespaceList\n\nNamespaceList is a list of Namespaces.\n\n- **apiVersion**: v1\n\n- **kind**: NamespaceList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Namespace](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/#Namespace)), required\n\n  Items is the list of Namespace objects in the list. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/)"
- name: NetworkPolicy
  id: policy-resources/network-policy-v1/index
  summary: NetworkPolicy describes what network traffic is allowed for a set of Pods
  description: "# NetworkPolicy\n\nNetworkPolicy describes what network traffic is allowed for a set of Pods.\n\n`apiVersion: networking.k8s.io/v1`\n\n`import \"k8s.io/api/networking/v1\"`\n\n## NetworkPolicy\n\nNetworkPolicy describes what network traffic is allowed for a set of Pods\n\n- **apiVersion**: networking.k8s.io/v1\n\n- **kind**: NetworkPolicy\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([NetworkPolicySpec](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/#NetworkPolicySpec))\n\n  spec represents the specification of the desired behavior for this NetworkPolicy.\n\n## NetworkPolicySpec\n\nNetworkPolicySpec provides the specification of a NetworkPolicy\n\n- **podSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required\n\n  podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\n\n- **policyTypes** (\\[\\]string)\n\n  policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are \\[\"Ingress\"\\], \\[\"Egress\"\\], or \\[\"Ingress\", \"Egress\"\\]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes \\[ \"Egress\" \\]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an egress section and would otherwise default to just \\[ \"Ingress\" \\]). This field is beta-level in 1.8\n\n- **ingress** (\\[\\]NetworkPolicyIngressRule)\n\n  ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)\n\n  *NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.*\n\n  - **ingress.from** (\\[\\]NetworkPolicyPeer)\n\n    from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.\n\n    *NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed*\n\n    - **ingress.from.ipBlock** (IPBlock)\n\n      ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.\n\n      *IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.*\n\n      - **ingress.from.ipBlock.cidr** (string), required\n\n        cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"\n\n      - **ingress.from.ipBlock.except** (\\[\\]string)\n\n        except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range\n\n    - **ingress.from.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\n      If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.\n\n    - **ingress.from.podSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\n      If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.\n\n  - **ingress.ports** (\\[\\]NetworkPolicyPort)\n\n    ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\n\n    *NetworkPolicyPort describes a port to allow traffic on*\n\n    - **ingress.ports.port** (IntOrString)\n\n      port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n    - **ingress.ports.endPort** (int32)\n\n      endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.\n\n    - **ingress.ports.protocol** (string)\n\n      protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.\n\n- **egress** (\\[\\]NetworkPolicyEgressRule)\n\n  egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8\n\n  *NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8*\n\n  - **egress.to** (\\[\\]NetworkPolicyPeer)\n\n    to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.\n\n    *NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed*\n\n    - **egress.to.ipBlock** (IPBlock)\n\n      ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.\n\n      *IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.*\n\n      - **egress.to.ipBlock.cidr** (string), required\n\n        cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"\n\n      - **egress.to.ipBlock.except** (\\[\\]string)\n\n        except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range\n\n    - **egress.to.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\n      If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.\n\n    - **egress.to.podSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\n      If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.\n\n  - **egress.ports** (\\[\\]NetworkPolicyPort)\n\n    ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\n\n    *NetworkPolicyPort describes a port to allow traffic on*\n\n    - **egress.ports.port** (IntOrString)\n\n      port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n    - **egress.ports.endPort** (int32)\n\n      endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.\n\n    - **egress.ports.protocol** (string)\n\n      protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.\n\n## NetworkPolicyList\n\nNetworkPolicyList is a list of NetworkPolicy objects.\n\n- **apiVersion**: networking.k8s.io/v1\n\n- **kind**: NetworkPolicyList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][NetworkPolicy](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/#NetworkPolicy)), required\n\n  items is a list of schema objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/)"
- name: NetworkPolicy.Spec
  id: policy-resources/network-policy-v1/index#NetworkPolicySpec
  summary: podSelector selects the pods to which this NetworkPolicy object applies
  belongs_to: NetworkPolicy
  description: "## NetworkPolicySpec\n\nNetworkPolicySpec provides the specification of a NetworkPolicy\n\n- **podSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required\n\n  podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\n\n- **policyTypes** (\\[\\]string)\n\n  policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are \\[\"Ingress\"\\], \\[\"Egress\"\\], or \\[\"Ingress\", \"Egress\"\\]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes \\[ \"Egress\" \\]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an egress section and would otherwise default to just \\[ \"Ingress\" \\]). This field is beta-level in 1.8\n\n- **ingress** (\\[\\]NetworkPolicyIngressRule)\n\n  ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)\n\n  *NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.*\n\n  - **ingress.from** (\\[\\]NetworkPolicyPeer)\n\n    from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.\n\n    *NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed*\n\n    - **ingress.from.ipBlock** (IPBlock)\n\n      ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.\n\n      *IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.*\n\n      - **ingress.from.ipBlock.cidr** (string), required\n\n        cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"\n\n      - **ingress.from.ipBlock.except** (\\[\\]string)\n\n        except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range\n\n    - **ingress.from.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\n      If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.\n\n    - **ingress.from.podSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\n      If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.\n\n  - **ingress.ports** (\\[\\]NetworkPolicyPort)\n\n    ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\n\n    *NetworkPolicyPort describes a port to allow traffic on*\n\n    - **ingress.ports.port** (IntOrString)\n\n      port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n    - **ingress.ports.endPort** (int32)\n\n      endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.\n\n    - **ingress.ports.protocol** (string)\n\n      protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.\n\n- **egress** (\\[\\]NetworkPolicyEgressRule)\n\n  egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8\n\n  *NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8*\n\n  - **egress.to** (\\[\\]NetworkPolicyPeer)\n\n    to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.\n\n    *NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed*\n\n    - **egress.to.ipBlock** (IPBlock)\n\n      ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.\n\n      *IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.*\n\n      - **egress.to.ipBlock.cidr** (string), required\n\n        cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"\n\n      - **egress.to.ipBlock.except** (\\[\\]string)\n\n        except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range\n\n    - **egress.to.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\n      If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.\n\n    - **egress.to.podSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\n      If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.\n\n  - **egress.ports** (\\[\\]NetworkPolicyPort)\n\n    ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\n\n    *NetworkPolicyPort describes a port to allow traffic on*\n\n    - **egress.ports.port** (IntOrString)\n\n      port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n    - **egress.ports.endPort** (int32)\n\n      endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.\n\n    - **egress.ports.protocol** (string)\n\n      protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.\n\n## NetworkPolicyList\n\nNetworkPolicyList is a list of NetworkPolicy objects.\n\n- **apiVersion**: networking.k8s.io/v1\n\n- **kind**: NetworkPolicyList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][NetworkPolicy](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/#NetworkPolicy)), required\n\n  items is a list of schema objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/)"
- name: Node
  id: cluster-resources/node-v1/index
  summary: Node is a worker node in Kubernetes
  description: "# Node\n\nNode is a worker node in Kubernetes.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## Node\n\nNode is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).\n\n- **apiVersion**: v1\n\n- **kind**: Node\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([NodeSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/#NodeSpec))\n\n  Spec defines the behavior of a node. <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([NodeStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/#NodeStatus))\n\n  Most recently observed status of the node. Populated by the system. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## NodeSpec\n\nNodeSpec describes the attributes that a node is created with.\n\n- **configSource** (NodeConfigSource)\n\n  Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.\n\n  *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*\n\n  - **configSource.configMap** (ConfigMapNodeConfigSource)\n\n    ConfigMap is a reference to a Node's ConfigMap\n\n    *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*\n\n    - **configSource.configMap.kubeletConfigKey** (string), required\n\n      KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.\n\n    - **configSource.configMap.name** (string), required\n\n      Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.\n\n    - **configSource.configMap.namespace** (string), required\n\n      Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.\n\n    - **configSource.configMap.resourceVersion** (string)\n\n      ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n    - **configSource.configMap.uid** (string)\n\n      UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n- **externalID** (string)\n\n  Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: <https://issues.k8s.io/61966>\n\n- **podCIDR** (string)\n\n  PodCIDR represents the pod IP range assigned to the node.\n\n- **podCIDRs** (\\[\\]string)\n\n  podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.\n\n- **providerID** (string)\n\n  ID of the node assigned by the cloud provider in the format: \\<ProviderName\\>://\\<ProviderSpecificNodeID\\>\n\n- **taints** (\\[\\]Taint)\n\n  If specified, the node's taints.\n\n  *The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.*\n\n  - **taints.effect** (string), required\n\n    Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\n\n  - **taints.key** (string), required\n\n    Required. The taint key to be applied to a node.\n\n  - **taints.timeAdded** (Time)\n\n    TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **taints.value** (string)\n\n    The taint value corresponding to the taint key.\n\n- **unschedulable** (boolean)\n\n  Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: <https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration>\n\n## NodeStatus\n\nNodeStatus is information about the current status of a node.\n\n- **addresses** (\\[\\]NodeAddress)\n\n  *Patch strategy: merge on key `type`*\n\n  List of addresses reachable to the node. Queried from cloud provider, if available. More info: <https://kubernetes.io/docs/concepts/nodes/node/#addresses> Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See <https://pr.k8s.io/79391> for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).\n\n  *NodeAddress contains information for the node's address.*\n\n  - **addresses.address** (string), required\n\n    The node address.\n\n  - **addresses.type** (string), required\n\n    Node address type, one of Hostname, ExternalIP or InternalIP.\n\n- **allocatable** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.\n\n- **capacity** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Capacity represents the total resources of a node. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity>\n\n- **conditions** (\\[\\]NodeCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Conditions is an array of current observed node conditions. More info: <https://kubernetes.io/docs/concepts/nodes/node/#condition>\n\n  *NodeCondition contains condition information for a node.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of node condition.\n\n  - **conditions.lastHeartbeatTime** (Time)\n\n    Last time we got an update on a given condition.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transit from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    (brief) reason for the condition's last transition.\n\n- **config** (NodeConfigStatus)\n\n  Status of the config assigned to the node via the dynamic Kubelet config feature.\n\n  *NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.*\n\n  - **config.active** (NodeConfigSource)\n\n    Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.\n\n    *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*\n\n    - **config.active.configMap** (ConfigMapNodeConfigSource)\n\n      ConfigMap is a reference to a Node's ConfigMap\n\n      *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*\n\n      - **config.active.configMap.kubeletConfigKey** (string), required\n\n        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.\n\n      - **config.active.configMap.name** (string), required\n\n        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.active.configMap.namespace** (string), required\n\n        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.active.configMap.resourceVersion** (string)\n\n        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n      - **config.active.configMap.uid** (string)\n\n        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n  - **config.assigned** (NodeConfigSource)\n\n    Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.\n\n    *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*\n\n    - **config.assigned.configMap** (ConfigMapNodeConfigSource)\n\n      ConfigMap is a reference to a Node's ConfigMap\n\n      *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*\n\n      - **config.assigned.configMap.kubeletConfigKey** (string), required\n\n        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.\n\n      - **config.assigned.configMap.name** (string), required\n\n        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.assigned.configMap.namespace** (string), required\n\n        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.assigned.configMap.resourceVersion** (string)\n\n        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n      - **config.assigned.configMap.uid** (string)\n\n        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n  - **config.error** (string)\n\n    Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.\n\n  - **config.lastKnownGood** (NodeConfigSource)\n\n    LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.\n\n    *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*\n\n    - **config.lastKnownGood.configMap** (ConfigMapNodeConfigSource)\n\n      ConfigMap is a reference to a Node's ConfigMap\n\n      *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*\n\n      - **config.lastKnownGood.configMap.kubeletConfigKey** (string), required\n\n        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.\n\n      - **config.lastKnownGood.configMap.name** (string), required\n\n        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.lastKnownGood.configMap.namespace** (string), required\n\n        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.lastKnownGood.configMap.resourceVersion** (string)\n\n        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n      - **config.lastKnownGood.configMap.uid** (string)\n\n        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n- **daemonEndpoints** (NodeDaemonEndpoints)\n\n  Endpoints of daemons running on the Node.\n\n  *NodeDaemonEndpoints lists ports opened by daemons running on the Node.*\n\n  - **daemonEndpoints.kubeletEndpoint** (DaemonEndpoint)\n\n    Endpoint on which Kubelet is listening.\n\n    *DaemonEndpoint contains information about a single Daemon endpoint.*\n\n    - **daemonEndpoints.kubeletEndpoint.Port** (int32), required\n\n      Port number of the given endpoint.\n\n- **images** (\\[\\]ContainerImage)\n\n  List of container images on this node\n\n  *Describe a container image*\n\n  - **images.names** (\\[\\]string)\n\n    Names by which this image is known. e.g. \\[\"kubernetes.example/hyperkube:v1.0.7\", \"cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7\"\\]\n\n  - **images.sizeBytes** (int64)\n\n    The size of the image in bytes.\n\n- **nodeInfo** (NodeSystemInfo)\n\n  Set of ids/uuids to uniquely identify the node. More info: <https://kubernetes.io/docs/concepts/nodes/node/#info>\n\n  *NodeSystemInfo is a set of ids/uuids to uniquely identify the node.*\n\n  - **nodeInfo.architecture** (string), required\n\n    The Architecture reported by the node\n\n  - **nodeInfo.bootID** (string), required\n\n    Boot ID reported by the node.\n\n  - **nodeInfo.containerRuntimeVersion** (string), required\n\n    ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).\n\n  - **nodeInfo.kernelVersion** (string), required\n\n    Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).\n\n  - **nodeInfo.kubeProxyVersion** (string), required\n\n    KubeProxy Version reported by the node.\n\n  - **nodeInfo.kubeletVersion** (string), required\n\n    Kubelet Version reported by the node.\n\n  - **nodeInfo.machineID** (string), required\n\n    MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: <http://man7.org/linux/man-pages/man5/machine-id.5.html>\n\n  - **nodeInfo.operatingSystem** (string), required\n\n    The Operating System reported by the node\n\n  - **nodeInfo.osImage** (string), required\n\n    OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).\n\n  - **nodeInfo.systemUUID** (string), required\n\n    SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts <https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid>\n\n- **phase** (string)\n\n  NodePhase is the recently observed lifecycle phase of the node. More info: <https://kubernetes.io/docs/concepts/nodes/node/#phase> The field is never populated, and now is deprecated.\n\n- **volumesAttached** (\\[\\]AttachedVolume)\n\n  List of volumes that are attached to the node.\n\n  *AttachedVolume describes a volume attached to a node*\n\n  - **volumesAttached.devicePath** (string), required\n\n    DevicePath represents the device path where the volume should be available\n\n  - **volumesAttached.name** (string), required\n\n    Name of the attached volume\n\n- **volumesInUse** (\\[\\]string)\n\n  List of attachable volumes in use (mounted) by the node.\n\n## NodeList\n\nNodeList is the whole list of all Nodes which have been registered with master.\n\n- **apiVersion**: v1\n\n- **kind**: NodeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Node](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/#Node)), required\n\n  List of nodes\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/)"
- name: Node.Spec
  id: cluster-resources/node-v1/index#NodeSpec
  summary: NodeSpec describes the attributes that a node is created with
  belongs_to: Node
  description: |-
    ## NodeSpec

    NodeSpec describes the attributes that a node is created with.

    - **configSource** (NodeConfigSource)

      Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.

      *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*

      - **configSource.configMap** (ConfigMapNodeConfigSource)

        ConfigMap is a reference to a Node's ConfigMap

        *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*

        - **configSource.configMap.kubeletConfigKey** (string), required

          KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.

        - **configSource.configMap.name** (string), required

          Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.

        - **configSource.configMap.namespace** (string), required

          Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.

        - **configSource.configMap.resourceVersion** (string)

          ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.

        - **configSource.configMap.uid** (string)

          UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.

    - **externalID** (string)

      Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: <https://issues.k8s.io/61966>

    - **podCIDR** (string)

      PodCIDR represents the pod IP range assigned to the node.

    - **podCIDRs** (\[\]string)

      podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.

    - **providerID** (string)

      ID of the node assigned by the cloud provider in the format: \<ProviderName\>://\<ProviderSpecificNodeID\>

    - **taints** (\[\]Taint)

      If specified, the node's taints.

      *The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.*

      - **taints.effect** (string), required

        Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.

      - **taints.key** (string), required

        Required. The taint key to be applied to a node.

      - **taints.timeAdded** (Time)

        TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.

        *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*

      - **taints.value** (string)

        The taint value corresponding to the taint key.

    - **unschedulable** (boolean)

      Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: <https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration>

    &nbsp;
- name: Node.Status
  id: cluster-resources/node-v1/index#NodeStatus
  summary: NodeStatus is information about the current status of a node
  belongs_to: Node
  description: "## NodeStatus\n\nNodeStatus is information about the current status of a node.\n\n- **addresses** (\\[\\]NodeAddress)\n\n  *Patch strategy: merge on key `type`*\n\n  List of addresses reachable to the node. Queried from cloud provider, if available. More info: <https://kubernetes.io/docs/concepts/nodes/node/#addresses> Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See <https://pr.k8s.io/79391> for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).\n\n  *NodeAddress contains information for the node's address.*\n\n  - **addresses.address** (string), required\n\n    The node address.\n\n  - **addresses.type** (string), required\n\n    Node address type, one of Hostname, ExternalIP or InternalIP.\n\n- **allocatable** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.\n\n- **capacity** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Capacity represents the total resources of a node. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity>\n\n- **conditions** (\\[\\]NodeCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Conditions is an array of current observed node conditions. More info: <https://kubernetes.io/docs/concepts/nodes/node/#condition>\n\n  *NodeCondition contains condition information for a node.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of node condition.\n\n  - **conditions.lastHeartbeatTime** (Time)\n\n    Last time we got an update on a given condition.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transit from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    (brief) reason for the condition's last transition.\n\n- **config** (NodeConfigStatus)\n\n  Status of the config assigned to the node via the dynamic Kubelet config feature.\n\n  *NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.*\n\n  - **config.active** (NodeConfigSource)\n\n    Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.\n\n    *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*\n\n    - **config.active.configMap** (ConfigMapNodeConfigSource)\n\n      ConfigMap is a reference to a Node's ConfigMap\n\n      *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*\n\n      - **config.active.configMap.kubeletConfigKey** (string), required\n\n        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.\n\n      - **config.active.configMap.name** (string), required\n\n        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.active.configMap.namespace** (string), required\n\n        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.active.configMap.resourceVersion** (string)\n\n        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n      - **config.active.configMap.uid** (string)\n\n        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n  - **config.assigned** (NodeConfigSource)\n\n    Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.\n\n    *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*\n\n    - **config.assigned.configMap** (ConfigMapNodeConfigSource)\n\n      ConfigMap is a reference to a Node's ConfigMap\n\n      *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*\n\n      - **config.assigned.configMap.kubeletConfigKey** (string), required\n\n        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.\n\n      - **config.assigned.configMap.name** (string), required\n\n        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.assigned.configMap.namespace** (string), required\n\n        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.assigned.configMap.resourceVersion** (string)\n\n        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n      - **config.assigned.configMap.uid** (string)\n\n        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n  - **config.error** (string)\n\n    Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.\n\n  - **config.lastKnownGood** (NodeConfigSource)\n\n    LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.\n\n    *NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22*\n\n    - **config.lastKnownGood.configMap** (ConfigMapNodeConfigSource)\n\n      ConfigMap is a reference to a Node's ConfigMap\n\n      *ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: <https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration>*\n\n      - **config.lastKnownGood.configMap.kubeletConfigKey** (string), required\n\n        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.\n\n      - **config.lastKnownGood.configMap.name** (string), required\n\n        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.lastKnownGood.configMap.namespace** (string), required\n\n        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.\n\n      - **config.lastKnownGood.configMap.resourceVersion** (string)\n\n        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n      - **config.lastKnownGood.configMap.uid** (string)\n\n        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.\n\n- **daemonEndpoints** (NodeDaemonEndpoints)\n\n  Endpoints of daemons running on the Node.\n\n  *NodeDaemonEndpoints lists ports opened by daemons running on the Node.*\n\n  - **daemonEndpoints.kubeletEndpoint** (DaemonEndpoint)\n\n    Endpoint on which Kubelet is listening.\n\n    *DaemonEndpoint contains information about a single Daemon endpoint.*\n\n    - **daemonEndpoints.kubeletEndpoint.Port** (int32), required\n\n      Port number of the given endpoint.\n\n- **images** (\\[\\]ContainerImage)\n\n  List of container images on this node\n\n  *Describe a container image*\n\n  - **images.names** (\\[\\]string)\n\n    Names by which this image is known. e.g. \\[\"kubernetes.example/hyperkube:v1.0.7\", \"cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7\"\\]\n\n  - **images.sizeBytes** (int64)\n\n    The size of the image in bytes.\n\n- **nodeInfo** (NodeSystemInfo)\n\n  Set of ids/uuids to uniquely identify the node. More info: <https://kubernetes.io/docs/concepts/nodes/node/#info>\n\n  *NodeSystemInfo is a set of ids/uuids to uniquely identify the node.*\n\n  - **nodeInfo.architecture** (string), required\n\n    The Architecture reported by the node\n\n  - **nodeInfo.bootID** (string), required\n\n    Boot ID reported by the node.\n\n  - **nodeInfo.containerRuntimeVersion** (string), required\n\n    ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).\n\n  - **nodeInfo.kernelVersion** (string), required\n\n    Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).\n\n  - **nodeInfo.kubeProxyVersion** (string), required\n\n    KubeProxy Version reported by the node.\n\n  - **nodeInfo.kubeletVersion** (string), required\n\n    Kubelet Version reported by the node.\n\n  - **nodeInfo.machineID** (string), required\n\n    MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: <http://man7.org/linux/man-pages/man5/machine-id.5.html>\n\n  - **nodeInfo.operatingSystem** (string), required\n\n    The Operating System reported by the node\n\n  - **nodeInfo.osImage** (string), required\n\n    OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).\n\n  - **nodeInfo.systemUUID** (string), required\n\n    SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts <https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid>\n\n- **phase** (string)\n\n  NodePhase is the recently observed lifecycle phase of the node. More info: <https://kubernetes.io/docs/concepts/nodes/node/#phase> The field is never populated, and now is deprecated.\n\n- **volumesAttached** (\\[\\]AttachedVolume)\n\n  List of volumes that are attached to the node.\n\n  *AttachedVolume describes a volume attached to a node*\n\n  - **volumesAttached.devicePath** (string), required\n\n    DevicePath represents the device path where the volume should be available\n\n  - **volumesAttached.name** (string), required\n\n    Name of the attached volume\n\n- **volumesInUse** (\\[\\]string)\n\n  List of attachable volumes in use (mounted) by the node.\n\n## NodeList\n\nNodeList is the whole list of all Nodes which have been registered with master.\n\n- **apiVersion**: v1\n\n- **kind**: NodeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Node](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/#Node)), required\n\n  List of nodes\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/)"
- name: NodeAffinity
  id: workload-resources/pod-v1/index#NodeAffinity
  summary: Node affinity is a group of node affinity scheduling rules
  belongs_to: Pod
  description: |-
    ## NodeAffinity

    Node affinity is a group of node affinity scheduling rules.

    - **preferredDuringSchedulingIgnoredDuringExecution** (\[\]PreferredSchedulingTerm)

      The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.

      *An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).*

      - **preferredDuringSchedulingIgnoredDuringExecution.preference** (NodeSelectorTerm), required

        A node selector term, associated with the corresponding weight.

        *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*

        - **preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's labels.

        - **preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's fields.

      - **preferredDuringSchedulingIgnoredDuringExecution.weight** (int32), required

        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.

    - **requiredDuringSchedulingIgnoredDuringExecution** (NodeSelector)

      If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.

      *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*

      - **requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms** (\[\]NodeSelectorTerm), required

        Required. A list of node selector terms. The terms are ORed.

        *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*

        - **requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's labels.

        - **requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's fields.

    &nbsp;
- name: NodeSelectorRequirement
  id: common-definitions/node-selector-requirement/index
  summary: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values
  description: "# NodeSelectorRequirement\n\nA node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\n\n`import \"k8s.io/api/core/v1\"`\n\nA node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\n\n- **key** (string), required\n\n  The label key that the selector applies to.\n\n- **operator** (string), required\n\n  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\n- **values** (\\[\\]string)\n\n  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/)"
- name: ObjectFieldSelector
  id: common-definitions/object-field-selector/index
  summary: ObjectFieldSelector selects an APIVersioned field of an object
  description: "# ObjectFieldSelector\n\nObjectFieldSelector selects an APIVersioned field of an object.\n\n`import \"k8s.io/api/core/v1\"`\n\nObjectFieldSelector selects an APIVersioned field of an object.\n\n- **fieldPath** (string), required\n\n  Path of the field to select in the specified API version.\n\n- **apiVersion** (string)\n\n  Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/)"
- name: ObjectMeta
  id: common-definitions/object-meta/index
  summary: ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create
  description: "# ObjectMeta\n\nObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\n\n`import \"k8s.io/apimachinery/pkg/apis/meta/v1\"`\n\nObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\n\n- **name** (string)\n\n  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>\n\n- **generateName** (string)\n\n  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\n  If this field is specified and the generated name exists, the server will return a 409.\n\n  Applied only if Name is not specified. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency>\n\n- **namespace** (string)\n\n  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\n  Must be a DNS_LABEL. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces>\n\n- **labels** (map\\[string\\]string)\n\n  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>\n\n- **annotations** (map\\[string\\]string)\n\n  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>\n\n### System\n\n- **finalizers** (\\[\\]string)\n\n  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\n\n- **managedFields** (\\[\\]ManagedFieldsEntry)\n\n  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.\n\n  *ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.*\n\n  - **managedFields.apiVersion** (string)\n\n    APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.\n\n  - **managedFields.fieldsType** (string)\n\n    FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"\n\n  - **managedFields.fieldsV1** (FieldsV1)\n\n    FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n\n    \\*FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\n    Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:', where is the name of a field in a struct, or key in a map 'v:', where is the exact json formatted value of a list item 'i:', where is position of a item in a list 'k:', where is a map of a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\n    The exact format is defined in sigs.k8s.io/structured-merge-diff\\*\n\n  - **managedFields.manager** (string)\n\n    Manager is an identifier of the workflow managing these fields.\n\n  - **managedFields.operation** (string)\n\n    Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.\n\n  - **managedFields.subresource** (string)\n\n    Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.\n\n  - **managedFields.time** (Time)\n\n    Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **ownerReferences** (\\[\\]OwnerReference)\n\n  *Patch strategy: merge on key `uid`*\n\n  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\n\n  *OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.*\n\n  - **ownerReferences.apiVersion** (string), required\n\n    API version of the referent.\n\n  - **ownerReferences.kind** (string), required\n\n    Kind of the referent. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n  - **ownerReferences.name** (string), required\n\n    Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>\n\n  - **ownerReferences.uid** (string), required\n\n    UID of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids>\n\n  - **ownerReferences.blockOwnerDeletion** (boolean)\n\n    If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See <https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion> for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\n\n  - **ownerReferences.controller** (boolean)\n\n    If true, this reference points to the managing controller.\n\n### Read-only\n\n- **creationTimestamp** (Time)\n\n  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\n  Populated by the system. Read-only. Null for lists. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **deletionGracePeriodSeconds** (int64)\n\n  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n\n- **deletionTimestamp** (Time)\n\n  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\n  Populated by the system when a graceful deletion is requested. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **generation** (int64)\n\n  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\n\n- **resourceVersion** (string)\n\n  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\n  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency>\n\n- **selfLink** (string)\n\n  Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n\n- **uid** (string)\n\n  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\n  Populated by the system. Read-only. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/)"
- name: ObjectReference
  id: common-definitions/object-reference/index
  summary: ObjectReference contains enough information to let you inspect or modify the referred object
  description: "# ObjectReference\n\nObjectReference contains enough information to let you inspect or modify the referred object.\n\n`import \"k8s.io/api/core/v1\"`\n\nObjectReference contains enough information to let you inspect or modify the referred object.\n\n- **apiVersion** (string)\n\n  API version of the referent.\n\n- **fieldPath** (string)\n\n  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers\\[2\\]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers\\[2\\]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n\n- **kind** (string)\n\n  Kind of the referent. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **name** (string)\n\n  Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n- **namespace** (string)\n\n  Namespace of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>\n\n- **resourceVersion** (string)\n\n  Specific resourceVersion to which this reference is made, if any. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency>\n\n- **uid** (string)\n\n  UID of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/)"
- name: Other Resources
  id: other-resources/index
  summary: © 2022 The Kubernetes Authors | Documentation Distributed under CC BY 4.0 Copyright © 2022 The Linux Foundation ®. All rights reserved
  description: "# Other Resources\n\n##### [ValidatingAdmissionPolicyBindingList v1beta1](validating-admission-policy-binding-list-v1beta1/index)\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/other-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/other-resources/)"
- name: Patch
  id: common-definitions/patch/index
  summary: Patch is provided to give a concrete name and type to the Kubernetes PATCH request body
  description: "# Patch\n\nPatch is provided to give a concrete name and type to the Kubernetes PATCH request body.\n\n`import \"k8s.io/apimachinery/pkg/apis/meta/v1\"`\n\nPatch is provided to give a concrete name and type to the Kubernetes PATCH request body.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/patch/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/patch/)"
- name: PersistentVolume
  id: config-and-storage-resources/persistent-volume-v1/index
  summary: PersistentVolume (PV) is a storage resource provisioned by an administrator
  description: "# PersistentVolume\n\nPersistentVolume (PV) is a storage resource provisioned by an administrator.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## PersistentVolume\n\nPersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes>\n\n- **apiVersion**: v1\n\n- **kind**: PersistentVolume\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([PersistentVolumeSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/#PersistentVolumeSpec))\n\n  spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes>\n\n- **status** ([PersistentVolumeStatus](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/#PersistentVolumeStatus))\n\n  status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes>\n\n## PersistentVolumeSpec\n\nPersistentVolumeSpec is the specification of a persistent volume.\n\n- **accessModes** (\\[\\]string)\n\n  accessModes contains all ways the volume can be mounted. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes>\n\n- **capacity** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  capacity is the description of the persistent volume's resources and capacity. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity>\n\n- **claimRef** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n  claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding>\n\n- **mountOptions** (\\[\\]string)\n\n  mountOptions is the list of mount options, e.g. \\[\"ro\", \"soft\"\\]. Not validated - mount will simply fail if one is invalid. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options>\n\n- **nodeAffinity** (VolumeNodeAffinity)\n\n  nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.\n\n  *VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.*\n\n  - **nodeAffinity.required** (NodeSelector)\n\n    required specifies hard node constraints that must be met.\n\n    *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*\n\n    - **nodeAffinity.required.nodeSelectorTerms** (\\[\\]NodeSelectorTerm), required\n\n      Required. A list of node selector terms. The terms are ORed.\n\n      *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*\n\n      - **nodeAffinity.required.nodeSelectorTerms.matchExpressions** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n        A list of node selector requirements by node's labels.\n\n      - **nodeAffinity.required.nodeSelectorTerms.matchFields** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n        A list of node selector requirements by node's fields.\n\n- **persistentVolumeReclaimPolicy** (string)\n\n  persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming>\n\n- **storageClassName** (string)\n\n  storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.\n\n- **volumeMode** (string)\n\n  volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.\n\n### Local\n\n- **hostPath** (HostPathVolumeSource)\n\n  hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>\n\n  *Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.*\n\n  - **hostPath.path** (string), required\n\n    path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>\n\n  - **hostPath.type** (string)\n\n    type for HostPath Volume Defaults to \"\" More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>\n\n- **local** (LocalVolumeSource)\n\n  local represents directly-attached storage with node affinity\n\n  *Local represents directly-attached storage with node affinity (Beta feature)*\n\n  - **local.path** (string), required\n\n    path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).\n\n  - **local.fsType** (string)\n\n    fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified.\n\n### Persistent volumes\n\n- **awsElasticBlockStore** (AWSElasticBlockStoreVolumeSource)\n\n  awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n  \\*Represents a Persistent Disk resource in AWS.\n\n  An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.\\*\n\n  - **awsElasticBlockStore.volumeID** (string), required\n\n    volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n  - **awsElasticBlockStore.fsType** (string)\n\n    fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n  - **awsElasticBlockStore.partition** (int32)\n\n    partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n\n  - **awsElasticBlockStore.readOnly** (boolean)\n\n    readOnly value true will force the readOnly setting in VolumeMounts. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n- **azureDisk** (AzureDiskVolumeSource)\n\n  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n\n  *AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.*\n\n  - **azureDisk.diskName** (string), required\n\n    diskName is the Name of the data disk in the blob storage\n\n  - **azureDisk.diskURI** (string), required\n\n    diskURI is the URI of data disk in the blob storage\n\n  - **azureDisk.cachingMode** (string)\n\n    cachingMode is the Host Caching mode: None, Read Only, Read Write.\n\n  - **azureDisk.fsType** (string)\n\n    fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **azureDisk.kind** (string)\n\n    kind expected values are Shared: multiple blob disks per storage account Dedicated: single blob disk per storage account Managed: azure managed data disk (only in managed availability set). defaults to shared\n\n  - **azureDisk.readOnly** (boolean)\n\n    readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n- **azureFile** (AzureFilePersistentVolumeSource)\n\n  azureFile represents an Azure File Service mount on the host and bind mount to the pod.\n\n  *AzureFile represents an Azure File Service mount on the host and bind mount to the pod.*\n\n  - **azureFile.secretName** (string), required\n\n    secretName is the name of secret that contains Azure Storage Account Name and Key\n\n  - **azureFile.shareName** (string), required\n\n    shareName is the azure Share Name\n\n  - **azureFile.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **azureFile.secretNamespace** (string)\n\n    secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod\n\n- **cephfs** (CephFSPersistentVolumeSource)\n\n  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n\n  *Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.*\n\n  - **cephfs.monitors** (\\[\\]string), required\n\n    monitors is Required: Monitors is a collection of Ceph monitors More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n  - **cephfs.path** (string)\n\n    path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n\n  - **cephfs.readOnly** (boolean)\n\n    readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n  - **cephfs.secretFile** (string)\n\n    secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n  - **cephfs.secretRef** (SecretReference)\n\n    secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **cephfs.secretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **cephfs.secretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **cephfs.user** (string)\n\n    user is Optional: User is the rados user name, default is admin More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n- **cinder** (CinderPersistentVolumeSource)\n\n  cinder represents a cinder volume attached and mounted on kubelets host machine. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  *Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.*\n\n  - **cinder.volumeID** (string), required\n\n    volumeID used to identify the volume in cinder. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  - **cinder.fsType** (string)\n\n    fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  - **cinder.readOnly** (boolean)\n\n    readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  - **cinder.secretRef** (SecretReference)\n\n    secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **cinder.secretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **cinder.secretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n- **csi** (CSIPersistentVolumeSource)\n\n  csi represents storage that is handled by an external CSI driver (Beta feature).\n\n  *Represents storage that is managed by an external CSI volume driver (Beta feature)*\n\n  - **csi.driver** (string), required\n\n    driver is the name of the driver to use for this volume. Required.\n\n  - **csi.volumeHandle** (string), required\n\n    volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.\n\n  - **csi.controllerExpandSecretRef** (SecretReference)\n\n    controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **csi.controllerExpandSecretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **csi.controllerExpandSecretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **csi.controllerPublishSecretRef** (SecretReference)\n\n    controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **csi.controllerPublishSecretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **csi.controllerPublishSecretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **csi.fsType** (string)\n\n    fsType to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".\n\n  - **csi.nodeExpandSecretRef** (SecretReference)\n\n    nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is a beta field which is enabled default by CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **csi.nodeExpandSecretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **csi.nodeExpandSecretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **csi.nodePublishSecretRef** (SecretReference)\n\n    nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **csi.nodePublishSecretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **csi.nodePublishSecretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **csi.nodeStageSecretRef** (SecretReference)\n\n    nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **csi.nodeStageSecretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **csi.nodeStageSecretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **csi.readOnly** (boolean)\n\n    readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).\n\n  - **csi.volumeAttributes** (map\\[string\\]string)\n\n    volumeAttributes of the volume to publish.\n\n- **fc** (FCVolumeSource)\n\n  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n\n  *Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.*\n\n  - **fc.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **fc.lun** (int32)\n\n    lun is Optional: FC target lun number\n\n  - **fc.readOnly** (boolean)\n\n    readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **fc.targetWWNs** (\\[\\]string)\n\n    targetWWNs is Optional: FC target worldwide names (WWNs)\n\n  - **fc.wwids** (\\[\\]string)\n\n    wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n\n- **flexVolume** (FlexPersistentVolumeSource)\n\n  flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.\n\n  *FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.*\n\n  - **flexVolume.driver** (string), required\n\n    driver is the name of the driver to use for this volume.\n\n  - **flexVolume.fsType** (string)\n\n    fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n\n  - **flexVolume.options** (map\\[string\\]string)\n\n    options is Optional: this field holds extra command options if any.\n\n  - **flexVolume.readOnly** (boolean)\n\n    readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **flexVolume.secretRef** (SecretReference)\n\n    secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **flexVolume.secretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **flexVolume.secretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n- **flocker** (FlockerVolumeSource)\n\n  flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n\n  *Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.*\n\n  - **flocker.datasetName** (string)\n\n    datasetName is Name of the dataset stored as metadata -\\> name on the dataset for Flocker should be considered as deprecated\n\n  - **flocker.datasetUUID** (string)\n\n    datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset\n\n- **gcePersistentDisk** (GCEPersistentDiskVolumeSource)\n\n  gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  \\*Represents a Persistent Disk resource in Google Compute Engine.\n\n  A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.\\*\n\n  - **gcePersistentDisk.pdName** (string), required\n\n    pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  - **gcePersistentDisk.fsType** (string)\n\n    fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  - **gcePersistentDisk.partition** (int32)\n\n    partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  - **gcePersistentDisk.readOnly** (boolean)\n\n    readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n- **glusterfs** (GlusterfsPersistentVolumeSource)\n\n  glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: <https://examples.k8s.io/volumes/glusterfs/README.md>\n\n  *Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.*\n\n  - **glusterfs.endpoints** (string), required\n\n    endpoints is the endpoint name that details Glusterfs topology. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>\n\n  - **glusterfs.path** (string), required\n\n    path is the Glusterfs volume path. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>\n\n  - **glusterfs.endpointsNamespace** (string)\n\n    endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>\n\n  - **glusterfs.readOnly** (boolean)\n\n    readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>\n\n- **iscsi** (ISCSIPersistentVolumeSource)\n\n  iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\n\n  *ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.*\n\n  - **iscsi.iqn** (string), required\n\n    iqn is Target iSCSI Qualified Name.\n\n  - **iscsi.lun** (int32), required\n\n    lun is iSCSI Target Lun number.\n\n  - **iscsi.targetPortal** (string), required\n\n    targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n\n  - **iscsi.chapAuthDiscovery** (boolean)\n\n    chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n\n  - **iscsi.chapAuthSession** (boolean)\n\n    chapAuthSession defines whether support iSCSI Session CHAP authentication\n\n  - **iscsi.fsType** (string)\n\n    fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#iscsi>\n\n  - **iscsi.initiatorName** (string)\n\n    initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \\<target portal\\>:\\<volume name\\> will be created for the connection.\n\n  - **iscsi.iscsiInterface** (string)\n\n    iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).\n\n  - **iscsi.portals** (\\[\\]string)\n\n    portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n\n  - **iscsi.readOnly** (boolean)\n\n    readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\n\n  - **iscsi.secretRef** (SecretReference)\n\n    secretRef is the CHAP Secret for iSCSI target and initiator authentication\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **iscsi.secretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **iscsi.secretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n- **nfs** (NFSVolumeSource)\n\n  nfs represents an NFS mount on the host. Provisioned by an admin. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n  *Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.*\n\n  - **nfs.path** (string), required\n\n    path that is exported by the NFS server. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n  - **nfs.server** (string), required\n\n    server is the hostname or IP address of the NFS server. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n  - **nfs.readOnly** (boolean)\n\n    readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n- **photonPersistentDisk** (PhotonPersistentDiskVolumeSource)\n\n  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\n\n  *Represents a Photon Controller persistent disk resource.*\n\n  - **photonPersistentDisk.pdID** (string), required\n\n    pdID is the ID that identifies Photon Controller persistent disk\n\n  - **photonPersistentDisk.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n- **portworxVolume** (PortworxVolumeSource)\n\n  portworxVolume represents a portworx volume attached and mounted on kubelets host machine\n\n  *PortworxVolumeSource represents a Portworx volume resource.*\n\n  - **portworxVolume.volumeID** (string), required\n\n    volumeID uniquely identifies a Portworx volume\n\n  - **portworxVolume.fsType** (string)\n\n    fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **portworxVolume.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n- **quobyte** (QuobyteVolumeSource)\n\n  quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n\n  *Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.*\n\n  - **quobyte.registry** (string), required\n\n    registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n\n  - **quobyte.volume** (string), required\n\n    volume is a string that references an already created Quobyte volume by name.\n\n  - **quobyte.group** (string)\n\n    group to map volume access to Default is no group\n\n  - **quobyte.readOnly** (boolean)\n\n    readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n\n  - **quobyte.tenant** (string)\n\n    tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin\n\n  - **quobyte.user** (string)\n\n    user to map volume access to Defaults to serivceaccount user\n\n- **rbd** (RBDPersistentVolumeSource)\n\n  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: <https://examples.k8s.io/volumes/rbd/README.md>\n\n  *Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.*\n\n  - **rbd.image** (string), required\n\n    image is the rados image name. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.monitors** (\\[\\]string), required\n\n    monitors is a collection of Ceph monitors. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.fsType** (string)\n\n    fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#rbd>\n\n  - **rbd.keyring** (string)\n\n    keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.pool** (string)\n\n    pool is the rados pool name. Default is rbd. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.readOnly** (boolean)\n\n    readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.secretRef** (SecretReference)\n\n    secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **rbd.secretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **rbd.secretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **rbd.user** (string)\n\n    user is the rados user name. Default is admin. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n- **scaleIO** (ScaleIOPersistentVolumeSource)\n\n  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n\n  *ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume*\n\n  - **scaleIO.gateway** (string), required\n\n    gateway is the host address of the ScaleIO API Gateway.\n\n  - **scaleIO.secretRef** (SecretReference), required\n\n    secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\n\n    *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*\n\n    - **scaleIO.secretRef.name** (string)\n\n      name is unique within a namespace to reference a secret resource.\n\n    - **scaleIO.secretRef.namespace** (string)\n\n      namespace defines the space within which the secret name must be unique.\n\n  - **scaleIO.system** (string), required\n\n    system is the name of the storage system as configured in ScaleIO.\n\n  - **scaleIO.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"\n\n  - **scaleIO.protectionDomain** (string)\n\n    protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n\n  - **scaleIO.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **scaleIO.sslEnabled** (boolean)\n\n    sslEnabled is the flag to enable/disable SSL communication with Gateway, default false\n\n  - **scaleIO.storageMode** (string)\n\n    storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.\n\n  - **scaleIO.storagePool** (string)\n\n    storagePool is the ScaleIO Storage Pool associated with the protection domain.\n\n  - **scaleIO.volumeName** (string)\n\n    volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.\n\n- **storageos** (StorageOSPersistentVolumeSource)\n\n  storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: <https://examples.k8s.io/volumes/storageos/README.md>\n\n  *Represents a StorageOS persistent volume resource.*\n\n  - **storageos.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **storageos.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **storageos.secretRef** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n    secretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted.\n\n  - **storageos.volumeName** (string)\n\n    volumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace.\n\n  - **storageos.volumeNamespace** (string)\n\n    volumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n\n- **vsphereVolume** (VsphereVirtualDiskVolumeSource)\n\n  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n\n  *Represents a vSphere volume resource.*\n\n  - **vsphereVolume.volumePath** (string), required\n\n    volumePath is the path that identifies vSphere volume vmdk\n\n  - **vsphereVolume.fsType** (string)\n\n    fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **vsphereVolume.storagePolicyID** (string)\n\n    storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n\n  - **vsphereVolume.storagePolicyName** (string)\n\n    storagePolicyName is the storage Policy Based Management (SPBM) profile name.\n\n## PersistentVolumeStatus\n\nPersistentVolumeStatus is the current status of a persistent volume.\n\n- **lastPhaseTransitionTime** (Time)\n\n  lastPhaseTransitionTime is the time the phase transitioned from one to another and automatically resets to current time everytime a volume phase transitions. This is an alpha field and requires enabling PersistentVolumeLastPhaseTransitionTime feature.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **message** (string)\n\n  message is a human-readable message indicating details about why the volume is in this state.\n\n- **phase** (string)\n\n  phase indicates if a volume is available, bound to a claim, or released by a claim. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase>\n\n- **reason** (string)\n\n  reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.\n\n## PersistentVolumeList\n\nPersistentVolumeList is a list of PersistentVolume items.\n\n- **apiVersion**: v1\n\n- **kind**: PersistentVolumeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][PersistentVolume](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/#PersistentVolume)), required\n\n  items is a list of persistent volumes. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/)"
- name: PersistentVolume.Spec
  id: config-and-storage-resources/persistent-volume-v1/index#PersistentVolumeSpec
  summary: PersistentVolumeSpec is the specification of a persistent volume
  belongs_to: PersistentVolume
  description: |-
    ## PersistentVolumeSpec

    PersistentVolumeSpec is the specification of a persistent volume.

    - **accessModes** (\[\]string)

      accessModes contains all ways the volume can be mounted. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes>

    - **capacity** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

      capacity is the description of the persistent volume's resources and capacity. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity>

    - **claimRef** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))

      claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding>

    - **mountOptions** (\[\]string)

      mountOptions is the list of mount options, e.g. \["ro", "soft"\]. Not validated - mount will simply fail if one is invalid. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options>

    - **nodeAffinity** (VolumeNodeAffinity)

      nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.

      *VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.*

      - **nodeAffinity.required** (NodeSelector)

        required specifies hard node constraints that must be met.

        *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*

        - **nodeAffinity.required.nodeSelectorTerms** (\[\]NodeSelectorTerm), required

          Required. A list of node selector terms. The terms are ORed.

          *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*

          - **nodeAffinity.required.nodeSelectorTerms.matchExpressions** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

            A list of node selector requirements by node's labels.

          - **nodeAffinity.required.nodeSelectorTerms.matchFields** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

            A list of node selector requirements by node's fields.

    - **persistentVolumeReclaimPolicy** (string)

      persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming>

    - **storageClassName** (string)

      storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.

    - **volumeMode** (string)

      volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.

    ### Local

    - **hostPath** (HostPathVolumeSource)

      hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>

      *Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.*

      - **hostPath.path** (string), required

        path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>

      - **hostPath.type** (string)

        type for HostPath Volume Defaults to "" More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>

    - **local** (LocalVolumeSource)

      local represents directly-attached storage with node affinity

      *Local represents directly-attached storage with node affinity (Beta feature)*

      - **local.path** (string), required

        path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).

      - **local.fsType** (string)

        fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.

    ### Persistent volumes

    - **awsElasticBlockStore** (AWSElasticBlockStoreVolumeSource)

      awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>

      \*Represents a Persistent Disk resource in AWS.

      An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.\*

      - **awsElasticBlockStore.volumeID** (string), required

        volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>

      - **awsElasticBlockStore.fsType** (string)

        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>

      - **awsElasticBlockStore.partition** (int32)

        partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).

      - **awsElasticBlockStore.readOnly** (boolean)

        readOnly value true will force the readOnly setting in VolumeMounts. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>

    - **azureDisk** (AzureDiskVolumeSource)

      azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.

      *AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.*

      - **azureDisk.diskName** (string), required

        diskName is the Name of the data disk in the blob storage

      - **azureDisk.diskURI** (string), required

        diskURI is the URI of data disk in the blob storage

      - **azureDisk.cachingMode** (string)

        cachingMode is the Host Caching mode: None, Read Only, Read Write.

      - **azureDisk.fsType** (string)

        fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

      - **azureDisk.kind** (string)

        kind expected values are Shared: multiple blob disks per storage account Dedicated: single blob disk per storage account Managed: azure managed data disk (only in managed availability set). defaults to shared

      - **azureDisk.readOnly** (boolean)

        readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

    - **azureFile** (AzureFilePersistentVolumeSource)

      azureFile represents an Azure File Service mount on the host and bind mount to the pod.

      *AzureFile represents an Azure File Service mount on the host and bind mount to the pod.*

      - **azureFile.secretName** (string), required

        secretName is the name of secret that contains Azure Storage Account Name and Key

      - **azureFile.shareName** (string), required

        shareName is the azure Share Name

      - **azureFile.readOnly** (boolean)

        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

      - **azureFile.secretNamespace** (string)

        secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod

    - **cephfs** (CephFSPersistentVolumeSource)

      cephFS represents a Ceph FS mount on the host that shares a pod's lifetime

      *Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.*

      - **cephfs.monitors** (\[\]string), required

        monitors is Required: Monitors is a collection of Ceph monitors More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>

      - **cephfs.path** (string)

        path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /

      - **cephfs.readOnly** (boolean)

        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>

      - **cephfs.secretFile** (string)

        secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>

      - **cephfs.secretRef** (SecretReference)

        secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **cephfs.secretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **cephfs.secretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **cephfs.user** (string)

        user is Optional: User is the rados user name, default is admin More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>

    - **cinder** (CinderPersistentVolumeSource)

      cinder represents a cinder volume attached and mounted on kubelets host machine. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>

      *Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.*

      - **cinder.volumeID** (string), required

        volumeID used to identify the volume in cinder. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>

      - **cinder.fsType** (string)

        fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>

      - **cinder.readOnly** (boolean)

        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>

      - **cinder.secretRef** (SecretReference)

        secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **cinder.secretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **cinder.secretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

    - **csi** (CSIPersistentVolumeSource)

      csi represents storage that is handled by an external CSI driver (Beta feature).

      *Represents storage that is managed by an external CSI volume driver (Beta feature)*

      - **csi.driver** (string), required

        driver is the name of the driver to use for this volume. Required.

      - **csi.volumeHandle** (string), required

        volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.

      - **csi.controllerExpandSecretRef** (SecretReference)

        controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **csi.controllerExpandSecretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **csi.controllerExpandSecretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **csi.controllerPublishSecretRef** (SecretReference)

        controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **csi.controllerPublishSecretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **csi.controllerPublishSecretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **csi.fsType** (string)

        fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".

      - **csi.nodeExpandSecretRef** (SecretReference)

        nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This is a beta field which is enabled default by CSINodeExpandSecret feature gate. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **csi.nodeExpandSecretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **csi.nodeExpandSecretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **csi.nodePublishSecretRef** (SecretReference)

        nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **csi.nodePublishSecretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **csi.nodePublishSecretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **csi.nodeStageSecretRef** (SecretReference)

        nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **csi.nodeStageSecretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **csi.nodeStageSecretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **csi.readOnly** (boolean)

        readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).

      - **csi.volumeAttributes** (map\[string\]string)

        volumeAttributes of the volume to publish.

    - **fc** (FCVolumeSource)

      fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.

      *Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.*

      - **fc.fsType** (string)

        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

      - **fc.lun** (int32)

        lun is Optional: FC target lun number

      - **fc.readOnly** (boolean)

        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

      - **fc.targetWWNs** (\[\]string)

        targetWWNs is Optional: FC target worldwide names (WWNs)

      - **fc.wwids** (\[\]string)

        wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.

    - **flexVolume** (FlexPersistentVolumeSource)

      flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.

      *FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.*

      - **flexVolume.driver** (string), required

        driver is the name of the driver to use for this volume.

      - **flexVolume.fsType** (string)

        fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.

      - **flexVolume.options** (map\[string\]string)

        options is Optional: this field holds extra command options if any.

      - **flexVolume.readOnly** (boolean)

        readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

      - **flexVolume.secretRef** (SecretReference)

        secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **flexVolume.secretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **flexVolume.secretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

    - **flocker** (FlockerVolumeSource)

      flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running

      *Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.*

      - **flocker.datasetName** (string)

        datasetName is Name of the dataset stored as metadata -\> name on the dataset for Flocker should be considered as deprecated

      - **flocker.datasetUUID** (string)

        datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset

    - **gcePersistentDisk** (GCEPersistentDiskVolumeSource)

      gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>

      \*Represents a Persistent Disk resource in Google Compute Engine.

      A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.\*

      - **gcePersistentDisk.pdName** (string), required

        pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>

      - **gcePersistentDisk.fsType** (string)

        fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>

      - **gcePersistentDisk.partition** (int32)

        partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>

      - **gcePersistentDisk.readOnly** (boolean)

        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>

    - **glusterfs** (GlusterfsPersistentVolumeSource)

      glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: <https://examples.k8s.io/volumes/glusterfs/README.md>

      *Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.*

      - **glusterfs.endpoints** (string), required

        endpoints is the endpoint name that details Glusterfs topology. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>

      - **glusterfs.path** (string), required

        path is the Glusterfs volume path. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>

      - **glusterfs.endpointsNamespace** (string)

        endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>

      - **glusterfs.readOnly** (boolean)

        readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>

    - **iscsi** (ISCSIPersistentVolumeSource)

      iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.

      *ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.*

      - **iscsi.iqn** (string), required

        iqn is Target iSCSI Qualified Name.

      - **iscsi.lun** (int32), required

        lun is iSCSI Target Lun number.

      - **iscsi.targetPortal** (string), required

        targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).

      - **iscsi.chapAuthDiscovery** (boolean)

        chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication

      - **iscsi.chapAuthSession** (boolean)

        chapAuthSession defines whether support iSCSI Session CHAP authentication

      - **iscsi.fsType** (string)

        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#iscsi>

      - **iscsi.initiatorName** (string)

        initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \<target portal\>:\<volume name\> will be created for the connection.

      - **iscsi.iscsiInterface** (string)

        iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).

      - **iscsi.portals** (\[\]string)

        portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).

      - **iscsi.readOnly** (boolean)

        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.

      - **iscsi.secretRef** (SecretReference)

        secretRef is the CHAP Secret for iSCSI target and initiator authentication

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **iscsi.secretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **iscsi.secretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

    - **nfs** (NFSVolumeSource)

      nfs represents an NFS mount on the host. Provisioned by an admin. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>

      *Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.*

      - **nfs.path** (string), required

        path that is exported by the NFS server. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>

      - **nfs.server** (string), required

        server is the hostname or IP address of the NFS server. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>

      - **nfs.readOnly** (boolean)

        readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>

    - **photonPersistentDisk** (PhotonPersistentDiskVolumeSource)

      photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine

      *Represents a Photon Controller persistent disk resource.*

      - **photonPersistentDisk.pdID** (string), required

        pdID is the ID that identifies Photon Controller persistent disk

      - **photonPersistentDisk.fsType** (string)

        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

    - **portworxVolume** (PortworxVolumeSource)

      portworxVolume represents a portworx volume attached and mounted on kubelets host machine

      *PortworxVolumeSource represents a Portworx volume resource.*

      - **portworxVolume.volumeID** (string), required

        volumeID uniquely identifies a Portworx volume

      - **portworxVolume.fsType** (string)

        fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.

      - **portworxVolume.readOnly** (boolean)

        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

    - **quobyte** (QuobyteVolumeSource)

      quobyte represents a Quobyte mount on the host that shares a pod's lifetime

      *Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.*

      - **quobyte.registry** (string), required

        registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes

      - **quobyte.volume** (string), required

        volume is a string that references an already created Quobyte volume by name.

      - **quobyte.group** (string)

        group to map volume access to Default is no group

      - **quobyte.readOnly** (boolean)

        readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.

      - **quobyte.tenant** (string)

        tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin

      - **quobyte.user** (string)

        user to map volume access to Defaults to serivceaccount user

    - **rbd** (RBDPersistentVolumeSource)

      rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: <https://examples.k8s.io/volumes/rbd/README.md>

      *Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.*

      - **rbd.image** (string), required

        image is the rados image name. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>

      - **rbd.monitors** (\[\]string), required

        monitors is a collection of Ceph monitors. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>

      - **rbd.fsType** (string)

        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#rbd>

      - **rbd.keyring** (string)

        keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>

      - **rbd.pool** (string)

        pool is the rados pool name. Default is rbd. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>

      - **rbd.readOnly** (boolean)

        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>

      - **rbd.secretRef** (SecretReference)

        secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **rbd.secretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **rbd.secretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **rbd.user** (string)

        user is the rados user name. Default is admin. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>

    - **scaleIO** (ScaleIOPersistentVolumeSource)

      scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.

      *ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume*

      - **scaleIO.gateway** (string), required

        gateway is the host address of the ScaleIO API Gateway.

      - **scaleIO.secretRef** (SecretReference), required

        secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.

        *SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace*

        - **scaleIO.secretRef.name** (string)

          name is unique within a namespace to reference a secret resource.

        - **scaleIO.secretRef.namespace** (string)

          namespace defines the space within which the secret name must be unique.

      - **scaleIO.system** (string), required

        system is the name of the storage system as configured in ScaleIO.

      - **scaleIO.fsType** (string)

        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"

      - **scaleIO.protectionDomain** (string)

        protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.

      - **scaleIO.readOnly** (boolean)

        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

      - **scaleIO.sslEnabled** (boolean)

        sslEnabled is the flag to enable/disable SSL communication with Gateway, default false

      - **scaleIO.storageMode** (string)

        storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.

      - **scaleIO.storagePool** (string)

        storagePool is the ScaleIO Storage Pool associated with the protection domain.

      - **scaleIO.volumeName** (string)

        volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.

    - **storageos** (StorageOSPersistentVolumeSource)

      storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: <https://examples.k8s.io/volumes/storageos/README.md>

      *Represents a StorageOS persistent volume resource.*

      - **storageos.fsType** (string)

        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

      - **storageos.readOnly** (boolean)

        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

      - **storageos.secretRef** ([ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))

        secretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted.

      - **storageos.volumeName** (string)

        volumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace.

      - **storageos.volumeNamespace** (string)

        volumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.

    - **vsphereVolume** (VsphereVirtualDiskVolumeSource)

      vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine

      *Represents a vSphere volume resource.*

      - **vsphereVolume.volumePath** (string), required

        volumePath is the path that identifies vSphere volume vmdk

      - **vsphereVolume.fsType** (string)

        fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

      - **vsphereVolume.storagePolicyID** (string)

        storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.

      - **vsphereVolume.storagePolicyName** (string)

        storagePolicyName is the storage Policy Based Management (SPBM) profile name.

    &nbsp;
- name: PersistentVolume.Status
  id: config-and-storage-resources/persistent-volume-v1/index#PersistentVolumeStatus
  summary: PersistentVolumeStatus is the current status of a persistent volume
  belongs_to: PersistentVolume
  description: "## PersistentVolumeStatus\n\nPersistentVolumeStatus is the current status of a persistent volume.\n\n- **lastPhaseTransitionTime** (Time)\n\n  lastPhaseTransitionTime is the time the phase transitioned from one to another and automatically resets to current time everytime a volume phase transitions. This is an alpha field and requires enabling PersistentVolumeLastPhaseTransitionTime feature.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **message** (string)\n\n  message is a human-readable message indicating details about why the volume is in this state.\n\n- **phase** (string)\n\n  phase indicates if a volume is available, bound to a claim, or released by a claim. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase>\n\n- **reason** (string)\n\n  reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.\n\n## PersistentVolumeList\n\nPersistentVolumeList is a list of PersistentVolume items.\n\n- **apiVersion**: v1\n\n- **kind**: PersistentVolumeList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][PersistentVolume](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/#PersistentVolume)), required\n\n  items is a list of persistent volumes. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/)"
- name: PersistentVolumeClaim
  id: config-and-storage-resources/persistent-volume-claim-v1/index
  summary: PersistentVolumeClaim is a user's request for and claim to a persistent volume
  description: "# PersistentVolumeClaim\n\nPersistentVolumeClaim is a user's request for and claim to a persistent volume.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## PersistentVolumeClaim\n\nPersistentVolumeClaim is a user's request for and claim to a persistent volume\n\n- **apiVersion**: v1\n\n- **kind**: PersistentVolumeClaim\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([PersistentVolumeClaimSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaimSpec))\n\n  spec defines the desired characteristics of a volume requested by a pod author. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>\n\n- **status** ([PersistentVolumeClaimStatus](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaimStatus))\n\n  status represents the current information/status of a persistent volume claim. Read-only. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>\n\n## PersistentVolumeClaimSpec\n\nPersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes\n\n- **accessModes** (\\[\\]string)\n\n  accessModes contains the desired access modes the volume should have. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>\n\n- **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n  selector is a label query over volumes to consider for binding.\n\n- **resources** (ResourceRequirements)\n\n  resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources>\n\n  *ResourceRequirements describes the compute resource requirements.*\n\n  - **resources.claims** (\\[\\]ResourceClaim)\n\n    *Map: unique values on key name will be kept during a merge*\n\n    Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\n    This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\n    This field is immutable. It can only be set for containers.\n\n    *ResourceClaim references one entry in PodSpec.ResourceClaims.*\n\n    - **resources.claims.name** (string), required\n\n      Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.\n\n  - **resources.limits** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Limits describes the maximum amount of compute resources allowed. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n  - **resources.requests** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n- **volumeName** (string)\n\n  volumeName is the binding reference to the PersistentVolume backing this claim.\n\n- **storageClassName** (string)\n\n  storageClassName is the name of the StorageClass required by the claim. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1>\n\n- **volumeMode** (string)\n\n  volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.\n\n### Beta level\n\n- **dataSource** ([TypedLocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/typed-local-object-reference/#TypedLocalObjectReference))\n\n  dataSource field can be used to specify either: \\* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) \\* An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.\n\n- **dataSourceRef** (TypedObjectReference)\n\n  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: \\* While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.\n\n  - While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified.\n  - While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n\n  \\*\\*\n\n  - **dataSourceRef.kind** (string), required\n\n    Kind is the type of resource being referenced\n\n  - **dataSourceRef.name** (string), required\n\n    Name is the name of resource being referenced\n\n  - **dataSourceRef.apiGroup** (string)\n\n    APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.\n\n  - **dataSourceRef.namespace** (string)\n\n    Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n\n## PersistentVolumeClaimStatus\n\nPersistentVolumeClaimStatus is the current status of a persistent volume claim.\n\n- **accessModes** (\\[\\]string)\n\n  accessModes contains the actual access modes the volume backing the PVC has. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>\n\n- **allocatedResourceStatuses** (map\\[string\\]string)\n\n  allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: \\* Un-prefixed keys: - storage - the capacity of the volume. \\* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\n  ClaimResourceStatus can be in any of following states: - ControllerResizeInProgress: State set when resize controller starts resizing the volume in control-plane. - ControllerResizeFailed: State set when resize has failed in resize controller with a terminal error. - NodeResizePending: State set when resize controller has finished resizing the volume but further resizing of volume is needed on the node. - NodeResizeInProgress: State set when kubelet starts resizing the volume. - NodeResizeFailed: State set when resizing has failed in kubelet with a terminal error. Transient errors don't set NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: - pvc.status.allocatedResourceStatus\\['storage'\\] = \"ControllerResizeInProgress\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"ControllerResizeFailed\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"NodeResizePending\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"NodeResizeInProgress\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"NodeResizeFailed\" When this field is not set, it means that no resize operation is in progress for the given PVC.\n\n  A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\n  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n\n- **allocatedResources** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: \\* Un-prefixed keys: - storage - the capacity of the volume. \\* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\n  Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.\n\n  A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\n  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n\n- **capacity** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  capacity represents the actual resources of the underlying volume.\n\n- **conditions** (\\[\\]PersistentVolumeClaimCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.\n\n  *PersistentVolumeClaimCondition contains details about state of pvc*\n\n  - **conditions.status** (string), required\n\n  - **conditions.type** (string), required\n\n  - **conditions.lastProbeTime** (Time)\n\n    lastProbeTime is the time we probed the condition.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime is the time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message is the human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.\n\n- **phase** (string)\n\n  phase represents the current phase of PersistentVolumeClaim.\n\n## PersistentVolumeClaimList\n\nPersistentVolumeClaimList is a list of PersistentVolumeClaim items.\n\n- **apiVersion**: v1\n\n- **kind**: PersistentVolumeClaimList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][PersistentVolumeClaim](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim)), required\n\n  items is a list of persistent volume claims. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/)"
- name: PersistentVolumeClaim.Spec
  id: config-and-storage-resources/persistent-volume-claim-v1/index#PersistentVolumeClaimSpec
  summary: accessModes contains the desired access modes the volume should have
  belongs_to: PersistentVolumeClaim
  description: |-
    ## PersistentVolumeClaimSpec

    PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes

    - **accessModes** (\[\]string)

      accessModes contains the desired access modes the volume should have. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>

    - **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

      selector is a label query over volumes to consider for binding.

    - **resources** (ResourceRequirements)

      resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources>

      *ResourceRequirements describes the compute resource requirements.*

      - **resources.claims** (\[\]ResourceClaim)

        *Map: unique values on key name will be kept during a merge*

        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

        This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.

        *ResourceClaim references one entry in PodSpec.ResourceClaims.*

        - **resources.claims.name** (string), required

          Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.

      - **resources.limits** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

        Limits describes the maximum amount of compute resources allowed. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>

      - **resources.requests** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>

    - **volumeName** (string)

      volumeName is the binding reference to the PersistentVolume backing this claim.

    - **storageClassName** (string)

      storageClassName is the name of the StorageClass required by the claim. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1>

    - **volumeMode** (string)

      volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.

    ### Beta level

    - **dataSource** ([TypedLocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/typed-local-object-reference/#TypedLocalObjectReference))

      dataSource field can be used to specify either: \* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) \* An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    - **dataSourceRef** (TypedObjectReference)

      dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: \* While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.

      - While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified.
      - While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

      \*\*

      - **dataSourceRef.kind** (string), required

        Kind is the type of resource being referenced

      - **dataSourceRef.name** (string), required

        Name is the name of resource being referenced

      - **dataSourceRef.apiGroup** (string)

        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.

      - **dataSourceRef.namespace** (string)

        Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    &nbsp;
- name: PersistentVolumeClaim.Status
  id: config-and-storage-resources/persistent-volume-claim-v1/index#PersistentVolumeClaimStatus
  summary: PersistentVolumeClaimStatus is the current status of a persistent volume claim
  belongs_to: PersistentVolumeClaim
  description: "## PersistentVolumeClaimStatus\n\nPersistentVolumeClaimStatus is the current status of a persistent volume claim.\n\n- **accessModes** (\\[\\]string)\n\n  accessModes contains the actual access modes the volume backing the PVC has. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>\n\n- **allocatedResourceStatuses** (map\\[string\\]string)\n\n  allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: \\* Un-prefixed keys: - storage - the capacity of the volume. \\* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\n  ClaimResourceStatus can be in any of following states: - ControllerResizeInProgress: State set when resize controller starts resizing the volume in control-plane. - ControllerResizeFailed: State set when resize has failed in resize controller with a terminal error. - NodeResizePending: State set when resize controller has finished resizing the volume but further resizing of volume is needed on the node. - NodeResizeInProgress: State set when kubelet starts resizing the volume. - NodeResizeFailed: State set when resizing has failed in kubelet with a terminal error. Transient errors don't set NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: - pvc.status.allocatedResourceStatus\\['storage'\\] = \"ControllerResizeInProgress\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"ControllerResizeFailed\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"NodeResizePending\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"NodeResizeInProgress\" - pvc.status.allocatedResourceStatus\\['storage'\\] = \"NodeResizeFailed\" When this field is not set, it means that no resize operation is in progress for the given PVC.\n\n  A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\n  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n\n- **allocatedResources** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: \\* Un-prefixed keys: - storage - the capacity of the volume. \\* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\n  Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.\n\n  A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\n  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n\n- **capacity** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  capacity represents the actual resources of the underlying volume.\n\n- **conditions** (\\[\\]PersistentVolumeClaimCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.\n\n  *PersistentVolumeClaimCondition contains details about state of pvc*\n\n  - **conditions.status** (string), required\n\n  - **conditions.type** (string), required\n\n  - **conditions.lastProbeTime** (Time)\n\n    lastProbeTime is the time we probed the condition.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    lastTransitionTime is the time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    message is the human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.\n\n- **phase** (string)\n\n  phase represents the current phase of PersistentVolumeClaim.\n\n## PersistentVolumeClaimList\n\nPersistentVolumeClaimList is a list of PersistentVolumeClaim items.\n\n- **apiVersion**: v1\n\n- **kind**: PersistentVolumeClaimList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][PersistentVolumeClaim](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim)), required\n\n  items is a list of persistent volume claims. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/)"
- name: Pod
  id: workload-resources/pod-v1/index
  summary: Pod is a collection of containers that can run on a host
  description: "# Pod\n\nPod is a collection of containers that can run on a host.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## Pod\n\nPod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.\n\n- **apiVersion**: v1\n\n- **kind**: Pod\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([PodSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec))\n\n  Specification of the desired behavior of the pod. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([PodStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus))\n\n  Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## PodSpec\n\nPodSpec is a description of a pod.\n\n### Containers\n\n- **containers** (\\[\\][Container](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container)), required\n\n  *Patch strategy: merge on key `name`*\n\n  List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n\n- **initContainers** (\\[\\][Container](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container))\n\n  *Patch strategy: merge on key `name`*\n\n  List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>\n\n- **ephemeralContainers** (\\[\\][EphemeralContainer](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#EphemeralContainer))\n\n  *Patch strategy: merge on key `name`*\n\n  List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.\n\n- **imagePullSecrets** (\\[\\][LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n  *Patch strategy: merge on key `name`*\n\n  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: <https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod>\n\n- **enableServiceLinks** (boolean)\n\n  EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.\n\n- **os** (PodOS)\n\n  Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\n  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\n  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers\\[*\\].securityContext.seLinuxOptions - spec.containers\\[*\\].securityContext.seccompProfile - spec.containers\\[*\\].securityContext.capabilities - spec.containers\\[*\\].securityContext.readOnlyRootFilesystem - spec.containers\\[*\\].securityContext.privileged - spec.containers\\[*\\].securityContext.allowPrivilegeEscalation - spec.containers\\[*\\].securityContext.procMount - spec.containers\\[*\\].securityContext.runAsUser - spec.containers\\[\\*\\].securityContext.runAsGroup\n\n  *PodOS defines the OS parameters of a pod.*\n\n  - **os.name** (string), required\n\n    Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: <https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration> Clients should expect to handle additional values and treat unrecognized values in this field as os: null\n\n### Volumes\n\n- **volumes** (\\[\\][Volume](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#Volume))\n\n  *Patch strategies: retainKeys, merge on key `name`*\n\n  List of volumes that can be mounted by containers belonging to the pod. More info: <https://kubernetes.io/docs/concepts/storage/volumes>\n\n### Scheduling\n\n- **nodeSelector** (map\\[string\\]string)\n\n  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: <https://kubernetes.io/docs/concepts/configuration/assign-pod-node/>\n\n- **nodeName** (string)\n\n  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n\n- **affinity** (Affinity)\n\n  If specified, the pod's scheduling constraints\n\n  *Affinity is a group of affinity scheduling rules.*\n\n  - **affinity.nodeAffinity** ([NodeAffinity](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#NodeAffinity))\n\n    Describes node affinity scheduling rules for the pod.\n\n  - **affinity.podAffinity** ([PodAffinity](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity))\n\n    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n\n  - **affinity.podAntiAffinity** ([PodAntiAffinity](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAntiAffinity))\n\n    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n\n- **tolerations** (\\[\\]Toleration)\n\n  If specified, the pod's tolerations.\n\n  *The pod this Toleration is attached to tolerates any taint that matches the triple \\<key,value,effect\\> using the matching operator .*\n\n  - **tolerations.key** (string)\n\n    Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n\n  - **tolerations.operator** (string)\n\n    Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\n  - **tolerations.value** (string)\n\n    Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n\n  - **tolerations.effect** (string)\n\n    Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\n  - **tolerations.tolerationSeconds** (int64)\n\n    TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n\n- **schedulerName** (string)\n\n  If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n\n- **runtimeClassName** (string)\n\n  RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: <https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class>\n\n- **priorityClassName** (string)\n\n  If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.\n\n- **priority** (int32)\n\n  The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.\n\n- **preemptionPolicy** (string)\n\n  PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.\n\n- **topologySpreadConstraints** (\\[\\]TopologySpreadConstraint)\n\n  *Patch strategy: merge on key `topologyKey`*\n\n  *Map: unique values on keys `topologyKey, whenUnsatisfiable` will be kept during a merge*\n\n  TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.\n\n  *TopologySpreadConstraint specifies how to spread matching pods among the given topology.*\n\n  - **topologySpreadConstraints.maxSkew** (int32), required\n\n    MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. \\| zone1 \\| zone2 \\| zone3 \\| \\| P P \\| P P \\| P \\| - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.\n\n  - **topologySpreadConstraints.topologyKey** (string), required\n\n    TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \\<key, value\\> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.\n\n  - **topologySpreadConstraints.whenUnsatisfiable** (string), required\n\n    WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: \\| zone1 \\| zone2 \\| zone3 \\| \\| P P P \\| P \\| P \\| If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.\n\n  - **topologySpreadConstraints.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.\n\n  - **topologySpreadConstraints.matchLabelKeys** (\\[\\]string)\n\n    *Atomic: will be replaced during a merge*\n\n    MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\n    This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).\n\n  - **topologySpreadConstraints.minDomains** (int32)\n\n    MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\n    For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: \\| zone1 \\| zone2 \\| zone3 \\| \\| P P \\| P P \\| P P \\| The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\n    This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).\n\n  - **topologySpreadConstraints.nodeAffinityPolicy** (string)\n\n    NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\n    If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\n  - **topologySpreadConstraints.nodeTaintsPolicy** (string)\n\n    NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\n    If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\n- **overhead** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: <https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md>\n\n### Lifecycle\n\n- **restartPolicy** (string)\n\n  Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy>\n\n- **terminationGracePeriodSeconds** (int64)\n\n  Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n\n- **activeDeadlineSeconds** (int64)\n\n  Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n\n- **readinessGates** (\\[\\]PodReadinessGate)\n\n  If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: <https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates>\n\n  *PodReadinessGate contains the reference to a pod condition*\n\n  - **readinessGates.conditionType** (string), required\n\n    ConditionType refers to a condition in the pod's condition list with matching type.\n\n### Hostname and Name resolution\n\n- **hostname** (string)\n\n  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n\n- **setHostnameAsFQDN** (boolean)\n\n  If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.\n\n- **subdomain** (string)\n\n  If specified, the fully qualified Pod hostname will be \"\\<hostname\\>.\\<subdomain\\>.\\<pod namespace\\>.svc.\\<cluster domain\\>\". If not specified, the pod will not have a domainname at all.\n\n- **hostAliases** (\\[\\]HostAlias)\n\n  *Patch strategy: merge on key `ip`*\n\n  HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n\n  *HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.*\n\n  - **hostAliases.hostnames** (\\[\\]string)\n\n    Hostnames for the above IP address.\n\n  - **hostAliases.ip** (string)\n\n    IP address of the host file entry.\n\n- **dnsConfig** (PodDNSConfig)\n\n  Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.\n\n  *PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.*\n\n  - **dnsConfig.nameservers** (\\[\\]string)\n\n    A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.\n\n  - **dnsConfig.options** (\\[\\]PodDNSConfigOption)\n\n    A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.\n\n    *PodDNSConfigOption defines DNS resolver options of a pod.*\n\n    - **dnsConfig.options.name** (string)\n\n      Required.\n\n    - **dnsConfig.options.value** (string)\n\n  - **dnsConfig.searches** (\\[\\]string)\n\n    A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.\n\n- **dnsPolicy** (string)\n\n  Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n\n### Hosts namespaces\n\n- **hostNetwork** (boolean)\n\n  Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n\n- **hostPID** (boolean)\n\n  Use the host's pid namespace. Optional: Default to false.\n\n- **hostIPC** (boolean)\n\n  Use the host's ipc namespace. Optional: Default to false.\n\n- **shareProcessNamespace** (boolean)\n\n  Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.\n\n### Service account\n\n- **serviceAccountName** (string)\n\n  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/>\n\n- **automountServiceAccountToken** (boolean)\n\n  AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n\n### Security context\n\n- **securityContext** (PodSecurityContext)\n\n  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty. See type description for default values of each field.\n\n  *PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext. Field values of container.securityContext take precedence over field values of PodSecurityContext.*\n\n  - **securityContext.runAsUser** (int64)\n\n    The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.runAsNonRoot** (boolean)\n\n    Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n\n  - **securityContext.runAsGroup** (int64)\n\n    The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.supplementalGroups** (\\[\\]int64)\n\n    A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.fsGroup** (int64)\n\n    A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n    1.  The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\n    If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.fsGroupChangePolicy** (string)\n\n    fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.seccompProfile** (SeccompProfile)\n\n    The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.\n\n    *SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.*\n\n    - **securityContext.seccompProfile.type** (string), required\n\n      type indicates which kind of seccomp profile will be applied. Valid options are:\n\n      Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\n    - **securityContext.seccompProfile.localhostProfile** (string)\n\n      localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.\n\n  - **securityContext.seLinuxOptions** (SELinuxOptions)\n\n    The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.\n\n    *SELinuxOptions are the labels to be applied to the container*\n\n    - **securityContext.seLinuxOptions.level** (string)\n\n      Level is SELinux level label that applies to the container.\n\n    - **securityContext.seLinuxOptions.role** (string)\n\n      Role is a SELinux role label that applies to the container.\n\n    - **securityContext.seLinuxOptions.type** (string)\n\n      Type is a SELinux type label that applies to the container.\n\n    - **securityContext.seLinuxOptions.user** (string)\n\n      User is a SELinux user label that applies to the container.\n\n  - **securityContext.sysctls** (\\[\\]Sysctl)\n\n    Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.\n\n    *Sysctl defines a kernel parameter to be set*\n\n    - **securityContext.sysctls.name** (string), required\n\n      Name of a property to set\n\n    - **securityContext.sysctls.value** (string), required\n\n      Value of a property to set\n\n  - **securityContext.windowsOptions** (WindowsSecurityContextOptions)\n\n    The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.\n\n    *WindowsSecurityContextOptions contain Windows-specific options and credentials.*\n\n    - **securityContext.windowsOptions.gmsaCredentialSpec** (string)\n\n      GMSACredentialSpec is where the GMSA admission webhook (<https://github.com/kubernetes-sigs/windows-gmsa>) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.\n\n    - **securityContext.windowsOptions.gmsaCredentialSpecName** (string)\n\n      GMSACredentialSpecName is the name of the GMSA credential spec to use.\n\n    - **securityContext.windowsOptions.hostProcess** (boolean)\n\n      HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.\n\n    - **securityContext.windowsOptions.runAsUserName** (string)\n\n      The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n\n### Alpha level\n\n- **hostUsers** (boolean)\n\n  Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.\n\n- **resourceClaims** (\\[\\]PodResourceClaim)\n\n  *Patch strategies: retainKeys, merge on key `name`*\n\n  *Map: unique values on key name will be kept during a merge*\n\n  ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\n  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\n  This field is immutable.\n\n  *PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.*\n\n  - **resourceClaims.name** (string), required\n\n    Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.\n\n  - **resourceClaims.source** (ClaimSource)\n\n    Source describes where to find the ResourceClaim.\n\n    \\*ClaimSource describes a reference to a ResourceClaim.\n\n    Exactly one of these fields should be set. Consumers of this type must treat an empty object as if it has an unknown value.\\*\n\n    - **resourceClaims.source.resourceClaimName** (string)\n\n      ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.\n\n    - **resourceClaims.source.resourceClaimTemplateName** (string)\n\n      ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\n      The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\n      This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.\n\n- **schedulingGates** (\\[\\]PodSchedulingGate)\n\n  *Patch strategy: merge on key `name`*\n\n  *Map: unique values on key name will be kept during a merge*\n\n  SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\n  SchedulingGates can only be set at pod creation time, and be removed only afterwards.\n\n  This is a beta feature enabled by the PodSchedulingReadiness feature gate.\n\n  *PodSchedulingGate is associated to a Pod to guard its scheduling.*\n\n  - **schedulingGates.name** (string), required\n\n    Name of the scheduling gate. Each scheduling gate must have a unique name field.\n\n### Deprecated\n\n- **serviceAccount** (string)\n\n  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n\n## Container\n\nA single application container that you want to run within a pod.\n\n- **name** (string), required\n\n  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\n\n### Image\n\n- **image** (string)\n\n  Container image name. More info: <https://kubernetes.io/docs/concepts/containers/images> This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.\n\n- **imagePullPolicy** (string)\n\n  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>\n\n### Entrypoint\n\n- **command** (\\[\\]string)\n\n  Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>\n\n- **args** (\\[\\]string)\n\n  Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>\n\n- **workingDir** (string)\n\n  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n\n### Ports\n\n- **ports** (\\[\\]ContainerPort)\n\n  *Patch strategy: merge on key `containerPort`*\n\n  *Map: unique values on keys `containerPort, protocol` will be kept during a merge*\n\n  List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See <https://github.com/kubernetes/kubernetes/issues/108255>. Cannot be updated.\n\n  *ContainerPort represents a network port in a single container.*\n\n  - **ports.containerPort** (int32), required\n\n    Number of port to expose on the pod's IP address. This must be a valid port number, 0 \\< x \\< 65536.\n\n  - **ports.hostIP** (string)\n\n    What host IP to bind the external port to.\n\n  - **ports.hostPort** (int32)\n\n    Number of port to expose on the host. If specified, this must be a valid port number, 0 \\< x \\< 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n\n  - **ports.name** (string)\n\n    If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.\n\n  - **ports.protocol** (string)\n\n    Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\n### Environment variables\n\n- **env** (\\[\\]EnvVar)\n\n  *Patch strategy: merge on key `name`*\n\n  List of environment variables to set in the container. Cannot be updated.\n\n  *EnvVar represents an environment variable present in a Container.*\n\n  - **env.name** (string), required\n\n    Name of the environment variable. Must be a C_IDENTIFIER.\n\n  - **env.value** (string)\n\n    Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n\n  - **env.valueFrom** (EnvVarSource)\n\n    Source for the environment variable's value. Cannot be used if value is not empty.\n\n    *EnvVarSource represents a source for the value of an EnvVar.*\n\n    - **env.valueFrom.configMapKeyRef** (ConfigMapKeySelector)\n\n      Selects a key of a ConfigMap.\n\n      *Selects a key from a ConfigMap.*\n\n      - **env.valueFrom.configMapKeyRef.key** (string), required\n\n        The key to select.\n\n      - **env.valueFrom.configMapKeyRef.name** (string)\n\n        Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **env.valueFrom.configMapKeyRef.optional** (boolean)\n\n        Specify whether the ConfigMap or its key must be defined\n\n    - **env.valueFrom.fieldRef** ([ObjectFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/#ObjectFieldSelector))\n\n      Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\\<KEY>']`, `metadata.annotations['\\<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n\n    - **env.valueFrom.resourceFieldRef** ([ResourceFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/#ResourceFieldSelector))\n\n      Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n\n    - **env.valueFrom.secretKeyRef** (SecretKeySelector)\n\n      Selects a key of a secret in the pod's namespace\n\n      *SecretKeySelector selects a key of a Secret.*\n\n      - **env.valueFrom.secretKeyRef.key** (string), required\n\n        The key of the secret to select from. Must be a valid secret key.\n\n      - **env.valueFrom.secretKeyRef.name** (string)\n\n        Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **env.valueFrom.secretKeyRef.optional** (boolean)\n\n        Specify whether the Secret or its key must be defined\n\n- **envFrom** (\\[\\]EnvFromSource)\n\n  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n\n  *EnvFromSource represents the source of a set of ConfigMaps*\n\n  - **envFrom.configMapRef** (ConfigMapEnvSource)\n\n    The ConfigMap to select from\n\n    \\*ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\n    The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\\*\n\n    - **envFrom.configMapRef.name** (string)\n\n      Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n    - **envFrom.configMapRef.optional** (boolean)\n\n      Specify whether the ConfigMap must be defined\n\n  - **envFrom.prefix** (string)\n\n    An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n\n  - **envFrom.secretRef** (SecretEnvSource)\n\n    The Secret to select from\n\n    \\*SecretEnvSource selects a Secret to populate the environment variables with.\n\n    The contents of the target Secret's Data field will represent the key-value pairs as environment variables.\\*\n\n    - **envFrom.secretRef.name** (string)\n\n      Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n    - **envFrom.secretRef.optional** (boolean)\n\n      Specify whether the Secret must be defined\n\n### Volumes\n\n- **volumeMounts** (\\[\\]VolumeMount)\n\n  *Patch strategy: merge on key `mountPath`*\n\n  Pod volumes to mount into the container's filesystem. Cannot be updated.\n\n  *VolumeMount describes a mounting of a Volume within a container.*\n\n  - **volumeMounts.mountPath** (string), required\n\n    Path within the container at which the volume should be mounted. Must not contain ':'.\n\n  - **volumeMounts.name** (string), required\n\n    This must match the Name of a Volume.\n\n  - **volumeMounts.mountPropagation** (string)\n\n    mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.\n\n  - **volumeMounts.readOnly** (boolean)\n\n    Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n\n  - **volumeMounts.subPath** (string)\n\n    Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n\n  - **volumeMounts.subPathExpr** (string)\n\n    Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.\n\n- **volumeDevices** (\\[\\]VolumeDevice)\n\n  *Patch strategy: merge on key `devicePath`*\n\n  volumeDevices is the list of block devices to be used by the container.\n\n  *volumeDevice describes a mapping of a raw block device within a container.*\n\n  - **volumeDevices.devicePath** (string), required\n\n    devicePath is the path inside of the container that the device will be mapped to.\n\n  - **volumeDevices.name** (string), required\n\n    name must match the name of a persistentVolumeClaim in the pod\n\n### Resources\n\n- **resources** (ResourceRequirements)\n\n  Compute Resources required by this container. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n  *ResourceRequirements describes the compute resource requirements.*\n\n  - **resources.claims** (\\[\\]ResourceClaim)\n\n    *Map: unique values on key name will be kept during a merge*\n\n    Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\n    This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\n    This field is immutable. It can only be set for containers.\n\n    *ResourceClaim references one entry in PodSpec.ResourceClaims.*\n\n    - **resources.claims.name** (string), required\n\n      Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.\n\n  - **resources.limits** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Limits describes the maximum amount of compute resources allowed. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n  - **resources.requests** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n- **resizePolicy** (\\[\\]ContainerResizePolicy)\n\n  *Atomic: will be replaced during a merge*\n\n  Resources resize policy for the container.\n\n  *ContainerResizePolicy represents resource resize policy for the container.*\n\n  - **resizePolicy.resourceName** (string), required\n\n    Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.\n\n  - **resizePolicy.restartPolicy** (string), required\n\n    Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.\n\n### Lifecycle\n\n- **lifecycle** (Lifecycle)\n\n  Actions that the management system should take in response to container lifecycle events. Cannot be updated.\n\n  *Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.*\n\n  - **lifecycle.postStart** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))\n\n    PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>\n\n  - **lifecycle.preStop** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))\n\n    PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>\n\n- **terminationMessagePath** (string)\n\n  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.\n\n- **terminationMessagePolicy** (string)\n\n  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\n- **livenessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))\n\n  Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>\n\n- **readinessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))\n\n  Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>\n\n- **startupProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))\n\n  StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>\n\n- **restartPolicy** (string)\n\n  RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.\n\n### Security Context\n\n- **securityContext** (SecurityContext)\n\n  SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/>\n\n  *SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.*\n\n  - **securityContext.runAsUser** (int64)\n\n    The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.runAsNonRoot** (boolean)\n\n    Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n\n  - **securityContext.runAsGroup** (int64)\n\n    The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.readOnlyRootFilesystem** (boolean)\n\n    Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.procMount** (string)\n\n    procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.privileged** (boolean)\n\n    Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.allowPrivilegeEscalation** (boolean)\n\n    AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.capabilities** (Capabilities)\n\n    The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.\n\n    *Adds and removes POSIX capabilities from running containers.*\n\n    - **securityContext.capabilities.add** (\\[\\]string)\n\n      Added capabilities\n\n    - **securityContext.capabilities.drop** (\\[\\]string)\n\n      Removed capabilities\n\n  - **securityContext.seccompProfile** (SeccompProfile)\n\n    The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.\n\n    *SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.*\n\n    - **securityContext.seccompProfile.type** (string), required\n\n      type indicates which kind of seccomp profile will be applied. Valid options are:\n\n      Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\n    - **securityContext.seccompProfile.localhostProfile** (string)\n\n      localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.\n\n  - **securityContext.seLinuxOptions** (SELinuxOptions)\n\n    The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.\n\n    *SELinuxOptions are the labels to be applied to the container*\n\n    - **securityContext.seLinuxOptions.level** (string)\n\n      Level is SELinux level label that applies to the container.\n\n    - **securityContext.seLinuxOptions.role** (string)\n\n      Role is a SELinux role label that applies to the container.\n\n    - **securityContext.seLinuxOptions.type** (string)\n\n      Type is a SELinux type label that applies to the container.\n\n    - **securityContext.seLinuxOptions.user** (string)\n\n      User is a SELinux user label that applies to the container.\n\n  - **securityContext.windowsOptions** (WindowsSecurityContextOptions)\n\n    The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.\n\n    *WindowsSecurityContextOptions contain Windows-specific options and credentials.*\n\n    - **securityContext.windowsOptions.gmsaCredentialSpec** (string)\n\n      GMSACredentialSpec is where the GMSA admission webhook (<https://github.com/kubernetes-sigs/windows-gmsa>) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.\n\n    - **securityContext.windowsOptions.gmsaCredentialSpecName** (string)\n\n      GMSACredentialSpecName is the name of the GMSA credential spec to use.\n\n    - **securityContext.windowsOptions.hostProcess** (boolean)\n\n      HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.\n\n    - **securityContext.windowsOptions.runAsUserName** (string)\n\n      The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n\n### Debugging\n\n- **stdin** (boolean)\n\n  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.\n\n- **stdinOnce** (boolean)\n\n  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false\n\n- **tty** (boolean)\n\n  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.\n\n## EphemeralContainer\n\nAn EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.\n\n- **name** (string), required\n\n  Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.\n\n- **targetContainerName** (string)\n\n  If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\n  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.\n\n### Image\n\n- **image** (string)\n\n  Container image name. More info: <https://kubernetes.io/docs/concepts/containers/images>\n\n- **imagePullPolicy** (string)\n\n  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>\n\n### Entrypoint\n\n- **command** (\\[\\]string)\n\n  Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>\n\n- **args** (\\[\\]string)\n\n  Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>\n\n- **workingDir** (string)\n\n  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n\n### Environment variables\n\n- **env** (\\[\\]EnvVar)\n\n  *Patch strategy: merge on key `name`*\n\n  List of environment variables to set in the container. Cannot be updated.\n\n  *EnvVar represents an environment variable present in a Container.*\n\n  - **env.name** (string), required\n\n    Name of the environment variable. Must be a C_IDENTIFIER.\n\n  - **env.value** (string)\n\n    Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n\n  - **env.valueFrom** (EnvVarSource)\n\n    Source for the environment variable's value. Cannot be used if value is not empty.\n\n    *EnvVarSource represents a source for the value of an EnvVar.*\n\n    - **env.valueFrom.configMapKeyRef** (ConfigMapKeySelector)\n\n      Selects a key of a ConfigMap.\n\n      *Selects a key from a ConfigMap.*\n\n      - **env.valueFrom.configMapKeyRef.key** (string), required\n\n        The key to select.\n\n      - **env.valueFrom.configMapKeyRef.name** (string)\n\n        Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **env.valueFrom.configMapKeyRef.optional** (boolean)\n\n        Specify whether the ConfigMap or its key must be defined\n\n    - **env.valueFrom.fieldRef** ([ObjectFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/#ObjectFieldSelector))\n\n      Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\\<KEY>']`, `metadata.annotations['\\<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n\n    - **env.valueFrom.resourceFieldRef** ([ResourceFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/#ResourceFieldSelector))\n\n      Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n\n    - **env.valueFrom.secretKeyRef** (SecretKeySelector)\n\n      Selects a key of a secret in the pod's namespace\n\n      *SecretKeySelector selects a key of a Secret.*\n\n      - **env.valueFrom.secretKeyRef.key** (string), required\n\n        The key of the secret to select from. Must be a valid secret key.\n\n      - **env.valueFrom.secretKeyRef.name** (string)\n\n        Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **env.valueFrom.secretKeyRef.optional** (boolean)\n\n        Specify whether the Secret or its key must be defined\n\n- **envFrom** (\\[\\]EnvFromSource)\n\n  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n\n  *EnvFromSource represents the source of a set of ConfigMaps*\n\n  - **envFrom.configMapRef** (ConfigMapEnvSource)\n\n    The ConfigMap to select from\n\n    \\*ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\n    The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\\*\n\n    - **envFrom.configMapRef.name** (string)\n\n      Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n    - **envFrom.configMapRef.optional** (boolean)\n\n      Specify whether the ConfigMap must be defined\n\n  - **envFrom.prefix** (string)\n\n    An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n\n  - **envFrom.secretRef** (SecretEnvSource)\n\n    The Secret to select from\n\n    \\*SecretEnvSource selects a Secret to populate the environment variables with.\n\n    The contents of the target Secret's Data field will represent the key-value pairs as environment variables.\\*\n\n    - **envFrom.secretRef.name** (string)\n\n      Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n    - **envFrom.secretRef.optional** (boolean)\n\n      Specify whether the Secret must be defined\n\n### Volumes\n\n- **volumeMounts** (\\[\\]VolumeMount)\n\n  *Patch strategy: merge on key `mountPath`*\n\n  Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.\n\n  *VolumeMount describes a mounting of a Volume within a container.*\n\n  - **volumeMounts.mountPath** (string), required\n\n    Path within the container at which the volume should be mounted. Must not contain ':'.\n\n  - **volumeMounts.name** (string), required\n\n    This must match the Name of a Volume.\n\n  - **volumeMounts.mountPropagation** (string)\n\n    mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.\n\n  - **volumeMounts.readOnly** (boolean)\n\n    Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n\n  - **volumeMounts.subPath** (string)\n\n    Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n\n  - **volumeMounts.subPathExpr** (string)\n\n    Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.\n\n- **volumeDevices** (\\[\\]VolumeDevice)\n\n  *Patch strategy: merge on key `devicePath`*\n\n  volumeDevices is the list of block devices to be used by the container.\n\n  *volumeDevice describes a mapping of a raw block device within a container.*\n\n  - **volumeDevices.devicePath** (string), required\n\n    devicePath is the path inside of the container that the device will be mapped to.\n\n  - **volumeDevices.name** (string), required\n\n    name must match the name of a persistentVolumeClaim in the pod\n\n### Resources\n\n- **resizePolicy** (\\[\\]ContainerResizePolicy)\n\n  *Atomic: will be replaced during a merge*\n\n  Resources resize policy for the container.\n\n  *ContainerResizePolicy represents resource resize policy for the container.*\n\n  - **resizePolicy.resourceName** (string), required\n\n    Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.\n\n  - **resizePolicy.restartPolicy** (string), required\n\n    Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.\n\n### Lifecycle\n\n- **terminationMessagePath** (string)\n\n  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.\n\n- **terminationMessagePolicy** (string)\n\n  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\n- **restartPolicy** (string)\n\n  Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.\n\n### Debugging\n\n- **stdin** (boolean)\n\n  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.\n\n- **stdinOnce** (boolean)\n\n  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false\n\n- **tty** (boolean)\n\n  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.\n\n### Security context\n\n- **securityContext** (SecurityContext)\n\n  Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\n\n  *SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.*\n\n  - **securityContext.runAsUser** (int64)\n\n    The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.runAsNonRoot** (boolean)\n\n    Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n\n  - **securityContext.runAsGroup** (int64)\n\n    The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.readOnlyRootFilesystem** (boolean)\n\n    Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.procMount** (string)\n\n    procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.privileged** (boolean)\n\n    Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.allowPrivilegeEscalation** (boolean)\n\n    AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.\n\n  - **securityContext.capabilities** (Capabilities)\n\n    The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.\n\n    *Adds and removes POSIX capabilities from running containers.*\n\n    - **securityContext.capabilities.add** (\\[\\]string)\n\n      Added capabilities\n\n    - **securityContext.capabilities.drop** (\\[\\]string)\n\n      Removed capabilities\n\n  - **securityContext.seccompProfile** (SeccompProfile)\n\n    The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.\n\n    *SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.*\n\n    - **securityContext.seccompProfile.type** (string), required\n\n      type indicates which kind of seccomp profile will be applied. Valid options are:\n\n      Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\n    - **securityContext.seccompProfile.localhostProfile** (string)\n\n      localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.\n\n  - **securityContext.seLinuxOptions** (SELinuxOptions)\n\n    The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.\n\n    *SELinuxOptions are the labels to be applied to the container*\n\n    - **securityContext.seLinuxOptions.level** (string)\n\n      Level is SELinux level label that applies to the container.\n\n    - **securityContext.seLinuxOptions.role** (string)\n\n      Role is a SELinux role label that applies to the container.\n\n    - **securityContext.seLinuxOptions.type** (string)\n\n      Type is a SELinux type label that applies to the container.\n\n    - **securityContext.seLinuxOptions.user** (string)\n\n      User is a SELinux user label that applies to the container.\n\n  - **securityContext.windowsOptions** (WindowsSecurityContextOptions)\n\n    The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.\n\n    *WindowsSecurityContextOptions contain Windows-specific options and credentials.*\n\n    - **securityContext.windowsOptions.gmsaCredentialSpec** (string)\n\n      GMSACredentialSpec is where the GMSA admission webhook (<https://github.com/kubernetes-sigs/windows-gmsa>) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.\n\n    - **securityContext.windowsOptions.gmsaCredentialSpecName** (string)\n\n      GMSACredentialSpecName is the name of the GMSA credential spec to use.\n\n    - **securityContext.windowsOptions.hostProcess** (boolean)\n\n      HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.\n\n    - **securityContext.windowsOptions.runAsUserName** (string)\n\n      The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n\n### Not allowed\n\n- **ports** (\\[\\]ContainerPort)\n\n  *Patch strategy: merge on key `containerPort`*\n\n  *Map: unique values on keys `containerPort, protocol` will be kept during a merge*\n\n  Ports are not allowed for ephemeral containers.\n\n  *ContainerPort represents a network port in a single container.*\n\n  - **ports.containerPort** (int32), required\n\n    Number of port to expose on the pod's IP address. This must be a valid port number, 0 \\< x \\< 65536.\n\n  - **ports.hostIP** (string)\n\n    What host IP to bind the external port to.\n\n  - **ports.hostPort** (int32)\n\n    Number of port to expose on the host. If specified, this must be a valid port number, 0 \\< x \\< 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n\n  - **ports.name** (string)\n\n    If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.\n\n  - **ports.protocol** (string)\n\n    Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\n- **resources** (ResourceRequirements)\n\n  Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.\n\n  *ResourceRequirements describes the compute resource requirements.*\n\n  - **resources.claims** (\\[\\]ResourceClaim)\n\n    *Map: unique values on key name will be kept during a merge*\n\n    Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\n    This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\n    This field is immutable. It can only be set for containers.\n\n    *ResourceClaim references one entry in PodSpec.ResourceClaims.*\n\n    - **resources.claims.name** (string), required\n\n      Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.\n\n  - **resources.limits** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Limits describes the maximum amount of compute resources allowed. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n  - **resources.requests** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>\n\n- **lifecycle** (Lifecycle)\n\n  Lifecycle is not allowed for ephemeral containers.\n\n  *Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.*\n\n  - **lifecycle.postStart** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))\n\n    PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>\n\n  - **lifecycle.preStop** ([LifecycleHandler](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#LifecycleHandler))\n\n    PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>\n\n- **livenessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))\n\n  Probes are not allowed for ephemeral containers.\n\n- **readinessProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))\n\n  Probes are not allowed for ephemeral containers.\n\n- **startupProbe** ([Probe](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe))\n\n  Probes are not allowed for ephemeral containers.\n\n## LifecycleHandler\n\nLifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.\n\n- **exec** (ExecAction)\n\n  Exec specifies the action to take.\n\n  *ExecAction describes a \"run in container\" action.*\n\n  - **exec.command** (\\[\\]string)\n\n    Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('\\|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n\n- **httpGet** (HTTPGetAction)\n\n  HTTPGet specifies the http request to perform.\n\n  *HTTPGetAction describes an action based on HTTP Get requests.*\n\n  - **httpGet.port** (IntOrString), required\n\n    Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n\n    *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n  - **httpGet.host** (string)\n\n    Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n\n  - **httpGet.httpHeaders** (\\[\\]HTTPHeader)\n\n    Custom headers to set in the request. HTTP allows repeated headers.\n\n    *HTTPHeader describes a custom header to be used in HTTP probes*\n\n    - **httpGet.httpHeaders.name** (string), required\n\n      The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.\n\n    - **httpGet.httpHeaders.value** (string), required\n\n      The header field value\n\n  - **httpGet.path** (string)\n\n    Path to access on the HTTP server.\n\n  - **httpGet.scheme** (string)\n\n    Scheme to use for connecting to the host. Defaults to HTTP.\n\n- **tcpSocket** (TCPSocketAction)\n\n  Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.\n\n  *TCPSocketAction describes an action based on opening a socket*\n\n  - **tcpSocket.port** (IntOrString), required\n\n    Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n\n    *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n  - **tcpSocket.host** (string)\n\n    Optional: Host name to connect to, defaults to the pod IP.\n\n## NodeAffinity\n\nNode affinity is a group of node affinity scheduling rules.\n\n- **preferredDuringSchedulingIgnoredDuringExecution** (\\[\\]PreferredSchedulingTerm)\n\n  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n\n  *An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).*\n\n  - **preferredDuringSchedulingIgnoredDuringExecution.preference** (NodeSelectorTerm), required\n\n    A node selector term, associated with the corresponding weight.\n\n    *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's labels.\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's fields.\n\n  - **preferredDuringSchedulingIgnoredDuringExecution.weight** (int32), required\n\n    Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\n\n- **requiredDuringSchedulingIgnoredDuringExecution** (NodeSelector)\n\n  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n\n  *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms** (\\[\\]NodeSelectorTerm), required\n\n    Required. A list of node selector terms. The terms are ORed.\n\n    *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*\n\n    - **requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's labels.\n\n    - **requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's fields.\n\n## PodAffinity\n\nPod affinity is a group of inter pod affinity scheduling rules.\n\n- **preferredDuringSchedulingIgnoredDuringExecution** (\\[\\]WeightedPodAffinityTerm)\n\n  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n\n  *The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)*\n\n  - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm** (PodAffinityTerm), required\n\n    Required. A pod affinity term, associated with the corresponding weight.\n\n    *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey** (string), required\n\n      This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      A label query over a set of resources, in this case pods.\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaces** (\\[\\]string)\n\n      namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n\n  - **preferredDuringSchedulingIgnoredDuringExecution.weight** (int32), required\n\n    weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\n\n- **requiredDuringSchedulingIgnoredDuringExecution** (\\[\\]PodAffinityTerm)\n\n  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n\n  *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.topologyKey** (string), required\n\n    This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    A label query over a set of resources, in this case pods.\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.namespaces** (\\[\\]string)\n\n    namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n\n## PodAntiAffinity\n\nPod anti affinity is a group of inter pod anti affinity scheduling rules.\n\n- **preferredDuringSchedulingIgnoredDuringExecution** (\\[\\]WeightedPodAffinityTerm)\n\n  The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n\n  *The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)*\n\n  - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm** (PodAffinityTerm), required\n\n    Required. A pod affinity term, associated with the corresponding weight.\n\n    *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey** (string), required\n\n      This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      A label query over a set of resources, in this case pods.\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.\n\n    - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaces** (\\[\\]string)\n\n      namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n\n  - **preferredDuringSchedulingIgnoredDuringExecution.weight** (int32), required\n\n    weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\n\n- **requiredDuringSchedulingIgnoredDuringExecution** (\\[\\]PodAffinityTerm)\n\n  If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n\n  *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.topologyKey** (string), required\n\n    This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    A label query over a set of resources, in this case pods.\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.\n\n  - **requiredDuringSchedulingIgnoredDuringExecution.namespaces** (\\[\\]string)\n\n    namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n\n## Probe\n\nProbe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.\n\n- **exec** (ExecAction)\n\n  Exec specifies the action to take.\n\n  *ExecAction describes a \"run in container\" action.*\n\n  - **exec.command** (\\[\\]string)\n\n    Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('\\|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n\n- **httpGet** (HTTPGetAction)\n\n  HTTPGet specifies the http request to perform.\n\n  *HTTPGetAction describes an action based on HTTP Get requests.*\n\n  - **httpGet.port** (IntOrString), required\n\n    Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n\n    *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n  - **httpGet.host** (string)\n\n    Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n\n  - **httpGet.httpHeaders** (\\[\\]HTTPHeader)\n\n    Custom headers to set in the request. HTTP allows repeated headers.\n\n    *HTTPHeader describes a custom header to be used in HTTP probes*\n\n    - **httpGet.httpHeaders.name** (string), required\n\n      The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.\n\n    - **httpGet.httpHeaders.value** (string), required\n\n      The header field value\n\n  - **httpGet.path** (string)\n\n    Path to access on the HTTP server.\n\n  - **httpGet.scheme** (string)\n\n    Scheme to use for connecting to the host. Defaults to HTTP.\n\n- **tcpSocket** (TCPSocketAction)\n\n  TCPSocket specifies an action involving a TCP port.\n\n  *TCPSocketAction describes an action based on opening a socket*\n\n  - **tcpSocket.port** (IntOrString), required\n\n    Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n\n    *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n  - **tcpSocket.host** (string)\n\n    Optional: Host name to connect to, defaults to the pod IP.\n\n- **initialDelaySeconds** (int32)\n\n  Number of seconds after the container has started before liveness probes are initiated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>\n\n- **terminationGracePeriodSeconds** (int64)\n\n  Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n\n- **periodSeconds** (int32)\n\n  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.\n\n- **timeoutSeconds** (int32)\n\n  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>\n\n- **failureThreshold** (int32)\n\n  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.\n\n- **successThreshold** (int32)\n\n  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n\n- **grpc** (GRPCAction)\n\n  GRPC specifies an action involving a GRPC port.\n\n  \\*\\*\n\n  - **grpc.port** (int32), required\n\n    Port number of the gRPC service. Number must be in the range 1 to 65535.\n\n  - **grpc.service** (string)\n\n    Service is the name of the service to place in the gRPC HealthCheckRequest (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md)>.\n\n    If this is not specified, the default behavior is defined by gRPC.\n\n## PodStatus\n\nPodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.\n\n- **nominatedNodeName** (string)\n\n  nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.\n\n- **hostIP** (string)\n\n  hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod\n\n- **hostIPs** (\\[\\]HostIP)\n\n  *Patch strategy: merge on key `ip`*\n\n  *Atomic: will be replaced during a merge*\n\n  hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.\n\n  *HostIP represents a single IP address allocated to the host.*\n\n  - **hostIPs.ip** (string)\n\n    IP is the IP address assigned to the host\n\n- **startTime** (Time)\n\n  RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **phase** (string)\n\n  The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\n  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\n  More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase>\n\n- **message** (string)\n\n  A human readable message indicating details about why the pod is in this condition.\n\n- **reason** (string)\n\n  A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'\n\n- **podIP** (string)\n\n  podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.\n\n- **podIPs** (\\[\\]PodIP)\n\n  *Patch strategy: merge on key `ip`*\n\n  podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.\n\n  *PodIP represents a single IP address allocated to the pod.*\n\n  - **podIPs.ip** (string)\n\n    IP is the IP address assigned to the pod\n\n- **conditions** (\\[\\]PodCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Current service state of pod. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions>\n\n  *PodCondition contains details for the current condition of this pod.*\n\n  - **conditions.status** (string), required\n\n    Status is the status of the condition. Can be True, False, Unknown. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions>\n\n  - **conditions.type** (string), required\n\n    Type is the type of the condition. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions>\n\n  - **conditions.lastProbeTime** (Time)\n\n    Last time we probed the condition.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    Unique, one-word, CamelCase reason for the condition's last transition.\n\n- **qosClass** (string)\n\n  The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes>\n\n- **initContainerStatuses** (\\[\\]ContainerStatus)\n\n  The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status>\n\n  *ContainerStatus contains details for the current status of this container.*\n\n- **containerStatuses** (\\[\\]ContainerStatus)\n\n  The list has one entry per container in the manifest. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status>\n\n  *ContainerStatus contains details for the current status of this container.*\n\n- **ephemeralContainerStatuses** (\\[\\]ContainerStatus)\n\n  Status for any ephemeral containers that have run in this pod.\n\n  *ContainerStatus contains details for the current status of this container.*\n\n- **resourceClaimStatuses** (\\[\\]PodResourceClaimStatus)\n\n  *Patch strategies: retainKeys, merge on key `name`*\n\n  *Map: unique values on key name will be kept during a merge*\n\n  Status of resource claims.\n\n  *PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.*\n\n  - **resourceClaimStatuses.name** (string), required\n\n    Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.\n\n  - **resourceClaimStatuses.resourceClaimName** (string)\n\n    ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. It this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.\n\n- **resize** (string)\n\n  Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\"\n\n## PodList\n\nPodList is a list of Pods.\n\n- **items** (\\[\\][Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Pod)), required\n\n  List of pods. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md>\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/)"
- name: Pod.Affinity
  id: workload-resources/pod-v1/index#PodAffinity
  summary: Pod affinity is a group of inter pod affinity scheduling rules
  belongs_to: Pod
  description: |-
    ## PodAffinity

    Pod affinity is a group of inter pod affinity scheduling rules.

    - **preferredDuringSchedulingIgnoredDuringExecution** (\[\]WeightedPodAffinityTerm)

      The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.

      *The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)*

      - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm** (PodAffinityTerm), required

        Required. A pod affinity term, associated with the corresponding weight.

        *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey** (string), required

          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

          A label query over a set of resources, in this case pods.

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

          A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaces** (\[\]string)

          namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".

      - **preferredDuringSchedulingIgnoredDuringExecution.weight** (int32), required

        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.

    - **requiredDuringSchedulingIgnoredDuringExecution** (\[\]PodAffinityTerm)

      If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.

      *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*

      - **requiredDuringSchedulingIgnoredDuringExecution.topologyKey** (string), required

        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.

      - **requiredDuringSchedulingIgnoredDuringExecution.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

        A label query over a set of resources, in this case pods.

      - **requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.

      - **requiredDuringSchedulingIgnoredDuringExecution.namespaces** (\[\]string)

        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".

    &nbsp;
- name: Pod.AntiAffinity
  id: workload-resources/pod-v1/index#PodAntiAffinity
  summary: Pod anti affinity is a group of inter pod anti affinity scheduling rules
  belongs_to: Pod
  description: |-
    ## PodAntiAffinity

    Pod anti affinity is a group of inter pod anti affinity scheduling rules.

    - **preferredDuringSchedulingIgnoredDuringExecution** (\[\]WeightedPodAffinityTerm)

      The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.

      *The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)*

      - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm** (PodAffinityTerm), required

        Required. A pod affinity term, associated with the corresponding weight.

        *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey** (string), required

          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

          A label query over a set of resources, in this case pods.

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

          A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.

        - **preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaces** (\[\]string)

          namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".

      - **preferredDuringSchedulingIgnoredDuringExecution.weight** (int32), required

        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.

    - **requiredDuringSchedulingIgnoredDuringExecution** (\[\]PodAffinityTerm)

      If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.

      *Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running*

      - **requiredDuringSchedulingIgnoredDuringExecution.topologyKey** (string), required

        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.

      - **requiredDuringSchedulingIgnoredDuringExecution.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

        A label query over a set of resources, in this case pods.

      - **requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.

      - **requiredDuringSchedulingIgnoredDuringExecution.namespaces** (\[\]string)

        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".

    &nbsp;
- name: Pod.Spec
  id: workload-resources/pod-v1/index#PodSpec
  summary: PodSpec is a description of a pod
  belongs_to: Pod
  description: |-
    ## PodSpec

    PodSpec is a description of a pod.

    ### Containers

    - **containers** (\[\][Container](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container)), required

      *Patch strategy: merge on key `name`*

      List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.

    - **initContainers** (\[\][Container](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container))

      *Patch strategy: merge on key `name`*

      List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>

    - **ephemeralContainers** (\[\][EphemeralContainer](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#EphemeralContainer))

      *Patch strategy: merge on key `name`*

      List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.

    - **imagePullSecrets** (\[\][LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))

      *Patch strategy: merge on key `name`*

      ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: <https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod>

    - **enableServiceLinks** (boolean)

      EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.

    - **os** (PodOS)

      Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.

      If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions

      If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers\[*\].securityContext.seLinuxOptions - spec.containers\[*\].securityContext.seccompProfile - spec.containers\[*\].securityContext.capabilities - spec.containers\[*\].securityContext.readOnlyRootFilesystem - spec.containers\[*\].securityContext.privileged - spec.containers\[*\].securityContext.allowPrivilegeEscalation - spec.containers\[*\].securityContext.procMount - spec.containers\[*\].securityContext.runAsUser - spec.containers\[\*\].securityContext.runAsGroup

      *PodOS defines the OS parameters of a pod.*

      - **os.name** (string), required

        Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: <https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration> Clients should expect to handle additional values and treat unrecognized values in this field as os: null

    ### Volumes

    - **volumes** (\[\][Volume](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#Volume))

      *Patch strategies: retainKeys, merge on key `name`*

      List of volumes that can be mounted by containers belonging to the pod. More info: <https://kubernetes.io/docs/concepts/storage/volumes>

    ### Scheduling

    - **nodeSelector** (map\[string\]string)

      NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: <https://kubernetes.io/docs/concepts/configuration/assign-pod-node/>

    - **nodeName** (string)

      NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.

    - **affinity** (Affinity)

      If specified, the pod's scheduling constraints

      *Affinity is a group of affinity scheduling rules.*

      - **affinity.nodeAffinity** ([NodeAffinity](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#NodeAffinity))

        Describes node affinity scheduling rules for the pod.

      - **affinity.podAffinity** ([PodAffinity](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity))

        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

      - **affinity.podAntiAffinity** ([PodAntiAffinity](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAntiAffinity))

        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    - **tolerations** (\[\]Toleration)

      If specified, the pod's tolerations.

      *The pod this Toleration is attached to tolerates any taint that matches the triple \<key,value,effect\> using the matching operator .*

      - **tolerations.key** (string)

        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.

      - **tolerations.operator** (string)

        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.

      - **tolerations.value** (string)

        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.

      - **tolerations.effect** (string)

        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.

      - **tolerations.tolerationSeconds** (int64)

        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.

    - **schedulerName** (string)

      If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.

    - **runtimeClassName** (string)

      RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: <https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class>

    - **priorityClassName** (string)

      If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.

    - **priority** (int32)

      The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.

    - **preemptionPolicy** (string)

      PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.

    - **topologySpreadConstraints** (\[\]TopologySpreadConstraint)

      *Patch strategy: merge on key `topologyKey`*

      *Map: unique values on keys `topologyKey, whenUnsatisfiable` will be kept during a merge*

      TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.

      *TopologySpreadConstraint specifies how to spread matching pods among the given topology.*

      - **topologySpreadConstraints.maxSkew** (int32), required

        MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. \| zone1 \| zone2 \| zone3 \| \| P P \| P P \| P \| - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.

      - **topologySpreadConstraints.topologyKey** (string), required

        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \<key, value\> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.

      - **topologySpreadConstraints.whenUnsatisfiable** (string), required

        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: \| zone1 \| zone2 \| zone3 \| \| P P P \| P \| P \| If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.

      - **topologySpreadConstraints.labelSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

        LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.

      - **topologySpreadConstraints.matchLabelKeys** (\[\]string)

        *Atomic: will be replaced during a merge*

        MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.

        This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).

      - **topologySpreadConstraints.minDomains** (int32)

        MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

        For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: \| zone1 \| zone2 \| zone3 \| \| P P \| P P \| P P \| The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.

        This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).

      - **topologySpreadConstraints.nodeAffinityPolicy** (string)

        NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

        If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.

      - **topologySpreadConstraints.nodeTaintsPolicy** (string)

        NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.

        If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.

    - **overhead** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

      Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: <https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md>

    ### Lifecycle

    - **restartPolicy** (string)

      Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy>

    - **terminationGracePeriodSeconds** (int64)

      Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.

    - **activeDeadlineSeconds** (int64)

      Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.

    - **readinessGates** (\[\]PodReadinessGate)

      If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: <https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates>

      *PodReadinessGate contains the reference to a pod condition*

      - **readinessGates.conditionType** (string), required

        ConditionType refers to a condition in the pod's condition list with matching type.

    ### Hostname and Name resolution

    - **hostname** (string)

      Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.

    - **setHostnameAsFQDN** (boolean)

      If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.

    - **subdomain** (string)

      If specified, the fully qualified Pod hostname will be "\<hostname\>.\<subdomain\>.\<pod namespace\>.svc.\<cluster domain\>". If not specified, the pod will not have a domainname at all.

    - **hostAliases** (\[\]HostAlias)

      *Patch strategy: merge on key `ip`*

      HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.

      *HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.*

      - **hostAliases.hostnames** (\[\]string)

        Hostnames for the above IP address.

      - **hostAliases.ip** (string)

        IP address of the host file entry.

    - **dnsConfig** (PodDNSConfig)

      Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.

      *PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.*

      - **dnsConfig.nameservers** (\[\]string)

        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.

      - **dnsConfig.options** (\[\]PodDNSConfigOption)

        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.

        *PodDNSConfigOption defines DNS resolver options of a pod.*

        - **dnsConfig.options.name** (string)

          Required.

        - **dnsConfig.options.value** (string)

      - **dnsConfig.searches** (\[\]string)

        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.

    - **dnsPolicy** (string)

      Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.

    ### Hosts namespaces

    - **hostNetwork** (boolean)

      Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.

    - **hostPID** (boolean)

      Use the host's pid namespace. Optional: Default to false.

    - **hostIPC** (boolean)

      Use the host's ipc namespace. Optional: Default to false.

    - **shareProcessNamespace** (boolean)

      Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.

    ### Service account

    - **serviceAccountName** (string)

      ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/>

    - **automountServiceAccountToken** (boolean)

      AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.

    ### Security context

    - **securityContext** (PodSecurityContext)

      SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty. See type description for default values of each field.

      *PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext. Field values of container.securityContext take precedence over field values of PodSecurityContext.*

      - **securityContext.runAsUser** (int64)

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.runAsNonRoot** (boolean)

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

      - **securityContext.runAsGroup** (int64)

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.supplementalGroups** (\[\]int64)

        A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.fsGroup** (int64)

        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:

        1.  The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.fsGroupChangePolicy** (string)

        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.

      - **securityContext.seccompProfile** (SeccompProfile)

        The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.

        *SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.*

        - **securityContext.seccompProfile.type** (string), required

          type indicates which kind of seccomp profile will be applied. Valid options are:

          Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

        - **securityContext.seccompProfile.localhostProfile** (string)

          localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.

      - **securityContext.seLinuxOptions** (SELinuxOptions)

        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.

        *SELinuxOptions are the labels to be applied to the container*

        - **securityContext.seLinuxOptions.level** (string)

          Level is SELinux level label that applies to the container.

        - **securityContext.seLinuxOptions.role** (string)

          Role is a SELinux role label that applies to the container.

        - **securityContext.seLinuxOptions.type** (string)

          Type is a SELinux type label that applies to the container.

        - **securityContext.seLinuxOptions.user** (string)

          User is a SELinux user label that applies to the container.

      - **securityContext.sysctls** (\[\]Sysctl)

        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.

        *Sysctl defines a kernel parameter to be set*

        - **securityContext.sysctls.name** (string), required

          Name of a property to set

        - **securityContext.sysctls.value** (string), required

          Value of a property to set

      - **securityContext.windowsOptions** (WindowsSecurityContextOptions)

        The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.

        *WindowsSecurityContextOptions contain Windows-specific options and credentials.*

        - **securityContext.windowsOptions.gmsaCredentialSpec** (string)

          GMSACredentialSpec is where the GMSA admission webhook (<https://github.com/kubernetes-sigs/windows-gmsa>) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.

        - **securityContext.windowsOptions.gmsaCredentialSpecName** (string)

          GMSACredentialSpecName is the name of the GMSA credential spec to use.

        - **securityContext.windowsOptions.hostProcess** (boolean)

          HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.

        - **securityContext.windowsOptions.runAsUserName** (string)

          The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

    ### Alpha level

    - **hostUsers** (boolean)

      Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.

    - **resourceClaims** (\[\]PodResourceClaim)

      *Patch strategies: retainKeys, merge on key `name`*

      *Map: unique values on key name will be kept during a merge*

      ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.

      This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

      This field is immutable.

      *PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.*

      - **resourceClaims.name** (string), required

        Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.

      - **resourceClaims.source** (ClaimSource)

        Source describes where to find the ResourceClaim.

        \*ClaimSource describes a reference to a ResourceClaim.

        Exactly one of these fields should be set. Consumers of this type must treat an empty object as if it has an unknown value.\*

        - **resourceClaims.source.resourceClaimName** (string)

          ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.

        - **resourceClaims.source.resourceClaimTemplateName** (string)

          ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.

          The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.

          This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.

    - **schedulingGates** (\[\]PodSchedulingGate)

      *Patch strategy: merge on key `name`*

      *Map: unique values on key name will be kept during a merge*

      SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.

      SchedulingGates can only be set at pod creation time, and be removed only afterwards.

      This is a beta feature enabled by the PodSchedulingReadiness feature gate.

      *PodSchedulingGate is associated to a Pod to guard its scheduling.*

      - **schedulingGates.name** (string), required

        Name of the scheduling gate. Each scheduling gate must have a unique name field.

    ### Deprecated

    - **serviceAccount** (string)

      DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.

    &nbsp;
- name: Pod.Status
  id: workload-resources/pod-v1/index#PodStatus
  summary: PodStatus represents information about the status of a pod
  belongs_to: Pod
  description: "## PodStatus\n\nPodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.\n\n- **nominatedNodeName** (string)\n\n  nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.\n\n- **hostIP** (string)\n\n  hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod\n\n- **hostIPs** (\\[\\]HostIP)\n\n  *Patch strategy: merge on key `ip`*\n\n  *Atomic: will be replaced during a merge*\n\n  hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.\n\n  *HostIP represents a single IP address allocated to the host.*\n\n  - **hostIPs.ip** (string)\n\n    IP is the IP address assigned to the host\n\n- **startTime** (Time)\n\n  RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **phase** (string)\n\n  The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\n  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\n  More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase>\n\n- **message** (string)\n\n  A human readable message indicating details about why the pod is in this condition.\n\n- **reason** (string)\n\n  A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'\n\n- **podIP** (string)\n\n  podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.\n\n- **podIPs** (\\[\\]PodIP)\n\n  *Patch strategy: merge on key `ip`*\n\n  podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.\n\n  *PodIP represents a single IP address allocated to the pod.*\n\n  - **podIPs.ip** (string)\n\n    IP is the IP address assigned to the pod\n\n- **conditions** (\\[\\]PodCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Current service state of pod. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions>\n\n  *PodCondition contains details for the current condition of this pod.*\n\n  - **conditions.status** (string), required\n\n    Status is the status of the condition. Can be True, False, Unknown. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions>\n\n  - **conditions.type** (string), required\n\n    Type is the type of the condition. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions>\n\n  - **conditions.lastProbeTime** (Time)\n\n    Last time we probed the condition.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    Human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    Unique, one-word, CamelCase reason for the condition's last transition.\n\n- **qosClass** (string)\n\n  The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes>\n\n- **initContainerStatuses** (\\[\\]ContainerStatus)\n\n  The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status>\n\n  *ContainerStatus contains details for the current status of this container.*\n\n- **containerStatuses** (\\[\\]ContainerStatus)\n\n  The list has one entry per container in the manifest. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status>\n\n  *ContainerStatus contains details for the current status of this container.*\n\n- **ephemeralContainerStatuses** (\\[\\]ContainerStatus)\n\n  Status for any ephemeral containers that have run in this pod.\n\n  *ContainerStatus contains details for the current status of this container.*\n\n- **resourceClaimStatuses** (\\[\\]PodResourceClaimStatus)\n\n  *Patch strategies: retainKeys, merge on key `name`*\n\n  *Map: unique values on key name will be kept during a merge*\n\n  Status of resource claims.\n\n  *PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.*\n\n  - **resourceClaimStatuses.name** (string), required\n\n    Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.\n\n  - **resourceClaimStatuses.resourceClaimName** (string)\n\n    ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. It this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.\n\n- **resize** (string)\n\n  Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\"\n\n## PodList\n\nPodList is a list of Pods.\n\n- **items** (\\[\\][Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Pod)), required\n\n  List of pods. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md>\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/)"
- name: PodDisruptionBudget
  id: policy-resources/pod-disruption-budget-v1/index
  summary: PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
  description: "# PodDisruptionBudget\n\nPodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods.\n\n`apiVersion: policy/v1`\n\n`import \"k8s.io/api/policy/v1\"`\n\n## PodDisruptionBudget\n\nPodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods\n\n- **apiVersion**: policy/v1\n\n- **kind**: PodDisruptionBudget\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([PodDisruptionBudgetSpec](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/#PodDisruptionBudgetSpec))\n\n  Specification of the desired behavior of the PodDisruptionBudget.\n\n- **status** ([PodDisruptionBudgetStatus](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/#PodDisruptionBudgetStatus))\n\n  Most recently observed status of the PodDisruptionBudget.\n\n## PodDisruptionBudgetSpec\n\nPodDisruptionBudgetSpec is a description of a PodDisruptionBudget.\n\n- **maxUnavailable** (IntOrString)\n\n  An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".\n\n  *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n- **minAvailable** (IntOrString)\n\n  An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod. So for example you can prevent all voluntary evictions by specifying \"100%\".\n\n  *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n- **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n  Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.\n\n- **unhealthyPodEvictionPolicy** (string)\n\n  UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\n  Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.\n\n  IfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.\n\n  AlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n\n  Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.\n\n  This field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).\n\n## PodDisruptionBudgetStatus\n\nPodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.\n\n- **currentHealthy** (int32), required\n\n  current number of healthy pods\n\n- **desiredHealthy** (int32), required\n\n  minimum desired number of healthy pods\n\n- **disruptionsAllowed** (int32), required\n\n  Number of pod disruptions that are currently allowed.\n\n- **expectedPods** (int32), required\n\n  total number of pods counted by this disruption budget\n\n- **conditions** (\\[\\]Condition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute the number of allowed disruptions. Therefore no disruptions are allowed and the status of the condition will be False.\n\n  - InsufficientPods: The number of pods are either at or below the number required by the PodDisruptionBudget. No disruptions are allowed and the status of the condition will be False.\n  - SufficientPods: There are more pods than required by the PodDisruptionBudget. The condition will be True, and the number of allowed disruptions are provided by the disruptionsAllowed property.\n\n  *Condition contains details for one aspect of the current state of this API Resource.*\n\n  - **conditions.lastTransitionTime** (Time), required\n\n    lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string), required\n\n    message is a human readable message indicating details about the transition. This may be an empty string.\n\n  - **conditions.reason** (string), required\n\n    reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.\n\n  - **conditions.status** (string), required\n\n    status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    type of condition in CamelCase or in foo.example.com/CamelCase.\n\n  - **conditions.observedGeneration** (int64)\n\n    observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions\\[x\\].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.\n\n- **disruptedPods** (map\\[string\\]Time)\n\n  DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **observedGeneration** (int64)\n\n  Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.\n\n## PodDisruptionBudgetList\n\nPodDisruptionBudgetList is a collection of PodDisruptionBudgets.\n\n- **apiVersion**: policy/v1\n\n- **kind**: PodDisruptionBudgetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][PodDisruptionBudget](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/#PodDisruptionBudget)), required\n\n  Items is a list of PodDisruptionBudgets\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/)"
- name: PodDisruptionBudget.Spec
  id: policy-resources/pod-disruption-budget-v1/index#PodDisruptionBudgetSpec
  summary: PodDisruptionBudgetSpec is a description of a PodDisruptionBudget
  belongs_to: PodDisruptionBudget
  description: |-
    ## PodDisruptionBudgetSpec

    PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.

    - **maxUnavailable** (IntOrString)

      An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".

      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

    - **minAvailable** (IntOrString)

      An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod. So for example you can prevent all voluntary evictions by specifying "100%".

      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

    - **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

      Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.

    - **unhealthyPodEvictionPolicy** (string)

      UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type="Ready",status="True".

      Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.

      IfHealthyBudget policy means that running pods (status.phase="Running"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.

      AlwaysAllow policy means that all running pods (status.phase="Running"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.

      Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.

      This field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).

    &nbsp;
- name: PodDisruptionBudget.Status
  id: policy-resources/pod-disruption-budget-v1/index#PodDisruptionBudgetStatus
  summary: PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget
  belongs_to: PodDisruptionBudget
  description: "## PodDisruptionBudgetStatus\n\nPodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.\n\n- **currentHealthy** (int32), required\n\n  current number of healthy pods\n\n- **desiredHealthy** (int32), required\n\n  minimum desired number of healthy pods\n\n- **disruptionsAllowed** (int32), required\n\n  Number of pod disruptions that are currently allowed.\n\n- **expectedPods** (int32), required\n\n  total number of pods counted by this disruption budget\n\n- **conditions** (\\[\\]Condition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute the number of allowed disruptions. Therefore no disruptions are allowed and the status of the condition will be False.\n\n  - InsufficientPods: The number of pods are either at or below the number required by the PodDisruptionBudget. No disruptions are allowed and the status of the condition will be False.\n  - SufficientPods: There are more pods than required by the PodDisruptionBudget. The condition will be True, and the number of allowed disruptions are provided by the disruptionsAllowed property.\n\n  *Condition contains details for one aspect of the current state of this API Resource.*\n\n  - **conditions.lastTransitionTime** (Time), required\n\n    lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string), required\n\n    message is a human readable message indicating details about the transition. This may be an empty string.\n\n  - **conditions.reason** (string), required\n\n    reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.\n\n  - **conditions.status** (string), required\n\n    status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    type of condition in CamelCase or in foo.example.com/CamelCase.\n\n  - **conditions.observedGeneration** (int64)\n\n    observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions\\[x\\].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.\n\n- **disruptedPods** (map\\[string\\]Time)\n\n  DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **observedGeneration** (int64)\n\n  Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.\n\n## PodDisruptionBudgetList\n\nPodDisruptionBudgetList is a collection of PodDisruptionBudgets.\n\n- **apiVersion**: policy/v1\n\n- **kind**: PodDisruptionBudgetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][PodDisruptionBudget](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/#PodDisruptionBudget)), required\n\n  Items is a list of PodDisruptionBudgets\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/)"
- name: PodSchedulingContext
  id: workload-resources/pod-scheduling-context-v1alpha2/index#PodSchedulingContext
  summary: PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode
  belongs_to: PodSchedulingContext v1alpha2
  description: |-
    ## PodSchedulingContext

    PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.

    This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.

    - **apiVersion**: resource.k8s.io/v1alpha2

    - **kind**: PodSchedulingContext

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      Standard object metadata

    - **spec** ([PodSchedulingContextSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/#PodSchedulingContextSpec)), required

      Spec describes where resources for the Pod are needed.

    - **status** ([PodSchedulingContextStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/#PodSchedulingContextStatus))

      Status describes where resources for the Pod can be allocated.
- name: PodSchedulingContext v1alpha2
  id: workload-resources/pod-scheduling-context-v1alpha2/index
  summary: PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode
  description: "# PodSchedulingContext v1alpha2\n\nPodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use \"WaitForFirstConsumer\" allocation mode.\n\n`apiVersion: resource.k8s.io/v1alpha2`\n\n`import \"k8s.io/api/resource/v1alpha2\"`\n\n## PodSchedulingContext\n\nPodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use \"WaitForFirstConsumer\" allocation mode.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: PodSchedulingContext\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata\n\n- **spec** ([PodSchedulingContextSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/#PodSchedulingContextSpec)), required\n\n  Spec describes where resources for the Pod are needed.\n\n- **status** ([PodSchedulingContextStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/#PodSchedulingContextStatus))\n\n  Status describes where resources for the Pod can be allocated.\n\n## PodSchedulingContextSpec\n\nPodSchedulingContextSpec describes where resources for the Pod are needed.\n\n- **potentialNodes** (\\[\\]string)\n\n  *Set: unique values will be kept during a merge*\n\n  PotentialNodes lists nodes where the Pod might be able to run.\n\n  The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.\n\n- **selectedNode** (string)\n\n  SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use \"WaitForFirstConsumer\" allocation is to be attempted.\n\n## PodSchedulingContextStatus\n\nPodSchedulingContextStatus describes where resources for the Pod can be allocated.\n\n- **resourceClaims** (\\[\\]ResourceClaimSchedulingStatus)\n\n  *Map: unique values on key name will be kept during a merge*\n\n  ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses \"WaitForFirstConsumer\" allocation mode.\n\n  *ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with \"WaitForFirstConsumer\" allocation mode.*\n\n  - **resourceClaims.name** (string)\n\n    Name matches the pod.spec.resourceClaims\\[\\*\\].Name field.\n\n  - **resourceClaims.unsuitableNodes** (\\[\\]string)\n\n    *Set: unique values will be kept during a merge*\n\n    UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.\n\n    The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.\n\n## PodSchedulingContextList\n\nPodSchedulingContextList is a collection of Pod scheduling objects.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: PodSchedulingContextList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][PodSchedulingContext](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/#PodSchedulingContext)), required\n\n  Items is the list of PodSchedulingContext objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/)"
- name: PodSchedulingContextList
  id: workload-resources/pod-scheduling-context-v1alpha2/index#PodSchedulingContextList
  summary: PodSchedulingContextList is a collection of Pod scheduling objects
  belongs_to: PodSchedulingContext v1alpha2
  description: "## PodSchedulingContextList\n\nPodSchedulingContextList is a collection of Pod scheduling objects.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: PodSchedulingContextList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][PodSchedulingContext](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/#PodSchedulingContext)), required\n\n  Items is the list of PodSchedulingContext objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-scheduling-context-v1alpha2/)"
- name: PodSchedulingContextSpec
  id: workload-resources/pod-scheduling-context-v1alpha2/index#PodSchedulingContextSpec
  summary: PodSchedulingContextSpec describes where resources for the Pod are needed
  belongs_to: PodSchedulingContext v1alpha2
  description: |-
    ## PodSchedulingContextSpec

    PodSchedulingContextSpec describes where resources for the Pod are needed.

    - **potentialNodes** (\[\]string)

      *Set: unique values will be kept during a merge*

      PotentialNodes lists nodes where the Pod might be able to run.

      The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.

    - **selectedNode** (string)

      SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.

    &nbsp;
- name: PodSchedulingContextStatus
  id: workload-resources/pod-scheduling-context-v1alpha2/index#PodSchedulingContextStatus
  summary: PodSchedulingContextStatus describes where resources for the Pod can be allocated
  belongs_to: PodSchedulingContext v1alpha2
  description: |-
    ## PodSchedulingContextStatus

    PodSchedulingContextStatus describes where resources for the Pod can be allocated.

    - **resourceClaims** (\[\]ResourceClaimSchedulingStatus)

      *Map: unique values on key name will be kept during a merge*

      ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.

      *ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.*

      - **resourceClaims.name** (string)

        Name matches the pod.spec.resourceClaims\[\*\].Name field.

      - **resourceClaims.unsuitableNodes** (\[\]string)

        *Set: unique values will be kept during a merge*

        UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.

        The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.

    &nbsp;
- name: PodTemplate
  id: workload-resources/pod-template-v1/index
  summary: PodTemplate describes a template for creating copies of a predefined pod
  description: "# PodTemplate\n\nPodTemplate describes a template for creating copies of a predefined pod.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## PodTemplate\n\nPodTemplate describes a template for creating copies of a predefined pod.\n\n- **apiVersion**: v1\n\n- **kind**: PodTemplate\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec))\n\n  Template defines the pods that will be created from this pod template. <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## PodTemplateSpec\n\nPodTemplateSpec describes the data a pod should have when created from a template\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([PodSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec))\n\n  Specification of the desired behavior of the pod. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## PodTemplateList\n\nPodTemplateList is a list of PodTemplates.\n\n- **apiVersion**: v1\n\n- **kind**: PodTemplateList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][PodTemplate](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplate)), required\n\n  List of pod templates\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/)"
- name: PodTemplate.Spec
  id: workload-resources/pod-template-v1/index#PodTemplateSpec
  summary: Standard object's metadata
  belongs_to: PodTemplate
  description: "## PodTemplateSpec\n\nPodTemplateSpec describes the data a pod should have when created from a template\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([PodSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec))\n\n  Specification of the desired behavior of the pod. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## PodTemplateList\n\nPodTemplateList is a list of PodTemplates.\n\n- **apiVersion**: v1\n\n- **kind**: PodTemplateList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][PodTemplate](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplate)), required\n\n  List of pod templates\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/)"
- name: Policy Resources
  id: policy-resources/index
  summary: LimitRange sets resource usage limits for each kind of resource in a Namespace
  description: "# Policy Resources\n\n##### [LimitRange](limit-range-v1/index)\n\nLimitRange sets resource usage limits for each kind of resource in a Namespace.\n\n##### [ResourceQuota](resource-quota-v1/index)\n\nResourceQuota sets aggregate quota restrictions enforced per namespace.\n\n##### [NetworkPolicy](network-policy-v1/index)\n\nNetworkPolicy describes what network traffic is allowed for a set of Pods.\n\n##### [PodDisruptionBudget](pod-disruption-budget-v1/index)\n\nPodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods.\n\n##### [IPAddress v1alpha1](ip-address-v1alpha1/index)\n\nIPAddress represents a single IP of a single IP Family.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/)"
- name: pretty
  id: common-parameters/common-parameters/index#pretty
  summary: If 'true', then the output is pretty printed
  belongs_to: Common Parameters
  description: |-
    ## pretty

    If 'true', then the output is pretty printed.
- name: PriorityClass
  id: workload-resources/priority-class-v1/index
  summary: PriorityClass defines mapping from a priority class name to the priority integer value
  description: "# PriorityClass\n\nPriorityClass defines mapping from a priority class name to the priority integer value.\n\n`apiVersion: scheduling.k8s.io/v1`\n\n`import \"k8s.io/api/scheduling/v1\"`\n\n## PriorityClass\n\nPriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.\n\n- **apiVersion**: scheduling.k8s.io/v1\n\n- **kind**: PriorityClass\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **value** (int32), required\n\n  value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.\n\n- **description** (string)\n\n  description is an arbitrary string that usually provides guidelines on when this priority class should be used.\n\n- **globalDefault** (boolean)\n\n  globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.\n\n- **preemptionPolicy** (string)\n\n  preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.\n\n## PriorityClassList\n\nPriorityClassList is a collection of priority classes.\n\n- **apiVersion**: scheduling.k8s.io/v1\n\n- **kind**: PriorityClassList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][PriorityClass](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/priority-class-v1/#PriorityClass)), required\n\n  items is the list of PriorityClasses\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/priority-class-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/priority-class-v1/)"
- name: PriorityLevelConfiguration
  id: cluster-resources/priority-level-configuration-v1beta3/index#PriorityLevelConfiguration
  summary: PriorityLevelConfiguration represents the configuration of a priority level
  belongs_to: PriorityLevelConfiguration v1beta3
  description: |-
    ## PriorityLevelConfiguration

    PriorityLevelConfiguration represents the configuration of a priority level.

    - **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3

    - **kind**: PriorityLevelConfiguration

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      `metadata` is the standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>

    - **spec** ([PriorityLevelConfigurationSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/#PriorityLevelConfigurationSpec))

      `spec` is the specification of the desired behavior of a "request-priority". More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>

    - **status** ([PriorityLevelConfigurationStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/#PriorityLevelConfigurationStatus))

      `status` is the current status of a "request-priority". More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
- name: PriorityLevelConfiguration v1beta3
  id: cluster-resources/priority-level-configuration-v1beta3/index
  summary: PriorityLevelConfiguration represents the configuration of a priority level
  description: "# PriorityLevelConfiguration v1beta3\n\nPriorityLevelConfiguration represents the configuration of a priority level.\n\n`apiVersion: flowcontrol.apiserver.k8s.io/v1beta3`\n\n`import \"k8s.io/api/flowcontrol/v1beta3\"`\n\n## PriorityLevelConfiguration\n\nPriorityLevelConfiguration represents the configuration of a priority level.\n\n- **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3\n\n- **kind**: PriorityLevelConfiguration\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  `metadata` is the standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([PriorityLevelConfigurationSpec](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/#PriorityLevelConfigurationSpec))\n\n  `spec` is the specification of the desired behavior of a \"request-priority\". More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([PriorityLevelConfigurationStatus](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/#PriorityLevelConfigurationStatus))\n\n  `status` is the current status of a \"request-priority\". More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## PriorityLevelConfigurationSpec\n\nPriorityLevelConfigurationSpec specifies the configuration of a priority level.\n\n- **type** (string), required\n\n  `type` indicates whether this priority level is subject to limitation on request execution. A value of `\"Exempt\"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels. A value of `\"Limited\"` means that (a) requests of this priority level *are* subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.\n\n- **exempt** (ExemptPriorityLevelConfiguration)\n\n  `exempt` specifies how requests are handled for an exempt priority level. This field MUST be empty if `type` is `\"Limited\"`. This field MAY be non-empty if `type` is `\"Exempt\"`. If empty and `type` is `\"Exempt\"` then the default values for `ExemptPriorityLevelConfiguration` apply.\n\n  *ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.*\n\n  - **exempt.lendablePercent** (int32)\n\n    `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\n    LendableCL(i) = round( NominalCL(i) \\* lendablePercent(i)/100.0 )\n\n  - **exempt.nominalConcurrencyShares** (int32)\n\n    `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:\n\n    NominalCL(i) = ceil( ServerCL \\* NCS(i) / sum_ncs ) sum_ncs = sum\\[priority level k\\] NCS(k)\n\n    Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.\n\n- **limited** (LimitedPriorityLevelConfiguration)\n\n  `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `\"Limited\"`.\n\n  \\*LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:\n\n  - How are requests for this priority level limited?\n\n  - What should be done with requests that exceed the limit?\\*\n\n  - **limited.borrowingLimitPercent** (int32)\n\n    `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.\n\n    BorrowingCL(i) = round( NominalCL(i) \\* borrowingLimitPercent(i)/100.0 )\n\n    The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.\n\n  - **limited.lendablePercent** (int32)\n\n    `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\n    LendableCL(i) = round( NominalCL(i) \\* lendablePercent(i)/100.0 )\n\n  - **limited.limitResponse** (LimitResponse)\n\n    `limitResponse` indicates what to do with requests that can not be executed right now\n\n    *LimitResponse defines how to handle requests that can not be executed right now.*\n\n    - **limited.limitResponse.type** (string), required\n\n      `type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.\n\n    - **limited.limitResponse.queuing** (QueuingConfiguration)\n\n      `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`.\n\n      *QueuingConfiguration holds the configuration parameters for queuing*\n\n      - **limited.limitResponse.queuing.handSize** (int32)\n\n        `handSize` is a small positive number that configures the shuffle sharding of requests into queues. When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here. The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues). See the user-facing documentation for more extensive guidance on setting this field. This field has a default value of 8.\n\n      - **limited.limitResponse.queuing.queueLengthLimit** (int32)\n\n        `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected. This value must be positive. If not specified, it will be defaulted to 50.\n\n      - **limited.limitResponse.queuing.queues** (int32)\n\n        `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive. Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant. This field has a default value of 64.\n\n  - **limited.nominalConcurrencyShares** (int32)\n\n    `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:\n\n    NominalCL(i) = ceil( ServerCL \\* NCS(i) / sum_ncs ) sum_ncs = sum\\[priority level k\\] NCS(k)\n\n    Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of 30.\n\n## PriorityLevelConfigurationStatus\n\nPriorityLevelConfigurationStatus represents the current state of a \"request-priority\".\n\n- **conditions** (\\[\\]PriorityLevelConfigurationCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  `conditions` is the current state of \"request-priority\".\n\n  *PriorityLevelConfigurationCondition defines the condition of priority level.*\n\n  - **conditions.lastTransitionTime** (Time)\n\n    `lastTransitionTime` is the last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    `message` is a human-readable message indicating details about last transition.\n\n  - **conditions.reason** (string)\n\n    `reason` is a unique, one-word, CamelCase reason for the condition's last transition.\n\n  - **conditions.status** (string)\n\n    `status` is the status of the condition. Can be True, False, Unknown. Required.\n\n  - **conditions.type** (string)\n\n    `type` is the type of the condition. Required.\n\n## PriorityLevelConfigurationList\n\nPriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.\n\n- **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3\n\n- **kind**: PriorityLevelConfigurationList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  `metadata` is the standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][PriorityLevelConfiguration](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/#PriorityLevelConfiguration)), required\n\n  `items` is a list of request-priorities.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/)"
- name: PriorityLevelConfigurationList
  id: cluster-resources/priority-level-configuration-v1beta3/index#PriorityLevelConfigurationList
  summary: PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects
  belongs_to: PriorityLevelConfiguration v1beta3
  description: "## PriorityLevelConfigurationList\n\nPriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.\n\n- **apiVersion**: flowcontrol.apiserver.k8s.io/v1beta3\n\n- **kind**: PriorityLevelConfigurationList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  `metadata` is the standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][PriorityLevelConfiguration](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/#PriorityLevelConfiguration)), required\n\n  `items` is a list of request-priorities.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/priority-level-configuration-v1beta3/)"
- name: PriorityLevelConfigurationSpec
  id: cluster-resources/priority-level-configuration-v1beta3/index#PriorityLevelConfigurationSpec
  summary: PriorityLevelConfigurationSpec specifies the configuration of a priority level
  belongs_to: PriorityLevelConfiguration v1beta3
  description: |-
    ## PriorityLevelConfigurationSpec

    PriorityLevelConfigurationSpec specifies the configuration of a priority level.

    - **type** (string), required

      `type` indicates whether this priority level is subject to limitation on request execution. A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels. A value of `"Limited"` means that (a) requests of this priority level *are* subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.

    - **exempt** (ExemptPriorityLevelConfiguration)

      `exempt` specifies how requests are handled for an exempt priority level. This field MUST be empty if `type` is `"Limited"`. This field MAY be non-empty if `type` is `"Exempt"`. If empty and `type` is `"Exempt"` then the default values for `ExemptPriorityLevelConfiguration` apply.

      *ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.*

      - **exempt.lendablePercent** (int32)

        `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.

        LendableCL(i) = round( NominalCL(i) \* lendablePercent(i)/100.0 )

      - **exempt.nominalConcurrencyShares** (int32)

        `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:

        NominalCL(i) = ceil( ServerCL \* NCS(i) / sum_ncs ) sum_ncs = sum\[priority level k\] NCS(k)

        Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.

    - **limited** (LimitedPriorityLevelConfiguration)

      `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.

      \*LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:

      - How are requests for this priority level limited?

      - What should be done with requests that exceed the limit?\*

      - **limited.borrowingLimitPercent** (int32)

        `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.

        BorrowingCL(i) = round( NominalCL(i) \* borrowingLimitPercent(i)/100.0 )

        The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.

      - **limited.lendablePercent** (int32)

        `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.

        LendableCL(i) = round( NominalCL(i) \* lendablePercent(i)/100.0 )

      - **limited.limitResponse** (LimitResponse)

        `limitResponse` indicates what to do with requests that can not be executed right now

        *LimitResponse defines how to handle requests that can not be executed right now.*

        - **limited.limitResponse.type** (string), required

          `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.

        - **limited.limitResponse.queuing** (QueuingConfiguration)

          `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.

          *QueuingConfiguration holds the configuration parameters for queuing*

          - **limited.limitResponse.queuing.handSize** (int32)

            `handSize` is a small positive number that configures the shuffle sharding of requests into queues. When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here. The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues). See the user-facing documentation for more extensive guidance on setting this field. This field has a default value of 8.

          - **limited.limitResponse.queuing.queueLengthLimit** (int32)

            `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected. This value must be positive. If not specified, it will be defaulted to 50.

          - **limited.limitResponse.queuing.queues** (int32)

            `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive. Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant. This field has a default value of 64.

      - **limited.nominalConcurrencyShares** (int32)

        `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:

        NominalCL(i) = ceil( ServerCL \* NCS(i) / sum_ncs ) sum_ncs = sum\[priority level k\] NCS(k)

        Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of 30.

    &nbsp;
- name: PriorityLevelConfigurationStatus
  id: cluster-resources/priority-level-configuration-v1beta3/index#PriorityLevelConfigurationStatus
  summary: PriorityLevelConfigurationCondition defines the condition of priority level
  belongs_to: PriorityLevelConfiguration v1beta3
  description: |-
    ## PriorityLevelConfigurationStatus

    PriorityLevelConfigurationStatus represents the current state of a "request-priority".

    - **conditions** (\[\]PriorityLevelConfigurationCondition)

      *Patch strategy: merge on key `type`*

      *Map: unique values on key type will be kept during a merge*

      `conditions` is the current state of "request-priority".

      *PriorityLevelConfigurationCondition defines the condition of priority level.*

      - **conditions.lastTransitionTime** (Time)

        `lastTransitionTime` is the last time the condition transitioned from one status to another.

        *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*

      - **conditions.message** (string)

        `message` is a human-readable message indicating details about last transition.

      - **conditions.reason** (string)

        `reason` is a unique, one-word, CamelCase reason for the condition's last transition.

      - **conditions.status** (string)

        `status` is the status of the condition. Can be True, False, Unknown. Required.

      - **conditions.type** (string)

        `type` is the type of the condition. Required.

    &nbsp;
- name: Probe
  id: workload-resources/pod-v1/index#Probe
  summary: Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic
  belongs_to: Pod
  description: |-
    ## Probe

    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    - **exec** (ExecAction)

      Exec specifies the action to take.

      *ExecAction describes a "run in container" action.*

      - **exec.command** (\[\]string)

        Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('\|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.

    - **httpGet** (HTTPGetAction)

      HTTPGet specifies the http request to perform.

      *HTTPGetAction describes an action based on HTTP Get requests.*

      - **httpGet.port** (IntOrString), required

        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.

        *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

      - **httpGet.host** (string)

        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.

      - **httpGet.httpHeaders** (\[\]HTTPHeader)

        Custom headers to set in the request. HTTP allows repeated headers.

        *HTTPHeader describes a custom header to be used in HTTP probes*

        - **httpGet.httpHeaders.name** (string), required

          The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.

        - **httpGet.httpHeaders.value** (string), required

          The header field value

      - **httpGet.path** (string)

        Path to access on the HTTP server.

      - **httpGet.scheme** (string)

        Scheme to use for connecting to the host. Defaults to HTTP.

    - **tcpSocket** (TCPSocketAction)

      TCPSocket specifies an action involving a TCP port.

      *TCPSocketAction describes an action based on opening a socket*

      - **tcpSocket.port** (IntOrString), required

        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.

        *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

      - **tcpSocket.host** (string)

        Optional: Host name to connect to, defaults to the pod IP.

    - **initialDelaySeconds** (int32)

      Number of seconds after the container has started before liveness probes are initiated. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>

    - **terminationGracePeriodSeconds** (int64)

      Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.

    - **periodSeconds** (int32)

      How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.

    - **timeoutSeconds** (int32)

      Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>

    - **failureThreshold** (int32)

      Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.

    - **successThreshold** (int32)

      Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.

    - **grpc** (GRPCAction)

      GRPC specifies an action involving a GRPC port.

      \*\*

      - **grpc.port** (int32), required

        Port number of the gRPC service. Number must be in the range 1 to 65535.

      - **grpc.service** (string)

        Service is the name of the service to place in the gRPC HealthCheckRequest (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md)>.

        If this is not specified, the default behavior is defined by gRPC.

    &nbsp;
- name: propagationPolicy
  id: common-parameters/common-parameters/index#propagationPolicy
  summary: Whether and how garbage collection will be performed
  belongs_to: Common Parameters
  description: |-
    ## propagationPolicy

    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
- name: Quantity
  id: common-definitions/quantity/index
  summary: Quantity is a fixed-point representation of a number
  description: "# Quantity\n\nQuantity is a fixed-point representation of a number.\n\n`import \"k8s.io/apimachinery/pkg/api/resource\"`\n\nQuantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n```\n    (Note that \\<suffix> may be empty, from the \"\" case in \\<decimalSI>.)\n\n\\<digit>           ::= 0 | 1 | ... | 9 \\<digits>          ::= \\<digit> | \\<digit>\\<digits> \\<number>          ::= \\<digits> | \\<digits>.\\<digits> | \\<digits>. | .\\<digits> \\<sign>            ::= \"+\" | \"-\" \\<signedNumber>    ::= \\<number> | \\<sign>\\<number> \\<suffix>          ::= \\<binarySI> | \\<decimalExponent> | \\<decimalSI> \\<binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n\\<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n\\<decimalExponent> ::= \"e\" \\<signedNumber> | \"E\" \\<signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.\n\n<hr>\n```\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/)"
- name: ReplicaSet
  id: workload-resources/replica-set-v1/index
  summary: ReplicaSet ensures that a specified number of pod replicas are running at any given time
  description: "# ReplicaSet\n\nReplicaSet ensures that a specified number of pod replicas are running at any given time.\n\n`apiVersion: apps/v1`\n\n`import \"k8s.io/api/apps/v1\"`\n\n## ReplicaSet\n\nReplicaSet ensures that a specified number of pod replicas are running at any given time.\n\n- **apiVersion**: apps/v1\n\n- **kind**: ReplicaSet\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([ReplicaSetSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/#ReplicaSetSpec))\n\n  Spec defines the specification of the desired behavior of the ReplicaSet. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([ReplicaSetStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/#ReplicaSetStatus))\n\n  Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## ReplicaSetSpec\n\nReplicaSetSpec is the specification of a ReplicaSet.\n\n- **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required\n\n  Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>\n\n- **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec))\n\n  Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>\n\n- **replicas** (int32)\n\n  Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller>\n\n- **minReadySeconds** (int32)\n\n  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n\n## ReplicaSetStatus\n\nReplicaSetStatus represents the current status of a ReplicaSet.\n\n- **replicas** (int32), required\n\n  Replicas is the most recently observed number of replicas. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller>\n\n- **availableReplicas** (int32)\n\n  The number of available replicas (ready for at least minReadySeconds) for this replica set.\n\n- **readyReplicas** (int32)\n\n  readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.\n\n- **fullyLabeledReplicas** (int32)\n\n  The number of pods that have labels matching the labels of the pod template of the replicaset.\n\n- **conditions** (\\[\\]ReplicaSetCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a replica set's current state.\n\n  *ReplicaSetCondition describes the state of a replica set at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of replica set condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    The last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  ObservedGeneration reflects the generation of the most recently observed ReplicaSet.\n\n## ReplicaSetList\n\nReplicaSetList is a collection of ReplicaSets.\n\n- **apiVersion**: apps/v1\n\n- **kind**: ReplicaSetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ReplicaSet](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/#ReplicaSet)), required\n\n  List of ReplicaSets. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/)"
- name: ReplicaSet.Spec
  id: workload-resources/replica-set-v1/index#ReplicaSetSpec
  summary: ReplicaSetSpec is the specification of a ReplicaSet
  belongs_to: ReplicaSet
  description: |-
    ## ReplicaSetSpec

    ReplicaSetSpec is the specification of a ReplicaSet.

    - **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required

      Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>

    - **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec))

      Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>

    - **replicas** (int32)

      Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller>

    - **minReadySeconds** (int32)

      Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)

    &nbsp;
- name: ReplicaSet.Status
  id: workload-resources/replica-set-v1/index#ReplicaSetStatus
  summary: ReplicaSetStatus represents the current status of a ReplicaSet
  belongs_to: ReplicaSet
  description: "## ReplicaSetStatus\n\nReplicaSetStatus represents the current status of a ReplicaSet.\n\n- **replicas** (int32), required\n\n  Replicas is the most recently observed number of replicas. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller>\n\n- **availableReplicas** (int32)\n\n  The number of available replicas (ready for at least minReadySeconds) for this replica set.\n\n- **readyReplicas** (int32)\n\n  readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.\n\n- **fullyLabeledReplicas** (int32)\n\n  The number of pods that have labels matching the labels of the pod template of the replicaset.\n\n- **conditions** (\\[\\]ReplicaSetCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a replica set's current state.\n\n  *ReplicaSetCondition describes the state of a replica set at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of replica set condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    The last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  ObservedGeneration reflects the generation of the most recently observed ReplicaSet.\n\n## ReplicaSetList\n\nReplicaSetList is a collection of ReplicaSets.\n\n- **apiVersion**: apps/v1\n\n- **kind**: ReplicaSetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ReplicaSet](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/#ReplicaSet)), required\n\n  List of ReplicaSets. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/)"
- name: ReplicationController
  id: workload-resources/replication-controller-v1/index
  summary: ReplicationController represents the configuration of a replication controller
  description: "# ReplicationController\n\nReplicationController represents the configuration of a replication controller.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## ReplicationController\n\nReplicationController represents the configuration of a replication controller.\n\n- **apiVersion**: v1\n\n- **kind**: ReplicationController\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([ReplicationControllerSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/#ReplicationControllerSpec))\n\n  Spec defines the specification of the desired behavior of the replication controller. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([ReplicationControllerStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/#ReplicationControllerStatus))\n\n  Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## ReplicationControllerSpec\n\nReplicationControllerSpec is the specification of a replication controller.\n\n- **selector** (map\\[string\\]string)\n\n  Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>\n\n- **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec))\n\n  Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is \"Always\". More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>\n\n- **replicas** (int32)\n\n  Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller>\n\n- **minReadySeconds** (int32)\n\n  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n\n## ReplicationControllerStatus\n\nReplicationControllerStatus represents the current status of a replication controller.\n\n- **replicas** (int32), required\n\n  Replicas is the most recently observed number of replicas. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller>\n\n- **availableReplicas** (int32)\n\n  The number of available replicas (ready for at least minReadySeconds) for this replication controller.\n\n- **readyReplicas** (int32)\n\n  The number of ready replicas for this replication controller.\n\n- **fullyLabeledReplicas** (int32)\n\n  The number of pods that have labels matching the labels of the pod template of the replication controller.\n\n- **conditions** (\\[\\]ReplicationControllerCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a replication controller's current state.\n\n  *ReplicationControllerCondition describes the state of a replication controller at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of replication controller condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    The last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  ObservedGeneration reflects the generation of the most recently observed replication controller.\n\n## ReplicationControllerList\n\nReplicationControllerList is a collection of replication controllers.\n\n- **apiVersion**: v1\n\n- **kind**: ReplicationControllerList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ReplicationController](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/#ReplicationController)), required\n\n  List of replication controllers. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/)"
- name: ReplicationController.Spec
  id: workload-resources/replication-controller-v1/index#ReplicationControllerSpec
  summary: ReplicationControllerSpec is the specification of a replication controller
  belongs_to: ReplicationController
  description: |-
    ## ReplicationControllerSpec

    ReplicationControllerSpec is the specification of a replication controller.

    - **selector** (map\[string\]string)

      Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>

    - **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec))

      Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is "Always". More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>

    - **replicas** (int32)

      Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller>

    - **minReadySeconds** (int32)

      Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)

    &nbsp;
- name: ReplicationController.Status
  id: workload-resources/replication-controller-v1/index#ReplicationControllerStatus
  summary: ReplicationControllerStatus represents the current status of a replication controller
  belongs_to: ReplicationController
  description: "## ReplicationControllerStatus\n\nReplicationControllerStatus represents the current status of a replication controller.\n\n- **replicas** (int32), required\n\n  Replicas is the most recently observed number of replicas. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller>\n\n- **availableReplicas** (int32)\n\n  The number of available replicas (ready for at least minReadySeconds) for this replication controller.\n\n- **readyReplicas** (int32)\n\n  The number of ready replicas for this replication controller.\n\n- **fullyLabeledReplicas** (int32)\n\n  The number of pods that have labels matching the labels of the pod template of the replication controller.\n\n- **conditions** (\\[\\]ReplicationControllerCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a replication controller's current state.\n\n  *ReplicationControllerCondition describes the state of a replication controller at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of replication controller condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    The last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **observedGeneration** (int64)\n\n  ObservedGeneration reflects the generation of the most recently observed replication controller.\n\n## ReplicationControllerList\n\nReplicationControllerList is a collection of replication controllers.\n\n- **apiVersion**: v1\n\n- **kind**: ReplicationControllerList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ReplicationController](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/#ReplicationController)), required\n\n  List of replication controllers. More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/replication-controller-v1/)"
- name: ResourceClaim
  id: workload-resources/resource-claim-v1alpha2/index#ResourceClaim
  summary: ResourceClaim describes which resources are needed by a resource consumer
  belongs_to: ResourceClaim v1alpha2
  description: |-
    ## ResourceClaim

    ResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.

    This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.

    - **apiVersion**: resource.k8s.io/v1alpha2

    - **kind**: ResourceClaim

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      Standard object metadata

    - **spec** ([ResourceClaimSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaimSpec)), required

      Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.

    - **status** ([ResourceClaimStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaimStatus))

      Status describes whether the resource is available and with which attributes.
- name: ResourceClaim v1alpha2
  id: workload-resources/resource-claim-v1alpha2/index
  summary: ResourceClaim describes which resources are needed by a resource consumer
  description: "# ResourceClaim v1alpha2\n\nResourceClaim describes which resources are needed by a resource consumer.\n\n`apiVersion: resource.k8s.io/v1alpha2`\n\n`import \"k8s.io/api/resource/v1alpha2\"`\n\n## ResourceClaim\n\nResourceClaim describes which resources are needed by a resource consumer. Its status tracks whether the resource has been allocated and what the resulting attributes are.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClaim\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata\n\n- **spec** ([ResourceClaimSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaimSpec)), required\n\n  Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.\n\n- **status** ([ResourceClaimStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaimStatus))\n\n  Status describes whether the resource is available and with which attributes.\n\n## ResourceClaimSpec\n\nResourceClaimSpec defines how a resource is to be allocated.\n\n- **resourceClassName** (string), required\n\n  ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.\n\n- **allocationMode** (string)\n\n  Allocation can start immediately or when a Pod wants to use the resource. \"WaitForFirstConsumer\" is the default.\n\n- **parametersRef** (ResourceClaimParametersReference)\n\n  ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.\n\n  The object must be in the same namespace as the ResourceClaim.\n\n  *ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.*\n\n  - **parametersRef.kind** (string), required\n\n    Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example \"ConfigMap\".\n\n  - **parametersRef.name** (string), required\n\n    Name is the name of resource being referenced.\n\n  - **parametersRef.apiGroup** (string)\n\n    APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.\n\n## ResourceClaimStatus\n\nResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.\n\n- **allocation** (AllocationResult)\n\n  Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.\n\n  *AllocationResult contains attributes of an allocated resource.*\n\n  - **allocation.availableOnNodes** (NodeSelector)\n\n    This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.\n\n    Setting this field is optional. If null, the resource is available everywhere.\n\n    *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*\n\n    - **allocation.availableOnNodes.nodeSelectorTerms** (\\[\\]NodeSelectorTerm), required\n\n      Required. A list of node selector terms. The terms are ORed.\n\n      *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*\n\n      - **allocation.availableOnNodes.nodeSelectorTerms.matchExpressions** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n        A list of node selector requirements by node's labels.\n\n      - **allocation.availableOnNodes.nodeSelectorTerms.matchFields** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n        A list of node selector requirements by node's fields.\n\n  - **allocation.resourceHandles** (\\[\\]ResourceHandle)\n\n    *Atomic: will be replaced during a merge*\n\n    ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.\n\n    Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.\n\n    *ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.*\n\n    - **allocation.resourceHandles.data** (string)\n\n      Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.\n\n      The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.\n\n    - **allocation.resourceHandles.driverName** (string)\n\n      DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.\n\n  - **allocation.shareable** (boolean)\n\n    Shareable determines whether the resource supports more than one consumer at a time.\n\n- **deallocationRequested** (boolean)\n\n  DeallocationRequested indicates that a ResourceClaim is to be deallocated.\n\n  The driver then must deallocate this claim and reset the field together with clearing the Allocation field.\n\n  While DeallocationRequested is set, no new consumers may be added to ReservedFor.\n\n- **driverName** (string)\n\n  DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.\n\n- **reservedFor** (\\[\\]ResourceClaimConsumerReference)\n\n  *Map: unique values on key uid will be kept during a merge*\n\n  ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.\n\n  There can be at most 32 such reservations. This may get increased in the future, but not reduced.\n\n  *ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.*\n\n  - **reservedFor.name** (string), required\n\n    Name is the name of resource being referenced.\n\n  - **reservedFor.resource** (string), required\n\n    Resource is the type of resource being referenced, for example \"pods\".\n\n  - **reservedFor.uid** (string), required\n\n    UID identifies exactly one incarnation of the resource.\n\n  - **reservedFor.apiGroup** (string)\n\n    APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.\n\n## ResourceClaimList\n\nResourceClaimList is a collection of claims.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClaimList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][ResourceClaim](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaim)), required\n\n  Items is the list of resource claims.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/)"
- name: ResourceClaimList
  id: workload-resources/resource-claim-v1alpha2/index#ResourceClaimList
  summary: ResourceClaimList is a collection of claims
  belongs_to: ResourceClaim v1alpha2
  description: "## ResourceClaimList\n\nResourceClaimList is a collection of claims.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClaimList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][ResourceClaim](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaim)), required\n\n  Items is the list of resource claims.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/)"
- name: ResourceClaimSpec
  id: workload-resources/resource-claim-v1alpha2/index#ResourceClaimSpec
  summary: ResourceClaimSpec defines how a resource is to be allocated
  belongs_to: ResourceClaim v1alpha2
  description: |-
    ## ResourceClaimSpec

    ResourceClaimSpec defines how a resource is to be allocated.

    - **resourceClassName** (string), required

      ResourceClassName references the driver and additional parameters via the name of a ResourceClass that was created as part of the driver deployment.

    - **allocationMode** (string)

      Allocation can start immediately or when a Pod wants to use the resource. "WaitForFirstConsumer" is the default.

    - **parametersRef** (ResourceClaimParametersReference)

      ParametersRef references a separate object with arbitrary parameters that will be used by the driver when allocating a resource for the claim.

      The object must be in the same namespace as the ResourceClaim.

      *ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.*

      - **parametersRef.kind** (string), required

        Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example "ConfigMap".

      - **parametersRef.name** (string), required

        Name is the name of resource being referenced.

      - **parametersRef.apiGroup** (string)

        APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.

    &nbsp;
- name: ResourceClaimStatus
  id: workload-resources/resource-claim-v1alpha2/index#ResourceClaimStatus
  summary: ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are
  belongs_to: ResourceClaim v1alpha2
  description: |-
    ## ResourceClaimStatus

    ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.

    - **allocation** (AllocationResult)

      Allocation is set by the resource driver once a resource or set of resources has been allocated successfully. If this is not specified, the resources have not been allocated yet.

      *AllocationResult contains attributes of an allocated resource.*

      - **allocation.availableOnNodes** (NodeSelector)

        This field will get set by the resource driver after it has allocated the resource to inform the scheduler where it can schedule Pods using the ResourceClaim.

        Setting this field is optional. If null, the resource is available everywhere.

        *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*

        - **allocation.availableOnNodes.nodeSelectorTerms** (\[\]NodeSelectorTerm), required

          Required. A list of node selector terms. The terms are ORed.

          *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*

          - **allocation.availableOnNodes.nodeSelectorTerms.matchExpressions** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

            A list of node selector requirements by node's labels.

          - **allocation.availableOnNodes.nodeSelectorTerms.matchFields** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

            A list of node selector requirements by node's fields.

      - **allocation.resourceHandles** (\[\]ResourceHandle)

        *Atomic: will be replaced during a merge*

        ResourceHandles contain the state associated with an allocation that should be maintained throughout the lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific kubelet plugin once it lands on a node. This data is returned by the driver after a successful allocation and is opaque to Kubernetes. Driver documentation may explain to users how to interpret this data if needed.

        Setting this field is optional. It has a maximum size of 32 entries. If null (or empty), it is assumed this allocation will be processed by a single kubelet plugin with no ResourceHandle data attached. The name of the kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus this AllocationResult is embedded in.

        *ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.*

        - **allocation.resourceHandles.data** (string)

          Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.

          The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.

        - **allocation.resourceHandles.driverName** (string)

          DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.

      - **allocation.shareable** (boolean)

        Shareable determines whether the resource supports more than one consumer at a time.

    - **deallocationRequested** (boolean)

      DeallocationRequested indicates that a ResourceClaim is to be deallocated.

      The driver then must deallocate this claim and reset the field together with clearing the Allocation field.

      While DeallocationRequested is set, no new consumers may be added to ReservedFor.

    - **driverName** (string)

      DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.

    - **reservedFor** (\[\]ResourceClaimConsumerReference)

      *Map: unique values on key uid will be kept during a merge*

      ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.

      There can be at most 32 such reservations. This may get increased in the future, but not reduced.

      *ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.*

      - **reservedFor.name** (string), required

        Name is the name of resource being referenced.

      - **reservedFor.resource** (string), required

        Resource is the type of resource being referenced, for example "pods".

      - **reservedFor.uid** (string), required

        UID identifies exactly one incarnation of the resource.

      - **reservedFor.apiGroup** (string)

        APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.

    &nbsp;
- name: ResourceClaimTemplate
  id: workload-resources/resource-claim-template-v1alpha2/index#ResourceClaimTemplate
  summary: ResourceClaimTemplate is used to produce ResourceClaim objects
  belongs_to: ResourceClaimTemplate v1alpha2
  description: |-
    ## ResourceClaimTemplate

    ResourceClaimTemplate is used to produce ResourceClaim objects.

    - **apiVersion**: resource.k8s.io/v1alpha2

    - **kind**: ResourceClaimTemplate

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      Standard object metadata

    - **spec** ([ResourceClaimTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/#ResourceClaimTemplateSpec)), required

      Describes the ResourceClaim that is to be generated.

      This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.
- name: ResourceClaimTemplate v1alpha2
  id: workload-resources/resource-claim-template-v1alpha2/index
  summary: ResourceClaimTemplate is used to produce ResourceClaim objects
  description: "# ResourceClaimTemplate v1alpha2\n\nResourceClaimTemplate is used to produce ResourceClaim objects.\n\n`apiVersion: resource.k8s.io/v1alpha2`\n\n`import \"k8s.io/api/resource/v1alpha2\"`\n\n## ResourceClaimTemplate\n\nResourceClaimTemplate is used to produce ResourceClaim objects.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClaimTemplate\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata\n\n- **spec** ([ResourceClaimTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/#ResourceClaimTemplateSpec)), required\n\n  Describes the ResourceClaim that is to be generated.\n\n  This field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.\n\n## ResourceClaimTemplateSpec\n\nResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.\n\n- **spec** ([ResourceClaimSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaimSpec)), required\n\n  Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.\n\n## ResourceClaimTemplateList\n\nResourceClaimTemplateList is a collection of claim templates.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClaimTemplateList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][ResourceClaimTemplate](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/#ResourceClaimTemplate)), required\n\n  Items is the list of resource claim templates.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/)"
- name: ResourceClaimTemplateList
  id: workload-resources/resource-claim-template-v1alpha2/index#ResourceClaimTemplateList
  summary: ResourceClaimTemplateList is a collection of claim templates
  belongs_to: ResourceClaimTemplate v1alpha2
  description: "## ResourceClaimTemplateList\n\nResourceClaimTemplateList is a collection of claim templates.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClaimTemplateList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][ResourceClaimTemplate](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/#ResourceClaimTemplate)), required\n\n  Items is the list of resource claim templates.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-template-v1alpha2/)"
- name: ResourceClaimTemplateSpec
  id: workload-resources/resource-claim-template-v1alpha2/index#ResourceClaimTemplateSpec
  summary: ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim
  belongs_to: ResourceClaimTemplate v1alpha2
  description: |-
    ## ResourceClaimTemplateSpec

    ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.

    - **spec** ([ResourceClaimSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-claim-v1alpha2/#ResourceClaimSpec)), required

      Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.

    &nbsp;
- name: ResourceClass
  id: workload-resources/resource-class-v1alpha2/index#ResourceClass
  summary: ResourceClass is used by administrators to influence how resources are allocated
  belongs_to: ResourceClass v1alpha2
  description: |-
    ## ResourceClass

    ResourceClass is used by administrators to influence how resources are allocated.

    This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.

    - **apiVersion**: resource.k8s.io/v1alpha2

    - **kind**: ResourceClass

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      Standard object metadata

    - **driverName** (string), required

      DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.

      Resource drivers have a unique name in forward domain order (acme.example.com).

    - **parametersRef** (ResourceClassParametersReference)

      ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.

      *ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.*

      - **parametersRef.kind** (string), required

        Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.

      - **parametersRef.name** (string), required

        Name is the name of resource being referenced.

      - **parametersRef.apiGroup** (string)

        APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.

      - **parametersRef.namespace** (string)

        Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.

    - **suitableNodes** (NodeSelector)

      Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.

      Setting this field is optional. If null, all nodes are candidates.

      *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*

      - **suitableNodes.nodeSelectorTerms** (\[\]NodeSelectorTerm), required

        Required. A list of node selector terms. The terms are ORed.

        *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*

        - **suitableNodes.nodeSelectorTerms.matchExpressions** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's labels.

        - **suitableNodes.nodeSelectorTerms.matchFields** (\[\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))

          A list of node selector requirements by node's fields.
- name: ResourceClass v1alpha2
  id: workload-resources/resource-class-v1alpha2/index
  summary: ResourceClass is used by administrators to influence how resources are allocated
  description: "# ResourceClass v1alpha2\n\nResourceClass is used by administrators to influence how resources are allocated.\n\n`apiVersion: resource.k8s.io/v1alpha2`\n\n`import \"k8s.io/api/resource/v1alpha2\"`\n\n## ResourceClass\n\nResourceClass is used by administrators to influence how resources are allocated.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClass\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata\n\n- **driverName** (string), required\n\n  DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.\n\n  Resource drivers have a unique name in forward domain order (acme.example.com).\n\n- **parametersRef** (ResourceClassParametersReference)\n\n  ParametersRef references an arbitrary separate object that may hold parameters that will be used by the driver when allocating a resource that uses this class. A dynamic resource driver can distinguish between parameters stored here and and those stored in ResourceClaimSpec.\n\n  *ResourceClassParametersReference contains enough information to let you locate the parameters for a ResourceClass.*\n\n  - **parametersRef.kind** (string), required\n\n    Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata.\n\n  - **parametersRef.name** (string), required\n\n    Name is the name of resource being referenced.\n\n  - **parametersRef.apiGroup** (string)\n\n    APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.\n\n  - **parametersRef.namespace** (string)\n\n    Namespace that contains the referenced resource. Must be empty for cluster-scoped resources and non-empty for namespaced resources.\n\n- **suitableNodes** (NodeSelector)\n\n  Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.\n\n  Setting this field is optional. If null, all nodes are candidates.\n\n  *A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.*\n\n  - **suitableNodes.nodeSelectorTerms** (\\[\\]NodeSelectorTerm), required\n\n    Required. A list of node selector terms. The terms are ORed.\n\n    *A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.*\n\n    - **suitableNodes.nodeSelectorTerms.matchExpressions** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's labels.\n\n    - **suitableNodes.nodeSelectorTerms.matchFields** (\\[\\][NodeSelectorRequirement](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-selector-requirement/#NodeSelectorRequirement))\n\n      A list of node selector requirements by node's fields.\n\n## ResourceClassList\n\nResourceClassList is a collection of classes.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClassList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][ResourceClass](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-class-v1alpha2/#ResourceClass)), required\n\n  Items is the list of resource classes.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-class-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-class-v1alpha2/)"
- name: ResourceClassList
  id: workload-resources/resource-class-v1alpha2/index#ResourceClassList
  summary: ResourceClassList is a collection of classes
  belongs_to: ResourceClass v1alpha2
  description: "## ResourceClassList\n\nResourceClassList is a collection of classes.\n\n- **apiVersion**: resource.k8s.io/v1alpha2\n\n- **kind**: ResourceClassList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata\n\n- **items** (\\[\\][ResourceClass](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-class-v1alpha2/#ResourceClass)), required\n\n  Items is the list of resource classes.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-class-v1alpha2/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/resource-class-v1alpha2/)"
- name: ResourceFieldSelector
  id: common-definitions/resource-field-selector/index
  summary: ResourceFieldSelector represents container resources (cpu, memory) and their output format
  description: "# ResourceFieldSelector\n\nResourceFieldSelector represents container resources (cpu, memory) and their output format.\n\n`import \"k8s.io/api/core/v1\"`\n\nResourceFieldSelector represents container resources (cpu, memory) and their output format\n\n- **resource** (string), required\n\n  Required: resource to select\n\n- **containerName** (string)\n\n  Container name: required for volumes, optional for env vars\n\n- **divisor** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Specifies the output format of the exposed resources, defaults to \"1\"\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/)"
- name: ResourceQuota
  id: policy-resources/resource-quota-v1/index
  summary: ResourceQuota sets aggregate quota restrictions enforced per namespace
  description: "# ResourceQuota\n\nResourceQuota sets aggregate quota restrictions enforced per namespace.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## ResourceQuota\n\nResourceQuota sets aggregate quota restrictions enforced per namespace\n\n- **apiVersion**: v1\n\n- **kind**: ResourceQuota\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([ResourceQuotaSpec](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/#ResourceQuotaSpec))\n\n  Spec defines the desired quota. <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([ResourceQuotaStatus](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/#ResourceQuotaStatus))\n\n  Status defines the actual enforced quota and its current usage. <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## ResourceQuotaSpec\n\nResourceQuotaSpec defines the desired hard limits to enforce for Quota.\n\n- **hard** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  hard is the set of desired hard limits for each named resource. More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>\n\n- **scopeSelector** (ScopeSelector)\n\n  scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.\n\n  *A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.*\n\n  - **scopeSelector.matchExpressions** (\\[\\]ScopedResourceSelectorRequirement)\n\n    A list of scope selector requirements by scope of the resources.\n\n    *A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.*\n\n    - **scopeSelector.matchExpressions.operator** (string), required\n\n      Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.\n\n    - **scopeSelector.matchExpressions.scopeName** (string), required\n\n      The name of the scope that the selector applies to.\n\n    - **scopeSelector.matchExpressions.values** (\\[\\]string)\n\n      An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\n\n- **scopes** (\\[\\]string)\n\n  A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.\n\n## ResourceQuotaStatus\n\nResourceQuotaStatus defines the enforced hard limits and observed use.\n\n- **hard** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Hard is the set of enforced hard limits for each named resource. More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>\n\n- **used** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Used is the current observed total usage of the resource in the namespace.\n\n## ResourceQuotaList\n\nResourceQuotaList is a list of ResourceQuota items.\n\n- **apiVersion**: v1\n\n- **kind**: ResourceQuotaList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ResourceQuota](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/#ResourceQuota)), required\n\n  Items is a list of ResourceQuota objects. More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/)"
- name: ResourceQuota.Spec
  id: policy-resources/resource-quota-v1/index#ResourceQuotaSpec
  summary: ResourceQuotaSpec defines the desired hard limits to enforce for Quota
  belongs_to: ResourceQuota
  description: |-
    ## ResourceQuotaSpec

    ResourceQuotaSpec defines the desired hard limits to enforce for Quota.

    - **hard** (map\[string\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))

      hard is the set of desired hard limits for each named resource. More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>

    - **scopeSelector** (ScopeSelector)

      scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.

      *A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.*

      - **scopeSelector.matchExpressions** (\[\]ScopedResourceSelectorRequirement)

        A list of scope selector requirements by scope of the resources.

        *A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.*

        - **scopeSelector.matchExpressions.operator** (string), required

          Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.

        - **scopeSelector.matchExpressions.scopeName** (string), required

          The name of the scope that the selector applies to.

        - **scopeSelector.matchExpressions.values** (\[\]string)

          An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.

    - **scopes** (\[\]string)

      A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.

    &nbsp;
- name: ResourceQuota.Status
  id: policy-resources/resource-quota-v1/index#ResourceQuotaStatus
  summary: ResourceQuotaStatus defines the enforced hard limits and observed use
  belongs_to: ResourceQuota
  description: "## ResourceQuotaStatus\n\nResourceQuotaStatus defines the enforced hard limits and observed use.\n\n- **hard** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Hard is the set of enforced hard limits for each named resource. More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>\n\n- **used** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n  Used is the current observed total usage of the resource in the namespace.\n\n## ResourceQuotaList\n\nResourceQuotaList is a list of ResourceQuota items.\n\n- **apiVersion**: v1\n\n- **kind**: ResourceQuotaList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ResourceQuota](https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/#ResourceQuota)), required\n\n  Items is a list of ResourceQuota objects. More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/)"
- name: resourceVersion
  id: common-parameters/common-parameters/index#resourceVersion
  summary: resourceVersion sets a constraint on what resource versions a request may be served from
  belongs_to: Common Parameters
  description: |-
    ## resourceVersion

    resourceVersion sets a constraint on what resource versions a request may be served from. See <https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions> for details.

    Defaults to unset
- name: resourceVersionMatch
  id: common-parameters/common-parameters/index#resourceVersionMatch
  summary: resourceVersionMatch determines how resourceVersion is applied to list calls
  belongs_to: Common Parameters
  description: |-
    ## resourceVersionMatch

    resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See <https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions> for details.

    Defaults to unset
- name: Role
  id: authorization-resources/role-v1/index
  summary: Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding
  description: "# Role\n\nRole is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\n\n`apiVersion: rbac.authorization.k8s.io/v1`\n\n`import \"k8s.io/api/rbac/v1\"`\n\n## Role\n\nRole is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: Role\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata.\n\n- **rules** (\\[\\]PolicyRule)\n\n  Rules holds all the PolicyRules for this Role\n\n  *PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.*\n\n  - **rules.apiGroups** (\\[\\]string)\n\n    APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"\\*\" represents all API groups.\n\n  - **rules.resources** (\\[\\]string)\n\n    Resources is a list of resources this rule applies to. '\\*' represents all resources.\n\n  - **rules.verbs** (\\[\\]string), required\n\n    Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '\\*' represents all verbs.\n\n  - **rules.resourceNames** (\\[\\]string)\n\n    ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n  - **rules.nonResourceURLs** (\\[\\]string)\n\n    NonResourceURLs is a set of partial urls that a user should have access to. \\*s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both.\n\n## RoleList\n\nRoleList is a collection of Roles\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: RoleList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata.\n\n- **items** (\\[\\][Role](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-v1/#Role)), required\n\n  Items is a list of Roles\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-v1/)"
- name: RoleBinding
  id: authorization-resources/role-binding-v1/index
  summary: RoleBinding references a role, but does not contain it
  description: "# RoleBinding\n\nRoleBinding references a role, but does not contain it.\n\n`apiVersion: rbac.authorization.k8s.io/v1`\n\n`import \"k8s.io/api/rbac/v1\"`\n\n## RoleBinding\n\nRoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace.\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: RoleBinding\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata.\n\n- **roleRef** (RoleRef), required\n\n  RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.\n\n  *RoleRef contains information that points to the role being used*\n\n  - **roleRef.apiGroup** (string), required\n\n    APIGroup is the group for the resource being referenced\n\n  - **roleRef.kind** (string), required\n\n    Kind is the type of resource being referenced\n\n  - **roleRef.name** (string), required\n\n    Name is the name of resource being referenced\n\n- **subjects** (\\[\\]Subject)\n\n  Subjects holds references to the objects the role applies to.\n\n  *Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names.*\n\n  - **subjects.kind** (string), required\n\n    Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\n\n  - **subjects.name** (string), required\n\n    Name of the object being referenced.\n\n  - **subjects.apiGroup** (string)\n\n    APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.\n\n  - **subjects.namespace** (string)\n\n    Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.\n\n## RoleBindingList\n\nRoleBindingList is a collection of RoleBindings\n\n- **apiVersion**: rbac.authorization.k8s.io/v1\n\n- **kind**: RoleBindingList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard object's metadata.\n\n- **items** (\\[\\][RoleBinding](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-binding-v1/#RoleBinding)), required\n\n  Items is a list of RoleBindings\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-binding-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-binding-v1/)"
- name: RuntimeClass
  id: cluster-resources/runtime-class-v1/index
  summary: RuntimeClass defines a class of container runtime supported in the cluster
  description: "# RuntimeClass\n\nRuntimeClass defines a class of container runtime supported in the cluster.\n\n`apiVersion: node.k8s.io/v1`\n\n`import \"k8s.io/api/node/v1\"`\n\n## RuntimeClass\n\nRuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod. For more details, see <https://kubernetes.io/docs/concepts/containers/runtime-class/>\n\n- **apiVersion**: node.k8s.io/v1\n\n- **kind**: RuntimeClass\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **handler** (string), required\n\n  handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.\n\n- **overhead** (Overhead)\n\n  overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see <https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/>\n\n  *Overhead structure represents the resource overhead associated with running a pod.*\n\n  - **overhead.podFixed** (map\\[string\\][Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    podFixed represents the fixed resource overhead associated with running a pod.\n\n- **scheduling** (Scheduling)\n\n  scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.\n\n  *Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.*\n\n  - **scheduling.nodeSelector** (map\\[string\\]string)\n\n    nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.\n\n  - **scheduling.tolerations** (\\[\\]Toleration)\n\n    *Atomic: will be replaced during a merge*\n\n    tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.\n\n    *The pod this Toleration is attached to tolerates any taint that matches the triple \\<key,value,effect\\> using the matching operator .*\n\n    - **scheduling.tolerations.key** (string)\n\n      Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n\n    - **scheduling.tolerations.operator** (string)\n\n      Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\n    - **scheduling.tolerations.value** (string)\n\n      Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n\n    - **scheduling.tolerations.effect** (string)\n\n      Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\n    - **scheduling.tolerations.tolerationSeconds** (int64)\n\n      TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n\n## RuntimeClassList\n\nRuntimeClassList is a list of RuntimeClass objects.\n\n- **apiVersion**: node.k8s.io/v1\n\n- **kind**: RuntimeClassList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][RuntimeClass](https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/runtime-class-v1/#RuntimeClass)), required\n\n  items is a list of schema objects.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/runtime-class-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/cluster-resources/runtime-class-v1/)"
- name: Secret
  id: config-and-storage-resources/secret-v1/index
  summary: Secret holds secret data of a certain type
  description: "# Secret\n\nSecret holds secret data of a certain type.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## Secret\n\nSecret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.\n\n- **apiVersion**: v1\n\n- **kind**: Secret\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **data** (map\\[string\\]\\[\\]byte)\n\n  Data contains the secret data. Each key must consist of alphanumeric characters, '-', '\\_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in <https://tools.ietf.org/html/rfc4648#section-4>\n\n- **immutable** (boolean)\n\n  Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.\n\n- **stringData** (map\\[string\\]string)\n\n  stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.\n\n- **type** (string)\n\n  Used to facilitate programmatic handling of secret data. More info: <https://kubernetes.io/docs/concepts/configuration/secret/#secret-types>\n\n## SecretList\n\nSecretList is a list of Secret.\n\n- **apiVersion**: v1\n\n- **kind**: SecretList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Secret](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/secret-v1/#Secret)), required\n\n  Items is a list of secret objects. More info: <https://kubernetes.io/docs/concepts/configuration/secret>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/secret-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/secret-v1/)"
- name: SelfSubjectAccessReview
  id: authorization-resources/self-subject-access-review-v1/index
  summary: SelfSubjectAccessReview checks whether or the current user can perform an action
  description: "# SelfSubjectAccessReview\n\nSelfSubjectAccessReview checks whether or the current user can perform an action.\n\n`apiVersion: authorization.k8s.io/v1`\n\n`import \"k8s.io/api/authorization/v1\"`\n\n## SelfSubjectAccessReview\n\nSelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a spec.namespace means \"in all namespaces\". Self is a special case, because users should always be able to check whether they can perform an action\n\n- **apiVersion**: authorization.k8s.io/v1\n\n- **kind**: SelfSubjectAccessReview\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([SelfSubjectAccessReviewSpec](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/#SelfSubjectAccessReviewSpec)), required\n\n  Spec holds information about the request being evaluated. user and groups must be empty\n\n- **status** ([SubjectAccessReviewStatus](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/#SubjectAccessReviewStatus))\n\n  Status is filled in by the server and indicates whether the request is allowed or not\n\n## SelfSubjectAccessReviewSpec\n\nSelfSubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\n\n- **nonResourceAttributes** (NonResourceAttributes)\n\n  NonResourceAttributes describes information for a non-resource access request\n\n  *NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface*\n\n  - **nonResourceAttributes.path** (string)\n\n    Path is the URL path of the request\n\n  - **nonResourceAttributes.verb** (string)\n\n    Verb is the standard HTTP verb\n\n- **resourceAttributes** (ResourceAttributes)\n\n  ResourceAuthorizationAttributes describes information for a resource access request\n\n  *ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface*\n\n  - **resourceAttributes.group** (string)\n\n    Group is the API Group of the Resource. \"\\*\" means all.\n\n  - **resourceAttributes.name** (string)\n\n    Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n\n  - **resourceAttributes.namespace** (string)\n\n    Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n\n  - **resourceAttributes.resource** (string)\n\n    Resource is one of the existing resource types. \"\\*\" means all.\n\n  - **resourceAttributes.subresource** (string)\n\n    Subresource is one of the existing resource types. \"\" means none.\n\n  - **resourceAttributes.verb** (string)\n\n    Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. \"\\*\" means all.\n\n  - **resourceAttributes.version** (string)\n\n    Version is the API Version of the Resource. \"\\*\" means all.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/)"
- name: SelfSubjectAccessReview.Spec
  id: authorization-resources/self-subject-access-review-v1/index#SelfSubjectAccessReviewSpec
  summary: SelfSubjectAccessReviewSpec is a description of the access request
  belongs_to: SelfSubjectAccessReview
  description: "## SelfSubjectAccessReviewSpec\n\nSelfSubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\n\n- **nonResourceAttributes** (NonResourceAttributes)\n\n  NonResourceAttributes describes information for a non-resource access request\n\n  *NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface*\n\n  - **nonResourceAttributes.path** (string)\n\n    Path is the URL path of the request\n\n  - **nonResourceAttributes.verb** (string)\n\n    Verb is the standard HTTP verb\n\n- **resourceAttributes** (ResourceAttributes)\n\n  ResourceAuthorizationAttributes describes information for a resource access request\n\n  *ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface*\n\n  - **resourceAttributes.group** (string)\n\n    Group is the API Group of the Resource. \"\\*\" means all.\n\n  - **resourceAttributes.name** (string)\n\n    Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n\n  - **resourceAttributes.namespace** (string)\n\n    Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n\n  - **resourceAttributes.resource** (string)\n\n    Resource is one of the existing resource types. \"\\*\" means all.\n\n  - **resourceAttributes.subresource** (string)\n\n    Subresource is one of the existing resource types. \"\" means none.\n\n  - **resourceAttributes.verb** (string)\n\n    Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. \"\\*\" means all.\n\n  - **resourceAttributes.version** (string)\n\n    Version is the API Version of the Resource. \"\\*\" means all.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/)"
- name: SelfSubjectReview
  id: authentication-resources/self-subject-review-v1/index
  summary: SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request
  description: "# SelfSubjectReview\n\nSelfSubjectReview contains the user information that the kube-apiserver has about the user making this request.\n\n`apiVersion: authentication.k8s.io/v1`\n\n`import \"k8s.io/api/authentication/v1\"`\n\n## SelfSubjectReview\n\nSelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated. If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.\n\n- **apiVersion**: authentication.k8s.io/v1\n\n- **kind**: SelfSubjectReview\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **status** ([SelfSubjectReviewStatus](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/self-subject-review-v1/#SelfSubjectReviewStatus))\n\n  Status is filled in by the server with the user attributes.\n\n## SelfSubjectReviewStatus\n\nSelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.\n\n- **userInfo** (UserInfo)\n\n  User attributes of the user making this request.\n\n  *UserInfo holds the information about the user needed to implement the user.Info interface.*\n\n  - **userInfo.extra** (map\\[string\\]\\[\\]string)\n\n    Any additional information provided by the authenticator.\n\n  - **userInfo.groups** (\\[\\]string)\n\n    The names of groups this user is a part of.\n\n  - **userInfo.uid** (string)\n\n    A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n\n  - **userInfo.username** (string)\n\n    The name that uniquely identifies this user among all active users.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/self-subject-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/self-subject-review-v1/)"
- name: SelfSubjectReview.Status
  id: authentication-resources/self-subject-review-v1/index#SelfSubjectReviewStatus
  summary: SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user
  belongs_to: SelfSubjectReview
  description: "## SelfSubjectReviewStatus\n\nSelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.\n\n- **userInfo** (UserInfo)\n\n  User attributes of the user making this request.\n\n  *UserInfo holds the information about the user needed to implement the user.Info interface.*\n\n  - **userInfo.extra** (map\\[string\\]\\[\\]string)\n\n    Any additional information provided by the authenticator.\n\n  - **userInfo.groups** (\\[\\]string)\n\n    The names of groups this user is a part of.\n\n  - **userInfo.uid** (string)\n\n    A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n\n  - **userInfo.username** (string)\n\n    The name that uniquely identifies this user among all active users.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/self-subject-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/self-subject-review-v1/)"
- name: SelfSubjectRulesReview
  id: authorization-resources/self-subject-rules-review-v1/index
  summary: SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace
  description: "# SelfSubjectRulesReview\n\nSelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace.\n\n`apiVersion: authorization.k8s.io/v1`\n\n`import \"k8s.io/api/authorization/v1\"`\n\n## SelfSubjectRulesReview\n\nSelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.\n\n- **apiVersion**: authorization.k8s.io/v1\n\n- **kind**: SelfSubjectRulesReview\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([SelfSubjectRulesReviewSpec](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-rules-review-v1/#SelfSubjectRulesReviewSpec)), required\n\n  Spec holds information about the request being evaluated.\n\n- **status** (SubjectRulesReviewStatus)\n\n  Status is filled in by the server and indicates the set of actions a user can perform.\n\n  *SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.*\n\n  - **status.incomplete** (boolean), required\n\n    Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.\n\n  - **status.nonResourceRules** (\\[\\]NonResourceRule), required\n\n    NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.\n\n    *NonResourceRule holds information that describes a rule for the non-resource*\n\n    - **status.nonResourceRules.verbs** (\\[\\]string), required\n\n      Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options. \"\\*\" means all.\n\n    - **status.nonResourceRules.nonResourceURLs** (\\[\\]string)\n\n      NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path. \"*\" means all.\n\n  - **status.resourceRules** (\\[\\]ResourceRule), required\n\n    ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.\n\n    *ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.*\n\n    - **status.resourceRules.verbs** (\\[\\]string), required\n\n      Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy. \"\\*\" means all.\n\n    - **status.resourceRules.apiGroups** (\\[\\]string)\n\n      APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\\*\" means all.\n\n    - **status.resourceRules.resourceNames** (\\[\\]string)\n\n      ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. \"\\*\" means all.\n\n    - **status.resourceRules.resources** (\\[\\]string)\n\n      Resources is a list of resources this rule applies to. \"*\" means all in the specified apiGroups. \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.\n\n  - **status.evaluationError** (string)\n\n    EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.\n\n## SelfSubjectRulesReviewSpec\n\nSelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.\n\n- **namespace** (string)\n\n  Namespace to evaluate rules for. Required.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-rules-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-rules-review-v1/)"
- name: SelfSubjectRulesReview.Spec
  id: authorization-resources/self-subject-rules-review-v1/index#SelfSubjectRulesReviewSpec
  summary: SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview
  belongs_to: SelfSubjectRulesReview
  description: "## SelfSubjectRulesReviewSpec\n\nSelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.\n\n- **namespace** (string)\n\n  Namespace to evaluate rules for. Required.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-rules-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-rules-review-v1/)"
- name: sendInitialEvents
  id: common-parameters/common-parameters/index#sendInitialEvents
  summary: sendInitialEvents=true may be set together with watch=true
  belongs_to: Common Parameters
  description: |-
    ## sendInitialEvents

    `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.

    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan is interpreted as "data at least as new as the provided `resourceVersion`" and the bookmark event is send when the state is synced to a `resourceVersion` at least as fresh as the one provided by the ListOptions. If `resourceVersion` is unset, this is interpreted as "consistent read" and the bookmark event is send when the state is synced at least to the moment when request started being processed.

    - `resourceVersionMatch` set to any other value or unset Invalid error is returned.

    Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
- name: Service
  id: service-resources/service-v1/index
  summary: Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy
  description: "# Service\n\nService is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## Service\n\nService is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.\n\n- **apiVersion**: v1\n\n- **kind**: Service\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([ServiceSpec](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec))\n\n  Spec defines the behavior of a service. <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n- **status** ([ServiceStatus](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceStatus))\n\n  Most recently observed status of the service. Populated by the system. Read-only. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n## ServiceSpec\n\nServiceSpec describes the attributes that a user creates on a service.\n\n- **selector** (map\\[string\\]string)\n\n  Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: <https://kubernetes.io/docs/concepts/services-networking/service/>\n\n- **ports** (\\[\\]ServicePort)\n\n  *Patch strategy: merge on key `port`*\n\n  *Map: unique values on keys `port, protocol` will be kept during a merge*\n\n  The list of ports that are exposed by this service. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>\n\n  *ServicePort contains information on service's port.*\n\n  - **ports.port** (int32), required\n\n    The port that will be exposed by this service.\n\n  - **ports.targetPort** (IntOrString)\n\n    Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service>\n\n    *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n  - **ports.protocol** (string)\n\n    The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.\n\n  - **ports.name** (string)\n\n    The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.\n\n  - **ports.nodePort** (int32)\n\n    The port on each node on which this service is exposed when type is NodePort or LoadBalancer. Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail. If not specified, a port will be allocated if this Service requires one. If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: <https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport>\n\n  - **ports.appProtocol** (string)\n\n    The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n    - Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and <https://www.iana.org/assignments/service-names)>.\n\n    - Kubernetes-defined prefixed names:\n\n      - 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in <https://www.rfc-editor.org/rfc/rfc7540>\n      - 'kubernetes.io/ws' - WebSocket over cleartext as described in <https://www.rfc-editor.org/rfc/rfc6455>\n      - 'kubernetes.io/wss' - WebSocket over TLS as described in <https://www.rfc-editor.org/rfc/rfc6455>\n\n    - Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.\n\n- **type** (string)\n\n  type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types>\n\n- **ipFamilies** (\\[\\]string)\n\n  *Atomic: will be replaced during a merge*\n\n  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\". This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName.\n\n  This field may hold a maximum of two entries (dual-stack families, in either order). These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.\n\n- **ipFamilyPolicy** (string)\n\n  IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.\n\n- **clusterIP** (string)\n\n  clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above). Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>\n\n- **clusterIPs** (\\[\\]string)\n\n  *Atomic: will be replaced during a merge*\n\n  ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above). Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. If this field is not specified, it will be initialized from the clusterIP field. If this field is specified, clients must ensure that clusterIPs\\[0\\] and clusterIP have the same value.\n\n  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>\n\n- **externalIPs** (\\[\\]string)\n\n  externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system.\n\n- **sessionAffinity** (string)\n\n  Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>\n\n- **loadBalancerIP** (string)\n\n  Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.\n\n- **loadBalancerSourceRanges** (\\[\\]string)\n\n  If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: <https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/>\n\n- **loadBalancerClass** (string)\n\n  loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.\n\n- **externalName** (string)\n\n  externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved. Must be a lowercase RFC-1123 hostname (<https://tools.ietf.org/html/rfc1123>) and requires `type` to be \"ExternalName\".\n\n- **externalTrafficPolicy** (string)\n\n  externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.\n\n- **internalTrafficPolicy** (string)\n\n  InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to \"Local\", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).\n\n- **healthCheckNodePort** (int32)\n\n  healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used. If not specified, a value will be automatically allocated. External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not. If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.\n\n- **publishNotReadyAddresses** (boolean)\n\n  publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.\n\n- **sessionAffinityConfig** (SessionAffinityConfig)\n\n  sessionAffinityConfig contains the configurations of session affinity.\n\n  *SessionAffinityConfig represents the configurations of session affinity.*\n\n  - **sessionAffinityConfig.clientIP** (ClientIPConfig)\n\n    clientIP contains the configurations of Client IP based session affinity.\n\n    *ClientIPConfig represents the configurations of Client IP based session affinity.*\n\n    - **sessionAffinityConfig.clientIP.timeoutSeconds** (int32)\n\n      timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be \\>0 && \\<=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).\n\n- **allocateLoadBalancerNodePorts** (boolean)\n\n  allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer. Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts. If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.\n\n## ServiceStatus\n\nServiceStatus represents the current status of a service.\n\n- **conditions** (\\[\\]Condition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  Current service state\n\n  *Condition contains details for one aspect of the current state of this API Resource.*\n\n  - **conditions.lastTransitionTime** (Time), required\n\n    lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string), required\n\n    message is a human readable message indicating details about the transition. This may be an empty string.\n\n  - **conditions.reason** (string), required\n\n    reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.\n\n  - **conditions.status** (string), required\n\n    status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    type of condition in CamelCase or in foo.example.com/CamelCase.\n\n  - **conditions.observedGeneration** (int64)\n\n    observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions\\[x\\].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.\n\n- **loadBalancer** (LoadBalancerStatus)\n\n  LoadBalancer contains the current status of the load-balancer, if one is present.\n\n  *LoadBalancerStatus represents the status of a load-balancer.*\n\n  - **loadBalancer.ingress** (\\[\\]LoadBalancerIngress)\n\n    Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.\n\n    *LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.*\n\n    - **loadBalancer.ingress.hostname** (string)\n\n      Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)\n\n    - **loadBalancer.ingress.ip** (string)\n\n      IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)\n\n    - **loadBalancer.ingress.ipMode** (string)\n\n      IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to \"VIP\" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to \"Proxy\" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing.\n\n    - **loadBalancer.ingress.ports** (\\[\\]PortStatus)\n\n      *Atomic: will be replaced during a merge*\n\n      Ports is a list of records of service ports If used, every port defined in the service should have an entry in it\n\n      \\*\\*\n\n      - **loadBalancer.ingress.ports.port** (int32), required\n\n        Port is the port number of the service port of which status is recorded here\n\n      - **loadBalancer.ingress.ports.protocol** (string), required\n\n        Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\n      - **loadBalancer.ingress.ports.error** (string)\n\n        Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names\n\n        - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase.\n\n## ServiceList\n\nServiceList holds a list of services.\n\n- **apiVersion**: v1\n\n- **kind**: ServiceList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Service](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#Service)), required\n\n  List of services\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/)"
- name: Service Resources
  id: service-resources/index
  summary: Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy
  description: "# Service Resources\n\n##### [Service](service-v1/index)\n\nService is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.\n\n##### [Endpoints](endpoints-v1/index)\n\nEndpoints is a collection of endpoints that implement the actual service.\n\n##### [EndpointSlice](endpoint-slice-v1/index)\n\nEndpointSlice represents a subset of the endpoints that implement a service.\n\n##### [Ingress](ingress-v1/index)\n\nIngress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend.\n\n##### [IngressClass](ingress-class-v1/index)\n\nIngressClass represents the class of the Ingress, referenced by the Ingress Spec.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/)"
- name: Service.Spec
  id: service-resources/service-v1/index#ServiceSpec
  summary: ServiceSpec describes the attributes that a user creates on a service
  belongs_to: Service
  description: |-
    ## ServiceSpec

    ServiceSpec describes the attributes that a user creates on a service.

    - **selector** (map\[string\]string)

      Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: <https://kubernetes.io/docs/concepts/services-networking/service/>

    - **ports** (\[\]ServicePort)

      *Patch strategy: merge on key `port`*

      *Map: unique values on keys `port, protocol` will be kept during a merge*

      The list of ports that are exposed by this service. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>

      *ServicePort contains information on service's port.*

      - **ports.port** (int32), required

        The port that will be exposed by this service.

      - **ports.targetPort** (IntOrString)

        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service>

        *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

      - **ports.protocol** (string)

        The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.

      - **ports.name** (string)

        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.

      - **ports.nodePort** (int32)

        The port on each node on which this service is exposed when type is NodePort or LoadBalancer. Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail. If not specified, a port will be allocated if this Service requires one. If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: <https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport>

      - **ports.appProtocol** (string)

        The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:

        - Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and <https://www.iana.org/assignments/service-names)>.

        - Kubernetes-defined prefixed names:

          - 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in <https://www.rfc-editor.org/rfc/rfc7540>
          - 'kubernetes.io/ws' - WebSocket over cleartext as described in <https://www.rfc-editor.org/rfc/rfc6455>
          - 'kubernetes.io/wss' - WebSocket over TLS as described in <https://www.rfc-editor.org/rfc/rfc6455>

        - Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.

    - **type** (string)

      type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types>

    - **ipFamilies** (\[\]string)

      *Atomic: will be replaced during a merge*

      IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6". This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.

      This field may hold a maximum of two entries (dual-stack families, in either order). These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.

    - **ipFamilyPolicy** (string)

      IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.

    - **clusterIP** (string)

      clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above). Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>

    - **clusterIPs** (\[\]string)

      *Atomic: will be replaced during a merge*

      ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above). Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. If this field is not specified, it will be initialized from the clusterIP field. If this field is specified, clients must ensure that clusterIPs\[0\] and clusterIP have the same value.

      This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>

    - **externalIPs** (\[\]string)

      externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system.

    - **sessionAffinity** (string)

      Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: <https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies>

    - **loadBalancerIP** (string)

      Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.

    - **loadBalancerSourceRanges** (\[\]string)

      If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: <https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/>

    - **loadBalancerClass** (string)

      loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.

    - **externalName** (string)

      externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved. Must be a lowercase RFC-1123 hostname (<https://tools.ietf.org/html/rfc1123>) and requires `type` to be "ExternalName".

    - **externalTrafficPolicy** (string)

      externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.

    - **internalTrafficPolicy** (string)

      InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).

    - **healthCheckNodePort** (int32)

      healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used. If not specified, a value will be automatically allocated. External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not. If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.

    - **publishNotReadyAddresses** (boolean)

      publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.

    - **sessionAffinityConfig** (SessionAffinityConfig)

      sessionAffinityConfig contains the configurations of session affinity.

      *SessionAffinityConfig represents the configurations of session affinity.*

      - **sessionAffinityConfig.clientIP** (ClientIPConfig)

        clientIP contains the configurations of Client IP based session affinity.

        *ClientIPConfig represents the configurations of Client IP based session affinity.*

        - **sessionAffinityConfig.clientIP.timeoutSeconds** (int32)

          timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be \>0 && \<=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).

    - **allocateLoadBalancerNodePorts** (boolean)

      allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer. Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.

    &nbsp;
- name: Service.Status
  id: service-resources/service-v1/index#ServiceStatus
  summary: ServiceStatus represents the current status of a service
  belongs_to: Service
  description: "## ServiceStatus\n\nServiceStatus represents the current status of a service.\n\n- **conditions** (\\[\\]Condition)\n\n  *Patch strategy: merge on key `type`*\n\n  *Map: unique values on key type will be kept during a merge*\n\n  Current service state\n\n  *Condition contains details for one aspect of the current state of this API Resource.*\n\n  - **conditions.lastTransitionTime** (Time), required\n\n    lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string), required\n\n    message is a human readable message indicating details about the transition. This may be an empty string.\n\n  - **conditions.reason** (string), required\n\n    reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.\n\n  - **conditions.status** (string), required\n\n    status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    type of condition in CamelCase or in foo.example.com/CamelCase.\n\n  - **conditions.observedGeneration** (int64)\n\n    observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions\\[x\\].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.\n\n- **loadBalancer** (LoadBalancerStatus)\n\n  LoadBalancer contains the current status of the load-balancer, if one is present.\n\n  *LoadBalancerStatus represents the status of a load-balancer.*\n\n  - **loadBalancer.ingress** (\\[\\]LoadBalancerIngress)\n\n    Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.\n\n    *LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.*\n\n    - **loadBalancer.ingress.hostname** (string)\n\n      Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)\n\n    - **loadBalancer.ingress.ip** (string)\n\n      IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)\n\n    - **loadBalancer.ingress.ipMode** (string)\n\n      IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to \"VIP\" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to \"Proxy\" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing.\n\n    - **loadBalancer.ingress.ports** (\\[\\]PortStatus)\n\n      *Atomic: will be replaced during a merge*\n\n      Ports is a list of records of service ports If used, every port defined in the service should have an entry in it\n\n      \\*\\*\n\n      - **loadBalancer.ingress.ports.port** (int32), required\n\n        Port is the port number of the service port of which status is recorded here\n\n      - **loadBalancer.ingress.ports.protocol** (string), required\n\n        Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\n      - **loadBalancer.ingress.ports.error** (string)\n\n        Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names\n\n        - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase.\n\n## ServiceList\n\nServiceList holds a list of services.\n\n- **apiVersion**: v1\n\n- **kind**: ServiceList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][Service](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#Service)), required\n\n  List of services\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/)"
- name: ServiceAccount
  id: authentication-resources/service-account-v1/index
  summary: 'ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets'
  description: "# ServiceAccount\n\nServiceAccount binds together: \\* a name, understood by users, and perhaps by peripheral systems, for an identity \\* a principal that can be authenticated and authorized \\* a set of secrets.\n\n`apiVersion: v1`\n\n`import \"k8s.io/api/core/v1\"`\n\n## ServiceAccount\n\nServiceAccount binds together: \\* a name, understood by users, and perhaps by peripheral systems, for an identity \\* a principal that can be authenticated and authorized \\* a set of secrets\n\n- **apiVersion**: v1\n\n- **kind**: ServiceAccount\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **automountServiceAccountToken** (boolean)\n\n  AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.\n\n- **imagePullSecrets** (\\[\\][LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n  ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: <https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod>\n\n- **secrets** (\\[\\][ObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-reference/#ObjectReference))\n\n  *Patch strategy: merge on key `name`*\n\n  Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a \"kubernetes.io/enforce-mountable-secrets\" annotation set to \"true\". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: <https://kubernetes.io/docs/concepts/configuration/secret>\n\n## ServiceAccountList\n\nServiceAccountList is a list of ServiceAccount objects\n\n- **apiVersion**: v1\n\n- **kind**: ServiceAccountList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ServiceAccount](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/service-account-v1/#ServiceAccount)), required\n\n  List of ServiceAccounts. More info: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/service-account-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/service-account-v1/)"
- name: StatefulSet
  id: workload-resources/stateful-set-v1/index
  summary: StatefulSet represents a set of pods with consistent identities
  description: "# StatefulSet\n\nStatefulSet represents a set of pods with consistent identities.\n\n`apiVersion: apps/v1`\n\n`import \"k8s.io/api/apps/v1\"`\n\n## StatefulSet\n\nStatefulSet represents a set of pods with consistent identities. Identities are defined as:\n\n- Network: A single stable DNS and hostname.\n- Storage: As many VolumeClaims as requested.\n\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.\n\n- **apiVersion**: apps/v1\n\n- **kind**: StatefulSet\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([StatefulSetSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/#StatefulSetSpec))\n\n  Spec defines the desired identities of pods in this set.\n\n- **status** ([StatefulSetStatus](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/#StatefulSetStatus))\n\n  Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.\n\n## StatefulSetSpec\n\nA StatefulSetSpec is the specification of a StatefulSet.\n\n- **serviceName** (string), required\n\n  serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.\n\n- **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required\n\n  selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>\n\n- **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required\n\n  template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format \\<statefulsetname\\>-\\<podindex\\>. For example, a pod in a StatefulSet named \"web\" with index number \"3\" would be named \"web-3\". The only allowed template.spec.restartPolicy value is \"Always\".\n\n- **replicas** (int32)\n\n  replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.\n\n- **updateStrategy** (StatefulSetUpdateStrategy)\n\n  updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.\n\n  *StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.*\n\n  - **updateStrategy.type** (string)\n\n    Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.\n\n  - **updateStrategy.rollingUpdate** (RollingUpdateStatefulSetStrategy)\n\n    RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.\n\n    *RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.*\n\n    - **updateStrategy.rollingUpdate.maxUnavailable** (IntOrString)\n\n      The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.\n\n      *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*\n\n    - **updateStrategy.rollingUpdate.partition** (int32)\n\n      Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.\n\n- **podManagementPolicy** (string)\n\n  podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\n\n- **revisionHistoryLimit** (int32)\n\n  revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.\n\n- **volumeClaimTemplates** (\\[\\][PersistentVolumeClaim](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim))\n\n  volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.\n\n- **minReadySeconds** (int32)\n\n  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n\n- **persistentVolumeClaimRetentionPolicy** (StatefulSetPersistentVolumeClaimRetentionPolicy)\n\n  persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha. +optional\n\n  *StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.*\n\n  - **persistentVolumeClaimRetentionPolicy.whenDeleted** (string)\n\n    WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.\n\n  - **persistentVolumeClaimRetentionPolicy.whenScaled** (string)\n\n    WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.\n\n- **ordinals** (StatefulSetOrdinals)\n\n  ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested. Using the ordinals field requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.\n\n  *StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.*\n\n  - **ordinals.start** (int32)\n\n    start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range: \\[.spec.ordinals.start, .spec.ordinals.start + .spec.replicas). If unset, defaults to 0. Replica indices will be in the range: \\[0, .spec.replicas).\n\n## StatefulSetStatus\n\nStatefulSetStatus represents the current state of a StatefulSet.\n\n- **replicas** (int32), required\n\n  replicas is the number of Pods created by the StatefulSet controller.\n\n- **readyReplicas** (int32)\n\n  readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.\n\n- **currentReplicas** (int32)\n\n  currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.\n\n- **updatedReplicas** (int32)\n\n  updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.\n\n- **availableReplicas** (int32)\n\n  Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.\n\n- **collisionCount** (int32)\n\n  collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.\n\n- **conditions** (\\[\\]StatefulSetCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a statefulset's current state.\n\n  *StatefulSetCondition describes the state of a statefulset at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of statefulset condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **currentRevision** (string)\n\n  currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence \\[0,currentReplicas).\n\n- **updateRevision** (string)\n\n  updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence \\[replicas-updatedReplicas,replicas)\n\n- **observedGeneration** (int64)\n\n  observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.\n\n## StatefulSetList\n\nStatefulSetList is a collection of StatefulSets.\n\n- **apiVersion**: apps/v1\n\n- **kind**: StatefulSetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][StatefulSet](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/#StatefulSet)), required\n\n  Items is the list of stateful sets.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/)"
- name: StatefulSet.Spec
  id: workload-resources/stateful-set-v1/index#StatefulSetSpec
  summary: A StatefulSetSpec is the specification of a StatefulSet
  belongs_to: StatefulSet
  description: |-
    ## StatefulSetSpec

    A StatefulSetSpec is the specification of a StatefulSet.

    - **serviceName** (string), required

      serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.

    - **selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector)), required

      selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>

    - **template** ([PodTemplateSpec](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec)), required

      template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format \<statefulsetname\>-\<podindex\>. For example, a pod in a StatefulSet named "web" with index number "3" would be named "web-3". The only allowed template.spec.restartPolicy value is "Always".

    - **replicas** (int32)

      replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.

    - **updateStrategy** (StatefulSetUpdateStrategy)

      updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.

      *StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.*

      - **updateStrategy.type** (string)

        Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.

      - **updateStrategy.rollingUpdate** (RollingUpdateStatefulSetStrategy)

        RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.

        *RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.*

        - **updateStrategy.rollingUpdate.maxUnavailable** (IntOrString)

          The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.

          *IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.*

        - **updateStrategy.rollingUpdate.partition** (int32)

          Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.

    - **podManagementPolicy** (string)

      podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.

    - **revisionHistoryLimit** (int32)

      revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.

    - **volumeClaimTemplates** (\[\][PersistentVolumeClaim](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim))

      volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.

    - **minReadySeconds** (int32)

      Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)

    - **persistentVolumeClaimRetentionPolicy** (StatefulSetPersistentVolumeClaimRetentionPolicy)

      persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha. +optional

      *StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.*

      - **persistentVolumeClaimRetentionPolicy.whenDeleted** (string)

        WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.

      - **persistentVolumeClaimRetentionPolicy.whenScaled** (string)

        WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.

    - **ordinals** (StatefulSetOrdinals)

      ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a "0" index to the first replica and increments the index by one for each additional replica requested. Using the ordinals field requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.

      *StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.*

      - **ordinals.start** (int32)

        start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range: \[.spec.ordinals.start, .spec.ordinals.start + .spec.replicas). If unset, defaults to 0. Replica indices will be in the range: \[0, .spec.replicas).

    &nbsp;
- name: StatefulSet.Status
  id: workload-resources/stateful-set-v1/index#StatefulSetStatus
  summary: StatefulSetStatus represents the current state of a StatefulSet
  belongs_to: StatefulSet
  description: "## StatefulSetStatus\n\nStatefulSetStatus represents the current state of a StatefulSet.\n\n- **replicas** (int32), required\n\n  replicas is the number of Pods created by the StatefulSet controller.\n\n- **readyReplicas** (int32)\n\n  readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.\n\n- **currentReplicas** (int32)\n\n  currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.\n\n- **updatedReplicas** (int32)\n\n  updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.\n\n- **availableReplicas** (int32)\n\n  Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.\n\n- **collisionCount** (int32)\n\n  collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.\n\n- **conditions** (\\[\\]StatefulSetCondition)\n\n  *Patch strategy: merge on key `type`*\n\n  Represents the latest available observations of a statefulset's current state.\n\n  *StatefulSetCondition describes the state of a statefulset at a certain point.*\n\n  - **conditions.status** (string), required\n\n    Status of the condition, one of True, False, Unknown.\n\n  - **conditions.type** (string), required\n\n    Type of statefulset condition.\n\n  - **conditions.lastTransitionTime** (Time)\n\n    Last time the condition transitioned from one status to another.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n  - **conditions.message** (string)\n\n    A human readable message indicating details about the transition.\n\n  - **conditions.reason** (string)\n\n    The reason for the condition's last transition.\n\n- **currentRevision** (string)\n\n  currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence \\[0,currentReplicas).\n\n- **updateRevision** (string)\n\n  updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence \\[replicas-updatedReplicas,replicas)\n\n- **observedGeneration** (int64)\n\n  observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.\n\n## StatefulSetList\n\nStatefulSetList is a collection of StatefulSets.\n\n- **apiVersion**: apps/v1\n\n- **kind**: StatefulSetList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][StatefulSet](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/#StatefulSet)), required\n\n  Items is the list of stateful sets.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/)"
- name: Status
  id: common-definitions/status/index
  summary: Status is a return value for calls that don't return other objects
  description: "# Status\n\nStatus is a return value for calls that don't return other objects.\n\n`import \"k8s.io/apimachinery/pkg/apis/meta/v1\"`\n\nStatus is a return value for calls that don't return other objects.\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **code** (int32)\n\n  Suggested HTTP return code for this status, 0 if not set.\n\n- **details** (StatusDetails)\n\n  Extended data associated with the reason. Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n\n  *StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.*\n\n  - **details.causes** (\\[\\]StatusCause)\n\n    The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n\n    *StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.*\n\n    - **details.causes.field** (string)\n\n      The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed. Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\n      Examples: \"name\" - the field \"name\" on the current resource \"items\\[0\\].name\" - the field \"name\" on the first array entry in \"items\"\n\n    - **details.causes.message** (string)\n\n      A human-readable description of the cause of the error. This field may be presented as-is to a reader.\n\n    - **details.causes.reason** (string)\n\n      A machine-readable description of the cause of the error. If this value is empty there is no information available.\n\n  - **details.group** (string)\n\n    The group attribute of the resource associated with the status StatusReason.\n\n  - **details.kind** (string)\n\n    The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n  - **details.name** (string)\n\n    The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n\n  - **details.retryAfterSeconds** (int32)\n\n    If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.\n\n  - **details.uid** (string)\n\n    UID of the resource. (when there is a single resource which can be described). More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **message** (string)\n\n  A human-readable description of the status of this operation.\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **reason** (string)\n\n  A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n\n- **status** (string)\n\n  Status of the operation. One of: \"Success\" or \"Failure\". More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/status/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/status/)"
- name: StorageClass
  id: config-and-storage-resources/storage-class-v1/index
  summary: StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned
  description: "# StorageClass\n\nStorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\n`apiVersion: storage.k8s.io/v1`\n\n`import \"k8s.io/api/storage/v1\"`\n\n## StorageClass\n\nStorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: StorageClass\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **provisioner** (string), required\n\n  provisioner indicates the type of the provisioner.\n\n- **allowVolumeExpansion** (boolean)\n\n  allowVolumeExpansion shows whether the storage class allow volume expand.\n\n- **allowedTopologies** (\\[\\]TopologySelectorTerm)\n\n  *Atomic: will be replaced during a merge*\n\n  allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.\n\n  *A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.*\n\n  - **allowedTopologies.matchLabelExpressions** (\\[\\]TopologySelectorLabelRequirement)\n\n    A list of topology selector requirements by labels.\n\n    *A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.*\n\n    - **allowedTopologies.matchLabelExpressions.key** (string), required\n\n      The label key that the selector applies to.\n\n    - **allowedTopologies.matchLabelExpressions.values** (\\[\\]string), required\n\n      An array of string values. One value must match the label to be selected. Each entry in Values is ORed.\n\n- **mountOptions** (\\[\\]string)\n\n  mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. \\[\"ro\", \"soft\"\\]. Not validated - mount of the PVs will simply fail if one is invalid.\n\n- **parameters** (map\\[string\\]string)\n\n  parameters holds the parameters for the provisioner that should create volumes of this storage class.\n\n- **reclaimPolicy** (string)\n\n  reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.\n\n- **volumeBindingMode** (string)\n\n  volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound. When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.\n\n## StorageClassList\n\nStorageClassList is a collection of storage classes.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: StorageClassList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][StorageClass](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/storage-class-v1/#StorageClass)), required\n\n  items is the list of StorageClasses\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/storage-class-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/storage-class-v1/)"
- name: SubjectAccessReview
  id: authorization-resources/subject-access-review-v1/index
  summary: SubjectAccessReview checks whether or not a user or group can perform an action
  description: "# SubjectAccessReview\n\nSubjectAccessReview checks whether or not a user or group can perform an action.\n\n`apiVersion: authorization.k8s.io/v1`\n\n`import \"k8s.io/api/authorization/v1\"`\n\n## SubjectAccessReview\n\nSubjectAccessReview checks whether or not a user or group can perform an action.\n\n- **apiVersion**: authorization.k8s.io/v1\n\n- **kind**: SubjectAccessReview\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([SubjectAccessReviewSpec](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/#SubjectAccessReviewSpec)), required\n\n  Spec holds information about the request being evaluated\n\n- **status** ([SubjectAccessReviewStatus](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/#SubjectAccessReviewStatus))\n\n  Status is filled in by the server and indicates whether the request is allowed or not\n\n## SubjectAccessReviewSpec\n\nSubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\n\n- **extra** (map\\[string\\]\\[\\]string)\n\n  Extra corresponds to the user.Info.GetExtra() method from the authenticator. Since that is input to the authorizer it needs a reflection here.\n\n- **groups** (\\[\\]string)\n\n  Groups is the groups you're testing for.\n\n- **nonResourceAttributes** (NonResourceAttributes)\n\n  NonResourceAttributes describes information for a non-resource access request\n\n  *NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface*\n\n  - **nonResourceAttributes.path** (string)\n\n    Path is the URL path of the request\n\n  - **nonResourceAttributes.verb** (string)\n\n    Verb is the standard HTTP verb\n\n- **resourceAttributes** (ResourceAttributes)\n\n  ResourceAuthorizationAttributes describes information for a resource access request\n\n  *ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface*\n\n  - **resourceAttributes.group** (string)\n\n    Group is the API Group of the Resource. \"\\*\" means all.\n\n  - **resourceAttributes.name** (string)\n\n    Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n\n  - **resourceAttributes.namespace** (string)\n\n    Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n\n  - **resourceAttributes.resource** (string)\n\n    Resource is one of the existing resource types. \"\\*\" means all.\n\n  - **resourceAttributes.subresource** (string)\n\n    Subresource is one of the existing resource types. \"\" means none.\n\n  - **resourceAttributes.verb** (string)\n\n    Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. \"\\*\" means all.\n\n  - **resourceAttributes.version** (string)\n\n    Version is the API Version of the Resource. \"\\*\" means all.\n\n- **uid** (string)\n\n  UID information about the requesting user.\n\n- **user** (string)\n\n  User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups\n\n## SubjectAccessReviewStatus\n\nSubjectAccessReviewStatus\n\n- **allowed** (boolean), required\n\n  Allowed is required. True if the action would be allowed, false otherwise.\n\n- **denied** (boolean)\n\n  Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.\n\n- **evaluationError** (string)\n\n  EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.\n\n- **reason** (string)\n\n  Reason is optional. It indicates why a request was allowed or denied.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/)"
- name: SubjectAccessReview.Spec
  id: authorization-resources/subject-access-review-v1/index#SubjectAccessReviewSpec
  summary: SubjectAccessReviewSpec is a description of the access request
  belongs_to: SubjectAccessReview
  description: |-
    ## SubjectAccessReviewSpec

    SubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set

    - **extra** (map\[string\]\[\]string)

      Extra corresponds to the user.Info.GetExtra() method from the authenticator. Since that is input to the authorizer it needs a reflection here.

    - **groups** (\[\]string)

      Groups is the groups you're testing for.

    - **nonResourceAttributes** (NonResourceAttributes)

      NonResourceAttributes describes information for a non-resource access request

      *NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface*

      - **nonResourceAttributes.path** (string)

        Path is the URL path of the request

      - **nonResourceAttributes.verb** (string)

        Verb is the standard HTTP verb

    - **resourceAttributes** (ResourceAttributes)

      ResourceAuthorizationAttributes describes information for a resource access request

      *ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface*

      - **resourceAttributes.group** (string)

        Group is the API Group of the Resource. "\*" means all.

      - **resourceAttributes.name** (string)

        Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.

      - **resourceAttributes.namespace** (string)

        Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview

      - **resourceAttributes.resource** (string)

        Resource is one of the existing resource types. "\*" means all.

      - **resourceAttributes.subresource** (string)

        Subresource is one of the existing resource types. "" means none.

      - **resourceAttributes.verb** (string)

        Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. "\*" means all.

      - **resourceAttributes.version** (string)

        Version is the API Version of the Resource. "\*" means all.

    - **uid** (string)

      UID information about the requesting user.

    - **user** (string)

      User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups

    &nbsp;
- name: SubjectAccessReview.Status
  id: authorization-resources/subject-access-review-v1/index#SubjectAccessReviewStatus
  summary: Allowed is required
  belongs_to: SubjectAccessReview
  description: "## SubjectAccessReviewStatus\n\nSubjectAccessReviewStatus\n\n- **allowed** (boolean), required\n\n  Allowed is required. True if the action would be allowed, false otherwise.\n\n- **denied** (boolean)\n\n  Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.\n\n- **evaluationError** (string)\n\n  EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.\n\n- **reason** (string)\n\n  Reason is optional. It indicates why a request was allowed or denied.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authorization-resources/subject-access-review-v1/)"
- name: timeoutSeconds
  id: common-parameters/common-parameters/index#timeoutSeconds
  summary: Timeout for the list/watch call
  belongs_to: Common Parameters
  description: |-
    ## timeoutSeconds

    Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
- name: TokenRequest
  id: authentication-resources/token-request-v1/index
  summary: TokenRequest requests a token for a given service account
  description: "# TokenRequest\n\nTokenRequest requests a token for a given service account.\n\n`apiVersion: authentication.k8s.io/v1`\n\n`import \"k8s.io/api/authentication/v1\"`\n\n## TokenRequest\n\nTokenRequest requests a token for a given service account.\n\n- **apiVersion**: authentication.k8s.io/v1\n\n- **kind**: TokenRequest\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([TokenRequestSpec](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/#TokenRequestSpec)), required\n\n  Spec holds information about the request being evaluated\n\n- **status** ([TokenRequestStatus](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/#TokenRequestStatus))\n\n  Status is filled in by the server and indicates whether the token can be authenticated.\n\n## TokenRequestSpec\n\nTokenRequestSpec contains client provided parameters of a token request.\n\n- **audiences** (\\[\\]string), required\n\n  Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.\n\n- **boundObjectRef** (BoundObjectReference)\n\n  BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.\n\n  *BoundObjectReference is a reference to an object that a token is bound to.*\n\n  - **boundObjectRef.apiVersion** (string)\n\n    API version of the referent.\n\n  - **boundObjectRef.kind** (string)\n\n    Kind of the referent. Valid kinds are 'Pod' and 'Secret'.\n\n  - **boundObjectRef.name** (string)\n\n    Name of the referent.\n\n  - **boundObjectRef.uid** (string)\n\n    UID of the referent.\n\n- **expirationSeconds** (int64)\n\n  ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.\n\n## TokenRequestStatus\n\nTokenRequestStatus is the result of a token request.\n\n- **expirationTimestamp** (Time), required\n\n  ExpirationTimestamp is the time of expiration of the returned token.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **token** (string), required\n\n  Token is the opaque bearer token.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/)"
- name: TokenRequest.Spec
  id: authentication-resources/token-request-v1/index#TokenRequestSpec
  summary: TokenRequestSpec contains client provided parameters of a token request
  belongs_to: TokenRequest
  description: |-
    ## TokenRequestSpec

    TokenRequestSpec contains client provided parameters of a token request.

    - **audiences** (\[\]string), required

      Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.

    - **boundObjectRef** (BoundObjectReference)

      BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.

      *BoundObjectReference is a reference to an object that a token is bound to.*

      - **boundObjectRef.apiVersion** (string)

        API version of the referent.

      - **boundObjectRef.kind** (string)

        Kind of the referent. Valid kinds are 'Pod' and 'Secret'.

      - **boundObjectRef.name** (string)

        Name of the referent.

      - **boundObjectRef.uid** (string)

        UID of the referent.

    - **expirationSeconds** (int64)

      ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.

    &nbsp;
- name: TokenRequest.Status
  id: authentication-resources/token-request-v1/index#TokenRequestStatus
  summary: TokenRequestStatus is the result of a token request
  belongs_to: TokenRequest
  description: "## TokenRequestStatus\n\nTokenRequestStatus is the result of a token request.\n\n- **expirationTimestamp** (Time), required\n\n  ExpirationTimestamp is the time of expiration of the returned token.\n\n  *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **token** (string), required\n\n  Token is the opaque bearer token.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/)"
- name: TokenReview
  id: authentication-resources/token-review-v1/index
  summary: TokenReview attempts to authenticate a token to a known user
  description: "# TokenReview\n\nTokenReview attempts to authenticate a token to a known user.\n\n`apiVersion: authentication.k8s.io/v1`\n\n`import \"k8s.io/api/authentication/v1\"`\n\n## TokenReview\n\nTokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.\n\n- **apiVersion**: authentication.k8s.io/v1\n\n- **kind**: TokenReview\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object's metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([TokenReviewSpec](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/#TokenReviewSpec)), required\n\n  Spec holds information about the request being evaluated\n\n- **status** ([TokenReviewStatus](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/#TokenReviewStatus))\n\n  Status is filled in by the server and indicates whether the request can be authenticated.\n\n## TokenReviewSpec\n\nTokenReviewSpec is a description of the token authentication request.\n\n- **audiences** (\\[\\]string)\n\n  Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.\n\n- **token** (string)\n\n  Token is the opaque bearer token.\n\n## TokenReviewStatus\n\nTokenReviewStatus is the result of the token authentication request.\n\n- **audiences** (\\[\\]string)\n\n  Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.\n\n- **authenticated** (boolean)\n\n  Authenticated indicates that the token was associated with a known user.\n\n- **error** (string)\n\n  Error indicates that the token couldn't be checked\n\n- **user** (UserInfo)\n\n  User is the UserInfo associated with the provided token.\n\n  *UserInfo holds the information about the user needed to implement the user.Info interface.*\n\n  - **user.extra** (map\\[string\\]\\[\\]string)\n\n    Any additional information provided by the authenticator.\n\n  - **user.groups** (\\[\\]string)\n\n    The names of groups this user is a part of.\n\n  - **user.uid** (string)\n\n    A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n\n  - **user.username** (string)\n\n    The name that uniquely identifies this user among all active users.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/)"
- name: TokenReview.Spec
  id: authentication-resources/token-review-v1/index#TokenReviewSpec
  summary: TokenReviewSpec is a description of the token authentication request
  belongs_to: TokenReview
  description: |-
    ## TokenReviewSpec

    TokenReviewSpec is a description of the token authentication request.

    - **audiences** (\[\]string)

      Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.

    - **token** (string)

      Token is the opaque bearer token.

    &nbsp;
- name: TokenReview.Status
  id: authentication-resources/token-review-v1/index#TokenReviewStatus
  summary: TokenReviewStatus is the result of the token authentication request
  belongs_to: TokenReview
  description: "## TokenReviewStatus\n\nTokenReviewStatus is the result of the token authentication request.\n\n- **audiences** (\\[\\]string)\n\n  Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.\n\n- **authenticated** (boolean)\n\n  Authenticated indicates that the token was associated with a known user.\n\n- **error** (string)\n\n  Error indicates that the token couldn't be checked\n\n- **user** (UserInfo)\n\n  User is the UserInfo associated with the provided token.\n\n  *UserInfo holds the information about the user needed to implement the user.Info interface.*\n\n  - **user.extra** (map\\[string\\]\\[\\]string)\n\n    Any additional information provided by the authenticator.\n\n  - **user.groups** (\\[\\]string)\n\n    The names of groups this user is a part of.\n\n  - **user.uid** (string)\n\n    A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n\n  - **user.username** (string)\n\n    The name that uniquely identifies this user among all active users.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/)"
- name: TypedLocalObjectReference
  id: common-definitions/typed-local-object-reference/index
  summary: TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace
  description: "# TypedLocalObjectReference\n\nTypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.\n\n`import \"k8s.io/api/core/v1\"`\n\nTypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.\n\n- **kind** (string), required\n\n  Kind is the type of resource being referenced\n\n- **name** (string), required\n\n  Name is the name of resource being referenced\n\n- **apiGroup** (string)\n\n  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/typed-local-object-reference/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-definitions/typed-local-object-reference/)"
- name: ValidatingAdmissionPolicy
  id: extend-resources/validating-admission-policy-v1beta1/index#ValidatingAdmissionPolicy
  summary: ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it
  belongs_to: ValidatingAdmissionPolicy v1beta1
  description: |-
    ## ValidatingAdmissionPolicy

    ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.

    - **apiVersion**: admissionregistration.k8s.io/v1beta1

    - **kind**: ValidatingAdmissionPolicy

    - **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))

      Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.

    - **spec** (ValidatingAdmissionPolicySpec)

      Specification of the desired behavior of the ValidatingAdmissionPolicy.

      *ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.*

      - **spec.auditAnnotations** (\[\]AuditAnnotation)

        *Atomic: will be replaced during a merge*

        auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.

        *AuditAnnotation describes how to produce an audit annotation for an API request.*

        - **spec.auditAnnotations.key** (string), required

          key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name (\[A-Za-z0-9\]\[-A-Za-z0-9\_.\]\*) no more than 63 bytes in length.

          The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".

          If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.

          Required.

        - **spec.auditAnnotations.valueExpression** (string), required

          valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.

          If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.

          Required.

      - **spec.failurePolicy** (string)

        failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.

        A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.

        failurePolicy does not define how validations that evaluate to false are handled.

        When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.

        Allowed values are Ignore or Fail. Defaults to Fail.

      - **spec.matchConditions** (\[\]MatchCondition)

        *Patch strategy: merge on key `name`*

        *Map: unique values on key name will be kept during a merge*

        MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.

        If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.

        The exact matching logic is (in order):

        1.  If ANY matchCondition evaluates to FALSE, the policy is skipped.
        2.  If ALL matchConditions evaluate to TRUE, the policy is evaluated.
        3.  If any matchCondition evaluates to an error (but none are FALSE):
            - If failurePolicy=Fail, reject the request
            - If failurePolicy=Ignore, the policy is skipped

        *MatchCondition represents a condition which must be fulfilled for a request to be sent to a webhook.*

        - **spec.matchConditions.expression** (string), required

          Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

          'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz> 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: <https://kubernetes.io/docs/reference/using-api/cel/>

          Required.

        - **spec.matchConditions.name** (string), required

          Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '*' or '.', and must start and end with an alphanumeric character (e.g. 'MyName', or 'my.name', or '123-abc', regex used for validation is '(\[A-Za-z0-9\]\[-A-Za-z0-9*.\]\*)?\[A-Za-z0-9\]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

          Required.

      - **spec.matchConstraints** (MatchResources)

        MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches *all* Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.

        *MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)*

        - **spec.matchConstraints.excludeResourceRules** (\[\]NamedRuleWithOperations)

          *Atomic: will be replaced during a merge*

          ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)

          *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*

          - **spec.matchConstraints.excludeResourceRules.apiGroups** (\[\]string)

            *Atomic: will be replaced during a merge*

            APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.

          - **spec.matchConstraints.excludeResourceRules.apiVersions** (\[\]string)

            *Atomic: will be replaced during a merge*

            APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.

          - **spec.matchConstraints.excludeResourceRules.operations** (\[\]string)

            *Atomic: will be replaced during a merge*

            Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \* for all of those operations and any future admission operations that are added. If '\*' is present, the length of the slice must be one. Required.

          - **spec.matchConstraints.excludeResourceRules.resourceNames** (\[\]string)

            *Atomic: will be replaced during a merge*

            ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.

          - **spec.matchConstraints.excludeResourceRules.resources** (\[\]string)

            *Atomic: will be replaced during a merge*

            Resources is a list of resources this rule applies to.

            For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\*' means all resources and their subresources.

            If wildcard is present, the validation rule will ensure resources do not overlap with each other.

            Depending on the enclosing object, subresources might not be allowed. Required.

          - **spec.matchConstraints.excludeResourceRules.scope** (string)

            scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "\*".

        - **spec.matchConstraints.matchPolicy** (string)

          matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

          - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.

          - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.

          Defaults to "Equivalent"

        - **spec.matchConstraints.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

          NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.

          For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1"; you will set the selector as follows: "namespaceSelector": { "matchExpressions": \[ { "key": "runlevel", "operator": "NotIn", "values": \[ "0", "1" \] } \] }

          If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": { "matchExpressions": \[ { "key": "environment", "operator": "In", "values": \[ "prod", "staging" \] } \] }

          See <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/> for more examples of label selectors.

          Default to the empty LabelSelector, which matches everything.

        - **spec.matchConstraints.objectSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))

          ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.

        - **spec.matchConstraints.resourceRules** (\[\]NamedRuleWithOperations)

          *Atomic: will be replaced during a merge*

          ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches *any* Rule.

          *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*

          - **spec.matchConstraints.resourceRules.apiGroups** (\[\]string)

            *Atomic: will be replaced during a merge*

            APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.

          - **spec.matchConstraints.resourceRules.apiVersions** (\[\]string)

            *Atomic: will be replaced during a merge*

            APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.

          - **spec.matchConstraints.resourceRules.operations** (\[\]string)

            *Atomic: will be replaced during a merge*

            Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \* for all of those operations and any future admission operations that are added. If '\*' is present, the length of the slice must be one. Required.

          - **spec.matchConstraints.resourceRules.resourceNames** (\[\]string)

            *Atomic: will be replaced during a merge*

            ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.

          - **spec.matchConstraints.resourceRules.resources** (\[\]string)

            *Atomic: will be replaced during a merge*

            Resources is a list of resources this rule applies to.

            For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\*' means all resources and their subresources.

            If wildcard is present, the validation rule will ensure resources do not overlap with each other.

            Depending on the enclosing object, subresources might not be allowed. Required.

          - **spec.matchConstraints.resourceRules.scope** (string)

            scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "\*".

      - **spec.paramKind** (ParamKind)

        ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.

        *ParamKind is a tuple of Group Kind and Version.*

        - **spec.paramKind.apiVersion** (string)

          APIVersion is the API group version the resources belong to. In format of "group/version". Required.

        - **spec.paramKind.kind** (string)

          Kind is the API kind the resources belong to. Required.

      - **spec.validations** (\[\]Validation)

        *Atomic: will be replaced during a merge*

        Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.

        *Validation specifies the CEL expression which is used to apply the validation.*

        - **spec.validations.expression** (string), required

          Expression represents the expression which will be evaluated by CEL. ref: <https://github.com/google/cel-spec> CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:

          - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](https://v1-28.docs.kubernetes.io/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value. For example, a variable named 'foo' can be accessed as 'variables.foo'.
          - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz>
          - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource.

          The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.

          Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '**' escapes to '**underscores**' - '.' escapes to '**dot**' - '-' escapes to '**dash**' - '/' escapes to '**slash**' - Property names that exactly match a CEL RESERVED keyword escape to '**{keyword}\_\_'. The keywords are: "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if", "import", "let", "loop", "package", "namespace", "return". Examples:

          - Expression accessing a property named "namespace": {"Expression": "object.**namespace** \> 0"}
          - Expression accessing a property named "x-prop": {"Expression": "object.x\_\_dash\_\_prop \> 0"}
          - Expression accessing a property named "redact\_\_d": {"Expression": "object.redact\_\_underscores\_\_d \> 0"}

          Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. \[1, 2\] == \[2, 1\]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:

          - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and non-intersecting elements in `Y` are appended, retaining their partial order.
          - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting keys are appended, retaining their partial order. Required.

        - **spec.validations.message** (string)

          Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".

        - **spec.validations.messageExpression** (string)

          messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: "object.x must be less than max ("+string(params.max)+")"

        - **spec.validations.reason** (string)

          Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.

      - **spec.variables** (\[\]Variable)

        *Patch strategy: merge on key `name`*

        *Map: unique values on key name will be kept during a merge*

        Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.

        The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.

        *Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.*

        - **spec.variables.expression** (string), required

          Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.

        - **spec.variables.name** (string), required

          Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`

    - **status** (ValidatingAdmissionPolicyStatus)

      The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.

      *ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.*

      - **status.conditions** (\[\]Condition)

        *Map: unique values on key type will be kept during a merge*

        The conditions represent the latest available observations of a policy's current state.

        *Condition contains details for one aspect of the current state of this API Resource.*

        - **status.conditions.lastTransitionTime** (Time), required

          lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.

          *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*

        - **status.conditions.message** (string), required

          message is a human readable message indicating details about the transition. This may be an empty string.

        - **status.conditions.reason** (string), required

          reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.

        - **status.conditions.status** (string), required

          status of the condition, one of True, False, Unknown.

        - **status.conditions.type** (string), required

          type of condition in CamelCase or in foo.example.com/CamelCase.

        - **status.conditions.observedGeneration** (int64)

          observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions\[x\].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.

      - **status.observedGeneration** (int64)

        The generation observed by the controller.

      - **status.typeChecking** (TypeChecking)

        The results of type checking for each expression. Presence of this field indicates the completion of the type checking.

        *TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy*

        - **status.typeChecking.expressionWarnings** (\[\]ExpressionWarning)

          *Atomic: will be replaced during a merge*

          The type checking warnings for each expression.

          *ExpressionWarning is a warning information that targets a specific expression.*

          - **status.typeChecking.expressionWarnings.fieldRef** (string), required

            The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations\[0\].expression"

          - **status.typeChecking.expressionWarnings.warning** (string), required

            The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
- name: ValidatingAdmissionPolicy v1beta1
  id: extend-resources/validating-admission-policy-v1beta1/index
  summary: ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it
  description: "# ValidatingAdmissionPolicy v1beta1\n\nValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.\n\n`apiVersion: admissionregistration.k8s.io/v1beta1`\n\n`import \"k8s.io/api/admissionregistration/v1beta1\"`\n\n## ValidatingAdmissionPolicy\n\nValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.\n\n- **apiVersion**: admissionregistration.k8s.io/v1beta1\n\n- **kind**: ValidatingAdmissionPolicy\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.\n\n- **spec** (ValidatingAdmissionPolicySpec)\n\n  Specification of the desired behavior of the ValidatingAdmissionPolicy.\n\n  *ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.*\n\n  - **spec.auditAnnotations** (\\[\\]AuditAnnotation)\n\n    *Atomic: will be replaced during a merge*\n\n    auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.\n\n    *AuditAnnotation describes how to produce an audit annotation for an API request.*\n\n    - **spec.auditAnnotations.key** (string), required\n\n      key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name (\\[A-Za-z0-9\\]\\[-A-Za-z0-9\\_.\\]\\*) no more than 63 bytes in length.\n\n      The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \"{ValidatingAdmissionPolicy name}/{key}\".\n\n      If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.\n\n      Required.\n\n    - **spec.auditAnnotations.valueExpression** (string), required\n\n      valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.\n\n      If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.\n\n      Required.\n\n  - **spec.failurePolicy** (string)\n\n    failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\n    A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.\n\n    failurePolicy does not define how validations that evaluate to false are handled.\n\n    When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.\n\n    Allowed values are Ignore or Fail. Defaults to Fail.\n\n  - **spec.matchConditions** (\\[\\]MatchCondition)\n\n    *Patch strategy: merge on key `name`*\n\n    *Map: unique values on key name will be kept during a merge*\n\n    MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\n    If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\n    The exact matching logic is (in order):\n\n    1.  If ANY matchCondition evaluates to FALSE, the policy is skipped.\n    2.  If ALL matchConditions evaluate to TRUE, the policy is evaluated.\n    3.  If any matchCondition evaluates to an error (but none are FALSE):\n        - If failurePolicy=Fail, reject the request\n        - If failurePolicy=Ignore, the policy is skipped\n\n    *MatchCondition represents a condition which must be fulfilled for a request to be sent to a webhook.*\n\n    - **spec.matchConditions.expression** (string), required\n\n      Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n      'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz> 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: <https://kubernetes.io/docs/reference/using-api/cel/>\n\n      Required.\n\n    - **spec.matchConditions.name** (string), required\n\n      Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '*' or '.', and must start and end with an alphanumeric character (e.g. 'MyName', or 'my.name', or '123-abc', regex used for validation is '(\\[A-Za-z0-9\\]\\[-A-Za-z0-9*.\\]\\*)?\\[A-Za-z0-9\\]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\n      Required.\n\n  - **spec.matchConstraints** (MatchResources)\n\n    MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches *all* Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.\n\n    *MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)*\n\n    - **spec.matchConstraints.excludeResourceRules** (\\[\\]NamedRuleWithOperations)\n\n      *Atomic: will be replaced during a merge*\n\n      ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)\n\n      *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*\n\n      - **spec.matchConstraints.excludeResourceRules.apiGroups** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchConstraints.excludeResourceRules.apiVersions** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchConstraints.excludeResourceRules.operations** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchConstraints.excludeResourceRules.resourceNames** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n      - **spec.matchConstraints.excludeResourceRules.resources** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Resources is a list of resources this rule applies to.\n\n        For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n        If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n        Depending on the enclosing object, subresources might not be allowed. Required.\n\n      - **spec.matchConstraints.excludeResourceRules.scope** (string)\n\n        scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n    - **spec.matchConstraints.matchPolicy** (string)\n\n      matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n      - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n      - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\n      Defaults to \"Equivalent\"\n\n    - **spec.matchConstraints.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\n      For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": \\[ \"0\", \"1\" \\] } \\] }\n\n      If instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"environment\", \"operator\": \"In\", \"values\": \\[ \"prod\", \"staging\" \\] } \\] }\n\n      See <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/> for more examples of label selectors.\n\n      Default to the empty LabelSelector, which matches everything.\n\n    - **spec.matchConstraints.objectSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.\n\n    - **spec.matchConstraints.resourceRules** (\\[\\]NamedRuleWithOperations)\n\n      *Atomic: will be replaced during a merge*\n\n      ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches *any* Rule.\n\n      *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*\n\n      - **spec.matchConstraints.resourceRules.apiGroups** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchConstraints.resourceRules.apiVersions** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchConstraints.resourceRules.operations** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchConstraints.resourceRules.resourceNames** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n      - **spec.matchConstraints.resourceRules.resources** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Resources is a list of resources this rule applies to.\n\n        For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n        If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n        Depending on the enclosing object, subresources might not be allowed. Required.\n\n      - **spec.matchConstraints.resourceRules.scope** (string)\n\n        scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n  - **spec.paramKind** (ParamKind)\n\n    ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.\n\n    *ParamKind is a tuple of Group Kind and Version.*\n\n    - **spec.paramKind.apiVersion** (string)\n\n      APIVersion is the API group version the resources belong to. In format of \"group/version\". Required.\n\n    - **spec.paramKind.kind** (string)\n\n      Kind is the API kind the resources belong to. Required.\n\n  - **spec.validations** (\\[\\]Validation)\n\n    *Atomic: will be replaced during a merge*\n\n    Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.\n\n    *Validation specifies the CEL expression which is used to apply the validation.*\n\n    - **spec.validations.expression** (string), required\n\n      Expression represents the expression which will be evaluated by CEL. ref: <https://github.com/google/cel-spec> CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:\n\n      - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](https://v1-28.docs.kubernetes.io/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value. For example, a variable named 'foo' can be accessed as 'variables.foo'.\n      - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz>\n      - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource.\n\n      The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\n      Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '**' escapes to '**underscores**' - '.' escapes to '**dot**' - '-' escapes to '**dash**' - '/' escapes to '**slash**' - Property names that exactly match a CEL RESERVED keyword escape to '**{keyword}\\_\\_'. The keywords are: \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\", \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\". Examples:\n\n      - Expression accessing a property named \"namespace\": {\"Expression\": \"object.**namespace** \\> 0\"}\n      - Expression accessing a property named \"x-prop\": {\"Expression\": \"object.x\\_\\_dash\\_\\_prop \\> 0\"}\n      - Expression accessing a property named \"redact\\_\\_d\": {\"Expression\": \"object.redact\\_\\_underscores\\_\\_d \\> 0\"}\n\n      Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. \\[1, 2\\] == \\[2, 1\\]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n\n      - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and non-intersecting elements in `Y` are appended, retaining their partial order.\n      - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting keys are appended, retaining their partial order. Required.\n\n    - **spec.validations.message** (string)\n\n      Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \"failed Expression: {Expression}\".\n\n    - **spec.validations.messageExpression** (string)\n\n      messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: \"object.x must be less than max (\"+string(params.max)+\")\"\n\n    - **spec.validations.reason** (string)\n\n      Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \"Unauthorized\", \"Forbidden\", \"Invalid\", \"RequestEntityTooLarge\". If not set, StatusReasonInvalid is used in the response to the client.\n\n  - **spec.variables** (\\[\\]Variable)\n\n    *Patch strategy: merge on key `name`*\n\n    *Map: unique values on key name will be kept during a merge*\n\n    Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.\n\n    The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.\n\n    *Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.*\n\n    - **spec.variables.expression** (string), required\n\n      Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.\n\n    - **spec.variables.name** (string), required\n\n      Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`\n\n- **status** (ValidatingAdmissionPolicyStatus)\n\n  The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.\n\n  *ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.*\n\n  - **status.conditions** (\\[\\]Condition)\n\n    *Map: unique values on key type will be kept during a merge*\n\n    The conditions represent the latest available observations of a policy's current state.\n\n    *Condition contains details for one aspect of the current state of this API Resource.*\n\n    - **status.conditions.lastTransitionTime** (Time), required\n\n      lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.\n\n      *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n    - **status.conditions.message** (string), required\n\n      message is a human readable message indicating details about the transition. This may be an empty string.\n\n    - **status.conditions.reason** (string), required\n\n      reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.\n\n    - **status.conditions.status** (string), required\n\n      status of the condition, one of True, False, Unknown.\n\n    - **status.conditions.type** (string), required\n\n      type of condition in CamelCase or in foo.example.com/CamelCase.\n\n    - **status.conditions.observedGeneration** (int64)\n\n      observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions\\[x\\].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.\n\n  - **status.observedGeneration** (int64)\n\n    The generation observed by the controller.\n\n  - **status.typeChecking** (TypeChecking)\n\n    The results of type checking for each expression. Presence of this field indicates the completion of the type checking.\n\n    *TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy*\n\n    - **status.typeChecking.expressionWarnings** (\\[\\]ExpressionWarning)\n\n      *Atomic: will be replaced during a merge*\n\n      The type checking warnings for each expression.\n\n      *ExpressionWarning is a warning information that targets a specific expression.*\n\n      - **status.typeChecking.expressionWarnings.fieldRef** (string), required\n\n        The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is \"spec.validations\\[0\\].expression\"\n\n      - **status.typeChecking.expressionWarnings.warning** (string), required\n\n        The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.\n\n## ValidatingAdmissionPolicyList\n\nValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **items** (\\[\\][ValidatingAdmissionPolicy](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-admission-policy-v1beta1/#ValidatingAdmissionPolicy))\n\n  List of ValidatingAdmissionPolicy.\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n## ValidatingAdmissionPolicyBinding\n\nValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.\n\nFor a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.\n\nThe CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.\n\n- **spec** (ValidatingAdmissionPolicyBindingSpec)\n\n  Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.\n\n  *ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.*\n\n  - **spec.matchResources** (MatchResources)\n\n    MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.\n\n    *MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)*\n\n    - **spec.matchResources.excludeResourceRules** (\\[\\]NamedRuleWithOperations)\n\n      *Atomic: will be replaced during a merge*\n\n      ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)\n\n      *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*\n\n      - **spec.matchResources.excludeResourceRules.apiGroups** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.excludeResourceRules.apiVersions** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.excludeResourceRules.operations** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.excludeResourceRules.resourceNames** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n      - **spec.matchResources.excludeResourceRules.resources** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Resources is a list of resources this rule applies to.\n\n        For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n        If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n        Depending on the enclosing object, subresources might not be allowed. Required.\n\n      - **spec.matchResources.excludeResourceRules.scope** (string)\n\n        scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n    - **spec.matchResources.matchPolicy** (string)\n\n      matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n      - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n      - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\n      Defaults to \"Equivalent\"\n\n    - **spec.matchResources.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\n      For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": \\[ \"0\", \"1\" \\] } \\] }\n\n      If instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"environment\", \"operator\": \"In\", \"values\": \\[ \"prod\", \"staging\" \\] } \\] }\n\n      See <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/> for more examples of label selectors.\n\n      Default to the empty LabelSelector, which matches everything.\n\n    - **spec.matchResources.objectSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.\n\n    - **spec.matchResources.resourceRules** (\\[\\]NamedRuleWithOperations)\n\n      *Atomic: will be replaced during a merge*\n\n      ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches *any* Rule.\n\n      *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*\n\n      - **spec.matchResources.resourceRules.apiGroups** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.resourceRules.apiVersions** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.resourceRules.operations** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.resourceRules.resourceNames** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n      - **spec.matchResources.resourceRules.resources** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Resources is a list of resources this rule applies to.\n\n        For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n        If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n        Depending on the enclosing object, subresources might not be allowed. Required.\n\n      - **spec.matchResources.resourceRules.scope** (string)\n\n        scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n  - **spec.paramRef** (ParamRef)\n\n    paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.\n\n    *ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.*\n\n    - **spec.paramRef.name** (string)\n\n      name is the name of the resource being referenced.\n\n      One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\n      A single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped.\n\n    - **spec.paramRef.namespace** (string)\n\n      namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\n      A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n      - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n      - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.\n\n    - **spec.paramRef.parameterNotFoundAction** (string)\n\n      `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\n      Allowed values are `Allow` or `Deny`\n\n      Required\n\n    - **spec.paramRef.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\n      If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\n      One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\n  - **spec.policyName** (string)\n\n    PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.\n\n  - **spec.validationActions** (\\[\\]string)\n\n    *Set: unique values will be kept during a merge*\n\n    validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.\n\n    Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.\n\n    validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.\n\n    The supported actions values are:\n\n    \"Deny\" specifies that a validation failure results in a denied request.\n\n    \"Warn\" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.\n\n    \"Audit\" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\": \"[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]\"`\n\n    Clients should expect to handle additional values by ignoring any values not recognized.\n\n    \"Deny\" and \"Warn\" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.\n\n    Required.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-admission-policy-v1beta1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-admission-policy-v1beta1/)"
- name: ValidatingAdmissionPolicyBinding
  id: extend-resources/validating-admission-policy-v1beta1/index#ValidatingAdmissionPolicyBinding
  summary: ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources
  belongs_to: ValidatingAdmissionPolicy v1beta1
  description: "## ValidatingAdmissionPolicyBinding\n\nValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.\n\nFor a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.\n\nThe CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.\n\n- **apiVersion** (string)\n\n  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>\n\n- **kind** (string)\n\n  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.\n\n- **spec** (ValidatingAdmissionPolicyBindingSpec)\n\n  Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.\n\n  *ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.*\n\n  - **spec.matchResources** (MatchResources)\n\n    MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.\n\n    *MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)*\n\n    - **spec.matchResources.excludeResourceRules** (\\[\\]NamedRuleWithOperations)\n\n      *Atomic: will be replaced during a merge*\n\n      ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)\n\n      *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*\n\n      - **spec.matchResources.excludeResourceRules.apiGroups** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.excludeResourceRules.apiVersions** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.excludeResourceRules.operations** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.excludeResourceRules.resourceNames** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n      - **spec.matchResources.excludeResourceRules.resources** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Resources is a list of resources this rule applies to.\n\n        For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n        If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n        Depending on the enclosing object, subresources might not be allowed. Required.\n\n      - **spec.matchResources.excludeResourceRules.scope** (string)\n\n        scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n    - **spec.matchResources.matchPolicy** (string)\n\n      matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n      - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n      - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\n      Defaults to \"Equivalent\"\n\n    - **spec.matchResources.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\n      For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": \\[ \"0\", \"1\" \\] } \\] }\n\n      If instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"environment\", \"operator\": \"In\", \"values\": \\[ \"prod\", \"staging\" \\] } \\] }\n\n      See <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/> for more examples of label selectors.\n\n      Default to the empty LabelSelector, which matches everything.\n\n    - **spec.matchResources.objectSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.\n\n    - **spec.matchResources.resourceRules** (\\[\\]NamedRuleWithOperations)\n\n      *Atomic: will be replaced during a merge*\n\n      ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches *any* Rule.\n\n      *NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.*\n\n      - **spec.matchResources.resourceRules.apiGroups** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.resourceRules.apiVersions** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.resourceRules.operations** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n      - **spec.matchResources.resourceRules.resourceNames** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.\n\n      - **spec.matchResources.resourceRules.resources** (\\[\\]string)\n\n        *Atomic: will be replaced during a merge*\n\n        Resources is a list of resources this rule applies to.\n\n        For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n        If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n        Depending on the enclosing object, subresources might not be allowed. Required.\n\n      - **spec.matchResources.resourceRules.scope** (string)\n\n        scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n  - **spec.paramRef** (ParamRef)\n\n    paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.\n\n    *ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.*\n\n    - **spec.paramRef.name** (string)\n\n      name is the name of the resource being referenced.\n\n      One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\n      A single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped.\n\n    - **spec.paramRef.namespace** (string)\n\n      namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\n      A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n      - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n      - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.\n\n    - **spec.paramRef.parameterNotFoundAction** (string)\n\n      `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\n      Allowed values are `Allow` or `Deny`\n\n      Required\n\n    - **spec.paramRef.selector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n      selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\n      If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\n      One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\n  - **spec.policyName** (string)\n\n    PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.\n\n  - **spec.validationActions** (\\[\\]string)\n\n    *Set: unique values will be kept during a merge*\n\n    validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.\n\n    Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.\n\n    validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.\n\n    The supported actions values are:\n\n    \"Deny\" specifies that a validation failure results in a denied request.\n\n    \"Warn\" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.\n\n    \"Audit\" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\": \"[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]\"`\n\n    Clients should expect to handle additional values by ignoring any values not recognized.\n\n    \"Deny\" and \"Warn\" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.\n\n    Required.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-admission-policy-v1beta1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-admission-policy-v1beta1/)"
- name: ValidatingAdmissionPolicyBindingList v1beta1
  id: other-resources/validating-admission-policy-binding-list-v1beta1/index
  summary: © 2022 The Kubernetes Authors | Documentation Distributed under CC BY 4.0 Copyright © 2022 The Linux Foundation ®. All rights reserved
  description: "# ValidatingAdmissionPolicyBindingList v1beta1\n\n`apiVersion: admissionregistration.k8s.io/v1beta1`\n\n`import \"k8s.io/api/admissionregistration/v1beta1\"`\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/other-resources/validating-admission-policy-binding-list-v1beta1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/other-resources/validating-admission-policy-binding-list-v1beta1/)"
- name: ValidatingAdmissionPolicyList
  id: extend-resources/validating-admission-policy-v1beta1/index#ValidatingAdmissionPolicyList
  summary: ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy
  belongs_to: ValidatingAdmissionPolicy v1beta1
  description: |-
    ## ValidatingAdmissionPolicyList

    ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.

    - **apiVersion** (string)

      APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources>

    - **items** (\[\][ValidatingAdmissionPolicy](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-admission-policy-v1beta1/#ValidatingAdmissionPolicy))

      List of ValidatingAdmissionPolicy.

    - **kind** (string)

      Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>

    - **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))

      Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>

    &nbsp;
- name: ValidatingWebhookConfiguration
  id: extend-resources/validating-webhook-configuration-v1/index
  summary: ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it
  description: "# ValidatingWebhookConfiguration\n\nValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.\n\n`apiVersion: admissionregistration.k8s.io/v1`\n\n`import \"k8s.io/api/admissionregistration/v1\"`\n\n## ValidatingWebhookConfiguration\n\nValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.\n\n- **apiVersion**: admissionregistration.k8s.io/v1\n\n- **kind**: ValidatingWebhookConfiguration\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.\n\n- **webhooks** (\\[\\]ValidatingWebhook)\n\n  *Patch strategy: merge on key `name`*\n\n  Webhooks is a list of webhooks and the affected resources and operations.\n\n  *ValidatingWebhook describes an admission webhook and the resources and operations it applies to.*\n\n  - **webhooks.admissionReviewVersions** (\\[\\]string), required\n\n    AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.\n\n  - **webhooks.clientConfig** (WebhookClientConfig), required\n\n    ClientConfig defines how to communicate with the hook. Required\n\n    *WebhookClientConfig contains the information to make a TLS connection with the webhook*\n\n    - **webhooks.clientConfig.caBundle** (\\[\\]byte)\n\n      `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.\n\n    - **webhooks.clientConfig.service** (ServiceReference)\n\n      `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\n      If the webhook is running within the cluster, then you should use `service`.\n\n      *ServiceReference holds a reference to Service.legacy.k8s.io*\n\n      - **webhooks.clientConfig.service.name** (string), required\n\n        `name` is the name of the service. Required\n\n      - **webhooks.clientConfig.service.namespace** (string), required\n\n        `namespace` is the namespace of the service. Required\n\n      - **webhooks.clientConfig.service.path** (string)\n\n        `path` is an optional URL path which will be sent in any request to this service.\n\n      - **webhooks.clientConfig.service.port** (int32)\n\n        If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).\n\n    - **webhooks.clientConfig.url** (string)\n\n      `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\n      The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\n      Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\n      The scheme must be \"https\"; the URL must begin with \"https://\".\n\n      A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\n      Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.\n\n  - **webhooks.name** (string), required\n\n    The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.\n\n  - **webhooks.sideEffects** (string), required\n\n    SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.\n\n  - **webhooks.failurePolicy** (string)\n\n    FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n\n  - **webhooks.matchConditions** (\\[\\]MatchCondition)\n\n    *Patch strategy: merge on key `name`*\n\n    *Map: unique values on key name will be kept during a merge*\n\n    MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\n    The exact matching logic is (in order):\n\n    1.  If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n    2.  If ALL matchConditions evaluate to TRUE, the webhook is called.\n    3.  If any matchCondition evaluates to an error (but none are FALSE):\n        - If failurePolicy=Fail, reject the request\n        - If failurePolicy=Ignore, the error is ignored and the webhook is skipped\n\n    This is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.\n\n    *MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.*\n\n    - **webhooks.matchConditions.expression** (string), required\n\n      Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n      'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See <https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz> 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: <https://kubernetes.io/docs/reference/using-api/cel/>\n\n      Required.\n\n    - **webhooks.matchConditions.name** (string), required\n\n      Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '*' or '.', and must start and end with an alphanumeric character (e.g. 'MyName', or 'my.name', or '123-abc', regex used for validation is '(\\[A-Za-z0-9\\]\\[-A-Za-z0-9*.\\]\\*)?\\[A-Za-z0-9\\]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\n      Required.\n\n  - **webhooks.matchPolicy** (string)\n\n    matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n    - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n    - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\n    Defaults to \"Equivalent\"\n\n  - **webhooks.namespaceSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\n    For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": \\[ \"0\", \"1\" \\] } \\] }\n\n    If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": \\[ { \"key\": \"environment\", \"operator\": \"In\", \"values\": \\[ \"prod\", \"staging\" \\] } \\] }\n\n    See <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels> for more examples of label selectors.\n\n    Default to the empty LabelSelector, which matches everything.\n\n  - **webhooks.objectSelector** ([LabelSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/label-selector/#LabelSelector))\n\n    ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.\n\n  - **webhooks.rules** (\\[\\]RuleWithOperations)\n\n    Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches *any* Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.\n\n    *RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.*\n\n    - **webhooks.rules.apiGroups** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n\n    - **webhooks.rules.apiVersions** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n\n    - **webhooks.rules.operations** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or \\* for all of those operations and any future admission operations that are added. If '\\*' is present, the length of the slice must be one. Required.\n\n    - **webhooks.rules.resources** (\\[\\]string)\n\n      *Atomic: will be replaced during a merge*\n\n      Resources is a list of resources this rule applies to.\n\n      For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/\\*' means all resources and their subresources.\n\n      If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\n      Depending on the enclosing object, subresources might not be allowed. Required.\n\n    - **webhooks.rules.scope** (string)\n\n      scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"\\*\".\n\n  - **webhooks.timeoutSeconds** (int32)\n\n    TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.\n\n## ValidatingWebhookConfigurationList\n\nValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.\n\n- **apiVersion**: admissionregistration.k8s.io/v1\n\n- **kind**: ValidatingWebhookConfigurationList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>\n\n- **items** (\\[\\][ValidatingWebhookConfiguration](https://kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-webhook-configuration-v1/#ValidatingWebhookConfiguration)), required\n\n  List of ValidatingWebhookConfiguration.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-webhook-configuration-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/extend-resources/validating-webhook-configuration-v1/)"
- name: Volume
  id: config-and-storage-resources/volume/index
  summary: Volume represents a named volume in a pod that may be accessed by any container in the pod
  description: "# Volume\n\nVolume represents a named volume in a pod that may be accessed by any container in the pod.\n\n`import \"k8s.io/api/core/v1\"`\n\n## Volume\n\nVolume represents a named volume in a pod that may be accessed by any container in the pod.\n\n- **name** (string), required\n\n  name of the volume. Must be a DNS_LABEL and unique within the pod. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n### Exposed Persistent volumes\n\n- **persistentVolumeClaim** (PersistentVolumeClaimVolumeSource)\n\n  persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>\n\n  *PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).*\n\n  - **persistentVolumeClaim.claimName** (string), required\n\n    claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>\n\n  - **persistentVolumeClaim.readOnly** (boolean)\n\n    readOnly Will force the ReadOnly setting in VolumeMounts. Default false.\n\n### Projections\n\n- **configMap** (ConfigMapVolumeSource)\n\n  configMap represents a configMap that should populate this volume\n\n  \\*Adapts a ConfigMap into a volume.\n\n  The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.\\*\n\n  - **configMap.name** (string)\n\n    Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n  - **configMap.optional** (boolean)\n\n    optional specify whether the ConfigMap or its keys must be defined\n\n  - **configMap.defaultMode** (int32)\n\n    defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n\n  - **configMap.items** (\\[\\][KeyToPath](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#KeyToPath))\n\n    items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n\n- **secret** (SecretVolumeSource)\n\n  secret represents a secret that should populate this volume. More info: <https://kubernetes.io/docs/concepts/storage/volumes#secret>\n\n  \\*Adapts a Secret into a volume.\n\n  The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.\\*\n\n  - **secret.secretName** (string)\n\n    secretName is the name of the secret in the pod's namespace to use. More info: <https://kubernetes.io/docs/concepts/storage/volumes#secret>\n\n  - **secret.optional** (boolean)\n\n    optional field specify whether the Secret or its keys must be defined\n\n  - **secret.defaultMode** (int32)\n\n    defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n\n  - **secret.items** (\\[\\][KeyToPath](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#KeyToPath))\n\n    items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n\n- **downwardAPI** (DownwardAPIVolumeSource)\n\n  downwardAPI represents downward API about the pod that should populate this volume\n\n  *DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.*\n\n  - **downwardAPI.defaultMode** (int32)\n\n    Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n\n  - **downwardAPI.items** (\\[\\][DownwardAPIVolumeFile](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#DownwardAPIVolumeFile))\n\n    Items is a list of downward API volume file\n\n- **projected** (ProjectedVolumeSource)\n\n  projected items for all in one resources secrets, configmaps, and downward API\n\n  *Represents a projected volume source*\n\n  - **projected.defaultMode** (int32)\n\n    defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n\n  - **projected.sources** (\\[\\]VolumeProjection)\n\n    sources is the list of volume projections\n\n    *Projection that may be projected along with other supported volume types*\n\n    - **projected.sources.configMap** (ConfigMapProjection)\n\n      configMap information about the configMap data to project\n\n      \\*Adapts a ConfigMap into a projected volume.\n\n      The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.\\*\n\n      - **projected.sources.configMap.name** (string)\n\n        Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **projected.sources.configMap.optional** (boolean)\n\n        optional specify whether the ConfigMap or its keys must be defined\n\n      - **projected.sources.configMap.items** (\\[\\][KeyToPath](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#KeyToPath))\n\n        items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n\n    - **projected.sources.downwardAPI** (DownwardAPIProjection)\n\n      downwardAPI information about the downwardAPI data to project\n\n      *Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.*\n\n      - **projected.sources.downwardAPI.items** (\\[\\][DownwardAPIVolumeFile](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#DownwardAPIVolumeFile))\n\n        Items is a list of DownwardAPIVolume file\n\n    - **projected.sources.secret** (SecretProjection)\n\n      secret information about the secret data to project\n\n      \\*Adapts a secret into a projected volume.\n\n      The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.\\*\n\n      - **projected.sources.secret.name** (string)\n\n        Name of the referent. More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>\n\n      - **projected.sources.secret.optional** (boolean)\n\n        optional field specify whether the Secret or its key must be defined\n\n      - **projected.sources.secret.items** (\\[\\][KeyToPath](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#KeyToPath))\n\n        items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n\n    - **projected.sources.serviceAccountToken** (ServiceAccountTokenProjection)\n\n      serviceAccountToken is information about the serviceAccountToken data to project\n\n      *ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).*\n\n      - **projected.sources.serviceAccountToken.path** (string), required\n\n        path is the path relative to the mount point of the file to project the token into.\n\n      - **projected.sources.serviceAccountToken.audience** (string)\n\n        audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.\n\n      - **projected.sources.serviceAccountToken.expirationSeconds** (int64)\n\n        expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.\n\n### Local / Temporary Directory\n\n- **emptyDir** (EmptyDirVolumeSource)\n\n  emptyDir represents a temporary directory that shares a pod's lifetime. More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>\n\n  *Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.*\n\n  - **emptyDir.medium** (string)\n\n    medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>\n\n  - **emptyDir.sizeLimit** ([Quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/#Quantity))\n\n    sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>\n\n- **hostPath** (HostPathVolumeSource)\n\n  hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>\n\n  *Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.*\n\n  - **hostPath.path** (string), required\n\n    path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>\n\n  - **hostPath.type** (string)\n\n    type for HostPath Volume Defaults to \"\" More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>\n\n### Persistent volumes\n\n- **awsElasticBlockStore** (AWSElasticBlockStoreVolumeSource)\n\n  awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n  \\*Represents a Persistent Disk resource in AWS.\n\n  An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.\\*\n\n  - **awsElasticBlockStore.volumeID** (string), required\n\n    volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n  - **awsElasticBlockStore.fsType** (string)\n\n    fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n  - **awsElasticBlockStore.partition** (int32)\n\n    partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n\n  - **awsElasticBlockStore.readOnly** (boolean)\n\n    readOnly value true will force the readOnly setting in VolumeMounts. More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>\n\n- **azureDisk** (AzureDiskVolumeSource)\n\n  azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n\n  *AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.*\n\n  - **azureDisk.diskName** (string), required\n\n    diskName is the Name of the data disk in the blob storage\n\n  - **azureDisk.diskURI** (string), required\n\n    diskURI is the URI of data disk in the blob storage\n\n  - **azureDisk.cachingMode** (string)\n\n    cachingMode is the Host Caching mode: None, Read Only, Read Write.\n\n  - **azureDisk.fsType** (string)\n\n    fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **azureDisk.kind** (string)\n\n    kind expected values are Shared: multiple blob disks per storage account Dedicated: single blob disk per storage account Managed: azure managed data disk (only in managed availability set). defaults to shared\n\n  - **azureDisk.readOnly** (boolean)\n\n    readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n- **azureFile** (AzureFileVolumeSource)\n\n  azureFile represents an Azure File Service mount on the host and bind mount to the pod.\n\n  *AzureFile represents an Azure File Service mount on the host and bind mount to the pod.*\n\n  - **azureFile.secretName** (string), required\n\n    secretName is the name of secret that contains Azure Storage Account Name and Key\n\n  - **azureFile.shareName** (string), required\n\n    shareName is the azure share Name\n\n  - **azureFile.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n- **cephfs** (CephFSVolumeSource)\n\n  cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n\n  *Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.*\n\n  - **cephfs.monitors** (\\[\\]string), required\n\n    monitors is Required: Monitors is a collection of Ceph monitors More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n  - **cephfs.path** (string)\n\n    path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n\n  - **cephfs.readOnly** (boolean)\n\n    readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n  - **cephfs.secretFile** (string)\n\n    secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n  - **cephfs.secretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n    secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n  - **cephfs.user** (string)\n\n    user is optional: User is the rados user name, default is admin More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>\n\n- **cinder** (CinderVolumeSource)\n\n  cinder represents a cinder volume attached and mounted on kubelets host machine. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  *Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.*\n\n  - **cinder.volumeID** (string), required\n\n    volumeID used to identify the volume in cinder. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  - **cinder.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  - **cinder.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>\n\n  - **cinder.secretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n    secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.\n\n- **csi** (CSIVolumeSource)\n\n  csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).\n\n  *Represents a source location of a volume to mount, managed by an external CSI driver*\n\n  - **csi.driver** (string), required\n\n    driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.\n\n  - **csi.fsType** (string)\n\n    fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.\n\n  - **csi.nodePublishSecretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n    nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.\n\n  - **csi.readOnly** (boolean)\n\n    readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).\n\n  - **csi.volumeAttributes** (map\\[string\\]string)\n\n    volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.\n\n- **ephemeral** (EphemeralVolumeSource)\n\n  ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\n  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).\n\n  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\n  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\n  A pod can use both types of ephemeral volumes and persistent volumes at the same time.\n\n  *Represents an ephemeral volume that is handled by a normal storage driver.*\n\n  - **ephemeral.volumeClaimTemplate** (PersistentVolumeClaimTemplate)\n\n    Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod. The name of the PVC will be `\\<pod name>-\\<volume name>` where `\\<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\n    An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\n    This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\n    Required, must not be nil.\n\n    *PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.*\n\n    - **ephemeral.volumeClaimTemplate.spec** ([PersistentVolumeClaimSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaimSpec)), required\n\n      The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.\n\n    - **ephemeral.volumeClaimTemplate.metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n      May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.\n\n- **fc** (FCVolumeSource)\n\n  fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n\n  *Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.*\n\n  - **fc.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **fc.lun** (int32)\n\n    lun is Optional: FC target lun number\n\n  - **fc.readOnly** (boolean)\n\n    readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **fc.targetWWNs** (\\[\\]string)\n\n    targetWWNs is Optional: FC target worldwide names (WWNs)\n\n  - **fc.wwids** (\\[\\]string)\n\n    wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n\n- **flexVolume** (FlexVolumeSource)\n\n  flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.\n\n  *FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.*\n\n  - **flexVolume.driver** (string), required\n\n    driver is the name of the driver to use for this volume.\n\n  - **flexVolume.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n\n  - **flexVolume.options** (map\\[string\\]string)\n\n    options is Optional: this field holds extra command options if any.\n\n  - **flexVolume.readOnly** (boolean)\n\n    readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **flexVolume.secretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n    secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n\n- **flocker** (FlockerVolumeSource)\n\n  flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n\n  *Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.*\n\n  - **flocker.datasetName** (string)\n\n    datasetName is Name of the dataset stored as metadata -\\> name on the dataset for Flocker should be considered as deprecated\n\n  - **flocker.datasetUUID** (string)\n\n    datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset\n\n- **gcePersistentDisk** (GCEPersistentDiskVolumeSource)\n\n  gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  \\*Represents a Persistent Disk resource in Google Compute Engine.\n\n  A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.\\*\n\n  - **gcePersistentDisk.pdName** (string), required\n\n    pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  - **gcePersistentDisk.fsType** (string)\n\n    fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  - **gcePersistentDisk.partition** (int32)\n\n    partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n  - **gcePersistentDisk.readOnly** (boolean)\n\n    readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>\n\n- **glusterfs** (GlusterfsVolumeSource)\n\n  glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: <https://examples.k8s.io/volumes/glusterfs/README.md>\n\n  *Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.*\n\n  - **glusterfs.endpoints** (string), required\n\n    endpoints is the endpoint name that details Glusterfs topology. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>\n\n  - **glusterfs.path** (string), required\n\n    path is the Glusterfs volume path. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>\n\n  - **glusterfs.readOnly** (boolean)\n\n    readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>\n\n- **iscsi** (ISCSIVolumeSource)\n\n  iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: <https://examples.k8s.io/volumes/iscsi/README.md>\n\n  *Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.*\n\n  - **iscsi.iqn** (string), required\n\n    iqn is the target iSCSI Qualified Name.\n\n  - **iscsi.lun** (int32), required\n\n    lun represents iSCSI Target Lun number.\n\n  - **iscsi.targetPortal** (string), required\n\n    targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n\n  - **iscsi.chapAuthDiscovery** (boolean)\n\n    chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n\n  - **iscsi.chapAuthSession** (boolean)\n\n    chapAuthSession defines whether support iSCSI Session CHAP authentication\n\n  - **iscsi.fsType** (string)\n\n    fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#iscsi>\n\n  - **iscsi.initiatorName** (string)\n\n    initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \\<target portal\\>:\\<volume name\\> will be created for the connection.\n\n  - **iscsi.iscsiInterface** (string)\n\n    iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).\n\n  - **iscsi.portals** (\\[\\]string)\n\n    portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n\n  - **iscsi.readOnly** (boolean)\n\n    readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\n\n  - **iscsi.secretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n    secretRef is the CHAP Secret for iSCSI target and initiator authentication\n\n- **nfs** (NFSVolumeSource)\n\n  nfs represents an NFS mount on the host that shares a pod's lifetime More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n  *Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.*\n\n  - **nfs.path** (string), required\n\n    path that is exported by the NFS server. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n  - **nfs.server** (string), required\n\n    server is the hostname or IP address of the NFS server. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n  - **nfs.readOnly** (boolean)\n\n    readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>\n\n- **photonPersistentDisk** (PhotonPersistentDiskVolumeSource)\n\n  photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\n\n  *Represents a Photon Controller persistent disk resource.*\n\n  - **photonPersistentDisk.pdID** (string), required\n\n    pdID is the ID that identifies Photon Controller persistent disk\n\n  - **photonPersistentDisk.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n- **portworxVolume** (PortworxVolumeSource)\n\n  portworxVolume represents a portworx volume attached and mounted on kubelets host machine\n\n  *PortworxVolumeSource represents a Portworx volume resource.*\n\n  - **portworxVolume.volumeID** (string), required\n\n    volumeID uniquely identifies a Portworx volume\n\n  - **portworxVolume.fsType** (string)\n\n    fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **portworxVolume.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n- **quobyte** (QuobyteVolumeSource)\n\n  quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n\n  *Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.*\n\n  - **quobyte.registry** (string), required\n\n    registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n\n  - **quobyte.volume** (string), required\n\n    volume is a string that references an already created Quobyte volume by name.\n\n  - **quobyte.group** (string)\n\n    group to map volume access to Default is no group\n\n  - **quobyte.readOnly** (boolean)\n\n    readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n\n  - **quobyte.tenant** (string)\n\n    tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin\n\n  - **quobyte.user** (string)\n\n    user to map volume access to Defaults to serivceaccount user\n\n- **rbd** (RBDVolumeSource)\n\n  rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: <https://examples.k8s.io/volumes/rbd/README.md>\n\n  *Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.*\n\n  - **rbd.image** (string), required\n\n    image is the rados image name. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.monitors** (\\[\\]string), required\n\n    monitors is a collection of Ceph monitors. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.fsType** (string)\n\n    fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: <https://kubernetes.io/docs/concepts/storage/volumes#rbd>\n\n  - **rbd.keyring** (string)\n\n    keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.pool** (string)\n\n    pool is the rados pool name. Default is rbd. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.readOnly** (boolean)\n\n    readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.secretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n    secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n  - **rbd.user** (string)\n\n    user is the rados user name. Default is admin. More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>\n\n- **scaleIO** (ScaleIOVolumeSource)\n\n  scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n\n  *ScaleIOVolumeSource represents a persistent ScaleIO volume*\n\n  - **scaleIO.gateway** (string), required\n\n    gateway is the host address of the ScaleIO API Gateway.\n\n  - **scaleIO.secretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference)), required\n\n    secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\n\n  - **scaleIO.system** (string), required\n\n    system is the name of the storage system as configured in ScaleIO.\n\n  - **scaleIO.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".\n\n  - **scaleIO.protectionDomain** (string)\n\n    protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n\n  - **scaleIO.readOnly** (boolean)\n\n    readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **scaleIO.sslEnabled** (boolean)\n\n    sslEnabled Flag enable/disable SSL communication with Gateway, default false\n\n  - **scaleIO.storageMode** (string)\n\n    storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.\n\n  - **scaleIO.storagePool** (string)\n\n    storagePool is the ScaleIO Storage Pool associated with the protection domain.\n\n  - **scaleIO.volumeName** (string)\n\n    volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.\n\n- **storageos** (StorageOSVolumeSource)\n\n  storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n\n  *Represents a StorageOS persistent volume resource.*\n\n  - **storageos.fsType** (string)\n\n    fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **storageos.readOnly** (boolean)\n\n    readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n\n  - **storageos.secretRef** ([LocalObjectReference](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/local-object-reference/#LocalObjectReference))\n\n    secretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted.\n\n  - **storageos.volumeName** (string)\n\n    volumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace.\n\n  - **storageos.volumeNamespace** (string)\n\n    volumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n\n- **vsphereVolume** (VsphereVirtualDiskVolumeSource)\n\n  vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n\n  *Represents a vSphere volume resource.*\n\n  - **vsphereVolume.volumePath** (string), required\n\n    volumePath is the path that identifies vSphere volume vmdk\n\n  - **vsphereVolume.fsType** (string)\n\n    fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\n  - **vsphereVolume.storagePolicyID** (string)\n\n    storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n\n  - **vsphereVolume.storagePolicyName** (string)\n\n    storagePolicyName is the storage Policy Based Management (SPBM) profile name.\n\n### Deprecated\n\n- **gitRepo** (GitRepoVolumeSource)\n\n  gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.\n\n  \\*Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\n  DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.\\*\n\n  - **gitRepo.repository** (string), required\n\n    repository is the URL\n\n  - **gitRepo.directory** (string)\n\n    directory is the target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n\n  - **gitRepo.revision** (string)\n\n    revision is the commit hash for the specified revision.\n\n## DownwardAPIVolumeFile\n\nDownwardAPIVolumeFile represents information to create the file containing the pod field\n\n- **path** (string), required\n\n  Required: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n\n- **fieldRef** ([ObjectFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-field-selector/#ObjectFieldSelector))\n\n  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n\n- **mode** (int32)\n\n  Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n\n- **resourceFieldRef** ([ResourceFieldSelector](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/resource-field-selector/#ResourceFieldSelector))\n\n  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n\n## KeyToPath\n\nMaps a string key to a path within a volume.\n\n- **key** (string), required\n\n  key is the key to project.\n\n- **path** (string), required\n\n  path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n\n- **mode** (int32)\n\n  mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/)"
- name: VolumeAttachment
  id: config-and-storage-resources/volume-attachment-v1/index
  summary: VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node
  description: "# VolumeAttachment\n\nVolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\n`apiVersion: storage.k8s.io/v1`\n\n`import \"k8s.io/api/storage/v1\"`\n\n## VolumeAttachment\n\nVolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: VolumeAttachment\n\n- **metadata** ([ObjectMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/object-meta/#ObjectMeta))\n\n  Standard object metadata. More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **spec** ([VolumeAttachmentSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/#VolumeAttachmentSpec)), required\n\n  spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.\n\n- **status** ([VolumeAttachmentStatus](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/#VolumeAttachmentStatus))\n\n  status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.\n\n## VolumeAttachmentSpec\n\nVolumeAttachmentSpec is the specification of a VolumeAttachment request.\n\n- **attacher** (string), required\n\n  attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().\n\n- **nodeName** (string), required\n\n  nodeName represents the node that the volume should be attached to.\n\n- **source** (VolumeAttachmentSource), required\n\n  source represents the volume that should be attached.\n\n  *VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.*\n\n  - **source.inlineVolumeSpec** ([PersistentVolumeSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/#PersistentVolumeSpec))\n\n    inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.\n\n  - **source.persistentVolumeName** (string)\n\n    persistentVolumeName represents the name of the persistent volume to attach.\n\n## VolumeAttachmentStatus\n\nVolumeAttachmentStatus is the status of a VolumeAttachment request.\n\n- **attached** (boolean), required\n\n  attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.\n\n- **attachError** (VolumeError)\n\n  attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.\n\n  *VolumeError captures an error encountered during a volume operation.*\n\n  - **attachError.message** (string)\n\n    message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.\n\n  - **attachError.time** (Time)\n\n    time represents the time the error was encountered.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **attachmentMetadata** (map\\[string\\]string)\n\n  attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.\n\n- **detachError** (VolumeError)\n\n  detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.\n\n  *VolumeError captures an error encountered during a volume operation.*\n\n  - **detachError.message** (string)\n\n    message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.\n\n  - **detachError.time** (Time)\n\n    time represents the time the error was encountered.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n## VolumeAttachmentList\n\nVolumeAttachmentList is a collection of VolumeAttachment objects.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: VolumeAttachmentList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][VolumeAttachment](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/#VolumeAttachment)), required\n\n  items is the list of VolumeAttachments\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/)"
- name: VolumeAttachment.Spec
  id: config-and-storage-resources/volume-attachment-v1/index#VolumeAttachmentSpec
  summary: VolumeAttachmentSpec is the specification of a VolumeAttachment request
  belongs_to: VolumeAttachment
  description: |-
    ## VolumeAttachmentSpec

    VolumeAttachmentSpec is the specification of a VolumeAttachment request.

    - **attacher** (string), required

      attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().

    - **nodeName** (string), required

      nodeName represents the node that the volume should be attached to.

    - **source** (VolumeAttachmentSource), required

      source represents the volume that should be attached.

      *VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.*

      - **source.inlineVolumeSpec** ([PersistentVolumeSpec](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/#PersistentVolumeSpec))

        inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.

      - **source.persistentVolumeName** (string)

        persistentVolumeName represents the name of the persistent volume to attach.

    &nbsp;
- name: VolumeAttachment.Status
  id: config-and-storage-resources/volume-attachment-v1/index#VolumeAttachmentStatus
  summary: VolumeAttachmentStatus is the status of a VolumeAttachment request
  belongs_to: VolumeAttachment
  description: "## VolumeAttachmentStatus\n\nVolumeAttachmentStatus is the status of a VolumeAttachment request.\n\n- **attached** (boolean), required\n\n  attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.\n\n- **attachError** (VolumeError)\n\n  attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.\n\n  *VolumeError captures an error encountered during a volume operation.*\n\n  - **attachError.message** (string)\n\n    message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.\n\n  - **attachError.time** (Time)\n\n    time represents the time the error was encountered.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n- **attachmentMetadata** (map\\[string\\]string)\n\n  attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.\n\n- **detachError** (VolumeError)\n\n  detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.\n\n  *VolumeError captures an error encountered during a volume operation.*\n\n  - **detachError.message** (string)\n\n    message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.\n\n  - **detachError.time** (Time)\n\n    time represents the time the error was encountered.\n\n    *Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.*\n\n## VolumeAttachmentList\n\nVolumeAttachmentList is a collection of VolumeAttachment objects.\n\n- **apiVersion**: storage.k8s.io/v1\n\n- **kind**: VolumeAttachmentList\n\n- **metadata** ([ListMeta](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/list-meta/#ListMeta))\n\n  Standard list metadata More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>\n\n- **items** (\\[\\][VolumeAttachment](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/#VolumeAttachment)), required\n\n  items is the list of VolumeAttachments\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume-attachment-v1/)"
- name: watch
  id: common-parameters/common-parameters/index#watch
  summary: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications
  belongs_to: Common Parameters
  description: "## watch\n\nWatch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-parameters/common-parameters/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/common-parameters/common-parameters/)"
- name: Workload Resources
  id: workload-resources/index
  summary: Pod is a collection of containers that can run on a host
  description: "# Workload Resources\n\n##### [Pod](pod-v1/index)\n\nPod is a collection of containers that can run on a host.\n\n##### [PodTemplate](pod-template-v1/index)\n\nPodTemplate describes a template for creating copies of a predefined pod.\n\n##### [ReplicationController](replication-controller-v1/index)\n\nReplicationController represents the configuration of a replication controller.\n\n##### [ReplicaSet](replica-set-v1/index)\n\nReplicaSet ensures that a specified number of pod replicas are running at any given time.\n\n##### [Deployment](deployment-v1/index)\n\nDeployment enables declarative updates for Pods and ReplicaSets.\n\n##### [StatefulSet](stateful-set-v1/index)\n\nStatefulSet represents a set of pods with consistent identities.\n\n##### [ControllerRevision](controller-revision-v1/index)\n\nControllerRevision implements an immutable snapshot of state data.\n\n##### [DaemonSet](daemon-set-v1/index)\n\nDaemonSet represents the configuration of a daemon set.\n\n##### [Job](job-v1/index)\n\nJob represents the configuration of a single job.\n\n##### [CronJob](cron-job-v1/index)\n\nCronJob represents the configuration of a single cron job.\n\n##### [HorizontalPodAutoscaler](horizontal-pod-autoscaler-v1/index)\n\nconfiguration of a horizontal pod autoscaler.\n\n##### [HorizontalPodAutoscaler](horizontal-pod-autoscaler-v2/index)\n\nHorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.\n\n##### [PriorityClass](priority-class-v1/index)\n\nPriorityClass defines mapping from a priority class name to the priority integer value.\n\n##### [PodSchedulingContext v1alpha2](pod-scheduling-context-v1alpha2/index)\n\nPodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use \"WaitForFirstConsumer\" allocation mode.\n\n##### [ResourceClaim v1alpha2](resource-claim-v1alpha2/index)\n\nResourceClaim describes which resources are needed by a resource consumer.\n\n##### [ResourceClaimTemplate v1alpha2](resource-claim-template-v1alpha2/index)\n\nResourceClaimTemplate is used to produce ResourceClaim objects.\n\n##### [ResourceClass v1alpha2](resource-class-v1alpha2/index)\n\nResourceClass is used by administrators to influence how resources are allocated.\n\n© 2022 The Kubernetes Authors \\| Documentation Distributed under CC BY 4.0  \nCopyright © 2022 The Linux Foundation ®. All rights reserved.  \n[https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/](https://v1-28.docs.kubernetes.io/docs/reference/kubernetes-api/workload-resources/)"
