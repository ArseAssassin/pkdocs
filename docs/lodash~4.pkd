---
name: lodash
slug: lodash~4
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '4'
copyright: |-
  © JS Foundation and other contributors
  Licensed under the MIT License.
  https://lodash.com/docs/4.17.10
homepage: https://lodash.com/

---
- name: _
  id: index#lodash
  summary: Creates a lodash object which wraps value to enable implicit method chain sequences
  description: "### \\_(value)\n\n\\[source\\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1662)\n\nCreates a `lodash` object which wraps `value` to enable implicit method chain sequences. Methods that operate on and return arrays, collections, and functions can be chained together. Methods that retrieve a single value or may return a primitive value will automatically end the chain sequence and return the unwrapped value. Otherwise, the value must be unwrapped with `_#value`.  \n  \nExplicit chain sequences, which must be unwrapped with `_#value`, may be enabled using [`_.chain`](#chain).  \n  \nThe execution of chained methods is lazy, that is, it's deferred until `_#value` is implicitly or explicitly called.  \n  \nLazy evaluation allows several methods to support shortcut fusion. Shortcut fusion is an optimization to merge iteratee calls; this avoids the creation of intermediate arrays and can greatly reduce the number of iteratee executions. Sections of a chain sequence qualify for shortcut fusion if the section is applied to an array and iteratees accept only one argument. The heuristic for whether a section qualifies for shortcut fusion is subject to change.  \n  \nChaining is supported in custom builds as long as the `_#value` method is directly or indirectly included in the build.  \n  \nIn addition to lodash methods, wrappers have `Array` and `String` methods.  \n  \nThe wrapper `Array` methods are:  \n`concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`  \n  \nThe wrapper `String` methods are:  \n`replace` and `split`  \n  \nThe wrapper methods that support shortcut fusion are:  \n`at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`, `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`, `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`  \n  \nThe chainable wrapper methods are:  \n`after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`, `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`, `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`, `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`, `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`, `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`, `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`, `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`, `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`, `zipObjectDeep`, and `zipWith`  \n  \nThe wrapper methods that are **not** chainable by default are:  \n`add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`, `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`, `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`, `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`, `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`, `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`, `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`, `value`, and `words`\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to wrap in a `lodash` instance.\n\n#### Returns\n\n*(Object)*: Returns the new `lodash` wrapper instance.\n\n#### Example\n\n``` javascript\nfunction square(n) {\n  return n * n;\n}\n \n\nvar wrapped = _([1, 2, 3]);\n \n// Returns an unwrapped value.\nwrapped.reduce(_.add);\n// => 6\n \n// Returns a wrapped value.\n\nvar squares = wrapped.map(square);\n \n_.isArray(squares);\n// => false\n \n_.isArray(squares.value());\n// => true\n```"
- name: _.add
  id: index#add
  summary: Adds two numbers
  description: |-
    ### \_.add(augend, addend)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16186)[npm package](https://www.npmjs.com/package/lodash.add)

    Adds two numbers.

    #### Since

    3.4.0

    #### Arguments

    1.  `augend`*(number)*: The first number in an addition.
    2.  `addend`*(number)*: The second number in an addition.

    #### Returns

    *(number)*: Returns the total.

    #### Example

    ``` javascript
    _.add(6, 4);
    // => 10
    ```
- name: _.after
  id: index#after
  summary: The opposite of _.before; this method creates a function that invokes func once it's called n or more times
  description: |-
    ### \_.after(n, func)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9990)[npm package](https://www.npmjs.com/package/lodash.after)

    The opposite of [`_.before`](#before); this method creates a function that invokes `func` once it's called `n` or more times.

    #### Since

    0.1.0

    #### Arguments

    1.  `n`*(number)*: The number of calls before `func` is invoked.
    2.  `func`*(Function)*: The function to restrict.

    #### Returns

    *(Function)*: Returns the new restricted function.

    #### Example

    ``` javascript
    var saves = ['profile', 'settings'];
     

    var done = _.after(saves.length, function() {
      console.log('done saving!');
    });
     
    _.forEach(saves, function(type) {
      asyncSave({ 'type': type, 'complete': done });
    });
    // => Logs 'done saving!' after the two async saves have completed.
    ```
- name: _.ary
  id: index#ary
  summary: Creates a function that invokes func, with up to n arguments, ignoring any additional arguments
  description: |-
    ### \_.ary(func, \[n=func.length\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10019)[npm package](https://www.npmjs.com/package/lodash.ary)

    Creates a function that invokes `func`, with up to `n` arguments, ignoring any additional arguments.

    #### Since

    3.0.0

    #### Arguments

    1.  `func`*(Function)*: The function to cap arguments for.
    2.  `[n=func.length]`*(number)*: The arity cap.

    #### Returns

    *(Function)*: Returns the new capped function.

    #### Example

    ``` javascript
    _.map(['6', '8', '10'], _.ary(parseInt, 1));
    // => [6, 8, 10]
    ```
- name: _.assign
  id: index#assign
  summary: Assigns own enumerable string keyed properties of source objects to the destination object
  description: "### \\_.assign(object, \\[sources\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12594)[npm package](https://www.npmjs.com/package/lodash.assign)\n\nAssigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.  \n  \n**Note:** This method mutates `object` and is loosely based on [`Object.assign`](https://mdn.io/Object/assign).\n\n#### Since\n\n0.10.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The destination object.\n2.  `[sources]`*(...Object)*: The source objects.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nfunction Foo() {\n  this.a = 1;\n}\n \n\nfunction Bar() {\n  this.c = 3;\n}\n \nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n \n_.assign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }\n```"
- name: _.assignWith
  id: index#assignWith
  summary: This method is like _.assign except that it accepts customizer which is invoked to produce the assigned values
  description: "### \\_.assignWith(object, sources, \\[customizer\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12702)[npm package](https://www.npmjs.com/package/lodash.assignwith)\n\nThis method is like [`_.assign`](#assign) except that it accepts `customizer` which is invoked to produce the assigned values. If `customizer` returns `undefined`, assignment is handled by the method instead. The `customizer` is invoked with five arguments: *(objValue, srcValue, key, object, source)*.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The destination object.\n2.  `sources`*(...Object)*: The source objects.\n3.  `[customizer]`*(Function)*: The function to customize assigned values.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nfunction customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n \n\nvar defaults = _.partialRight(_.assignWith, customizer);\n \n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n```"
- name: _.at
  id: index#at
  summary: Creates an array of values corresponding to paths of object
  description: |-
    ### \_.at(object, \[paths\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12723)[npm package](https://www.npmjs.com/package/lodash.at)

    Creates an array of values corresponding to `paths` of `object`.

    #### Since

    1.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to iterate over.
    2.  `[paths]`*(...(string\|string\[\]))*: The property paths to pick.

    #### Returns

    *(Array)*: Returns the picked values.

    #### Example

    ``` javascript
    var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     
    _.at(object, ['a[0].b.c', 'a[1]']);
    // => [3, 4]
    ```
- name: _.attempt
  id: index#attempt
  summary: Attempts to invoke func, returning either the result or the caught error object
  description: |-
    ### \_.attempt(func, \[args\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15246)[npm package](https://www.npmjs.com/package/lodash.attempt)

    Attempts to invoke `func`, returning either the result or the caught error object. Any additional arguments are provided to `func` when it's invoked.

    #### Since

    3.0.0

    #### Arguments

    1.  `func`*(Function)*: The function to attempt.
    2.  `[args]`*(...\*)*: The arguments to invoke `func` with.

    #### Returns

    *(\*)*: Returns the `func` result or error object.

    #### Example

    ``` javascript
    // Avoid throwing errors for invalid selectors.

    var elements = _.attempt(function(selector) {
      return document.querySelectorAll(selector);
    }, '>_>');
     
    if (_.isError(elements)) {
      elements = [];
    }
    ```
- name: _.before
  id: index#before
  summary: Creates a function that invokes func, with the this binding and arguments of the created function, while it's called less than n times
  description: |-
    ### \_.before(n, func)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10042)[npm package](https://www.npmjs.com/package/lodash.before)

    Creates a function that invokes `func`, with the `this` binding and arguments of the created function, while it's called less than `n` times. Subsequent calls to the created function return the result of the last `func` invocation.

    #### Since

    3.0.0

    #### Arguments

    1.  `n`*(number)*: The number of calls at which `func` is no longer invoked.
    2.  `func`*(Function)*: The function to restrict.

    #### Returns

    *(Function)*: Returns the new restricted function.

    #### Example

    ``` javascript
    jQuery(element).on('click', _.before(5, addContactToList));
    // => Allows adding up to 4 contacts to the list.
    ```
- name: _.bind
  id: index#bind
  summary: Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives
  description: "### \\_.bind(func, thisArg, \\[partials\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10094)[npm package](https://www.npmjs.com/package/lodash.bind)\n\nCreates a function that invokes `func` with the `this` binding of `thisArg` and `partials` prepended to the arguments it receives.  \n  \nThe `_.bind.placeholder` value, which defaults to `_` in monolithic builds, may be used as a placeholder for partially applied arguments.  \n  \n**Note:** Unlike native `Function#bind`, this method doesn't set the \"length\" property of bound functions.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to bind.\n2.  `thisArg`*(\\*)*: The `this` binding of `func`.\n3.  `[partials]`*(...\\*)*: The arguments to be partially applied.\n\n#### Returns\n\n*(Function)*: Returns the new bound function.\n\n#### Example\n\n``` javascript\nfunction greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n \n\nvar object = { 'user': 'fred' };\n \n\nvar bound = _.bind(greet, object, 'hi');\n\nbound('!');\n// => 'hi fred!'\n \n// Bound with placeholders.\n\nvar bound = _.bind(greet, object, _, '!');\n\nbound('hi');\n// => 'hi fred!'\n```"
- name: _.bindAll
  id: index#bindAll
  summary: Binds methods of an object to the object itself, overwriting the existing method
  description: "### \\_.bindAll(object, methodNames)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15280)[npm package](https://www.npmjs.com/package/lodash.bindall)\n\nBinds methods of an object to the object itself, overwriting the existing method.  \n  \n**Note:** This method doesn't set the \"length\" property of bound functions.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to bind and assign the bound methods to.\n2.  `methodNames`*(...(string\\|string\\[\\]))*: The object method names to bind.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nvar view = {\n  'label': 'docs',\n\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n \n_.bindAll(view, ['click']);\n\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked.\n```"
- name: _.bindKey
  id: index#bindKey
  summary: Creates a function that invokes the method at object[key] with partials prepended to the arguments it receives
  description: "### \\_.bindKey(object, key, \\[partials\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10148)[npm package](https://www.npmjs.com/package/lodash.bindkey)\n\nCreates a function that invokes the method at `object[key]` with `partials` prepended to the arguments it receives.  \n  \nThis method differs from [`_.bind`](#bind) by allowing bound functions to reference methods that may be redefined or don't yet exist. See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern) for more details.  \n  \nThe `_.bindKey.placeholder` value, which defaults to `_` in monolithic builds, may be used as a placeholder for partially applied arguments.\n\n#### Since\n\n0.10.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to invoke the method on.\n2.  `key`*(string)*: The key of the method.\n3.  `[partials]`*(...\\*)*: The arguments to be partially applied.\n\n#### Returns\n\n*(Function)*: Returns the new bound function.\n\n#### Example\n\n``` javascript\nvar object = {\n  'user': 'fred',\n\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n \n\nvar bound = _.bindKey(object, 'greet', 'hi');\n\nbound('!');\n// => 'hi fred!'\n \nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n \n\nbound('!');\n// => 'hiya fred!'\n \n// Bound with placeholders.\n\nvar bound = _.bindKey(object, 'greet', _, '!');\n\nbound('hi');\n// => 'hiya fred!'\n```"
- name: _.camelCase
  id: index#camelCase
  summary: Converts string to camel case
  description: |-
    ### \_.camelCase(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14138)[npm package](https://www.npmjs.com/package/lodash.camelcase)

    Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the camel cased string.

    #### Example

    ``` javascript
    _.camelCase('Foo Bar');
    // => 'fooBar'
     
    _.camelCase('--foo-bar--');
    // => 'fooBar'
     
    _.camelCase('__FOO_BAR__');
    // => 'fooBar'
    ```
- name: _.capitalize
  id: index#capitalize
  summary: Converts the first character of string to upper case and the remaining to lower case
  description: |-
    ### \_.capitalize(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14158)[npm package](https://www.npmjs.com/package/lodash.capitalize)

    Converts the first character of `string` to upper case and the remaining to lower case.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to capitalize.

    #### Returns

    *(string)*: Returns the capitalized string.

    #### Example

    ``` javascript
    _.capitalize('FRED');
    // => 'Fred'
    ```
- name: _.castArray
  id: index#castArray
  summary: Casts value as an array if it's not one
  description: |-
    ### \_.castArray(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10994)[npm package](https://www.npmjs.com/package/lodash.castarray)

    Casts `value` as an array if it's not one.

    #### Since

    4.4.0

    #### Arguments

    1.  `value`*(\*)*: The value to inspect.

    #### Returns

    *(Array)*: Returns the cast array.

    #### Example

    ``` javascript
    _.castArray(1);
    // => [1]
     
    _.castArray({ 'a': 1 });
    // => [{ 'a': 1 }]
     
    _.castArray('abc');
    // => ['abc']
     
    _.castArray(null);
    // => [null]
     
    _.castArray(undefined);
    // => [undefined]
     
    _.castArray();
    // => []
     

    var array = [1, 2, 3];

    console.log(_.castArray(array) === array);
    // => true
    ```
- name: _.ceil
  id: index#ceil
  summary: Computes number rounded up to precision
  description: |-
    ### \_.ceil(number, \[precision=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16211)[npm package](https://www.npmjs.com/package/lodash.ceil)

    Computes `number` rounded up to `precision`.

    #### Since

    3.10.0

    #### Arguments

    1.  `number`*(number)*: The number to round up.
    2.  `[precision=0]`*(number)*: The precision to round up to.

    #### Returns

    *(number)*: Returns the rounded up number.

    #### Example

    ``` javascript
    _.ceil(4.006);
    // => 5
     
    _.ceil(6.004, 2);
    // => 6.01
     
    _.ceil(6040, -2);
    // => 6100
    ```
- name: _.chain
  id: index#chain
  summary: Creates a lodash wrapper instance that wraps value with explicit method chain sequences enabled
  description: |-
    ### \_.chain(value)

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8737)

    Creates a `lodash` wrapper instance that wraps `value` with explicit method chain sequences enabled. The result of such sequences must be unwrapped with `_#value`.

    #### Since

    1.3.0

    #### Arguments

    1.  `value`*(\*)*: The value to wrap.

    #### Returns

    *(Object)*: Returns the new `lodash` wrapper instance.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'age': 36 },

      { 'user': 'fred',    'age': 40 },

      { 'user': 'pebbles', 'age': 1 }
    ];
     

    var youngest = _
      .chain(users)
      .sortBy('age')
      .map(function(o) {
        return o.user + ' is ' + o.age;
      })
      .head()
      .value();
    // => 'pebbles is 1'
    ```
- name: _.chunk
  id: index#chunk
  summary: Creates an array of elements split into groups the length of size
  description: |-
    ### \_.chunk(array, \[size=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L6839)[npm package](https://www.npmjs.com/package/lodash.chunk)

    Creates an array of elements split into groups the length of `size`. If `array` can't be split evenly, the final chunk will be the remaining elements.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to process.
    2.  `[size=1]`*(number)*: The length of each chunk

    #### Returns

    *(Array)*: Returns the new array of chunks.

    #### Example

    ``` javascript
    _.chunk(['a', 'b', 'c', 'd'], 2);
    // => [['a', 'b'], ['c', 'd']]
     
    _.chunk(['a', 'b', 'c', 'd'], 3);
    // => [['a', 'b', 'c'], ['d']]
    ```
- name: _.clamp
  id: index#clamp
  summary: Clamps number within the inclusive lower and upper bounds
  description: |-
    ### \_.clamp(number, \[lower\], upper)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13980)[npm package](https://www.npmjs.com/package/lodash.clamp)

    Clamps `number` within the inclusive `lower` and `upper` bounds.

    #### Since

    4.0.0

    #### Arguments

    1.  `number`*(number)*: The number to clamp.
    2.  `[lower]`*(number)*: The lower bound.
    3.  `upper`*(number)*: The upper bound.

    #### Returns

    *(number)*: Returns the clamped number.

    #### Example

    ``` javascript
    _.clamp(-10, -5, 5);
    // => -5
     
    _.clamp(10, -5, 5);
    // => 5
    ```
- name: _.clone
  id: index#clone
  summary: Creates a shallow clone of value
  description: "### \\_.clone(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11028)[npm package](https://www.npmjs.com/package/lodash.clone)\n\nCreates a shallow clone of `value`.  \n  \n**Note:** This method is loosely based on the [structured clone algorithm](https://mdn.io/Structured_clone_algorithm) and supports cloning arrays, array buffers, booleans, date objects, maps, numbers, `Object` objects, regexes, sets, strings, symbols, and typed arrays. The own enumerable properties of `arguments` objects are cloned as plain objects. An empty object is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to clone.\n\n#### Returns\n\n*(\\*)*: Returns the cloned value.\n\n#### Example\n\n``` javascript\nvar objects = [{ 'a': 1 }, { 'b': 2 }];\n \n\nvar shallow = _.clone(objects);\n\nconsole.log(shallow[0] === objects[0]);\n// => true\n```"
- name: _.cloneDeep
  id: index#cloneDeep
  summary: This method is like _.clone except that it recursively clones value
  description: |-
    ### \_.cloneDeep(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11086)[npm package](https://www.npmjs.com/package/lodash.clonedeep)

    This method is like [`_.clone`](#clone) except that it recursively clones `value`.

    #### Since

    1.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to recursively clone.

    #### Returns

    *(\*)*: Returns the deep cloned value.

    #### Example

    ``` javascript
    var objects = [{ 'a': 1 }, { 'b': 2 }];
     

    var deep = _.cloneDeep(objects);

    console.log(deep[0] === objects[0]);
    // => false
    ```
- name: _.cloneDeepWith
  id: index#cloneDeepWith
  summary: This method is like _.cloneWith except that it recursively clones value
  description: |-
    ### \_.cloneDeepWith(value, \[customizer\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11118)[npm package](https://www.npmjs.com/package/lodash.clonedeepwith)

    This method is like [`_.cloneWith`](#cloneWith) except that it recursively clones `value`.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to recursively clone.
    2.  `[customizer]`*(Function)*: The function to customize cloning.

    #### Returns

    *(\*)*: Returns the deep cloned value.

    #### Example

    ``` javascript
    function customizer(value) {
      if (_.isElement(value)) {
        return value.cloneNode(true);
      }
    }
     

    var el = _.cloneDeepWith(document.body, customizer);
     

    console.log(el === document.body);
    // => false

    console.log(el.nodeName);
    // => 'BODY'

    console.log(el.childNodes.length);
    // => 20
    ```
- name: _.cloneWith
  id: index#cloneWith
  summary: This method is like _.clone except that it accepts customizer which is invoked to produce the cloned value
  description: |-
    ### \_.cloneWith(value, \[customizer\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11063)[npm package](https://www.npmjs.com/package/lodash.clonewith)

    This method is like [`_.clone`](#clone) except that it accepts `customizer` which is invoked to produce the cloned value. If `customizer` returns `undefined`, cloning is handled by the method instead. The `customizer` is invoked with up to four arguments; *(value \[, index\|key, object, stack\])*.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to clone.
    2.  `[customizer]`*(Function)*: The function to customize cloning.

    #### Returns

    *(\*)*: Returns the cloned value.

    #### Example

    ``` javascript
    function customizer(value) {
      if (_.isElement(value)) {
        return value.cloneNode(false);
      }
    }
     

    var el = _.cloneWith(document.body, customizer);
     

    console.log(el === document.body);
    // => false

    console.log(el.nodeName);
    // => 'BODY'

    console.log(el.childNodes.length);
    // => 0
    ```
- name: _.compact
  id: index#compact
  summary: Creates an array with all falsey values removed
  description: |-
    ### \_.compact(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L6874)[npm package](https://www.npmjs.com/package/lodash.compact)

    Creates an array with all falsey values removed. The values `false`, `null`, `0`, `""`, `undefined`, and `NaN` are falsey.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to compact.

    #### Returns

    *(Array)*: Returns the new array of filtered values.

    #### Example

    ``` javascript
    _.compact([0, 1, false, 2, '', 3]);
    // => [1, 2, 3]
    ```
- name: _.concat
  id: index#concat
  summary: Creates a new array concatenating array with any additional arrays and/or values
  description: |-
    ### \_.concat(array, \[values\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L6911)[npm package](https://www.npmjs.com/package/lodash.concat)

    Creates a new array concatenating `array` with any additional arrays and/or values.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to concatenate.
    2.  `[values]`*(...\*)*: The values to concatenate.

    #### Returns

    *(Array)*: Returns the new concatenated array.

    #### Example

    ``` javascript
    var array = [1];

    var other = _.concat(array, 2, [3], [[4]]);
     

    console.log(other);
    // => [1, 2, 3, [4]]
     

    console.log(array);
    // => [1]
    ```
- name: _.cond
  id: index#cond
  summary: Creates a function that iterates over pairs and invokes the corresponding function of the first predicate to return truthy
  description: |-
    ### \_.cond(pairs)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15317)[npm package](https://www.npmjs.com/package/lodash.cond)

    Creates a function that iterates over `pairs` and invokes the corresponding function of the first predicate to return truthy. The predicate-function pairs are invoked with the `this` binding and arguments of the created function.

    #### Since

    4.0.0

    #### Arguments

    1.  `pairs`*(Array)*: The predicate-function pairs.

    #### Returns

    *(Function)*: Returns the new composite function.

    #### Example

    ``` javascript
    var func = _.cond([
      [_.matches({ 'a': 1 }),           _.constant('matches A')],

      [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],

      [_.stubTrue,                      _.constant('no match')]
    ]);
     

    func({ 'a': 1, 'b': 2 });
    // => 'matches A'
     

    func({ 'a': 0, 'b': 1 });
    // => 'matches B'
     

    func({ 'a': '1', 'b': '2' });
    // => 'no match'
    ```
- name: _.conforms
  id: index#conforms
  summary: Creates a function that invokes the predicate properties of source with the corresponding property values of a given object, returning true if all predicates return truthy, else false
  description: "### \\_.conforms(source)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15363)[npm package](https://www.npmjs.com/package/lodash.conforms)\n\nCreates a function that invokes the predicate properties of `source` with the corresponding property values of a given object, returning `true` if all predicates return truthy, else `false`.  \n  \n**Note:** The created function is equivalent to [`_.conformsTo`](#conformsTo) with `source` partially applied.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `source`*(Object)*: The object of property predicates to conform to.\n\n#### Returns\n\n*(Function)*: Returns the new spec function.\n\n#### Example\n\n``` javascript\nvar objects = [\n  { 'a': 2, 'b': 1 },\n\n  { 'a': 1, 'b': 2 }\n];\n \n_.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]\n```"
- name: _.conformsTo
  id: index#conformsTo
  summary: Checks if object conforms to source by invoking the predicate properties of source with the corresponding property values of object
  description: "### \\_.conformsTo(object, source)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11147)[npm package](https://www.npmjs.com/package/lodash.conformsto)\n\nChecks if `object` conforms to `source` by invoking the predicate properties of `source` with the corresponding property values of `object`.  \n  \n**Note:** This method is equivalent to [`_.conforms`](#conforms) when `source` is partially applied.\n\n#### Since\n\n4.14.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to inspect.\n2.  `source`*(Object)*: The object of property predicates to conform to.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `object` conforms, else `false`.\n\n#### Example\n\n``` javascript\nvar object = { 'a': 1, 'b': 2 };\n \n_.conformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n \n_.conformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false\n```"
- name: _.constant
  id: index#constant
  summary: Creates a function that returns value
  description: |-
    ### \_.constant(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15386)[npm package](https://www.npmjs.com/package/lodash.constant)

    Creates a function that returns `value`.

    #### Since

    2.4.0

    #### Arguments

    1.  `value`*(\*)*: The value to return from the new function.

    #### Returns

    *(Function)*: Returns the new constant function.

    #### Example

    ``` javascript
    var objects = _.times(2, _.constant({ 'a': 1 }));
     

    console.log(objects);
    // => [{ 'a': 1 }, { 'a': 1 }]
     

    console.log(objects[0] === objects[1]);
    // => true
    ```
- name: _.countBy
  id: index#countBy
  summary: Creates an object composed of keys generated from the results of running each element of collection thru iteratee
  description: |-
    ### \_.countBy(collection, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9077)[npm package](https://www.npmjs.com/package/lodash.countby)

    Creates an object composed of keys generated from the results of running each element of `collection` thru `iteratee`. The corresponding value of each key is the number of times the key was returned by `iteratee`. The iteratee is invoked with one argument: *(value)*.

    #### Since

    0.5.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee to transform keys.

    #### Returns

    *(Object)*: Returns the composed aggregate object.

    #### Example

    ``` javascript
    _.countBy([6.1, 4.2, 6.3], Math.floor);
    // => { '4': 1, '6': 2 }
     
    // The `_.property` iteratee shorthand.
    _.countBy(['one', 'two', 'three'], 'length');
    // => { '3': 2, '5': 1 }
    ```
- name: _.create
  id: index#create
  summary: Creates an object that inherits from the prototype object
  description: |-
    ### \_.create(prototype, \[properties\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12759)[npm package](https://www.npmjs.com/package/lodash.create)

    Creates an object that inherits from the `prototype` object. If a `properties` object is given, its own enumerable string keyed properties are assigned to the created object.

    #### Since

    2.3.0

    #### Arguments

    1.  `prototype`*(Object)*: The object to inherit from.
    2.  `[properties]`*(Object)*: The properties to assign to the object.

    #### Returns

    *(Object)*: Returns the new object.

    #### Example

    ``` javascript
    function Shape() {
      this.x = 0;
      this.y = 0;
    }
     

    function Circle() {
      Shape.call(this);
    }
     
    Circle.prototype = _.create(Shape.prototype, {
      'constructor': Circle
    });
     

    var circle = new Circle;
    circle instanceof Circle;
    // => true
     
    circle instanceof Shape;
    // => true
    ```
- name: _.curry
  id: index#curry
  summary: Creates a function that accepts arguments of func and either invokes func returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining func arguments, and so on
  description: "### \\_.curry(func, \\[arity=func.length\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10198)[npm package](https://www.npmjs.com/package/lodash.curry)\n\nCreates a function that accepts arguments of `func` and either invokes `func` returning its result, if at least `arity` number of arguments have been provided, or returns a function that accepts the remaining `func` arguments, and so on. The arity of `func` may be specified if `func.length` is not sufficient.  \n  \nThe `_.curry.placeholder` value, which defaults to `_` in monolithic builds, may be used as a placeholder for provided arguments.  \n  \n**Note:** This method doesn't set the \"length\" property of curried functions.\n\n#### Since\n\n2.0.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to curry.\n2.  `[arity=func.length]`*(number)*: The arity of `func`.\n\n#### Returns\n\n*(Function)*: Returns the new curried function.\n\n#### Example\n\n``` javascript\nvar abc = function(a, b, c) {\n  return [a, b, c];\n};\n \n\nvar curried = _.curry(abc);\n \n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n \n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n \n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n \n// Curried with placeholders.\n\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]\n```"
- name: _.curryRight
  id: index#curryRight
  summary: This method is like _.curry except that arguments are applied to func in the manner of _.partialRight instead of _.partial
  description: "### \\_.curryRight(func, \\[arity=func.length\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10243)[npm package](https://www.npmjs.com/package/lodash.curryright)\n\nThis method is like [`_.curry`](#curry) except that arguments are applied to `func` in the manner of [`_.partialRight`](#partialRight) instead of [`_.partial`](#partial).  \n  \nThe `_.curryRight.placeholder` value, which defaults to `_` in monolithic builds, may be used as a placeholder for provided arguments.  \n  \n**Note:** This method doesn't set the \"length\" property of curried functions.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to curry.\n2.  `[arity=func.length]`*(number)*: The arity of `func`.\n\n#### Returns\n\n*(Function)*: Returns the new curried function.\n\n#### Example\n\n``` javascript\nvar abc = function(a, b, c) {\n  return [a, b, c];\n};\n \n\nvar curried = _.curryRight(abc);\n \n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n \n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n \n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n \n// Curried with placeholders.\n\ncurried(3)(1, _)(2);\n// => [1, 2, 3]\n```"
- name: _.debounce
  id: index#debounce
  summary: Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since the last time the debounced function was invoked
  description: "### \\_.debounce(func, \\[wait=0\\], \\[options={}\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10304)[npm package](https://www.npmjs.com/package/lodash.debounce)\n\nCreates a debounced function that delays invoking `func` until after `wait` milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a `cancel` method to cancel delayed `func` invocations and a `flush` method to immediately invoke them. Provide `options` to indicate whether `func` should be invoked on the leading and/or trailing edge of the `wait` timeout. The `func` is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last `func` invocation.  \n  \n**Note:** If `leading` and `trailing` options are `true`, `func` is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the `wait` timeout.  \n  \nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred until to the next tick, similar to `setTimeout` with a timeout of `0`.  \n  \nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/) for details over the differences between [`_.debounce`](#debounce) and [`_.throttle`](#throttle).\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to debounce.\n2.  `[wait=0]`*(number)*: The number of milliseconds to delay.\n3.  `[options={}]`*(Object)*: The options object.\n4.  `[options.leading=false]`*(boolean)*: Specify invoking on the leading edge of the timeout.\n5.  `[options.maxWait]`*(number)*: The maximum time `func` is allowed to be delayed before it's invoked.\n6.  `[options.trailing=true]`*(boolean)*: Specify invoking on the trailing edge of the timeout.\n\n#### Returns\n\n*(Function)*: Returns the new debounced function.\n\n#### Example\n\n``` javascript\n// Avoid costly calculations while the window size is in flux.\n\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n \n// Invoke `sendMail` when clicked, debouncing subsequent calls.\n\njQuery(element).on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n\n  'trailing': false\n}));\n \n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\n\nvar debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n\nvar source = new EventSource('/stream');\n\njQuery(source).on('message', debounced);\n \n// Cancel the trailing debounced invocation.\n\njQuery(window).on('popstate', debounced.cancel);\n```"
- name: _.deburr
  id: index#deburr
  summary: Deburrs string by converting Latin-1 Supplement and Latin Extended-A letters to basic Latin letters and removing combining diacritical marks
  description: |-
    ### \_.deburr(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14180)[npm package](https://www.npmjs.com/package/lodash.deburr)

    Deburrs `string` by converting [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table) and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A) letters to basic Latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to deburr.

    #### Returns

    *(string)*: Returns the deburred string.

    #### Example

    ``` javascript
    _.deburr('déjà vu');
    // => 'deja vu'
    ```
- name: _.defaults
  id: index#defaults
  summary: Assigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to undefined
  description: "### \\_.defaults(object, \\[sources\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12785)[npm package](https://www.npmjs.com/package/lodash.defaults)\n\nAssigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to `undefined`. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The destination object.\n2.  `[sources]`*(...Object)*: The source objects.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\n_.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n```"
- name: _.defaultsDeep
  id: index#defaultsDeep
  summary: This method is like _.defaults except that it recursively assigns default properties
  description: "### \\_.defaultsDeep(object, \\[sources\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12835)[npm package](https://www.npmjs.com/package/lodash.defaultsdeep)\n\nThis method is like [`_.defaults`](#defaults) except that it recursively assigns default properties.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n3.10.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The destination object.\n2.  `[sources]`*(...Object)*: The source objects.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\n_.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }\n```"
- name: _.defaultTo
  id: index#defaultTo
  summary: Checks value to determine whether a default value should be returned in its place
  description: |-
    ### \_.defaultTo(value, defaultValue)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15412)[npm package](https://www.npmjs.com/package/lodash.defaultto)

    Checks `value` to determine whether a default value should be returned in its place. The `defaultValue` is returned if `value` is `NaN`, `null`, or `undefined`.

    #### Since

    4.14.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.
    2.  `defaultValue`*(\*)*: The default value.

    #### Returns

    *(\*)*: Returns the resolved value.

    #### Example

    ``` javascript
    _.defaultTo(1, 10);
    // => 1
     
    _.defaultTo(undefined, 10);
    // => 10
    ```
- name: _.defer
  id: index#defer
  summary: Defers invoking the func until the current call stack has cleared
  description: |-
    ### \_.defer(func, \[args\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10446)[npm package](https://www.npmjs.com/package/lodash.defer)

    Defers invoking the `func` until the current call stack has cleared. Any additional arguments are provided to `func` when it's invoked.

    #### Since

    0.1.0

    #### Arguments

    1.  `func`*(Function)*: The function to defer.
    2.  `[args]`*(...\*)*: The arguments to invoke `func` with.

    #### Returns

    *(number)*: Returns the timer id.

    #### Example

    ``` javascript
    _.defer(function(text) {
      console.log(text);
    }, 'deferred');
    // => Logs 'deferred' after one millisecond.
    ```
- name: _.delay
  id: index#delay
  summary: Invokes func after wait milliseconds
  description: |-
    ### \_.delay(func, wait, \[args\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10469)[npm package](https://www.npmjs.com/package/lodash.delay)

    Invokes `func` after `wait` milliseconds. Any additional arguments are provided to `func` when it's invoked.

    #### Since

    0.1.0

    #### Arguments

    1.  `func`*(Function)*: The function to delay.
    2.  `wait`*(number)*: The number of milliseconds to delay invocation.
    3.  `[args]`*(...\*)*: The arguments to invoke `func` with.

    #### Returns

    *(number)*: Returns the timer id.

    #### Example

    ``` javascript
    _.delay(function(text) {
      console.log(text);
    }, 1000, 'later');
    // => Logs 'later' after one second.
    ```
- name: _.difference
  id: index#difference
  summary: Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons
  description: "### \\_.difference(array, \\[values\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L6947)[npm package](https://www.npmjs.com/package/lodash.difference)\n\nCreates an array of `array` values not included in the other given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons. The order and references of result values are determined by the first array.  \n  \n**Note:** Unlike [`_.pullAll`](#pullAll), this method returns a new array.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to inspect.\n2.  `[values]`*(...Array)*: The values to exclude.\n\n#### Returns\n\n*(Array)*: Returns the new array of filtered values.\n\n#### Example\n\n``` javascript\n_.difference([2, 1], [2, 3]);\n// => [1]\n```"
- name: _.differenceBy
  id: index#differenceBy
  summary: This method is like _.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared
  description: "### \\_.differenceBy(array, \\[values\\], \\[iteratee=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L6979)[npm package](https://www.npmjs.com/package/lodash.differenceby)\n\nThis method is like [`_.difference`](#difference) except that it accepts `iteratee` which is invoked for each element of `array` and `values` to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:  \n*(value)*.  \n  \n**Note:** Unlike [`_.pullAllBy`](#pullAllBy), this method returns a new array.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to inspect.\n2.  `[values]`*(...Array)*: The values to exclude.\n3.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.\n\n#### Returns\n\n*(Array)*: Returns the new array of filtered values.\n\n#### Example\n\n``` javascript\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n \n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```"
- name: _.differenceWith
  id: index#differenceWith
  summary: This method is like _.difference except that it accepts comparator which is invoked to compare elements of array to values
  description: "### \\_.differenceWith(array, \\[values\\], \\[comparator\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7012)[npm package](https://www.npmjs.com/package/lodash.differencewith)\n\nThis method is like [`_.difference`](#difference) except that it accepts `comparator` which is invoked to compare elements of `array` to `values`. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: *(arrVal, othVal)*.  \n  \n**Note:** Unlike [`_.pullAllWith`](#pullAllWith), this method returns a new array.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to inspect.\n2.  `[values]`*(...Array)*: The values to exclude.\n3.  `[comparator]`*(Function)*: The comparator invoked per element.\n\n#### Returns\n\n*(Array)*: Returns the new array of filtered values.\n\n#### Example\n\n``` javascript\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n \n_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n// => [{ 'x': 2, 'y': 1 }]\n```"
- name: _.divide
  id: index#divide
  summary: Divide two numbers
  description: |-
    ### \_.divide(dividend, divisor)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16228)[npm package](https://www.npmjs.com/package/lodash.divide)

    Divide two numbers.

    #### Since

    4.7.0

    #### Arguments

    1.  `dividend`*(number)*: The first number in a division.
    2.  `divisor`*(number)*: The second number in a division.

    #### Returns

    *(number)*: Returns the quotient.

    #### Example

    ``` javascript
    _.divide(6, 4);
    // => 1.5
    ```
- name: _.drop
  id: index#drop
  summary: Creates a slice of array with n elements dropped from the beginning
  description: |-
    ### \_.drop(array, \[n=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7047)[npm package](https://www.npmjs.com/package/lodash.drop)

    Creates a slice of `array` with `n` elements dropped from the beginning.

    #### Since

    0.5.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[n=1]`*(number)*: The number of elements to drop.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    _.drop([1, 2, 3]);
    // => [2, 3]
     
    _.drop([1, 2, 3], 2);
    // => [3]
     
    _.drop([1, 2, 3], 5);
    // => []
     
    _.drop([1, 2, 3], 0);
    // => [1, 2, 3]
    ```
- name: _.dropRight
  id: index#dropRight
  summary: Creates a slice of array with n elements dropped from the end
  description: |-
    ### \_.dropRight(array, \[n=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7081)[npm package](https://www.npmjs.com/package/lodash.dropright)

    Creates a slice of `array` with `n` elements dropped from the end.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[n=1]`*(number)*: The number of elements to drop.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    _.dropRight([1, 2, 3]);
    // => [1, 2]
     
    _.dropRight([1, 2, 3], 2);
    // => [1]
     
    _.dropRight([1, 2, 3], 5);
    // => []
     
    _.dropRight([1, 2, 3], 0);
    // => [1, 2, 3]
    ```
- name: _.dropRightWhile
  id: index#dropRightWhile
  summary: Creates a slice of array excluding elements dropped from the end
  description: |-
    ### \_.dropRightWhile(array, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7126)[npm package](https://www.npmjs.com/package/lodash.droprightwhile)

    Creates a slice of `array` excluding elements dropped from the end. Elements are dropped until `predicate` returns falsey. The predicate is invoked with three arguments: *(value, index, array)*.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'active': true },

      { 'user': 'fred',    'active': false },

      { 'user': 'pebbles', 'active': false }
    ];
     
    _.dropRightWhile(users, function(o) { return !o.active; });
    // => objects for ['barney']
     
    // The `_.matches` iteratee shorthand.
    _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
    // => objects for ['barney', 'fred']
     
    // The `_.matchesProperty` iteratee shorthand.
    _.dropRightWhile(users, ['active', false]);
    // => objects for ['barney']
     
    // The `_.property` iteratee shorthand.
    _.dropRightWhile(users, 'active');
    // => objects for ['barney', 'fred', 'pebbles']
    ```
- name: _.dropWhile
  id: index#dropWhile
  summary: Creates a slice of array excluding elements dropped from the beginning
  description: |-
    ### \_.dropWhile(array, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7167)[npm package](https://www.npmjs.com/package/lodash.dropwhile)

    Creates a slice of `array` excluding elements dropped from the beginning. Elements are dropped until `predicate` returns falsey. The predicate is invoked with three arguments: *(value, index, array)*.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'active': false },

      { 'user': 'fred',    'active': false },

      { 'user': 'pebbles', 'active': true }
    ];
     
    _.dropWhile(users, function(o) { return !o.active; });
    // => objects for ['pebbles']
     
    // The `_.matches` iteratee shorthand.
    _.dropWhile(users, { 'user': 'barney', 'active': false });
    // => objects for ['fred', 'pebbles']
     
    // The `_.matchesProperty` iteratee shorthand.
    _.dropWhile(users, ['active', false]);
    // => objects for ['pebbles']
     
    // The `_.property` iteratee shorthand.
    _.dropWhile(users, 'active');
    // => objects for ['barney', 'fred', 'pebbles']
    ```
- name: _.endsWith
  id: index#endsWith
  summary: Checks if string ends with the given target string
  description: |-
    ### \_.endsWith(\[string=''\], \[target\], \[position=string.length\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14208)[npm package](https://www.npmjs.com/package/lodash.endswith)

    Checks if `string` ends with the given target string.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to inspect.
    2.  `[target]`*(string)*: The string to search for.
    3.  `[position=string.length]`*(number)*: The position to search up to.

    #### Returns

    *(boolean)*: Returns `true` if `string` ends with `target`, else `false`.

    #### Example

    ``` javascript
    _.endsWith('abc', 'c');
    // => true
     
    _.endsWith('abc', 'b');
    // => false
     
    _.endsWith('abc', 'b', 2);
    // => true
    ```
- name: _.eq
  id: index#eq
  summary: Performs a SameValueZero comparison between two values to determine if they are equivalent
  description: |-
    ### \_.eq(value, other)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11183)[npm package](https://www.npmjs.com/package/lodash.eq)

    Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) comparison between two values to determine if they are equivalent.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to compare.
    2.  `other`*(\*)*: The other value to compare.

    #### Returns

    *(boolean)*: Returns `true` if the values are equivalent, else `false`.

    #### Example

    ``` javascript
    var object = { 'a': 1 };

    var other = { 'a': 1 };
     
    _.eq(object, object);
    // => true
     
    _.eq(object, other);
    // => false
     
    _.eq('a', 'a');
    // => true
     
    _.eq('a', Object('a'));
    // => false
     
    _.eq(NaN, NaN);
    // => true
    ```
- name: _.escape
  id: index#escape
  summary: Converts the characters "&", "<", ">", '"', and "'" in string to their corresponding HTML entities
  description: "### \\_.escape(\\[string=''\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14250)[npm package](https://www.npmjs.com/package/lodash.escape)\n\nConverts the characters \"&\", \"\\<\", \"\\>\", '\"', and \"'\" in `string` to their corresponding HTML entities.  \n  \n**Note:** No other characters are escaped. To escape additional characters use a third-party library like [*he*](https://mths.be/he).  \n  \nThough the \"\\>\" character is escaped for symmetry, characters like \"\\>\" and \"/\" don't need escaping in HTML and have no special meaning unless they're part of a tag or unquoted attribute value. See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands) *(under \"semi-related fun fact\")* for more details.  \n  \nWhen working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping) to reduce XSS vectors.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `[string='']`*(string)*: The string to escape.\n\n#### Returns\n\n*(string)*: Returns the escaped string.\n\n#### Example\n\n``` javascript\n_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'\n```"
- name: _.escapeRegExp
  id: index#escapeRegExp
  summary: Escapes the RegExp special characters "^", "$", "", ".", "*", "+", "?", "(", ")", "[", "]", "{", "}", and "|" in string
  description: |-
    ### \_.escapeRegExp(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14272)[npm package](https://www.npmjs.com/package/lodash.escaperegexp)

    Escapes the `RegExp` special characters "^", "$", "", ".", "\*", "+", "?", "(", ")", "\[", "\]", "{", "}", and "\|" in `string`.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to escape.

    #### Returns

    *(string)*: Returns the escaped string.

    #### Example

    ``` javascript
    _.escapeRegExp('[lodash](https://lodash.com/)');
    // => '\[lodash\]\(https://lodash\.com/\)'
    ```
- name: _.every
  id: index#every
  summary: Checks if predicate returns truthy for all elements of collection
  description: "### \\_.every(collection, \\[predicate=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9126)[npm package](https://www.npmjs.com/package/lodash.every)\n\nChecks if `predicate` returns truthy for **all** elements of `collection`. Iteration is stopped once `predicate` returns falsey. The predicate is invoked with three arguments: *(value, index\\|key, collection)*.  \n  \n**Note:** This method returns `true` for [empty collections](https://en.wikipedia.org/wiki/Empty_set) because [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of elements of empty collections.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `collection`*(Array\\|Object)*: The collection to iterate over.\n2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.\n\n#### Returns\n\n*(boolean)*: Returns `true` if all elements pass the predicate check, else `false`.\n\n#### Example\n\n``` javascript\n_.every([true, 1, null, 'yes'], Boolean);\n// => false\n \n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n \n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n \n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false\n```"
- name: _.fill
  id: index#fill
  summary: Fills elements of array with value from start up to, but not including, end
  description: "### \\_.fill(array, value, \\[start=0\\], \\[end=array.length\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7202)[npm package](https://www.npmjs.com/package/lodash.fill)\n\nFills elements of `array` with `value` from `start` up to, but not including, `end`.  \n  \n**Note:** This method mutates `array`.\n\n#### Since\n\n3.2.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to fill.\n2.  `value`*(\\*)*: The value to fill `array` with.\n3.  `[start=0]`*(number)*: The start position.\n4.  `[end=array.length]`*(number)*: The end position.\n\n#### Returns\n\n*(Array)*: Returns `array`.\n\n#### Example\n\n``` javascript\nvar array = [1, 2, 3];\n \n_.fill(array, 'a');\n\nconsole.log(array);\n// => ['a', 'a', 'a']\n \n_.fill(Array(3), 2);\n// => [2, 2, 2]\n \n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n```"
- name: _.filter
  id: index#filter
  summary: Iterates over elements of collection, returning an array of all elements predicate returns truthy for
  description: "### \\_.filter(collection, \\[predicate=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9171)[npm package](https://www.npmjs.com/package/lodash.filter)\n\nIterates over elements of `collection`, returning an array of all elements `predicate` returns truthy for. The predicate is invoked with three arguments: *(value, index\\|key, collection)*.  \n  \n**Note:** Unlike [`_.remove`](#remove), this method returns a new array.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `collection`*(Array\\|Object)*: The collection to iterate over.\n2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.\n\n#### Returns\n\n*(Array)*: Returns the new filtered array.\n\n#### Example\n\n``` javascript\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n \n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n \n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']\n```"
- name: _.find
  id: index#find
  summary: Iterates over elements of collection, returning the first element predicate returns truthy for
  description: |-
    ### \_.find(collection, \[predicate=\_.identity\], \[fromIndex=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9212)[npm package](https://www.npmjs.com/package/lodash.find)

    Iterates over elements of `collection`, returning the first element `predicate` returns truthy for. The predicate is invoked with three arguments: *(value, index\|key, collection)*.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to inspect.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.
    3.  `[fromIndex=0]`*(number)*: The index to search from.

    #### Returns

    *(\*)*: Returns the matched element, else `undefined`.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'age': 36, 'active': true },

      { 'user': 'fred',    'age': 40, 'active': false },

      { 'user': 'pebbles', 'age': 1,  'active': true }
    ];
     
    _.find(users, function(o) { return o.age < 40; });
    // => object for 'barney'
     
    // The `_.matches` iteratee shorthand.
    _.find(users, { 'age': 1, 'active': true });
    // => object for 'pebbles'
     
    // The `_.matchesProperty` iteratee shorthand.
    _.find(users, ['active', false]);
    // => object for 'fred'
     
    // The `_.property` iteratee shorthand.
    _.find(users, 'active');
    // => object for 'barney'
    ```
- name: _.findIndex
  id: index#findIndex
  summary: This method is like _.find except that it returns the index of the first element predicate returns truthy for instead of the element itself
  description: |-
    ### \_.findIndex(array, \[predicate=\_.identity\], \[fromIndex=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7249)[npm package](https://www.npmjs.com/package/lodash.findindex)

    This method is like [`_.find`](#find) except that it returns the index of the first element `predicate` returns truthy for instead of the element itself.

    #### Since

    1.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.
    3.  `[fromIndex=0]`*(number)*: The index to search from.

    #### Returns

    *(number)*: Returns the index of the found element, else `-1`.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'active': false },

      { 'user': 'fred',    'active': false },

      { 'user': 'pebbles', 'active': true }
    ];
     
    _.findIndex(users, function(o) { return o.user == 'barney'; });
    // => 0
     
    // The `_.matches` iteratee shorthand.
    _.findIndex(users, { 'user': 'fred', 'active': false });
    // => 1
     
    // The `_.matchesProperty` iteratee shorthand.
    _.findIndex(users, ['active', false]);
    // => 0
     
    // The `_.property` iteratee shorthand.
    _.findIndex(users, 'active');
    // => 2
    ```
- name: _.findKey
  id: index#findKey
  summary: This method is like _.find except that it returns the key of the first element predicate returns truthy for instead of the element itself
  description: |-
    ### \_.findKey(object, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12875)[npm package](https://www.npmjs.com/package/lodash.findkey)

    This method is like [`_.find`](#find) except that it returns the key of the first element `predicate` returns truthy for instead of the element itself.

    #### Since

    1.1.0

    #### Arguments

    1.  `object`*(Object)*: The object to inspect.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(\*)*: Returns the key of the matched element, else `undefined`.

    #### Example

    ``` javascript
    var users = {
      'barney':  { 'age': 36, 'active': true },

      'fred':    { 'age': 40, 'active': false },

      'pebbles': { 'age': 1,  'active': true }
    };
     
    _.findKey(users, function(o) { return o.age < 40; });
    // => 'barney' (iteration order is not guaranteed)
     
    // The `_.matches` iteratee shorthand.
    _.findKey(users, { 'age': 1, 'active': true });
    // => 'pebbles'
     
    // The `_.matchesProperty` iteratee shorthand.
    _.findKey(users, ['active', false]);
    // => 'fred'
     
    // The `_.property` iteratee shorthand.
    _.findKey(users, 'active');
    // => 'barney'
    ```
- name: _.findLast
  id: index#findLast
  summary: This method is like _.find except that it iterates over elements of collection from right to left
  description: |-
    ### \_.findLast(collection, \[predicate=\_.identity\], \[fromIndex=collection.length-1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9233)[npm package](https://www.npmjs.com/package/lodash.findlast)

    This method is like [`_.find`](#find) except that it iterates over elements of `collection` from right to left.

    #### Since

    2.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to inspect.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.
    3.  `[fromIndex=collection.length-1]`*(number)*: The index to search from.

    #### Returns

    *(\*)*: Returns the matched element, else `undefined`.

    #### Example

    ``` javascript
    _.findLast([1, 2, 3, 4], function(n) {
      return n % 2 == 1;
    });
    // => 3
    ```
- name: _.findLastIndex
  id: index#findLastIndex
  summary: This method is like _.findIndex except that it iterates over elements of collection from right to left
  description: |-
    ### \_.findLastIndex(array, \[predicate=\_.identity\], \[fromIndex=array.length-1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7296)[npm package](https://www.npmjs.com/package/lodash.findlastindex)

    This method is like [`_.findIndex`](#findIndex) except that it iterates over elements of `collection` from right to left.

    #### Since

    2.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.
    3.  `[fromIndex=array.length-1]`*(number)*: The index to search from.

    #### Returns

    *(number)*: Returns the index of the found element, else `-1`.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'active': true },

      { 'user': 'fred',    'active': false },

      { 'user': 'pebbles', 'active': false }
    ];
     
    _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
    // => 2
     
    // The `_.matches` iteratee shorthand.
    _.findLastIndex(users, { 'user': 'barney', 'active': true });
    // => 0
     
    // The `_.matchesProperty` iteratee shorthand.
    _.findLastIndex(users, ['active', false]);
    // => 2
     
    // The `_.property` iteratee shorthand.
    _.findLastIndex(users, 'active');
    // => 0
    ```
- name: _.findLastKey
  id: index#findLastKey
  summary: This method is like _.findKey except that it iterates over elements of a collection in the opposite order
  description: |-
    ### \_.findLastKey(object, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12914)[npm package](https://www.npmjs.com/package/lodash.findlastkey)

    This method is like [`_.findKey`](#findKey) except that it iterates over elements of a collection in the opposite order.

    #### Since

    2.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to inspect.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(\*)*: Returns the key of the matched element, else `undefined`.

    #### Example

    ``` javascript
    var users = {
      'barney':  { 'age': 36, 'active': true },

      'fred':    { 'age': 40, 'active': false },

      'pebbles': { 'age': 1,  'active': true }
    };
     
    _.findLastKey(users, function(o) { return o.age < 40; });
    // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     
    // The `_.matches` iteratee shorthand.
    _.findLastKey(users, { 'age': 36, 'active': true });
    // => 'barney'
     
    // The `_.matchesProperty` iteratee shorthand.
    _.findLastKey(users, ['active', false]);
    // => 'fred'
     
    // The `_.property` iteratee shorthand.
    _.findLastKey(users, 'active');
    // => 'pebbles'
    ```
- name: _.flatMap
  id: index#flatMap
  summary: Creates a flattened array of values by running each element in collection thru iteratee and flattening the mapped results
  description: |-
    ### \_.flatMap(collection, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9256)[npm package](https://www.npmjs.com/package/lodash.flatmap)

    Creates a flattened array of values by running each element in `collection` thru `iteratee` and flattening the mapped results. The iteratee is invoked with three arguments: *(value, index\|key, collection)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the new flattened array.

    #### Example

    ``` javascript
    function duplicate(n) {
      return [n, n];
    }
     
    _.flatMap([1, 2], duplicate);
    // => [1, 1, 2, 2]
    ```
- name: _.flatMapDeep
  id: index#flatMapDeep
  summary: This method is like _.flatMap except that it recursively flattens the mapped results
  description: |-
    ### \_.flatMapDeep(collection, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9280)[npm package](https://www.npmjs.com/package/lodash.flatmapdeep)

    This method is like [`_.flatMap`](#flatMap) except that it recursively flattens the mapped results.

    #### Since

    4.7.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the new flattened array.

    #### Example

    ``` javascript
    function duplicate(n) {
      return [[[n, n]]];
    }
     
    _.flatMapDeep([1, 2], duplicate);
    // => [1, 1, 2, 2]
    ```
- name: _.flatMapDepth
  id: index#flatMapDepth
  summary: This method is like _.flatMap except that it recursively flattens the mapped results up to depth times
  description: |-
    ### \_.flatMapDepth(collection, \[iteratee=\_.identity\], \[depth=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9305)[npm package](https://www.npmjs.com/package/lodash.flatmapdepth)

    This method is like [`_.flatMap`](#flatMap) except that it recursively flattens the mapped results up to `depth` times.

    #### Since

    4.7.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.
    3.  `[depth=1]`*(number)*: The maximum recursion depth.

    #### Returns

    *(Array)*: Returns the new flattened array.

    #### Example

    ``` javascript
    function duplicate(n) {
      return [[[n, n]]];
    }
     
    _.flatMapDepth([1, 2], duplicate, 2);
    // => [[1, 1], [2, 2]]
    ```
- name: _.flatten
  id: index#flatten
  summary: Flattens array a single level deep
  description: |-
    ### \_.flatten(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7325)[npm package](https://www.npmjs.com/package/lodash.flatten)

    Flattens `array` a single level deep.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to flatten.

    #### Returns

    *(Array)*: Returns the new flattened array.

    #### Example

    ``` javascript
    _.flatten([1, [2, [3, [4]], 5]]);
    // => [1, 2, [3, [4]], 5]
    ```
- name: _.flattenDeep
  id: index#flattenDeep
  summary: Recursively flattens array
  description: |-
    ### \_.flattenDeep(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7344)[npm package](https://www.npmjs.com/package/lodash.flattendeep)

    Recursively flattens `array`.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to flatten.

    #### Returns

    *(Array)*: Returns the new flattened array.

    #### Example

    ``` javascript
    _.flattenDeep([1, [2, [3, [4]], 5]]);
    // => [1, 2, 3, 4, 5]
    ```
- name: _.flattenDepth
  id: index#flattenDepth
  summary: Recursively flatten array up to depth times
  description: |-
    ### \_.flattenDepth(array, \[depth=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7369)[npm package](https://www.npmjs.com/package/lodash.flattendepth)

    Recursively flatten `array` up to `depth` times.

    #### Since

    4.4.0

    #### Arguments

    1.  `array`*(Array)*: The array to flatten.
    2.  `[depth=1]`*(number)*: The maximum recursion depth.

    #### Returns

    *(Array)*: Returns the new flattened array.

    #### Example

    ``` javascript
    var array = [1, [2, [3, [4]], 5]];
     
    _.flattenDepth(array, 1);
    // => [1, 2, [3, [4]], 5]
     
    _.flattenDepth(array, 2);
    // => [1, 2, 3, [4], 5]
    ```
- name: _.flip
  id: index#flip
  summary: Creates a function that invokes func with arguments reversed
  description: |-
    ### \_.flip(func)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10491)[npm package](https://www.npmjs.com/package/lodash.flip)

    Creates a function that invokes `func` with arguments reversed.

    #### Since

    4.0.0

    #### Arguments

    1.  `func`*(Function)*: The function to flip arguments for.

    #### Returns

    *(Function)*: Returns the new flipped function.

    #### Example

    ``` javascript
    var flipped = _.flip(function() {
      return _.toArray(arguments);
    });
     

    flipped('a', 'b', 'c', 'd');
    // => ['d', 'c', 'b', 'a']
    ```
- name: _.floor
  id: index#floor
  summary: Computes number rounded down to precision
  description: |-
    ### \_.floor(number, \[precision=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16253)[npm package](https://www.npmjs.com/package/lodash.floor)

    Computes `number` rounded down to `precision`.

    #### Since

    3.10.0

    #### Arguments

    1.  `number`*(number)*: The number to round down.
    2.  `[precision=0]`*(number)*: The precision to round down to.

    #### Returns

    *(number)*: Returns the rounded down number.

    #### Example

    ``` javascript
    _.floor(4.006);
    // => 4
     
    _.floor(0.046, 2);
    // => 0.04
     
    _.floor(4060, -2);
    // => 4000
    ```
- name: _.flow
  id: index#flow
  summary: Creates a function that returns the result of invoking the given functions with the this binding of the created function, where each successive invocation is supplied the return value of the previous
  description: |-
    ### \_.flow(\[funcs\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15438)[npm package](https://www.npmjs.com/package/lodash.flow)

    Creates a function that returns the result of invoking the given functions with the `this` binding of the created function, where each successive invocation is supplied the return value of the previous.

    #### Since

    3.0.0

    #### Arguments

    1.  `[funcs]`*(...(Function\|Function\[\]))*: The functions to invoke.

    #### Returns

    *(Function)*: Returns the new composite function.

    #### Example

    ``` javascript
    function square(n) {
      return n * n;
    }
     

    var addSquare = _.flow([_.add, square]);

    addSquare(1, 2);
    // => 9
    ```
- name: _.flowRight
  id: index#flowRight
  summary: This method is like _.flow except that it creates a function that invokes the given functions from right to left
  description: |-
    ### \_.flowRight(\[funcs\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15461)[npm package](https://www.npmjs.com/package/lodash.flowright)

    This method is like [`_.flow`](#flow) except that it creates a function that invokes the given functions from right to left.

    #### Since

    3.0.0

    #### Arguments

    1.  `[funcs]`*(...(Function\|Function\[\]))*: The functions to invoke.

    #### Returns

    *(Function)*: Returns the new composite function.

    #### Example

    ``` javascript
    function square(n) {
      return n * n;
    }
     

    var addSquare = _.flowRight([square, _.add]);

    addSquare(1, 2);
    // => 9
    ```
- name: _.forIn
  id: index#forIn
  summary: Iterates over own and inherited enumerable string keyed properties of an object and invokes iteratee for each property
  description: |-
    ### \_.forIn(object, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12946)[npm package](https://www.npmjs.com/package/lodash.forin)

    Iterates over own and inherited enumerable string keyed properties of an object and invokes `iteratee` for each property. The iteratee is invoked with three arguments: *(value, key, object)*. Iteratee functions may exit iteration early by explicitly returning `false`.

    #### Since

    0.3.0

    #### Arguments

    1.  `object`*(Object)*: The object to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Object)*: Returns `object`.

    #### Example

    ``` javascript
    function Foo() {
      this.a = 1;
      this.b = 2;
    }
     
    Foo.prototype.c = 3;
     
    _.forIn(new Foo, function(value, key) {
      console.log(key);
    });
    // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
    ```
- name: _.forInRight
  id: index#forInRight
  summary: This method is like _.forIn except that it iterates over properties of object in the opposite order
  description: |-
    ### \_.forInRight(object, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12978)[npm package](https://www.npmjs.com/package/lodash.forinright)

    This method is like [`_.forIn`](#forIn) except that it iterates over properties of `object` in the opposite order.

    #### Since

    2.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Object)*: Returns `object`.

    #### Example

    ``` javascript
    function Foo() {
      this.a = 1;
      this.b = 2;
    }
     
    Foo.prototype.c = 3;
     
    _.forInRight(new Foo, function(value, key) {
      console.log(key);
    });
    // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
    ```
- name: _.forOwn
  id: index#forOwn
  summary: Iterates over own enumerable string keyed properties of an object and invokes iteratee for each property
  description: |-
    ### \_.forOwn(object, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13012)[npm package](https://www.npmjs.com/package/lodash.forown)

    Iterates over own enumerable string keyed properties of an object and invokes `iteratee` for each property. The iteratee is invoked with three arguments: *(value, key, object)*. Iteratee functions may exit iteration early by explicitly returning `false`.

    #### Since

    0.3.0

    #### Arguments

    1.  `object`*(Object)*: The object to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Object)*: Returns `object`.

    #### Example

    ``` javascript
    function Foo() {
      this.a = 1;
      this.b = 2;
    }
     
    Foo.prototype.c = 3;
     
    _.forOwn(new Foo, function(value, key) {
      console.log(key);
    });
    // => Logs 'a' then 'b' (iteration order is not guaranteed).
    ```
- name: _.forOwnRight
  id: index#forOwnRight
  summary: This method is like _.forOwn except that it iterates over properties of object in the opposite order
  description: |-
    ### \_.forOwnRight(object, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13042)[npm package](https://www.npmjs.com/package/lodash.forownright)

    This method is like [`_.forOwn`](#forOwn) except that it iterates over properties of `object` in the opposite order.

    #### Since

    2.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Object)*: Returns `object`.

    #### Example

    ``` javascript
    function Foo() {
      this.a = 1;
      this.b = 2;
    }
     
    Foo.prototype.c = 3;
     
    _.forOwnRight(new Foo, function(value, key) {
      console.log(key);
    });
    // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
    ```
- name: _.fromPairs
  id: index#fromPairs
  summary: The inverse of _.toPairs; this method returns an object composed from key-value pairs
  description: |-
    ### \_.fromPairs(pairs)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7393)[npm package](https://www.npmjs.com/package/lodash.frompairs)

    The inverse of [`_.toPairs`](#toPairs); this method returns an object composed from key-value `pairs`.

    #### Since

    4.0.0

    #### Arguments

    1.  `pairs`*(Array)*: The key-value pairs.

    #### Returns

    *(Object)*: Returns the new object.

    #### Example

    ``` javascript
    _.fromPairs([['a', 1], ['b', 2]]);
    // => { 'a': 1, 'b': 2 }
    ```
- name: _.functions
  id: index#functions
  summary: Creates an array of function property names from own enumerable properties of object
  description: |-
    ### \_.functions(object)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13069)[npm package](https://www.npmjs.com/package/lodash.functions)

    Creates an array of function property names from own enumerable properties of `object`.

    #### Since

    0.1.0

    #### Arguments

    1.  `object`*(Object)*: The object to inspect.

    #### Returns

    *(Array)*: Returns the function names.

    #### Example

    ``` javascript
    function Foo() {
      this.a = _.constant('a');
      this.b = _.constant('b');
    }
     
    Foo.prototype.c = _.constant('c');
     
    _.functions(new Foo);
    // => ['a', 'b']
    ```
- name: _.functionsIn
  id: index#functionsIn
  summary: Creates an array of function property names from own and inherited enumerable properties of object
  description: |-
    ### \_.functionsIn(object)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13096)[npm package](https://www.npmjs.com/package/lodash.functionsin)

    Creates an array of function property names from own and inherited enumerable properties of `object`.

    #### Since

    4.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to inspect.

    #### Returns

    *(Array)*: Returns the function names.

    #### Example

    ``` javascript
    function Foo() {
      this.a = _.constant('a');
      this.b = _.constant('b');
    }
     
    Foo.prototype.c = _.constant('c');
     
    _.functionsIn(new Foo);
    // => ['a', 'b', 'c']
    ```
- name: _.get
  id: index#get
  summary: Gets the value at path of object
  description: |-
    ### \_.get(object, path, \[defaultValue\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13125)[npm package](https://www.npmjs.com/package/lodash.get)

    Gets the value at `path` of `object`. If the resolved value is `undefined`, the `defaultValue` is returned in its place.

    #### Since

    3.7.0

    #### Arguments

    1.  `object`*(Object)*: The object to query.
    2.  `path`*(Array\|string)*: The path of the property to get.
    3.  `[defaultValue]`*(\*)*: The value returned for `undefined` resolved values.

    #### Returns

    *(\*)*: Returns the resolved value.

    #### Example

    ``` javascript
    var object = { 'a': [{ 'b': { 'c': 3 } }] };
     
    _.get(object, 'a[0].b.c');
    // => 3
     
    _.get(object, ['a', '0', 'b', 'c']);
    // => 3
     
    _.get(object, 'a.b.c', 'default');
    // => 'default'
    ```
- name: _.groupBy
  id: index#groupBy
  summary: Creates an object composed of keys generated from the results of running each element of collection thru iteratee
  description: |-
    ### \_.groupBy(collection, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9393)[npm package](https://www.npmjs.com/package/lodash.groupby)

    Creates an object composed of keys generated from the results of running each element of `collection` thru `iteratee`. The order of grouped values is determined by the order they occur in `collection`. The corresponding value of each key is an array of elements responsible for generating the key. The iteratee is invoked with one argument: *(value)*.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee to transform keys.

    #### Returns

    *(Object)*: Returns the composed aggregate object.

    #### Example

    ``` javascript
    _.groupBy([6.1, 4.2, 6.3], Math.floor);
    // => { '4': [4.2], '6': [6.1, 6.3] }
     
    // The `_.property` iteratee shorthand.
    _.groupBy(['one', 'two', 'three'], 'length');
    // => { '3': ['one', 'two'], '5': ['three'] }
    ```
- name: _.gt
  id: index#gt
  summary: Checks if value is greater than other
  description: |-
    ### \_.gt(value, other)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11210)[npm package](https://www.npmjs.com/package/lodash.gt)

    Checks if `value` is greater than `other`.

    #### Since

    3.9.0

    #### Arguments

    1.  `value`*(\*)*: The value to compare.
    2.  `other`*(\*)*: The other value to compare.

    #### Returns

    *(boolean)*: Returns `true` if `value` is greater than `other`, else `false`.

    #### Example

    ``` javascript
    _.gt(3, 1);
    // => true
     
    _.gt(3, 3);
    // => false
     
    _.gt(1, 3);
    // => false
    ```
- name: _.gte
  id: index#gte
  summary: Checks if value is greater than or equal to other
  description: |-
    ### \_.gte(value, other)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11235)[npm package](https://www.npmjs.com/package/lodash.gte)

    Checks if `value` is greater than or equal to `other`.

    #### Since

    3.9.0

    #### Arguments

    1.  `value`*(\*)*: The value to compare.
    2.  `other`*(\*)*: The other value to compare.

    #### Returns

    *(boolean)*: Returns `true` if `value` is greater than or equal to `other`, else `false`.

    #### Example

    ``` javascript
    _.gte(3, 1);
    // => true
     
    _.gte(3, 3);
    // => true
     
    _.gte(1, 3);
    // => false
    ```
- name: _.has
  id: index#has
  summary: Checks if path is a direct property of object
  description: |-
    ### \_.has(object, path)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13157)[npm package](https://www.npmjs.com/package/lodash.has)

    Checks if `path` is a direct property of `object`.

    #### Since

    0.1.0

    #### Arguments

    1.  `object`*(Object)*: The object to query.
    2.  `path`*(Array\|string)*: The path to check.

    #### Returns

    *(boolean)*: Returns `true` if `path` exists, else `false`.

    #### Example

    ``` javascript
    var object = { 'a': { 'b': 2 } };

    var other = _.create({ 'a': _.create({ 'b': 2 }) });
     
    _.has(object, 'a');
    // => true
     
    _.has(object, 'a.b');
    // => true
     
    _.has(object, ['a', 'b']);
    // => true
     
    _.has(other, 'a');
    // => false
    ```
- name: _.hasIn
  id: index#hasIn
  summary: Checks if path is a direct or inherited property of object
  description: |-
    ### \_.hasIn(object, path)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13187)[npm package](https://www.npmjs.com/package/lodash.hasin)

    Checks if `path` is a direct or inherited property of `object`.

    #### Since

    4.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to query.
    2.  `path`*(Array\|string)*: The path to check.

    #### Returns

    *(boolean)*: Returns `true` if `path` exists, else `false`.

    #### Example

    ``` javascript
    var object = _.create({ 'a': _.create({ 'b': 2 }) });
     
    _.hasIn(object, 'a');
    // => true
     
    _.hasIn(object, 'a.b');
    // => true
     
    _.hasIn(object, ['a', 'b']);
    // => true
     
    _.hasIn(object, 'b');
    // => false
    ```
- name: _.identity
  id: index#identity
  summary: This method returns the first argument it receives
  description: |-
    ### \_.identity(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15479)[npm package](https://www.npmjs.com/package/lodash.identity)

    This method returns the first argument it receives.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: Any value.

    #### Returns

    *(\*)*: Returns `value`.

    #### Example

    ``` javascript
    var object = { 'a': 1 };
     

    console.log(_.identity(object) === object);
    // => true
    ```
- name: _.includes
  id: index#includes
  summary: Checks if value is in collection
  description: |-
    ### \_.includes(collection, value, \[fromIndex=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9431)[npm package](https://www.npmjs.com/package/lodash.includes)

    Checks if `value` is in `collection`. If `collection` is a string, it's checked for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) is used for equality comparisons. If `fromIndex` is negative, it's used as the offset from the end of `collection`.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object\|string)*: The collection to inspect.
    2.  `value`*(\*)*: The value to search for.
    3.  `[fromIndex=0]`*(number)*: The index to search from.

    #### Returns

    *(boolean)*: Returns `true` if `value` is found, else `false`.

    #### Example

    ``` javascript
    _.includes([1, 2, 3], 1);
    // => true
     
    _.includes([1, 2, 3], 1, 2);
    // => false
     
    _.includes({ 'a': 1, 'b': 2 }, 1);
    // => true
     
    _.includes('abcd', 'bc');
    // => true
    ```
- name: _.indexOf
  id: index#indexOf
  summary: Gets the index at which the first occurrence of value is found in array using SameValueZero for equality comparisons
  description: |-
    ### \_.indexOf(array, value, \[fromIndex=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7450)[npm package](https://www.npmjs.com/package/lodash.indexof)

    Gets the index at which the first occurrence of `value` is found in `array` using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons. If `fromIndex` is negative, it's used as the offset from the end of `array`.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `value`*(\*)*: The value to search for.
    3.  `[fromIndex=0]`*(number)*: The index to search from.

    #### Returns

    *(number)*: Returns the index of the matched value, else `-1`.

    #### Example

    ``` javascript
    _.indexOf([1, 2, 1, 2], 2);
    // => 1
     
    // Search from the `fromIndex`.
    _.indexOf([1, 2, 1, 2], 2, 2);
    // => 3
    ```
- name: _.initial
  id: index#initial
  summary: Gets all but the last element of array
  description: |-
    ### \_.initial(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7476)[npm package](https://www.npmjs.com/package/lodash.initial)

    Gets all but the last element of `array`.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    _.initial([1, 2, 3]);
    // => [1, 2]
    ```
- name: _.inRange
  id: index#inRange
  summary: Checks if n is between start and up to, but not including, end
  description: |-
    ### \_.inRange(number, \[start=0\], end)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14034)[npm package](https://www.npmjs.com/package/lodash.inrange)

    Checks if `n` is between `start` and up to, but not including, `end`. If `end` is not specified, it's set to `start` with `start` then set to `0`. If `start` is greater than `end` the params are swapped to support negative ranges.

    #### Since

    3.3.0

    #### Arguments

    1.  `number`*(number)*: The number to check.
    2.  `[start=0]`*(number)*: The start of the range.
    3.  `end`*(number)*: The end of the range.

    #### Returns

    *(boolean)*: Returns `true` if `number` is in the range, else `false`.

    #### Example

    ``` javascript
    _.inRange(3, 2, 4);
    // => true
     
    _.inRange(4, 8);
    // => true
     
    _.inRange(4, 2);
    // => false
     
    _.inRange(2, 2);
    // => false
     
    _.inRange(1.2, 2);
    // => true
     
    _.inRange(5.2, 4);
    // => false
     
    _.inRange(-3, -2, -6);
    // => true
    ```
- name: _.intersection
  id: index#intersection
  summary: Creates an array of unique values that are included in all given arrays using SameValueZero for equality comparisons
  description: |-
    ### \_.intersection(\[arrays\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7498)[npm package](https://www.npmjs.com/package/lodash.intersection)

    Creates an array of unique values that are included in all given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons. The order and references of result values are determined by the first array.

    #### Since

    0.1.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to inspect.

    #### Returns

    *(Array)*: Returns the new array of intersecting values.

    #### Example

    ``` javascript
    _.intersection([2, 1], [2, 3]);
    // => [2]
    ```
- name: _.intersectionBy
  id: index#intersectionBy
  summary: This method is like _.intersection except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which they're compared
  description: "### \\_.intersectionBy(\\[arrays\\], \\[iteratee=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7528)[npm package](https://www.npmjs.com/package/lodash.intersectionby)\n\nThis method is like [`_.intersection`](#intersection) except that it accepts `iteratee` which is invoked for each element of each `arrays` to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:  \n*(value)*.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `[arrays]`*(...Array)*: The arrays to inspect.\n2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.\n\n#### Returns\n\n*(Array)*: Returns the new array of intersecting values.\n\n#### Example\n\n``` javascript\n_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n \n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n```"
- name: _.intersectionWith
  id: index#intersectionWith
  summary: This method is like _.intersection except that it accepts comparator which is invoked to compare elements of arrays
  description: |-
    ### \_.intersectionWith(\[arrays\], \[comparator\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7563)[npm package](https://www.npmjs.com/package/lodash.intersectionwith)

    This method is like [`_.intersection`](#intersection) except that it accepts `comparator` which is invoked to compare elements of `arrays`. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: *(arrVal, othVal)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to inspect.
    2.  `[comparator]`*(Function)*: The comparator invoked per element.

    #### Returns

    *(Array)*: Returns the new array of intersecting values.

    #### Example

    ``` javascript
    var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];

    var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     
    _.intersectionWith(objects, others, _.isEqual);
    // => [{ 'x': 1, 'y': 2 }]
    ```
- name: _.invert
  id: index#invert
  summary: Creates an object composed of the inverted keys and values of object
  description: |-
    ### \_.invert(object)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13209)[npm package](https://www.npmjs.com/package/lodash.invert)

    Creates an object composed of the inverted keys and values of `object`. If `object` contains duplicate values, subsequent values overwrite property assignments of previous values.

    #### Since

    0.7.0

    #### Arguments

    1.  `object`*(Object)*: The object to invert.

    #### Returns

    *(Object)*: Returns the new inverted object.

    #### Example

    ``` javascript
    var object = { 'a': 1, 'b': 2, 'c': 1 };
     
    _.invert(object);
    // => { '1': 'c', '2': 'b' }
    ```
- name: _.invertBy
  id: index#invertBy
  summary: This method is like _.invert except that the inverted object is generated from the results of running each element of object thru iteratee
  description: |-
    ### \_.invertBy(object, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13244)[npm package](https://www.npmjs.com/package/lodash.invertby)

    This method is like [`_.invert`](#invert) except that the inverted object is generated from the results of running each element of `object` thru `iteratee`. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.1.0

    #### Arguments

    1.  `object`*(Object)*: The object to invert.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(Object)*: Returns the new inverted object.

    #### Example

    ``` javascript
    var object = { 'a': 1, 'b': 2, 'c': 1 };
     
    _.invertBy(object);
    // => { '1': ['a', 'c'], '2': ['b'] }
     
    _.invertBy(object, function(value) {
      return 'group' + value;
    });
    // => { 'group1': ['a', 'c'], 'group2': ['b'] }
    ```
- name: _.invoke
  id: index#invoke
  summary: Invokes the method at path of object
  description: |-
    ### \_.invoke(object, path, \[args\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13275)[npm package](https://www.npmjs.com/package/lodash.invoke)

    Invokes the method at `path` of `object`.

    #### Since

    4.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to query.
    2.  `path`*(Array\|string)*: The path of the method to invoke.
    3.  `[args]`*(...\*)*: The arguments to invoke the method with.

    #### Returns

    *(\*)*: Returns the result of the invoked method.

    #### Example

    ``` javascript
    var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     
    _.invoke(object, 'a[0].b.c.slice', 1, 3);
    // => [2, 3]
    ```
- name: _.invokeMap
  id: index#invokeMap
  summary: Invokes the method at path of each element in collection, returning an array of the results of each invoked method
  description: |-
    ### \_.invokeMap(collection, path, \[args\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9467)[npm package](https://www.npmjs.com/package/lodash.invokemap)

    Invokes the method at `path` of each element in `collection`, returning an array of the results of each invoked method. Any additional arguments are provided to each invoked method. If `path` is a function, it's invoked for, and `this` bound to, each element in `collection`.

    #### Since

    4.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `path`*(Array\|Function\|string)*: The path of the method to invoke or the function invoked per iteration.
    3.  `[args]`*(...\*)*: The arguments to invoke each method with.

    #### Returns

    *(Array)*: Returns the array of results.

    #### Example

    ``` javascript
    _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
    // => [[1, 5, 7], [1, 2, 3]]
     
    _.invokeMap([123, 456], String.prototype.split, '');
    // => [['1', '2', '3'], ['4', '5', '6']]
    ```
- name: _.isArguments
  id: index#isArguments
  summary: Checks if value is likely an arguments object
  description: |-
    ### \_.isArguments(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11257)[npm package](https://www.npmjs.com/package/lodash.isarguments)

    Checks if `value` is likely an `arguments` object.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is an `arguments` object, else `false`.

    #### Example

    ``` javascript
    _.isArguments(function() { return arguments; }());
    // => true
     
    _.isArguments([1, 2, 3]);
    // => false
    ```
- name: _.isArray
  id: index#isArray
  summary: Checks if value is classified as an Array object
  description: |-
    ### \_.isArray(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11285)[npm package](https://www.npmjs.com/package/lodash.isarray)

    Checks if `value` is classified as an `Array` object.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is an array, else `false`.

    #### Example

    ``` javascript
    _.isArray([1, 2, 3]);
    // => true
     
    _.isArray(document.body.children);
    // => false
     
    _.isArray('abc');
    // => false
     
    _.isArray(_.noop);
    // => false
    ```
- name: _.isArrayBuffer
  id: index#isArrayBuffer
  summary: Checks if value is classified as an ArrayBuffer object
  description: |-
    ### \_.isArrayBuffer(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11304)[npm package](https://www.npmjs.com/package/lodash.isarraybuffer)

    Checks if `value` is classified as an `ArrayBuffer` object.

    #### Since

    4.3.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is an array buffer, else `false`.

    #### Example

    ``` javascript
    _.isArrayBuffer(new ArrayBuffer(2));
    // => true
     
    _.isArrayBuffer(new Array(2));
    // => false
    ```
- name: _.isArrayLike
  id: index#isArrayLike
  summary: Checks if value is array-like
  description: |-
    ### \_.isArrayLike(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11331)[npm package](https://www.npmjs.com/package/lodash.isarraylike)

    Checks if `value` is array-like. A value is considered array-like if it's not a function and has a `value.length` that's an integer greater than or equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is array-like, else `false`.

    #### Example

    ``` javascript
    _.isArrayLike([1, 2, 3]);
    // => true
     
    _.isArrayLike(document.body.children);
    // => true
     
    _.isArrayLike('abc');
    // => true
     
    _.isArrayLike(_.noop);
    // => false
    ```
- name: _.isArrayLikeObject
  id: index#isArrayLikeObject
  summary: This method is like _.isArrayLike except that it also checks if value is an object
  description: |-
    ### \_.isArrayLikeObject(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11360)[npm package](https://www.npmjs.com/package/lodash.isarraylikeobject)

    This method is like [`_.isArrayLike`](#isArrayLike) except that it also checks if `value` is an object.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is an array-like object, else `false`.

    #### Example

    ``` javascript
    _.isArrayLikeObject([1, 2, 3]);
    // => true
     
    _.isArrayLikeObject(document.body.children);
    // => true
     
    _.isArrayLikeObject('abc');
    // => false
     
    _.isArrayLikeObject(_.noop);
    // => false
    ```
- name: _.isBoolean
  id: index#isBoolean
  summary: Checks if value is classified as a boolean primitive or object
  description: |-
    ### \_.isBoolean(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11381)[npm package](https://www.npmjs.com/package/lodash.isboolean)

    Checks if `value` is classified as a boolean primitive or object.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a boolean, else `false`.

    #### Example

    ``` javascript
    _.isBoolean(false);
    // => true
     
    _.isBoolean(null);
    // => false
    ```
- name: _.isBuffer
  id: index#isBuffer
  summary: Checks if value is a buffer
  description: |-
    ### \_.isBuffer(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11403)[npm package](https://www.npmjs.com/package/lodash.isbuffer)

    Checks if `value` is a buffer.

    #### Since

    4.3.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a buffer, else `false`.

    #### Example

    ``` javascript
    _.isBuffer(new Buffer(2));
    // => true
     
    _.isBuffer(new Uint8Array(2));
    // => false
    ```
- name: _.isDate
  id: index#isDate
  summary: Checks if value is classified as a Date object
  description: |-
    ### \_.isDate(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11422)[npm package](https://www.npmjs.com/package/lodash.isdate)

    Checks if `value` is classified as a `Date` object.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a date object, else `false`.

    #### Example

    ``` javascript
    _.isDate(new Date);
    // => true
     
    _.isDate('Mon April 23 2012');
    // => false
    ```
- name: _.isElement
  id: index#isElement
  summary: Checks if value is likely a DOM element
  description: |-
    ### \_.isElement(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11441)[npm package](https://www.npmjs.com/package/lodash.iselement)

    Checks if `value` is likely a DOM element.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a DOM element, else `false`.

    #### Example

    ``` javascript
    _.isElement(document.body);
    // => true
     
    _.isElement('<body>');
    // => false
    ```
- name: _.isEmpty
  id: index#isEmpty
  summary: Checks if value is an empty object, collection, map, or set
  description: "### \\_.isEmpty(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11478)[npm package](https://www.npmjs.com/package/lodash.isempty)\n\nChecks if `value` is an empty object, collection, map, or set.  \n  \nObjects are considered empty if they have no own enumerable string keyed properties.  \n  \nArray-like values such as `arguments` objects, arrays, buffers, strings, or jQuery-like collections are considered empty if they have a `length` of `0`. Similarly, maps and sets are considered empty if they have a `size` of `0`.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is empty, else `false`.\n\n#### Example\n\n``` javascript\n_.isEmpty(null);\n// => true\n \n_.isEmpty(true);\n// => true\n \n_.isEmpty(1);\n// => true\n \n_.isEmpty([1, 2, 3]);\n// => false\n \n_.isEmpty({ 'a': 1 });\n// => false\n```"
- name: _.isEqual
  id: index#isEqual
  summary: Performs a deep comparison between two values to determine if they are equivalent
  description: "### \\_.isEqual(value, other)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11530)[npm package](https://www.npmjs.com/package/lodash.isequal)\n\nPerforms a deep comparison between two values to determine if they are equivalent.  \n  \n**Note:** This method supports comparing arrays, array buffers, booleans, date objects, error objects, maps, numbers, `Object` objects, regexes, sets, strings, symbols, and typed arrays. `Object` objects are compared by their own, not inherited, enumerable properties. Functions and DOM nodes are compared by strict equality, i.e. `===`.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to compare.\n2.  `other`*(\\*)*: The other value to compare.\n\n#### Returns\n\n*(boolean)*: Returns `true` if the values are equivalent, else `false`.\n\n#### Example\n\n``` javascript\nvar object = { 'a': 1 };\n\nvar other = { 'a': 1 };\n \n_.isEqual(object, other);\n// => true\n \nobject === other;\n// => false\n```"
- name: _.isEqualWith
  id: index#isEqualWith
  summary: This method is like _.isEqual except that it accepts customizer which is invoked to compare values
  description: |-
    ### \_.isEqualWith(value, other, \[customizer\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11566)[npm package](https://www.npmjs.com/package/lodash.isequalwith)

    This method is like [`_.isEqual`](#isEqual) except that it accepts `customizer` which is invoked to compare values. If `customizer` returns `undefined`, comparisons are handled by the method instead. The `customizer` is invoked with up to six arguments: *(objValue, othValue \[, index\|key, object, other, stack\])*.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to compare.
    2.  `other`*(\*)*: The other value to compare.
    3.  `[customizer]`*(Function)*: The function to customize comparisons.

    #### Returns

    *(boolean)*: Returns `true` if the values are equivalent, else `false`.

    #### Example

    ``` javascript
    function isGreeting(value) {
      return /^h(?:i|ello)$/.test(value);
    }
     

    function customizer(objValue, othValue) {
      if (isGreeting(objValue) && isGreeting(othValue)) {
        return true;
      }
    }
     

    var array = ['hello', 'goodbye'];

    var other = ['hi', 'goodbye'];
     
    _.isEqualWith(array, other, customizer);
    // => true
    ```
- name: _.isError
  id: index#isError
  summary: Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError object
  description: |-
    ### \_.isError(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11590)[npm package](https://www.npmjs.com/package/lodash.iserror)

    Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError`, or `URIError` object.

    #### Since

    3.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is an error object, else `false`.

    #### Example

    ``` javascript
    _.isError(new Error);
    // => true
     
    _.isError(Error);
    // => false
    ```
- name: _.isFinite
  id: index#isFinite
  summary: Checks if value is a finite primitive number
  description: "### \\_.isFinite(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11625)[npm package](https://www.npmjs.com/package/lodash.isfinite)\n\nChecks if `value` is a finite primitive number.  \n  \n**Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is a finite number, else `false`.\n\n#### Example\n\n``` javascript\n_.isFinite(3);\n// => true\n \n_.isFinite(Number.MIN_VALUE);\n// => true\n \n_.isFinite(Infinity);\n// => false\n \n_.isFinite('3');\n// => false\n```"
- name: _.isFunction
  id: index#isFunction
  summary: Checks if value is classified as a Function object
  description: |-
    ### \_.isFunction(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11646)[npm package](https://www.npmjs.com/package/lodash.isfunction)

    Checks if `value` is classified as a `Function` object.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a function, else `false`.

    #### Example

    ``` javascript
    _.isFunction(_);
    // => true
     
    _.isFunction(/abc/);
    // => false
    ```
- name: _.isInteger
  id: index#isInteger
  summary: Checks if value is an integer
  description: "### \\_.isInteger(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11682)[npm package](https://www.npmjs.com/package/lodash.isinteger)\n\nChecks if `value` is an integer.  \n  \n**Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is an integer, else `false`.\n\n#### Example\n\n``` javascript\n_.isInteger(3);\n// => true\n \n_.isInteger(Number.MIN_VALUE);\n// => false\n \n_.isInteger(Infinity);\n// => false\n \n_.isInteger('3');\n// => false\n```"
- name: _.isLength
  id: index#isLength
  summary: Checks if value is a valid array-like length
  description: "### \\_.isLength(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11712)[npm package](https://www.npmjs.com/package/lodash.islength)\n\nChecks if `value` is a valid array-like length.  \n  \n**Note:** This method is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is a valid length, else `false`.\n\n#### Example\n\n``` javascript\n_.isLength(3);\n// => true\n \n_.isLength(Number.MIN_VALUE);\n// => false\n \n_.isLength(Infinity);\n// => false\n \n_.isLength('3');\n// => false\n```"
- name: _.isMap
  id: index#isMap
  summary: Checks if value is classified as a Map object
  description: |-
    ### \_.isMap(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11792)[npm package](https://www.npmjs.com/package/lodash.ismap)

    Checks if `value` is classified as a `Map` object.

    #### Since

    4.3.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a map, else `false`.

    #### Example

    ``` javascript
    _.isMap(new Map);
    // => true
     
    _.isMap(new WeakMap);
    // => false
    ```
- name: _.isMatch
  id: index#isMatch
  summary: Performs a partial deep comparison between object and source to determine if object contains equivalent property values
  description: "### \\_.isMatch(object, source)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11822)[npm package](https://www.npmjs.com/package/lodash.ismatch)\n\nPerforms a partial deep comparison between `object` and `source` to determine if `object` contains equivalent property values.  \n  \n**Note:** This method is equivalent to [`_.matches`](#matches) when `source` is partially applied.  \n  \nPartial comparisons will match empty array and empty object `source` values against any array or object value, respectively. See [`_.isEqual`](#isEqual) for a list of supported value comparisons.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to inspect.\n2.  `source`*(Object)*: The object of property values to match.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `object` is a match, else `false`.\n\n#### Example\n\n``` javascript\nvar object = { 'a': 1, 'b': 2 };\n \n_.isMatch(object, { 'b': 2 });\n// => true\n \n_.isMatch(object, { 'b': 1 });\n// => false\n```"
- name: _.isMatchWith
  id: index#isMatchWith
  summary: This method is like _.isMatch except that it accepts customizer which is invoked to compare values
  description: |-
    ### \_.isMatchWith(object, source, \[customizer\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11858)[npm package](https://www.npmjs.com/package/lodash.ismatchwith)

    This method is like [`_.isMatch`](#isMatch) except that it accepts `customizer` which is invoked to compare values. If `customizer` returns `undefined`, comparisons are handled by the method instead. The `customizer` is invoked with five arguments: *(objValue, srcValue, index\|key, object, source)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to inspect.
    2.  `source`*(Object)*: The object of property values to match.
    3.  `[customizer]`*(Function)*: The function to customize comparisons.

    #### Returns

    *(boolean)*: Returns `true` if `object` is a match, else `false`.

    #### Example

    ``` javascript
    function isGreeting(value) {
      return /^h(?:i|ello)$/.test(value);
    }
     

    function customizer(objValue, srcValue) {
      if (isGreeting(objValue) && isGreeting(srcValue)) {
        return true;
      }
    }
     

    var object = { 'greeting': 'hello' };

    var source = { 'greeting': 'hi' };
     
    _.isMatchWith(object, source, customizer);
    // => true
    ```
- name: _.isNaN
  id: index#isNaN
  summary: Checks if value is NaN
  description: "### \\_.isNaN(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11891)[npm package](https://www.npmjs.com/package/lodash.isnan)\n\nChecks if `value` is `NaN`.  \n  \n**Note:** This method is based on [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as global [`isNaN`](https://mdn.io/isNaN) which returns `true` for `undefined` and other non-number values.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is `NaN`, else `false`.\n\n#### Example\n\n``` javascript\n_.isNaN(NaN);\n// => true\n \n_.isNaN(new Number(NaN));\n// => true\n \n\nisNaN(undefined);\n// => true\n \n_.isNaN(undefined);\n// => false\n```"
- name: _.isNative
  id: index#isNative
  summary: Checks if value is a pristine native function
  description: "### \\_.isNative(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11924)[npm package](https://www.npmjs.com/package/lodash.isnative)\n\nChecks if `value` is a pristine native function.  \n  \n**Note:** This method can't reliably detect native functions in the presence of the core-js package because core-js circumvents this kind of detection. Despite multiple requests, the core-js maintainer has made it clear: any attempt to fix the detection will be obstructed. As a result, we're left with little choice but to throw an error. Unfortunately, this also affects packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill), which rely on core-js.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is a native function, else `false`.\n\n#### Example\n\n``` javascript\n_.isNative(Array.prototype.push);\n// => true\n \n_.isNative(_);\n// => false\n```"
- name: _.isNil
  id: index#isNil
  summary: Checks if value is null or undefined
  description: |-
    ### \_.isNil(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11972)[npm package](https://www.npmjs.com/package/lodash.isnil)

    Checks if `value` is `null` or `undefined`.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is nullish, else `false`.

    #### Example

    ``` javascript
    _.isNil(null);
    // => true
     
    _.isNil(void 0);
    // => true
     
    _.isNil(NaN);
    // => false
    ```
- name: _.isNull
  id: index#isNull
  summary: Checks if value is null
  description: |-
    ### \_.isNull(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11948)[npm package](https://www.npmjs.com/package/lodash.isnull)

    Checks if `value` is `null`.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is `null`, else `false`.

    #### Example

    ``` javascript
    _.isNull(null);
    // => true
     
    _.isNull(void 0);
    // => false
    ```
- name: _.isNumber
  id: index#isNumber
  summary: Checks if value is classified as a Number primitive or object
  description: "### \\_.isNumber(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12002)[npm package](https://www.npmjs.com/package/lodash.isnumber)\n\nChecks if `value` is classified as a `Number` primitive or object.  \n  \n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified as numbers, use the [`_.isFinite`](#isFinite) method.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is a number, else `false`.\n\n#### Example\n\n``` javascript\n_.isNumber(3);\n// => true\n \n_.isNumber(Number.MIN_VALUE);\n// => true\n \n_.isNumber(Infinity);\n// => true\n \n_.isNumber('3');\n// => false\n```"
- name: _.isObject
  id: index#isObject
  summary: Checks if value is the language type of Object
  description: |-
    ### \_.isObject(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11742)[npm package](https://www.npmjs.com/package/lodash.isobject)

    Checks if `value` is the [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types) of `Object`. *(e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)*

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is an object, else `false`.

    #### Example

    ``` javascript
    _.isObject({});
    // => true
     
    _.isObject([1, 2, 3]);
    // => true
     
    _.isObject(_.noop);
    // => true
     
    _.isObject(null);
    // => false
    ```
- name: _.isObjectLike
  id: index#isObjectLike
  summary: Checks if value is object-like
  description: |-
    ### \_.isObjectLike(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L11771)[npm package](https://www.npmjs.com/package/lodash.isobjectlike)

    Checks if `value` is object-like. A value is object-like if it's not `null` and has a `typeof` result of "object".

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is object-like, else `false`.

    #### Example

    ``` javascript
    _.isObjectLike({});
    // => true
     
    _.isObjectLike([1, 2, 3]);
    // => true
     
    _.isObjectLike(_.noop);
    // => false
     
    _.isObjectLike(null);
    // => false
    ```
- name: _.isPlainObject
  id: index#isPlainObject
  summary: Checks if value is a plain object, that is, an object created by the Object constructor or one with a [[Prototype]] of null
  description: |-
    ### \_.isPlainObject(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12035)[npm package](https://www.npmjs.com/package/lodash.isplainobject)

    Checks if `value` is a plain object, that is, an object created by the `Object` constructor or one with a `[[Prototype]]` of `null`.

    #### Since

    0.8.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a plain object, else `false`.

    #### Example

    ``` javascript
    function Foo() {
      this.a = 1;
    }
     
    _.isPlainObject(new Foo);
    // => false
     
    _.isPlainObject([1, 2, 3]);
    // => false
     
    _.isPlainObject({ 'x': 0, 'y': 0 });
    // => true
     
    _.isPlainObject(Object.create(null));
    // => true
    ```
- name: _.isRegExp
  id: index#isRegExp
  summary: Checks if value is classified as a RegExp object
  description: |-
    ### \_.isRegExp(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12065)[npm package](https://www.npmjs.com/package/lodash.isregexp)

    Checks if `value` is classified as a `RegExp` object.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a regexp, else `false`.

    #### Example

    ``` javascript
    _.isRegExp(/abc/);
    // => true
     
    _.isRegExp('/abc/');
    // => false
    ```
- name: _.isSafeInteger
  id: index#isSafeInteger
  summary: Checks if value is a safe integer
  description: "### \\_.isSafeInteger(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12094)[npm package](https://www.npmjs.com/package/lodash.issafeinteger)\n\nChecks if `value` is a safe integer. An integer is safe if it's an IEEE-754 double precision number which isn't the result of a rounded unsafe integer.  \n  \n**Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to check.\n\n#### Returns\n\n*(boolean)*: Returns `true` if `value` is a safe integer, else `false`.\n\n#### Example\n\n``` javascript\n_.isSafeInteger(3);\n// => true\n \n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n \n_.isSafeInteger(Infinity);\n// => false\n \n_.isSafeInteger('3');\n// => false\n```"
- name: _.isSet
  id: index#isSet
  summary: Checks if value is classified as a Set object
  description: |-
    ### \_.isSet(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12115)[npm package](https://www.npmjs.com/package/lodash.isset)

    Checks if `value` is classified as a `Set` object.

    #### Since

    4.3.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a set, else `false`.

    #### Example

    ``` javascript
    _.isSet(new Set);
    // => true
     
    _.isSet(new WeakSet);
    // => false
    ```
- name: _.isString
  id: index#isString
  summary: Checks if value is classified as a String primitive or object
  description: |-
    ### \_.isString(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12134)[npm package](https://www.npmjs.com/package/lodash.isstring)

    Checks if `value` is classified as a `String` primitive or object.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a string, else `false`.

    #### Example

    ``` javascript
    _.isString('abc');
    // => true
     
    _.isString(1);
    // => false
    ```
- name: _.isSymbol
  id: index#isSymbol
  summary: Checks if value is classified as a Symbol primitive or object
  description: |-
    ### \_.isSymbol(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12156)[npm package](https://www.npmjs.com/package/lodash.issymbol)

    Checks if `value` is classified as a `Symbol` primitive or object.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a symbol, else `false`.

    #### Example

    ``` javascript
    _.isSymbol(Symbol.iterator);
    // => true
     
    _.isSymbol('abc');
    // => false
    ```
- name: _.isTypedArray
  id: index#isTypedArray
  summary: Checks if value is classified as a typed array
  description: |-
    ### \_.isTypedArray(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12178)[npm package](https://www.npmjs.com/package/lodash.istypedarray)

    Checks if `value` is classified as a typed array.

    #### Since

    3.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a typed array, else `false`.

    #### Example

    ``` javascript
    _.isTypedArray(new Uint8Array);
    // => true
     
    _.isTypedArray([]);
    // => false
    ```
- name: _.isUndefined
  id: index#isUndefined
  summary: Checks if value is undefined
  description: |-
    ### \_.isUndefined(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12197)[npm package](https://www.npmjs.com/package/lodash.isundefined)

    Checks if `value` is `undefined`.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is `undefined`, else `false`.

    #### Example

    ``` javascript
    _.isUndefined(void 0);
    // => true
     
    _.isUndefined(null);
    // => false
    ```
- name: _.isWeakMap
  id: index#isWeakMap
  summary: Checks if value is classified as a WeakMap object
  description: |-
    ### \_.isWeakMap(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12218)[npm package](https://www.npmjs.com/package/lodash.isweakmap)

    Checks if `value` is classified as a `WeakMap` object.

    #### Since

    4.3.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a weak map, else `false`.

    #### Example

    ``` javascript
    _.isWeakMap(new WeakMap);
    // => true
     
    _.isWeakMap(new Map);
    // => false
    ```
- name: _.isWeakSet
  id: index#isWeakSet
  summary: Checks if value is classified as a WeakSet object
  description: |-
    ### \_.isWeakSet(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12239)[npm package](https://www.npmjs.com/package/lodash.isweakset)

    Checks if `value` is classified as a `WeakSet` object.

    #### Since

    4.3.0

    #### Arguments

    1.  `value`*(\*)*: The value to check.

    #### Returns

    *(boolean)*: Returns `true` if `value` is a weak set, else `false`.

    #### Example

    ``` javascript
    _.isWeakSet(new WeakSet);
    // => true
     
    _.isWeakSet(new Set);
    // => false
    ```
- name: _.iteratee
  id: index#iteratee
  summary: Creates a function that invokes func with the arguments of the created function
  description: |-
    ### \_.iteratee(\[func=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15525)[npm package](https://www.npmjs.com/package/lodash.iteratee)

    Creates a function that invokes `func` with the arguments of the created function. If `func` is a property name, the created function returns the property value for a given element. If `func` is an array or object, the created function returns `true` for elements that contain the equivalent source properties, otherwise it returns `false`.

    #### Since

    4.0.0

    #### Arguments

    1.  `[func=_.identity]`*(\*)*: The value to convert to a callback.

    #### Returns

    *(Function)*: Returns the callback.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney', 'age': 36, 'active': true },

      { 'user': 'fred',   'age': 40, 'active': false }
    ];
     
    // The `_.matches` iteratee shorthand.
    _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
    // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     
    // The `_.matchesProperty` iteratee shorthand.
    _.filter(users, _.iteratee(['user', 'fred']));
    // => [{ 'user': 'fred', 'age': 40 }]
     
    // The `_.property` iteratee shorthand.
    _.map(users, _.iteratee('user'));
    // => ['barney', 'fred']
     
    // Create custom iteratee shorthands.
    _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
      return !_.isRegExp(func) ? iteratee(func) : function(string) {
        return func.test(string);
      };
    });
     
    _.filter(['abc', 'def'], /ef/);
    // => ['def']
    ```
- name: _.join
  id: index#join
  summary: Converts all elements in array into a string separated by separator
  description: |-
    ### \_.join(array, \[separator=','\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7591)[npm package](https://www.npmjs.com/package/lodash.join)

    Converts all elements in `array` into a string separated by `separator`.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to convert.
    2.  `[separator=',']`*(string)*: The element separator.

    #### Returns

    *(string)*: Returns the joined string.

    #### Example

    ``` javascript
    _.join(['a', 'b', 'c'], '~');
    // => 'a~b~c'
    ```
- name: _.kebabCase
  id: index#kebabCase
  summary: Converts string to kebab case
  description: |-
    ### \_.kebabCase(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14300)[npm package](https://www.npmjs.com/package/lodash.kebabcase)

    Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the kebab cased string.

    #### Example

    ``` javascript
    _.kebabCase('Foo Bar');
    // => 'foo-bar'
     
    _.kebabCase('fooBar');
    // => 'foo-bar'
     
    _.kebabCase('__FOO_BAR__');
    // => 'foo-bar'
    ```
- name: _.keyBy
  id: index#keyBy
  summary: Creates an object composed of keys generated from the results of running each element of collection thru iteratee
  description: |-
    ### \_.keyBy(collection, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9506)[npm package](https://www.npmjs.com/package/lodash.keyby)

    Creates an object composed of keys generated from the results of running each element of `collection` thru `iteratee`. The corresponding value of each key is the last element responsible for generating the key. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee to transform keys.

    #### Returns

    *(Object)*: Returns the composed aggregate object.

    #### Example

    ``` javascript
    var array = [
      { 'dir': 'left', 'code': 97 },

      { 'dir': 'right', 'code': 100 }
    ];
     
    _.keyBy(array, function(o) {
      return String.fromCharCode(o.code);
    });
    // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     
    _.keyBy(array, 'dir');
    // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
    ```
- name: _.keys
  id: index#keys
  summary: Creates an array of the own enumerable property names of object
  description: "### \\_.keys(object)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13305)[npm package](https://www.npmjs.com/package/lodash.keys)\n\nCreates an array of the own enumerable property names of `object`.  \n  \n**Note:** Non-object values are coerced to objects. See the [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys) for more details.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to query.\n\n#### Returns\n\n*(Array)*: Returns the array of property names.\n\n#### Example\n\n``` javascript\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n \n_.keys('hi');\n// => ['0', '1']\n```"
- name: _.keysIn
  id: index#keysIn
  summary: Creates an array of the own and inherited enumerable property names of object
  description: "### \\_.keysIn(object)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13332)[npm package](https://www.npmjs.com/package/lodash.keysin)\n\nCreates an array of the own and inherited enumerable property names of `object`.  \n  \n**Note:** Non-object values are coerced to objects.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to query.\n\n#### Returns\n\n*(Array)*: Returns the array of property names.\n\n#### Example\n\n``` javascript\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)\n```"
- name: _.last
  id: index#last
  summary: Gets the last element of array
  description: |-
    ### \_.last(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7609)[npm package](https://www.npmjs.com/package/lodash.last)

    Gets the last element of `array`.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.

    #### Returns

    *(\*)*: Returns the last element of `array`.

    #### Example

    ``` javascript
    _.last([1, 2, 3]);
    // => 3
    ```
- name: _.lastIndexOf
  id: index#lastIndexOf
  summary: This method is like _.indexOf except that it iterates over elements of array from right to left
  description: |-
    ### \_.lastIndexOf(array, value, \[fromIndex=array.length-1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7635)[npm package](https://www.npmjs.com/package/lodash.lastindexof)

    This method is like [`_.indexOf`](#indexOf) except that it iterates over elements of `array` from right to left.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `value`*(\*)*: The value to search for.
    3.  `[fromIndex=array.length-1]`*(number)*: The index to search from.

    #### Returns

    *(number)*: Returns the index of the matched value, else `-1`.

    #### Example

    ``` javascript
    _.lastIndexOf([1, 2, 1, 2], 2);
    // => 3
     
    // Search from the `fromIndex`.
    _.lastIndexOf([1, 2, 1, 2], 2, 2);
    // => 1
    ```
- name: _.lowerCase
  id: index#lowerCase
  summary: Converts string, as space separated words, to lower case
  description: |-
    ### \_.lowerCase(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14324)[npm package](https://www.npmjs.com/package/lodash.lowercase)

    Converts `string`, as space separated words, to lower case.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the lower cased string.

    #### Example

    ``` javascript
    _.lowerCase('--Foo-Bar--');
    // => 'foo bar'
     
    _.lowerCase('fooBar');
    // => 'foo bar'
     
    _.lowerCase('__FOO_BAR__');
    // => 'foo bar'
    ```
- name: _.lowerFirst
  id: index#lowerFirst
  summary: Converts the first character of string to lower case
  description: |-
    ### \_.lowerFirst(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14345)[npm package](https://www.npmjs.com/package/lodash.lowerfirst)

    Converts the first character of `string` to lower case.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the converted string.

    #### Example

    ``` javascript
    _.lowerFirst('Fred');
    // => 'fred'
     
    _.lowerFirst('FRED');
    // => 'fRED'
    ```
- name: _.lt
  id: index#lt
  summary: Checks if value is less than other
  description: |-
    ### \_.lt(value, other)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12266)[npm package](https://www.npmjs.com/package/lodash.lt)

    Checks if `value` is less than `other`.

    #### Since

    3.9.0

    #### Arguments

    1.  `value`*(\*)*: The value to compare.
    2.  `other`*(\*)*: The other value to compare.

    #### Returns

    *(boolean)*: Returns `true` if `value` is less than `other`, else `false`.

    #### Example

    ``` javascript
    _.lt(1, 3);
    // => true
     
    _.lt(3, 3);
    // => false
     
    _.lt(3, 1);
    // => false
    ```
- name: _.lte
  id: index#lte
  summary: Checks if value is less than or equal to other
  description: |-
    ### \_.lte(value, other)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12291)[npm package](https://www.npmjs.com/package/lodash.lte)

    Checks if `value` is less than or equal to `other`.

    #### Since

    3.9.0

    #### Arguments

    1.  `value`*(\*)*: The value to compare.
    2.  `other`*(\*)*: The other value to compare.

    #### Returns

    *(boolean)*: Returns `true` if `value` is less than or equal to `other`, else `false`.

    #### Example

    ``` javascript
    _.lte(1, 3);
    // => true
     
    _.lte(3, 3);
    // => true
     
    _.lte(3, 1);
    // => false
    ```
- name: _.map
  id: index#map
  summary: Creates an array of values by running each element in collection thru iteratee
  description: "### \\_.map(collection, \\[iteratee=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9552)[npm package](https://www.npmjs.com/package/lodash.map)\n\nCreates an array of values by running each element in `collection` thru `iteratee`. The iteratee is invoked with three arguments:  \n*(value, index\\|key, collection)*.  \n  \nMany lodash methods are guarded to work as iteratees for methods like [`_.every`](#every), [`_.filter`](#filter), [`_.map`](#map), [`_.mapValues`](#mapValues), [`_.reject`](#reject), and [`_.some`](#some).  \n  \nThe guarded methods are:  \n`ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`, `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `collection`*(Array\\|Object)*: The collection to iterate over.\n2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.\n\n#### Returns\n\n*(Array)*: Returns the new mapped array.\n\n#### Example\n\n``` javascript\nfunction square(n) {\n  return n * n;\n}\n \n_.map([4, 8], square);\n// => [16, 64]\n \n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n \n\nvar users = [\n  { 'user': 'barney' },\n\n  { 'user': 'fred' }\n];\n \n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']\n```"
- name: _.mapKeys
  id: index#mapKeys
  summary: The opposite of _.mapValues; this method creates an object with the same values as object and keys generated by running each own enumerable string keyed property of object thru iteratee
  description: |-
    ### \_.mapKeys(object, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13357)[npm package](https://www.npmjs.com/package/lodash.mapkeys)

    The opposite of [`_.mapValues`](#mapValues); this method creates an object with the same values as `object` and keys generated by running each own enumerable string keyed property of `object` thru `iteratee`. The iteratee is invoked with three arguments: *(value, key, object)*.

    #### Since

    3.8.0

    #### Arguments

    1.  `object`*(Object)*: The object to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Object)*: Returns the new mapped object.

    #### Example

    ``` javascript
    _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
      return key + value;
    });
    // => { 'a1': 1, 'b2': 2 }
    ```
- name: _.mapValues
  id: index#mapValues
  summary: Creates an object with the same keys as object and values generated by running each own enumerable string keyed property of object thru iteratee
  description: "### \\_.mapValues(object, \\[iteratee=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13395)[npm package](https://www.npmjs.com/package/lodash.mapvalues)\n\nCreates an object with the same keys as `object` and values generated by running each own enumerable string keyed property of `object` thru `iteratee`. The iteratee is invoked with three arguments:  \n*(value, key, object)*.\n\n#### Since\n\n2.4.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to iterate over.\n2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.\n\n#### Returns\n\n*(Object)*: Returns the new mapped object.\n\n#### Example\n\n``` javascript\nvar users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n \n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n \n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n```"
- name: _.matches
  id: index#matches
  summary: Creates a function that performs a partial deep comparison between a given object and source, returning true if the given object has equivalent property values, else false
  description: "### \\_.matches(source)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15557)[npm package](https://www.npmjs.com/package/lodash.matches)\n\nCreates a function that performs a partial deep comparison between a given object and `source`, returning `true` if the given object has equivalent property values, else `false`.  \n  \n**Note:** The created function is equivalent to [`_.isMatch`](#isMatch) with `source` partially applied.  \n  \nPartial comparisons will match empty array and empty object `source` values against any array or object value, respectively. See [`_.isEqual`](#isEqual) for a list of supported value comparisons.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `source`*(Object)*: The object of property values to match.\n\n#### Returns\n\n*(Function)*: Returns the new spec function.\n\n#### Example\n\n``` javascript\nvar objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n \n_.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]\n```"
- name: _.matchesProperty
  id: index#matchesProperty
  summary: Creates a function that performs a partial deep comparison between the value at path of a given object to srcValue, returning true if the object value is equivalent, else false
  description: "### \\_.matchesProperty(path, srcValue)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15587)[npm package](https://www.npmjs.com/package/lodash.matchesproperty)\n\nCreates a function that performs a partial deep comparison between the value at `path` of a given object to `srcValue`, returning `true` if the object value is equivalent, else `false`.  \n  \n**Note:** Partial comparisons will match empty array and empty object `srcValue` values against any array or object value, respectively. See [`_.isEqual`](#isEqual) for a list of supported value comparisons.\n\n#### Since\n\n3.2.0\n\n#### Arguments\n\n1.  `path`*(Array\\|string)*: The path of the property to get.\n2.  `srcValue`*(\\*)*: The value to match.\n\n#### Returns\n\n*(Function)*: Returns the new spec function.\n\n#### Example\n\n``` javascript\nvar objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n \n_.find(objects, _.matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }\n```"
- name: _.max
  id: index#max
  summary: Computes the maximum value of array
  description: |-
    ### \_.max(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16273)[npm package](https://www.npmjs.com/package/lodash.max)

    Computes the maximum value of `array`. If `array` is empty or falsey, `undefined` is returned.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.

    #### Returns

    *(\*)*: Returns the maximum value.

    #### Example

    ``` javascript
    _.max([4, 2, 8, 6]);
    // => 8
     
    _.max([]);
    // => undefined
    ```
- name: _.maxBy
  id: index#maxBy
  summary: This method is like _.max except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked
  description: |-
    ### \_.maxBy(array, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16302)[npm package](https://www.npmjs.com/package/lodash.maxby)

    This method is like [`_.max`](#max) except that it accepts `iteratee` which is invoked for each element in `array` to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(\*)*: Returns the maximum value.

    #### Example

    ``` javascript
    var objects = [{ 'n': 1 }, { 'n': 2 }];
     
    _.maxBy(objects, function(o) { return o.n; });
    // => { 'n': 2 }
     
    // The `_.property` iteratee shorthand.
    _.maxBy(objects, 'n');
    // => { 'n': 2 }
    ```
- name: _.mean
  id: index#mean
  summary: Computes the mean of the values in array
  description: |-
    ### \_.mean(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16322)[npm package](https://www.npmjs.com/package/lodash.mean)

    Computes the mean of the values in `array`.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.

    #### Returns

    *(number)*: Returns the mean.

    #### Example

    ``` javascript
    _.mean([4, 2, 8, 6]);
    // => 5
    ```
- name: _.meanBy
  id: index#meanBy
  summary: This method is like _.mean except that it accepts iteratee which is invoked for each element in array to generate the value to be averaged
  description: |-
    ### \_.meanBy(array, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16349)[npm package](https://www.npmjs.com/package/lodash.meanby)

    This method is like [`_.mean`](#mean) except that it accepts `iteratee` which is invoked for each element in `array` to generate the value to be averaged. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.7.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(number)*: Returns the mean.

    #### Example

    ``` javascript
    var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     
    _.meanBy(objects, function(o) { return o.n; });
    // => 5
     
    // The `_.property` iteratee shorthand.
    _.meanBy(objects, 'n');
    // => 5
    ```
- name: _.memoize
  id: index#memoize
  summary: Creates a function that memoizes the result of func
  description: "### \\_.memoize(func, \\[resolver\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10539)[npm package](https://www.npmjs.com/package/lodash.memoize)\n\nCreates a function that memoizes the result of `func`. If `resolver` is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key. The `func` is invoked with the `this` binding of the memoized function.  \n  \n**Note:** The cache is exposed as the `cache` property on the memoized function. Its creation may be customized by replacing the `_.memoize.Cache` constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object) method interface of `clear`, `delete`, `get`, `has`, and `set`.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to have its output memoized.\n2.  `[resolver]`*(Function)*: The function to resolve the cache key.\n\n#### Returns\n\n*(Function)*: Returns the new memoized function.\n\n#### Example\n\n``` javascript\nvar object = { 'a': 1, 'b': 2 };\n\nvar other = { 'c': 3, 'd': 4 };\n \n\nvar values = _.memoize(_.values);\n\nvalues(object);\n// => [1, 2]\n \n\nvalues(other);\n// => [3, 4]\n \nobject.a = 2;\n\nvalues(object);\n// => [1, 2]\n \n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\n\nvalues(object);\n// => ['a', 'b']\n \n// Replace `_.memoize.Cache`.\n_.memoize.Cache = WeakMap;\n```"
- name: _.merge
  id: index#merge
  summary: This method is like _.assign except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object
  description: "### \\_.merge(object, \\[sources\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13436)[npm package](https://www.npmjs.com/package/lodash.merge)\n\nThis method is like [`_.assign`](#assign) except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object. Source properties that resolve to `undefined` are skipped if a destination value exists. Array and plain object properties are merged recursively. Other objects and value types are overridden by assignment. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n0.5.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The destination object.\n2.  `[sources]`*(...Object)*: The source objects.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nvar object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n \n\nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n \n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n```"
- name: _.mergeWith
  id: index#mergeWith
  summary: This method is like _.merge except that it accepts customizer which is invoked to produce the merged values of the destination and source properties
  description: "### \\_.mergeWith(object, sources, customizer)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13471)[npm package](https://www.npmjs.com/package/lodash.mergewith)\n\nThis method is like [`_.merge`](#merge) except that it accepts `customizer` which is invoked to produce the merged values of the destination and source properties. If `customizer` returns `undefined`, merging is handled by the method instead. The `customizer` is invoked with six arguments:  \n*(objValue, srcValue, key, object, source, stack)*.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The destination object.\n2.  `sources`*(...Object)*: The source objects.\n3.  `customizer`*(Function)*: The function to customize assigned values.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nfunction customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n \n\nvar object = { 'a': [1], 'b': [2] };\n\nvar other = { 'a': [3], 'b': [4] };\n \n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }\n```"
- name: _.method
  id: index#method
  summary: Creates a function that invokes the method at path of a given object
  description: |-
    ### \_.method(path, \[args\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15615)[npm package](https://www.npmjs.com/package/lodash.method)

    Creates a function that invokes the method at `path` of a given object. Any additional arguments are provided to the invoked method.

    #### Since

    3.7.0

    #### Arguments

    1.  `path`*(Array\|string)*: The path of the method to invoke.
    2.  `[args]`*(...\*)*: The arguments to invoke the method with.

    #### Returns

    *(Function)*: Returns the new invoker function.

    #### Example

    ``` javascript
    var objects = [
      { 'a': { 'b': _.constant(2) } },

      { 'a': { 'b': _.constant(1) } }
    ];
     
    _.map(objects, _.method('a.b'));
    // => [2, 1]
     
    _.map(objects, _.method(['a', 'b']));
    // => [2, 1]
    ```
- name: _.methodOf
  id: index#methodOf
  summary: The opposite of _.method; this method creates a function that invokes the method at a given path of object
  description: |-
    ### \_.methodOf(object, \[args\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15644)[npm package](https://www.npmjs.com/package/lodash.methodof)

    The opposite of [`_.method`](#method); this method creates a function that invokes the method at a given path of `object`. Any additional arguments are provided to the invoked method.

    #### Since

    3.7.0

    #### Arguments

    1.  `object`*(Object)*: The object to query.
    2.  `[args]`*(...\*)*: The arguments to invoke the method with.

    #### Returns

    *(Function)*: Returns the new invoker function.

    #### Example

    ``` javascript
    var array = _.times(3, _.constant),

        object = { 'a': array, 'b': array, 'c': array };
     
    _.map(['a[2]', 'c[0]'], _.methodOf(object));
    // => [2, 0]
     
    _.map([['a', '2'], ['c', '0']], _.methodOf(object));
    // => [2, 0]
    ```
- name: _.min
  id: index#min
  summary: Computes the minimum value of array
  description: |-
    ### \_.min(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16371)[npm package](https://www.npmjs.com/package/lodash.min)

    Computes the minimum value of `array`. If `array` is empty or falsey, `undefined` is returned.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.

    #### Returns

    *(\*)*: Returns the minimum value.

    #### Example

    ``` javascript
    _.min([4, 2, 8, 6]);
    // => 2
     
    _.min([]);
    // => undefined
    ```
- name: _.minBy
  id: index#minBy
  summary: This method is like _.min except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked
  description: |-
    ### \_.minBy(array, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16400)[npm package](https://www.npmjs.com/package/lodash.minby)

    This method is like [`_.min`](#min) except that it accepts `iteratee` which is invoked for each element in `array` to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(\*)*: Returns the minimum value.

    #### Example

    ``` javascript
    var objects = [{ 'n': 1 }, { 'n': 2 }];
     
    _.minBy(objects, function(o) { return o.n; });
    // => { 'n': 1 }
     
    // The `_.property` iteratee shorthand.
    _.minBy(objects, 'n');
    // => { 'n': 1 }
    ```
- name: _.mixin
  id: index#mixin
  summary: Adds all own enumerable string keyed function properties of a source object to the destination object
  description: "### \\_.mixin(\\[object=lodash\\], source, \\[options={}\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15686)[npm package](https://www.npmjs.com/package/lodash.mixin)\n\nAdds all own enumerable string keyed function properties of a source object to the destination object. If `object` is a function, then methods are added to its prototype as well.  \n  \n**Note:** Use [`_.runInContext`](#runInContext) to create a pristine `lodash` function to avoid conflicts caused by modifying the original.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `[object=lodash]`*(Function\\|Object)*: The destination object.\n2.  `source`*(Object)*: The object of functions to add.\n3.  `[options={}]`*(Object)*: The options object.\n4.  `[options.chain=true]`*(boolean)*: Specify whether mixins are chainable.\n\n#### Returns\n\n*(\\*)*: Returns `object`.\n\n#### Example\n\n``` javascript\nfunction vowels(string) {\n  return _.filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n \n_.mixin({ 'vowels': vowels });\n_.vowels('fred');\n// => ['e']\n \n\n_('fred').vowels().value();\n// => ['e']\n \n_.mixin({ 'vowels': vowels }, { 'chain': false });\n\n_('fred').vowels();\n// => ['e']\n```"
- name: _.multiply
  id: index#multiply
  summary: Multiply two numbers
  description: |-
    ### \_.multiply(multiplier, multiplicand)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16421)[npm package](https://www.npmjs.com/package/lodash.multiply)

    Multiply two numbers.

    #### Since

    4.7.0

    #### Arguments

    1.  `multiplier`*(number)*: The first number in a multiplication.
    2.  `multiplicand`*(number)*: The second number in a multiplication.

    #### Returns

    *(number)*: Returns the product.

    #### Example

    ``` javascript
    _.multiply(6, 4);
    // => 24
    ```
- name: _.negate
  id: index#negate
  summary: Creates a function that negates the result of the predicate func
  description: |-
    ### \_.negate(predicate)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10582)[npm package](https://www.npmjs.com/package/lodash.negate)

    Creates a function that negates the result of the predicate `func`. The `func` predicate is invoked with the `this` binding and arguments of the created function.

    #### Since

    3.0.0

    #### Arguments

    1.  `predicate`*(Function)*: The predicate to negate.

    #### Returns

    *(Function)*: Returns the new negated function.

    #### Example

    ``` javascript
    function isEven(n) {
      return n % 2 == 0;
    }
     
    _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
    // => [1, 3, 5]
    ```
- name: _.noConflict
  id: index#noConflict
  summary: Reverts the _ variable to its previous value and returns a reference to the lodash function
  description: |-
    ### \_.noConflict()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15735)[npm package](https://www.npmjs.com/package/lodash.noconflict)

    Reverts the `_` variable to its previous value and returns a reference to the `lodash` function.

    #### Since

    0.1.0

    #### Returns

    *(Function)*: Returns the `lodash` function.

    #### Example

    ``` javascript
    var lodash = _.noConflict();
    ```
- name: _.noop
  id: index#noop
  summary: This method returns undefined
  description: |-
    ### \_.noop()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15754)[npm package](https://www.npmjs.com/package/lodash.noop)

    This method returns `undefined`.

    #### Since

    2.3.0

    #### Example

    ``` javascript
    _.times(2, _.noop);
    // => [undefined, undefined]
    ```
- name: _.now
  id: index#now
  summary: Gets the timestamp of the number of milliseconds that have elapsed since the Unix epoch (1 January 1970 00:00:00 UTC)
  description: |-
    ### \_.now()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9960)[npm package](https://www.npmjs.com/package/lodash.now)

    Gets the timestamp of the number of milliseconds that have elapsed since the Unix epoch *(1 January `1970 00`:00:00 UTC)*.

    #### Since

    2.4.0

    #### Returns

    *(number)*: Returns the timestamp.

    #### Example

    ``` javascript
    _.defer(function(stamp) {
      console.log(_.now() - stamp);
    }, _.now());
    // => Logs the number of milliseconds it took for the deferred invocation.
    ```

    ## “Function” Methods
- name: _.nth
  id: index#nth
  summary: Gets the element at index n of array
  description: |-
    ### \_.nth(array, \[n=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7671)[npm package](https://www.npmjs.com/package/lodash.nth)

    Gets the element at index `n` of `array`. If `n` is negative, the nth element from the end is returned.

    #### Since

    4.11.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[n=0]`*(number)*: The index of the element to return.

    #### Returns

    *(\*)*: Returns the nth element of `array`.

    #### Example

    ``` javascript
    var array = ['a', 'b', 'c', 'd'];
     
    _.nth(array, 1);
    // => 'b'
     
    _.nth(array, -2);
    // => 'c';
    ```
- name: _.nthArg
  id: index#nthArg
  summary: Creates a function that gets the argument at index n
  description: |-
    ### \_.nthArg(\[n=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15778)[npm package](https://www.npmjs.com/package/lodash.ntharg)

    Creates a function that gets the argument at index `n`. If `n` is negative, the nth argument from the end is returned.

    #### Since

    4.0.0

    #### Arguments

    1.  `[n=0]`*(number)*: The index of the argument to return.

    #### Returns

    *(Function)*: Returns the new pass-thru function.

    #### Example

    ``` javascript
    var func = _.nthArg(1);

    func('a', 'b', 'c', 'd');
    // => 'b'
     

    var func = _.nthArg(-2);

    func('a', 'b', 'c', 'd');
    // => 'c'
    ```
- name: _.omit
  id: index#omit
  summary: The opposite of _.pick; this method creates an object composed of the own and inherited enumerable property paths of object that are not omitted
  description: "### \\_.omit(object, \\[paths\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13495)[npm package](https://www.npmjs.com/package/lodash.omit)\n\nThe opposite of [`_.pick`](#pick); this method creates an object composed of the own and inherited enumerable property paths of `object` that are not omitted.  \n  \n**Note:** This method is considerably slower than [`_.pick`](#pick).\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The source object.\n2.  `[paths]`*(...(string\\|string\\[\\]))*: The property paths to omit.\n\n#### Returns\n\n*(Object)*: Returns the new object.\n\n#### Example\n\n``` javascript\nvar object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }\n```"
- name: _.omitBy
  id: index#omitBy
  summary: The opposite of _.pickBy; this method creates an object composed of the own and inherited enumerable string keyed properties of object that predicate doesn't return truthy for
  description: |-
    ### \_.omitBy(object, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13537)[npm package](https://www.npmjs.com/package/lodash.omitby)

    The opposite of [`_.pickBy`](#pickBy); this method creates an object composed of the own and inherited enumerable string keyed properties of `object` that `predicate` doesn't return truthy for. The predicate is invoked with two arguments: *(value, key)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `object`*(Object)*: The source object.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per property.

    #### Returns

    *(Object)*: Returns the new object.

    #### Example

    ``` javascript
    var object = { 'a': 1, 'b': '2', 'c': 3 };
     
    _.omitBy(object, _.isNumber);
    // => { 'b': '2' }
    ```
- name: _.once
  id: index#once
  summary: Creates a function that is restricted to invoking func once
  description: |-
    ### \_.once(func)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10616)[npm package](https://www.npmjs.com/package/lodash.once)

    Creates a function that is restricted to invoking `func` once. Repeat calls to the function return the value of the first invocation. The `func` is invoked with the `this` binding and arguments of the created function.

    #### Since

    0.1.0

    #### Arguments

    1.  `func`*(Function)*: The function to restrict.

    #### Returns

    *(Function)*: Returns the new restricted function.

    #### Example

    ``` javascript
    var initialize = _.once(createApplication);

    initialize();

    initialize();
    // => `createApplication` is invoked once
    ```
- name: _.orderBy
  id: index#orderBy
  summary: This method is like _.sortBy except that it allows specifying the sort orders of the iteratees to sort by
  description: |-
    ### \_.orderBy(collection, \[iteratees=\[\_.identity\]\], \[orders\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9586)[npm package](https://www.npmjs.com/package/lodash.orderby)

    This method is like [`_.sortBy`](#sortBy) except that it allows specifying the sort orders of the iteratees to sort by. If `orders` is unspecified, all values are sorted in ascending order. Otherwise, specify an order of "desc" for descending or "asc" for ascending sort order of corresponding values.

    #### Since

    4.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratees=[_.identity]]`*(Array\[\]\|Function\[\]\|Object\[\]\|string\[\])*: The iteratees to sort by.
    3.  `[orders]`*(string\[\])*: The sort orders of `iteratees`.

    #### Returns

    *(Array)*: Returns the new sorted array.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'fred',   'age': 48 },

      { 'user': 'barney', 'age': 34 },

      { 'user': 'fred',   'age': 40 },

      { 'user': 'barney', 'age': 36 }
    ];
     
    // Sort by `user` in ascending order and by `age` in descending order.
    _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
    // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
    ```
- name: _.over
  id: index#over
  summary: Creates a function that invokes iteratees with the arguments it receives and returns their results
  description: |-
    ### \_.over(\[iteratees=\[\_.identity\]\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15803)[npm package](https://www.npmjs.com/package/lodash.over)

    Creates a function that invokes `iteratees` with the arguments it receives and returns their results.

    #### Since

    4.0.0

    #### Arguments

    1.  `[iteratees=[_.identity]]`*(...(Function\|Function\[\]))*: The iteratees to invoke.

    #### Returns

    *(Function)*: Returns the new function.

    #### Example

    ``` javascript
    var func = _.over([Math.max, Math.min]);
     

    func(1, 2, 3, 4);
    // => [4, 1]
    ```
- name: _.overArgs
  id: index#overArgs
  summary: Creates a function that invokes func with its arguments transformed
  description: |-
    ### \_.overArgs(func, \[transforms=\[\_.identity\]\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10651)[npm package](https://www.npmjs.com/package/lodash.overargs)

    Creates a function that invokes `func` with its arguments transformed.

    #### Since

    4.0.0

    #### Arguments

    1.  `func`*(Function)*: The function to wrap.
    2.  `[transforms=[_.identity]]`*(...(Function\|Function\[\]))*: The argument transforms.

    #### Returns

    *(Function)*: Returns the new function.

    #### Example

    ``` javascript
    function doubled(n) {
      return n * 2;
    }
     

    function square(n) {
      return n * n;
    }
     

    var func = _.overArgs(function(x, y) {
      return [x, y];
    }, [square, doubled]);
     

    func(9, 3);
    // => [81, 6]
     

    func(10, 5);
    // => [100, 10]
    ```
- name: _.overEvery
  id: index#overEvery
  summary: Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives
  description: |-
    ### \_.overEvery(\[predicates=\[\_.identity\]\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15829)[npm package](https://www.npmjs.com/package/lodash.overevery)

    Creates a function that checks if **all** of the `predicates` return truthy when invoked with the arguments it receives.

    #### Since

    4.0.0

    #### Arguments

    1.  `[predicates=[_.identity]]`*(...(Function\|Function\[\]))*: The predicates to check.

    #### Returns

    *(Function)*: Returns the new function.

    #### Example

    ``` javascript
    var func = _.overEvery([Boolean, isFinite]);
     

    func('1');
    // => true
     

    func(null);
    // => false
     

    func(NaN);
    // => false
    ```
- name: _.overSome
  id: index#overSome
  summary: Creates a function that checks if any of the predicates return truthy when invoked with the arguments it receives
  description: |-
    ### \_.overSome(\[predicates=\[\_.identity\]\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15855)[npm package](https://www.npmjs.com/package/lodash.oversome)

    Creates a function that checks if **any** of the `predicates` return truthy when invoked with the arguments it receives.

    #### Since

    4.0.0

    #### Arguments

    1.  `[predicates=[_.identity]]`*(...(Function\|Function\[\]))*: The predicates to check.

    #### Returns

    *(Function)*: Returns the new function.

    #### Example

    ``` javascript
    var func = _.overSome([Boolean, isFinite]);
     

    func('1');
    // => true
     

    func(null);
    // => true
     

    func(NaN);
    // => false
    ```
- name: _.pad
  id: index#pad
  summary: Pads string on the left and right sides if it's shorter than length
  description: |-
    ### \_.pad(\[string=''\], \[length=0\], \[chars=' '\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14370)[npm package](https://www.npmjs.com/package/lodash.pad)

    Pads `string` on the left and right sides if it's shorter than `length`. Padding characters are truncated if they can't be evenly divided by `length`.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to pad.
    2.  `[length=0]`*(number)*: The padding length.
    3.  `[chars=' ']`*(string)*: The string used as padding.

    #### Returns

    *(string)*: Returns the padded string.

    #### Example

    ``` javascript
    _.pad('abc', 8);
    // => '  abc   '
     
    _.pad('abc', 8, '_-');
    // => '_-abc_-_'
     
    _.pad('abc', 3);
    // => 'abc'
    ```
- name: _.padEnd
  id: index#padEnd
  summary: Pads string on the right side if it's shorter than length
  description: |-
    ### \_.padEnd(\[string=''\], \[length=0\], \[chars=' '\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14409)[npm package](https://www.npmjs.com/package/lodash.padend)

    Pads `string` on the right side if it's shorter than `length`. Padding characters are truncated if they exceed `length`.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to pad.
    2.  `[length=0]`*(number)*: The padding length.
    3.  `[chars=' ']`*(string)*: The string used as padding.

    #### Returns

    *(string)*: Returns the padded string.

    #### Example

    ``` javascript
    _.padEnd('abc', 6);
    // => 'abc   '
     
    _.padEnd('abc', 6, '_-');
    // => 'abc_-_'
     
    _.padEnd('abc', 3);
    // => 'abc'
    ```
- name: _.padStart
  id: index#padStart
  summary: Pads string on the left side if it's shorter than length
  description: |-
    ### \_.padStart(\[string=''\], \[length=0\], \[chars=' '\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14442)[npm package](https://www.npmjs.com/package/lodash.padstart)

    Pads `string` on the left side if it's shorter than `length`. Padding characters are truncated if they exceed `length`.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to pad.
    2.  `[length=0]`*(number)*: The padding length.
    3.  `[chars=' ']`*(string)*: The string used as padding.

    #### Returns

    *(string)*: Returns the padded string.

    #### Example

    ``` javascript
    _.padStart('abc', 6);
    // => '   abc'
     
    _.padStart('abc', 6, '_-');
    // => '_-_abc'
     
    _.padStart('abc', 3);
    // => 'abc'
    ```
- name: _.parseInt
  id: index#parseInt
  summary: Converts string to an integer of the specified radix
  description: "### \\_.parseInt(string, \\[radix=10\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14476)[npm package](https://www.npmjs.com/package/lodash.parseint)\n\nConverts `string` to an integer of the specified radix. If `radix` is `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal, in which case a `radix` of `16` is used.  \n  \n**Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n\n#### Since\n\n1.1.0\n\n#### Arguments\n\n1.  `string`*(string)*: The string to convert.\n2.  `[radix=10]`*(number)*: The radix to interpret `value` by.\n\n#### Returns\n\n*(number)*: Returns the converted integer.\n\n#### Example\n\n``` javascript\n_.parseInt('08');\n// => 8\n \n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]\n```"
- name: _.partial
  id: index#partial
  summary: Creates a function that invokes func with partials prepended to the arguments it receives
  description: "### \\_.partial(func, \\[partials\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10701)[npm package](https://www.npmjs.com/package/lodash.partial)\n\nCreates a function that invokes `func` with `partials` prepended to the arguments it receives. This method is like [`_.bind`](#bind) except it does **not** alter the `this` binding.  \n  \nThe `_.partial.placeholder` value, which defaults to `_` in monolithic builds, may be used as a placeholder for partially applied arguments.  \n  \n**Note:** This method doesn't set the \"length\" property of partially applied functions.\n\n#### Since\n\n0.2.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to partially apply arguments to.\n2.  `[partials]`*(...\\*)*: The arguments to be partially applied.\n\n#### Returns\n\n*(Function)*: Returns the new partially applied function.\n\n#### Example\n\n``` javascript\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n \n\nvar sayHelloTo = _.partial(greet, 'hello');\n\nsayHelloTo('fred');\n// => 'hello fred'\n \n// Partially applied with placeholders.\n\nvar greetFred = _.partial(greet, _, 'fred');\n\ngreetFred('hi');\n// => 'hi fred'\n```"
- name: _.partialRight
  id: index#partialRight
  summary: This method is like _.partial except that partially applied arguments are appended to the arguments it receives
  description: "### \\_.partialRight(func, \\[partials\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10738)[npm package](https://www.npmjs.com/package/lodash.partialright)\n\nThis method is like [`_.partial`](#partial) except that partially applied arguments are appended to the arguments it receives.  \n  \nThe `_.partialRight.placeholder` value, which defaults to `_` in monolithic builds, may be used as a placeholder for partially applied arguments.  \n  \n**Note:** This method doesn't set the \"length\" property of partially applied functions.\n\n#### Since\n\n1.0.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to partially apply arguments to.\n2.  `[partials]`*(...\\*)*: The arguments to be partially applied.\n\n#### Returns\n\n*(Function)*: Returns the new partially applied function.\n\n#### Example\n\n``` javascript\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n \n\nvar greetFred = _.partialRight(greet, 'fred');\n\ngreetFred('hi');\n// => 'hi fred'\n \n// Partially applied with placeholders.\n\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\n\nsayHelloTo('fred');\n// => 'hello fred'\n```"
- name: _.partition
  id: index#partition
  summary: Creates an array of elements split into two groups, the first of which contains elements predicate returns truthy for, the second of which contains elements predicate returns falsey for
  description: |-
    ### \_.partition(collection, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9636)[npm package](https://www.npmjs.com/package/lodash.partition)

    Creates an array of elements split into two groups, the first of which contains elements `predicate` returns truthy for, the second of which contains elements `predicate` returns falsey for. The predicate is invoked with one argument: *(value)*.

    #### Since

    3.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the array of grouped elements.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'age': 36, 'active': false },

      { 'user': 'fred',    'age': 40, 'active': true },

      { 'user': 'pebbles', 'age': 1,  'active': false }
    ];
     
    _.partition(users, function(o) { return o.active; });
    // => objects for [['fred'], ['barney', 'pebbles']]
     
    // The `_.matches` iteratee shorthand.
    _.partition(users, { 'age': 1, 'active': false });
    // => objects for [['pebbles'], ['barney', 'fred']]
     
    // The `_.matchesProperty` iteratee shorthand.
    _.partition(users, ['active', false]);
    // => objects for [['barney', 'pebbles'], ['fred']]
     
    // The `_.property` iteratee shorthand.
    _.partition(users, 'active');
    // => objects for [['fred'], ['barney', 'pebbles']]
    ```
- name: _.pick
  id: index#pick
  summary: Creates an object composed of the picked object properties
  description: |-
    ### \_.pick(object, \[paths\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13558)[npm package](https://www.npmjs.com/package/lodash.pick)

    Creates an object composed of the picked `object` properties.

    #### Since

    0.1.0

    #### Arguments

    1.  `object`*(Object)*: The source object.
    2.  `[paths]`*(...(string\|string\[\]))*: The property paths to pick.

    #### Returns

    *(Object)*: Returns the new object.

    #### Example

    ``` javascript
    var object = { 'a': 1, 'b': '2', 'c': 3 };
     
    _.pick(object, ['a', 'c']);
    // => { 'a': 1, 'c': 3 }
    ```
- name: _.pickBy
  id: index#pickBy
  summary: Creates an object composed of the object properties predicate returns truthy for
  description: |-
    ### \_.pickBy(object, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13580)[npm package](https://www.npmjs.com/package/lodash.pickby)

    Creates an object composed of the `object` properties `predicate` returns truthy for. The predicate is invoked with two arguments: *(value, key)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `object`*(Object)*: The source object.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per property.

    #### Returns

    *(Object)*: Returns the new object.

    #### Example

    ``` javascript
    var object = { 'a': 1, 'b': '2', 'c': 3 };
     
    _.pickBy(object, _.isNumber);
    // => { 'a': 1, 'c': 3 }
    ```
- name: _.property
  id: index#property
  summary: Creates a function that returns the value at path of a given object
  description: |-
    ### \_.property(path)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15879)[npm package](https://www.npmjs.com/package/lodash.property)

    Creates a function that returns the value at `path` of a given object.

    #### Since

    2.4.0

    #### Arguments

    1.  `path`*(Array\|string)*: The path of the property to get.

    #### Returns

    *(Function)*: Returns the new accessor function.

    #### Example

    ``` javascript
    var objects = [
      { 'a': { 'b': 2 } },

      { 'a': { 'b': 1 } }
    ];
     
    _.map(objects, _.property('a.b'));
    // => [2, 1]
     
    _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
    // => [1, 2]
    ```
- name: _.propertyOf
  id: index#propertyOf
  summary: The opposite of _.property; this method creates a function that returns the value at a given path of object
  description: |-
    ### \_.propertyOf(object)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15904)[npm package](https://www.npmjs.com/package/lodash.propertyof)

    The opposite of [`_.property`](#property); this method creates a function that returns the value at a given path of `object`.

    #### Since

    3.0.0

    #### Arguments

    1.  `object`*(Object)*: The object to query.

    #### Returns

    *(Function)*: Returns the new accessor function.

    #### Example

    ``` javascript
    var array = [0, 1, 2],

        object = { 'a': array, 'b': array, 'c': array };
     
    _.map(['a[2]', 'c[0]'], _.propertyOf(object));
    // => [2, 0]
     
    _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
    // => [2, 0]
    ```
- name: _.prototype.at
  id: index#prototype-at
  summary: This method is the wrapper version of _.at
  description: |-
    ### \_.prototype.at(\[paths\])

    This method is the wrapper version of [`_.at`](#at).

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8814)

    #### Since

    1.0.0

    #### Arguments

    1.  `[paths]`*(...(string\|string\[\]))*: The property paths to pick.

    #### Returns

    *(Object)*: Returns the new `lodash` wrapper instance.

    #### Example

    ``` javascript
    var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     

    _(object).at(['a[0].b.c', 'a[1]']).value();
    // => [3, 4]
    ```
- name: _.prototype.chain
  id: index#prototype-chain
  summary: Creates a lodash wrapper instance with explicit method chain sequences enabled
  description: |-
    ### \_.prototype.chain()

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8865)

    Creates a `lodash` wrapper instance with explicit method chain sequences enabled.

    #### Since

    0.1.0

    #### Returns

    *(Object)*: Returns the new `lodash` wrapper instance.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney', 'age': 36 },

      { 'user': 'fred',   'age': 40 }
    ];
     
    // A sequence without explicit chaining.

    _(users).head();
    // => { 'user': 'barney', 'age': 36 }
     
    // A sequence with explicit chaining.

    _(users)
      .chain()
      .head()
      .pick('user')
      .value();
    // => { 'user': 'barney' }
    ```
- name: _.prototype.commit
  id: index#prototype-commit
  summary: Executes the chain sequence and returns the wrapped result
  description: |-
    ### \_.prototype.commit()

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8895)

    Executes the chain sequence and returns the wrapped result.

    #### Since

    3.2.0

    #### Returns

    *(Object)*: Returns the new `lodash` wrapper instance.

    #### Example

    ``` javascript
    var array = [1, 2];

    var wrapped = _(array).push(3);
     

    console.log(array);
    // => [1, 2]
     
    wrapped = wrapped.commit();

    console.log(array);
    // => [1, 2, 3]
     
    wrapped.last();
    // => 3
     

    console.log(array);
    // => [1, 2, 3]
    ```
- name: _.prototype.next
  id: index#prototype-next
  summary: Gets the next value on a wrapped object following the iterator protocol
  description: |-
    ### \_.prototype.next()

    Gets the next value on a wrapped object following the [iterator protocol](https://mdn.io/iteration_protocols#iterator).

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8921)

    #### Since

    4.0.0

    #### Returns

    *(Object)*: Returns the next iterator value.

    #### Example

    ``` javascript
    var wrapped = _([1, 2]);
     
    wrapped.next();
    // => { 'done': false, 'value': 1 }
     
    wrapped.next();
    // => { 'done': false, 'value': 2 }
     
    wrapped.next();
    // => { 'done': true, 'value': undefined }
    ```
- name: _.prototype.plant
  id: index#prototype-plant
  summary: Creates a clone of the chain sequence planting value as the wrapped value
  description: |-
    ### \_.prototype.plant(value)

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8977)

    Creates a clone of the chain sequence planting `value` as the wrapped value.

    #### Since

    3.2.0

    #### Arguments

    1.  `value`*(\*)*: The value to plant.

    #### Returns

    *(Object)*: Returns the new `lodash` wrapper instance.

    #### Example

    ``` javascript
    function square(n) {
      return n * n;
    }
     

    var wrapped = _([1, 2]).map(square);

    var other = wrapped.plant([3, 4]);
     
    other.value();
    // => [9, 16]
     
    wrapped.value();
    // => [1, 4]
    ```
- name: _.prototype.reverse
  id: index#prototype-reverse
  summary: This method is the wrapper version of _.reverse
  description: "### \\_.prototype.reverse()\n\nThis method is the wrapper version of [`_.reverse`](#reverse).  \n  \n**Note:** This method mutates the wrapped array.\n\n\\[source\\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9017)\n\n#### Since\n\n0.1.0\n\n#### Returns\n\n*(Object)*: Returns the new `lodash` wrapper instance.\n\n#### Example\n\n``` javascript\nvar array = [1, 2, 3];\n \n\n_(array).reverse().value()\n// => [3, 2, 1]\n \n\nconsole.log(array);\n// => [3, 2, 1]\n```"
- name: _.prototype[Symbol.iterator]
  id: index#prototype-Symbol-iterator
  summary: Enables the wrapper to be iterable
  description: |-
    ### \_.prototype\[Symbol.iterator\]()

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8949)

    Enables the wrapper to be iterable.

    #### Since

    4.0.0

    #### Returns

    *(Object)*: Returns the wrapper object.

    #### Example

    ``` javascript
    var wrapped = _([1, 2]);
     
    wrapped[Symbol.iterator]() === wrapped;
    // => true
     

    Array.from(wrapped);
    // => [1, 2]
    ```
- name: _.pull
  id: index#pull
  summary: Removes all given values from array using SameValueZero for equality comparisons
  description: "### \\_.pull(array, \\[values\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7698)[npm package](https://www.npmjs.com/package/lodash.pull)\n\nRemoves all given values from `array` using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons.  \n  \n**Note:** Unlike [`_.without`](#without), this method mutates `array`. Use [`_.remove`](#remove) to remove elements from an array by predicate.\n\n#### Since\n\n2.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to modify.\n2.  `[values]`*(...\\*)*: The values to remove.\n\n#### Returns\n\n*(Array)*: Returns `array`.\n\n#### Example\n\n``` javascript\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pull(array, 'a', 'c');\n\nconsole.log(array);\n// => ['b', 'b']\n```"
- name: _.pullAll
  id: index#pullAll
  summary: This method is like _.pull except that it accepts an array of values to remove
  description: "### \\_.pullAll(array, values)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7720)[npm package](https://www.npmjs.com/package/lodash.pullall)\n\nThis method is like [`_.pull`](#pull) except that it accepts an array of values to remove.  \n  \n**Note:** Unlike [`_.difference`](#difference), this method mutates `array`.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to modify.\n2.  `values`*(Array)*: The values to remove.\n\n#### Returns\n\n*(Array)*: Returns `array`.\n\n#### Example\n\n``` javascript\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pullAll(array, ['a', 'c']);\n\nconsole.log(array);\n// => ['b', 'b']\n```"
- name: _.pullAllBy
  id: index#pullAllBy
  summary: This method is like _.pullAll except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared
  description: "### \\_.pullAllBy(array, values, \\[iteratee=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7749)[npm package](https://www.npmjs.com/package/lodash.pullallby)\n\nThis method is like [`_.pullAll`](#pullAll) except that it accepts `iteratee` which is invoked for each element of `array` and `values` to generate the criterion by which they're compared. The iteratee is invoked with one argument: *(value)*.  \n  \n**Note:** Unlike [`_.differenceBy`](#differenceBy), this method mutates `array`.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to modify.\n2.  `values`*(Array)*: The values to remove.\n3.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.\n\n#### Returns\n\n*(Array)*: Returns `array`.\n\n#### Example\n\n``` javascript\nvar array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n \n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n\nconsole.log(array);\n// => [{ 'x': 2 }]\n```"
- name: _.pullAllWith
  id: index#pullAllWith
  summary: This method is like _.pullAll except that it accepts comparator which is invoked to compare elements of array to values
  description: "### \\_.pullAllWith(array, values, \\[comparator\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7778)[npm package](https://www.npmjs.com/package/lodash.pullallwith)\n\nThis method is like [`_.pullAll`](#pullAll) except that it accepts `comparator` which is invoked to compare elements of `array` to `values`. The comparator is invoked with two arguments: *(arrVal, othVal)*.  \n  \n**Note:** Unlike [`_.differenceWith`](#differenceWith), this method mutates `array`.\n\n#### Since\n\n4.6.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to modify.\n2.  `values`*(Array)*: The values to remove.\n3.  `[comparator]`*(Function)*: The comparator invoked per element.\n\n#### Returns\n\n*(Array)*: Returns `array`.\n\n#### Example\n\n``` javascript\nvar array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n \n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n```"
- name: _.pullAt
  id: index#pullAt
  summary: Removes elements from array corresponding to indexes and returns an array of removed elements
  description: "### \\_.pullAt(array, \\[indexes\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7808)[npm package](https://www.npmjs.com/package/lodash.pullat)\n\nRemoves elements from `array` corresponding to `indexes` and returns an array of removed elements.  \n  \n**Note:** Unlike [`_.at`](#at), this method mutates `array`.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to modify.\n2.  `[indexes]`*(...(number\\|number\\[\\]))*: The indexes of elements to remove.\n\n#### Returns\n\n*(Array)*: Returns the new array of removed elements.\n\n#### Example\n\n``` javascript\nvar array = ['a', 'b', 'c', 'd'];\n\nvar pulled = _.pullAt(array, [1, 3]);\n \n\nconsole.log(array);\n// => ['a', 'c']\n \n\nconsole.log(pulled);\n// => ['b', 'd']\n```"
- name: _.random
  id: index#random
  summary: Produces a random number between the inclusive lower and upper bounds
  description: "### \\_.random(\\[lower=0\\], \\[upper=1\\], \\[floating\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14077)[npm package](https://www.npmjs.com/package/lodash.random)\n\nProduces a random number between the inclusive `lower` and `upper` bounds. If only one argument is provided a number between `0` and the given number is returned. If `floating` is `true`, or either `lower` or `upper` are floats, a floating-point number is returned instead of an integer.  \n  \n**Note:** JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.\n\n#### Since\n\n0.7.0\n\n#### Arguments\n\n1.  `[lower=0]`*(number)*: The lower bound.\n2.  `[upper=1]`*(number)*: The upper bound.\n3.  `[floating]`*(boolean)*: Specify returning a floating-point number.\n\n#### Returns\n\n*(number)*: Returns the random number.\n\n#### Example\n\n``` javascript\n_.random(0, 5);\n// => an integer between 0 and 5\n \n_.random(5);\n// => also an integer between 0 and 5\n \n_.random(5, true);\n// => a floating-point number between 0 and 5\n \n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2\n```\n\n## “Object” Methods"
- name: _.range
  id: index#range
  summary: Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end
  description: "### \\_.range(\\[start=0\\], end, \\[step=1\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15951)[npm package](https://www.npmjs.com/package/lodash.range)\n\nCreates an array of numbers *(positive and/or negative)* progressing from `start` up to, but not including, `end`. A step of `-1` is used if a negative `start` is specified without an `end` or `step`. If `end` is not specified, it's set to `start` with `start` then set to `0`.  \n  \n**Note:** JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `[start=0]`*(number)*: The start of the range.\n2.  `end`*(number)*: The end of the range.\n3.  `[step=1]`*(number)*: The value to increment or decrement by.\n\n#### Returns\n\n*(Array)*: Returns the range of numbers.\n\n#### Example\n\n``` javascript\n_.range(4);\n// => [0, 1, 2, 3]\n \n_.range(-4);\n// => [0, -1, -2, -3]\n \n_.range(1, 5);\n// => [1, 2, 3, 4]\n \n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n \n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n \n_.range(1, 4, 0);\n// => [1, 1, 1]\n \n_.range(0);\n// => []\n```"
- name: _.rangeRight
  id: index#rangeRight
  summary: This method is like _.range except that it populates values in descending order
  description: |-
    ### \_.rangeRight(\[start=0\], end, \[step=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15989)[npm package](https://www.npmjs.com/package/lodash.rangeright)

    This method is like [`_.range`](#range) except that it populates values in descending order.

    #### Since

    4.0.0

    #### Arguments

    1.  `[start=0]`*(number)*: The start of the range.
    2.  `end`*(number)*: The end of the range.
    3.  `[step=1]`*(number)*: The value to increment or decrement by.

    #### Returns

    *(Array)*: Returns the range of numbers.

    #### Example

    ``` javascript
    _.rangeRight(4);
    // => [3, 2, 1, 0]
     
    _.rangeRight(-4);
    // => [-3, -2, -1, 0]
     
    _.rangeRight(1, 5);
    // => [4, 3, 2, 1]
     
    _.rangeRight(0, 20, 5);
    // => [15, 10, 5, 0]
     
    _.rangeRight(0, -4, -1);
    // => [-3, -2, -1, 0]
     
    _.rangeRight(1, 4, 0);
    // => [1, 1, 1]
     
    _.rangeRight(0);
    // => []
    ```
- name: _.rearg
  id: index#rearg
  summary: Creates a function that invokes func with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on
  description: |-
    ### \_.rearg(func, indexes)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10765)[npm package](https://www.npmjs.com/package/lodash.rearg)

    Creates a function that invokes `func` with arguments arranged according to the specified `indexes` where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.

    #### Since

    3.0.0

    #### Arguments

    1.  `func`*(Function)*: The function to rearrange arguments for.
    2.  `indexes`*(...(number\|number\[\]))*: The arranged argument indexes.

    #### Returns

    *(Function)*: Returns the new function.

    #### Example

    ``` javascript
    var rearged = _.rearg(function(a, b, c) {
      return [a, b, c];
    }, [2, 0, 1]);
     

    rearged('b', 'c', 'a')
    // => ['a', 'b', 'c']
    ```
- name: _.reduce
  id: index#reduce
  summary: Reduces collection to a value which is the accumulated result of running each element in collection thru iteratee, where each successive invocation is supplied the return value of the previous
  description: "### \\_.reduce(collection, \\[iteratee=\\_.identity\\], \\[accumulator\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9677)[npm package](https://www.npmjs.com/package/lodash.reduce)\n\nReduces `collection` to a value which is the accumulated result of running each element in `collection` thru `iteratee`, where each successive invocation is supplied the return value of the previous. If `accumulator` is not given, the first element of `collection` is used as the initial value. The iteratee is invoked with four arguments:  \n*(accumulator, value, index\\|key, collection)*.  \n  \nMany lodash methods are guarded to work as iteratees for methods like [`_.reduce`](#reduce), [`_.reduceRight`](#reduceRight), and [`_.transform`](#transform).  \n  \nThe guarded methods are:  \n`assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`, and `sortBy`\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `collection`*(Array\\|Object)*: The collection to iterate over.\n2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.\n3.  `[accumulator]`*(\\*)*: The initial value.\n\n#### Returns\n\n*(\\*)*: Returns the accumulated value.\n\n#### Example\n\n``` javascript\n_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n \n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n```"
- name: _.reduceRight
  id: index#reduceRight
  summary: This method is like _.reduce except that it iterates over elements of collection from right to left
  description: |-
    ### \_.reduceRight(collection, \[iteratee=\_.identity\], \[accumulator\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9706)[npm package](https://www.npmjs.com/package/lodash.reduceright)

    This method is like [`_.reduce`](#reduce) except that it iterates over elements of `collection` from right to left.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.
    3.  `[accumulator]`*(\*)*: The initial value.

    #### Returns

    *(\*)*: Returns the accumulated value.

    #### Example

    ``` javascript
    var array = [[0, 1], [2, 3], [4, 5]];
     
    _.reduceRight(array, function(flattened, other) {
      return flattened.concat(other);
    }, []);
    // => [4, 5, 2, 3, 0, 1]
    ```
- name: _.reject
  id: index#reject
  summary: The opposite of _.filter; this method returns the elements of collection that predicate does not return truthy for
  description: |-
    ### \_.reject(collection, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9747)[npm package](https://www.npmjs.com/package/lodash.reject)

    The opposite of [`_.filter`](#filter); this method returns the elements of `collection` that `predicate` does **not** return truthy for.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the new filtered array.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney', 'age': 36, 'active': false },

      { 'user': 'fred',   'age': 40, 'active': true }
    ];
     
    _.reject(users, function(o) { return !o.active; });
    // => objects for ['fred']
     
    // The `_.matches` iteratee shorthand.
    _.reject(users, { 'age': 40, 'active': true });
    // => objects for ['barney']
     
    // The `_.matchesProperty` iteratee shorthand.
    _.reject(users, ['active', false]);
    // => objects for ['fred']
     
    // The `_.property` iteratee shorthand.
    _.reject(users, 'active');
    // => objects for ['barney']
    ```
- name: _.remove
  id: index#remove
  summary: Removes all elements from array that predicate returns truthy for and returns an array of the removed elements
  description: "### \\_.remove(array, \\[predicate=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7847)[npm package](https://www.npmjs.com/package/lodash.remove)\n\nRemoves all elements from `array` that `predicate` returns truthy for and returns an array of the removed elements. The predicate is invoked with three arguments: *(value, index, array)*.  \n  \n**Note:** Unlike [`_.filter`](#filter), this method mutates `array`. Use [`_.pull`](#pull) to pull elements from an array by value.\n\n#### Since\n\n2.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to modify.\n2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.\n\n#### Returns\n\n*(Array)*: Returns the new array of removed elements.\n\n#### Example\n\n``` javascript\nvar array = [1, 2, 3, 4];\n\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n \n\nconsole.log(array);\n// => [1, 3]\n \n\nconsole.log(evens);\n// => [2, 4]\n```"
- name: _.repeat
  id: index#repeat
  summary: Repeats the given string n times
  description: |-
    ### \_.repeat(\[string=''\], \[n=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14507)[npm package](https://www.npmjs.com/package/lodash.repeat)

    Repeats the given string `n` times.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to repeat.
    2.  `[n=1]`*(number)*: The number of times to repeat the string.

    #### Returns

    *(string)*: Returns the repeated string.

    #### Example

    ``` javascript
    _.repeat('*', 3);
    // => '***'
     
    _.repeat('abc', 2);
    // => 'abcabc'
     
    _.repeat('abc', 0);
    // => ''
    ```
- name: _.replace
  id: index#replace
  summary: Replaces matches for pattern in string with replacement
  description: "### \\_.replace(\\[string=''\\], pattern, replacement)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14535)[npm package](https://www.npmjs.com/package/lodash.replace)\n\nReplaces matches for `pattern` in `string` with `replacement`.  \n  \n**Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `[string='']`*(string)*: The string to modify.\n2.  `pattern`*(RegExp\\|string)*: The pattern to replace.\n3.  `replacement`*(Function\\|string)*: The match replacement.\n\n#### Returns\n\n*(string)*: Returns the modified string.\n\n#### Example\n\n``` javascript\n_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'\n```"
- name: _.rest
  id: index#rest
  summary: Creates a function that invokes func with the this binding of the created function and arguments from start and beyond provided as an array
  description: "### \\_.rest(func, \\[start=func.length-1\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10794)[npm package](https://www.npmjs.com/package/lodash.rest)\n\nCreates a function that invokes `func` with the `this` binding of the created function and arguments from `start` and beyond provided as an array.  \n  \n**Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to apply a rest parameter to.\n2.  `[start=func.length-1]`*(number)*: The start position of the rest parameter.\n\n#### Returns\n\n*(Function)*: Returns the new function.\n\n#### Example\n\n``` javascript\nvar say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n \n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'\n```"
- name: _.result
  id: index#result
  summary: This method is like _.get except that if the resolved value is a function it's invoked with the this binding of its parent object and its result is returned
  description: |-
    ### \_.result(object, path, \[defaultValue\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13622)[npm package](https://www.npmjs.com/package/lodash.result)

    This method is like [`_.get`](#get) except that if the resolved value is a function it's invoked with the `this` binding of its parent object and its result is returned.

    #### Since

    0.1.0

    #### Arguments

    1.  `object`*(Object)*: The object to query.
    2.  `path`*(Array\|string)*: The path of the property to resolve.
    3.  `[defaultValue]`*(\*)*: The value returned for `undefined` resolved values.

    #### Returns

    *(\*)*: Returns the resolved value.

    #### Example

    ``` javascript
    var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     
    _.result(object, 'a[0].b.c1');
    // => 3
     
    _.result(object, 'a[0].b.c2');
    // => 4
     
    _.result(object, 'a[0].b.c3', 'default');
    // => 'default'
     
    _.result(object, 'a[0].b.c3', _.constant('default'));
    // => 'default'
    ```
- name: _.reverse
  id: index#reverse
  summary: Reverses array so that the first element becomes the last, the second element becomes the second to last, and so on
  description: "### \\_.reverse(array)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7891)[npm package](https://www.npmjs.com/package/lodash.reverse)\n\nReverses `array` so that the first element becomes the last, the second element becomes the second to last, and so on.  \n  \n**Note:** This method mutates `array` and is based on [`Array#reverse`](https://mdn.io/Array/reverse).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to modify.\n\n#### Returns\n\n*(Array)*: Returns `array`.\n\n#### Example\n\n``` javascript\nvar array = [1, 2, 3];\n \n_.reverse(array);\n// => [3, 2, 1]\n \n\nconsole.log(array);\n// => [3, 2, 1]\n```"
- name: _.round
  id: index#round
  summary: Computes number rounded to precision
  description: |-
    ### \_.round(number, \[precision=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16446)[npm package](https://www.npmjs.com/package/lodash.round)

    Computes `number` rounded to `precision`.

    #### Since

    3.10.0

    #### Arguments

    1.  `number`*(number)*: The number to round.
    2.  `[precision=0]`*(number)*: The precision to round to.

    #### Returns

    *(number)*: Returns the rounded number.

    #### Example

    ``` javascript
    _.round(4.006);
    // => 4
     
    _.round(4.006, 2);
    // => 4.01
     
    _.round(4060, -2);
    // => 4100
    ```
- name: _.runInContext
  id: index#runInContext
  summary: Create a new pristine lodash function using the context object
  description: |-
    ### \_.runInContext(\[context=root\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1420)[npm package](https://www.npmjs.com/package/lodash.runincontext)

    Create a new pristine `lodash` function using the `context` object.

    #### Since

    1.1.0

    #### Arguments

    1.  `[context=root]`*(Object)*: The context object.

    #### Returns

    *(Function)*: Returns a new `lodash` function.

    #### Example

    ``` javascript
    _.mixin({ 'foo': _.constant('foo') });
     

    var lodash = _.runInContext();
    lodash.mixin({ 'bar': lodash.constant('bar') });
     
    _.isFunction(_.foo);
    // => true
    _.isFunction(_.bar);
    // => false
     
    lodash.isFunction(lodash.foo);
    // => false
    lodash.isFunction(lodash.bar);
    // => true
     
    // Create a suped-up `defer` in Node.js.

    var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
    ```
- name: _.sample
  id: index#sample
  summary: Gets a random element from collection
  description: |-
    ### \_.sample(collection)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9766)[npm package](https://www.npmjs.com/package/lodash.sample)

    Gets a random element from `collection`.

    #### Since

    2.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to sample.

    #### Returns

    *(\*)*: Returns the random element.

    #### Example

    ``` javascript
    _.sample([1, 2, 3, 4]);
    // => 2
    ```
- name: _.sampleSize
  id: index#sampleSize
  summary: Gets n random elements at unique keys from collection up to the size of collection
  description: |-
    ### \_.sampleSize(collection, \[n=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9791)[npm package](https://www.npmjs.com/package/lodash.samplesize)

    Gets `n` random elements at unique keys from `collection` up to the size of `collection`.

    #### Since

    4.0.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to sample.
    2.  `[n=1]`*(number)*: The number of elements to sample.

    #### Returns

    *(Array)*: Returns the random elements.

    #### Example

    ``` javascript
    _.sampleSize([1, 2, 3], 2);
    // => [3, 1]
     
    _.sampleSize([1, 2, 3], 4);
    // => [2, 3, 1]
    ```
- name: _.set
  id: index#set
  summary: Sets the value at path of object
  description: "### \\_.set(object, path, value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13672)[npm package](https://www.npmjs.com/package/lodash.set)\n\nSets the value at `path` of `object`. If a portion of `path` doesn't exist, it's created. Arrays are created for missing index properties while objects are created for all other missing properties. Use [`_.setWith`](#setWith) to customize `path` creation.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n3.7.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to modify.\n2.  `path`*(Array\\|string)*: The path of the property to set.\n3.  `value`*(\\*)*: The value to set.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.set(object, 'a[0].b.c', 4);\n\nconsole.log(object.a[0].b.c);\n// => 4\n \n_.set(object, ['x', '0', 'y', 'z'], 5);\n\nconsole.log(object.x[0].y.z);\n// => 5\n```"
- name: _.setWith
  id: index#setWith
  summary: This method is like _.set except that it accepts customizer which is invoked to produce the objects of path
  description: "### \\_.setWith(object, path, value, \\[customizer\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13700)[npm package](https://www.npmjs.com/package/lodash.setwith)\n\nThis method is like [`_.set`](#set) except that it accepts `customizer` which is invoked to produce the objects of `path`. If `customizer` returns `undefined` path creation is handled by the method instead. The `customizer` is invoked with three arguments: *(nsValue, key, nsObject)*.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to modify.\n2.  `path`*(Array\\|string)*: The path of the property to set.\n3.  `value`*(\\*)*: The value to set.\n4.  `[customizer]`*(Function)*: The function to customize assigned values.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nvar object = {};\n \n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }\n```"
- name: _.shuffle
  id: index#shuffle
  summary: Creates an array of shuffled values, using a version of the Fisher-Yates shuffle
  description: |-
    ### \_.shuffle(collection)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9816)[npm package](https://www.npmjs.com/package/lodash.shuffle)

    Creates an array of shuffled values, using a version of the [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to shuffle.

    #### Returns

    *(Array)*: Returns the new shuffled array.

    #### Example

    ``` javascript
    _.shuffle([1, 2, 3, 4]);
    // => [4, 1, 3, 2]
    ```
- name: _.size
  id: index#size
  summary: Gets the size of collection by returning its length for array-like values or the number of own enumerable string keyed properties for objects
  description: |-
    ### \_.size(collection)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9842)[npm package](https://www.npmjs.com/package/lodash.size)

    Gets the size of `collection` by returning its length for array-like values or the number of own enumerable string keyed properties for objects.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object\|string)*: The collection to inspect.

    #### Returns

    *(number)*: Returns the collection size.

    #### Example

    ``` javascript
    _.size([1, 2, 3]);
    // => 3
     
    _.size({ 'a': 1, 'b': 2 });
    // => 2
     
    _.size('pebbles');
    // => 7
    ```
- name: _.slice
  id: index#slice
  summary: Creates a slice of array from start up to, but not including, end
  description: "### \\_.slice(array, \\[start=0\\], \\[end=array.length\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7911)[npm package](https://www.npmjs.com/package/lodash.slice)\n\nCreates a slice of `array` from `start` up to, but not including, `end`.  \n  \n**Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are returned.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to slice.\n2.  `[start=0]`*(number)*: The start position.\n3.  `[end=array.length]`*(number)*: The end position.\n\n#### Returns\n\n*(Array)*: Returns the slice of `array`."
- name: _.snakeCase
  id: index#snakeCase
  summary: Converts string to snake case
  description: |-
    ### \_.snakeCase(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14563)[npm package](https://www.npmjs.com/package/lodash.snakecase)

    Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the snake cased string.

    #### Example

    ``` javascript
    _.snakeCase('Foo Bar');
    // => 'foo_bar'
     
    _.snakeCase('fooBar');
    // => 'foo_bar'
     
    _.snakeCase('--FOO-BAR--');
    // => 'foo_bar'
    ```
- name: _.some
  id: index#some
  summary: Checks if predicate returns truthy for any element of collection
  description: |-
    ### \_.some(collection, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9892)[npm package](https://www.npmjs.com/package/lodash.some)

    Checks if `predicate` returns truthy for **any** element of `collection`. Iteration is stopped once `predicate` returns truthy. The predicate is invoked with three arguments: *(value, index\|key, collection)*.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(boolean)*: Returns `true` if any element passes the predicate check, else `false`.

    #### Example

    ``` javascript
    _.some([null, 0, 'yes', false], Boolean);
    // => true
     

    var users = [
      { 'user': 'barney', 'active': true },

      { 'user': 'fred',   'active': false }
    ];
     
    // The `_.matches` iteratee shorthand.
    _.some(users, { 'user': 'barney', 'active': false });
    // => false
     
    // The `_.matchesProperty` iteratee shorthand.
    _.some(users, ['active', false]);
    // => true
     
    // The `_.property` iteratee shorthand.
    _.some(users, 'active');
    // => true
    ```
- name: _.sortBy
  id: index#sortBy
  summary: Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee
  description: |-
    ### \_.sortBy(collection, \[iteratees=\[\_.identity\]\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L9929)[npm package](https://www.npmjs.com/package/lodash.sortby)

    Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee. This method performs a stable sort, that is, it preserves the original sort order of equal elements. The iteratees are invoked with one argument: *(value)*.

    #### Since

    0.1.0

    #### Arguments

    1.  `collection`*(Array\|Object)*: The collection to iterate over.
    2.  `[iteratees=[_.identity]]`*(...(Function\|Function\[\]))*: The iteratees to sort by.

    #### Returns

    *(Array)*: Returns the new sorted array.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'fred',   'age': 48 },

      { 'user': 'barney', 'age': 36 },

      { 'user': 'fred',   'age': 40 },

      { 'user': 'barney', 'age': 34 }
    ];
     
    _.sortBy(users, [function(o) { return o.user; }]);
    // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     
    _.sortBy(users, ['user', 'age']);
    // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
    ```

    ## “Date” Methods
- name: _.sortedIndex
  id: index#sortedIndex
  summary: Uses a binary search to determine the lowest index at which value should be inserted into array in order to maintain its sort order
  description: |-
    ### \_.sortedIndex(array, value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7944)[npm package](https://www.npmjs.com/package/lodash.sortedindex)

    Uses a binary search to determine the lowest index at which `value` should be inserted into `array` in order to maintain its sort order.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The sorted array to inspect.
    2.  `value`*(\*)*: The value to evaluate.

    #### Returns

    *(number)*: Returns the index at which `value` should be inserted into `array`.

    #### Example

    ``` javascript
    _.sortedIndex([30, 50], 40);
    // => 1
    ```
- name: _.sortedIndexBy
  id: index#sortedIndexBy
  summary: This method is like _.sortedIndex except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking
  description: |-
    ### \_.sortedIndexBy(array, value, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7973)[npm package](https://www.npmjs.com/package/lodash.sortedindexby)

    This method is like [`_.sortedIndex`](#sortedIndex) except that it accepts `iteratee` which is invoked for `value` and each element of `array` to compute their sort ranking. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The sorted array to inspect.
    2.  `value`*(\*)*: The value to evaluate.
    3.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(number)*: Returns the index at which `value` should be inserted into `array`.

    #### Example

    ``` javascript
    var objects = [{ 'x': 4 }, { 'x': 5 }];
     
    _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    // => 0
     
    // The `_.property` iteratee shorthand.
    _.sortedIndexBy(objects, { 'x': 4 }, 'x');
    // => 0
    ```
- name: _.sortedIndexOf
  id: index#sortedIndexOf
  summary: This method is like _.indexOf except that it performs a binary search on a sorted array
  description: |-
    ### \_.sortedIndexOf(array, value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L7993)[npm package](https://www.npmjs.com/package/lodash.sortedindexof)

    This method is like [`_.indexOf`](#indexOf) except that it performs a binary search on a sorted `array`.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `value`*(\*)*: The value to search for.

    #### Returns

    *(number)*: Returns the index of the matched value, else `-1`.

    #### Example

    ``` javascript
    _.sortedIndexOf([4, 5, 5, 5, 6], 5);
    // => 1
    ```
- name: _.sortedLastIndex
  id: index#sortedLastIndex
  summary: This method is like _.sortedIndex except that it returns the highest index at which value should be inserted into array in order to maintain its sort order
  description: |-
    ### \_.sortedLastIndex(array, value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8022)[npm package](https://www.npmjs.com/package/lodash.sortedlastindex)

    This method is like [`_.sortedIndex`](#sortedIndex) except that it returns the highest index at which `value` should be inserted into `array` in order to maintain its sort order.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The sorted array to inspect.
    2.  `value`*(\*)*: The value to evaluate.

    #### Returns

    *(number)*: Returns the index at which `value` should be inserted into `array`.

    #### Example

    ``` javascript
    _.sortedLastIndex([4, 5, 5, 5, 6], 5);
    // => 4
    ```
- name: _.sortedLastIndexBy
  id: index#sortedLastIndexBy
  summary: This method is like _.sortedLastIndex except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking
  description: |-
    ### \_.sortedLastIndexBy(array, value, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8051)[npm package](https://www.npmjs.com/package/lodash.sortedlastindexby)

    This method is like [`_.sortedLastIndex`](#sortedLastIndex) except that it accepts `iteratee` which is invoked for `value` and each element of `array` to compute their sort ranking. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The sorted array to inspect.
    2.  `value`*(\*)*: The value to evaluate.
    3.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(number)*: Returns the index at which `value` should be inserted into `array`.

    #### Example

    ``` javascript
    var objects = [{ 'x': 4 }, { 'x': 5 }];
     
    _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    // => 1
     
    // The `_.property` iteratee shorthand.
    _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
    // => 1
    ```
- name: _.sortedLastIndexOf
  id: index#sortedLastIndexOf
  summary: This method is like _.lastIndexOf except that it performs a binary search on a sorted array
  description: |-
    ### \_.sortedLastIndexOf(array, value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8071)[npm package](https://www.npmjs.com/package/lodash.sortedlastindexof)

    This method is like [`_.lastIndexOf`](#lastIndexOf) except that it performs a binary search on a sorted `array`.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `value`*(\*)*: The value to search for.

    #### Returns

    *(number)*: Returns the index of the matched value, else `-1`.

    #### Example

    ``` javascript
    _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
    // => 3
    ```
- name: _.sortedUniq
  id: index#sortedUniq
  summary: This method is like _.uniq except that it's designed and optimized for sorted arrays
  description: |-
    ### \_.sortedUniq(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8097)[npm package](https://www.npmjs.com/package/lodash.sorteduniq)

    This method is like [`_.uniq`](#uniq) except that it's designed and optimized for sorted arrays.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.

    #### Returns

    *(Array)*: Returns the new duplicate free array.

    #### Example

    ``` javascript
    _.sortedUniq([1, 1, 2]);
    // => [1, 2]
    ```
- name: _.sortedUniqBy
  id: index#sortedUniqBy
  summary: This method is like _.uniqBy except that it's designed and optimized for sorted arrays
  description: |-
    ### \_.sortedUniqBy(array, \[iteratee\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8119)[npm package](https://www.npmjs.com/package/lodash.sorteduniqby)

    This method is like [`_.uniqBy`](#uniqBy) except that it's designed and optimized for sorted arrays.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `[iteratee]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(Array)*: Returns the new duplicate free array.

    #### Example

    ``` javascript
    _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
    // => [1.1, 2.3]
    ```
- name: _.split
  id: index#split
  summary: Splits string by separator
  description: "### \\_.split(\\[string=''\\], separator, \\[limit\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14586)[npm package](https://www.npmjs.com/package/lodash.split)\n\nSplits `string` by `separator`.  \n  \n**Note:** This method is based on [`String#split`](https://mdn.io/String/split).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `[string='']`*(string)*: The string to split.\n2.  `separator`*(RegExp\\|string)*: The separator pattern to split by.\n3.  `[limit]`*(number)*: The length to truncate results to.\n\n#### Returns\n\n*(Array)*: Returns the string segments.\n\n#### Example\n\n``` javascript\n_.split('a-b-c', '-', 2);\n// => ['a', 'b']\n```"
- name: _.spread
  id: index#spread
  summary: Creates a function that invokes func with the this binding of the create function and an array of arguments much like Function#apply
  description: "### \\_.spread(func, \\[start=0\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10836)[npm package](https://www.npmjs.com/package/lodash.spread)\n\nCreates a function that invokes `func` with the `this` binding of the create function and an array of arguments much like [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).  \n  \n**Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).\n\n#### Since\n\n3.2.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to spread arguments over.\n2.  `[start=0]`*(number)*: The start position of the spread.\n\n#### Returns\n\n*(Function)*: Returns the new function.\n\n#### Example\n\n``` javascript\nvar say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n \n\nsay(['fred', 'hello']);\n// => 'fred says hello'\n \n\nvar numbers = Promise.all([\n  Promise.resolve(40),\n\n  Promise.resolve(36)\n]);\n \nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76\n```"
- name: _.startCase
  id: index#startCase
  summary: Converts string to start case
  description: |-
    ### \_.startCase(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14628)[npm package](https://www.npmjs.com/package/lodash.startcase)

    Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).

    #### Since

    3.1.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the start cased string.

    #### Example

    ``` javascript
    _.startCase('--foo-bar--');
    // => 'Foo Bar'
     
    _.startCase('fooBar');
    // => 'Foo Bar'
     
    _.startCase('__FOO_BAR__');
    // => 'FOO BAR'
    ```
- name: _.startsWith
  id: index#startsWith
  summary: Checks if string starts with the given target string
  description: |-
    ### \_.startsWith(\[string=''\], \[target\], \[position=0\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14655)[npm package](https://www.npmjs.com/package/lodash.startswith)

    Checks if `string` starts with the given target string.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to inspect.
    2.  `[target]`*(string)*: The string to search for.
    3.  `[position=0]`*(number)*: The position to search from.

    #### Returns

    *(boolean)*: Returns `true` if `string` starts with `target`, else `false`.

    #### Example

    ``` javascript
    _.startsWith('abc', 'a');
    // => true
     
    _.startsWith('abc', 'b');
    // => false
     
    _.startsWith('abc', 'b', 1);
    // => true
    ```
- name: _.stubArray
  id: index#stubArray
  summary: This method returns a new empty array
  description: |-
    ### \_.stubArray()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16009)[npm package](https://www.npmjs.com/package/lodash.stubarray)

    This method returns a new empty array.

    #### Since

    4.13.0

    #### Returns

    *(Array)*: Returns the new empty array.

    #### Example

    ``` javascript
    var arrays = _.times(2, _.stubArray);
     

    console.log(arrays);
    // => [[], []]
     

    console.log(arrays[0] === arrays[1]);
    // => false
    ```
- name: _.stubFalse
  id: index#stubFalse
  summary: This method returns false
  description: |-
    ### \_.stubFalse()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16026)[npm package](https://www.npmjs.com/package/lodash.stubfalse)

    This method returns `false`.

    #### Since

    4.13.0

    #### Returns

    *(boolean)*: Returns `false`.

    #### Example

    ``` javascript
    _.times(2, _.stubFalse);
    // => [false, false]
    ```
- name: _.stubObject
  id: index#stubObject
  summary: This method returns a new empty object
  description: |-
    ### \_.stubObject()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16048)[npm package](https://www.npmjs.com/package/lodash.stubobject)

    This method returns a new empty object.

    #### Since

    4.13.0

    #### Returns

    *(Object)*: Returns the new empty object.

    #### Example

    ``` javascript
    var objects = _.times(2, _.stubObject);
     

    console.log(objects);
    // => [{}, {}]
     

    console.log(objects[0] === objects[1]);
    // => false
    ```
- name: _.stubString
  id: index#stubString
  summary: This method returns an empty string
  description: |-
    ### \_.stubString()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16065)[npm package](https://www.npmjs.com/package/lodash.stubstring)

    This method returns an empty string.

    #### Since

    4.13.0

    #### Returns

    *(string)*: Returns the empty string.

    #### Example

    ``` javascript
    _.times(2, _.stubString);
    // => ['', '']
    ```
- name: _.stubTrue
  id: index#stubTrue
  summary: This method returns true
  description: |-
    ### \_.stubTrue()

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16082)[npm package](https://www.npmjs.com/package/lodash.stubtrue)

    This method returns `true`.

    #### Since

    4.13.0

    #### Returns

    *(boolean)*: Returns `true`.

    #### Example

    ``` javascript
    _.times(2, _.stubTrue);
    // => [true, true]
    ```
- name: _.subtract
  id: index#subtract
  summary: Subtract two numbers
  description: |-
    ### \_.subtract(minuend, subtrahend)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16463)[npm package](https://www.npmjs.com/package/lodash.subtract)

    Subtract two numbers.

    #### Since

    4.0.0

    #### Arguments

    1.  `minuend`*(number)*: The first number in a subtraction.
    2.  `subtrahend`*(number)*: The second number in a subtraction.

    #### Returns

    *(number)*: Returns the difference.

    #### Example

    ``` javascript
    _.subtract(6, 4);
    // => 2
    ```
- name: _.sum
  id: index#sum
  summary: Computes the sum of the values in array
  description: |-
    ### \_.sum(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16481)[npm package](https://www.npmjs.com/package/lodash.sum)

    Computes the sum of the values in `array`.

    #### Since

    3.4.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.

    #### Returns

    *(number)*: Returns the sum.

    #### Example

    ``` javascript
    _.sum([4, 2, 8, 6]);
    // => 20
    ```
- name: _.sumBy
  id: index#sumBy
  summary: This method is like _.sum except that it accepts iteratee which is invoked for each element in array to generate the value to be summed
  description: |-
    ### \_.sumBy(array, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16510)[npm package](https://www.npmjs.com/package/lodash.sumby)

    This method is like [`_.sum`](#sum) except that it accepts `iteratee` which is invoked for each element in `array` to generate the value to be summed. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(number)*: Returns the sum.

    #### Example

    ``` javascript
    var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     
    _.sumBy(objects, function(o) { return o.n; });
    // => 20
     
    // The `_.property` iteratee shorthand.
    _.sumBy(objects, 'n');
    // => 20
    ```

    ## “Number” Methods
- name: _.tail
  id: index#tail
  summary: Gets all but the first element of array
  description: |-
    ### \_.tail(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8139)[npm package](https://www.npmjs.com/package/lodash.tail)

    Gets all but the first element of `array`.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    _.tail([1, 2, 3]);
    // => [2, 3]
    ```
- name: _.take
  id: index#take
  summary: Creates a slice of array with n elements taken from the beginning
  description: |-
    ### \_.take(array, \[n=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8169)[npm package](https://www.npmjs.com/package/lodash.take)

    Creates a slice of `array` with `n` elements taken from the beginning.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[n=1]`*(number)*: The number of elements to take.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    _.take([1, 2, 3]);
    // => [1]
     
    _.take([1, 2, 3], 2);
    // => [1, 2]
     
    _.take([1, 2, 3], 5);
    // => [1, 2, 3]
     
    _.take([1, 2, 3], 0);
    // => []
    ```
- name: _.takeRight
  id: index#takeRight
  summary: Creates a slice of array with n elements taken from the end
  description: |-
    ### \_.takeRight(array, \[n=1\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8202)[npm package](https://www.npmjs.com/package/lodash.takeright)

    Creates a slice of `array` with `n` elements taken from the end.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[n=1]`*(number)*: The number of elements to take.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    _.takeRight([1, 2, 3]);
    // => [3]
     
    _.takeRight([1, 2, 3], 2);
    // => [2, 3]
     
    _.takeRight([1, 2, 3], 5);
    // => [1, 2, 3]
     
    _.takeRight([1, 2, 3], 0);
    // => []
    ```
- name: _.takeRightWhile
  id: index#takeRightWhile
  summary: Creates a slice of array with elements taken from the end
  description: |-
    ### \_.takeRightWhile(array, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8247)[npm package](https://www.npmjs.com/package/lodash.takerightwhile)

    Creates a slice of `array` with elements taken from the end. Elements are taken until `predicate` returns falsey. The predicate is invoked with three arguments: *(value, index, array)*.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'active': true },

      { 'user': 'fred',    'active': false },

      { 'user': 'pebbles', 'active': false }
    ];
     
    _.takeRightWhile(users, function(o) { return !o.active; });
    // => objects for ['fred', 'pebbles']
     
    // The `_.matches` iteratee shorthand.
    _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
    // => objects for ['pebbles']
     
    // The `_.matchesProperty` iteratee shorthand.
    _.takeRightWhile(users, ['active', false]);
    // => objects for ['fred', 'pebbles']
     
    // The `_.property` iteratee shorthand.
    _.takeRightWhile(users, 'active');
    // => []
    ```
- name: _.takeWhile
  id: index#takeWhile
  summary: Creates a slice of array with elements taken from the beginning
  description: |-
    ### \_.takeWhile(array, \[predicate=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8288)[npm package](https://www.npmjs.com/package/lodash.takewhile)

    Creates a slice of `array` with elements taken from the beginning. Elements are taken until `predicate` returns falsey. The predicate is invoked with three arguments: *(value, index, array)*.

    #### Since

    3.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to query.
    2.  `[predicate=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the slice of `array`.

    #### Example

    ``` javascript
    var users = [
      { 'user': 'barney',  'active': false },

      { 'user': 'fred',    'active': false },

      { 'user': 'pebbles', 'active': true }
    ];
     
    _.takeWhile(users, function(o) { return !o.active; });
    // => objects for ['barney', 'fred']
     
    // The `_.matches` iteratee shorthand.
    _.takeWhile(users, { 'user': 'barney', 'active': false });
    // => objects for ['barney']
     
    // The `_.matchesProperty` iteratee shorthand.
    _.takeWhile(users, ['active', false]);
    // => objects for ['barney', 'fred']
     
    // The `_.property` iteratee shorthand.
    _.takeWhile(users, 'active');
    // => []
    ```
- name: _.tap
  id: index#tap
  summary: This method invokes interceptor and returns value
  description: |-
    ### \_.tap(value, interceptor)

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8766)

    This method invokes `interceptor` and returns `value`. The interceptor is invoked with one argument; *(value)*. The purpose of this method is to "tap into" a method chain sequence in order to modify intermediate results.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to provide to `interceptor`.
    2.  `interceptor`*(Function)*: The function to invoke.

    #### Returns

    *(\*)*: Returns `value`.

    #### Example

    ``` javascript
    _([1, 2, 3])
     .tap(function(array) {

    // Mutate input array.

       array.pop();
     })
     .reverse()
     .value();
    // => [2, 1]
    ```
- name: _.template
  id: index#template
  summary: Creates a compiled template function that can interpolate data properties in "interpolate" delimiters, HTML-escape interpolated data properties in "escape" delimiters, and execute JavaScript in "evaluate" delimiters
  description: "### \\_.template(\\[string=''\\], \\[options={}\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14769)[npm package](https://www.npmjs.com/package/lodash.template)\n\nCreates a compiled template function that can interpolate data properties in \"interpolate\" delimiters, HTML-escape interpolated data properties in \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data properties may be accessed as free variables in the template. If a setting object is given, it takes precedence over [`_.templateSettings`](#templateSettings) values.  \n  \n**Note:** In the development build [`_.template`](#template) utilizes [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier debugging.  \n  \nFor more information on precompiling templates see [lodash's custom builds documentation](https://lodash.com/custom-builds).  \n  \nFor more information on Chrome extension sandboxes see [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `[string='']`*(string)*: The template string.\n2.  `[options={}]`*(Object)*: The options object.\n3.  `[options.escape=_.templateSettings.escape]`*(RegExp)*: The HTML \"escape\" delimiter.\n4.  `[options.evaluate=_.templateSettings.evaluate]`*(RegExp)*: The \"evaluate\" delimiter.\n5.  `[options.imports=_.templateSettings.imports]`*(Object)*: An object to import into the template as free variables.\n6.  `[options.interpolate=_.templateSettings.interpolate]`*(RegExp)*: The \"interpolate\" delimiter.\n7.  `[options.sourceURL='lodash.templateSources[n]']`*(string)*: The sourceURL of the compiled template.\n8.  `[options.variable='obj']`*(string)*: The data object variable name.\n\n#### Returns\n\n*(Function)*: Returns the compiled template function.\n\n#### Example\n\n``` javascript\n// Use the \"interpolate\" delimiter to create a compiled template.\n\nvar compiled = _.template('hello <%= user %>!');\n\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n \n// Use the HTML \"escape\" delimiter to escape data property values.\n\nvar compiled = _.template('<b><%- value %></b>');\n\ncompiled({ 'value': '<script>' });\n// => '<b>&amplt;script&ampgt;</b>'\n \n// Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n \n// Use the internal `print` function in \"evaluate\" delimiters.\n\nvar compiled = _.template('<% print(\"hello \" + user); %>!');\n\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n \n// Use the ES template literal delimiter as an \"interpolate\" delimiter.\n// Disable support by replacing the \"interpolate\" delimiter.\n\nvar compiled = _.template('hello ${ user }!');\n\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n \n// Use backslashes to treat delimiters as plain text.\n\nvar compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n \n// Use the `imports` option to import `jQuery` as `jq`.\n\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n \n// Use the `sourceURL` option to specify a custom sourceURL for the template.\n\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n\ncompiled(data);\n// => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n \n// Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n \n// Use custom template delimiters.\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n\nvar compiled = _.template('hello {{ user }}!');\n\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n \n// Use the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and stack traces.\nfs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n\n  var JST = {\\\n\n    \"main\": ' + _.template(mainText).source + '\\\n\n  };\\\n\n');\n```"
- name: _.templateSettings
  id: index#templateSettings
  summary: '(Object): By default, the template delimiters used by lodash are like those in embedded Ruby (ERB) as well as ES2015 template strings'
  description: |-
    ### \_.templateSettings

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1731)[npm package](https://www.npmjs.com/package/lodash.templatesettings)

    (Object): By default, the template delimiters used by lodash are like those in embedded Ruby *(ERB)* as well as ES2015 template strings. Change the following template settings to use alternative delimiters.
- name: _.templateSettings.escape
  id: index#templateSettings-escape
  summary: '(RegExp): Used to detect data property values to be HTML-escaped'
  description: |-
    ### \_.templateSettings.escape

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1739)

    (RegExp): Used to detect `data` property values to be HTML-escaped.
- name: _.templateSettings.evaluate
  id: index#templateSettings-evaluate
  summary: '(RegExp): Used to detect code to be evaluated'
  description: |-
    ### \_.templateSettings.evaluate

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1747)

    (RegExp): Used to detect code to be evaluated.
- name: _.templateSettings.imports
  id: index#templateSettings-imports
  summary: '(Object): Used to import variables into the compiled template'
  description: |-
    ### \_.templateSettings.imports

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1771)

    (Object): Used to import variables into the compiled template.
- name: _.templateSettings.imports._
  id: index#templateSettings-imports-_
  summary: A reference to the lodash function
  description: "### \\_.templateSettings.imports.\\_\n\n\\[source\\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1779)\n\nA reference to the `lodash` function.\n\n© JS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://lodash.com/docs/4.17.10](https://lodash.com/docs/4.17.10)"
- name: _.templateSettings.interpolate
  id: index#templateSettings-interpolate
  summary: '(RegExp): Used to detect data property values to inject'
  description: |-
    ### \_.templateSettings.interpolate

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1755)

    (RegExp): Used to detect `data` property values to inject.
- name: _.templateSettings.variable
  id: index#templateSettings-variable
  summary: '(string): Used to reference the data object in the template text'
  description: |-
    ### \_.templateSettings.variable

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L1763)

    (string): Used to reference the data object in the template text.

    ## Methods
- name: _.throttle
  id: index#throttle
  summary: Creates a throttled function that only invokes func at most once per every wait milliseconds
  description: "### \\_.throttle(func, \\[wait=0\\], \\[options={}\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10896)[npm package](https://www.npmjs.com/package/lodash.throttle)\n\nCreates a throttled function that only invokes `func` at most once per every `wait` milliseconds. The throttled function comes with a `cancel` method to cancel delayed `func` invocations and a `flush` method to immediately invoke them. Provide `options` to indicate whether `func` should be invoked on the leading and/or trailing edge of the `wait` timeout. The `func` is invoked with the last arguments provided to the throttled function. Subsequent calls to the throttled function return the result of the last `func` invocation.  \n  \n**Note:** If `leading` and `trailing` options are `true`, `func` is invoked on the trailing edge of the timeout only if the throttled function is invoked more than once during the `wait` timeout.  \n  \nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred until to the next tick, similar to `setTimeout` with a timeout of `0`.  \n  \nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/) for details over the differences between [`_.throttle`](#throttle) and [`_.debounce`](#debounce).\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `func`*(Function)*: The function to throttle.\n2.  `[wait=0]`*(number)*: The number of milliseconds to throttle invocations to.\n3.  `[options={}]`*(Object)*: The options object.\n4.  `[options.leading=true]`*(boolean)*: Specify invoking on the leading edge of the timeout.\n5.  `[options.trailing=true]`*(boolean)*: Specify invoking on the trailing edge of the timeout.\n\n#### Returns\n\n*(Function)*: Returns the new throttled function.\n\n#### Example\n\n``` javascript\n// Avoid excessively updating the position while scrolling.\n\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n \n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n\njQuery(element).on('click', throttled);\n \n// Cancel the trailing throttled invocation.\n\njQuery(window).on('popstate', throttled.cancel);\n```"
- name: _.thru
  id: index#thru
  summary: This method is like _.tap except that it returns the result of interceptor
  description: |-
    ### \_.thru(value, interceptor)

    This method is like [`_.tap`](#tap) except that it returns the result of `interceptor`. The purpose of this method is to "pass thru" values replacing intermediate results in a method chain sequence.

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8794)

    #### Since

    3.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to provide to `interceptor`.
    2.  `interceptor`*(Function)*: The function to invoke.

    #### Returns

    *(\*)*: Returns the result of `interceptor`.

    #### Example

    ``` javascript
    _('  abc  ')
     .chain()
     .trim()
     .thru(function(value) {
       return [value];
     })
     .value();
    // => ['abc']
    ```
- name: _.times
  id: index#times
  summary: Invokes the iteratee n times, returning an array of the results of each invocation
  description: |-
    ### \_.times(n, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16105)[npm package](https://www.npmjs.com/package/lodash.times)

    Invokes the iteratee `n` times, returning an array of the results of each invocation. The iteratee is invoked with one argument; *(index)*.

    #### Since

    0.1.0

    #### Arguments

    1.  `n`*(number)*: The number of times to invoke `iteratee`.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.

    #### Returns

    *(Array)*: Returns the array of results.

    #### Example

    ``` javascript
    _.times(3, String);
    // => ['0', '1', '2']
     
     _.times(4, _.constant(0));
    // => [0, 0, 0, 0]
    ```
- name: _.toArray
  id: index#toArray
  summary: Converts value to an array
  description: |-
    ### \_.toArray(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12318)[npm package](https://www.npmjs.com/package/lodash.toarray)

    Converts `value` to an array.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to convert.

    #### Returns

    *(Array)*: Returns the converted array.

    #### Example

    ``` javascript
    _.toArray({ 'a': 1, 'b': 2 });
    // => [1, 2]
     
    _.toArray('abc');
    // => ['a', 'b', 'c']
     
    _.toArray(1);
    // => []
     
    _.toArray(null);
    // => []
    ```
- name: _.toFinite
  id: index#toFinite
  summary: Converts value to a finite number
  description: |-
    ### \_.toFinite(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12357)[npm package](https://www.npmjs.com/package/lodash.tofinite)

    Converts `value` to a finite number.

    #### Since

    4.12.0

    #### Arguments

    1.  `value`*(\*)*: The value to convert.

    #### Returns

    *(number)*: Returns the converted number.

    #### Example

    ``` javascript
    _.toFinite(3.2);
    // => 3.2
     
    _.toFinite(Number.MIN_VALUE);
    // => 5e-324
     
    _.toFinite(Infinity);
    // => 1.7976931348623157e+308
     
    _.toFinite('3.2');
    // => 3.2
    ```
- name: _.toInteger
  id: index#toInteger
  summary: Converts value to an integer
  description: "### \\_.toInteger(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12395)[npm package](https://www.npmjs.com/package/lodash.tointeger)\n\nConverts `value` to an integer.  \n  \n**Note:** This method is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to convert.\n\n#### Returns\n\n*(number)*: Returns the converted integer.\n\n#### Example\n\n``` javascript\n_.toInteger(3.2);\n// => 3\n \n_.toInteger(Number.MIN_VALUE);\n// => 0\n \n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n \n_.toInteger('3.2');\n// => 3\n```"
- name: _.toLength
  id: index#toLength
  summary: Converts value to an integer suitable for use as the length of an array-like object
  description: "### \\_.toLength(value)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12429)[npm package](https://www.npmjs.com/package/lodash.tolength)\n\nConverts `value` to an integer suitable for use as the length of an array-like object.  \n  \n**Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `value`*(\\*)*: The value to convert.\n\n#### Returns\n\n*(number)*: Returns the converted integer.\n\n#### Example\n\n``` javascript\n_.toLength(3.2);\n// => 3\n \n_.toLength(Number.MIN_VALUE);\n// => 0\n \n_.toLength(Infinity);\n// => 4294967295\n \n_.toLength('3.2');\n// => 3\n```"
- name: _.toLower
  id: index#toLower
  summary: Converts string, as a whole, to lower case just like String#toLowerCase
  description: |-
    ### \_.toLower(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14898)[npm package](https://www.npmjs.com/package/lodash.tolower)

    Converts `string`, as a whole, to lower case just like [String#toLowerCase](https://mdn.io/toLowerCase).

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the lower cased string.

    #### Example

    ``` javascript
    _.toLower('--Foo-Bar--');
    // => '--foo-bar--'
     
    _.toLower('fooBar');
    // => 'foobar'
     
    _.toLower('__FOO_BAR__');
    // => '__foo_bar__'
    ```
- name: _.toNumber
  id: index#toNumber
  summary: Converts value to a number
  description: |-
    ### \_.toNumber(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12456)[npm package](https://www.npmjs.com/package/lodash.tonumber)

    Converts `value` to a number.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to process.

    #### Returns

    *(number)*: Returns the number.

    #### Example

    ``` javascript
    _.toNumber(3.2);
    // => 3.2
     
    _.toNumber(Number.MIN_VALUE);
    // => 5e-324
     
    _.toNumber(Infinity);
    // => Infinity
     
    _.toNumber('3.2');
    // => 3.2
    ```
- name: _.toPath
  id: index#toPath
  summary: Converts value to a property path array
  description: |-
    ### \_.toPath(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16140)[npm package](https://www.npmjs.com/package/lodash.topath)

    Converts `value` to a property path array.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to convert.

    #### Returns

    *(Array)*: Returns the new property path array.

    #### Example

    ``` javascript
    _.toPath('a.b.c');
    // => ['a', 'b', 'c']
     
    _.toPath('a[0].b.c');
    // => ['a', '0', 'b', 'c']
    ```
- name: _.toPlainObject
  id: index#toPlainObject
  summary: Converts value to a plain object flattening inherited enumerable string keyed properties of value to own properties of the plain object
  description: |-
    ### \_.toPlainObject(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12501)[npm package](https://www.npmjs.com/package/lodash.toplainobject)

    Converts `value` to a plain object flattening inherited enumerable string keyed properties of `value` to own properties of the plain object.

    #### Since

    3.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to convert.

    #### Returns

    *(Object)*: Returns the converted plain object.

    #### Example

    ``` javascript
    function Foo() {
      this.b = 2;
    }
     
    Foo.prototype.c = 3;
     
    _.assign({ 'a': 1 }, new Foo);
    // => { 'a': 1, 'b': 2 }
     
    _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
    // => { 'a': 1, 'b': 2, 'c': 3 }
    ```
- name: _.toSafeInteger
  id: index#toSafeInteger
  summary: Converts value to a safe integer
  description: |-
    ### \_.toSafeInteger(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12529)[npm package](https://www.npmjs.com/package/lodash.tosafeinteger)

    Converts `value` to a safe integer. A safe integer can be compared and represented correctly.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to convert.

    #### Returns

    *(number)*: Returns the converted integer.

    #### Example

    ``` javascript
    _.toSafeInteger(3.2);
    // => 3
     
    _.toSafeInteger(Number.MIN_VALUE);
    // => 0
     
    _.toSafeInteger(Infinity);
    // => 9007199254740991
     
    _.toSafeInteger('3.2');
    // => 3
    ```
- name: _.toString
  id: index#toString
  summary: Converts value to a string
  description: |-
    ### \_.toString(value)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L12556)[npm package](https://www.npmjs.com/package/lodash.tostring)

    Converts `value` to a string. An empty string is returned for `null` and `undefined` values. The sign of `-0` is preserved.

    #### Since

    4.0.0

    #### Arguments

    1.  `value`*(\*)*: The value to convert.

    #### Returns

    *(string)*: Returns the converted string.

    #### Example

    ``` javascript
    _.toString(null);
    // => ''
     
    _.toString(-0);
    // => '-0'
     
    _.toString([1, 2, 3]);
    // => '1,2,3'
    ```

    ## “Math” Methods
- name: _.toUpper
  id: index#toUpper
  summary: Converts string, as a whole, to upper case just like String#toUpperCase
  description: |-
    ### \_.toUpper(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14923)[npm package](https://www.npmjs.com/package/lodash.toupper)

    Converts `string`, as a whole, to upper case just like [String#toUpperCase](https://mdn.io/toUpperCase).

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the upper cased string.

    #### Example

    ``` javascript
    _.toUpper('--foo-bar--');
    // => '--FOO-BAR--'
     
    _.toUpper('fooBar');
    // => 'FOOBAR'
     
    _.toUpper('__foo_bar__');
    // => '__FOO_BAR__'
    ```
- name: _.transform
  id: index#transform
  summary: An alternative to _.reduce; this method transforms object to a new accumulator object which is the result of running each of its own enumerable string keyed properties thru iteratee, with each invocation potentially mutating the accumulator object
  description: |-
    ### \_.transform(object, \[iteratee=\_.identity\], \[accumulator\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13787)[npm package](https://www.npmjs.com/package/lodash.transform)

    An alternative to [`_.reduce`](#reduce); this method transforms `object` to a new `accumulator` object which is the result of running each of its own enumerable string keyed properties thru `iteratee`, with each invocation potentially mutating the `accumulator` object. If `accumulator` is not provided, a new object with the same `[[Prototype]]` will be used. The iteratee is invoked with four arguments: *(accumulator, value, key, object)*. Iteratee functions may exit iteration early by explicitly returning `false`.

    #### Since

    1.3.0

    #### Arguments

    1.  `object`*(Object)*: The object to iterate over.
    2.  `[iteratee=_.identity]`*(Function)*: The function invoked per iteration.
    3.  `[accumulator]`*(\*)*: The custom accumulator value.

    #### Returns

    *(\*)*: Returns the accumulated value.

    #### Example

    ``` javascript
    _.transform([2, 3, 4], function(result, n) {
      result.push(n *= n);
      return n % 2 == 0;
    }, []);
    // => [4, 9]
     
    _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
      (result[value] || (result[value] = [])).push(key);
    }, {});
    // => { '1': ['a', 'c'], '2': ['b'] }
    ```
- name: _.trim
  id: index#trim
  summary: Removes leading and trailing whitespace or specified characters from string
  description: |-
    ### \_.trim(\[string=''\], \[chars=whitespace\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14949)[npm package](https://www.npmjs.com/package/lodash.trim)

    Removes leading and trailing whitespace or specified characters from `string`.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to trim.
    2.  `[chars=whitespace]`*(string)*: The characters to trim.

    #### Returns

    *(string)*: Returns the trimmed string.

    #### Example

    ``` javascript
    _.trim('  abc  ');
    // => 'abc'
     
    _.trim('-_-abc-_-', '_-');
    // => 'abc'
     
    _.map(['  foo  ', '  bar  '], _.trim);
    // => ['foo', 'bar']
    ```
- name: _.trimEnd
  id: index#trimEnd
  summary: Removes trailing whitespace or specified characters from string
  description: |-
    ### \_.trimEnd(\[string=''\], \[chars=whitespace\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L14984)[npm package](https://www.npmjs.com/package/lodash.trimend)

    Removes trailing whitespace or specified characters from `string`.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to trim.
    2.  `[chars=whitespace]`*(string)*: The characters to trim.

    #### Returns

    *(string)*: Returns the trimmed string.

    #### Example

    ``` javascript
    _.trimEnd('  abc  ');
    // => '  abc'
     
    _.trimEnd('-_-abc-_-', '_-');
    // => '-_-abc'
    ```
- name: _.trimStart
  id: index#trimStart
  summary: Removes leading whitespace or specified characters from string
  description: |-
    ### \_.trimStart(\[string=''\], \[chars=whitespace\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15017)[npm package](https://www.npmjs.com/package/lodash.trimstart)

    Removes leading whitespace or specified characters from `string`.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to trim.
    2.  `[chars=whitespace]`*(string)*: The characters to trim.

    #### Returns

    *(string)*: Returns the trimmed string.

    #### Example

    ``` javascript
    _.trimStart('  abc  ');
    // => 'abc  '
     
    _.trimStart('-_-abc-_-', '_-');
    // => 'abc-_-'
    ```
- name: _.truncate
  id: index#truncate
  summary: Truncates string if it's longer than the given maximum string length
  description: |-
    ### \_.truncate(\[string=''\], \[options={}\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15068)[npm package](https://www.npmjs.com/package/lodash.truncate)

    Truncates `string` if it's longer than the given maximum string length. The last characters of the truncated string are replaced with the omission string which defaults to "...".

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to truncate.
    2.  `[options={}]`*(Object)*: The options object.
    3.  `[options.length=30]`*(number)*: The maximum string length.
    4.  `[options.omission='...']`*(string)*: The string to indicate text is omitted.
    5.  `[options.separator]`*(RegExp\|string)*: The separator pattern to truncate to.

    #### Returns

    *(string)*: Returns the truncated string.

    #### Example

    ``` javascript
    _.truncate('hi-diddly-ho there, neighborino');
    // => 'hi-diddly-ho there, neighbo...'
     
    _.truncate('hi-diddly-ho there, neighborino', {
      'length': 24,

      'separator': ' '

    });
    // => 'hi-diddly-ho there,...'
     
    _.truncate('hi-diddly-ho there, neighborino', {
      'length': 24,

      'separator': /,? +/

    });
    // => 'hi-diddly-ho there...'
     
    _.truncate('hi-diddly-ho there, neighborino', {
      'omission': ' [...]'

    });
    // => 'hi-diddly-ho there, neig [...]'
    ```
- name: _.unary
  id: index#unary
  summary: Creates a function that accepts up to one argument, ignoring any additional arguments
  description: |-
    ### \_.unary(func)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10929)[npm package](https://www.npmjs.com/package/lodash.unary)

    Creates a function that accepts up to one argument, ignoring any additional arguments.

    #### Since

    4.0.0

    #### Arguments

    1.  `func`*(Function)*: The function to cap arguments for.

    #### Returns

    *(Function)*: Returns the new capped function.

    #### Example

    ``` javascript
    _.map(['6', '8', '10'], _.unary(parseInt));
    // => [6, 8, 10]
    ```
- name: _.unescape
  id: index#unescape
  summary: The inverse of _.escape; this method converts the HTML entities &ampamp;, &amplt;, &ampgt;, &ampquot;, and &amp#39; in string to their corresponding characters
  description: "### \\_.unescape(\\[string=''\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15143)[npm package](https://www.npmjs.com/package/lodash.unescape)\n\nThe inverse of [`_.escape`](#escape); this method converts the HTML entities `&ampamp;`, `&amplt;`, `&ampgt;`, `&ampquot;`, and `&amp#39;` in `string` to their corresponding characters.  \n  \n**Note:** No other HTML entities are unescaped. To unescape additional HTML entities use a third-party library like [*he*](https://mths.be/he).\n\n#### Since\n\n0.6.0\n\n#### Arguments\n\n1.  `[string='']`*(string)*: The string to unescape.\n\n#### Returns\n\n*(string)*: Returns the unescaped string.\n\n#### Example\n\n``` javascript\n_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'\n```"
- name: _.union
  id: index#union
  summary: Creates an array of unique values, in order, from all given arrays using SameValueZero for equality comparisons
  description: |-
    ### \_.union(\[arrays\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8310)[npm package](https://www.npmjs.com/package/lodash.union)

    Creates an array of unique values, in order, from all given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons.

    #### Since

    0.1.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to inspect.

    #### Returns

    *(Array)*: Returns the new array of combined values.

    #### Example

    ``` javascript
    _.union([2], [1, 2]);
    // => [2, 1]
    ```
- name: _.unionBy
  id: index#unionBy
  summary: This method is like _.union except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which uniqueness is computed
  description: "### \\_.unionBy(\\[arrays\\], \\[iteratee=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8337)[npm package](https://www.npmjs.com/package/lodash.unionby)\n\nThis method is like [`_.union`](#union) except that it accepts `iteratee` which is invoked for each element of each `arrays` to generate the criterion by which uniqueness is computed. Result values are chosen from the first array in which the value occurs. The iteratee is invoked with one argument:  \n*(value)*.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `[arrays]`*(...Array)*: The arrays to inspect.\n2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.\n\n#### Returns\n\n*(Array)*: Returns the new array of combined values.\n\n#### Example\n\n``` javascript\n_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```"
- name: _.unionWith
  id: index#unionWith
  summary: This method is like _.union except that it accepts comparator which is invoked to compare elements of arrays
  description: |-
    ### \_.unionWith(\[arrays\], \[comparator\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8366)[npm package](https://www.npmjs.com/package/lodash.unionwith)

    This method is like [`_.union`](#union) except that it accepts `comparator` which is invoked to compare elements of `arrays`. Result values are chosen from the first array in which the value occurs. The comparator is invoked with two arguments: *(arrVal, othVal)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to inspect.
    2.  `[comparator]`*(Function)*: The comparator invoked per element.

    #### Returns

    *(Array)*: Returns the new array of combined values.

    #### Example

    ``` javascript
    var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];

    var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     
    _.unionWith(objects, others, _.isEqual);
    // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    ```
- name: _.uniq
  id: index#uniq
  summary: Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept
  description: |-
    ### \_.uniq(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8390)[npm package](https://www.npmjs.com/package/lodash.uniq)

    Creates a duplicate-free version of an array, using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.

    #### Since

    0.1.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.

    #### Returns

    *(Array)*: Returns the new duplicate free array.

    #### Example

    ``` javascript
    _.uniq([2, 1, 2]);
    // => [2, 1]
    ```
- name: _.uniqBy
  id: index#uniqBy
  summary: This method is like _.uniq except that it accepts iteratee which is invoked for each element in array to generate the criterion by which uniqueness is computed
  description: "### \\_.uniqBy(array, \\[iteratee=\\_.identity\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8417)[npm package](https://www.npmjs.com/package/lodash.uniqby)\n\nThis method is like [`_.uniq`](#uniq) except that it accepts `iteratee` which is invoked for each element in `array` to generate the criterion by which uniqueness is computed. The order of result values is determined by the order they occur in the array. The iteratee is invoked with one argument:  \n*(value)*.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to inspect.\n2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.\n\n#### Returns\n\n*(Array)*: Returns the new duplicate free array.\n\n#### Example\n\n``` javascript\n_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```"
- name: _.uniqueId
  id: index#uniqueId
  summary: Generates a unique ID
  description: |-
    ### \_.uniqueId(\[prefix=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16164)[npm package](https://www.npmjs.com/package/lodash.uniqueid)

    Generates a unique ID. If `prefix` is given, the ID is appended to it.

    #### Since

    0.1.0

    #### Arguments

    1.  `[prefix='']`*(string)*: The value to prefix the ID with.

    #### Returns

    *(string)*: Returns the unique ID.

    #### Example

    ``` javascript
    _.uniqueId('contact_');
    // => 'contact_104'
     
    _.uniqueId();
    // => '105'
    ```

    ## Properties
- name: _.uniqWith
  id: index#uniqWith
  summary: This method is like _.uniq except that it accepts comparator which is invoked to compare elements of array
  description: |-
    ### \_.uniqWith(array, \[comparator\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8441)[npm package](https://www.npmjs.com/package/lodash.uniqwith)

    This method is like [`_.uniq`](#uniq) except that it accepts `comparator` which is invoked to compare elements of `array`. The order of result values is determined by the order they occur in the array.The comparator is invoked with two arguments: *(arrVal, othVal)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `array`*(Array)*: The array to inspect.
    2.  `[comparator]`*(Function)*: The comparator invoked per element.

    #### Returns

    *(Array)*: Returns the new duplicate free array.

    #### Example

    ``` javascript
    var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     
    _.uniqWith(objects, _.isEqual);
    // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
    ```
- name: _.unset
  id: index#unset
  summary: Removes the property at path of object
  description: "### \\_.unset(object, path)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13837)[npm package](https://www.npmjs.com/package/lodash.unset)\n\nRemoves the property at `path` of `object`.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n4.0.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to modify.\n2.  `path`*(Array\\|string)*: The path of the property to unset.\n\n#### Returns\n\n*(boolean)*: Returns `true` if the property is deleted, else `false`.\n\n#### Example\n\n``` javascript\nvar object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n \n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n \n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n \n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n```"
- name: _.unzip
  id: index#unzip
  summary: This method is like _.zip except that it accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration
  description: |-
    ### \_.unzip(array)

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8465)[npm package](https://www.npmjs.com/package/lodash.unzip)

    This method is like [`_.zip`](#zip) except that it accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration.

    #### Since

    1.2.0

    #### Arguments

    1.  `array`*(Array)*: The array of grouped elements to process.

    #### Returns

    *(Array)*: Returns the new array of regrouped elements.

    #### Example

    ``` javascript
    var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
    // => [['a', 1, true], ['b', 2, false]]
     
    _.unzip(zipped);
    // => [['a', 'b'], [1, 2], [true, false]]
    ```
- name: _.unzipWith
  id: index#unzipWith
  summary: This method is like _.unzip except that it accepts iteratee to specify how regrouped values should be combined
  description: |-
    ### \_.unzipWith(array, \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8502)[npm package](https://www.npmjs.com/package/lodash.unzipwith)

    This method is like [`_.unzip`](#unzip) except that it accepts `iteratee` to specify how regrouped values should be combined. The iteratee is invoked with the elements of each group: *(...group)*.

    #### Since

    3.8.0

    #### Arguments

    1.  `array`*(Array)*: The array of grouped elements to process.
    2.  `[iteratee=_.identity]`*(Function)*: The function to combine regrouped values.

    #### Returns

    *(Array)*: Returns the new array of regrouped elements.

    #### Example

    ``` javascript
    var zipped = _.zip([1, 2], [10, 20], [100, 200]);
    // => [[1, 10, 100], [2, 20, 200]]
     
    _.unzipWith(zipped, _.add);
    // => [3, 30, 300]
    ```
- name: _.update
  id: index#update
  summary: This method is like _.set except that accepts updater to produce the value to set
  description: "### \\_.update(object, path, updater)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13868)[npm package](https://www.npmjs.com/package/lodash.update)\n\nThis method is like [`_.set`](#set) except that accepts `updater` to produce the value to set. Use [`_.updateWith`](#updateWith) to customize `path` creation. The `updater` is invoked with one argument: *(value)*.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n4.6.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to modify.\n2.  `path`*(Array\\|string)*: The path of the property to set.\n3.  `updater`*(Function)*: The function to produce the updated value.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.update(object, 'a[0].b.c', function(n) { return n * n; });\n\nconsole.log(object.a[0].b.c);\n// => 9\n \n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n\nconsole.log(object.x[0].y.z);\n// => 0\n```"
- name: _.updateWith
  id: index#updateWith
  summary: This method is like _.update except that it accepts customizer which is invoked to produce the objects of path
  description: "### \\_.updateWith(object, path, updater, \\[customizer\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13896)[npm package](https://www.npmjs.com/package/lodash.updatewith)\n\nThis method is like [`_.update`](#update) except that it accepts `customizer` which is invoked to produce the objects of `path`. If `customizer` returns `undefined` path creation is handled by the method instead. The `customizer` is invoked with three arguments: *(nsValue, key, nsObject)*.  \n  \n**Note:** This method mutates `object`.\n\n#### Since\n\n4.6.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to modify.\n2.  `path`*(Array\\|string)*: The path of the property to set.\n3.  `updater`*(Function)*: The function to produce the updated value.\n4.  `[customizer]`*(Function)*: The function to customize assigned values.\n\n#### Returns\n\n*(Object)*: Returns `object`.\n\n#### Example\n\n``` javascript\nvar object = {};\n \n_.updateWith(object, '[0][1]', _.constant('a'), Object);\n// => { '0': { '1': 'a' } }\n```"
- name: _.upperCase
  id: index#upperCase
  summary: Converts string, as space separated words, to upper case
  description: |-
    ### \_.upperCase(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15170)[npm package](https://www.npmjs.com/package/lodash.uppercase)

    Converts `string`, as space separated words, to upper case.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the upper cased string.

    #### Example

    ``` javascript
    _.upperCase('--foo-bar');
    // => 'FOO BAR'
     
    _.upperCase('fooBar');
    // => 'FOO BAR'
     
    _.upperCase('__foo_bar__');
    // => 'FOO BAR'
    ```
- name: _.upperFirst
  id: index#upperFirst
  summary: Converts the first character of string to upper case
  description: |-
    ### \_.upperFirst(\[string=''\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15191)[npm package](https://www.npmjs.com/package/lodash.upperfirst)

    Converts the first character of `string` to upper case.

    #### Since

    4.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to convert.

    #### Returns

    *(string)*: Returns the converted string.

    #### Example

    ``` javascript
    _.upperFirst('fred');
    // => 'Fred'
     
    _.upperFirst('FRED');
    // => 'FRED'
    ```
- name: _.values
  id: index#values
  summary: Creates an array of the own enumerable string keyed property values of object
  description: "### \\_.values(object)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13927)[npm package](https://www.npmjs.com/package/lodash.values)\n\nCreates an array of the own enumerable string keyed property values of `object`.  \n  \n**Note:** Non-object values are coerced to objects.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to query.\n\n#### Returns\n\n*(Array)*: Returns the array of property values.\n\n#### Example\n\n``` javascript\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n \n_.values('hi');\n// => ['h', 'i']\n```"
- name: _.valuesIn
  id: index#valuesIn
  summary: Creates an array of the own and inherited enumerable string keyed property values of object
  description: "### \\_.valuesIn(object)\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L13955)[npm package](https://www.npmjs.com/package/lodash.valuesin)\n\nCreates an array of the own and inherited enumerable string keyed property values of `object`.  \n  \n**Note:** Non-object values are coerced to objects.\n\n#### Since\n\n3.0.0\n\n#### Arguments\n\n1.  `object`*(Object)*: The object to query.\n\n#### Returns\n\n*(Array)*: Returns the array of property values.\n\n#### Example\n\n``` javascript\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.valuesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)\n```\n\n## “Seq” Methods"
- name: _.VERSION
  id: index#VERSION
  summary: '(string): The semantic version number'
  description: |-
    ### \_.VERSION

    \[source\](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L16855)

    (string): The semantic version number.
- name: _.without
  id: index#without
  summary: Creates an array excluding all given values using SameValueZero for equality comparisons
  description: "### \\_.without(array, \\[values\\])\n\n[source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8535)[npm package](https://www.npmjs.com/package/lodash.without)\n\nCreates an array excluding all given values using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons.  \n  \n**Note:** Unlike [`_.pull`](#pull), this method returns a new array.\n\n#### Since\n\n0.1.0\n\n#### Arguments\n\n1.  `array`*(Array)*: The array to inspect.\n2.  `[values]`*(...\\*)*: The values to exclude.\n\n#### Returns\n\n*(Array)*: Returns the new array of filtered values.\n\n#### Example\n\n``` javascript\n_.without([2, 1, 2, 3], 1, 2);\n// => [3]\n```"
- name: _.words
  id: index#words
  summary: Splits string into an array of its words
  description: |-
    ### \_.words(\[string=''\], \[pattern\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L15212)[npm package](https://www.npmjs.com/package/lodash.words)

    Splits `string` into an array of its words.

    #### Since

    3.0.0

    #### Arguments

    1.  `[string='']`*(string)*: The string to inspect.
    2.  `[pattern]`*(RegExp\|string)*: The pattern to match words.

    #### Returns

    *(Array)*: Returns the words of `string`.

    #### Example

    ``` javascript
    _.words('fred, barney, & pebbles');
    // => ['fred', 'barney', 'pebbles']
     
    _.words('fred, barney, & pebbles', /[^, ]+/g);
    // => ['fred', 'barney', '&', 'pebbles']
    ```

    ## “Util” Methods
- name: _.wrap
  id: index#wrap
  summary: Creates a function that provides value to wrapper as its first argument
  description: |-
    ### \_.wrap(value, \[wrapper=identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10955)[npm package](https://www.npmjs.com/package/lodash.wrap)

    Creates a function that provides `value` to `wrapper` as its first argument. Any additional arguments provided to the function are appended to those provided to the `wrapper`. The wrapper is invoked with the `this` binding of the created function.

    #### Since

    0.1.0

    #### Arguments

    1.  `value`*(\*)*: The value to wrap.
    2.  `[wrapper=identity]`*(Function)*: The wrapper function.

    #### Returns

    *(Function)*: Returns the new function.

    #### Example

    ``` javascript
    var p = _.wrap(_.escape, function(func, text) {
      return '<p>' + func(text) + '</p>';
    });
     

    p('fred, barney, & pebbles');
    // => '<p>fred, barney, &amp; pebbles</p>'
    ```

    ## “Lang” Methods
- name: _.xor
  id: index#xor
  summary: Creates an array of unique values that is the symmetric difference of the given arrays
  description: |-
    ### \_.xor(\[arrays\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8559)[npm package](https://www.npmjs.com/package/lodash.xor)

    Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference) of the given arrays. The order of result values is determined by the order they occur in the arrays.

    #### Since

    2.4.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to inspect.

    #### Returns

    *(Array)*: Returns the new array of filtered values.

    #### Example

    ``` javascript
    _.xor([2, 1], [2, 3]);
    // => [1, 3]
    ```
- name: _.xorBy
  id: index#xorBy
  summary: This method is like _.xor except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which by which they're compared
  description: |-
    ### \_.xorBy(\[arrays\], \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8586)[npm package](https://www.npmjs.com/package/lodash.xorby)

    This method is like [`_.xor`](#xor) except that it accepts `iteratee` which is invoked for each element of each `arrays` to generate the criterion by which by which they're compared. The order of result values is determined by the order they occur in the arrays. The iteratee is invoked with one argument: *(value)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to inspect.
    2.  `[iteratee=_.identity]`*(Function)*: The iteratee invoked per element.

    #### Returns

    *(Array)*: Returns the new array of filtered values.

    #### Example

    ``` javascript
    _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    // => [1.2, 3.4]
     
    // The `_.property` iteratee shorthand.
    _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    // => [{ 'x': 2 }]
    ```
- name: _.xorWith
  id: index#xorWith
  summary: This method is like _.xor except that it accepts comparator which is invoked to compare elements of arrays
  description: |-
    ### \_.xorWith(\[arrays\], \[comparator\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8615)[npm package](https://www.npmjs.com/package/lodash.xorwith)

    This method is like [`_.xor`](#xor) except that it accepts `comparator` which is invoked to compare elements of `arrays`. The order of result values is determined by the order they occur in the arrays. The comparator is invoked with two arguments: *(arrVal, othVal)*.

    #### Since

    4.0.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to inspect.
    2.  `[comparator]`*(Function)*: The comparator invoked per element.

    #### Returns

    *(Array)*: Returns the new array of filtered values.

    #### Example

    ``` javascript
    var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];

    var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     
    _.xorWith(objects, others, _.isEqual);
    // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    ```
- name: _.zip
  id: index#zip
  summary: Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on
  description: |-
    ### \_.zip(\[arrays\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8637)[npm package](https://www.npmjs.com/package/lodash.zip)

    Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.

    #### Since

    0.1.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to process.

    #### Returns

    *(Array)*: Returns the new array of grouped elements.

    #### Example

    ``` javascript
    _.zip(['a', 'b'], [1, 2], [true, false]);
    // => [['a', 1, true], ['b', 2, false]]
    ```
- name: _.zipObject
  id: index#zipObject
  summary: This method is like _.fromPairs except that it accepts two arrays, one of property identifiers and one of corresponding values
  description: |-
    ### \_.zipObject(\[props=\[\]\], \[values=\[\]\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8655)[npm package](https://www.npmjs.com/package/lodash.zipobject)

    This method is like [`_.fromPairs`](#fromPairs) except that it accepts two arrays, one of property identifiers and one of corresponding values.

    #### Since

    0.4.0

    #### Arguments

    1.  `[props=[]]`*(Array)*: The property identifiers.
    2.  `[values=[]]`*(Array)*: The property values.

    #### Returns

    *(Object)*: Returns the new object.

    #### Example

    ``` javascript
    _.zipObject(['a', 'b'], [1, 2]);
    // => { 'a': 1, 'b': 2 }
    ```
- name: _.zipObjectDeep
  id: index#zipObjectDeep
  summary: This method is like _.zipObject except that it supports property paths
  description: |-
    ### \_.zipObjectDeep(\[props=\[\]\], \[values=\[\]\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8674)[npm package](https://www.npmjs.com/package/lodash.zipobjectdeep)

    This method is like [`_.zipObject`](#zipObject) except that it supports property paths.

    #### Since

    4.1.0

    #### Arguments

    1.  `[props=[]]`*(Array)*: The property identifiers.
    2.  `[values=[]]`*(Array)*: The property values.

    #### Returns

    *(Object)*: Returns the new object.

    #### Example

    ``` javascript
    _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
    // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
    ```
- name: _.zipWith
  id: index#zipWith
  summary: This method is like _.zip except that it accepts iteratee to specify how grouped values should be combined
  description: |-
    ### \_.zipWith(\[arrays\], \[iteratee=\_.identity\])

    [source](https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L8698)[npm package](https://www.npmjs.com/package/lodash.zipwith)

    This method is like [`_.zip`](#zip) except that it accepts `iteratee` to specify how grouped values should be combined. The iteratee is invoked with the elements of each group: *(...group)*.

    #### Since

    3.8.0

    #### Arguments

    1.  `[arrays]`*(...Array)*: The arrays to process.
    2.  `[iteratee=_.identity]`*(Function)*: The function to combine grouped values.

    #### Returns

    *(Array)*: Returns the new array of grouped elements.

    #### Example

    ``` javascript
    _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
      return a + b + c;
    });
    // => [111, 222]
    ```

    ## “Collection” Methods
