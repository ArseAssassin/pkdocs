---
name: Sanctuary Type Classes
slug: sanctuary_type_classes
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2020 Sanctuary
  © 2016 Plaid Technologies, Inc.
  Licensed under the MIT License.
  https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/README.md
homepage: https://github.com/sanctuary-js/sanctuary-type-classes

---
- name: TypeClass
  id: index#TypeClass
  summary: Types whose values have a foo method are members of the Foo type class
  description: |-
    ### [`TypeClass :: (String, String, Array TypeClass, a -⁠> Boolean) -⁠> TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L609)

    The arguments are:

    - the name of the type class, prefixed by its npm package name;
    - the documentation URL of the type class;
    - an array of dependencies; and
    - a predicate which accepts any JavaScript value and returns `true` if the value satisfies the requirements of the type class; `false` otherwise.

    Example:

    ``` js
    //    hasMethod :: String -> a -> Boolean
    const hasMethod = name => x => x != null && typeof x[name] == 'function';

    //    Foo :: TypeClass
    const Foo = Z.TypeClass (
      'my-package/Foo',
      'http://example.com/my-package#Foo',
      [],
      hasMethod ('foo')
    );

    //    Bar :: TypeClass
    const Bar = Z.TypeClass (
      'my-package/Bar',
      'http://example.com/my-package#Bar',
      [Foo],
      hasMethod ('bar')
    );
    ```

    Types whose values have a `foo` method are members of the Foo type class. Members of the Foo type class whose values have a `bar` method are also members of the Bar type class.

    Each `TypeClass` value has a `test` field: a function which accepts any JavaScript value and returns `true` if the value satisfies the type class's predicate and the predicates of all the type class's dependencies; `false` otherwise.

    `TypeClass` values may be used with [sanctuary-def](https://github.com/sanctuary-js/sanctuary-def#type-classes) to define parametrically polymorphic functions which verify their type-class constraints at run time.
- name: Setoid
  id: index#Setoid
  summary: TypeClass value for Setoid
  description: |-
    ### [`Setoid :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L740)

    `TypeClass` value for [Setoid](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#setoid).

    ``` js
    > Z.Setoid.test (null)
    true

    > Z.Setoid.test (Useless)
    false

    > Z.Setoid.test ([1, 2, 3])
    true

    > Z.Setoid.test ([Useless])
    false
    ```
- name: Ord
  id: index#Ord
  summary: TypeClass value for Ord
  description: |-
    ### [`Ord :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L777)

    `TypeClass` value for [Ord](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#ord).

    ``` js
    > Z.Ord.test (0)
    true

    > Z.Ord.test (Math.sqrt)
    false

    > Z.Ord.test ([1, 2, 3])
    true

    > Z.Ord.test ([Math.sqrt])
    false
    ```
- name: Semigroupoid
  id: index#Semigroupoid
  summary: TypeClass value for Semigroupoid
  description: |-
    ### [`Semigroupoid :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L811)

    `TypeClass` value for [Semigroupoid](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#semigroupoid).

    ``` js
    > Z.Semigroupoid.test (Math.sqrt)
    true

    > Z.Semigroupoid.test (0)
    false
    ```
- name: Category
  id: index#Category
  summary: TypeClass value for Category
  description: |-
    ### [`Category :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L831)

    `TypeClass` value for [Category](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#category).

    ``` js
    > Z.Category.test (Math.sqrt)
    true

    > Z.Category.test (0)
    false
    ```
- name: Semigroup
  id: index#Semigroup
  summary: TypeClass value for Semigroup
  description: |-
    ### [`Semigroup :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L851)

    `TypeClass` value for [Semigroup](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#semigroup).

    ``` js
    > Z.Semigroup.test ('')
    true

    > Z.Semigroup.test (0)
    false
    ```
- name: Monoid
  id: index#Monoid
  summary: TypeClass value for Monoid
  description: |-
    ### [`Monoid :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L873)

    `TypeClass` value for [Monoid](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#monoid).

    ``` js
    > Z.Monoid.test ('')
    true

    > Z.Monoid.test (0)
    false
    ```
- name: Group
  id: index#Group
  summary: TypeClass value for Group
  description: |-
    ### [`Group :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L895)

    `TypeClass` value for [Group](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#group).

    ``` js
    > Z.Group.test (Sum (0))
    true

    > Z.Group.test ('')
    false
    ```
- name: Filterable
  id: index#Filterable
  summary: TypeClass value for Filterable
  description: |-
    ### [`Filterable :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L913)

    `TypeClass` value for [Filterable](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#filterable).

    ``` js
    > Z.Filterable.test ({})
    true

    > Z.Filterable.test ('')
    false
    ```
- name: Functor
  id: index#Functor
  summary: TypeClass value for Functor
  description: |-
    ### [`Functor :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L934)

    `TypeClass` value for [Functor](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#functor).

    ``` js
    > Z.Functor.test ([])
    true

    > Z.Functor.test ('')
    false
    ```
- name: Bifunctor
  id: index#Bifunctor
  summary: TypeClass value for Bifunctor
  description: |-
    ### [`Bifunctor :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L956)

    `TypeClass` value for [Bifunctor](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#bifunctor).

    ``` js
    > Z.Bifunctor.test (Pair ('foo') (64))
    true

    > Z.Bifunctor.test ([])
    false
    ```
- name: Profunctor
  id: index#Profunctor
  summary: TypeClass value for Profunctor
  description: |-
    ### [`Profunctor :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L974)

    `TypeClass` value for [Profunctor](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#profunctor).

    ``` js
    > Z.Profunctor.test (Math.sqrt)
    true

    > Z.Profunctor.test ([])
    false
    ```
- name: Apply
  id: index#Apply
  summary: TypeClass value for Apply
  description: |-
    ### [`Apply :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L994)

    `TypeClass` value for [Apply](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#apply).

    ``` js
    > Z.Apply.test ([])
    true

    > Z.Apply.test ('')
    false
    ```
- name: Applicative
  id: index#Applicative
  summary: TypeClass value for Applicative
  description: |-
    ### [`Applicative :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1016)

    `TypeClass` value for [Applicative](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#applicative).

    ``` js
    > Z.Applicative.test ([])
    true

    > Z.Applicative.test ({})
    false
    ```
- name: Chain
  id: index#Chain
  summary: TypeClass value for Chain
  description: |-
    ### [`Chain :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1037)

    `TypeClass` value for [Chain](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#chain).

    ``` js
    > Z.Chain.test ([])
    true

    > Z.Chain.test ({})
    false
    ```
- name: ChainRec
  id: index#ChainRec
  summary: TypeClass value for ChainRec
  description: |-
    ### [`ChainRec :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1058)

    `TypeClass` value for [ChainRec](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#chainrec).

    ``` js
    > Z.ChainRec.test ([])
    true

    > Z.ChainRec.test ({})
    false
    ```
- name: Monad
  id: index#Monad
  summary: TypeClass value for Monad
  description: |-
    ### [`Monad :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1079)

    `TypeClass` value for [Monad](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#monad).

    ``` js
    > Z.Monad.test ([])
    true

    > Z.Monad.test ({})
    false
    ```
- name: Alt
  id: index#Alt
  summary: TypeClass value for Alt
  description: |-
    ### [`Alt :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1092)

    `TypeClass` value for [Alt](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#alt).

    ``` js
    > Z.Alt.test ({})
    true

    > Z.Alt.test ('')
    false
    ```
- name: Plus
  id: index#Plus
  summary: TypeClass value for Plus
  description: |-
    ### [`Plus :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1113)

    `TypeClass` value for [Plus](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#plus).

    ``` js
    > Z.Plus.test ({})
    true

    > Z.Plus.test ('')
    false
    ```
- name: Alternative
  id: index#Alternative
  summary: TypeClass value for Alternative
  description: |-
    ### [`Alternative :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1134)

    `TypeClass` value for [Alternative](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#alternative).

    ``` js
    > Z.Alternative.test ([])
    true

    > Z.Alternative.test ({})
    false
    ```
- name: Foldable
  id: index#Foldable
  summary: TypeClass value for Foldable
  description: |-
    ### [`Foldable :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1147)

    `TypeClass` value for [Foldable](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#foldable).

    ``` js
    > Z.Foldable.test ({})
    true

    > Z.Foldable.test ('')
    false
    ```
- name: Traversable
  id: index#Traversable
  summary: TypeClass value for Traversable
  description: |-
    ### [`Traversable :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1168)

    `TypeClass` value for [Traversable](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#traversable).

    ``` js
    > Z.Traversable.test ([])
    true

    > Z.Traversable.test ('')
    false
    ```
- name: Extend
  id: index#Extend
  summary: TypeClass value for Extend
  description: |-
    ### [`Extend :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1189)

    `TypeClass` value for [Extend](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#extend).

    ``` js
    > Z.Extend.test ([])
    true

    > Z.Extend.test ({})
    false
    ```
- name: Comonad
  id: index#Comonad
  summary: TypeClass value for Comonad
  description: |-
    ### [`Comonad :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1210)

    `TypeClass` value for [Comonad](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#comonad).

    ``` js
    > Z.Comonad.test (Identity (0))
    true

    > Z.Comonad.test ([])
    false
    ```
- name: Contravariant
  id: index#Contravariant
  summary: TypeClass value for Contravariant
  description: |-
    ### [`Contravariant :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1228)

    `TypeClass` value for [Contravariant](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#contravariant).

    ``` js
    > Z.Contravariant.test (Math.sqrt)
    true

    > Z.Contravariant.test ([])
    false
    ```
- name: equals
  id: index#equals
  summary: Returns true if its arguments are equal; false otherwise
  description: |-
    ### [`equals :: (a, b) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1248)

    Returns `true` if its arguments are equal; `false` otherwise.

    Specifically:

    - Arguments with different [type identities](https://github.com/sanctuary-js/sanctuary-type-identifiers/tree/v3.0.0) are unequal.

    - If the first argument has a [`fantasy-land/equals`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#equals-method) method, that method is invoked to determine whether the arguments are equal (`fantasy-land/equals` implementations are provided for the following built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String, Array, Arguments, Error, Object, and Function).

    - Otherwise, the arguments are equal if their [entries](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) are equal (according to this algorithm).

    The algorithm supports circular data structures. Two arrays are equal if they have the same index paths and for each path have equal values. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example, are equal even if their internal structures differ. Two objects are equal if they have the same property paths and for each path have equal values.

    ``` js
    > Z.equals (0, -0)
    true

    > Z.equals (NaN, NaN)
    true

    > Z.equals (Cons (1, Cons (2, Nil)), Cons (1, Cons (2, Nil)))
    true

    > Z.equals (Cons (1, Cons (2, Nil)), Cons (2, Cons (1, Nil)))
    false
    ```
- name: lt
  id: index#lt
  summary: Returns true if its arguments are of the same type and the first is less than the second according to the type's fantasy-land/lte method; false otherwise
  description: |-
    ### [`lt :: (a, b) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1308)

    Returns `true` if its arguments are of the same type and the first is less than the second according to the type's [`fantasy-land/lte`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#lte-method) method; `false` otherwise.

    This function is derived from [`lte`](#lte).

    See also [`gt`](#gt) and [`gte`](#gte).

    ``` js
    > Z.lt (0, 0)
    false

    > Z.lt (0, 1)
    true

    > Z.lt (1, 0)
    false
    ```
- name: lte
  id: index#lte
  summary: Returns true if its arguments are of the same type and the first is less than or equal to the second according to the type's fantasy-land/lte method; false otherwise
  description: |-
    ### [`lte :: (a, b) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1330)

    Returns `true` if its arguments are of the same type and the first is less than or equal to the second according to the type's [`fantasy-land/lte`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#lte-method) method; `false` otherwise.

    `fantasy-land/lte` implementations are provided for the following built-in types: Null, Undefined, Boolean, Number, Date, String, Array, Arguments, and Object.

    The algorithm supports circular data structures in the same manner as [`equals`](#equals).

    See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).

    ``` js
    > Z.lte (0, 0)
    true

    > Z.lte (0, 1)
    true

    > Z.lte (1, 0)
    false
    ```
- name: gt
  id: index#gt
  summary: Returns true if its arguments are of the same type and the first is greater than the second according to the type's fantasy-land/lte method; false otherwise
  description: |-
    ### [`gt :: (a, b) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1377)

    Returns `true` if its arguments are of the same type and the first is greater than the second according to the type's [`fantasy-land/lte`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#lte-method) method; `false` otherwise.

    This function is derived from [`lte`](#lte).

    See also [`lt`](#lt) and [`gte`](#gte).

    ``` js
    > Z.gt (0, 0)
    false

    > Z.gt (0, 1)
    false

    > Z.gt (1, 0)
    true
    ```
- name: gte
  id: index#gte
  summary: Returns true if its arguments are of the same type and the first is greater than or equal to the second according to the type's fantasy-land/lte method; false otherwise
  description: |-
    ### [`gte :: (a, b) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1399)

    Returns `true` if its arguments are of the same type and the first is greater than or equal to the second according to the type's [`fantasy-land/lte`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#lte-method) method; `false` otherwise.

    This function is derived from [`lte`](#lte).

    See also [`lt`](#lt) and [`gt`](#gt).

    ``` js
    > Z.gte (0, 0)
    true

    > Z.gte (0, 1)
    false

    > Z.gte (1, 0)
    true
    ```
- name: min
  id: index#min
  summary: Returns the smaller of its two arguments
  description: |-
    ### [`min :: Ord a => (a, a) -⁠> a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1421)

    Returns the smaller of its two arguments.

    This function is derived from [`lte`](#lte).

    See also [`max`](#max).

    ``` js
    > Z.min (10, 2)
    2

    > Z.min (new Date ('1999-12-31'), new Date ('2000-01-01'))
    new Date ('1999-12-31')

    > Z.min ('10', '2')
    '10'
    ```
- name: max
  id: index#max
  summary: Returns the larger of its two arguments
  description: |-
    ### [`max :: Ord a => (a, a) -⁠> a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1441)

    Returns the larger of its two arguments.

    This function is derived from [`lte`](#lte).

    See also [`min`](#min).

    ``` js
    > Z.max (10, 2)
    10

    > Z.max (new Date ('1999-12-31'), new Date ('2000-01-01'))
    new Date ('2000-01-01')

    > Z.max ('10', '2')
    '2'
    ```
- name: clamp
  id: index#clamp
  summary: Takes a lower bound, an upper bound, and a value of the same type
  description: |-
    ### [`clamp :: Ord a => (a, a, a) -⁠> a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1461)

    Takes a lower bound, an upper bound, and a value of the same type. Returns the value if it is within the bounds; the nearer bound otherwise.

    This function is derived from [`min`](#min) and [`max`](#max).

    ``` js
    > Z.clamp (0, 100, 42)
    42

    > Z.clamp (0, 100, -1)
    0

    > Z.clamp ('A', 'Z', '~')
    'Z'
    ```
- name: compose
  id: index#compose
  summary: Function wrapper for fantasy-land/compose
  description: |-
    ### [`compose :: Semigroupoid c => (c j k, c i j) -⁠> c i k`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1480)

    Function wrapper for [`fantasy-land/compose`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#compose-method).

    `fantasy-land/compose` implementations are provided for the following built-in types: Function.

    ``` js
    > Z.compose (Math.sqrt, x => x + 1) (99)
    10
    ```
- name: id
  id: index#id
  summary: Function wrapper for fantasy-land/id
  description: |-
    ### [`id :: Category c => TypeRep c -⁠> c`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1493)

    Function wrapper for [`fantasy-land/id`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#id-method).

    `fantasy-land/id` implementations are provided for the following built-in types: Function.

    ``` js
    > Z.id (Function) ('foo')
    'foo'
    ```
- name: concat
  id: index#concat
  summary: Function wrapper for fantasy-land/concat
  description: |-
    ### [`concat :: Semigroup a => (a, a) -⁠> a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1506)

    Function wrapper for [`fantasy-land/concat`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#concat-method).

    `fantasy-land/concat` implementations are provided for the following built-in types: String, Array, and Object.

    ``` js
    > Z.concat ('abc', 'def')
    'abcdef'

    > Z.concat ([1, 2, 3], [4, 5, 6])
    [1, 2, 3, 4, 5, 6]

    > Z.concat ({x: 1, y: 2}, {y: 3, z: 4})
    {x: 1, y: 3, z: 4}

    > Z.concat (Cons ('foo', Cons ('bar', Cons ('baz', Nil))), Cons ('quux', Nil))
    Cons ('foo', Cons ('bar', Cons ('baz', Cons ('quux', Nil))))
    ```
- name: empty
  id: index#empty
  summary: Function wrapper for fantasy-land/empty
  description: |-
    ### [`empty :: Monoid m => TypeRep m -⁠> m`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1528)

    Function wrapper for [`fantasy-land/empty`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#empty-method).

    `fantasy-land/empty` implementations are provided for the following built-in types: String, Array, and Object.

    ``` js
    > Z.empty (String)
    ''

    > Z.empty (Array)
    []

    > Z.empty (Object)
    {}

    > Z.empty (List)
    Nil
    ```
- name: invert
  id: index#invert
  summary: Function wrapper for fantasy-land/invert
  description: |-
    ### [`invert :: Group g => g -⁠> g`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1550)

    Function wrapper for [`fantasy-land/invert`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#invert-method).

    ``` js
    > Z.invert (Sum (5))
    Sum (-5)
    ```
- name: filter
  id: index#filter
  summary: Function wrapper for fantasy-land/filter
  description: |-
    ### [`filter :: Filterable f => (a -⁠> Boolean, f a) -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1560)

    Function wrapper for [`fantasy-land/filter`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#filter-method). Discards every element which does not satisfy the predicate.

    `fantasy-land/filter` implementations are provided for the following built-in types: Array and Object.

    See also [`reject`](#reject).

    ``` js
    > Z.filter (x => x % 2 == 1, [1, 2, 3])
    [1, 3]

    > Z.filter (x => x % 2 == 1, {x: 1, y: 2, z: 3})
    {x: 1, z: 3}

    > Z.filter (x => x % 2 == 1, Cons (1, Cons (2, Cons (3, Nil))))
    Cons (1, Cons (3, Nil))

    > Z.filter (x => x % 2 == 1, Nothing)
    Nothing

    > Z.filter (x => x % 2 == 1, Just (0))
    Nothing

    > Z.filter (x => x % 2 == 1, Just (1))
    Just (1)
    ```
- name: reject
  id: index#reject
  summary: Discards every element which satisfies the predicate
  description: |-
    ### [`reject :: Filterable f => (a -⁠> Boolean, f a) -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1591)

    Discards every element which satisfies the predicate.

    This function is derived from [`filter`](#filter).

    ``` js
    > Z.reject (x => x % 2 == 1, [1, 2, 3])
    [2]

    > Z.reject (x => x % 2 == 1, {x: 1, y: 2, z: 3})
    {y: 2}

    > Z.reject (x => x % 2 == 1, Cons (1, Cons (2, Cons (3, Nil))))
    Cons (2, Nil)

    > Z.reject (x => x % 2 == 1, Nothing)
    Nothing

    > Z.reject (x => x % 2 == 1, Just (0))
    Just (0)

    > Z.reject (x => x % 2 == 1, Just (1))
    Nothing
    ```
- name: map
  id: index#map
  summary: Function wrapper for fantasy-land/map
  description: |-
    ### [`map :: Functor f => (a -⁠> b, f a) -⁠> f b`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1618)

    Function wrapper for [`fantasy-land/map`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#map-method).

    `fantasy-land/map` implementations are provided for the following built-in types: Array, Object, and Function.

    ``` js
    > Z.map (Math.sqrt, [1, 4, 9])
    [1, 2, 3]

    > Z.map (Math.sqrt, {x: 1, y: 4, z: 9})
    {x: 1, y: 2, z: 3}

    > Z.map (Math.sqrt, s => s.length) ('Sanctuary')
    3

    > Z.map (Math.sqrt, Pair ('foo') (64))
    Pair ('foo') (8)

    > Z.map (Math.sqrt, Nil)
    Nil

    > Z.map (Math.sqrt, Cons (1, Cons (4, Cons (9, Nil))))
    Cons (1, Cons (2, Cons (3, Nil)))
    ```
- name: flip
  id: index#flip
  summary: Maps over the given functions, applying each to the given value
  description: |-
    ### [`flip :: Functor f => (f (a -⁠> b), a) -⁠> f b`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1646)

    Maps over the given functions, applying each to the given value.

    This function is derived from [`map`](#map).

    ``` js
    > Z.flip (x => y => x + y, '!') ('foo')
    'foo!'

    > Z.flip ([Math.floor, Math.ceil], 1.5)
    [1, 2]

    > Z.flip ({floor: Math.floor, ceil: Math.ceil}, 1.5)
    {floor: 1, ceil: 2}

    > Z.flip (Cons (Math.floor, Cons (Math.ceil, Nil)), 1.5)
    Cons (1, Cons (2, Nil))
    ```
- name: bimap
  id: index#bimap
  summary: Function wrapper for fantasy-land/bimap
  description: |-
    ### [`bimap :: Bifunctor f => (a -⁠> b, c -⁠> d, f a c) -⁠> f b d`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1667)

    Function wrapper for [`fantasy-land/bimap`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#bimap-method).

    ``` js
    > Z.bimap (s => s.toUpperCase (), Math.sqrt, Pair ('foo') (64))
    Pair ('FOO') (8)
    ```
- name: mapLeft
  id: index#mapLeft
  summary: Maps the given function over the left side of a Bifunctor
  description: |-
    ### [`mapLeft :: Bifunctor f => (a -⁠> b, f a c) -⁠> f b c`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1677)

    Maps the given function over the left side of a Bifunctor.

    ``` js
    > Z.mapLeft (Math.sqrt, Pair (64) (9))
    Pair (8) (9)
    ```
- name: promap
  id: index#promap
  summary: Function wrapper for fantasy-land/promap
  description: |-
    ### [`promap :: Profunctor p => (a -⁠> b, c -⁠> d, p b c) -⁠> p a d`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1687)

    Function wrapper for [`fantasy-land/promap`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#promap-method).

    `fantasy-land/promap` implementations are provided for the following built-in types: Function.

    ``` js
    > Z.promap (Math.abs, x => x + 1, Math.sqrt) (-100)
    11
    ```
- name: ap
  id: index#ap
  summary: Function wrapper for fantasy-land/ap
  description: |-
    ### [`ap :: Apply f => (f (a -⁠> b), f a) -⁠> f b`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1700)

    Function wrapper for [`fantasy-land/ap`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#ap-method).

    `fantasy-land/ap` implementations are provided for the following built-in types: Array, Object, and Function.

    ``` js
    > Z.ap ([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])
    [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]

    > Z.ap ({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})
    {a: 4, b: 100}

    > Z.ap (s => n => s.slice (0, n), s => Math.ceil (s.length / 2)) ('Haskell')
    'Hask'

    > Z.ap (Identity (Math.sqrt), Identity (64))
    Identity (8)

    > Z.ap (Cons (Math.sqrt, Cons (x => x * x, Nil)), Cons (16, Cons (100, Nil)))
    Cons (4, Cons (10, Cons (256, Cons (10000, Nil))))
    ```
- name: lift2
  id: index#lift2
  summary: Lifts a -> b -> c to Apply f => f a -> f b -> f c and returns the result of applying this to the given arguments
  description: |-
    ### [`lift2 :: Apply f => (a -⁠> b -⁠> c, f a, f b) -⁠> f c`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1725)

    Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the result of applying this to the given arguments.

    This function is derived from [`map`](#map) and [`ap`](#ap).

    See also [`lift3`](#lift3).

    ``` js
    > Z.lift2 (x => y => Math.pow (x, y), [10], [1, 2, 3])
    [10, 100, 1000]

    > Z.lift2 (x => y => Math.pow (x, y), Identity (10), Identity (3))
    Identity (1000)
    ```
- name: lift3
  id: index#lift3
  summary: Lifts a -> b -> c -> d to Apply f => f a -> f b -> f c -> f d and returns the result of applying this to the given arguments
  description: |-
    ### [`lift3 :: Apply f => (a -⁠> b -⁠> c -⁠> d, f a, f b, f c) -⁠> f d`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1743)

    Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and returns the result of applying this to the given arguments.

    This function is derived from [`map`](#map) and [`ap`](#ap).

    See also [`lift2`](#lift2).

    ``` js
    > Z.lift3 (x => y => z => x + z + y,
    .          ['<', '['],
    .          ['>', ']'],
    .          ['foo', 'bar', 'baz'])
    [ '<foo>', '<bar>', '<baz>',
    . '<foo]', '<bar]', '<baz]',
    . '[foo>', '[bar>', '[baz>',
    . '[foo]', '[bar]', '[baz]' ]

    > Z.lift3 (x => y => z => x + z + y,
    .          Identity ('<'),
    .          Identity ('>'),
    .          Identity ('baz'))
    Identity ('<baz>')
    ```
- name: apFirst
  id: index#apFirst
  summary: Combines two effectful actions, keeping only the result of the first
  description: |-
    ### [`apFirst :: Apply f => (f a, f b) -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1770)

    Combines two effectful actions, keeping only the result of the first. Equivalent to Haskell's `(<*)` function.

    This function is derived from [`lift2`](#lift2).

    See also [`apSecond`](#apSecond).

    ``` js
    > Z.apFirst ([1, 2], [3, 4])
    [1, 1, 2, 2]

    > Z.apFirst (Identity (1), Identity (2))
    Identity (1)
    ```
- name: apSecond
  id: index#apSecond
  summary: Combines two effectful actions, keeping only the result of the second
  description: |-
    ### [`apSecond :: Apply f => (f a, f b) -⁠> f b`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1788)

    Combines two effectful actions, keeping only the result of the second. Equivalent to Haskell's `(*>)` function.

    This function is derived from [`lift2`](#lift2).

    See also [`apFirst`](#apFirst).

    ``` js
    > Z.apSecond ([1, 2], [3, 4])
    [3, 4, 3, 4]

    > Z.apSecond (Identity (1), Identity (2))
    Identity (2)
    ```
- name: of
  id: index#of
  summary: Function wrapper for fantasy-land/of
  description: |-
    ### [`of :: Applicative f => (TypeRep f, a) -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1806)

    Function wrapper for [`fantasy-land/of`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#of-method).

    `fantasy-land/of` implementations are provided for the following built-in types: Array and Function.

    ``` js
    > Z.of (Array, 42)
    [42]

    > Z.of (Function, 42) (null)
    42

    > Z.of (List, 42)
    Cons (42, Nil)
    ```
- name: append
  id: index#append
  summary: Returns the result of appending the first argument to the second
  description: |-
    ### [`append :: (Applicative f, Semigroup (f a)) => (a, f a) -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1825)

    Returns the result of appending the first argument to the second.

    This function is derived from [`concat`](#concat) and [`of`](#of).

    See also [`prepend`](#prepend).

    ``` js
    > Z.append (3, [1, 2])
    [1, 2, 3]

    > Z.append (3, Cons (1, Cons (2, Nil)))
    Cons (1, Cons (2, Cons (3, Nil)))
    ```
- name: prepend
  id: index#prepend
  summary: Returns the result of prepending the first argument to the second
  description: |-
    ### [`prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1842)

    Returns the result of prepending the first argument to the second.

    This function is derived from [`concat`](#concat) and [`of`](#of).

    See also [`append`](#append).

    ``` js
    > Z.prepend (1, [2, 3])
    [1, 2, 3]

    > Z.prepend (1, Cons (2, Cons (3, Nil)))
    Cons (1, Cons (2, Cons (3, Nil)))
    ```
- name: chain
  id: index#chain
  summary: TypeClass value for Chain
  description: |-
    ### [`Chain :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1037)

    `TypeClass` value for [Chain](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#chain).

    ``` js
    > Z.Chain.test ([])
    true

    > Z.Chain.test ({})
    false
    ```
- name: join
  id: index#join
  summary: Removes one level of nesting from a nested monadic structure
  description: |-
    ### [`join :: Chain m => m (m a) -⁠> m a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1881)

    Removes one level of nesting from a nested monadic structure.

    This function is derived from [`chain`](#chain).

    ``` js
    > Z.join ([[1], [2], [3]])
    [1, 2, 3]

    > Z.join ([[[1, 2, 3]]])
    [[1, 2, 3]]

    > Z.join (Identity (Identity (1)))
    Identity (1)
    ```
- name: chainRec
  id: index#chainRec
  summary: TypeClass value for ChainRec
  description: |-
    ### [`ChainRec :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1058)

    `TypeClass` value for [ChainRec](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#chainrec).

    ``` js
    > Z.ChainRec.test ([])
    true

    > Z.ChainRec.test ({})
    false
    ```
- name: alt
  id: index#alt
  summary: TypeClass value for Alt
  description: |-
    ### [`Alt :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1092)

    `TypeClass` value for [Alt](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#alt).

    ``` js
    > Z.Alt.test ({})
    true

    > Z.Alt.test ('')
    false
    ```
- name: zero
  id: index#zero
  summary: Function wrapper for fantasy-land/zero
  description: |-
    ### [`zero :: Plus f => TypeRep f -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1939)

    Function wrapper for [`fantasy-land/zero`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#zero-method).

    `fantasy-land/zero` implementations are provided for the following built-in types: Array and Object.

    ``` js
    > Z.zero (Array)
    []

    > Z.zero (Object)
    {}

    > Z.zero (Maybe)
    Nothing
    ```
- name: reduce
  id: index#reduce
  summary: Function wrapper for fantasy-land/reduce
  description: |-
    ### [`reduce :: Foldable f => ((b, a) -⁠> b, b, f a) -⁠> b`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1958)

    Function wrapper for [`fantasy-land/reduce`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#reduce-method).

    `fantasy-land/reduce` implementations are provided for the following built-in types: Array and Object.

    ``` js
    > Z.reduce ((xs, x) => [x].concat (xs), [], [1, 2, 3])
    [3, 2, 1]

    > Z.reduce (Z.concat, '', Cons ('foo', Cons ('bar', Cons ('baz', Nil))))
    'foobarbaz'

    > Z.reduce (Z.concat, '', {foo: 'x', bar: 'y', baz: 'z'})
    'yzx'
    ```
- name: size
  id: index#size
  summary: Returns the number of elements of the given structure
  description: |-
    ### [`size :: Foldable f => f a -⁠> Integer`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1977)

    Returns the number of elements of the given structure.

    This function is derived from [`reduce`](#reduce).

    ``` js
    > Z.size ([])
    0

    > Z.size (['foo', 'bar', 'baz'])
    3

    > Z.size (Nil)
    0

    > Z.size (Cons ('foo', Cons ('bar', Cons ('baz', Nil))))
    3
    ```
- name: all
  id: index#all
  summary: Returns true if all the elements of the structure satisfy the predicate; false otherwise
  description: |-
    ### [`all :: Foldable f => (a -⁠> Boolean, f a) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2002)

    Returns `true` if all the elements of the structure satisfy the predicate; `false` otherwise.

    This function is derived from [`reduce`](#reduce).

    See also [`any`](#any) and [`none`](#none).

    ``` js
    > Z.all (Number.isInteger, [])
    true

    > Z.all (Number.isInteger, [1, 2, 3])
    true

    > Z.all (Number.isInteger, [0, 0.25, 0.5, 0.75, 1])
    false
    ```
- name: any
  id: index#any
  summary: Returns true if any element of the structure satisfies the predicate; false otherwise
  description: |-
    ### [`any :: Foldable f => (a -⁠> Boolean, f a) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2027)

    Returns `true` if any element of the structure satisfies the predicate; `false` otherwise.

    This function is derived from [`reduce`](#reduce).

    See also [`all`](#all) and [`none`](#none).

    ``` js
    > Z.any (Number.isInteger, [])
    false

    > Z.any (Number.isInteger, [1, 2, 3])
    true

    > Z.any (Number.isInteger, [0, 0.25, 0.5, 0.75, 1])
    true
    ```
- name: none
  id: index#none
  summary: Returns true if none of the elements of the structure satisfies the predicate; false otherwise
  description: |-
    ### [`none :: Foldable f => (a -⁠> Boolean, f a) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2052)

    Returns `true` if none of the elements of the structure satisfies the predicate; `false` otherwise.

    This function is derived from [`any`](#any). `Z.none (pred, foldable)` is equivalent to `!(Z.any (pred, foldable))`.

    See also [`all`](#all).

    ``` js
    > Z.none (Number.isInteger, [])
    true

    > Z.none (Number.isInteger, [0, 0.25, 0.5, 0.75, 1])
    false
    ```
- name: elem
  id: index#elem
  summary: Takes a value and a structure and returns true if the value is an element of the structure; false otherwise
  description: |-
    ### [`elem :: (Setoid a, Foldable f) => (a, f a) -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2071)

    Takes a value and a structure and returns `true` if the value is an element of the structure; `false` otherwise.

    This function is derived from [`equals`](#equals) and [`reduce`](#reduce).

    ``` js
    > Z.elem ('c', ['a', 'b', 'c'])
    true

    > Z.elem ('x', ['a', 'b', 'c'])
    false

    > Z.elem (3, {x: 1, y: 2, z: 3})
    true

    > Z.elem (8, {x: 1, y: 2, z: 3})
    false

    > Z.elem (0, Just (0))
    true

    > Z.elem (0, Just (1))
    false

    > Z.elem (0, Nothing)
    false
    ```
- name: intercalate
  id: index#intercalate
  summary: Concatenates the elements of the given structure, separating each pair of adjacent elements with the given separator
  description: |-
    ### [`intercalate :: (Monoid m, Foldable f) => (m, f m) -⁠> m`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2103)

    Concatenates the elements of the given structure, separating each pair of adjacent elements with the given separator.

    This function is derived from [`concat`](#concat), [`empty`](#empty), and [`reduce`](#reduce).

    ``` js
    > Z.intercalate (', ', [])
    ''

    > Z.intercalate (', ', ['foo', 'bar', 'baz'])
    'foo, bar, baz'

    > Z.intercalate (', ', Nil)
    ''

    > Z.intercalate (', ', Cons ('foo', Cons ('bar', Cons ('baz', Nil))))
    'foo, bar, baz'

    > Z.intercalate ([0, 0, 0], [])
    []

    > Z.intercalate ([0, 0, 0], [[1], [2, 3], [4, 5, 6], [7, 8], [9]])
    [1, 0, 0, 0, 2, 3, 0, 0, 0, 4, 5, 6, 0, 0, 0, 7, 8, 0, 0, 0, 9]
    ```
- name: foldMap
  id: index#foldMap
  summary: Deconstructs a foldable by mapping every element to a monoid and concatenating the results
  description: |-
    ### [`foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -⁠> m, f a) -⁠> m`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2142)

    Deconstructs a foldable by mapping every element to a monoid and concatenating the results.

    This function is derived from [`concat`](#concat), [`empty`](#empty), and [`reduce`](#reduce).

    ``` js
    > Z.foldMap (String, f => f.name, [Math.sin, Math.cos, Math.tan])
    'sincostan'
    ```
- name: reverse
  id: index#reverse
  summary: Reverses the elements of the given structure
  description: |-
    ### [`reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2162)

    Reverses the elements of the given structure.

    This function is derived from [`concat`](#concat), [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).

    ``` js
    > Z.reverse ([1, 2, 3])
    [3, 2, 1]

    > Z.reverse (Cons (1, Cons (2, Cons (3, Nil))))
    Cons (3, Cons (2, Cons (1, Nil)))
    ```
- name: sort
  id: index#sort
  summary: Performs a stable sort of the elements of the given structure, using lte for comparisons
  description: |-
    ### [`sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2187)

    Performs a [stable sort](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability) of the elements of the given structure, using [`lte`](#lte) for comparisons.

    This function is derived from [`lte`](#lte), [`concat`](#concat), [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).

    See also [`sortBy`](#sortBy).

    ``` js
    > Z.sort (['foo', 'bar', 'baz'])
    ['bar', 'baz', 'foo']

    > Z.sort ([Just (2), Nothing, Just (1)])
    [Nothing, Just (1), Just (2)]

    > Z.sort (Cons ('foo', Cons ('bar', Cons ('baz', Nil))))
    Cons ('bar', Cons ('baz', Cons ('foo', Nil)))
    ```
- name: sortBy
  id: index#sortBy
  summary: Performs a stable sort of the elements of the given structure, using lte to compare the values produced by applying the given function to each element of the structure
  description: |-
    ### [`sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -⁠> b, f a) -⁠> f a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2209)

    Performs a [stable sort](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability) of the elements of the given structure, using [`lte`](#lte) to compare the values produced by applying the given function to each element of the structure.

    This function is derived from [`lte`](#lte), [`concat`](#concat), [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).

    See also [`sort`](#sort).

    ``` js
    > Z.sortBy (s => s.length, ['red', 'green', 'blue'])
    ['red', 'blue', 'green']

    > Z.sortBy (s => s.length, ['black', 'white'])
    ['black', 'white']

    > Z.sortBy (s => s.length, ['white', 'black'])
    ['white', 'black']

    > Z.sortBy (s => s.length, Cons ('red', Cons ('green', Cons ('blue', Nil))))
    Cons ('red', Cons ('blue', Cons ('green', Nil)))
    ```
- name: traverse
  id: index#traverse
  summary: Function wrapper for fantasy-land/traverse
  description: |-
    ### [`traverse :: (Applicative f, Traversable t) => (TypeRep f, a -⁠> f b, t a) -⁠> f (t b)`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2264)

    Function wrapper for [`fantasy-land/traverse`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#traverse-method).

    `fantasy-land/traverse` implementations are provided for the following built-in types: Array and Object.

    See also [`sequence`](#sequence).

    ``` js
    > Z.traverse (Array, x => x, [[1, 2, 3], [4, 5]])
    [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]

    > Z.traverse (Identity, x => Identity (x + 1), [1, 2, 3])
    Identity ([2, 3, 4])
    ```
- name: sequence
  id: index#sequence
  summary: Inverts the given t (f a) to produce an f (t a)
  description: |-
    ### [`sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -⁠> f (t a)`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2282)

    Inverts the given `t (f a)` to produce an `f (t a)`.

    This function is derived from [`traverse`](#traverse).

    ``` js
    > Z.sequence (Array, Identity ([1, 2, 3]))
    [Identity (1), Identity (2), Identity (3)]

    > Z.sequence (Identity, [Identity (1), Identity (2), Identity (3)])
    Identity ([1, 2, 3])
    ```
- name: extend
  id: index#extend
  summary: TypeClass value for Extend
  description: |-
    ### [`Extend :: TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L1189)

    `TypeClass` value for [Extend](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#extend).

    ``` js
    > Z.Extend.test ([])
    true

    > Z.Extend.test ({})
    false
    ```
- name: duplicate
  id: index#duplicate
  summary: Adds one level of nesting to a comonadic structure
  description: |-
    ### [`duplicate :: Extend w => w a -⁠> w (w a)`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2315)

    Adds one level of nesting to a comonadic structure.

    This function is derived from [`extend`](#extend).

    ``` js
    > Z.duplicate (Identity (1))
    Identity (Identity (1))

    > Z.duplicate ([1])
    [[1]]

    > Z.duplicate ([1, 2, 3])
    [[1, 2, 3], [2, 3], [3]]

    > Z.duplicate (Z.reverse) ([1, 2]) ([3, 4])
    [4, 3, 2, 1]
    ```
- name: extract
  id: index#extract
  summary: Function wrapper for fantasy-land/extract
  description: |-
    ### [`extract :: Comonad w => w a -⁠> a`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2336)

    Function wrapper for [`fantasy-land/extract`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#extract-method).

    ``` js
    > Z.extract (Identity (42))
    42
    ```
- name: contramap
  id: index#contramap
  summary: Function wrapper for fantasy-land/contramap
  description: "### [`contramap :: Contravariant f => (b -⁠> a, f a) -⁠> f b`](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/index.js#L2346)\n\nFunction wrapper for [`fantasy-land/contramap`](https://github.com/fantasyland/fantasy-land/tree/v5.0.0#contramap-method).\n\n`fantasy-land/contramap` implementations are provided for the following built-in types: Function.\n\n``` js\n> Z.contramap (s => s.length, Math.sqrt) ('Sanctuary')\n3\n```\n\n© 2020 Sanctuary  \n© 2016 Plaid Technologies, Inc.  \nLicensed under the MIT License.  \n[https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/README.md](https://github.com/sanctuary-js/sanctuary-type-classes/blob/v13.0.0/README.md)"
