---
name: Phalcon
slug: phalcon~3
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '3'
copyright: |-
  © 2011–2017 Phalcon Framework Team
  Licensed under the Creative Commons Attribution License 3.0.
  https://docs.phalconphp.com/en/latest/index.html
homepage: https://phalconphp.com/

---
- name: Access Control Lists (ACL)
  id: reference/acl
  summary: Phalcon\Acl provides an easy and lightweight management of ACLs as well as the permissions attached to them
  description: "# Access Control Lists (ACL)\n\n[*Phalcon\\Acl*](../api/phalcon_acl) provides an easy and lightweight management of ACLs as well as the permissions attached to them. [Access Control Lists](http://en.wikipedia.org/wiki/Access_control_list) (ACL) allow an application to control access to its areas and the underlying objects from requests. You are encouraged to read more about the ACL methodology so as to be familiar with its concepts.\n\nIn summary, ACLs have roles and resources. Resources are objects which abide by the permissions defined to them by the ACLs. Roles are objects that request access to resources and can be allowed or denied access by the ACL mechanism.\n\n## Creating an ACL\n\nThis component is designed to initially work in memory. This provides ease of use and speed in accessing every aspect of the list. The [*Phalcon\\Acl*](../api/phalcon_acl) constructor takes as its first parameter an adapter used to retrieve the information related to the control list. An example using the memory adapter is below:\n\n``` php\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n$acl = new AclList();\n```\n\nBy default [*Phalcon\\Acl*](../api/phalcon_acl) allows access to action on resources that have not yet been defined. To increase the security level of the access list we can define a “deny” level as a default access level.\n\n``` php\nuse Phalcon\\Acl;\n\n// Default action is deny access\n$acl->setDefaultAction(\n    Acl::DENY\n);\n```\n\n## Adding Roles to the ACL\n\nA role is an object that can or cannot access certain resources in the access list. As an example, we will define roles as groups of people in an organization. The [*Phalcon\\Acl\\Role*](../api/phalcon_acl_role) class is available to create roles in a more structured way. Let’s add some roles to our recently created list:\n\n``` php\nuse Phalcon\\Acl\\Role;\n\n// Create some roles.\n// The first parameter is the name, the second parameter is an optional description.\n$roleAdmins = new Role(\"Administrators\", \"Super-User role\");\n$roleGuests = new Role(\"Guests\");\n\n// Add \"Guests\" role to ACL\n$acl->addRole($roleGuests);\n\n// Add \"Designers\" role to ACL without a Phalcon\\Acl\\Role\n$acl->addRole(\"Designers\");\n```\n\nAs you can see, roles are defined directly without using an instance.\n\n## Adding Resources\n\nResources are objects where access is controlled. Normally in MVC applications resources refer to controllers. Although this is not mandatory, the [*Phalcon\\Acl\\Resource*](../api/phalcon_acl_resource) class can be used in defining resources. It’s important to add related actions or operations to a resource so that the ACL can understand what it should to control.\n\n``` php\nuse Phalcon\\Acl\\Resource;\n\n// Define the \"Customers\" resource\n$customersResource = new Resource(\"Customers\");\n\n// Add \"customers\" resource with a couple of operations\n\n$acl->addResource(\n    $customersResource,\n    \"search\"\n);\n\n$acl->addResource(\n    $customersResource,\n    [\n        \"create\",\n        \"update\",\n    ]\n);\n```\n\n## Defining Access Controls\n\nNow that we have roles and resources, it’s time to define the ACL (i.e. which roles can access which resources). This part is very important especially taking into consideration your default access level “allow” or “deny”.\n\n``` php\n// Set access level for roles into resources\n\n$acl->allow(\"Guests\", \"Customers\", \"search\");\n\n$acl->allow(\"Guests\", \"Customers\", \"create\");\n\n$acl->deny(\"Guests\", \"Customers\", \"update\");\n```\n\nThe `allow()` method designates that a particular role has granted access to a particular resource. The `deny()` method does the opposite.\n\n## Querying an ACL\n\nOnce the list has been completely defined. We can query it to check if a role has a given permission or not.\n\n``` php\n// Check whether role has access to the operations\n\n// Returns 0\n$acl->isAllowed(\"Guests\", \"Customers\", \"edit\");\n\n// Returns 1\n$acl->isAllowed(\"Guests\", \"Customers\", \"search\");\n\n// Returns 1\n$acl->isAllowed(\"Guests\", \"Customers\", \"create\");\n```\n\n## Function based access\n\nAlso you can add as 4th parameter your custom function which must return boolean value. It will be called when you use `isAllowed()` method. You can pass parameters as associative array to `isAllowed()` method as 4th argument where key is parameter name in our defined function.\n\n``` php\n// Set access level for role into resources with custom function\n$acl->allow(\n    \"Guests\",\n    \"Customers\",\n    \"search\",\n    function ($a) {\n        return $a % 2 === 0;\n    }\n);\n\n// Check whether role has access to the operation with custom function\n\n// Returns true\n$acl->isAllowed(\n    \"Guests\",\n    \"Customers\",\n    \"search\",\n    [\n        \"a\" => 4,\n    ]\n);\n\n// Returns false\n$acl->isAllowed(\n    \"Guests\",\n    \"Customers\",\n    \"search\",\n    [\n        \"a\" => 3,\n    ]\n);\n```\n\nAlso if you don’t provide any parameters in `isAllowed()` method then default behaviour will be `Acl::ALLOW`. You can change it by using method `setNoArgumentsDefaultAction()`.\n\n``` php\nuse Phalcon\\Acl;\n\n<?php\n// Set access level for role into resources with custom function\n$acl->allow(\n    \"Guests\",\n    \"Customers\",\n    \"search\",\n    function ($a) {\n        return $a % 2 === 0;\n    }\n);\n\n// Check whether role has access to the operation with custom function\n\n// Returns true\n$acl->isAllowed(\n    \"Guests\",\n    \"Customers\",\n    \"search\"\n);\n\n// Change no arguments default action\n$acl->setNoArgumentsDefaultAction(\n    Acl::DENY\n);\n\n// Returns false\n$acl->isAllowed(\n    \"Guests\",\n    \"Customers\",\n    \"search\"\n);\n```\n\n## Objects as role name and resource name\n\nYou can pass objects as `roleName` and `resourceName`. Your classes must implement [*Phalcon\\Acl\\RoleAware*](../api/phalcon_acl_roleaware) for `roleName` and [*Phalcon\\Acl\\ResourceAware*](../api/phalcon_acl_resourceaware) for `resourceName`.\n\nOur `UserRole` class\n\n``` php\nuse Phalcon\\Acl\\RoleAware;\n\n// Create our class which will be used as roleName\nclass UserRole implements RoleAware\n{\n    protected $id;\n\n    protected $roleName;\n\n    public function __construct($id, $roleName)\n    {\n        $this->id       = $id;\n        $this->roleName = $roleName;\n    }\n\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    // Implemented function from RoleAware Interface\n    public function getRoleName()\n    {\n        return $this->roleName;\n    }\n}\n```\n\nAnd our `ModelResource` class\n\n``` php\nuse Phalcon\\Acl\\ResourceAware;\n\n// Create our class which will be used as resourceName\nclass ModelResource implements ResourceAware\n{\n    protected $id;\n\n    protected $resourceName;\n\n    protected $userId;\n\n    public function __construct($id, $resourceName, $userId)\n    {\n        $this->id           = $id;\n        $this->resourceName = $resourceName;\n        $this->userId       = $userId;\n    }\n\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    public function getUserId()\n    {\n        return $this->userId;\n    }\n\n    // Implemented function from ResourceAware Interface\n    public function getResourceName()\n    {\n        return $this->resourceName;\n    }\n}\n```\n\nThen you can use them in `isAllowed()` method.\n\n``` php\nuse UserRole;\nuse ModelResource;\n\n// Set access level for role into resources\n$acl->allow(\"Guests\", \"Customers\", \"search\");\n$acl->allow(\"Guests\", \"Customers\", \"create\");\n$acl->deny(\"Guests\", \"Customers\", \"update\");\n\n// Create our objects providing roleName and resourceName\n\n$customer = new ModelResource(\n    1,\n    \"Customers\",\n    2\n);\n\n$designer = new UserRole(\n    1,\n    \"Designers\"\n);\n\n$guest = new UserRole(\n    2,\n    \"Guests\"\n);\n\n$anotherGuest = new UserRole(\n    3,\n    \"Guests\"\n);\n\n// Check whether our user objects have access to the operation on model object\n\n// Returns false\n$acl->isAllowed(\n    $designer,\n    $customer,\n    \"search\"\n);\n\n// Returns true\n$acl->isAllowed(\n    $guest,\n    $customer,\n    \"search\"\n);\n\n// Returns true\n$acl->isAllowed(\n    $anotherGuest,\n    $customer,\n    \"search\"\n);\n```\n\nAlso you can access those objects in your custom function in `allow()` or `deny()`. They are automatically bind to parameters by type in function.\n\n``` php\nuse UserRole;\nuse ModelResource;\n\n// Set access level for role into resources with custom function\n$acl->allow(\n    \"Guests\",\n    \"Customers\",\n    \"search\",\n    function (UserRole $user, ModelResource $model) { // User and Model classes are necessary\n        return $user->getId == $model->getUserId();\n    }\n);\n\n$acl->allow(\n    \"Guests\",\n    \"Customers\",\n    \"create\"\n);\n\n$acl->deny(\n    \"Guests\",\n    \"Customers\",\n    \"update\"\n);\n\n// Create our objects providing roleName and resourceName\n\n$customer = new ModelResource(\n    1,\n    \"Customers\",\n    2\n);\n\n$designer = new UserRole(\n    1,\n    \"Designers\"\n);\n\n$guest = new UserRole(\n    2,\n    \"Guests\"\n);\n\n$anotherGuest = new UserRole(\n    3,\n    \"Guests\"\n);\n\n// Check whether our user objects have access to the operation on model object\n\n// Returns false\n$acl->isAllowed(\n    $designer,\n    $customer,\n    \"search\"\n);\n\n// Returns true\n$acl->isAllowed(\n    $guest,\n    $customer,\n    \"search\"\n);\n\n// Returns false\n$acl->isAllowed(\n    $anotherGuest,\n    $customer,\n    \"search\"\n);\n```\n\nYou can still add any custom parameters to function and pass associative array in `isAllowed()` method. Also order doesn’t matter.\n\n## Roles Inheritance\n\nYou can build complex role structures using the inheritance that [*Phalcon\\Acl\\Role*](../api/phalcon_acl_role) provides. Roles can inherit from other roles, thus allowing access to supersets or subsets of resources. To use role inheritance, you need to pass the inherited role as the second parameter of the method call, when adding that role in the list.\n\n``` php\nuse Phalcon\\Acl\\Role;\n\n// ...\n\n// Create some roles\n\n$roleAdmins = new Role(\"Administrators\", \"Super-User role\");\n\n$roleGuests = new Role(\"Guests\");\n\n// Add \"Guests\" role to ACL\n$acl->addRole($roleGuests);\n\n// Add \"Administrators\" role inheriting from \"Guests\" its accesses\n$acl->addRole($roleAdmins, $roleGuests);\n```\n\n## Serializing ACL lists\n\nTo improve performance [*Phalcon\\Acl*](../api/phalcon_acl) instances can be serialized and stored in APC, session, text files or a database table so that they can be loaded at will without having to redefine the whole list. You can do that as follows:\n\n``` php\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n// ...\n\n// Check whether ACL data already exist\nif (!is_file(\"app/security/acl.data\")) {\n    $acl = new AclList();\n\n    // ... Define roles, resources, access, etc\n\n    // Store serialized list into plain file\n    file_put_contents(\n        \"app/security/acl.data\",\n        serialize($acl)\n    );\n} else {\n    // Restore ACL object from serialized file\n    $acl = unserialize(\n        file_get_contents(\"app/security/acl.data\")\n    );\n}\n\n// Use ACL list as needed\nif ($acl->isAllowed(\"Guests\", \"Customers\", \"edit\")) {\n    echo \"Access granted!\";\n} else {\n    echo \"Access denied :(\";\n}\n```\n\nIt’s recommended to use the Memory adapter during development and use one of the other adapters in production.\n\n## ACL Events\n\n[*Phalcon\\Acl*](../api/phalcon_acl) is able to send events to a [*EventsManager*](events) if it’s present. Events are triggered using the type “acl”. Some events when returning boolean false could stop the active operation. The following events are supported:\n\n| Event Name        | Triggered                                               | Can stop operation? |\n|-------------------|---------------------------------------------------------|---------------------|\n| beforeCheckAccess | Triggered before checking if a role/resource has access | Yes                 |\n| afterCheckAccess  | Triggered after checking if a role/resource has access  | No                  |\n\nThe following example demonstrates how to attach listeners to this component:\n\n``` php\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// ...\n\n// Create an event manager\n$eventsManager = new EventsManager();\n\n// Attach a listener for type \"acl\"\n$eventsManager->attach(\n    \"acl:beforeCheckAccess\",\n    function (Event $event, $acl) {\n        echo $acl->getActiveRole();\n\n        echo $acl->getActiveResource();\n\n        echo $acl->getActiveAccess();\n    }\n);\n\n$acl = new AclList();\n\n// Setup the $acl\n// ...\n\n// Bind the eventsManager to the ACL component\n$acl->setEventsManager($eventsManager);\n```\n\n## Implementing your own adapters\n\nThe [*Phalcon\\Acl\\AdapterInterface*](../api/phalcon_acl_adapterinterface) interface must be implemented in order to create your own ACL adapters or extend the existing ones.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/acl.html](https://docs.phalconphp.com/en/latest/reference/acl.html)"
- name: Acl
  id: api/phalcon_acl
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Acl**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl.zep)\n\n## Constants\n\n### *integer* **ALLOW**\n\n### *integer* **DENY**\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl.html)"
- name: Acl::ALLOW
  id: api/phalcon_acl#allow
  summary: null
  belongs_to: Acl
  description: '### *integer* **ALLOW**'
- name: Acl::DENY
  id: api/phalcon_acl#deny
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl
  description: "### *integer* **DENY**\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl.html)"
- name: Acl\Adapter
  id: api/phalcon_acl_adapter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Acl\\Adapter**\n\n*implements* [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/adapter.zep)\n\nAdapter for Phalcon\\Acl adapters\n\n## Methods\n\n### public **getActiveRole** ()\n\nRole which the list is checking if it’s allowed to certain resource/access\n\n### public **getActiveResource** ()\n\nResource which the list is checking if some role can access it\n\n### public **getActiveAccess** ()\n\nActive access which the list is checking if some role can access it\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the events manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **setDefaultAction** (*mixed* $defaultAccess)\n\nSets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)\n\n### public **getDefaultAction** ()\n\nReturns the default ACL access level\n\n### abstract public **setNoArgumentsDefaultAction** (*mixed* $defaultAccess) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **getNoArgumentsDefaultAction** () inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addRole** (*mixed* $role, \\[*mixed* $accessInherits\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addInherit** (*mixed* $roleName, *mixed* $roleToInherit) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **isRole** (*mixed* $roleName) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **isResource** (*mixed* $resourceName) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addResource** (*mixed* $resourceObject, *mixed* $accessList) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addResourceAccess** (*mixed* $resourceName, *mixed* $accessList) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **dropResourceAccess** (*mixed* $resourceName, *mixed* $accessList) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **allow** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **deny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **isAllowed** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*array* $parameters\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **getRoles** () inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **getResources** () inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter.html)"
- name: Acl\Adapter::getActiveAccess
  id: api/phalcon_acl_adapter#getactiveaccess
  summary: null
  belongs_to: Acl\Adapter
  description: |-
    ### public **getActiveAccess** ()

    Active access which the list is checking if some role can access it
- name: Acl\Adapter::getActiveResource
  id: api/phalcon_acl_adapter#getactiveresource
  summary: null
  belongs_to: Acl\Adapter
  description: |-
    ### public **getActiveResource** ()

    Resource which the list is checking if some role can access it
- name: Acl\Adapter::getActiveRole
  id: api/phalcon_acl_adapter#getactiverole
  summary: null
  belongs_to: Acl\Adapter
  description: |-
    ### public **getActiveRole** ()

    Role which the list is checking if it’s allowed to certain resource/access
- name: Acl\Adapter::getDefaultAction
  id: api/phalcon_acl_adapter#getdefaultaction
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\Adapter
  description: "### public **getDefaultAction** ()\n\nReturns the default ACL access level\n\n### abstract public **setNoArgumentsDefaultAction** (*mixed* $defaultAccess) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **getNoArgumentsDefaultAction** () inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addRole** (*mixed* $role, \\[*mixed* $accessInherits\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addInherit** (*mixed* $roleName, *mixed* $roleToInherit) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **isRole** (*mixed* $roleName) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **isResource** (*mixed* $resourceName) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addResource** (*mixed* $resourceObject, *mixed* $accessList) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **addResourceAccess** (*mixed* $resourceName, *mixed* $accessList) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **dropResourceAccess** (*mixed* $resourceName, *mixed* $accessList) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **allow** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **deny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **isAllowed** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*array* $parameters\\]) inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **getRoles** () inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n### abstract public **getResources** () inherited from [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter.html)"
- name: Acl\Adapter::getEventsManager
  id: api/phalcon_acl_adapter#geteventsmanager
  summary: null
  belongs_to: Acl\Adapter
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Acl\Adapter::setDefaultAction
  id: api/phalcon_acl_adapter#setdefaultaction
  summary: null
  belongs_to: Acl\Adapter
  description: |-
    ### public **setDefaultAction** (*mixed* $defaultAccess)

    Sets the default access level (Phalcon\Acl::ALLOW or Phalcon\Acl::DENY)
- name: Acl\Adapter::setEventsManager
  id: api/phalcon_acl_adapter#seteventsmanager
  summary: null
  belongs_to: Acl\Adapter
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the events manager
- name: Acl\AdapterInterface
  id: api/phalcon_acl_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Acl\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/adapterinterface.zep)\n\n## Methods\n\n### abstract public **setDefaultAction** (*mixed* $defaultAccess)\n\n...\n\n### abstract public **getDefaultAction** ()\n\n...\n\n### abstract public **setNoArgumentsDefaultAction** (*mixed* $defaultAccess)\n\n...\n\n### abstract public **getNoArgumentsDefaultAction** ()\n\n...\n\n### abstract public **addRole** (*mixed* $role, \\[*mixed* $accessInherits\\])\n\n...\n\n### abstract public **addInherit** (*mixed* $roleName, *mixed* $roleToInherit)\n\n...\n\n### abstract public **isRole** (*mixed* $roleName)\n\n...\n\n### abstract public **isResource** (*mixed* $resourceName)\n\n...\n\n### abstract public **addResource** (*mixed* $resourceObject, *mixed* $accessList)\n\n...\n\n### abstract public **addResourceAccess** (*mixed* $resourceName, *mixed* $accessList)\n\n...\n\n### abstract public **dropResourceAccess** (*mixed* $resourceName, *mixed* $accessList)\n\n...\n\n### abstract public **allow** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\])\n\n...\n\n### abstract public **deny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\])\n\n...\n\n### abstract public **isAllowed** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*array* $parameters\\])\n\n...\n\n### abstract public **getActiveRole** ()\n\n...\n\n### abstract public **getActiveResource** ()\n\n...\n\n### abstract public **getActiveAccess** ()\n\n...\n\n### abstract public **getRoles** ()\n\n...\n\n### abstract public **getResources** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_AdapterInterface.html)"
- name: Acl\AdapterInterface::addInherit
  id: api/phalcon_acl_adapterinterface#addinherit
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **addInherit** (*mixed* $roleName, *mixed* $roleToInherit)

    ...
- name: Acl\AdapterInterface::addResource
  id: api/phalcon_acl_adapterinterface#addresource
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **addResource** (*mixed* $resourceObject, *mixed* $accessList)

    ...
- name: Acl\AdapterInterface::addResourceAccess
  id: api/phalcon_acl_adapterinterface#addresourceaccess
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **addResourceAccess** (*mixed* $resourceName, *mixed* $accessList)

    ...
- name: Acl\AdapterInterface::addRole
  id: api/phalcon_acl_adapterinterface#addrole
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **addRole** (*mixed* $role, \[*mixed* $accessInherits\])

    ...
- name: Acl\AdapterInterface::allow
  id: api/phalcon_acl_adapterinterface#allow
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **allow** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \[*mixed* $func\])

    ...
- name: Acl\AdapterInterface::deny
  id: api/phalcon_acl_adapterinterface#deny
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **deny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \[*mixed* $func\])

    ...
- name: Acl\AdapterInterface::dropResourceAccess
  id: api/phalcon_acl_adapterinterface#dropresourceaccess
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **dropResourceAccess** (*mixed* $resourceName, *mixed* $accessList)

    ...
- name: Acl\AdapterInterface::getActiveAccess
  id: api/phalcon_acl_adapterinterface#getactiveaccess
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **getActiveAccess** ()

    ...
- name: Acl\AdapterInterface::getActiveResource
  id: api/phalcon_acl_adapterinterface#getactiveresource
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **getActiveResource** ()

    ...
- name: Acl\AdapterInterface::getActiveRole
  id: api/phalcon_acl_adapterinterface#getactiverole
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **getActiveRole** ()

    ...
- name: Acl\AdapterInterface::getDefaultAction
  id: api/phalcon_acl_adapterinterface#getdefaultaction
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **getDefaultAction** ()

    ...
- name: Acl\AdapterInterface::getNoArgumentsDefaultAction
  id: api/phalcon_acl_adapterinterface#getnoargumentsdefaultaction
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **getNoArgumentsDefaultAction** ()

    ...
- name: Acl\AdapterInterface::getResources
  id: api/phalcon_acl_adapterinterface#getresources
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\AdapterInterface
  description: "### abstract public **getResources** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_AdapterInterface.html)"
- name: Acl\AdapterInterface::getRoles
  id: api/phalcon_acl_adapterinterface#getroles
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **getRoles** ()

    ...
- name: Acl\AdapterInterface::isAllowed
  id: api/phalcon_acl_adapterinterface#isallowed
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **isAllowed** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \[*array* $parameters\])

    ...
- name: Acl\AdapterInterface::isResource
  id: api/phalcon_acl_adapterinterface#isresource
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **isResource** (*mixed* $resourceName)

    ...
- name: Acl\AdapterInterface::isRole
  id: api/phalcon_acl_adapterinterface#isrole
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **isRole** (*mixed* $roleName)

    ...
- name: Acl\AdapterInterface::setDefaultAction
  id: api/phalcon_acl_adapterinterface#setdefaultaction
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **setDefaultAction** (*mixed* $defaultAccess)

    ...
- name: Acl\AdapterInterface::setNoArgumentsDefaultAction
  id: api/phalcon_acl_adapterinterface#setnoargumentsdefaultaction
  summary: null
  belongs_to: Acl\AdapterInterface
  description: |-
    ### abstract public **setNoArgumentsDefaultAction** (*mixed* $defaultAccess)

    ...
- name: Acl\Adapter\Memory
  id: api/phalcon_acl_adapter_memory
  summary: Adds a role to the ACL list
  description: "# Class **Phalcon\\Acl\\Adapter\\Memory**\n\n*extends* abstract class [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Acl\\AdapterInterface*](phalcon_acl_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/adapter/memory.zep)\n\nManages ACL lists in memory\n\n``` php\n$acl = new \\Phalcon\\Acl\\Adapter\\Memory();\n\n$acl->setDefaultAction(\n    \\Phalcon\\Acl::DENY\n);\n\n// Register roles\n$roles = [\n    \"users\"  => new \\Phalcon\\Acl\\Role(\"Users\"),\n    \"guests\" => new \\Phalcon\\Acl\\Role(\"Guests\"),\n];\nforeach ($roles as $role) {\n    $acl->addRole($role);\n}\n\n// Private area resources\n$privateResources = [\n    \"companies\" => [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"products\"  => [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"invoices\"  => [\"index\", \"profile\"],\n];\n\nforeach ($privateResources as $resourceName => $actions) {\n    $acl->addResource(\n        new \\Phalcon\\Acl\\Resource($resourceName),\n        $actions\n    );\n}\n\n// Public area resources\n$publicResources = [\n    \"index\"   => [\"index\"],\n    \"about\"   => [\"index\"],\n    \"session\" => [\"index\", \"register\", \"start\", \"end\"],\n    \"contact\" => [\"index\", \"send\"],\n];\n\nforeach ($publicResources as $resourceName => $actions) {\n    $acl->addResource(\n        new \\Phalcon\\Acl\\Resource($resourceName),\n        $actions\n    );\n}\n\n// Grant access to public areas to both users and guests\nforeach ($roles as $role){\n    foreach ($publicResources as $resource => $actions) {\n        $acl->allow($role->getName(), $resource, \"*\");\n    }\n}\n\n// Grant access to private area to role Users\nforeach ($privateResources as $resource => $actions) {\n    foreach ($actions as $action) {\n        $acl->allow(\"Users\", $resource, $action);\n    }\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** ()\n\nPhalcon\\Acl\\Adapter\\Memory constructor\n\n### public **addRole** (*RoleInterface* \\| *string* $role, \\[*array* \\| *string* $accessInherits\\])\n\nAdds a role to the ACL list. Second parameter allows inheriting access data from other existing role Example:\n\n``` php\n$acl->addRole(\n    new Phalcon\\Acl\\Role(\"administrator\"),\n    \"consultant\"\n);\n\n$acl->addRole(\"administrator\", \"consultant\");\n```\n\n### public **addInherit** (*mixed* $roleName, *mixed* $roleToInherit)\n\nDo a role inherit from another existing role\n\n### public **isRole** (*mixed* $roleName)\n\nCheck whether role exist in the roles list\n\n### public **isResource** (*mixed* $resourceName)\n\nCheck whether resource exist in the resources list\n\n### public **addResource** ([*Phalcon\\Acl\\Resource*](phalcon_acl_resource) \\| *string* $resourceValue, *array* \\| *string* $accessList)\n\nAdds a resource to the ACL list Access names can be a particular action, by example search, update, delete, etc or a list of them Example:\n\n``` php\n// Add a resource to the the list allowing access to an action\n$acl->addResource(\n    new Phalcon\\Acl\\Resource(\"customers\"),\n    \"search\"\n);\n\n$acl->addResource(\"customers\", \"search\");\n\n// Add a resource  with an access list\n$acl->addResource(\n    new Phalcon\\Acl\\Resource(\"customers\"),\n    [\n        \"create\",\n        \"search\",\n    ]\n);\n\n$acl->addResource(\n    \"customers\",\n    [\n        \"create\",\n        \"search\",\n    ]\n);\n```\n\n### public **addResourceAccess** (*mixed* $resourceName, *array* \\| *string* $accessList)\n\nAdds access to resources\n\n### public **dropResourceAccess** (*mixed* $resourceName, *array* \\| *string* $accessList)\n\nRemoves an access from a resource\n\n### protected **\\_allowOrDeny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, *mixed* $action, \\[*mixed* $func\\])\n\nChecks if a role has access to a resource\n\n### public **allow** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\])\n\nAllow access to a role on a resource You can use ‘\\*’ as wildcard Example:\n\n``` php\n//Allow access to guests to search on customers\n$acl->allow(\"guests\", \"customers\", \"search\");\n\n//Allow access to guests to search or create on customers\n$acl->allow(\"guests\", \"customers\", [\"search\", \"create\"]);\n\n//Allow access to any role to browse on products\n$acl->allow(\"*\", \"products\", \"browse\");\n\n//Allow access to any role to browse on any resource\n$acl->allow(\"*\", \"*\", \"browse\");\n```\n\n### public **deny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \\[*mixed* $func\\])\n\nDeny access to a role on a resource You can use ‘\\*’ as wildcard Example:\n\n``` php\n//Deny access to guests to search on customers\n$acl->deny(\"guests\", \"customers\", \"search\");\n\n//Deny access to guests to search or create on customers\n$acl->deny(\"guests\", \"customers\", [\"search\", \"create\"]);\n\n//Deny access to any role to browse on products\n$acl->deny(\"*\", \"products\", \"browse\");\n\n//Deny access to any role to browse on any resource\n$acl->deny(\"*\", \"*\", \"browse\");\n```\n\n### public **isAllowed** (*RoleInterface* \\| *RoleAware* \\| *string* $roleName, *ResourceInterface* \\| *ResourceAware* \\| *string* $resourceName, *mixed* $access, \\[*array* $parameters\\])\n\nCheck whether a role is allowed to access an action from a resource\n\n``` php\n//Does andres have access to the customers resource to create?\n$acl->isAllowed(\"andres\", \"Products\", \"create\");\n\n//Do guests have access to any resource to edit?\n$acl->isAllowed(\"guests\", \"*\", \"edit\");\n```\n\n### public **setNoArgumentsDefaultAction** (*mixed* $defaultAccess)\n\nSets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY) for no arguments provided in isAllowed action if there exists func for accessKey\n\n### public **getNoArgumentsDefaultAction** ()\n\nReturns the default ACL access level for no arguments provided in isAllowed action if there exists func for accessKey\n\n### public **getRoles** ()\n\nReturn an array with every role registered in the list\n\n### public **getResources** ()\n\nReturn an array with every resource registered in the list\n\n### public **getActiveRole** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nRole which the list is checking if it’s allowed to certain resource/access\n\n### public **getActiveResource** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nResource which the list is checking if some role can access it\n\n### public **getActiveAccess** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nActive access which the list is checking if some role can access it\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nReturns the internal event manager\n\n### public **setDefaultAction** (*mixed* $defaultAccess) inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nSets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)\n\n### public **getDefaultAction** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nReturns the default ACL access level\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter_Memory.html)"
- name: Acl\Adapter\Memory::addInherit
  id: api/phalcon_acl_adapter_memory#addinherit
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **addInherit** (*mixed* $roleName, *mixed* $roleToInherit)

    Do a role inherit from another existing role
- name: Acl\Adapter\Memory::addResource
  id: api/phalcon_acl_adapter_memory#addresource
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **addResource** ([*Phalcon\Acl\Resource*](phalcon_acl_resource) \| *string* $resourceValue, *array* \| *string* $accessList)

    Adds a resource to the ACL list Access names can be a particular action, by example search, update, delete, etc or a list of them Example:

    ``` php
    // Add a resource to the the list allowing access to an action
    $acl->addResource(
        new Phalcon\Acl\Resource("customers"),
        "search"
    );

    $acl->addResource("customers", "search");

    // Add a resource  with an access list
    $acl->addResource(
        new Phalcon\Acl\Resource("customers"),
        [
            "create",
            "search",
        ]
    );

    $acl->addResource(
        "customers",
        [
            "create",
            "search",
        ]
    );
    ```
- name: Acl\Adapter\Memory::addResourceAccess
  id: api/phalcon_acl_adapter_memory#addresourceaccess
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **addResourceAccess** (*mixed* $resourceName, *array* \| *string* $accessList)

    Adds access to resources
- name: Acl\Adapter\Memory::addRole
  id: api/phalcon_acl_adapter_memory#addrole
  summary: Adds a role to the ACL list
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **addRole** (*RoleInterface* \| *string* $role, \[*array* \| *string* $accessInherits\])

    Adds a role to the ACL list. Second parameter allows inheriting access data from other existing role Example:

    ``` php
    $acl->addRole(
        new Phalcon\Acl\Role("administrator"),
        "consultant"
    );

    $acl->addRole("administrator", "consultant");
    ```
- name: Acl\Adapter\Memory::allow
  id: api/phalcon_acl_adapter_memory#allow
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **allow** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \[*mixed* $func\])

    Allow access to a role on a resource You can use ‘\*’ as wildcard Example:

    ``` php
    //Allow access to guests to search on customers
    $acl->allow("guests", "customers", "search");

    //Allow access to guests to search or create on customers
    $acl->allow("guests", "customers", ["search", "create"]);

    //Allow access to any role to browse on products
    $acl->allow("*", "products", "browse");

    //Allow access to any role to browse on any resource
    $acl->allow("*", "*", "browse");
    ```
- name: Acl\Adapter\Memory::deny
  id: api/phalcon_acl_adapter_memory#deny
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **deny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, \[*mixed* $func\])

    Deny access to a role on a resource You can use ‘\*’ as wildcard Example:

    ``` php
    //Deny access to guests to search on customers
    $acl->deny("guests", "customers", "search");

    //Deny access to guests to search or create on customers
    $acl->deny("guests", "customers", ["search", "create"]);

    //Deny access to any role to browse on products
    $acl->deny("*", "products", "browse");

    //Deny access to any role to browse on any resource
    $acl->deny("*", "*", "browse");
    ```
- name: Acl\Adapter\Memory::dropResourceAccess
  id: api/phalcon_acl_adapter_memory#dropresourceaccess
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **dropResourceAccess** (*mixed* $resourceName, *array* \| *string* $accessList)

    Removes an access from a resource

    ### protected **\_allowOrDeny** (*mixed* $roleName, *mixed* $resourceName, *mixed* $access, *mixed* $action, \[*mixed* $func\])

    Checks if a role has access to a resource
- name: Acl\Adapter\Memory::getNoArgumentsDefaultAction
  id: api/phalcon_acl_adapter_memory#getnoargumentsdefaultaction
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **getNoArgumentsDefaultAction** ()

    Returns the default ACL access level for no arguments provided in isAllowed action if there exists func for accessKey
- name: Acl\Adapter\Memory::getResources
  id: api/phalcon_acl_adapter_memory#getresources
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\Adapter\Memory
  description: "### public **getResources** ()\n\nReturn an array with every resource registered in the list\n\n### public **getActiveRole** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nRole which the list is checking if it’s allowed to certain resource/access\n\n### public **getActiveResource** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nResource which the list is checking if some role can access it\n\n### public **getActiveAccess** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nActive access which the list is checking if some role can access it\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nReturns the internal event manager\n\n### public **setDefaultAction** (*mixed* $defaultAccess) inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nSets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)\n\n### public **getDefaultAction** () inherited from [*Phalcon\\Acl\\Adapter*](phalcon_acl_adapter)\n\nReturns the default ACL access level\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter_Memory.html)"
- name: Acl\Adapter\Memory::getRoles
  id: api/phalcon_acl_adapter_memory#getroles
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **getRoles** ()

    Return an array with every role registered in the list
- name: Acl\Adapter\Memory::isAllowed
  id: api/phalcon_acl_adapter_memory#isallowed
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **isAllowed** (*RoleInterface* \| *RoleAware* \| *string* $roleName, *ResourceInterface* \| *ResourceAware* \| *string* $resourceName, *mixed* $access, \[*array* $parameters\])

    Check whether a role is allowed to access an action from a resource

    ``` php
    //Does andres have access to the customers resource to create?
    $acl->isAllowed("andres", "Products", "create");

    //Do guests have access to any resource to edit?
    $acl->isAllowed("guests", "*", "edit");
    ```
- name: Acl\Adapter\Memory::isResource
  id: api/phalcon_acl_adapter_memory#isresource
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **isResource** (*mixed* $resourceName)

    Check whether resource exist in the resources list
- name: Acl\Adapter\Memory::isRole
  id: api/phalcon_acl_adapter_memory#isrole
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **isRole** (*mixed* $roleName)

    Check whether role exist in the roles list
- name: Acl\Adapter\Memory::setNoArgumentsDefaultAction
  id: api/phalcon_acl_adapter_memory#setnoargumentsdefaultaction
  summary: null
  belongs_to: Acl\Adapter\Memory
  description: |-
    ### public **setNoArgumentsDefaultAction** (*mixed* $defaultAccess)

    Sets the default access level (Phalcon\Acl::ALLOW or Phalcon\Acl::DENY) for no arguments provided in isAllowed action if there exists func for accessKey
- name: Acl\Exception
  id: api/phalcon_acl_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Acl\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Exception.html)"
- name: Acl\Resource
  id: api/phalcon_acl_resource
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Acl\\Resource**\n\n*implements* [*Phalcon\\Acl\\ResourceInterface*](phalcon_acl_resourceinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/resource.zep)\n\nThis class defines resource entity and its description\n\n## Methods\n\n### public **getName** ()\n\nResource name\n\n### public **\\_\\_toString** ()\n\nResource name\n\n### public **getDescription** ()\n\nResource description\n\n### public **\\_\\_construct** (*mixed* $name, \\[*mixed* $description\\])\n\nPhalcon\\Acl\\Resource constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Resource.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Resource.html)"
- name: Acl\Resource::getDescription
  id: api/phalcon_acl_resource#getdescription
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\Resource
  description: "### public **getDescription** ()\n\nResource description\n\n### public **\\_\\_construct** (*mixed* $name, \\[*mixed* $description\\])\n\nPhalcon\\Acl\\Resource constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Resource.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Resource.html)"
- name: Acl\Resource::getName
  id: api/phalcon_acl_resource#getname
  summary: null
  belongs_to: Acl\Resource
  description: |-
    ### public **getName** ()

    Resource name

    ### public **\_\_toString** ()

    Resource name
- name: Acl\ResourceAware
  id: api/phalcon_acl_resourceaware
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Acl\\ResourceAware**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/resourceaware.zep)\n\n## Methods\n\n### abstract public **getResourceName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceAware.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceAware.html)"
- name: Acl\ResourceAware::getResourceName
  id: api/phalcon_acl_resourceaware#getresourcename
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\ResourceAware
  description: "### abstract public **getResourceName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceAware.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceAware.html)"
- name: Acl\ResourceInterface
  id: api/phalcon_acl_resourceinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Acl\\ResourceInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/resourceinterface.zep)\n\n## Methods\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **getDescription** ()\n\n...\n\n### abstract public **\\_\\_toString** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceInterface.html)"
- name: Acl\ResourceInterface::getDescription
  id: api/phalcon_acl_resourceinterface#getdescription
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\ResourceInterface
  description: "### abstract public **getDescription** ()\n\n...\n\n### abstract public **\\_\\_toString** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceInterface.html)"
- name: Acl\ResourceInterface::getName
  id: api/phalcon_acl_resourceinterface#getname
  summary: null
  belongs_to: Acl\ResourceInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Acl\Role
  id: api/phalcon_acl_role
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Acl\\Role**\n\n*implements* [*Phalcon\\Acl\\RoleInterface*](phalcon_acl_roleinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/role.zep)\n\nThis class defines role entity and its description\n\n## Methods\n\n### public **getName** ()\n\nRole name\n\n### public **\\_\\_toString** ()\n\nRole name\n\n### public **getDescription** ()\n\nRole description\n\n### public **\\_\\_construct** (*mixed* $name, \\[*mixed* $description\\])\n\nPhalcon\\Acl\\Role constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Role.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Role.html)"
- name: Acl\Role::getDescription
  id: api/phalcon_acl_role#getdescription
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\Role
  description: "### public **getDescription** ()\n\nRole description\n\n### public **\\_\\_construct** (*mixed* $name, \\[*mixed* $description\\])\n\nPhalcon\\Acl\\Role constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Role.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Role.html)"
- name: Acl\Role::getName
  id: api/phalcon_acl_role#getname
  summary: null
  belongs_to: Acl\Role
  description: |-
    ### public **getName** ()

    Role name

    ### public **\_\_toString** ()

    Role name
- name: Acl\RoleAware
  id: api/phalcon_acl_roleaware
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Acl\\RoleAware**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/roleaware.zep)\n\n## Methods\n\n### abstract public **getRoleName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleAware.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleAware.html)"
- name: Acl\RoleAware::getRoleName
  id: api/phalcon_acl_roleaware#getrolename
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\RoleAware
  description: "### abstract public **getRoleName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleAware.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleAware.html)"
- name: Acl\RoleInterface
  id: api/phalcon_acl_roleinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Acl\\RoleInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/roleinterface.zep)\n\n## Methods\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **getDescription** ()\n\n...\n\n### abstract public **\\_\\_toString** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleInterface.html)"
- name: Acl\RoleInterface::getDescription
  id: api/phalcon_acl_roleinterface#getdescription
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Acl\RoleInterface
  description: "### abstract public **getDescription** ()\n\n...\n\n### abstract public **\\_\\_toString** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleInterface.html)"
- name: Acl\RoleInterface::getName
  id: api/phalcon_acl_roleinterface#getname
  summary: null
  belongs_to: Acl\RoleInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Annotations Parser
  id: reference/annotations
  summary: It is the first time that an annotations parser component is written in C for the PHP world
  description: "# Annotations Parser\n\nIt is the first time that an annotations parser component is written in C for the PHP world. `Phalcon\\Annotations` is a general purpose component that provides ease of parsing and caching annotations in PHP classes to be used in applications.\n\nAnnotations are read from docblocks in classes, methods and properties. An annotation can be placed at any position in the docblock:\n\n``` php\n/**\n * This is the class description\n *\n * @AmazingClass(true)\n */\nclass Example\n{\n    /**\n     * This a property with a special feature\n     *\n     * @SpecialFeature\n     */\n    protected $someProperty;\n\n    /**\n     * This is a method\n     *\n     * @SpecialFeature\n     */\n    public function someMethod()\n    {\n        // ...\n    }\n}\n```\n\nAn annotation has the following syntax:\n\n``` php\n/**\n * @Annotation-Name\n * @Annotation-Name(param1, param2, ...)\n */\n```\n\nAlso, an annotation can be placed at any part of a docblock:\n\n``` php\n/**\n * This a property with a special feature\n *\n * @SpecialFeature\n *\n * More comments\n *\n * @AnotherSpecialFeature(true)\n */\n```\n\nThe parser is highly flexible, the following docblock is valid:\n\n``` php\n/**\n * This a property with a special feature @SpecialFeature({\nsomeParameter=\"the value\", false\n\n })  More comments @AnotherSpecialFeature(true) @MoreAnnotations\n **/\n```\n\nHowever, to make the code more maintainable and understandable it is recommended to place annotations at the end of the docblock:\n\n``` php\n/**\n * This a property with a special feature\n * More comments\n *\n * @SpecialFeature({someParameter=\"the value\", false})\n * @AnotherSpecialFeature(true)\n */\n```\n\n## Reading Annotations\n\nA reflector is implemented to easily get the annotations defined on a class using an object-oriented interface:\n\n``` php\nuse Phalcon\\Annotations\\Adapter\\Memory as MemoryAdapter;\n\n$reader = new MemoryAdapter();\n\n// Reflect the annotations in the class Example\n$reflector = $reader->get(\"Example\");\n\n// Read the annotations in the class' docblock\n$annotations = $reflector->getClassAnnotations();\n\n// Traverse the annotations\nforeach ($annotations as $annotation) {\n    // Print the annotation name\n    echo $annotation->getName(), PHP_EOL;\n\n    // Print the number of arguments\n    echo $annotation->numberArguments(), PHP_EOL;\n\n    // Print the arguments\n    print_r($annotation->getArguments());\n}\n```\n\nThe annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.\n\n[*Phalcon\\Annotations\\Adapter\\Memory*](../api/phalcon_annotations_adapter_memory) was used in the above example. This adapter only caches the annotations while the request is running and for this reason the adapter is more suitable for development. There are other adapters to swap out when the application is in production stage.\n\n## Types of Annotations\n\nAnnotations may have parameters or not. A parameter could be a simple literal (strings, number, boolean, null), an array, a hashed list or other annotation:\n\n``` php\n/**\n * Simple Annotation\n *\n * @SomeAnnotation\n */\n\n/**\n * Annotation with parameters\n *\n * @SomeAnnotation(\"hello\", \"world\", 1, 2, 3, false, true)\n */\n\n/**\n * Annotation with named parameters\n *\n * @SomeAnnotation(first=\"hello\", second=\"world\", third=1)\n * @SomeAnnotation(first: \"hello\", second: \"world\", third: 1)\n */\n\n/**\n * Passing an array\n *\n * @SomeAnnotation([1, 2, 3, 4])\n * @SomeAnnotation({1, 2, 3, 4})\n */\n\n/**\n * Passing a hash as parameter\n *\n * @SomeAnnotation({first=1, second=2, third=3})\n * @SomeAnnotation({'first'=1, 'second'=2, 'third'=3})\n * @SomeAnnotation({'first': 1, 'second': 2, 'third': 3})\n * @SomeAnnotation(['first': 1, 'second': 2, 'third': 3])\n */\n\n/**\n * Nested arrays/hashes\n *\n * @SomeAnnotation({\"name\"=\"SomeName\", \"other\"={\n *     \"foo1\": \"bar1\", \"foo2\": \"bar2\", {1, 2, 3},\n * }})\n */\n\n/**\n * Nested Annotations\n *\n * @SomeAnnotation([email protected](1, 2, 3))\n */\n```\n\n## Practical Usage\n\nNext we will explain some practical examples of annotations in PHP applications:\n\n### Cache Enabler with Annotations\n\nLet’s pretend we’ve created the following controller and you want to create a plugin that automatically starts the cache if the last action executed is marked as cacheable. First off all, we register a plugin in the Dispatcher service to be notified when a route is executed:\n\n``` php\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di[\"dispatcher\"] = function () {\n    $eventsManager = new EventsManager();\n\n    // Attach the plugin to 'dispatch' events\n    $eventsManager->attach(\n        \"dispatch\",\n        new CacheEnablerPlugin()\n    );\n\n    $dispatcher = new MvcDispatcher();\n\n    $dispatcher->setEventsManager($eventsManager);\n\n    return $dispatcher;\n};\n```\n\nCacheEnablerPlugin is a plugin that intercepts every action executed in the dispatcher enabling the cache if needed:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\User\\Plugin;\n\n/**\n * Enables the cache for a view if the latest\n * executed action has the annotation @Cache\n */\nclass CacheEnablerPlugin extends Plugin\n{\n    /**\n     * This event is executed before every route is executed in the dispatcher\n     */\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // Parse the annotations in the method currently executed\n        $annotations = $this->annotations->getMethod(\n            $dispatcher->getControllerClass(),\n            $dispatcher->getActiveMethod()\n        );\n\n        // Check if the method has an annotation 'Cache'\n        if ($annotations->has(\"Cache\")) {\n            // The method has the annotation 'Cache'\n            $annotation = $annotations->get(\"Cache\");\n\n            // Get the lifetime\n            $lifetime = $annotation->getNamedParameter(\"lifetime\");\n\n            $options = [\n                \"lifetime\" => $lifetime,\n            ];\n\n            // Check if there is a user defined cache key\n            if ($annotation->hasNamedParameter(\"key\")) {\n                $options[\"key\"] = $annotation->getNamedParameter(\"key\");\n            }\n\n            // Enable the cache for the current method\n            $this->view->cache($options);\n        }\n    }\n}\n```\n\nNow, we can use the annotation in a controller:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass NewsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    /**\n     * This is a comment\n     *\n     * @Cache(lifetime=86400)\n     */\n    public function showAllAction()\n    {\n        $this->view->article = Articles::find();\n    }\n\n    /**\n     * This is a comment\n     *\n     * @Cache(key=\"my-key\", lifetime=86400)\n     */\n    public function showAction($slug)\n    {\n        $this->view->article = Articles::findFirstByTitle($slug);\n    }\n}\n```\n\n### Private/Public areas with Annotations\n\nYou can use annotations to tell the ACL which controllers belong to the administrative areas:\n\n``` php\nuse Phalcon\\Acl;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Resource;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n/**\n * This is the security plugin which controls that users only have access to the modules they're assigned to\n */\nclass SecurityAnnotationsPlugin extends Plugin\n{\n    /**\n     * This action is executed before execute any action in the application\n     *\n     * @param Event $event\n     * @param Dispatcher $dispatcher\n     */\n    public function beforeDispatch(Event $event, Dispatcher $dispatcher)\n    {\n        // Possible controller class name\n        $controllerName = $dispatcher->getControllerClass();\n\n        // Possible method name\n        $actionName = $dispatcher->getActiveMethod();\n\n        // Get annotations in the controller class\n        $annotations = $this->annotations->get($controllerName);\n\n        // The controller is private?\n        if ($annotations->getClassAnnotations()->has(\"Private\")) {\n            // Check if the session variable is active?\n            if (!$this->session->get(\"auth\")) {\n\n                // The user is no logged redirect to login\n                $dispatcher->forward(\n                    [\n                        \"controller\" => \"session\",\n                        \"action\"     => \"login\",\n                    ]\n                );\n\n                return false;\n            }\n        }\n\n        // Continue normally\n        return true;\n    }\n}\n```\n\n## Annotations Adapters\n\nThis component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development/testing:\n\n| Class                                                                             | Description                                                                                                                                                                       |\n|-----------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [*Phalcon\\Annotations\\Adapter\\Memory*](../api/phalcon_annotations_adapter_memory) | The annotations are cached only in memory. When the request ends the cache is cleaned reloading the annotations in each request. This adapter is suitable for a development stage |\n| [*Phalcon\\Annotations\\Adapter\\Files*](../api/phalcon_annotations_adapter_files)   | Parsed and processed annotations are stored permanently in PHP files improving performance. This adapter must be used together with a bytecode cache.                             |\n| [*Phalcon\\Annotations\\Adapter\\Apc*](../api/phalcon_annotations_adapter_apc)       | Parsed and processed annotations are stored permanently in the APC cache improving performance. This is the faster adapter                                                        |\n| [*Phalcon\\Annotations\\Adapter\\Xcache*](../api/phalcon_annotations_adapter_xcache) | Parsed and processed annotations are stored permanently in the XCache cache improving performance. This is a fast adapter too                                                     |\n\n### Implementing your own adapters\n\nThe [*Phalcon\\Annotations\\AdapterInterface*](../api/phalcon_annotations_adapterinterface) interface must be implemented in order to create your own annotations adapters or extend the existing ones.\n\n## External Resources\n\n- [Tutorial: Creating a custom model’s initializer with Annotations](https://blog.phalconphp.com/post/tutorial-creating-a-custom-models-initializer)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/annotations.html](https://docs.phalconphp.com/en/latest/reference/annotations.html)"
- name: Annotations\Adapter
  id: api/phalcon_annotations_adapter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Annotations\\Adapter**\n\n*implements* [*Phalcon\\Annotations\\AdapterInterface*](phalcon_annotations_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter.zep)\n\nThis is the base class for Phalcon\\Annotations adapters\n\n## Methods\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader)\n\nSets the annotations parser\n\n### public **getReader** ()\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter.html)"
- name: Annotations\Adapter::get
  id: api/phalcon_annotations_adapter#get
  summary: null
  belongs_to: Annotations\Adapter
  description: |-
    ### public **get** (*string* \| *object* $className)

    Parses or retrieves all the annotations found in a class
- name: Annotations\Adapter::getMethod
  id: api/phalcon_annotations_adapter#getmethod
  summary: null
  belongs_to: Annotations\Adapter
  description: |-
    ### public **getMethod** (*mixed* $className, *mixed* $methodName)

    Returns the annotations found in a specific method
- name: Annotations\Adapter::getMethods
  id: api/phalcon_annotations_adapter#getmethods
  summary: null
  belongs_to: Annotations\Adapter
  description: |-
    ### public **getMethods** (*mixed* $className)

    Returns the annotations found in all the class’ methods
- name: Annotations\Adapter::getProperties
  id: api/phalcon_annotations_adapter#getproperties
  summary: null
  belongs_to: Annotations\Adapter
  description: |-
    ### public **getProperties** (*mixed* $className)

    Returns the annotations found in all the class’ methods
- name: Annotations\Adapter::getProperty
  id: api/phalcon_annotations_adapter#getproperty
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Adapter
  description: "### public **getProperty** (*mixed* $className, *mixed* $propertyName)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter.html)"
- name: Annotations\Adapter::getReader
  id: api/phalcon_annotations_adapter#getreader
  summary: null
  belongs_to: Annotations\Adapter
  description: |-
    ### public **getReader** ()

    Returns the annotation reader
- name: Annotations\Adapter::setReader
  id: api/phalcon_annotations_adapter#setreader
  summary: null
  belongs_to: Annotations\Adapter
  description: |-
    ### public **setReader** ([*Phalcon\Annotations\ReaderInterface*](phalcon_annotations_readerinterface) $reader)

    Sets the annotations parser
- name: Annotations\AdapterInterface
  id: api/phalcon_annotations_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Annotations\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapterinterface.zep)\n\n## Methods\n\n### abstract public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader)\n\n...\n\n### abstract public **getReader** ()\n\n...\n\n### abstract public **get** (*mixed* $className)\n\n...\n\n### abstract public **getMethods** (*mixed* $className)\n\n...\n\n### abstract public **getMethod** (*mixed* $className, *mixed* $methodName)\n\n...\n\n### abstract public **getProperties** (*mixed* $className)\n\n...\n\n### abstract public **getProperty** (*mixed* $className, *mixed* $propertyName)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_AdapterInterface.html)"
- name: Annotations\AdapterInterface::get
  id: api/phalcon_annotations_adapterinterface#get
  summary: null
  belongs_to: Annotations\AdapterInterface
  description: |-
    ### abstract public **get** (*mixed* $className)

    ...
- name: Annotations\AdapterInterface::getMethod
  id: api/phalcon_annotations_adapterinterface#getmethod
  summary: null
  belongs_to: Annotations\AdapterInterface
  description: |-
    ### abstract public **getMethod** (*mixed* $className, *mixed* $methodName)

    ...
- name: Annotations\AdapterInterface::getMethods
  id: api/phalcon_annotations_adapterinterface#getmethods
  summary: null
  belongs_to: Annotations\AdapterInterface
  description: |-
    ### abstract public **getMethods** (*mixed* $className)

    ...
- name: Annotations\AdapterInterface::getProperties
  id: api/phalcon_annotations_adapterinterface#getproperties
  summary: null
  belongs_to: Annotations\AdapterInterface
  description: |-
    ### abstract public **getProperties** (*mixed* $className)

    ...
- name: Annotations\AdapterInterface::getProperty
  id: api/phalcon_annotations_adapterinterface#getproperty
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\AdapterInterface
  description: "### abstract public **getProperty** (*mixed* $className, *mixed* $propertyName)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_AdapterInterface.html)"
- name: Annotations\AdapterInterface::getReader
  id: api/phalcon_annotations_adapterinterface#getreader
  summary: null
  belongs_to: Annotations\AdapterInterface
  description: |-
    ### abstract public **getReader** ()

    ...
- name: Annotations\AdapterInterface::setReader
  id: api/phalcon_annotations_adapterinterface#setreader
  summary: null
  belongs_to: Annotations\AdapterInterface
  description: |-
    ### abstract public **setReader** ([*Phalcon\Annotations\ReaderInterface*](phalcon_annotations_readerinterface) $reader)

    ...
- name: Annotations\Adapter\Apc
  id: api/phalcon_annotations_adapter_apc
  summary: Stores the parsed annotations in APC
  description: "# Class **Phalcon\\Annotations\\Adapter\\Apc**\n\n*extends* abstract class [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\n*implements* [*Phalcon\\Annotations\\AdapterInterface*](phalcon_annotations_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/apc.zep)\n\nStores the parsed annotations in APC. This adapter is suitable for production\n\n``` php\nuse Phalcon\\Annotations\\Adapter\\Apc;\n\n$annotations = new Apc();\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Annotations\\Adapter\\Apc constructor\n\n### public **read** (*mixed* $key)\n\nReads parsed annotations from APC\n\n### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to APC\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Apc.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Apc.html)"
- name: Annotations\Adapter\Apc::read
  id: api/phalcon_annotations_adapter_apc#read
  summary: null
  belongs_to: Annotations\Adapter\Apc
  description: |-
    ### public **read** (*mixed* $key)

    Reads parsed annotations from APC
- name: Annotations\Adapter\Apc::write
  id: api/phalcon_annotations_adapter_apc#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Adapter\Apc
  description: "### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to APC\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Apc.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Apc.html)"
- name: Annotations\Adapter\Files
  id: api/phalcon_annotations_adapter_files
  summary: Stores the parsed annotations in files
  description: "# Class **Phalcon\\Annotations\\Adapter\\Files**\n\n*extends* abstract class [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\n*implements* [*Phalcon\\Annotations\\AdapterInterface*](phalcon_annotations_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/files.zep)\n\nStores the parsed annotations in files. This adapter is suitable for production\n\n``` php\nuse Phalcon\\Annotations\\Adapter\\Files;\n\n$annotations = new Files(\n    [\n        \"annotationsDir\" => \"app/cache/annotations/\",\n    ]\n);\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Annotations\\Adapter\\Files constructor\n\n### public [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) **read** (*string* $key)\n\nReads parsed annotations from files\n\n### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to files\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Files.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Files.html)"
- name: Annotations\Adapter\Files::read
  id: api/phalcon_annotations_adapter_files#read
  summary: null
  belongs_to: Annotations\Adapter\Files
  description: |-
    ### public [*Phalcon\Annotations\Reflection*](phalcon_annotations_reflection) **read** (*string* $key)

    Reads parsed annotations from files
- name: Annotations\Adapter\Files::write
  id: api/phalcon_annotations_adapter_files#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Adapter\Files
  description: "### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to files\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Files.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Files.html)"
- name: Annotations\Adapter\Memory
  id: api/phalcon_annotations_adapter_memory
  summary: Stores the parsed annotations in memory
  description: "# Class **Phalcon\\Annotations\\Adapter\\Memory**\n\n*extends* abstract class [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\n*implements* [*Phalcon\\Annotations\\AdapterInterface*](phalcon_annotations_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/memory.zep)\n\nStores the parsed annotations in memory. This adapter is the suitable development/testing\n\n## Methods\n\n### public **read** (*mixed* $key)\n\nReads parsed annotations from memory\n\n### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to memory\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Memory.html)"
- name: Annotations\Adapter\Memory::read
  id: api/phalcon_annotations_adapter_memory#read
  summary: null
  belongs_to: Annotations\Adapter\Memory
  description: |-
    ### public **read** (*mixed* $key)

    Reads parsed annotations from memory
- name: Annotations\Adapter\Memory::write
  id: api/phalcon_annotations_adapter_memory#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Adapter\Memory
  description: "### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to memory\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Memory.html)"
- name: Annotations\Adapter\Xcache
  id: api/phalcon_annotations_adapter_xcache
  summary: Stores the parsed annotations to XCache
  description: "# Class **Phalcon\\Annotations\\Adapter\\Xcache**\n\n*extends* abstract class [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\n*implements* [*Phalcon\\Annotations\\AdapterInterface*](phalcon_annotations_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/xcache.zep)\n\nStores the parsed annotations to XCache. This adapter is suitable for production\n\n``` php\n$annotations = new \\Phalcon\\Annotations\\Adapter\\Xcache();\n```\n\n## Methods\n\n### public [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) **read** (*string* $key)\n\nReads parsed annotations from XCache\n\n### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to XCache\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Xcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Xcache.html)"
- name: Annotations\Adapter\Xcache::read
  id: api/phalcon_annotations_adapter_xcache#read
  summary: null
  belongs_to: Annotations\Adapter\Xcache
  description: |-
    ### public [*Phalcon\Annotations\Reflection*](phalcon_annotations_reflection) **read** (*string* $key)

    Reads parsed annotations from XCache
- name: Annotations\Adapter\Xcache::write
  id: api/phalcon_annotations_adapter_xcache#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Adapter\Xcache
  description: "### public **write** (*mixed* $key, [*Phalcon\\Annotations\\Reflection*](phalcon_annotations_reflection) $data)\n\nWrites parsed annotations to XCache\n\n### public **setReader** ([*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface) $reader) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nSets the annotations parser\n\n### public **getReader** () inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotation reader\n\n### public **get** (*string* \\| *object* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nParses or retrieves all the annotations found in a class\n\n### public **getMethods** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getMethod** (*mixed* $className, *mixed* $methodName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific method\n\n### public **getProperties** (*mixed* $className) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in all the class’ methods\n\n### public **getProperty** (*mixed* $className, *mixed* $propertyName) inherited from [*Phalcon\\Annotations\\Adapter*](phalcon_annotations_adapter)\n\nReturns the annotations found in a specific property\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Xcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Xcache.html)"
- name: Annotations\Annotation
  id: api/phalcon_annotations_annotation
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Annotations\\Annotation**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/annotation.zep)\n\nRepresents a single annotation in an annotations collection\n\n## Methods\n\n### public **\\_\\_construct** (*array* $reflectionData)\n\nPhalcon\\Annotations\\Annotation constructor\n\n### public **getName** ()\n\nReturns the annotation’s name\n\n### public *mixed* **getExpression** (*array* $expr)\n\nResolves an annotation expression\n\n### public *array* **getExprArguments** ()\n\nReturns the expression arguments without resolving\n\n### public *array* **getArguments** ()\n\nReturns the expression arguments\n\n### public **numberArguments** ()\n\nReturns the number of arguments that the annotation has\n\n### public *mixed* **getArgument** (*int* \\| *string* $position)\n\nReturns an argument in a specific position\n\n### public *boolean* **hasArgument** (*int* \\| *string* $position)\n\nReturns an argument in a specific position\n\n### public *mixed* **getNamedArgument** (*mixed* $name)\n\nReturns a named argument\n\n### public *mixed* **getNamedParameter** (*mixed* $name)\n\nReturns a named parameter\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Annotation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Annotation.html)"
- name: Annotations\Annotation::getArgument
  id: api/phalcon_annotations_annotation#getargument
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public *mixed* **getArgument** (*int* \| *string* $position)

    Returns an argument in a specific position
- name: Annotations\Annotation::getArguments
  id: api/phalcon_annotations_annotation#getarguments
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public *array* **getArguments** ()

    Returns the expression arguments
- name: Annotations\Annotation::getExprArguments
  id: api/phalcon_annotations_annotation#getexprarguments
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public *array* **getExprArguments** ()

    Returns the expression arguments without resolving
- name: Annotations\Annotation::getExpression
  id: api/phalcon_annotations_annotation#getexpression
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public *mixed* **getExpression** (*array* $expr)

    Resolves an annotation expression
- name: Annotations\Annotation::getName
  id: api/phalcon_annotations_annotation#getname
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public **getName** ()

    Returns the annotation’s name
- name: Annotations\Annotation::getNamedArgument
  id: api/phalcon_annotations_annotation#getnamedargument
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public *mixed* **getNamedArgument** (*mixed* $name)

    Returns a named argument
- name: Annotations\Annotation::getNamedParameter
  id: api/phalcon_annotations_annotation#getnamedparameter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Annotation
  description: "### public *mixed* **getNamedParameter** (*mixed* $name)\n\nReturns a named parameter\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Annotation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Annotation.html)"
- name: Annotations\Annotation::hasArgument
  id: api/phalcon_annotations_annotation#hasargument
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public *boolean* **hasArgument** (*int* \| *string* $position)

    Returns an argument in a specific position
- name: Annotations\Annotation::numberArguments
  id: api/phalcon_annotations_annotation#numberarguments
  summary: null
  belongs_to: Annotations\Annotation
  description: |-
    ### public **numberArguments** ()

    Returns the number of arguments that the annotation has
- name: Annotations\Collection
  id: api/phalcon_annotations_collection
  summary: Represents a collection of annotations
  description: "# Class **Phalcon\\Annotations\\Collection**\n\n*implements* [Iterator](http://php.net/manual/en/class.iterator.php), [Traversable](http://php.net/manual/en/class.traversable.php), [Countable](http://php.net/manual/en/class.countable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/collection.zep)\n\nRepresents a collection of annotations. This class allows to traverse a group of annotations easily\n\n``` php\n//Traverse annotations\nforeach ($classAnnotations as $annotation) {\n    echo \"Name=\", $annotation->getName(), PHP_EOL;\n}\n\n//Check if the annotations has a specific\nvar_dump($classAnnotations->has(\"Cacheable\"));\n\n//Get an specific annotation in the collection\n$annotation = $classAnnotations->get(\"Cacheable\");\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $reflectionData\\])\n\nPhalcon\\Annotations\\Collection constructor\n\n### public **count** ()\n\nReturns the number of annotations in the collection\n\n### public **rewind** ()\n\nRewinds the internal iterator\n\n### public [*Phalcon\\Annotations\\Annotation*](phalcon_annotations_annotation) **current** ()\n\nReturns the current annotation in the iterator\n\n### public **key** ()\n\nReturns the current position/key in the iterator\n\n### public **next** ()\n\nMoves the internal iteration pointer to the next position\n\n### public **valid** ()\n\nCheck if the current annotation in the iterator is valid\n\n### public **getAnnotations** ()\n\nReturns the internal annotations as an array\n\n### public **get** (*mixed* $name)\n\nReturns the first annotation that match a name\n\n### public **getAll** (*mixed* $name)\n\nReturns all the annotations that match a name\n\n### public **has** (*mixed* $name)\n\nCheck if an annotation exists in a collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Collection.html)"
- name: Annotations\Collection::count
  id: api/phalcon_annotations_collection#count
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **count** ()

    Returns the number of annotations in the collection
- name: Annotations\Collection::current
  id: api/phalcon_annotations_collection#current
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public [*Phalcon\Annotations\Annotation*](phalcon_annotations_annotation) **current** ()

    Returns the current annotation in the iterator
- name: Annotations\Collection::get
  id: api/phalcon_annotations_collection#get
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **get** (*mixed* $name)

    Returns the first annotation that match a name
- name: Annotations\Collection::getAll
  id: api/phalcon_annotations_collection#getall
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **getAll** (*mixed* $name)

    Returns all the annotations that match a name
- name: Annotations\Collection::getAnnotations
  id: api/phalcon_annotations_collection#getannotations
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **getAnnotations** ()

    Returns the internal annotations as an array
- name: Annotations\Collection::has
  id: api/phalcon_annotations_collection#has
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Collection
  description: "### public **has** (*mixed* $name)\n\nCheck if an annotation exists in a collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Collection.html)"
- name: Annotations\Collection::key
  id: api/phalcon_annotations_collection#key
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **key** ()

    Returns the current position/key in the iterator
- name: Annotations\Collection::next
  id: api/phalcon_annotations_collection#next
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **next** ()

    Moves the internal iteration pointer to the next position
- name: Annotations\Collection::rewind
  id: api/phalcon_annotations_collection#rewind
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **rewind** ()

    Rewinds the internal iterator
- name: Annotations\Collection::valid
  id: api/phalcon_annotations_collection#valid
  summary: null
  belongs_to: Annotations\Collection
  description: |-
    ### public **valid** ()

    Check if the current annotation in the iterator is valid
- name: Annotations\Exception
  id: api/phalcon_annotations_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Annotations\\Exception**\n\n*extends* class [Exception](http://php.net/manual/en/class.exception.php)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Exception.html)"
- name: Annotations\Reader
  id: api/phalcon_annotations_reader
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Annotations\\Reader**\n\n*implements* [*Phalcon\\Annotations\\ReaderInterface*](phalcon_annotations_readerinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/reader.zep)\n\nParses docblocks returning an array with the found annotations\n\n## Methods\n\n### public **parse** (*mixed* $className)\n\nReads annotations from the class dockblocks, its methods and/or properties\n\n### public static **parseDocBlock** (*mixed* $docBlock, \\[*mixed* $file\\], \\[*mixed* $line\\])\n\nParses a raw doc block returning the annotations found\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reader.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reader.html)"
- name: Annotations\Reader::parse
  id: api/phalcon_annotations_reader#parse
  summary: null
  belongs_to: Annotations\Reader
  description: |-
    ### public **parse** (*mixed* $className)

    Reads annotations from the class dockblocks, its methods and/or properties
- name: Annotations\Reader::parseDocBlock
  id: api/phalcon_annotations_reader#parsedocblock
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Reader
  description: "### public static **parseDocBlock** (*mixed* $docBlock, \\[*mixed* $file\\], \\[*mixed* $line\\])\n\nParses a raw doc block returning the annotations found\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reader.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reader.html)"
- name: Annotations\ReaderInterface
  id: api/phalcon_annotations_readerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Annotations\\ReaderInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/readerinterface.zep)\n\n## Methods\n\n### abstract public **parse** (*mixed* $className)\n\n...\n\n### abstract public static **parseDocBlock** (*mixed* $docBlock, \\[*mixed* $file\\], \\[*mixed* $line\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_ReaderInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_ReaderInterface.html)"
- name: Annotations\ReaderInterface::parse
  id: api/phalcon_annotations_readerinterface#parse
  summary: null
  belongs_to: Annotations\ReaderInterface
  description: |-
    ### abstract public **parse** (*mixed* $className)

    ...
- name: Annotations\ReaderInterface::parseDocBlock
  id: api/phalcon_annotations_readerinterface#parsedocblock
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\ReaderInterface
  description: "### abstract public static **parseDocBlock** (*mixed* $docBlock, \\[*mixed* $file\\], \\[*mixed* $line\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_ReaderInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_ReaderInterface.html)"
- name: Annotations\Reflection
  id: api/phalcon_annotations_reflection
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Annotations\\Reflection**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/reflection.zep)\n\nAllows to manipulate the annotations reflection in an OO manner\n\n``` php\nuse Phalcon\\Annotations\\Reader;\nuse Phalcon\\Annotations\\Reflection;\n\n// Parse the annotations in a class\n$reader = new Reader();\n$parsing = $reader->parse(\"MyComponent\");\n\n// Create the reflection\n$reflection = new Reflection($parsing);\n\n// Get the annotations in the class docblock\n$classAnnotations = $reflection->getClassAnnotations();\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $reflectionData\\])\n\nPhalcon\\Annotations\\Reflection constructor\n\n### public **getClassAnnotations** ()\n\nReturns the annotations found in the class docblock\n\n### public **getMethodsAnnotations** ()\n\nReturns the annotations found in the methods’ docblocks\n\n### public **getPropertiesAnnotations** ()\n\nReturns the annotations found in the properties’ docblocks\n\n### public *array* **getReflectionData** ()\n\nReturns the raw parsing intermediate definitions used to construct the reflection\n\n### public static *array data* **\\_\\_set_state** (*mixed* $data)\n\nRestores the state of a Phalcon\\Annotations\\Reflection variable export\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reflection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reflection.html)"
- name: Annotations\Reflection::getClassAnnotations
  id: api/phalcon_annotations_reflection#getclassannotations
  summary: null
  belongs_to: Annotations\Reflection
  description: |-
    ### public **getClassAnnotations** ()

    Returns the annotations found in the class docblock
- name: Annotations\Reflection::getMethodsAnnotations
  id: api/phalcon_annotations_reflection#getmethodsannotations
  summary: null
  belongs_to: Annotations\Reflection
  description: |-
    ### public **getMethodsAnnotations** ()

    Returns the annotations found in the methods’ docblocks
- name: Annotations\Reflection::getPropertiesAnnotations
  id: api/phalcon_annotations_reflection#getpropertiesannotations
  summary: null
  belongs_to: Annotations\Reflection
  description: |-
    ### public **getPropertiesAnnotations** ()

    Returns the annotations found in the properties’ docblocks
- name: Annotations\Reflection::getReflectionData
  id: api/phalcon_annotations_reflection#getreflectiondata
  summary: null
  belongs_to: Annotations\Reflection
  description: |-
    ### public *array* **getReflectionData** ()

    Returns the raw parsing intermediate definitions used to construct the reflection
- name: Annotations\Reflection::__set_state
  id: api/phalcon_annotations_reflection#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Annotations\Reflection
  description: "### public static *array data* **\\_\\_set_state** (*mixed* $data)\n\nRestores the state of a Phalcon\\Annotations\\Reflection variable export\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reflection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reflection.html)"
- name: Apache Installation Notes
  id: reference/apache
  summary: Apache is a popular and well known web server available on many platforms
  description: "# Apache Installation Notes\n\n[Apache](http://httpd.apache.org/) is a popular and well known web server available on many platforms.\n\n## Configuring Apache for Phalcon\n\nThe following are potential configurations you can use to setup Apache with Phalcon. These notes are primarily focused on the configuration of the mod_rewrite module allowing to use friendly URLs and the [*router component*](routing). Commonly an application has the following structure:\n\n``` php\ntest/\n  app/\n    controllers/\n    models/\n    views/\n  public/\n    css/\n    img/\n    js/\n    index.php\n```\n\n### Directory under the main Document Root\n\nThis being the most common case, the application is installed in any directory under the document root. In this case, we use two .htaccess files, the first one to hide the application code forwarding all requests to the application’s document root (public/).\n\n``` apacheconf\n# test/.htaccess\n\n<IfModule mod_rewrite.c>\n    RewriteEngine on\n    RewriteRule  ^$ public/    [L]\n    RewriteRule  ((?s).*) public/$1 [L]\n</IfModule>\n```\n\nNow a second .htaccess file is located in the public/ directory, this re-writes all the URIs to the public/index.php file:\n\n``` apacheconf\n# test/public/.htaccess\n\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n</IfModule>\n```\n\nIf you do not want to use .htaccess files you can move these configurations to the apache’s main configuration file:\n\n``` apacheconf\n<IfModule mod_rewrite.c>\n\n    <Directory \"/var/www/test\">\n        RewriteEngine on\n        RewriteRule  ^$ public/    [L]\n        RewriteRule  ((?s).*) public/$1 [L]\n    </Directory>\n\n    <Directory \"/var/www/test/public\">\n        RewriteEngine On\n        RewriteCond %{REQUEST_FILENAME} !-d\n        RewriteCond %{REQUEST_FILENAME} !-f\n        RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n    </Directory>\n\n</IfModule>\n```\n\n### Virtual Hosts\n\nAnd this second configuration allows you to install a Phalcon application in a virtual host:\n\n``` apacheconf\n<VirtualHost *:80>\n\n    ServerAdmin [email protected]\n    DocumentRoot \"/var/vhosts/test/public\"\n    DirectoryIndex index.php\n    ServerName example.host\n    ServerAlias www.example.host\n\n    <Directory \"/var/vhosts/test/public\">\n        Options All\n        AllowOverride All\n        Allow from all\n    </Directory>\n\n</VirtualHost>\n```\n\nOr if you are using Apache 2.4 or above:\n\n``` apacheconf\n<VirtualHost *:80>\n\n    ServerAdmin [email protected]\n    DocumentRoot \"/var/vhosts/test/public\"\n    DirectoryIndex index.php\n    ServerName example.host\n    ServerAlias www.example.host\n\n    <Directory \"/var/vhosts/test/public\">\n        Options All\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n</VirtualHost>\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/apache.html](https://docs.phalconphp.com/en/latest/reference/apache.html)"
- name: Application
  id: api/phalcon_application
  summary: Base class for Phalcon\Cli\Console and Phalcon\Mvc\Application
  description: "# Abstract class **Phalcon\\Application**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/application.zep)\n\nBase class for Phalcon\\Cli\\Console and Phalcon\\Mvc\\Application.\n\n## Methods\n\n### public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the events manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **registerModules** (*array* $modules, \\[*mixed* $merge\\])\n\nRegister an array of modules present in the application\n\n``` php\n$this->registerModules(\n    [\n        \"frontend\" => [\n            \"className\" => \"Multiple\\\\Frontend\\\\Module\",\n            \"path\"      => \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" => [\n            \"className\" => \"Multiple\\\\Backend\\\\Module\",\n            \"path\"      => \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n```\n\n### public **getModules** ()\n\nReturn the modules registered in the application\n\n### public **getModule** (*mixed* $name)\n\nGets the module definition registered in the application via module name\n\n### public **setDefaultModule** (*mixed* $defaultModule)\n\nSets the module name to be used if the router doesn’t return a valid module\n\n### public **getDefaultModule** ()\n\nReturns the default module name\n\n### abstract public **handle** ()\n\nHandles a request\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Application.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Application.html)"
- name: Application::getDefaultModule
  id: api/phalcon_application#getdefaultmodule
  summary: null
  belongs_to: Application
  description: |-
    ### public **getDefaultModule** ()

    Returns the default module name
- name: Application::getEventsManager
  id: api/phalcon_application#geteventsmanager
  summary: null
  belongs_to: Application
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Application::getModule
  id: api/phalcon_application#getmodule
  summary: null
  belongs_to: Application
  description: |-
    ### public **getModule** (*mixed* $name)

    Gets the module definition registered in the application via module name
- name: Application::getModules
  id: api/phalcon_application#getmodules
  summary: null
  belongs_to: Application
  description: |-
    ### public **getModules** ()

    Return the modules registered in the application
- name: Application::handle
  id: api/phalcon_application#handle
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Application
  description: "### abstract public **handle** ()\n\nHandles a request\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Application.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Application.html)"
- name: Application::registerModules
  id: api/phalcon_application#registermodules
  summary: null
  belongs_to: Application
  description: |-
    ### public **registerModules** (*array* $modules, \[*mixed* $merge\])

    Register an array of modules present in the application

    ``` php
    $this->registerModules(
        [
            "frontend" => [
                "className" => "Multiple\\Frontend\\Module",
                "path"      => "../apps/frontend/Module.php",
            ],
            "backend" => [
                "className" => "Multiple\\Backend\\Module",
                "path"      => "../apps/backend/Module.php",
            ],
        ]
    );
    ```
- name: Application::setDefaultModule
  id: api/phalcon_application#setdefaultmodule
  summary: null
  belongs_to: Application
  description: |-
    ### public **setDefaultModule** (*mixed* $defaultModule)

    Sets the module name to be used if the router doesn’t return a valid module
- name: Application::setEventsManager
  id: api/phalcon_application#seteventsmanager
  summary: null
  belongs_to: Application
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the events manager
- name: Application\Exception
  id: api/phalcon_application_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Application\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/application/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Application_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Application_Exception.html)"
- name: Assets Management
  id: reference/assets
  summary: Phalcon\Assets is a component that allows you to manage static resources such as CSS stylesheets or JavaScript libraries in a web application
  description: "# Assets Management\n\n`Phalcon\\Assets` is a component that allows you to manage static resources such as CSS stylesheets or JavaScript libraries in a web application.\n\n[*Phalcon\\Assets\\Manager*](../api/phalcon_assets_manager) is available in the services container, so you can add resources from any part of the application where the container is available.\n\n## Adding Resources\n\nAssets supports two built-in resources: CSS and JavaScripts. You can create other resources if you need. The assets manager internally stores two default collections of resources - one for JavaScript and another for CSS.\n\nYou can easily add resources to these collections like follows:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        // Add some local CSS resources\n        $this->assets->addCss(\"css/style.css\");\n        $this->assets->addCss(\"css/index.css\");\n\n        // And some local JavaScript resources\n        $this->assets->addJs(\"js/jquery.js\");\n        $this->assets->addJs(\"js/bootstrap.min.js\");\n    }\n}\n```\n\nThen in a view, these resources can be printed:\n\n``` html\n<html>\n    <head>\n        <title>Some amazing website</title>\n\n        <?php $this->assets->outputCss(); ?>\n    </head>\n\n    <body>\n        <!-- ... -->\n\n        <?php $this->assets->outputJs(); ?>\n    </body>\n<html>\n```\n\nVolt syntax:\n\n``` html\n<html>\n    <head>\n        <title>Some amazing website</title>\n\n        {{ assets.outputCss() }}\n    </head>\n\n    <body>\n        <!-- ... -->\n\n        {{ assets.outputJs() }}\n    </body>\n<html>\n```\n\nFor better pageload performance, it is recommended to place JavaScript at the end of the HTML instead of in the `<head>`.\n\n## Local/Remote resources\n\nLocal resources are those who are provided by the same application and they’re located in the document root of the application. URLs in local resources are generated by the ‘url’ service, usually [*Phalcon\\Mvc\\Url*](../api/phalcon_mvc_url).\n\nRemote resources are those such as common libraries like jQuery, Bootstrap, etc. that are provided by a CDN.\n\nThe second parameter of `addCss()` and `addJs()` says whether the resource is local or not (`true` is local, `false` is remote). By default, the assets manager will assume the resource is local:\n\n``` php\npublic function indexAction()\n{\n    // Add some local CSS resources\n    $this->assets->addCss(\"//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css\", false);\n    $this->assets->addCss(\"css/style.css\", true);\n    $this->assets->addCss(\"css/extra.css\");\n}\n```\n\n## Collections\n\nCollections group resources of the same type. The assets manager implicitly creates two collections: `css` and `js`. You can create additional collections to group specific resources to make it easier to place those resources in the views:\n\n``` php\n// Javascripts in the header\n$headerCollection = $this->assets->collection(\"header\");\n\n$headerCollection->addJs(\"js/jquery.js\");\n$headerCollection->addJs(\"js/bootstrap.min.js\");\n\n// Javascripts in the footer\n$footerCollection = $this->assets->collection(\"footer\");\n\n$footerCollection->addJs(\"js/jquery.js\");\n$footerCollection->addJs(\"js/bootstrap.min.js\");\n```\n\nThen in the views:\n\n``` html\n<html>\n    <head>\n        <title>Some amazing website</title>\n\n        <?php $this->assets->outputJs(\"header\"); ?>\n    </head>\n\n    <body>\n        <!-- ... -->\n\n        <?php $this->assets->outputJs(\"footer\"); ?>\n    </body>\n<html>\n```\n\nVolt syntax:\n\n``` html\n<html>\n    <head>\n        <title>Some amazing website</title>\n\n        {{ assets.outputCss(\"header\") }}\n    </head>\n\n    <body>\n        <!-- ... -->\n\n        {{ assets.outputJs(\"footer\") }}\n    </body>\n<html>\n```\n\n## URL Prefixes\n\nCollections can be URL-prefixed, this enables you to easily change from one server to another at any moment:\n\n``` php\n$footerCollection = $this->assets->collection(\"footer\");\n\nif ($config->environment === \"development\") {\n    $footerCollection->setPrefix(\"/\");\n} else {\n    $footerCollection->setPrefix(\"http:://cdn.example.com/\");\n}\n\n$footerCollection->addJs(\"js/jquery.js\");\n$footerCollection->addJs(\"js/bootstrap.min.js\");\n```\n\nA chainable syntax is available too:\n\n``` php\n$headerCollection = $assets\n    ->collection(\"header\")\n    ->setPrefix(\"http://cdn.example.com/\")\n    ->setLocal(false)\n    ->addJs(\"js/jquery.js\")\n    ->addJs(\"js/bootstrap.min.js\");\n```\n\n## Minification/Filtering\n\n`Phalcon\\Assets` provides built-in minification of JavaScript and CSS resources. You can create a collection of resources instructing the Assets Manager which ones must be filtered and which ones must be left as they are. In addition to the above, Jsmin by Douglas Crockford is part of the core extension offering minification of JavaScript files for maximum performance. In the CSS land, CSSMin by Ryan Day is also available to minify CSS files:\n\nThe following example shows how to minify a collection of resources:\n\n``` php\n$manager\n\n    // These JavaScripts are located in the page's bottom\n    ->collection(\"jsFooter\")\n\n    // The name of the final output\n    ->setTargetPath(\"final.js\")\n\n    // The script tag is generated with this URI\n    ->setTargetUri(\"production/final.js\")\n\n    // This is a remote resource that does not need filtering\n    ->addJs(\"code.jquery.com/jquery-1.10.0.min.js\", false, false)\n\n    // These are local resources that must be filtered\n    ->addJs(\"common-functions.js\")\n    ->addJs(\"page-functions.js\")\n\n    // Join all the resources in a single file\n    ->join(true)\n\n    // Use the built-in Jsmin filter\n    ->addFilter(\n        new Phalcon\\Assets\\Filters\\Jsmin()\n    )\n\n    // Use a custom filter\n    ->addFilter(\n        new MyApp\\Assets\\Filters\\LicenseStamper()\n    );\n```\n\nA collection can contain JavaScript or CSS resources but not both. Some resources may be remote, that is, they’re obtained by HTTP from a remote source for further filtering. It is recommended to convert the external resources to local for better performance.\n\nAs seen above, the `addJs()` method is used to add resources to the collection, the second parameter indicates whether the resource is external or not and the third parameter indicates whether the resource should be filtered or left as is:\n\n``` php\n// These Javascripts are located in the page's bottom\n$jsFooterCollection = $manager->collection(\"jsFooter\");\n\n// This a remote resource that does not need filtering\n$jsFooterCollection->addJs(\"code.jquery.com/jquery-1.10.0.min.js\", false, false);\n\n// These are local resources that must be filtered\n$jsFooterCollection->addJs(\"common-functions.js\");\n$jsFooterCollection->addJs(\"page-functions.js\");\n```\n\nFilters are registered in the collection, multiple filters are allowed, content in resources are filtered in the same order as filters were registered:\n\n``` php\n// Use the built-in Jsmin filter\n$jsFooterCollection->addFilter(\n    new Phalcon\\Assets\\Filters\\Jsmin()\n);\n\n// Use a custom filter\n$jsFooterCollection->addFilter(\n    new MyApp\\Assets\\Filters\\LicenseStamper()\n);\n```\n\nNote that both built-in and custom filters can be transparently applied to collections. The last step is to decide if all the resources in the collection must be joined into a single file or serve each of them individually. To tell the collection that all resources must be joined you can use the `join()` method.\n\nIf resources are going to be joined, we need also to define which file will be used to store the resources and which URI will be used to show it. These settings are set up with `setTargetPath()` and `setTargetUri()`:\n\n``` php\n$jsFooterCollection->join(true);\n\n// The name of the final file path\n$jsFooterCollection->setTargetPath(\"public/production/final.js\");\n\n// The script HTML tag is generated with this URI\n$jsFooterCollection->setTargetUri(\"production/final.js\");\n```\n\n### Built-In Filters\n\nPhalcon provides 2 built-in filters to minify both JavaScript and CSS, their C-backend provide the minimum overhead to perform this task:\n\n| Filter                                                                  | Description                                                                                                  |\n|-------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|\n| [*Phalcon\\Assets\\Filters\\Jsmin*](../api/phalcon_assets_filters_jsmin)   | Minifies JavaScript by removing unnecessary characters that are ignored by Javascript interpreters/compilers |\n| [*Phalcon\\Assets\\Filters\\Cssmin*](../api/phalcon_assets_filters_cssmin) | Minifies CSS by removing unnecessary characters that are already ignored by browsers                         |\n\n### Custom Filters\n\nIn addition to the built-in filters, you can create your own filters. These can take advantage of existing and more advanced tools like [YUI](http://yui.github.io/yuicompressor/), [Sass](http://sass-lang.com/), [Closure](https://developers.google.com/closure/compiler/?hl=fr), etc.:\n\n``` php\nuse Phalcon\\Assets\\FilterInterface;\n\n/**\n * Filters CSS content using YUI\n *\n * @param string $contents\n * @return string\n */\nclass CssYUICompressor implements FilterInterface\n{\n    protected $_options;\n\n    /**\n     * CssYUICompressor constructor\n     *\n     * @param array $options\n     */\n    public function __construct(array $options)\n    {\n        $this->_options = $options;\n    }\n\n    /**\n     * Do the filtering\n     *\n     * @param string $contents\n     *\n     * @return string\n     */\n    public function filter($contents)\n    {\n        // Write the string contents into a temporal file\n        file_put_contents(\"temp/my-temp-1.css\", $contents);\n\n        system(\n            $this->_options[\"java-bin\"] .\n            \" -jar \" .\n            $this->_options[\"yui\"] .\n            \" --type css \" .\n            \"temp/my-temp-file-1.css \" .\n            $this->_options[\"extra-options\"] .\n            \" -o temp/my-temp-file-2.css\"\n        );\n\n        // Return the contents of file\n        return file_get_contents(\"temp/my-temp-file-2.css\");\n    }\n}\n```\n\nUsage:\n\n``` php\n// Get some CSS collection\n$css = $this->assets->get(\"head\");\n\n// Add/Enable the YUI compressor filter in the collection\n$css->addFilter(\n    new CssYUICompressor(\n        [\n            \"java-bin\"      => \"/usr/local/bin/java\",\n            \"yui\"           => \"/some/path/yuicompressor-x.y.z.jar\",\n            \"extra-options\" => \"--charset utf8\",\n        ]\n    )\n);\n```\n\nIn a previous example, we used a custom filter called `LicenseStamper`:\n\n``` php\nuse Phalcon\\Assets\\FilterInterface;\n\n/**\n * Adds a license message to the top of the file\n *\n * @param string $contents\n *\n * @return string\n */\nclass LicenseStamper implements FilterInterface\n{\n    /**\n     * Do the filtering\n     *\n     * @param string $contents\n     * @return string\n     */\n    public function filter($contents)\n    {\n        $license = \"/* (c) 2015 Your Name Here */\";\n\n        return $license . PHP_EOL . PHP_EOL . $contents;\n    }\n}\n```\n\n## Custom Output\n\nThe `outputJs()` and `outputCss()` methods are available to generate the necessary HTML code according to each type of resources. You can override this method or print the resources manually in the following way:\n\n``` php\nuse Phalcon\\Tag;\n\n$jsCollection = $this->assets->collection(\"js\");\n\nforeach ($jsCollection as $resource) {\n    echo Tag::javascriptInclude(\n        $resource->getPath()\n    );\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/assets.html](https://docs.phalconphp.com/en/latest/reference/assets.html)"
- name: Assets\Collection
  id: api/phalcon_assets_collection
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Collection**\n\n*implements* [Countable](http://php.net/manual/en/class.countable.php), [Iterator](http://php.net/manual/en/class.iterator.php), [Traversable](http://php.net/manual/en/class.traversable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/collection.zep)\n\nRepresents a collection of resources\n\n## Methods\n\n### public **getPrefix** ()\n\n...\n\n### public **getLocal** ()\n\n...\n\n### public **getResources** ()\n\n...\n\n### public **getCodes** ()\n\n...\n\n### public **getPosition** ()\n\n...\n\n### public **getFilters** ()\n\n...\n\n### public **getAttributes** ()\n\n...\n\n### public **getJoin** ()\n\n...\n\n### public **getTargetUri** ()\n\n...\n\n### public **getTargetPath** ()\n\n...\n\n### public **getTargetLocal** ()\n\n...\n\n### public **getSourcePath** ()\n\n...\n\n### public **add** ([*Phalcon\\Assets\\Resource*](phalcon_assets_resource) $resource)\n\nAdds a resource to the collection\n\n### public **addInline** ([*Phalcon\\Assets\\Inline*](phalcon_assets_inline) $code)\n\nAdds an inline code to the collection\n\n### public **addCss** (*mixed* $path, \\[*mixed* $local\\], \\[*mixed* $filter\\], \\[*mixed* $attributes\\])\n\nAdds a CSS resource to the collection\n\n### public **addInlineCss** (*mixed* $content, \\[*mixed* $filter\\], \\[*mixed* $attributes\\])\n\nAdds an inline CSS to the collection\n\n### public [*Phalcon\\Assets\\Collection*](phalcon_assets_collection) **addJs** (*string* $path, \\[*boolean* $local\\], \\[*boolean* $filter\\], \\[*array* $attributes\\])\n\nAdds a javascript resource to the collection\n\n### public **addInlineJs** (*mixed* $content, \\[*mixed* $filter\\], \\[*mixed* $attributes\\])\n\nAdds an inline javascript to the collection\n\n### public **count** ()\n\nReturns the number of elements in the form\n\n### public **rewind** ()\n\nRewinds the internal iterator\n\n### public **current** ()\n\nReturns the current resource in the iterator\n\n### public *int* **key** ()\n\nReturns the current position/key in the iterator\n\n### public **next** ()\n\nMoves the internal iteration pointer to the next position\n\n### public **valid** ()\n\nCheck if the current element in the iterator is valid\n\n### public **setTargetPath** (*mixed* $targetPath)\n\nSets the target path of the file for the filtered/join output\n\n### public **setSourcePath** (*mixed* $sourcePath)\n\nSets a base source path for all the resources in this collection\n\n### public **setTargetUri** (*mixed* $targetUri)\n\nSets a target uri for the generated HTML\n\n### public **setPrefix** (*mixed* $prefix)\n\nSets a common prefix for all the resources\n\n### public **setLocal** (*mixed* $local)\n\nSets if the collection uses local resources by default\n\n### public **setAttributes** (*array* $attributes)\n\nSets extra HTML attributes\n\n### public **setFilters** (*array* $filters)\n\nSets an array of filters in the collection\n\n### public **setTargetLocal** (*mixed* $targetLocal)\n\nSets the target local\n\n### public **join** (*mixed* $join)\n\nSets if all filtered resources in the collection must be joined in a single result file\n\n### public **getRealTargetPath** (*mixed* $basePath)\n\nReturns the complete location where the joined/filtered collection must be written\n\n### public **addFilter** ([*Phalcon\\Assets\\FilterInterface*](phalcon_assets_filterinterface) $filter)\n\nAdds a filter to the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Collection.html)"
- name: Assets\Collection::add
  id: api/phalcon_assets_collection#add
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **add** ([*Phalcon\Assets\Resource*](phalcon_assets_resource) $resource)

    Adds a resource to the collection
- name: Assets\Collection::addCss
  id: api/phalcon_assets_collection#addcss
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **addCss** (*mixed* $path, \[*mixed* $local\], \[*mixed* $filter\], \[*mixed* $attributes\])

    Adds a CSS resource to the collection
- name: Assets\Collection::addFilter
  id: api/phalcon_assets_collection#addfilter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\Collection
  description: "### public **addFilter** ([*Phalcon\\Assets\\FilterInterface*](phalcon_assets_filterinterface) $filter)\n\nAdds a filter to the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Collection.html)"
- name: Assets\Collection::addInline
  id: api/phalcon_assets_collection#addinline
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **addInline** ([*Phalcon\Assets\Inline*](phalcon_assets_inline) $code)

    Adds an inline code to the collection
- name: Assets\Collection::addInlineCss
  id: api/phalcon_assets_collection#addinlinecss
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **addInlineCss** (*mixed* $content, \[*mixed* $filter\], \[*mixed* $attributes\])

    Adds an inline CSS to the collection
- name: Assets\Collection::addInlineJs
  id: api/phalcon_assets_collection#addinlinejs
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **addInlineJs** (*mixed* $content, \[*mixed* $filter\], \[*mixed* $attributes\])

    Adds an inline javascript to the collection
- name: Assets\Collection::addJs
  id: api/phalcon_assets_collection#addjs
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public [*Phalcon\Assets\Collection*](phalcon_assets_collection) **addJs** (*string* $path, \[*boolean* $local\], \[*boolean* $filter\], \[*array* $attributes\])

    Adds a javascript resource to the collection
- name: Assets\Collection::count
  id: api/phalcon_assets_collection#count
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **count** ()

    Returns the number of elements in the form
- name: Assets\Collection::current
  id: api/phalcon_assets_collection#current
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **current** ()

    Returns the current resource in the iterator
- name: Assets\Collection::getAttributes
  id: api/phalcon_assets_collection#getattributes
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getAttributes** ()

    ...
- name: Assets\Collection::getCodes
  id: api/phalcon_assets_collection#getcodes
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getCodes** ()

    ...
- name: Assets\Collection::getFilters
  id: api/phalcon_assets_collection#getfilters
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getFilters** ()

    ...
- name: Assets\Collection::getJoin
  id: api/phalcon_assets_collection#getjoin
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getJoin** ()

    ...
- name: Assets\Collection::getLocal
  id: api/phalcon_assets_collection#getlocal
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getLocal** ()

    ...
- name: Assets\Collection::getPosition
  id: api/phalcon_assets_collection#getposition
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getPosition** ()

    ...
- name: Assets\Collection::getPrefix
  id: api/phalcon_assets_collection#getprefix
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getPrefix** ()

    ...
- name: Assets\Collection::getRealTargetPath
  id: api/phalcon_assets_collection#getrealtargetpath
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getRealTargetPath** (*mixed* $basePath)

    Returns the complete location where the joined/filtered collection must be written
- name: Assets\Collection::getResources
  id: api/phalcon_assets_collection#getresources
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getResources** ()

    ...
- name: Assets\Collection::getSourcePath
  id: api/phalcon_assets_collection#getsourcepath
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getSourcePath** ()

    ...
- name: Assets\Collection::getTargetLocal
  id: api/phalcon_assets_collection#gettargetlocal
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getTargetLocal** ()

    ...
- name: Assets\Collection::getTargetPath
  id: api/phalcon_assets_collection#gettargetpath
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getTargetPath** ()

    ...
- name: Assets\Collection::getTargetUri
  id: api/phalcon_assets_collection#gettargeturi
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **getTargetUri** ()

    ...
- name: Assets\Collection::join
  id: api/phalcon_assets_collection#join
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **join** (*mixed* $join)

    Sets if all filtered resources in the collection must be joined in a single result file
- name: Assets\Collection::key
  id: api/phalcon_assets_collection#key
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public *int* **key** ()

    Returns the current position/key in the iterator
- name: Assets\Collection::next
  id: api/phalcon_assets_collection#next
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **next** ()

    Moves the internal iteration pointer to the next position
- name: Assets\Collection::rewind
  id: api/phalcon_assets_collection#rewind
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **rewind** ()

    Rewinds the internal iterator
- name: Assets\Collection::setAttributes
  id: api/phalcon_assets_collection#setattributes
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setAttributes** (*array* $attributes)

    Sets extra HTML attributes
- name: Assets\Collection::setFilters
  id: api/phalcon_assets_collection#setfilters
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setFilters** (*array* $filters)

    Sets an array of filters in the collection
- name: Assets\Collection::setLocal
  id: api/phalcon_assets_collection#setlocal
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setLocal** (*mixed* $local)

    Sets if the collection uses local resources by default
- name: Assets\Collection::setPrefix
  id: api/phalcon_assets_collection#setprefix
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setPrefix** (*mixed* $prefix)

    Sets a common prefix for all the resources
- name: Assets\Collection::setSourcePath
  id: api/phalcon_assets_collection#setsourcepath
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setSourcePath** (*mixed* $sourcePath)

    Sets a base source path for all the resources in this collection
- name: Assets\Collection::setTargetLocal
  id: api/phalcon_assets_collection#settargetlocal
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setTargetLocal** (*mixed* $targetLocal)

    Sets the target local
- name: Assets\Collection::setTargetPath
  id: api/phalcon_assets_collection#settargetpath
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setTargetPath** (*mixed* $targetPath)

    Sets the target path of the file for the filtered/join output
- name: Assets\Collection::setTargetUri
  id: api/phalcon_assets_collection#settargeturi
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **setTargetUri** (*mixed* $targetUri)

    Sets a target uri for the generated HTML
- name: Assets\Collection::valid
  id: api/phalcon_assets_collection#valid
  summary: null
  belongs_to: Assets\Collection
  description: |-
    ### public **valid** ()

    Check if the current element in the iterator is valid
- name: Assets\Exception
  id: api/phalcon_assets_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Exception.html)"
- name: Assets\FilterInterface
  id: api/phalcon_assets_filterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Assets\\FilterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filterinterface.zep)\n\n## Methods\n\n### abstract public **filter** (*mixed* $content)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_FilterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_FilterInterface.html)"
- name: Assets\FilterInterface::filter
  id: api/phalcon_assets_filterinterface#filter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\FilterInterface
  description: "### abstract public **filter** (*mixed* $content)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_FilterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_FilterInterface.html)"
- name: Assets\Filters\Cssmin
  id: api/phalcon_assets_filters_cssmin
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Filters\\Cssmin**\n\n*implements* [*Phalcon\\Assets\\FilterInterface*](phalcon_assets_filterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filters/cssmin.zep)\n\nMinify the css - removes comments removes newlines and line feeds keeping removes last semicolon from last property\n\n## Methods\n\n### public **filter** (*mixed* $content)\n\nFilters the content using CSSMIN\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Cssmin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Cssmin.html)"
- name: Assets\Filters\Cssmin::filter
  id: api/phalcon_assets_filters_cssmin#filter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\Filters\Cssmin
  description: "### public **filter** (*mixed* $content)\n\nFilters the content using CSSMIN\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Cssmin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Cssmin.html)"
- name: Assets\Filters\Jsmin
  id: api/phalcon_assets_filters_jsmin
  summary: Deletes the characters which are insignificant to JavaScript
  description: "# Class **Phalcon\\Assets\\Filters\\Jsmin**\n\n*implements* [*Phalcon\\Assets\\FilterInterface*](phalcon_assets_filterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filters/jsmin.zep)\n\nDeletes the characters which are insignificant to JavaScript. Comments will be removed. Tabs will be replaced with spaces. Carriage returns will be replaced with linefeeds. Most spaces and linefeeds will be removed.\n\n## Methods\n\n### public **filter** (*mixed* $content)\n\nFilters the content using JSMIN\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Jsmin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Jsmin.html)"
- name: Assets\Filters\Jsmin::filter
  id: api/phalcon_assets_filters_jsmin#filter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\Filters\Jsmin
  description: "### public **filter** (*mixed* $content)\n\nFilters the content using JSMIN\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Jsmin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Jsmin.html)"
- name: Assets\Filters\None
  id: api/phalcon_assets_filters_none
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Filters\\None**\n\n*implements* [*Phalcon\\Assets\\FilterInterface*](phalcon_assets_filterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filters/none.zep)\n\nReturns the content without make any modification to the original source\n\n## Methods\n\n### public **filter** (*mixed* $content)\n\nReturns the content without be touched\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_None.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_None.html)"
- name: Assets\Filters\None::filter
  id: api/phalcon_assets_filters_none#filter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\Filters\None
  description: "### public **filter** (*mixed* $content)\n\nReturns the content without be touched\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_None.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_None.html)"
- name: Assets\Inline
  id: api/phalcon_assets_inline
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Inline**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/inline.zep)\n\nRepresents an inline asset\n\n``` php\n$inline = new \\Phalcon\\Assets\\Inline(\"js\", \"alert('hello world');\");\n```\n\n## Methods\n\n### public **getType** ()\n\n...\n\n### public **getContent** ()\n\n...\n\n### public **getFilter** ()\n\n...\n\n### public **getAttributes** ()\n\n...\n\n### public **\\_\\_construct** (*string* $type, *string* $content, \\[*boolean* $filter\\], \\[*array* $attributes\\])\n\nPhalcon\\Assets\\Inline constructor\n\n### public **setType** (*mixed* $type)\n\nSets the inline’s type\n\n### public **setFilter** (*mixed* $filter)\n\nSets if the resource must be filtered or not\n\n### public **setAttributes** (*array* $attributes)\n\nSets extra HTML attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline.html)"
- name: Assets\Inline::getAttributes
  id: api/phalcon_assets_inline#getattributes
  summary: null
  belongs_to: Assets\Inline
  description: |-
    ### public **getAttributes** ()

    ...

    ### public **\_\_construct** (*string* $type, *string* $content, \[*boolean* $filter\], \[*array* $attributes\])

    Phalcon\Assets\Inline constructor
- name: Assets\Inline::getContent
  id: api/phalcon_assets_inline#getcontent
  summary: null
  belongs_to: Assets\Inline
  description: |-
    ### public **getContent** ()

    ...
- name: Assets\Inline::getFilter
  id: api/phalcon_assets_inline#getfilter
  summary: null
  belongs_to: Assets\Inline
  description: |-
    ### public **getFilter** ()

    ...
- name: Assets\Inline::getType
  id: api/phalcon_assets_inline#gettype
  summary: null
  belongs_to: Assets\Inline
  description: |-
    ### public **getType** ()

    ...
- name: Assets\Inline::setAttributes
  id: api/phalcon_assets_inline#setattributes
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\Inline
  description: "### public **setAttributes** (*array* $attributes)\n\nSets extra HTML attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline.html)"
- name: Assets\Inline::setFilter
  id: api/phalcon_assets_inline#setfilter
  summary: null
  belongs_to: Assets\Inline
  description: |-
    ### public **setFilter** (*mixed* $filter)

    Sets if the resource must be filtered or not
- name: Assets\Inline::setType
  id: api/phalcon_assets_inline#settype
  summary: null
  belongs_to: Assets\Inline
  description: |-
    ### public **setType** (*mixed* $type)

    Sets the inline’s type
- name: Assets\Inline\Css
  id: api/phalcon_assets_inline_css
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Inline\\Css**\n\n*extends* class [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/inline/css.zep)\n\nRepresents an inlined CSS\n\n## Methods\n\n### public **\\_\\_construct** (*string* $content, \\[*boolean* $filter\\], \\[*array* $attributes\\])\n\n### public **getType** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **getContent** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **getFilter** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **getAttributes** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **setType** (*mixed* $type) inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\nSets the inline’s type\n\n### public **setFilter** (*mixed* $filter) inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\nSets if the resource must be filtered or not\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\nSets extra HTML attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Css.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Css.html)"
- name: Assets\Inline\Js
  id: api/phalcon_assets_inline_js
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Inline\\Js**\n\n*extends* class [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/inline/js.zep)\n\nRepresents an inline Javascript\n\n## Methods\n\n### public **\\_\\_construct** (*string* $content, \\[*boolean* $filter\\], \\[*array* $attributes\\])\n\n### public **getType** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **getContent** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **getFilter** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **getAttributes** () inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\n...\n\n### public **setType** (*mixed* $type) inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\nSets the inline’s type\n\n### public **setFilter** (*mixed* $filter) inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\nSets if the resource must be filtered or not\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Assets\\Inline*](phalcon_assets_inline)\n\nSets extra HTML attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Js.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Js.html)"
- name: Assets\Manager
  id: api/phalcon_assets_manager
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Manager**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/manager.zep)\n\nManages collections of CSS/Javascript assets\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\n### public **setOptions** (*array* $options)\n\nSets the manager options\n\n### public **getOptions** ()\n\nReturns the manager options\n\n### public **useImplicitOutput** (*mixed* $implicitOutput)\n\nSets if the HTML generated must be directly printed or returned\n\n### public **addCss** (*mixed* $path, \\[*mixed* $local\\], \\[*mixed* $filter\\], \\[*mixed* $attributes\\])\n\nAdds a Css resource to the ‘css’ collection\n\n``` php\n$assets->addCss(\"css/bootstrap.css\");\n$assets->addCss(\"http://bootstrap.my-cdn.com/style.css\", false);\n```\n\n### public **addInlineCss** (*mixed* $content, \\[*mixed* $filter\\], \\[*mixed* $attributes\\])\n\nAdds an inline Css to the ‘css’ collection\n\n### public **addJs** (*mixed* $path, \\[*mixed* $local\\], \\[*mixed* $filter\\], \\[*mixed* $attributes\\])\n\nAdds a javascript resource to the ‘js’ collection\n\n``` php\n$assets->addJs(\"scripts/jquery.js\");\n$assets->addJs(\"http://jquery.my-cdn.com/jquery.js\", false);\n```\n\n### public **addInlineJs** (*mixed* $content, \\[*mixed* $filter\\], \\[*mixed* $attributes\\])\n\nAdds an inline javascript to the ‘js’ collection\n\n### public **addResourceByType** (*mixed* $type, [*Phalcon\\Assets\\Resource*](phalcon_assets_resource) $resource)\n\nAdds a resource by its type\n\n``` php\n$assets->addResourceByType(\"css\",\n    new \\Phalcon\\Assets\\Resource\\Css(\"css/style.css\")\n);\n```\n\n### public **addInlineCodeByType** (*mixed* $type, [*Phalcon\\Assets\\Inline*](phalcon_assets_inline) $code)\n\nAdds an inline code by its type\n\n### public **addResource** ([*Phalcon\\Assets\\Resource*](phalcon_assets_resource) $resource)\n\nAdds a raw resource to the manager\n\n``` php\n$assets->addResource(\n    new Phalcon\\Assets\\Resource(\"css\", \"css/style.css\")\n);\n```\n\n### public **addInlineCode** ([*Phalcon\\Assets\\Inline*](phalcon_assets_inline) $code)\n\nAdds a raw inline code to the manager\n\n### public **set** (*mixed* $id, [*Phalcon\\Assets\\Collection*](phalcon_assets_collection) $collection)\n\nSets a collection in the Assets Manager\n\n``` php\n$assets->set(\"js\", $collection);\n```\n\n### public **get** (*mixed* $id)\n\nReturns a collection by its id\n\n``` php\n$scripts = $assets->get(\"js\");\n```\n\n### public **getCss** ()\n\nReturns the CSS collection of assets\n\n### public **getJs** ()\n\nReturns the CSS collection of assets\n\n### public **collection** (*mixed* $name)\n\nCreates/Returns a collection of resources\n\n### public **output** ([*Phalcon\\Assets\\Collection*](phalcon_assets_collection) $collection, *callback* $callback, *string* $type)\n\nTraverses a collection calling the callback to generate its HTML\n\n### public **outputInline** ([*Phalcon\\Assets\\Collection*](phalcon_assets_collection) $collection, *string* $type)\n\nTraverses a collection and generate its HTML\n\n### public **outputCss** (\\[*string* $collectionName\\])\n\nPrints the HTML for CSS resources\n\n### public **outputInlineCss** (\\[*string* $collectionName\\])\n\nPrints the HTML for inline CSS\n\n### public **outputJs** (\\[*string* $collectionName\\])\n\nPrints the HTML for JS resources\n\n### public **outputInlineJs** (\\[*string* $collectionName\\])\n\nPrints the HTML for inline JS\n\n### public **getCollections** ()\n\nReturns existing collections in the manager\n\n### public **exists** (*mixed* $id)\n\nReturns true or false if collection exists\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Manager.html)"
- name: Assets\Manager::addCss
  id: api/phalcon_assets_manager#addcss
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addCss** (*mixed* $path, \[*mixed* $local\], \[*mixed* $filter\], \[*mixed* $attributes\])

    Adds a Css resource to the ‘css’ collection

    ``` php
    $assets->addCss("css/bootstrap.css");
    $assets->addCss("http://bootstrap.my-cdn.com/style.css", false);
    ```
- name: Assets\Manager::addInlineCode
  id: api/phalcon_assets_manager#addinlinecode
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addInlineCode** ([*Phalcon\Assets\Inline*](phalcon_assets_inline) $code)

    Adds a raw inline code to the manager
- name: Assets\Manager::addInlineCodeByType
  id: api/phalcon_assets_manager#addinlinecodebytype
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addInlineCodeByType** (*mixed* $type, [*Phalcon\Assets\Inline*](phalcon_assets_inline) $code)

    Adds an inline code by its type
- name: Assets\Manager::addInlineCss
  id: api/phalcon_assets_manager#addinlinecss
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addInlineCss** (*mixed* $content, \[*mixed* $filter\], \[*mixed* $attributes\])

    Adds an inline Css to the ‘css’ collection
- name: Assets\Manager::addInlineJs
  id: api/phalcon_assets_manager#addinlinejs
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addInlineJs** (*mixed* $content, \[*mixed* $filter\], \[*mixed* $attributes\])

    Adds an inline javascript to the ‘js’ collection
- name: Assets\Manager::addJs
  id: api/phalcon_assets_manager#addjs
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addJs** (*mixed* $path, \[*mixed* $local\], \[*mixed* $filter\], \[*mixed* $attributes\])

    Adds a javascript resource to the ‘js’ collection

    ``` php
    $assets->addJs("scripts/jquery.js");
    $assets->addJs("http://jquery.my-cdn.com/jquery.js", false);
    ```
- name: Assets\Manager::addResource
  id: api/phalcon_assets_manager#addresource
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addResource** ([*Phalcon\Assets\Resource*](phalcon_assets_resource) $resource)

    Adds a raw resource to the manager

    ``` php
    $assets->addResource(
        new Phalcon\Assets\Resource("css", "css/style.css")
    );
    ```
- name: Assets\Manager::addResourceByType
  id: api/phalcon_assets_manager#addresourcebytype
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **addResourceByType** (*mixed* $type, [*Phalcon\Assets\Resource*](phalcon_assets_resource) $resource)

    Adds a resource by its type

    ``` php
    $assets->addResourceByType("css",
        new \Phalcon\Assets\Resource\Css("css/style.css")
    );
    ```
- name: Assets\Manager::collection
  id: api/phalcon_assets_manager#collection
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **collection** (*mixed* $name)

    Creates/Returns a collection of resources
- name: Assets\Manager::exists
  id: api/phalcon_assets_manager#exists
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\Manager
  description: "### public **exists** (*mixed* $id)\n\nReturns true or false if collection exists\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Manager.html)"
- name: Assets\Manager::get
  id: api/phalcon_assets_manager#get
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **get** (*mixed* $id)

    Returns a collection by its id

    ``` php
    $scripts = $assets->get("js");
    ```
- name: Assets\Manager::getCollections
  id: api/phalcon_assets_manager#getcollections
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **getCollections** ()

    Returns existing collections in the manager
- name: Assets\Manager::getCss
  id: api/phalcon_assets_manager#getcss
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **getCss** ()

    Returns the CSS collection of assets
- name: Assets\Manager::getJs
  id: api/phalcon_assets_manager#getjs
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **getJs** ()

    Returns the CSS collection of assets
- name: Assets\Manager::getOptions
  id: api/phalcon_assets_manager#getoptions
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **getOptions** ()

    Returns the manager options
- name: Assets\Manager::output
  id: api/phalcon_assets_manager#output
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **output** ([*Phalcon\Assets\Collection*](phalcon_assets_collection) $collection, *callback* $callback, *string* $type)

    Traverses a collection calling the callback to generate its HTML
- name: Assets\Manager::outputCss
  id: api/phalcon_assets_manager#outputcss
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **outputCss** (\[*string* $collectionName\])

    Prints the HTML for CSS resources
- name: Assets\Manager::outputInline
  id: api/phalcon_assets_manager#outputinline
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **outputInline** ([*Phalcon\Assets\Collection*](phalcon_assets_collection) $collection, *string* $type)

    Traverses a collection and generate its HTML
- name: Assets\Manager::outputInlineCss
  id: api/phalcon_assets_manager#outputinlinecss
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **outputInlineCss** (\[*string* $collectionName\])

    Prints the HTML for inline CSS
- name: Assets\Manager::outputInlineJs
  id: api/phalcon_assets_manager#outputinlinejs
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **outputInlineJs** (\[*string* $collectionName\])

    Prints the HTML for inline JS
- name: Assets\Manager::outputJs
  id: api/phalcon_assets_manager#outputjs
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **outputJs** (\[*string* $collectionName\])

    Prints the HTML for JS resources
- name: Assets\Manager::set
  id: api/phalcon_assets_manager#set
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **set** (*mixed* $id, [*Phalcon\Assets\Collection*](phalcon_assets_collection) $collection)

    Sets a collection in the Assets Manager

    ``` php
    $assets->set("js", $collection);
    ```
- name: Assets\Manager::setOptions
  id: api/phalcon_assets_manager#setoptions
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **setOptions** (*array* $options)

    Sets the manager options
- name: Assets\Manager::useImplicitOutput
  id: api/phalcon_assets_manager#useimplicitoutput
  summary: null
  belongs_to: Assets\Manager
  description: |-
    ### public **useImplicitOutput** (*mixed* $implicitOutput)

    Sets if the HTML generated must be directly printed or returned
- name: Assets\Resource
  id: api/phalcon_assets_resource
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Resource**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/resource.zep)\n\nRepresents an asset resource\n\n``` php\n$resource = new \\Phalcon\\Assets\\Resource(\"js\", \"javascripts/jquery.js\");\n```\n\n## Methods\n\n### public **getType** ()\n\n### public **getPath** ()\n\n### public **getLocal** ()\n\n### public **getFilter** ()\n\n### public **getAttributes** ()\n\n### public **getSourcePath** ()\n\n...\n\n### public **getTargetPath** ()\n\n...\n\n### public **getTargetUri** ()\n\n...\n\n### public **\\_\\_construct** (*string* $type, *string* $path, \\[*boolean* $local\\], \\[*boolean* $filter\\], \\[*array* $attributes\\])\n\nPhalcon\\Assets\\Resource constructor\n\n### public **setType** (*mixed* $type)\n\nSets the resource’s type\n\n### public **setPath** (*mixed* $path)\n\nSets the resource’s path\n\n### public **setLocal** (*mixed* $local)\n\nSets if the resource is local or external\n\n### public **setFilter** (*mixed* $filter)\n\nSets if the resource must be filtered or not\n\n### public **setAttributes** (*array* $attributes)\n\nSets extra HTML attributes\n\n### public **setTargetUri** (*mixed* $targetUri)\n\nSets a target uri for the generated HTML\n\n### public **setSourcePath** (*mixed* $sourcePath)\n\nSets the resource’s source path\n\n### public **setTargetPath** (*mixed* $targetPath)\n\nSets the resource’s target path\n\n### public **getContent** (\\[*mixed* $basePath\\])\n\nReturns the content of the resource as an string Optionally a base path where the resource is located can be set\n\n### public **getRealTargetUri** ()\n\nReturns the real target uri for the generated HTML\n\n### public **getRealSourcePath** (\\[*mixed* $basePath\\])\n\nReturns the complete location where the resource is located\n\n### public **getRealTargetPath** (\\[*mixed* $basePath\\])\n\nReturns the complete location where the resource must be written\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource.html)"
- name: Assets\Resource::getAttributes
  id: api/phalcon_assets_resource#getattributes
  summary: null
  belongs_to: Assets\Resource
  description: '### public **getAttributes** ()'
- name: Assets\Resource::getContent
  id: api/phalcon_assets_resource#getcontent
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **getContent** (\[*mixed* $basePath\])

    Returns the content of the resource as an string Optionally a base path where the resource is located can be set
- name: Assets\Resource::getFilter
  id: api/phalcon_assets_resource#getfilter
  summary: null
  belongs_to: Assets\Resource
  description: '### public **getFilter** ()'
- name: Assets\Resource::getLocal
  id: api/phalcon_assets_resource#getlocal
  summary: null
  belongs_to: Assets\Resource
  description: '### public **getLocal** ()'
- name: Assets\Resource::getPath
  id: api/phalcon_assets_resource#getpath
  summary: null
  belongs_to: Assets\Resource
  description: '### public **getPath** ()'
- name: Assets\Resource::getRealSourcePath
  id: api/phalcon_assets_resource#getrealsourcepath
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **getRealSourcePath** (\[*mixed* $basePath\])

    Returns the complete location where the resource is located
- name: Assets\Resource::getRealTargetPath
  id: api/phalcon_assets_resource#getrealtargetpath
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Assets\Resource
  description: "### public **getRealTargetPath** (\\[*mixed* $basePath\\])\n\nReturns the complete location where the resource must be written\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource.html)"
- name: Assets\Resource::getRealTargetUri
  id: api/phalcon_assets_resource#getrealtargeturi
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **getRealTargetUri** ()

    Returns the real target uri for the generated HTML
- name: Assets\Resource::getSourcePath
  id: api/phalcon_assets_resource#getsourcepath
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **getSourcePath** ()

    ...
- name: Assets\Resource::getTargetPath
  id: api/phalcon_assets_resource#gettargetpath
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **getTargetPath** ()

    ...
- name: Assets\Resource::getTargetUri
  id: api/phalcon_assets_resource#gettargeturi
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **getTargetUri** ()

    ...

    ### public **\_\_construct** (*string* $type, *string* $path, \[*boolean* $local\], \[*boolean* $filter\], \[*array* $attributes\])

    Phalcon\Assets\Resource constructor
- name: Assets\Resource::getType
  id: api/phalcon_assets_resource#gettype
  summary: null
  belongs_to: Assets\Resource
  description: '### public **getType** ()'
- name: Assets\Resource::setAttributes
  id: api/phalcon_assets_resource#setattributes
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setAttributes** (*array* $attributes)

    Sets extra HTML attributes
- name: Assets\Resource::setFilter
  id: api/phalcon_assets_resource#setfilter
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setFilter** (*mixed* $filter)

    Sets if the resource must be filtered or not
- name: Assets\Resource::setLocal
  id: api/phalcon_assets_resource#setlocal
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setLocal** (*mixed* $local)

    Sets if the resource is local or external
- name: Assets\Resource::setPath
  id: api/phalcon_assets_resource#setpath
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setPath** (*mixed* $path)

    Sets the resource’s path
- name: Assets\Resource::setSourcePath
  id: api/phalcon_assets_resource#setsourcepath
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setSourcePath** (*mixed* $sourcePath)

    Sets the resource’s source path
- name: Assets\Resource::setTargetPath
  id: api/phalcon_assets_resource#settargetpath
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setTargetPath** (*mixed* $targetPath)

    Sets the resource’s target path
- name: Assets\Resource::setTargetUri
  id: api/phalcon_assets_resource#settargeturi
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setTargetUri** (*mixed* $targetUri)

    Sets a target uri for the generated HTML
- name: Assets\Resource::setType
  id: api/phalcon_assets_resource#settype
  summary: null
  belongs_to: Assets\Resource
  description: |-
    ### public **setType** (*mixed* $type)

    Sets the resource’s type
- name: Assets\Resource\Css
  id: api/phalcon_assets_resource_css
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Resource\\Css**\n\n*extends* class [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/resource/css.zep)\n\nRepresents CSS resources\n\n## Methods\n\n### public **\\_\\_construct** (*string* $path, \\[*boolean* $local\\], \\[*boolean* $filter\\], \\[*array* $attributes\\])\n\n### public **getType** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getPath** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getLocal** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getFilter** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getAttributes** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getSourcePath** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n...\n\n### public **getTargetPath** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n...\n\n### public **getTargetUri** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n...\n\n### public **setType** (*mixed* $type) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s type\n\n### public **setPath** (*mixed* $path) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s path\n\n### public **setLocal** (*mixed* $local) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets if the resource is local or external\n\n### public **setFilter** (*mixed* $filter) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets if the resource must be filtered or not\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets extra HTML attributes\n\n### public **setTargetUri** (*mixed* $targetUri) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets a target uri for the generated HTML\n\n### public **setSourcePath** (*mixed* $sourcePath) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s source path\n\n### public **setTargetPath** (*mixed* $targetPath) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s target path\n\n### public **getContent** (\\[*mixed* $basePath\\]) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the content of the resource as an string Optionally a base path where the resource is located can be set\n\n### public **getRealTargetUri** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the real target uri for the generated HTML\n\n### public **getRealSourcePath** (\\[*mixed* $basePath\\]) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the complete location where the resource is located\n\n### public **getRealTargetPath** (\\[*mixed* $basePath\\]) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the complete location where the resource must be written\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Css.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Css.html)"
- name: Assets\Resource\Js
  id: api/phalcon_assets_resource_js
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Assets\\Resource\\Js**\n\n*extends* class [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/resource/js.zep)\n\nRepresents Javascript resources\n\n## Methods\n\n### public **\\_\\_construct** (*string* $path, \\[*boolean* $local\\], \\[*boolean* $filter\\], \\[*array* $attributes\\])\n\n### public **getType** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getPath** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getLocal** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getFilter** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getAttributes** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n### public **getSourcePath** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n...\n\n### public **getTargetPath** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n...\n\n### public **getTargetUri** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\n...\n\n### public **setType** (*mixed* $type) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s type\n\n### public **setPath** (*mixed* $path) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s path\n\n### public **setLocal** (*mixed* $local) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets if the resource is local or external\n\n### public **setFilter** (*mixed* $filter) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets if the resource must be filtered or not\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets extra HTML attributes\n\n### public **setTargetUri** (*mixed* $targetUri) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets a target uri for the generated HTML\n\n### public **setSourcePath** (*mixed* $sourcePath) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s source path\n\n### public **setTargetPath** (*mixed* $targetPath) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nSets the resource’s target path\n\n### public **getContent** (\\[*mixed* $basePath\\]) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the content of the resource as an string Optionally a base path where the resource is located can be set\n\n### public **getRealTargetUri** () inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the real target uri for the generated HTML\n\n### public **getRealSourcePath** (\\[*mixed* $basePath\\]) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the complete location where the resource is located\n\n### public **getRealTargetPath** (\\[*mixed* $basePath\\]) inherited from [*Phalcon\\Assets\\Resource*](phalcon_assets_resource)\n\nReturns the complete location where the resource must be written\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Js.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Js.html)"
- name: Cache\Backend
  id: api/phalcon_cache_backend
  summary: This class implements common functionality for backend adapters
  description: "# Abstract class **Phalcon\\Cache\\Backend**\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend.zep)\n\nThis class implements common functionality for backend adapters. A backend cache adapter may extend this class\n\n## Methods\n\n### public **getFrontend** ()\n\n...\n\n### public **setFrontend** (*mixed* $frontend)\n\n...\n\n### public **getOptions** ()\n\n...\n\n### public **setOptions** (*mixed* $options)\n\n...\n\n### public **getLastKey** ()\n\n...\n\n### public **setLastKey** (*mixed* $lastKey)\n\n...\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\])\n\nPhalcon\\Cache\\Backend constructor\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\])\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\])\n\nStops the frontend without store any cached content\n\n### public **isFresh** ()\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** ()\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** ()\n\nGets the last lifetime set\n\n### abstract public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **save** (\\[*mixed* $keyName\\], \\[*mixed* $content\\], \\[*mixed* $lifetime\\], \\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **delete** (*mixed* $keyName) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **queryKeys** (\\[*mixed* $prefix\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **exists** (\\[*mixed* $keyName\\], \\[*mixed* $lifetime\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend.html)"
- name: Cache\Backend::getFrontend
  id: api/phalcon_cache_backend#getfrontend
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **getFrontend** ()

    ...
- name: Cache\Backend::getLastKey
  id: api/phalcon_cache_backend#getlastkey
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **getLastKey** ()

    ...
- name: Cache\Backend::getLifetime
  id: api/phalcon_cache_backend#getlifetime
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Backend
  description: "### public *int* **getLifetime** ()\n\nGets the last lifetime set\n\n### abstract public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **save** (\\[*mixed* $keyName\\], \\[*mixed* $content\\], \\[*mixed* $lifetime\\], \\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **delete** (*mixed* $keyName) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **queryKeys** (\\[*mixed* $prefix\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n### abstract public **exists** (\\[*mixed* $keyName\\], \\[*mixed* $lifetime\\]) inherited from [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend.html)"
- name: Cache\Backend::getOptions
  id: api/phalcon_cache_backend#getoptions
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **getOptions** ()

    ...
- name: Cache\Backend::isFresh
  id: api/phalcon_cache_backend#isfresh
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **isFresh** ()

    Checks whether the last cache is fresh or cached
- name: Cache\Backend::isStarted
  id: api/phalcon_cache_backend#isstarted
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **isStarted** ()

    Checks whether the cache has starting buffering or not
- name: Cache\Backend::setFrontend
  id: api/phalcon_cache_backend#setfrontend
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **setFrontend** (*mixed* $frontend)

    ...
- name: Cache\Backend::setLastKey
  id: api/phalcon_cache_backend#setlastkey
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **setLastKey** (*mixed* $lastKey)

    ...

    ### public **\_\_construct** ([*Phalcon\Cache\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \[*array* $options\])

    Phalcon\Cache\Backend constructor
- name: Cache\Backend::setOptions
  id: api/phalcon_cache_backend#setoptions
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **setOptions** (*mixed* $options)

    ...
- name: Cache\Backend::start
  id: api/phalcon_cache_backend#start
  summary: Starts a cache
  belongs_to: Cache\Backend
  description: |-
    ### public *mixed* **start** (*int* \| *string* $keyName, \[*int* $lifetime\])

    Starts a cache. The keyname allows to identify the created fragment
- name: Cache\Backend::stop
  id: api/phalcon_cache_backend#stop
  summary: null
  belongs_to: Cache\Backend
  description: |-
    ### public **stop** (\[*mixed* $stopBuffer\])

    Stops the frontend without store any cached content
- name: Cache\BackendInterface
  id: api/phalcon_cache_backendinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Cache\\BackendInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backendinterface.zep)\n\n## Methods\n\n### abstract public **start** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\n...\n\n### abstract public **stop** (\\[*mixed* $stopBuffer\\])\n\n...\n\n### abstract public **getFrontend** ()\n\n...\n\n### abstract public **getOptions** ()\n\n...\n\n### abstract public **isFresh** ()\n\n...\n\n### abstract public **isStarted** ()\n\n...\n\n### abstract public **setLastKey** (*mixed* $lastKey)\n\n...\n\n### abstract public **getLastKey** ()\n\n...\n\n### abstract public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\n...\n\n### abstract public **save** (\\[*mixed* $keyName\\], \\[*mixed* $content\\], \\[*mixed* $lifetime\\], \\[*mixed* $stopBuffer\\])\n\n...\n\n### abstract public **delete** (*mixed* $keyName)\n\n...\n\n### abstract public **queryKeys** (\\[*mixed* $prefix\\])\n\n...\n\n### abstract public **exists** (\\[*mixed* $keyName\\], \\[*mixed* $lifetime\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_BackendInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_BackendInterface.html)"
- name: Cache\BackendInterface::delete
  id: api/phalcon_cache_backendinterface#delete
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **delete** (*mixed* $keyName)

    ...
- name: Cache\BackendInterface::exists
  id: api/phalcon_cache_backendinterface#exists
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\BackendInterface
  description: "### abstract public **exists** (\\[*mixed* $keyName\\], \\[*mixed* $lifetime\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_BackendInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_BackendInterface.html)"
- name: Cache\BackendInterface::get
  id: api/phalcon_cache_backendinterface#get
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    ...
- name: Cache\BackendInterface::getFrontend
  id: api/phalcon_cache_backendinterface#getfrontend
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **getFrontend** ()

    ...
- name: Cache\BackendInterface::getLastKey
  id: api/phalcon_cache_backendinterface#getlastkey
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **getLastKey** ()

    ...
- name: Cache\BackendInterface::getOptions
  id: api/phalcon_cache_backendinterface#getoptions
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **getOptions** ()

    ...
- name: Cache\BackendInterface::isFresh
  id: api/phalcon_cache_backendinterface#isfresh
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **isFresh** ()

    ...
- name: Cache\BackendInterface::isStarted
  id: api/phalcon_cache_backendinterface#isstarted
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **isStarted** ()

    ...
- name: Cache\BackendInterface::queryKeys
  id: api/phalcon_cache_backendinterface#querykeys
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **queryKeys** (\[*mixed* $prefix\])

    ...
- name: Cache\BackendInterface::save
  id: api/phalcon_cache_backendinterface#save
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **save** (\[*mixed* $keyName\], \[*mixed* $content\], \[*mixed* $lifetime\], \[*mixed* $stopBuffer\])

    ...
- name: Cache\BackendInterface::setLastKey
  id: api/phalcon_cache_backendinterface#setlastkey
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **setLastKey** (*mixed* $lastKey)

    ...
- name: Cache\BackendInterface::start
  id: api/phalcon_cache_backendinterface#start
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **start** (*mixed* $keyName, \[*mixed* $lifetime\])

    ...
- name: Cache\BackendInterface::stop
  id: api/phalcon_cache_backendinterface#stop
  summary: null
  belongs_to: Cache\BackendInterface
  description: |-
    ### abstract public **stop** (\[*mixed* $stopBuffer\])

    ...
- name: Cache\Backend\Apc
  id: api/phalcon_cache_backend_apc
  summary: Query the existing cached keys
  description: "# Class **Phalcon\\Cache\\Backend\\Apc**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/apc.zep)\n\nAllows to cache output fragments, PHP data and raw data using an APC backend\n\n``` php\nuse Phalcon\\Cache\\Backend\\Apc;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n$cache = new Apc(\n    $frontCache,\n    [\n        \"prefix\" => \"app-data\",\n    ]\n);\n\n// Cache arbitrary data\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*string* \\| *int* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the APC backend and stops the frontend\n\n### public **increment** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nIncrement of a given key, by number $value\n\n### public **decrement** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nDecrement of a given key, by number $value\n\n### public **delete** (*mixed* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* \\| *int* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it hasn’t expired\n\n### public **flush** ()\n\nImmediately invalidates all existing items.\n\n``` php\nuse Phalcon\\Cache\\Backend\\Apc;\n\n$cache = new Apc($frontCache, [\"prefix\" => \"app-data\"]);\n\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// 'my-data' and all other used keys are deleted\n$cache->flush();\n```\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nPhalcon\\Cache\\Backend constructor\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Apc.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Apc.html)"
- name: Cache\Backend\Apc::decrement
  id: api/phalcon_cache_backend_apc#decrement
  summary: null
  belongs_to: Cache\Backend\Apc
  description: |-
    ### public **decrement** (\[*string* $keyName\], \[*mixed* $value\])

    Decrement of a given key, by number $value
- name: Cache\Backend\Apc::delete
  id: api/phalcon_cache_backend_apc#delete
  summary: null
  belongs_to: Cache\Backend\Apc
  description: |-
    ### public **delete** (*mixed* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\Apc::exists
  id: api/phalcon_cache_backend_apc#exists
  summary: null
  belongs_to: Cache\Backend\Apc
  description: |-
    ### public **exists** (\[*string* \| *int* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it hasn’t expired
- name: Cache\Backend\Apc::flush
  id: api/phalcon_cache_backend_apc#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\Apc
  description: "### public **flush** ()\n\nImmediately invalidates all existing items.\n\n``` php\nuse Phalcon\\Cache\\Backend\\Apc;\n\n$cache = new Apc($frontCache, [\"prefix\" => \"app-data\"]);\n\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// 'my-data' and all other used keys are deleted\n$cache->flush();\n```\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nPhalcon\\Cache\\Backend constructor\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Apc.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Apc.html)"
- name: Cache\Backend\Apc::get
  id: api/phalcon_cache_backend_apc#get
  summary: null
  belongs_to: Cache\Backend\Apc
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\Apc::increment
  id: api/phalcon_cache_backend_apc#increment
  summary: null
  belongs_to: Cache\Backend\Apc
  description: |-
    ### public **increment** (\[*string* $keyName\], \[*mixed* $value\])

    Increment of a given key, by number $value
- name: Cache\Backend\Apc::queryKeys
  id: api/phalcon_cache_backend_apc#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\Apc
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\Apc::save
  id: api/phalcon_cache_backend_apc#save
  summary: null
  belongs_to: Cache\Backend\Apc
  description: |-
    ### public **save** (\[*string* \| *int* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the APC backend and stops the frontend
- name: Cache\Backend\File
  id: api/phalcon_cache_backend_file
  summary: Query the existing cached keys
  description: "# Class **Phalcon\\Cache\\Backend\\File**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/file.zep)\n\nAllows to cache output fragments using a file backend\n\n``` php\nuse Phalcon\\Cache\\Backend\\File;\nuse Phalcon\\Cache\\Frontend\\Output as FrontOutput;\n\n// Cache the file for 2 days\n$frontendOptions = [\n    \"lifetime\" => 172800,\n];\n\n// Create an output cache\n$frontCache = FrontOutput($frontOptions);\n\n// Set the cache directory\n$backendOptions = [\n    \"cacheDir\" => \"../app/cache/\",\n];\n\n// Create the File backend\n$cache = new File($frontCache, $backendOptions);\n\n$content = $cache->start(\"my-cache\");\n\nif ($content === null) {\n    echo \"<h1>\", time(), \"</h1>\";\n\n    $cache->save();\n} else {\n    echo $content;\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, *array* $options)\n\nPhalcon\\Cache\\Backend\\File constructor\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*int* \\| *string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the file backend and stops the frontend\n\n### public **delete** (*int* \\| *string* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* \\| *int* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it isn’t expired\n\n### public **increment** (\\[*string* \\| *int* $keyName\\], \\[*mixed* $value\\])\n\nIncrement of a given key, by number $value\n\n### public **decrement** (\\[*string* \\| *int* $keyName\\], \\[*mixed* $value\\])\n\nDecrement of a given key, by number $value\n\n### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getKey** (*mixed* $key)\n\nReturn a file-system safe identifier for a given key\n\n### public **useSafeKey** (*mixed* $useSafeKey)\n\nSet whether to use the safekey or not\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_File.html)"
- name: Cache\Backend\File::decrement
  id: api/phalcon_cache_backend_file#decrement
  summary: null
  belongs_to: Cache\Backend\File
  description: |-
    ### public **decrement** (\[*string* \| *int* $keyName\], \[*mixed* $value\])

    Decrement of a given key, by number $value
- name: Cache\Backend\File::delete
  id: api/phalcon_cache_backend_file#delete
  summary: null
  belongs_to: Cache\Backend\File
  description: |-
    ### public **delete** (*int* \| *string* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\File::exists
  id: api/phalcon_cache_backend_file#exists
  summary: null
  belongs_to: Cache\Backend\File
  description: |-
    ### public **exists** (\[*string* \| *int* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it isn’t expired
- name: Cache\Backend\File::flush
  id: api/phalcon_cache_backend_file#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\File
  description: |-
    ### public **flush** ()

    Immediately invalidates all existing items.
- name: Cache\Backend\File::get
  id: api/phalcon_cache_backend_file#get
  summary: null
  belongs_to: Cache\Backend\File
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\File::getKey
  id: api/phalcon_cache_backend_file#getkey
  summary: null
  belongs_to: Cache\Backend\File
  description: |-
    ### public **getKey** (*mixed* $key)

    Return a file-system safe identifier for a given key
- name: Cache\Backend\File::increment
  id: api/phalcon_cache_backend_file#increment
  summary: null
  belongs_to: Cache\Backend\File
  description: |-
    ### public **increment** (\[*string* \| *int* $keyName\], \[*mixed* $value\])

    Increment of a given key, by number $value
- name: Cache\Backend\File::queryKeys
  id: api/phalcon_cache_backend_file#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\File
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\File::save
  id: api/phalcon_cache_backend_file#save
  summary: null
  belongs_to: Cache\Backend\File
  description: |-
    ### public **save** (\[*int* \| *string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the file backend and stops the frontend
- name: Cache\Backend\File::useSafeKey
  id: api/phalcon_cache_backend_file#usesafekey
  summary: Starts a cache
  belongs_to: Cache\Backend\File
  description: "### public **useSafeKey** (*mixed* $useSafeKey)\n\nSet whether to use the safekey or not\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_File.html)"
- name: Cache\Backend\Libmemcached
  id: api/phalcon_cache_backend_libmemcached
  summary: Allows to cache output fragments, PHP data or raw data to a libmemcached backend
  description: "# Class **Phalcon\\Cache\\Backend\\Libmemcached**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/libmemcached.zep)\n\nAllows to cache output fragments, PHP data or raw data to a libmemcached backend. Per default persistent memcached connection pools are used.\n\n``` php\nuse Phalcon\\Cache\\Backend\\Libmemcached;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the Cache setting memcached connection options\n$cache = new Libmemcached(\n    $frontCache,\n    [\n        \"servers\" => [\n            [\n                \"host\"   => \"127.0.0.1\",\n                \"port\"   => 11211,\n                \"weight\" => 1,\n            ],\n        ],\n        \"client\" => [\n            \\Memcached::OPT_HASH       => \\Memcached::HASH_MD5,\n            \\Memcached::OPT_PREFIX_KEY => \"prefix.\",\n        ],\n    ]\n);\n\n// Cache arbitrary data\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\])\n\nPhalcon\\Cache\\Backend\\Memcache constructor\n\n### public **\\_connect** ()\n\nCreate internal connection to memcached\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*int* \\| *string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the file backend and stops the frontend\n\n### public *boolean* **delete** (*int* \\| *string* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it isn’t expired\n\n### public **increment** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nIncrement of given $keyName by $value\n\n### public **decrement** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nDecrement of $keyName by given $value\n\n### public **flush** ()\n\nImmediately invalidates all existing items. Memcached does not support flush() per default. If you require flush() support, set $config\\[“statsKey”\\]. All modified keys are stored in “statsKey”. Note: statsKey has a negative performance impact.\n\n``` php\n$cache = new \\Phalcon\\Cache\\Backend\\Libmemcached(\n    $frontCache,\n    [\n        \"statsKey\" => \"_PHCM\",\n    ]\n);\n\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// 'my-data' and all other used keys are deleted\n$cache->flush();\n```\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Libmemcached.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Libmemcached.html)"
- name: Cache\Backend\Libmemcached::decrement
  id: api/phalcon_cache_backend_libmemcached#decrement
  summary: null
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public **decrement** (\[*string* $keyName\], \[*mixed* $value\])

    Decrement of $keyName by given $value
- name: Cache\Backend\Libmemcached::delete
  id: api/phalcon_cache_backend_libmemcached#delete
  summary: null
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public *boolean* **delete** (*int* \| *string* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\Libmemcached::exists
  id: api/phalcon_cache_backend_libmemcached#exists
  summary: null
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public **exists** (\[*string* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it isn’t expired
- name: Cache\Backend\Libmemcached::flush
  id: api/phalcon_cache_backend_libmemcached#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\Libmemcached
  description: "### public **flush** ()\n\nImmediately invalidates all existing items. Memcached does not support flush() per default. If you require flush() support, set $config\\[“statsKey”\\]. All modified keys are stored in “statsKey”. Note: statsKey has a negative performance impact.\n\n``` php\n$cache = new \\Phalcon\\Cache\\Backend\\Libmemcached(\n    $frontCache,\n    [\n        \"statsKey\" => \"_PHCM\",\n    ]\n);\n\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// 'my-data' and all other used keys are deleted\n$cache->flush();\n```\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Libmemcached.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Libmemcached.html)"
- name: Cache\Backend\Libmemcached::get
  id: api/phalcon_cache_backend_libmemcached#get
  summary: null
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\Libmemcached::increment
  id: api/phalcon_cache_backend_libmemcached#increment
  summary: null
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public **increment** (\[*string* $keyName\], \[*mixed* $value\])

    Increment of given $keyName by $value
- name: Cache\Backend\Libmemcached::queryKeys
  id: api/phalcon_cache_backend_libmemcached#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\Libmemcached::save
  id: api/phalcon_cache_backend_libmemcached#save
  summary: null
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public **save** (\[*int* \| *string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the file backend and stops the frontend
- name: Cache\Backend\Libmemcached::_connect
  id: api/phalcon_cache_backend_libmemcached#_connect
  summary: null
  belongs_to: Cache\Backend\Libmemcached
  description: |-
    ### public **\_connect** ()

    Create internal connection to memcached
- name: Cache\Backend\Memcache
  id: api/phalcon_cache_backend_memcache
  summary: Query the existing cached keys
  description: "# Class **Phalcon\\Cache\\Backend\\Memcache**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/memcache.zep)\n\nAllows to cache output fragments, PHP data or raw data to a memcache backend\n\nThis adapter uses the special memcached key “\\_PHCM” to store all the keys internally used by the adapter\n\n``` php\nuse Phalcon\\Cache\\Backend\\Memcache;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the Cache setting memcached connection options\n$cache = new Memcache(\n    $frontCache,\n    [\n        \"host\"       => \"localhost\",\n        \"port\"       => 11211,\n        \"persistent\" => false,\n    ]\n);\n\n// Cache arbitrary data\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\])\n\nPhalcon\\Cache\\Backend\\Memcache constructor\n\n### public **\\_connect** ()\n\nCreate internal connection to memcached\n\n### public **addServers** (*mixed* $host, *mixed* $port, \\[*mixed* $persistent\\])\n\nAdd servers to memcache pool\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*int* \\| *string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the file backend and stops the frontend\n\n### public *boolean* **delete** (*int* \\| *string* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it isn’t expired\n\n### public **increment** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nIncrement of given $keyName by $value\n\n### public **decrement** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nDecrement of $keyName by given $value\n\n### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memcache.html)"
- name: Cache\Backend\Memcache::addServers
  id: api/phalcon_cache_backend_memcache#addservers
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **addServers** (*mixed* $host, *mixed* $port, \[*mixed* $persistent\])

    Add servers to memcache pool
- name: Cache\Backend\Memcache::decrement
  id: api/phalcon_cache_backend_memcache#decrement
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **decrement** (\[*string* $keyName\], \[*mixed* $value\])

    Decrement of $keyName by given $value
- name: Cache\Backend\Memcache::delete
  id: api/phalcon_cache_backend_memcache#delete
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public *boolean* **delete** (*int* \| *string* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\Memcache::exists
  id: api/phalcon_cache_backend_memcache#exists
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **exists** (\[*string* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it isn’t expired
- name: Cache\Backend\Memcache::flush
  id: api/phalcon_cache_backend_memcache#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\Memcache
  description: "### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memcache.html)"
- name: Cache\Backend\Memcache::get
  id: api/phalcon_cache_backend_memcache#get
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\Memcache::increment
  id: api/phalcon_cache_backend_memcache#increment
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **increment** (\[*string* $keyName\], \[*mixed* $value\])

    Increment of given $keyName by $value
- name: Cache\Backend\Memcache::queryKeys
  id: api/phalcon_cache_backend_memcache#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\Memcache::save
  id: api/phalcon_cache_backend_memcache#save
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **save** (\[*int* \| *string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the file backend and stops the frontend
- name: Cache\Backend\Memcache::_connect
  id: api/phalcon_cache_backend_memcache#_connect
  summary: null
  belongs_to: Cache\Backend\Memcache
  description: |-
    ### public **\_connect** ()

    Create internal connection to memcached
- name: Cache\Backend\Memory
  id: api/phalcon_cache_backend_memory
  summary: Stores content in memory
  description: "# Class **Phalcon\\Cache\\Backend\\Memory**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface), [Serializable](http://php.net/manual/en/class.serializable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/memory.zep)\n\nStores content in memory. Data is lost when the request is finished\n\n``` php\nuse Phalcon\\Cache\\Backend\\Memory;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data\n$frontCache = new FrontData();\n\n$cache = new Memory($frontCache);\n\n// Cache arbitrary data\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the backend and stops the frontend\n\n### public *boolean* **delete** (*string* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* \\| *int* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it hasn’t expired\n\n### public **increment** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nIncrement of given $keyName by $value\n\n### public **decrement** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nDecrement of $keyName by given $value\n\n### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **serialize** ()\n\nRequired for interface \\Serializable\n\n### public **unserialize** (*mixed* $data)\n\nRequired for interface \\Serializable\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nPhalcon\\Cache\\Backend constructor\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memory.html)"
- name: Cache\Backend\Memory::decrement
  id: api/phalcon_cache_backend_memory#decrement
  summary: null
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **decrement** (\[*string* $keyName\], \[*mixed* $value\])

    Decrement of $keyName by given $value
- name: Cache\Backend\Memory::delete
  id: api/phalcon_cache_backend_memory#delete
  summary: null
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public *boolean* **delete** (*string* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\Memory::exists
  id: api/phalcon_cache_backend_memory#exists
  summary: null
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **exists** (\[*string* \| *int* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it hasn’t expired
- name: Cache\Backend\Memory::flush
  id: api/phalcon_cache_backend_memory#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **flush** ()

    Immediately invalidates all existing items.
- name: Cache\Backend\Memory::get
  id: api/phalcon_cache_backend_memory#get
  summary: null
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\Memory::increment
  id: api/phalcon_cache_backend_memory#increment
  summary: null
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **increment** (\[*string* $keyName\], \[*mixed* $value\])

    Increment of given $keyName by $value
- name: Cache\Backend\Memory::queryKeys
  id: api/phalcon_cache_backend_memory#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\Memory::save
  id: api/phalcon_cache_backend_memory#save
  summary: null
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **save** (\[*string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the backend and stops the frontend
- name: Cache\Backend\Memory::serialize
  id: api/phalcon_cache_backend_memory#serialize
  summary: null
  belongs_to: Cache\Backend\Memory
  description: |-
    ### public **serialize** ()

    Required for interface \Serializable
- name: Cache\Backend\Memory::unserialize
  id: api/phalcon_cache_backend_memory#unserialize
  summary: Starts a cache
  belongs_to: Cache\Backend\Memory
  description: "### public **unserialize** (*mixed* $data)\n\nRequired for interface \\Serializable\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nPhalcon\\Cache\\Backend constructor\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memory.html)"
- name: Cache\Backend\Mongo
  id: api/phalcon_cache_backend_mongo
  summary: Query the existing cached keys
  description: "# Class **Phalcon\\Cache\\Backend\\Mongo**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/mongo.zep)\n\nAllows to cache output fragments, PHP data or raw data to a MongoDb backend\n\n``` php\nuse Phalcon\\Cache\\Backend\\Mongo;\nuse Phalcon\\Cache\\Frontend\\Base64;\n\n// Cache data for 2 days\n$frontCache = new Base64(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create a MongoDB cache\n$cache = new Mongo(\n    $frontCache,\n    [\n        \"server\"     => \"mongodb://localhost\",\n        \"db\"         => \"caches\",\n        \"collection\" => \"images\",\n    ]\n);\n\n// Cache arbitrary data\n$cache->save(\n    \"my-data\",\n    file_get_contents(\"some-image.jpg\")\n);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\])\n\nPhalcon\\Cache\\Backend\\Mongo constructor\n\n### final protected *MongoCollection* **\\_getCollection** ()\n\nReturns a MongoDb collection based on the backend parameters\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*int* \\| *string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the file backend and stops the frontend\n\n### public *boolean* **delete** (*int* \\| *string* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it isn’t expired\n\n### public *collection-\\>remove(...)* **gc** ()\n\ngc\n\n### public **increment** (*int* \\| *string* $keyName, \\[*mixed* $value\\])\n\nIncrement of a given key by $value\n\n### public **decrement** (*int* \\| *string* $keyName, \\[*mixed* $value\\])\n\nDecrement of a given key by $value\n\n### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Mongo.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Mongo.html)"
- name: Cache\Backend\Mongo::decrement
  id: api/phalcon_cache_backend_mongo#decrement
  summary: null
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public **decrement** (*int* \| *string* $keyName, \[*mixed* $value\])

    Decrement of a given key by $value
- name: Cache\Backend\Mongo::delete
  id: api/phalcon_cache_backend_mongo#delete
  summary: null
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public *boolean* **delete** (*int* \| *string* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\Mongo::exists
  id: api/phalcon_cache_backend_mongo#exists
  summary: null
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public **exists** (\[*string* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it isn’t expired
- name: Cache\Backend\Mongo::flush
  id: api/phalcon_cache_backend_mongo#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\Mongo
  description: "### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Mongo.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Mongo.html)"
- name: Cache\Backend\Mongo::gc
  id: api/phalcon_cache_backend_mongo#gc
  summary: null
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public *collection-\>remove(...)* **gc** ()

    gc
- name: Cache\Backend\Mongo::get
  id: api/phalcon_cache_backend_mongo#get
  summary: null
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\Mongo::increment
  id: api/phalcon_cache_backend_mongo#increment
  summary: null
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public **increment** (*int* \| *string* $keyName, \[*mixed* $value\])

    Increment of a given key by $value
- name: Cache\Backend\Mongo::queryKeys
  id: api/phalcon_cache_backend_mongo#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\Mongo::save
  id: api/phalcon_cache_backend_mongo#save
  summary: null
  belongs_to: Cache\Backend\Mongo
  description: |-
    ### public **save** (\[*int* \| *string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the file backend and stops the frontend
- name: Cache\Backend\Redis
  id: api/phalcon_cache_backend_redis
  summary: Query the existing cached keys
  description: "# Class **Phalcon\\Cache\\Backend\\Redis**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/redis.zep)\n\nAllows to cache output fragments, PHP data or raw data to a redis backend\n\nThis adapter uses the special redis key “\\_PHCR” to store all the keys internally used by the adapter\n\n``` php\nuse Phalcon\\Cache\\Backend\\Redis;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the Cache setting redis connection options\n$cache = new Redis(\n    $frontCache,\n    [\n        \"host\"       => \"localhost\",\n        \"port\"       => 6379,\n        \"auth\"       => \"foobared\",\n        \"persistent\" => false,\n        \"index\"      => 0,\n    ]\n);\n\n// Cache arbitrary data\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\])\n\nPhalcon\\Cache\\Backend\\Redis constructor\n\n### public **\\_connect** ()\n\nCreate internal connection to redis\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*int* \\| *string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the file backend and stops the frontend\n\n``` php\n$cache->save(\"my-key\", $data);\n\n// Save data termlessly\n$cache->save(\"my-key\", $data, -1);\n```\n\n### public **delete** (*int* \\| *string* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it isn’t expired\n\n### public **increment** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nIncrement of given $keyName by $value\n\n### public **decrement** (\\[*string* $keyName\\], \\[*mixed* $value\\])\n\nDecrement of $keyName by given $value\n\n### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Redis.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Redis.html)"
- name: Cache\Backend\Redis::decrement
  id: api/phalcon_cache_backend_redis#decrement
  summary: null
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **decrement** (\[*string* $keyName\], \[*mixed* $value\])

    Decrement of $keyName by given $value
- name: Cache\Backend\Redis::delete
  id: api/phalcon_cache_backend_redis#delete
  summary: null
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **delete** (*int* \| *string* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\Redis::exists
  id: api/phalcon_cache_backend_redis#exists
  summary: null
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **exists** (\[*string* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it isn’t expired
- name: Cache\Backend\Redis::flush
  id: api/phalcon_cache_backend_redis#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\Redis
  description: "### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Redis.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Redis.html)"
- name: Cache\Backend\Redis::get
  id: api/phalcon_cache_backend_redis#get
  summary: null
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\Redis::increment
  id: api/phalcon_cache_backend_redis#increment
  summary: null
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **increment** (\[*string* $keyName\], \[*mixed* $value\])

    Increment of given $keyName by $value
- name: Cache\Backend\Redis::queryKeys
  id: api/phalcon_cache_backend_redis#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\Redis::save
  id: api/phalcon_cache_backend_redis#save
  summary: null
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **save** (\[*int* \| *string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the file backend and stops the frontend

    ``` php
    $cache->save("my-key", $data);

    // Save data termlessly
    $cache->save("my-key", $data, -1);
    ```
- name: Cache\Backend\Redis::_connect
  id: api/phalcon_cache_backend_redis#_connect
  summary: null
  belongs_to: Cache\Backend\Redis
  description: |-
    ### public **\_connect** ()

    Create internal connection to redis
- name: Cache\Backend\Xcache
  id: api/phalcon_cache_backend_xcache
  summary: Query the existing cached keys
  description: "# Class **Phalcon\\Cache\\Backend\\Xcache**\n\n*extends* abstract class [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n*implements* [*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/xcache.zep)\n\nAllows to cache output fragments, PHP data and raw data using an XCache backend\n\n``` php\nuse Phalcon\\Cache\\Backend\\Xcache;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n       \"lifetime\" => 172800,\n    ]\n);\n\n$cache = new Xcache(\n    $frontCache,\n    [\n        \"prefix\" => \"app-data\",\n    ]\n);\n\n// Cache arbitrary data\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface) $frontend, \\[*array* $options\\])\n\nPhalcon\\Cache\\Backend\\Xcache constructor\n\n### public **get** (*mixed* $keyName, \\[*mixed* $lifetime\\])\n\nReturns a cached content\n\n### public **save** (\\[*int* \\| *string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into the file backend and stops the frontend\n\n### public *boolean* **delete** (*int* \\| *string* $keyName)\n\nDeletes a value from the cache by its key\n\n### public **queryKeys** (\\[*mixed* $prefix\\])\n\nQuery the existing cached keys.\n\n``` php\n$cache->save(\"users-ids\", [1, 2, 3]);\n$cache->save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache->queryKeys(\"users\")); // [\"users-ids\"]\n```\n\n### public **exists** (\\[*string* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists and it isn’t expired\n\n### public **increment** (*string* $keyName, \\[*mixed* $value\\])\n\nAtomic increment of a given key, by number $value\n\n### public **decrement** (*string* $keyName, \\[*mixed* $value\\])\n\nAtomic decrement of a given key, by number $value\n\n### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Xcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Xcache.html)"
- name: Cache\Backend\Xcache::decrement
  id: api/phalcon_cache_backend_xcache#decrement
  summary: null
  belongs_to: Cache\Backend\Xcache
  description: |-
    ### public **decrement** (*string* $keyName, \[*mixed* $value\])

    Atomic decrement of a given key, by number $value
- name: Cache\Backend\Xcache::delete
  id: api/phalcon_cache_backend_xcache#delete
  summary: null
  belongs_to: Cache\Backend\Xcache
  description: |-
    ### public *boolean* **delete** (*int* \| *string* $keyName)

    Deletes a value from the cache by its key
- name: Cache\Backend\Xcache::exists
  id: api/phalcon_cache_backend_xcache#exists
  summary: null
  belongs_to: Cache\Backend\Xcache
  description: |-
    ### public **exists** (\[*string* $keyName\], \[*int* $lifetime\])

    Checks if cache exists and it isn’t expired
- name: Cache\Backend\Xcache::flush
  id: api/phalcon_cache_backend_xcache#flush
  summary: Immediately invalidates all existing items
  belongs_to: Cache\Backend\Xcache
  description: "### public **flush** ()\n\nImmediately invalidates all existing items.\n\n### public **getFrontend** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setFrontend** (*mixed* $frontend) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getOptions** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setOptions** (*mixed* $options) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **getLastKey** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public **setLastKey** (*mixed* $lastKey) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\n...\n\n### public *mixed* **start** (*int* \\| *string* $keyName, \\[*int* $lifetime\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStarts a cache. The keyname allows to identify the created fragment\n\n### public **stop** (\\[*mixed* $stopBuffer\\]) inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nStops the frontend without store any cached content\n\n### public **isFresh** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the last cache is fresh or cached\n\n### public **isStarted** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nChecks whether the cache has starting buffering or not\n\n### public *int* **getLifetime** () inherited from [*Phalcon\\Cache\\Backend*](phalcon_cache_backend)\n\nGets the last lifetime set\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Xcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Xcache.html)"
- name: Cache\Backend\Xcache::get
  id: api/phalcon_cache_backend_xcache#get
  summary: null
  belongs_to: Cache\Backend\Xcache
  description: |-
    ### public **get** (*mixed* $keyName, \[*mixed* $lifetime\])

    Returns a cached content
- name: Cache\Backend\Xcache::increment
  id: api/phalcon_cache_backend_xcache#increment
  summary: null
  belongs_to: Cache\Backend\Xcache
  description: |-
    ### public **increment** (*string* $keyName, \[*mixed* $value\])

    Atomic increment of a given key, by number $value
- name: Cache\Backend\Xcache::queryKeys
  id: api/phalcon_cache_backend_xcache#querykeys
  summary: Query the existing cached keys
  belongs_to: Cache\Backend\Xcache
  description: |-
    ### public **queryKeys** (\[*mixed* $prefix\])

    Query the existing cached keys.

    ``` php
    $cache->save("users-ids", [1, 2, 3]);
    $cache->save("projects-ids", [4, 5, 6]);

    var_dump($cache->queryKeys("users")); // ["users-ids"]
    ```
- name: Cache\Backend\Xcache::save
  id: api/phalcon_cache_backend_xcache#save
  summary: null
  belongs_to: Cache\Backend\Xcache
  description: |-
    ### public **save** (\[*int* \| *string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into the file backend and stops the frontend
- name: Cache\Exception
  id: api/phalcon_cache_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Cache\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Exception.html)"
- name: Cache\FrontendInterface
  id: api/phalcon_cache_frontendinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Cache\\FrontendInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontendinterface.zep)\n\n## Methods\n\n### abstract public **getLifetime** ()\n\n...\n\n### abstract public **isBuffering** ()\n\n...\n\n### abstract public **start** ()\n\n...\n\n### abstract public **getContent** ()\n\n...\n\n### abstract public **stop** ()\n\n...\n\n### abstract public **beforeStore** (*mixed* $data)\n\n...\n\n### abstract public **afterRetrieve** (*mixed* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_FrontendInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_FrontendInterface.html)"
- name: Cache\FrontendInterface::afterRetrieve
  id: api/phalcon_cache_frontendinterface#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\FrontendInterface
  description: "### abstract public **afterRetrieve** (*mixed* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_FrontendInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_FrontendInterface.html)"
- name: Cache\FrontendInterface::beforeStore
  id: api/phalcon_cache_frontendinterface#beforestore
  summary: null
  belongs_to: Cache\FrontendInterface
  description: |-
    ### abstract public **beforeStore** (*mixed* $data)

    ...
- name: Cache\FrontendInterface::getContent
  id: api/phalcon_cache_frontendinterface#getcontent
  summary: null
  belongs_to: Cache\FrontendInterface
  description: |-
    ### abstract public **getContent** ()

    ...
- name: Cache\FrontendInterface::getLifetime
  id: api/phalcon_cache_frontendinterface#getlifetime
  summary: null
  belongs_to: Cache\FrontendInterface
  description: |-
    ### abstract public **getLifetime** ()

    ...
- name: Cache\FrontendInterface::isBuffering
  id: api/phalcon_cache_frontendinterface#isbuffering
  summary: null
  belongs_to: Cache\FrontendInterface
  description: |-
    ### abstract public **isBuffering** ()

    ...
- name: Cache\FrontendInterface::start
  id: api/phalcon_cache_frontendinterface#start
  summary: null
  belongs_to: Cache\FrontendInterface
  description: |-
    ### abstract public **start** ()

    ...
- name: Cache\FrontendInterface::stop
  id: api/phalcon_cache_frontendinterface#stop
  summary: null
  belongs_to: Cache\FrontendInterface
  description: |-
    ### abstract public **stop** ()

    ...
- name: Cache\Frontend\Base64
  id: api/phalcon_cache_frontend_base64
  summary: Allows to cache data converting/deconverting them to base64
  description: "# Class **Phalcon\\Cache\\Frontend\\Base64**\n\n*implements* [*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/base64.zep)\n\nAllows to cache data converting/deconverting them to base64.\n\nThis adapter uses the base64_encode/base64_decode PHP’s functions\n\n``` php\n<?php\n\n// Cache the files for 2 days using a Base64 frontend\n$frontCache = new \\Phalcon\\Cache\\Frontend\\Base64(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n//Create a MongoDB cache\n$cache = new \\Phalcon\\Cache\\Backend\\Mongo(\n    $frontCache,\n    [\n        \"server\"     => \"mongodb://localhost\",\n        \"db\"         => \"caches\",\n        \"collection\" => \"images\",\n    ]\n);\n\n$cacheKey = \"some-image.jpg.cache\";\n\n// Try to get cached image\n$image = $cache->get($cacheKey);\n\nif ($image === null) {\n    // Store the image in the cache\n    $cache->save(\n        $cacheKey,\n        file_get_contents(\"tmp-dir/some-image.jpg\")\n    );\n}\n\nheader(\"Content-Type: image/jpeg\");\n\necho $image;\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $frontendOptions\\])\n\nPhalcon\\Cache\\Frontend\\Base64 constructor\n\n### public **getLifetime** ()\n\nReturns the cache lifetime\n\n### public **isBuffering** ()\n\nCheck whether if frontend is buffering output\n\n### public **start** ()\n\nStarts output frontend. Actually, does nothing in this adapter\n\n### public *string* **getContent** ()\n\nReturns output cached content\n\n### public **stop** ()\n\nStops output frontend\n\n### public **beforeStore** (*mixed* $data)\n\nSerializes data before storing them\n\n### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Base64.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Base64.html)"
- name: Cache\Frontend\Base64::afterRetrieve
  id: api/phalcon_cache_frontend_base64#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Frontend\Base64
  description: "### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Base64.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Base64.html)"
- name: Cache\Frontend\Base64::beforeStore
  id: api/phalcon_cache_frontend_base64#beforestore
  summary: null
  belongs_to: Cache\Frontend\Base64
  description: |-
    ### public **beforeStore** (*mixed* $data)

    Serializes data before storing them
- name: Cache\Frontend\Base64::getContent
  id: api/phalcon_cache_frontend_base64#getcontent
  summary: null
  belongs_to: Cache\Frontend\Base64
  description: |-
    ### public *string* **getContent** ()

    Returns output cached content
- name: Cache\Frontend\Base64::getLifetime
  id: api/phalcon_cache_frontend_base64#getlifetime
  summary: null
  belongs_to: Cache\Frontend\Base64
  description: |-
    ### public **getLifetime** ()

    Returns the cache lifetime
- name: Cache\Frontend\Base64::isBuffering
  id: api/phalcon_cache_frontend_base64#isbuffering
  summary: null
  belongs_to: Cache\Frontend\Base64
  description: |-
    ### public **isBuffering** ()

    Check whether if frontend is buffering output
- name: Cache\Frontend\Base64::start
  id: api/phalcon_cache_frontend_base64#start
  summary: Starts output frontend
  belongs_to: Cache\Frontend\Base64
  description: |-
    ### public **start** ()

    Starts output frontend. Actually, does nothing in this adapter
- name: Cache\Frontend\Base64::stop
  id: api/phalcon_cache_frontend_base64#stop
  summary: null
  belongs_to: Cache\Frontend\Base64
  description: |-
    ### public **stop** ()

    Stops output frontend
- name: Cache\Frontend\Data
  id: api/phalcon_cache_frontend_data
  summary: Starts output frontend
  description: "# Class **Phalcon\\Cache\\Frontend\\Data**\n\n*implements* [*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/data.zep)\n\nAllows to cache native PHP data in a serialized form\n\n``` php\nuse Phalcon\\Cache\\Backend\\File;\nuse Phalcon\\Cache\\Frontend\\Data;\n\n// Cache the files for 2 days using a Data frontend\n$frontCache = new Data(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the component that will cache \"Data\" to a 'File' backend\n// Set the cache file directory - important to keep the '/' at the end of\n// of the value for the folder\n$cache = new File(\n    $frontCache,\n    [\n        \"cacheDir\" => \"../app/cache/\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache->get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null due to cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" => \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache->save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $frontendOptions\\])\n\nPhalcon\\Cache\\Frontend\\Data constructor\n\n### public **getLifetime** ()\n\nReturns the cache lifetime\n\n### public **isBuffering** ()\n\nCheck whether if frontend is buffering output\n\n### public **start** ()\n\nStarts output frontend. Actually, does nothing\n\n### public *string* **getContent** ()\n\nReturns output cached content\n\n### public **stop** ()\n\nStops output frontend\n\n### public **beforeStore** (*mixed* $data)\n\nSerializes data before storing them\n\n### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Data.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Data.html)"
- name: Cache\Frontend\Data::afterRetrieve
  id: api/phalcon_cache_frontend_data#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Frontend\Data
  description: "### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Data.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Data.html)"
- name: Cache\Frontend\Data::beforeStore
  id: api/phalcon_cache_frontend_data#beforestore
  summary: null
  belongs_to: Cache\Frontend\Data
  description: |-
    ### public **beforeStore** (*mixed* $data)

    Serializes data before storing them
- name: Cache\Frontend\Data::getContent
  id: api/phalcon_cache_frontend_data#getcontent
  summary: null
  belongs_to: Cache\Frontend\Data
  description: |-
    ### public *string* **getContent** ()

    Returns output cached content
- name: Cache\Frontend\Data::getLifetime
  id: api/phalcon_cache_frontend_data#getlifetime
  summary: null
  belongs_to: Cache\Frontend\Data
  description: |-
    ### public **getLifetime** ()

    Returns the cache lifetime
- name: Cache\Frontend\Data::isBuffering
  id: api/phalcon_cache_frontend_data#isbuffering
  summary: null
  belongs_to: Cache\Frontend\Data
  description: |-
    ### public **isBuffering** ()

    Check whether if frontend is buffering output
- name: Cache\Frontend\Data::start
  id: api/phalcon_cache_frontend_data#start
  summary: Starts output frontend
  belongs_to: Cache\Frontend\Data
  description: |-
    ### public **start** ()

    Starts output frontend. Actually, does nothing
- name: Cache\Frontend\Data::stop
  id: api/phalcon_cache_frontend_data#stop
  summary: null
  belongs_to: Cache\Frontend\Data
  description: |-
    ### public **stop** ()

    Stops output frontend
- name: Cache\Frontend\Igbinary
  id: api/phalcon_cache_frontend_igbinary
  summary: Starts output frontend
  description: "# Class **Phalcon\\Cache\\Frontend\\Igbinary**\n\n*extends* class [*Phalcon\\Cache\\Frontend\\Data*](phalcon_cache_frontend_data)\n\n*implements* [*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/igbinary.zep)\n\nAllows to cache native PHP data in a serialized form using igbinary extension\n\n``` php\n// Cache the files for 2 days using Igbinary frontend\n$frontCache = new \\Phalcon\\Cache\\Frontend\\Igbinary(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the component that will cache \"Igbinary\" to a \"File\" backend\n// Set the cache file directory - important to keep the \"/\" at the end of\n// of the value for the folder\n$cache = new \\Phalcon\\Cache\\Backend\\File(\n    $frontCache,\n    [\n        \"cacheDir\" => \"../app/cache/\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache->get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null due to cache expiration or data do not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" => \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache->save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $frontendOptions\\])\n\nPhalcon\\Cache\\Frontend\\Data constructor\n\n### public **getLifetime** ()\n\nReturns the cache lifetime\n\n### public **isBuffering** ()\n\nCheck whether if frontend is buffering output\n\n### public **start** ()\n\nStarts output frontend. Actually, does nothing\n\n### public *string* **getContent** ()\n\nReturns output cached content\n\n### public **stop** ()\n\nStops output frontend\n\n### public **beforeStore** (*mixed* $data)\n\nSerializes data before storing them\n\n### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Igbinary.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Igbinary.html)"
- name: Cache\Frontend\Igbinary::afterRetrieve
  id: api/phalcon_cache_frontend_igbinary#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Frontend\Igbinary
  description: "### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Igbinary.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Igbinary.html)"
- name: Cache\Frontend\Igbinary::beforeStore
  id: api/phalcon_cache_frontend_igbinary#beforestore
  summary: null
  belongs_to: Cache\Frontend\Igbinary
  description: |-
    ### public **beforeStore** (*mixed* $data)

    Serializes data before storing them
- name: Cache\Frontend\Igbinary::getContent
  id: api/phalcon_cache_frontend_igbinary#getcontent
  summary: null
  belongs_to: Cache\Frontend\Igbinary
  description: |-
    ### public *string* **getContent** ()

    Returns output cached content
- name: Cache\Frontend\Igbinary::getLifetime
  id: api/phalcon_cache_frontend_igbinary#getlifetime
  summary: null
  belongs_to: Cache\Frontend\Igbinary
  description: |-
    ### public **getLifetime** ()

    Returns the cache lifetime
- name: Cache\Frontend\Igbinary::isBuffering
  id: api/phalcon_cache_frontend_igbinary#isbuffering
  summary: null
  belongs_to: Cache\Frontend\Igbinary
  description: |-
    ### public **isBuffering** ()

    Check whether if frontend is buffering output
- name: Cache\Frontend\Igbinary::start
  id: api/phalcon_cache_frontend_igbinary#start
  summary: Starts output frontend
  belongs_to: Cache\Frontend\Igbinary
  description: |-
    ### public **start** ()

    Starts output frontend. Actually, does nothing
- name: Cache\Frontend\Igbinary::stop
  id: api/phalcon_cache_frontend_igbinary#stop
  summary: null
  belongs_to: Cache\Frontend\Igbinary
  description: |-
    ### public **stop** ()

    Stops output frontend
- name: Cache\Frontend\Json
  id: api/phalcon_cache_frontend_json
  summary: Allows to cache data converting/deconverting them to JSON
  description: "# Class **Phalcon\\Cache\\Frontend\\Json**\n\n*implements* [*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/json.zep)\n\nAllows to cache data converting/deconverting them to JSON.\n\nThis adapter uses the json_encode/json_decode PHP’s functions\n\nAs the data is encoded in JSON other systems accessing the same backend could process them\n\n``` php\n<?php\n\n// Cache the data for 2 days\n$frontCache = new \\Phalcon\\Cache\\Frontend\\Json(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the Cache setting memcached connection options\n$cache = new \\Phalcon\\Cache\\Backend\\Memcache(\n    $frontCache,\n    [\n        \"host\"       => \"localhost\",\n        \"port\"       => 11211,\n        \"persistent\" => false,\n    ]\n);\n\n// Cache arbitrary data\n$cache->save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache->get(\"my-data\");\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $frontendOptions\\])\n\nPhalcon\\Cache\\Frontend\\Base64 constructor\n\n### public **getLifetime** ()\n\nReturns the cache lifetime\n\n### public **isBuffering** ()\n\nCheck whether if frontend is buffering output\n\n### public **start** ()\n\nStarts output frontend. Actually, does nothing\n\n### public *string* **getContent** ()\n\nReturns output cached content\n\n### public **stop** ()\n\nStops output frontend\n\n### public **beforeStore** (*mixed* $data)\n\nSerializes data before storing them\n\n### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Json.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Json.html)"
- name: Cache\Frontend\Json::afterRetrieve
  id: api/phalcon_cache_frontend_json#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Frontend\Json
  description: "### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Json.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Json.html)"
- name: Cache\Frontend\Json::beforeStore
  id: api/phalcon_cache_frontend_json#beforestore
  summary: null
  belongs_to: Cache\Frontend\Json
  description: |-
    ### public **beforeStore** (*mixed* $data)

    Serializes data before storing them
- name: Cache\Frontend\Json::getContent
  id: api/phalcon_cache_frontend_json#getcontent
  summary: null
  belongs_to: Cache\Frontend\Json
  description: |-
    ### public *string* **getContent** ()

    Returns output cached content
- name: Cache\Frontend\Json::getLifetime
  id: api/phalcon_cache_frontend_json#getlifetime
  summary: null
  belongs_to: Cache\Frontend\Json
  description: |-
    ### public **getLifetime** ()

    Returns the cache lifetime
- name: Cache\Frontend\Json::isBuffering
  id: api/phalcon_cache_frontend_json#isbuffering
  summary: null
  belongs_to: Cache\Frontend\Json
  description: |-
    ### public **isBuffering** ()

    Check whether if frontend is buffering output
- name: Cache\Frontend\Json::start
  id: api/phalcon_cache_frontend_json#start
  summary: Starts output frontend
  belongs_to: Cache\Frontend\Json
  description: |-
    ### public **start** ()

    Starts output frontend. Actually, does nothing
- name: Cache\Frontend\Json::stop
  id: api/phalcon_cache_frontend_json#stop
  summary: null
  belongs_to: Cache\Frontend\Json
  description: |-
    ### public **stop** ()

    Stops output frontend
- name: Cache\Frontend\Msgpack
  id: api/phalcon_cache_frontend_msgpack
  summary: Allows to cache native PHP data in a serialized form using msgpack extension This adapter uses a Msgpack frontend to store the cached content and requires msgpack extension
  description: "# Class **Phalcon\\Cache\\Frontend\\Msgpack**\n\n*extends* class [*Phalcon\\Cache\\Frontend\\Data*](phalcon_cache_frontend_data)\n\n*implements* [*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/msgpack.zep)\n\nAllows to cache native PHP data in a serialized form using msgpack extension This adapter uses a Msgpack frontend to store the cached content and requires msgpack extension.\n\n``` php\nuse Phalcon\\Cache\\Backend\\File;\nuse Phalcon\\Cache\\Frontend\\Msgpack;\n\n// Cache the files for 2 days using Msgpack frontend\n$frontCache = new Msgpack(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the component that will cache \"Msgpack\" to a \"File\" backend\n// Set the cache file directory - important to keep the \"/\" at the end of\n// of the value for the folder\n$cache = new File(\n    $frontCache,\n    [\n        \"cacheDir\" => \"../app/cache/\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache->get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null due to cache expiration or data do not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" => \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache->save($cacheKey, $robots);\n}\n\n// Use $robots\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $frontendOptions\\])\n\nPhalcon\\Cache\\Frontend\\Msgpack constructor\n\n### public **getLifetime** ()\n\nReturns the cache lifetime\n\n### public **isBuffering** ()\n\nCheck whether if frontend is buffering output\n\n### public **start** ()\n\nStarts output frontend. Actually, does nothing\n\n### public **getContent** ()\n\nReturns output cached content\n\n### public **stop** ()\n\nStops output frontend\n\n### public **beforeStore** (*mixed* $data)\n\nSerializes data before storing them\n\n### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Msgpack.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Msgpack.html)"
- name: Cache\Frontend\Msgpack::afterRetrieve
  id: api/phalcon_cache_frontend_msgpack#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Frontend\Msgpack
  description: "### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Msgpack.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Msgpack.html)"
- name: Cache\Frontend\Msgpack::beforeStore
  id: api/phalcon_cache_frontend_msgpack#beforestore
  summary: null
  belongs_to: Cache\Frontend\Msgpack
  description: |-
    ### public **beforeStore** (*mixed* $data)

    Serializes data before storing them
- name: Cache\Frontend\Msgpack::getContent
  id: api/phalcon_cache_frontend_msgpack#getcontent
  summary: null
  belongs_to: Cache\Frontend\Msgpack
  description: |-
    ### public **getContent** ()

    Returns output cached content
- name: Cache\Frontend\Msgpack::getLifetime
  id: api/phalcon_cache_frontend_msgpack#getlifetime
  summary: null
  belongs_to: Cache\Frontend\Msgpack
  description: |-
    ### public **getLifetime** ()

    Returns the cache lifetime
- name: Cache\Frontend\Msgpack::isBuffering
  id: api/phalcon_cache_frontend_msgpack#isbuffering
  summary: null
  belongs_to: Cache\Frontend\Msgpack
  description: |-
    ### public **isBuffering** ()

    Check whether if frontend is buffering output
- name: Cache\Frontend\Msgpack::start
  id: api/phalcon_cache_frontend_msgpack#start
  summary: Starts output frontend
  belongs_to: Cache\Frontend\Msgpack
  description: |-
    ### public **start** ()

    Starts output frontend. Actually, does nothing
- name: Cache\Frontend\Msgpack::stop
  id: api/phalcon_cache_frontend_msgpack#stop
  summary: null
  belongs_to: Cache\Frontend\Msgpack
  description: |-
    ### public **stop** ()

    Stops output frontend
- name: Cache\Frontend\None
  id: api/phalcon_cache_frontend_none
  summary: Discards any kind of frontend data input
  description: "# Class **Phalcon\\Cache\\Frontend\\None**\n\n*implements* [*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/none.zep)\n\nDiscards any kind of frontend data input. This frontend does not have expiration time or any other options\n\n``` php\n<?php\n\n//Create a None Cache\n$frontCache = new \\Phalcon\\Cache\\Frontend\\None();\n\n// Create the component that will cache \"Data\" to a \"Memcached\" backend\n// Memcached connection settings\n$cache = new \\Phalcon\\Cache\\Backend\\Memcache(\n    $frontCache,\n    [\n        \"host\" => \"localhost\",\n        \"port\" => \"11211\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// This Frontend always return the data as it's returned by the backend\n$robots = $cache->get($cacheKey);\n\nif ($robots === null) {\n    // This cache doesn't perform any expiration checking, so the data is always expired\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" => \"id\",\n        ]\n    );\n\n    $cache->save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n```\n\n## Methods\n\n### public **getLifetime** ()\n\nReturns cache lifetime, always one second expiring content\n\n### public **isBuffering** ()\n\nCheck whether if frontend is buffering output, always false\n\n### public **start** ()\n\nStarts output frontend\n\n### public *string* **getContent** ()\n\nReturns output cached content\n\n### public **stop** ()\n\nStops output frontend\n\n### public **beforeStore** (*mixed* $data)\n\nPrepare data to be stored\n\n### public **afterRetrieve** (*mixed* $data)\n\nPrepares data to be retrieved to user\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_None.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_None.html)"
- name: Cache\Frontend\None::afterRetrieve
  id: api/phalcon_cache_frontend_none#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Frontend\None
  description: "### public **afterRetrieve** (*mixed* $data)\n\nPrepares data to be retrieved to user\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_None.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_None.html)"
- name: Cache\Frontend\None::beforeStore
  id: api/phalcon_cache_frontend_none#beforestore
  summary: null
  belongs_to: Cache\Frontend\None
  description: |-
    ### public **beforeStore** (*mixed* $data)

    Prepare data to be stored
- name: Cache\Frontend\None::getContent
  id: api/phalcon_cache_frontend_none#getcontent
  summary: null
  belongs_to: Cache\Frontend\None
  description: |-
    ### public *string* **getContent** ()

    Returns output cached content
- name: Cache\Frontend\None::getLifetime
  id: api/phalcon_cache_frontend_none#getlifetime
  summary: null
  belongs_to: Cache\Frontend\None
  description: |-
    ### public **getLifetime** ()

    Returns cache lifetime, always one second expiring content
- name: Cache\Frontend\None::isBuffering
  id: api/phalcon_cache_frontend_none#isbuffering
  summary: null
  belongs_to: Cache\Frontend\None
  description: |-
    ### public **isBuffering** ()

    Check whether if frontend is buffering output, always false
- name: Cache\Frontend\None::start
  id: api/phalcon_cache_frontend_none#start
  summary: null
  belongs_to: Cache\Frontend\None
  description: |-
    ### public **start** ()

    Starts output frontend
- name: Cache\Frontend\None::stop
  id: api/phalcon_cache_frontend_none#stop
  summary: null
  belongs_to: Cache\Frontend\None
  description: |-
    ### public **stop** ()

    Stops output frontend
- name: Cache\Frontend\Output
  id: api/phalcon_cache_frontend_output
  summary: Starts output frontend
  description: "# Class **Phalcon\\Cache\\Frontend\\Output**\n\n*implements* [*Phalcon\\Cache\\FrontendInterface*](phalcon_cache_frontendinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/output.zep)\n\nAllows to cache output fragments captured with ob\\_\\* functions\n\n``` php\n*\n* use Phalcon\\Tag;\n* use Phalcon\\Cache\\Backend\\File;\n* use Phalcon\\Cache\\Frontend\\Output;\n*\n* // Create an Output frontend. Cache the files for 2 days\n* $frontCache = new Output(\n*     [\n*         \"lifetime\" => 172800,\n*     ]\n* );\n*\n* // Create the component that will cache from the \"Output\" to a \"File\" backend\n* // Set the cache file directory - it's important to keep the \"/\" at the end of\n* // the value for the folder\n* $cache = new File(\n*     $frontCache,\n*     [\n*         \"cacheDir\" => \"../app/cache/\",\n*     ]\n* );\n*\n* // Get/Set the cache file to ../app/cache/my-cache.html\n* $content = $cache->start(\"my-cache.html\");\n*\n* // If $content is null then the content will be generated for the cache\n* if (null === $content) {\n*     // Print date and time\n*     echo date(\"r\");\n*\n*     // Generate a link to the sign-up action\n*     echo Tag::linkTo(\n*         [\n*             \"user/signup\",\n*             \"Sign Up\",\n*             \"class\" => \"signup-button\",\n*         ]\n*     );\n*\n*     // Store the output into the cache file\n*     $cache->save();\n* } else {\n*     // Echo the cached output\n*     echo $content;\n* }\n```\n\n- \n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $frontendOptions\\])\n\nPhalcon\\Cache\\Frontend\\Output constructor\n\n### public **getLifetime** ()\n\nReturns the cache lifetime\n\n### public **isBuffering** ()\n\nCheck whether if frontend is buffering output\n\n### public **start** ()\n\nStarts output frontend. Currently, does nothing\n\n### public *string* **getContent** ()\n\nReturns output cached content\n\n### public **stop** ()\n\nStops output frontend\n\n### public **beforeStore** (*mixed* $data)\n\nSerializes data before storing them\n\n### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Output.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Output.html)"
- name: Cache\Frontend\Output::afterRetrieve
  id: api/phalcon_cache_frontend_output#afterretrieve
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Frontend\Output
  description: "### public **afterRetrieve** (*mixed* $data)\n\nUnserializes data after retrieval\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Output.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Output.html)"
- name: Cache\Frontend\Output::beforeStore
  id: api/phalcon_cache_frontend_output#beforestore
  summary: null
  belongs_to: Cache\Frontend\Output
  description: |-
    ### public **beforeStore** (*mixed* $data)

    Serializes data before storing them
- name: Cache\Frontend\Output::getContent
  id: api/phalcon_cache_frontend_output#getcontent
  summary: null
  belongs_to: Cache\Frontend\Output
  description: |-
    ### public *string* **getContent** ()

    Returns output cached content
- name: Cache\Frontend\Output::getLifetime
  id: api/phalcon_cache_frontend_output#getlifetime
  summary: null
  belongs_to: Cache\Frontend\Output
  description: |-
    ### public **getLifetime** ()

    Returns the cache lifetime
- name: Cache\Frontend\Output::isBuffering
  id: api/phalcon_cache_frontend_output#isbuffering
  summary: null
  belongs_to: Cache\Frontend\Output
  description: |-
    ### public **isBuffering** ()

    Check whether if frontend is buffering output
- name: Cache\Frontend\Output::start
  id: api/phalcon_cache_frontend_output#start
  summary: Starts output frontend
  belongs_to: Cache\Frontend\Output
  description: |-
    ### public **start** ()

    Starts output frontend. Currently, does nothing
- name: Cache\Frontend\Output::stop
  id: api/phalcon_cache_frontend_output#stop
  summary: null
  belongs_to: Cache\Frontend\Output
  description: |-
    ### public **stop** ()

    Stops output frontend
- name: Cache\Multiple
  id: api/phalcon_cache_multiple
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Cache\\Multiple**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/multiple.zep)\n\nAllows to read to chained backend adapters writing to multiple backends\n\n``` php\nuse Phalcon\\Cache\\Frontend\\Data as DataFrontend;\nuse Phalcon\\Cache\\Multiple;\nuse Phalcon\\Cache\\Backend\\Apc as ApcCache;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheCache;\nuse Phalcon\\Cache\\Backend\\File as FileCache;\n\n$ultraFastFrontend = new DataFrontend(\n    [\n        \"lifetime\" => 3600,\n    ]\n);\n\n$fastFrontend = new DataFrontend(\n    [\n        \"lifetime\" => 86400,\n    ]\n);\n\n$slowFrontend = new DataFrontend(\n    [\n        \"lifetime\" => 604800,\n    ]\n);\n\n//Backends are registered from the fastest to the slower\n$cache = new Multiple(\n    [\n        new ApcCache(\n            $ultraFastFrontend,\n            [\n                \"prefix\" => \"cache\",\n            ]\n        ),\n        new MemcacheCache(\n            $fastFrontend,\n            [\n                \"prefix\" => \"cache\",\n                \"host\"   => \"localhost\",\n                \"port\"   => \"11211\",\n            ]\n        ),\n        new FileCache(\n            $slowFrontend,\n            [\n                \"prefix\"   => \"cache\",\n                \"cacheDir\" => \"../app/cache/\",\n            ]\n        ),\n    ]\n);\n\n//Save, saves in every backend\n$cache->save(\"my-key\", $data);\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[[*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface)\\[\\] $backends\\])\n\nPhalcon\\Cache\\Multiple constructor\n\n### public **push** ([*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $backend)\n\nAdds a backend\n\n### public *mixed* **get** (*string* \\| *int* $keyName, \\[*int* $lifetime\\])\n\nReturns a cached content reading the internal backends\n\n### public **start** (*string* \\| *int* $keyName, \\[*int* $lifetime\\])\n\nStarts every backend\n\n### public **save** (\\[*string* $keyName\\], \\[*string* $content\\], \\[*int* $lifetime\\], \\[*boolean* $stopBuffer\\])\n\nStores cached content into all backends and stops the frontend\n\n### public *boolean* **delete** (*string* \\| *int* $keyName)\n\nDeletes a value from each backend\n\n### public **exists** (\\[*string* \\| *int* $keyName\\], \\[*int* $lifetime\\])\n\nChecks if cache exists in at least one backend\n\n### public **flush** ()\n\nFlush all backend(s)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Multiple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Multiple.html)"
- name: Cache\Multiple::delete
  id: api/phalcon_cache_multiple#delete
  summary: null
  belongs_to: Cache\Multiple
  description: |-
    ### public *boolean* **delete** (*string* \| *int* $keyName)

    Deletes a value from each backend
- name: Cache\Multiple::exists
  id: api/phalcon_cache_multiple#exists
  summary: null
  belongs_to: Cache\Multiple
  description: |-
    ### public **exists** (\[*string* \| *int* $keyName\], \[*int* $lifetime\])

    Checks if cache exists in at least one backend
- name: Cache\Multiple::flush
  id: api/phalcon_cache_multiple#flush
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cache\Multiple
  description: "### public **flush** ()\n\nFlush all backend(s)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Multiple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Multiple.html)"
- name: Cache\Multiple::get
  id: api/phalcon_cache_multiple#get
  summary: null
  belongs_to: Cache\Multiple
  description: |-
    ### public *mixed* **get** (*string* \| *int* $keyName, \[*int* $lifetime\])

    Returns a cached content reading the internal backends
- name: Cache\Multiple::push
  id: api/phalcon_cache_multiple#push
  summary: null
  belongs_to: Cache\Multiple
  description: |-
    ### public **push** ([*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $backend)

    Adds a backend
- name: Cache\Multiple::save
  id: api/phalcon_cache_multiple#save
  summary: null
  belongs_to: Cache\Multiple
  description: |-
    ### public **save** (\[*string* $keyName\], \[*string* $content\], \[*int* $lifetime\], \[*boolean* $stopBuffer\])

    Stores cached content into all backends and stops the frontend
- name: Cache\Multiple::start
  id: api/phalcon_cache_multiple#start
  summary: null
  belongs_to: Cache\Multiple
  description: |-
    ### public **start** (*string* \| *int* $keyName, \[*int* $lifetime\])

    Starts every backend
- name: Caching in the ORM
  id: reference/models-cache
  summary: Every application is different, we could have models whose data change frequently and others that rarely change
  description: "# Caching in the ORM\n\nEvery application is different, we could have models whose data change frequently and others that rarely change. Accessing database systems is often one of the most common bottlenecks in terms of performance. This is due to the complex connection/communication processes that PHP must do in each request to obtain data from the database. Therefore, if we want to achieve good performance we need to add some layers of caching where the application requires it.\n\nThis chapter explains the possible points where it is possible to implement caching to improve performance. The framework gives you the tools to implement the cache where you demand of it according to the architecture of your application.\n\n## Caching Resultsets\n\nA well established technique to avoid continuously accessing to the database is to cache resultsets that don’t change frequently using a system with faster access (usually memory).\n\nWhen [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) requires a service to cache resultsets, it will request it to the Dependency Injector Container with the convention name “modelsCache”.\n\nAs Phalcon provides a component to [*cache*](cache) any kind of data, we’ll explain how to integrate it with Models. First, you must register it as a service in the services container:\n\n``` php\nuse Phalcon\\Cache\\Frontend\\Data as FrontendData;\nuse Phalcon\\Cache\\Backend\\Memcache as BackendMemcache;\n\n// Set the models cache service\n$di->set(\n    \"modelsCache\",\n    function () {\n        // Cache data for one day by default\n        $frontCache = new FrontendData(\n            [\n                \"lifetime\" => 86400,\n            ]\n        );\n\n        // Memcached connection settings\n        $cache = new BackendMemcache(\n            $frontCache,\n            [\n                \"host\" => \"localhost\",\n                \"port\" => \"11211\",\n            ]\n        );\n\n        return $cache;\n    }\n);\n```\n\nYou have complete control in creating and customizing the cache before being used by registering the service as an anonymous function. Once the cache setup is properly defined you could cache resultsets as follows:\n\n``` php\n// Get products without caching\n$products = Products::find();\n\n// Just cache the resultset. The cache will expire in 1 hour (3600 seconds)\n$products = Products::find(\n    [\n        \"cache\" => [\n            \"key\" => \"my-cache\",\n        ],\n    ]\n);\n\n// Cache the resultset for only for 5 minutes\n$products = Products::find(\n    [\n        \"cache\" => [\n            \"key\"      => \"my-cache\",\n            \"lifetime\" => 300,\n        ],\n    ]\n);\n\n// Use the 'cache' service from the DI instead of 'modelsCache'\n$products = Products::find(\n    [\n        \"cache\" => [\n            \"key\"     => \"my-cache\",\n            \"service\" => \"cache\",\n        ],\n    ]\n);\n```\n\nCaching could be also applied to resultsets generated using relationships:\n\n``` php\n// Query some post\n$post = Post::findFirst();\n\n// Get comments related to a post, also cache it\n$comments = $post->getComments(\n    [\n        \"cache\" => [\n            \"key\" => \"my-key\",\n        ],\n    ]\n);\n\n// Get comments related to a post, setting lifetime\n$comments = $post->getComments(\n    [\n        \"cache\" => [\n            \"key\"      => \"my-key\",\n            \"lifetime\" => 3600,\n        ],\n    ]\n);\n```\n\nWhen a cached resultset needs to be invalidated, you can simply delete it from the cache using the previously specified key.\n\nNote that not all resultsets should be cached. Results that change very frequently should not be cached since they are invalidated very quickly and caching in that case impacts performance. Additionally, large datasets that do not change frequently could be cached, but that is a decision that the developer has to make based on the available caching mechanism and whether the performance impact to simply retrieve that data in the first place is acceptable.\n\n## Forcing Cache\n\nEarlier we saw how [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) integrates with the caching component provided by the framework. To make a record/resultset cacheable we pass the key ‘cache’ in the array of parameters:\n\n``` php\n// Cache the resultset for only for 5 minutes\n$products = Products::find(\n    [\n        \"cache\" => [\n            \"key\"      => \"my-cache\",\n            \"lifetime\" => 300,\n        ],\n    ]\n);\n```\n\nThis gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the `` find()/:code:`findFirst() `` method to force every query to be cached:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * Implement a method that returns a string key based\n     * on the query parameters\n     */\n    protected static function _createKey($parameters)\n    {\n        $uniqueKey = [];\n\n        foreach ($parameters as $key => $value) {\n            if (is_scalar($value)) {\n                $uniqueKey[] = $key . \":\" . $value;\n            } elseif (is_array($value)) {\n                $uniqueKey[] = $key . \":[\" . self::_createKey($value) . \"]\";\n            }\n        }\n\n        return join(\",\", $uniqueKey);\n    }\n\n    public static function find($parameters = null)\n    {\n        // Convert the parameters to an array\n        if (!is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        // Check if a cache key wasn't passed\n        // and create the cache parameters\n        if (!isset($parameters[\"cache\"])) {\n            $parameters[\"cache\"] = [\n                \"key\"      => self::_createKey($parameters),\n                \"lifetime\" => 300,\n            ];\n        }\n\n        return parent::find($parameters);\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        // ...\n    }\n}\n```\n\nAccessing the database is several times slower than calculating a cache key. You’re free to implement any key generation strategy you find to better for your needs. Note that a good key avoids collisions as much as possible - meaning that different keys should return unrelated records.\n\nThis gives you full control on how the cache should be implemented for each model. If this strategy is common to several models you can create a base class for all of them:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass CacheableModel extends Model\n{\n    protected static function _createKey($parameters)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    public static function find($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n}\n```\n\nThen use this class as base class for each ‘Cacheable’ model:\n\n``` php\nclass Robots extends CacheableModel\n{\n\n}\n```\n\n## Caching PHQL Queries\n\nRegardless of the syntax we used to create them, all queries in the ORM are handled internally using PHQL. This language gives you much more freedom to create all kinds of queries. Of course these queries can be cached:\n\n``` php\n$phql = \"SELECT * FROM Cars WHERE name = :name:\";\n\n$query = $this->modelsManager->createQuery($phql);\n\n$query->cache(\n    [\n        \"key\"      => \"cars-by-name\",\n        \"lifetime\" => 300,\n    ]\n);\n\n$cars = $query->execute(\n    [\n        \"name\" => \"Audi\",\n    ]\n);\n```\n\n## Reusable Related Records\n\nSome models may have relationships with other models. This allows us to easily check the records that relate to instances in memory:\n\n``` php\n// Get some invoice\n$invoice = Invoices::findFirst();\n\n// Get the customer related to the invoice\n$customer = $invoice->customer;\n\n// Print his/her name\necho $customer->name, \"\\n\";\n```\n\nThis example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:\n\n``` php\n// Get a set of invoices\n// SELECT * FROM invoices;\n$invoices = Invoices::find();\n\nforeach ($invoices as $invoice) {\n    // Get the customer related to the invoice\n    // SELECT * FROM customers WHERE id = ?;\n    $customer = $invoice->customer;\n\n    // Print his/her name\n    echo $customer->name, \"\\n\";\n}\n```\n\nA customer may have one or more bills so, in this example, the same customer record may be unnecessarily queried several times. To avoid this, we could mark the relationship as reusable; by doing so, we tell the ORM to automatically reuse the records from memory instead of re-querying them again and again:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this->belongsTo(\n            \"customers_id\",\n            \"Customer\",\n            \"id\",\n            [\n                \"reusable\" => true,\n            ]\n        );\n    }\n}\n```\n\nNote that this type of cache works in memory only, this means that cached data are released when the request is terminated.\n\n## Caching Related Records\n\nWhen a related record is queried, the ORM internally builds the appropriate condition and gets the required records using `find()`/`findFirst()` in the target model according to the following table:\n\n| Type       | Description                                                     | Implicit Method |\n|------------|-----------------------------------------------------------------|-----------------|\n| Belongs-To | Returns a model instance of the related record directly         | `findFirst()`   |\n| Has-One    | Returns a model instance of the related record directly         | `findFirst()`   |\n| Has-Many   | Returns a collection of model instances of the referenced model | `find()`        |\n\nThis means that when you get a related record you could intercept how the data is obtained by implementing the corresponding method:\n\n``` php\n// Get some invoice\n$invoice = Invoices::findFirst();\n\n// Get the customer related to the invoice\n$customer = $invoice->customer; // Invoices::findFirst(\"...\");\n\n// Same as above\n$customer = $invoice->getCustomer(); // Invoices::findFirst(\"...\");\n```\n\nAccordingly, we could replace the `findFirst()` method in the Invoices model and implement the cache we consider most appropriate:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public static function findFirst($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n}\n```\n\n## Caching Related Records Recursively\n\nIn this scenario, we assume that every time we query a result we also retrieve their associated records. If we store the records found together with their related entities perhaps we could reduce a bit the overhead required to obtain all entities:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    protected static function _createKey($parameters)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    protected static function _getCache($key)\n    {\n        // Returns data from a cache\n    }\n\n    protected static function _setCache($key, $results)\n    {\n        // Stores data in the cache\n    }\n\n    public static function find($parameters = null)\n    {\n        // Create a unique key\n        $key = self::_createKey($parameters);\n\n        // Check if there are data in the cache\n        $results = self::_getCache($key);\n\n        // Valid data is an object\n        if (is_object($results)) {\n            return $results;\n        }\n\n        $results = [];\n\n        $invoices = parent::find($parameters);\n\n        foreach ($invoices as $invoice) {\n            // Query the related customer\n            $customer = $invoice->customer;\n\n            // Assign it to the record\n            $invoice->customer = $customer;\n\n            $results[] = $invoice;\n        }\n\n        // Store the invoices in the cache + their customers\n        self::_setCache($key, $results);\n\n        return $results;\n    }\n\n    public function initialize()\n    {\n        // Add relations and initialize other stuff\n    }\n}\n```\n\nGetting the invoices from the cache already obtains the customer data in just one hit, reducing the overall overhead of the operation. Note that this process can also be performed with PHQL following an alternative solution:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        // Add relations and initialize other stuff\n    }\n\n    protected static function _createKey($conditions, $params)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    public function getInvoicesCustomers($conditions, $params = null)\n    {\n        $phql = \"SELECT Invoices.*, Customers.* FROM Invoices JOIN Customers WHERE \" . $conditions;\n\n        $query = $this->getModelsManager()->executeQuery($phql);\n\n        $query->cache(\n            [\n                \"key\"      => self::_createKey($conditions, $params),\n                \"lifetime\" => 300,\n            ]\n        );\n\n        return $query->execute($params);\n    }\n\n}\n```\n\n## Caching based on Conditions\n\nIn this scenario, the cache is implemented differently depending on the conditions received. We might decide that the cache backend should be determined by the primary key:\n\n| Type          | Cache Backend |\n|---------------|---------------|\n| 1 - 10000     | mongo1        |\n| 10000 - 20000 | mongo2        |\n| \\> 20000      | mongo3        |\n\nThe easiest way to achieve this is by adding a static method to the model that chooses the right cache to be used:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public static function queryCache($initial, $final)\n    {\n        if ($initial >= 1 && $final < 10000) {\n            $service = \"mongo1\";\n        } elseif ($initial >= 10000 && $final <= 20000) {\n            $service = \"mongo2\";\n        } elseif ($initial > 20000) {\n            $service = \"mongo3\";\n        }\n\n        return self::find(\n            [\n                \"id >= \" . $initial . \" AND id <= \" . $final,\n                \"cache\" => [\n                    \"service\" => $service,\n                ],\n            ]\n        );\n    }\n}\n```\n\nThis approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a `find()`/`findFirst()`:\n\n``` php\n$robots = Robots::find(\"id < 1000\");\n$robots = Robots::find(\"id > 100 AND type = 'A'\");\n$robots = Robots::find(\"(id > 100 AND type = 'A') AND id < 2000\");\n\n$robots = Robots::find(\n    [\n        \"(id > ?0 AND type = 'A') AND id < ?1\",\n        \"bind\"  => [100, 2000],\n        \"order\" => \"type\",\n    ]\n);\n```\n\nTo achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:\n\nThe first is create a custom builder, so we can generate a totally customized query:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Query\\Builder as QueryBuilder;\n\nclass CustomQueryBuilder extends QueryBuilder\n{\n    public function getQuery()\n    {\n        $query = new CustomQuery($this->getPhql());\n\n        $query->setDI($this->getDI());\n\n        return $query;\n    }\n}\n```\n\nInstead of directly returning a [*Phalcon\\Mvc\\Model\\Query*](../api/phalcon_mvc_model_query), our custom builder returns a CustomQuery instance, this class looks like:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Query as ModelQuery;\n\nclass CustomQuery extends ModelQuery\n{\n    /**\n     * The execute method is overridden\n     */\n    public function execute($params = null, $types = null)\n    {\n        // Parse the intermediate representation for the SELECT\n        $ir = $this->parse();\n\n        // Check if the query has conditions\n        if (isset($ir[\"where\"])) {\n            // The fields in the conditions can have any order\n            // We need to recursively check the conditions tree\n            // to find the info we're looking for\n            $visitor = new CustomNodeVisitor();\n\n            // Recursively visits the nodes\n            $visitor->visit($ir[\"where\"]);\n\n            $initial = $visitor->getInitial();\n            $final   = $visitor->getFinal();\n\n            // Select the cache according to the range\n            // ...\n\n            // Check if the cache has data\n            // ...\n        }\n\n        // Execute the query\n        $result = $this->_executeSelect($ir, $params, $types);\n\n        // Cache the result\n        // ...\n\n        return $result;\n    }\n}\n```\n\nImplementing a helper (CustomNodeVisitor) that recursively checks the conditions looking for fields that tell us the possible range to be used in the cache:\n\n``` php\nclass CustomNodeVisitor\n{\n    protected $_initial = 0;\n\n    protected $_final = 25000;\n\n    public function visit($node)\n    {\n        switch ($node[\"type\"]) {\n            case \"binary-op\":\n                $left  = $this->visit($node[\"left\"]);\n                $right = $this->visit($node[\"right\"]);\n\n                if (!$left || !$right) {\n                    return false;\n                }\n\n                if ($left === \"id\") {\n                    if ($node[\"op\"] === \">\") {\n                        $this->_initial = $right;\n                    }\n\n                    if ($node[\"op\"] === \"=\") {\n                        $this->_initial = $right;\n                    }\n\n                    if ($node[\"op\"] === \">=\") {\n                        $this->_initial = $right;\n                    }\n\n                    if ($node[\"op\"] === \"<\") {\n                        $this->_final = $right;\n                    }\n\n                    if ($node[\"op\"] === \"<=\") {\n                        $this->_final = $right;\n                    }\n                }\n\n                break;\n\n            case \"qualified\":\n                if ($node[\"name\"] === \"id\") {\n                    return \"id\";\n                }\n\n                break;\n\n            case \"literal\":\n                return $node[\"value\"];\n\n            default:\n                return false;\n        }\n    }\n\n    public function getInitial()\n    {\n        return $this->_initial;\n    }\n\n    public function getFinal()\n    {\n        return $this->_final;\n    }\n}\n```\n\nFinally, we can replace the find method in the Robots model to use the custom classes we’ve created:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public static function find($parameters = null)\n    {\n        if (!is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        $builder = new CustomQueryBuilder($parameters);\n\n        $builder->from(get_called_class());\n\n        $query = $builder->getQuery();\n\n        if (isset($parameters[\"bind\"])) {\n            return $query->execute($parameters[\"bind\"]);\n        } else {\n            return $query->execute();\n        }\n    }\n}\n```\n\n## Caching of PHQL planning\n\nAs well as most moderns database systems PHQL internally caches the execution plan, if the same statement is executed several times PHQL reuses the previously generated plan improving performance, for a developer to take better advantage of this is highly recommended build all your SQL statements passing variable parameters as bound parameters:\n\n``` php\nfor ($i = 1; $i <= 10; $i++) {\n    $phql = \"SELECT * FROM Store\\Robots WHERE id = \" . $i;\n\n    $robots = $this->modelsManager->executeQuery($phql);\n\n    // ...\n}\n```\n\nIn the above example, ten plans were generated increasing the memory usage and processing in the application. Rewriting the code to take advantage of bound parameters reduces the processing by both ORM and database system:\n\n``` php\n$phql = \"SELECT * FROM Store\\Robots WHERE id = ?0\";\n\nfor ($i = 1; $i <= 10; $i++) {\n    $robots = $this->modelsManager->executeQuery(\n        $phql,\n        [\n            $i,\n        ]\n    );\n\n    // ...\n}\n```\n\nPerformance can be also improved reusing the PHQL query:\n\n``` php\n$phql = \"SELECT * FROM Store\\Robots WHERE id = ?0\";\n\n$query = $this->modelsManager->createQuery($phql);\n\nfor ($i = 1; $i <= 10; $i++) {\n    $robots = $query->execute(\n        $phql,\n        [\n            $i,\n        ]\n    );\n\n    // ...\n}\n```\n\nExecution plans for queries involving [prepared statements](http://en.wikipedia.org/wiki/Prepared_statement) are also cached by most database systems reducing the overall execution time, also protecting your application against [SQL Injections](http://en.wikipedia.org/wiki/SQL_injection).\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/models-cache.html](https://docs.phalconphp.com/en/latest/reference/models-cache.html)"
- name: Cherokee Installation Notes
  id: reference/cherokee
  summary: Cherokee is a high-performance web server
  description: "# Cherokee Installation Notes\n\n[Cherokee](http://www.cherokee-project.com/) is a high-performance web server. It is very fast, flexible and easy to configure.\n\n## Configuring Cherokee for Phalcon\n\nCherokee provides a friendly graphical interface to configure almost every setting available in the web server. Start the cherokee administrator by executing with root /path-to-cherokee/sbin/cherokee-admin\n\nCreate a new virtual host by clicking on ‘vServers’, then add a new virtual server:\n\nThe recently added virtual server must appear at the left bar of the screen. In the ‘Behaviors’ tab you will see a set of default behaviors for this virtual server. Click the ‘Rule Management’ button. Remove those labeled as ‘Directory /cherokee_themes’ and ‘Directory /icons’:\n\nAdd the ‘PHP Language’ behavior using the wizard. This behavior allow you to run PHP applications:\n\nNormally this behavior does not require additional settings. Add another behavior, this time in the ‘Manual Configuration’ section. In ‘Rule Type’ choose ‘File Exists’, then make sure the option ‘Match any file’ is enabled:\n\nIn the ‘Handler’ tab choose ‘List & Send’ as handler:\n\nEdit the ‘Default’ behavior in order to enable the URL-rewrite engine. Change the handler to ‘Redirection’, then add the following regular expression to the engine ^(.\\*)$:\n\nFinally, make sure the behaviors have the following order:\n\nExecute the application in a browser:\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/cherokee.html](https://docs.phalconphp.com/en/latest/reference/cherokee.html)"
- name: Class Autoloader
  id: reference/loader
  summary: Phalcon\Loader allows you to load project classes automatically, based on some predefined rules
  description: "# Class Autoloader\n\n[*Phalcon\\Loader*](../api/phalcon_loader) allows you to load project classes automatically, based on some predefined rules. Since this component is written in C, it provides the lowest overhead in reading and interpreting external PHP files.\n\nThe behavior of this component is based on the PHP’s capability of [autoloading classes](http://www.php.net/manual/en/language.oop5.autoload.php). If a class that does not yet exist is used in any part of the code, a special handler will try to load it. [*Phalcon\\Loader*](../api/phalcon_loader) serves as the special handler for this operation. By loading classes on a need-to-load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called [lazy initialization](http://en.wikipedia.org/wiki/Lazy_initialization).\n\nWith this component you can load files from other projects or vendors, this autoloader is [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) and [PSR-4](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4.md) compliant.\n\n[*Phalcon\\Loader*](../api/phalcon_loader) offers four options to autoload classes. You can use them one at a time or combine them.\n\n## Security Layer\n\n[*Phalcon\\Loader*](../api/phalcon_loader) offers a security layer sanitizing by default class names avoiding possible inclusion of unauthorized files. Consider the following example:\n\n``` php\n// Basic autoloader\nspl_autoload_register(\n    function ($className) {\n        $filepath = $className . \".php\";\n\n        if (file_exists($filepath)) {\n            require $filepath;\n        }\n    }\n);\n```\n\nThe above auto-loader lacks any kind of security. If a function mistakenly launches the auto-loader and a malicious prepared string is used as parameter this would allow to execute any file accessible by the application:\n\n``` php\n// This variable is not filtered and comes from an insecure source\n$className = \"../processes/important-process\";\n\n// Check if the class exists triggering the auto-loader\nif (class_exists($className)) {\n    // ...\n}\n```\n\nIf ‘../processes/important-process.php’ is a valid file, an external user could execute the file without authorization.\n\nTo avoid these or most sophisticated attacks, [*Phalcon\\Loader*](../api/phalcon_loader) removes invalid characters from the class name, reducing the possibility of being attacked.\n\n## Registering Namespaces\n\nIf you’re organizing your code using namespaces, or using external libraries which do, the `registerNamespaces()` method provides the autoloading mechanism. It takes an associative array; the keys are namespace prefixes and their values are directories where the classes are located in. The namespace separator will be replaced by the directory separator when the loader tries to find the classes. Always remember to add a trailing slash at the end of the paths.\n\n``` php\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some namespaces\n$loader->registerNamespaces(\n    [\n       \"Example\\Base\"    => \"vendor/example/base/\",\n       \"Example\\Adapter\" => \"vendor/example/adapter/\",\n       \"Example\"         => \"vendor/example/\",\n    ]\n);\n\n// Register autoloader\n$loader->register();\n\n// The required class will automatically include the\n// file vendor/example/adapter/Some.php\n$some = new \\Example\\Adapter\\Some();\n```\n\n## Registering Directories\n\nThe third option is to register directories, in which classes could be found. This option is not recommended in terms of performance, since Phalcon will need to perform a significant number of file stats on each folder, looking for the file with the same name as the class. It’s important to register the directories in relevance order. Remember always add a trailing slash at the end of the paths.\n\n``` php\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some directories\n$loader->registerDirs(\n    [\n        \"library/MyComponent/\",\n        \"library/OtherComponent/Other/\",\n        \"vendor/example/adapters/\",\n        \"vendor/example/\",\n    ]\n);\n\n// Register autoloader\n$loader->register();\n\n// The required class will automatically include the file from\n// the first directory where it has been located\n// i.e. library/OtherComponent/Other/Some.php\n$some = new \\Some();\n```\n\n## Registering Classes\n\nThe last option is to register the class name and its path. This autoloader can be very useful when the folder convention of the project does not allow for easy retrieval of the file using the path and the class name. This is the fastest method of autoloading. However the more your application grows, the more classes/files need to be added to this autoloader, which will effectively make maintenance of the class list very cumbersome and it is not recommended.\n\n``` php\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some classes\n$loader->registerClasses(\n    [\n        \"Some\"         => \"library/OtherComponent/Other/Some.php\",\n        \"Example\\Base\" => \"vendor/example/adapters/Example/BaseClass.php\",\n    ]\n);\n\n// Register autoloader\n$loader->register();\n\n// Requiring a class will automatically include the file it references\n// in the associative array\n// i.e. library/OtherComponent/Other/Some.php\n$some = new \\Some();\n```\n\n## Registering Files\n\nYou can also registers files that are “non-classes” hence needing a “require”. This is very useful for including files that only have functions:\n\n``` php\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some classes\n$loader->registerFiles(\n    [\n        \"functions.php\",\n        \"arrayFunctions.php\",\n    ]\n);\n\n// Register autoloader\n$loader->register();\n```\n\nThese files are automatically loaded in the `register()` method.\n\n## Additional file extensions\n\nSome autoloading strategies such as “prefixes”, “namespaces” or “directories” automatically append the “php” extension at the end of the checked file. If you are using additional extensions you could set it with the method “setExtensions”. Files are checked in the order as it were defined:\n\n``` php\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Set file extensions to check\n$loader->setExtensions(\n    [\n        \"php\",\n        \"inc\",\n        \"phb\",\n    ]\n);\n```\n\n## Modifying current strategies\n\nAdditional auto-loading data can be added to existing values by passing “true” as the second parameter:\n\n``` php\n// Adding more directories\n$loader->registerDirs(\n    [\n        \"../app/library/\",\n        \"../app/plugins/\",\n    ],\n    true\n);\n```\n\n## Autoloading Events\n\nIn the following example, the EventsManager is working with the class loader, allowing us to obtain debugging information regarding the flow of operation:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Loader;\n\n$eventsManager = new EventsManager();\n\n$loader = new Loader();\n\n$loader->registerNamespaces(\n    [\n        \"Example\\\\Base\"    => \"vendor/example/base/\",\n        \"Example\\\\Adapter\" => \"vendor/example/adapter/\",\n        \"Example\"          => \"vendor/example/\",\n    ]\n);\n\n// Listen all the loader events\n$eventsManager->attach(\n    \"loader:beforeCheckPath\",\n    function (Event $event, Loader $loader) {\n        echo $loader->getCheckedPath();\n    }\n);\n\n$loader->setEventsManager($eventsManager);\n\n$loader->register();\n```\n\nSome events when returning boolean false could stop the active operation. The following events are supported:\n\n| Event Name       | Triggered                                                                                                           |     | Can stop operation? |\n|------------------|---------------------------------------------------------------------------------------------------------------------|-----|---------------------|\n| beforeCheckClass | Triggered before starting the autoloading process                                                                   |     | Yes                 |\n| pathFound        | Triggered when the loader locate a class                                                                            |     | No                  |\n| afterCheckClass  | Triggered after finish the autoloading process. If this event is launched the autoloader didn’t find the class file |     | No                  |\n\n## Troubleshooting\n\nSome things to keep in mind when using the universal autoloader:\n\n- Auto-loading process is case-sensitive, the class will be loaded as it is written in the code\n- Strategies based on namespaces/prefixes are faster than the directories strategy\n- If a cache bytecode like [APC](http://php.net/manual/en/book.apc.php) is installed this will used to retrieve the requested file (an implicit caching of the file is performed)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/loader.html](https://docs.phalconphp.com/en/latest/reference/loader.html)"
- name: Cli\Console
  id: api/phalcon_cli_console
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Cli\\Console**\n\n*extends* abstract class [*Phalcon\\Application*](phalcon_application)\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/console.zep)\n\nThis component allows to create CLI applications using Phalcon\n\n## Methods\n\n### public **addModules** (*array* $modules)\n\nMerge modules with the existing ones\n\n``` php\n$application->addModules(\n    [\n        \"admin\" => [\n            \"className\" => \"Multiple\\\\Admin\\\\Module\",\n            \"path\"      => \"../apps/admin/Module.php\",\n        ],\n    ]\n);\n```\n\n### public **handle** (\\[*array* $arguments\\])\n\nHandle the whole command-line tasks\n\n### public **setArgument** (\\[*array* $arguments\\], \\[*mixed* $str\\], \\[*mixed* $shift\\])\n\nSet an specific argument\n\n### public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nPhalcon\\Application\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the internal event manager\n\n### public **registerModules** (*array* $modules, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nRegister an array of modules present in the application\n\n``` php\n$this->registerModules(\n    [\n        \"frontend\" => [\n            \"className\" => \"Multiple\\\\Frontend\\\\Module\",\n            \"path\"      => \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" => [\n            \"className\" => \"Multiple\\\\Backend\\\\Module\",\n            \"path\"      => \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n```\n\n### public **getModules** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturn the modules registered in the application\n\n### public **getModule** (*mixed* $name) inherited from [*Phalcon\\Application*](phalcon_application)\n\nGets the module definition registered in the application via module name\n\n### public **setDefaultModule** (*mixed* $defaultModule) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the module name to be used if the router doesn’t return a valid module\n\n### public **getDefaultModule** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the default module name\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console.html)"
- name: Cli\Console::addModules
  id: api/phalcon_cli_console#addmodules
  summary: null
  belongs_to: Cli\Console
  description: |-
    ### public **addModules** (*array* $modules)

    Merge modules with the existing ones

    ``` php
    $application->addModules(
        [
            "admin" => [
                "className" => "Multiple\\Admin\\Module",
                "path"      => "../apps/admin/Module.php",
            ],
        ]
    );
    ```
- name: Cli\Console::handle
  id: api/phalcon_cli_console#handle
  summary: null
  belongs_to: Cli\Console
  description: |-
    ### public **handle** (\[*array* $arguments\])

    Handle the whole command-line tasks
- name: Cli\Console::setArgument
  id: api/phalcon_cli_console#setargument
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cli\Console
  description: "### public **setArgument** (\\[*array* $arguments\\], \\[*mixed* $str\\], \\[*mixed* $shift\\])\n\nSet an specific argument\n\n### public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nPhalcon\\Application\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the internal event manager\n\n### public **registerModules** (*array* $modules, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nRegister an array of modules present in the application\n\n``` php\n$this->registerModules(\n    [\n        \"frontend\" => [\n            \"className\" => \"Multiple\\\\Frontend\\\\Module\",\n            \"path\"      => \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" => [\n            \"className\" => \"Multiple\\\\Backend\\\\Module\",\n            \"path\"      => \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n```\n\n### public **getModules** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturn the modules registered in the application\n\n### public **getModule** (*mixed* $name) inherited from [*Phalcon\\Application*](phalcon_application)\n\nGets the module definition registered in the application via module name\n\n### public **setDefaultModule** (*mixed* $defaultModule) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the module name to be used if the router doesn’t return a valid module\n\n### public **getDefaultModule** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the default module name\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console.html)"
- name: Cli\Console\Exception
  id: api/phalcon_cli_console_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Cli\\Console\\Exception**\n\n*extends* class [*Phalcon\\Application\\Exception*](phalcon_application_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/console/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console_Exception.html)"
- name: Cli\Dispatcher
  id: api/phalcon_cli_dispatcher
  summary: Dispatching is the process of taking the command-line arguments, extracting the module name, task name, action name, and optional parameters contained in it, and then instantiating a task and calling an action on it
  description: "# Class **Phalcon\\Cli\\Dispatcher**\n\n*extends* abstract class [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface), [*Phalcon\\Cli\\DispatcherInterface*](phalcon_cli_dispatcherinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/dispatcher.zep)\n\nDispatching is the process of taking the command-line arguments, extracting the module name, task name, action name, and optional parameters contained in it, and then instantiating a task and calling an action on it.\n\n``` php\n$di = new \\Phalcon\\Di();\n\n$dispatcher = new \\Phalcon\\Cli\\Dispatcher();\n\n$dispatcher->setDi($di);\n\n$dispatcher->setTaskName(\"posts\");\n$dispatcher->setActionName(\"index\");\n$dispatcher->setParams([]);\n\n$handle = $dispatcher->dispatch();\n```\n\n## Constants\n\n### *integer* **EXCEPTION_NO_DI**\n\n### *integer* **EXCEPTION_CYCLIC_ROUTING**\n\n### *integer* **EXCEPTION_HANDLER_NOT_FOUND**\n\n### *integer* **EXCEPTION_INVALID_HANDLER**\n\n### *integer* **EXCEPTION_INVALID_PARAMS**\n\n### *integer* **EXCEPTION_ACTION_NOT_FOUND**\n\n## Methods\n\n### public **setTaskSuffix** (*mixed* $taskSuffix)\n\nSets the default task suffix\n\n### public **setDefaultTask** (*mixed* $taskName)\n\nSets the default task name\n\n### public **setTaskName** (*mixed* $taskName)\n\nSets the task name to be dispatched\n\n### public **getTaskName** ()\n\nGets last dispatched task name\n\n### protected **\\_throwDispatchException** (*mixed* $message, \\[*mixed* $exceptionCode\\])\n\nThrows an internal exception\n\n### protected **\\_handleException** ([Exception](http://php.net/manual/en/class.exception.php) $exception)\n\nHandles a user exception\n\n### public **getLastTask** ()\n\nReturns the latest dispatched controller\n\n### public **getActiveTask** ()\n\nReturns the active task in the dispatcher\n\n### public **setOptions** (*array* $options)\n\nSet the options to be dispatched\n\n### public **getOptions** ()\n\nGet dispatched options\n\n### public **callActionMethod** (*mixed* $handler, *mixed* $actionMethod, \\[*array* $params\\])\n\n...\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal event manager\n\n### public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action suffix\n\n### public **getActionSuffix** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the default action suffix\n\n### public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the module where the controller is (only informative)\n\n### public **getModuleName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the module where the controller class is\n\n### public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the namespace where the controller class is\n\n### public **getNamespaceName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a namespace to be prepended to the current handler name\n\n### public **setDefaultNamespace** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default namespace\n\n### public **getDefaultNamespace** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the default namespace\n\n### public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action name\n\n### public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the action name to be dispatched\n\n### public **getActionName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the latest dispatched action name\n\n### public **setParams** (*array* $params) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets action params to be dispatched\n\n### public **getParams** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets action params\n\n### public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet a param by its name or numeric index\n\n### public *mixed* **getParam** (*mixed* $param, \\[*string* \\| *array* $filters\\], \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a param by its name or numeric index\n\n### public *boolean* **hasParam** (*mixed* $param) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if a param exists\n\n### public **getActiveMethod** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the current method to be/executed in the dispatcher\n\n### public **isFinished** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nChecks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch\n\n### public **setReturnedValue** (*mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the latest returned value by an action manually\n\n### public *mixed* **getReturnedValue** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns value returned by the latest dispatched action\n\n### public **setModelBinding** (*mixed* $value, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable/Disable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n```\n\n### public **setModelBinder** ([*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n```\n\n### public **getModelBinder** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets model binder\n\n### public *object* **dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### protected *object* **\\_dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### public **forward** (*array* $forward) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nForwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed\n\n``` php\n$this->dispatcher->forward(\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n### public **wasForwarded** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if the current executed action was forwarded by another one\n\n### public **getHandlerClass** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nPossible class name that will be located to dispatch the request\n\n### public **getBoundModels** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns bound models from binder instance\n\n``` php\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this->dispatcher->getBoundModels(); // return array with $user\n    }\n}\n```\n\n### protected **\\_resolveEmptyProperties** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet empty properties to their defaults (where defaults are available)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher.html)"
- name: Cli\Dispatcher::callActionMethod
  id: api/phalcon_cli_dispatcher#callactionmethod
  summary: Forwards the execution flow to another controller/action Dispatchers are unique per module
  belongs_to: Cli\Dispatcher
  description: "### public **callActionMethod** (*mixed* $handler, *mixed* $actionMethod, \\[*array* $params\\])\n\n...\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal event manager\n\n### public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action suffix\n\n### public **getActionSuffix** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the default action suffix\n\n### public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the module where the controller is (only informative)\n\n### public **getModuleName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the module where the controller class is\n\n### public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the namespace where the controller class is\n\n### public **getNamespaceName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a namespace to be prepended to the current handler name\n\n### public **setDefaultNamespace** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default namespace\n\n### public **getDefaultNamespace** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the default namespace\n\n### public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action name\n\n### public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the action name to be dispatched\n\n### public **getActionName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the latest dispatched action name\n\n### public **setParams** (*array* $params) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets action params to be dispatched\n\n### public **getParams** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets action params\n\n### public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet a param by its name or numeric index\n\n### public *mixed* **getParam** (*mixed* $param, \\[*string* \\| *array* $filters\\], \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a param by its name or numeric index\n\n### public *boolean* **hasParam** (*mixed* $param) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if a param exists\n\n### public **getActiveMethod** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the current method to be/executed in the dispatcher\n\n### public **isFinished** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nChecks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch\n\n### public **setReturnedValue** (*mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the latest returned value by an action manually\n\n### public *mixed* **getReturnedValue** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns value returned by the latest dispatched action\n\n### public **setModelBinding** (*mixed* $value, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable/Disable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n```\n\n### public **setModelBinder** ([*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n```\n\n### public **getModelBinder** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets model binder\n\n### public *object* **dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### protected *object* **\\_dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### public **forward** (*array* $forward) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nForwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed\n\n``` php\n$this->dispatcher->forward(\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n### public **wasForwarded** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if the current executed action was forwarded by another one\n\n### public **getHandlerClass** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nPossible class name that will be located to dispatch the request\n\n### public **getBoundModels** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns bound models from binder instance\n\n``` php\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this->dispatcher->getBoundModels(); // return array with $user\n    }\n}\n```\n\n### protected **\\_resolveEmptyProperties** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet empty properties to their defaults (where defaults are available)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher.html)"
- name: Cli\Dispatcher::EXCEPTION_ACTION_NOT_FOUND
  id: api/phalcon_cli_dispatcher#exception_action_not_found
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### *integer* **EXCEPTION_ACTION_NOT_FOUND**

    ## Methods
- name: Cli\Dispatcher::EXCEPTION_CYCLIC_ROUTING
  id: api/phalcon_cli_dispatcher#exception_cyclic_routing
  summary: null
  belongs_to: Cli\Dispatcher
  description: '### *integer* **EXCEPTION_CYCLIC_ROUTING**'
- name: Cli\Dispatcher::EXCEPTION_HANDLER_NOT_FOUND
  id: api/phalcon_cli_dispatcher#exception_handler_not_found
  summary: null
  belongs_to: Cli\Dispatcher
  description: '### *integer* **EXCEPTION_HANDLER_NOT_FOUND**'
- name: Cli\Dispatcher::EXCEPTION_INVALID_HANDLER
  id: api/phalcon_cli_dispatcher#exception_invalid_handler
  summary: null
  belongs_to: Cli\Dispatcher
  description: '### *integer* **EXCEPTION_INVALID_HANDLER**'
- name: Cli\Dispatcher::EXCEPTION_INVALID_PARAMS
  id: api/phalcon_cli_dispatcher#exception_invalid_params
  summary: null
  belongs_to: Cli\Dispatcher
  description: '### *integer* **EXCEPTION_INVALID_PARAMS**'
- name: Cli\Dispatcher::EXCEPTION_NO_DI
  id: api/phalcon_cli_dispatcher#exception_no_di
  summary: null
  belongs_to: Cli\Dispatcher
  description: '### *integer* **EXCEPTION_NO_DI**'
- name: Cli\Dispatcher::getActiveTask
  id: api/phalcon_cli_dispatcher#getactivetask
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **getActiveTask** ()

    Returns the active task in the dispatcher
- name: Cli\Dispatcher::getLastTask
  id: api/phalcon_cli_dispatcher#getlasttask
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **getLastTask** ()

    Returns the latest dispatched controller
- name: Cli\Dispatcher::getOptions
  id: api/phalcon_cli_dispatcher#getoptions
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **getOptions** ()

    Get dispatched options
- name: Cli\Dispatcher::getTaskName
  id: api/phalcon_cli_dispatcher#gettaskname
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **getTaskName** ()

    Gets last dispatched task name

    ### protected **\_throwDispatchException** (*mixed* $message, \[*mixed* $exceptionCode\])

    Throws an internal exception

    ### protected **\_handleException** ([Exception](http://php.net/manual/en/class.exception.php) $exception)

    Handles a user exception
- name: Cli\Dispatcher::setDefaultTask
  id: api/phalcon_cli_dispatcher#setdefaulttask
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **setDefaultTask** (*mixed* $taskName)

    Sets the default task name
- name: Cli\Dispatcher::setOptions
  id: api/phalcon_cli_dispatcher#setoptions
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **setOptions** (*array* $options)

    Set the options to be dispatched
- name: Cli\Dispatcher::setTaskName
  id: api/phalcon_cli_dispatcher#settaskname
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **setTaskName** (*mixed* $taskName)

    Sets the task name to be dispatched
- name: Cli\Dispatcher::setTaskSuffix
  id: api/phalcon_cli_dispatcher#settasksuffix
  summary: null
  belongs_to: Cli\Dispatcher
  description: |-
    ### public **setTaskSuffix** (*mixed* $taskSuffix)

    Sets the default task suffix
- name: Cli\DispatcherInterface
  id: api/phalcon_cli_dispatcherinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Cli\\DispatcherInterface**\n\n*implements* [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/dispatcherinterface.zep)\n\n## Methods\n\n### abstract public **setTaskSuffix** (*mixed* $taskSuffix)\n\n...\n\n### abstract public **setDefaultTask** (*mixed* $taskName)\n\n...\n\n### abstract public **setTaskName** (*mixed* $taskName)\n\n...\n\n### abstract public **getTaskName** ()\n\n...\n\n### abstract public **getLastTask** ()\n\n...\n\n### abstract public **getActiveTask** ()\n\n...\n\n### abstract public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionSuffix** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultNamespace** (*mixed* $defaultNamespace) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionName** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParams** (*mixed* $params) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParams** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParam** (*mixed* $param, \\[*mixed* $filters\\]) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **hasParam** (*mixed* $param) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **isFinished** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getReturnedValue** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **dispatch** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **forward** (*mixed* $forward) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_DispatcherInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_DispatcherInterface.html)"
- name: Cli\DispatcherInterface::getActiveTask
  id: api/phalcon_cli_dispatcherinterface#getactivetask
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cli\DispatcherInterface
  description: "### abstract public **getActiveTask** ()\n\n...\n\n### abstract public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionSuffix** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultNamespace** (*mixed* $defaultNamespace) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionName** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParams** (*mixed* $params) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParams** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParam** (*mixed* $param, \\[*mixed* $filters\\]) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **hasParam** (*mixed* $param) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **isFinished** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getReturnedValue** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **dispatch** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **forward** (*mixed* $forward) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_DispatcherInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_DispatcherInterface.html)"
- name: Cli\DispatcherInterface::getLastTask
  id: api/phalcon_cli_dispatcherinterface#getlasttask
  summary: null
  belongs_to: Cli\DispatcherInterface
  description: |-
    ### abstract public **getLastTask** ()

    ...
- name: Cli\DispatcherInterface::getTaskName
  id: api/phalcon_cli_dispatcherinterface#gettaskname
  summary: null
  belongs_to: Cli\DispatcherInterface
  description: |-
    ### abstract public **getTaskName** ()

    ...
- name: Cli\DispatcherInterface::setDefaultTask
  id: api/phalcon_cli_dispatcherinterface#setdefaulttask
  summary: null
  belongs_to: Cli\DispatcherInterface
  description: |-
    ### abstract public **setDefaultTask** (*mixed* $taskName)

    ...
- name: Cli\DispatcherInterface::setTaskName
  id: api/phalcon_cli_dispatcherinterface#settaskname
  summary: null
  belongs_to: Cli\DispatcherInterface
  description: |-
    ### abstract public **setTaskName** (*mixed* $taskName)

    ...
- name: Cli\DispatcherInterface::setTaskSuffix
  id: api/phalcon_cli_dispatcherinterface#settasksuffix
  summary: null
  belongs_to: Cli\DispatcherInterface
  description: |-
    ### abstract public **setTaskSuffix** (*mixed* $taskSuffix)

    ...
- name: Cli\Dispatcher\Exception
  id: api/phalcon_cli_dispatcher_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Cli\\Dispatcher\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/dispatcher/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher_Exception.html)"
- name: Cli\Router
  id: api/phalcon_cli_router
  summary: Phalcon\Cli\Router is the standard framework router
  description: "# Class **Phalcon\\Cli\\Router**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router.zep)\n\nPhalcon\\Cli\\Router is the standard framework router. Routing is the process of taking a command-line arguments and decomposing it into parameters to determine which module, task, and action of that task should receive the request\n\n``` php\n$router = new \\Phalcon\\Cli\\Router();\n\n$router->handle(\n    [\n        \"module\" => \"main\",\n        \"task\"   => \"videos\",\n        \"action\" => \"process\",\n    ]\n);\n\necho $router->getTaskName();\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*mixed* $defaultRoutes\\])\n\nPhalcon\\Cli\\Router constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setDefaultModule** (*mixed* $moduleName)\n\nSets the name of the default module\n\n### public **setDefaultTask** (*mixed* $taskName)\n\nSets the default controller name\n\n### public **setDefaultAction** (*mixed* $actionName)\n\nSets the default action name\n\n### public **setDefaults** (*array* $defaults)\n\nSets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route\n\n``` php\n$router->setDefaults(\n    [\n        \"module\" => \"common\",\n        \"action\" => \"index\",\n    ]\n);\n```\n\n### public **handle** (\\[*array* $arguments\\])\n\nHandles routing information received from command-line arguments\n\n### public [*Phalcon\\Cli\\Router\\Route*](phalcon_cli_router_route) **add** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdds a route to the router\n\n``` php\n$router->add(\"/about\", \"About::main\");\n```\n\n### public **getModuleName** ()\n\nReturns processed module name\n\n### public **getTaskName** ()\n\nReturns processed task name\n\n### public **getActionName** ()\n\nReturns processed action name\n\n### public *array* **getParams** ()\n\nReturns processed extra params\n\n### public **getMatchedRoute** ()\n\nReturns the route that matches the handled URI\n\n### public *array* **getMatches** ()\n\nReturns the sub expressions in the regular expression matched\n\n### public **wasMatched** ()\n\nChecks if the router matches any of the defined routes\n\n### public **getRoutes** ()\n\nReturns all the routes defined in the router\n\n### public [*Phalcon\\Cli\\Router\\Route*](phalcon_cli_router_route) **getRouteById** (*int* $id)\n\nReturns a route object by its id\n\n### public **getRouteByName** (*mixed* $name)\n\nReturns a route object by its name\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router.html)"
- name: Cli\Router::add
  id: api/phalcon_cli_router#add
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public [*Phalcon\Cli\Router\Route*](phalcon_cli_router_route) **add** (*string* $pattern, \[*string/array* $paths\])

    Adds a route to the router

    ``` php
    $router->add("/about", "About::main");
    ```
- name: Cli\Router::getActionName
  id: api/phalcon_cli_router#getactionname
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **getActionName** ()

    Returns processed action name
- name: Cli\Router::getDI
  id: api/phalcon_cli_router#getdi
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Cli\Router::getMatchedRoute
  id: api/phalcon_cli_router#getmatchedroute
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **getMatchedRoute** ()

    Returns the route that matches the handled URI
- name: Cli\Router::getMatches
  id: api/phalcon_cli_router#getmatches
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public *array* **getMatches** ()

    Returns the sub expressions in the regular expression matched
- name: Cli\Router::getModuleName
  id: api/phalcon_cli_router#getmodulename
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **getModuleName** ()

    Returns processed module name
- name: Cli\Router::getParams
  id: api/phalcon_cli_router#getparams
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public *array* **getParams** ()

    Returns processed extra params
- name: Cli\Router::getRouteById
  id: api/phalcon_cli_router#getroutebyid
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public [*Phalcon\Cli\Router\Route*](phalcon_cli_router_route) **getRouteById** (*int* $id)

    Returns a route object by its id
- name: Cli\Router::getRouteByName
  id: api/phalcon_cli_router#getroutebyname
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cli\Router
  description: "### public **getRouteByName** (*mixed* $name)\n\nReturns a route object by its name\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router.html)"
- name: Cli\Router::getRoutes
  id: api/phalcon_cli_router#getroutes
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **getRoutes** ()

    Returns all the routes defined in the router
- name: Cli\Router::getTaskName
  id: api/phalcon_cli_router#gettaskname
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **getTaskName** ()

    Returns processed task name
- name: Cli\Router::handle
  id: api/phalcon_cli_router#handle
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **handle** (\[*array* $arguments\])

    Handles routing information received from command-line arguments
- name: Cli\Router::setDefaultAction
  id: api/phalcon_cli_router#setdefaultaction
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **setDefaultAction** (*mixed* $actionName)

    Sets the default action name
- name: Cli\Router::setDefaultModule
  id: api/phalcon_cli_router#setdefaultmodule
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **setDefaultModule** (*mixed* $moduleName)

    Sets the name of the default module
- name: Cli\Router::setDefaults
  id: api/phalcon_cli_router#setdefaults
  summary: Sets an array of default paths
  belongs_to: Cli\Router
  description: |-
    ### public **setDefaults** (*array* $defaults)

    Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route

    ``` php
    $router->setDefaults(
        [
            "module" => "common",
            "action" => "index",
        ]
    );
    ```
- name: Cli\Router::setDefaultTask
  id: api/phalcon_cli_router#setdefaulttask
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **setDefaultTask** (*mixed* $taskName)

    Sets the default controller name
- name: Cli\Router::setDI
  id: api/phalcon_cli_router#setdi
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Cli\Router::wasMatched
  id: api/phalcon_cli_router#wasmatched
  summary: null
  belongs_to: Cli\Router
  description: |-
    ### public **wasMatched** ()

    Checks if the router matches any of the defined routes
- name: Cli\RouterInterface
  id: api/phalcon_cli_routerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Cli\\RouterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/routerinterface.zep)\n\n## Methods\n\n### abstract public **setDefaultModule** (*mixed* $moduleName)\n\n...\n\n### abstract public **setDefaultTask** (*mixed* $taskName)\n\n...\n\n### abstract public **setDefaultAction** (*mixed* $actionName)\n\n...\n\n### abstract public **setDefaults** (*array* $defaults)\n\n...\n\n### abstract public **handle** (\\[*mixed* $arguments\\])\n\n...\n\n### abstract public **add** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **getModuleName** ()\n\n...\n\n### abstract public **getTaskName** ()\n\n...\n\n### abstract public **getActionName** ()\n\n...\n\n### abstract public **getParams** ()\n\n...\n\n### abstract public **getMatchedRoute** ()\n\n...\n\n### abstract public **getMatches** ()\n\n...\n\n### abstract public **wasMatched** ()\n\n...\n\n### abstract public **getRoutes** ()\n\n...\n\n### abstract public **getRouteById** (*mixed* $id)\n\n...\n\n### abstract public **getRouteByName** (*mixed* $name)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_RouterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_RouterInterface.html)"
- name: Cli\RouterInterface::add
  id: api/phalcon_cli_routerinterface#add
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **add** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Cli\RouterInterface::getActionName
  id: api/phalcon_cli_routerinterface#getactionname
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getActionName** ()

    ...
- name: Cli\RouterInterface::getMatchedRoute
  id: api/phalcon_cli_routerinterface#getmatchedroute
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getMatchedRoute** ()

    ...
- name: Cli\RouterInterface::getMatches
  id: api/phalcon_cli_routerinterface#getmatches
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getMatches** ()

    ...
- name: Cli\RouterInterface::getModuleName
  id: api/phalcon_cli_routerinterface#getmodulename
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getModuleName** ()

    ...
- name: Cli\RouterInterface::getParams
  id: api/phalcon_cli_routerinterface#getparams
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getParams** ()

    ...
- name: Cli\RouterInterface::getRouteById
  id: api/phalcon_cli_routerinterface#getroutebyid
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getRouteById** (*mixed* $id)

    ...
- name: Cli\RouterInterface::getRouteByName
  id: api/phalcon_cli_routerinterface#getroutebyname
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cli\RouterInterface
  description: "### abstract public **getRouteByName** (*mixed* $name)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_RouterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_RouterInterface.html)"
- name: Cli\RouterInterface::getRoutes
  id: api/phalcon_cli_routerinterface#getroutes
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getRoutes** ()

    ...
- name: Cli\RouterInterface::getTaskName
  id: api/phalcon_cli_routerinterface#gettaskname
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **getTaskName** ()

    ...
- name: Cli\RouterInterface::handle
  id: api/phalcon_cli_routerinterface#handle
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **handle** (\[*mixed* $arguments\])

    ...
- name: Cli\RouterInterface::setDefaultAction
  id: api/phalcon_cli_routerinterface#setdefaultaction
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **setDefaultAction** (*mixed* $actionName)

    ...
- name: Cli\RouterInterface::setDefaultModule
  id: api/phalcon_cli_routerinterface#setdefaultmodule
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **setDefaultModule** (*mixed* $moduleName)

    ...
- name: Cli\RouterInterface::setDefaults
  id: api/phalcon_cli_routerinterface#setdefaults
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **setDefaults** (*array* $defaults)

    ...
- name: Cli\RouterInterface::setDefaultTask
  id: api/phalcon_cli_routerinterface#setdefaulttask
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **setDefaultTask** (*mixed* $taskName)

    ...
- name: Cli\RouterInterface::wasMatched
  id: api/phalcon_cli_routerinterface#wasmatched
  summary: null
  belongs_to: Cli\RouterInterface
  description: |-
    ### abstract public **wasMatched** ()

    ...
- name: Cli\Router\Exception
  id: api/phalcon_cli_router_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Cli\\Router\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Exception.html)"
- name: Cli\Router\Route
  id: api/phalcon_cli_router_route
  summary: Sets a callback that is called if the route is matched
  description: "# Class **Phalcon\\Cli\\Router\\Route**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router/route.zep)\n\nThis class represents every route added to the router\n\n## Constants\n\n### *string* **DEFAULT_DELIMITER**\n\n## Methods\n\n### public **\\_\\_construct** (*string* $pattern, \\[*array* $paths\\])\n\nPhalcon\\Cli\\Router\\Route constructor\n\n### public **compilePattern** (*mixed* $pattern)\n\nReplaces placeholders from pattern returning a valid PCRE regular expression\n\n### public *array* \\| *boolean* **extractNamedParams** (*string* $pattern)\n\nExtracts parameters from a string\n\n### public **reConfigure** (*string* $pattern, \\[*array* $paths\\])\n\nReconfigure the route adding a new pattern and a set of paths\n\n### public **getName** ()\n\nReturns the route’s name\n\n### public **setName** (*mixed* $name)\n\nSets the route’s name\n\n``` php\n$router->add(\n    \"/about\",\n    [\n        \"controller\" => \"about\",\n    ]\n)->setName(\"about\");\n```\n\n### public [*Phalcon\\Cli\\Router\\Route*](phalcon_cli_router_route) **beforeMatch** (*callback* $callback)\n\nSets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched\n\n### public *mixed* **getBeforeMatch** ()\n\nReturns the ‘before match’ callback if any\n\n### public **getRouteId** ()\n\nReturns the route’s id\n\n### public **getPattern** ()\n\nReturns the route’s pattern\n\n### public **getCompiledPattern** ()\n\nReturns the route’s compiled pattern\n\n### public **getPaths** ()\n\nReturns the paths\n\n### public **getReversedPaths** ()\n\nReturns the paths using positions as keys and names as values\n\n### public [*Phalcon\\Cli\\Router\\Route*](phalcon_cli_router_route) **convert** (*string* $name, *callable* $converter)\n\nAdds a converter to perform an additional transformation for certain parameter\n\n### public **getConverters** ()\n\nReturns the router converter\n\n### public static **reset** ()\n\nResets the internal route id generator\n\n### public static **delimiter** (\\[*mixed* $delimiter\\])\n\nSet the routing delimiter\n\n### public static **getDelimiter** ()\n\nGet routing delimiter\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Route.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Route.html)"
- name: Cli\Router\Route::beforeMatch
  id: api/phalcon_cli_router_route#beforematch
  summary: Sets a callback that is called if the route is matched
  belongs_to: Cli\Router\Route
  description: |-
    ### public [*Phalcon\Cli\Router\Route*](phalcon_cli_router_route) **beforeMatch** (*callback* $callback)

    Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched
- name: Cli\Router\Route::compilePattern
  id: api/phalcon_cli_router_route#compilepattern
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **compilePattern** (*mixed* $pattern)

    Replaces placeholders from pattern returning a valid PCRE regular expression
- name: Cli\Router\Route::convert
  id: api/phalcon_cli_router_route#convert
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public [*Phalcon\Cli\Router\Route*](phalcon_cli_router_route) **convert** (*string* $name, *callable* $converter)

    Adds a converter to perform an additional transformation for certain parameter
- name: Cli\Router\Route::DEFAULT_DELIMITER
  id: api/phalcon_cli_router_route#default_delimiter
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### *string* **DEFAULT_DELIMITER**

    ## Methods

    ### public **\_\_construct** (*string* $pattern, \[*array* $paths\])

    Phalcon\Cli\Router\Route constructor
- name: Cli\Router\Route::delimiter
  id: api/phalcon_cli_router_route#delimiter
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public static **delimiter** (\[*mixed* $delimiter\])

    Set the routing delimiter
- name: Cli\Router\Route::extractNamedParams
  id: api/phalcon_cli_router_route#extractnamedparams
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public *array* \| *boolean* **extractNamedParams** (*string* $pattern)

    Extracts parameters from a string
- name: Cli\Router\Route::getBeforeMatch
  id: api/phalcon_cli_router_route#getbeforematch
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public *mixed* **getBeforeMatch** ()

    Returns the ‘before match’ callback if any
- name: Cli\Router\Route::getCompiledPattern
  id: api/phalcon_cli_router_route#getcompiledpattern
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **getCompiledPattern** ()

    Returns the route’s compiled pattern
- name: Cli\Router\Route::getConverters
  id: api/phalcon_cli_router_route#getconverters
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **getConverters** ()

    Returns the router converter
- name: Cli\Router\Route::getDelimiter
  id: api/phalcon_cli_router_route#getdelimiter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cli\Router\Route
  description: "### public static **getDelimiter** ()\n\nGet routing delimiter\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Route.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Route.html)"
- name: Cli\Router\Route::getName
  id: api/phalcon_cli_router_route#getname
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **getName** ()

    Returns the route’s name
- name: Cli\Router\Route::getPaths
  id: api/phalcon_cli_router_route#getpaths
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **getPaths** ()

    Returns the paths
- name: Cli\Router\Route::getPattern
  id: api/phalcon_cli_router_route#getpattern
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **getPattern** ()

    Returns the route’s pattern
- name: Cli\Router\Route::getReversedPaths
  id: api/phalcon_cli_router_route#getreversedpaths
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **getReversedPaths** ()

    Returns the paths using positions as keys and names as values
- name: Cli\Router\Route::getRouteId
  id: api/phalcon_cli_router_route#getrouteid
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **getRouteId** ()

    Returns the route’s id
- name: Cli\Router\Route::reConfigure
  id: api/phalcon_cli_router_route#reconfigure
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **reConfigure** (*string* $pattern, \[*array* $paths\])

    Reconfigure the route adding a new pattern and a set of paths
- name: Cli\Router\Route::reset
  id: api/phalcon_cli_router_route#reset
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public static **reset** ()

    Resets the internal route id generator
- name: Cli\Router\Route::setName
  id: api/phalcon_cli_router_route#setname
  summary: null
  belongs_to: Cli\Router\Route
  description: |-
    ### public **setName** (*mixed* $name)

    Sets the route’s name

    ``` php
    $router->add(
        "/about",
        [
            "controller" => "about",
        ]
    )->setName("about");
    ```
- name: Cli\Router\RouteInterface
  id: api/phalcon_cli_router_routeinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Cli\\Router\\RouteInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router/routeinterface.zep)\n\n## Methods\n\n### abstract public **compilePattern** (*mixed* $pattern)\n\n...\n\n### abstract public **reConfigure** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **setName** (*mixed* $name)\n\n...\n\n### abstract public **getRouteId** ()\n\n...\n\n### abstract public **getPattern** ()\n\n...\n\n### abstract public **getCompiledPattern** ()\n\n...\n\n### abstract public **getPaths** ()\n\n...\n\n### abstract public **getReversedPaths** ()\n\n...\n\n### abstract public static **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_RouteInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_RouteInterface.html)"
- name: Cli\Router\RouteInterface::compilePattern
  id: api/phalcon_cli_router_routeinterface#compilepattern
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **compilePattern** (*mixed* $pattern)

    ...
- name: Cli\Router\RouteInterface::getCompiledPattern
  id: api/phalcon_cli_router_routeinterface#getcompiledpattern
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **getCompiledPattern** ()

    ...
- name: Cli\Router\RouteInterface::getName
  id: api/phalcon_cli_router_routeinterface#getname
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Cli\Router\RouteInterface::getPaths
  id: api/phalcon_cli_router_routeinterface#getpaths
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **getPaths** ()

    ...
- name: Cli\Router\RouteInterface::getPattern
  id: api/phalcon_cli_router_routeinterface#getpattern
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **getPattern** ()

    ...
- name: Cli\Router\RouteInterface::getReversedPaths
  id: api/phalcon_cli_router_routeinterface#getreversedpaths
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **getReversedPaths** ()

    ...
- name: Cli\Router\RouteInterface::getRouteId
  id: api/phalcon_cli_router_routeinterface#getrouteid
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **getRouteId** ()

    ...
- name: Cli\Router\RouteInterface::reConfigure
  id: api/phalcon_cli_router_routeinterface#reconfigure
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **reConfigure** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Cli\Router\RouteInterface::reset
  id: api/phalcon_cli_router_routeinterface#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Cli\Router\RouteInterface
  description: "### abstract public static **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_RouteInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_RouteInterface.html)"
- name: Cli\Router\RouteInterface::setName
  id: api/phalcon_cli_router_routeinterface#setname
  summary: null
  belongs_to: Cli\Router\RouteInterface
  description: |-
    ### abstract public **setName** (*mixed* $name)

    ...
- name: Cli\Task
  id: api/phalcon_cli_task
  summary: A task can be used to run “tasks” such as migrations, cronjobs, unit-tests, or anything that you want
  description: "# Class **Phalcon\\Cli\\Task**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Cli\\TaskInterface*](phalcon_cli_taskinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/task.zep)\n\nEvery command-line task should extend this class that encapsulates all the task functionality\n\nA task can be used to run “tasks” such as migrations, cronjobs, unit-tests, or anything that you want. The Task class should at least have a “mainAction” method\n\n``` php\nclass HelloTask extends \\Phalcon\\Cli\\Task\n{\n    // This action will be executed by default\n    public function mainAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n\n    }\n}\n```\n\n## Methods\n\n### final public **\\_\\_construct** ()\n\nPhalcon\\Cli\\Task constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Task.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Task.html)"
- name: Cli\TaskInterface
  id: api/phalcon_cli_taskinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Cli\\TaskInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/taskinterface.zep)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_TaskInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_TaskInterface.html)"
- name: Command Line Applications
  id: reference/cli
  summary: CLI applications are executed from the command line
  description: "# Command Line Applications\n\nCLI applications are executed from the command line. They are useful to create cron jobs, scripts, command utilities and more.\n\n## Structure\n\nA minimal structure of a CLI application will look like this:\n\n- app/config/config.php\n- app/tasks/MainTask.php\n- app/cli.php \\<– main bootstrap file\n\n## Creating a Bootstrap\n\nAs in regular MVC applications, a bootstrap file is used to bootstrap the application. Instead of the index.php bootstrapper in web applications, we use a cli.php file for bootstrapping the application.\n\nBelow is a sample bootstrap that is being used for this example.\n\n``` php\nuse Phalcon\\Di\\FactoryDefault\\Cli as CliDI;\nuse Phalcon\\Cli\\Console as ConsoleApp;\nuse Phalcon\\Loader;\n\n\n\n// Using the CLI factory default services container\n$di = new CliDI();\n\n\n\n/**\n * Register the autoloader and tell it to register the tasks directory\n */\n$loader = new Loader();\n\n$loader->registerDirs(\n    [\n        __DIR__ . \"/tasks\",\n    ]\n);\n\n$loader->register();\n\n\n\n// Load the configuration file (if any)\n\n$configFile = __DIR__ . \"/config/config.php\";\n\nif (is_readable($configFile)) {\n    $config = include $configFile;\n\n    $di->set(\"config\", $config);\n}\n\n\n\n// Create a console application\n$console = new ConsoleApp();\n\n$console->setDI($di);\n\n\n\n/**\n * Process the console arguments\n */\n$arguments = [];\n\nforeach ($argv as $k => $arg) {\n    if ($k === 1) {\n        $arguments[\"task\"] = $arg;\n    } elseif ($k === 2) {\n        $arguments[\"action\"] = $arg;\n    } elseif ($k >= 3) {\n        $arguments[\"params\"][] = $arg;\n    }\n}\n\n\n\ntry {\n    // Handle incoming arguments\n    $console->handle($arguments);\n} catch (\\Phalcon\\Exception $e) {\n    echo $e->getMessage();\n\n    exit(255);\n}\n```\n\nThis piece of code can be run using:\n\n``` bash\n$ php app/cli.php\n\nThis is the default task and the default action\n```\n\n## Tasks\n\nTasks work similar to controllers. Any CLI application needs at least a MainTask and a mainAction and every task needs to have a mainAction which will run if no action is given explicitly.\n\nBelow is an example of the app/tasks/MainTask.php file:\n\n``` php\nuse Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function mainAction()\n    {\n        echo \"This is the default task and the default action\" . PHP_EOL;\n    }\n}\n```\n\n## Processing action parameters\n\nIt’s possible to pass parameters to actions, the code for this is already present in the sample bootstrap.\n\nIf you run the application with the following parameters and action:\n\n``` php\nuse Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function mainAction()\n    {\n        echo \"This is the default task and the default action\" . PHP_EOL;\n    }\n\n    /**\n     * @param array $params\n     */\n    public function testAction(array $params)\n    {\n        echo sprintf(\n            \"hello %s\",\n            $params[0]\n        );\n\n        echo PHP_EOL;\n\n        echo sprintf(\n            \"best regards, %s\",\n            $params[1]\n        );\n\n        echo PHP_EOL;\n    }\n}\n```\n\nWe can then run the following command:\n\n``` bash\n$ php app/cli.php main test world universe\n\nhello world\nbest regards, universe\n```\n\n## Running tasks in a chain\n\nIt’s also possible to run tasks in a chain if it’s required. To accomplish this you must add the console itself to the DI:\n\n``` php\n$di->setShared(\"console\", $console);\n\ntry {\n    // Handle incoming arguments\n    $console->handle($arguments);\n} catch (\\Phalcon\\Exception $e) {\n    echo $e->getMessage();\n\n    exit(255);\n}\n```\n\nThen you can use the console inside of any task. Below is an example of a modified MainTask.php:\n\n``` php\nuse Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function mainAction()\n    {\n        echo \"This is the default task and the default action\" . PHP_EOL;\n\n        $this->console->handle(\n            [\n                \"task\"   => \"main\",\n                \"action\" => \"test\",\n            ]\n        );\n    }\n\n    public function testAction()\n    {\n        echo \"I will get printed too!\" . PHP_EOL;\n    }\n}\n```\n\nHowever, it’s a better idea to extend [*Phalcon\\Cli\\Task*](../api/phalcon_cli_task) and implement this kind of logic there.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/cli.html](https://docs.phalconphp.com/en/latest/reference/cli.html)"
- name: Config
  id: api/phalcon_config
  summary: Phalcon\Config is designed to simplify the access to, and the use of, configuration data within applications
  description: "# Class **Phalcon\\Config**\n\n*implements* [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Countable](http://php.net/manual/en/class.countable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/config.zep)\n\nPhalcon\\Config is designed to simplify the access to, and the use of, configuration data within applications. It provides a nested object property based user interface for accessing this configuration data within application code.\n\n``` php\n$config = new \\Phalcon\\Config(\n    [\n        \"database\" => [\n            \"adapter\"  => \"Mysql\",\n            \"host\"     => \"localhost\",\n            \"username\" => \"scott\",\n            \"password\" => \"cheetah\",\n            \"dbname\"   => \"test_db\",\n        ],\n        \"phalcon\" => [\n            \"controllersDir\" => \"../app/controllers/\",\n            \"modelsDir\"      => \"../app/models/\",\n            \"viewsDir\"       => \"../app/views/\",\n        ],\n    ]\n);\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $arrayConfig\\])\n\nPhalcon\\Config constructor\n\n### public **offsetExists** (*mixed* $index)\n\nAllows to check whether an attribute is defined using the array-syntax\n\n``` php\nvar_dump(\n    isset($config[\"database\"])\n);\n```\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\])\n\nGets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead\n\n``` php\necho $config->get(\"controllersDir\", \"../app/controllers/\");\n```\n\n### public **offsetGet** (*mixed* $index)\n\nGets an attribute using the array-syntax\n\n``` php\nprint_r(\n    $config[\"database\"]\n);\n```\n\n### public **offsetSet** (*mixed* $index, *mixed* $value)\n\nSets an attribute using the array-syntax\n\n``` php\n$config[\"database\"] = [\n    \"type\" => \"Sqlite\",\n];\n```\n\n### public **offsetUnset** (*mixed* $index)\n\nUnsets an attribute using the array-syntax\n\n``` php\nunset($config[\"database\"]);\n```\n\n### public **merge** ([*Phalcon\\Config*](phalcon_config) $config)\n\nMerges a configuration into the current one\n\n``` php\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" => [\n            \"host\" => \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig->merge($appConfig);\n```\n\n### public **toArray** ()\n\nConverts recursively the object to an array\n\n``` php\nprint_r(\n    $config->toArray()\n);\n```\n\n### public **count** ()\n\nReturns the count of properties set in the config\n\n``` php\nprint count($config);\n```\n\nor\n\n``` php\nprint $config->count();\n```\n\n### public static **\\_\\_set_state** (*array* $data)\n\nRestores the state of a Phalcon\\Config object\n\n### final protected *Config merged config* **\\_merge** (*Config* $config, \\[*mixed* $instance\\])\n\nHelper method for merge configs (forwarding nested config instance)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Config.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Config.html)"
- name: Config::count
  id: api/phalcon_config#count
  summary: null
  belongs_to: Config
  description: |-
    ### public **count** ()

    Returns the count of properties set in the config

    ``` php
    print count($config);
    ```

    or

    ``` php
    print $config->count();
    ```
- name: Config::get
  id: api/phalcon_config#get
  summary: null
  belongs_to: Config
  description: |-
    ### public **get** (*mixed* $index, \[*mixed* $defaultValue\])

    Gets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead

    ``` php
    echo $config->get("controllersDir", "../app/controllers/");
    ```
- name: Config::merge
  id: api/phalcon_config#merge
  summary: null
  belongs_to: Config
  description: |-
    ### public **merge** ([*Phalcon\Config*](phalcon_config) $config)

    Merges a configuration into the current one

    ``` php
    $appConfig = new \Phalcon\Config(
        [
            "database" => [
                "host" => "localhost",
            ],
        ]
    );

    $globalConfig->merge($appConfig);
    ```
- name: Config::offsetExists
  id: api/phalcon_config#offsetexists
  summary: null
  belongs_to: Config
  description: |-
    ### public **offsetExists** (*mixed* $index)

    Allows to check whether an attribute is defined using the array-syntax

    ``` php
    var_dump(
        isset($config["database"])
    );
    ```
- name: Config::offsetGet
  id: api/phalcon_config#offsetget
  summary: null
  belongs_to: Config
  description: |-
    ### public **offsetGet** (*mixed* $index)

    Gets an attribute using the array-syntax

    ``` php
    print_r(
        $config["database"]
    );
    ```
- name: Config::offsetSet
  id: api/phalcon_config#offsetset
  summary: null
  belongs_to: Config
  description: |-
    ### public **offsetSet** (*mixed* $index, *mixed* $value)

    Sets an attribute using the array-syntax

    ``` php
    $config["database"] = [
        "type" => "Sqlite",
    ];
    ```
- name: Config::offsetUnset
  id: api/phalcon_config#offsetunset
  summary: null
  belongs_to: Config
  description: |-
    ### public **offsetUnset** (*mixed* $index)

    Unsets an attribute using the array-syntax

    ``` php
    unset($config["database"]);
    ```
- name: Config::toArray
  id: api/phalcon_config#toarray
  summary: null
  belongs_to: Config
  description: |-
    ### public **toArray** ()

    Converts recursively the object to an array

    ``` php
    print_r(
        $config->toArray()
    );
    ```
- name: Config::__set_state
  id: api/phalcon_config#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Config
  description: "### public static **\\_\\_set_state** (*array* $data)\n\nRestores the state of a Phalcon\\Config object\n\n### final protected *Config merged config* **\\_merge** (*Config* $config, \\[*mixed* $instance\\])\n\nHelper method for merge configs (forwarding nested config instance)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Config.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Config.html)"
- name: Config\Adapter\Ini
  id: api/phalcon_config_adapter_ini
  summary: Reads ini files and converts them to Phalcon\Config objects
  description: "# Class **Phalcon\\Config\\Adapter\\Ini**\n\n*extends* class [*Phalcon\\Config*](phalcon_config)\n\n*implements* [Countable](http://php.net/manual/en/class.countable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/ini.zep)\n\nReads ini files and converts them to Phalcon\\Config objects.\n\nGiven the next configuration file:\n\n``` ini\n[database]\nadapter = Mysql\nhost = localhost\nusername = scott\npassword = cheetah\ndbname = test_db\n\n[phalcon]\ncontrollersDir = \"../app/controllers/\"\nmodelsDir = \"../app/models/\"\nviewsDir = \"../app/views/\"\n```\n\nYou can read it as follows:\n\n``` php\n$config = new \\Phalcon\\Config\\Adapter\\Ini(\"path/config.ini\");\n\necho $config->phalcon->controllersDir;\necho $config->database->username;\n```\n\nPHP constants may also be parsed in the ini file, so if you define a constant as an ini value before calling the constructor, the constant’s value will be integrated into the results. To use it this way you must specify the optional second parameter as INI_SCANNER_NORMAL when calling the constructor:\n\n``` php\n$config = new \\Phalcon\\Config\\Adapter\\Ini(\n    \"path/config-with-constants.ini\",\n    INI_SCANNER_NORMAL\n);\n```\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $filePath, \\[*mixed* $mode\\])\n\nPhalcon\\Config\\Adapter\\Ini constructor\n\n### protected **\\_parseIniString** (*mixed* $path, *mixed* $value)\n\nBuild multidimensional array from string\n\n``` php\n$this->_parseIniString(\"path.hello.world\", \"value for last key\");\n\n// result\n[\n     \"path\" => [\n         \"hello\" => [\n             \"world\" => \"value for last key\",\n         ],\n     ],\n];\n```\n\n### protected **\\_cast** (*mixed* $ini)\n\nWe have to cast values manually because parse_ini_file() has a poor implementation.\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nAllows to check whether an attribute is defined using the array-syntax\n\n``` php\nvar_dump(\n    isset($config[\"database\"])\n);\n```\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead\n\n``` php\necho $config->get(\"controllersDir\", \"../app/controllers/\");\n```\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute using the array-syntax\n\n``` php\nprint_r(\n    $config[\"database\"]\n);\n```\n\n### public **offsetSet** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Config*](phalcon_config)\n\nSets an attribute using the array-syntax\n\n``` php\n$config[\"database\"] = [\n    \"type\" => \"Sqlite\",\n];\n```\n\n### public **offsetUnset** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nUnsets an attribute using the array-syntax\n\n``` php\nunset($config[\"database\"]);\n```\n\n### public **merge** ([*Phalcon\\Config*](phalcon_config) $config) inherited from [*Phalcon\\Config*](phalcon_config)\n\nMerges a configuration into the current one\n\n``` php\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" => [\n            \"host\" => \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig->merge($appConfig);\n```\n\n### public **toArray** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nConverts recursively the object to an array\n\n``` php\nprint_r(\n    $config->toArray()\n);\n```\n\n### public **count** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nReturns the count of properties set in the config\n\n``` php\nprint count($config);\n```\n\nor\n\n``` php\nprint $config->count();\n```\n\n### public static **\\_\\_set_state** (*array* $data) inherited from [*Phalcon\\Config*](phalcon_config)\n\nRestores the state of a Phalcon\\Config object\n\n### final protected *Config merged config* **\\_merge** (*Config* $config, \\[*mixed* $instance\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nHelper method for merge configs (forwarding nested config instance)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Ini.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Ini.html)"
- name: Config\Adapter\Json
  id: api/phalcon_config_adapter_json
  summary: Reads JSON files and converts them to Phalcon\Config objects
  description: "# Class **Phalcon\\Config\\Adapter\\Json**\n\n*extends* class [*Phalcon\\Config*](phalcon_config)\n\n*implements* [Countable](http://php.net/manual/en/class.countable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/json.zep)\n\nReads JSON files and converts them to Phalcon\\Config objects.\n\nGiven the following configuration file:\n\n``` php\n{\"phalcon\":{\"baseuri\":\"\\/phalcon\\/\"},\"models\":{\"metadata\":\"memory\"}}\n```\n\nYou can read it as follows:\n\n``` php\n$config = new Phalcon\\Config\\Adapter\\Json(\"path/config.json\");\n\necho $config->phalcon->baseuri;\necho $config->models->metadata;\n```\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $filePath)\n\nPhalcon\\Config\\Adapter\\Json constructor\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nAllows to check whether an attribute is defined using the array-syntax\n\n``` php\nvar_dump(\n    isset($config[\"database\"])\n);\n```\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead\n\n``` php\necho $config->get(\"controllersDir\", \"../app/controllers/\");\n```\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute using the array-syntax\n\n``` php\nprint_r(\n    $config[\"database\"]\n);\n```\n\n### public **offsetSet** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Config*](phalcon_config)\n\nSets an attribute using the array-syntax\n\n``` php\n$config[\"database\"] = [\n    \"type\" => \"Sqlite\",\n];\n```\n\n### public **offsetUnset** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nUnsets an attribute using the array-syntax\n\n``` php\nunset($config[\"database\"]);\n```\n\n### public **merge** ([*Phalcon\\Config*](phalcon_config) $config) inherited from [*Phalcon\\Config*](phalcon_config)\n\nMerges a configuration into the current one\n\n``` php\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" => [\n            \"host\" => \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig->merge($appConfig);\n```\n\n### public **toArray** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nConverts recursively the object to an array\n\n``` php\nprint_r(\n    $config->toArray()\n);\n```\n\n### public **count** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nReturns the count of properties set in the config\n\n``` php\nprint count($config);\n```\n\nor\n\n``` php\nprint $config->count();\n```\n\n### public static **\\_\\_set_state** (*array* $data) inherited from [*Phalcon\\Config*](phalcon_config)\n\nRestores the state of a Phalcon\\Config object\n\n### final protected *Config merged config* **\\_merge** (*Config* $config, \\[*mixed* $instance\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nHelper method for merge configs (forwarding nested config instance)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Json.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Json.html)"
- name: Config\Adapter\Php
  id: api/phalcon_config_adapter_php
  summary: Reads php files and converts them to Phalcon\Config objects
  description: "# Class **Phalcon\\Config\\Adapter\\Php**\n\n*extends* class [*Phalcon\\Config*](phalcon_config)\n\n*implements* [Countable](http://php.net/manual/en/class.countable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/php.zep)\n\nReads php files and converts them to Phalcon\\Config objects.\n\nGiven the next configuration file:\n\n``` php\n<?php\n\nreturn [\n    \"database\" => [\n        \"adapter\"  => \"Mysql\",\n        \"host\"     => \"localhost\",\n        \"username\" => \"scott\",\n        \"password\" => \"cheetah\",\n        \"dbname\"   => \"test_db\",\n    ],\n    \"phalcon\" => [\n        \"controllersDir\" => \"../app/controllers/\",\n        \"modelsDir\"      => \"../app/models/\",\n        \"viewsDir\"       => \"../app/views/\",\n    ],\n];\n```\n\nYou can read it as follows:\n\n``` php\n$config = new \\Phalcon\\Config\\Adapter\\Php(\"path/config.php\");\n\necho $config->phalcon->controllersDir;\necho $config->database->username;\n```\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $filePath)\n\nPhalcon\\Config\\Adapter\\Php constructor\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nAllows to check whether an attribute is defined using the array-syntax\n\n``` php\nvar_dump(\n    isset($config[\"database\"])\n);\n```\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead\n\n``` php\necho $config->get(\"controllersDir\", \"../app/controllers/\");\n```\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute using the array-syntax\n\n``` php\nprint_r(\n    $config[\"database\"]\n);\n```\n\n### public **offsetSet** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Config*](phalcon_config)\n\nSets an attribute using the array-syntax\n\n``` php\n$config[\"database\"] = [\n    \"type\" => \"Sqlite\",\n];\n```\n\n### public **offsetUnset** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nUnsets an attribute using the array-syntax\n\n``` php\nunset($config[\"database\"]);\n```\n\n### public **merge** ([*Phalcon\\Config*](phalcon_config) $config) inherited from [*Phalcon\\Config*](phalcon_config)\n\nMerges a configuration into the current one\n\n``` php\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" => [\n            \"host\" => \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig->merge($appConfig);\n```\n\n### public **toArray** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nConverts recursively the object to an array\n\n``` php\nprint_r(\n    $config->toArray()\n);\n```\n\n### public **count** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nReturns the count of properties set in the config\n\n``` php\nprint count($config);\n```\n\nor\n\n``` php\nprint $config->count();\n```\n\n### public static **\\_\\_set_state** (*array* $data) inherited from [*Phalcon\\Config*](phalcon_config)\n\nRestores the state of a Phalcon\\Config object\n\n### final protected *Config merged config* **\\_merge** (*Config* $config, \\[*mixed* $instance\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nHelper method for merge configs (forwarding nested config instance)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Php.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Php.html)"
- name: Config\Adapter\Yaml
  id: api/phalcon_config_adapter_yaml
  summary: Reads YAML files and converts them to Phalcon\Config objects
  description: "# Class **Phalcon\\Config\\Adapter\\Yaml**\n\n*extends* class [*Phalcon\\Config*](phalcon_config)\n\n*implements* [Countable](http://php.net/manual/en/class.countable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/yaml.zep)\n\nReads YAML files and converts them to Phalcon\\Config objects.\n\nGiven the following configuration file:\n\n``` php\nphalcon:\n  baseuri:        /phalcon/\n  controllersDir: !approot  /app/controllers/\nmodels:\n  metadata: memory\n```\n\nYou can read it as follows:\n\n``` php\ndefine(\n    \"APPROOT\",\n    dirname(__DIR__)\n);\n\n$config = new \\Phalcon\\Config\\Adapter\\Yaml(\n    \"path/config.yaml\",\n    [\n        \"!approot\" => function($value) {\n            return APPROOT . $value;\n        },\n    ]\n);\n\necho $config->phalcon->controllersDir;\necho $config->phalcon->baseuri;\necho $config->models->metadata;\n```\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $filePath, \\[*array* $callbacks\\])\n\nPhalcon\\Config\\Adapter\\Yaml constructor\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nAllows to check whether an attribute is defined using the array-syntax\n\n``` php\nvar_dump(\n    isset($config[\"database\"])\n);\n```\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead\n\n``` php\necho $config->get(\"controllersDir\", \"../app/controllers/\");\n```\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nGets an attribute using the array-syntax\n\n``` php\nprint_r(\n    $config[\"database\"]\n);\n```\n\n### public **offsetSet** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Config*](phalcon_config)\n\nSets an attribute using the array-syntax\n\n``` php\n$config[\"database\"] = [\n    \"type\" => \"Sqlite\",\n];\n```\n\n### public **offsetUnset** (*mixed* $index) inherited from [*Phalcon\\Config*](phalcon_config)\n\nUnsets an attribute using the array-syntax\n\n``` php\nunset($config[\"database\"]);\n```\n\n### public **merge** ([*Phalcon\\Config*](phalcon_config) $config) inherited from [*Phalcon\\Config*](phalcon_config)\n\nMerges a configuration into the current one\n\n``` php\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" => [\n            \"host\" => \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig->merge($appConfig);\n```\n\n### public **toArray** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nConverts recursively the object to an array\n\n``` php\nprint_r(\n    $config->toArray()\n);\n```\n\n### public **count** () inherited from [*Phalcon\\Config*](phalcon_config)\n\nReturns the count of properties set in the config\n\n``` php\nprint count($config);\n```\n\nor\n\n``` php\nprint $config->count();\n```\n\n### public static **\\_\\_set_state** (*array* $data) inherited from [*Phalcon\\Config*](phalcon_config)\n\nRestores the state of a Phalcon\\Config object\n\n### final protected *Config merged config* **\\_merge** (*Config* $config, \\[*mixed* $instance\\]) inherited from [*Phalcon\\Config*](phalcon_config)\n\nHelper method for merge configs (forwarding nested config instance)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Yaml.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Yaml.html)"
- name: Config\Exception
  id: api/phalcon_config_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Config\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/config/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Exception.html)"
- name: Contextual Escaping
  id: reference/escaper
  summary: Websites and web applications are vulnerable to XSS attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate
  description: "# Contextual Escaping\n\nWebsites and web applications are vulnerable to [XSS](https://www.owasp.org/index.php/XSS) attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate. [*Phalcon\\Escaper*](../api/phalcon_escaper) provides contextual escaping and is written in Zephir, providing the minimal overhead when escaping different kinds of texts.\n\nWe designed this component based on the [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet) created by the [OWASP](https://www.owasp.org).\n\nAdditionally, this component relies on [mbstring](http://php.net/manual/en/book.mbstring.php) to support almost any charset.\n\nTo illustrate how this component works and why it is important, consider the following example:\n\n``` html\n<?php\n\nuse Phalcon\\Escaper;\n\n// Document title with malicious extra HTML tags\n$maliciousTitle = \"</title><script>alert(1)</script>\";\n\n// Malicious CSS class name\n$className = \";`(\";\n\n// Malicious CSS font name\n$fontName = \"Verdana\\\"</style>\";\n\n// Malicious Javascript text\n$javascriptText = \"';</script>Hello\";\n\n// Create an escaper\n$e = new Escaper();\n\n?>\n\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n        <title>\n            <?php echo $e->escapeHtml($maliciousTitle); ?>\n        </title>\n\n        <style type=\"text/css\">\n            .<?php echo $e->escapeCss($className); ?> {\n                font-family: \"<?php echo $e->escapeCss($fontName); ?>\";\n                color: red;\n            }\n        </style>\n\n    </head>\n\n    <body>\n\n        <div class='<?php echo $e->escapeHtmlAttr($className); ?>'>\n            hello\n        </div>\n\n        <script>\n            var some = '<?php echo $e->escapeJs($javascriptText); ?>';\n        </script>\n\n    </body>\n</html>\n```\n\nWhich produces the following:\n\n``` html\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n        <title>\n            &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;\n        </title>\n\n        <style type=\"text/css\">\n            .\\3c \\2f style\\3e {\n                font-family: \"Verdana\\22 \\3c \\2f style\\3e\";\n                color: red;\n            }\n        </style>\n\n    </head>\n\n    <body>\n\n        <div class='&#x3c &#x2f style&#x3e '>\n            hello\n        </div>\n\n        <script>\n            var some = '\\x27\\x3b\\x3c\\2fscript\\x3eHello';\n        </script>\n\n    </body>\n</html>\n```\n\nEvery text was escaped according to its context. Use the appropriate context is important to avoid XSS attacks.\n\n## Escaping HTML\n\nThe most common situation when inserting unsafe data is between HTML tags:\n\n``` html\n<div class=\"comments\">\n    <!-- Escape untrusted data here! -->\n</div>\n```\n\nYou can escape those data using the `escapeHtml` method:\n\n``` html\n<div class=\"comments\">\n    <?php echo $e->escapeHtml('></div><h1>myattack</h1>'); ?>\n</div>\n```\n\nWhich produces:\n\n``` html\n<div class=\"comments\">\n    &gt;&lt;/div&gt;&lt;h1&gt;myattack&lt;/h1&gt;\n</div>\n```\n\n## Escaping HTML Attributes\n\nEscaping HTML attributes is different from escaping HTML content. The escaper works by changing every non-alphanumeric character to the form. This kind of escaping is intended to most simpler attributes excluding complex ones like ‘href’ or ‘url’:\n\n``` html\n<table width=\"Escape untrusted data here!\">\n    <tr>\n        <td>\n            Hello\n        </td>\n    </tr>\n</table>\n```\n\nYou can escape a HTML attribute by using the `escapeHtmlAttr` method:\n\n``` html\n<table width=\"<?php echo $e->escapeHtmlAttr('\"><h1>Hello</table'); ?>\">\n    <tr>\n        <td>\n            Hello\n        </td>\n    </tr>\n</table>\n```\n\nWhich produces:\n\n``` html\n<table width=\"&#x22;&#x3e;&#x3c;h1&#x3e;Hello&#x3c;&#x2f;table\">\n    <tr>\n        <td>\n            Hello\n        </td>\n    </tr>\n</table>\n```\n\n## Escaping URLs\n\nSome HTML attributes like ‘href’ or ‘url’ need to be escaped differently:\n\n``` html\n<a href=\"Escape untrusted data here!\">\n    Some link\n</a>\n```\n\nYou can escape a HTML attribute by using the `escapeUrl` method:\n\n``` html\n<a href=\"<?php echo $e->escapeUrl('\"><script>alert(1)</script><a href=\"#'); ?>\">\n    Some link\n</a>\n```\n\nWhich produces:\n\n``` html\n<a href=\"%22%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E%3Ca%20href%3D%22%23\">\n    Some link\n</a>\n```\n\n## Escaping CSS\n\nCSS identifiers/values can be escaped too:\n\n``` html\n<a style=\"color: Escape untrusted data here\">\n    Some link\n</a>\n```\n\nYou can escape a CSS identifiers/value by using the `escapeCss` method:\n\n``` html\n<a style=\"color: <?php echo $e->escapeCss('\"><script>alert(1)</script><a href=\"#'); ?>\">\n    Some link\n</a>\n```\n\nWhich produces:\n\n``` html\n<a style=\"color: \\22 \\3e \\3c script\\3e alert\\28 1\\29 \\3c \\2f script\\3e \\3c a\\20 href\\3d \\22 \\23 \">\n    Some link\n</a>\n```\n\n## Escaping JavaScript\n\nStrings to be inserted into JavaScript code also must be properly escaped:\n\n``` html\n<script>\n    document.title = 'Escape untrusted data here';\n</script>\n```\n\nYou can escape JavaScript code by using the `escapeJs` method:\n\n``` html\n<script>\n    document.title = '<?php echo $e->escapeJs(\"'; alert(100); var x='\"); ?>';\n</script>\n```\n\n``` html\n<script>\n    document.title = '\\x27; alert(100); var x\\x3d\\x27';\n</script>\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/escaper.html](https://docs.phalconphp.com/en/latest/reference/escaper.html)"
- name: Cookies Management
  id: reference/cookies
  summary: Cookies are a very useful way to store small pieces of data on the client’s machine that can be retrieved even if the user closes his/her browser
  description: "# Cookies Management\n\n[Cookies](http://en.wikipedia.org/wiki/HTTP_cookie) are a very useful way to store small pieces of data on the client’s machine that can be retrieved even if the user closes his/her browser. [*Phalcon\\Http\\Response\\Cookies*](../api/phalcon_http_response_cookies) acts as a global bag for cookies. Cookies are stored in this bag during the request execution and are sent automatically at the end of the request.\n\n## Basic Usage\n\nYou can set/get cookies by just accessing the ‘cookies’ service in any part of the application where services can be accessed:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        // Check if the cookie has previously set\n        if ($this->cookies->has(\"remember-me\")) {\n            // Get the cookie\n            $rememberMeCookie = $this->cookies->get(\"remember-me\");\n\n            // Get the cookie's value\n            $value = $rememberMeCookie->getValue();\n        }\n    }\n\n    public function startAction()\n    {\n        $this->cookies->set(\n            \"remember-me\",\n            \"some value\",\n            time() + 15 * 86400\n        );\n    }\n\n    public function logoutAction()\n    {\n        $rememberMeCookie = $this->cookies->get(\"remember-me\");\n\n        // Delete the cookie\n        $rememberMeCookie->delete();\n    }\n}\n```\n\n## Encryption/Decryption of Cookies\n\nBy default, cookies are automatically encrypted before being sent to the client and are decrypted when retrieved from the user. This protection prevents unauthorized users to see the cookies’ contents in the client (browser). Despite this protection, sensitive data should not be stored in cookies.\n\nYou can disable encryption in the following way:\n\n``` php\nuse Phalcon\\Http\\Response\\Cookies;\n\n$di->set(\n    \"cookies\",\n    function () {\n        $cookies = new Cookies();\n\n        $cookies->useEncryption(false);\n\n        return $cookies;\n    }\n);\n```\n\nIf you wish to use encryption, a global key must be set in the ‘crypt’ service:\n\n``` php\nuse Phalcon\\Crypt;\n\n$di->set(\n    \"crypt\",\n    function () {\n        $crypt = new Crypt();\n\n        $crypt->setKey('#1dj8$=dp?.ak//j1V$'); // Use your own key!\n\n        return $crypt;\n    }\n);\n```\n\n> Sending cookies data without encryption to clients including complex objects structures, resultsets, service information, etc. could expose internal application details that could be used by an attacker to attack the application. If you do not want to use encryption, we highly recommend you only send very basic cookie data like numbers or small string literals.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/cookies.html](https://docs.phalconphp.com/en/latest/reference/cookies.html)"
- name: Crypt
  id: api/phalcon_crypt
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Crypt**\n\n*implements* [*Phalcon\\CryptInterface*](phalcon_cryptinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/crypt.zep)\n\nProvides encryption facilities to phalcon applications\n\n``` php\n$crypt = new \\Phalcon\\Crypt();\n\n$key  = \"le password\";\n$text = \"This is a secret text\";\n\n$encrypted = $crypt->encrypt($text, $key);\n\necho $crypt->decrypt($encrypted, $key);\n```\n\n## Constants\n\n### *integer* **PADDING_DEFAULT**\n\n### *integer* **PADDING_ANSI_X_923**\n\n### *integer* **PADDING_PKCS7**\n\n### *integer* **PADDING_ISO_10126**\n\n### *integer* **PADDING_ISO_IEC_7816_4**\n\n### *integer* **PADDING_ZERO**\n\n### *integer* **PADDING_SPACE**\n\n## Methods\n\n### public **setPadding** (*mixed* $scheme)\n\nChanges the padding scheme used\n\n### public **setCipher** (*mixed* $cipher)\n\nSets the cipher algorithm\n\n### public **getCipher** ()\n\nReturns the current cipher\n\n### public **setKey** (*mixed* $key)\n\nSets the encryption key\n\n### public **getKey** ()\n\nReturns the encryption key\n\n### protected **\\_cryptPadText** (*mixed* $text, *mixed* $mode, *mixed* $blockSize, *mixed* $paddingType)\n\nPads texts before encryption\n\n### protected **\\_cryptUnpadText** (*mixed* $text, *mixed* $mode, *mixed* $blockSize, *mixed* $paddingType)\n\nIf the function detects that the text was not padded, it will return it unmodified\n\n### public **encrypt** (*mixed* $text, \\[*mixed* $key\\])\n\nEncrypts a text\n\n``` php\n$encrypted = $crypt->encrypt(\"Ultra-secret text\", \"encrypt password\");\n```\n\n### public **decrypt** (*mixed* $text, \\[*mixed* $key\\])\n\nDecrypts an encrypted text\n\n``` php\necho $crypt->decrypt($encrypted, \"decrypt password\");\n```\n\n### public **encryptBase64** (*mixed* $text, \\[*mixed* $key\\], \\[*mixed* $safe\\])\n\nEncrypts a text returning the result as a base64 string\n\n### public **decryptBase64** (*mixed* $text, \\[*mixed* $key\\], \\[*mixed* $safe\\])\n\nDecrypt a text that is coded as a base64 string\n\n### public **getAvailableCiphers** ()\n\nReturns a list of available ciphers\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt.html)"
- name: Crypt::decrypt
  id: api/phalcon_crypt#decrypt
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **decrypt** (*mixed* $text, \[*mixed* $key\])

    Decrypts an encrypted text

    ``` php
    echo $crypt->decrypt($encrypted, "decrypt password");
    ```
- name: Crypt::decryptBase64
  id: api/phalcon_crypt#decryptbase64
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **decryptBase64** (*mixed* $text, \[*mixed* $key\], \[*mixed* $safe\])

    Decrypt a text that is coded as a base64 string
- name: Crypt::encrypt
  id: api/phalcon_crypt#encrypt
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **encrypt** (*mixed* $text, \[*mixed* $key\])

    Encrypts a text

    ``` php
    $encrypted = $crypt->encrypt("Ultra-secret text", "encrypt password");
    ```
- name: Crypt::encryptBase64
  id: api/phalcon_crypt#encryptbase64
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **encryptBase64** (*mixed* $text, \[*mixed* $key\], \[*mixed* $safe\])

    Encrypts a text returning the result as a base64 string
- name: Crypt::getAvailableCiphers
  id: api/phalcon_crypt#getavailableciphers
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Crypt
  description: "### public **getAvailableCiphers** ()\n\nReturns a list of available ciphers\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt.html)"
- name: Crypt::getCipher
  id: api/phalcon_crypt#getcipher
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **getCipher** ()

    Returns the current cipher
- name: Crypt::getKey
  id: api/phalcon_crypt#getkey
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **getKey** ()

    Returns the encryption key

    ### protected **\_cryptPadText** (*mixed* $text, *mixed* $mode, *mixed* $blockSize, *mixed* $paddingType)

    Pads texts before encryption

    ### protected **\_cryptUnpadText** (*mixed* $text, *mixed* $mode, *mixed* $blockSize, *mixed* $paddingType)

    If the function detects that the text was not padded, it will return it unmodified
- name: Crypt::PADDING_ANSI_X_923
  id: api/phalcon_crypt#padding_ansi_x_923
  summary: null
  belongs_to: Crypt
  description: '### *integer* **PADDING_ANSI_X_923**'
- name: Crypt::PADDING_DEFAULT
  id: api/phalcon_crypt#padding_default
  summary: null
  belongs_to: Crypt
  description: '### *integer* **PADDING_DEFAULT**'
- name: Crypt::PADDING_ISO_10126
  id: api/phalcon_crypt#padding_iso_10126
  summary: null
  belongs_to: Crypt
  description: '### *integer* **PADDING_ISO_10126**'
- name: Crypt::PADDING_ISO_IEC_7816_4
  id: api/phalcon_crypt#padding_iso_iec_7816_4
  summary: null
  belongs_to: Crypt
  description: '### *integer* **PADDING_ISO_IEC_7816_4**'
- name: Crypt::PADDING_PKCS7
  id: api/phalcon_crypt#padding_pkcs7
  summary: null
  belongs_to: Crypt
  description: '### *integer* **PADDING_PKCS7**'
- name: Crypt::PADDING_SPACE
  id: api/phalcon_crypt#padding_space
  summary: null
  belongs_to: Crypt
  description: |-
    ### *integer* **PADDING_SPACE**

    ## Methods
- name: Crypt::PADDING_ZERO
  id: api/phalcon_crypt#padding_zero
  summary: null
  belongs_to: Crypt
  description: '### *integer* **PADDING_ZERO**'
- name: Crypt::setCipher
  id: api/phalcon_crypt#setcipher
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **setCipher** (*mixed* $cipher)

    Sets the cipher algorithm
- name: Crypt::setKey
  id: api/phalcon_crypt#setkey
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **setKey** (*mixed* $key)

    Sets the encryption key
- name: Crypt::setPadding
  id: api/phalcon_crypt#setpadding
  summary: null
  belongs_to: Crypt
  description: |-
    ### public **setPadding** (*mixed* $scheme)

    Changes the padding scheme used
- name: CryptInterface
  id: api/phalcon_cryptinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\CryptInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/cryptinterface.zep)\n\n## Methods\n\n### abstract public **setCipher** (*mixed* $cipher)\n\n...\n\n### abstract public **getCipher** ()\n\n...\n\n### abstract public **setKey** (*mixed* $key)\n\n...\n\n### abstract public **getKey** ()\n\n...\n\n### abstract public **encrypt** (*mixed* $text, \\[*mixed* $key\\])\n\n...\n\n### abstract public **decrypt** (*mixed* $text, \\[*mixed* $key\\])\n\n...\n\n### abstract public **encryptBase64** (*mixed* $text, \\[*mixed* $key\\])\n\n...\n\n### abstract public **decryptBase64** (*mixed* $text, \\[*mixed* $key\\])\n\n...\n\n### abstract public **getAvailableCiphers** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_CryptInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_CryptInterface.html)"
- name: CryptInterface::decrypt
  id: api/phalcon_cryptinterface#decrypt
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **decrypt** (*mixed* $text, \[*mixed* $key\])

    ...
- name: CryptInterface::decryptBase64
  id: api/phalcon_cryptinterface#decryptbase64
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **decryptBase64** (*mixed* $text, \[*mixed* $key\])

    ...
- name: CryptInterface::encrypt
  id: api/phalcon_cryptinterface#encrypt
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **encrypt** (*mixed* $text, \[*mixed* $key\])

    ...
- name: CryptInterface::encryptBase64
  id: api/phalcon_cryptinterface#encryptbase64
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **encryptBase64** (*mixed* $text, \[*mixed* $key\])

    ...
- name: CryptInterface::getAvailableCiphers
  id: api/phalcon_cryptinterface#getavailableciphers
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: CryptInterface
  description: "### abstract public **getAvailableCiphers** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_CryptInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_CryptInterface.html)"
- name: CryptInterface::getCipher
  id: api/phalcon_cryptinterface#getcipher
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **getCipher** ()

    ...
- name: CryptInterface::getKey
  id: api/phalcon_cryptinterface#getkey
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **getKey** ()

    ...
- name: CryptInterface::setCipher
  id: api/phalcon_cryptinterface#setcipher
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **setCipher** (*mixed* $cipher)

    ...
- name: CryptInterface::setKey
  id: api/phalcon_cryptinterface#setkey
  summary: null
  belongs_to: CryptInterface
  description: |-
    ### abstract public **setKey** (*mixed* $key)

    ...
- name: Crypt\Exception
  id: api/phalcon_crypt_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Crypt\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/crypt/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt_Exception.html)"
- name: Database Abstraction Layer
  id: reference/db
  summary: Phalcon\Db is the component behind Phalcon\Mvc\Model that powers the model layer in the framework
  description: "# Database Abstraction Layer\n\n[*Phalcon\\Db*](../api/phalcon_db) is the component behind [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) that powers the model layer in the framework. It consists of an independent high-level abstraction layer for database systems completely written in C.\n\nThis component allows for a lower level database manipulation than using traditional models.\n\n> This guide is not intended to be a complete documentation of available methods and their arguments. Please visit the [*API*](https://docs.phalconphp.com/en/latest/api/index.html) for a complete reference.\n\n## Database Adapters\n\nThis component makes use of adapters to encapsulate specific database system details. Phalcon uses [PDO](http://www.php.net/manual/en/book.pdo.php) to connect to databases. The following database engines are supported:\n\n| Class                                                                           | Description                                                                                                                                                                                                                          |\n|---------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [*Phalcon\\Db\\Adapter\\Pdo\\Mysql*](../api/phalcon_db_adapter_pdo_mysql)           | Is the world’s most used relational database management system (RDBMS) that runs as a server providing multi-user access to a number of databases                                                                                    |\n| [*Phalcon\\Db\\Adapter\\Pdo\\Postgresql*](../api/phalcon_db_adapter_pdo_postgresql) | PostgreSQL is a powerful, open source relational database system. It has more than 15 years of active development and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness. |\n| [*Phalcon\\Db\\Adapter\\Pdo\\Sqlite*](../api/phalcon_db_adapter_pdo_sqlite)         | SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine                                                                                                     |\n\n### Implementing your own adapters\n\nThe [*Phalcon\\Db\\AdapterInterface*](../api/phalcon_db_adapterinterface) interface must be implemented in order to create your own database adapters or extend the existing ones.\n\n## Database Dialects\n\nPhalcon encapsulates the specific details of each database engine in dialects. Those provide common functions and SQL generator to the adapters.\n\n| Class                                                                   |     | Description                                         |\n|-------------------------------------------------------------------------|-----|-----------------------------------------------------|\n| [*Phalcon\\Db\\Dialect\\Mysql*](../api/phalcon_db_dialect_mysql)           |     | SQL specific dialect for MySQL database system      |\n| [*Phalcon\\Db\\Dialect\\Postgresql*](../api/phalcon_db_dialect_postgresql) |     | SQL specific dialect for PostgreSQL database system |\n| [*Phalcon\\Db\\Dialect\\Sqlite*](../api/phalcon_db_dialect_sqlite)         |     | SQL specific dialect for SQLite database system     |\n\n### Implementing your own dialects\n\nThe [*Phalcon\\Db\\DialectInterface*](../api/phalcon_db_dialectinterface) interface must be implemented in order to create your own database dialects or extend the existing ones.\n\n## Connecting to Databases\n\nTo create a connection it’s necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:\n\n``` php\n// Required\n$config = [\n    \"host\"     => \"127.0.0.1\",\n    \"username\" => \"mike\",\n    \"password\" => \"sigma\",\n    \"dbname\"   => \"test_db\",\n];\n\n// Optional\n$config[\"persistent\"] = false;\n\n// Create a connection\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql($config);\n```\n\n``` php\n// Required\n$config = [\n    \"host\"     => \"localhost\",\n    \"username\" => \"postgres\",\n    \"password\" => \"secret1\",\n    \"dbname\"   => \"template\",\n];\n\n// Optional\n$config[\"schema\"] = \"public\";\n\n// Create a connection\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Postgresql($config);\n```\n\n``` php\n// Required\n$config = [\n    \"dbname\" => \"/path/to/database.db\",\n];\n\n// Create a connection\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Sqlite($config);\n```\n\n## Setting up additional PDO options\n\nYou can set PDO options at connection time by passing the parameters ‘options’:\n\n``` php\n// Create a connection with PDO options\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql(\n    [\n        \"host\"     => \"localhost\",\n        \"username\" => \"root\",\n        \"password\" => \"sigma\",\n        \"dbname\"   => \"test_db\",\n        \"options\"  => [\n            PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES 'UTF8'\",\n            PDO::ATTR_CASE               => PDO::CASE_LOWER,\n        ]\n    ]\n);\n```\n\n## Finding Rows\n\n[*Phalcon\\Db*](../api/phalcon_db) provides several methods to query rows from tables. The specific SQL syntax of the target database engine is required in this case:\n\n``` php\n$sql = \"SELECT id, name FROM robots ORDER BY name\";\n\n// Send a SQL statement to the database system\n$result = $connection->query($sql);\n\n// Print each robot name\nwhile ($robot = $result->fetch()) {\n   echo $robot[\"name\"];\n}\n\n// Get all rows in an array\n$robots = $connection->fetchAll($sql);\nforeach ($robots as $robot) {\n   echo $robot[\"name\"];\n}\n\n// Get only the first row\n$robot = $connection->fetchOne($sql);\n```\n\nBy default these calls create arrays with both associative and numeric indexes. You can change this behavior by using `Phalcon\\Db\\Result::setFetchMode()`. This method receives a constant, defining which kind of index is required.\n\n| Constant                  | Description                                               |\n|---------------------------|-----------------------------------------------------------|\n| `Phalcon\\Db::FETCH_NUM`   | Return an array with numeric indexes                      |\n| `Phalcon\\Db::FETCH_ASSOC` | Return an array with associative indexes                  |\n| `Phalcon\\Db::FETCH_BOTH`  | Return an array with both associative and numeric indexes |\n| `Phalcon\\Db::FETCH_OBJ`   | Return an object instead of an array                      |\n\n``` php\n$sql = \"SELECT id, name FROM robots ORDER BY name\";\n$result = $connection->query($sql);\n\n$result->setFetchMode(Phalcon\\Db::FETCH_NUM);\nwhile ($robot = $result->fetch()) {\n   echo $robot[0];\n}\n```\n\nThe `Phalcon\\Db::query()` returns an instance of [*Phalcon\\Db\\Result\\Pdo*](../api/phalcon_db_result_pdo). These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.\n\n``` php\n$sql = \"SELECT id, name FROM robots\";\n$result = $connection->query($sql);\n\n// Traverse the resultset\nwhile ($robot = $result->fetch()) {\n   echo $robot[\"name\"];\n}\n\n// Seek to the third row\n$result->seek(2);\n$robot = $result->fetch();\n\n// Count the resultset\necho $result->numRows();\n```\n\n## Binding Parameters\n\nBound parameters is also supported in [*Phalcon\\Db*](../api/phalcon_db). Although there is a minimal performance impact by using bound parameters, you are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and positional placeholders are supported. Binding parameters can simply be achieved as follows:\n\n``` php\n// Binding with numeric placeholders\n$sql    = \"SELECT * FROM robots WHERE name = ? ORDER BY name\";\n$result = $connection->query(\n    $sql,\n    [\n        \"Wall-E\",\n    ]\n);\n\n// Binding with named placeholders\n$sql     = \"INSERT INTO `robots`(name`, year) VALUES (:name, :year)\";\n$success = $connection->query(\n    $sql,\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n```\n\nWhen using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case “1” or “2” are considered strings and not numbers, so the placeholder could not be successfully replaced. With any adapter data are automatically escaped using [PDO Quote](http://www.php.net/manual/en/pdo.quote.php).\n\nThis function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.\n\nAlso, you can pass your parameters directly to the execute/query methods. In this case bound parameters are directly passed to PDO:\n\n``` php\n// Binding with PDO placeholders\n$sql    = \"SELECT * FROM robots WHERE name = ? ORDER BY name\";\n$result = $connection->query(\n    $sql,\n    [\n        1 => \"Wall-E\",\n    ]\n);\n```\n\n## Inserting/Updating/Deleting Rows\n\nTo insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:\n\n``` php\n// Inserting data with a raw SQL statement\n$sql     = \"INSERT INTO `robots`(`name`, `year`) VALUES ('Astro Boy', 1952)\";\n$success = $connection->execute($sql);\n\n// With placeholders\n$sql     = \"INSERT INTO `robots`(`name`, `year`) VALUES (?, ?)\";\n$success = $connection->execute(\n    $sql,\n    [\n        \"Astro Boy\",\n        1952,\n    ]\n);\n\n// Generating dynamically the necessary SQL\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ],\n);\n\n// Generating dynamically the necessary SQL (another syntax)\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Updating data with a raw SQL statement\n$sql     = \"UPDATE `robots` SET `name` = 'Astro boy' WHERE `id` = 101\";\n$success = $connection->execute($sql);\n\n// With placeholders\n$sql     = \"UPDATE `robots` SET `name` = ? WHERE `id` = ?\";\n$success = $connection->execute(\n    $sql,\n    [\n        \"Astro Boy\",\n        101,\n    ]\n);\n\n// Generating dynamically the necessary SQL\n$success = $connection->update(\n    \"robots\",\n    [\n        \"name\",\n    ],\n    [\n        \"New Astro Boy\",\n    ],\n    \"id = 101\" // Warning! In this case values are not escaped\n);\n\n// Generating dynamically the necessary SQL (another syntax)\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\" // Warning! In this case values are not escaped\n);\n\n// With escaping conditions\n$success = $connection->update(\n    \"robots\",\n    [\n        \"name\",\n    ],\n    [\n        \"New Astro Boy\",\n    ],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [101],\n        \"bindTypes\"  => [PDO::PARAM_INT], // Optional parameter\n    ]\n);\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [101],\n        \"bindTypes\"  => [PDO::PARAM_INT], // Optional parameter\n    ]\n);\n\n// Deleting data with a raw SQL statement\n$sql     = \"DELETE `robots` WHERE `id` = 101\";\n$success = $connection->execute($sql);\n\n// With placeholders\n$sql     = \"DELETE `robots` WHERE `id` = ?\";\n$success = $connection->execute($sql, [101]);\n\n// Generating dynamically the necessary SQL\n$success = $connection->delete(\n    \"robots\",\n    \"id = ?\",\n    [\n        101,\n    ]\n);\n```\n\n## Transactions and Nested Transactions\n\nWorking with transactions is supported as it is with PDO. Perform data manipulation inside transactions often increase the performance on most database systems:\n\n``` php\ntry {\n    // Start a transaction\n    $connection->begin();\n\n    // Execute some SQL statements\n    $connection->execute(\"DELETE `robots` WHERE `id` = 101\");\n    $connection->execute(\"DELETE `robots` WHERE `id` = 102\");\n    $connection->execute(\"DELETE `robots` WHERE `id` = 103\");\n\n    // Commit if everything goes well\n    $connection->commit();\n} catch (Exception $e) {\n    // An exception has occurred rollback the transaction\n    $connection->rollback();\n}\n```\n\nIn addition to standard transactions, [*Phalcon\\Db*](../api/phalcon_db) provides built-in support for [nested transactions](http://en.wikipedia.org/wiki/Nested_transaction) (if the database system used supports them). When you call begin() for a second time a nested transaction is created:\n\n``` php\ntry {\n    // Start a transaction\n    $connection->begin();\n\n    // Execute some SQL statements\n    $connection->execute(\"DELETE `robots` WHERE `id` = 101\");\n\n    try {\n        // Start a nested transaction\n        $connection->begin();\n\n        // Execute these SQL statements into the nested transaction\n        $connection->execute(\"DELETE `robots` WHERE `id` = 102\");\n        $connection->execute(\"DELETE `robots` WHERE `id` = 103\");\n\n        // Create a save point\n        $connection->commit();\n    } catch (Exception $e) {\n        // An error has occurred, release the nested transaction\n        $connection->rollback();\n    }\n\n    // Continue, executing more SQL statements\n    $connection->execute(\"DELETE `robots` WHERE `id` = 104\");\n\n    // Commit if everything goes well\n    $connection->commit();\n} catch (Exception $e) {\n    // An exception has occurred rollback the transaction\n    $connection->rollback();\n}\n```\n\n## Database Events\n\n[*Phalcon\\Db*](../api/phalcon_db) is able to send events to a [*EventsManager*](events) if it’s present. Some events when returning boolean false could stop the active operation. The following events are supported:\n\n| Event Name          | Triggered                                            | Can stop operation? |\n|---------------------|------------------------------------------------------|---------------------|\n| afterConnect        | After a successfully connection to a database system | No                  |\n| beforeQuery         | Before send a SQL statement to the database system   | Yes                 |\n| afterQuery          | After send a SQL statement to database system        | No                  |\n| beforeDisconnect    | Before close a temporal database connection          | No                  |\n| beginTransaction    | Before a transaction is going to be started          | No                  |\n| rollbackTransaction | Before a transaction is rollbacked                   | No                  |\n| commitTransaction   | Before a transaction is committed                    | No                  |\n\nBind an EventsManager to a connection is simple, [*Phalcon\\Db*](../api/phalcon_db) will trigger the events with the type “db”:\n\n``` php\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\n\n$eventsManager = new EventsManager();\n\n// Listen all the database events\n$eventsManager->attach('db', $dbListener);\n\n$connection = new Connection(\n    [\n        \"host\"     => \"localhost\",\n        \"username\" => \"root\",\n        \"password\" => \"secret\",\n        \"dbname\"   => \"invo\",\n    ]\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection->setEventsManager($eventsManager);\n```\n\nStop SQL operations are very useful if for example you want to implement some last-resource SQL injector checker:\n\n``` php\nuse Phalcon\\Events\\Event;\n\n$eventsManager->attach(\n    \"db:beforeQuery\",\n    function (Event $event, $connection) {\n        $sql = $connection->getSQLStatement();\n\n        // Check for malicious words in SQL statements\n        if (preg_match(\"/DROP|ALTER/i\", $sql)) {\n            // DROP/ALTER operations aren't allowed in the application,\n            // this must be a SQL injection!\n            return false;\n        }\n\n        // It's OK\n        return true;\n    }\n);\n```\n\n## Profiling SQL Statements\n\n[*Phalcon\\Db*](../api/phalcon_db) includes a profiling component called [*Phalcon\\Db\\Profiler*](../api/phalcon_db_profiler), that is used to analyze the performance of database operations so as to diagnose performance problems and discover bottlenecks.\n\nDatabase profiling is really easy With [*Phalcon\\Db\\Profiler*](../api/phalcon_db_profiler):\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Profiler as DbProfiler;\n\n$eventsManager = new EventsManager();\n\n$profiler = new DbProfiler();\n\n// Listen all the database events\n$eventsManager->attach(\n    \"db\",\n    function (Event $event, $connection) use ($profiler) {\n        if ($event->getType() === \"beforeQuery\") {\n            $sql = $connection->getSQLStatement();\n\n            // Start a profile with the active connection\n            $profiler->startProfile($sql);\n        }\n\n        if ($event->getType() === \"afterQuery\") {\n            // Stop the active profile\n            $profiler->stopProfile();\n        }\n    }\n);\n\n// Assign the events manager to the connection\n$connection->setEventsManager($eventsManager);\n\n$sql = \"SELECT buyer_name, quantity, product_name \"\n     . \"FROM buyers \"\n     . \"LEFT JOIN products ON buyers.pid = products.id\";\n\n// Execute a SQL statement\n$connection->query($sql);\n\n// Get the last profile in the profiler\n$profile = $profiler->getLastProfile();\n\necho \"SQL Statement: \", $profile->getSQLStatement(), \"\\n\";\necho \"Start Time: \", $profile->getInitialTime(), \"\\n\";\necho \"Final Time: \", $profile->getFinalTime(), \"\\n\";\necho \"Total Elapsed Time: \", $profile->getTotalElapsedSeconds(), \"\\n\";\n```\n\nYou can also create your own profile class based on [*Phalcon\\Db\\Profiler*](../api/phalcon_db_profiler) to record real time statistics of the statements sent to the database system:\n\n``` php\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Profiler as Profiler;\nuse Phalcon\\Db\\Profiler\\Item as Item;\n\nclass DbProfiler extends Profiler\n{\n    /**\n     * Executed before the SQL statement will sent to the db server\n     */\n    public function beforeStartProfile(Item $profile)\n    {\n        echo $profile->getSQLStatement();\n    }\n\n    /**\n     * Executed after the SQL statement was sent to the db server\n     */\n    public function afterEndProfile(Item $profile)\n    {\n        echo $profile->getTotalElapsedSeconds();\n    }\n}\n\n// Create an Events Manager\n$eventsManager = new EventsManager();\n\n// Create a listener\n$dbProfiler = new DbProfiler();\n\n// Attach the listener listening for all database events\n$eventsManager->attach(\"db\", $dbProfiler);\n```\n\n## Logging SQL Statements\n\nUsing high-level abstraction components such as [*Phalcon\\Db*](../api/phalcon_db) to access a database, it is difficult to understand which statements are sent to the database system. [*Phalcon\\Logger*](../api/phalcon_logger) interacts with [*Phalcon\\Db*](../api/phalcon_db), providing logging capabilities on the database abstraction layer.\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Logger\\Adapter\\File as FileLogger;\n\n$eventsManager = new EventsManager();\n\n$logger = new FileLogger(\"app/logs/db.log\");\n\n$eventsManager->attach(\n    \"db:beforeQuery\",\n    function (Event $event, $connection) use ($logger) {\n        $sql = $connection->getSQLStatement();\n\n        $logger->log($sql, Logger::INFO);\n    }\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection->setEventsManager($eventsManager);\n\n// Execute some SQL statement\n$connection->insert(\n    \"products\",\n    [\n        \"Hot pepper\",\n        3.50,\n    ],\n    [\n        \"name\",\n        \"price\",\n    ]\n);\n```\n\nAs above, the file *app/logs/db.log* will contain something like this:\n\n``` php\n[Sun, 29 Apr 12 22:35:26 -0500][DEBUG][Resource Id #77] INSERT INTO products\n(name, price) VALUES ('Hot pepper', 3.50)\n```\n\n### Implementing your own Logger\n\nYou can implement your own logger class for database queries, by creating a class that implements a single method called “log”. The method needs to accept a string as the first argument. You can then pass your logging object to `Phalcon\\Db::setLogger()`, and from then on any SQL statement executed will call that method to log the results.\n\n## Describing Tables/Views\n\n[*Phalcon\\Db*](../api/phalcon_db) also provides methods to retrieve detailed information about tables and views:\n\n``` php\n// Get tables on the test_db database\n$tables = $connection->listTables(\"test_db\");\n\n// Is there a table 'robots' in the database?\n$exists = $connection->tableExists(\"robots\");\n\n// Get name, data types and special features of 'robots' fields\n$fields = $connection->describeColumns(\"robots\");\nforeach ($fields as $field) {\n    echo \"Column Type: \", $field[\"Type\"];\n}\n\n// Get indexes on the 'robots' table\n$indexes = $connection->describeIndexes(\"robots\");\nforeach ($indexes as $index) {\n    print_r(\n        $index->getColumns()\n    );\n}\n\n// Get foreign keys on the 'robots' table\n$references = $connection->describeReferences(\"robots\");\nforeach ($references as $reference) {\n    // Print referenced columns\n    print_r(\n        $reference->getReferencedColumns()\n    );\n}\n```\n\nA table description is very similar to the MySQL describe command, it contains the following information:\n\n| Index | Description                                        |\n|-------|----------------------------------------------------|\n| Field | Field’s name                                       |\n| Type  | Column Type                                        |\n| Key   | Is the column part of the primary key or an index? |\n| Null  | Does the column allow null values?                 |\n\nMethods to get information about views are also implemented for every supported database system:\n\n``` php\n// Get views on the test_db database\n$tables = $connection->listViews(\"test_db\");\n\n// Is there a view 'robots' in the database?\n$exists = $connection->viewExists(\"robots\");\n```\n\n## Creating/Altering/Dropping Tables\n\nDifferent database systems (MySQL, Postgresql etc.) offer the ability to create, alter or drop tables with the use of commands such as CREATE, ALTER or DROP. The SQL syntax differs based on which database system is used. [*Phalcon\\Db*](../api/phalcon_db) offers a unified interface to alter tables, without the need to differentiate the SQL syntax based on the target storage system.\n\n### Creating Tables\n\nThe following example shows how to create a table:\n\n``` php\nuse \\Phalcon\\Db\\Column as Column;\n\n$connection->createTable(\n    \"robots\",\n    null,\n    [\n       \"columns\" => [\n            new Column(\n                \"id\",\n                [\n                    \"type\"          => Column::TYPE_INTEGER,\n                    \"size\"          => 10,\n                    \"notNull\"       => true,\n                    \"autoIncrement\" => true,\n                    \"primary\"       => true,\n                ]\n            ),\n            new Column(\n                \"name\",\n                [\n                    \"type\"    => Column::TYPE_VARCHAR,\n                    \"size\"    => 70,\n                    \"notNull\" => true,\n                ]\n            ),\n            new Column(\n                \"year\",\n                [\n                    \"type\"    => Column::TYPE_INTEGER,\n                    \"size\"    => 11,\n                    \"notNull\" => true,\n                ]\n            ),\n        ]\n    ]\n);\n```\n\n`Phalcon\\Db::createTable()` accepts an associative array describing the table. Columns are defined with the class [*Phalcon\\Db\\Column*](../api/phalcon_db_column). The table below shows the options available to define a column:\n\n| Option          | Description                                                                                                                                | Optional |\n|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------|----------|\n| “type”          | Column type. Must be a [*Phalcon\\Db\\Column*](../api/phalcon_db_column) constant (see below for a list)                                     | No       |\n| “primary”       | True if the column is part of the table’s primary key                                                                                      | Yes      |\n| “size”          | Some type of columns like VARCHAR or INTEGER may have a specific size                                                                      | Yes      |\n| “scale”         | DECIMAL or NUMBER columns may be have a scale to specify how many decimals should be stored                                                | Yes      |\n| “unsigned”      | INTEGER columns may be signed or unsigned. This option does not apply to other types of columns                                            | Yes      |\n| “notNull”       | Column can store null values?                                                                                                              | Yes      |\n| “default”       | Default value (when used with `\"notNull\"`` ``=>`` ``true`).                                                                                | Yes      |\n| “autoIncrement” | With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute. | Yes      |\n| “bind”          | One of the BIND_TYPE\\_\\* constants telling how the column must be binded before save it                                                    | Yes      |\n| “first”         | Column must be placed at first position in the column order                                                                                | Yes      |\n| “after”         | Column must be placed after indicated column                                                                                               | Yes      |\n\n[*Phalcon\\Db*](../api/phalcon_db) supports the following database column types:\n\n- `Phalcon\\Db\\Column::TYPE_INTEGER`\n- `Phalcon\\Db\\Column::TYPE_DATE`\n- `Phalcon\\Db\\Column::TYPE_VARCHAR`\n- `Phalcon\\Db\\Column::TYPE_DECIMAL`\n- `Phalcon\\Db\\Column::TYPE_DATETIME`\n- `Phalcon\\Db\\Column::TYPE_CHAR`\n- `Phalcon\\Db\\Column::TYPE_TEXT`\n\nThe associative array passed in `Phalcon\\Db::createTable()` can have the possible keys:\n\n| Index        | Description                                                                                                                            | Optional |\n|--------------|----------------------------------------------------------------------------------------------------------------------------------------|----------|\n| “columns”    | An array with a set of table columns defined with [*Phalcon\\Db\\Column*](../api/phalcon_db_column)                                      | No       |\n| “indexes”    | An array with a set of table indexes defined with [*Phalcon\\Db\\Index*](../api/phalcon_db_index)                                        | Yes      |\n| “references” | An array with a set of table references (foreign keys) defined with [*Phalcon\\Db\\Reference*](../api/phalcon_db_reference)              | Yes      |\n| “options”    | An array with a set of table creation options. These options often relate to the database system in which the migration was generated. | Yes      |\n\n### Altering Tables\n\nAs your application grows, you might need to alter your database, as part of a refactoring or adding new features. Not all database systems allow to modify existing columns or add columns between two existing ones. [*Phalcon\\Db*](../api/phalcon_db) is limited by these constraints.\n\n``` php\nuse Phalcon\\Db\\Column as Column;\n\n// Adding a new column\n$connection->addColumn(\n    \"robots\",\n    null,\n    new Column(\n        \"robot_type\",\n        [\n            \"type\"    => Column::TYPE_VARCHAR,\n            \"size\"    => 32,\n            \"notNull\" => true,\n            \"after\"   => \"name\",\n        ]\n    )\n);\n\n// Modifying an existing column\n$connection->modifyColumn(\n    \"robots\",\n    null,\n    new Column(\n        \"name\",\n        [\n            \"type\"    => Column::TYPE_VARCHAR,\n            \"size\"    => 40,\n            \"notNull\" => true,\n        ]\n    )\n);\n\n// Deleting the column \"name\"\n$connection->dropColumn(\n    \"robots\",\n    null,\n    \"name\"\n);\n```\n\n### Dropping Tables\n\nExamples on dropping tables:\n\n``` php\n// Drop table robot from active database\n$connection->dropTable(\"robots\");\n\n// Drop table robot from database \"machines\"\n$connection->dropTable(\"robots\", \"machines\");\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/db.html](https://docs.phalconphp.com/en/latest/reference/db.html)"
- name: Database Migrations
  id: reference/migrations
  summary: Migrations are a convenient way for you to alter your database in a structured and organized manner
  description: "# Database Migrations\n\nMigrations are a convenient way for you to alter your database in a structured and organized manner.\n\n> **Important:** Migrations are available in [*Phalcon Developer Tools*](tools) You need at least Phalcon Framework version 0.5.0 to use developer tools. Also, it is recommended to have PHP 5.4 or greater installed.\n\nOften in development we need to update changes in production environments. Some of these changes could be database modifications like new fields, new tables, removing indexes, etc.\n\nWhen a migration is generated a set of classes are created to describe how your database is structured at that particular moment. These classes can be used to synchronize the schema structure on remote databases setting your database ready to work with the new changes that your application implements. Migrations describe these transformations using plain PHP.\n\n## Schema Dumping\n\nThe [*Phalcon Developer Tools*](tools) provides scripts to manage migrations (generation, running and rollback).\n\nThe available options for generating migrations are:\n\nRunning this script without any parameters will simply dump every object (tables and views) from your database into migration classes.\n\nEach migration has a version identifier associated with it. The version number allows us to identify if the migration is newer or older than the current ‘version’ of our database. Versions will also inform Phalcon of the running order when executing a migration.\n\nWhen a migration is generated, instructions are displayed on the console to describe the different steps of the migration and the execution time of those statements. At the end, a migration version is generated.\n\nBy default [*Phalcon Developer Tools*](tools) uses the *app/migrations* directory to dump the migration files. You can change the location by setting one of the parameters on the generation script. Each table in the database has its respective class generated in a separated file under a directory referring its version:\n\n## Migration Class Anatomy\n\nEach file contains a unique class that extends the `Phalcon\\Mvc\\Model\\Migration` class. These classes normally have two methods: `up()` and `down()`. `up()` performs the migration, while `down()` rolls it back.\n\n`up()` also contains the *magic* method `morphTable()`. The magic comes when it recognizes the changes needed to synchronize the actual table in the database to the description given.\n\n``` php\nuse Phalcon\\Db\\Column as Column;\nuse Phalcon\\Db\\Index as Index;\nuse Phalcon\\Db\\Reference as Reference;\nuse Phalcon\\Mvc\\Model\\Migration;\n\nclass ProductsMigration_100 extends Migration\n{\n    public function up()\n    {\n        $this->morphTable(\n            \"products\",\n            [\n                \"columns\" => [\n                    new Column(\n                        \"id\",\n                        [\n                            \"type\"          => Column::TYPE_INTEGER,\n                            \"size\"          => 10,\n                            \"unsigned\"      => true,\n                            \"notNull\"       => true,\n                            \"autoIncrement\" => true,\n                            \"first\"         => true,\n                        ]\n                    ),\n                    new Column(\n                        \"product_types_id\",\n                        [\n                            \"type\"     => Column::TYPE_INTEGER,\n                            \"size\"     => 10,\n                            \"unsigned\" => true,\n                            \"notNull\"  => true,\n                            \"after\"    => \"id\",\n                        ]\n                    ),\n                    new Column(\n                        \"name\",\n                        [\n                            \"type\"    => Column::TYPE_VARCHAR,\n                            \"size\"    => 70,\n                            \"notNull\" => true,\n                            \"after\"   => \"product_types_id\",\n                        ]\n                    ),\n                    new Column(\n                        \"price\",\n                        [\n                            \"type\"    => Column::TYPE_DECIMAL,\n                            \"size\"    => 16,\n                            \"scale\"   => 2,\n                            \"notNull\" => true,\n                            \"after\"   => \"name\",\n                        ]\n                    ),\n                ],\n                \"indexes\" => [\n                    new Index(\n                        \"PRIMARY\",\n                        [\n                            \"id\",\n                        ]\n                    ),\n                    new Index(\n                        \"product_types_id\",\n                        [\n                            \"product_types_id\",\n                        ],\n                    ),\n                ],\n                \"references\" => [\n                    new Reference(\n                        \"products_ibfk_1\",\n                        [\n                            \"referencedSchema\"  => \"invo\",\n                            \"referencedTable\"   => \"product_types\",\n                            \"columns\"           => [\"product_types_id\"],\n                            \"referencedColumns\" => [\"id\"],\n                        ]\n                    ),\n                ],\n                \"options\" => [\n                    \"TABLE_TYPE\"      => \"BASE TABLE\",\n                    \"ENGINE\"          => \"InnoDB\",\n                    \"TABLE_COLLATION\" => \"utf8_general_ci\",\n                ],\n            ]\n        );\n    }\n}\n```\n\nThe class is called “ProductsMigration_100”. Suffix 100 refers to the version 1.0.0. `morphTable()` receives an associative array with 4 possible sections:\n\n| Index        | Description                                                                                                                                 | Optional |\n|--------------|---------------------------------------------------------------------------------------------------------------------------------------------|----------|\n| “columns”    | An array with a set of table columns                                                                                                        | No       |\n| “indexes”    | An array with a set of table indexes.                                                                                                       | Yes      |\n| “references” | An array with a set of table references (foreign keys).                                                                                     | Yes      |\n| “options”    | An array with a set of table creation options. These options are often related to the database system in which the migration was generated. | Yes      |\n\n### Defining Columns\n\n[*Phalcon\\Db\\Column*](../api/phalcon_db_column) is used to define table columns. It encapsulates a wide variety of column related features. Its constructor receives as first parameter the column name and an array describing the column. The following options are available when describing columns:\n\n| Option          | Description                                                                                                                                | Optional |\n|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------|----------|\n| “type”          | Column type. Must be a [*Phalcon_Db_Column*](../api/phalcon_db_column) constant (see below)                                                | No       |\n| “size”          | Some type of columns like VARCHAR or INTEGER may have a specific size                                                                      | Yes      |\n| “scale”         | DECIMAL or NUMBER columns may be have a scale to specify how much decimals it must store                                                   | Yes      |\n| “unsigned”      | INTEGER columns may be signed or unsigned. This option does not apply to other types of columns                                            | Yes      |\n| “notNull”       | Column can store null values?                                                                                                              | Yes      |\n| “default”       | Defines a default value for a column (can only be an actual value, not a function such as NOW())                                           | Yes      |\n| “autoIncrement” | With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute. | Yes      |\n| “first”         | Column must be placed at first position in the column order                                                                                | Yes      |\n| “after”         | Column must be placed after indicated column                                                                                               | Yes      |\n\nDatabase migrations support the following database column types:\n\n- `Phalcon\\Db\\Column::TYPE_INTEGER`\n- `Phalcon\\Db\\Column::TYPE_VARCHAR`\n- `Phalcon\\Db\\Column::TYPE_CHAR`\n- `Phalcon\\Db\\Column::TYPE_DATE`\n- `Phalcon\\Db\\Column::TYPE_DATETIME`\n- `Phalcon\\Db\\Column::TYPE_TIMESTAMP`\n- `Phalcon\\Db\\Column::TYPE_DECIMAL`\n- `Phalcon\\Db\\Column::TYPE_TEXT`\n- `Phalcon\\Db\\Column::TYPE_BOOLEAN`\n- `Phalcon\\Db\\Column::TYPE_FLOAT`\n- `Phalcon\\Db\\Column::TYPE_DOUBLE`\n- `Phalcon\\Db\\Column::TYPE_TINYBLOB`\n- `Phalcon\\Db\\Column::TYPE_BLOB`\n- `Phalcon\\Db\\Column::TYPE_MEDIUMBLOB`\n- `Phalcon\\Db\\Column::TYPE_LONGBLOB`\n- `Phalcon\\Db\\Column::TYPE_JSON`\n- `Phalcon\\Db\\Column::TYPE_JSONB`\n- `Phalcon\\Db\\Column::TYPE_BIGINTEGER`\n\n### Defining Indexes\n\n[*Phalcon\\Db\\Index*](../api/phalcon_db_index) defines table indexes. An index only requires that you define a name for it and a list of its columns. Note that if any index has the name PRIMARY, Phalcon will create a primary key index for that table.\n\n### Defining References\n\n[*Phalcon\\Db\\Reference*](../api/phalcon_db_reference) defines table references (also called foreign keys). The following options can be used to define a reference:\n\n| Index               | Description                                                                                         | Optional | Implemented in   |\n|---------------------|-----------------------------------------------------------------------------------------------------|----------|------------------|\n| “referencedTable”   | It’s auto-descriptive. It refers to the name of the referenced table.                               | No       | All              |\n| “columns”           | An array with the name of the columns at the table that have the reference                          | No       | All              |\n| “referencedColumns” | An array with the name of the columns at the referenced table                                       | No       | All              |\n| “referencedSchema”  | The referenced table maybe is on another schema or database. This option allows you to define that. | Yes      | All              |\n| “onDelete”          | If the foreign record is removed, perform this action on the local record(s).                       | Yes      | MySQL PostgreSQL |\n| “onUpdate”          | If the foreign record is updated, perform this action on the local record(s).                       | Yes      | MySQL PostgreSQL |\n\n## Writing Migrations\n\nMigrations aren’t only designed to “morph” table. A migration is just a regular PHP class so you’re not limited to these functions. For example after adding a column you could write code to set the value of that column for existing records. For more details and examples of individual methods, check the [*database component*](db).\n\n``` php\nuse Phalcon\\Mvc\\Model\\Migration;\n\nclass ProductsMigration_100 extends Migration\n{\n    public function up()\n    {\n        // ...\n\n        self::$_connection->insert(\n            \"products\",\n            [\n                \"Malabar spinach\",\n                14.50,\n            ],\n            [\n                \"name\",\n                \"price\",\n            ]\n        );\n    }\n}\n```\n\n## Running Migrations\n\nOnce the generated migrations are uploaded on the target server, you can easily run them as shown in the following example:\n\nDepending on how outdated is the database with respect to migrations, Phalcon may run multiple migration versions in the same migration process. If you specify a target version, Phalcon will run the required migrations until it reaches the specified version.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/migrations.html](https://docs.phalconphp.com/en/latest/reference/migrations.html)"
- name: Db
  id: api/phalcon_db
  summary: Phalcon\Db and its related classes provide a simple SQL database interface for Phalcon Framework
  description: "# Abstract class **Phalcon\\Db**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db.zep)\n\nPhalcon\\Db and its related classes provide a simple SQL database interface for Phalcon Framework. The Phalcon\\Db is the basic class you use to connect your PHP application to an RDBMS. There is a different adapter class for each brand of RDBMS.\n\nThis component is intended to lower level database operations. If you want to interact with databases using higher level of abstraction use Phalcon\\Mvc\\Model.\n\nPhalcon\\Db is an abstract class. You only can use it with a database adapter like Phalcon\\Db\\Adapter\\Pdo\n\n``` php\nuse Phalcon\\Db;\nuse Phalcon\\Db\\Exception;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlConnection;\n\ntry {\n    $connection = new MysqlConnection(\n        [\n            \"host\"     => \"192.168.0.11\",\n            \"username\" => \"sigma\",\n            \"password\" => \"secret\",\n            \"dbname\"   => \"blog\",\n            \"port\"     => \"3306\",\n        ]\n    );\n\n    $result = $connection->query(\n        \"SELECT * FROM robots LIMIT 5\"\n    );\n\n    $result->setFetchMode(Db::FETCH_NUM);\n\n    while ($robot = $result->fetch()) {\n        print_r($robot);\n    }\n} catch (Exception $e) {\n    echo $e->getMessage(), PHP_EOL;\n}\n```\n\n## Constants\n\n### *integer* **FETCH_LAZY**\n\n### *integer* **FETCH_ASSOC**\n\n### *integer* **FETCH_NAMED**\n\n### *integer* **FETCH_NUM**\n\n### *integer* **FETCH_BOTH**\n\n### *integer* **FETCH_OBJ**\n\n### *integer* **FETCH_BOUND**\n\n### *integer* **FETCH_COLUMN**\n\n### *integer* **FETCH_CLASS**\n\n### *integer* **FETCH_INTO**\n\n### *integer* **FETCH_FUNC**\n\n### *integer* **FETCH_GROUP**\n\n### *integer* **FETCH_UNIQUE**\n\n### *integer* **FETCH_KEY_PAIR**\n\n### *integer* **FETCH_CLASSTYPE**\n\n### *integer* **FETCH_SERIALIZE**\n\n### *integer* **FETCH_PROPS_LATE**\n\n## Methods\n\n### public static **setup** (*array* $options)\n\nEnables/disables options in the Database component\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db.html)"
- name: Db::FETCH_ASSOC
  id: api/phalcon_db#fetch_assoc
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_ASSOC**'
- name: Db::FETCH_BOTH
  id: api/phalcon_db#fetch_both
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_BOTH**'
- name: Db::FETCH_BOUND
  id: api/phalcon_db#fetch_bound
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_BOUND**'
- name: Db::FETCH_CLASS
  id: api/phalcon_db#fetch_class
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_CLASS**'
- name: Db::FETCH_CLASSTYPE
  id: api/phalcon_db#fetch_classtype
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_CLASSTYPE**'
- name: Db::FETCH_COLUMN
  id: api/phalcon_db#fetch_column
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_COLUMN**'
- name: Db::FETCH_FUNC
  id: api/phalcon_db#fetch_func
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_FUNC**'
- name: Db::FETCH_GROUP
  id: api/phalcon_db#fetch_group
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_GROUP**'
- name: Db::FETCH_INTO
  id: api/phalcon_db#fetch_into
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_INTO**'
- name: Db::FETCH_KEY_PAIR
  id: api/phalcon_db#fetch_key_pair
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_KEY_PAIR**'
- name: Db::FETCH_LAZY
  id: api/phalcon_db#fetch_lazy
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_LAZY**'
- name: Db::FETCH_NAMED
  id: api/phalcon_db#fetch_named
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_NAMED**'
- name: Db::FETCH_NUM
  id: api/phalcon_db#fetch_num
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_NUM**'
- name: Db::FETCH_OBJ
  id: api/phalcon_db#fetch_obj
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_OBJ**'
- name: Db::FETCH_PROPS_LATE
  id: api/phalcon_db#fetch_props_late
  summary: null
  belongs_to: Db
  description: |-
    ### *integer* **FETCH_PROPS_LATE**

    ## Methods
- name: Db::FETCH_SERIALIZE
  id: api/phalcon_db#fetch_serialize
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_SERIALIZE**'
- name: Db::FETCH_UNIQUE
  id: api/phalcon_db#fetch_unique
  summary: null
  belongs_to: Db
  description: '### *integer* **FETCH_UNIQUE**'
- name: Db::setup
  id: api/phalcon_db#setup
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db
  description: "### public static **setup** (*array* $options)\n\nEnables/disables options in the Database component\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db.html)"
- name: Db\Adapter
  id: api/phalcon_db_adapter
  summary: Warning! If $whereCondition is string it not escaped
  description: "# Abstract class **Phalcon\\Db\\Adapter**\n\n*implements* [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter.zep)\n\nBase class for Phalcon\\Db adapters\n\n## Methods\n\n### public **getDialectType** ()\n\nName of the dialect used\n\n### public **getType** ()\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** ()\n\nActive SQL bound parameter variables\n\n### public **\\_\\_construct** (*array* $descriptor)\n\nPhalcon\\Db\\Adapter constructor\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the event manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** ()\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\])\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\])\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\])\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\])\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\])\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\])\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\])\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)\n\nCreates a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\])\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nAdds a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\])\n\nModifies a table column based on a definition\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\])\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\])\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public [*Phalcon\\Db\\Index*](phalcon_db_index)\\[\\] **describeIndexes** (*string* $table, \\[*string* $schema\\])\n\nLists table indexes\n\n``` php\nprint_r(\n    $connection->describeIndexes(\"robots_parts\")\n);\n```\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\nLists table references\n\n``` php\nprint_r(\n    $connection->describeReferences(\"robots_parts\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** ()\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** ()\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultIdValue** ()\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **getDefaultValue** ()\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** ()\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **useExplicitIdValue** ()\n\nCheck whether the database system requires an explicit value for identity columns\n\n### public **getDescriptor** ()\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** ()\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** ()\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** ()\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** ()\n\nActive SQL statement in the object\n\n### abstract public **connect** (\\[*array* $descriptor\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **query** (*mixed* $sqlStatement, \\[*mixed* $placeholders\\], \\[*mixed* $dataTypes\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **execute** (*mixed* $sqlStatement, \\[*mixed* $placeholders\\], \\[*mixed* $dataTypes\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **affectedRows** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **close** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **lastInsertId** (\\[*mixed* $sequenceName\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **isUnderTransaction** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **getInternalHandler** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter.html)"
- name: Db\Adapter::addColumn
  id: api/phalcon_db_adapter#addcolumn
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Adds a column to a table
- name: Db\Adapter::addForeignKey
  id: api/phalcon_db_adapter#addforeignkey
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ReferenceInterface*](phalcon_db_referenceinterface) $reference)

    Adds a foreign key to a table
- name: Db\Adapter::addIndex
  id: api/phalcon_db_adapter#addindex
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Adds an index to a table
- name: Db\Adapter::addPrimaryKey
  id: api/phalcon_db_adapter#addprimarykey
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Adds a primary key to a table
- name: Db\Adapter::createSavepoint
  id: api/phalcon_db_adapter#createsavepoint
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **createSavepoint** (*mixed* $name)

    Creates a new savepoint
- name: Db\Adapter::createTable
  id: api/phalcon_db_adapter#createtable
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)

    Creates a table
- name: Db\Adapter::createView
  id: api/phalcon_db_adapter#createview
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **createView** (*mixed* $viewName, *array* $definition, \[*mixed* $schemaName\])

    Creates a view
- name: Db\Adapter::delete
  id: api/phalcon_db_adapter#delete
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *boolean* **delete** (*string* \| *array* $table, \[*string* $whereCondition\], \[*array* $placeholders\], \[*array* $dataTypes\])

    Deletes data from a table using custom RBDM SQL syntax

    ``` php
    // Deleting existing robot
    $success = $connection->delete(
        "robots",
        "id = 101"
    );

    // Next SQL sentence is generated
    DELETE FROM `robots` WHERE `id` = 101
    ```
- name: Db\Adapter::describeIndexes
  id: api/phalcon_db_adapter#describeindexes
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public [*Phalcon\Db\Index*](phalcon_db_index)\[\] **describeIndexes** (*string* $table, \[*string* $schema\])

    Lists table indexes

    ``` php
    print_r(
        $connection->describeIndexes("robots_parts")
    );
    ```
- name: Db\Adapter::describeReferences
  id: api/phalcon_db_adapter#describereferences
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **describeReferences** (*mixed* $table, \[*mixed* $schema\])

    Lists table references

    ``` php
    print_r(
        $connection->describeReferences("robots_parts")
    );
    ```
- name: Db\Adapter::dropColumn
  id: api/phalcon_db_adapter#dropcolumn
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)

    Drops a column from a table
- name: Db\Adapter::dropForeignKey
  id: api/phalcon_db_adapter#dropforeignkey
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)

    Drops a foreign key from a table
- name: Db\Adapter::dropIndex
  id: api/phalcon_db_adapter#dropindex
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)

    Drop an index from a table
- name: Db\Adapter::dropPrimaryKey
  id: api/phalcon_db_adapter#dropprimarykey
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)

    Drops a table’s primary key
- name: Db\Adapter::dropTable
  id: api/phalcon_db_adapter#droptable
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **dropTable** (*mixed* $tableName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Drops a table from a schema/database
- name: Db\Adapter::dropView
  id: api/phalcon_db_adapter#dropview
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **dropView** (*mixed* $viewName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Drops a view
- name: Db\Adapter::escapeIdentifier
  id: api/phalcon_db_adapter#escapeidentifier
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **escapeIdentifier** (*array* \| *string* $identifier)

    Escapes a column/table/schema name

    ``` php
    $escapedTable = $connection->escapeIdentifier(
        "robots"
    );

    $escapedTable = $connection->escapeIdentifier(
        [
            "store",
            "robots",
        ]
    );
    ```
- name: Db\Adapter::fetchAll
  id: api/phalcon_db_adapter#fetchall
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *array* **fetchAll** (*string* $sqlQuery, \[*int* $fetchMode\], \[*array* $bindParams\], \[*array* $bindTypes\])

    Dumps the complete result of a query into an array

    ``` php
    // Getting all robots with associative indexes only
    $robots = $connection->fetchAll(
        "SELECT * FROM robots",
        \Phalcon\Db::FETCH_ASSOC
    );

    foreach ($robots as $robot) {
        print_r($robot);
    }

     // Getting all robots that contains word "robot" withing the name
    $robots = $connection->fetchAll(
        "SELECT * FROM robots WHERE name LIKE :name",
        \Phalcon\Db::FETCH_ASSOC,
        [
            "name" => "%robot%",
        ]
    );
    foreach($robots as $robot) {
        print_r($robot);
    }
    ```
- name: Db\Adapter::fetchColumn
  id: api/phalcon_db_adapter#fetchcolumn
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *string* \| \*\* **fetchColumn** (*string* $sqlQuery, \[*array* $placeholders\], \[*int* \| *string* $column\])

    Returns the n’th field of first row in a SQL query result

    ``` php
    // Getting count of robots
    $robotsCount = $connection->fetchColumn("SELECT count(*) FROM robots");
    print_r($robotsCount);

    // Getting name of last edited robot
    $robot = $connection->fetchColumn(
        "SELECT id, name FROM robots order by modified desc",
        1
    );
    print_r($robot);
    ```
- name: Db\Adapter::fetchOne
  id: api/phalcon_db_adapter#fetchone
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **fetchOne** (*mixed* $sqlQuery, \[*mixed* $fetchMode\], \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    Returns the first row in a SQL query result

    ``` php
    // Getting first robot
    $robot = $connection->fetchOne("SELECT * FROM robots");
    print_r($robot);

    // Getting first robot with associative indexes only
    $robot = $connection->fetchOne("SELECT * FROM robots", \Phalcon\Db::FETCH_ASSOC);
    print_r($robot);
    ```
- name: Db\Adapter::forUpdate
  id: api/phalcon_db_adapter#forupdate
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **forUpdate** (*mixed* $sqlQuery)

    Returns a SQL modified with a FOR UPDATE clause
- name: Db\Adapter::getColumnDefinition
  id: api/phalcon_db_adapter#getcolumndefinition
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getColumnDefinition** ([*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Returns the SQL column definition from a column
- name: Db\Adapter::getColumnList
  id: api/phalcon_db_adapter#getcolumnlist
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *string* **getColumnList** (*array* $columnList)

    Gets a list of columns
- name: Db\Adapter::getConnectionId
  id: api/phalcon_db_adapter#getconnectionid
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *string* **getConnectionId** ()

    Gets the active connection unique identifier
- name: Db\Adapter::getDefaultIdValue
  id: api/phalcon_db_adapter#getdefaultidvalue
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getDefaultIdValue** ()

    Returns the default identity value to be inserted in an identity column

    ``` php
    // Inserting a new robot with a valid default value for the column 'id'
    $success = $connection->insert(
        "robots",
        [
            $connection->getDefaultIdValue(),
            "Astro Boy",
            1952,
        ],
        [
            "id",
            "name",
            "year",
        ]
    );
    ```
- name: Db\Adapter::getDefaultValue
  id: api/phalcon_db_adapter#getdefaultvalue
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getDefaultValue** ()

    Returns the default value to make the RBDM use the default value declared in the table definition

    ``` php
    // Inserting a new robot with a valid default value for the column 'year'
    $success = $connection->insert(
        "robots",
        [
            "Astro Boy",
            $connection->getDefaultValue()
        ],
        [
            "name",
            "year",
        ]
    );
    ```
- name: Db\Adapter::getDescriptor
  id: api/phalcon_db_adapter#getdescriptor
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getDescriptor** ()

    Return descriptor used to connect to the active database
- name: Db\Adapter::getDialect
  id: api/phalcon_db_adapter#getdialect
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getDialect** ()

    Returns internal dialect instance
- name: Db\Adapter::getDialectType
  id: api/phalcon_db_adapter#getdialecttype
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getDialectType** ()

    Name of the dialect used
- name: Db\Adapter::getEventsManager
  id: api/phalcon_db_adapter#geteventsmanager
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Db\Adapter::getNestedTransactionSavepointName
  id: api/phalcon_db_adapter#getnestedtransactionsavepointname
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getNestedTransactionSavepointName** ()

    Returns the savepoint name to use for nested transactions
- name: Db\Adapter::getRealSQLStatement
  id: api/phalcon_db_adapter#getrealsqlstatement
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getRealSQLStatement** ()

    Active SQL statement in the object without replace bound parameters
- name: Db\Adapter::getSQLBindTypes
  id: api/phalcon_db_adapter#getsqlbindtypes
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Adapter
  description: "### public *array* **getSQLBindTypes** ()\n\nActive SQL statement in the object\n\n### abstract public **connect** (\\[*array* $descriptor\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **query** (*mixed* $sqlStatement, \\[*mixed* $placeholders\\], \\[*mixed* $dataTypes\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **execute** (*mixed* $sqlStatement, \\[*mixed* $placeholders\\], \\[*mixed* $dataTypes\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **affectedRows** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **close** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **lastInsertId** (\\[*mixed* $sequenceName\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **isUnderTransaction** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **getInternalHandler** () inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter.html)"
- name: Db\Adapter::getSQLStatement
  id: api/phalcon_db_adapter#getsqlstatement
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getSQLStatement** ()

    Active SQL statement in the object
- name: Db\Adapter::getSqlVariables
  id: api/phalcon_db_adapter#getsqlvariables
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getSqlVariables** ()

    Active SQL bound parameter variables

    ### public **\_\_construct** (*array* $descriptor)

    Phalcon\Db\Adapter constructor
- name: Db\Adapter::getType
  id: api/phalcon_db_adapter#gettype
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **getType** ()

    Type of database system the adapter is used for
- name: Db\Adapter::insert
  id: api/phalcon_db_adapter#insert
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *boolean* **insert** (*string* \| *array* $table, *array* $values, \[*array* $fields\], \[*array* $dataTypes\])

    Inserts data into a table using custom RDBMS SQL syntax

    ``` php
    // Inserting a new robot
    $success = $connection->insert(
        "robots",
        ["Astro Boy", 1952],
        ["name", "year"]
    );

    // Next SQL sentence is sent to the database system
    INSERT INTO `robots` (`name`, `year`) VALUES ("Astro boy", 1952);
    ```
- name: Db\Adapter::insertAsDict
  id: api/phalcon_db_adapter#insertasdict
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *boolean* **insertAsDict** (*string* $table, *array* $data, \[*array* $dataTypes\])

    Inserts data into a table using custom RBDM SQL syntax

    ``` php
    // Inserting a new robot
    $success = $connection->insertAsDict(
        "robots",
        [
            "name" => "Astro Boy",
            "year" => 1952,
        ]
    );

    // Next SQL sentence is sent to the database system
    INSERT INTO `robots` (`name`, `year`) VALUES ("Astro boy", 1952);
    ```
- name: Db\Adapter::isNestedTransactionsWithSavepoints
  id: api/phalcon_db_adapter#isnestedtransactionswithsavepoints
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **isNestedTransactionsWithSavepoints** ()

    Returns if nested transactions should use savepoints
- name: Db\Adapter::limit
  id: api/phalcon_db_adapter#limit
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **limit** (*mixed* $sqlQuery, *mixed* $number)

    Appends a LIMIT clause to $sqlQuery argument

    ``` php
    echo $connection->limit("SELECT * FROM robots", 5);
    ```
- name: Db\Adapter::listTables
  id: api/phalcon_db_adapter#listtables
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **listTables** (\[*mixed* $schemaName\])

    List all tables on a database

    ``` php
    print_r(
        $connection->listTables("blog")
    );
    ```
- name: Db\Adapter::listViews
  id: api/phalcon_db_adapter#listviews
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **listViews** (\[*mixed* $schemaName\])

    List all views on a database

    ``` php
    print_r(
        $connection->listViews("blog")
    );
    ```
- name: Db\Adapter::modifyColumn
  id: api/phalcon_db_adapter#modifycolumn
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column, \[[*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $currentColumn\])

    Modifies a table column based on a definition
- name: Db\Adapter::releaseSavepoint
  id: api/phalcon_db_adapter#releasesavepoint
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **releaseSavepoint** (*mixed* $name)

    Releases given savepoint
- name: Db\Adapter::rollbackSavepoint
  id: api/phalcon_db_adapter#rollbacksavepoint
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **rollbackSavepoint** (*mixed* $name)

    Rollbacks given savepoint
- name: Db\Adapter::setDialect
  id: api/phalcon_db_adapter#setdialect
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **setDialect** ([*Phalcon\Db\DialectInterface*](phalcon_db_dialectinterface) $dialect)

    Sets the dialect used to produce the SQL
- name: Db\Adapter::setEventsManager
  id: api/phalcon_db_adapter#seteventsmanager
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the event manager
- name: Db\Adapter::setNestedTransactionsWithSavepoints
  id: api/phalcon_db_adapter#setnestedtransactionswithsavepoints
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints)

    Set if nested transactions should use savepoints
- name: Db\Adapter::sharedLock
  id: api/phalcon_db_adapter#sharedlock
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **sharedLock** (*mixed* $sqlQuery)

    Returns a SQL modified with a LOCK IN SHARE MODE clause
- name: Db\Adapter::supportSequences
  id: api/phalcon_db_adapter#supportsequences
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **supportSequences** ()

    Check whether the database system requires a sequence to produce auto-numeric values
- name: Db\Adapter::tableExists
  id: api/phalcon_db_adapter#tableexists
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **tableExists** (*mixed* $tableName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.table

    ``` php
    var_dump(
        $connection->tableExists("blog", "posts")
    );
    ```
- name: Db\Adapter::tableOptions
  id: api/phalcon_db_adapter#tableoptions
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **tableOptions** (*mixed* $tableName, \[*mixed* $schemaName\])

    Gets creation options from a table

    ``` php
    print_r(
        $connection->tableOptions("robots")
    );
    ```
- name: Db\Adapter::update
  id: api/phalcon_db_adapter#update
  summary: Warning! If $whereCondition is string it not escaped
  belongs_to: Db\Adapter
  description: |-
    ### public *boolean* **update** (*string* \| *array* $table, *array* $fields, *array* $values, \[*string* \| *array* $whereCondition\], \[*array* $dataTypes\])

    Updates data on a table using custom RBDM SQL syntax

    ``` php
    // Updating existing robot
    $success = $connection->update(
        "robots",
        ["name"],
        ["New Astro Boy"],
        "id = 101"
    );

    // Next SQL sentence is sent to the database system
    UPDATE `robots` SET `name` = "Astro boy" WHERE id = 101

    // Updating existing robot with array condition and $dataTypes
    $success = $connection->update(
        "robots",
        ["name"],
        ["New Astro Boy"],
        [
            "conditions" => "id = ?",
            "bind"       => [$some_unsafe_id],
            "bindTypes"  => [PDO::PARAM_INT], // use only if you use $dataTypes param
        ],
        [
            PDO::PARAM_STR
        ]
    );
    ```

    Warning! If $whereCondition is string it not escaped.
- name: Db\Adapter::updateAsDict
  id: api/phalcon_db_adapter#updateasdict
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public *boolean* **updateAsDict** (*string* $table, *array* $data, \[*string* $whereCondition\], \[*array* $dataTypes\])

    Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax

    ``` php
    // Updating existing robot
    $success = $connection->updateAsDict(
        "robots",
        [
            "name" => "New Astro Boy",
        ],
        "id = 101"
    );

    // Next SQL sentence is sent to the database system
    UPDATE `robots` SET `name` = "Astro boy" WHERE id = 101
    ```
- name: Db\Adapter::useExplicitIdValue
  id: api/phalcon_db_adapter#useexplicitidvalue
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **useExplicitIdValue** ()

    Check whether the database system requires an explicit value for identity columns
- name: Db\Adapter::viewExists
  id: api/phalcon_db_adapter#viewexists
  summary: null
  belongs_to: Db\Adapter
  description: |-
    ### public **viewExists** (*mixed* $viewName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.view

    ``` php
    var_dump(
        $connection->viewExists("active_users", "posts")
    );
    ```
- name: Db\AdapterInterface
  id: api/phalcon_db_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Db\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapterinterface.zep)\n\n## Methods\n\n### abstract public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $placeholders\\])\n\n...\n\n### abstract public **fetchAll** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $placeholders\\])\n\n...\n\n### abstract public **insert** (*mixed* $table, *array* $values, \\[*mixed* $fields\\], \\[*mixed* $dataTypes\\])\n\n...\n\n### abstract public **update** (*mixed* $table, *mixed* $fields, *mixed* $values, \\[*mixed* $whereCondition\\], \\[*mixed* $dataTypes\\])\n\n...\n\n### abstract public **delete** (*mixed* $table, \\[*mixed* $whereCondition\\], \\[*mixed* $placeholders\\], \\[*mixed* $dataTypes\\])\n\n...\n\n### abstract public **getColumnList** (*mixed* $columnList)\n\n...\n\n### abstract public **limit** (*mixed* $sqlQuery, *mixed* $number)\n\n...\n\n### abstract public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **forUpdate** (*mixed* $sqlQuery)\n\n...\n\n### abstract public **sharedLock** (*mixed* $sqlQuery)\n\n...\n\n### abstract public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)\n\n...\n\n### abstract public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\n...\n\n### abstract public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\n...\n\n### abstract public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\n...\n\n### abstract public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\])\n\n...\n\n### abstract public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)\n\n...\n\n### abstract public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\n...\n\n### abstract public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)\n\n...\n\n### abstract public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\n...\n\n### abstract public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)\n\n...\n\n### abstract public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference)\n\n...\n\n### abstract public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)\n\n...\n\n### abstract public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\n...\n\n### abstract public **listTables** (\\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **listViews** (\\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **getDescriptor** ()\n\n...\n\n### abstract public **getConnectionId** ()\n\n...\n\n### abstract public **getSQLStatement** ()\n\n...\n\n### abstract public **getRealSQLStatement** ()\n\n...\n\n### abstract public **getSQLVariables** ()\n\n...\n\n### abstract public **getSQLBindTypes** ()\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **getDialectType** ()\n\n...\n\n### abstract public **getDialect** ()\n\n...\n\n### abstract public **connect** (\\[*array* $descriptor\\])\n\n...\n\n### abstract public **query** (*mixed* $sqlStatement, \\[*mixed* $placeholders\\], \\[*mixed* $dataTypes\\])\n\n...\n\n### abstract public **execute** (*mixed* $sqlStatement, \\[*mixed* $placeholders\\], \\[*mixed* $dataTypes\\])\n\n...\n\n### abstract public **affectedRows** ()\n\n...\n\n### abstract public **close** ()\n\n...\n\n### abstract public **escapeIdentifier** (*mixed* $identifier)\n\n...\n\n### abstract public **escapeString** (*mixed* $str)\n\n...\n\n### abstract public **lastInsertId** (\\[*mixed* $sequenceName\\])\n\n...\n\n### abstract public **begin** (\\[*mixed* $nesting\\])\n\n...\n\n### abstract public **rollback** (\\[*mixed* $nesting\\])\n\n...\n\n### abstract public **commit** (\\[*mixed* $nesting\\])\n\n...\n\n### abstract public **isUnderTransaction** ()\n\n...\n\n### abstract public **getInternalHandler** ()\n\n...\n\n### abstract public **describeIndexes** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n### abstract public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n### abstract public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **useExplicitIdValue** ()\n\n...\n\n### abstract public **getDefaultIdValue** ()\n\n...\n\n### abstract public **supportSequences** ()\n\n...\n\n### abstract public **createSavepoint** (*mixed* $name)\n\n...\n\n### abstract public **releaseSavepoint** (*mixed* $name)\n\n...\n\n### abstract public **rollbackSavepoint** (*mixed* $name)\n\n...\n\n### abstract public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints)\n\n...\n\n### abstract public **isNestedTransactionsWithSavepoints** ()\n\n...\n\n### abstract public **getNestedTransactionSavepointName** ()\n\n...\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_AdapterInterface.html)"
- name: Db\AdapterInterface::addColumn
  id: api/phalcon_db_adapterinterface#addcolumn
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    ...
- name: Db\AdapterInterface::addForeignKey
  id: api/phalcon_db_adapterinterface#addforeignkey
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ReferenceInterface*](phalcon_db_referenceinterface) $reference)

    ...
- name: Db\AdapterInterface::addIndex
  id: api/phalcon_db_adapterinterface#addindex
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    ...
- name: Db\AdapterInterface::addPrimaryKey
  id: api/phalcon_db_adapterinterface#addprimarykey
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    ...
- name: Db\AdapterInterface::affectedRows
  id: api/phalcon_db_adapterinterface#affectedrows
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **affectedRows** ()

    ...
- name: Db\AdapterInterface::begin
  id: api/phalcon_db_adapterinterface#begin
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **begin** (\[*mixed* $nesting\])

    ...
- name: Db\AdapterInterface::close
  id: api/phalcon_db_adapterinterface#close
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **close** ()

    ...
- name: Db\AdapterInterface::commit
  id: api/phalcon_db_adapterinterface#commit
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **commit** (\[*mixed* $nesting\])

    ...
- name: Db\AdapterInterface::connect
  id: api/phalcon_db_adapterinterface#connect
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **connect** (\[*array* $descriptor\])

    ...
- name: Db\AdapterInterface::createSavepoint
  id: api/phalcon_db_adapterinterface#createsavepoint
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **createSavepoint** (*mixed* $name)

    ...
- name: Db\AdapterInterface::createTable
  id: api/phalcon_db_adapterinterface#createtable
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)

    ...
- name: Db\AdapterInterface::createView
  id: api/phalcon_db_adapterinterface#createview
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **createView** (*mixed* $viewName, *array* $definition, \[*mixed* $schemaName\])

    ...
- name: Db\AdapterInterface::delete
  id: api/phalcon_db_adapterinterface#delete
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **delete** (*mixed* $table, \[*mixed* $whereCondition\], \[*mixed* $placeholders\], \[*mixed* $dataTypes\])

    ...
- name: Db\AdapterInterface::describeColumns
  id: api/phalcon_db_adapterinterface#describecolumns
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\AdapterInterface
  description: "### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_AdapterInterface.html)"
- name: Db\AdapterInterface::describeIndexes
  id: api/phalcon_db_adapterinterface#describeindexes
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **describeIndexes** (*mixed* $table, \[*mixed* $schema\])

    ...
- name: Db\AdapterInterface::describeReferences
  id: api/phalcon_db_adapterinterface#describereferences
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **describeReferences** (*mixed* $table, \[*mixed* $schema\])

    ...
- name: Db\AdapterInterface::dropColumn
  id: api/phalcon_db_adapterinterface#dropcolumn
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)

    ...
- name: Db\AdapterInterface::dropForeignKey
  id: api/phalcon_db_adapterinterface#dropforeignkey
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)

    ...
- name: Db\AdapterInterface::dropIndex
  id: api/phalcon_db_adapterinterface#dropindex
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)

    ...
- name: Db\AdapterInterface::dropPrimaryKey
  id: api/phalcon_db_adapterinterface#dropprimarykey
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)

    ...
- name: Db\AdapterInterface::dropTable
  id: api/phalcon_db_adapterinterface#droptable
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **dropTable** (*mixed* $tableName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    ...
- name: Db\AdapterInterface::dropView
  id: api/phalcon_db_adapterinterface#dropview
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **dropView** (*mixed* $viewName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    ...
- name: Db\AdapterInterface::escapeIdentifier
  id: api/phalcon_db_adapterinterface#escapeidentifier
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **escapeIdentifier** (*mixed* $identifier)

    ...
- name: Db\AdapterInterface::escapeString
  id: api/phalcon_db_adapterinterface#escapestring
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **escapeString** (*mixed* $str)

    ...
- name: Db\AdapterInterface::execute
  id: api/phalcon_db_adapterinterface#execute
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **execute** (*mixed* $sqlStatement, \[*mixed* $placeholders\], \[*mixed* $dataTypes\])

    ...
- name: Db\AdapterInterface::fetchAll
  id: api/phalcon_db_adapterinterface#fetchall
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **fetchAll** (*mixed* $sqlQuery, \[*mixed* $fetchMode\], \[*mixed* $placeholders\])

    ...
- name: Db\AdapterInterface::fetchOne
  id: api/phalcon_db_adapterinterface#fetchone
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **fetchOne** (*mixed* $sqlQuery, \[*mixed* $fetchMode\], \[*mixed* $placeholders\])

    ...
- name: Db\AdapterInterface::forUpdate
  id: api/phalcon_db_adapterinterface#forupdate
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **forUpdate** (*mixed* $sqlQuery)

    ...
- name: Db\AdapterInterface::getColumnDefinition
  id: api/phalcon_db_adapterinterface#getcolumndefinition
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getColumnDefinition** ([*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    ...
- name: Db\AdapterInterface::getColumnList
  id: api/phalcon_db_adapterinterface#getcolumnlist
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getColumnList** (*mixed* $columnList)

    ...
- name: Db\AdapterInterface::getConnectionId
  id: api/phalcon_db_adapterinterface#getconnectionid
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getConnectionId** ()

    ...
- name: Db\AdapterInterface::getDefaultIdValue
  id: api/phalcon_db_adapterinterface#getdefaultidvalue
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getDefaultIdValue** ()

    ...
- name: Db\AdapterInterface::getDescriptor
  id: api/phalcon_db_adapterinterface#getdescriptor
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getDescriptor** ()

    ...
- name: Db\AdapterInterface::getDialect
  id: api/phalcon_db_adapterinterface#getdialect
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getDialect** ()

    ...
- name: Db\AdapterInterface::getDialectType
  id: api/phalcon_db_adapterinterface#getdialecttype
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getDialectType** ()

    ...
- name: Db\AdapterInterface::getInternalHandler
  id: api/phalcon_db_adapterinterface#getinternalhandler
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getInternalHandler** ()

    ...
- name: Db\AdapterInterface::getNestedTransactionSavepointName
  id: api/phalcon_db_adapterinterface#getnestedtransactionsavepointname
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getNestedTransactionSavepointName** ()

    ...
- name: Db\AdapterInterface::getRealSQLStatement
  id: api/phalcon_db_adapterinterface#getrealsqlstatement
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getRealSQLStatement** ()

    ...
- name: Db\AdapterInterface::getSQLBindTypes
  id: api/phalcon_db_adapterinterface#getsqlbindtypes
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getSQLBindTypes** ()

    ...
- name: Db\AdapterInterface::getSQLStatement
  id: api/phalcon_db_adapterinterface#getsqlstatement
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getSQLStatement** ()

    ...
- name: Db\AdapterInterface::getSQLVariables
  id: api/phalcon_db_adapterinterface#getsqlvariables
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getSQLVariables** ()

    ...
- name: Db\AdapterInterface::getType
  id: api/phalcon_db_adapterinterface#gettype
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Db\AdapterInterface::insert
  id: api/phalcon_db_adapterinterface#insert
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **insert** (*mixed* $table, *array* $values, \[*mixed* $fields\], \[*mixed* $dataTypes\])

    ...
- name: Db\AdapterInterface::isNestedTransactionsWithSavepoints
  id: api/phalcon_db_adapterinterface#isnestedtransactionswithsavepoints
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **isNestedTransactionsWithSavepoints** ()

    ...
- name: Db\AdapterInterface::isUnderTransaction
  id: api/phalcon_db_adapterinterface#isundertransaction
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **isUnderTransaction** ()

    ...
- name: Db\AdapterInterface::lastInsertId
  id: api/phalcon_db_adapterinterface#lastinsertid
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **lastInsertId** (\[*mixed* $sequenceName\])

    ...
- name: Db\AdapterInterface::limit
  id: api/phalcon_db_adapterinterface#limit
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **limit** (*mixed* $sqlQuery, *mixed* $number)

    ...
- name: Db\AdapterInterface::listTables
  id: api/phalcon_db_adapterinterface#listtables
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **listTables** (\[*mixed* $schemaName\])

    ...
- name: Db\AdapterInterface::listViews
  id: api/phalcon_db_adapterinterface#listviews
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **listViews** (\[*mixed* $schemaName\])

    ...
- name: Db\AdapterInterface::modifyColumn
  id: api/phalcon_db_adapterinterface#modifycolumn
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column, \[[*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $currentColumn\])

    ...
- name: Db\AdapterInterface::query
  id: api/phalcon_db_adapterinterface#query
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **query** (*mixed* $sqlStatement, \[*mixed* $placeholders\], \[*mixed* $dataTypes\])

    ...
- name: Db\AdapterInterface::releaseSavepoint
  id: api/phalcon_db_adapterinterface#releasesavepoint
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **releaseSavepoint** (*mixed* $name)

    ...
- name: Db\AdapterInterface::rollback
  id: api/phalcon_db_adapterinterface#rollback
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **rollback** (\[*mixed* $nesting\])

    ...
- name: Db\AdapterInterface::rollbackSavepoint
  id: api/phalcon_db_adapterinterface#rollbacksavepoint
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **rollbackSavepoint** (*mixed* $name)

    ...
- name: Db\AdapterInterface::setNestedTransactionsWithSavepoints
  id: api/phalcon_db_adapterinterface#setnestedtransactionswithsavepoints
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints)

    ...
- name: Db\AdapterInterface::sharedLock
  id: api/phalcon_db_adapterinterface#sharedlock
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **sharedLock** (*mixed* $sqlQuery)

    ...
- name: Db\AdapterInterface::supportSequences
  id: api/phalcon_db_adapterinterface#supportsequences
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **supportSequences** ()

    ...
- name: Db\AdapterInterface::tableExists
  id: api/phalcon_db_adapterinterface#tableexists
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **tableExists** (*mixed* $tableName, \[*mixed* $schemaName\])

    ...
- name: Db\AdapterInterface::tableOptions
  id: api/phalcon_db_adapterinterface#tableoptions
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **tableOptions** (*mixed* $tableName, \[*mixed* $schemaName\])

    ...
- name: Db\AdapterInterface::update
  id: api/phalcon_db_adapterinterface#update
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **update** (*mixed* $table, *mixed* $fields, *mixed* $values, \[*mixed* $whereCondition\], \[*mixed* $dataTypes\])

    ...
- name: Db\AdapterInterface::useExplicitIdValue
  id: api/phalcon_db_adapterinterface#useexplicitidvalue
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **useExplicitIdValue** ()

    ...
- name: Db\AdapterInterface::viewExists
  id: api/phalcon_db_adapterinterface#viewexists
  summary: null
  belongs_to: Db\AdapterInterface
  description: |-
    ### abstract public **viewExists** (*mixed* $viewName, \[*mixed* $schemaName\])

    ...
- name: Db\Adapter\Pdo
  id: api/phalcon_db_adapter_pdo
  summary: This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor
  description: "# Abstract class **Phalcon\\Db\\Adapter\\Pdo**\n\n*extends* abstract class [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo.zep)\n\nPhalcon\\Db\\Adapter\\Pdo is the Phalcon\\Db that internally uses PDO to connect to a database\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$config = [\n    \"host\"     => \"localhost\",\n    \"dbname\"   => \"blog\",\n    \"port\"     => 3306,\n    \"username\" => \"sigma\",\n    \"password\" => \"secret\",\n];\n\n$connection = new Mysql($config);\n```\n\n## Methods\n\n### public **\\_\\_construct** (*array* $descriptor)\n\nConstructor for Phalcon\\Db\\Adapter\\Pdo\n\n### public **connect** (\\[*array* $descriptor\\])\n\nThis method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n// Make a connection\n$connection = new Mysql(\n    [\n        \"host\"     => \"localhost\",\n        \"username\" => \"sigma\",\n        \"password\" => \"secret\",\n        \"dbname\"   => \"blog\",\n        \"port\"     => 3306,\n    ]\n);\n\n// Reconnect\n$connection->connect();\n```\n\n### public **prepare** (*mixed* $sqlStatement)\n\nReturns a PDO prepared statement to be executed with ‘executePrepared’\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes)\n\nExecutes a prepared statement binding. This function uses integer indexes starting from zero\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public **query** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows\n\n``` php\n// Querying data\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n```\n\n### public **execute** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows\n\n``` php\n// Inserting data\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n```\n\n### public **affectedRows** ()\n\nReturns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system\n\n``` php\n$connection->execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection->affectedRows(), \" were deleted\";\n```\n\n### public **close** ()\n\nCloses the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends\n\n### public **escapeString** (*mixed* $str)\n\nEscapes a value to avoid SQL injections according to the active charset in the connection\n\n``` php\n$escapedStr = $connection->escapeString(\"some dangerous value\");\n```\n\n### public **convertBoundParams** (*mixed* $sql, \\[*array* $params\\])\n\nConverts bound parameters such as :name: or ?1 into PDO bind params ?\n\n``` php\nprint_r(\n    $connection->convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n```\n\n### public *int* \\| *boolean* **lastInsertId** (\\[*string* $sequenceName\\])\n\nReturns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection->lastInsertId();\n```\n\n### public **begin** (\\[*mixed* $nesting\\])\n\nStarts a transaction in the connection\n\n### public **rollback** (\\[*mixed* $nesting\\])\n\nRollbacks the active transaction in the connection\n\n### public **commit** (\\[*mixed* $nesting\\])\n\nCommits the active transaction in the connection\n\n### public **getTransactionLevel** ()\n\nReturns the current transaction nesting level\n\n### public **isUnderTransaction** ()\n\nChecks whether the connection is under a transaction\n\n``` php\n$connection->begin();\n\n// true\nvar_dump(\n    $connection->isUnderTransaction()\n);\n```\n\n### public **getInternalHandler** ()\n\nReturn internal PDO handler\n\n### public *array* **getErrorInfo** ()\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nModifies a table column based on a definition\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public [*Phalcon\\Db\\Index*](phalcon_db_index)\\[\\] **describeIndexes** (*string* $table, \\[*string* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table indexes\n\n``` php\nprint_r(\n    $connection->describeIndexes(\"robots_parts\")\n);\n```\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table references\n\n``` php\nprint_r(\n    $connection->describeReferences(\"robots_parts\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **getDefaultValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **useExplicitIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires an explicit value for identity columns\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo.html)"
- name: Db\Adapter\Pdo::affectedRows
  id: api/phalcon_db_adapter_pdo#affectedrows
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **affectedRows** ()

    Returns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system

    ``` php
    $connection->execute(
        "DELETE FROM robots"
    );

    echo $connection->affectedRows(), " were deleted";
    ```
- name: Db\Adapter\Pdo::begin
  id: api/phalcon_db_adapter_pdo#begin
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **begin** (\[*mixed* $nesting\])

    Starts a transaction in the connection
- name: Db\Adapter\Pdo::close
  id: api/phalcon_db_adapter_pdo#close
  summary: Closes the active connection returning success
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **close** ()

    Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends
- name: Db\Adapter\Pdo::commit
  id: api/phalcon_db_adapter_pdo#commit
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **commit** (\[*mixed* $nesting\])

    Commits the active transaction in the connection
- name: Db\Adapter\Pdo::connect
  id: api/phalcon_db_adapter_pdo#connect
  summary: This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **connect** (\[*array* $descriptor\])

    This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.

    ``` php
    use Phalcon\Db\Adapter\Pdo\Mysql;

    // Make a connection
    $connection = new Mysql(
        [
            "host"     => "localhost",
            "username" => "sigma",
            "password" => "secret",
            "dbname"   => "blog",
            "port"     => 3306,
        ]
    );

    // Reconnect
    $connection->connect();
    ```
- name: Db\Adapter\Pdo::convertBoundParams
  id: api/phalcon_db_adapter_pdo#convertboundparams
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **convertBoundParams** (*mixed* $sql, \[*array* $params\])

    Converts bound parameters such as :name: or ?1 into PDO bind params ?

    ``` php
    print_r(
        $connection->convertBoundParams(
            "SELECT * FROM robots WHERE name = :name:",
            [
                "Bender",
            ]
        )
    );
    ```
- name: Db\Adapter\Pdo::escapeString
  id: api/phalcon_db_adapter_pdo#escapestring
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **escapeString** (*mixed* $str)

    Escapes a value to avoid SQL injections according to the active charset in the connection

    ``` php
    $escapedStr = $connection->escapeString("some dangerous value");
    ```
- name: Db\Adapter\Pdo::execute
  id: api/phalcon_db_adapter_pdo#execute
  summary: Sends SQL statements to the database server returning the success state
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **execute** (*mixed* $sqlStatement, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows

    ``` php
    // Inserting data
    $success = $connection->execute(
        "INSERT INTO robots VALUES (1, 'Astro Boy')"
    );

    $success = $connection->execute(
        "INSERT INTO robots VALUES (?, ?)",
        [
            1,
            "Astro Boy",
        ]
    );
    ```
- name: Db\Adapter\Pdo::executePrepared
  id: api/phalcon_db_adapter_pdo#executeprepared
  summary: Executes a prepared statement binding
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes)

    Executes a prepared statement binding. This function uses integer indexes starting from zero

    ``` php
    use Phalcon\Db\Column;

    $statement = $db->prepare(
        "SELECT * FROM robots WHERE name = :name"
    );

    $result = $connection->executePrepared(
        $statement,
        [
            "name" => "Voltron",
        ],
        [
            "name" => Column::BIND_PARAM_INT,
        ]
    );
    ```
- name: Db\Adapter\Pdo::getErrorInfo
  id: api/phalcon_db_adapter_pdo#geterrorinfo
  summary: Warning! If $whereCondition is string it not escaped
  belongs_to: Db\Adapter\Pdo
  description: "### public *array* **getErrorInfo** ()\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nModifies a table column based on a definition\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public [*Phalcon\\Db\\Index*](phalcon_db_index)\\[\\] **describeIndexes** (*string* $table, \\[*string* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table indexes\n\n``` php\nprint_r(\n    $connection->describeIndexes(\"robots_parts\")\n);\n```\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table references\n\n``` php\nprint_r(\n    $connection->describeReferences(\"robots_parts\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **getDefaultValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **useExplicitIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires an explicit value for identity columns\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo.html)"
- name: Db\Adapter\Pdo::getInternalHandler
  id: api/phalcon_db_adapter_pdo#getinternalhandler
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **getInternalHandler** ()

    Return internal PDO handler
- name: Db\Adapter\Pdo::getTransactionLevel
  id: api/phalcon_db_adapter_pdo#gettransactionlevel
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **getTransactionLevel** ()

    Returns the current transaction nesting level
- name: Db\Adapter\Pdo::isUnderTransaction
  id: api/phalcon_db_adapter_pdo#isundertransaction
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **isUnderTransaction** ()

    Checks whether the connection is under a transaction

    ``` php
    $connection->begin();

    // true
    var_dump(
        $connection->isUnderTransaction()
    );
    ```
- name: Db\Adapter\Pdo::lastInsertId
  id: api/phalcon_db_adapter_pdo#lastinsertid
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public *int* \| *boolean* **lastInsertId** (\[*string* $sequenceName\])

    Returns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement

    ``` php
    // Inserting a new robot
    $success = $connection->insert(
        "robots",
        [
            "Astro Boy",
            1952,
        ],
        [
            "name",
            "year",
        ]
    );

    // Getting the generated id
    $id = $connection->lastInsertId();
    ```
- name: Db\Adapter\Pdo::prepare
  id: api/phalcon_db_adapter_pdo#prepare
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **prepare** (*mixed* $sqlStatement)

    Returns a PDO prepared statement to be executed with ‘executePrepared’

    ``` php
    use Phalcon\Db\Column;

    $statement = $db->prepare(
        "SELECT * FROM robots WHERE name = :name"
    );

    $result = $connection->executePrepared(
        $statement,
        [
            "name" => "Voltron",
        ],
        [
            "name" => Column::BIND_PARAM_INT,
        ]
    );
    ```
- name: Db\Adapter\Pdo::query
  id: api/phalcon_db_adapter_pdo#query
  summary: Sends SQL statements to the database server returning the success state
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **query** (*mixed* $sqlStatement, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows

    ``` php
    // Querying data
    $resultset = $connection->query(
        "SELECT * FROM robots WHERE type = 'mechanical'"
    );

    $resultset = $connection->query(
        "SELECT * FROM robots WHERE type = ?",
        [
            "mechanical",
        ]
    );
    ```
- name: Db\Adapter\Pdo::rollback
  id: api/phalcon_db_adapter_pdo#rollback
  summary: null
  belongs_to: Db\Adapter\Pdo
  description: |-
    ### public **rollback** (\[*mixed* $nesting\])

    Rollbacks the active transaction in the connection
- name: Db\Adapter\Pdo\Mysql
  id: api/phalcon_db_adapter_pdo_mysql
  summary: This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor
  description: "# Class **Phalcon\\Db\\Adapter\\Pdo\\Mysql**\n\n*extends* abstract class [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\n*implements* [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo/mysql.zep)\n\nSpecific functions for the Mysql database system\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$config = [\n    \"host\"     => \"localhost\",\n    \"dbname\"   => \"blog\",\n    \"port\"     => 3306,\n    \"username\" => \"sigma\",\n    \"password\" => \"secret\",\n];\n\n$connection = new Mysql($config);\n```\n\n## Methods\n\n### public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\nReturns an array of Phalcon\\Db\\Column objects describing a table\n\n``` php\nprint_r(\n    $connection->describeColumns(\"posts\")\n);\n```\n\n### public [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface)\\[\\] **describeIndexes** (*string* $table, \\[*string* $schema\\])\n\nLists table indexes\n\n``` php\nprint_r(\n    $connection->describeIndexes(\"robots_parts\")\n);\n```\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\nLists table references\n\n``` php\nprint_r(\n    $connection->describeReferences(\"robots_parts\")\n);\n```\n\n### public **\\_\\_construct** (*array* $descriptor) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConstructor for Phalcon\\Db\\Adapter\\Pdo\n\n### public **connect** (\\[*array* $descriptor\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nThis method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n// Make a connection\n$connection = new Mysql(\n    [\n        \"host\"     => \"localhost\",\n        \"username\" => \"sigma\",\n        \"password\" => \"secret\",\n        \"dbname\"   => \"blog\",\n        \"port\"     => 3306,\n    ]\n);\n\n// Reconnect\n$connection->connect();\n```\n\n### public **prepare** (*mixed* $sqlStatement) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns a PDO prepared statement to be executed with ‘executePrepared’\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nExecutes a prepared statement binding. This function uses integer indexes starting from zero\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public **query** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows\n\n``` php\n// Querying data\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n```\n\n### public **execute** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows\n\n``` php\n// Inserting data\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n```\n\n### public **affectedRows** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system\n\n``` php\n$connection->execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection->affectedRows(), \" were deleted\";\n```\n\n### public **close** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCloses the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends\n\n### public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nEscapes a value to avoid SQL injections according to the active charset in the connection\n\n``` php\n$escapedStr = $connection->escapeString(\"some dangerous value\");\n```\n\n### public **convertBoundParams** (*mixed* $sql, \\[*array* $params\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConverts bound parameters such as :name: or ?1 into PDO bind params ?\n\n``` php\nprint_r(\n    $connection->convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n```\n\n### public *int* \\| *boolean* **lastInsertId** (\\[*string* $sequenceName\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection->lastInsertId();\n```\n\n### public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nStarts a transaction in the connection\n\n### public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nRollbacks the active transaction in the connection\n\n### public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCommits the active transaction in the connection\n\n### public **getTransactionLevel** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the current transaction nesting level\n\n### public **isUnderTransaction** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nChecks whether the connection is under a transaction\n\n``` php\n$connection->begin();\n\n// true\nvar_dump(\n    $connection->isUnderTransaction()\n);\n```\n\n### public **getInternalHandler** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn internal PDO handler\n\n### public *array* **getErrorInfo** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nModifies a table column based on a definition\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **getDefaultValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **useExplicitIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires an explicit value for identity columns\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Mysql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Mysql.html)"
- name: Db\Adapter\Pdo\Mysql::describeColumns
  id: api/phalcon_db_adapter_pdo_mysql#describecolumns
  summary: null
  belongs_to: Db\Adapter\Pdo\Mysql
  description: |-
    ### public **describeColumns** (*mixed* $table, \[*mixed* $schema\])

    Returns an array of Phalcon\Db\Column objects describing a table

    ``` php
    print_r(
        $connection->describeColumns("posts")
    );
    ```
- name: Db\Adapter\Pdo\Mysql::describeIndexes
  id: api/phalcon_db_adapter_pdo_mysql#describeindexes
  summary: null
  belongs_to: Db\Adapter\Pdo\Mysql
  description: |-
    ### public [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface)\[\] **describeIndexes** (*string* $table, \[*string* $schema\])

    Lists table indexes

    ``` php
    print_r(
        $connection->describeIndexes("robots_parts")
    );
    ```
- name: Db\Adapter\Pdo\Mysql::describeReferences
  id: api/phalcon_db_adapter_pdo_mysql#describereferences
  summary: This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor
  belongs_to: Db\Adapter\Pdo\Mysql
  description: "### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\nLists table references\n\n``` php\nprint_r(\n    $connection->describeReferences(\"robots_parts\")\n);\n```\n\n### public **\\_\\_construct** (*array* $descriptor) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConstructor for Phalcon\\Db\\Adapter\\Pdo\n\n### public **connect** (\\[*array* $descriptor\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nThis method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n// Make a connection\n$connection = new Mysql(\n    [\n        \"host\"     => \"localhost\",\n        \"username\" => \"sigma\",\n        \"password\" => \"secret\",\n        \"dbname\"   => \"blog\",\n        \"port\"     => 3306,\n    ]\n);\n\n// Reconnect\n$connection->connect();\n```\n\n### public **prepare** (*mixed* $sqlStatement) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns a PDO prepared statement to be executed with ‘executePrepared’\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nExecutes a prepared statement binding. This function uses integer indexes starting from zero\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public **query** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows\n\n``` php\n// Querying data\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n```\n\n### public **execute** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows\n\n``` php\n// Inserting data\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n```\n\n### public **affectedRows** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system\n\n``` php\n$connection->execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection->affectedRows(), \" were deleted\";\n```\n\n### public **close** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCloses the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends\n\n### public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nEscapes a value to avoid SQL injections according to the active charset in the connection\n\n``` php\n$escapedStr = $connection->escapeString(\"some dangerous value\");\n```\n\n### public **convertBoundParams** (*mixed* $sql, \\[*array* $params\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConverts bound parameters such as :name: or ?1 into PDO bind params ?\n\n``` php\nprint_r(\n    $connection->convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n```\n\n### public *int* \\| *boolean* **lastInsertId** (\\[*string* $sequenceName\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection->lastInsertId();\n```\n\n### public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nStarts a transaction in the connection\n\n### public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nRollbacks the active transaction in the connection\n\n### public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCommits the active transaction in the connection\n\n### public **getTransactionLevel** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the current transaction nesting level\n\n### public **isUnderTransaction** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nChecks whether the connection is under a transaction\n\n``` php\n$connection->begin();\n\n// true\nvar_dump(\n    $connection->isUnderTransaction()\n);\n```\n\n### public **getInternalHandler** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn internal PDO handler\n\n### public *array* **getErrorInfo** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nModifies a table column based on a definition\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **getDefaultValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **useExplicitIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires an explicit value for identity columns\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Mysql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Mysql.html)"
- name: Db\Adapter\Pdo\Postgresql
  id: api/phalcon_db_adapter_pdo_postgresql
  summary: This method is automatically called in Phalcon\Db\Adapter\Pdo constructor
  description: "# Class **Phalcon\\Db\\Adapter\\Pdo\\Postgresql**\n\n*extends* abstract class [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\n*implements* [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo/postgresql.zep)\n\nSpecific functions for the Postgresql database system\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Postgresql;\n\n$config = [\n    \"host\"     => \"localhost\",\n    \"dbname\"   => \"blog\",\n    \"port\"     => 5432,\n    \"username\" => \"postgres\",\n    \"password\" => \"secret\",\n];\n\n$connection = new Postgresql($config);\n```\n\n## Methods\n\n### public **connect** (\\[*array* $descriptor\\])\n\nThis method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.\n\n### public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\nReturns an array of Phalcon\\Db\\Column objects describing a table\n\n``` php\nprint_r(\n    $connection->describeColumns(\"posts\")\n);\n```\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)\n\nCreates a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\])\n\nModifies a table column based on a definition\n\n### public **useExplicitIdValue** ()\n\nCheck whether the database system requires an explicit value for identity columns\n\n### public **getDefaultIdValue** ()\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** ()\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **\\_\\_construct** (*array* $descriptor) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConstructor for Phalcon\\Db\\Adapter\\Pdo\n\n### public **prepare** (*mixed* $sqlStatement) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns a PDO prepared statement to be executed with ‘executePrepared’\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nExecutes a prepared statement binding. This function uses integer indexes starting from zero\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public **query** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows\n\n``` php\n// Querying data\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n```\n\n### public **execute** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows\n\n``` php\n// Inserting data\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n```\n\n### public **affectedRows** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system\n\n``` php\n$connection->execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection->affectedRows(), \" were deleted\";\n```\n\n### public **close** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCloses the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends\n\n### public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nEscapes a value to avoid SQL injections according to the active charset in the connection\n\n``` php\n$escapedStr = $connection->escapeString(\"some dangerous value\");\n```\n\n### public **convertBoundParams** (*mixed* $sql, \\[*array* $params\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConverts bound parameters such as :name: or ?1 into PDO bind params ?\n\n``` php\nprint_r(\n    $connection->convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n```\n\n### public *int* \\| *boolean* **lastInsertId** (\\[*string* $sequenceName\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection->lastInsertId();\n```\n\n### public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nStarts a transaction in the connection\n\n### public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nRollbacks the active transaction in the connection\n\n### public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCommits the active transaction in the connection\n\n### public **getTransactionLevel** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the current transaction nesting level\n\n### public **isUnderTransaction** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nChecks whether the connection is under a transaction\n\n``` php\n$connection->begin();\n\n// true\nvar_dump(\n    $connection->isUnderTransaction()\n);\n```\n\n### public **getInternalHandler** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn internal PDO handler\n\n### public *array* **getErrorInfo** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public [*Phalcon\\Db\\Index*](phalcon_db_index)\\[\\] **describeIndexes** (*string* $table, \\[*string* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table indexes\n\n``` php\nprint_r(\n    $connection->describeIndexes(\"robots_parts\")\n);\n```\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table references\n\n``` php\nprint_r(\n    $connection->describeReferences(\"robots_parts\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Postgresql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Postgresql.html)"
- name: Db\Adapter\Pdo\Postgresql::connect
  id: api/phalcon_db_adapter_pdo_postgresql#connect
  summary: This method is automatically called in Phalcon\Db\Adapter\Pdo constructor
  belongs_to: Db\Adapter\Pdo\Postgresql
  description: |-
    ### public **connect** (\[*array* $descriptor\])

    This method is automatically called in Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.
- name: Db\Adapter\Pdo\Postgresql::createTable
  id: api/phalcon_db_adapter_pdo_postgresql#createtable
  summary: null
  belongs_to: Db\Adapter\Pdo\Postgresql
  description: |-
    ### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)

    Creates a table
- name: Db\Adapter\Pdo\Postgresql::describeColumns
  id: api/phalcon_db_adapter_pdo_postgresql#describecolumns
  summary: null
  belongs_to: Db\Adapter\Pdo\Postgresql
  description: |-
    ### public **describeColumns** (*mixed* $table, \[*mixed* $schema\])

    Returns an array of Phalcon\Db\Column objects describing a table

    ``` php
    print_r(
        $connection->describeColumns("posts")
    );
    ```
- name: Db\Adapter\Pdo\Postgresql::getDefaultIdValue
  id: api/phalcon_db_adapter_pdo_postgresql#getdefaultidvalue
  summary: null
  belongs_to: Db\Adapter\Pdo\Postgresql
  description: |-
    ### public **getDefaultIdValue** ()

    Returns the default identity value to be inserted in an identity column

    ``` php
    // Inserting a new robot with a valid default value for the column 'id'
    $success = $connection->insert(
        "robots",
        [
            $connection->getDefaultIdValue(),
            "Astro Boy",
            1952,
        ],
        [
            "id",
            "name",
            "year",
        ]
    );
    ```
- name: Db\Adapter\Pdo\Postgresql::modifyColumn
  id: api/phalcon_db_adapter_pdo_postgresql#modifycolumn
  summary: null
  belongs_to: Db\Adapter\Pdo\Postgresql
  description: |-
    ### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column, \[[*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $currentColumn\])

    Modifies a table column based on a definition
- name: Db\Adapter\Pdo\Postgresql::supportSequences
  id: api/phalcon_db_adapter_pdo_postgresql#supportsequences
  summary: Executes a prepared statement binding
  belongs_to: Db\Adapter\Pdo\Postgresql
  description: "### public **supportSequences** ()\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **\\_\\_construct** (*array* $descriptor) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConstructor for Phalcon\\Db\\Adapter\\Pdo\n\n### public **prepare** (*mixed* $sqlStatement) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns a PDO prepared statement to be executed with ‘executePrepared’\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nExecutes a prepared statement binding. This function uses integer indexes starting from zero\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public **query** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows\n\n``` php\n// Querying data\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n```\n\n### public **execute** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows\n\n``` php\n// Inserting data\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n```\n\n### public **affectedRows** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system\n\n``` php\n$connection->execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection->affectedRows(), \" were deleted\";\n```\n\n### public **close** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCloses the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends\n\n### public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nEscapes a value to avoid SQL injections according to the active charset in the connection\n\n``` php\n$escapedStr = $connection->escapeString(\"some dangerous value\");\n```\n\n### public **convertBoundParams** (*mixed* $sql, \\[*array* $params\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConverts bound parameters such as :name: or ?1 into PDO bind params ?\n\n``` php\nprint_r(\n    $connection->convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n```\n\n### public *int* \\| *boolean* **lastInsertId** (\\[*string* $sequenceName\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection->lastInsertId();\n```\n\n### public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nStarts a transaction in the connection\n\n### public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nRollbacks the active transaction in the connection\n\n### public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCommits the active transaction in the connection\n\n### public **getTransactionLevel** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the current transaction nesting level\n\n### public **isUnderTransaction** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nChecks whether the connection is under a transaction\n\n``` php\n$connection->begin();\n\n// true\nvar_dump(\n    $connection->isUnderTransaction()\n);\n```\n\n### public **getInternalHandler** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn internal PDO handler\n\n### public *array* **getErrorInfo** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public [*Phalcon\\Db\\Index*](phalcon_db_index)\\[\\] **describeIndexes** (*string* $table, \\[*string* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table indexes\n\n``` php\nprint_r(\n    $connection->describeIndexes(\"robots_parts\")\n);\n```\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nLists table references\n\n``` php\nprint_r(\n    $connection->describeReferences(\"robots_parts\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Postgresql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Postgresql.html)"
- name: Db\Adapter\Pdo\Postgresql::useExplicitIdValue
  id: api/phalcon_db_adapter_pdo_postgresql#useexplicitidvalue
  summary: null
  belongs_to: Db\Adapter\Pdo\Postgresql
  description: |-
    ### public **useExplicitIdValue** ()

    Check whether the database system requires an explicit value for identity columns
- name: Db\Adapter\Pdo\Sqlite
  id: api/phalcon_db_adapter_pdo_sqlite
  summary: This method is automatically called in Phalcon\Db\Adapter\Pdo constructor
  description: "# Class **Phalcon\\Db\\Adapter\\Pdo\\Sqlite**\n\n*extends* abstract class [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\n*implements* [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo/sqlite.zep)\n\nSpecific functions for the Sqlite database system\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Sqlite;\n\n$connection = new Sqlite(\n    [\n        \"dbname\" => \"/tmp/test.sqlite\",\n    ]\n);\n```\n\n## Methods\n\n### public **connect** (\\[*array* $descriptor\\])\n\nThis method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.\n\n### public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\nReturns an array of Phalcon\\Db\\Column objects describing a table\n\n``` php\nprint_r(\n    $connection->describeColumns(\"posts\")\n);\n```\n\n### public [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface)\\[\\] **describeIndexes** (*string* $table, \\[*string* $schema\\])\n\nLists table indexes\n\n``` php\nprint_r(\n    $connection->describeIndexes(\"robots_parts\")\n);\n```\n\n### public [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface)\\[\\] **describeReferences** (*string* $table, \\[*string* $schema\\])\n\nLists table references\n\n### public **useExplicitIdValue** ()\n\nCheck whether the database system requires an explicit value for identity columns\n\n### public **getDefaultValue** ()\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue(),\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **\\_\\_construct** (*array* $descriptor) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConstructor for Phalcon\\Db\\Adapter\\Pdo\n\n### public **prepare** (*mixed* $sqlStatement) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns a PDO prepared statement to be executed with ‘executePrepared’\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nExecutes a prepared statement binding. This function uses integer indexes starting from zero\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public **query** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows\n\n``` php\n// Querying data\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n```\n\n### public **execute** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows\n\n``` php\n// Inserting data\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n```\n\n### public **affectedRows** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system\n\n``` php\n$connection->execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection->affectedRows(), \" were deleted\";\n```\n\n### public **close** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCloses the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends\n\n### public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nEscapes a value to avoid SQL injections according to the active charset in the connection\n\n``` php\n$escapedStr = $connection->escapeString(\"some dangerous value\");\n```\n\n### public **convertBoundParams** (*mixed* $sql, \\[*array* $params\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConverts bound parameters such as :name: or ?1 into PDO bind params ?\n\n``` php\nprint_r(\n    $connection->convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n```\n\n### public *int* \\| *boolean* **lastInsertId** (\\[*string* $sequenceName\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection->lastInsertId();\n```\n\n### public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nStarts a transaction in the connection\n\n### public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nRollbacks the active transaction in the connection\n\n### public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCommits the active transaction in the connection\n\n### public **getTransactionLevel** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the current transaction nesting level\n\n### public **isUnderTransaction** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nChecks whether the connection is under a transaction\n\n``` php\n$connection->begin();\n\n// true\nvar_dump(\n    $connection->isUnderTransaction()\n);\n```\n\n### public **getInternalHandler** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn internal PDO handler\n\n### public *array* **getErrorInfo** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nModifies a table column based on a definition\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Sqlite.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Sqlite.html)"
- name: Db\Adapter\Pdo\Sqlite::connect
  id: api/phalcon_db_adapter_pdo_sqlite#connect
  summary: This method is automatically called in Phalcon\Db\Adapter\Pdo constructor
  belongs_to: Db\Adapter\Pdo\Sqlite
  description: |-
    ### public **connect** (\[*array* $descriptor\])

    This method is automatically called in Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.
- name: Db\Adapter\Pdo\Sqlite::describeColumns
  id: api/phalcon_db_adapter_pdo_sqlite#describecolumns
  summary: null
  belongs_to: Db\Adapter\Pdo\Sqlite
  description: |-
    ### public **describeColumns** (*mixed* $table, \[*mixed* $schema\])

    Returns an array of Phalcon\Db\Column objects describing a table

    ``` php
    print_r(
        $connection->describeColumns("posts")
    );
    ```
- name: Db\Adapter\Pdo\Sqlite::describeIndexes
  id: api/phalcon_db_adapter_pdo_sqlite#describeindexes
  summary: null
  belongs_to: Db\Adapter\Pdo\Sqlite
  description: |-
    ### public [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface)\[\] **describeIndexes** (*string* $table, \[*string* $schema\])

    Lists table indexes

    ``` php
    print_r(
        $connection->describeIndexes("robots_parts")
    );
    ```
- name: Db\Adapter\Pdo\Sqlite::describeReferences
  id: api/phalcon_db_adapter_pdo_sqlite#describereferences
  summary: null
  belongs_to: Db\Adapter\Pdo\Sqlite
  description: |-
    ### public [*Phalcon\Db\ReferenceInterface*](phalcon_db_referenceinterface)\[\] **describeReferences** (*string* $table, \[*string* $schema\])

    Lists table references
- name: Db\Adapter\Pdo\Sqlite::getDefaultValue
  id: api/phalcon_db_adapter_pdo_sqlite#getdefaultvalue
  summary: Executes a prepared statement binding
  belongs_to: Db\Adapter\Pdo\Sqlite
  description: "### public **getDefaultValue** ()\n\nReturns the default value to make the RBDM use the default value declared in the table definition\n\n``` php\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection->getDefaultValue(),\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **\\_\\_construct** (*array* $descriptor) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConstructor for Phalcon\\Db\\Adapter\\Pdo\n\n### public **prepare** (*mixed* $sqlStatement) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns a PDO prepared statement to be executed with ‘executePrepared’\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public [PDOStatement](http://php.net/manual/en/class.pdostatement.php) **executePrepared** ([PDOStatement](http://php.net/manual/en/class.pdostatement.php) $statement, *array* $placeholders, *array* $dataTypes) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nExecutes a prepared statement binding. This function uses integer indexes starting from zero\n\n``` php\nuse Phalcon\\Db\\Column;\n\n$statement = $db->prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection->executePrepared(\n    $statement,\n    [\n        \"name\" => \"Voltron\",\n    ],\n    [\n        \"name\" => Column::BIND_PARAM_INT,\n    ]\n);\n```\n\n### public **query** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows\n\n``` php\n// Querying data\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection->query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n```\n\n### public **execute** (*mixed* $sqlStatement, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nSends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows\n\n``` php\n// Inserting data\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection->execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n```\n\n### public **affectedRows** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system\n\n``` php\n$connection->execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection->affectedRows(), \" were deleted\";\n```\n\n### public **close** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCloses the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends\n\n### public **escapeString** (*mixed* $str) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nEscapes a value to avoid SQL injections according to the active charset in the connection\n\n``` php\n$escapedStr = $connection->escapeString(\"some dangerous value\");\n```\n\n### public **convertBoundParams** (*mixed* $sql, \\[*array* $params\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nConverts bound parameters such as :name: or ?1 into PDO bind params ?\n\n``` php\nprint_r(\n    $connection->convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n```\n\n### public *int* \\| *boolean* **lastInsertId** (\\[*string* $sequenceName\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection->lastInsertId();\n```\n\n### public **begin** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nStarts a transaction in the connection\n\n### public **rollback** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nRollbacks the active transaction in the connection\n\n### public **commit** (\\[*mixed* $nesting\\]) inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nCommits the active transaction in the connection\n\n### public **getTransactionLevel** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturns the current transaction nesting level\n\n### public **isUnderTransaction** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nChecks whether the connection is under a transaction\n\n``` php\n$connection->begin();\n\n// true\nvar_dump(\n    $connection->isUnderTransaction()\n);\n```\n\n### public **getInternalHandler** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn internal PDO handler\n\n### public *array* **getErrorInfo** () inherited from [*Phalcon\\Db\\Adapter\\Pdo*](phalcon_db_adapter_pdo)\n\nReturn the error info, if any\n\n### public **getDialectType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nName of the dialect used\n\n### public **getType** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nType of database system the adapter is used for\n\n### public **getSqlVariables** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL bound parameter variables\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the internal event manager\n\n### public **setDialect** ([*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface) $dialect) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSets the dialect used to produce the SQL\n\n### public **getDialect** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns internal dialect instance\n\n### public **fetchOne** (*mixed* $sqlQuery, \\[*mixed* $fetchMode\\], \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the first row in a SQL query result\n\n``` php\n// Getting first robot\n$robot = $connection->fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection->fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n```\n\n### public *array* **fetchAll** (*string* $sqlQuery, \\[*int* $fetchMode\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDumps the complete result of a query into an array\n\n``` php\n// Getting all robots with associative indexes only\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection->fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" => \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n```\n\n### public *string* \\| \\*\\* **fetchColumn** (*string* $sqlQuery, \\[*array* $placeholders\\], \\[*int* \\| *string* $column\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the n’th field of first row in a SQL query result\n\n``` php\n// Getting count of robots\n$robotsCount = $connection->fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection->fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n```\n\n### public *boolean* **insert** (*string* \\| *array* $table, *array* $values, \\[*array* $fields\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RDBMS SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **insertAsDict** (*string* $table, *array* $data, \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nInserts data into a table using custom RBDM SQL syntax\n\n``` php\n// Inserting a new robot\n$success = $connection->insertAsDict(\n    \"robots\",\n    [\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n```\n\n### public *boolean* **update** (*string* \\| *array* $table, *array* $fields, *array* $values, \\[*string* \\| *array* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax\n\n``` php\n// Updating existing robot\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection->update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" => \"id = ?\",\n        \"bind\"       => [$some_unsafe_id],\n        \"bindTypes\"  => [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n```\n\nWarning! If $whereCondition is string it not escaped.\n\n### public *boolean* **updateAsDict** (*string* $table, *array* $data, \\[*string* $whereCondition\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nUpdates data on a table using custom RBDM SQL syntax Another, more convenient syntax\n\n``` php\n// Updating existing robot\n$success = $connection->updateAsDict(\n    \"robots\",\n    [\n        \"name\" => \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n```\n\n### public *boolean* **delete** (*string* \\| *array* $table, \\[*string* $whereCondition\\], \\[*array* $placeholders\\], \\[*array* $dataTypes\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDeletes data from a table using custom RBDM SQL syntax\n\n``` php\n// Deleting existing robot\n$success = $connection->delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n```\n\n### public **escapeIdentifier** (*array* \\| *string* $identifier) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nEscapes a column/table/schema name\n\n``` php\n$escapedTable = $connection->escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection->escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n```\n\n### public *string* **getColumnList** (*array* $columnList) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets a list of columns\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAppends a LIMIT clause to $sqlQuery argument\n\n``` php\necho $connection->limit(\"SELECT * FROM robots\", 5);\n```\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\nvar_dump(\n    $connection->tableExists(\"blog\", \"posts\")\n);\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGenerates SQL checking for the existence of a schema.view\n\n``` php\nvar_dump(\n    $connection->viewExists(\"active_users\", \"posts\")\n);\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table from a schema/database\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a view\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nModifies a table column based on a definition\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrop an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a table’s primary key\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nAdds a foreign key to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nDrops a foreign key from a table\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the SQL column definition from a column\n\n### public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all tables on a database\n\n``` php\nprint_r(\n    $connection->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nList all views on a database\n\n``` php\nprint_r(\n    $connection->listViews(\"blog\")\n);\n```\n\n### public **tableOptions** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets creation options from a table\n\n``` php\nprint_r(\n    $connection->tableOptions(\"robots\")\n);\n```\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCreates a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReleases given savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nRollbacks given savepoint\n\n### public **setNestedTransactionsWithSavepoints** (*mixed* $nestedTransactionsWithSavepoints) inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nSet if nested transactions should use savepoints\n\n### public **isNestedTransactionsWithSavepoints** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns if nested transactions should use savepoints\n\n### public **getNestedTransactionSavepointName** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the savepoint name to use for nested transactions\n\n### public **getDefaultIdValue** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturns the default identity value to be inserted in an identity column\n\n``` php\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection->insert(\n    \"robots\",\n    [\n        $connection->getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public **supportSequences** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nCheck whether the database system requires a sequence to produce auto-numeric values\n\n### public **getDescriptor** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nReturn descriptor used to connect to the active database\n\n### public *string* **getConnectionId** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nGets the active connection unique identifier\n\n### public **getSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n### public **getRealSQLStatement** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object without replace bound parameters\n\n### public *array* **getSQLBindTypes** () inherited from [*Phalcon\\Db\\Adapter*](phalcon_db_adapter)\n\nActive SQL statement in the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Sqlite.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Sqlite.html)"
- name: Db\Adapter\Pdo\Sqlite::useExplicitIdValue
  id: api/phalcon_db_adapter_pdo_sqlite#useexplicitidvalue
  summary: null
  belongs_to: Db\Adapter\Pdo\Sqlite
  description: |-
    ### public **useExplicitIdValue** ()

    Check whether the database system requires an explicit value for identity columns
- name: Db\Column
  id: api/phalcon_db_column
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Db\\Column**\n\n*implements* [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/column.zep)\n\nAllows to define columns to be used on create or alter table operations\n\n``` php\nuse Phalcon\\Db\\Column as Column;\n\n// Column definition\n$column = new Column(\n    \"id\",\n    [\n        \"type\"          => Column::TYPE_INTEGER,\n        \"size\"          => 10,\n        \"unsigned\"      => true,\n        \"notNull\"       => true,\n        \"autoIncrement\" => true,\n        \"first\"         => true,\n    ]\n);\n\n// Add column to existing table\n$connection->addColumn(\"robots\", null, $column);\n```\n\n## Constants\n\n### *integer* **TYPE_INTEGER**\n\n### *integer* **TYPE_DATE**\n\n### *integer* **TYPE_VARCHAR**\n\n### *integer* **TYPE_DECIMAL**\n\n### *integer* **TYPE_DATETIME**\n\n### *integer* **TYPE_CHAR**\n\n### *integer* **TYPE_TEXT**\n\n### *integer* **TYPE_FLOAT**\n\n### *integer* **TYPE_BOOLEAN**\n\n### *integer* **TYPE_DOUBLE**\n\n### *integer* **TYPE_TINYBLOB**\n\n### *integer* **TYPE_BLOB**\n\n### *integer* **TYPE_MEDIUMBLOB**\n\n### *integer* **TYPE_LONGBLOB**\n\n### *integer* **TYPE_BIGINTEGER**\n\n### *integer* **TYPE_JSON**\n\n### *integer* **TYPE_JSONB**\n\n### *integer* **TYPE_TIMESTAMP**\n\n### *integer* **BIND_PARAM_NULL**\n\n### *integer* **BIND_PARAM_INT**\n\n### *integer* **BIND_PARAM_STR**\n\n### *integer* **BIND_PARAM_BLOB**\n\n### *integer* **BIND_PARAM_BOOL**\n\n### *integer* **BIND_PARAM_DECIMAL**\n\n### *integer* **BIND_SKIP**\n\n## Methods\n\n### public **getName** ()\n\nColumn’s name\n\n### public **getSchemaName** ()\n\nSchema which table related is\n\n### public **getType** ()\n\nColumn data type\n\n### public **getTypeReference** ()\n\nColumn data type reference\n\n### public **getTypeValues** ()\n\nColumn data type values\n\n### public **getSize** ()\n\nInteger column size\n\n### public **getScale** ()\n\nInteger column number scale\n\n### public **getDefault** ()\n\nDefault column value\n\n### public **\\_\\_construct** (*mixed* $name, *array* $definition)\n\nPhalcon\\Db\\Column constructor\n\n### public **isUnsigned** ()\n\nReturns true if number column is unsigned\n\n### public **isNotNull** ()\n\nNot null\n\n### public **isPrimary** ()\n\nColumn is part of the primary key?\n\n### public **isAutoIncrement** ()\n\nAuto-Increment\n\n### public **isNumeric** ()\n\nCheck whether column have an numeric type\n\n### public **isFirst** ()\n\nCheck whether column have first position in table\n\n### public *string* **getAfterPosition** ()\n\nCheck whether field absolute to position in table\n\n### public **getBindType** ()\n\nReturns the type of bind handling\n\n### public static **\\_\\_set_state** (*array* $data)\n\nRestores the internal state of a Phalcon\\Db\\Column object\n\n### public **hasDefault** ()\n\nCheck whether column has default value\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Column.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Column.html)"
- name: Db\Column::BIND_PARAM_BLOB
  id: api/phalcon_db_column#bind_param_blob
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **BIND_PARAM_BLOB**'
- name: Db\Column::BIND_PARAM_BOOL
  id: api/phalcon_db_column#bind_param_bool
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **BIND_PARAM_BOOL**'
- name: Db\Column::BIND_PARAM_DECIMAL
  id: api/phalcon_db_column#bind_param_decimal
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **BIND_PARAM_DECIMAL**'
- name: Db\Column::BIND_PARAM_INT
  id: api/phalcon_db_column#bind_param_int
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **BIND_PARAM_INT**'
- name: Db\Column::BIND_PARAM_NULL
  id: api/phalcon_db_column#bind_param_null
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **BIND_PARAM_NULL**'
- name: Db\Column::BIND_PARAM_STR
  id: api/phalcon_db_column#bind_param_str
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **BIND_PARAM_STR**'
- name: Db\Column::BIND_SKIP
  id: api/phalcon_db_column#bind_skip
  summary: null
  belongs_to: Db\Column
  description: |-
    ### *integer* **BIND_SKIP**

    ## Methods
- name: Db\Column::getAfterPosition
  id: api/phalcon_db_column#getafterposition
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public *string* **getAfterPosition** ()

    Check whether field absolute to position in table
- name: Db\Column::getBindType
  id: api/phalcon_db_column#getbindtype
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getBindType** ()

    Returns the type of bind handling
- name: Db\Column::getDefault
  id: api/phalcon_db_column#getdefault
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getDefault** ()

    Default column value

    ### public **\_\_construct** (*mixed* $name, *array* $definition)

    Phalcon\Db\Column constructor
- name: Db\Column::getName
  id: api/phalcon_db_column#getname
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getName** ()

    Column’s name
- name: Db\Column::getScale
  id: api/phalcon_db_column#getscale
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getScale** ()

    Integer column number scale
- name: Db\Column::getSchemaName
  id: api/phalcon_db_column#getschemaname
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getSchemaName** ()

    Schema which table related is
- name: Db\Column::getSize
  id: api/phalcon_db_column#getsize
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getSize** ()

    Integer column size
- name: Db\Column::getType
  id: api/phalcon_db_column#gettype
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getType** ()

    Column data type
- name: Db\Column::getTypeReference
  id: api/phalcon_db_column#gettypereference
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getTypeReference** ()

    Column data type reference
- name: Db\Column::getTypeValues
  id: api/phalcon_db_column#gettypevalues
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **getTypeValues** ()

    Column data type values
- name: Db\Column::hasDefault
  id: api/phalcon_db_column#hasdefault
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Column
  description: "### public **hasDefault** ()\n\nCheck whether column has default value\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Column.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Column.html)"
- name: Db\Column::isAutoIncrement
  id: api/phalcon_db_column#isautoincrement
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **isAutoIncrement** ()

    Auto-Increment
- name: Db\Column::isFirst
  id: api/phalcon_db_column#isfirst
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **isFirst** ()

    Check whether column have first position in table
- name: Db\Column::isNotNull
  id: api/phalcon_db_column#isnotnull
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **isNotNull** ()

    Not null
- name: Db\Column::isNumeric
  id: api/phalcon_db_column#isnumeric
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **isNumeric** ()

    Check whether column have an numeric type
- name: Db\Column::isPrimary
  id: api/phalcon_db_column#isprimary
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **isPrimary** ()

    Column is part of the primary key?
- name: Db\Column::isUnsigned
  id: api/phalcon_db_column#isunsigned
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public **isUnsigned** ()

    Returns true if number column is unsigned
- name: Db\Column::TYPE_BIGINTEGER
  id: api/phalcon_db_column#type_biginteger
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_BIGINTEGER**'
- name: Db\Column::TYPE_BLOB
  id: api/phalcon_db_column#type_blob
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_BLOB**'
- name: Db\Column::TYPE_BOOLEAN
  id: api/phalcon_db_column#type_boolean
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_BOOLEAN**'
- name: Db\Column::TYPE_CHAR
  id: api/phalcon_db_column#type_char
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_CHAR**'
- name: Db\Column::TYPE_DATE
  id: api/phalcon_db_column#type_date
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_DATE**'
- name: Db\Column::TYPE_DATETIME
  id: api/phalcon_db_column#type_datetime
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_DATETIME**'
- name: Db\Column::TYPE_DECIMAL
  id: api/phalcon_db_column#type_decimal
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_DECIMAL**'
- name: Db\Column::TYPE_DOUBLE
  id: api/phalcon_db_column#type_double
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_DOUBLE**'
- name: Db\Column::TYPE_FLOAT
  id: api/phalcon_db_column#type_float
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_FLOAT**'
- name: Db\Column::TYPE_INTEGER
  id: api/phalcon_db_column#type_integer
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_INTEGER**'
- name: Db\Column::TYPE_JSON
  id: api/phalcon_db_column#type_json
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_JSON**'
- name: Db\Column::TYPE_JSONB
  id: api/phalcon_db_column#type_jsonb
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_JSONB**'
- name: Db\Column::TYPE_LONGBLOB
  id: api/phalcon_db_column#type_longblob
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_LONGBLOB**'
- name: Db\Column::TYPE_MEDIUMBLOB
  id: api/phalcon_db_column#type_mediumblob
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_MEDIUMBLOB**'
- name: Db\Column::TYPE_TEXT
  id: api/phalcon_db_column#type_text
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_TEXT**'
- name: Db\Column::TYPE_TIMESTAMP
  id: api/phalcon_db_column#type_timestamp
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_TIMESTAMP**'
- name: Db\Column::TYPE_TINYBLOB
  id: api/phalcon_db_column#type_tinyblob
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_TINYBLOB**'
- name: Db\Column::TYPE_VARCHAR
  id: api/phalcon_db_column#type_varchar
  summary: null
  belongs_to: Db\Column
  description: '### *integer* **TYPE_VARCHAR**'
- name: Db\Column::__set_state
  id: api/phalcon_db_column#__set_state
  summary: null
  belongs_to: Db\Column
  description: |-
    ### public static **\_\_set_state** (*array* $data)

    Restores the internal state of a Phalcon\Db\Column object
- name: Db\ColumnInterface
  id: api/phalcon_db_columninterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Db\\ColumnInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/columninterface.zep)\n\n## Methods\n\n### abstract public **getSchemaName** ()\n\n...\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **getTypeReference** ()\n\n...\n\n### abstract public **getTypeValues** ()\n\n...\n\n### abstract public **getSize** ()\n\n...\n\n### abstract public **getScale** ()\n\n...\n\n### abstract public **isUnsigned** ()\n\n...\n\n### abstract public **isNotNull** ()\n\n...\n\n### abstract public **isPrimary** ()\n\n...\n\n### abstract public **isAutoIncrement** ()\n\n...\n\n### abstract public **isNumeric** ()\n\n...\n\n### abstract public **isFirst** ()\n\n...\n\n### abstract public **getAfterPosition** ()\n\n...\n\n### abstract public **getBindType** ()\n\n...\n\n### abstract public **getDefault** ()\n\n...\n\n### abstract public **hasDefault** ()\n\n...\n\n### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ColumnInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ColumnInterface.html)"
- name: Db\ColumnInterface::getAfterPosition
  id: api/phalcon_db_columninterface#getafterposition
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getAfterPosition** ()

    ...
- name: Db\ColumnInterface::getBindType
  id: api/phalcon_db_columninterface#getbindtype
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getBindType** ()

    ...
- name: Db\ColumnInterface::getDefault
  id: api/phalcon_db_columninterface#getdefault
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getDefault** ()

    ...
- name: Db\ColumnInterface::getName
  id: api/phalcon_db_columninterface#getname
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Db\ColumnInterface::getScale
  id: api/phalcon_db_columninterface#getscale
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getScale** ()

    ...
- name: Db\ColumnInterface::getSchemaName
  id: api/phalcon_db_columninterface#getschemaname
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getSchemaName** ()

    ...
- name: Db\ColumnInterface::getSize
  id: api/phalcon_db_columninterface#getsize
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getSize** ()

    ...
- name: Db\ColumnInterface::getType
  id: api/phalcon_db_columninterface#gettype
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Db\ColumnInterface::getTypeReference
  id: api/phalcon_db_columninterface#gettypereference
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getTypeReference** ()

    ...
- name: Db\ColumnInterface::getTypeValues
  id: api/phalcon_db_columninterface#gettypevalues
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **getTypeValues** ()

    ...
- name: Db\ColumnInterface::hasDefault
  id: api/phalcon_db_columninterface#hasdefault
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **hasDefault** ()

    ...
- name: Db\ColumnInterface::isAutoIncrement
  id: api/phalcon_db_columninterface#isautoincrement
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **isAutoIncrement** ()

    ...
- name: Db\ColumnInterface::isFirst
  id: api/phalcon_db_columninterface#isfirst
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **isFirst** ()

    ...
- name: Db\ColumnInterface::isNotNull
  id: api/phalcon_db_columninterface#isnotnull
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **isNotNull** ()

    ...
- name: Db\ColumnInterface::isNumeric
  id: api/phalcon_db_columninterface#isnumeric
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **isNumeric** ()

    ...
- name: Db\ColumnInterface::isPrimary
  id: api/phalcon_db_columninterface#isprimary
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **isPrimary** ()

    ...
- name: Db\ColumnInterface::isUnsigned
  id: api/phalcon_db_columninterface#isunsigned
  summary: null
  belongs_to: Db\ColumnInterface
  description: |-
    ### abstract public **isUnsigned** ()

    ...
- name: Db\ColumnInterface::__set_state
  id: api/phalcon_db_columninterface#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\ColumnInterface
  description: "### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ColumnInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ColumnInterface.html)"
- name: Db\Dialect
  id: api/phalcon_db_dialect
  summary: This is the base class to each database dialect
  description: "# Abstract class **Phalcon\\Db\\Dialect**\n\n*implements* [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect.zep)\n\nThis is the base class to each database dialect. This implements common methods to transform intermediate code into its RDBMS related syntax\n\n## Methods\n\n### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction)\n\nRegisters custom SQL functions\n\n### public **getCustomFunctions** ()\n\nReturns registered functions\n\n### final public **escapeSchema** (*mixed* $str, \\[*mixed* $escapeChar\\])\n\nEscape Schema\n\n### final public **escape** (*mixed* $str, \\[*mixed* $escapeChar\\])\n\nEscape identifiers\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number)\n\nGenerates the SQL for LIMIT clause\n\n``` php\n$sql = $dialect->limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect->limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n```\n\n### public **forUpdate** (*mixed* $sqlQuery)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n``` php\n$sql = $dialect->forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n```\n\n### public **sharedLock** (*mixed* $sqlQuery)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n``` php\n$sql = $dialect->sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n```\n\n### final public **getColumnList** (*array* $columnList, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nGets a list of columns with escaped identifiers\n\n``` php\necho $dialect->getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n```\n\n### final public **getSqlColumn** (*mixed* $column, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve Column expressions\n\n### public **getSqlExpression** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nTransforms an intermediate representation for an expression into a database system valid expression\n\n### final public **getSqlTable** (*mixed* $table, \\[*mixed* $escapeChar\\])\n\nTransform an intermediate representation of a schema/table into a database system valid expression\n\n### public **select** (*array* $definition)\n\nBuilds a SELECT statement\n\n### public **supportsSavepoints** ()\n\nChecks whether the platform supports savepoints\n\n### public **supportsReleaseSavepoints** ()\n\nChecks whether the platform supports releasing savepoints.\n\n### public **createSavepoint** (*mixed* $name)\n\nGenerate SQL to create a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name)\n\nGenerate SQL to release a savepoint\n\n### public **rollbackSavepoint** (*mixed* $name)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\])\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\])\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\])\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\])\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\])\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\])\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\])\n\nPrepares qualified for this RDBMS\n\n### abstract public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropTable** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **describeIndexes** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect.html)"
- name: Db\Dialect::createSavepoint
  id: api/phalcon_db_dialect#createsavepoint
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **createSavepoint** (*mixed* $name)

    Generate SQL to create a new savepoint
- name: Db\Dialect::escape
  id: api/phalcon_db_dialect#escape
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### final public **escape** (*mixed* $str, \[*mixed* $escapeChar\])

    Escape identifiers
- name: Db\Dialect::escapeSchema
  id: api/phalcon_db_dialect#escapeschema
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### final public **escapeSchema** (*mixed* $str, \[*mixed* $escapeChar\])

    Escape Schema
- name: Db\Dialect::forUpdate
  id: api/phalcon_db_dialect#forupdate
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **forUpdate** (*mixed* $sqlQuery)

    Returns a SQL modified with a FOR UPDATE clause

    ``` php
    $sql = $dialect->forUpdate("SELECT * FROM robots");
    echo $sql; // SELECT * FROM robots FOR UPDATE
    ```
- name: Db\Dialect::getColumnList
  id: api/phalcon_db_dialect#getcolumnlist
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### final public **getColumnList** (*array* $columnList, \[*mixed* $escapeChar\], \[*mixed* $bindCounts\])

    Gets a list of columns with escaped identifiers

    ``` php
    echo $dialect->getColumnList(
        [
            "column1",
            "column",
        ]
    );
    ```
- name: Db\Dialect::getCustomFunctions
  id: api/phalcon_db_dialect#getcustomfunctions
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **getCustomFunctions** ()

    Returns registered functions
- name: Db\Dialect::getSqlColumn
  id: api/phalcon_db_dialect#getsqlcolumn
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### final public **getSqlColumn** (*mixed* $column, \[*mixed* $escapeChar\], \[*mixed* $bindCounts\])

    Resolve Column expressions
- name: Db\Dialect::getSqlExpression
  id: api/phalcon_db_dialect#getsqlexpression
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **getSqlExpression** (*array* $expression, \[*mixed* $escapeChar\], \[*mixed* $bindCounts\])

    Transforms an intermediate representation for an expression into a database system valid expression
- name: Db\Dialect::getSqlTable
  id: api/phalcon_db_dialect#getsqltable
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### final public **getSqlTable** (*mixed* $table, \[*mixed* $escapeChar\])

    Transform an intermediate representation of a schema/table into a database system valid expression
- name: Db\Dialect::limit
  id: api/phalcon_db_dialect#limit
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **limit** (*mixed* $sqlQuery, *mixed* $number)

    Generates the SQL for LIMIT clause

    ``` php
    $sql = $dialect->limit("SELECT * FROM robots", 10);
    echo $sql; // SELECT * FROM robots LIMIT 10

    $sql = $dialect->limit("SELECT * FROM robots", [10, 50]);
    echo $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50
    ```
- name: Db\Dialect::registerCustomFunction
  id: api/phalcon_db_dialect#registercustomfunction
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction)

    Registers custom SQL functions
- name: Db\Dialect::releaseSavepoint
  id: api/phalcon_db_dialect#releasesavepoint
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **releaseSavepoint** (*mixed* $name)

    Generate SQL to release a savepoint
- name: Db\Dialect::rollbackSavepoint
  id: api/phalcon_db_dialect#rollbacksavepoint
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Dialect
  description: "### public **rollbackSavepoint** (*mixed* $name)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\])\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\])\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\])\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\])\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\])\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\])\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\])\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\])\n\nPrepares qualified for this RDBMS\n\n### abstract public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropTable** (*mixed* $tableName, *mixed* $schemaName) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **listTables** (\\[*mixed* $schemaName\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **describeIndexes** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n### abstract public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\]) inherited from [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect.html)"
- name: Db\Dialect::select
  id: api/phalcon_db_dialect#select
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **select** (*array* $definition)

    Builds a SELECT statement
- name: Db\Dialect::sharedLock
  id: api/phalcon_db_dialect#sharedlock
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **sharedLock** (*mixed* $sqlQuery)

    Returns a SQL modified with a LOCK IN SHARE MODE clause

    ``` php
    $sql = $dialect->sharedLock("SELECT * FROM robots");
    echo $sql; // SELECT * FROM robots LOCK IN SHARE MODE
    ```
- name: Db\Dialect::supportsReleaseSavepoints
  id: api/phalcon_db_dialect#supportsreleasesavepoints
  summary: Checks whether the platform supports releasing savepoints
  belongs_to: Db\Dialect
  description: |-
    ### public **supportsReleaseSavepoints** ()

    Checks whether the platform supports releasing savepoints.
- name: Db\Dialect::supportsSavepoints
  id: api/phalcon_db_dialect#supportssavepoints
  summary: null
  belongs_to: Db\Dialect
  description: |-
    ### public **supportsSavepoints** ()

    Checks whether the platform supports savepoints
- name: Db\DialectInterface
  id: api/phalcon_db_dialectinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Db\\DialectInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialectinterface.zep)\n\n## Methods\n\n### abstract public **limit** (*mixed* $sqlQuery, *mixed* $number)\n\n...\n\n### abstract public **forUpdate** (*mixed* $sqlQuery)\n\n...\n\n### abstract public **sharedLock** (*mixed* $sqlQuery)\n\n...\n\n### abstract public **select** (*array* $definition)\n\n...\n\n### abstract public **getColumnList** (*array* $columnList)\n\n...\n\n### abstract public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\n...\n\n### abstract public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\n...\n\n### abstract public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\])\n\n...\n\n### abstract public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)\n\n...\n\n### abstract public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\n...\n\n### abstract public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)\n\n...\n\n### abstract public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\n...\n\n### abstract public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)\n\n...\n\n### abstract public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference)\n\n...\n\n### abstract public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)\n\n...\n\n### abstract public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)\n\n...\n\n### abstract public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **dropTable** (*mixed* $tableName, *mixed* $schemaName)\n\n...\n\n### abstract public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\n...\n\n### abstract public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n### abstract public **listTables** (\\[*mixed* $schemaName\\])\n\n...\n\n### abstract public **describeIndexes** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n### abstract public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n### abstract public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\])\n\n...\n\n### abstract public **supportsSavepoints** ()\n\n...\n\n### abstract public **supportsReleaseSavepoints** ()\n\n...\n\n### abstract public **createSavepoint** (*mixed* $name)\n\n...\n\n### abstract public **releaseSavepoint** (*mixed* $name)\n\n...\n\n### abstract public **rollbackSavepoint** (*mixed* $name)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_DialectInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_DialectInterface.html)"
- name: Db\DialectInterface::addColumn
  id: api/phalcon_db_dialectinterface#addcolumn
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    ...
- name: Db\DialectInterface::addForeignKey
  id: api/phalcon_db_dialectinterface#addforeignkey
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ReferenceInterface*](phalcon_db_referenceinterface) $reference)

    ...
- name: Db\DialectInterface::addIndex
  id: api/phalcon_db_dialectinterface#addindex
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    ...
- name: Db\DialectInterface::addPrimaryKey
  id: api/phalcon_db_dialectinterface#addprimarykey
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    ...
- name: Db\DialectInterface::createSavepoint
  id: api/phalcon_db_dialectinterface#createsavepoint
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **createSavepoint** (*mixed* $name)

    ...
- name: Db\DialectInterface::createTable
  id: api/phalcon_db_dialectinterface#createtable
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)

    ...
- name: Db\DialectInterface::createView
  id: api/phalcon_db_dialectinterface#createview
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **createView** (*mixed* $viewName, *array* $definition, \[*mixed* $schemaName\])

    ...
- name: Db\DialectInterface::describeColumns
  id: api/phalcon_db_dialectinterface#describecolumns
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **describeColumns** (*mixed* $table, \[*mixed* $schema\])

    ...
- name: Db\DialectInterface::describeIndexes
  id: api/phalcon_db_dialectinterface#describeindexes
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **describeIndexes** (*mixed* $table, \[*mixed* $schema\])

    ...
- name: Db\DialectInterface::describeReferences
  id: api/phalcon_db_dialectinterface#describereferences
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **describeReferences** (*mixed* $table, \[*mixed* $schema\])

    ...
- name: Db\DialectInterface::dropColumn
  id: api/phalcon_db_dialectinterface#dropcolumn
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)

    ...
- name: Db\DialectInterface::dropForeignKey
  id: api/phalcon_db_dialectinterface#dropforeignkey
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)

    ...
- name: Db\DialectInterface::dropIndex
  id: api/phalcon_db_dialectinterface#dropindex
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)

    ...
- name: Db\DialectInterface::dropPrimaryKey
  id: api/phalcon_db_dialectinterface#dropprimarykey
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)

    ...
- name: Db\DialectInterface::dropTable
  id: api/phalcon_db_dialectinterface#droptable
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **dropTable** (*mixed* $tableName, *mixed* $schemaName)

    ...
- name: Db\DialectInterface::dropView
  id: api/phalcon_db_dialectinterface#dropview
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **dropView** (*mixed* $viewName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    ...
- name: Db\DialectInterface::forUpdate
  id: api/phalcon_db_dialectinterface#forupdate
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **forUpdate** (*mixed* $sqlQuery)

    ...
- name: Db\DialectInterface::getColumnDefinition
  id: api/phalcon_db_dialectinterface#getcolumndefinition
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **getColumnDefinition** ([*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    ...
- name: Db\DialectInterface::getColumnList
  id: api/phalcon_db_dialectinterface#getcolumnlist
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **getColumnList** (*array* $columnList)

    ...
- name: Db\DialectInterface::limit
  id: api/phalcon_db_dialectinterface#limit
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **limit** (*mixed* $sqlQuery, *mixed* $number)

    ...
- name: Db\DialectInterface::listTables
  id: api/phalcon_db_dialectinterface#listtables
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **listTables** (\[*mixed* $schemaName\])

    ...
- name: Db\DialectInterface::modifyColumn
  id: api/phalcon_db_dialectinterface#modifycolumn
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column, \[[*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $currentColumn\])

    ...
- name: Db\DialectInterface::releaseSavepoint
  id: api/phalcon_db_dialectinterface#releasesavepoint
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **releaseSavepoint** (*mixed* $name)

    ...
- name: Db\DialectInterface::rollbackSavepoint
  id: api/phalcon_db_dialectinterface#rollbacksavepoint
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\DialectInterface
  description: "### abstract public **rollbackSavepoint** (*mixed* $name)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_DialectInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_DialectInterface.html)"
- name: Db\DialectInterface::select
  id: api/phalcon_db_dialectinterface#select
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **select** (*array* $definition)

    ...
- name: Db\DialectInterface::sharedLock
  id: api/phalcon_db_dialectinterface#sharedlock
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **sharedLock** (*mixed* $sqlQuery)

    ...
- name: Db\DialectInterface::supportsReleaseSavepoints
  id: api/phalcon_db_dialectinterface#supportsreleasesavepoints
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **supportsReleaseSavepoints** ()

    ...
- name: Db\DialectInterface::supportsSavepoints
  id: api/phalcon_db_dialectinterface#supportssavepoints
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **supportsSavepoints** ()

    ...
- name: Db\DialectInterface::tableExists
  id: api/phalcon_db_dialectinterface#tableexists
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **tableExists** (*mixed* $tableName, \[*mixed* $schemaName\])

    ...
- name: Db\DialectInterface::tableOptions
  id: api/phalcon_db_dialectinterface#tableoptions
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **tableOptions** (*mixed* $table, \[*mixed* $schema\])

    ...
- name: Db\DialectInterface::viewExists
  id: api/phalcon_db_dialectinterface#viewexists
  summary: null
  belongs_to: Db\DialectInterface
  description: |-
    ### abstract public **viewExists** (*mixed* $viewName, \[*mixed* $schemaName\])

    ...
- name: Db\Dialect\Mysql
  id: api/phalcon_db_dialect_mysql
  summary: Checks whether the platform supports releasing savepoints
  description: "# Class **Phalcon\\Db\\Dialect\\Mysql**\n\n*extends* abstract class [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\n*implements* [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect/mysql.zep)\n\nGenerates database specific SQL for the MySQL RDBMS\n\n## Methods\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nGets the column name in MySQL\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nGenerates SQL to add a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\])\n\nGenerates SQL to modify a column in a table\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)\n\nGenerates SQL to delete a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nGenerates SQL to add an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)\n\nGenerates SQL to delete an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nGenerates SQL to add the primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)\n\nGenerates SQL to delete primary key from a table\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference)\n\nGenerates SQL to add an index to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)\n\nGenerates SQL to delete a foreign key from a table\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)\n\nGenerates SQL to create a table\n\n### public **truncateTable** (*mixed* $tableName, *mixed* $schemaName)\n\nGenerates SQL to truncate a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nGenerates SQL to drop a table\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\])\n\nGenerates SQL to create a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nGenerates SQL to drop a view\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\necho $dialect->tableExists(\"posts\", \"blog\");\n\necho $dialect->tableExists(\"posts\");\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.view\n\n### public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL describing a table\n\n``` php\nprint_r(\n    $dialect->describeColumns(\"posts\")\n);\n```\n\n### public **listTables** (\\[*mixed* $schemaName\\])\n\nList all tables in database\n\n``` php\nprint_r(\n    $dialect->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\])\n\nGenerates the SQL to list all views of a schema or user\n\n### public **describeIndexes** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL to query indexes on a table\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL to query foreign keys on a table\n\n### public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates the SQL to describe the table creation options\n\n### protected **\\_getTableOptions** (*array* $definition)\n\nGenerates SQL to add the table creation options\n\n### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nRegisters custom SQL functions\n\n### public **getCustomFunctions** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns registered functions\n\n### final public **escapeSchema** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape Schema\n\n### final public **escape** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape identifiers\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerates the SQL for LIMIT clause\n\n``` php\n$sql = $dialect->limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect->limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n``` php\n$sql = $dialect->forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n```\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n``` php\n$sql = $dialect->sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n```\n\n### final public **getColumnList** (*array* $columnList, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGets a list of columns with escaped identifiers\n\n``` php\necho $dialect->getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n```\n\n### final public **getSqlColumn** (*mixed* $column, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### public **getSqlExpression** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransforms an intermediate representation for an expression into a database system valid expression\n\n### final public **getSqlTable** (*mixed* $table, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransform an intermediate representation of a schema/table into a database system valid expression\n\n### public **select** (*array* $definition) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nBuilds a SELECT statement\n\n### public **supportsSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports savepoints\n\n### public **supportsReleaseSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports releasing savepoints.\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to create a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to release a savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares qualified for this RDBMS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Mysql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Mysql.html)"
- name: Db\Dialect\Mysql::addColumn
  id: api/phalcon_db_dialect_mysql#addcolumn
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Generates SQL to add a column to a table
- name: Db\Dialect\Mysql::addForeignKey
  id: api/phalcon_db_dialect_mysql#addforeignkey
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ReferenceInterface*](phalcon_db_referenceinterface) $reference)

    Generates SQL to add an index to a table
- name: Db\Dialect\Mysql::addIndex
  id: api/phalcon_db_dialect_mysql#addindex
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Generates SQL to add an index to a table
- name: Db\Dialect\Mysql::addPrimaryKey
  id: api/phalcon_db_dialect_mysql#addprimarykey
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Generates SQL to add the primary key to a table
- name: Db\Dialect\Mysql::createTable
  id: api/phalcon_db_dialect_mysql#createtable
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)

    Generates SQL to create a table
- name: Db\Dialect\Mysql::createView
  id: api/phalcon_db_dialect_mysql#createview
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **createView** (*mixed* $viewName, *array* $definition, \[*mixed* $schemaName\])

    Generates SQL to create a view
- name: Db\Dialect\Mysql::describeColumns
  id: api/phalcon_db_dialect_mysql#describecolumns
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **describeColumns** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL describing a table

    ``` php
    print_r(
        $dialect->describeColumns("posts")
    );
    ```
- name: Db\Dialect\Mysql::describeIndexes
  id: api/phalcon_db_dialect_mysql#describeindexes
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **describeIndexes** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL to query indexes on a table
- name: Db\Dialect\Mysql::describeReferences
  id: api/phalcon_db_dialect_mysql#describereferences
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **describeReferences** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL to query foreign keys on a table
- name: Db\Dialect\Mysql::dropColumn
  id: api/phalcon_db_dialect_mysql#dropcolumn
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)

    Generates SQL to delete a column from a table
- name: Db\Dialect\Mysql::dropForeignKey
  id: api/phalcon_db_dialect_mysql#dropforeignkey
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)

    Generates SQL to delete a foreign key from a table
- name: Db\Dialect\Mysql::dropIndex
  id: api/phalcon_db_dialect_mysql#dropindex
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)

    Generates SQL to delete an index from a table
- name: Db\Dialect\Mysql::dropPrimaryKey
  id: api/phalcon_db_dialect_mysql#dropprimarykey
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)

    Generates SQL to delete primary key from a table
- name: Db\Dialect\Mysql::dropTable
  id: api/phalcon_db_dialect_mysql#droptable
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **dropTable** (*mixed* $tableName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Generates SQL to drop a table
- name: Db\Dialect\Mysql::dropView
  id: api/phalcon_db_dialect_mysql#dropview
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **dropView** (*mixed* $viewName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Generates SQL to drop a view
- name: Db\Dialect\Mysql::getColumnDefinition
  id: api/phalcon_db_dialect_mysql#getcolumndefinition
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **getColumnDefinition** ([*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Gets the column name in MySQL
- name: Db\Dialect\Mysql::listTables
  id: api/phalcon_db_dialect_mysql#listtables
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **listTables** (\[*mixed* $schemaName\])

    List all tables in database

    ``` php
    print_r(
        $dialect->listTables("blog")
    );
    ```
- name: Db\Dialect\Mysql::listViews
  id: api/phalcon_db_dialect_mysql#listviews
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **listViews** (\[*mixed* $schemaName\])

    Generates the SQL to list all views of a schema or user
- name: Db\Dialect\Mysql::modifyColumn
  id: api/phalcon_db_dialect_mysql#modifycolumn
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column, \[[*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $currentColumn\])

    Generates SQL to modify a column in a table
- name: Db\Dialect\Mysql::tableExists
  id: api/phalcon_db_dialect_mysql#tableexists
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **tableExists** (*mixed* $tableName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.table

    ``` php
    echo $dialect->tableExists("posts", "blog");

    echo $dialect->tableExists("posts");
    ```
- name: Db\Dialect\Mysql::tableOptions
  id: api/phalcon_db_dialect_mysql#tableoptions
  summary: Checks whether the platform supports releasing savepoints
  belongs_to: Db\Dialect\Mysql
  description: "### public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates the SQL to describe the table creation options\n\n### protected **\\_getTableOptions** (*array* $definition)\n\nGenerates SQL to add the table creation options\n\n### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nRegisters custom SQL functions\n\n### public **getCustomFunctions** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns registered functions\n\n### final public **escapeSchema** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape Schema\n\n### final public **escape** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape identifiers\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerates the SQL for LIMIT clause\n\n``` php\n$sql = $dialect->limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect->limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n``` php\n$sql = $dialect->forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n```\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n``` php\n$sql = $dialect->sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n```\n\n### final public **getColumnList** (*array* $columnList, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGets a list of columns with escaped identifiers\n\n``` php\necho $dialect->getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n```\n\n### final public **getSqlColumn** (*mixed* $column, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### public **getSqlExpression** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransforms an intermediate representation for an expression into a database system valid expression\n\n### final public **getSqlTable** (*mixed* $table, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransform an intermediate representation of a schema/table into a database system valid expression\n\n### public **select** (*array* $definition) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nBuilds a SELECT statement\n\n### public **supportsSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports savepoints\n\n### public **supportsReleaseSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports releasing savepoints.\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to create a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to release a savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares qualified for this RDBMS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Mysql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Mysql.html)"
- name: Db\Dialect\Mysql::truncateTable
  id: api/phalcon_db_dialect_mysql#truncatetable
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **truncateTable** (*mixed* $tableName, *mixed* $schemaName)

    Generates SQL to truncate a table
- name: Db\Dialect\Mysql::viewExists
  id: api/phalcon_db_dialect_mysql#viewexists
  summary: null
  belongs_to: Db\Dialect\Mysql
  description: |-
    ### public **viewExists** (*mixed* $viewName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.view
- name: Db\Dialect\Postgresql
  id: api/phalcon_db_dialect_postgresql
  summary: Checks whether the platform supports releasing savepoints
  description: "# Class **Phalcon\\Db\\Dialect\\Postgresql**\n\n*extends* abstract class [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\n*implements* [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect/postgresql.zep)\n\nGenerates database specific SQL for the PostgreSQL RDBMS\n\n## Methods\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nGets the column name in PostgreSQL\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nGenerates SQL to add a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\])\n\nGenerates SQL to modify a column in a table\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)\n\nGenerates SQL to delete a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nGenerates SQL to add an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)\n\nGenerates SQL to delete an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nGenerates SQL to add the primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)\n\nGenerates SQL to delete primary key from a table\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference)\n\nGenerates SQL to add an index to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)\n\nGenerates SQL to delete a foreign key from a table\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)\n\nGenerates SQL to create a table\n\n### public **truncateTable** (*mixed* $tableName, *mixed* $schemaName)\n\nGenerates SQL to truncate a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nGenerates SQL to drop a table\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\])\n\nGenerates SQL to create a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nGenerates SQL to drop a view\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\necho $dialect->tableExists(\"posts\", \"blog\");\n\necho $dialect->tableExists(\"posts\");\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.view\n\n### public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL describing a table\n\n``` php\nprint_r(\n    $dialect->describeColumns(\"posts\")\n);\n```\n\n### public **listTables** (\\[*mixed* $schemaName\\])\n\nList all tables in database\n\n``` php\nprint_r(\n    $dialect->listTables(\"blog\")\n);\n```\n\n### public *string* **listViews** (\\[*string* $schemaName\\])\n\nGenerates the SQL to list all views of a schema or user\n\n### public **describeIndexes** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL to query indexes on a table\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL to query foreign keys on a table\n\n### public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates the SQL to describe the table creation options\n\n### protected **\\_castDefault** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\n...\n\n### protected **\\_getTableOptions** (*array* $definition)\n\n...\n\n### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nRegisters custom SQL functions\n\n### public **getCustomFunctions** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns registered functions\n\n### final public **escapeSchema** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape Schema\n\n### final public **escape** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape identifiers\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerates the SQL for LIMIT clause\n\n``` php\n$sql = $dialect->limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect->limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n``` php\n$sql = $dialect->forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n```\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n``` php\n$sql = $dialect->sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n```\n\n### final public **getColumnList** (*array* $columnList, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGets a list of columns with escaped identifiers\n\n``` php\necho $dialect->getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n```\n\n### final public **getSqlColumn** (*mixed* $column, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### public **getSqlExpression** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransforms an intermediate representation for an expression into a database system valid expression\n\n### final public **getSqlTable** (*mixed* $table, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransform an intermediate representation of a schema/table into a database system valid expression\n\n### public **select** (*array* $definition) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nBuilds a SELECT statement\n\n### public **supportsSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports savepoints\n\n### public **supportsReleaseSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports releasing savepoints.\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to create a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to release a savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares qualified for this RDBMS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Postgresql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Postgresql.html)"
- name: Db\Dialect\Postgresql::addColumn
  id: api/phalcon_db_dialect_postgresql#addcolumn
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Generates SQL to add a column to a table
- name: Db\Dialect\Postgresql::addForeignKey
  id: api/phalcon_db_dialect_postgresql#addforeignkey
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ReferenceInterface*](phalcon_db_referenceinterface) $reference)

    Generates SQL to add an index to a table
- name: Db\Dialect\Postgresql::addIndex
  id: api/phalcon_db_dialect_postgresql#addindex
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Generates SQL to add an index to a table
- name: Db\Dialect\Postgresql::addPrimaryKey
  id: api/phalcon_db_dialect_postgresql#addprimarykey
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Generates SQL to add the primary key to a table
- name: Db\Dialect\Postgresql::createTable
  id: api/phalcon_db_dialect_postgresql#createtable
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)

    Generates SQL to create a table
- name: Db\Dialect\Postgresql::createView
  id: api/phalcon_db_dialect_postgresql#createview
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **createView** (*mixed* $viewName, *array* $definition, \[*mixed* $schemaName\])

    Generates SQL to create a view
- name: Db\Dialect\Postgresql::describeColumns
  id: api/phalcon_db_dialect_postgresql#describecolumns
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **describeColumns** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL describing a table

    ``` php
    print_r(
        $dialect->describeColumns("posts")
    );
    ```
- name: Db\Dialect\Postgresql::describeIndexes
  id: api/phalcon_db_dialect_postgresql#describeindexes
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **describeIndexes** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL to query indexes on a table
- name: Db\Dialect\Postgresql::describeReferences
  id: api/phalcon_db_dialect_postgresql#describereferences
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **describeReferences** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL to query foreign keys on a table
- name: Db\Dialect\Postgresql::dropColumn
  id: api/phalcon_db_dialect_postgresql#dropcolumn
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)

    Generates SQL to delete a column from a table
- name: Db\Dialect\Postgresql::dropForeignKey
  id: api/phalcon_db_dialect_postgresql#dropforeignkey
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)

    Generates SQL to delete a foreign key from a table
- name: Db\Dialect\Postgresql::dropIndex
  id: api/phalcon_db_dialect_postgresql#dropindex
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)

    Generates SQL to delete an index from a table
- name: Db\Dialect\Postgresql::dropPrimaryKey
  id: api/phalcon_db_dialect_postgresql#dropprimarykey
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)

    Generates SQL to delete primary key from a table
- name: Db\Dialect\Postgresql::dropTable
  id: api/phalcon_db_dialect_postgresql#droptable
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **dropTable** (*mixed* $tableName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Generates SQL to drop a table
- name: Db\Dialect\Postgresql::dropView
  id: api/phalcon_db_dialect_postgresql#dropview
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **dropView** (*mixed* $viewName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Generates SQL to drop a view
- name: Db\Dialect\Postgresql::getColumnDefinition
  id: api/phalcon_db_dialect_postgresql#getcolumndefinition
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **getColumnDefinition** ([*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Gets the column name in PostgreSQL
- name: Db\Dialect\Postgresql::listTables
  id: api/phalcon_db_dialect_postgresql#listtables
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **listTables** (\[*mixed* $schemaName\])

    List all tables in database

    ``` php
    print_r(
        $dialect->listTables("blog")
    );
    ```
- name: Db\Dialect\Postgresql::listViews
  id: api/phalcon_db_dialect_postgresql#listviews
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public *string* **listViews** (\[*string* $schemaName\])

    Generates the SQL to list all views of a schema or user
- name: Db\Dialect\Postgresql::modifyColumn
  id: api/phalcon_db_dialect_postgresql#modifycolumn
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column, \[[*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $currentColumn\])

    Generates SQL to modify a column in a table
- name: Db\Dialect\Postgresql::tableExists
  id: api/phalcon_db_dialect_postgresql#tableexists
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **tableExists** (*mixed* $tableName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.table

    ``` php
    echo $dialect->tableExists("posts", "blog");

    echo $dialect->tableExists("posts");
    ```
- name: Db\Dialect\Postgresql::tableOptions
  id: api/phalcon_db_dialect_postgresql#tableoptions
  summary: Checks whether the platform supports releasing savepoints
  belongs_to: Db\Dialect\Postgresql
  description: "### public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates the SQL to describe the table creation options\n\n### protected **\\_castDefault** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\n...\n\n### protected **\\_getTableOptions** (*array* $definition)\n\n...\n\n### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nRegisters custom SQL functions\n\n### public **getCustomFunctions** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns registered functions\n\n### final public **escapeSchema** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape Schema\n\n### final public **escape** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape identifiers\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerates the SQL for LIMIT clause\n\n``` php\n$sql = $dialect->limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect->limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n``` php\n$sql = $dialect->forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n```\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n``` php\n$sql = $dialect->sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n```\n\n### final public **getColumnList** (*array* $columnList, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGets a list of columns with escaped identifiers\n\n``` php\necho $dialect->getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n```\n\n### final public **getSqlColumn** (*mixed* $column, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### public **getSqlExpression** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransforms an intermediate representation for an expression into a database system valid expression\n\n### final public **getSqlTable** (*mixed* $table, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransform an intermediate representation of a schema/table into a database system valid expression\n\n### public **select** (*array* $definition) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nBuilds a SELECT statement\n\n### public **supportsSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports savepoints\n\n### public **supportsReleaseSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports releasing savepoints.\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to create a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to release a savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares qualified for this RDBMS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Postgresql.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Postgresql.html)"
- name: Db\Dialect\Postgresql::truncateTable
  id: api/phalcon_db_dialect_postgresql#truncatetable
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **truncateTable** (*mixed* $tableName, *mixed* $schemaName)

    Generates SQL to truncate a table
- name: Db\Dialect\Postgresql::viewExists
  id: api/phalcon_db_dialect_postgresql#viewexists
  summary: null
  belongs_to: Db\Dialect\Postgresql
  description: |-
    ### public **viewExists** (*mixed* $viewName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.view
- name: Db\Dialect\Sqlite
  id: api/phalcon_db_dialect_sqlite
  summary: Checks whether the platform supports releasing savepoints
  description: "# Class **Phalcon\\Db\\Dialect\\Sqlite**\n\n*extends* abstract class [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\n*implements* [*Phalcon\\Db\\DialectInterface*](phalcon_db_dialectinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect/sqlite.zep)\n\nGenerates database specific SQL for the Sqlite RDBMS\n\n## Methods\n\n### public **getColumnDefinition** ([*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nGets the column name in SQLite\n\n### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column)\n\nGenerates SQL to add a column to a table\n\n### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $column, \\[[*Phalcon\\Db\\ColumnInterface*](phalcon_db_columninterface) $currentColumn\\])\n\nGenerates SQL to modify a column in a table\n\n### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)\n\nGenerates SQL to delete a column from a table\n\n### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nGenerates SQL to add an index to a table\n\n### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)\n\nGenerates SQL to delete an index from a table\n\n### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface) $index)\n\nGenerates SQL to add the primary key to a table\n\n### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)\n\nGenerates SQL to delete primary key from a table\n\n### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface) $reference)\n\nGenerates SQL to add an index to a table\n\n### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)\n\nGenerates SQL to delete a foreign key from a table\n\n### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)\n\nGenerates SQL to create a table\n\n### public **truncateTable** (*mixed* $tableName, *mixed* $schemaName)\n\nGenerates SQL to truncate a table\n\n### public **dropTable** (*mixed* $tableName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nGenerates SQL to drop a table\n\n### public **createView** (*mixed* $viewName, *array* $definition, \\[*mixed* $schemaName\\])\n\nGenerates SQL to create a view\n\n### public **dropView** (*mixed* $viewName, \\[*mixed* $schemaName\\], \\[*mixed* $ifExists\\])\n\nGenerates SQL to drop a view\n\n### public **tableExists** (*mixed* $tableName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.table\n\n``` php\necho $dialect->tableExists(\"posts\", \"blog\");\n\necho $dialect->tableExists(\"posts\");\n```\n\n### public **viewExists** (*mixed* $viewName, \\[*mixed* $schemaName\\])\n\nGenerates SQL checking for the existence of a schema.view\n\n### public **describeColumns** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL describing a table\n\n``` php\nprint_r(\n    $dialect->describeColumns(\"posts\")\n);\n```\n\n### public **listTables** (\\[*mixed* $schemaName\\])\n\nList all tables in database\n\n``` php\nprint_r(\n    $dialect->listTables(\"blog\")\n);\n```\n\n### public **listViews** (\\[*mixed* $schemaName\\])\n\nGenerates the SQL to list all views of a schema or user\n\n### public **listIndexesSql** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $keyName\\])\n\nGenerates the SQL to get query list of indexes\n\n``` php\nprint_r(\n    $dialect->listIndexesSql(\"blog\")\n);\n```\n\n### public **describeIndexes** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL to query indexes on a table\n\n### public **describeIndex** (*mixed* $index)\n\nGenerates SQL to query indexes detail on a table\n\n### public **describeReferences** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates SQL to query foreign keys on a table\n\n### public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates the SQL to describe the table creation options\n\n### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nRegisters custom SQL functions\n\n### public **getCustomFunctions** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns registered functions\n\n### final public **escapeSchema** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape Schema\n\n### final public **escape** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape identifiers\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerates the SQL for LIMIT clause\n\n``` php\n$sql = $dialect->limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect->limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n``` php\n$sql = $dialect->forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n```\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n``` php\n$sql = $dialect->sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n```\n\n### final public **getColumnList** (*array* $columnList, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGets a list of columns with escaped identifiers\n\n``` php\necho $dialect->getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n```\n\n### final public **getSqlColumn** (*mixed* $column, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### public **getSqlExpression** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransforms an intermediate representation for an expression into a database system valid expression\n\n### final public **getSqlTable** (*mixed* $table, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransform an intermediate representation of a schema/table into a database system valid expression\n\n### public **select** (*array* $definition) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nBuilds a SELECT statement\n\n### public **supportsSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports savepoints\n\n### public **supportsReleaseSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports releasing savepoints.\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to create a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to release a savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares qualified for this RDBMS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Sqlite.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Sqlite.html)"
- name: Db\Dialect\Sqlite::addColumn
  id: api/phalcon_db_dialect_sqlite#addcolumn
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **addColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Generates SQL to add a column to a table
- name: Db\Dialect\Sqlite::addForeignKey
  id: api/phalcon_db_dialect_sqlite#addforeignkey
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **addForeignKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ReferenceInterface*](phalcon_db_referenceinterface) $reference)

    Generates SQL to add an index to a table
- name: Db\Dialect\Sqlite::addIndex
  id: api/phalcon_db_dialect_sqlite#addindex
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **addIndex** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Generates SQL to add an index to a table
- name: Db\Dialect\Sqlite::addPrimaryKey
  id: api/phalcon_db_dialect_sqlite#addprimarykey
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **addPrimaryKey** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\IndexInterface*](phalcon_db_indexinterface) $index)

    Generates SQL to add the primary key to a table
- name: Db\Dialect\Sqlite::createTable
  id: api/phalcon_db_dialect_sqlite#createtable
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **createTable** (*mixed* $tableName, *mixed* $schemaName, *array* $definition)

    Generates SQL to create a table
- name: Db\Dialect\Sqlite::createView
  id: api/phalcon_db_dialect_sqlite#createview
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **createView** (*mixed* $viewName, *array* $definition, \[*mixed* $schemaName\])

    Generates SQL to create a view
- name: Db\Dialect\Sqlite::describeColumns
  id: api/phalcon_db_dialect_sqlite#describecolumns
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **describeColumns** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL describing a table

    ``` php
    print_r(
        $dialect->describeColumns("posts")
    );
    ```
- name: Db\Dialect\Sqlite::describeIndex
  id: api/phalcon_db_dialect_sqlite#describeindex
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **describeIndex** (*mixed* $index)

    Generates SQL to query indexes detail on a table
- name: Db\Dialect\Sqlite::describeIndexes
  id: api/phalcon_db_dialect_sqlite#describeindexes
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **describeIndexes** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL to query indexes on a table
- name: Db\Dialect\Sqlite::describeReferences
  id: api/phalcon_db_dialect_sqlite#describereferences
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **describeReferences** (*mixed* $table, \[*mixed* $schema\])

    Generates SQL to query foreign keys on a table
- name: Db\Dialect\Sqlite::dropColumn
  id: api/phalcon_db_dialect_sqlite#dropcolumn
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **dropColumn** (*mixed* $tableName, *mixed* $schemaName, *mixed* $columnName)

    Generates SQL to delete a column from a table
- name: Db\Dialect\Sqlite::dropForeignKey
  id: api/phalcon_db_dialect_sqlite#dropforeignkey
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **dropForeignKey** (*mixed* $tableName, *mixed* $schemaName, *mixed* $referenceName)

    Generates SQL to delete a foreign key from a table
- name: Db\Dialect\Sqlite::dropIndex
  id: api/phalcon_db_dialect_sqlite#dropindex
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **dropIndex** (*mixed* $tableName, *mixed* $schemaName, *mixed* $indexName)

    Generates SQL to delete an index from a table
- name: Db\Dialect\Sqlite::dropPrimaryKey
  id: api/phalcon_db_dialect_sqlite#dropprimarykey
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **dropPrimaryKey** (*mixed* $tableName, *mixed* $schemaName)

    Generates SQL to delete primary key from a table
- name: Db\Dialect\Sqlite::dropTable
  id: api/phalcon_db_dialect_sqlite#droptable
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **dropTable** (*mixed* $tableName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Generates SQL to drop a table
- name: Db\Dialect\Sqlite::dropView
  id: api/phalcon_db_dialect_sqlite#dropview
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **dropView** (*mixed* $viewName, \[*mixed* $schemaName\], \[*mixed* $ifExists\])

    Generates SQL to drop a view
- name: Db\Dialect\Sqlite::getColumnDefinition
  id: api/phalcon_db_dialect_sqlite#getcolumndefinition
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **getColumnDefinition** ([*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column)

    Gets the column name in SQLite
- name: Db\Dialect\Sqlite::listIndexesSql
  id: api/phalcon_db_dialect_sqlite#listindexessql
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **listIndexesSql** (*mixed* $table, \[*mixed* $schema\], \[*mixed* $keyName\])

    Generates the SQL to get query list of indexes

    ``` php
    print_r(
        $dialect->listIndexesSql("blog")
    );
    ```
- name: Db\Dialect\Sqlite::listTables
  id: api/phalcon_db_dialect_sqlite#listtables
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **listTables** (\[*mixed* $schemaName\])

    List all tables in database

    ``` php
    print_r(
        $dialect->listTables("blog")
    );
    ```
- name: Db\Dialect\Sqlite::listViews
  id: api/phalcon_db_dialect_sqlite#listviews
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **listViews** (\[*mixed* $schemaName\])

    Generates the SQL to list all views of a schema or user
- name: Db\Dialect\Sqlite::modifyColumn
  id: api/phalcon_db_dialect_sqlite#modifycolumn
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **modifyColumn** (*mixed* $tableName, *mixed* $schemaName, [*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $column, \[[*Phalcon\Db\ColumnInterface*](phalcon_db_columninterface) $currentColumn\])

    Generates SQL to modify a column in a table
- name: Db\Dialect\Sqlite::tableExists
  id: api/phalcon_db_dialect_sqlite#tableexists
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **tableExists** (*mixed* $tableName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.table

    ``` php
    echo $dialect->tableExists("posts", "blog");

    echo $dialect->tableExists("posts");
    ```
- name: Db\Dialect\Sqlite::tableOptions
  id: api/phalcon_db_dialect_sqlite#tableoptions
  summary: Checks whether the platform supports releasing savepoints
  belongs_to: Db\Dialect\Sqlite
  description: "### public **tableOptions** (*mixed* $table, \\[*mixed* $schema\\])\n\nGenerates the SQL to describe the table creation options\n\n### public **registerCustomFunction** (*mixed* $name, *mixed* $customFunction) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nRegisters custom SQL functions\n\n### public **getCustomFunctions** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns registered functions\n\n### final public **escapeSchema** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape Schema\n\n### final public **escape** (*mixed* $str, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nEscape identifiers\n\n### public **limit** (*mixed* $sqlQuery, *mixed* $number) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerates the SQL for LIMIT clause\n\n``` php\n$sql = $dialect->limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect->limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n```\n\n### public **forUpdate** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a FOR UPDATE clause\n\n``` php\n$sql = $dialect->forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n```\n\n### public **sharedLock** (*mixed* $sqlQuery) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nReturns a SQL modified with a LOCK IN SHARE MODE clause\n\n``` php\n$sql = $dialect->sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n```\n\n### final public **getColumnList** (*array* $columnList, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGets a list of columns with escaped identifiers\n\n``` php\necho $dialect->getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n```\n\n### final public **getSqlColumn** (*mixed* $column, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### public **getSqlExpression** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransforms an intermediate representation for an expression into a database system valid expression\n\n### final public **getSqlTable** (*mixed* $table, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nTransform an intermediate representation of a schema/table into a database system valid expression\n\n### public **select** (*array* $definition) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nBuilds a SELECT statement\n\n### public **supportsSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports savepoints\n\n### public **supportsReleaseSavepoints** () inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nChecks whether the platform supports releasing savepoints.\n\n### public **createSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to create a new savepoint\n\n### public **releaseSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to release a savepoint\n\n### public **rollbackSavepoint** (*mixed* $name) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nGenerate SQL to rollback a savepoint\n\n### final protected **getSqlExpressionScalar** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Column expressions\n\n### final protected **getSqlExpressionObject** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve object expressions\n\n### final protected **getSqlExpressionQualified** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve qualified expressions\n\n### final protected **getSqlExpressionBinaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve binary operations expressions\n\n### final protected **getSqlExpressionUnaryOperations** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve unary operations expressions\n\n### final protected **getSqlExpressionFunctionCall** (*array* $expression, *mixed* $escapeChar, \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve function calls\n\n### final protected **getSqlExpressionList** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve Lists\n\n### final protected **getSqlExpressionAll** (*array* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve \\*\n\n### final protected **getSqlExpressionCastValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CAST of values\n\n### final protected **getSqlExpressionConvertValue** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CONVERT of values encodings\n\n### final protected **getSqlExpressionCase** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve CASE expressions\n\n### final protected **getSqlExpressionFrom** (*mixed* $expression, \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a FROM clause\n\n### final protected **getSqlExpressionJoins** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a JOINs clause\n\n### final protected **getSqlExpressionWhere** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a WHERE clause\n\n### final protected **getSqlExpressionGroupBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a GROUP BY clause\n\n### final protected **getSqlExpressionHaving** (*array* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a HAVING clause\n\n### final protected **getSqlExpressionOrderBy** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve an ORDER BY clause\n\n### final protected **getSqlExpressionLimit** (*mixed* $expression, \\[*mixed* $escapeChar\\], \\[*mixed* $bindCounts\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nResolve a LIMIT clause\n\n### protected **prepareColumnAlias** (*mixed* $qualified, \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares column for this RDBMS\n\n### protected **prepareTable** (*mixed* $table, \\[*mixed* $schema\\], \\[*mixed* $alias\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares table for this RDBMS\n\n### protected **prepareQualified** (*mixed* $column, \\[*mixed* $domain\\], \\[*mixed* $escapeChar\\]) inherited from [*Phalcon\\Db\\Dialect*](phalcon_db_dialect)\n\nPrepares qualified for this RDBMS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Sqlite.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Sqlite.html)"
- name: Db\Dialect\Sqlite::truncateTable
  id: api/phalcon_db_dialect_sqlite#truncatetable
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **truncateTable** (*mixed* $tableName, *mixed* $schemaName)

    Generates SQL to truncate a table
- name: Db\Dialect\Sqlite::viewExists
  id: api/phalcon_db_dialect_sqlite#viewexists
  summary: null
  belongs_to: Db\Dialect\Sqlite
  description: |-
    ### public **viewExists** (*mixed* $viewName, \[*mixed* $schemaName\])

    Generates SQL checking for the existence of a schema.view
- name: Db\Exception
  id: api/phalcon_db_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Db\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Exception.html)"
- name: Db\Index
  id: api/phalcon_db_index
  summary: Allows to define indexes to be used on tables
  description: "# Class **Phalcon\\Db\\Index**\n\n*implements* [*Phalcon\\Db\\IndexInterface*](phalcon_db_indexinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/index.zep)\n\nAllows to define indexes to be used on tables. Indexes are a common way to enhance database performance. An index allows the database server to find and retrieve specific rows much faster than it could do without an index\n\n``` php\n// Define new unique index\n$index_unique = new \\Phalcon\\Db\\Index(\n    'column_UNIQUE',\n    [\n        'column',\n        'column'\n    ],\n    'UNIQUE'\n);\n\n// Define new primary index\n$index_primary = new \\Phalcon\\Db\\Index(\n    'PRIMARY',\n    [\n        'column'\n    ]\n);\n\n// Add index to existing table\n$connection->addIndex(\"robots\", null, $index_unique);\n$connection->addIndex(\"robots\", null, $index_primary);\n```\n\n## Methods\n\n### public **getName** ()\n\nIndex name\n\n### public **getColumns** ()\n\nIndex columns\n\n### public **getType** ()\n\nIndex type\n\n### public **\\_\\_construct** (*mixed* $name, *array* $columns, \\[*mixed* $type\\])\n\nPhalcon\\Db\\Index constructor\n\n### public static **\\_\\_set_state** (*array* $data)\n\nRestore a Phalcon\\Db\\Index object from export\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Index.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Index.html)"
- name: Db\Index::getColumns
  id: api/phalcon_db_index#getcolumns
  summary: null
  belongs_to: Db\Index
  description: |-
    ### public **getColumns** ()

    Index columns
- name: Db\Index::getName
  id: api/phalcon_db_index#getname
  summary: null
  belongs_to: Db\Index
  description: |-
    ### public **getName** ()

    Index name
- name: Db\Index::getType
  id: api/phalcon_db_index#gettype
  summary: null
  belongs_to: Db\Index
  description: |-
    ### public **getType** ()

    Index type

    ### public **\_\_construct** (*mixed* $name, *array* $columns, \[*mixed* $type\])

    Phalcon\Db\Index constructor
- name: Db\Index::__set_state
  id: api/phalcon_db_index#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Index
  description: "### public static **\\_\\_set_state** (*array* $data)\n\nRestore a Phalcon\\Db\\Index object from export\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Index.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Index.html)"
- name: Db\IndexInterface
  id: api/phalcon_db_indexinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Db\\IndexInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/indexinterface.zep)\n\n## Methods\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **getColumns** ()\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_IndexInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_IndexInterface.html)"
- name: Db\IndexInterface::getColumns
  id: api/phalcon_db_indexinterface#getcolumns
  summary: null
  belongs_to: Db\IndexInterface
  description: |-
    ### abstract public **getColumns** ()

    ...
- name: Db\IndexInterface::getName
  id: api/phalcon_db_indexinterface#getname
  summary: null
  belongs_to: Db\IndexInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Db\IndexInterface::getType
  id: api/phalcon_db_indexinterface#gettype
  summary: null
  belongs_to: Db\IndexInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Db\IndexInterface::__set_state
  id: api/phalcon_db_indexinterface#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\IndexInterface
  description: "### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_IndexInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_IndexInterface.html)"
- name: Db\Profiler
  id: api/phalcon_db_profiler
  summary: Instances of Phalcon\Db can generate execution profiles on SQL statements sent to the relational database
  description: "# Class **Phalcon\\Db\\Profiler**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/profiler.zep)\n\nInstances of Phalcon\\Db can generate execution profiles on SQL statements sent to the relational database. Profiled information includes execution time in milliseconds. This helps you to identify bottlenecks in your applications.\n\n``` php\n$profiler = new \\Phalcon\\Db\\Profiler();\n\n// Set the connection profiler\n$connection->setProfiler($profiler);\n\n$sql = \"SELECT buyer_name, quantity, product_name\nFROM buyers LEFT JOIN products ON\nbuyers.pid=products.id\";\n\n// Execute a SQL statement\n$connection->query($sql);\n\n// Get the last profile in the profiler\n$profile = $profiler->getLastProfile();\n\necho \"SQL Statement: \", $profile->getSQLStatement(), \"\\n\";\necho \"Start Time: \", $profile->getInitialTime(), \"\\n\";\necho \"Final Time: \", $profile->getFinalTime(), \"\\n\";\necho \"Total Elapsed Time: \", $profile->getTotalElapsedSeconds(), \"\\n\";\n```\n\n## Methods\n\n### public [*Phalcon\\Db\\Profiler*](phalcon_db_profiler) **startProfile** (*string* $sqlStatement, \\[*mixed* $sqlVariables\\], \\[*mixed* $sqlBindTypes\\])\n\nStarts the profile of a SQL sentence\n\n### public **stopProfile** ()\n\nStops the active profile\n\n### public **getNumberTotalStatements** ()\n\nReturns the total number of SQL statements processed\n\n### public **getTotalElapsedSeconds** ()\n\nReturns the total time in seconds spent by the profiles\n\n### public **getProfiles** ()\n\nReturns all the processed profiles\n\n### public **reset** ()\n\nResets the profiler, cleaning up all the profiles\n\n### public **getLastProfile** ()\n\nReturns the last profile executed in the profiler\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler.html)"
- name: Db\Profiler::getLastProfile
  id: api/phalcon_db_profiler#getlastprofile
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Profiler
  description: "### public **getLastProfile** ()\n\nReturns the last profile executed in the profiler\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler.html)"
- name: Db\Profiler::getNumberTotalStatements
  id: api/phalcon_db_profiler#getnumbertotalstatements
  summary: null
  belongs_to: Db\Profiler
  description: |-
    ### public **getNumberTotalStatements** ()

    Returns the total number of SQL statements processed
- name: Db\Profiler::getProfiles
  id: api/phalcon_db_profiler#getprofiles
  summary: null
  belongs_to: Db\Profiler
  description: |-
    ### public **getProfiles** ()

    Returns all the processed profiles
- name: Db\Profiler::getTotalElapsedSeconds
  id: api/phalcon_db_profiler#gettotalelapsedseconds
  summary: null
  belongs_to: Db\Profiler
  description: |-
    ### public **getTotalElapsedSeconds** ()

    Returns the total time in seconds spent by the profiles
- name: Db\Profiler::reset
  id: api/phalcon_db_profiler#reset
  summary: null
  belongs_to: Db\Profiler
  description: |-
    ### public **reset** ()

    Resets the profiler, cleaning up all the profiles
- name: Db\Profiler::startProfile
  id: api/phalcon_db_profiler#startprofile
  summary: null
  belongs_to: Db\Profiler
  description: |-
    ### public [*Phalcon\Db\Profiler*](phalcon_db_profiler) **startProfile** (*string* $sqlStatement, \[*mixed* $sqlVariables\], \[*mixed* $sqlBindTypes\])

    Starts the profile of a SQL sentence
- name: Db\Profiler::stopProfile
  id: api/phalcon_db_profiler#stopprofile
  summary: null
  belongs_to: Db\Profiler
  description: |-
    ### public **stopProfile** ()

    Stops the active profile
- name: Db\Profiler\Item
  id: api/phalcon_db_profiler_item
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Db\\Profiler\\Item**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/profiler/item.zep)\n\nThis class identifies each profile in a Phalcon\\Db\\Profiler\n\n## Methods\n\n### public **setSqlStatement** (*mixed* $sqlStatement)\n\nSQL statement related to the profile\n\n### public **getSqlStatement** ()\n\nSQL statement related to the profile\n\n### public **setSqlVariables** (*array* $sqlVariables)\n\nSQL variables related to the profile\n\n### public **getSqlVariables** ()\n\nSQL variables related to the profile\n\n### public **setSqlBindTypes** (*array* $sqlBindTypes)\n\nSQL bind types related to the profile\n\n### public **getSqlBindTypes** ()\n\nSQL bind types related to the profile\n\n### public **setInitialTime** (*mixed* $initialTime)\n\nTimestamp when the profile started\n\n### public **getInitialTime** ()\n\nTimestamp when the profile started\n\n### public **setFinalTime** (*mixed* $finalTime)\n\nTimestamp when the profile ended\n\n### public **getFinalTime** ()\n\nTimestamp when the profile ended\n\n### public **getTotalElapsedSeconds** ()\n\nReturns the total time in seconds spent by the profile\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler_Item.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler_Item.html)"
- name: Db\Profiler\Item::getFinalTime
  id: api/phalcon_db_profiler_item#getfinaltime
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **getFinalTime** ()

    Timestamp when the profile ended
- name: Db\Profiler\Item::getInitialTime
  id: api/phalcon_db_profiler_item#getinitialtime
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **getInitialTime** ()

    Timestamp when the profile started
- name: Db\Profiler\Item::getSqlBindTypes
  id: api/phalcon_db_profiler_item#getsqlbindtypes
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **getSqlBindTypes** ()

    SQL bind types related to the profile
- name: Db\Profiler\Item::getSqlStatement
  id: api/phalcon_db_profiler_item#getsqlstatement
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **getSqlStatement** ()

    SQL statement related to the profile
- name: Db\Profiler\Item::getSqlVariables
  id: api/phalcon_db_profiler_item#getsqlvariables
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **getSqlVariables** ()

    SQL variables related to the profile
- name: Db\Profiler\Item::getTotalElapsedSeconds
  id: api/phalcon_db_profiler_item#gettotalelapsedseconds
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Profiler\Item
  description: "### public **getTotalElapsedSeconds** ()\n\nReturns the total time in seconds spent by the profile\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler_Item.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler_Item.html)"
- name: Db\Profiler\Item::setFinalTime
  id: api/phalcon_db_profiler_item#setfinaltime
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **setFinalTime** (*mixed* $finalTime)

    Timestamp when the profile ended
- name: Db\Profiler\Item::setInitialTime
  id: api/phalcon_db_profiler_item#setinitialtime
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **setInitialTime** (*mixed* $initialTime)

    Timestamp when the profile started
- name: Db\Profiler\Item::setSqlBindTypes
  id: api/phalcon_db_profiler_item#setsqlbindtypes
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **setSqlBindTypes** (*array* $sqlBindTypes)

    SQL bind types related to the profile
- name: Db\Profiler\Item::setSqlStatement
  id: api/phalcon_db_profiler_item#setsqlstatement
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **setSqlStatement** (*mixed* $sqlStatement)

    SQL statement related to the profile
- name: Db\Profiler\Item::setSqlVariables
  id: api/phalcon_db_profiler_item#setsqlvariables
  summary: null
  belongs_to: Db\Profiler\Item
  description: |-
    ### public **setSqlVariables** (*array* $sqlVariables)

    SQL variables related to the profile
- name: Db\RawValue
  id: api/phalcon_db_rawvalue
  summary: This class allows to insert/update raw data without quoting or formatting
  description: "# Class **Phalcon\\Db\\RawValue**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/rawvalue.zep)\n\nThis class allows to insert/update raw data without quoting or formatting.\n\nThe next example shows how to use the MySQL now() function as a field value.\n\n``` php\n$subscriber = new Subscribers();\n\n$subscriber->email     = \"[email protected]\";\n$subscriber->createdAt = new \\Phalcon\\Db\\RawValue(\"now()\");\n\n$subscriber->save();\n```\n\n## Methods\n\n### public **getValue** ()\n\nRaw value without quoting or formatting\n\n### public **\\_\\_toString** ()\n\nRaw value without quoting or formatting\n\n### public **\\_\\_construct** (*mixed* $value)\n\nPhalcon\\Db\\RawValue constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_RawValue.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_RawValue.html)"
- name: Db\RawValue::getValue
  id: api/phalcon_db_rawvalue#getvalue
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\RawValue
  description: "### public **getValue** ()\n\nRaw value without quoting or formatting\n\n### public **\\_\\_toString** ()\n\nRaw value without quoting or formatting\n\n### public **\\_\\_construct** (*mixed* $value)\n\nPhalcon\\Db\\RawValue constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_RawValue.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_RawValue.html)"
- name: Db\Reference
  id: api/phalcon_db_reference
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Db\\Reference**\n\n*implements* [*Phalcon\\Db\\ReferenceInterface*](phalcon_db_referenceinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/reference.zep)\n\nAllows to define reference constraints on tables\n\n``` php\n$reference = new \\Phalcon\\Db\\Reference(\n    \"field_fk\",\n    [\n        \"referencedSchema\"  => \"invoicing\",\n        \"referencedTable\"   => \"products\",\n        \"columns\"           => [\n            \"product_type\",\n            \"product_code\",\n        ],\n        \"referencedColumns\" => [\n            \"type\",\n            \"code\",\n        ],\n    ]\n);\n```\n\n## Methods\n\n### public **getName** ()\n\nConstraint name\n\n### public **getSchemaName** ()\n\n...\n\n### public **getReferencedSchema** ()\n\n...\n\n### public **getReferencedTable** ()\n\nReferenced Table\n\n### public **getColumns** ()\n\nLocal reference columns\n\n### public **getReferencedColumns** ()\n\nReferenced Columns\n\n### public **getOnDelete** ()\n\nON DELETE\n\n### public **getOnUpdate** ()\n\nON UPDATE\n\n### public **\\_\\_construct** (*mixed* $name, *array* $definition)\n\nPhalcon\\Db\\Reference constructor\n\n### public static **\\_\\_set_state** (*array* $data)\n\nRestore a Phalcon\\Db\\Reference object from export\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Reference.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Reference.html)"
- name: Db\Reference::getColumns
  id: api/phalcon_db_reference#getcolumns
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getColumns** ()

    Local reference columns
- name: Db\Reference::getName
  id: api/phalcon_db_reference#getname
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getName** ()

    Constraint name
- name: Db\Reference::getOnDelete
  id: api/phalcon_db_reference#getondelete
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getOnDelete** ()

    ON DELETE
- name: Db\Reference::getOnUpdate
  id: api/phalcon_db_reference#getonupdate
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getOnUpdate** ()

    ON UPDATE

    ### public **\_\_construct** (*mixed* $name, *array* $definition)

    Phalcon\Db\Reference constructor
- name: Db\Reference::getReferencedColumns
  id: api/phalcon_db_reference#getreferencedcolumns
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getReferencedColumns** ()

    Referenced Columns
- name: Db\Reference::getReferencedSchema
  id: api/phalcon_db_reference#getreferencedschema
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getReferencedSchema** ()

    ...
- name: Db\Reference::getReferencedTable
  id: api/phalcon_db_reference#getreferencedtable
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getReferencedTable** ()

    Referenced Table
- name: Db\Reference::getSchemaName
  id: api/phalcon_db_reference#getschemaname
  summary: null
  belongs_to: Db\Reference
  description: |-
    ### public **getSchemaName** ()

    ...
- name: Db\Reference::__set_state
  id: api/phalcon_db_reference#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Reference
  description: "### public static **\\_\\_set_state** (*array* $data)\n\nRestore a Phalcon\\Db\\Reference object from export\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Reference.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Reference.html)"
- name: Db\ReferenceInterface
  id: api/phalcon_db_referenceinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Db\\ReferenceInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/referenceinterface.zep)\n\n## Methods\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **getSchemaName** ()\n\n...\n\n### abstract public **getReferencedSchema** ()\n\n...\n\n### abstract public **getColumns** ()\n\n...\n\n### abstract public **getReferencedTable** ()\n\n...\n\n### abstract public **getReferencedColumns** ()\n\n...\n\n### abstract public **getOnDelete** ()\n\n...\n\n### abstract public **getOnUpdate** ()\n\n...\n\n### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ReferenceInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ReferenceInterface.html)"
- name: Db\ReferenceInterface::getColumns
  id: api/phalcon_db_referenceinterface#getcolumns
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getColumns** ()

    ...
- name: Db\ReferenceInterface::getName
  id: api/phalcon_db_referenceinterface#getname
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Db\ReferenceInterface::getOnDelete
  id: api/phalcon_db_referenceinterface#getondelete
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getOnDelete** ()

    ...
- name: Db\ReferenceInterface::getOnUpdate
  id: api/phalcon_db_referenceinterface#getonupdate
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getOnUpdate** ()

    ...
- name: Db\ReferenceInterface::getReferencedColumns
  id: api/phalcon_db_referenceinterface#getreferencedcolumns
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getReferencedColumns** ()

    ...
- name: Db\ReferenceInterface::getReferencedSchema
  id: api/phalcon_db_referenceinterface#getreferencedschema
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getReferencedSchema** ()

    ...
- name: Db\ReferenceInterface::getReferencedTable
  id: api/phalcon_db_referenceinterface#getreferencedtable
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getReferencedTable** ()

    ...
- name: Db\ReferenceInterface::getSchemaName
  id: api/phalcon_db_referenceinterface#getschemaname
  summary: null
  belongs_to: Db\ReferenceInterface
  description: |-
    ### abstract public **getSchemaName** ()

    ...
- name: Db\ReferenceInterface::__set_state
  id: api/phalcon_db_referenceinterface#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\ReferenceInterface
  description: "### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ReferenceInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ReferenceInterface.html)"
- name: Db\ResultInterface
  id: api/phalcon_db_resultinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Db\\ResultInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/resultinterface.zep)\n\n## Methods\n\n### abstract public **execute** ()\n\n...\n\n### abstract public **fetch** ()\n\n...\n\n### abstract public **fetchArray** ()\n\n...\n\n### abstract public **fetchAll** ()\n\n...\n\n### abstract public **numRows** ()\n\n...\n\n### abstract public **dataSeek** (*mixed* $number)\n\n...\n\n### abstract public **setFetchMode** (*mixed* $fetchMode)\n\n...\n\n### abstract public **getInternalResult** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ResultInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ResultInterface.html)"
- name: Db\ResultInterface::dataSeek
  id: api/phalcon_db_resultinterface#dataseek
  summary: null
  belongs_to: Db\ResultInterface
  description: |-
    ### abstract public **dataSeek** (*mixed* $number)

    ...
- name: Db\ResultInterface::execute
  id: api/phalcon_db_resultinterface#execute
  summary: null
  belongs_to: Db\ResultInterface
  description: |-
    ### abstract public **execute** ()

    ...
- name: Db\ResultInterface::fetch
  id: api/phalcon_db_resultinterface#fetch
  summary: null
  belongs_to: Db\ResultInterface
  description: |-
    ### abstract public **fetch** ()

    ...
- name: Db\ResultInterface::fetchAll
  id: api/phalcon_db_resultinterface#fetchall
  summary: null
  belongs_to: Db\ResultInterface
  description: |-
    ### abstract public **fetchAll** ()

    ...
- name: Db\ResultInterface::fetchArray
  id: api/phalcon_db_resultinterface#fetcharray
  summary: null
  belongs_to: Db\ResultInterface
  description: |-
    ### abstract public **fetchArray** ()

    ...
- name: Db\ResultInterface::getInternalResult
  id: api/phalcon_db_resultinterface#getinternalresult
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\ResultInterface
  description: "### abstract public **getInternalResult** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ResultInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ResultInterface.html)"
- name: Db\ResultInterface::numRows
  id: api/phalcon_db_resultinterface#numrows
  summary: null
  belongs_to: Db\ResultInterface
  description: |-
    ### abstract public **numRows** ()

    ...
- name: Db\ResultInterface::setFetchMode
  id: api/phalcon_db_resultinterface#setfetchmode
  summary: null
  belongs_to: Db\ResultInterface
  description: |-
    ### abstract public **setFetchMode** (*mixed* $fetchMode)

    ...
- name: Db\Result\Pdo
  id: api/phalcon_db_result_pdo
  summary: Allows to execute the statement again
  description: "# Class **Phalcon\\Db\\Result\\Pdo**\n\n*implements* [*Phalcon\\Db\\ResultInterface*](phalcon_db_resultinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/db/result/pdo.zep)\n\nEncapsulates the resultset internals\n\n``` php\n$result = $connection->query(\"SELECT * FROM robots ORDER BY name\");\n\n$result->setFetchMode(\n    \\Phalcon\\Db::FETCH_NUM\n);\n\nwhile ($robot = $result->fetchArray()) {\n    print_r($robot);\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface) $connection, [PDOStatement](http://php.net/manual/en/class.pdostatement.php) $result, \\[*string* $sqlStatement\\], \\[*array* $bindParams\\], \\[*array* $bindTypes\\])\n\nPhalcon\\Db\\Result\\Pdo constructor\n\n### public **execute** ()\n\nAllows to execute the statement again. Some database systems don’t support scrollable cursors, So, as cursors are forward only, we need to execute the cursor again to fetch rows from the begining\n\n### public **fetch** (\\[*mixed* $fetchStyle\\], \\[*mixed* $cursorOrientation\\], \\[*mixed* $cursorOffset\\])\n\nFetches an array/object of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode\n\n``` php\n$result = $connection->query(\"SELECT * FROM robots ORDER BY name\");\n\n$result->setFetchMode(\n    \\Phalcon\\Db::FETCH_OBJ\n);\n\nwhile ($robot = $result->fetch()) {\n    echo $robot->name;\n}\n```\n\n### public **fetchArray** ()\n\nReturns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode\n\n``` php\n$result = $connection->query(\"SELECT * FROM robots ORDER BY name\");\n\n$result->setFetchMode(\n    \\Phalcon\\Db::FETCH_NUM\n);\n\nwhile ($robot = result->fetchArray()) {\n    print_r($robot);\n}\n```\n\n### public **fetchAll** (\\[*mixed* $fetchStyle\\], \\[*mixed* $fetchArgument\\], \\[*mixed* $ctorArgs\\])\n\nReturns an array of arrays containing all the records in the result This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode\n\n``` php\n$result = $connection->query(\n    \"SELECT * FROM robots ORDER BY name\"\n);\n\n$robots = $result->fetchAll();\n```\n\n### public **numRows** ()\n\nGets number of rows returned by a resultset\n\n``` php\n$result = $connection->query(\n    \"SELECT * FROM robots ORDER BY name\"\n);\n\necho \"There are \", $result->numRows(), \" rows in the resultset\";\n```\n\n### public **dataSeek** (*mixed* $number)\n\nMoves internal resultset cursor to another position letting us to fetch a certain row\n\n``` php\n$result = $connection->query(\n    \"SELECT * FROM robots ORDER BY name\"\n);\n\n// Move to third row on result\n$result->dataSeek(2);\n\n// Fetch third row\n$row = $result->fetch();\n```\n\n### public **setFetchMode** (*mixed* $fetchMode, \\[*mixed* $colNoOrClassNameOrObject\\], \\[*mixed* $ctorargs\\])\n\nChanges the fetching mode affecting Phalcon\\Db\\Result\\Pdo::fetch()\n\n``` php\n// Return array with integer indexes\n$result->setFetchMode(\n    \\Phalcon\\Db::FETCH_NUM\n);\n\n// Return associative array without integer indexes\n$result->setFetchMode(\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\n// Return associative array together with integer indexes\n$result->setFetchMode(\n    \\Phalcon\\Db::FETCH_BOTH\n);\n\n// Return an object\n$result->setFetchMode(\n    \\Phalcon\\Db::FETCH_OBJ\n);\n```\n\n### public **getInternalResult** ()\n\nGets the internal PDO result object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Result_Pdo.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Result_Pdo.html)"
- name: Db\Result\Pdo::dataSeek
  id: api/phalcon_db_result_pdo#dataseek
  summary: null
  belongs_to: Db\Result\Pdo
  description: |-
    ### public **dataSeek** (*mixed* $number)

    Moves internal resultset cursor to another position letting us to fetch a certain row

    ``` php
    $result = $connection->query(
        "SELECT * FROM robots ORDER BY name"
    );

    // Move to third row on result
    $result->dataSeek(2);

    // Fetch third row
    $row = $result->fetch();
    ```
- name: Db\Result\Pdo::execute
  id: api/phalcon_db_result_pdo#execute
  summary: Allows to execute the statement again
  belongs_to: Db\Result\Pdo
  description: |-
    ### public **execute** ()

    Allows to execute the statement again. Some database systems don’t support scrollable cursors, So, as cursors are forward only, we need to execute the cursor again to fetch rows from the begining
- name: Db\Result\Pdo::fetch
  id: api/phalcon_db_result_pdo#fetch
  summary: Fetches an array/object of strings that corresponds to the fetched row, or FALSE if there are no more rows
  belongs_to: Db\Result\Pdo
  description: |-
    ### public **fetch** (\[*mixed* $fetchStyle\], \[*mixed* $cursorOrientation\], \[*mixed* $cursorOffset\])

    Fetches an array/object of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\Db\Result\Pdo::setFetchMode

    ``` php
    $result = $connection->query("SELECT * FROM robots ORDER BY name");

    $result->setFetchMode(
        \Phalcon\Db::FETCH_OBJ
    );

    while ($robot = $result->fetch()) {
        echo $robot->name;
    }
    ```
- name: Db\Result\Pdo::fetchAll
  id: api/phalcon_db_result_pdo#fetchall
  summary: null
  belongs_to: Db\Result\Pdo
  description: |-
    ### public **fetchAll** (\[*mixed* $fetchStyle\], \[*mixed* $fetchArgument\], \[*mixed* $ctorArgs\])

    Returns an array of arrays containing all the records in the result This method is affected by the active fetch flag set using Phalcon\Db\Result\Pdo::setFetchMode

    ``` php
    $result = $connection->query(
        "SELECT * FROM robots ORDER BY name"
    );

    $robots = $result->fetchAll();
    ```
- name: Db\Result\Pdo::fetchArray
  id: api/phalcon_db_result_pdo#fetcharray
  summary: Returns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows
  belongs_to: Db\Result\Pdo
  description: |-
    ### public **fetchArray** ()

    Returns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\Db\Result\Pdo::setFetchMode

    ``` php
    $result = $connection->query("SELECT * FROM robots ORDER BY name");

    $result->setFetchMode(
        \Phalcon\Db::FETCH_NUM
    );

    while ($robot = result->fetchArray()) {
        print_r($robot);
    }
    ```
- name: Db\Result\Pdo::getInternalResult
  id: api/phalcon_db_result_pdo#getinternalresult
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Db\Result\Pdo
  description: "### public **getInternalResult** ()\n\nGets the internal PDO result object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Result_Pdo.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Result_Pdo.html)"
- name: Db\Result\Pdo::numRows
  id: api/phalcon_db_result_pdo#numrows
  summary: null
  belongs_to: Db\Result\Pdo
  description: |-
    ### public **numRows** ()

    Gets number of rows returned by a resultset

    ``` php
    $result = $connection->query(
        "SELECT * FROM robots ORDER BY name"
    );

    echo "There are ", $result->numRows(), " rows in the resultset";
    ```
- name: Db\Result\Pdo::setFetchMode
  id: api/phalcon_db_result_pdo#setfetchmode
  summary: null
  belongs_to: Db\Result\Pdo
  description: |-
    ### public **setFetchMode** (*mixed* $fetchMode, \[*mixed* $colNoOrClassNameOrObject\], \[*mixed* $ctorargs\])

    Changes the fetching mode affecting Phalcon\Db\Result\Pdo::fetch()

    ``` php
    // Return array with integer indexes
    $result->setFetchMode(
        \Phalcon\Db::FETCH_NUM
    );

    // Return associative array without integer indexes
    $result->setFetchMode(
        \Phalcon\Db::FETCH_ASSOC
    );

    // Return associative array together with integer indexes
    $result->setFetchMode(
        \Phalcon\Db::FETCH_BOTH
    );

    // Return an object
    $result->setFetchMode(
        \Phalcon\Db::FETCH_OBJ
    );
    ```
- name: Debug
  id: api/phalcon_debug
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Debug**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/debug.zep)\n\nProvides debug capabilities to Phalcon applications\n\n## Methods\n\n### public **setUri** (*mixed* $uri)\n\nChange the base URI for static resources\n\n### public **setShowBackTrace** (*mixed* $showBackTrace)\n\nSets if files the exception’s backtrace must be showed\n\n### public **setShowFiles** (*mixed* $showFiles)\n\nSet if files part of the backtrace must be shown in the output\n\n### public **setShowFileFragment** (*mixed* $showFileFragment)\n\nSets if files must be completely opened and showed in the output or just the fragment related to the exception\n\n### public **listen** (\\[*mixed* $exceptions\\], \\[*mixed* $lowSeverity\\])\n\nListen for uncaught exceptions and unsilent notices or warnings\n\n### public **listenExceptions** ()\n\nListen for uncaught exceptions\n\n### public **listenLowSeverity** ()\n\nListen for unsilent notices or warnings\n\n### public **halt** ()\n\nHalts the request showing a backtrace\n\n### public **debugVar** (*mixed* $varz, \\[*mixed* $key\\])\n\nAdds a variable to the debug output\n\n### public **clearVars** ()\n\nClears are variables added previously\n\n### protected **\\_escapeString** (*mixed* $value)\n\nEscapes a string with htmlentities\n\n### protected **\\_getArrayDump** (*array* $argument, \\[*mixed* $n\\])\n\nProduces a recursive representation of an array\n\n### protected **\\_getVarDump** (*mixed* $variable)\n\nProduces an string representation of a variable\n\n### public **getMajorVersion** ()\n\nReturns the major framework’s version\n\n### public **getVersion** ()\n\nGenerates a link to the current version documentation\n\n### public **getCssSources** ()\n\nReturns the css sources\n\n### public **getJsSources** ()\n\nReturns the javascript sources\n\n### final protected **showTraceItem** (*mixed* $n, *array* $trace)\n\nShows a backtrace item\n\n### public **onUncaughtLowSeverity** (*mixed* $severity, *mixed* $message, *mixed* $file, *mixed* $line, *mixed* $context)\n\nThrows an exception when a notice or warning is raised\n\n### public **onUncaughtException** ([Exception](http://php.net/manual/en/class.exception.php) $exception)\n\nHandles uncaught exceptions\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Debug.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Debug.html)"
- name: Debug::clearVars
  id: api/phalcon_debug#clearvars
  summary: null
  belongs_to: Debug
  description: |-
    ### public **clearVars** ()

    Clears are variables added previously

    ### protected **\_escapeString** (*mixed* $value)

    Escapes a string with htmlentities

    ### protected **\_getArrayDump** (*array* $argument, \[*mixed* $n\])

    Produces a recursive representation of an array

    ### protected **\_getVarDump** (*mixed* $variable)

    Produces an string representation of a variable
- name: Debug::debugVar
  id: api/phalcon_debug#debugvar
  summary: null
  belongs_to: Debug
  description: |-
    ### public **debugVar** (*mixed* $varz, \[*mixed* $key\])

    Adds a variable to the debug output
- name: Debug::getCssSources
  id: api/phalcon_debug#getcsssources
  summary: null
  belongs_to: Debug
  description: |-
    ### public **getCssSources** ()

    Returns the css sources
- name: Debug::getJsSources
  id: api/phalcon_debug#getjssources
  summary: null
  belongs_to: Debug
  description: |-
    ### public **getJsSources** ()

    Returns the javascript sources

    ### final protected **showTraceItem** (*mixed* $n, *array* $trace)

    Shows a backtrace item
- name: Debug::getMajorVersion
  id: api/phalcon_debug#getmajorversion
  summary: null
  belongs_to: Debug
  description: |-
    ### public **getMajorVersion** ()

    Returns the major framework’s version
- name: Debug::getVersion
  id: api/phalcon_debug#getversion
  summary: null
  belongs_to: Debug
  description: |-
    ### public **getVersion** ()

    Generates a link to the current version documentation
- name: Debug::halt
  id: api/phalcon_debug#halt
  summary: null
  belongs_to: Debug
  description: |-
    ### public **halt** ()

    Halts the request showing a backtrace
- name: Debug::listen
  id: api/phalcon_debug#listen
  summary: null
  belongs_to: Debug
  description: |-
    ### public **listen** (\[*mixed* $exceptions\], \[*mixed* $lowSeverity\])

    Listen for uncaught exceptions and unsilent notices or warnings
- name: Debug::listenExceptions
  id: api/phalcon_debug#listenexceptions
  summary: null
  belongs_to: Debug
  description: |-
    ### public **listenExceptions** ()

    Listen for uncaught exceptions
- name: Debug::listenLowSeverity
  id: api/phalcon_debug#listenlowseverity
  summary: null
  belongs_to: Debug
  description: |-
    ### public **listenLowSeverity** ()

    Listen for unsilent notices or warnings
- name: Debug::onUncaughtException
  id: api/phalcon_debug#onuncaughtexception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Debug
  description: "### public **onUncaughtException** ([Exception](http://php.net/manual/en/class.exception.php) $exception)\n\nHandles uncaught exceptions\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Debug.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Debug.html)"
- name: Debug::onUncaughtLowSeverity
  id: api/phalcon_debug#onuncaughtlowseverity
  summary: null
  belongs_to: Debug
  description: |-
    ### public **onUncaughtLowSeverity** (*mixed* $severity, *mixed* $message, *mixed* $file, *mixed* $line, *mixed* $context)

    Throws an exception when a notice or warning is raised
- name: Debug::setShowBackTrace
  id: api/phalcon_debug#setshowbacktrace
  summary: null
  belongs_to: Debug
  description: |-
    ### public **setShowBackTrace** (*mixed* $showBackTrace)

    Sets if files the exception’s backtrace must be showed
- name: Debug::setShowFileFragment
  id: api/phalcon_debug#setshowfilefragment
  summary: null
  belongs_to: Debug
  description: |-
    ### public **setShowFileFragment** (*mixed* $showFileFragment)

    Sets if files must be completely opened and showed in the output or just the fragment related to the exception
- name: Debug::setShowFiles
  id: api/phalcon_debug#setshowfiles
  summary: null
  belongs_to: Debug
  description: |-
    ### public **setShowFiles** (*mixed* $showFiles)

    Set if files part of the backtrace must be shown in the output
- name: Debug::setUri
  id: api/phalcon_debug#seturi
  summary: null
  belongs_to: Debug
  description: |-
    ### public **setUri** (*mixed* $uri)

    Change the base URI for static resources
- name: Debugging Applications
  id: reference/debug
  summary: PHP offers tools to debug applications with notices, warnings, errors and exceptions
  description: "# Debugging Applications\n\nPHP offers tools to debug applications with notices, warnings, errors and exceptions. The [Exception class](http://www.php.net/manual/en/language.exceptions.php) offers information such as the file, line, message, numeric code, backtrace etc. on where an error occurred. OOP frameworks like Phalcon mainly use this class to encapsulate this functionality and provide information back to the developer or user.\n\nDespite being written in C, Phalcon executes methods in the PHP userland, providing the debug capability that any other application or framework written in PHP has.\n\n## Catching Exceptions\n\nThroughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block:\n\n``` php\ntry {\n\n    // ... Some Phalcon/PHP code\n\n} catch (\\Exception $e) {\n\n}\n```\n\nAny exception thrown within the block is captured in the variable `$e`. A [*Phalcon\\Exception*](../api/phalcon_exception) extends the PHP [Exception class](http://www.php.net/manual/en/language.exceptions.php) and is used to understand whether the exception came from Phalcon or PHP itself.\n\nAll exceptions generated by PHP are based on the [Exception class](http://www.php.net/manual/en/language.exceptions.php), and have at least the following elements:\n\n``` php\nclass Exception\n{\n\n    /* Properties */\n    protected string $message;\n    protected int $code;\n    protected string $file;\n    protected int $line;\n\n    /* Methods */\n    public __construct ([ string $message = \"\" [, int $code = 0 [, Exception $previous = NULL ]]])\n    final public string getMessage ( void )\n    final public Exception getPrevious ( void )\n    final public mixed getCode ( void )\n    final public string getFile ( void )\n    final public int getLine ( void )\n    final public array getTrace ( void )\n    final public string getTraceAsString ( void )\n    public string __toString ( void )\n    final private void __clone ( void )\n}\n```\n\nRetrieving information from [*Phalcon\\Exception*](../api/phalcon_exception) is the same as PHP’s [Exception class](http://www.php.net/manual/en/language.exceptions.php):\n\n``` php\ntry {\n\n    // ... App code ...\n\n} catch (\\Exception $e) {\n    echo get_class($e), \": \", $e->getMessage(), \"\\n\";\n    echo \" File=\", $e->getFile(), \"\\n\";\n    echo \" Line=\", $e->getLine(), \"\\n\";\n    echo $e->getTraceAsString();\n}\n```\n\nIt’s therefore easy to find which file and line of the application’s code generated the exception, as well as the components involved in generating the exception:\n\n``` html\nPDOException: SQLSTATE[28000] [1045] Access denied for user 'root'@'localhost'\n    (using password: NO)\n File=/Applications/MAMP/htdocs/invo/public/index.php\n Line=74\n#0 [internal function]: PDO->__construct('mysql:host=loca...', 'root', '', Array)\n#1 [internal function]: Phalcon\\Db\\Adapter\\Pdo->connect(Array)\n#2 /Applications/MAMP/htdocs/invo/public/index.php(74):\n    Phalcon\\Db\\Adapter\\Pdo->__construct(Array)\n#3 [internal function]: {closure}()\n#4 [internal function]: call_user_func_array(Object(Closure), Array)\n#5 [internal function]: Phalcon\\Di->_factory(Object(Closure), Array)\n#6 [internal function]: Phalcon\\Di->get('db', Array)\n#7 [internal function]: Phalcon\\Di->getShared('db')\n#8 [internal function]: Phalcon\\Mvc\\Model->getConnection()\n#9 [internal function]: Phalcon\\Mvc\\Model::_getOrCreateResultset('Users', Array, true)\n#10 /Applications/MAMP/htdocs/invo/app/controllers/SessionController.php(83):\n    Phalcon\\Mvc\\Model::findFirst('email='[email protected]..')\n#11 [internal function]: SessionController->startAction()\n#12 [internal function]: call_user_func_array(Array, Array)\n#13 [internal function]: Phalcon\\Mvc\\Dispatcher->dispatch()\n#14 /Applications/MAMP/htdocs/invo/public/index.php(114): Phalcon\\Mvc\\Application->handle()\n#15 {main}\n```\n\nAs you can see from the above output the Phalcon’s classes and methods are displayed just like any other component, and even showing the parameters that were invoked in every call. The method [Exception::getTrace](http://www.php.net/manual/en/exception.gettrace.php) provides additional information if needed.\n\n## Debug component\n\nPhalcon provides a debug component that allows the developer to easily find errors produced in an application created with the framework.\n\nThe following screencast explains how it works:\n\nTo enable it, add the following to your bootstrap:\n\n``` php\n$debug = new \\Phalcon\\Debug();\n$debug->listen();\n```\n\nAny Try/Catch blocks must be removed or disabled to make this component work properly.\n\n## Reflection and Introspection\n\nAny instance of a Phalcon class offers exactly the same behavior than a PHP normal one. It’s possible to use the [Reflection API](http://php.net/manual/en/book.reflection.php) or simply print any object to show how is its internal state:\n\n``` php\n$router = new Phalcon\\Mvc\\Router();\nprint_r($router);\n```\n\nIt’s easy to know the internal state of any object. The above example prints the following:\n\n``` html\nPhalcon\\Mvc\\Router Object\n(\n    [_dependencyInjector:protected] =>\n    [_module:protected] =>\n    [_controller:protected] =>\n    [_action:protected] =>\n    [_params:protected] => Array\n        (\n        )\n    [_routes:protected] => Array\n        (\n            [0] => Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] => #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_compiledPattern:protected] => #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_paths:protected] => Array\n                        (\n                            [controller] => 1\n                        )\n\n                    [_methods:protected] =>\n                    [_id:protected] => 0\n                    [_name:protected] =>\n                )\n\n            [1] => Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] => #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_compiledPattern:protected] => #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_paths:protected] => Array\n                        (\n                            [controller] => 1\n                            [action] => 2\n                            [params] => 3\n                        )\n                    [_methods:protected] =>\n                    [_id:protected] => 1\n                    [_name:protected] =>\n                )\n        )\n    [_matchedRoute:protected] =>\n    [_matches:protected] =>\n    [_wasMatched:protected] =>\n    [_defaultModule:protected] =>\n    [_defaultController:protected] =>\n    [_defaultAction:protected] =>\n    [_defaultParams:protected] => Array\n        (\n        )\n)\n```\n\n## Using XDebug\n\n[XDebug](http://xdebug.org) is an amazing tool that complements the debugging of PHP applications. It is also a C extension for PHP, and you can use it together with Phalcon without additional configuration or side effects.\n\nThe following screencast shows a Xdebug session with Phalcon:\n\nOnce you have xdebug installed, you can use its API to get a more detailed information about exceptions and messages.\n\n> We highly recommend use at least XDebug 2.2.3 for a better compatibility with Phalcon\n\nThe following example implements [xdebug_print_function_stack](http://xdebug.org/docs/stack_trace) to stop the execution and generate a backtrace:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n        // Request variables from HTML form\n        $name  = $this->request->getPost(\"name\", \"string\");\n        $email = $this->request->getPost(\"email\", \"email\");\n\n        // Stop execution and show a backtrace\n        return xdebug_print_function_stack(\"stop here!\");\n\n        $user        = new Users();\n        $user->name  = $name;\n        $user->email = $email;\n\n        // Store and check for errors\n        $user->save();\n    }\n}\n```\n\nIn this instance, Xdebug will also show us the variables in the local scope, and a backtrace as well:\n\n``` html\nXdebug: stop here! in /Applications/MAMP/htdocs/tutorial/app/controllers/SignupController.php\n    on line 19\n\nCall Stack:\n    0.0383     654600   1. {main}() /Applications/MAMP/htdocs/tutorial/public/index.php:0\n    0.0392     663864   2. Phalcon\\Mvc\\Application->handle()\n        /Applications/MAMP/htdocs/tutorial/public/index.php:37\n    0.0418     738848   3. SignupController->registerAction()\n        /Applications/MAMP/htdocs/tutorial/public/index.php:0\n    0.0419     740144   4. xdebug_print_function_stack()\n        /Applications/MAMP/htdocs/tutorial/app/controllers/SignupController.php:19\n```\n\nXdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the [XDebug documentation](http://xdebug.org/docs) for more information.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/debug.html](https://docs.phalconphp.com/en/latest/reference/debug.html)"
- name: Debug\Dump
  id: api/phalcon_debug_dump
  summary: Prepare an HTML string of information about a single variable
  description: "# Class **Phalcon\\Debug\\Dump**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/debug/dump.zep)\n\nDumps information about a variable(s)\n\n``` php\n$foo = 123;\n\necho (new \\Phalcon\\Debug\\Dump())->variable($foo, \"foo\");\n```\n\n``` php\n$foo = \"string\";\n$bar = [\"key\" => \"value\"];\n$baz = new stdClass();\n\necho (new \\Phalcon\\Debug\\Dump())->variables($foo, $bar, $baz);\n```\n\n## Methods\n\n### public **getDetailed** ()\n\n...\n\n### public **setDetailed** (*mixed* $detailed)\n\n...\n\n### public **\\_\\_construct** (\\[*array* $styles\\], \\[*mixed* $detailed\\])\n\nPhalcon\\Debug\\Dump constructor\n\n### public **all** ()\n\nAlias of variables() method\n\n### protected **getStyle** (*mixed* $type)\n\nGet style for type\n\n### public **setStyles** (\\[*array* $styles\\])\n\nSet styles for vars type\n\n### public **one** (*mixed* $variable, \\[*mixed* $name\\])\n\nAlias of variable() method\n\n### protected **output** (*mixed* $variable, \\[*mixed* $name\\], \\[*mixed* $tab\\])\n\nPrepare an HTML string of information about a single variable.\n\n### public **variable** (*mixed* $variable, \\[*mixed* $name\\])\n\nReturns an HTML string of information about a single variable.\n\n``` php\necho (new \\Phalcon\\Debug\\Dump())->variable($foo, \"foo\");\n```\n\n### public **variables** ()\n\nReturns an HTML string of debugging information about any number of variables, each wrapped in a “pre” tag.\n\n``` php\n$foo = \"string\";\n$bar = [\"key\" => \"value\"];\n$baz = new stdClass();\n\necho (new \\Phalcon\\Debug\\Dump())->variables($foo, $bar, $baz);\n```\n\n### public **toJson** (*mixed* $variable)\n\nReturns an JSON string of information about a single variable.\n\n``` php\n$foo = [\n    \"key\" => \"value\",\n];\n\necho (new \\Phalcon\\Debug\\Dump())->toJson($foo);\n\n$foo = new stdClass();\n$foo->bar = \"buz\";\n\necho (new \\Phalcon\\Debug\\Dump())->toJson($foo);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Dump.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Dump.html)"
- name: Debug\Dump::all
  id: api/phalcon_debug_dump#all
  summary: null
  belongs_to: Debug\Dump
  description: |-
    ### public **all** ()

    Alias of variables() method

    ### protected **getStyle** (*mixed* $type)

    Get style for type
- name: Debug\Dump::getDetailed
  id: api/phalcon_debug_dump#getdetailed
  summary: null
  belongs_to: Debug\Dump
  description: |-
    ### public **getDetailed** ()

    ...
- name: Debug\Dump::one
  id: api/phalcon_debug_dump#one
  summary: Prepare an HTML string of information about a single variable
  belongs_to: Debug\Dump
  description: |-
    ### public **one** (*mixed* $variable, \[*mixed* $name\])

    Alias of variable() method

    ### protected **output** (*mixed* $variable, \[*mixed* $name\], \[*mixed* $tab\])

    Prepare an HTML string of information about a single variable.
- name: Debug\Dump::setDetailed
  id: api/phalcon_debug_dump#setdetailed
  summary: null
  belongs_to: Debug\Dump
  description: |-
    ### public **setDetailed** (*mixed* $detailed)

    ...

    ### public **\_\_construct** (\[*array* $styles\], \[*mixed* $detailed\])

    Phalcon\Debug\Dump constructor
- name: Debug\Dump::setStyles
  id: api/phalcon_debug_dump#setstyles
  summary: null
  belongs_to: Debug\Dump
  description: |-
    ### public **setStyles** (\[*array* $styles\])

    Set styles for vars type
- name: Debug\Dump::toJson
  id: api/phalcon_debug_dump#tojson
  summary: Returns an JSON string of information about a single variable
  belongs_to: Debug\Dump
  description: "### public **toJson** (*mixed* $variable)\n\nReturns an JSON string of information about a single variable.\n\n``` php\n$foo = [\n    \"key\" => \"value\",\n];\n\necho (new \\Phalcon\\Debug\\Dump())->toJson($foo);\n\n$foo = new stdClass();\n$foo->bar = \"buz\";\n\necho (new \\Phalcon\\Debug\\Dump())->toJson($foo);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Dump.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Dump.html)"
- name: Debug\Dump::variable
  id: api/phalcon_debug_dump#variable
  summary: Returns an HTML string of information about a single variable
  belongs_to: Debug\Dump
  description: |-
    ### public **variable** (*mixed* $variable, \[*mixed* $name\])

    Returns an HTML string of information about a single variable.

    ``` php
    echo (new \Phalcon\Debug\Dump())->variable($foo, "foo");
    ```
- name: Debug\Dump::variables
  id: api/phalcon_debug_dump#variables
  summary: Returns an HTML string of debugging information about any number of variables, each wrapped in a “pre” tag
  belongs_to: Debug\Dump
  description: |-
    ### public **variables** ()

    Returns an HTML string of debugging information about any number of variables, each wrapped in a “pre” tag.

    ``` php
    $foo = "string";
    $bar = ["key" => "value"];
    $baz = new stdClass();

    echo (new \Phalcon\Debug\Dump())->variables($foo, $bar, $baz);
    ```
- name: Debug\Exception
  id: api/phalcon_debug_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Debug\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/debug/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Exception.html)"
- name: Dependency Injection Explained
  id: reference/di-explained
  summary: The following example is a bit lengthy, but it attempts to explain why Phalcon uses service location and dependency injection
  description: "# Dependency Injection Explained\n\nThe following example is a bit lengthy, but it attempts to explain why Phalcon uses service location and dependency injection. First, let’s pretend we are developing a component called SomeComponent. This performs a task that is not important now. Our component has some dependency that is a connection to a database.\n\nIn this first example, the connection is created inside the component. This approach is impractical; due to the fact we cannot change the connection parameters or the type of database system because the component only works as created.\n\n``` php\nclass SomeComponent\n{\n    /**\n     * The instantiation of the connection is hardcoded inside\n     * the component, therefore it's difficult replace it externally\n     * or change its behavior\n     */\n    public function someDbTask()\n    {\n        $connection = new Connection(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n$some->someDbTask();\n```\n\nTo solve this, we have created a setter that injects the dependency externally before using it. For now, this seems to be a good solution:\n\n``` php\nclass SomeComponent\n{\n    protected $_connection;\n\n    /**\n     * Sets the connection externally\n     */\n    public function setConnection($connection)\n    {\n        $this->_connection = $connection;\n    }\n\n    public function someDbTask()\n    {\n        $connection = $this->_connection;\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n// Create the connection\n$connection = new Connection(\n    [\n        \"host\"     => \"localhost\",\n        \"username\" => \"root\",\n        \"password\" => \"secret\",\n        \"dbname\"   => \"invo\",\n    ]\n);\n\n// Inject the connection in the component\n$some->setConnection($connection);\n\n$some->someDbTask();\n```\n\nNow consider that we use this component in different parts of the application and then we will need to create the connection several times before passing it to the component. Using some kind of global registry where we obtain the connection instance and not have to create it again and again could solve this:\n\n``` php\nclass Registry\n{\n    /**\n     * Returns the connection\n     */\n    public static function getConnection()\n    {\n        return new Connection(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n    }\n}\n\nclass SomeComponent\n{\n    protected $_connection;\n\n    /**\n     * Sets the connection externally\n     */\n    public function setConnection($connection)\n    {\n        $this->_connection = $connection;\n    }\n\n    public function someDbTask()\n    {\n        $connection = $this->_connection;\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n// Pass the connection defined in the registry\n$some->setConnection(Registry::getConnection());\n\n$some->someDbTask();\n```\n\nNow, let’s imagine that we must implement two methods in the component, the first always needs to create a new connection and the second always needs to use a shared connection:\n\n``` php\nclass Registry\n{\n    protected static $_connection;\n\n    /**\n     * Creates a connection\n     */\n    protected static function _createConnection()\n    {\n        return new Connection(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n    }\n\n    /**\n     * Creates a connection only once and returns it\n     */\n    public static function getSharedConnection()\n    {\n        if (self::$_connection === null) {\n            self::$_connection = self::_createConnection();\n        }\n\n        return self::$_connection;\n    }\n\n    /**\n     * Always returns a new connection\n     */\n    public static function getNewConnection()\n    {\n        return self::_createConnection();\n    }\n}\n\nclass SomeComponent\n{\n    protected $_connection;\n\n    /**\n     * Sets the connection externally\n     */\n    public function setConnection($connection)\n    {\n        $this->_connection = $connection;\n    }\n\n    /**\n     * This method always needs the shared connection\n     */\n    public function someDbTask()\n    {\n        $connection = $this->_connection;\n\n        // ...\n    }\n\n    /**\n     * This method always needs a new connection\n     */\n    public function someOtherDbTask($connection)\n    {\n\n    }\n}\n\n$some = new SomeComponent();\n\n// This injects the shared connection\n$some->setConnection(\n    Registry::getSharedConnection()\n);\n\n$some->someDbTask();\n\n// Here, we always pass a new connection as parameter\n$some->someOtherDbTask(\n    Registry::getNewConnection()\n);\n```\n\nSo far we have seen how dependency injection solved our problems. Passing dependencies as arguments instead of creating them internally in the code makes our application more maintainable and decoupled. However, in the long-term, this form of dependency injection has some disadvantages.\n\nFor instance, if the component has many dependencies, we will need to create multiple setter arguments to pass the dependencies or create a constructor that pass them with many arguments, additionally creating dependencies before using the component, every time, makes our code not as maintainable as we would like:\n\n``` php\n// Create the dependencies or retrieve them from the registry\n$connection = new Connection();\n$session    = new Session();\n$fileSystem = new FileSystem();\n$filter     = new Filter();\n$selector   = new Selector();\n\n// Pass them as constructor parameters\n$some = new SomeComponent($connection, $session, $fileSystem, $filter, $selector);\n\n// ... Or using setters\n$some->setConnection($connection);\n$some->setSession($session);\n$some->setFileSystem($fileSystem);\n$some->setFilter($filter);\n$some->setSelector($selector);\n```\n\nThink if we had to create this object in many parts of our application. In the future, if we do not require any of the dependencies, we need to go through the entire code base to remove the parameter in any constructor or setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:\n\n``` php\nclass SomeComponent\n{\n    // ...\n\n    /**\n     * Define a factory method to create SomeComponent instances injecting its dependencies\n     */\n    public static function factory()\n    {\n        $connection = new Connection();\n        $session    = new Session();\n        $fileSystem = new FileSystem();\n        $filter     = new Filter();\n        $selector   = new Selector();\n\n        return new self($connection, $session, $fileSystem, $filter, $selector);\n    }\n}\n```\n\nNow we find ourselves back where we started, we are again building the dependencies inside of the component! We must find a solution that keeps us from repeatedly falling into bad practices.\n\nA practical and elegant way to solve these problems is using a container for dependencies. The containers act as the global registry that we saw earlier. Using the container for dependencies as a bridge to obtain the dependencies allows us to reduce the complexity of our component:\n\n``` php\nuse Phalcon\\Di;\nuse Phalcon\\DiInterface;\n\nclass SomeComponent\n{\n    protected $_di;\n\n    public function __construct(DiInterface $di)\n    {\n        $this->_di = $di;\n    }\n\n    public function someDbTask()\n    {\n        // Get the connection service\n        // Always returns a new connection\n        $connection = $this->_di->get(\"db\");\n    }\n\n    public function someOtherDbTask()\n    {\n        // Get a shared connection service,\n        // this will return the same connection every time\n        $connection = $this->_di->getShared(\"db\");\n\n        // This method also requires an input filtering service\n        $filter = $this->_di->get(\"filter\");\n    }\n}\n\n$di = new Di();\n\n// Register a \"db\" service in the container\n$di->set(\n    \"db\",\n    function () {\n        return new Connection(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n    }\n);\n\n// Register a \"filter\" service in the container\n$di->set(\n    \"filter\",\n    function () {\n        return new Filter();\n    }\n);\n\n// Register a \"session\" service in the container\n$di->set(\n    \"session\",\n    function () {\n        return new Session();\n    }\n);\n\n// Pass the service container as unique parameter\n$some = new SomeComponent($di);\n\n$some->someDbTask();\n```\n\nThe component can now simply access the service it requires when it needs it, if it does not require a service it is not even initialized, saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/di-explained.html](https://docs.phalconphp.com/en/latest/reference/di-explained.html)"
- name: Dependency Injection/Service Location
  id: reference/di
  summary: Before reading this section, it is wise to read the section which explains why Phalcon uses service location and dependency injection
  description: "# Dependency Injection/Service Location\n\n> Before reading this section, it is wise to read [*the section which explains why Phalcon uses service location and dependency injection*](di-explained).\n\n[*Phalcon\\Di*](../api/phalcon_di) is a component implementing Dependency Injection and Location of services and it’s itself a container for them.\n\nSince Phalcon is highly decoupled, [*Phalcon\\Di*](../api/phalcon_di) is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.\n\nBasically, this component implements the [Inversion of Control](http://en.wikipedia.org/wiki/Inversion_of_control) pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity since there is only one way to get the required dependencies within a component.\n\nAdditionally, this pattern increases testability in the code, thus making it less prone to errors.\n\n## Registering services in the Container\n\nThe framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.\n\nThis way of working gives us many advantages:\n\n- We can easily replace a component with one created by ourselves or a third party.\n- We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components.\n- We can get global instances of components in a structured and unified way.\n\nServices can be registered using several types of definitions:\n\n### Simple Registration\n\nAs seen before, there are several ways to register services. These we call simple:\n\n#### String\n\nThis type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:\n\n``` php\n// Return new Phalcon\\Http\\Request();\n$di->set(\n    \"request\",\n    \"Phalcon\\\\Http\\\\Request\"\n);\n```\n\n#### Class instances\n\nThis type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:\n\n``` php\nuse Phalcon\\Http\\Request;\n\n// Return new Phalcon\\Http\\Request();\n$di->set(\n    \"request\",\n    new Request()\n);\n```\n\n#### Closures/Anonymous functions\n\nThis method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$di->set(\n    \"db\",\n    function () {\n        return new PdoMysql(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"blog\",\n            ]\n        );\n    }\n);\n```\n\nSome of the limitations can be overcome by passing additional variables to the closure’s environment:\n\n``` php\nuse Phalcon\\Config;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$config = new Config(\n    [\n        \"host\"     => \"127.0.0.1\",\n        \"username\" => \"user\",\n        \"password\" => \"pass\",\n        \"dbname\"   => \"my_database\",\n    ]\n);\n\n// Using the $config variable in the current scope\n$di->set(\n    \"db\",\n    function () use ($config) {\n        return new PdoMysql(\n            [\n                \"host\"     => $config->host,\n                \"username\" => $config->username,\n                \"password\" => $config->password,\n                \"dbname\"   => $config->name,\n            ]\n        );\n    }\n);\n```\n\nYou can also access other DI services using the `get()` method:\n\n``` php\nuse Phalcon\\Config;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$di->set(\n    \"config\",\n    function () {\n        return new Config(\n            [\n                \"host\"     => \"127.0.0.1\",\n                \"username\" => \"user\",\n                \"password\" => \"pass\",\n                \"dbname\"   => \"my_database\",\n            ]\n        );\n    }\n);\n\n// Using the 'config' service from the DI\n$di->set(\n    \"db\",\n    function () {\n        $config = $this->get(\"config\");\n\n        return new PdoMysql(\n            [\n                \"host\"     => $config->host,\n                \"username\" => $config->username,\n                \"password\" => $config->password,\n                \"dbname\"   => $config->name,\n            ]\n        );\n    }\n);\n```\n\n### Complex Registration\n\nIf it is required to change the definition of a service without instantiating/resolving the service, then, we need to define the services using the array syntax. Define a service using an array definition can be a little more verbose:\n\n``` php\nuse Phalcon\\Logger\\Adapter\\File as LoggerFile;\n\n// Register a service 'logger' with a class name and its parameters\n$di->set(\n    \"logger\",\n    [\n        \"className\" => \"Phalcon\\\\Logger\\\\Adapter\\\\File\",\n        \"arguments\" => [\n            [\n                \"type\"  => \"parameter\",\n                \"value\" => \"../apps/logs/error.log\",\n            ]\n        ]\n    ]\n);\n\n// Using an anonymous function\n$di->set(\n    \"logger\",\n    function () {\n        return new LoggerFile(\"../apps/logs/error.log\");\n    }\n);\n```\n\nBoth service registrations above produce the same result. The array definition however, allows for alteration of the service parameters if needed:\n\n``` php\n// Change the service class name\n$di->getService(\"logger\")->setClassName(\"MyCustomLogger\");\n\n// Change the first parameter without instantiating the logger\n$di->getService(\"logger\")->setParameter(\n    0,\n    [\n        \"type\"  => \"parameter\",\n        \"value\" => \"../apps/logs/error.log\",\n    ]\n);\n```\n\nIn addition by using the array syntax you can use three types of dependency injection:\n\n#### Constructor Injection\n\nThis injection type passes the dependencies/arguments to the class constructor. Let’s pretend we have the following component:\n\n``` php\nnamespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    /**\n     * @var Response\n     */\n    protected $_response;\n\n    protected $_someFlag;\n\n\n\n    public function __construct(Response $response, $someFlag)\n    {\n        $this->_response = $response;\n        $this->_someFlag = $someFlag;\n    }\n}\n```\n\nThe service can be registered this way:\n\n``` php\n$di->set(\n    \"response\",\n    [\n        \"className\" => \"Phalcon\\\\Http\\\\Response\"\n    ]\n);\n\n$di->set(\n    \"someComponent\",\n    [\n        \"className\" => \"SomeApp\\\\SomeComponent\",\n        \"arguments\" => [\n            [\n                \"type\" => \"service\",\n                \"name\" => \"response\",\n            ],\n            [\n                \"type\"  => \"parameter\",\n                \"value\" => true,\n            ],\n        ]\n    ]\n);\n```\n\nThe service “response” ([*Phalcon\\Http\\Response*](../api/phalcon_http_response)) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.\n\n#### Setter Injection\n\nClasses may have setters to inject optional dependencies, our previous class can be changed to accept the dependencies with setters:\n\n``` php\nnamespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    /**\n     * @var Response\n     */\n    protected $_response;\n\n    protected $_someFlag;\n\n\n\n    public function setResponse(Response $response)\n    {\n        $this->_response = $response;\n    }\n\n    public function setFlag($someFlag)\n    {\n        $this->_someFlag = $someFlag;\n    }\n}\n```\n\nA service with setter injection can be registered as follows:\n\n``` php\n$di->set(\n    \"response\",\n    [\n        \"className\" => \"Phalcon\\\\Http\\\\Response\",\n    ]\n);\n\n$di->set(\n    \"someComponent\",\n    [\n        \"className\" => \"SomeApp\\\\SomeComponent\",\n        \"calls\"     => [\n            [\n                \"method\"    => \"setResponse\",\n                \"arguments\" => [\n                    [\n                        \"type\" => \"service\",\n                        \"name\" => \"response\",\n                    ]\n                ]\n            ],\n            [\n                \"method\"    => \"setFlag\",\n                \"arguments\" => [\n                    [\n                        \"type\"  => \"parameter\",\n                        \"value\" => true,\n                    ]\n                ]\n            ]\n        ]\n    ]\n);\n```\n\n#### Properties Injection\n\nA less common strategy is to inject dependencies or parameters directly into public attributes of the class:\n\n``` php\nnamespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    /**\n     * @var Response\n     */\n    public $response;\n\n    public $someFlag;\n}\n```\n\nA service with properties injection can be registered as follows:\n\n``` php\n$di->set(\n    \"response\",\n    [\n        \"className\" => \"Phalcon\\\\Http\\\\Response\",\n    ]\n);\n\n$di->set(\n    \"someComponent\",\n    [\n        \"className\"  => \"SomeApp\\\\SomeComponent\",\n        \"properties\" => [\n            [\n                \"name\"  => \"response\",\n                \"value\" => [\n                    \"type\" => \"service\",\n                    \"name\" => \"response\",\n                ],\n            ],\n            [\n                \"name\"  => \"someFlag\",\n                \"value\" => [\n                    \"type\"  => \"parameter\",\n                    \"value\" => true,\n                ],\n            ]\n        ]\n    ]\n);\n```\n\nSupported parameter types include the following:\n\n| Type      | Description                                          | Example                                                                                                     |\n|-----------|------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|\n| parameter | Represents a literal value to be passed as parameter | `[\"type\"`` ``=>`` ``\"parameter\",`` ``\"value\"`` ``=>`` ``1234]`                                              |\n| service   | Represents another service in the service container  | `[\"type\"`` ``=>`` ``\"service\",`` ``\"name\"`` ``=>`` ``\"request\"]`                                            |\n| instance  | Represents an object that must be built dynamically  | `[\"type\"`` ``=>`` ``\"instance\",`` ``\"className\"`` ``=>`` ``\"DateTime\",`` ``\"arguments\"`` ``=>`` ``[\"now\"]]` |\n\nResolving a service whose definition is complex may be slightly slower than simple definitions seen previously. However, these provide a more robust approach to define and inject services.\n\nMixing different types of definitions is allowed, everyone can decide what is the most appropriate way to register the services according to the application needs.\n\n### Array Syntax\n\nThe array syntax is also allowed to register services:\n\n``` php\nuse Phalcon\\Di;\nuse Phalcon\\Http\\Request;\n\n// Create the Dependency Injector Container\n$di = new Di();\n\n// By its class name\n$di[\"request\"] = \"Phalcon\\\\Http\\\\Request\";\n\n// Using an anonymous function, the instance will be lazy loaded\n$di[\"request\"] = function () {\n    return new Request();\n};\n\n// Registering an instance directly\n$di[\"request\"] = new Request();\n\n// Using an array definition\n$di[\"request\"] = [\n    \"className\" => \"Phalcon\\\\Http\\\\Request\",\n];\n```\n\nIn the examples above, when the framework needs to access the request data, it will ask for the service identified as ‘request’ in the container. The container in turn will return an instance of the required service. A developer might eventually replace a component when he/she needs.\n\nEach of the methods (demonstrated in the examples above) used to set/register a service has advantages and disadvantages. It is up to the developer and the particular requirements that will designate which one is used.\n\nSetting a service by a string is simple, but lacks flexibility. Setting services using an array offers a lot more flexibility, but makes the code more complicated. The lambda function is a good balance between the two, but could lead to more maintenance than one would expect.\n\n[*Phalcon\\Di*](../api/phalcon_di) offers lazy loading for every service it stores. Unless the developer chooses to instantiate an object directly and store it in the container, any object stored in it (via array, string, etc.) will be lazy loaded i.e. instantiated only when requested.\n\n## Resolving Services\n\nObtaining a service from the container is a matter of simply calling the “get” method. A new instance of the service will be returned:\n\n``` php\n$request = $di->get(\"request\");\n```\n\nOr by calling through the magic method:\n\n``` php\n$request = $di->getRequest();\n```\n\nOr using the array-access syntax:\n\n``` php\n$request = $di[\"request\"];\n```\n\nArguments can be passed to the constructor by adding an array parameter to the method “get”:\n\n``` php\n// new MyComponent(\"some-parameter\", \"other\")\n$component = $di->get(\n    \"MyComponent\",\n    [\n        \"some-parameter\",\n        \"other\",\n    ]\n);\n```\n\n### Events\n\n[*Phalcon\\Di*](../api/phalcon_di) is able to send events to an [*EventsManager*](events) if it is present. Events are triggered using the type “di”. Some events when returning boolean false could stop the active operation. The following events are supported:\n\n| Event Name           | Triggered                                                                                                       | Can stop operation? | Triggered on |\n|----------------------|-----------------------------------------------------------------------------------------------------------------|---------------------|--------------|\n| beforeServiceResolve | Triggered before resolve service. Listeners receive the service name and the parameters passed to it.           | No                  | Listeners    |\n| afterServiceResolve  | Triggered after resolve service. Listeners receive the service name, instance, and the parameters passed to it. | No                  | Listeners    |\n\n## Shared services\n\nServices can be registered as “shared” services this means that they always will act as [singletons](http://en.wikipedia.org/wiki/Singleton_pattern). Once the service is resolved for the first time the same instance of it is returned every time a consumer retrieve the service from the container:\n\n``` php\nuse Phalcon\\Session\\Adapter\\Files as SessionFiles;\n\n// Register the session service as \"always shared\"\n$di->setShared(\n    \"session\",\n    function () {\n        $session = new SessionFiles();\n\n        $session->start();\n\n        return $session;\n    }\n);\n\n// Locates the service for the first time\n$session = $di->get(\"session\");\n\n// Returns the first instantiated object\n$session = $di->getSession();\n```\n\nAn alternative way to register shared services is to pass “true” as third parameter of “set”:\n\n``` php\n// Register the session service as \"always shared\"\n$di->set(\n    \"session\",\n    function () {\n        // ...\n    },\n    true\n);\n```\n\nIf a service isn’t registered as shared and you want to be sure that a shared instance will be accessed every time the service is obtained from the DI, you can use the ‘getShared’ method:\n\n``` php\n$request = $di->getShared(\"request\");\n```\n\n## Manipulating services individually\n\nOnce a service is registered in the service container, you can retrieve it to manipulate it individually:\n\n``` php\nuse Phalcon\\Http\\Request;\n\n// Register the \"request\" service\n$di->set(\"request\", \"Phalcon\\\\Http\\\\Request\");\n\n// Get the service\n$requestService = $di->getService(\"request\");\n\n// Change its definition\n$requestService->setDefinition(\n    function () {\n        return new Request();\n    }\n);\n\n// Change it to shared\n$requestService->setShared(true);\n\n// Resolve the service (return a Phalcon\\Http\\Request instance)\n$request = $requestService->resolve();\n```\n\n## Instantiating classes via the Service Container\n\nWhen you request a service to the service container, if it can’t find out a service with the same name it’ll try to load a class with the same name. With this behavior we can replace any class by another simply by registering a service with its name:\n\n``` php\n// Register a controller as a service\n$di->set(\n    \"IndexController\",\n    function () {\n        $component = new Component();\n\n        return $component;\n    },\n    true\n);\n\n// Register a controller as a service\n$di->set(\n    \"MyOtherComponent\",\n    function () {\n        // Actually returns another component\n        $component = new AnotherComponent();\n\n        return $component;\n    }\n);\n\n// Create an instance via the service container\n$myComponent = $di->get(\"MyOtherComponent\");\n```\n\nYou can take advantage of this, always instantiating your classes via the service container (even if they aren’t registered as services). The DI will fallback to a valid autoloader to finally load the class. By doing this, you can easily replace any class in the future by implementing a definition for it.\n\n## Automatic Injecting of the DI itself\n\nIf a class or component requires the DI itself to locate services, the DI can automatically inject itself to the instances it creates, to do this, you need to implement the [*Phalcon\\Di\\InjectionAwareInterface*](../api/phalcon_di_injectionawareinterface) in your classes:\n\n``` php\nuse Phalcon\\DiInterface;\nuse Phalcon\\Di\\InjectionAwareInterface;\n\nclass MyClass implements InjectionAwareInterface\n{\n    /**\n     * @var DiInterface\n     */\n    protected $_di;\n\n\n\n    public function setDi(DiInterface $di)\n    {\n        $this->_di = $di;\n    }\n\n    public function getDi()\n    {\n        return $this->_di;\n    }\n}\n```\n\nThen once the service is resolved, the `$di` will be passed to `setDi()` automatically:\n\n``` php\n// Register the service\n$di->set(\"myClass\", \"MyClass\");\n\n// Resolve the service (NOTE: $myClass->setDi($di) is automatically called)\n$myClass = $di->get(\"myClass\");\n```\n\n## Organizing services in files\n\nYou can better organize your application by moving the service registration to individual files instead of doing everything in the application’s bootstrap:\n\n``` php\n$di->set(\n    \"router\",\n    function () {\n        return include \"../app/config/routes.php\";\n    }\n);\n```\n\nThen in the file (”../app/config/routes.php”) return the object resolved:\n\n``` php\n$router = new MyRouter();\n\n$router->post(\"/login\");\n\nreturn $router;\n```\n\n## Accessing the DI in a static way\n\nIf needed you can access the latest DI created in a static function in the following way:\n\n``` php\nuse Phalcon\\Di;\n\nclass SomeComponent\n{\n    public static function someMethod()\n    {\n        // Get the session service\n        $session = Di::getDefault()->getSession();\n    }\n}\n```\n\n## Factory Default DI\n\nAlthough the decoupled character of Phalcon offers us great freedom and flexibility, maybe we just simply want to use it as a full-stack framework. To achieve this, the framework provides a variant of [*Phalcon\\Di*](../api/phalcon_di) called [*Phalcon\\Di\\FactoryDefault*](../api/phalcon_di_factorydefault). This class automatically registers the appropriate services bundled with the framework to act as full-stack.\n\n``` php\nuse Phalcon\\Di\\FactoryDefault;\n\n$di = new FactoryDefault();\n```\n\n## Service Name Conventions\n\nAlthough you can register services with the names you want, Phalcon has a several naming conventions that allow it to get the the correct (built-in) service when you need it.\n\n| Service Name       | Description                           | Default                                                                                 | Shared |\n|--------------------|---------------------------------------|-----------------------------------------------------------------------------------------|--------|\n| dispatcher         | Controllers Dispatching Service       | [*Phalcon\\Mvc\\Dispatcher*](../api/phalcon_mvc_dispatcher)                               | Yes    |\n| router             | Routing Service                       | [*Phalcon\\Mvc\\Router*](../api/phalcon_mvc_router)                                       | Yes    |\n| url                | URL Generator Service                 | [*Phalcon\\Mvc\\Url*](../api/phalcon_mvc_url)                                             | Yes    |\n| request            | HTTP Request Environment Service      | [*Phalcon\\Http\\Request*](../api/phalcon_http_request)                                   | Yes    |\n| response           | HTTP Response Environment Service     | [*Phalcon\\Http\\Response*](../api/phalcon_http_response)                                 | Yes    |\n| cookies            | HTTP Cookies Management Service       | [*Phalcon\\Http\\Response\\Cookies*](../api/phalcon_http_response_cookies)                 | Yes    |\n| filter             | Input Filtering Service               | [*Phalcon\\Filter*](../api/phalcon_filter)                                               | Yes    |\n| flash              | Flash Messaging Service               | [*Phalcon\\Flash\\Direct*](../api/phalcon_flash_direct)                                   | Yes    |\n| flashSession       | Flash Session Messaging Service       | [*Phalcon\\Flash\\Session*](../api/phalcon_flash_session)                                 | Yes    |\n| session            | Session Service                       | [*Phalcon\\Session\\Adapter\\Files*](../api/phalcon_session_adapter_files)                 | Yes    |\n| eventsManager      | Events Management Service             | [*Phalcon\\Events\\Manager*](../api/phalcon_events_manager)                               | Yes    |\n| db                 | Low-Level Database Connection Service | [*Phalcon\\Db*](../api/phalcon_db)                                                       | Yes    |\n| security           | Security helpers                      | [*Phalcon\\Security*](../api/phalcon_security)                                           | Yes    |\n| crypt              | Encrypt/Decrypt data                  | [*Phalcon\\Crypt*](../api/phalcon_crypt)                                                 | Yes    |\n| tag                | HTML generation helpers               | [*Phalcon\\Tag*](../api/phalcon_tag)                                                     | Yes    |\n| escaper            | Contextual Escaping                   | [*Phalcon\\Escaper*](../api/phalcon_escaper)                                             | Yes    |\n| annotations        | Annotations Parser                    | [*Phalcon\\Annotations\\Adapter\\Memory*](../api/phalcon_annotations_adapter_memory)       | Yes    |\n| modelsManager      | Models Management Service             | [*Phalcon\\Mvc\\Model\\Manager*](../api/phalcon_mvc_model_manager)                         | Yes    |\n| modelsMetadata     | Models Meta-Data Service              | [*Phalcon\\Mvc\\Model\\MetaData\\Memory*](../api/phalcon_mvc_model_metadata_memory)         | Yes    |\n| transactionManager | Models Transaction Manager Service    | [*Phalcon\\Mvc\\Model\\Transaction\\Manager*](../api/phalcon_mvc_model_transaction_manager) | Yes    |\n| modelsCache        | Cache backend for models cache        | None                                                                                    | No     |\n| viewsCache         | Cache backend for views fragments     | None                                                                                    | No     |\n\n## Implementing your own DI\n\nThe [*Phalcon\\DiInterface*](../api/phalcon_diinterface) interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/di.html](https://docs.phalconphp.com/en/latest/reference/di.html)"
- name: Di
  id: api/phalcon_di
  summary: Phalcon\Di is a component that implements Dependency Injection/Service Location of services and it’s itself a container for them
  description: "# Class **Phalcon\\Di**\n\n*implements* [*Phalcon\\DiInterface*](phalcon_diinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di.zep)\n\nPhalcon\\Di is a component that implements Dependency Injection/Service Location of services and it’s itself a container for them.\n\nSince Phalcon is highly decoupled, Phalcon\\Di is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.\n\nBasically, this component implements the Inversion of Control pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity, since there is only one way to get the required dependencies within a component.\n\nAdditionally, this pattern increases testability in the code, thus making it less prone to errors.\n\n``` php\nuse Phalcon\\Di;\nuse Phalcon\\Http\\Request;\n\n$di = new Di();\n\n// Using a string definition\n$di->set(\"request\", Request::class, true);\n\n// Using an anonymous function\n$di->setShared(\n    \"request\",\n    function () {\n        return new Request();\n    }\n);\n\n$request = $di->getRequest();\n```\n\n## Methods\n\n### public **\\_\\_construct** ()\n\nPhalcon\\Di constructor\n\n### public **setInternalEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the internal event manager\n\n### public **getInternalEventsManager** ()\n\nReturns the internal event manager\n\n### public **set** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\])\n\nRegisters a service in the services container\n\n### public **setShared** (*mixed* $name, *mixed* $definition)\n\nRegisters an “always shared” service in the services container\n\n### public **remove** (*mixed* $name)\n\nRemoves a service in the services container It also removes any shared instance created for the service\n\n### public **attempt** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\])\n\nAttempts to register a service in the services container Only is successful if a service hasn’t been registered previously with the same name\n\n### public **setRaw** (*mixed* $name, [*Phalcon\\Di\\ServiceInterface*](phalcon_di_serviceinterface) $rawDefinition)\n\nSets a service using a raw Phalcon\\Di\\Service definition\n\n### public **getRaw** (*mixed* $name)\n\nReturns a service definition without resolving\n\n### public **getService** (*mixed* $name)\n\nReturns a Phalcon\\Di\\Service instance\n\n### public **get** (*mixed* $name, \\[*mixed* $parameters\\])\n\nResolves the service based on its configuration\n\n### public *mixed* **getShared** (*string* $name, \\[*array* $parameters\\])\n\nResolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance\n\n### public **has** (*mixed* $name)\n\nCheck whether the DI contains a service by a name\n\n### public **wasFreshInstance** ()\n\nCheck whether the last service obtained via getShared produced a fresh instance or an existing one\n\n### public **getServices** ()\n\nReturn the services registered in the DI\n\n### public **offsetExists** (*mixed* $name)\n\nCheck if a service is registered using the array syntax\n\n### public **offsetSet** (*mixed* $name, *mixed* $definition)\n\nAllows to register a shared service using the array syntax\n\n``` php\n$di[\"request\"] = new \\Phalcon\\Http\\Request();\n```\n\n### public **offsetGet** (*mixed* $name)\n\nAllows to obtain a shared service using the array syntax\n\n``` php\nvar_dump($di[\"request\"]);\n```\n\n### public **offsetUnset** (*mixed* $name)\n\nRemoves a service from the services container using the array syntax\n\n### public **\\_\\_call** (*mixed* $method, \\[*mixed* $arguments\\])\n\nMagic method to get or set services using setters/getters\n\n### public static **setDefault** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSet a default dependency injection container to be obtained into static methods\n\n### public static **getDefault** ()\n\nReturn the latest DI created\n\n### public static **reset** ()\n\nResets the internal default DI\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di.html)"
- name: Di::attempt
  id: api/phalcon_di#attempt
  summary: null
  belongs_to: Di
  description: |-
    ### public **attempt** (*mixed* $name, *mixed* $definition, \[*mixed* $shared\])

    Attempts to register a service in the services container Only is successful if a service hasn’t been registered previously with the same name
- name: Di::get
  id: api/phalcon_di#get
  summary: null
  belongs_to: Di
  description: |-
    ### public **get** (*mixed* $name, \[*mixed* $parameters\])

    Resolves the service based on its configuration
- name: Di::getDefault
  id: api/phalcon_di#getdefault
  summary: null
  belongs_to: Di
  description: |-
    ### public static **getDefault** ()

    Return the latest DI created
- name: Di::getInternalEventsManager
  id: api/phalcon_di#getinternaleventsmanager
  summary: null
  belongs_to: Di
  description: |-
    ### public **getInternalEventsManager** ()

    Returns the internal event manager
- name: Di::getRaw
  id: api/phalcon_di#getraw
  summary: null
  belongs_to: Di
  description: |-
    ### public **getRaw** (*mixed* $name)

    Returns a service definition without resolving
- name: Di::getService
  id: api/phalcon_di#getservice
  summary: null
  belongs_to: Di
  description: |-
    ### public **getService** (*mixed* $name)

    Returns a Phalcon\Di\Service instance
- name: Di::getServices
  id: api/phalcon_di#getservices
  summary: null
  belongs_to: Di
  description: |-
    ### public **getServices** ()

    Return the services registered in the DI
- name: Di::getShared
  id: api/phalcon_di#getshared
  summary: null
  belongs_to: Di
  description: |-
    ### public *mixed* **getShared** (*string* $name, \[*array* $parameters\])

    Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance
- name: Di::has
  id: api/phalcon_di#has
  summary: null
  belongs_to: Di
  description: |-
    ### public **has** (*mixed* $name)

    Check whether the DI contains a service by a name
- name: Di::offsetExists
  id: api/phalcon_di#offsetexists
  summary: null
  belongs_to: Di
  description: |-
    ### public **offsetExists** (*mixed* $name)

    Check if a service is registered using the array syntax
- name: Di::offsetGet
  id: api/phalcon_di#offsetget
  summary: null
  belongs_to: Di
  description: |-
    ### public **offsetGet** (*mixed* $name)

    Allows to obtain a shared service using the array syntax

    ``` php
    var_dump($di["request"]);
    ```
- name: Di::offsetSet
  id: api/phalcon_di#offsetset
  summary: null
  belongs_to: Di
  description: |-
    ### public **offsetSet** (*mixed* $name, *mixed* $definition)

    Allows to register a shared service using the array syntax

    ``` php
    $di["request"] = new \Phalcon\Http\Request();
    ```
- name: Di::offsetUnset
  id: api/phalcon_di#offsetunset
  summary: null
  belongs_to: Di
  description: |-
    ### public **offsetUnset** (*mixed* $name)

    Removes a service from the services container using the array syntax
- name: Di::remove
  id: api/phalcon_di#remove
  summary: null
  belongs_to: Di
  description: |-
    ### public **remove** (*mixed* $name)

    Removes a service in the services container It also removes any shared instance created for the service
- name: Di::reset
  id: api/phalcon_di#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Di
  description: "### public static **reset** ()\n\nResets the internal default DI\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di.html)"
- name: Di::set
  id: api/phalcon_di#set
  summary: null
  belongs_to: Di
  description: |-
    ### public **set** (*mixed* $name, *mixed* $definition, \[*mixed* $shared\])

    Registers a service in the services container
- name: Di::setDefault
  id: api/phalcon_di#setdefault
  summary: null
  belongs_to: Di
  description: |-
    ### public static **setDefault** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Set a default dependency injection container to be obtained into static methods
- name: Di::setInternalEventsManager
  id: api/phalcon_di#setinternaleventsmanager
  summary: null
  belongs_to: Di
  description: |-
    ### public **setInternalEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the internal event manager
- name: Di::setRaw
  id: api/phalcon_di#setraw
  summary: null
  belongs_to: Di
  description: |-
    ### public **setRaw** (*mixed* $name, [*Phalcon\Di\ServiceInterface*](phalcon_di_serviceinterface) $rawDefinition)

    Sets a service using a raw Phalcon\Di\Service definition
- name: Di::setShared
  id: api/phalcon_di#setshared
  summary: null
  belongs_to: Di
  description: |-
    ### public **setShared** (*mixed* $name, *mixed* $definition)

    Registers an “always shared” service in the services container
- name: Di::wasFreshInstance
  id: api/phalcon_di#wasfreshinstance
  summary: null
  belongs_to: Di
  description: |-
    ### public **wasFreshInstance** ()

    Check whether the last service obtained via getShared produced a fresh instance or an existing one
- name: Di::__call
  id: api/phalcon_di#__call
  summary: null
  belongs_to: Di
  description: |-
    ### public **\_\_call** (*mixed* $method, \[*mixed* $arguments\])

    Magic method to get or set services using setters/getters
- name: DiInterface
  id: api/phalcon_diinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\DiInterface**\n\n*implements* [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/diinterface.zep)\n\n## Methods\n\n### abstract public **set** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\])\n\n...\n\n### abstract public **setShared** (*mixed* $name, *mixed* $definition)\n\n...\n\n### abstract public **remove** (*mixed* $name)\n\n...\n\n### abstract public **attempt** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\])\n\n...\n\n### abstract public **get** (*mixed* $name, \\[*mixed* $parameters\\])\n\n...\n\n### abstract public **getShared** (*mixed* $name, \\[*mixed* $parameters\\])\n\n...\n\n### abstract public **setRaw** (*mixed* $name, [*Phalcon\\Di\\ServiceInterface*](phalcon_di_serviceinterface) $rawDefinition)\n\n...\n\n### abstract public **getRaw** (*mixed* $name)\n\n...\n\n### abstract public **getService** (*mixed* $name)\n\n...\n\n### abstract public **has** (*mixed* $name)\n\n...\n\n### abstract public **wasFreshInstance** ()\n\n...\n\n### abstract public **getServices** ()\n\n...\n\n### abstract public static **setDefault** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\n...\n\n### abstract public static **getDefault** ()\n\n...\n\n### abstract public static **reset** ()\n\n...\n\n### abstract public **offsetExists** (*mixed* $offset) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n### abstract public **offsetGet** (*mixed* $offset) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n### abstract public **offsetSet** (*mixed* $offset, *mixed* $value) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n### abstract public **offsetUnset** (*mixed* $offset) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_DiInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_DiInterface.html)"
- name: DiInterface::attempt
  id: api/phalcon_diinterface#attempt
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **attempt** (*mixed* $name, *mixed* $definition, \[*mixed* $shared\])

    ...
- name: DiInterface::get
  id: api/phalcon_diinterface#get
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **get** (*mixed* $name, \[*mixed* $parameters\])

    ...
- name: DiInterface::getDefault
  id: api/phalcon_diinterface#getdefault
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public static **getDefault** ()

    ...
- name: DiInterface::getRaw
  id: api/phalcon_diinterface#getraw
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **getRaw** (*mixed* $name)

    ...
- name: DiInterface::getService
  id: api/phalcon_diinterface#getservice
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **getService** (*mixed* $name)

    ...
- name: DiInterface::getServices
  id: api/phalcon_diinterface#getservices
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **getServices** ()

    ...
- name: DiInterface::getShared
  id: api/phalcon_diinterface#getshared
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **getShared** (*mixed* $name, \[*mixed* $parameters\])

    ...
- name: DiInterface::has
  id: api/phalcon_diinterface#has
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **has** (*mixed* $name)

    ...
- name: DiInterface::remove
  id: api/phalcon_diinterface#remove
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **remove** (*mixed* $name)

    ...
- name: DiInterface::reset
  id: api/phalcon_diinterface#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: DiInterface
  description: "### abstract public static **reset** ()\n\n...\n\n### abstract public **offsetExists** (*mixed* $offset) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n### abstract public **offsetGet** (*mixed* $offset) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n### abstract public **offsetSet** (*mixed* $offset, *mixed* $value) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n### abstract public **offsetUnset** (*mixed* $offset) inherited from [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_DiInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_DiInterface.html)"
- name: DiInterface::set
  id: api/phalcon_diinterface#set
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **set** (*mixed* $name, *mixed* $definition, \[*mixed* $shared\])

    ...
- name: DiInterface::setDefault
  id: api/phalcon_diinterface#setdefault
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public static **setDefault** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    ...
- name: DiInterface::setRaw
  id: api/phalcon_diinterface#setraw
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **setRaw** (*mixed* $name, [*Phalcon\Di\ServiceInterface*](phalcon_di_serviceinterface) $rawDefinition)

    ...
- name: DiInterface::setShared
  id: api/phalcon_diinterface#setshared
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **setShared** (*mixed* $name, *mixed* $definition)

    ...
- name: DiInterface::wasFreshInstance
  id: api/phalcon_diinterface#wasfreshinstance
  summary: null
  belongs_to: DiInterface
  description: |-
    ### abstract public **wasFreshInstance** ()

    ...
- name: Dispatcher
  id: api/phalcon_dispatcher
  summary: This is the base class for Phalcon\Mvc\Dispatcher and Phalcon\Cli\Dispatcher
  description: "# Abstract class **Phalcon\\Dispatcher**\n\n*implements* [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/dispatcher.zep)\n\nThis is the base class for Phalcon\\Mvc\\Dispatcher and Phalcon\\Cli\\Dispatcher. This class can’t be instantiated directly, you can use it to create your own dispatchers.\n\n## Constants\n\n### *integer* **EXCEPTION_NO_DI**\n\n### *integer* **EXCEPTION_CYCLIC_ROUTING**\n\n### *integer* **EXCEPTION_HANDLER_NOT_FOUND**\n\n### *integer* **EXCEPTION_INVALID_HANDLER**\n\n### *integer* **EXCEPTION_INVALID_PARAMS**\n\n### *integer* **EXCEPTION_ACTION_NOT_FOUND**\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the events manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **setActionSuffix** (*mixed* $actionSuffix)\n\nSets the default action suffix\n\n### public **getActionSuffix** ()\n\nGets the default action suffix\n\n### public **setModuleName** (*mixed* $moduleName)\n\nSets the module where the controller is (only informative)\n\n### public **getModuleName** ()\n\nGets the module where the controller class is\n\n### public **setNamespaceName** (*mixed* $namespaceName)\n\nSets the namespace where the controller class is\n\n### public **getNamespaceName** ()\n\nGets a namespace to be prepended to the current handler name\n\n### public **setDefaultNamespace** (*mixed* $namespaceName)\n\nSets the default namespace\n\n### public **getDefaultNamespace** ()\n\nReturns the default namespace\n\n### public **setDefaultAction** (*mixed* $actionName)\n\nSets the default action name\n\n### public **setActionName** (*mixed* $actionName)\n\nSets the action name to be dispatched\n\n### public **getActionName** ()\n\nGets the latest dispatched action name\n\n### public **setParams** (*array* $params)\n\nSets action params to be dispatched\n\n### public **getParams** ()\n\nGets action params\n\n### public **setParam** (*mixed* $param, *mixed* $value)\n\nSet a param by its name or numeric index\n\n### public *mixed* **getParam** (*mixed* $param, \\[*string* \\| *array* $filters\\], \\[*mixed* $defaultValue\\])\n\nGets a param by its name or numeric index\n\n### public *boolean* **hasParam** (*mixed* $param)\n\nCheck if a param exists\n\n### public **getActiveMethod** ()\n\nReturns the current method to be/executed in the dispatcher\n\n### public **isFinished** ()\n\nChecks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch\n\n### public **setReturnedValue** (*mixed* $value)\n\nSets the latest returned value by an action manually\n\n### public *mixed* **getReturnedValue** ()\n\nReturns value returned by the latest dispatched action\n\n### public **setModelBinding** (*mixed* $value, \\[*mixed* $cache\\])\n\nEnable/Disable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n```\n\n### public **setModelBinder** ([*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \\[*mixed* $cache\\])\n\nEnable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n```\n\n### public **getModelBinder** ()\n\nGets model binder\n\n### public *object* **dispatch** ()\n\nDispatches a handle action taking into account the routing parameters\n\n### protected *object* **\\_dispatch** ()\n\nDispatches a handle action taking into account the routing parameters\n\n### public **forward** (*array* $forward)\n\nForwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed\n\n``` php\n$this->dispatcher->forward(\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n### public **wasForwarded** ()\n\nCheck if the current executed action was forwarded by another one\n\n### public **getHandlerClass** ()\n\nPossible class name that will be located to dispatch the request\n\n### public **callActionMethod** (*mixed* $handler, *mixed* $actionMethod, \\[*array* $params\\])\n\n...\n\n### public **getBoundModels** ()\n\nReturns bound models from binder instance\n\n``` php\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this->dispatcher->getBoundModels(); // return array with $user\n    }\n}\n```\n\n### protected **\\_resolveEmptyProperties** ()\n\nSet empty properties to their defaults (where defaults are available)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Dispatcher.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Dispatcher.html)"
- name: Dispatcher::callActionMethod
  id: api/phalcon_dispatcher#callactionmethod
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **callActionMethod** (*mixed* $handler, *mixed* $actionMethod, \[*array* $params\])

    ...
- name: Dispatcher::dispatch
  id: api/phalcon_dispatcher#dispatch
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public *object* **dispatch** ()

    Dispatches a handle action taking into account the routing parameters

    ### protected *object* **\_dispatch** ()

    Dispatches a handle action taking into account the routing parameters
- name: Dispatcher::EXCEPTION_ACTION_NOT_FOUND
  id: api/phalcon_dispatcher#exception_action_not_found
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### *integer* **EXCEPTION_ACTION_NOT_FOUND**

    ## Methods
- name: Dispatcher::EXCEPTION_CYCLIC_ROUTING
  id: api/phalcon_dispatcher#exception_cyclic_routing
  summary: null
  belongs_to: Dispatcher
  description: '### *integer* **EXCEPTION_CYCLIC_ROUTING**'
- name: Dispatcher::EXCEPTION_HANDLER_NOT_FOUND
  id: api/phalcon_dispatcher#exception_handler_not_found
  summary: null
  belongs_to: Dispatcher
  description: '### *integer* **EXCEPTION_HANDLER_NOT_FOUND**'
- name: Dispatcher::EXCEPTION_INVALID_HANDLER
  id: api/phalcon_dispatcher#exception_invalid_handler
  summary: null
  belongs_to: Dispatcher
  description: '### *integer* **EXCEPTION_INVALID_HANDLER**'
- name: Dispatcher::EXCEPTION_INVALID_PARAMS
  id: api/phalcon_dispatcher#exception_invalid_params
  summary: null
  belongs_to: Dispatcher
  description: '### *integer* **EXCEPTION_INVALID_PARAMS**'
- name: Dispatcher::EXCEPTION_NO_DI
  id: api/phalcon_dispatcher#exception_no_di
  summary: null
  belongs_to: Dispatcher
  description: '### *integer* **EXCEPTION_NO_DI**'
- name: Dispatcher::forward
  id: api/phalcon_dispatcher#forward
  summary: Forwards the execution flow to another controller/action Dispatchers are unique per module
  belongs_to: Dispatcher
  description: |-
    ### public **forward** (*array* $forward)

    Forwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed

    ``` php
    $this->dispatcher->forward(
        [
            "controller" => "posts",
            "action"     => "index",
        ]
    );
    ```
- name: Dispatcher::getActionName
  id: api/phalcon_dispatcher#getactionname
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getActionName** ()

    Gets the latest dispatched action name
- name: Dispatcher::getActionSuffix
  id: api/phalcon_dispatcher#getactionsuffix
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getActionSuffix** ()

    Gets the default action suffix
- name: Dispatcher::getActiveMethod
  id: api/phalcon_dispatcher#getactivemethod
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getActiveMethod** ()

    Returns the current method to be/executed in the dispatcher
- name: Dispatcher::getBoundModels
  id: api/phalcon_dispatcher#getboundmodels
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Dispatcher
  description: "### public **getBoundModels** ()\n\nReturns bound models from binder instance\n\n``` php\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this->dispatcher->getBoundModels(); // return array with $user\n    }\n}\n```\n\n### protected **\\_resolveEmptyProperties** ()\n\nSet empty properties to their defaults (where defaults are available)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Dispatcher.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Dispatcher.html)"
- name: Dispatcher::getDefaultNamespace
  id: api/phalcon_dispatcher#getdefaultnamespace
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getDefaultNamespace** ()

    Returns the default namespace
- name: Dispatcher::getDI
  id: api/phalcon_dispatcher#getdi
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Dispatcher::getEventsManager
  id: api/phalcon_dispatcher#geteventsmanager
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Dispatcher::getHandlerClass
  id: api/phalcon_dispatcher#gethandlerclass
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getHandlerClass** ()

    Possible class name that will be located to dispatch the request
- name: Dispatcher::getModelBinder
  id: api/phalcon_dispatcher#getmodelbinder
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getModelBinder** ()

    Gets model binder
- name: Dispatcher::getModuleName
  id: api/phalcon_dispatcher#getmodulename
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getModuleName** ()

    Gets the module where the controller class is
- name: Dispatcher::getNamespaceName
  id: api/phalcon_dispatcher#getnamespacename
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getNamespaceName** ()

    Gets a namespace to be prepended to the current handler name
- name: Dispatcher::getParam
  id: api/phalcon_dispatcher#getparam
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public *mixed* **getParam** (*mixed* $param, \[*string* \| *array* $filters\], \[*mixed* $defaultValue\])

    Gets a param by its name or numeric index
- name: Dispatcher::getParams
  id: api/phalcon_dispatcher#getparams
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **getParams** ()

    Gets action params
- name: Dispatcher::getReturnedValue
  id: api/phalcon_dispatcher#getreturnedvalue
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public *mixed* **getReturnedValue** ()

    Returns value returned by the latest dispatched action
- name: Dispatcher::hasParam
  id: api/phalcon_dispatcher#hasparam
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public *boolean* **hasParam** (*mixed* $param)

    Check if a param exists
- name: Dispatcher::isFinished
  id: api/phalcon_dispatcher#isfinished
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **isFinished** ()

    Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch
- name: Dispatcher::setActionName
  id: api/phalcon_dispatcher#setactionname
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setActionName** (*mixed* $actionName)

    Sets the action name to be dispatched
- name: Dispatcher::setActionSuffix
  id: api/phalcon_dispatcher#setactionsuffix
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setActionSuffix** (*mixed* $actionSuffix)

    Sets the default action suffix
- name: Dispatcher::setDefaultAction
  id: api/phalcon_dispatcher#setdefaultaction
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setDefaultAction** (*mixed* $actionName)

    Sets the default action name
- name: Dispatcher::setDefaultNamespace
  id: api/phalcon_dispatcher#setdefaultnamespace
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setDefaultNamespace** (*mixed* $namespaceName)

    Sets the default namespace
- name: Dispatcher::setDI
  id: api/phalcon_dispatcher#setdi
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Dispatcher::setEventsManager
  id: api/phalcon_dispatcher#seteventsmanager
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the events manager
- name: Dispatcher::setModelBinder
  id: api/phalcon_dispatcher#setmodelbinder
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setModelBinder** ([*Phalcon\Mvc\Model\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \[*mixed* $cache\])

    Enable model binding during dispatch

    ``` php
    $di->set('dispatcher', function() {
        $dispatcher = new Dispatcher();

        $dispatcher->setModelBinder(new Binder(), 'cache');
        return $dispatcher;
    });
    ```
- name: Dispatcher::setModelBinding
  id: api/phalcon_dispatcher#setmodelbinding
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setModelBinding** (*mixed* $value, \[*mixed* $cache\])

    Enable/Disable model binding during dispatch

    ``` php
    $di->set('dispatcher', function() {
        $dispatcher = new Dispatcher();

        $dispatcher->setModelBinding(true, 'cache');
        return $dispatcher;
    });
    ```
- name: Dispatcher::setModuleName
  id: api/phalcon_dispatcher#setmodulename
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setModuleName** (*mixed* $moduleName)

    Sets the module where the controller is (only informative)
- name: Dispatcher::setNamespaceName
  id: api/phalcon_dispatcher#setnamespacename
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setNamespaceName** (*mixed* $namespaceName)

    Sets the namespace where the controller class is
- name: Dispatcher::setParam
  id: api/phalcon_dispatcher#setparam
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setParam** (*mixed* $param, *mixed* $value)

    Set a param by its name or numeric index
- name: Dispatcher::setParams
  id: api/phalcon_dispatcher#setparams
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setParams** (*array* $params)

    Sets action params to be dispatched
- name: Dispatcher::setReturnedValue
  id: api/phalcon_dispatcher#setreturnedvalue
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **setReturnedValue** (*mixed* $value)

    Sets the latest returned value by an action manually
- name: Dispatcher::wasForwarded
  id: api/phalcon_dispatcher#wasforwarded
  summary: null
  belongs_to: Dispatcher
  description: |-
    ### public **wasForwarded** ()

    Check if the current executed action was forwarded by another one
- name: DispatcherInterface
  id: api/phalcon_dispatcherinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\DispatcherInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/dispatcherinterface.zep)\n\n## Methods\n\n### abstract public **setActionSuffix** (*mixed* $actionSuffix)\n\n...\n\n### abstract public **getActionSuffix** ()\n\n...\n\n### abstract public **setDefaultNamespace** (*mixed* $defaultNamespace)\n\n...\n\n### abstract public **setDefaultAction** (*mixed* $actionName)\n\n...\n\n### abstract public **setNamespaceName** (*mixed* $namespaceName)\n\n...\n\n### abstract public **setModuleName** (*mixed* $moduleName)\n\n...\n\n### abstract public **setActionName** (*mixed* $actionName)\n\n...\n\n### abstract public **getActionName** ()\n\n...\n\n### abstract public **setParams** (*mixed* $params)\n\n...\n\n### abstract public **getParams** ()\n\n...\n\n### abstract public **setParam** (*mixed* $param, *mixed* $value)\n\n...\n\n### abstract public **getParam** (*mixed* $param, \\[*mixed* $filters\\])\n\n...\n\n### abstract public **hasParam** (*mixed* $param)\n\n...\n\n### abstract public **isFinished** ()\n\n...\n\n### abstract public **getReturnedValue** ()\n\n...\n\n### abstract public **dispatch** ()\n\n...\n\n### abstract public **forward** (*mixed* $forward)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_DispatcherInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_DispatcherInterface.html)"
- name: DispatcherInterface::dispatch
  id: api/phalcon_dispatcherinterface#dispatch
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **dispatch** ()

    ...
- name: DispatcherInterface::forward
  id: api/phalcon_dispatcherinterface#forward
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: DispatcherInterface
  description: "### abstract public **forward** (*mixed* $forward)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_DispatcherInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_DispatcherInterface.html)"
- name: DispatcherInterface::getActionName
  id: api/phalcon_dispatcherinterface#getactionname
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **getActionName** ()

    ...
- name: DispatcherInterface::getActionSuffix
  id: api/phalcon_dispatcherinterface#getactionsuffix
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **getActionSuffix** ()

    ...
- name: DispatcherInterface::getParam
  id: api/phalcon_dispatcherinterface#getparam
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **getParam** (*mixed* $param, \[*mixed* $filters\])

    ...
- name: DispatcherInterface::getParams
  id: api/phalcon_dispatcherinterface#getparams
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **getParams** ()

    ...
- name: DispatcherInterface::getReturnedValue
  id: api/phalcon_dispatcherinterface#getreturnedvalue
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **getReturnedValue** ()

    ...
- name: DispatcherInterface::hasParam
  id: api/phalcon_dispatcherinterface#hasparam
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **hasParam** (*mixed* $param)

    ...
- name: DispatcherInterface::isFinished
  id: api/phalcon_dispatcherinterface#isfinished
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **isFinished** ()

    ...
- name: DispatcherInterface::setActionName
  id: api/phalcon_dispatcherinterface#setactionname
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setActionName** (*mixed* $actionName)

    ...
- name: DispatcherInterface::setActionSuffix
  id: api/phalcon_dispatcherinterface#setactionsuffix
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setActionSuffix** (*mixed* $actionSuffix)

    ...
- name: DispatcherInterface::setDefaultAction
  id: api/phalcon_dispatcherinterface#setdefaultaction
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setDefaultAction** (*mixed* $actionName)

    ...
- name: DispatcherInterface::setDefaultNamespace
  id: api/phalcon_dispatcherinterface#setdefaultnamespace
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setDefaultNamespace** (*mixed* $defaultNamespace)

    ...
- name: DispatcherInterface::setModuleName
  id: api/phalcon_dispatcherinterface#setmodulename
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setModuleName** (*mixed* $moduleName)

    ...
- name: DispatcherInterface::setNamespaceName
  id: api/phalcon_dispatcherinterface#setnamespacename
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setNamespaceName** (*mixed* $namespaceName)

    ...
- name: DispatcherInterface::setParam
  id: api/phalcon_dispatcherinterface#setparam
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setParam** (*mixed* $param, *mixed* $value)

    ...
- name: DispatcherInterface::setParams
  id: api/phalcon_dispatcherinterface#setparams
  summary: null
  belongs_to: DispatcherInterface
  description: |-
    ### abstract public **setParams** (*mixed* $params)

    ...
- name: Dispatching Controllers
  id: reference/dispatching
  summary: Phalcon\Mvc\Dispatcher is the component responsible for instantiating controllers and executing the required actions on them in an MVC application
  description: "# Dispatching Controllers\n\n[*Phalcon\\Mvc\\Dispatcher*](../api/phalcon_mvc_dispatcher) is the component responsible for instantiating controllers and executing the required actions on them in an MVC application. Understanding its operation and capabilities helps us get more out of the services provided by the framework.\n\n## The Dispatch Loop\n\nThis is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within [*Phalcon\\Mvc\\Dispatcher*](../api/phalcon_mvc_dispatcher):\n\n``` php\n// Dispatch loop\nwhile (!$finished) {\n    $finished = true;\n\n    $controllerClass = $controllerName . \"Controller\";\n\n    // Instantiating the controller class via autoloaders\n    $controller = new $controllerClass();\n\n    // Execute the action\n    call_user_func_array(\n        [\n            $controller,\n            $actionName . \"Action\"\n        ],\n        $params\n    );\n\n    // '$finished' should be reloaded to check if the flow was forwarded to another controller\n    $finished = true;\n}\n```\n\nThe code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.\n\n### Dispatch Loop Events\n\n[*Phalcon\\Mvc\\Dispatcher*](../api/phalcon_mvc_dispatcher) is able to send events to an [*EventsManager*](events) if it is present. Events are triggered using the type “dispatch”. Some events when returning boolean false could stop the active operation. The following events are supported:\n\nThe [*INVO*](tutorial-invo) tutorial shows how to take advantage of dispatching events implementing a security filter with [*Acl*](acl)\n\nThe following example demonstrates how to attach listeners to this component:\n\n``` php\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di->set(\n    \"dispatcher\",\n    function () {\n        // Create an event manager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener for type \"dispatch\"\n        $eventsManager->attach(\n            \"dispatch\",\n            function (Event $event, $dispatcher) {\n                // ...\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        // Bind the eventsManager to the view component\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    },\n    true\n);\n```\n\nAn instantiated controller automatically acts as a listener for dispatch events, so you can implement methods as callbacks:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass PostsController extends Controller\n{\n    public function beforeExecuteRoute(Dispatcher $dispatcher)\n    {\n        // Executed before every found action\n    }\n\n    public function afterExecuteRoute(Dispatcher $dispatcher)\n    {\n        // Executed after every found action\n    }\n}\n```\n\nNote\n\nMethods on event listeners accept an [*Phalcon\\Events\\Event*](../api/phalcon_events_event) object as their first parameter - methods in controllers do not.\n\n## Forwarding to other actions\n\nThe dispatch loop allows us to forward the execution flow to another controller/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction($year, $postTitle)\n    {\n        // ... Store some product and forward the user\n\n        // Forward flow to the index action\n        $this->dispatcher->forward(\n            [\n                \"controller\" => \"posts\",\n                \"action\"     => \"index\",\n            ]\n        );\n    }\n}\n```\n\nKeep in mind that making a “forward” is not the same as making a HTTP redirect. Although they apparently got the same result. The “forward” doesn’t reload the current page, all the redirection occurs in a single request, while the HTTP redirect needs two requests to complete the process.\n\nMore forwarding examples:\n\n``` php\n// Forward flow to another action in the current controller\n$this->dispatcher->forward(\n    [\n        \"action\" => \"search\"\n    ]\n);\n\n// Forward flow to another action in the current controller\n// passing parameters\n$this->dispatcher->forward(\n    [\n        \"action\" => \"search\",\n        \"params\" => [1, 2, 3]\n    ]\n);\n```\n\nA forward action accepts the following parameters:\n\n| Parameter  | Triggered                                              |\n|------------|--------------------------------------------------------|\n| controller | A valid controller name to forward to.                 |\n| action     | A valid action name to forward to.                     |\n| params     | An array of parameters for the action                  |\n| namespace  | A valid namespace name where the controller is part of |\n\n## Preparing Parameters\n\nThanks to the hooks points provided by [*Phalcon\\Mvc\\Dispatcher*](../api/phalcon_mvc_dispatcher) you can easily adapt your application to any URL schema:\n\nFor example, you want your URLs look like: [http://example.com/controller/key1/value1/key2/value](http://example.com/controller/key1/value1/key2/value)\n\nParameters by default are passed as they come in the URL to actions, you can transform them to the desired schema:\n\n``` php\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di->set(\n    \"dispatcher\",\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener\n        $eventsManager->attach(\n            \"dispatch:beforeDispatchLoop\",\n            function (Event $event, $dispatcher) {\n                $params = $dispatcher->getParams();\n\n                $keyParams = [];\n\n                // Use odd parameters as keys and even as values\n                foreach ($params as $i => $value) {\n                    if ($i & 1) {\n                        // Previous param\n                        $key = $params[$i - 1];\n\n                        $keyParams[$key] = $value;\n                    }\n                }\n\n                // Override parameters\n                $dispatcher->setParams($keyParams);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n```\n\nIf the desired schema is: [http://example.com/controller/key1:value1/key2:value](http://example.com/controller/key1:value1/key2:value), the following code is required:\n\n``` php\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di->set(\n    \"dispatcher\",\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener\n        $eventsManager->attach(\n            \"dispatch:beforeDispatchLoop\",\n            function (Event $event, $dispatcher) {\n                $params = $dispatcher->getParams();\n\n                $keyParams = [];\n\n                // Explode each parameter as key,value pairs\n                foreach ($params as $number => $value) {\n                    $parts = explode(\":\", $value);\n\n                    $keyParams[$parts[0]] = $parts[1];\n                }\n\n                // Override parameters\n                $dispatcher->setParams($keyParams);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n```\n\n## Getting Parameters\n\nWhen a route provides named parameters you can receive them in a controller, a view or any other component that extends [*Phalcon\\Di\\Injectable*](../api/phalcon_di_injectable).\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Get the post's title passed in the URL as parameter\n        // or prepared in an event\n        $title = $this->dispatcher->getParam(\"title\");\n\n        // Get the post's year passed in the URL as parameter\n        // or prepared in an event also filtering it\n        $year = $this->dispatcher->getParam(\"year\", \"int\");\n\n        // ...\n    }\n}\n```\n\n## Preparing actions\n\nYou can also define an arbitrary schema for actions before be dispatched.\n\n### Camelize action names\n\nIf the original URL is: [http://example.com/admin/products/show-latest-products](http://example.com/admin/products/show-latest-products), and for example you want to camelize ‘show-latest-products’ to ‘ShowLatestProducts’, the following code is required:\n\n``` php\nuse Phalcon\\Text;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di->set(\n    \"dispatcher\",\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Camelize actions\n        $eventsManager->attach(\n            \"dispatch:beforeDispatchLoop\",\n            function (Event $event, $dispatcher) {\n                $dispatcher->setActionName(\n                    Text::camelize($dispatcher->getActionName())\n                );\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n```\n\n### Remove legacy extensions\n\nIf the original URL always contains a ‘.php’ extension:\n\n[http://example.com/admin/products/show-latest-products.php](http://example.com/admin/products/show-latest-products.php) [http://example.com/admin/products/index.php](http://example.com/admin/products/index.php)\n\nYou can remove it before dispatch the controller/action combination:\n\n``` php\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di->set(\n    \"dispatcher\",\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Remove extension before dispatch\n        $eventsManager->attach(\n            \"dispatch:beforeDispatchLoop\",\n            function (Event $event, $dispatcher) {\n                $action = $dispatcher->getActionName();\n\n                // Remove extension\n                $action = preg_replace(\"/\\.php$/\", \"\", $action);\n\n                // Override action\n                $dispatcher->setActionName($action);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n```\n\n### Inject model instances\n\nIn this example, the developer wants to inspect the parameters that an action will receive in order to dynamically inject model instances.\n\nThe controller looks like:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    /**\n     * Shows posts\n     *\n     * @param \\Posts $post\n     */\n    public function showAction(Posts $post)\n    {\n        $this->view->post = $post;\n    }\n}\n```\n\nMethod ‘showAction’ receives an instance of the model Posts, the developer could inspect this before dispatch the action preparing the parameter accordingly:\n\n``` php\nuse Exception;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse ReflectionMethod;\n\n$di->set(\n    \"dispatcher\",\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        $eventsManager->attach(\n            \"dispatch:beforeDispatchLoop\",\n            function (Event $event, $dispatcher) {\n                // Possible controller class name\n                $controllerName = $dispatcher->getControllerClass();\n\n                // Possible method name\n                $actionName = $dispatcher->getActiveMethod();\n\n                try {\n                    // Get the reflection for the method to be executed\n                    $reflection = new ReflectionMethod($controllerName, $actionName);\n\n                    $parameters = $reflection->getParameters();\n\n                    // Check parameters\n                    foreach ($parameters as $parameter) {\n                        // Get the expected model name\n                        $className = $parameter->getClass()->name;\n\n                        // Check if the parameter expects a model instance\n                        if (is_subclass_of($className, Model::class)) {\n                            $model = $className::findFirstById($dispatcher->getParams()[0]);\n\n                            // Override the parameters by the model instance\n                            $dispatcher->setParams([$model]);\n                        }\n                    }\n                } catch (Exception $e) {\n                    // An exception has occurred, maybe the class or action does not exist?\n                }\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n```\n\nThe above example has been simplified for academic purposes. A developer can improve it to inject any kind of dependency or model in actions before be executed.\n\nFrom 3.1.x onwards the dispatcher also comes with an option to handle this internally for all models passed into a controller action by using [*Phalcon\\Mvc\\Model\\Binder*](../api/phalcon_mvc_model_binder).\n\n``` php\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Model\\Binder;\n\n$dispatcher = new Dispatcher();\n\n$dispatcher->setModelBinder(new Binder());\n\nreturn $dispatcher;\n```\n\n> Since Binder object is using internally Reflection Api which can be heavy there is ability to set cache. This can be done by using second argument in `setModelBinder()` which can also accept service name or just by passing cache instance to `Binder` constructor.\n\nIt also introduces a new interface [*Phalcon\\Mvc\\Model\\Binder\\BindableInterface*](../api/phalcon_mvc_model_binder_bindableinterface) which allows you to define the controllers associated models to allow models binding in base controllers.\n\nFor example, you have a base CrudController which your PostsController extends from. Your CrudController looks something like this:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model;\n\nclass CrudController extends Controller\n{\n    /**\n     * Show action\n     *\n     * @param Model $model\n     */\n    public function showAction(Model $model)\n    {\n        $this->view->model = $model;\n    }\n}\n```\n\nIn your PostsController you need to define which model the controller is associated with. This is done by implementing the [*Phalcon\\Mvc\\Model\\Binder\\BindableInterface*](../api/phalcon_mvc_model_binder_bindableinterface) which will add the `getModelName()` method from which you can return the model name. It can return string with just one model name or associative array where key is parameter name.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Binder\\BindableInterface;\nuse Models\\Posts;\n\nclass PostsController extends CrudController implements BindableInterface\n{\n    public static function getModelName()\n    {\n        return Posts::class;\n    }\n}\n```\n\nBy declaring the model associated with the PostsController the binder can check the controller for the `getModelName()` method before passing the defined model into the parent show action.\n\nIf your project structure does not use any parent controller you can of course still bind the model directly into the controller action:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\nuse Models\\Posts;\n\nclass PostsController extends Controller\n{\n    /**\n     * Shows posts\n     *\n     * @param Posts $post\n     */\n    public function showAction(Posts $post)\n    {\n        $this->view->post = $post;\n    }\n}\n```\n\n> Currently the binder will only use the models primary key to perform a `findFirst()` on. An example route for the above would be /posts/show/{1}\n\n## Handling Not-Found Exceptions\n\nUsing the [*EventsManager*](events) it’s possible to insert a hook point before the dispatcher throws an exception when the controller/action combination wasn’t found:\n\n``` php\nuse Exception;\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\n$di->setShared(\n    \"dispatcher\",\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener\n        $eventsManager->attach(\n            \"dispatch:beforeException\",\n            function (Event $event, $dispatcher, Exception $exception) {\n                // Handle 404 exceptions\n                if ($exception instanceof DispatchException) {\n                    $dispatcher->forward(\n                        [\n                            \"controller\" => \"index\",\n                            \"action\"     => \"show404\",\n                        ]\n                    );\n\n                    return false;\n                }\n\n                // Alternative way, controller or action doesn't exist\n                switch ($exception->getCode()) {\n                    case Dispatcher::EXCEPTION_HANDLER_NOT_FOUND:\n                    case Dispatcher::EXCEPTION_ACTION_NOT_FOUND:\n                        $dispatcher->forward(\n                            [\n                                \"controller\" => \"index\",\n                                \"action\"     => \"show404\",\n                            ]\n                        );\n\n                        return false;\n                }\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        // Bind the EventsManager to the dispatcher\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n```\n\nOf course, this method can be moved onto independent plugin classes, allowing more than one class take actions when an exception is produced in the dispatch loop:\n\n``` php\nuse Exception;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\nclass ExceptionsPlugin\n{\n    public function beforeException(Event $event, Dispatcher $dispatcher, Exception $exception)\n    {\n        // Default error action\n        $action = \"show503\";\n\n        // Handle 404 exceptions\n        if ($exception instanceof DispatchException) {\n            $action = \"show404\";\n        }\n\n        $dispatcher->forward(\n            [\n                \"controller\" => \"index\",\n                \"action\"     => $action,\n            ]\n        );\n\n        return false;\n    }\n}\n```\n\n> Only exceptions produced by the dispatcher and exceptions produced in the executed action are notified in the ‘beforeException’ events. Exceptions produced in listeners or controller events are redirected to the latest try/catch.\n\n## Implementing your own Dispatcher\n\nThe [*Phalcon\\Mvc\\DispatcherInterface*](../api/phalcon_mvc_dispatcherinterface) interface must be implemented to create your own dispatcher replacing the one provided by Phalcon.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/dispatching.html](https://docs.phalconphp.com/en/latest/reference/dispatching.html)"
- name: Di\Exception
  id: api/phalcon_di_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Di\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Exception.html)"
- name: Di\FactoryDefault
  id: api/phalcon_di_factorydefault
  summary: This is a variant of the standard Phalcon\Di
  description: "# Class **Phalcon\\Di\\FactoryDefault**\n\n*extends* class [*Phalcon\\Di*](phalcon_di)\n\n*implements* [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [*Phalcon\\DiInterface*](phalcon_diinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/factorydefault.zep)\n\nThis is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually providing a full stack framework\n\n## Methods\n\n### public **\\_\\_construct** ()\n\nPhalcon\\Di\\FactoryDefault constructor\n\n### public **setInternalEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di*](phalcon_di)\n\nSets the internal event manager\n\n### public **getInternalEventsManager** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturns the internal event manager\n\n### public **set** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRegisters a service in the services container\n\n### public **setShared** (*mixed* $name, *mixed* $definition) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRegisters an “always shared” service in the services container\n\n### public **remove** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRemoves a service in the services container It also removes any shared instance created for the service\n\n### public **attempt** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nAttempts to register a service in the services container Only is successful if a service hasn’t been registered previously with the same name\n\n### public **setRaw** (*mixed* $name, [*Phalcon\\Di\\ServiceInterface*](phalcon_di_serviceinterface) $rawDefinition) inherited from [*Phalcon\\Di*](phalcon_di)\n\nSets a service using a raw Phalcon\\Di\\Service definition\n\n### public **getRaw** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturns a service definition without resolving\n\n### public **getService** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturns a Phalcon\\Di\\Service instance\n\n### public **get** (*mixed* $name, \\[*mixed* $parameters\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nResolves the service based on its configuration\n\n### public *mixed* **getShared** (*string* $name, \\[*array* $parameters\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nResolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance\n\n### public **has** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nCheck whether the DI contains a service by a name\n\n### public **wasFreshInstance** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nCheck whether the last service obtained via getShared produced a fresh instance or an existing one\n\n### public **getServices** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturn the services registered in the DI\n\n### public **offsetExists** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nCheck if a service is registered using the array syntax\n\n### public **offsetSet** (*mixed* $name, *mixed* $definition) inherited from [*Phalcon\\Di*](phalcon_di)\n\nAllows to register a shared service using the array syntax\n\n``` php\n$di[\"request\"] = new \\Phalcon\\Http\\Request();\n```\n\n### public **offsetGet** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nAllows to obtain a shared service using the array syntax\n\n``` php\nvar_dump($di[\"request\"]);\n```\n\n### public **offsetUnset** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRemoves a service from the services container using the array syntax\n\n### public **\\_\\_call** (*mixed* $method, \\[*mixed* $arguments\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nMagic method to get or set services using setters/getters\n\n### public static **setDefault** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di*](phalcon_di)\n\nSet a default dependency injection container to be obtained into static methods\n\n### public static **getDefault** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturn the latest DI created\n\n### public static **reset** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nResets the internal default DI\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault.html)"
- name: Di\FactoryDefault\Cli
  id: api/phalcon_di_factorydefault_cli
  summary: This is a variant of the standard Phalcon\Di
  description: "# Class **Phalcon\\Di\\FactoryDefault\\Cli**\n\n*extends* class [*Phalcon\\Di\\FactoryDefault*](phalcon_di_factorydefault)\n\n*implements* [*Phalcon\\DiInterface*](phalcon_diinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/factorydefault/cli.zep)\n\nThis is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually. This class is specially suitable for CLI applications\n\n## Methods\n\n### public **\\_\\_construct** ()\n\nPhalcon\\Di\\FactoryDefault\\Cli constructor\n\n### public **setInternalEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di*](phalcon_di)\n\nSets the internal event manager\n\n### public **getInternalEventsManager** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturns the internal event manager\n\n### public **set** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRegisters a service in the services container\n\n### public **setShared** (*mixed* $name, *mixed* $definition) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRegisters an “always shared” service in the services container\n\n### public **remove** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRemoves a service in the services container It also removes any shared instance created for the service\n\n### public **attempt** (*mixed* $name, *mixed* $definition, \\[*mixed* $shared\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nAttempts to register a service in the services container Only is successful if a service hasn’t been registered previously with the same name\n\n### public **setRaw** (*mixed* $name, [*Phalcon\\Di\\ServiceInterface*](phalcon_di_serviceinterface) $rawDefinition) inherited from [*Phalcon\\Di*](phalcon_di)\n\nSets a service using a raw Phalcon\\Di\\Service definition\n\n### public **getRaw** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturns a service definition without resolving\n\n### public **getService** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturns a Phalcon\\Di\\Service instance\n\n### public **get** (*mixed* $name, \\[*mixed* $parameters\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nResolves the service based on its configuration\n\n### public *mixed* **getShared** (*string* $name, \\[*array* $parameters\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nResolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance\n\n### public **has** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nCheck whether the DI contains a service by a name\n\n### public **wasFreshInstance** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nCheck whether the last service obtained via getShared produced a fresh instance or an existing one\n\n### public **getServices** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturn the services registered in the DI\n\n### public **offsetExists** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nCheck if a service is registered using the array syntax\n\n### public **offsetSet** (*mixed* $name, *mixed* $definition) inherited from [*Phalcon\\Di*](phalcon_di)\n\nAllows to register a shared service using the array syntax\n\n``` php\n$di[\"request\"] = new \\Phalcon\\Http\\Request();\n```\n\n### public **offsetGet** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nAllows to obtain a shared service using the array syntax\n\n``` php\nvar_dump($di[\"request\"]);\n```\n\n### public **offsetUnset** (*mixed* $name) inherited from [*Phalcon\\Di*](phalcon_di)\n\nRemoves a service from the services container using the array syntax\n\n### public **\\_\\_call** (*mixed* $method, \\[*mixed* $arguments\\]) inherited from [*Phalcon\\Di*](phalcon_di)\n\nMagic method to get or set services using setters/getters\n\n### public static **setDefault** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di*](phalcon_di)\n\nSet a default dependency injection container to be obtained into static methods\n\n### public static **getDefault** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nReturn the latest DI created\n\n### public static **reset** () inherited from [*Phalcon\\Di*](phalcon_di)\n\nResets the internal default DI\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault_Cli.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault_Cli.html)"
- name: Di\Injectable
  id: api/phalcon_di_injectable
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Di\\Injectable**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/injectable.zep)\n\nThis class allows to access services in the services container by just only accessing a public property with the same name of a registered service\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the event manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Injectable.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Injectable.html)"
- name: Di\Injectable::getDI
  id: api/phalcon_di_injectable#getdi
  summary: null
  belongs_to: Di\Injectable
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Di\Injectable::getEventsManager
  id: api/phalcon_di_injectable#geteventsmanager
  summary: null
  belongs_to: Di\Injectable
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Di\Injectable::setDI
  id: api/phalcon_di_injectable#setdi
  summary: null
  belongs_to: Di\Injectable
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Di\Injectable::setEventsManager
  id: api/phalcon_di_injectable#seteventsmanager
  summary: null
  belongs_to: Di\Injectable
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the event manager
- name: Di\Injectable::__get
  id: api/phalcon_di_injectable#__get
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Di\Injectable
  description: "### public **\\_\\_get** (*mixed* $propertyName)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Injectable.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Injectable.html)"
- name: Di\InjectionAwareInterface
  id: api/phalcon_di_injectionawareinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Di\\InjectionAwareInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/injectionawareinterface.zep)\n\n## Methods\n\n### abstract public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\n...\n\n### abstract public **getDI** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_InjectionAwareInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_InjectionAwareInterface.html)"
- name: Di\InjectionAwareInterface::getDI
  id: api/phalcon_di_injectionawareinterface#getdi
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Di\InjectionAwareInterface
  description: "### abstract public **getDI** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_InjectionAwareInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_InjectionAwareInterface.html)"
- name: Di\InjectionAwareInterface::setDI
  id: api/phalcon_di_injectionawareinterface#setdi
  summary: null
  belongs_to: Di\InjectionAwareInterface
  description: |-
    ### abstract public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    ...
- name: Di\Service
  id: api/phalcon_di_service
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Di\\Service**\n\n*implements* [*Phalcon\\Di\\ServiceInterface*](phalcon_di_serviceinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/service.zep)\n\nRepresents individually a service in the services container\n\n``` php\n$service = new \\Phalcon\\Di\\Service(\n    \"request\",\n    \"Phalcon\\\\Http\\\\Request\"\n);\n\n$request = service->resolve();\n```\n\n## Methods\n\n### final public **\\_\\_construct** (*string* $name, *mixed* $definition, \\[*boolean* $shared\\])\n\n### public **getName** ()\n\nReturns the service’s name\n\n### public **setShared** (*mixed* $shared)\n\nSets if the service is shared or not\n\n### public **isShared** ()\n\nCheck whether the service is shared or not\n\n### public **setSharedInstance** (*mixed* $sharedInstance)\n\nSets/Resets the shared instance related to the service\n\n### public **setDefinition** (*mixed* $definition)\n\nSet the service definition\n\n### public *mixed* **getDefinition** ()\n\nReturns the service definition\n\n### public *mixed* **resolve** (\\[*array* $parameters\\], \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\nResolves the service\n\n### public **setParameter** (*mixed* $position, *array* $parameter)\n\nChanges a parameter in the definition without resolve the service\n\n### public *array* **getParameter** (*int* $position)\n\nReturns a parameter in a specific position\n\n### public **isResolved** ()\n\nReturns true if the service was resolved\n\n### public static **\\_\\_set_state** (*array* $attributes)\n\nRestore the internal state of a service\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service.html)"
- name: Di\Service::getDefinition
  id: api/phalcon_di_service#getdefinition
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public *mixed* **getDefinition** ()

    Returns the service definition
- name: Di\Service::getName
  id: api/phalcon_di_service#getname
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public **getName** ()

    Returns the service’s name
- name: Di\Service::getParameter
  id: api/phalcon_di_service#getparameter
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public *array* **getParameter** (*int* $position)

    Returns a parameter in a specific position
- name: Di\Service::isResolved
  id: api/phalcon_di_service#isresolved
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public **isResolved** ()

    Returns true if the service was resolved
- name: Di\Service::isShared
  id: api/phalcon_di_service#isshared
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public **isShared** ()

    Check whether the service is shared or not
- name: Di\Service::resolve
  id: api/phalcon_di_service#resolve
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public *mixed* **resolve** (\[*array* $parameters\], \[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\])

    Resolves the service
- name: Di\Service::setDefinition
  id: api/phalcon_di_service#setdefinition
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public **setDefinition** (*mixed* $definition)

    Set the service definition
- name: Di\Service::setParameter
  id: api/phalcon_di_service#setparameter
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public **setParameter** (*mixed* $position, *array* $parameter)

    Changes a parameter in the definition without resolve the service
- name: Di\Service::setShared
  id: api/phalcon_di_service#setshared
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public **setShared** (*mixed* $shared)

    Sets if the service is shared or not
- name: Di\Service::setSharedInstance
  id: api/phalcon_di_service#setsharedinstance
  summary: null
  belongs_to: Di\Service
  description: |-
    ### public **setSharedInstance** (*mixed* $sharedInstance)

    Sets/Resets the shared instance related to the service
- name: Di\Service::__set_state
  id: api/phalcon_di_service#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Di\Service
  description: "### public static **\\_\\_set_state** (*array* $attributes)\n\nRestore the internal state of a service\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service.html)"
- name: Di\ServiceInterface
  id: api/phalcon_di_serviceinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Di\\ServiceInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/serviceinterface.zep)\n\n## Methods\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **setShared** (*mixed* $shared)\n\n...\n\n### abstract public **isShared** ()\n\n...\n\n### abstract public **setDefinition** (*mixed* $definition)\n\n...\n\n### abstract public **getDefinition** ()\n\n...\n\n### abstract public **resolve** (\\[*mixed* $parameters\\], \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\n...\n\n### abstract public **setParameter** (*mixed* $position, *array* $parameter)\n\n...\n\n### abstract public static **\\_\\_set_state** (*array* $attributes)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_ServiceInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_ServiceInterface.html)"
- name: Di\ServiceInterface::getDefinition
  id: api/phalcon_di_serviceinterface#getdefinition
  summary: null
  belongs_to: Di\ServiceInterface
  description: |-
    ### abstract public **getDefinition** ()

    ...
- name: Di\ServiceInterface::getName
  id: api/phalcon_di_serviceinterface#getname
  summary: null
  belongs_to: Di\ServiceInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Di\ServiceInterface::isShared
  id: api/phalcon_di_serviceinterface#isshared
  summary: null
  belongs_to: Di\ServiceInterface
  description: |-
    ### abstract public **isShared** ()

    ...
- name: Di\ServiceInterface::resolve
  id: api/phalcon_di_serviceinterface#resolve
  summary: null
  belongs_to: Di\ServiceInterface
  description: |-
    ### abstract public **resolve** (\[*mixed* $parameters\], \[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\])

    ...
- name: Di\ServiceInterface::setDefinition
  id: api/phalcon_di_serviceinterface#setdefinition
  summary: null
  belongs_to: Di\ServiceInterface
  description: |-
    ### abstract public **setDefinition** (*mixed* $definition)

    ...
- name: Di\ServiceInterface::setParameter
  id: api/phalcon_di_serviceinterface#setparameter
  summary: null
  belongs_to: Di\ServiceInterface
  description: |-
    ### abstract public **setParameter** (*mixed* $position, *array* $parameter)

    ...
- name: Di\ServiceInterface::setShared
  id: api/phalcon_di_serviceinterface#setshared
  summary: null
  belongs_to: Di\ServiceInterface
  description: |-
    ### abstract public **setShared** (*mixed* $shared)

    ...
- name: Di\ServiceInterface::__set_state
  id: api/phalcon_di_serviceinterface#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Di\ServiceInterface
  description: "### abstract public static **\\_\\_set_state** (*array* $attributes)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_ServiceInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_ServiceInterface.html)"
- name: Di\Service\Builder
  id: api/phalcon_di_service_builder
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Di\\Service\\Builder**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/di/service/builder.zep)\n\nThis class builds instances based on complex definitions\n\n## Methods\n\n### private *mixed* **\\_buildParameter** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector, *int* $position, *array* $argument)\n\nResolves a constructor/call parameter\n\n### private **\\_buildParameters** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector, *array* $arguments)\n\nResolves an array of parameters\n\n### public *mixed* **build** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector, *array* $definition, \\[*array* $parameters\\])\n\nBuilds a service using a complex service definition\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service_Builder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service_Builder.html)"
- name: Di\Service\Builder::build
  id: api/phalcon_di_service_builder#build
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Di\Service\Builder
  description: "### public *mixed* **build** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector, *array* $definition, \\[*array* $parameters\\])\n\nBuilds a service using a complex service definition\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service_Builder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service_Builder.html)"
- name: Encryption/Decryption
  id: reference/crypt
  summary: Phalcon provides encryption facilities via the Phalcon\Crypt component
  description: "# Encryption/Decryption\n\nPhalcon provides encryption facilities via the [*Phalcon\\Crypt*](../api/phalcon_crypt) component. This class offers simple object-oriented wrappers to the [openssl](http://www.php.net/manual/en/book.openssl.php) PHP’s encryption library.\n\nBy default, this component provides secure encryption using AES-256-CFB.\n\n> You must use a key length corresponding to the current algorithm. For the algorithm used by default it is 32 bytes.\n\n## Basic Usage\n\nThis component is designed to provide a very simple usage:\n\n``` php\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n$key  = \"This is a secret key (32 bytes).\";\n$text = \"This is the text that you want to encrypt.\";\n\n$encrypted = $crypt->encrypt($text, $key);\n\necho $crypt->decrypt($encrypted, $key);\n```\n\nYou can use the same instance to encrypt/decrypt several times:\n\n``` php\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n$texts = [\n    \"my-key\"    => \"This is a secret text\",\n    \"other-key\" => \"This is a very secret\",\n];\n\nforeach ($texts as $key => $text) {\n    // Perform the encryption\n    $encrypted = $crypt->encrypt($text, $key);\n\n    // Now decrypt\n    echo $crypt->decrypt($encrypted, $key);\n}\n```\n\n## Encryption Options\n\nThe following options are available to change the encryption behavior:\n\n| Name   | Description                                                                                                                                                          |\n|--------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Cipher | The cipher is one of the encryption algorithms supported by openssl. You can see a list [here](http://www.php.net/manual/en/function.openssl-get-cipher-methods.php) |\n\nExample:\n\n``` php\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n// Use blowfish\n$crypt->setCipher(\"bf-cbc\");\n\n$key  = \"le password\";\n$text = \"This is a secret text\";\n\necho $crypt->encrypt($text, $key);\n```\n\n## Base64 Support\n\nIn order for encryption to be properly transmitted (emails) or displayed (browsers) [base64](http://www.php.net/manual/en/function.base64-encode.php) encoding is usually applied to encrypted texts:\n\n``` php\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n$key  = \"le password\";\n$text = \"This is a secret text\";\n\n$encrypt = $crypt->encryptBase64($text, $key);\n\necho $crypt->decryptBase64($encrypt, $key);\n```\n\n## Setting up an Encryption service\n\nYou can set up the encryption component in the services container in order to use it from any part of the application:\n\n``` php\nuse Phalcon\\Crypt;\n\n$di->set(\n    \"crypt\",\n    function () {\n        $crypt = new Crypt();\n\n        // Set a global encryption key\n        $crypt->setKey(\n            \"%31.1e$i86e$f!8jz\"\n        );\n\n        return $crypt;\n    },\n    true\n);\n```\n\nThen, for example, in a controller you can use it as follows:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SecretsController extends Controller\n{\n    public function saveAction()\n    {\n        $secret = new Secrets();\n\n        $text = $this->request->getPost(\"text\");\n\n        $secret->content = $this->crypt->encrypt($text);\n\n        if ($secret->save()) {\n            $this->flash->success(\n                \"Secret was successfully created!\"\n            );\n        }\n    }\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/crypt.html](https://docs.phalconphp.com/en/latest/reference/crypt.html)"
- name: Escaper
  id: api/phalcon_escaper
  summary: Escapes different kinds of text securing them
  description: "# Class **Phalcon\\Escaper**\n\n*implements* [*Phalcon\\EscaperInterface*](phalcon_escaperinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/escaper.zep)\n\nEscapes different kinds of text securing them. By using this component you may prevent XSS attacks.\n\nThis component only works with UTF-8. The PREG extension needs to be compiled with UTF-8 support.\n\n``` php\n$escaper = new \\Phalcon\\Escaper();\n\n$escaped = $escaper->escapeCss(\"font-family: <Verdana>\");\n\necho $escaped; // font\\2D family\\3A \\20 \\3C Verdana\\3E\n```\n\n## Methods\n\n### public **setEncoding** (*mixed* $encoding)\n\nSets the encoding to be used by the escaper\n\n``` php\n$escaper->setEncoding(\"utf-8\");\n```\n\n### public **getEncoding** ()\n\nReturns the internal encoding used by the escaper\n\n### public **setHtmlQuoteType** (*mixed* $quoteType)\n\nSets the HTML quoting type for htmlspecialchars\n\n``` php\n$escaper->setHtmlQuoteType(ENT_XHTML);\n```\n\n### public **setDoubleEncode** (*mixed* $doubleEncode)\n\nSets the double_encode to be used by the escaper\n\n``` php\n$escaper->setDoubleEncode(false);\n```\n\n### final public **detectEncoding** (*mixed* $str)\n\nDetect the character encoding of a string to be handled by an encoder Special-handling for chr(172) and chr(128) to chr(159) which fail to be detected by mb_detect_encoding()\n\n### final public **normalizeEncoding** (*mixed* $str)\n\nUtility to normalize a string’s encoding to UTF-32.\n\n### public **escapeHtml** (*mixed* $text)\n\nEscapes a HTML string. Internally uses htmlspecialchars\n\n### public **escapeHtmlAttr** (*mixed* $attribute)\n\nEscapes a HTML attribute string\n\n### public **escapeCss** (*mixed* $css)\n\nEscape CSS strings by replacing non-alphanumeric chars by their hexadecimal escaped representation\n\n### public **escapeJs** (*mixed* $js)\n\nEscape javascript strings by replacing non-alphanumeric chars by their hexadecimal escaped representation\n\n### public **escapeUrl** (*mixed* $url)\n\nEscapes a URL. Internally uses rawurlencode\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper.html)"
- name: Escaper::detectEncoding
  id: api/phalcon_escaper#detectencoding
  summary: null
  belongs_to: Escaper
  description: |-
    ### final public **detectEncoding** (*mixed* $str)

    Detect the character encoding of a string to be handled by an encoder Special-handling for chr(172) and chr(128) to chr(159) which fail to be detected by mb_detect_encoding()
- name: Escaper::escapeCss
  id: api/phalcon_escaper#escapecss
  summary: null
  belongs_to: Escaper
  description: |-
    ### public **escapeCss** (*mixed* $css)

    Escape CSS strings by replacing non-alphanumeric chars by their hexadecimal escaped representation
- name: Escaper::escapeHtml
  id: api/phalcon_escaper#escapehtml
  summary: Escapes a HTML string
  belongs_to: Escaper
  description: |-
    ### public **escapeHtml** (*mixed* $text)

    Escapes a HTML string. Internally uses htmlspecialchars
- name: Escaper::escapeHtmlAttr
  id: api/phalcon_escaper#escapehtmlattr
  summary: null
  belongs_to: Escaper
  description: |-
    ### public **escapeHtmlAttr** (*mixed* $attribute)

    Escapes a HTML attribute string
- name: Escaper::escapeJs
  id: api/phalcon_escaper#escapejs
  summary: null
  belongs_to: Escaper
  description: |-
    ### public **escapeJs** (*mixed* $js)

    Escape javascript strings by replacing non-alphanumeric chars by their hexadecimal escaped representation
- name: Escaper::escapeUrl
  id: api/phalcon_escaper#escapeurl
  summary: Escapes a URL
  belongs_to: Escaper
  description: "### public **escapeUrl** (*mixed* $url)\n\nEscapes a URL. Internally uses rawurlencode\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper.html)"
- name: Escaper::getEncoding
  id: api/phalcon_escaper#getencoding
  summary: null
  belongs_to: Escaper
  description: |-
    ### public **getEncoding** ()

    Returns the internal encoding used by the escaper
- name: Escaper::normalizeEncoding
  id: api/phalcon_escaper#normalizeencoding
  summary: Utility to normalize a string’s encoding to UTF-32
  belongs_to: Escaper
  description: |-
    ### final public **normalizeEncoding** (*mixed* $str)

    Utility to normalize a string’s encoding to UTF-32.
- name: Escaper::setDoubleEncode
  id: api/phalcon_escaper#setdoubleencode
  summary: null
  belongs_to: Escaper
  description: |-
    ### public **setDoubleEncode** (*mixed* $doubleEncode)

    Sets the double_encode to be used by the escaper

    ``` php
    $escaper->setDoubleEncode(false);
    ```
- name: Escaper::setEncoding
  id: api/phalcon_escaper#setencoding
  summary: null
  belongs_to: Escaper
  description: |-
    ### public **setEncoding** (*mixed* $encoding)

    Sets the encoding to be used by the escaper

    ``` php
    $escaper->setEncoding("utf-8");
    ```
- name: Escaper::setHtmlQuoteType
  id: api/phalcon_escaper#sethtmlquotetype
  summary: null
  belongs_to: Escaper
  description: |-
    ### public **setHtmlQuoteType** (*mixed* $quoteType)

    Sets the HTML quoting type for htmlspecialchars

    ``` php
    $escaper->setHtmlQuoteType(ENT_XHTML);
    ```
- name: EscaperInterface
  id: api/phalcon_escaperinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\EscaperInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/escaperinterface.zep)\n\n## Methods\n\n### abstract public **setEncoding** (*mixed* $encoding)\n\n...\n\n### abstract public **getEncoding** ()\n\n...\n\n### abstract public **setHtmlQuoteType** (*mixed* $quoteType)\n\n...\n\n### abstract public **escapeHtml** (*mixed* $text)\n\n...\n\n### abstract public **escapeHtmlAttr** (*mixed* $text)\n\n...\n\n### abstract public **escapeCss** (*mixed* $css)\n\n...\n\n### abstract public **escapeJs** (*mixed* $js)\n\n...\n\n### abstract public **escapeUrl** (*mixed* $url)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_EscaperInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_EscaperInterface.html)"
- name: EscaperInterface::escapeCss
  id: api/phalcon_escaperinterface#escapecss
  summary: null
  belongs_to: EscaperInterface
  description: |-
    ### abstract public **escapeCss** (*mixed* $css)

    ...
- name: EscaperInterface::escapeHtml
  id: api/phalcon_escaperinterface#escapehtml
  summary: null
  belongs_to: EscaperInterface
  description: |-
    ### abstract public **escapeHtml** (*mixed* $text)

    ...
- name: EscaperInterface::escapeHtmlAttr
  id: api/phalcon_escaperinterface#escapehtmlattr
  summary: null
  belongs_to: EscaperInterface
  description: |-
    ### abstract public **escapeHtmlAttr** (*mixed* $text)

    ...
- name: EscaperInterface::escapeJs
  id: api/phalcon_escaperinterface#escapejs
  summary: null
  belongs_to: EscaperInterface
  description: |-
    ### abstract public **escapeJs** (*mixed* $js)

    ...
- name: EscaperInterface::escapeUrl
  id: api/phalcon_escaperinterface#escapeurl
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: EscaperInterface
  description: "### abstract public **escapeUrl** (*mixed* $url)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_EscaperInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_EscaperInterface.html)"
- name: EscaperInterface::getEncoding
  id: api/phalcon_escaperinterface#getencoding
  summary: null
  belongs_to: EscaperInterface
  description: |-
    ### abstract public **getEncoding** ()

    ...
- name: EscaperInterface::setEncoding
  id: api/phalcon_escaperinterface#setencoding
  summary: null
  belongs_to: EscaperInterface
  description: |-
    ### abstract public **setEncoding** (*mixed* $encoding)

    ...
- name: EscaperInterface::setHtmlQuoteType
  id: api/phalcon_escaperinterface#sethtmlquotetype
  summary: null
  belongs_to: EscaperInterface
  description: |-
    ### abstract public **setHtmlQuoteType** (*mixed* $quoteType)

    ...
- name: Escaper\Exception
  id: api/phalcon_escaper_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Escaper\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/escaper/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper_Exception.html)"
- name: Events Manager
  id: reference/events
  summary: The purpose of this component is to intercept the execution of most of the other components of the framework by creating “hook points”. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component
  description: "# Events Manager\n\nThe purpose of this component is to intercept the execution of most of the other components of the framework by creating “hook points”. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.\n\n## Naming Convention\n\nPhalcon events use namespaces to avoid naming collisions. Each component in Phalcon occupies a different event namespace and you are free to create your own as you see fit. Event names are formatted as “component:event”. For example, as [*Phalcon\\Db*](../api/phalcon_db) occupies the “db” namespace, its “afterQuery” event’s full name is “db:afterQuery”.\n\nWhen attaching event listeners to the events manager, you can use “component” to catch all events from that component (eg. “db” to catch all of the [*Phalcon\\Db*](../api/phalcon_db) events) or “component:event” to target a specific event (eg. “db:afterQuery”).\n\n## Usage Example\n\nIn the following example, we will use the EventsManager to listen for the “afterQuery” event produced in a MySQL connection managed by [*Phalcon\\Db*](../api/phalcon_db):\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n$eventsManager = new EventsManager();\n\n$eventsManager->attach(\n    \"db:afterQuery\",\n    function (Event $event, $connection) {\n        echo $connection->getSQLStatement();\n    }\n);\n\n$connection = new DbAdapter(\n    [\n        \"host\"     => \"localhost\",\n        \"username\" => \"root\",\n        \"password\" => \"secret\",\n        \"dbname\"   => \"invo\",\n    ]\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection->setEventsManager($eventsManager);\n\n// Send a SQL command to the database server\n$connection->query(\n    \"SELECT * FROM products p WHERE p.status = 1\"\n);\n```\n\nNow every time a query is executed, the SQL statement will be echoed out. The first parameter passed to the lambda function contains contextual information about the event that is running, the second is the source of the event (in this case: the connection itself). A third parameter may also be specified which will contain arbitrary data specific to the event.\n\n> You must explicitly set the Events Manager to a component using the `setEventsManager()` method in order for that component to trigger events. You can create a new Events Manager instance for each component or you can set the same Events Manager to multiple components as the naming convention will avoid conflicts.\n\nInstead of using lambda functions, you can use event listener classes instead. Event listeners also allow you to listen to multiple events. In this example, we will implement the [*Phalcon\\Db\\Profiler*](../api/phalcon_db_profiler) to detect the SQL statements that are taking longer to execute than expected:\n\n``` php\nuse Phalcon\\Db\\Profiler;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File;\n\nclass MyDbListener\n{\n    protected $_profiler;\n\n    protected $_logger;\n\n    /**\n     * Creates the profiler and starts the logging\n     */\n    public function __construct()\n    {\n        $this->_profiler = new Profiler();\n        $this->_logger   = new Logger(\"../apps/logs/db.log\");\n    }\n\n    /**\n     * This is executed if the event triggered is 'beforeQuery'\n     */\n    public function beforeQuery(Event $event, $connection)\n    {\n        $this->_profiler->startProfile(\n            $connection->getSQLStatement()\n        );\n    }\n\n    /**\n     * This is executed if the event triggered is 'afterQuery'\n     */\n    public function afterQuery(Event $event, $connection)\n    {\n        $this->_logger->log(\n            $connection->getSQLStatement(),\n            Logger::INFO\n        );\n\n        $this->_profiler->stopProfile();\n    }\n\n    public function getProfiler()\n    {\n        return $this->_profiler;\n    }\n}\n```\n\nAttaching an event listener to the events manager is as simple as:\n\n``` php\n// Create a database listener\n$dbListener = new MyDbListener();\n\n// Listen all the database events\n$eventsManager->attach(\n    \"db\",\n    $dbListener\n);\n```\n\nThe resulting profile data can be obtained from the listener:\n\n``` php\n// Send a SQL command to the database server\n$connection->execute(\n    \"SELECT * FROM products p WHERE p.status = 1\"\n);\n\nforeach ($dbListener->getProfiler()->getProfiles() as $profile) {\n    echo \"SQL Statement: \", $profile->getSQLStatement(), \"\\n\";\n    echo \"Start Time: \", $profile->getInitialTime(), \"\\n\";\n    echo \"Final Time: \", $profile->getFinalTime(), \"\\n\";\n    echo \"Total Elapsed Time: \", $profile->getTotalElapsedSeconds(), \"\\n\";\n}\n```\n\n## Creating components that trigger Events\n\nYou can create components in your application that trigger events to an EventsManager. As a consequence, there may exist listeners that react to these events when generated. In the following example we’re creating a component called “MyComponent”. This component is EventsManager aware (it implements [*Phalcon\\Events\\EventsAwareInterface*](../api/phalcon_events_eventsawareinterface)); when its `someTask()` method is executed it triggers two events to any listener in the EventsManager:\n\n``` php\nuse Phalcon\\Events\\ManagerInterface;\nuse Phalcon\\Events\\EventsAwareInterface;\n\nclass MyComponent implements EventsAwareInterface\n{\n    protected $_eventsManager;\n\n    public function setEventsManager(ManagerInterface $eventsManager)\n    {\n        $this->_eventsManager = $eventsManager;\n    }\n\n    public function getEventsManager()\n    {\n        return $this->_eventsManager;\n    }\n\n    public function someTask()\n    {\n        $this->_eventsManager->fire(\"my-component:beforeSomeTask\", $this);\n\n        // Do some task\n        echo \"Here, someTask\\n\";\n\n        $this->_eventsManager->fire(\"my-component:afterSomeTask\", $this);\n    }\n}\n```\n\nNotice that in this example, we’re using the “my-component” event namespace. Now we need to create an event listener for this component:\n\n``` php\nuse Phalcon\\Events\\Event;\n\nclass SomeListener\n{\n    public function beforeSomeTask(Event $event, $myComponent)\n    {\n        echo \"Here, beforeSomeTask\\n\";\n    }\n\n    public function afterSomeTask(Event $event, $myComponent)\n    {\n        echo \"Here, afterSomeTask\\n\";\n    }\n}\n```\n\nNow let’s make everything work together:\n\n``` php\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// Create an Events Manager\n$eventsManager = new EventsManager();\n\n// Create the MyComponent instance\n$myComponent = new MyComponent();\n\n// Bind the eventsManager to the instance\n$myComponent->setEventsManager($eventsManager);\n\n// Attach the listener to the EventsManager\n$eventsManager->attach(\n    \"my-component\",\n    new SomeListener()\n);\n\n// Execute methods in the component\n$myComponent->someTask();\n```\n\nAs `someTask()` is executed, the two methods in the listener will be executed, producing the following output:\n\n``` php\nHere, beforeSomeTask\nHere, someTask\nHere, afterSomeTask\n```\n\nAdditional data may also be passed when triggering an event using the third parameter of `fire()`:\n\n``` php\n$eventsManager->fire(\"my-component:afterSomeTask\", $this, $extraData);\n```\n\nIn a listener the third parameter also receives this data:\n\n``` php\nuse Phalcon\\Events\\Event;\n\n// Receiving the data in the third parameter\n$eventsManager->attach(\n    \"my-component\",\n    function (Event $event, $component, $data) {\n        print_r($data);\n    }\n);\n\n// Receiving the data from the event context\n$eventsManager->attach(\n    \"my-component\",\n    function (Event $event, $component) {\n        print_r($event->getData());\n    }\n);\n```\n\n## Using Services From The DI\n\nBy extending [*Phalcon\\Mvc\\User\\Plugin*](../api/phalcon_mvc_user_plugin), you can access services from the DI, just like you would in a controller:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\n\nclass SomeListener extends Plugin\n{\n    public function beforeSomeTask(Event $event, $myComponent)\n    {\n        echo \"Here, beforeSomeTask\\n\";\n\n        $this->logger->debug(\n            \"beforeSomeTask has been triggered\";\n        );\n    }\n\n    public function afterSomeTask(Event $event, $myComponent)\n    {\n        echo \"Here, afterSomeTask\\n\";\n\n        $this->logger->debug(\n            \"afterSomeTask has been triggered\";\n        );\n    }\n}\n```\n\n## Event Propagation/Cancellation\n\nMany listeners may be added to the same event manager. This means that for the same type of event, many listeners can be notified. The listeners are notified in the order they were registered in the EventsManager. Some events are cancelable, indicating that these may be stopped preventing other listeners from being notified about the event:\n\n``` php\nuse Phalcon\\Events\\Event;\n\n$eventsManager->attach(\n    \"db\",\n    function (Event $event, $connection) {\n        // We stop the event if it is cancelable\n        if ($event->isCancelable()) {\n            // Stop the event, so other listeners will not be notified about this\n            $event->stop();\n        }\n\n        // ...\n    }\n);\n```\n\nBy default, events are cancelable - even most of the events produced by the framework are cancelables. You can fire a not-cancelable event by passing `false` in the fourth parameter of `fire()`:\n\n``` php\n$eventsManager->fire(\"my-component:afterSomeTask\", $this, $extraData, false);\n```\n\n## Listener Priorities\n\nWhen attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:\n\n``` php\n$eventsManager->enablePriorities(true);\n\n$eventsManager->attach(\"db\", new DbListener(), 150); // More priority\n$eventsManager->attach(\"db\", new DbListener(), 100); // Normal priority\n$eventsManager->attach(\"db\", new DbListener(), 50);  // Less priority\n```\n\n## Collecting Responses\n\nThe events manager can collect every response returned by every notified listener. This example explains how it works:\n\n``` php\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n// Set up the events manager to collect responses\n$eventsManager->collectResponses(true);\n\n// Attach a listener\n$eventsManager->attach(\n    \"custom:custom\",\n    function () {\n        return \"first response\";\n    }\n);\n\n// Attach a listener\n$eventsManager->attach(\n    \"custom:custom\",\n    function () {\n        return \"second response\";\n    }\n);\n\n// Fire the event\n$eventsManager->fire(\"custom:custom\", null);\n\n// Get all the collected responses\nprint_r($eventsManager->getResponses());\n```\n\nThe above example produces:\n\n``` html\nArray ( [0] => first response [1] => second response )\n```\n\n## Implementing your own EventsManager\n\nThe [*Phalcon\\Events\\ManagerInterface*](../api/phalcon_events_managerinterface) interface must be implemented to create your own EventsManager replacing the one provided by Phalcon.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/events.html](https://docs.phalconphp.com/en/latest/reference/events.html)"
- name: Events\Event
  id: api/phalcon_events_event
  summary: Sets event data
  description: "# Class **Phalcon\\Events\\Event**\n\n*implements* [*Phalcon\\Events\\EventInterface*](phalcon_events_eventinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/events/event.zep)\n\nThis class offers contextual information of a fired event in the EventsManager\n\n## Methods\n\n### public **getType** ()\n\nEvent type\n\n### public **getSource** ()\n\nEvent source\n\n### public **getData** ()\n\nEvent data\n\n### public **\\_\\_construct** (*string* $type, *object* $source, \\[*mixed* $data\\], \\[*boolean* $cancelable\\])\n\nPhalcon\\Events\\Event constructor\n\n### public **setData** (\\[*mixed* $data\\])\n\nSets event data.\n\n### public **setType** (*mixed* $type)\n\nSets event type.\n\n### public **stop** ()\n\nStops the event preventing propagation.\n\n``` php\nif ($event->isCancelable()) {\n    $event->stop();\n}\n```\n\n### public **isStopped** ()\n\nCheck whether the event is currently stopped.\n\n### public **isCancelable** ()\n\nCheck whether the event is cancelable.\n\n``` php\nif ($event->isCancelable()) {\n    $event->stop();\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Event.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Event.html)"
- name: Events\Event::getData
  id: api/phalcon_events_event#getdata
  summary: null
  belongs_to: Events\Event
  description: |-
    ### public **getData** ()

    Event data

    ### public **\_\_construct** (*string* $type, *object* $source, \[*mixed* $data\], \[*boolean* $cancelable\])

    Phalcon\Events\Event constructor
- name: Events\Event::getSource
  id: api/phalcon_events_event#getsource
  summary: null
  belongs_to: Events\Event
  description: |-
    ### public **getSource** ()

    Event source
- name: Events\Event::getType
  id: api/phalcon_events_event#gettype
  summary: null
  belongs_to: Events\Event
  description: |-
    ### public **getType** ()

    Event type
- name: Events\Event::isCancelable
  id: api/phalcon_events_event#iscancelable
  summary: Check whether the event is cancelable
  belongs_to: Events\Event
  description: "### public **isCancelable** ()\n\nCheck whether the event is cancelable.\n\n``` php\nif ($event->isCancelable()) {\n    $event->stop();\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Event.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Event.html)"
- name: Events\Event::isStopped
  id: api/phalcon_events_event#isstopped
  summary: Check whether the event is currently stopped
  belongs_to: Events\Event
  description: |-
    ### public **isStopped** ()

    Check whether the event is currently stopped.
- name: Events\Event::setData
  id: api/phalcon_events_event#setdata
  summary: Sets event data
  belongs_to: Events\Event
  description: |-
    ### public **setData** (\[*mixed* $data\])

    Sets event data.
- name: Events\Event::setType
  id: api/phalcon_events_event#settype
  summary: Sets event type
  belongs_to: Events\Event
  description: |-
    ### public **setType** (*mixed* $type)

    Sets event type.
- name: Events\Event::stop
  id: api/phalcon_events_event#stop
  summary: Stops the event preventing propagation
  belongs_to: Events\Event
  description: |-
    ### public **stop** ()

    Stops the event preventing propagation.

    ``` php
    if ($event->isCancelable()) {
        $event->stop();
    }
    ```
- name: Events\EventInterface
  id: api/phalcon_events_eventinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Events\\EventInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/events/eventinterface.zep)\n\n## Methods\n\n### abstract public **getData** ()\n\n...\n\n### abstract public **setData** (\\[*mixed* $data\\])\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **setType** (*mixed* $type)\n\n...\n\n### abstract public **stop** ()\n\n...\n\n### abstract public **isStopped** ()\n\n...\n\n### abstract public **isCancelable** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventInterface.html)"
- name: Events\EventInterface::getData
  id: api/phalcon_events_eventinterface#getdata
  summary: null
  belongs_to: Events\EventInterface
  description: |-
    ### abstract public **getData** ()

    ...
- name: Events\EventInterface::getType
  id: api/phalcon_events_eventinterface#gettype
  summary: null
  belongs_to: Events\EventInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Events\EventInterface::isCancelable
  id: api/phalcon_events_eventinterface#iscancelable
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Events\EventInterface
  description: "### abstract public **isCancelable** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventInterface.html)"
- name: Events\EventInterface::isStopped
  id: api/phalcon_events_eventinterface#isstopped
  summary: null
  belongs_to: Events\EventInterface
  description: |-
    ### abstract public **isStopped** ()

    ...
- name: Events\EventInterface::setData
  id: api/phalcon_events_eventinterface#setdata
  summary: null
  belongs_to: Events\EventInterface
  description: |-
    ### abstract public **setData** (\[*mixed* $data\])

    ...
- name: Events\EventInterface::setType
  id: api/phalcon_events_eventinterface#settype
  summary: null
  belongs_to: Events\EventInterface
  description: |-
    ### abstract public **setType** (*mixed* $type)

    ...
- name: Events\EventInterface::stop
  id: api/phalcon_events_eventinterface#stop
  summary: null
  belongs_to: Events\EventInterface
  description: |-
    ### abstract public **stop** ()

    ...
- name: Events\EventsAwareInterface
  id: api/phalcon_events_eventsawareinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Events\\EventsAwareInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/events/eventsawareinterface.zep)\n\n## Methods\n\n### abstract public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\n...\n\n### abstract public **getEventsManager** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventsAwareInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventsAwareInterface.html)"
- name: Events\EventsAwareInterface::getEventsManager
  id: api/phalcon_events_eventsawareinterface#geteventsmanager
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Events\EventsAwareInterface
  description: "### abstract public **getEventsManager** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventsAwareInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventsAwareInterface.html)"
- name: Events\EventsAwareInterface::setEventsManager
  id: api/phalcon_events_eventsawareinterface#seteventsmanager
  summary: null
  belongs_to: Events\EventsAwareInterface
  description: |-
    ### abstract public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    ...
- name: Events\Exception
  id: api/phalcon_events_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Events\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/events/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Exception.html)"
- name: Events\Manager
  id: api/phalcon_events_manager
  summary: Phalcon Events Manager, offers an easy way to intercept and manipulate, if needed, the normal flow of operation
  description: "# Class **Phalcon\\Events\\Manager**\n\n*implements* [*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/events/manager.zep)\n\nPhalcon Events Manager, offers an easy way to intercept and manipulate, if needed, the normal flow of operation. With the EventsManager the developer can create hooks or plugins that will offer monitoring of data, manipulation, conditional execution and much more.\n\n## Methods\n\n### public **attach** (*string* $eventType, *object* \\| *callable* $handler, \\[*int* $priority\\])\n\nAttach a listener to the events manager\n\n### public **detach** (*string* $eventType, *object* $handler)\n\nDetach the listener from the events manager\n\n### public **enablePriorities** (*mixed* $enablePriorities)\n\nSet if priorities are enabled in the EventsManager\n\n### public **arePrioritiesEnabled** ()\n\nReturns if priorities are enabled\n\n### public **collectResponses** (*mixed* $collect)\n\nTells the event manager if it needs to collect all the responses returned by every registered listener in a single fire\n\n### public **isCollecting** ()\n\nCheck if the events manager is collecting all all the responses returned by every registered listener in a single fire\n\n### public *array* **getResponses** ()\n\nReturns all the responses returned by every handler executed by the last ‘fire’ executed\n\n### public **detachAll** (\\[*mixed* $type\\])\n\nRemoves all events from the EventsManager\n\n### final public *mixed* **fireQueue** ([SplPriorityQueue](http://php.net/manual/en/class.splpriorityqueue.php) \\| *array* $queue, [*Phalcon\\Events\\Event*](phalcon_events_event) $event)\n\nInternal handler to call a queue of events\n\n### public *mixed* **fire** (*string* $eventType, *object* $source, \\[*mixed* $data\\], \\[*boolean* $cancelable\\])\n\nFires an event in the events manager causing the active listeners to be notified about it\n\n``` php\n$eventsManager->fire(\"db\", $connection);\n```\n\n### public **hasListeners** (*mixed* $type)\n\nCheck whether certain type of event has listeners\n\n### public *array* **getListeners** (*string* $type)\n\nReturns all the attached listeners of a certain type\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Manager.html)"
- name: Events\Manager::arePrioritiesEnabled
  id: api/phalcon_events_manager#areprioritiesenabled
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **arePrioritiesEnabled** ()

    Returns if priorities are enabled
- name: Events\Manager::attach
  id: api/phalcon_events_manager#attach
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **attach** (*string* $eventType, *object* \| *callable* $handler, \[*int* $priority\])

    Attach a listener to the events manager
- name: Events\Manager::collectResponses
  id: api/phalcon_events_manager#collectresponses
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **collectResponses** (*mixed* $collect)

    Tells the event manager if it needs to collect all the responses returned by every registered listener in a single fire
- name: Events\Manager::detach
  id: api/phalcon_events_manager#detach
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **detach** (*string* $eventType, *object* $handler)

    Detach the listener from the events manager
- name: Events\Manager::detachAll
  id: api/phalcon_events_manager#detachall
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **detachAll** (\[*mixed* $type\])

    Removes all events from the EventsManager
- name: Events\Manager::enablePriorities
  id: api/phalcon_events_manager#enablepriorities
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **enablePriorities** (*mixed* $enablePriorities)

    Set if priorities are enabled in the EventsManager
- name: Events\Manager::fire
  id: api/phalcon_events_manager#fire
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public *mixed* **fire** (*string* $eventType, *object* $source, \[*mixed* $data\], \[*boolean* $cancelable\])

    Fires an event in the events manager causing the active listeners to be notified about it

    ``` php
    $eventsManager->fire("db", $connection);
    ```
- name: Events\Manager::fireQueue
  id: api/phalcon_events_manager#firequeue
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### final public *mixed* **fireQueue** ([SplPriorityQueue](http://php.net/manual/en/class.splpriorityqueue.php) \| *array* $queue, [*Phalcon\Events\Event*](phalcon_events_event) $event)

    Internal handler to call a queue of events
- name: Events\Manager::getListeners
  id: api/phalcon_events_manager#getlisteners
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Events\Manager
  description: "### public *array* **getListeners** (*string* $type)\n\nReturns all the attached listeners of a certain type\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Manager.html)"
- name: Events\Manager::getResponses
  id: api/phalcon_events_manager#getresponses
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public *array* **getResponses** ()

    Returns all the responses returned by every handler executed by the last ‘fire’ executed
- name: Events\Manager::hasListeners
  id: api/phalcon_events_manager#haslisteners
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **hasListeners** (*mixed* $type)

    Check whether certain type of event has listeners
- name: Events\Manager::isCollecting
  id: api/phalcon_events_manager#iscollecting
  summary: null
  belongs_to: Events\Manager
  description: |-
    ### public **isCollecting** ()

    Check if the events manager is collecting all all the responses returned by every registered listener in a single fire
- name: Events\ManagerInterface
  id: api/phalcon_events_managerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Events\\ManagerInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/events/managerinterface.zep)\n\n## Methods\n\n### abstract public **attach** (*mixed* $eventType, *mixed* $handler)\n\n...\n\n### abstract public **detach** (*mixed* $eventType, *mixed* $handler)\n\n...\n\n### abstract public **detachAll** (\\[*mixed* $type\\])\n\n...\n\n### abstract public **fire** (*mixed* $eventType, *mixed* $source, \\[*mixed* $data\\])\n\n...\n\n### abstract public **getListeners** (*mixed* $type)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_ManagerInterface.html)"
- name: Events\ManagerInterface::attach
  id: api/phalcon_events_managerinterface#attach
  summary: null
  belongs_to: Events\ManagerInterface
  description: |-
    ### abstract public **attach** (*mixed* $eventType, *mixed* $handler)

    ...
- name: Events\ManagerInterface::detach
  id: api/phalcon_events_managerinterface#detach
  summary: null
  belongs_to: Events\ManagerInterface
  description: |-
    ### abstract public **detach** (*mixed* $eventType, *mixed* $handler)

    ...
- name: Events\ManagerInterface::detachAll
  id: api/phalcon_events_managerinterface#detachall
  summary: null
  belongs_to: Events\ManagerInterface
  description: |-
    ### abstract public **detachAll** (\[*mixed* $type\])

    ...
- name: Events\ManagerInterface::fire
  id: api/phalcon_events_managerinterface#fire
  summary: null
  belongs_to: Events\ManagerInterface
  description: |-
    ### abstract public **fire** (*mixed* $eventType, *mixed* $source, \[*mixed* $data\])

    ...
- name: Events\ManagerInterface::getListeners
  id: api/phalcon_events_managerinterface#getlisteners
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Events\ManagerInterface
  description: "### abstract public **getListeners** (*mixed* $type)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Events_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Events_ManagerInterface.html)"
- name: Exception
  id: api/phalcon_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Exception**\n\n*extends* class [Exception](http://php.net/manual/en/class.exception.php)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Exception.html)"
- name: Filter
  id: api/phalcon_filter
  summary: The Phalcon\Filter component provides a set of commonly needed data filters
  description: "# Class **Phalcon\\Filter**\n\n*implements* [*Phalcon\\FilterInterface*](phalcon_filterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/filter.zep)\n\nThe Phalcon\\Filter component provides a set of commonly needed data filters. It provides object oriented wrappers to the php filter extension. Also allows the developer to define his/her own filters\n\n``` php\n$filter = new \\Phalcon\\Filter();\n\n$filter->sanitize(\"some(one)@exa\\\\mple.com\", \"email\"); // returns \"[email protected]\"\n$filter->sanitize(\"hello<<\", \"string\"); // returns \"hello\"\n$filter->sanitize(\"!100a019\", \"int\"); // returns \"100019\"\n$filter->sanitize(\"!100a019.01a\", \"float\"); // returns \"100019.01\"\n```\n\n## Constants\n\n### *string* **FILTER_EMAIL**\n\n### *string* **FILTER_ABSINT**\n\n### *string* **FILTER_INT**\n\n### *string* **FILTER_INT_CAST**\n\n### *string* **FILTER_STRING**\n\n### *string* **FILTER_FLOAT**\n\n### *string* **FILTER_FLOAT_CAST**\n\n### *string* **FILTER_ALPHANUM**\n\n### *string* **FILTER_TRIM**\n\n### *string* **FILTER_STRIPTAGS**\n\n### *string* **FILTER_LOWER**\n\n### *string* **FILTER_UPPER**\n\n## Methods\n\n### public **add** (*mixed* $name, *mixed* $handler)\n\nAdds a user-defined filter\n\n### public **sanitize** (*mixed* $value, *mixed* $filters, \\[*mixed* $noRecursive\\])\n\nSanitizes a value with a specified single or set of filters\n\n### protected **\\_sanitize** (*mixed* $value, *mixed* $filter)\n\nInternal sanitize wrapper to filter_var\n\n### public **getFilters** ()\n\nReturn the user-defined filters in the instance\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Filter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Filter.html)"
- name: Filter::add
  id: api/phalcon_filter#add
  summary: null
  belongs_to: Filter
  description: |-
    ### public **add** (*mixed* $name, *mixed* $handler)

    Adds a user-defined filter
- name: Filter::FILTER_ABSINT
  id: api/phalcon_filter#filter_absint
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_ABSINT**'
- name: Filter::FILTER_ALPHANUM
  id: api/phalcon_filter#filter_alphanum
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_ALPHANUM**'
- name: Filter::FILTER_EMAIL
  id: api/phalcon_filter#filter_email
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_EMAIL**'
- name: Filter::FILTER_FLOAT
  id: api/phalcon_filter#filter_float
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_FLOAT**'
- name: Filter::FILTER_FLOAT_CAST
  id: api/phalcon_filter#filter_float_cast
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_FLOAT_CAST**'
- name: Filter::FILTER_INT
  id: api/phalcon_filter#filter_int
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_INT**'
- name: Filter::FILTER_INT_CAST
  id: api/phalcon_filter#filter_int_cast
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_INT_CAST**'
- name: Filter::FILTER_LOWER
  id: api/phalcon_filter#filter_lower
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_LOWER**'
- name: Filter::FILTER_STRING
  id: api/phalcon_filter#filter_string
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_STRING**'
- name: Filter::FILTER_STRIPTAGS
  id: api/phalcon_filter#filter_striptags
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_STRIPTAGS**'
- name: Filter::FILTER_TRIM
  id: api/phalcon_filter#filter_trim
  summary: null
  belongs_to: Filter
  description: '### *string* **FILTER_TRIM**'
- name: Filter::FILTER_UPPER
  id: api/phalcon_filter#filter_upper
  summary: null
  belongs_to: Filter
  description: |-
    ### *string* **FILTER_UPPER**

    ## Methods
- name: Filter::getFilters
  id: api/phalcon_filter#getfilters
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Filter
  description: "### public **getFilters** ()\n\nReturn the user-defined filters in the instance\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Filter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Filter.html)"
- name: Filter::sanitize
  id: api/phalcon_filter#sanitize
  summary: null
  belongs_to: Filter
  description: |-
    ### public **sanitize** (*mixed* $value, *mixed* $filters, \[*mixed* $noRecursive\])

    Sanitizes a value with a specified single or set of filters

    ### protected **\_sanitize** (*mixed* $value, *mixed* $filter)

    Internal sanitize wrapper to filter_var
- name: Filtering and Sanitizing
  id: reference/filter
  summary: Sanitizing user input is a critical part of software development
  description: "# Filtering and Sanitizing\n\nSanitizing user input is a critical part of software development. Trusting or neglecting to sanitize user input could lead to unauthorized access to the content of your application, mainly user data, or even the server your application is hosted on.\n\n[Full image (from xkcd)](http://xkcd.com/327/)\n\nThe [*Phalcon\\Filter*](../api/phalcon_filter) component provides a set of commonly used filters and data sanitizing helpers. It provides object-oriented wrappers around the PHP filter extension.\n\n## Types of Built-in Filters\n\nThe following are the built-in filters provided by this component:\n\n| Name      | Description                                                                             |\n|-----------|-----------------------------------------------------------------------------------------|\n| string    | Strip tags and encode HTML entities, including single and double quotes.                |\n| email     | Remove all characters except letters, digits and !#$%&\\*+-/=?^\\_\\`{\\|}~@.\\[\\].          |\n| int       | Remove all characters except digits, plus and minus sign.                               |\n| float     | Remove all characters except digits, dot, plus and minus sign.                          |\n| alphanum  | Remove all characters except \\[a-zA-Z0-9\\]                                              |\n| striptags | Applies the [strip_tags](http://www.php.net/manual/en/function.strip-tags.php) function |\n| trim      | Applies the [trim](http://www.php.net/manual/en/function.trim.php) function             |\n| lower     | Applies the [strtolower](http://www.php.net/manual/en/function.strtolower.php) function |\n| upper     | Applies the [strtoupper](http://www.php.net/manual/en/function.strtoupper.php) function |\n\n## Sanitizing data\n\nSanitizing is the process which removes specific characters from a value, that are not required or desired by the user or application. By sanitizing input we ensure that application integrity will be intact.\n\n``` php\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns \"[email protected]\"\n$filter->sanitize(\"some(one)@exa\\mple.com\", \"email\");\n\n// Returns \"hello\"\n$filter->sanitize(\"hello<<\", \"string\");\n\n// Returns \"100019\"\n$filter->sanitize(\"!100a019\", \"int\");\n\n// Returns \"100019.01\"\n$filter->sanitize(\"!100a019.01a\", \"float\");\n```\n\n## Sanitizing from Controllers\n\nYou can access a [*Phalcon\\Filter*](../api/phalcon_filter) object from your controllers when accessing GET or POST input data (through the request object). The first parameter is the name of the variable to be obtained; the second is the filter to be applied on it.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Sanitizing price from input\n        $price = $this->request->getPost(\"price\", \"double\");\n\n        // Sanitizing email from input\n        $email = $this->request->getPost(\"customerEmail\", \"email\");\n    }\n}\n```\n\n## Filtering Action Parameters\n\nThe next example shows you how to sanitize the action parameters within a controller action:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($productId)\n    {\n        $productId = $this->filter->sanitize($productId, \"int\");\n    }\n}\n```\n\n## Filtering data\n\nIn addition to sanitizing, [*Phalcon\\Filter*](../api/phalcon_filter) also provides filtering by removing or modifying input data to the format we expect.\n\n``` php\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns \"Hello\"\n$filter->sanitize(\"<h1>Hello</h1>\", \"striptags\");\n\n// Returns \"Hello\"\n$filter->sanitize(\"  Hello   \", \"trim\");\n```\n\n## Combining Filters\n\nYou can also run multiple filters on a string at the same time by passing an array of filter identifiers as the second parameter:\n\n``` php\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns \"Hello\"\n$filter->sanitize(\n    \"   <h1> Hello </h1>   \",\n    [\n        \"striptags\",\n        \"trim\",\n    ]\n);\n```\n\n## Creating your own Filters\n\nYou can add your own filters to [*Phalcon\\Filter*](../api/phalcon_filter). The filter function could be an anonymous function:\n\n``` php\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Using an anonymous function\n$filter->add(\n    \"md5\",\n    function ($value) {\n        return preg_replace(\"/[^0-9a-f]/\", \"\", $value);\n    }\n);\n\n// Sanitize with the \"md5\" filter\n$filtered = $filter->sanitize($possibleMd5, \"md5\");\n```\n\nOr, if you prefer, you can implement the filter in a class:\n\n``` php\nuse Phalcon\\Filter;\n\nclass IPv4Filter\n{\n    public function filter($value)\n    {\n        return filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n    }\n}\n\n$filter = new Filter();\n\n// Using an object\n$filter->add(\n    \"ipv4\",\n    new IPv4Filter()\n);\n\n// Sanitize with the \"ipv4\" filter\n$filteredIp = $filter->sanitize(\"127.0.0.1\", \"ipv4\");\n```\n\n## Complex Sanitizing and Filtering\n\nPHP itself provides an excellent filter extension you can use. Check out its documentation: [Data Filtering at PHP Documentation](http://www.php.net/manual/en/book.filter.php)\n\n## Implementing your own Filter\n\nThe [*Phalcon\\FilterInterface*](../api/phalcon_filterinterface) interface must be implemented to create your own filtering service replacing the one provided by Phalcon.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/filter.html](https://docs.phalconphp.com/en/latest/reference/filter.html)"
- name: FilterInterface
  id: api/phalcon_filterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\FilterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/filterinterface.zep)\n\n## Methods\n\n### abstract public **add** (*mixed* $name, *mixed* $handler)\n\n...\n\n### abstract public **sanitize** (*mixed* $value, *mixed* $filters)\n\n...\n\n### abstract public **getFilters** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_FilterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_FilterInterface.html)"
- name: FilterInterface::add
  id: api/phalcon_filterinterface#add
  summary: null
  belongs_to: FilterInterface
  description: |-
    ### abstract public **add** (*mixed* $name, *mixed* $handler)

    ...
- name: FilterInterface::getFilters
  id: api/phalcon_filterinterface#getfilters
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: FilterInterface
  description: "### abstract public **getFilters** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_FilterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_FilterInterface.html)"
- name: FilterInterface::sanitize
  id: api/phalcon_filterinterface#sanitize
  summary: null
  belongs_to: FilterInterface
  description: |-
    ### abstract public **sanitize** (*mixed* $value, *mixed* $filters)

    ...
- name: Filter\Exception
  id: api/phalcon_filter_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Filter\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/filter/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_Exception.html)"
- name: Filter\UserFilterInterface
  id: api/phalcon_filter_userfilterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Filter\\UserFilterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/filter/userfilterinterface.zep)\n\n## Methods\n\n### abstract public **filter** (*mixed* $value)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_UserFilterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_UserFilterInterface.html)"
- name: Filter\UserFilterInterface::filter
  id: api/phalcon_filter_userfilterinterface#filter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Filter\UserFilterInterface
  description: "### abstract public **filter** (*mixed* $value)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_UserFilterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_UserFilterInterface.html)"
- name: Flash
  id: api/phalcon_flash
  summary: Shows HTML notifications related to different circumstances
  description: "# Abstract class **Phalcon\\Flash**\n\n*implements* [*Phalcon\\FlashInterface*](phalcon_flashinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/flash.zep)\n\nShows HTML notifications related to different circumstances. Classes can be stylized using CSS\n\n``` php\n$flash->success(\"The record was successfully deleted\");\n$flash->error(\"Cannot open the file\");\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*mixed* $cssClasses\\])\n\nPhalcon\\Flash constructor\n\n### public **getAutoescape** ()\n\nReturns the autoescape mode in generated html\n\n### public **setAutoescape** (*mixed* $autoescape)\n\nSet the autoescape mode in generated html\n\n### public **getEscaperService** ()\n\nReturns the Escaper Service\n\n### public **setEscaperService** ([*Phalcon\\EscaperInterface*](phalcon_escaperinterface) $escaperService)\n\nSets the Escaper Service\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setImplicitFlush** (*mixed* $implicitFlush)\n\nSet whether the output must be implicitly flushed to the output or returned as string\n\n### public **setAutomaticHtml** (*mixed* $automaticHtml)\n\nSet if the output must be implicitly formatted with HTML\n\n### public **setCssClasses** (*array* $cssClasses)\n\nSet an array with CSS classes to format the messages\n\n### public **error** (*mixed* $message)\n\nShows a HTML error message\n\n``` php\n$flash->error(\"This is an error\");\n```\n\n### public **notice** (*mixed* $message)\n\nShows a HTML notice/information message\n\n``` php\n$flash->notice(\"This is an information\");\n```\n\n### public **success** (*mixed* $message)\n\nShows a HTML success message\n\n``` php\n$flash->success(\"The process was finished successfully\");\n```\n\n### public **warning** (*mixed* $message)\n\nShows a HTML warning message\n\n``` php\n$flash->warning(\"Hey, this is important\");\n```\n\n### public *string* \\| *void* **outputMessage** (*mixed* $type, *string* \\| *array* $message)\n\nOutputs a message formatting it with HTML\n\n``` php\n$flash->outputMessage(\"error\", $message);\n```\n\n### public **clear** ()\n\nClears accumulated messages when implicit flush is disabled\n\n### abstract public **message** (*mixed* $type, *mixed* $message) inherited from [*Phalcon\\FlashInterface*](phalcon_flashinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Flash.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Flash.html)"
- name: Flash::clear
  id: api/phalcon_flash#clear
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Flash
  description: "### public **clear** ()\n\nClears accumulated messages when implicit flush is disabled\n\n### abstract public **message** (*mixed* $type, *mixed* $message) inherited from [*Phalcon\\FlashInterface*](phalcon_flashinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Flash.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Flash.html)"
- name: Flash::error
  id: api/phalcon_flash#error
  summary: null
  belongs_to: Flash
  description: |-
    ### public **error** (*mixed* $message)

    Shows a HTML error message

    ``` php
    $flash->error("This is an error");
    ```
- name: Flash::getAutoescape
  id: api/phalcon_flash#getautoescape
  summary: null
  belongs_to: Flash
  description: |-
    ### public **getAutoescape** ()

    Returns the autoescape mode in generated html
- name: Flash::getDI
  id: api/phalcon_flash#getdi
  summary: null
  belongs_to: Flash
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Flash::getEscaperService
  id: api/phalcon_flash#getescaperservice
  summary: null
  belongs_to: Flash
  description: |-
    ### public **getEscaperService** ()

    Returns the Escaper Service
- name: Flash::notice
  id: api/phalcon_flash#notice
  summary: null
  belongs_to: Flash
  description: |-
    ### public **notice** (*mixed* $message)

    Shows a HTML notice/information message

    ``` php
    $flash->notice("This is an information");
    ```
- name: Flash::outputMessage
  id: api/phalcon_flash#outputmessage
  summary: null
  belongs_to: Flash
  description: |-
    ### public *string* \| *void* **outputMessage** (*mixed* $type, *string* \| *array* $message)

    Outputs a message formatting it with HTML

    ``` php
    $flash->outputMessage("error", $message);
    ```
- name: Flash::setAutoescape
  id: api/phalcon_flash#setautoescape
  summary: null
  belongs_to: Flash
  description: |-
    ### public **setAutoescape** (*mixed* $autoescape)

    Set the autoescape mode in generated html
- name: Flash::setAutomaticHtml
  id: api/phalcon_flash#setautomatichtml
  summary: null
  belongs_to: Flash
  description: |-
    ### public **setAutomaticHtml** (*mixed* $automaticHtml)

    Set if the output must be implicitly formatted with HTML
- name: Flash::setCssClasses
  id: api/phalcon_flash#setcssclasses
  summary: null
  belongs_to: Flash
  description: |-
    ### public **setCssClasses** (*array* $cssClasses)

    Set an array with CSS classes to format the messages
- name: Flash::setDI
  id: api/phalcon_flash#setdi
  summary: null
  belongs_to: Flash
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Flash::setEscaperService
  id: api/phalcon_flash#setescaperservice
  summary: null
  belongs_to: Flash
  description: |-
    ### public **setEscaperService** ([*Phalcon\EscaperInterface*](phalcon_escaperinterface) $escaperService)

    Sets the Escaper Service
- name: Flash::setImplicitFlush
  id: api/phalcon_flash#setimplicitflush
  summary: null
  belongs_to: Flash
  description: |-
    ### public **setImplicitFlush** (*mixed* $implicitFlush)

    Set whether the output must be implicitly flushed to the output or returned as string
- name: Flash::success
  id: api/phalcon_flash#success
  summary: null
  belongs_to: Flash
  description: |-
    ### public **success** (*mixed* $message)

    Shows a HTML success message

    ``` php
    $flash->success("The process was finished successfully");
    ```
- name: Flash::warning
  id: api/phalcon_flash#warning
  summary: null
  belongs_to: Flash
  description: |-
    ### public **warning** (*mixed* $message)

    Shows a HTML warning message

    ``` php
    $flash->warning("Hey, this is important");
    ```
- name: Flashing Messages
  id: reference/flash
  summary: Flash messages are used to notify the user about the state of actions he/she made or simply show information to the users
  description: "# Flashing Messages\n\nFlash messages are used to notify the user about the state of actions he/she made or simply show information to the users. These kinds of messages can be generated using this component.\n\n## Adapters\n\nThis component makes use of adapters to define the behavior of the messages after being passed to the Flasher:\n\n| Adapter | Description                                                                                  | API                                                     |\n|---------|----------------------------------------------------------------------------------------------|---------------------------------------------------------|\n| Direct  | Directly outputs the messages passed to the flasher                                          | [*Phalcon\\Flash\\Direct*](../api/phalcon_flash_direct)   |\n| Session | Temporarily stores the messages in session, then messages can be printed in the next request | [*Phalcon\\Flash\\Session*](../api/phalcon_flash_session) |\n\n## Usage\n\nUsually the Flash Messaging service is requested from the services container. If you’re using [*Phalcon\\Di\\FactoryDefault*](../api/phalcon_di_factorydefault) then [*Phalcon\\Flash\\Direct*](../api/phalcon_flash_direct) is automatically registered as “flash” service and [*Phalcon\\Flash\\Session*](../api/phalcon_flash_session) is automatically registered as “flashSession” service. You can also manually register it:\n\n``` php\nuse Phalcon\\Flash\\Direct as FlashDirect;\nuse Phalcon\\Flash\\Session as FlashSession;\n\n// Set up the flash service\n$di->set(\n    \"flash\",\n    function () {\n        return new FlashDirect();\n    }\n);\n\n// Set up the flash session service\n$di->set(\n    \"flashSession\",\n    function () {\n        return new FlashSession();\n    }\n);\n```\n\nThis way, you can use it in controllers or views:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        $this->flash->success(\"The post was correctly saved!\");\n    }\n}\n```\n\nThere are four built-in message types supported:\n\n``` php\n$this->flash->error(\"too bad! the form had errors\");\n\n$this->flash->success(\"yes!, everything went very smoothly\");\n\n$this->flash->notice(\"this a very important information\");\n\n$this->flash->warning(\"best check yo self, you're not looking too good.\");\n```\n\nYou can also add messages with your own types using the `message()` method:\n\n``` php\n$this->flash->message(\"debug\", \"this is debug message, you don't say\");\n```\n\n## Printing Messages\n\nMessages sent to the flash service are automatically formatted with HTML:\n\n``` html\n<div class=\"errorMessage\">too bad! the form had errors</div>\n\n<div class=\"successMessage\">yes!, everything went very smoothly</div>\n\n<div class=\"noticeMessage\">this a very important information</div>\n\n<div class=\"warningMessage\">best check yo self, you're not looking too good.</div>\n```\n\nAs you can see, CSS classes are added automatically to the :code:[\\`](#id1)\\<div\\>\\`s. These classes allow you to define the graphical presentation of the messages in the browser. The CSS classes can be overridden, for example, if you’re using Twitter Bootstrap, classes can be configured as:\n\n``` php\nuse Phalcon\\Flash\\Direct as FlashDirect;\n\n// Register the flash service with custom CSS classes\n$di->set(\n    \"flash\",\n    function () {\n        $flash = new FlashDirect(\n            [\n                \"error\"   => \"alert alert-danger\",\n                \"success\" => \"alert alert-success\",\n                \"notice\"  => \"alert alert-info\",\n                \"warning\" => \"alert alert-warning\",\n            ]\n        );\n\n        return $flash;\n    }\n);\n```\n\nThen the messages would be printed as follows:\n\n``` html\n<div class=\"alert alert-danger\">too bad! the form had errors</div>\n\n<div class=\"alert alert-success\">yes!, everything went very smoothly</div>\n\n<div class=\"alert alert-info\">this a very important information</div>\n\n<div class=\"alert alert-warning\">best check yo self, you're not looking too good.</div>\n```\n\n## Implicit Flush vs. Session\n\nDepending on the adapter used to send the messages, it could be producing output directly, or be temporarily storing the messages in session to be shown later. When should you use each? That usually depends on the type of redirection you do after sending the messages. For example, if you make a “forward” is not necessary to store the messages in session, but if you do a HTTP redirect then, they need to be stored in session:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ContactController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Store the post\n\n        // Using direct flash\n        $this->flash->success(\"Your information was stored correctly!\");\n\n        // Forward to the index action\n        return $this->dispatcher->forward(\n            [\n                \"action\" => \"index\"\n            ]\n        );\n    }\n}\n```\n\nOr using a HTTP redirection:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ContactController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Store the post\n\n        // Using session flash\n        $this->flashSession->success(\"Your information was stored correctly!\");\n\n        // Make a full HTTP redirection\n        return $this->response->redirect(\"contact/index\");\n    }\n}\n```\n\nIn this case you need to manually print the messages in the corresponding view:\n\n``` html\n<!-- app/views/contact/index.phtml -->\n\n<p><?php $this->flashSession->output() ?></p>\n```\n\nThe attribute ‘flashSession’ is how the flash was previously set into the dependency injection container. You need to start the [*session*](session) first to successfully use the flashSession messenger.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/flash.html](https://docs.phalconphp.com/en/latest/reference/flash.html)"
- name: FlashInterface
  id: api/phalcon_flashinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\FlashInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/flashinterface.zep)\n\n## Methods\n\n### abstract public **error** (*mixed* $message)\n\n...\n\n### abstract public **notice** (*mixed* $message)\n\n...\n\n### abstract public **success** (*mixed* $message)\n\n...\n\n### abstract public **warning** (*mixed* $message)\n\n...\n\n### abstract public **message** (*mixed* $type, *mixed* $message)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_FlashInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_FlashInterface.html)"
- name: FlashInterface::error
  id: api/phalcon_flashinterface#error
  summary: null
  belongs_to: FlashInterface
  description: |-
    ### abstract public **error** (*mixed* $message)

    ...
- name: FlashInterface::message
  id: api/phalcon_flashinterface#message
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: FlashInterface
  description: "### abstract public **message** (*mixed* $type, *mixed* $message)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_FlashInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_FlashInterface.html)"
- name: FlashInterface::notice
  id: api/phalcon_flashinterface#notice
  summary: null
  belongs_to: FlashInterface
  description: |-
    ### abstract public **notice** (*mixed* $message)

    ...
- name: FlashInterface::success
  id: api/phalcon_flashinterface#success
  summary: null
  belongs_to: FlashInterface
  description: |-
    ### abstract public **success** (*mixed* $message)

    ...
- name: FlashInterface::warning
  id: api/phalcon_flashinterface#warning
  summary: null
  belongs_to: FlashInterface
  description: |-
    ### abstract public **warning** (*mixed* $message)

    ...
- name: Flash\Direct
  id: api/phalcon_flash_direct
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Flash\\Direct**\n\n*extends* abstract class [*Phalcon\\Flash*](phalcon_flash)\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\FlashInterface*](phalcon_flashinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/flash/direct.zep)\n\nThis is a variant of the Phalcon\\Flash that immediately outputs any message passed to it\n\n## Methods\n\n### public **message** (*mixed* $type, *mixed* $message)\n\nOutputs a message\n\n### public **output** (\\[*mixed* $remove\\])\n\nPrints the messages accumulated in the flasher\n\n### public **\\_\\_construct** (\\[*mixed* $cssClasses\\]) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nPhalcon\\Flash constructor\n\n### public **getAutoescape** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the autoescape mode in generated html\n\n### public **setAutoescape** (*mixed* $autoescape) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet the autoescape mode in generated html\n\n### public **getEscaperService** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the Escaper Service\n\n### public **setEscaperService** ([*Phalcon\\EscaperInterface*](phalcon_escaperinterface) $escaperService) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the Escaper Service\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the internal dependency injector\n\n### public **setImplicitFlush** (*mixed* $implicitFlush) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet whether the output must be implicitly flushed to the output or returned as string\n\n### public **setAutomaticHtml** (*mixed* $automaticHtml) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet if the output must be implicitly formatted with HTML\n\n### public **setCssClasses** (*array* $cssClasses) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet an array with CSS classes to format the messages\n\n### public **error** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML error message\n\n``` php\n$flash->error(\"This is an error\");\n```\n\n### public **notice** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML notice/information message\n\n``` php\n$flash->notice(\"This is an information\");\n```\n\n### public **success** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML success message\n\n``` php\n$flash->success(\"The process was finished successfully\");\n```\n\n### public **warning** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML warning message\n\n``` php\n$flash->warning(\"Hey, this is important\");\n```\n\n### public *string* \\| *void* **outputMessage** (*mixed* $type, *string* \\| *array* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nOutputs a message formatting it with HTML\n\n``` php\n$flash->outputMessage(\"error\", $message);\n```\n\n### public **clear** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nClears accumulated messages when implicit flush is disabled\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Direct.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Direct.html)"
- name: Flash\Direct::message
  id: api/phalcon_flash_direct#message
  summary: null
  belongs_to: Flash\Direct
  description: |-
    ### public **message** (*mixed* $type, *mixed* $message)

    Outputs a message
- name: Flash\Direct::output
  id: api/phalcon_flash_direct#output
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Flash\Direct
  description: "### public **output** (\\[*mixed* $remove\\])\n\nPrints the messages accumulated in the flasher\n\n### public **\\_\\_construct** (\\[*mixed* $cssClasses\\]) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nPhalcon\\Flash constructor\n\n### public **getAutoescape** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the autoescape mode in generated html\n\n### public **setAutoescape** (*mixed* $autoescape) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet the autoescape mode in generated html\n\n### public **getEscaperService** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the Escaper Service\n\n### public **setEscaperService** ([*Phalcon\\EscaperInterface*](phalcon_escaperinterface) $escaperService) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the Escaper Service\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the internal dependency injector\n\n### public **setImplicitFlush** (*mixed* $implicitFlush) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet whether the output must be implicitly flushed to the output or returned as string\n\n### public **setAutomaticHtml** (*mixed* $automaticHtml) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet if the output must be implicitly formatted with HTML\n\n### public **setCssClasses** (*array* $cssClasses) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet an array with CSS classes to format the messages\n\n### public **error** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML error message\n\n``` php\n$flash->error(\"This is an error\");\n```\n\n### public **notice** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML notice/information message\n\n``` php\n$flash->notice(\"This is an information\");\n```\n\n### public **success** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML success message\n\n``` php\n$flash->success(\"The process was finished successfully\");\n```\n\n### public **warning** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML warning message\n\n``` php\n$flash->warning(\"Hey, this is important\");\n```\n\n### public *string* \\| *void* **outputMessage** (*mixed* $type, *string* \\| *array* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nOutputs a message formatting it with HTML\n\n``` php\n$flash->outputMessage(\"error\", $message);\n```\n\n### public **clear** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nClears accumulated messages when implicit flush is disabled\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Direct.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Direct.html)"
- name: Flash\Exception
  id: api/phalcon_flash_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Flash\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/flash/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Exception.html)"
- name: Flash\Session
  id: api/phalcon_flash_session
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Flash\\Session**\n\n*extends* abstract class [*Phalcon\\Flash*](phalcon_flash)\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\FlashInterface*](phalcon_flashinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/flash/session.zep)\n\nTemporarily stores the messages in session, then messages can be printed in the next request\n\n## Methods\n\n### protected **\\_getSessionMessages** (*mixed* $remove, \\[*mixed* $type\\])\n\nReturns the messages stored in session\n\n### protected **\\_setSessionMessages** (*array* $messages)\n\nStores the messages in session\n\n### public **message** (*mixed* $type, *mixed* $message)\n\nAdds a message to the session flasher\n\n### public **has** (\\[*mixed* $type\\])\n\nChecks whether there are messages\n\n### public **getMessages** (\\[*mixed* $type\\], \\[*mixed* $remove\\])\n\nReturns the messages in the session flasher\n\n### public **output** (\\[*mixed* $remove\\])\n\nPrints the messages in the session flasher\n\n### public **clear** ()\n\nClear messages in the session messenger\n\n### public **\\_\\_construct** (\\[*mixed* $cssClasses\\]) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nPhalcon\\Flash constructor\n\n### public **getAutoescape** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the autoescape mode in generated html\n\n### public **setAutoescape** (*mixed* $autoescape) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet the autoescape mode in generated html\n\n### public **getEscaperService** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the Escaper Service\n\n### public **setEscaperService** ([*Phalcon\\EscaperInterface*](phalcon_escaperinterface) $escaperService) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the Escaper Service\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the internal dependency injector\n\n### public **setImplicitFlush** (*mixed* $implicitFlush) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet whether the output must be implicitly flushed to the output or returned as string\n\n### public **setAutomaticHtml** (*mixed* $automaticHtml) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet if the output must be implicitly formatted with HTML\n\n### public **setCssClasses** (*array* $cssClasses) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet an array with CSS classes to format the messages\n\n### public **error** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML error message\n\n``` php\n$flash->error(\"This is an error\");\n```\n\n### public **notice** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML notice/information message\n\n``` php\n$flash->notice(\"This is an information\");\n```\n\n### public **success** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML success message\n\n``` php\n$flash->success(\"The process was finished successfully\");\n```\n\n### public **warning** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML warning message\n\n``` php\n$flash->warning(\"Hey, this is important\");\n```\n\n### public *string* \\| *void* **outputMessage** (*mixed* $type, *string* \\| *array* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nOutputs a message formatting it with HTML\n\n``` php\n$flash->outputMessage(\"error\", $message);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Session.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Session.html)"
- name: Flash\Session::clear
  id: api/phalcon_flash_session#clear
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Flash\Session
  description: "### public **clear** ()\n\nClear messages in the session messenger\n\n### public **\\_\\_construct** (\\[*mixed* $cssClasses\\]) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nPhalcon\\Flash constructor\n\n### public **getAutoescape** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the autoescape mode in generated html\n\n### public **setAutoescape** (*mixed* $autoescape) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet the autoescape mode in generated html\n\n### public **getEscaperService** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the Escaper Service\n\n### public **setEscaperService** ([*Phalcon\\EscaperInterface*](phalcon_escaperinterface) $escaperService) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the Escaper Service\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nReturns the internal dependency injector\n\n### public **setImplicitFlush** (*mixed* $implicitFlush) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet whether the output must be implicitly flushed to the output or returned as string\n\n### public **setAutomaticHtml** (*mixed* $automaticHtml) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet if the output must be implicitly formatted with HTML\n\n### public **setCssClasses** (*array* $cssClasses) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nSet an array with CSS classes to format the messages\n\n### public **error** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML error message\n\n``` php\n$flash->error(\"This is an error\");\n```\n\n### public **notice** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML notice/information message\n\n``` php\n$flash->notice(\"This is an information\");\n```\n\n### public **success** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML success message\n\n``` php\n$flash->success(\"The process was finished successfully\");\n```\n\n### public **warning** (*mixed* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nShows a HTML warning message\n\n``` php\n$flash->warning(\"Hey, this is important\");\n```\n\n### public *string* \\| *void* **outputMessage** (*mixed* $type, *string* \\| *array* $message) inherited from [*Phalcon\\Flash*](phalcon_flash)\n\nOutputs a message formatting it with HTML\n\n``` php\n$flash->outputMessage(\"error\", $message);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Session.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Session.html)"
- name: Flash\Session::getMessages
  id: api/phalcon_flash_session#getmessages
  summary: null
  belongs_to: Flash\Session
  description: |-
    ### public **getMessages** (\[*mixed* $type\], \[*mixed* $remove\])

    Returns the messages in the session flasher
- name: Flash\Session::has
  id: api/phalcon_flash_session#has
  summary: null
  belongs_to: Flash\Session
  description: |-
    ### public **has** (\[*mixed* $type\])

    Checks whether there are messages
- name: Flash\Session::message
  id: api/phalcon_flash_session#message
  summary: null
  belongs_to: Flash\Session
  description: |-
    ### public **message** (*mixed* $type, *mixed* $message)

    Adds a message to the session flasher
- name: Flash\Session::output
  id: api/phalcon_flash_session#output
  summary: null
  belongs_to: Flash\Session
  description: |-
    ### public **output** (\[*mixed* $remove\])

    Prints the messages in the session flasher
- name: Forms
  id: reference/forms
  summary: Phalcon\Forms is a component that aids you in the creation and maintenance of forms in web applications
  description: "# Forms\n\n`Phalcon\\Forms` is a component that aids you in the creation and maintenance of forms in web applications.\n\nThe following example shows its basic usage:\n\n``` php\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\n\n$form = new Form();\n\n$form->add(\n    new Text(\n        \"name\"\n    )\n);\n\n$form->add(\n    new Text(\n        \"telephone\"\n    )\n);\n\n$form->add(\n    new Select(\n        \"telephoneType\",\n        [\n            \"H\" => \"Home\",\n            \"C\" => \"Cell\",\n        ]\n    )\n);\n```\n\nForms can be rendered based on the form definition:\n\n``` html\n<h1>\n    Contacts\n</h1>\n\n<form method=\"post\">\n\n    <p>\n        <label>\n            Name\n        </label>\n\n        <?php echo $form->render(\"name\"); ?>\n    </p>\n\n    <p>\n        <label>\n            Telephone\n        </label>\n\n        <?php echo $form->render(\"telephone\"); ?>\n    </p>\n\n    <p>\n        <label>\n            Type\n        </label>\n\n        <?php echo $form->render(\"telephoneType\"); ?>\n    </p>\n\n\n\n    <p>\n        <input type=\"submit\" value=\"Save\" />\n    </p>\n\n</form>\n```\n\nEach element in the form can be rendered as required by the developer. Internally, [*Phalcon\\Tag*](../api/phalcon_tag) is used to produce the correct HTML for each element and you can pass additional HTML attributes as the second parameter of `render()`:\n\n``` html\n<p>\n    <label>\n        Name\n    </label>\n\n    <?php echo $form->render(\"name\", [\"maxlength\" => 30, \"placeholder\" => \"Type your name\"]); ?>\n</p>\n```\n\nHTML attributes also can be set in the element’s definition:\n\n``` php\n$form->add(\n    new Text(\n        \"name\",\n        [\n            \"maxlength\"   => 30,\n            \"placeholder\" => \"Type your name\",\n        ]\n    )\n);\n```\n\n## Initializing forms\n\nAs seen before, forms can be initialized outside the form class by adding elements to it. You can re-use code or organize your form classes implementing the form in a separated file:\n\n``` php\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\n\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        $this->add(\n            new Text(\n                \"name\"\n            )\n        );\n\n        $this->add(\n            new Text(\n                \"telephone\"\n            )\n        );\n\n        $this->add(\n            new Select(\n                \"telephoneType\",\n                TelephoneTypes::find(),\n                [\n                    \"using\" => [\n                        \"id\",\n                        \"name\",\n                    ]\n                ]\n            )\n        );\n    }\n}\n```\n\n[*Phalcon\\Forms\\Form*](../api/phalcon_forms_form) extends [*Phalcon\\Di\\Injectable*](../api/phalcon_di_injectable) so you have access to the application services if needed:\n\n``` php\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\n\nclass ContactForm extends Form\n{\n    /**\n     * This method returns the default value for field 'csrf'\n     */\n    public function getCsrf()\n    {\n        return $this->security->getToken();\n    }\n\n    public function initialize()\n    {\n        // Set the same form as entity\n        $this->setEntity($this);\n\n        // Add a text element to capture the 'email'\n        $this->add(\n            new Text(\n                \"email\"\n            )\n        );\n\n        // Add a text element to put a hidden CSRF\n        $this->add(\n            new Hidden(\n                \"csrf\"\n            )\n        );\n    }\n}\n```\n\nThe associated entity added to the form in the initialization and custom user options are passed to the form constructor:\n\n``` php\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\n\nclass UsersForm extends Form\n{\n    /**\n     * Forms initializer\n     *\n     * @param Users $user\n     * @param array $options\n     */\n    public function initialize(Users $user, array $options)\n    {\n        if ($options[\"edit\"]) {\n            $this->add(\n                new Hidden(\n                    \"id\"\n                )\n            );\n        } else {\n            $this->add(\n                new Text(\n                    \"id\"\n                )\n            );\n        }\n\n        $this->add(\n            new Text(\n                \"name\"\n            )\n        );\n    }\n}\n```\n\nIn the form’s instantiation you must use:\n\n``` php\n$form = new UsersForm(\n    new Users(),\n    [\n        \"edit\" => true,\n    ]\n);\n```\n\n## Validation\n\nPhalcon forms are integrated with the [*validation*](validation) component to offer instant validation. Built-in or custom validators could be set to each element:\n\n``` php\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\StringLength;\n\n$name = new Text(\n    \"name\"\n);\n\n$name->addValidator(\n    new PresenceOf(\n        [\n            \"message\" => \"The name is required\",\n        ]\n    )\n);\n\n$name->addValidator(\n    new StringLength(\n        [\n            \"min\"            => 10,\n            \"messageMinimum\" => \"The name is too short\",\n        ]\n    )\n);\n\n$form->add($name);\n```\n\nThen you can validate the form according to the input entered by the user:\n\n``` php\nif (!$form->isValid($_POST)) {\n    $messages = $form->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"<br>\";\n    }\n}\n```\n\nValidators are executed in the same order as they were registered.\n\nBy default messages generated by all the elements in the form are joined so they can be traversed using a single foreach, you can change this behavior to get the messages separated by the field:\n\n``` php\nforeach ($form->getMessages(false) as $attribute => $messages) {\n    echo \"Messages generated by \", $attribute, \":\", \"\\n\";\n\n    foreach ($messages as $message) {\n        echo $message, \"<br>\";\n    }\n}\n```\n\nOr get specific messages for an element:\n\n``` php\n$messages = $form->getMessagesFor(\"name\");\n\nforeach ($messages as $message) {\n    echo $message, \"<br>\";\n}\n```\n\n## Filtering\n\nA form is also able to filter data before it is validated. You can set filters in each element:\n\n``` php\nuse Phalcon\\Forms\\Element\\Text;\n\n$name = new Text(\n    \"name\"\n);\n\n// Set multiple filters\n$name->setFilters(\n    [\n        \"string\",\n        \"trim\",\n    ]\n);\n\n$form->add($name);\n\n\n\n$email = new Text(\n    \"email\"\n);\n\n// Set one filter\n$email->setFilters(\n    \"email\"\n);\n\n$form->add($email);\n```\n\n> Learn more about filtering in Phalcon by reading the [*Filter documentation*](filter).\n\n## Forms + Entities\n\nAn entity such as a model/collection/plain instance or just a plain PHP class can be linked to the form in order to set default values in the form’s elements or assign the values from the form to the entity easily:\n\n``` php\n$robot = Robots::findFirst();\n\n$form = new Form($robot);\n\n$form->add(\n    new Text(\n        \"name\"\n    )\n);\n\n$form->add(\n    new Text(\n        \"year\"\n    )\n);\n```\n\nOnce the form is rendered if there is no default values assigned to the elements it will use the ones provided by the entity:\n\n``` html\n<?php echo $form->render(\"name\"); ?>\n```\n\nYou can validate the form and assign the values from the user input in the following way:\n\n``` php\n$form->bind($_POST, $robot);\n\n// Check if the form is valid\nif ($form->isValid()) {\n    // Save the entity\n    $robot->save();\n}\n```\n\nSetting up a plain class as entity also is possible:\n\n``` php\nclass Preferences\n{\n    public $timezone = \"Europe/Amsterdam\";\n\n    public $receiveEmails = \"No\";\n}\n```\n\nUsing this class as entity, allows the form to take the default values from it:\n\n``` php\n$form = new Form(\n    new Preferences()\n);\n\n$form->add(\n    new Select(\n        \"timezone\",\n        [\n            \"America/New_York\"  => \"New York\",\n            \"Europe/Amsterdam\"  => \"Amsterdam\",\n            \"America/Sao_Paulo\" => \"Sao Paulo\",\n            \"Asia/Tokyo\"        => \"Tokyo\",\n        ]\n    )\n);\n\n$form->add(\n    new Select(\n        \"receiveEmails\",\n        [\n            \"Yes\" => \"Yes, please!\",\n            \"No\"  => \"No, thanks\",\n        ]\n    )\n);\n```\n\nEntities can implement getters, which have a higher precedence than public properties. These methods give you more freedom to produce values:\n\n``` php\nclass Preferences\n{\n    public $timezone;\n\n    public $receiveEmails;\n\n\n\n    public function getTimezone()\n    {\n        return \"Europe/Amsterdam\";\n    }\n\n    public function getReceiveEmails()\n    {\n        return \"No\";\n    }\n}\n```\n\n## Form Elements\n\nPhalcon provides a set of built-in elements to use in your forms, all these elements are located in the [*Phalcon\\Forms\\Element*](../api/phalcon_forms_element) namespace:\n\n| Name                                                                      | Description                                                 |\n|---------------------------------------------------------------------------|-------------------------------------------------------------|\n| [*Phalcon\\Forms\\Element\\Text*](../api/phalcon_forms_element_text)         | Generate INPUT\\[type=text\\] elements                        |\n| [*Phalcon\\Forms\\Element\\Password*](../api/phalcon_forms_element_password) | Generate INPUT\\[type=password\\] elements                    |\n| [*Phalcon\\Forms\\Element\\Select*](../api/phalcon_forms_element_select)     | Generate SELECT tag (combo lists) elements based on choices |\n| [*Phalcon\\Forms\\Element\\Check*](../api/phalcon_forms_element_check)       | Generate INPUT\\[type=check\\] elements                       |\n| [*Phalcon\\Forms\\Element\\TextArea*](../api/phalcon_forms_element_textarea) | Generate TEXTAREA elements                                  |\n| [*Phalcon\\Forms\\Element\\Hidden*](../api/phalcon_forms_element_hidden)     | Generate INPUT\\[type=hidden\\] elements                      |\n| [*Phalcon\\Forms\\Element\\File*](../api/phalcon_forms_element_file)         | Generate INPUT\\[type=file\\] elements                        |\n| [*Phalcon\\Forms\\Element\\Date*](../api/phalcon_forms_element_date)         | Generate INPUT\\[type=date\\] elements                        |\n| [*Phalcon\\Forms\\Element\\Numeric*](../api/phalcon_forms_element_numeric)   | Generate INPUT\\[type=number\\] elements                      |\n| [*Phalcon\\Forms\\Element\\Submit*](../api/phalcon_forms_element_submit)     | Generate INPUT\\[type=submit\\] elements                      |\n\n## Event Callbacks\n\nWhenever forms are implemented as classes, the callbacks: `beforeValidation()` and `afterValidation()` can be implemented in the form’s class to perform pre-validations and post-validations:\n\n``` html\nuse Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function beforeValidation()\n    {\n\n    }\n}\n```\n\n## Rendering Forms\n\nYou can render the form with total flexibility, the following example shows how to render each element using a standard procedure:\n\n``` html\n<?php\n\n<form method=\"post\">\n    <?php\n\n        // Traverse the form\n        foreach ($form as $element) {\n            // Get any generated messages for the current element\n            $messages = $form->getMessagesFor(\n                $element->getName()\n            );\n\n            if (count($messages)) {\n                // Print each element\n                echo '<div class=\"messages\">';\n\n                foreach ($messages as $message) {\n                    echo $message;\n                }\n\n                echo \"</div>\";\n            }\n\n            echo \"<p>\";\n\n            echo '<label for=\"', $element->getName(), '\">', $element->getLabel(), \"</label>\";\n\n            echo $element;\n\n            echo \"</p>\";\n        }\n\n    ?>\n\n    <input type=\"submit\" value=\"Send\" />\n</form>\n```\n\nOr reuse the logic in your form class:\n\n``` php\nuse Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    public function renderDecorated($name)\n    {\n        $element  = $this->get($name);\n\n        // Get any generated messages for the current element\n        $messages = $this->getMessagesFor(\n            $element->getName()\n        );\n\n        if (count($messages)) {\n            // Print each element\n            echo '<div class=\"messages\">';\n\n            foreach ($messages as $message) {\n                echo $this->flash->error($message);\n            }\n\n            echo \"</div>\";\n        }\n\n        echo \"<p>\";\n\n        echo '<label for=\"', $element->getName(), '\">', $element->getLabel(), \"</label>\";\n\n        echo $element;\n\n        echo \"</p>\";\n    }\n}\n```\n\nIn the view:\n\n``` php\necho $element->renderDecorated(\"name\");\n\necho $element->renderDecorated(\"telephone\");\n```\n\n## Creating Form Elements\n\nIn addition to the form elements provided by Phalcon you can create your own custom elements:\n\n``` php\nuse Phalcon\\Forms\\Element;\n\nclass MyElement extends Element\n{\n    public function render($attributes = null)\n    {\n        $html = // ... Produce some HTML\n\n        return $html;\n    }\n}\n```\n\n## Forms Manager\n\nThis component provides a forms manager that can be used by the developer to register forms and access them via the service locator:\n\n``` php\nuse Phalcon\\Forms\\Manager as FormsManager;\n\n$di[\"forms\"] = function () {\n    return new FormsManager();\n};\n```\n\nForms are added to the forms manager and referenced by a unique name:\n\n``` php\n$this->forms->set(\n    \"login\",\n    new LoginForm()\n);\n```\n\nUsing the unique name, forms can be accessed in any part of the application:\n\n``` php\n$loginForm = $this->forms->get(\"login\");\n\necho $loginForm->render();\n```\n\n## External Resources\n\n- [Vökuró](http://vokuro.phalconphp.com), is a sample application that uses the forms builder to create and manage forms, \\[[Github](https://github.com/phalcon/vokuro)\\]\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/forms.html](https://docs.phalconphp.com/en/latest/reference/forms.html)"
- name: Forms\Element
  id: api/phalcon_forms_element
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Forms\\Element**\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element.zep)\n\nThis is a base class for form elements\n\n## Methods\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\])\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form)\n\nSets the parent form to the element\n\n### public **getForm** ()\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name)\n\nSets the element name\n\n### public **getName** ()\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** ()\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\])\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\nAdds a validator to the element\n\n### public **getValidators** ()\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\])\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\])\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes)\n\nSets default attributes for the element\n\n### public **getAttributes** ()\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\])\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options)\n\nSets options for the element\n\n### public **getUserOptions** ()\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label)\n\nSets the element label\n\n### public **getLabel** ()\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\])\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** ()\n\nReturns the default value assigned to the element\n\n### public **getValue** ()\n\nReturns the element value\n\n### public **getMessages** ()\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** ()\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message)\n\nAppends a message to the internal message list\n\n### public **clear** ()\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** ()\n\nMagic method \\_\\_toString renders the widget without attributes\n\n### abstract public **render** (\\[*mixed* $attributes\\]) inherited from [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element.html)"
- name: Forms\Element::addFilter
  id: api/phalcon_forms_element#addfilter
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **addFilter** (*mixed* $filter)

    Adds a filter to current list of filters
- name: Forms\Element::addValidator
  id: api/phalcon_forms_element#addvalidator
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **addValidator** ([*Phalcon\Validation\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)

    Adds a validator to the element
- name: Forms\Element::addValidators
  id: api/phalcon_forms_element#addvalidators
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public [*Phalcon\Forms\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \[*mixed* $merge\])

    Adds a group of validators
- name: Forms\Element::appendMessage
  id: api/phalcon_forms_element#appendmessage
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **appendMessage** ([*Phalcon\Validation\MessageInterface*](phalcon_validation_messageinterface) $message)

    Appends a message to the internal message list
- name: Forms\Element::clear
  id: api/phalcon_forms_element#clear
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element
  description: "### public **clear** ()\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** ()\n\nMagic method \\_\\_toString renders the widget without attributes\n\n### abstract public **render** (\\[*mixed* $attributes\\]) inherited from [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element.html)"
- name: Forms\Element::getAttribute
  id: api/phalcon_forms_element#getattribute
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public *mixed* **getAttribute** (*string* $attribute, \[*mixed* $defaultValue\])

    Returns the value of an attribute if present
- name: Forms\Element::getAttributes
  id: api/phalcon_forms_element#getattributes
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getAttributes** ()

    Returns the default attributes for the element
- name: Forms\Element::getDefault
  id: api/phalcon_forms_element#getdefault
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getDefault** ()

    Returns the default value assigned to the element
- name: Forms\Element::getFilters
  id: api/phalcon_forms_element#getfilters
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public *mixed* **getFilters** ()

    Returns the element filters
- name: Forms\Element::getForm
  id: api/phalcon_forms_element#getform
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getForm** ()

    Returns the parent form to the element
- name: Forms\Element::getLabel
  id: api/phalcon_forms_element#getlabel
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getLabel** ()

    Returns the element label
- name: Forms\Element::getMessages
  id: api/phalcon_forms_element#getmessages
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getMessages** ()

    Returns the messages that belongs to the element The element needs to be attached to a form
- name: Forms\Element::getName
  id: api/phalcon_forms_element#getname
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getName** ()

    Returns the element name
- name: Forms\Element::getUserOption
  id: api/phalcon_forms_element#getuseroption
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public *mixed* **getUserOption** (*string* $option, \[*mixed* $defaultValue\])

    Returns the value of an option if present
- name: Forms\Element::getUserOptions
  id: api/phalcon_forms_element#getuseroptions
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getUserOptions** ()

    Returns the options for the element
- name: Forms\Element::getValidators
  id: api/phalcon_forms_element#getvalidators
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getValidators** ()

    Returns the validators registered for the element
- name: Forms\Element::getValue
  id: api/phalcon_forms_element#getvalue
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **getValue** ()

    Returns the element value
- name: Forms\Element::hasMessages
  id: api/phalcon_forms_element#hasmessages
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **hasMessages** ()

    Checks whether there are messages attached to the element
- name: Forms\Element::label
  id: api/phalcon_forms_element#label
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **label** (\[*array* $attributes\])

    Generate the HTML to label the element
- name: Forms\Element::prepareAttributes
  id: api/phalcon_forms_element#prepareattributes
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **prepareAttributes** (\[*array* $attributes\], \[*mixed* $useChecked\])

    Returns an array of prepared attributes for Phalcon\Tag helpers according to the element parameters
- name: Forms\Element::setAttribute
  id: api/phalcon_forms_element#setattribute
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public [*Phalcon\Forms\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value)

    Sets a default attribute for the element
- name: Forms\Element::setAttributes
  id: api/phalcon_forms_element#setattributes
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **setAttributes** (*array* $attributes)

    Sets default attributes for the element
- name: Forms\Element::setDefault
  id: api/phalcon_forms_element#setdefault
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public [*Phalcon\Forms\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value)

    Sets a default value in case the form does not use an entity or there is no value available for the element in \_POST
- name: Forms\Element::setFilters
  id: api/phalcon_forms_element#setfilters
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public [*Phalcon\Forms\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \| *string* $filters)

    Sets the element filters
- name: Forms\Element::setForm
  id: api/phalcon_forms_element#setform
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **setForm** ([*Phalcon\Forms\Form*](phalcon_forms_form) $form)

    Sets the parent form to the element
- name: Forms\Element::setLabel
  id: api/phalcon_forms_element#setlabel
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **setLabel** (*mixed* $label)

    Sets the element label
- name: Forms\Element::setMessages
  id: api/phalcon_forms_element#setmessages
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **setMessages** ([*Phalcon\Validation\Message\Group*](phalcon_validation_message_group) $group)

    Sets the validation messages related to the element
- name: Forms\Element::setName
  id: api/phalcon_forms_element#setname
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **setName** (*mixed* $name)

    Sets the element name
- name: Forms\Element::setUserOption
  id: api/phalcon_forms_element#setuseroption
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public [*Phalcon\Forms\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value)

    Sets an option for the element
- name: Forms\Element::setUserOptions
  id: api/phalcon_forms_element#setuseroptions
  summary: null
  belongs_to: Forms\Element
  description: |-
    ### public **setUserOptions** (*array* $options)

    Sets options for the element
- name: Forms\ElementInterface
  id: api/phalcon_forms_elementinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Forms\\ElementInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/elementinterface.zep)\n\n## Methods\n\n### abstract public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form)\n\n...\n\n### abstract public **getForm** ()\n\n...\n\n### abstract public **setName** (*mixed* $name)\n\n...\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **setFilters** (*mixed* $filters)\n\n...\n\n### abstract public **addFilter** (*mixed* $filter)\n\n...\n\n### abstract public **getFilters** ()\n\n...\n\n### abstract public **addValidators** (*array* $validators, \\[*mixed* $merge\\])\n\n...\n\n### abstract public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\n...\n\n### abstract public **getValidators** ()\n\n...\n\n### abstract public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\])\n\n...\n\n### abstract public **setAttribute** (*mixed* $attribute, *mixed* $value)\n\n...\n\n### abstract public **getAttribute** (*mixed* $attribute, \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **setAttributes** (*array* $attributes)\n\n...\n\n### abstract public **getAttributes** ()\n\n...\n\n### abstract public **setUserOption** (*mixed* $option, *mixed* $value)\n\n...\n\n### abstract public **getUserOption** (*mixed* $option, \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **setUserOptions** (*array* $options)\n\n...\n\n### abstract public **getUserOptions** ()\n\n...\n\n### abstract public **setLabel** (*mixed* $label)\n\n...\n\n### abstract public **getLabel** ()\n\n...\n\n### abstract public **label** ()\n\n...\n\n### abstract public **setDefault** (*mixed* $value)\n\n...\n\n### abstract public **getDefault** ()\n\n...\n\n### abstract public **getValue** ()\n\n...\n\n### abstract public **getMessages** ()\n\n...\n\n### abstract public **hasMessages** ()\n\n...\n\n### abstract public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group)\n\n...\n\n### abstract public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message)\n\n...\n\n### abstract public **clear** ()\n\n...\n\n### abstract public **render** (\\[*mixed* $attributes\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_ElementInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_ElementInterface.html)"
- name: Forms\ElementInterface::addFilter
  id: api/phalcon_forms_elementinterface#addfilter
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **addFilter** (*mixed* $filter)

    ...
- name: Forms\ElementInterface::addValidator
  id: api/phalcon_forms_elementinterface#addvalidator
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **addValidator** ([*Phalcon\Validation\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)

    ...
- name: Forms\ElementInterface::addValidators
  id: api/phalcon_forms_elementinterface#addvalidators
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **addValidators** (*array* $validators, \[*mixed* $merge\])

    ...
- name: Forms\ElementInterface::appendMessage
  id: api/phalcon_forms_elementinterface#appendmessage
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **appendMessage** ([*Phalcon\Validation\MessageInterface*](phalcon_validation_messageinterface) $message)

    ...
- name: Forms\ElementInterface::clear
  id: api/phalcon_forms_elementinterface#clear
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **clear** ()

    ...
- name: Forms\ElementInterface::getAttribute
  id: api/phalcon_forms_elementinterface#getattribute
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getAttribute** (*mixed* $attribute, \[*mixed* $defaultValue\])

    ...
- name: Forms\ElementInterface::getAttributes
  id: api/phalcon_forms_elementinterface#getattributes
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getAttributes** ()

    ...
- name: Forms\ElementInterface::getDefault
  id: api/phalcon_forms_elementinterface#getdefault
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getDefault** ()

    ...
- name: Forms\ElementInterface::getFilters
  id: api/phalcon_forms_elementinterface#getfilters
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getFilters** ()

    ...
- name: Forms\ElementInterface::getForm
  id: api/phalcon_forms_elementinterface#getform
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getForm** ()

    ...
- name: Forms\ElementInterface::getLabel
  id: api/phalcon_forms_elementinterface#getlabel
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getLabel** ()

    ...
- name: Forms\ElementInterface::getMessages
  id: api/phalcon_forms_elementinterface#getmessages
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getMessages** ()

    ...
- name: Forms\ElementInterface::getName
  id: api/phalcon_forms_elementinterface#getname
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Forms\ElementInterface::getUserOption
  id: api/phalcon_forms_elementinterface#getuseroption
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getUserOption** (*mixed* $option, \[*mixed* $defaultValue\])

    ...
- name: Forms\ElementInterface::getUserOptions
  id: api/phalcon_forms_elementinterface#getuseroptions
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getUserOptions** ()

    ...
- name: Forms\ElementInterface::getValidators
  id: api/phalcon_forms_elementinterface#getvalidators
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getValidators** ()

    ...
- name: Forms\ElementInterface::getValue
  id: api/phalcon_forms_elementinterface#getvalue
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **getValue** ()

    ...
- name: Forms\ElementInterface::hasMessages
  id: api/phalcon_forms_elementinterface#hasmessages
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **hasMessages** ()

    ...
- name: Forms\ElementInterface::label
  id: api/phalcon_forms_elementinterface#label
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **label** ()

    ...
- name: Forms\ElementInterface::prepareAttributes
  id: api/phalcon_forms_elementinterface#prepareattributes
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **prepareAttributes** (\[*array* $attributes\], \[*mixed* $useChecked\])

    ...
- name: Forms\ElementInterface::render
  id: api/phalcon_forms_elementinterface#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\ElementInterface
  description: "### abstract public **render** (\\[*mixed* $attributes\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_ElementInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_ElementInterface.html)"
- name: Forms\ElementInterface::setAttribute
  id: api/phalcon_forms_elementinterface#setattribute
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setAttribute** (*mixed* $attribute, *mixed* $value)

    ...
- name: Forms\ElementInterface::setAttributes
  id: api/phalcon_forms_elementinterface#setattributes
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setAttributes** (*array* $attributes)

    ...
- name: Forms\ElementInterface::setDefault
  id: api/phalcon_forms_elementinterface#setdefault
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setDefault** (*mixed* $value)

    ...
- name: Forms\ElementInterface::setFilters
  id: api/phalcon_forms_elementinterface#setfilters
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setFilters** (*mixed* $filters)

    ...
- name: Forms\ElementInterface::setForm
  id: api/phalcon_forms_elementinterface#setform
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setForm** ([*Phalcon\Forms\Form*](phalcon_forms_form) $form)

    ...
- name: Forms\ElementInterface::setLabel
  id: api/phalcon_forms_elementinterface#setlabel
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setLabel** (*mixed* $label)

    ...
- name: Forms\ElementInterface::setMessages
  id: api/phalcon_forms_elementinterface#setmessages
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setMessages** ([*Phalcon\Validation\Message\Group*](phalcon_validation_message_group) $group)

    ...
- name: Forms\ElementInterface::setName
  id: api/phalcon_forms_elementinterface#setname
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setName** (*mixed* $name)

    ...
- name: Forms\ElementInterface::setUserOption
  id: api/phalcon_forms_elementinterface#setuseroption
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setUserOption** (*mixed* $option, *mixed* $value)

    ...
- name: Forms\ElementInterface::setUserOptions
  id: api/phalcon_forms_elementinterface#setuseroptions
  summary: null
  belongs_to: Forms\ElementInterface
  description: |-
    ### abstract public **setUserOptions** (*array* $options)

    ...
- name: Forms\Element\Check
  id: api/phalcon_forms_element_check
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Check**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/check.zep)\n\nComponent INPUT\\[type=check\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Check.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Check.html)"
- name: Forms\Element\Check::render
  id: api/phalcon_forms_element_check#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Check
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Check.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Check.html)"
- name: Forms\Element\Date
  id: api/phalcon_forms_element_date
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Date**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/date.zep)\n\nComponent INPUT\\[type=date\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Date.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Date.html)"
- name: Forms\Element\Date::render
  id: api/phalcon_forms_element_date#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Date
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Date.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Date.html)"
- name: Forms\Element\Email
  id: api/phalcon_forms_element_email
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Email**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/email.zep)\n\nComponent INPUT\\[type=email\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Email.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Email.html)"
- name: Forms\Element\Email::render
  id: api/phalcon_forms_element_email#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Email
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Email.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Email.html)"
- name: Forms\Element\File
  id: api/phalcon_forms_element_file
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\File**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/file.zep)\n\nComponent INPUT\\[type=file\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_File.html)"
- name: Forms\Element\File::render
  id: api/phalcon_forms_element_file#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\File
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_File.html)"
- name: Forms\Element\Hidden
  id: api/phalcon_forms_element_hidden
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Hidden**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/hidden.zep)\n\nComponent INPUT\\[type=hidden\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Hidden.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Hidden.html)"
- name: Forms\Element\Hidden::render
  id: api/phalcon_forms_element_hidden#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Hidden
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Hidden.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Hidden.html)"
- name: Forms\Element\Numeric
  id: api/phalcon_forms_element_numeric
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Numeric**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/numeric.zep)\n\nComponent INPUT\\[type=number\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Numeric.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Numeric.html)"
- name: Forms\Element\Numeric::render
  id: api/phalcon_forms_element_numeric#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Numeric
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Numeric.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Numeric.html)"
- name: Forms\Element\Password
  id: api/phalcon_forms_element_password
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Password**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/password.zep)\n\nComponent INPUT\\[type=password\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Password.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Password.html)"
- name: Forms\Element\Password::render
  id: api/phalcon_forms_element_password#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Password
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Password.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Password.html)"
- name: Forms\Element\Radio
  id: api/phalcon_forms_element_radio
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Radio**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/radio.zep)\n\nComponent INPUT\\[type=radio\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Radio.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Radio.html)"
- name: Forms\Element\Radio::render
  id: api/phalcon_forms_element_radio#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Radio
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Radio.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Radio.html)"
- name: Forms\Element\Select
  id: api/phalcon_forms_element_select
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Select**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/select.zep)\n\nComponent SELECT (choice) for forms\n\n## Methods\n\n### public **\\_\\_construct** (*string* $name, \\[*object* \\| *array* $options\\], \\[*array* $attributes\\])\n\nPhalcon\\Forms\\Element constructor\n\n### public [*Phalcon\\Forms\\Element*](phalcon_forms_element) **setOptions** (*array* \\| *object* $options)\n\nSet the choice’s options\n\n### public *array* \\| *object* **getOptions** ()\n\nReturns the choices’ options\n\n### public *this* **addOption** (*array* $option)\n\nAdds an option to the current options\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Select.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Select.html)"
- name: Forms\Element\Select::addOption
  id: api/phalcon_forms_element_select#addoption
  summary: null
  belongs_to: Forms\Element\Select
  description: |-
    ### public *this* **addOption** (*array* $option)

    Adds an option to the current options
- name: Forms\Element\Select::getOptions
  id: api/phalcon_forms_element_select#getoptions
  summary: null
  belongs_to: Forms\Element\Select
  description: |-
    ### public *array* \| *object* **getOptions** ()

    Returns the choices’ options
- name: Forms\Element\Select::render
  id: api/phalcon_forms_element_select#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Select
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget returning html\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Select.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Select.html)"
- name: Forms\Element\Select::setOptions
  id: api/phalcon_forms_element_select#setoptions
  summary: null
  belongs_to: Forms\Element\Select
  description: |-
    ### public [*Phalcon\Forms\Element*](phalcon_forms_element) **setOptions** (*array* \| *object* $options)

    Set the choice’s options
- name: Forms\Element\Submit
  id: api/phalcon_forms_element_submit
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Submit**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/submit.zep)\n\nComponent INPUT\\[type=submit\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Submit.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Submit.html)"
- name: Forms\Element\Submit::render
  id: api/phalcon_forms_element_submit#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Submit
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Submit.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Submit.html)"
- name: Forms\Element\Text
  id: api/phalcon_forms_element_text
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\Text**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/text.zep)\n\nComponent INPUT\\[type=text\\] for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Text.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Text.html)"
- name: Forms\Element\Text::render
  id: api/phalcon_forms_element_text#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\Text
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Text.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Text.html)"
- name: Forms\Element\TextArea
  id: api/phalcon_forms_element_textarea
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Element\\TextArea**\n\n*extends* abstract class [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\n*implements* [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/textarea.zep)\n\nComponent TEXTAREA for forms\n\n## Methods\n\n### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_TextArea.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_TextArea.html)"
- name: Forms\Element\TextArea::render
  id: api/phalcon_forms_element_textarea#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Element\TextArea
  description: "### public **render** (\\[*array* $attributes\\])\n\nRenders the element widget\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nPhalcon\\Forms\\Element constructor\n\n### public **setForm** ([*Phalcon\\Forms\\Form*](phalcon_forms_form) $form) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the parent form to the element\n\n### public **getForm** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the parent form to the element\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element name\n\n### public **getName** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element name\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setFilters** (*array* \\| *string* $filters) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element filters\n\n### public **addFilter** (*mixed* $filter) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a filter to current list of filters\n\n### public *mixed* **getFilters** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element filters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **addValidators** (*array* $validators, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a group of validators\n\n### public **addValidator** ([*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAdds a validator to the element\n\n### public **getValidators** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the validators registered for the element\n\n### public **prepareAttributes** (\\[*array* $attributes\\], \\[*mixed* $useChecked\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setAttribute** (*string* $attribute, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default attribute for the element\n\n### public *mixed* **getAttribute** (*string* $attribute, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an attribute if present\n\n### public **setAttributes** (*array* $attributes) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets default attributes for the element\n\n### public **getAttributes** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default attributes for the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setUserOption** (*string* $option, *mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets an option for the element\n\n### public *mixed* **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets options for the element\n\n### public **getUserOptions** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the options for the element\n\n### public **setLabel** (*mixed* $label) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the element label\n\n### public **getLabel** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element label\n\n### public **label** (\\[*array* $attributes\\]) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nGenerate the HTML to label the element\n\n### public [*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) **setDefault** (*mixed* $value) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets a default value in case the form does not use an entity or there is no value available for the element in \\_POST\n\n### public **getDefault** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the default value assigned to the element\n\n### public **getValue** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the element value\n\n### public **getMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nReturns the messages that belongs to the element The element needs to be attached to a form\n\n### public **hasMessages** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nChecks whether there are messages attached to the element\n\n### public **setMessages** ([*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) $group) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nSets the validation messages related to the element\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message) inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nAppends a message to the internal message list\n\n### public **clear** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nClears every element in the form to its default value\n\n### public **\\_\\_toString** () inherited from [*Phalcon\\Forms\\Element*](phalcon_forms_element)\n\nMagic method \\_\\_toString renders the widget without attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_TextArea.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_TextArea.html)"
- name: Forms\Exception
  id: api/phalcon_forms_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Exception.html)"
- name: Forms\Form
  id: api/phalcon_forms_form
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Form**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [Countable](http://php.net/manual/en/class.countable.php), [Iterator](http://php.net/manual/en/class.iterator.php), [Traversable](http://php.net/manual/en/class.traversable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/form.zep)\n\nThis component allows to build forms using an object-oriented interface\n\n## Methods\n\n### public **setValidation** (*mixed* $validation)\n\n...\n\n### public **getValidation** ()\n\n...\n\n### public **\\_\\_construct** (\\[*object* $entity\\], \\[*array* $userOptions\\])\n\nPhalcon\\Forms\\Form constructor\n\n### public **setAction** (*mixed* $action)\n\nSets the form’s action\n\n### public **getAction** ()\n\nReturns the form’s action\n\n### public **setUserOption** (*string* $option, *mixed* $value)\n\nSets an option for the form\n\n### public **getUserOption** (*string* $option, \\[*mixed* $defaultValue\\])\n\nReturns the value of an option if present\n\n### public **setUserOptions** (*array* $options)\n\nSets options for the element\n\n### public **getUserOptions** ()\n\nReturns the options for the element\n\n### public **setEntity** (*object* $entity)\n\nSets the entity related to the model\n\n### public *object* **getEntity** ()\n\nReturns the entity related to the model\n\n### public **getElements** ()\n\nReturns the form elements added to the form\n\n### public **bind** (*array* $data, *object* $entity, \\[*array* $whitelist\\])\n\nBinds data to the entity\n\n### public **isValid** (\\[*array* $data\\], \\[*object* $entity\\])\n\nValidates the form\n\n### public **getMessages** (\\[*mixed* $byItemName\\])\n\nReturns the messages generated in the validation\n\n### public **getMessagesFor** (*mixed* $name)\n\nReturns the messages generated for a specific element\n\n### public **hasMessagesFor** (*mixed* $name)\n\nCheck if messages were generated for a specific element\n\n### public **add** ([*Phalcon\\Forms\\ElementInterface*](phalcon_forms_elementinterface) $element, \\[*mixed* $position\\], \\[*mixed* $type\\])\n\nAdds an element to the form\n\n### public **render** (*string* $name, \\[*array* $attributes\\])\n\nRenders a specific item in the form\n\n### public **get** (*mixed* $name)\n\nReturns an element added to the form by its name\n\n### public **label** (*mixed* $name, \\[*array* $attributes\\])\n\nGenerate the label of an element added to the form including HTML\n\n### public **getLabel** (*mixed* $name)\n\nReturns a label for an element\n\n### public **getValue** (*mixed* $name)\n\nGets a value from the internal related entity or from the default value\n\n### public **has** (*mixed* $name)\n\nCheck if the form contains an element\n\n### public **remove** (*mixed* $name)\n\nRemoves an element from the form\n\n### public **clear** (\\[*array* $fields\\])\n\nClears every element in the form to its default value\n\n### public **count** ()\n\nReturns the number of elements in the form\n\n### public **rewind** ()\n\nRewinds the internal iterator\n\n### public **current** ()\n\nReturns the current element in the iterator\n\n### public **key** ()\n\nReturns the current position/key in the iterator\n\n### public **next** ()\n\nMoves the internal iteration pointer to the next position\n\n### public **valid** ()\n\nCheck if the current element in the iterator is valid\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Form.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Form.html)"
- name: Forms\Form::add
  id: api/phalcon_forms_form#add
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **add** ([*Phalcon\Forms\ElementInterface*](phalcon_forms_elementinterface) $element, \[*mixed* $position\], \[*mixed* $type\])

    Adds an element to the form
- name: Forms\Form::bind
  id: api/phalcon_forms_form#bind
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **bind** (*array* $data, *object* $entity, \[*array* $whitelist\])

    Binds data to the entity
- name: Forms\Form::clear
  id: api/phalcon_forms_form#clear
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **clear** (\[*array* $fields\])

    Clears every element in the form to its default value
- name: Forms\Form::count
  id: api/phalcon_forms_form#count
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **count** ()

    Returns the number of elements in the form
- name: Forms\Form::current
  id: api/phalcon_forms_form#current
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **current** ()

    Returns the current element in the iterator
- name: Forms\Form::get
  id: api/phalcon_forms_form#get
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **get** (*mixed* $name)

    Returns an element added to the form by its name
- name: Forms\Form::getAction
  id: api/phalcon_forms_form#getaction
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getAction** ()

    Returns the form’s action
- name: Forms\Form::getElements
  id: api/phalcon_forms_form#getelements
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getElements** ()

    Returns the form elements added to the form
- name: Forms\Form::getEntity
  id: api/phalcon_forms_form#getentity
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public *object* **getEntity** ()

    Returns the entity related to the model
- name: Forms\Form::getLabel
  id: api/phalcon_forms_form#getlabel
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getLabel** (*mixed* $name)

    Returns a label for an element
- name: Forms\Form::getMessages
  id: api/phalcon_forms_form#getmessages
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getMessages** (\[*mixed* $byItemName\])

    Returns the messages generated in the validation
- name: Forms\Form::getMessagesFor
  id: api/phalcon_forms_form#getmessagesfor
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getMessagesFor** (*mixed* $name)

    Returns the messages generated for a specific element
- name: Forms\Form::getUserOption
  id: api/phalcon_forms_form#getuseroption
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getUserOption** (*string* $option, \[*mixed* $defaultValue\])

    Returns the value of an option if present
- name: Forms\Form::getUserOptions
  id: api/phalcon_forms_form#getuseroptions
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getUserOptions** ()

    Returns the options for the element
- name: Forms\Form::getValidation
  id: api/phalcon_forms_form#getvalidation
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getValidation** ()

    ...

    ### public **\_\_construct** (\[*object* $entity\], \[*array* $userOptions\])

    Phalcon\Forms\Form constructor
- name: Forms\Form::getValue
  id: api/phalcon_forms_form#getvalue
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **getValue** (*mixed* $name)

    Gets a value from the internal related entity or from the default value
- name: Forms\Form::has
  id: api/phalcon_forms_form#has
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **has** (*mixed* $name)

    Check if the form contains an element
- name: Forms\Form::hasMessagesFor
  id: api/phalcon_forms_form#hasmessagesfor
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **hasMessagesFor** (*mixed* $name)

    Check if messages were generated for a specific element
- name: Forms\Form::isValid
  id: api/phalcon_forms_form#isvalid
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **isValid** (\[*array* $data\], \[*object* $entity\])

    Validates the form
- name: Forms\Form::key
  id: api/phalcon_forms_form#key
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **key** ()

    Returns the current position/key in the iterator
- name: Forms\Form::label
  id: api/phalcon_forms_form#label
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **label** (*mixed* $name, \[*array* $attributes\])

    Generate the label of an element added to the form including HTML
- name: Forms\Form::next
  id: api/phalcon_forms_form#next
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **next** ()

    Moves the internal iteration pointer to the next position
- name: Forms\Form::remove
  id: api/phalcon_forms_form#remove
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **remove** (*mixed* $name)

    Removes an element from the form
- name: Forms\Form::render
  id: api/phalcon_forms_form#render
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **render** (*string* $name, \[*array* $attributes\])

    Renders a specific item in the form
- name: Forms\Form::rewind
  id: api/phalcon_forms_form#rewind
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **rewind** ()

    Rewinds the internal iterator
- name: Forms\Form::setAction
  id: api/phalcon_forms_form#setaction
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **setAction** (*mixed* $action)

    Sets the form’s action
- name: Forms\Form::setEntity
  id: api/phalcon_forms_form#setentity
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **setEntity** (*object* $entity)

    Sets the entity related to the model
- name: Forms\Form::setUserOption
  id: api/phalcon_forms_form#setuseroption
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **setUserOption** (*string* $option, *mixed* $value)

    Sets an option for the form
- name: Forms\Form::setUserOptions
  id: api/phalcon_forms_form#setuseroptions
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **setUserOptions** (*array* $options)

    Sets options for the element
- name: Forms\Form::setValidation
  id: api/phalcon_forms_form#setvalidation
  summary: null
  belongs_to: Forms\Form
  description: |-
    ### public **setValidation** (*mixed* $validation)

    ...
- name: Forms\Form::valid
  id: api/phalcon_forms_form#valid
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Form
  description: "### public **valid** ()\n\nCheck if the current element in the iterator is valid\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Form.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Form.html)"
- name: Forms\Manager
  id: api/phalcon_forms_manager
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Forms\\Manager**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/manager.zep)\n\n## Methods\n\n### public **create** (*string* $name, \\[*object* $entity\\])\n\nCreates a form registering it in the forms manager\n\n### public **get** (*mixed* $name)\n\nReturns a form by its name\n\n### public **has** (*mixed* $name)\n\nChecks if a form is registered in the forms manager\n\n### public **set** (*mixed* $name, [*Phalcon\\Forms\\Form*](phalcon_forms_form) $form)\n\nRegisters a form in the Forms Manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Manager.html)"
- name: Forms\Manager::create
  id: api/phalcon_forms_manager#create
  summary: null
  belongs_to: Forms\Manager
  description: |-
    ### public **create** (*string* $name, \[*object* $entity\])

    Creates a form registering it in the forms manager
- name: Forms\Manager::get
  id: api/phalcon_forms_manager#get
  summary: null
  belongs_to: Forms\Manager
  description: |-
    ### public **get** (*mixed* $name)

    Returns a form by its name
- name: Forms\Manager::has
  id: api/phalcon_forms_manager#has
  summary: null
  belongs_to: Forms\Manager
  description: |-
    ### public **has** (*mixed* $name)

    Checks if a form is registered in the forms manager
- name: Forms\Manager::set
  id: api/phalcon_forms_manager#set
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Forms\Manager
  description: "### public **set** (*mixed* $name, [*Phalcon\\Forms\\Form*](phalcon_forms_form) $form)\n\nRegisters a form in the Forms Manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Manager.html)"
- name: Generating URLs and Paths
  id: reference/url
  summary: Phalcon\Mvc\Url is the component responsible of generate URLs in a Phalcon application
  description: "# Generating URLs and Paths\n\n[*Phalcon\\Mvc\\Url*](../api/phalcon_mvc_url) is the component responsible of generate URLs in a Phalcon application. It’s capable of produce independent URLs based on routes.\n\n## Setting a base URI\n\nDepending of which directory of your document root your application is installed, it may have a base URI or not.\n\nFor example, if your document root is /var/www/htdocs and your application is installed in /var/www/htdocs/invo then your baseUri will be /invo/. If you are using a VirtualHost or your application is installed on the document root, then your baseUri is /. Execute the following code to know the base URI detected by Phalcon:\n\n``` php\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\necho $url->getBaseUri();\n```\n\nBy default, Phalcon automatically may detect your baseUri, but if you want to increase the performance of your application is recommended setting up it manually:\n\n``` php\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Setting a relative base URI\n$url->setBaseUri(\"/invo/\");\n\n// Setting a full domain as base URI\n$url->setBaseUri(\"//my.domain.com/\");\n\n// Setting a full domain as base URI\n$url->setBaseUri(\"http://my.domain.com/my-app/\");\n```\n\nUsually, this component must be registered in the Dependency Injector container, so you can set up it there:\n\n``` php\nuse Phalcon\\Mvc\\Url;\n\n$di->set(\n    \"url\",\n    function () {\n        $url = new Url();\n\n        $url->setBaseUri(\"/invo/\");\n\n        return $url;\n    }\n);\n```\n\n## Generating URIs\n\nIf you are using the [*Router*](routing) with its default behavior. Your application is able to match routes based on the following pattern: /:controller/:action/:params. Accordingly it is easy to create routes that satisfy that pattern (or any other pattern defined in the router) passing a string to the method “get”:\n\n``` php\n<?php echo $url->get(\"products/save\"); ?>\n```\n\nNote that isn’t necessary to prepend the base URI. If you have named routes you can easily change it creating it dynamically. For Example if you have the following route:\n\n``` php\n$router->add(\n    \"/blog/{year}/{month}/{title}\",\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"show\",\n    ]\n)->setName(\"show-post\");\n```\n\nA URL can be generated in the following way:\n\n``` php\n// This produces: /blog/2015/01/some-blog-post\n$url->get(\n    [\n        \"for\"   => \"show-post\",\n        \"year\"  => \"2015\",\n        \"month\" => \"01\",\n        \"title\" => \"some-blog-post\",\n    ]\n);\n```\n\n## Producing URLs without mod_rewrite\n\nYou can use this component also to create URLs without mod_rewrite:\n\n``` php\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Pass the URI in $_GET[\"_url\"]\n$url->setBaseUri(\"/invo/index.php?_url=/\");\n\n// This produce: /invo/index.php?_url=/products/save\necho $url->get(\"products/save\");\n```\n\nYou can also use `$_SERVER[\"REQUEST_URI\"]`:\n\n``` php\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Pass the URI in $_GET[\"_url\"]\n$url->setBaseUri(\"/invo/index.php?_url=/\");\n\n// Pass the URI using $_SERVER[\"REQUEST_URI\"]\n$url->setBaseUri(\"/invo/index.php/\");\n```\n\nIn this case, it’s necessary to manually handle the required URI in the Router:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// ... Define routes\n\n$uri = str_replace($_SERVER[\"SCRIPT_NAME\"], \"\", $_SERVER[\"REQUEST_URI\"]);\n\n$router->handle($uri);\n```\n\nThe produced routes would look like:\n\n``` php\n// This produce: /invo/index.php/products/save\necho $url->get(\"products/save\");\n```\n\n## Producing URLs from Volt\n\nThe function “url” is available in volt to generate URLs using this component:\n\n``` html\n<a href=\"{{ url(\"posts/edit/1002\") }}\">Edit</a>\n```\n\nGenerate static routes:\n\n``` html\n<link rel=\"stylesheet\" href=\"{{ static_url(\"css/style.css\") }}\" type=\"text/css\" />\n```\n\n## Static vs. Dynamic URIs\n\nThis component allow you to set up a different base URI for static resources in the application:\n\n``` php\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Dynamic URIs are\n$url->setBaseUri(\"/\");\n\n// Static resources go through a CDN\n$url->setStaticBaseUri(\"http://static.mywebsite.com/\");\n```\n\n[*Phalcon\\Tag*](tags) will request both dynamical and static URIs using this component.\n\n## Implementing your own URL Generator\n\nThe [*Phalcon\\Mvc\\UrlInterface*](../api/phalcon_mvc_urlinterface) interface must be implemented to create your own URL generator replacing the one provided by Phalcon.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/url.html](https://docs.phalconphp.com/en/latest/reference/url.html)"
- name: Http\Cookie
  id: api/phalcon_http_cookie
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Http\\Cookie**\n\n*implements* [*Phalcon\\Http\\CookieInterface*](phalcon_http_cookieinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/cookie.zep)\n\nProvide OO wrappers to manage a HTTP cookie\n\n## Methods\n\n### public **\\_\\_construct** (*string* $name, \\[*mixed* $value\\], \\[*int* $expire\\], \\[*string* $path\\], \\[*boolean* $secure\\], \\[*string* $domain\\], \\[*boolean* $httpOnly\\])\n\nPhalcon\\Http\\Cookie constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public [*Phalcon\\Http\\Cookie*](phalcon_http_cookie) **setValue** (*string* $value)\n\nSets the cookie’s value\n\n### public *mixed* **getValue** (\\[*string* \\| *array* $filters\\], \\[*string* $defaultValue\\])\n\nReturns the cookie’s value\n\n### public **send** ()\n\nSends the cookie to the HTTP client Stores the cookie definition in session\n\n### public **restore** ()\n\nReads the cookie-related info from the SESSION to restore the cookie as it was set This method is automatically called internally so normally you don’t need to call it\n\n### public **delete** ()\n\nDeletes the cookie by setting an expire time in the past\n\n### public **useEncryption** (*mixed* $useEncryption)\n\nSets if the cookie must be encrypted/decrypted automatically\n\n### public **isUsingEncryption** ()\n\nCheck if the cookie is using implicit encryption\n\n### public **setExpiration** (*mixed* $expire)\n\nSets the cookie’s expiration time\n\n### public **getExpiration** ()\n\nReturns the current expiration time\n\n### public **setPath** (*mixed* $path)\n\nSets the cookie’s expiration time\n\n### public **getName** ()\n\nReturns the current cookie’s name\n\n### public **getPath** ()\n\nReturns the current cookie’s path\n\n### public **setDomain** (*mixed* $domain)\n\nSets the domain that the cookie is available to\n\n### public **getDomain** ()\n\nReturns the domain that the cookie is available to\n\n### public **setSecure** (*mixed* $secure)\n\nSets if the cookie must only be sent when the connection is secure (HTTPS)\n\n### public **getSecure** ()\n\nReturns whether the cookie must only be sent when the connection is secure (HTTPS)\n\n### public **setHttpOnly** (*mixed* $httpOnly)\n\nSets if the cookie is accessible only through the HTTP protocol\n\n### public **getHttpOnly** ()\n\nReturns if the cookie is accessible only through the HTTP protocol\n\n### public **\\_\\_toString** ()\n\nMagic \\_\\_toString method converts the cookie’s value to string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie.html)"
- name: Http\Cookie::delete
  id: api/phalcon_http_cookie#delete
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **delete** ()

    Deletes the cookie by setting an expire time in the past
- name: Http\Cookie::getDI
  id: api/phalcon_http_cookie#getdi
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Http\Cookie::getDomain
  id: api/phalcon_http_cookie#getdomain
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **getDomain** ()

    Returns the domain that the cookie is available to
- name: Http\Cookie::getExpiration
  id: api/phalcon_http_cookie#getexpiration
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **getExpiration** ()

    Returns the current expiration time
- name: Http\Cookie::getHttpOnly
  id: api/phalcon_http_cookie#gethttponly
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Cookie
  description: "### public **getHttpOnly** ()\n\nReturns if the cookie is accessible only through the HTTP protocol\n\n### public **\\_\\_toString** ()\n\nMagic \\_\\_toString method converts the cookie’s value to string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie.html)"
- name: Http\Cookie::getName
  id: api/phalcon_http_cookie#getname
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **getName** ()

    Returns the current cookie’s name
- name: Http\Cookie::getPath
  id: api/phalcon_http_cookie#getpath
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **getPath** ()

    Returns the current cookie’s path
- name: Http\Cookie::getSecure
  id: api/phalcon_http_cookie#getsecure
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **getSecure** ()

    Returns whether the cookie must only be sent when the connection is secure (HTTPS)
- name: Http\Cookie::getValue
  id: api/phalcon_http_cookie#getvalue
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public *mixed* **getValue** (\[*string* \| *array* $filters\], \[*string* $defaultValue\])

    Returns the cookie’s value
- name: Http\Cookie::isUsingEncryption
  id: api/phalcon_http_cookie#isusingencryption
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **isUsingEncryption** ()

    Check if the cookie is using implicit encryption
- name: Http\Cookie::restore
  id: api/phalcon_http_cookie#restore
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **restore** ()

    Reads the cookie-related info from the SESSION to restore the cookie as it was set This method is automatically called internally so normally you don’t need to call it
- name: Http\Cookie::send
  id: api/phalcon_http_cookie#send
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **send** ()

    Sends the cookie to the HTTP client Stores the cookie definition in session
- name: Http\Cookie::setDI
  id: api/phalcon_http_cookie#setdi
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Http\Cookie::setDomain
  id: api/phalcon_http_cookie#setdomain
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **setDomain** (*mixed* $domain)

    Sets the domain that the cookie is available to
- name: Http\Cookie::setExpiration
  id: api/phalcon_http_cookie#setexpiration
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **setExpiration** (*mixed* $expire)

    Sets the cookie’s expiration time
- name: Http\Cookie::setHttpOnly
  id: api/phalcon_http_cookie#sethttponly
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **setHttpOnly** (*mixed* $httpOnly)

    Sets if the cookie is accessible only through the HTTP protocol
- name: Http\Cookie::setPath
  id: api/phalcon_http_cookie#setpath
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **setPath** (*mixed* $path)

    Sets the cookie’s expiration time
- name: Http\Cookie::setSecure
  id: api/phalcon_http_cookie#setsecure
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **setSecure** (*mixed* $secure)

    Sets if the cookie must only be sent when the connection is secure (HTTPS)
- name: Http\Cookie::setValue
  id: api/phalcon_http_cookie#setvalue
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public [*Phalcon\Http\Cookie*](phalcon_http_cookie) **setValue** (*string* $value)

    Sets the cookie’s value
- name: Http\Cookie::useEncryption
  id: api/phalcon_http_cookie#useencryption
  summary: null
  belongs_to: Http\Cookie
  description: |-
    ### public **useEncryption** (*mixed* $useEncryption)

    Sets if the cookie must be encrypted/decrypted automatically
- name: Http\CookieInterface
  id: api/phalcon_http_cookieinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Http\\CookieInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/cookieinterface.zep)\n\n## Methods\n\n### abstract public **setValue** (*mixed* $value)\n\n...\n\n### abstract public **getValue** (\\[*mixed* $filters\\], \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **send** ()\n\n...\n\n### abstract public **delete** ()\n\n...\n\n### abstract public **useEncryption** (*mixed* $useEncryption)\n\n...\n\n### abstract public **isUsingEncryption** ()\n\n...\n\n### abstract public **setExpiration** (*mixed* $expire)\n\n...\n\n### abstract public **getExpiration** ()\n\n...\n\n### abstract public **setPath** (*mixed* $path)\n\n...\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **getPath** ()\n\n...\n\n### abstract public **setDomain** (*mixed* $domain)\n\n...\n\n### abstract public **getDomain** ()\n\n...\n\n### abstract public **setSecure** (*mixed* $secure)\n\n...\n\n### abstract public **getSecure** ()\n\n...\n\n### abstract public **setHttpOnly** (*mixed* $httpOnly)\n\n...\n\n### abstract public **getHttpOnly** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_CookieInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_CookieInterface.html)"
- name: Http\CookieInterface::delete
  id: api/phalcon_http_cookieinterface#delete
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **delete** ()

    ...
- name: Http\CookieInterface::getDomain
  id: api/phalcon_http_cookieinterface#getdomain
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **getDomain** ()

    ...
- name: Http\CookieInterface::getExpiration
  id: api/phalcon_http_cookieinterface#getexpiration
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **getExpiration** ()

    ...
- name: Http\CookieInterface::getHttpOnly
  id: api/phalcon_http_cookieinterface#gethttponly
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\CookieInterface
  description: "### abstract public **getHttpOnly** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_CookieInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_CookieInterface.html)"
- name: Http\CookieInterface::getName
  id: api/phalcon_http_cookieinterface#getname
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Http\CookieInterface::getPath
  id: api/phalcon_http_cookieinterface#getpath
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **getPath** ()

    ...
- name: Http\CookieInterface::getSecure
  id: api/phalcon_http_cookieinterface#getsecure
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **getSecure** ()

    ...
- name: Http\CookieInterface::getValue
  id: api/phalcon_http_cookieinterface#getvalue
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **getValue** (\[*mixed* $filters\], \[*mixed* $defaultValue\])

    ...
- name: Http\CookieInterface::isUsingEncryption
  id: api/phalcon_http_cookieinterface#isusingencryption
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **isUsingEncryption** ()

    ...
- name: Http\CookieInterface::send
  id: api/phalcon_http_cookieinterface#send
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **send** ()

    ...
- name: Http\CookieInterface::setDomain
  id: api/phalcon_http_cookieinterface#setdomain
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **setDomain** (*mixed* $domain)

    ...
- name: Http\CookieInterface::setExpiration
  id: api/phalcon_http_cookieinterface#setexpiration
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **setExpiration** (*mixed* $expire)

    ...
- name: Http\CookieInterface::setHttpOnly
  id: api/phalcon_http_cookieinterface#sethttponly
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **setHttpOnly** (*mixed* $httpOnly)

    ...
- name: Http\CookieInterface::setPath
  id: api/phalcon_http_cookieinterface#setpath
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **setPath** (*mixed* $path)

    ...
- name: Http\CookieInterface::setSecure
  id: api/phalcon_http_cookieinterface#setsecure
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **setSecure** (*mixed* $secure)

    ...
- name: Http\CookieInterface::setValue
  id: api/phalcon_http_cookieinterface#setvalue
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **setValue** (*mixed* $value)

    ...
- name: Http\CookieInterface::useEncryption
  id: api/phalcon_http_cookieinterface#useencryption
  summary: null
  belongs_to: Http\CookieInterface
  description: |-
    ### abstract public **useEncryption** (*mixed* $useEncryption)

    ...
- name: Http\Cookie\Exception
  id: api/phalcon_http_cookie_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Http\\Cookie\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/cookie/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie_Exception.html)"
- name: Http\Request
  id: api/phalcon_http_request
  summary: Encapsulates request information for easy and secure access from application controllers
  description: "# Class **Phalcon\\Http\\Request**\n\n*implements* [*Phalcon\\Http\\RequestInterface*](phalcon_http_requestinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request.zep)\n\nEncapsulates request information for easy and secure access from application controllers.\n\nThe request object is a simple value object that is passed between the dispatcher and controller classes. It packages the HTTP request environment.\n\n``` php\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\nif ($request->isPost() && $request->isAjax()) {\n    echo \"Request was made using POST and AJAX\";\n}\n\n$request->getServer(\"HTTP_HOST\"); // Retrieve SERVER variables\n$request->getMethod();            // GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH, PURGE, TRACE, CONNECT\n$request->getLanguages();         // An array of languages the client accepts\n```\n\n## Methods\n\n### public **getHttpMethodParameterOverride** ()\n\n...\n\n### public **setHttpMethodParameterOverride** (*mixed* $httpMethodParameterOverride)\n\n...\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **get** (\\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\], \\[*mixed* $notAllowEmpty\\], \\[*mixed* $noRecursive\\])\n\nGets a variable from the $\\_REQUEST superglobal applying filters if needed. If no parameters are given the $\\_REQUEST superglobal is returned\n\n``` php\n// Returns value from $_REQUEST[\"user_email\"] without sanitizing\n$userEmail = $request->get(\"user_email\");\n\n// Returns value from $_REQUEST[\"user_email\"] with sanitizing\n$userEmail = $request->get(\"user_email\", \"email\");\n```\n\n### public **getPost** (\\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\], \\[*mixed* $notAllowEmpty\\], \\[*mixed* $noRecursive\\])\n\nGets a variable from the $\\_POST superglobal applying filters if needed If no parameters are given the $\\_POST superglobal is returned\n\n``` php\n// Returns value from $_POST[\"user_email\"] without sanitizing\n$userEmail = $request->getPost(\"user_email\");\n\n// Returns value from $_POST[\"user_email\"] with sanitizing\n$userEmail = $request->getPost(\"user_email\", \"email\");\n```\n\n### public **getPut** (\\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\], \\[*mixed* $notAllowEmpty\\], \\[*mixed* $noRecursive\\])\n\nGets a variable from put request\n\n``` php\n// Returns value from $_PUT[\"user_email\"] without sanitizing\n$userEmail = $request->getPut(\"user_email\");\n\n// Returns value from $_PUT[\"user_email\"] with sanitizing\n$userEmail = $request->getPut(\"user_email\", \"email\");\n```\n\n### public **getQuery** (\\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\], \\[*mixed* $notAllowEmpty\\], \\[*mixed* $noRecursive\\])\n\nGets variable from $\\_GET superglobal applying filters if needed If no parameters are given the $\\_GET superglobal is returned\n\n``` php\n// Returns value from $_GET[\"id\"] without sanitizing\n$id = $request->getQuery(\"id\");\n\n// Returns value from $_GET[\"id\"] with sanitizing\n$id = $request->getQuery(\"id\", \"int\");\n\n// Returns value from $_GET[\"id\"] with a default value\n$id = $request->getQuery(\"id\", null, 150);\n```\n\n### final protected **getHelper** (*array* $source, \\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\], \\[*mixed* $notAllowEmpty\\], \\[*mixed* $noRecursive\\])\n\nHelper to get data from superglobals, applying filters if needed. If no parameters are given the superglobal is returned.\n\n### public **getServer** (*mixed* $name)\n\nGets variable from $\\_SERVER superglobal\n\n### public **has** (*mixed* $name)\n\nChecks whether $\\_REQUEST superglobal has certain index\n\n### public **hasPost** (*mixed* $name)\n\nChecks whether $\\_POST superglobal has certain index\n\n### public **hasPut** (*mixed* $name)\n\nChecks whether the PUT data has certain index\n\n### public **hasQuery** (*mixed* $name)\n\nChecks whether $\\_GET superglobal has certain index\n\n### final public **hasServer** (*mixed* $name)\n\nChecks whether $\\_SERVER superglobal has certain index\n\n### final public **getHeader** (*mixed* $header)\n\nGets HTTP header from request data\n\n### public **getScheme** ()\n\nGets HTTP schema (http/https)\n\n### public **isAjax** ()\n\nChecks whether request has been made using ajax\n\n### public **isSoap** ()\n\nChecks whether request has been made using SOAP\n\n### public **isSoapRequested** ()\n\nAlias of isSoap(). It will be deprecated in future versions\n\n### public **isSecure** ()\n\nChecks whether request has been made using any secure layer\n\n### public **isSecureRequest** ()\n\nAlias of isSecure(). It will be deprecated in future versions\n\n### public **getRawBody** ()\n\nGets HTTP raw request body\n\n### public **getJsonRawBody** (\\[*mixed* $associative\\])\n\nGets decoded JSON HTTP raw request body\n\n### public **getServerAddress** ()\n\nGets active server address IP\n\n### public **getServerName** ()\n\nGets active server name\n\n### public **getHttpHost** ()\n\nGets host name used by the request. Request::getHttpHost trying to find host name in following order: - $\\_SERVER\\[“HTTP_HOST”\\] - $\\_SERVER\\[“SERVER_NAME”\\] - $\\_SERVER\\[“SERVER_ADDR”\\] Optionally Request::getHttpHost validates and clean host name. The Request::$\\_strictHostCheck can be used to validate host name. Note: validation and cleaning have a negative performance impact because they use regular expressions.\n\n``` php\nuse Phalcon\\Http\\Request;\n\n$request = new Request;\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com\";\n$request->getHttpHost(); // example.com\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com:8080\";\n$request->getHttpHost(); // example.com:8080\n\n$request->setStrictHostCheck(true);\n$_SERVER[\"HTTP_HOST\"] = \"ex=am~ple.com\";\n$request->getHttpHost(); // UnexpectedValueException\n\n$_SERVER[\"HTTP_HOST\"] = \"ExAmPlE.com\";\n$request->getHttpHost(); // example.com\n```\n\n### public **setStrictHostCheck** (\\[*mixed* $flag\\])\n\nSets if the Request::getHttpHost method must be use strict validation of host name or not\n\n### public **isStrictHostCheck** ()\n\nChecks if the Request::getHttpHost method will be use strict validation of host name or not\n\n### public **getPort** ()\n\nGets information about the port on which the request is made.\n\n### final public **getURI** ()\n\nGets HTTP URI which request has been made\n\n### public **getClientAddress** (\\[*mixed* $trustForwardedHeader\\])\n\nGets most possible client IPv4 Address. This method searches in $\\_SERVER\\[“REMOTE_ADDR”\\] and optionally in $\\_SERVER\\[“HTTP_X_FORWARDED_FOR”\\]\n\n### final public **getMethod** ()\n\nGets HTTP method which request has been made If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the “real” intended HTTP method. The \\_method request parameter can also be used to determine the HTTP method, but only if setHttpMethodParameterOverride(true) has been called. The method is always an uppercased string.\n\n### public **getUserAgent** ()\n\nGets HTTP user agent used to made the request\n\n### public **isValidHttpMethod** (*mixed* $method)\n\nChecks if a method is a valid HTTP method\n\n### public **isMethod** (*mixed* $methods, \\[*mixed* $strict\\])\n\nCheck if HTTP method match any of the passed methods When strict is true it checks if validated methods are real HTTP methods\n\n### public **isPost** ()\n\nChecks whether HTTP method is POST. if \\_SERVER\\[“REQUEST_METHOD”\\]===”POST”\n\n### public **isGet** ()\n\nChecks whether HTTP method is GET. if \\_SERVER\\[“REQUEST_METHOD”\\]===”GET”\n\n### public **isPut** ()\n\nChecks whether HTTP method is PUT. if \\_SERVER\\[“REQUEST_METHOD”\\]===”PUT”\n\n### public **isPatch** ()\n\nChecks whether HTTP method is PATCH. if \\_SERVER\\[“REQUEST_METHOD”\\]===”PATCH”\n\n### public **isHead** ()\n\nChecks whether HTTP method is HEAD. if \\_SERVER\\[“REQUEST_METHOD”\\]===”HEAD”\n\n### public **isDelete** ()\n\nChecks whether HTTP method is DELETE. if \\_SERVER\\[“REQUEST_METHOD”\\]===”DELETE”\n\n### public **isOptions** ()\n\nChecks whether HTTP method is OPTIONS. if \\_SERVER\\[“REQUEST_METHOD”\\]===”OPTIONS”\n\n### public **isPurge** ()\n\nChecks whether HTTP method is PURGE (Squid and Varnish support). if \\_SERVER\\[“REQUEST_METHOD”\\]===”PURGE”\n\n### public **isTrace** ()\n\nChecks whether HTTP method is TRACE. if \\_SERVER\\[“REQUEST_METHOD”\\]===”TRACE”\n\n### public **isConnect** ()\n\nChecks whether HTTP method is CONNECT. if \\_SERVER\\[“REQUEST_METHOD”\\]===”CONNECT”\n\n### public **hasFiles** (\\[*mixed* $onlySuccessful\\])\n\nChecks whether request include attached files\n\n### final protected **hasFileHelper** (*mixed* $data, *mixed* $onlySuccessful)\n\nRecursively counts file in an array of files\n\n### public **getUploadedFiles** (\\[*mixed* $onlySuccessful\\])\n\nGets attached files as Phalcon\\Http\\Request\\File instances\n\n### final protected **smoothFiles** (*array* $names, *array* $types, *array* $tmp_names, *array* $sizes, *array* $errors, *mixed* $prefix)\n\nSmooth out $\\_FILES to have plain array with all files uploaded\n\n### public **getHeaders** ()\n\nReturns the available headers in the request\n\n``` php\n$_SERVER = [\n    \"PHP_AUTH_USER\" => \"phalcon\",\n    \"PHP_AUTH_PW\"   => \"secret\",\n];\n\n$headers = $request->getHeaders();\n\necho $headers[\"Authorization\"]; // Basic cGhhbGNvbjpzZWNyZXQ=\n```\n\n### public **getHTTPReferer** ()\n\nGets web page that refers active request. ie: [http://www.google.com](http://www.google.com)\n\n### final protected **\\_getBestQuality** (*array* $qualityParts, *mixed* $name)\n\nProcess a request header and return the one with best quality\n\n### public **getContentType** ()\n\nGets content type which request has been made\n\n### public **getAcceptableContent** ()\n\nGets an array with mime/types and their quality accepted by the browser/client from \\_SERVER\\[“HTTP_ACCEPT”\\]\n\n### public **getBestAccept** ()\n\nGets best mime/type accepted by the browser/client from \\_SERVER\\[“HTTP_ACCEPT”\\]\n\n### public **getClientCharsets** ()\n\nGets a charsets array and their quality accepted by the browser/client from \\_SERVER\\[“HTTP_ACCEPT_CHARSET”\\]\n\n### public **getBestCharset** ()\n\nGets best charset accepted by the browser/client from \\_SERVER\\[“HTTP_ACCEPT_CHARSET”\\]\n\n### public **getLanguages** ()\n\nGets languages array and their quality accepted by the browser/client from \\_SERVER\\[“HTTP_ACCEPT_LANGUAGE”\\]\n\n### public **getBestLanguage** ()\n\nGets best language accepted by the browser/client from \\_SERVER\\[“HTTP_ACCEPT_LANGUAGE”\\]\n\n### public **getBasicAuth** ()\n\nGets auth info accepted by the browser/client from $\\_SERVER\\[“PHP_AUTH_USER”\\]\n\n### public **getDigestAuth** ()\n\nGets auth info accepted by the browser/client from $\\_SERVER\\[“PHP_AUTH_DIGEST”\\]\n\n### final protected **\\_getQualityHeader** (*mixed* $serverIndex, *mixed* $name)\n\nProcess a request header and return an array of values with their qualities\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request.html)"
- name: Http\Request::get
  id: api/phalcon_http_request#get
  summary: Gets a variable from the $_REQUEST superglobal applying filters if needed
  belongs_to: Http\Request
  description: |-
    ### public **get** (\[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\], \[*mixed* $notAllowEmpty\], \[*mixed* $noRecursive\])

    Gets a variable from the $\_REQUEST superglobal applying filters if needed. If no parameters are given the $\_REQUEST superglobal is returned

    ``` php
    // Returns value from $_REQUEST["user_email"] without sanitizing
    $userEmail = $request->get("user_email");

    // Returns value from $_REQUEST["user_email"] with sanitizing
    $userEmail = $request->get("user_email", "email");
    ```
- name: Http\Request::getAcceptableContent
  id: api/phalcon_http_request#getacceptablecontent
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getAcceptableContent** ()

    Gets an array with mime/types and their quality accepted by the browser/client from \_SERVER\[“HTTP_ACCEPT”\]
- name: Http\Request::getBasicAuth
  id: api/phalcon_http_request#getbasicauth
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getBasicAuth** ()

    Gets auth info accepted by the browser/client from $\_SERVER\[“PHP_AUTH_USER”\]
- name: Http\Request::getBestAccept
  id: api/phalcon_http_request#getbestaccept
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getBestAccept** ()

    Gets best mime/type accepted by the browser/client from \_SERVER\[“HTTP_ACCEPT”\]
- name: Http\Request::getBestCharset
  id: api/phalcon_http_request#getbestcharset
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getBestCharset** ()

    Gets best charset accepted by the browser/client from \_SERVER\[“HTTP_ACCEPT_CHARSET”\]
- name: Http\Request::getBestLanguage
  id: api/phalcon_http_request#getbestlanguage
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getBestLanguage** ()

    Gets best language accepted by the browser/client from \_SERVER\[“HTTP_ACCEPT_LANGUAGE”\]
- name: Http\Request::getClientAddress
  id: api/phalcon_http_request#getclientaddress
  summary: Gets most possible client IPv4 Address
  belongs_to: Http\Request
  description: |-
    ### public **getClientAddress** (\[*mixed* $trustForwardedHeader\])

    Gets most possible client IPv4 Address. This method searches in $\_SERVER\[“REMOTE_ADDR”\] and optionally in $\_SERVER\[“HTTP_X_FORWARDED_FOR”\]
- name: Http\Request::getClientCharsets
  id: api/phalcon_http_request#getclientcharsets
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getClientCharsets** ()

    Gets a charsets array and their quality accepted by the browser/client from \_SERVER\[“HTTP_ACCEPT_CHARSET”\]
- name: Http\Request::getContentType
  id: api/phalcon_http_request#getcontenttype
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getContentType** ()

    Gets content type which request has been made
- name: Http\Request::getDI
  id: api/phalcon_http_request#getdi
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Http\Request::getDigestAuth
  id: api/phalcon_http_request#getdigestauth
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Request
  description: "### public **getDigestAuth** ()\n\nGets auth info accepted by the browser/client from $\\_SERVER\\[“PHP_AUTH_DIGEST”\\]\n\n### final protected **\\_getQualityHeader** (*mixed* $serverIndex, *mixed* $name)\n\nProcess a request header and return an array of values with their qualities\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request.html)"
- name: Http\Request::getHeader
  id: api/phalcon_http_request#getheader
  summary: null
  belongs_to: Http\Request
  description: |-
    ### final public **getHeader** (*mixed* $header)

    Gets HTTP header from request data
- name: Http\Request::getHeaders
  id: api/phalcon_http_request#getheaders
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getHeaders** ()

    Returns the available headers in the request

    ``` php
    $_SERVER = [
        "PHP_AUTH_USER" => "phalcon",
        "PHP_AUTH_PW"   => "secret",
    ];

    $headers = $request->getHeaders();

    echo $headers["Authorization"]; // Basic cGhhbGNvbjpzZWNyZXQ=
    ```
- name: Http\Request::getHttpHost
  id: api/phalcon_http_request#gethttphost
  summary: Gets host name used by the request
  belongs_to: Http\Request
  description: |-
    ### public **getHttpHost** ()

    Gets host name used by the request. Request::getHttpHost trying to find host name in following order: - $\_SERVER\[“HTTP_HOST”\] - $\_SERVER\[“SERVER_NAME”\] - $\_SERVER\[“SERVER_ADDR”\] Optionally Request::getHttpHost validates and clean host name. The Request::$\_strictHostCheck can be used to validate host name. Note: validation and cleaning have a negative performance impact because they use regular expressions.

    ``` php
    use Phalcon\Http\Request;

    $request = new Request;

    $_SERVER["HTTP_HOST"] = "example.com";
    $request->getHttpHost(); // example.com

    $_SERVER["HTTP_HOST"] = "example.com:8080";
    $request->getHttpHost(); // example.com:8080

    $request->setStrictHostCheck(true);
    $_SERVER["HTTP_HOST"] = "ex=am~ple.com";
    $request->getHttpHost(); // UnexpectedValueException

    $_SERVER["HTTP_HOST"] = "ExAmPlE.com";
    $request->getHttpHost(); // example.com
    ```
- name: Http\Request::getHttpMethodParameterOverride
  id: api/phalcon_http_request#gethttpmethodparameteroverride
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getHttpMethodParameterOverride** ()

    ...
- name: Http\Request::getHTTPReferer
  id: api/phalcon_http_request#gethttpreferer
  summary: Gets web page that refers active request
  belongs_to: Http\Request
  description: |-
    ### public **getHTTPReferer** ()

    Gets web page that refers active request. ie: [http://www.google.com](http://www.google.com)

    ### final protected **\_getBestQuality** (*array* $qualityParts, *mixed* $name)

    Process a request header and return the one with best quality
- name: Http\Request::getJsonRawBody
  id: api/phalcon_http_request#getjsonrawbody
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getJsonRawBody** (\[*mixed* $associative\])

    Gets decoded JSON HTTP raw request body
- name: Http\Request::getLanguages
  id: api/phalcon_http_request#getlanguages
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getLanguages** ()

    Gets languages array and their quality accepted by the browser/client from \_SERVER\[“HTTP_ACCEPT_LANGUAGE”\]
- name: Http\Request::getMethod
  id: api/phalcon_http_request#getmethod
  summary: Gets HTTP method which request has been made If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the “real” intended HTTP method
  belongs_to: Http\Request
  description: |-
    ### final public **getMethod** ()

    Gets HTTP method which request has been made If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the “real” intended HTTP method. The \_method request parameter can also be used to determine the HTTP method, but only if setHttpMethodParameterOverride(true) has been called. The method is always an uppercased string.
- name: Http\Request::getPort
  id: api/phalcon_http_request#getport
  summary: Gets information about the port on which the request is made
  belongs_to: Http\Request
  description: |-
    ### public **getPort** ()

    Gets information about the port on which the request is made.
- name: Http\Request::getPost
  id: api/phalcon_http_request#getpost
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getPost** (\[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\], \[*mixed* $notAllowEmpty\], \[*mixed* $noRecursive\])

    Gets a variable from the $\_POST superglobal applying filters if needed If no parameters are given the $\_POST superglobal is returned

    ``` php
    // Returns value from $_POST["user_email"] without sanitizing
    $userEmail = $request->getPost("user_email");

    // Returns value from $_POST["user_email"] with sanitizing
    $userEmail = $request->getPost("user_email", "email");
    ```
- name: Http\Request::getPut
  id: api/phalcon_http_request#getput
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getPut** (\[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\], \[*mixed* $notAllowEmpty\], \[*mixed* $noRecursive\])

    Gets a variable from put request

    ``` php
    // Returns value from $_PUT["user_email"] without sanitizing
    $userEmail = $request->getPut("user_email");

    // Returns value from $_PUT["user_email"] with sanitizing
    $userEmail = $request->getPut("user_email", "email");
    ```
- name: Http\Request::getQuery
  id: api/phalcon_http_request#getquery
  summary: Helper to get data from superglobals, applying filters if needed
  belongs_to: Http\Request
  description: |-
    ### public **getQuery** (\[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\], \[*mixed* $notAllowEmpty\], \[*mixed* $noRecursive\])

    Gets variable from $\_GET superglobal applying filters if needed If no parameters are given the $\_GET superglobal is returned

    ``` php
    // Returns value from $_GET["id"] without sanitizing
    $id = $request->getQuery("id");

    // Returns value from $_GET["id"] with sanitizing
    $id = $request->getQuery("id", "int");

    // Returns value from $_GET["id"] with a default value
    $id = $request->getQuery("id", null, 150);
    ```

    ### final protected **getHelper** (*array* $source, \[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\], \[*mixed* $notAllowEmpty\], \[*mixed* $noRecursive\])

    Helper to get data from superglobals, applying filters if needed. If no parameters are given the superglobal is returned.
- name: Http\Request::getRawBody
  id: api/phalcon_http_request#getrawbody
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getRawBody** ()

    Gets HTTP raw request body
- name: Http\Request::getScheme
  id: api/phalcon_http_request#getscheme
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getScheme** ()

    Gets HTTP schema (http/https)
- name: Http\Request::getServer
  id: api/phalcon_http_request#getserver
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getServer** (*mixed* $name)

    Gets variable from $\_SERVER superglobal
- name: Http\Request::getServerAddress
  id: api/phalcon_http_request#getserveraddress
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getServerAddress** ()

    Gets active server address IP
- name: Http\Request::getServerName
  id: api/phalcon_http_request#getservername
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getServerName** ()

    Gets active server name
- name: Http\Request::getUploadedFiles
  id: api/phalcon_http_request#getuploadedfiles
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getUploadedFiles** (\[*mixed* $onlySuccessful\])

    Gets attached files as Phalcon\Http\Request\File instances

    ### final protected **smoothFiles** (*array* $names, *array* $types, *array* $tmp_names, *array* $sizes, *array* $errors, *mixed* $prefix)

    Smooth out $\_FILES to have plain array with all files uploaded
- name: Http\Request::getURI
  id: api/phalcon_http_request#geturi
  summary: null
  belongs_to: Http\Request
  description: |-
    ### final public **getURI** ()

    Gets HTTP URI which request has been made
- name: Http\Request::getUserAgent
  id: api/phalcon_http_request#getuseragent
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **getUserAgent** ()

    Gets HTTP user agent used to made the request
- name: Http\Request::has
  id: api/phalcon_http_request#has
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **has** (*mixed* $name)

    Checks whether $\_REQUEST superglobal has certain index
- name: Http\Request::hasFiles
  id: api/phalcon_http_request#hasfiles
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **hasFiles** (\[*mixed* $onlySuccessful\])

    Checks whether request include attached files

    ### final protected **hasFileHelper** (*mixed* $data, *mixed* $onlySuccessful)

    Recursively counts file in an array of files
- name: Http\Request::hasPost
  id: api/phalcon_http_request#haspost
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **hasPost** (*mixed* $name)

    Checks whether $\_POST superglobal has certain index
- name: Http\Request::hasPut
  id: api/phalcon_http_request#hasput
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **hasPut** (*mixed* $name)

    Checks whether the PUT data has certain index
- name: Http\Request::hasQuery
  id: api/phalcon_http_request#hasquery
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **hasQuery** (*mixed* $name)

    Checks whether $\_GET superglobal has certain index
- name: Http\Request::hasServer
  id: api/phalcon_http_request#hasserver
  summary: null
  belongs_to: Http\Request
  description: |-
    ### final public **hasServer** (*mixed* $name)

    Checks whether $\_SERVER superglobal has certain index
- name: Http\Request::isAjax
  id: api/phalcon_http_request#isajax
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **isAjax** ()

    Checks whether request has been made using ajax
- name: Http\Request::isConnect
  id: api/phalcon_http_request#isconnect
  summary: Checks whether HTTP method is CONNECT
  belongs_to: Http\Request
  description: |-
    ### public **isConnect** ()

    Checks whether HTTP method is CONNECT. if \_SERVER\[“REQUEST_METHOD”\]===”CONNECT”
- name: Http\Request::isDelete
  id: api/phalcon_http_request#isdelete
  summary: Checks whether HTTP method is DELETE
  belongs_to: Http\Request
  description: |-
    ### public **isDelete** ()

    Checks whether HTTP method is DELETE. if \_SERVER\[“REQUEST_METHOD”\]===”DELETE”
- name: Http\Request::isGet
  id: api/phalcon_http_request#isget
  summary: Checks whether HTTP method is GET
  belongs_to: Http\Request
  description: |-
    ### public **isGet** ()

    Checks whether HTTP method is GET. if \_SERVER\[“REQUEST_METHOD”\]===”GET”
- name: Http\Request::isHead
  id: api/phalcon_http_request#ishead
  summary: Checks whether HTTP method is HEAD
  belongs_to: Http\Request
  description: |-
    ### public **isHead** ()

    Checks whether HTTP method is HEAD. if \_SERVER\[“REQUEST_METHOD”\]===”HEAD”
- name: Http\Request::isMethod
  id: api/phalcon_http_request#ismethod
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **isMethod** (*mixed* $methods, \[*mixed* $strict\])

    Check if HTTP method match any of the passed methods When strict is true it checks if validated methods are real HTTP methods
- name: Http\Request::isOptions
  id: api/phalcon_http_request#isoptions
  summary: Checks whether HTTP method is OPTIONS
  belongs_to: Http\Request
  description: |-
    ### public **isOptions** ()

    Checks whether HTTP method is OPTIONS. if \_SERVER\[“REQUEST_METHOD”\]===”OPTIONS”
- name: Http\Request::isPatch
  id: api/phalcon_http_request#ispatch
  summary: Checks whether HTTP method is PATCH
  belongs_to: Http\Request
  description: |-
    ### public **isPatch** ()

    Checks whether HTTP method is PATCH. if \_SERVER\[“REQUEST_METHOD”\]===”PATCH”
- name: Http\Request::isPost
  id: api/phalcon_http_request#ispost
  summary: Checks whether HTTP method is POST
  belongs_to: Http\Request
  description: |-
    ### public **isPost** ()

    Checks whether HTTP method is POST. if \_SERVER\[“REQUEST_METHOD”\]===”POST”
- name: Http\Request::isPurge
  id: api/phalcon_http_request#ispurge
  summary: Checks whether HTTP method is PURGE (Squid and Varnish support)
  belongs_to: Http\Request
  description: |-
    ### public **isPurge** ()

    Checks whether HTTP method is PURGE (Squid and Varnish support). if \_SERVER\[“REQUEST_METHOD”\]===”PURGE”
- name: Http\Request::isPut
  id: api/phalcon_http_request#isput
  summary: Checks whether HTTP method is PUT
  belongs_to: Http\Request
  description: |-
    ### public **isPut** ()

    Checks whether HTTP method is PUT. if \_SERVER\[“REQUEST_METHOD”\]===”PUT”
- name: Http\Request::isSecure
  id: api/phalcon_http_request#issecure
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **isSecure** ()

    Checks whether request has been made using any secure layer
- name: Http\Request::isSecureRequest
  id: api/phalcon_http_request#issecurerequest
  summary: Alias of isSecure()
  belongs_to: Http\Request
  description: |-
    ### public **isSecureRequest** ()

    Alias of isSecure(). It will be deprecated in future versions
- name: Http\Request::isSoap
  id: api/phalcon_http_request#issoap
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **isSoap** ()

    Checks whether request has been made using SOAP
- name: Http\Request::isSoapRequested
  id: api/phalcon_http_request#issoaprequested
  summary: Alias of isSoap()
  belongs_to: Http\Request
  description: |-
    ### public **isSoapRequested** ()

    Alias of isSoap(). It will be deprecated in future versions
- name: Http\Request::isStrictHostCheck
  id: api/phalcon_http_request#isstricthostcheck
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **isStrictHostCheck** ()

    Checks if the Request::getHttpHost method will be use strict validation of host name or not
- name: Http\Request::isTrace
  id: api/phalcon_http_request#istrace
  summary: Checks whether HTTP method is TRACE
  belongs_to: Http\Request
  description: |-
    ### public **isTrace** ()

    Checks whether HTTP method is TRACE. if \_SERVER\[“REQUEST_METHOD”\]===”TRACE”
- name: Http\Request::isValidHttpMethod
  id: api/phalcon_http_request#isvalidhttpmethod
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **isValidHttpMethod** (*mixed* $method)

    Checks if a method is a valid HTTP method
- name: Http\Request::setDI
  id: api/phalcon_http_request#setdi
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Http\Request::setHttpMethodParameterOverride
  id: api/phalcon_http_request#sethttpmethodparameteroverride
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **setHttpMethodParameterOverride** (*mixed* $httpMethodParameterOverride)

    ...
- name: Http\Request::setStrictHostCheck
  id: api/phalcon_http_request#setstricthostcheck
  summary: null
  belongs_to: Http\Request
  description: |-
    ### public **setStrictHostCheck** (\[*mixed* $flag\])

    Sets if the Request::getHttpHost method must be use strict validation of host name or not
- name: Http\RequestInterface
  id: api/phalcon_http_requestinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Http\\RequestInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/requestinterface.zep)\n\n## Methods\n\n### abstract public **get** (\\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **getPost** (\\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **getQuery** (\\[*mixed* $name\\], \\[*mixed* $filters\\], \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **getServer** (*mixed* $name)\n\n...\n\n### abstract public **has** (*mixed* $name)\n\n...\n\n### abstract public **hasPost** (*mixed* $name)\n\n...\n\n### abstract public **hasPut** (*mixed* $name)\n\n...\n\n### abstract public **hasQuery** (*mixed* $name)\n\n...\n\n### abstract public **hasServer** (*mixed* $name)\n\n...\n\n### abstract public **getHeader** (*mixed* $header)\n\n...\n\n### abstract public **getScheme** ()\n\n...\n\n### abstract public **isAjax** ()\n\n...\n\n### abstract public **isSoapRequested** ()\n\n...\n\n### abstract public **isSecureRequest** ()\n\n...\n\n### abstract public **getRawBody** ()\n\n...\n\n### abstract public **getServerAddress** ()\n\n...\n\n### abstract public **getServerName** ()\n\n...\n\n### abstract public **getHttpHost** ()\n\n...\n\n### abstract public **getPort** ()\n\n...\n\n### abstract public **getClientAddress** (\\[*mixed* $trustForwardedHeader\\])\n\n...\n\n### abstract public **getMethod** ()\n\n...\n\n### abstract public **getUserAgent** ()\n\n...\n\n### abstract public **isMethod** (*mixed* $methods, \\[*mixed* $strict\\])\n\n...\n\n### abstract public **isPost** ()\n\n...\n\n### abstract public **isGet** ()\n\n...\n\n### abstract public **isPut** ()\n\n...\n\n### abstract public **isHead** ()\n\n...\n\n### abstract public **isDelete** ()\n\n...\n\n### abstract public **isOptions** ()\n\n...\n\n### abstract public **isPurge** ()\n\n...\n\n### abstract public **isTrace** ()\n\n...\n\n### abstract public **isConnect** ()\n\n...\n\n### abstract public **hasFiles** (\\[*mixed* $onlySuccessful\\])\n\n...\n\n### abstract public **getUploadedFiles** (\\[*mixed* $onlySuccessful\\])\n\n...\n\n### abstract public **getHTTPReferer** ()\n\n...\n\n### abstract public **getAcceptableContent** ()\n\n...\n\n### abstract public **getBestAccept** ()\n\n...\n\n### abstract public **getClientCharsets** ()\n\n...\n\n### abstract public **getBestCharset** ()\n\n...\n\n### abstract public **getLanguages** ()\n\n...\n\n### abstract public **getBestLanguage** ()\n\n...\n\n### abstract public **getBasicAuth** ()\n\n...\n\n### abstract public **getDigestAuth** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_RequestInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_RequestInterface.html)"
- name: Http\RequestInterface::get
  id: api/phalcon_http_requestinterface#get
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **get** (\[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\])

    ...
- name: Http\RequestInterface::getAcceptableContent
  id: api/phalcon_http_requestinterface#getacceptablecontent
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getAcceptableContent** ()

    ...
- name: Http\RequestInterface::getBasicAuth
  id: api/phalcon_http_requestinterface#getbasicauth
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getBasicAuth** ()

    ...
- name: Http\RequestInterface::getBestAccept
  id: api/phalcon_http_requestinterface#getbestaccept
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getBestAccept** ()

    ...
- name: Http\RequestInterface::getBestCharset
  id: api/phalcon_http_requestinterface#getbestcharset
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getBestCharset** ()

    ...
- name: Http\RequestInterface::getBestLanguage
  id: api/phalcon_http_requestinterface#getbestlanguage
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getBestLanguage** ()

    ...
- name: Http\RequestInterface::getClientAddress
  id: api/phalcon_http_requestinterface#getclientaddress
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getClientAddress** (\[*mixed* $trustForwardedHeader\])

    ...
- name: Http\RequestInterface::getClientCharsets
  id: api/phalcon_http_requestinterface#getclientcharsets
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getClientCharsets** ()

    ...
- name: Http\RequestInterface::getDigestAuth
  id: api/phalcon_http_requestinterface#getdigestauth
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\RequestInterface
  description: "### abstract public **getDigestAuth** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_RequestInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_RequestInterface.html)"
- name: Http\RequestInterface::getHeader
  id: api/phalcon_http_requestinterface#getheader
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getHeader** (*mixed* $header)

    ...
- name: Http\RequestInterface::getHttpHost
  id: api/phalcon_http_requestinterface#gethttphost
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getHttpHost** ()

    ...
- name: Http\RequestInterface::getHTTPReferer
  id: api/phalcon_http_requestinterface#gethttpreferer
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getHTTPReferer** ()

    ...
- name: Http\RequestInterface::getLanguages
  id: api/phalcon_http_requestinterface#getlanguages
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getLanguages** ()

    ...
- name: Http\RequestInterface::getMethod
  id: api/phalcon_http_requestinterface#getmethod
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getMethod** ()

    ...
- name: Http\RequestInterface::getPort
  id: api/phalcon_http_requestinterface#getport
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getPort** ()

    ...
- name: Http\RequestInterface::getPost
  id: api/phalcon_http_requestinterface#getpost
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getPost** (\[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\])

    ...
- name: Http\RequestInterface::getQuery
  id: api/phalcon_http_requestinterface#getquery
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getQuery** (\[*mixed* $name\], \[*mixed* $filters\], \[*mixed* $defaultValue\])

    ...
- name: Http\RequestInterface::getRawBody
  id: api/phalcon_http_requestinterface#getrawbody
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getRawBody** ()

    ...
- name: Http\RequestInterface::getScheme
  id: api/phalcon_http_requestinterface#getscheme
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getScheme** ()

    ...
- name: Http\RequestInterface::getServer
  id: api/phalcon_http_requestinterface#getserver
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getServer** (*mixed* $name)

    ...
- name: Http\RequestInterface::getServerAddress
  id: api/phalcon_http_requestinterface#getserveraddress
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getServerAddress** ()

    ...
- name: Http\RequestInterface::getServerName
  id: api/phalcon_http_requestinterface#getservername
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getServerName** ()

    ...
- name: Http\RequestInterface::getUploadedFiles
  id: api/phalcon_http_requestinterface#getuploadedfiles
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getUploadedFiles** (\[*mixed* $onlySuccessful\])

    ...
- name: Http\RequestInterface::getUserAgent
  id: api/phalcon_http_requestinterface#getuseragent
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **getUserAgent** ()

    ...
- name: Http\RequestInterface::has
  id: api/phalcon_http_requestinterface#has
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **has** (*mixed* $name)

    ...
- name: Http\RequestInterface::hasFiles
  id: api/phalcon_http_requestinterface#hasfiles
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **hasFiles** (\[*mixed* $onlySuccessful\])

    ...
- name: Http\RequestInterface::hasPost
  id: api/phalcon_http_requestinterface#haspost
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **hasPost** (*mixed* $name)

    ...
- name: Http\RequestInterface::hasPut
  id: api/phalcon_http_requestinterface#hasput
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **hasPut** (*mixed* $name)

    ...
- name: Http\RequestInterface::hasQuery
  id: api/phalcon_http_requestinterface#hasquery
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **hasQuery** (*mixed* $name)

    ...
- name: Http\RequestInterface::hasServer
  id: api/phalcon_http_requestinterface#hasserver
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **hasServer** (*mixed* $name)

    ...
- name: Http\RequestInterface::isAjax
  id: api/phalcon_http_requestinterface#isajax
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isAjax** ()

    ...
- name: Http\RequestInterface::isConnect
  id: api/phalcon_http_requestinterface#isconnect
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isConnect** ()

    ...
- name: Http\RequestInterface::isDelete
  id: api/phalcon_http_requestinterface#isdelete
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isDelete** ()

    ...
- name: Http\RequestInterface::isGet
  id: api/phalcon_http_requestinterface#isget
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isGet** ()

    ...
- name: Http\RequestInterface::isHead
  id: api/phalcon_http_requestinterface#ishead
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isHead** ()

    ...
- name: Http\RequestInterface::isMethod
  id: api/phalcon_http_requestinterface#ismethod
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isMethod** (*mixed* $methods, \[*mixed* $strict\])

    ...
- name: Http\RequestInterface::isOptions
  id: api/phalcon_http_requestinterface#isoptions
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isOptions** ()

    ...
- name: Http\RequestInterface::isPost
  id: api/phalcon_http_requestinterface#ispost
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isPost** ()

    ...
- name: Http\RequestInterface::isPurge
  id: api/phalcon_http_requestinterface#ispurge
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isPurge** ()

    ...
- name: Http\RequestInterface::isPut
  id: api/phalcon_http_requestinterface#isput
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isPut** ()

    ...
- name: Http\RequestInterface::isSecureRequest
  id: api/phalcon_http_requestinterface#issecurerequest
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isSecureRequest** ()

    ...
- name: Http\RequestInterface::isSoapRequested
  id: api/phalcon_http_requestinterface#issoaprequested
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isSoapRequested** ()

    ...
- name: Http\RequestInterface::isTrace
  id: api/phalcon_http_requestinterface#istrace
  summary: null
  belongs_to: Http\RequestInterface
  description: |-
    ### abstract public **isTrace** ()

    ...
- name: Http\Request\Exception
  id: api/phalcon_http_request_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Http\\Request\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_Exception.html)"
- name: Http\Request\File
  id: api/phalcon_http_request_file
  summary: Checks whether the file has been uploaded via Post
  description: "# Class **Phalcon\\Http\\Request\\File**\n\n*implements* [*Phalcon\\Http\\Request\\FileInterface*](phalcon_http_request_fileinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request/file.zep)\n\nProvides OO wrappers to the $\\_FILES superglobal\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        // Check if the user has uploaded files\n        if ($this->request->hasFiles() == true) {\n            // Print the real file names and their sizes\n            foreach ($this->request->getUploadedFiles() as $file) {\n                echo $file->getName(), \" \", $file->getSize(), \"\\n\";\n            }\n       }\n    }\n}\n```\n\n## Methods\n\n### public **getError** ()\n\n### public **getKey** ()\n\n### public **getExtension** ()\n\n### public **\\_\\_construct** (*array* $file, \\[*mixed* $key\\])\n\nPhalcon\\Http\\Request\\File constructor\n\n### public **getSize** ()\n\nReturns the file size of the uploaded file\n\n### public **getName** ()\n\nReturns the real name of the uploaded file\n\n### public **getTempName** ()\n\nReturns the temporary name of the uploaded file\n\n### public **getType** ()\n\nReturns the mime type reported by the browser This mime type is not completely secure, use getRealType() instead\n\n### public **getRealType** ()\n\nGets the real mime type of the upload file using finfo\n\n### public **isUploadedFile** ()\n\nChecks whether the file has been uploaded via Post.\n\n### public **moveTo** (*mixed* $destination)\n\nMoves the temporary file to a destination within the application\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_File.html)"
- name: Http\Request\File::getError
  id: api/phalcon_http_request_file#geterror
  summary: null
  belongs_to: Http\Request\File
  description: '### public **getError** ()'
- name: Http\Request\File::getExtension
  id: api/phalcon_http_request_file#getextension
  summary: null
  belongs_to: Http\Request\File
  description: |-
    ### public **getExtension** ()

    ### public **\_\_construct** (*array* $file, \[*mixed* $key\])

    Phalcon\Http\Request\File constructor
- name: Http\Request\File::getKey
  id: api/phalcon_http_request_file#getkey
  summary: null
  belongs_to: Http\Request\File
  description: '### public **getKey** ()'
- name: Http\Request\File::getName
  id: api/phalcon_http_request_file#getname
  summary: null
  belongs_to: Http\Request\File
  description: |-
    ### public **getName** ()

    Returns the real name of the uploaded file
- name: Http\Request\File::getRealType
  id: api/phalcon_http_request_file#getrealtype
  summary: null
  belongs_to: Http\Request\File
  description: |-
    ### public **getRealType** ()

    Gets the real mime type of the upload file using finfo
- name: Http\Request\File::getSize
  id: api/phalcon_http_request_file#getsize
  summary: null
  belongs_to: Http\Request\File
  description: |-
    ### public **getSize** ()

    Returns the file size of the uploaded file
- name: Http\Request\File::getTempName
  id: api/phalcon_http_request_file#gettempname
  summary: null
  belongs_to: Http\Request\File
  description: |-
    ### public **getTempName** ()

    Returns the temporary name of the uploaded file
- name: Http\Request\File::getType
  id: api/phalcon_http_request_file#gettype
  summary: null
  belongs_to: Http\Request\File
  description: |-
    ### public **getType** ()

    Returns the mime type reported by the browser This mime type is not completely secure, use getRealType() instead
- name: Http\Request\File::isUploadedFile
  id: api/phalcon_http_request_file#isuploadedfile
  summary: Checks whether the file has been uploaded via Post
  belongs_to: Http\Request\File
  description: |-
    ### public **isUploadedFile** ()

    Checks whether the file has been uploaded via Post.
- name: Http\Request\File::moveTo
  id: api/phalcon_http_request_file#moveto
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Request\File
  description: "### public **moveTo** (*mixed* $destination)\n\nMoves the temporary file to a destination within the application\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_File.html)"
- name: Http\Request\FileInterface
  id: api/phalcon_http_request_fileinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Http\\Request\\FileInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request/fileinterface.zep)\n\n## Methods\n\n### abstract public **getSize** ()\n\n...\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **getTempName** ()\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **getRealType** ()\n\n...\n\n### abstract public **moveTo** (*mixed* $destination)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_FileInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_FileInterface.html)"
- name: Http\Request\FileInterface::getName
  id: api/phalcon_http_request_fileinterface#getname
  summary: null
  belongs_to: Http\Request\FileInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Http\Request\FileInterface::getRealType
  id: api/phalcon_http_request_fileinterface#getrealtype
  summary: null
  belongs_to: Http\Request\FileInterface
  description: |-
    ### abstract public **getRealType** ()

    ...
- name: Http\Request\FileInterface::getSize
  id: api/phalcon_http_request_fileinterface#getsize
  summary: null
  belongs_to: Http\Request\FileInterface
  description: |-
    ### abstract public **getSize** ()

    ...
- name: Http\Request\FileInterface::getTempName
  id: api/phalcon_http_request_fileinterface#gettempname
  summary: null
  belongs_to: Http\Request\FileInterface
  description: |-
    ### abstract public **getTempName** ()

    ...
- name: Http\Request\FileInterface::getType
  id: api/phalcon_http_request_fileinterface#gettype
  summary: null
  belongs_to: Http\Request\FileInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Http\Request\FileInterface::moveTo
  id: api/phalcon_http_request_fileinterface#moveto
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Request\FileInterface
  description: "### abstract public **moveTo** (*mixed* $destination)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_FileInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_FileInterface.html)"
- name: Http\Response
  id: api/phalcon_http_response
  summary: Part of the HTTP cycle is return responses to the clients
  description: "# Class **Phalcon\\Http\\Response**\n\n*implements* [*Phalcon\\Http\\ResponseInterface*](phalcon_http_responseinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response.zep)\n\nPart of the HTTP cycle is return responses to the clients. Phalcon\\HTTP\\Response is the Phalcon component responsible to achieve this task. HTTP responses are usually composed by headers and body.\n\n``` php\n$response = new \\Phalcon\\Http\\Response();\n\n$response->setStatusCode(200, \"OK\");\n$response->setContent(\"<html><body>Hello</body></html>\");\n\n$response->send();\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*mixed* $content\\], \\[*mixed* $code\\], \\[*mixed* $status\\])\n\nPhalcon\\Http\\Response constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setStatusCode** (*mixed* $code, \\[*mixed* $message\\])\n\nSets the HTTP response code\n\n``` php\n$response->setStatusCode(404, \"Not Found\");\n```\n\n### public **getStatusCode** ()\n\nReturns the status code\n\n``` php\nprint_r(\n    $response->getStatusCode()\n);\n```\n\n### public **setHeaders** ([*Phalcon\\Http\\Response\\HeadersInterface*](phalcon_http_response_headersinterface) $headers)\n\nSets a headers bag for the response externally\n\n### public **getHeaders** ()\n\nReturns headers set by the user\n\n### public **setCookies** ([*Phalcon\\Http\\Response\\CookiesInterface*](phalcon_http_response_cookiesinterface) $cookies)\n\nSets a cookies bag for the response externally\n\n### public [*Phalcon\\Http\\Response\\CookiesInterface*](phalcon_http_response_cookiesinterface) **getCookies** ()\n\nReturns cookies set by the user\n\n### public **setHeader** (*mixed* $name, *mixed* $value)\n\nOverwrites a header in the response\n\n``` php\n$response->setHeader(\"Content-Type\", \"text/plain\");\n```\n\n### public **setRawHeader** (*mixed* $header)\n\nSend a raw header to the response\n\n``` php\n$response->setRawHeader(\"HTTP/1.1 404 Not Found\");\n```\n\n### public **resetHeaders** ()\n\nResets all the established headers\n\n### public **setExpires** ([DateTime](http://php.net/manual/en/class.datetime.php) $datetime)\n\nSets an Expires header in the response that allows to use the HTTP cache\n\n``` php\n$this->response->setExpires(\n    new DateTime()\n);\n```\n\n### public **setLastModified** ([DateTime](http://php.net/manual/en/class.datetime.php) $datetime)\n\nSets Last-Modified header\n\n``` php\n$this->response->setLastModified(\n    new DateTime()\n);\n```\n\n### public **setCache** (*mixed* $minutes)\n\nSets Cache headers to use HTTP cache\n\n``` php\n$this->response->setCache(60);\n```\n\n### public **setNotModified** ()\n\nSends a Not-Modified response\n\n### public **setContentType** (*mixed* $contentType, \\[*mixed* $charset\\])\n\nSets the response content-type mime, optionally the charset\n\n``` php\n$response->setContentType(\"application/pdf\");\n$response->setContentType(\"text/plain\", \"UTF-8\");\n```\n\n### public **setContentLength** (*mixed* $contentLength)\n\nSets the response content-length\n\n``` php\n$response->setContentLength(2048);\n```\n\n### public **setEtag** (*mixed* $etag)\n\nSet a custom ETag\n\n``` php\n$response->setEtag(md5(time()));\n```\n\n### public **redirect** (\\[*mixed* $location\\], \\[*mixed* $externalRedirect\\], \\[*mixed* $statusCode\\])\n\nRedirect by HTTP to another action or URL\n\n``` php\n// Using a string redirect (internal/external)\n$response->redirect(\"posts/index\");\n$response->redirect(\"http://en.wikipedia.org\", true);\n$response->redirect(\"http://www.example.com/new-location\", true, 301);\n\n// Making a redirection based on a named route\n$response->redirect(\n    [\n        \"for\"        => \"index-lang\",\n        \"lang\"       => \"jp\",\n        \"controller\" => \"index\",\n    ]\n);\n```\n\n### public **setContent** (*mixed* $content)\n\nSets HTTP response body\n\n``` php\n$response->setContent(\"<h1>Hello!</h1>\");\n```\n\n### public **setJsonContent** (*mixed* $content, \\[*mixed* $jsonOptions\\], \\[*mixed* $depth\\])\n\nSets HTTP response body. The parameter is automatically converted to JSON and also sets default header: Content-Type: “application/json; charset=UTF-8”\n\n``` php\n$response->setJsonContent(\n    [\n        \"status\" => \"OK\",\n    ]\n);\n```\n\n### public **appendContent** (*mixed* $content)\n\nAppends a string to the HTTP response body\n\n### public **getContent** ()\n\nGets the HTTP response body\n\n### public **isSent** ()\n\nCheck if the response is already sent\n\n### public **sendHeaders** ()\n\nSends headers to the client\n\n### public **sendCookies** ()\n\nSends cookies to the client\n\n### public **send** ()\n\nPrints out HTTP response to the client\n\n### public **setFileToSend** (*mixed* $filePath, \\[*mixed* $attachmentName\\], \\[*mixed* $attachment\\])\n\nSets an attached file to be sent at the end of the request\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response.html)"
- name: Http\Response::appendContent
  id: api/phalcon_http_response#appendcontent
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **appendContent** (*mixed* $content)

    Appends a string to the HTTP response body
- name: Http\Response::getContent
  id: api/phalcon_http_response#getcontent
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **getContent** ()

    Gets the HTTP response body
- name: Http\Response::getCookies
  id: api/phalcon_http_response#getcookies
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public [*Phalcon\Http\Response\CookiesInterface*](phalcon_http_response_cookiesinterface) **getCookies** ()

    Returns cookies set by the user
- name: Http\Response::getDI
  id: api/phalcon_http_response#getdi
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Http\Response::getHeaders
  id: api/phalcon_http_response#getheaders
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **getHeaders** ()

    Returns headers set by the user
- name: Http\Response::getStatusCode
  id: api/phalcon_http_response#getstatuscode
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **getStatusCode** ()

    Returns the status code

    ``` php
    print_r(
        $response->getStatusCode()
    );
    ```
- name: Http\Response::isSent
  id: api/phalcon_http_response#issent
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **isSent** ()

    Check if the response is already sent
- name: Http\Response::redirect
  id: api/phalcon_http_response#redirect
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **redirect** (\[*mixed* $location\], \[*mixed* $externalRedirect\], \[*mixed* $statusCode\])

    Redirect by HTTP to another action or URL

    ``` php
    // Using a string redirect (internal/external)
    $response->redirect("posts/index");
    $response->redirect("http://en.wikipedia.org", true);
    $response->redirect("http://www.example.com/new-location", true, 301);

    // Making a redirection based on a named route
    $response->redirect(
        [
            "for"        => "index-lang",
            "lang"       => "jp",
            "controller" => "index",
        ]
    );
    ```
- name: Http\Response::resetHeaders
  id: api/phalcon_http_response#resetheaders
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **resetHeaders** ()

    Resets all the established headers
- name: Http\Response::send
  id: api/phalcon_http_response#send
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **send** ()

    Prints out HTTP response to the client
- name: Http\Response::sendCookies
  id: api/phalcon_http_response#sendcookies
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **sendCookies** ()

    Sends cookies to the client
- name: Http\Response::sendHeaders
  id: api/phalcon_http_response#sendheaders
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **sendHeaders** ()

    Sends headers to the client
- name: Http\Response::setCache
  id: api/phalcon_http_response#setcache
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setCache** (*mixed* $minutes)

    Sets Cache headers to use HTTP cache

    ``` php
    $this->response->setCache(60);
    ```
- name: Http\Response::setContent
  id: api/phalcon_http_response#setcontent
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setContent** (*mixed* $content)

    Sets HTTP response body

    ``` php
    $response->setContent("<h1>Hello!</h1>");
    ```
- name: Http\Response::setContentLength
  id: api/phalcon_http_response#setcontentlength
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setContentLength** (*mixed* $contentLength)

    Sets the response content-length

    ``` php
    $response->setContentLength(2048);
    ```
- name: Http\Response::setContentType
  id: api/phalcon_http_response#setcontenttype
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setContentType** (*mixed* $contentType, \[*mixed* $charset\])

    Sets the response content-type mime, optionally the charset

    ``` php
    $response->setContentType("application/pdf");
    $response->setContentType("text/plain", "UTF-8");
    ```
- name: Http\Response::setCookies
  id: api/phalcon_http_response#setcookies
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setCookies** ([*Phalcon\Http\Response\CookiesInterface*](phalcon_http_response_cookiesinterface) $cookies)

    Sets a cookies bag for the response externally
- name: Http\Response::setDI
  id: api/phalcon_http_response#setdi
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Http\Response::setEtag
  id: api/phalcon_http_response#setetag
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setEtag** (*mixed* $etag)

    Set a custom ETag

    ``` php
    $response->setEtag(md5(time()));
    ```
- name: Http\Response::setExpires
  id: api/phalcon_http_response#setexpires
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setExpires** ([DateTime](http://php.net/manual/en/class.datetime.php) $datetime)

    Sets an Expires header in the response that allows to use the HTTP cache

    ``` php
    $this->response->setExpires(
        new DateTime()
    );
    ```
- name: Http\Response::setFileToSend
  id: api/phalcon_http_response#setfiletosend
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Response
  description: "### public **setFileToSend** (*mixed* $filePath, \\[*mixed* $attachmentName\\], \\[*mixed* $attachment\\])\n\nSets an attached file to be sent at the end of the request\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response.html)"
- name: Http\Response::setHeader
  id: api/phalcon_http_response#setheader
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setHeader** (*mixed* $name, *mixed* $value)

    Overwrites a header in the response

    ``` php
    $response->setHeader("Content-Type", "text/plain");
    ```
- name: Http\Response::setHeaders
  id: api/phalcon_http_response#setheaders
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setHeaders** ([*Phalcon\Http\Response\HeadersInterface*](phalcon_http_response_headersinterface) $headers)

    Sets a headers bag for the response externally
- name: Http\Response::setJsonContent
  id: api/phalcon_http_response#setjsoncontent
  summary: Sets HTTP response body
  belongs_to: Http\Response
  description: |-
    ### public **setJsonContent** (*mixed* $content, \[*mixed* $jsonOptions\], \[*mixed* $depth\])

    Sets HTTP response body. The parameter is automatically converted to JSON and also sets default header: Content-Type: “application/json; charset=UTF-8”

    ``` php
    $response->setJsonContent(
        [
            "status" => "OK",
        ]
    );
    ```
- name: Http\Response::setLastModified
  id: api/phalcon_http_response#setlastmodified
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setLastModified** ([DateTime](http://php.net/manual/en/class.datetime.php) $datetime)

    Sets Last-Modified header

    ``` php
    $this->response->setLastModified(
        new DateTime()
    );
    ```
- name: Http\Response::setNotModified
  id: api/phalcon_http_response#setnotmodified
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setNotModified** ()

    Sends a Not-Modified response
- name: Http\Response::setRawHeader
  id: api/phalcon_http_response#setrawheader
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setRawHeader** (*mixed* $header)

    Send a raw header to the response

    ``` php
    $response->setRawHeader("HTTP/1.1 404 Not Found");
    ```
- name: Http\Response::setStatusCode
  id: api/phalcon_http_response#setstatuscode
  summary: null
  belongs_to: Http\Response
  description: |-
    ### public **setStatusCode** (*mixed* $code, \[*mixed* $message\])

    Sets the HTTP response code

    ``` php
    $response->setStatusCode(404, "Not Found");
    ```
- name: Http\ResponseInterface
  id: api/phalcon_http_responseinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Http\\ResponseInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/responseinterface.zep)\n\n## Methods\n\n### abstract public **setStatusCode** (*mixed* $code, \\[*mixed* $message\\])\n\n...\n\n### abstract public **getHeaders** ()\n\n...\n\n### abstract public **setHeader** (*mixed* $name, *mixed* $value)\n\n...\n\n### abstract public **setRawHeader** (*mixed* $header)\n\n...\n\n### abstract public **resetHeaders** ()\n\n...\n\n### abstract public **setExpires** ([DateTime](http://php.net/manual/en/class.datetime.php) $datetime)\n\n...\n\n### abstract public **setNotModified** ()\n\n...\n\n### abstract public **setContentType** (*mixed* $contentType, \\[*mixed* $charset\\])\n\n...\n\n### abstract public **setContentLength** (*mixed* $contentLength)\n\n...\n\n### abstract public **redirect** (\\[*mixed* $location\\], \\[*mixed* $externalRedirect\\], \\[*mixed* $statusCode\\])\n\n...\n\n### abstract public **setContent** (*mixed* $content)\n\n...\n\n### abstract public **setJsonContent** (*mixed* $content)\n\n...\n\n### abstract public **appendContent** (*mixed* $content)\n\n...\n\n### abstract public **getContent** ()\n\n...\n\n### abstract public **sendHeaders** ()\n\n...\n\n### abstract public **sendCookies** ()\n\n...\n\n### abstract public **send** ()\n\n...\n\n### abstract public **setFileToSend** (*mixed* $filePath, \\[*mixed* $attachmentName\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_ResponseInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_ResponseInterface.html)"
- name: Http\ResponseInterface::appendContent
  id: api/phalcon_http_responseinterface#appendcontent
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **appendContent** (*mixed* $content)

    ...
- name: Http\ResponseInterface::getContent
  id: api/phalcon_http_responseinterface#getcontent
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **getContent** ()

    ...
- name: Http\ResponseInterface::getHeaders
  id: api/phalcon_http_responseinterface#getheaders
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **getHeaders** ()

    ...
- name: Http\ResponseInterface::redirect
  id: api/phalcon_http_responseinterface#redirect
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **redirect** (\[*mixed* $location\], \[*mixed* $externalRedirect\], \[*mixed* $statusCode\])

    ...
- name: Http\ResponseInterface::resetHeaders
  id: api/phalcon_http_responseinterface#resetheaders
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **resetHeaders** ()

    ...
- name: Http\ResponseInterface::send
  id: api/phalcon_http_responseinterface#send
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **send** ()

    ...
- name: Http\ResponseInterface::sendCookies
  id: api/phalcon_http_responseinterface#sendcookies
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **sendCookies** ()

    ...
- name: Http\ResponseInterface::sendHeaders
  id: api/phalcon_http_responseinterface#sendheaders
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **sendHeaders** ()

    ...
- name: Http\ResponseInterface::setContent
  id: api/phalcon_http_responseinterface#setcontent
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setContent** (*mixed* $content)

    ...
- name: Http\ResponseInterface::setContentLength
  id: api/phalcon_http_responseinterface#setcontentlength
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setContentLength** (*mixed* $contentLength)

    ...
- name: Http\ResponseInterface::setContentType
  id: api/phalcon_http_responseinterface#setcontenttype
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setContentType** (*mixed* $contentType, \[*mixed* $charset\])

    ...
- name: Http\ResponseInterface::setExpires
  id: api/phalcon_http_responseinterface#setexpires
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setExpires** ([DateTime](http://php.net/manual/en/class.datetime.php) $datetime)

    ...
- name: Http\ResponseInterface::setFileToSend
  id: api/phalcon_http_responseinterface#setfiletosend
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\ResponseInterface
  description: "### abstract public **setFileToSend** (*mixed* $filePath, \\[*mixed* $attachmentName\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_ResponseInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_ResponseInterface.html)"
- name: Http\ResponseInterface::setHeader
  id: api/phalcon_http_responseinterface#setheader
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setHeader** (*mixed* $name, *mixed* $value)

    ...
- name: Http\ResponseInterface::setJsonContent
  id: api/phalcon_http_responseinterface#setjsoncontent
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setJsonContent** (*mixed* $content)

    ...
- name: Http\ResponseInterface::setNotModified
  id: api/phalcon_http_responseinterface#setnotmodified
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setNotModified** ()

    ...
- name: Http\ResponseInterface::setRawHeader
  id: api/phalcon_http_responseinterface#setrawheader
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setRawHeader** (*mixed* $header)

    ...
- name: Http\ResponseInterface::setStatusCode
  id: api/phalcon_http_responseinterface#setstatuscode
  summary: null
  belongs_to: Http\ResponseInterface
  description: |-
    ### abstract public **setStatusCode** (*mixed* $code, \[*mixed* $message\])

    ...
- name: Http\Response\Cookies
  id: api/phalcon_http_response_cookies
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Http\\Response\\Cookies**\n\n*implements* [*Phalcon\\Http\\Response\\CookiesInterface*](phalcon_http_response_cookiesinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/cookies.zep)\n\nThis class is a bag to manage the cookies A cookies bag is automatically registered as part of the ‘response’ service in the DI\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **useEncryption** (*mixed* $useEncryption)\n\nSet if cookies in the bag must be automatically encrypted/decrypted\n\n### public **isUsingEncryption** ()\n\nReturns if the bag is automatically encrypting/decrypting cookies\n\n### public **set** (*mixed* $name, \\[*mixed* $value\\], \\[*mixed* $expire\\], \\[*mixed* $path\\], \\[*mixed* $secure\\], \\[*mixed* $domain\\], \\[*mixed* $httpOnly\\])\n\nSets a cookie to be sent at the end of the request This method overrides any cookie set before with the same name\n\n### public **get** (*mixed* $name)\n\nGets a cookie from the bag\n\n### public **has** (*mixed* $name)\n\nCheck if a cookie is defined in the bag or exists in the \\_COOKIE superglobal\n\n### public **delete** (*mixed* $name)\n\nDeletes a cookie by its name This method does not removes cookies from the \\_COOKIE superglobal\n\n### public **send** ()\n\nSends the cookies to the client Cookies aren’t sent if headers are sent in the current request\n\n### public **reset** ()\n\nReset set cookies\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Cookies.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Cookies.html)"
- name: Http\Response\Cookies::delete
  id: api/phalcon_http_response_cookies#delete
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **delete** (*mixed* $name)

    Deletes a cookie by its name This method does not removes cookies from the \_COOKIE superglobal
- name: Http\Response\Cookies::get
  id: api/phalcon_http_response_cookies#get
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **get** (*mixed* $name)

    Gets a cookie from the bag
- name: Http\Response\Cookies::getDI
  id: api/phalcon_http_response_cookies#getdi
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Http\Response\Cookies::has
  id: api/phalcon_http_response_cookies#has
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **has** (*mixed* $name)

    Check if a cookie is defined in the bag or exists in the \_COOKIE superglobal
- name: Http\Response\Cookies::isUsingEncryption
  id: api/phalcon_http_response_cookies#isusingencryption
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **isUsingEncryption** ()

    Returns if the bag is automatically encrypting/decrypting cookies
- name: Http\Response\Cookies::reset
  id: api/phalcon_http_response_cookies#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Response\Cookies
  description: "### public **reset** ()\n\nReset set cookies\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Cookies.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Cookies.html)"
- name: Http\Response\Cookies::send
  id: api/phalcon_http_response_cookies#send
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **send** ()

    Sends the cookies to the client Cookies aren’t sent if headers are sent in the current request
- name: Http\Response\Cookies::set
  id: api/phalcon_http_response_cookies#set
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **set** (*mixed* $name, \[*mixed* $value\], \[*mixed* $expire\], \[*mixed* $path\], \[*mixed* $secure\], \[*mixed* $domain\], \[*mixed* $httpOnly\])

    Sets a cookie to be sent at the end of the request This method overrides any cookie set before with the same name
- name: Http\Response\Cookies::setDI
  id: api/phalcon_http_response_cookies#setdi
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Http\Response\Cookies::useEncryption
  id: api/phalcon_http_response_cookies#useencryption
  summary: null
  belongs_to: Http\Response\Cookies
  description: |-
    ### public **useEncryption** (*mixed* $useEncryption)

    Set if cookies in the bag must be automatically encrypted/decrypted
- name: Http\Response\CookiesInterface
  id: api/phalcon_http_response_cookiesinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Http\\Response\\CookiesInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/cookiesinterface.zep)\n\n## Methods\n\n### abstract public **useEncryption** (*mixed* $useEncryption)\n\n...\n\n### abstract public **isUsingEncryption** ()\n\n...\n\n### abstract public **set** (*mixed* $name, \\[*mixed* $value\\], \\[*mixed* $expire\\], \\[*mixed* $path\\], \\[*mixed* $secure\\], \\[*mixed* $domain\\], \\[*mixed* $httpOnly\\])\n\n...\n\n### abstract public **get** (*mixed* $name)\n\n...\n\n### abstract public **has** (*mixed* $name)\n\n...\n\n### abstract public **delete** (*mixed* $name)\n\n...\n\n### abstract public **send** ()\n\n...\n\n### abstract public **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_CookiesInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_CookiesInterface.html)"
- name: Http\Response\CookiesInterface::delete
  id: api/phalcon_http_response_cookiesinterface#delete
  summary: null
  belongs_to: Http\Response\CookiesInterface
  description: |-
    ### abstract public **delete** (*mixed* $name)

    ...
- name: Http\Response\CookiesInterface::get
  id: api/phalcon_http_response_cookiesinterface#get
  summary: null
  belongs_to: Http\Response\CookiesInterface
  description: |-
    ### abstract public **get** (*mixed* $name)

    ...
- name: Http\Response\CookiesInterface::has
  id: api/phalcon_http_response_cookiesinterface#has
  summary: null
  belongs_to: Http\Response\CookiesInterface
  description: |-
    ### abstract public **has** (*mixed* $name)

    ...
- name: Http\Response\CookiesInterface::isUsingEncryption
  id: api/phalcon_http_response_cookiesinterface#isusingencryption
  summary: null
  belongs_to: Http\Response\CookiesInterface
  description: |-
    ### abstract public **isUsingEncryption** ()

    ...
- name: Http\Response\CookiesInterface::reset
  id: api/phalcon_http_response_cookiesinterface#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Response\CookiesInterface
  description: "### abstract public **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_CookiesInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_CookiesInterface.html)"
- name: Http\Response\CookiesInterface::send
  id: api/phalcon_http_response_cookiesinterface#send
  summary: null
  belongs_to: Http\Response\CookiesInterface
  description: |-
    ### abstract public **send** ()

    ...
- name: Http\Response\CookiesInterface::set
  id: api/phalcon_http_response_cookiesinterface#set
  summary: null
  belongs_to: Http\Response\CookiesInterface
  description: |-
    ### abstract public **set** (*mixed* $name, \[*mixed* $value\], \[*mixed* $expire\], \[*mixed* $path\], \[*mixed* $secure\], \[*mixed* $domain\], \[*mixed* $httpOnly\])

    ...
- name: Http\Response\CookiesInterface::useEncryption
  id: api/phalcon_http_response_cookiesinterface#useencryption
  summary: null
  belongs_to: Http\Response\CookiesInterface
  description: |-
    ### abstract public **useEncryption** (*mixed* $useEncryption)

    ...
- name: Http\Response\Exception
  id: api/phalcon_http_response_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Http\\Response\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Exception.html)"
- name: Http\Response\Headers
  id: api/phalcon_http_response_headers
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Http\\Response\\Headers**\n\n*implements* [*Phalcon\\Http\\Response\\HeadersInterface*](phalcon_http_response_headersinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/headers.zep)\n\nThis class is a bag to manage the response headers\n\n## Methods\n\n### public **set** (*mixed* $name, *mixed* $value)\n\nSets a header to be sent at the end of the request\n\n### public **get** (*mixed* $name)\n\nGets a header value from the internal bag\n\n### public **setRaw** (*mixed* $header)\n\nSets a raw header to be sent at the end of the request\n\n### public **remove** (*mixed* $header)\n\nRemoves a header to be sent at the end of the request\n\n### public **send** ()\n\nSends the headers to the client\n\n### public **reset** ()\n\nReset set headers\n\n### public **toArray** ()\n\nReturns the current headers as an array\n\n### public static **\\_\\_set_state** (*array* $data)\n\nRestore a \\Phalcon\\Http\\Response\\Headers object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Headers.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Headers.html)"
- name: Http\Response\Headers::get
  id: api/phalcon_http_response_headers#get
  summary: null
  belongs_to: Http\Response\Headers
  description: |-
    ### public **get** (*mixed* $name)

    Gets a header value from the internal bag
- name: Http\Response\Headers::remove
  id: api/phalcon_http_response_headers#remove
  summary: null
  belongs_to: Http\Response\Headers
  description: |-
    ### public **remove** (*mixed* $header)

    Removes a header to be sent at the end of the request
- name: Http\Response\Headers::reset
  id: api/phalcon_http_response_headers#reset
  summary: null
  belongs_to: Http\Response\Headers
  description: |-
    ### public **reset** ()

    Reset set headers
- name: Http\Response\Headers::send
  id: api/phalcon_http_response_headers#send
  summary: null
  belongs_to: Http\Response\Headers
  description: |-
    ### public **send** ()

    Sends the headers to the client
- name: Http\Response\Headers::set
  id: api/phalcon_http_response_headers#set
  summary: null
  belongs_to: Http\Response\Headers
  description: |-
    ### public **set** (*mixed* $name, *mixed* $value)

    Sets a header to be sent at the end of the request
- name: Http\Response\Headers::setRaw
  id: api/phalcon_http_response_headers#setraw
  summary: null
  belongs_to: Http\Response\Headers
  description: |-
    ### public **setRaw** (*mixed* $header)

    Sets a raw header to be sent at the end of the request
- name: Http\Response\Headers::toArray
  id: api/phalcon_http_response_headers#toarray
  summary: null
  belongs_to: Http\Response\Headers
  description: |-
    ### public **toArray** ()

    Returns the current headers as an array
- name: Http\Response\Headers::__set_state
  id: api/phalcon_http_response_headers#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Response\Headers
  description: "### public static **\\_\\_set_state** (*array* $data)\n\nRestore a \\Phalcon\\Http\\Response\\Headers object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Headers.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Headers.html)"
- name: Http\Response\HeadersInterface
  id: api/phalcon_http_response_headersinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Http\\Response\\HeadersInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/headersinterface.zep)\n\n## Methods\n\n### abstract public **set** (*mixed* $name, *mixed* $value)\n\n...\n\n### abstract public **get** (*mixed* $name)\n\n...\n\n### abstract public **setRaw** (*mixed* $header)\n\n...\n\n### abstract public **send** ()\n\n...\n\n### abstract public **reset** ()\n\n...\n\n### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_HeadersInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_HeadersInterface.html)"
- name: Http\Response\HeadersInterface::get
  id: api/phalcon_http_response_headersinterface#get
  summary: null
  belongs_to: Http\Response\HeadersInterface
  description: |-
    ### abstract public **get** (*mixed* $name)

    ...
- name: Http\Response\HeadersInterface::reset
  id: api/phalcon_http_response_headersinterface#reset
  summary: null
  belongs_to: Http\Response\HeadersInterface
  description: |-
    ### abstract public **reset** ()

    ...
- name: Http\Response\HeadersInterface::send
  id: api/phalcon_http_response_headersinterface#send
  summary: null
  belongs_to: Http\Response\HeadersInterface
  description: |-
    ### abstract public **send** ()

    ...
- name: Http\Response\HeadersInterface::set
  id: api/phalcon_http_response_headersinterface#set
  summary: null
  belongs_to: Http\Response\HeadersInterface
  description: |-
    ### abstract public **set** (*mixed* $name, *mixed* $value)

    ...
- name: Http\Response\HeadersInterface::setRaw
  id: api/phalcon_http_response_headersinterface#setraw
  summary: null
  belongs_to: Http\Response\HeadersInterface
  description: |-
    ### abstract public **setRaw** (*mixed* $header)

    ...
- name: Http\Response\HeadersInterface::__set_state
  id: api/phalcon_http_response_headersinterface#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Http\Response\HeadersInterface
  description: "### abstract public static **\\_\\_set_state** (*array* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_HeadersInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_HeadersInterface.html)"
- name: Image
  id: api/phalcon_image
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Image**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/image.zep)\n\n## Constants\n\n### *integer* **NONE**\n\n### *integer* **WIDTH**\n\n### *integer* **HEIGHT**\n\n### *integer* **AUTO**\n\n### *integer* **INVERSE**\n\n### *integer* **PRECISE**\n\n### *integer* **TENSILE**\n\n### *integer* **HORIZONTAL**\n\n### *integer* **VERTICAL**\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image.html)"
- name: Image::AUTO
  id: api/phalcon_image#auto
  summary: null
  belongs_to: Image
  description: '### *integer* **AUTO**'
- name: Image::HEIGHT
  id: api/phalcon_image#height
  summary: null
  belongs_to: Image
  description: '### *integer* **HEIGHT**'
- name: Image::HORIZONTAL
  id: api/phalcon_image#horizontal
  summary: null
  belongs_to: Image
  description: '### *integer* **HORIZONTAL**'
- name: Image::INVERSE
  id: api/phalcon_image#inverse
  summary: null
  belongs_to: Image
  description: '### *integer* **INVERSE**'
- name: Image::NONE
  id: api/phalcon_image#none
  summary: null
  belongs_to: Image
  description: '### *integer* **NONE**'
- name: Image::PRECISE
  id: api/phalcon_image#precise
  summary: null
  belongs_to: Image
  description: '### *integer* **PRECISE**'
- name: Image::TENSILE
  id: api/phalcon_image#tensile
  summary: null
  belongs_to: Image
  description: '### *integer* **TENSILE**'
- name: Image::VERTICAL
  id: api/phalcon_image#vertical
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Image
  description: "### *integer* **VERTICAL**\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image.html)"
- name: Image::WIDTH
  id: api/phalcon_image#width
  summary: null
  belongs_to: Image
  description: '### *integer* **WIDTH**'
- name: Images
  id: reference/images
  summary: Phalcon\Image is the component that allows you to manipulate image files
  description: "# Images\n\n[*Phalcon\\Image*](../api/phalcon_image) is the component that allows you to manipulate image files. Multiple operations can be performed on the same image object.\n\n> This guide is not intended to be a complete documentation of available methods and their arguments. Please visit the [*API*](https://docs.phalconphp.com/en/latest/api/index.html) for a complete reference.\n\n## Adapters\n\nThis component makes use of adapters to encapsulate specific image manipulator programs. The following image manipulator programs are supported:\n\n| Class                                                                   | Description                                                                          |\n|-------------------------------------------------------------------------|--------------------------------------------------------------------------------------|\n| [*Phalcon\\Image\\Adapter\\Gd*](../api/phalcon_image_adapter_gd)           | Requires the [GD PHP extension](http://php.net/manual/en/book.image.php).            |\n| [*Phalcon\\Image\\Adapter\\Imagick*](../api/phalcon_image_adapter_imagick) | Requires the [ImageMagick PHP extension](http://php.net/manual/en/book.imagick.php). |\n\n### Implementing your own adapters\n\nThe [*Phalcon\\Image\\AdapterInterface*](../api/phalcon_image_adapterinterface) interface must be implemented in order to create your own image adapters or extend the existing ones.\n\n## Saving and rendering images\n\nBefore we begin with the various features of the image component, it’s worth understanding how to save and render these images.\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n// ...\n\n// Overwrite the original image\n$image->save();\n```\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n// ...\n\n// Save to 'new-image.jpg'\n$image->save(\"new-image.jpg\");\n```\n\nYou can also change the format of the image:\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n// ...\n\n// Save as a PNG file\n$image->save(\"image.png\");\n```\n\nWhen saving as a JPEG, you can also specify the quality as the second parameter:\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n// ...\n\n// Save as a JPEG with 80% quality\n$image->save(\"image.jpg\", 80);\n```\n\n## Resizing images\n\nThere are several modes of resizing:\n\n- `\\Phalcon\\Image::WIDTH`\n- `\\Phalcon\\Image::HEIGHT`\n- `\\Phalcon\\Image::NONE`\n- `\\Phalcon\\Image::TENSILE`\n- `\\Phalcon\\Image::AUTO`\n- `\\Phalcon\\Image::INVERSE`\n- `\\Phalcon\\Image::PRECISE`\n\n### `\\Phalcon\\Image::WIDTH`\n\nThe height will automatically be generated to keep the proportions the same; if you specify a height, it will be ignored.\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$image->resize(\n    300,\n    null,\n    \\Phalcon\\Image::WIDTH\n);\n\n$image->save(\"resized-image.jpg\");\n```\n\n### `\\Phalcon\\Image::HEIGHT`\n\nThe width will automatically be generated to keep the proportions the same; if you specify a width, it will be ignored.\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$image->resize(\n    null,\n    300,\n    \\Phalcon\\Image::HEIGHT\n);\n\n$image->save(\"resized-image.jpg\");\n```\n\n### `\\Phalcon\\Image::NONE`\n\nThe `NONE` constant ignores the original image’s ratio. Neither width and height are required. If a dimension is not specified, the original dimension will be used. If the new proportions differ from the original proportions, the image may be distorted and stretched.\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$image->resize(\n    400,\n    200,\n    \\Phalcon\\Image::NONE\n);\n\n$image->save(\"resized-image.jpg\");\n```\n\n### `\\Phalcon\\Image::TENSILE`\n\nSimilar to the `NONE` constant, the `TENSILE` constant ignores the original image’s ratio. Both width and height are required. If the new proportions differ from the original proportions, the image may be distorted and stretched.\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$image->resize(\n    400,\n    200,\n    \\Phalcon\\Image::NONE\n);\n\n$image->save(\"resized-image.jpg\");\n```\n\n## Cropping images\n\nFor example, to get a 100px by 100px square from the centre of the image:\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$width   = 100;\n$height  = 100;\n$offsetX = (($image->getWidth() - $width) / 2);\n$offsetY = (($image->getHeight() - $height) / 2);\n\n$image->crop($width, $height, $offsetX, $offsetY);\n\n$image->save(\"cropped-image.jpg\");\n```\n\n## Rotating images\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n// Rotate an image by 90 degrees clockwise\n$image->rotate(90);\n\n$image->save(\"rotated-image.jpg\");\n```\n\n## Flipping images\n\nYou can flip an image horizontally (using the `\\Phalcon\\Image::HORIZONTAL` constant) and vertically (using the `\\Phalcon\\Image::VERTICAL` constant):\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n// Flip an image horizontally\n$image->flip(\n    \\Phalcon\\Image::HORIZONTAL\n);\n\n$image->save(\"flipped-image.jpg\");\n```\n\n## Sharpening images\n\nThe `sharpen()` method takes a single parameter - an integer between 0 (no effect) and 100 (very sharp):\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$image->sharpen(50);\n\n$image->save(\"sharpened-image.jpg\");\n```\n\n## Adding watermarks to images\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$watermark = new \\Phalcon\\Image\\Adapter\\Gd(\"me.jpg\");\n\n// Put the watermark in the top left corner\n$offsetX = 10;\n$offsetY = 10;\n\n$opacity = 70;\n\n$image->watermark(\n    $watermark,\n    $offsetX,\n    $offsetY,\n    $opacity\n);\n\n$image->save(\"watermarked-image.jpg\");\n```\n\nOf course, you can also manipulate the watermarked image before applying it to the main image:\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$watermark = new \\Phalcon\\Image\\Adapter\\Gd(\"me.jpg\");\n\n$watermark->resize(100, 100);\n$watermark->rotate(90);\n$watermark->sharpen(5);\n\n// Put the watermark in the bottom right corner with a 10px margin\n$offsetX = ($image->getWidth() - $watermark->getWidth() - 10);\n$offsetY = ($image->getHeight() - $watermark->getHeight() - 10);\n\n$opacity = 70;\n\n$image->watermark(\n    $watermark,\n    $offsetX,\n    $offsetY,\n    $opacity\n);\n\n$image->save(\"watermarked-image.jpg\");\n```\n\n## Blurring images\n\nThe `blur()` method takes a single parameter - an integer between 0 (no effect) and 100 (very blurry):\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$image->blur(50);\n\n$image->save(\"blurred-image.jpg\");\n```\n\n## Pixelating images\n\nThe `pixelate()` method takes a single parameter - the higher the integer, the more pixelated the image becomes:\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Gd(\"image.jpg\");\n\n$image->pixelate(10);\n\n$image->save(\"pixelated-image.jpg\");\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/images.html](https://docs.phalconphp.com/en/latest/reference/images.html)"
- name: Image\Adapter
  id: api/phalcon_image_adapter
  summary: This method scales the images using liquid rescaling method
  description: "# Abstract class **Phalcon\\Image\\Adapter**\n\n*implements* [*Phalcon\\Image\\AdapterInterface*](phalcon_image_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapter.zep)\n\nAll image adapters must use this class\n\n## Methods\n\n### public **getImage** ()\n\n...\n\n### public **getRealpath** ()\n\n...\n\n### public **getWidth** ()\n\nImage width\n\n### public **getHeight** ()\n\nImage height\n\n### public **getType** ()\n\nImage type Driver dependent\n\n### public **getMime** ()\n\nImage mime type\n\n### public **resize** (\\[*mixed* $width\\], \\[*mixed* $height\\], \\[*mixed* $master\\])\n\nResize the image to the given size\n\n### public **liquidRescale** (*mixed* $width, *mixed* $height, \\[*mixed* $deltaX\\], \\[*mixed* $rigidity\\])\n\nThis method scales the images using liquid rescaling method. Only support Imagick\n\n### public **crop** (*mixed* $width, *mixed* $height, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\])\n\nCrop an image to the given size\n\n### public **rotate** (*mixed* $degrees)\n\nRotate the image by a given amount\n\n### public **flip** (*mixed* $direction)\n\nFlip the image along the horizontal or vertical axis\n\n### public **sharpen** (*mixed* $amount)\n\nSharpen the image by a given amount\n\n### public **reflection** (*mixed* $height, \\[*mixed* $opacity\\], \\[*mixed* $fadeIn\\])\n\nAdd a reflection to an image\n\n### public **watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\])\n\nAdd a watermark to an image with the specified opacity\n\n### public **text** (*mixed* $text, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\], \\[*mixed* $color\\], \\[*mixed* $size\\], \\[*mixed* $fontfile\\])\n\nAdd a text to an image with a specified opacity\n\n### public **mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark)\n\nComposite one image onto another\n\n### public **background** (*mixed* $color, \\[*mixed* $opacity\\])\n\nSet the background color of an image\n\n### public **blur** (*mixed* $radius)\n\nBlur image\n\n### public **pixelate** (*mixed* $amount)\n\nPixelate image\n\n### public **save** (\\[*mixed* $file\\], \\[*mixed* $quality\\])\n\nSave the image\n\n### public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\])\n\nRender the image and return the binary string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter.html)"
- name: Image\Adapter::background
  id: api/phalcon_image_adapter#background
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **background** (*mixed* $color, \[*mixed* $opacity\])

    Set the background color of an image
- name: Image\Adapter::blur
  id: api/phalcon_image_adapter#blur
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **blur** (*mixed* $radius)

    Blur image
- name: Image\Adapter::crop
  id: api/phalcon_image_adapter#crop
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **crop** (*mixed* $width, *mixed* $height, \[*mixed* $offsetX\], \[*mixed* $offsetY\])

    Crop an image to the given size
- name: Image\Adapter::flip
  id: api/phalcon_image_adapter#flip
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **flip** (*mixed* $direction)

    Flip the image along the horizontal or vertical axis
- name: Image\Adapter::getHeight
  id: api/phalcon_image_adapter#getheight
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **getHeight** ()

    Image height
- name: Image\Adapter::getImage
  id: api/phalcon_image_adapter#getimage
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **getImage** ()

    ...
- name: Image\Adapter::getMime
  id: api/phalcon_image_adapter#getmime
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **getMime** ()

    Image mime type
- name: Image\Adapter::getRealpath
  id: api/phalcon_image_adapter#getrealpath
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **getRealpath** ()

    ...
- name: Image\Adapter::getType
  id: api/phalcon_image_adapter#gettype
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **getType** ()

    Image type Driver dependent
- name: Image\Adapter::getWidth
  id: api/phalcon_image_adapter#getwidth
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **getWidth** ()

    Image width
- name: Image\Adapter::liquidRescale
  id: api/phalcon_image_adapter#liquidrescale
  summary: This method scales the images using liquid rescaling method
  belongs_to: Image\Adapter
  description: |-
    ### public **liquidRescale** (*mixed* $width, *mixed* $height, \[*mixed* $deltaX\], \[*mixed* $rigidity\])

    This method scales the images using liquid rescaling method. Only support Imagick
- name: Image\Adapter::mask
  id: api/phalcon_image_adapter#mask
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **mask** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $watermark)

    Composite one image onto another
- name: Image\Adapter::pixelate
  id: api/phalcon_image_adapter#pixelate
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **pixelate** (*mixed* $amount)

    Pixelate image
- name: Image\Adapter::reflection
  id: api/phalcon_image_adapter#reflection
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **reflection** (*mixed* $height, \[*mixed* $opacity\], \[*mixed* $fadeIn\])

    Add a reflection to an image
- name: Image\Adapter::render
  id: api/phalcon_image_adapter#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Image\Adapter
  description: "### public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\])\n\nRender the image and return the binary string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter.html)"
- name: Image\Adapter::resize
  id: api/phalcon_image_adapter#resize
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **resize** (\[*mixed* $width\], \[*mixed* $height\], \[*mixed* $master\])

    Resize the image to the given size
- name: Image\Adapter::rotate
  id: api/phalcon_image_adapter#rotate
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **rotate** (*mixed* $degrees)

    Rotate the image by a given amount
- name: Image\Adapter::save
  id: api/phalcon_image_adapter#save
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **save** (\[*mixed* $file\], \[*mixed* $quality\])

    Save the image
- name: Image\Adapter::sharpen
  id: api/phalcon_image_adapter#sharpen
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **sharpen** (*mixed* $amount)

    Sharpen the image by a given amount
- name: Image\Adapter::text
  id: api/phalcon_image_adapter#text
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **text** (*mixed* $text, \[*mixed* $offsetX\], \[*mixed* $offsetY\], \[*mixed* $opacity\], \[*mixed* $color\], \[*mixed* $size\], \[*mixed* $fontfile\])

    Add a text to an image with a specified opacity
- name: Image\Adapter::watermark
  id: api/phalcon_image_adapter#watermark
  summary: null
  belongs_to: Image\Adapter
  description: |-
    ### public **watermark** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $watermark, \[*mixed* $offsetX\], \[*mixed* $offsetY\], \[*mixed* $opacity\])

    Add a watermark to an image with the specified opacity
- name: Image\AdapterInterface
  id: api/phalcon_image_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Image\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapterinterface.zep)\n\n## Methods\n\n### abstract public **resize** (\\[*mixed* $width\\], \\[*mixed* $height\\], \\[*mixed* $master\\])\n\n...\n\n### abstract public **crop** (*mixed* $width, *mixed* $height, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\])\n\n...\n\n### abstract public **rotate** (*mixed* $degrees)\n\n...\n\n### abstract public **flip** (*mixed* $direction)\n\n...\n\n### abstract public **sharpen** (*mixed* $amount)\n\n...\n\n### abstract public **reflection** (*mixed* $height, \\[*mixed* $opacity\\], \\[*mixed* $fadeIn\\])\n\n...\n\n### abstract public **watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\])\n\n...\n\n### abstract public **text** (*mixed* $text, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\], \\[*mixed* $color\\], \\[*mixed* $size\\], \\[*mixed* $fontfile\\])\n\n...\n\n### abstract public **mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark)\n\n...\n\n### abstract public **background** (*mixed* $color, \\[*mixed* $opacity\\])\n\n...\n\n### abstract public **blur** (*mixed* $radius)\n\n...\n\n### abstract public **pixelate** (*mixed* $amount)\n\n...\n\n### abstract public **save** (\\[*mixed* $file\\], \\[*mixed* $quality\\])\n\n...\n\n### abstract public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_AdapterInterface.html)"
- name: Image\AdapterInterface::background
  id: api/phalcon_image_adapterinterface#background
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **background** (*mixed* $color, \[*mixed* $opacity\])

    ...
- name: Image\AdapterInterface::blur
  id: api/phalcon_image_adapterinterface#blur
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **blur** (*mixed* $radius)

    ...
- name: Image\AdapterInterface::crop
  id: api/phalcon_image_adapterinterface#crop
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **crop** (*mixed* $width, *mixed* $height, \[*mixed* $offsetX\], \[*mixed* $offsetY\])

    ...
- name: Image\AdapterInterface::flip
  id: api/phalcon_image_adapterinterface#flip
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **flip** (*mixed* $direction)

    ...
- name: Image\AdapterInterface::mask
  id: api/phalcon_image_adapterinterface#mask
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **mask** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $watermark)

    ...
- name: Image\AdapterInterface::pixelate
  id: api/phalcon_image_adapterinterface#pixelate
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **pixelate** (*mixed* $amount)

    ...
- name: Image\AdapterInterface::reflection
  id: api/phalcon_image_adapterinterface#reflection
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **reflection** (*mixed* $height, \[*mixed* $opacity\], \[*mixed* $fadeIn\])

    ...
- name: Image\AdapterInterface::render
  id: api/phalcon_image_adapterinterface#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Image\AdapterInterface
  description: "### abstract public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_AdapterInterface.html)"
- name: Image\AdapterInterface::resize
  id: api/phalcon_image_adapterinterface#resize
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **resize** (\[*mixed* $width\], \[*mixed* $height\], \[*mixed* $master\])

    ...
- name: Image\AdapterInterface::rotate
  id: api/phalcon_image_adapterinterface#rotate
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **rotate** (*mixed* $degrees)

    ...
- name: Image\AdapterInterface::save
  id: api/phalcon_image_adapterinterface#save
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **save** (\[*mixed* $file\], \[*mixed* $quality\])

    ...
- name: Image\AdapterInterface::sharpen
  id: api/phalcon_image_adapterinterface#sharpen
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **sharpen** (*mixed* $amount)

    ...
- name: Image\AdapterInterface::text
  id: api/phalcon_image_adapterinterface#text
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **text** (*mixed* $text, \[*mixed* $offsetX\], \[*mixed* $offsetY\], \[*mixed* $opacity\], \[*mixed* $color\], \[*mixed* $size\], \[*mixed* $fontfile\])

    ...
- name: Image\AdapterInterface::watermark
  id: api/phalcon_image_adapterinterface#watermark
  summary: null
  belongs_to: Image\AdapterInterface
  description: |-
    ### abstract public **watermark** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $watermark, \[*mixed* $offsetX\], \[*mixed* $offsetY\], \[*mixed* $opacity\])

    ...
- name: Image\Adapter\Gd
  id: api/phalcon_image_adapter_gd
  summary: This method scales the images using liquid rescaling method
  description: "# Class **Phalcon\\Image\\Adapter\\Gd**\n\n*extends* abstract class [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n*implements* [*Phalcon\\Image\\AdapterInterface*](phalcon_image_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapter/gd.zep)\n\n## Methods\n\n### public static **check** ()\n\n...\n\n### public **\\_\\_construct** (*mixed* $file, \\[*mixed* $width\\], \\[*mixed* $height\\])\n\n...\n\n### protected **\\_resize** (*mixed* $width, *mixed* $height)\n\n...\n\n### protected **\\_crop** (*mixed* $width, *mixed* $height, *mixed* $offsetX, *mixed* $offsetY)\n\n...\n\n### protected **\\_rotate** (*mixed* $degrees)\n\n...\n\n### protected **\\_flip** (*mixed* $direction)\n\n...\n\n### protected **\\_sharpen** (*mixed* $amount)\n\n...\n\n### protected **\\_reflection** (*mixed* $height, *mixed* $opacity, *mixed* $fadeIn)\n\n...\n\n### protected **\\_watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity)\n\n...\n\n### protected **\\_text** (*mixed* $text, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity, *mixed* $r, *mixed* $g, *mixed* $b, *mixed* $size, *mixed* $fontfile)\n\n...\n\n### protected **\\_mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $mask)\n\n...\n\n### protected **\\_background** (*mixed* $r, *mixed* $g, *mixed* $b, *mixed* $opacity)\n\n...\n\n### protected **\\_blur** (*mixed* $radius)\n\n...\n\n### protected **\\_pixelate** (*mixed* $amount)\n\n...\n\n### protected **\\_save** (*mixed* $file, *mixed* $quality)\n\n...\n\n### protected **\\_render** (*mixed* $ext, *mixed* $quality)\n\n...\n\n### protected **\\_create** (*mixed* $width, *mixed* $height)\n\n...\n\n### public **\\_\\_destruct** ()\n\n...\n\n### public **getImage** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getRealpath** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getWidth** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage width\n\n### public **getHeight** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage height\n\n### public **getType** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage type Driver dependent\n\n### public **getMime** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage mime type\n\n### public **resize** (\\[*mixed* $width\\], \\[*mixed* $height\\], \\[*mixed* $master\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nResize the image to the given size\n\n### public **liquidRescale** (*mixed* $width, *mixed* $height, \\[*mixed* $deltaX\\], \\[*mixed* $rigidity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nThis method scales the images using liquid rescaling method. Only support Imagick\n\n### public **crop** (*mixed* $width, *mixed* $height, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nCrop an image to the given size\n\n### public **rotate** (*mixed* $degrees) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRotate the image by a given amount\n\n### public **flip** (*mixed* $direction) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nFlip the image along the horizontal or vertical axis\n\n### public **sharpen** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSharpen the image by a given amount\n\n### public **reflection** (*mixed* $height, \\[*mixed* $opacity\\], \\[*mixed* $fadeIn\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a reflection to an image\n\n### public **watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a watermark to an image with the specified opacity\n\n### public **text** (*mixed* $text, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\], \\[*mixed* $color\\], \\[*mixed* $size\\], \\[*mixed* $fontfile\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a text to an image with a specified opacity\n\n### public **mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nComposite one image onto another\n\n### public **background** (*mixed* $color, \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSet the background color of an image\n\n### public **blur** (*mixed* $radius) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nBlur image\n\n### public **pixelate** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nPixelate image\n\n### public **save** (\\[*mixed* $file\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSave the image\n\n### public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRender the image and return the binary string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Gd.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Gd.html)"
- name: Image\Adapter\Gd::check
  id: api/phalcon_image_adapter_gd#check
  summary: null
  belongs_to: Image\Adapter\Gd
  description: |-
    ### public static **check** ()

    ...

    ### public **\_\_construct** (*mixed* $file, \[*mixed* $width\], \[*mixed* $height\])

    ...

    ### protected **\_resize** (*mixed* $width, *mixed* $height)

    ...

    ### protected **\_crop** (*mixed* $width, *mixed* $height, *mixed* $offsetX, *mixed* $offsetY)

    ...

    ### protected **\_rotate** (*mixed* $degrees)

    ...

    ### protected **\_flip** (*mixed* $direction)

    ...

    ### protected **\_sharpen** (*mixed* $amount)

    ...

    ### protected **\_reflection** (*mixed* $height, *mixed* $opacity, *mixed* $fadeIn)

    ...

    ### protected **\_watermark** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $watermark, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity)

    ...

    ### protected **\_text** (*mixed* $text, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity, *mixed* $r, *mixed* $g, *mixed* $b, *mixed* $size, *mixed* $fontfile)

    ...

    ### protected **\_mask** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $mask)

    ...

    ### protected **\_background** (*mixed* $r, *mixed* $g, *mixed* $b, *mixed* $opacity)

    ...

    ### protected **\_blur** (*mixed* $radius)

    ...

    ### protected **\_pixelate** (*mixed* $amount)

    ...

    ### protected **\_save** (*mixed* $file, *mixed* $quality)

    ...

    ### protected **\_render** (*mixed* $ext, *mixed* $quality)

    ...

    ### protected **\_create** (*mixed* $width, *mixed* $height)

    ...
- name: Image\Adapter\Gd::__destruct
  id: api/phalcon_image_adapter_gd#__destruct
  summary: This method scales the images using liquid rescaling method
  belongs_to: Image\Adapter\Gd
  description: "### public **\\_\\_destruct** ()\n\n...\n\n### public **getImage** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getRealpath** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getWidth** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage width\n\n### public **getHeight** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage height\n\n### public **getType** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage type Driver dependent\n\n### public **getMime** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage mime type\n\n### public **resize** (\\[*mixed* $width\\], \\[*mixed* $height\\], \\[*mixed* $master\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nResize the image to the given size\n\n### public **liquidRescale** (*mixed* $width, *mixed* $height, \\[*mixed* $deltaX\\], \\[*mixed* $rigidity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nThis method scales the images using liquid rescaling method. Only support Imagick\n\n### public **crop** (*mixed* $width, *mixed* $height, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nCrop an image to the given size\n\n### public **rotate** (*mixed* $degrees) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRotate the image by a given amount\n\n### public **flip** (*mixed* $direction) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nFlip the image along the horizontal or vertical axis\n\n### public **sharpen** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSharpen the image by a given amount\n\n### public **reflection** (*mixed* $height, \\[*mixed* $opacity\\], \\[*mixed* $fadeIn\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a reflection to an image\n\n### public **watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a watermark to an image with the specified opacity\n\n### public **text** (*mixed* $text, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\], \\[*mixed* $color\\], \\[*mixed* $size\\], \\[*mixed* $fontfile\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a text to an image with a specified opacity\n\n### public **mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nComposite one image onto another\n\n### public **background** (*mixed* $color, \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSet the background color of an image\n\n### public **blur** (*mixed* $radius) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nBlur image\n\n### public **pixelate** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nPixelate image\n\n### public **save** (\\[*mixed* $file\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSave the image\n\n### public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRender the image and return the binary string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Gd.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Gd.html)"
- name: Image\Adapter\Imagick
  id: api/phalcon_image_adapter_imagick
  summary: Image manipulation support
  description: "# Class **Phalcon\\Image\\Adapter\\Imagick**\n\n*extends* abstract class [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n*implements* [*Phalcon\\Image\\AdapterInterface*](phalcon_image_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapter/imagick.zep)\n\nImage manipulation support. Allows images to be resized, cropped, etc.\n\n``` php\n$image = new \\Phalcon\\Image\\Adapter\\Imagick(\"upload/test.jpg\");\n\n$image->resize(200, 200)->rotate(90)->crop(100, 100);\n\nif ($image->save()) {\n    echo \"success\";\n}\n```\n\n## Methods\n\n### public static **check** ()\n\nChecks if Imagick is enabled\n\n### public **\\_\\_construct** (*mixed* $file, \\[*mixed* $width\\], \\[*mixed* $height\\])\n\n\\Phalcon\\Image\\Adapter\\Imagick constructor\n\n### protected **\\_resize** (*mixed* $width, *mixed* $height)\n\nExecute a resize.\n\n### protected **\\_liquidRescale** (*mixed* $width, *mixed* $height, *mixed* $deltaX, *mixed* $rigidity)\n\nThis method scales the images using liquid rescaling method. Only support Imagick\n\n### protected **\\_crop** (*mixed* $width, *mixed* $height, *mixed* $offsetX, *mixed* $offsetY)\n\nExecute a crop.\n\n### protected **\\_rotate** (*mixed* $degrees)\n\nExecute a rotation.\n\n### protected **\\_flip** (*mixed* $direction)\n\nExecute a flip.\n\n### protected **\\_sharpen** (*mixed* $amount)\n\nExecute a sharpen.\n\n### protected **\\_reflection** (*mixed* $height, *mixed* $opacity, *mixed* $fadeIn)\n\nExecute a reflection.\n\n### protected **\\_watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $image, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity)\n\nExecute a watermarking.\n\n### protected **\\_text** (*mixed* $text, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity, *mixed* $r, *mixed* $g, *mixed* $b, *mixed* $size, *mixed* $fontfile)\n\nExecute a text\n\n### protected **\\_mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $image)\n\nComposite one image onto another\n\n### protected **\\_background** (*mixed* $r, *mixed* $g, *mixed* $b, *mixed* $opacity)\n\nExecute a background.\n\n### protected **\\_blur** (*mixed* $radius)\n\nBlur image\n\n### protected **\\_pixelate** (*mixed* $amount)\n\nPixelate image\n\n### protected **\\_save** (*mixed* $file, *mixed* $quality)\n\nExecute a save.\n\n### protected **\\_render** (*mixed* $extension, *mixed* $quality)\n\nExecute a render.\n\n### public **\\_\\_destruct** ()\n\nDestroys the loaded image to free up resources.\n\n### public **getInternalImInstance** ()\n\nGet instance\n\n### public **setResourceLimit** (*mixed* $type, *mixed* $limit)\n\nSets the limit for a particular resource in megabytes\n\n### public **getImage** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getRealpath** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getWidth** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage width\n\n### public **getHeight** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage height\n\n### public **getType** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage type Driver dependent\n\n### public **getMime** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage mime type\n\n### public **resize** (\\[*mixed* $width\\], \\[*mixed* $height\\], \\[*mixed* $master\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nResize the image to the given size\n\n### public **liquidRescale** (*mixed* $width, *mixed* $height, \\[*mixed* $deltaX\\], \\[*mixed* $rigidity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nThis method scales the images using liquid rescaling method. Only support Imagick\n\n### public **crop** (*mixed* $width, *mixed* $height, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nCrop an image to the given size\n\n### public **rotate** (*mixed* $degrees) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRotate the image by a given amount\n\n### public **flip** (*mixed* $direction) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nFlip the image along the horizontal or vertical axis\n\n### public **sharpen** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSharpen the image by a given amount\n\n### public **reflection** (*mixed* $height, \\[*mixed* $opacity\\], \\[*mixed* $fadeIn\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a reflection to an image\n\n### public **watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a watermark to an image with the specified opacity\n\n### public **text** (*mixed* $text, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\], \\[*mixed* $color\\], \\[*mixed* $size\\], \\[*mixed* $fontfile\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a text to an image with a specified opacity\n\n### public **mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nComposite one image onto another\n\n### public **background** (*mixed* $color, \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSet the background color of an image\n\n### public **blur** (*mixed* $radius) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nBlur image\n\n### public **pixelate** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nPixelate image\n\n### public **save** (\\[*mixed* $file\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSave the image\n\n### public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRender the image and return the binary string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Imagick.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Imagick.html)"
- name: Image\Adapter\Imagick::check
  id: api/phalcon_image_adapter_imagick#check
  summary: Execute a resize
  belongs_to: Image\Adapter\Imagick
  description: |-
    ### public static **check** ()

    Checks if Imagick is enabled

    ### public **\_\_construct** (*mixed* $file, \[*mixed* $width\], \[*mixed* $height\])

    \Phalcon\Image\Adapter\Imagick constructor

    ### protected **\_resize** (*mixed* $width, *mixed* $height)

    Execute a resize.

    ### protected **\_liquidRescale** (*mixed* $width, *mixed* $height, *mixed* $deltaX, *mixed* $rigidity)

    This method scales the images using liquid rescaling method. Only support Imagick

    ### protected **\_crop** (*mixed* $width, *mixed* $height, *mixed* $offsetX, *mixed* $offsetY)

    Execute a crop.

    ### protected **\_rotate** (*mixed* $degrees)

    Execute a rotation.

    ### protected **\_flip** (*mixed* $direction)

    Execute a flip.

    ### protected **\_sharpen** (*mixed* $amount)

    Execute a sharpen.

    ### protected **\_reflection** (*mixed* $height, *mixed* $opacity, *mixed* $fadeIn)

    Execute a reflection.

    ### protected **\_watermark** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $image, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity)

    Execute a watermarking.

    ### protected **\_text** (*mixed* $text, *mixed* $offsetX, *mixed* $offsetY, *mixed* $opacity, *mixed* $r, *mixed* $g, *mixed* $b, *mixed* $size, *mixed* $fontfile)

    Execute a text

    ### protected **\_mask** ([*Phalcon\Image\Adapter*](phalcon_image_adapter) $image)

    Composite one image onto another

    ### protected **\_background** (*mixed* $r, *mixed* $g, *mixed* $b, *mixed* $opacity)

    Execute a background.

    ### protected **\_blur** (*mixed* $radius)

    Blur image

    ### protected **\_pixelate** (*mixed* $amount)

    Pixelate image

    ### protected **\_save** (*mixed* $file, *mixed* $quality)

    Execute a save.

    ### protected **\_render** (*mixed* $extension, *mixed* $quality)

    Execute a render.
- name: Image\Adapter\Imagick::getInternalImInstance
  id: api/phalcon_image_adapter_imagick#getinternaliminstance
  summary: null
  belongs_to: Image\Adapter\Imagick
  description: |-
    ### public **getInternalImInstance** ()

    Get instance
- name: Image\Adapter\Imagick::setResourceLimit
  id: api/phalcon_image_adapter_imagick#setresourcelimit
  summary: This method scales the images using liquid rescaling method
  belongs_to: Image\Adapter\Imagick
  description: "### public **setResourceLimit** (*mixed* $type, *mixed* $limit)\n\nSets the limit for a particular resource in megabytes\n\n### public **getImage** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getRealpath** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\n...\n\n### public **getWidth** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage width\n\n### public **getHeight** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage height\n\n### public **getType** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage type Driver dependent\n\n### public **getMime** () inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nImage mime type\n\n### public **resize** (\\[*mixed* $width\\], \\[*mixed* $height\\], \\[*mixed* $master\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nResize the image to the given size\n\n### public **liquidRescale** (*mixed* $width, *mixed* $height, \\[*mixed* $deltaX\\], \\[*mixed* $rigidity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nThis method scales the images using liquid rescaling method. Only support Imagick\n\n### public **crop** (*mixed* $width, *mixed* $height, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nCrop an image to the given size\n\n### public **rotate** (*mixed* $degrees) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRotate the image by a given amount\n\n### public **flip** (*mixed* $direction) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nFlip the image along the horizontal or vertical axis\n\n### public **sharpen** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSharpen the image by a given amount\n\n### public **reflection** (*mixed* $height, \\[*mixed* $opacity\\], \\[*mixed* $fadeIn\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a reflection to an image\n\n### public **watermark** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a watermark to an image with the specified opacity\n\n### public **text** (*mixed* $text, \\[*mixed* $offsetX\\], \\[*mixed* $offsetY\\], \\[*mixed* $opacity\\], \\[*mixed* $color\\], \\[*mixed* $size\\], \\[*mixed* $fontfile\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nAdd a text to an image with a specified opacity\n\n### public **mask** ([*Phalcon\\Image\\Adapter*](phalcon_image_adapter) $watermark) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nComposite one image onto another\n\n### public **background** (*mixed* $color, \\[*mixed* $opacity\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSet the background color of an image\n\n### public **blur** (*mixed* $radius) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nBlur image\n\n### public **pixelate** (*mixed* $amount) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nPixelate image\n\n### public **save** (\\[*mixed* $file\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nSave the image\n\n### public **render** (\\[*mixed* $ext\\], \\[*mixed* $quality\\]) inherited from [*Phalcon\\Image\\Adapter*](phalcon_image_adapter)\n\nRender the image and return the binary string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Imagick.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Imagick.html)"
- name: Image\Adapter\Imagick::__destruct
  id: api/phalcon_image_adapter_imagick#__destruct
  summary: Destroys the loaded image to free up resources
  belongs_to: Image\Adapter\Imagick
  description: |-
    ### public **\_\_destruct** ()

    Destroys the loaded image to free up resources.
- name: Image\Exception
  id: api/phalcon_image_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Image\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/image/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Exception.html)"
- name: Improving Performance with Cache
  id: reference/cache
  summary: Phalcon provides the Phalcon\Cache class allowing faster access to frequently used or already processed data
  description: "# Improving Performance with Cache\n\nPhalcon provides the [*Phalcon\\Cache*](cache) class allowing faster access to frequently used or already processed data. [*Phalcon\\Cache*](cache) is written in C, achieving higher performance and reducing the overhead when getting items from the backends. This class uses an internal structure of frontend and backend components. Front-end components act as input sources or interfaces, while backend components offer storage options to the class.\n\n## When to implement cache?\n\nAlthough this component is very fast, implementing it in cases that are not needed could lead to a loss of performance rather than gain. We recommend you check this cases before using a cache:\n\n- You are making complex calculations that every time return the same result (changing infrequently)\n- You are using a lot of helpers and the output generated is almost always the same\n- You are accessing database data constantly and these data rarely change\n\n> *NOTE* Even after implementing the cache, you should check the hit ratio of your cache over a period of time. This can easily be done, especially in the case of Memcache or Apc, with the relevant tools that the backends provide.\n\n## Caching Behavior\n\nThe caching process is divided into 2 parts:\n\n- **Frontend**: This part is responsible for checking if a key has expired and perform additional transformations to the data before storing and after retrieving them from the backend-\n- **Backend**: This part is responsible for communicating, writing/reading the data required by the frontend.\n\n## Caching Output Fragments\n\nAn output fragment is a piece of HTML or text that is cached as is and returned as is. The output is automatically captured from the ob\\_\\* functions or the PHP output so that it can be saved in the cache. The following example demonstrates such usage. It receives the output generated by PHP and stores it into a file. The contents of the file are refreshed every 172800 seconds (2 days).\n\nThe implementation of this caching mechanism allows us to gain performance by not executing the helper `Phalcon\\Tag::linkTo()` call whenever this piece of code is called.\n\n``` php\nuse Phalcon\\Tag;\nuse Phalcon\\Cache\\Backend\\File as BackFile;\nuse Phalcon\\Cache\\Frontend\\Output as FrontOutput;\n\n// Create an Output frontend. Cache the files for 2 days\n$frontCache = new FrontOutput(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the component that will cache from the \"Output\" to a \"File\" backend\n// Set the cache file directory - it's important to keep the \"/\" at the end of\n// the value for the folder\n$cache = new BackFile(\n    $frontCache,\n    [\n        \"cacheDir\" => \"../app/cache/\",\n    ]\n);\n\n// Get/Set the cache file to ../app/cache/my-cache.html\n$content = $cache->start(\"my-cache.html\");\n\n// If $content is null then the content will be generated for the cache\nif ($content === null) {\n    // Print date and time\n    echo date(\"r\");\n\n    // Generate a link to the sign-up action\n    echo Tag::linkTo(\n        [\n            \"user/signup\",\n            \"Sign Up\",\n            \"class\" => \"signup-button\",\n        ]\n    );\n\n    // Store the output into the cache file\n    $cache->save();\n} else {\n    // Echo the cached output\n    echo $content;\n}\n```\n\n*NOTE* In the example above, our code remains the same, echoing output to the user as it has been doing before. Our cache component transparently captures that output and stores it in the cache file (when the cache is generated) or it sends it back to the user pre-compiled from a previous call, thus avoiding expensive operations.\n\n## Caching Arbitrary Data\n\nCaching just data is equally important for your application. Caching can reduce database load by reusing commonly used (but not updated) data, thus speeding up your application.\n\n### File Backend Example\n\nOne of the caching adapters is ‘File’. The only key area for this adapter is the location of where the cache files will be stored. This is controlled by the cacheDir option which *must* have a backslash at the end of it.\n\n``` php\nuse Phalcon\\Cache\\Backend\\File as BackFile;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache the files for 2 days using a Data frontend\n$frontCache = new FrontData(\n    [\n        \"lifetime\" => 172800,\n    ]\n);\n\n// Create the component that will cache \"Data\" to a \"File\" backend\n// Set the cache file directory - important to keep the \"/\" at the end of\n// the value for the folder\n$cache = new BackFile(\n    $frontCache,\n    [\n        \"cacheDir\" => \"../app/cache/\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache->get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null because of cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" => \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache->save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n   echo $robot->name, \"\\n\";\n}\n```\n\n### Memcached Backend Example\n\nThe above example changes slightly (especially in terms of configuration) when we are using a Memcached backend.\n\n``` php\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\nuse Phalcon\\Cache\\Backend\\Libmemcached as BackMemCached;\n\n// Cache data for one hour\n$frontCache = new FrontData(\n    [\n        \"lifetime\" => 3600,\n    ]\n);\n\n// Create the component that will cache \"Data\" to a \"Memcached\" backend\n// Memcached connection settings\n$cache = new BackMemCached(\n    $frontCache,\n    [\n        \"servers\" => [\n            [\n                \"host\"   => \"127.0.0.1\",\n                \"port\"   => \"11211\",\n                \"weight\" => \"1\",\n            ]\n        ]\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache->get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null because of cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" => \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache->save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n   echo $robot->name, \"\\n\";\n}\n```\n\n## Querying the cache\n\nThe elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null.\n\n``` php\n// Retrieve products by key \"myProducts\"\n$products = $cache->get(\"myProducts\");\n```\n\nIf you want to know which keys are stored in the cache you could call the queryKeys method:\n\n``` php\n// Query all keys used in the cache\n$keys = $cache->queryKeys();\n\nforeach ($keys as $key) {\n    $data = $cache->get($key);\n\n    echo \"Key=\", $key, \" Data=\", $data;\n}\n\n// Query keys in the cache that begins with \"my-prefix\"\n$keys = $cache->queryKeys(\"my-prefix\");\n```\n\n## Deleting data from the cache\n\nThere are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data have been stored with.\n\n``` php\n// Delete an item with a specific key\n$cache->delete(\"someKey\");\n\n$keys = $cache->queryKeys();\n\n// Delete all items from the cache\nforeach ($keys as $key) {\n    $cache->delete($key);\n}\n```\n\n## Checking cache existence\n\nIt is possible to check if a cache already exists with a given key:\n\n``` php\nif ($cache->exists(\"someKey\")) {\n    echo $cache->get(\"someKey\");\n} else {\n    echo \"Cache does not exists!\";\n}\n```\n\n## Lifetime\n\nA “lifetime” is a time in seconds that a cache could live without expire. By default, all the created caches use the lifetime set in the frontend creation. You can set a specific lifetime in the creation or retrieving of the data from the cache:\n\nSetting the lifetime when retrieving:\n\n``` php\n$cacheKey = \"my.cache\";\n\n// Setting the cache when getting a result\n$robots = $cache->get($cacheKey, 3600);\n\nif ($robots === null) {\n    $robots = \"some robots\";\n\n    // Store it in the cache\n    $cache->save($cacheKey, $robots);\n}\n```\n\nSetting the lifetime when saving:\n\n``` php\n$cacheKey = \"my.cache\";\n\n$robots = $cache->get($cacheKey);\n\nif ($robots === null) {\n    $robots = \"some robots\";\n\n    // Setting the cache when saving data\n    $cache->save($cacheKey, $robots, 3600);\n}\n```\n\n## Multi-Level Cache\n\nThis feature of the cache component, allows the developer to implement a multi-level cache. This new feature is very useful because you can save the same data in several cache locations with different lifetimes, reading first from the one with the faster adapter and ending with the slowest one until the data expires:\n\n``` php\nuse Phalcon\\Cache\\Multiple;\nuse Phalcon\\Cache\\Backend\\Apc as ApcCache;\nuse Phalcon\\Cache\\Backend\\File as FileCache;\nuse Phalcon\\Cache\\Frontend\\Data as DataFrontend;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheCache;\n\n$ultraFastFrontend = new DataFrontend(\n    [\n        \"lifetime\" => 3600,\n    ]\n);\n\n$fastFrontend = new DataFrontend(\n    [\n        \"lifetime\" => 86400,\n    ]\n);\n\n$slowFrontend = new DataFrontend(\n    [\n        \"lifetime\" => 604800,\n    ]\n);\n\n// Backends are registered from the fastest to the slower\n$cache = new Multiple(\n    [\n        new ApcCache(\n            $ultraFastFrontend,\n            [\n                \"prefix\" => \"cache\",\n            ]\n        ),\n        new MemcacheCache(\n            $fastFrontend,\n            [\n                \"prefix\" => \"cache\",\n                \"host\"   => \"localhost\",\n                \"port\"   => \"11211\",\n            ]\n        ),\n        new FileCache(\n            $slowFrontend,\n            [\n                \"prefix\"   => \"cache\",\n                \"cacheDir\" => \"../app/cache/\",\n            ]\n        ),\n    ]\n);\n\n// Save, saves in every backend\n$cache->save(\"my-key\", $data);\n```\n\n## Frontend Adapters\n\nThe available frontend adapters that are used as interfaces or input sources to the cache are:\n\n| Adapter                                                                     | Description                                                                                                                                                    |\n|-----------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [*Phalcon\\Cache\\Frontend\\Output*](../api/phalcon_cache_frontend_output)     | Read input data from standard PHP output                                                                                                                       |\n| [*Phalcon\\Cache\\Frontend\\Data*](../api/phalcon_cache_frontend_data)         | It’s used to cache any kind of PHP data (big arrays, objects, text, etc). Data is serialized before stored in the backend.                                     |\n| [*Phalcon\\Cache\\Frontend\\Base64*](../api/phalcon_cache_frontend_base64)     | It’s used to cache binary data. The data is serialized using base64_encode before be stored in the backend.                                                    |\n| [*Phalcon\\Cache\\Frontend\\Json*](../api/phalcon_cache_frontend_json)         | Data is encoded in JSON before be stored in the backend. Decoded after be retrieved. This frontend is useful to share data with other languages or frameworks. |\n| [*Phalcon\\Cache\\Frontend\\Igbinary*](../api/phalcon_cache_frontend_igbinary) | It’s used to cache any kind of PHP data (big arrays, objects, text, etc). Data is serialized using IgBinary before be stored in the backend.                   |\n| [*Phalcon\\Cache\\Frontend\\None*](../api/phalcon_cache_frontend_none)         | It’s used to cache any kind of PHP data without serializing them.                                                                                              |\n\n### Implementing your own Frontend adapters\n\nThe [*Phalcon\\Cache\\FrontendInterface*](../api/phalcon_cache_frontendinterface) interface must be implemented in order to create your own frontend adapters or extend the existing ones.\n\n## Backend Adapters\n\nThe backend adapters available to store cache data are:\n\n| Adapter                                                                   | Description                                    | Info                                     | Required Extensions                                    |\n|---------------------------------------------------------------------------|------------------------------------------------|------------------------------------------|--------------------------------------------------------|\n| [*Phalcon\\Cache\\Backend\\File*](../api/phalcon_cache_backend_file)         | Stores data to local plain files               |                                          |                                                        |\n| [*Phalcon\\Cache\\Backend\\Memcache*](../api/phalcon_cache_backend_memcache) | Stores data to a memcached server              | [Memcached](http://www.php.net/memcache) | [memcache](http://pecl.php.net/package/memcache)       |\n| [*Phalcon\\Cache\\Backend\\Apc*](../api/phalcon_cache_backend_apc)           | Stores data to the Alternative PHP Cache (APC) | [APC](http://php.net/apc)                | [APC extension](http://pecl.php.net/package/APC)       |\n| [*Phalcon\\Cache\\Backend\\Mongo*](../api/phalcon_cache_backend_mongo)       | Stores data to Mongo Database                  | [MongoDb](http://mongodb.org/)           | [Mongo](http://pecl.php.net/package/mongo)             |\n| [*Phalcon\\Cache\\Backend\\Xcache*](../api/phalcon_cache_backend_xcache)     | Stores data in XCache                          | [XCache](http://xcache.lighttpd.net/)    | [xcache extension](http://pecl.php.net/package/xcache) |\n| [*Phalcon\\Cache\\Backend\\Redis*](../api/phalcon_cache_backend_redis)       | Stores data in Redis                           | [Redis](http://redis.io/)                | [redis extension](http://pecl.php.net/package/redis)   |\n\n### Implementing your own Backend adapters\n\nThe [*Phalcon\\Cache\\BackendInterface*](../api/phalcon_cache_backendinterface) interface must be implemented in order to create your own backend adapters or extend the existing ones.\n\n### File Backend Options\n\nThis backend will store cached content into files in the local server. The available options for this backend are:\n\n| Option   | Description                                                |\n|----------|------------------------------------------------------------|\n| prefix   | A prefix that is automatically prepended to the cache keys |\n| cacheDir | A writable directory on which cached files will be placed  |\n\n### Memcached Backend Options\n\nThis backend will store cached content on a memcached server. The available options for this backend are:\n\n| Option     | Description                                                |\n|------------|------------------------------------------------------------|\n| prefix     | A prefix that is automatically prepended to the cache keys |\n| host       | memcached host                                             |\n| port       | memcached port                                             |\n| persistent | create a persistent connection to memcached?               |\n\n### APC Backend Options\n\nThis backend will store cached content on Alternative PHP Cache ([APC](http://php.net/apc)). The available options for this backend are:\n\n| Option | Description                                                |\n|--------|------------------------------------------------------------|\n| prefix | A prefix that is automatically prepended to the cache keys |\n\n### Mongo Backend Options\n\nThis backend will store cached content on a MongoDB server. The available options for this backend are:\n\n| Option     | Description                                                |\n|------------|------------------------------------------------------------|\n| prefix     | A prefix that is automatically prepended to the cache keys |\n| server     | A MongoDB connection string                                |\n| db         | Mongo database name                                        |\n| collection | Mongo collection in the database                           |\n\n### XCache Backend Options\n\nThis backend will store cached content on XCache ([XCache](http://xcache.lighttpd.net/)). The available options for this backend are:\n\n| Option | Description                                                |\n|--------|------------------------------------------------------------|\n| prefix | A prefix that is automatically prepended to the cache keys |\n\n### Redis Backend Options\n\nThis backend will store cached content on a Redis server ([Redis](http://redis.io/)). The available options for this backend are:\n\n| Option     | Description                                                   |\n|------------|---------------------------------------------------------------|\n| prefix     | A prefix that is automatically prepended to the cache keys    |\n| host       | Redis host                                                    |\n| port       | Redis port                                                    |\n| auth       | Password to authenticate to a password-protected Redis server |\n| persistent | Create a persistent connection to Redis                       |\n| index      | The index of the Redis database to use                        |\n\nThere are more adapters available for this components in the [Phalcon Incubator](https://github.com/phalcon/incubator)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/cache.html](https://docs.phalconphp.com/en/latest/reference/cache.html)"
- name: 'Increasing Performance: What’s next?'
  id: reference/whats-next
  summary: 'Get faster applications requires refine many aspects: server, client, network, database, web server, static sources, etc'
  description: "# Increasing Performance: What’s next?\n\nGet faster applications requires refine many aspects: server, client, network, database, web server, static sources, etc. In this chapter we highlight scenarios where you can improve performance and how detect what is really slow in your application.\n\n## Profile on the Server\n\nEach application is different, the permanent profiling is important to understand where performance can be increased. Profiling gives us a real picture on what is really slow and what does not. Profiles can vary between a request and another, so it is important to make enough measurements to make conclusions.\n\n### Profiling with XDebug\n\n[Xdebug](http://xdebug.org/docs) provides an easier way to profile PHP applications, just install the extension and enable profiling in the php.ini:\n\n``` ini\nxdebug.profiler_enable = On\n```\n\nUsing a tool like [Webgrind](https://github.com/jokkedk/webgrind/) you can see which functions/methods are slower than others:\n\n### Profiling with Xhprof\n\n[Xhprof](https://github.com/facebook/xhprof) is another interesting extension to profile PHP applications. Add the following line to the start of the bootstrap file:\n\n``` php\nxhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);\n```\n\nThen at the end of the file save the profiled data:\n\n``` php\n$xhprof_data = xhprof_disable('/tmp');\n\n$XHPROF_ROOT = \"/var/www/xhprof/\";\ninclude_once $XHPROF_ROOT . \"/xhprof_lib/utils/xhprof_lib.php\";\ninclude_once $XHPROF_ROOT . \"/xhprof_lib/utils/xhprof_runs.php\";\n\n$xhprof_runs = new XHProfRuns_Default();\n$run_id = $xhprof_runs->save_run($xhprof_data, \"xhprof_testing\");\n\necho \"http://localhost/xhprof/xhprof_html/index.php?run={$run_id}&source=xhprof_testing\\n\";\n```\n\nXhprof provides a built-in HTML viewer to analyze the profiled data:\n\n### Profiling SQL Statements\n\nMost database systems provide tools to identify slow SQL statements. Detecting and fixing slow queries is very important in order to increase performance in the server side. In the Mysql case, you can use the slow query log to know what SQL queries are taking more time than expected:\n\n``` ini\nlog-slow-queries = /var/log/slow-queries.log\nlong_query_time = 1.5\n```\n\n## Profile on the Client\n\nSometimes we may need to improve the loading of static elements such as images, javascript and css to improve performance. The following tools are useful to detect common bottlenecks in the client side:\n\n### Profile with Chrome/Firefox\n\nMost modern browsers have tools to profile the page loading time. In Chrome you can use the web inspector to know how much time is taking the loading of the different resources required by a single page:\n\n[Firebug](http://getfirebug.com/) provides a similar functionality:\n\n## Yahoo! YSlow\n\n[YSlow](http://developer.yahoo.com/yslow/) analyzes web pages and suggests ways to improve their performance based on a set of [rules for high performance web pages](http://developer.yahoo.com/performance/rules.html)\n\n### Profile with Speed Tracer\n\n[Speed Tracer](https://developers.google.com/web-toolkit/speedtracer/) is a tool to help you identify and fix performance problems in your web applications. It visualizes metrics that are taken from low level instrumentation points inside of the browser and analyzes them as your application runs. Speed Tracer is available as a Chrome extension and works on all platforms where extensions are currently supported (Windows and Linux).\n\nThis tool is very useful because it help you to get the real time used to render the whole page including HTML parsing, Javascript evaluation and CSS styling.\n\n## Use a recent PHP version\n\nPHP is faster every day, using the latest version improves the performance of your applications and also of Phalcon.\n\n## Use a PHP Bytecode Cache\n\n[APC](http://php.net/manual/en/book.apc.php) as many other bytecode caches help an application to reduce the overhead of read, tokenize and parse PHP files in each request. Once the extension is installed use the following setting to enable APC:\n\n``` ini\napc.enabled = On\n```\n\nPHP 5.5 includes a built-in bytecode cache called ZendOptimizer+, this extension is also available for 5.3 and 5.4.\n\n## Do blocking work in the background\n\nProcess a video, send e-mails, compress a file or an image, etc., are slow tasks that must be processed in background jobs. There are a variety of tools that provide queuing or messaging systems that work well with PHP:\n\n- [Beanstalkd](http://kr.github.io/beanstalkd/)\n- [Redis](http://redis.io/)\n- [RabbitMQ](http://www.rabbitmq.com/)\n- [Resque](https://github.com/chrisboulton/php-resque)\n- [Gearman](http://gearman.org/)\n- [ZeroMQ](http://www.zeromq.org/)\n\n## Google Page Speed\n\n[mod_pagespeed](https://developers.google.com/speed/pagespeed/mod) speeds up your site and reduces page load time. This open-source Apache HTTP server module (also available for nginx as [ngx_pagespeed](https://developers.google.com/speed/pagespeed/ngx)) automatically applies web performance best practices to pages, and associated assets (CSS, JavaScript, images) without requiring that you modify your existing content or workflow.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/whats-next.html](https://docs.phalconphp.com/en/latest/reference/whats-next.html)"
- name: Installation
  id: reference/install
  summary: PHP extensions require a slightly different installation method to a traditional PHP-based library or framework
  description: "# Installation\n\nPHP extensions require a slightly different installation method to a traditional PHP-based library or framework. You can either download a binary package for the system of your choice or build it from the sources.\n\n## Windows\n\nTo use phalcon on Windows you can [download](http://phalconphp.com/en/download) a DLL library. Edit your php.ini file and then append at the end:\n\n``` bash\nextension=php_phalcon.dll\n```\n\nRestart your webserver.\n\nThe following screencast is a step-by-step guide to install Phalcon on Windows:\n\n### Related Guides\n\n- [Installation on XAMPP](xampp)\n- [Installation on WAMP](wamp)\n\n## Linux/Solaris\n\n### Debian / Ubuntu\n\nTo add the repository to your distribution:\n\n``` bash\n# Stable releases\ncurl -s https://packagecloud.io/install/repositories/phalcon/stable/script.deb.sh | sudo bash\n\n# Nightly releases\ncurl -s https://packagecloud.io/install/repositories/phalcon/nightly/script.deb.sh | sudo bash\n```\n\nThis only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds.\n\nTo install Phalcon:\n\n``` bash\nsudo apt-get install php5-phalcon\n\n# or for PHP 7\n\nsudo apt-get install php7.0-phalcon\n```\n\n### RPM distributions (i.e. CentOS)\n\nTo add the repository to our distribution:\n\n``` bash\n# Stable releases\ncurl -s https://packagecloud.io/install/repositories/phalcon/stable/script.rpm.sh | sudo bash\n\n# Nightly releases\ncurl -s https://packagecloud.io/install/repositories/phalcon/nightly/script.rpm.sh | sudo bash\n```\n\nThis only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds.\n\nTo install Phalcon:\n\n``` bash\nsudo yum install php56u-phalcon\n\n# or for PHP 7\n\nsudo yum install php70u-phalcon\n```\n\n### Compile from source\n\nOn a Linux/Solaris system you can easily compile and install the extension from the source code:\n\nPrerequisite packages are:\n\n- PHP \\>= 5.5 development resources\n- GCC compiler (Linux/Solaris)\n- Git (if not already installed in your system - unless you download the package from GitHub and upload it on your server via FTP/SFTP)\n\nSpecific packages for common platforms:\n\n``` bash\n# Ubuntu\nsudo apt-get install php5-dev libpcre3-dev gcc make php5-mysql\n\n# Suse\nsudo yast -i gcc make autoconf php5-devel php5-pear php5-mysql\n\n# CentOS/RedHat/Fedora\nsudo yum install php-devel pcre-devel gcc make\n\n# Solaris\npkg install gcc-45 php-56 apache-php56\n```\n\nCreating the extension:\n\n``` bash\ngit clone git://github.com/phalcon/cphalcon.git\n\ncd cphalcon/build\n\nsudo ./install\n```\n\nAdd extension to your PHP configuration:\n\n``` bash\n# Suse: Add a file called phalcon.ini in /etc/php5/conf.d/ with this content:\nextension=phalcon.so\n\n# CentOS/RedHat/Fedora: Add a file called phalcon.ini in /etc/php.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with apache2: Add a file called 30-phalcon.ini in /etc/php5/apache2/conf.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with php5-fpm: Add a file called 30-phalcon.ini in /etc/php5/fpm/conf.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with php5-cli: Add a file called 30-phalcon.ini in /etc/php5/cli/conf.d/ with this content:\nextension=phalcon.so\n```\n\nRestart the webserver.\n\nIf you are running Ubuntu/Debian with php5-fpm, restart it:\n\n``` bash\nsudo service php5-fpm restart\n```\n\nPhalcon automatically detects your architecture, however, you can force the compilation for a specific architecture:\n\n``` bash\ncd cphalcon/build\n\n# One of the following:\nsudo ./install 32bits\nsudo ./install 64bits\nsudo ./install safe\n```\n\nIf the automatic installer fails try building the extension manually:\n\n``` bash\ncd cphalcon/build/64bits\n\nexport CFLAGS=\"-O2 --fvisibility=hidden\"\n\n./configure --enable-phalcon\n\nmake && sudo make install\n```\n\n## Mac OS X\n\nOn a Mac OS X system you can compile and install the extension from the source code:\n\n### Requirements\n\nPrerequisite packages are:\n\n- PHP \\>= 5.5 development resources\n- XCode\n\n``` bash\n# brew\nbrew tap homebrew/homebrew-php\nbrew install php55-phalcon\nbrew install php56-phalcon\n\n# MacPorts\nsudo port install php55-phalcon\nsudo port install php56-phalcon\n```\n\nAdd extension to your PHP configuration.\n\n## FreeBSD\n\nA port is available for FreeBSD. Just only need these simple line commands to install it:\n\n``` bash\npkg_add -r phalcon\n```\n\nor\n\n``` bash\nexport CFLAGS=\"-O2 --fvisibility=hidden\"\n\ncd /usr/ports/www/phalcon\n\nmake install clean\n```\n\n## Checking your installation\n\nCheck your `phpinfo()` output for a section referencing “Phalcon” or execute the code snippet below:\n\n``` php\n<?php print_r(get_loaded_extensions()); ?>\n```\n\nThe Phalcon extension should appear as part of the output:\n\n``` php\nArray\n(\n    [0] => Core\n    [1] => libxml\n    [2] => filter\n    [3] => SPL\n    [4] => standard\n    [5] => phalcon\n    [6] => pdo_mysql\n)\n```\n\n## Installation Notes\n\nInstallation notes for Web Servers:\n\n- [Apache Installation Notes](apache)\n- [Nginx Installation Notes](nginx)\n- [Cherokee Installation Notes](cherokee)\n- [Using PHP Built-in webserver](built-in)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/install.html](https://docs.phalconphp.com/en/latest/reference/install.html)"
- name: Installation on WAMP
  id: reference/wamp
  summary: WampServer is a Windows web development environment
  description: "# Installation on WAMP\n\n[WampServer](http://www.wampserver.com/en/) is a Windows web development environment. It allows you to create web applications with Apache2, PHP and a MySQL database. Below are detailed instructions on how to install Phalcon on WampServer for Windows. Using the latest WampServer version is highly recommended.\n\n## Download the right version of Phalcon\n\nWAMP has both 32 and 64 bit versions. From the download section, you can choose the Phalcon for Windows accordingly to your desired architecture.\n\nAfter download the Phalcon library you will have a zip file like the one shown below:\n\nExtract the library from the archive to get the Phalcon DLL:\n\nCopy the file php_phalcon.dll to the PHP extensions. If WAMP is installed in the C:\\wamp folder, the extension needs to be in C:\\wamp\\bin\\php\\php5.5.12\\ext\n\nEdit the php.ini file, it is located at C:\\wamp\\bin\\php\\php5.5.12\\php.ini. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file: extension=php_phalcon.dll and save it.\n\nAlso edit another php.ini file, which is located at C:\\wamp\\bin\\apache\\apache2.4.9\\bin\\php.ini. Append at the end of the file: extension=php_phalcon.dll and save it.\n\nRestart the Apache Web Server. Do a single click on the WampServer icon at system tray. Choose “Restart All Services” from the pop-up menu. Check out that tray icon will become green again.\n\nOpen your browser to navigate to [http://localhost](http://localhost). The WAMP welcome page will appear. Look at the section “extensions loaded” to check if phalcon was loaded.\n\nCongrats!, You are now flying with Phalcon.\n\n## Related Guides\n\n- [*General Installation*](install)\n- [*Detailed Installation on XAMPP for Windows*](xampp)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/wamp.html](https://docs.phalconphp.com/en/latest/reference/wamp.html)"
- name: Installation on XAMPP
  id: reference/xampp
  summary: XAMPP is an easy to install Apache distribution containing MySQL, PHP and Perl
  description: "# Installation on XAMPP\n\n[XAMPP](https://www.apachefriends.org/download.html) is an easy to install Apache distribution containing MySQL, PHP and Perl. Once you download XAMPP, all you have to do is extract it and start using it. Below are detailed instructions on how to install Phalcon on XAMPP for Windows. Using the latest XAMPP version is highly recommended.\n\n## Download the right version of Phalcon\n\nXAMPP is always releasing 32 bit versions of Apache and PHP. You will need to download the x86 version of Phalcon for Windows from the download section.\n\nAfter downloading the Phalcon library you will have a zip file like the one shown below:\n\nExtract the library from the archive to get the Phalcon DLL:\n\nCopy the file php_phalcon.dll to the PHP extensions. If you have installed XAMPP in the C:\\xampp folder, the extension needs to be in C:\\xampp\\php\\ext\n\nEdit the php.ini file, it is located at C:\\xampp\\php\\php.ini. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file: extension=php_phalcon.dll and save it.\n\nRestart the Apache Web Server from the XAMPP Control Center. This will load the new PHP configuration.\n\nOpen your browser to navigate to [http://localhost](http://localhost). The XAMPP welcome page will appear. Click on the link phpinfo().\n\nphpinfo() will output a significant amount of information on screen about the current state of PHP. Scroll down to check if the phalcon extension has been loaded correctly.\n\nIf you can see the phalcon version in the phpinfo() output, congrats!, You are now flying with Phalcon.\n\n## Screencast\n\nThe following screencast is a step by step guide to install Phalcon on Windows:\n\n## Related Guides\n\n- [*General Installation*](install)\n- [*Detailed Installation on WAMP for Windows*](wamp)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/xampp.html](https://docs.phalconphp.com/en/latest/reference/xampp.html)"
- name: Internationalization
  id: reference/intl
  summary: Phalcon is written in C as an extension for PHP
  description: "# Internationalization\n\nPhalcon is written in C as an extension for PHP. There is a [PECL](http://pecl.php.net/package/intl) extension that offers internationalization functions to PHP applications called [intl](http://pecl.php.net/package/intl). Starting from PHP 5.4/5.5 this extension is bundled with PHP. Its documentation can be found in the pages of the official [PHP manual](http://www.php.net/manual/en/intro.intl.php).\n\nPhalcon does not offer this functionality, since creating such a component would be replicating existing code.\n\nIn the examples below, we will show you how to implement the [intl](http://pecl.php.net/package/intl) extension’s functionality into Phalcon powered applications.\n\n> This guide is not intended to be a complete documentation of the [intl](http://pecl.php.net/package/intl) extension. Please visit its the [documentation](http://www.php.net/manual/en/book.intl.php) of the extension for a reference.\n\n## Find out best available Locale\n\nThere are several ways to find out the best available locale using [intl](http://pecl.php.net/package/intl). One of them is to check the HTTP “Accept-Language” header:\n\n``` php\n$locale = Locale::acceptFromHttp($_SERVER[\"HTTP_ACCEPT_LANGUAGE\"]);\n\n// Locale could be something like \"en_GB\" or \"en\"\necho $locale;\n```\n\nBelow method returns a locale identified. It is used to get language, culture, or regionally-specific behavior from the Locale API.\n\nExamples of identifiers include:\n\n- en-US (English, United States)\n- ru-RU (Russian, Russia)\n- zh-Hant-TW (Chinese, Traditional Script, Taiwan)\n- fr-CA, fr-FR (French for Canada and France respectively)\n\n## Formatting messages based on Locale\n\nPart of creating a localized application is to produce concatenated, language-neutral messages. The [MessageFormatter](http://www.php.net/manual/en/class.messageformatter.php) allows for the production of those messages.\n\nPrinting numbers formatted based on some locale:\n\n``` php\n// Prints € 4 560\n$formatter = new MessageFormatter(\"fr_FR\", \"€ {0, number, integer}\");\necho $formatter->format([4560]);\n\n// Prints USD$ 4,560.5\n$formatter = new MessageFormatter(\"en_US\", \"USD$ {0, number}\");\necho $formatter->format([4560.50]);\n\n// Prints ARS$ 1.250,25\n$formatter = new MessageFormatter(\"es_AR\", \"ARS$ {0, number}\");\necho $formatter->format([1250.25]);\n```\n\nMessage formatting using time and date patterns:\n\n``` php\n// Setting parameters\n$time   = time();\n$values = [7, $time, $time];\n\n// Prints \"At 3:50:31 PM on Apr 19, 2015, there was a disturbance on planet 7.\"\n$pattern   = \"At {1, time} on {1, date}, there was a disturbance on planet {0, number}.\";\n$formatter = new MessageFormatter(\"en_US\", $pattern);\necho $formatter->format($values);\n\n// Prints \"À 15:53:01 le 19 avr. 2015, il y avait une perturbation sur la planète 7.\"\n$pattern   = \"À {1, time} le {1, date}, il y avait une perturbation sur la planète {0, number}.\";\n$formatter = new MessageFormatter(\"fr_FR\", $pattern);\necho $formatter->format($values);\n```\n\n## Locale-Sensitive comparison\n\nThe [Collator](http://www.php.net/manual/en/class.collator.php) class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:\n\n``` php\n// Create a collator using Spanish locale\n$collator = new Collator(\"es\");\n\n// Returns that the strings are equal, in spite of the emphasis on the \"o\"\n$collator->setStrength(Collator::PRIMARY);\nvar_dump($collator->compare(\"una canción\", \"una cancion\"));\n\n// Returns that the strings are not equal\n$collator->setStrength(Collator::DEFAULT_VALUE);\nvar_dump($collator->compare(\"una canción\", \"una cancion\"));\n```\n\n## Transliteration\n\n[Transliterator](http://www.php.net/manual/en/class.transliterator.php) provides transliteration of strings:\n\n``` php\n$id = \"Any-Latin; NFD; [:Nonspacing Mark:] Remove; NFC; [:Punctuation:] Remove; Lower();\";\n$transliterator = Transliterator::create($id);\n\n$string = \"garçon-étudiant-où-L'école\";\necho $transliterator->transliterate($string); // garconetudiantoulecole\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/intl.html](https://docs.phalconphp.com/en/latest/reference/intl.html)"
- name: Kernel
  id: api/phalcon_kernel
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Kernel**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/kernel.zep)\n\n## Methods\n\n### public static **preComputeHashKey** (*mixed* $key)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Kernel.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Kernel.html)"
- name: Kernel::preComputeHashKey
  id: api/phalcon_kernel#precomputehashkey
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Kernel
  description: "### public static **preComputeHashKey** (*mixed* $key)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Kernel.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Kernel.html)"
- name: List of examples
  id: reference/samples
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# List of examples\n\nFollowing examples are full applications you can use to learn more about Phalcon and use them as base for your own websites/applications:\n\n[TABLE]\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/samples.html](https://docs.phalconphp.com/en/latest/reference/samples.html)"
- name: Loader
  id: api/phalcon_loader
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Loader**\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/loader.zep)\n\nThis component helps to load your project classes automatically based on some conventions\n\n``` php\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some namespaces\n$loader->registerNamespaces(\n    [\n        \"Example\\\\Base\"    => \"vendor/example/base/\",\n        \"Example\\\\Adapter\" => \"vendor/example/adapter/\",\n        \"Example\"          => \"vendor/example/\",\n    ]\n);\n\n// Register autoloader\n$loader->register();\n\n// Requiring this class will automatically include file vendor/example/adapter/Some.php\n$adapter = new \\Example\\Adapter\\Some();\n```\n\n## Methods\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the events manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **setExtensions** (*array* $extensions)\n\nSets an array of file extensions that the loader must try in each attempt to locate the file\n\n### public **getExtensions** ()\n\nReturns the file extensions registered in the loader\n\n### public **registerNamespaces** (*array* $namespaces, \\[*mixed* $merge\\])\n\nRegister namespaces and their related directories\n\n### protected **prepareNamespace** (*array* $namespace)\n\n...\n\n### public **getNamespaces** ()\n\nReturns the namespaces currently registered in the autoloader\n\n### public **registerDirs** (*array* $directories, \\[*mixed* $merge\\])\n\nRegister directories in which “not found” classes could be found\n\n### public **getDirs** ()\n\nReturns the directories currently registered in the autoloader\n\n### public **registerFiles** (*array* $files, \\[*mixed* $merge\\])\n\nRegisters files that are “non-classes” hence need a “require”. This is very useful for including files that only have functions\n\n### public **getFiles** ()\n\nReturns the files currently registered in the autoloader\n\n### public **registerClasses** (*array* $classes, \\[*mixed* $merge\\])\n\nRegister classes and their locations\n\n### public **getClasses** ()\n\nReturns the class-map currently registered in the autoloader\n\n### public **register** (\\[*mixed* $prepend\\])\n\nRegister the autoload method\n\n### public **unregister** ()\n\nUnregister the autoload method\n\n### public **loadFiles** ()\n\nChecks if a file exists and then adds the file by doing virtual require\n\n### public **autoLoad** (*mixed* $className)\n\nAutoloads the registered classes\n\n### public **getFoundPath** ()\n\nGet the path when a class was found\n\n### public **getCheckedPath** ()\n\nGet the path the loader is checking for a path\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Loader.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Loader.html)"
- name: Loader::autoLoad
  id: api/phalcon_loader#autoload
  summary: null
  belongs_to: Loader
  description: |-
    ### public **autoLoad** (*mixed* $className)

    Autoloads the registered classes
- name: Loader::getCheckedPath
  id: api/phalcon_loader#getcheckedpath
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Loader
  description: "### public **getCheckedPath** ()\n\nGet the path the loader is checking for a path\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Loader.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Loader.html)"
- name: Loader::getClasses
  id: api/phalcon_loader#getclasses
  summary: null
  belongs_to: Loader
  description: |-
    ### public **getClasses** ()

    Returns the class-map currently registered in the autoloader
- name: Loader::getDirs
  id: api/phalcon_loader#getdirs
  summary: null
  belongs_to: Loader
  description: |-
    ### public **getDirs** ()

    Returns the directories currently registered in the autoloader
- name: Loader::getEventsManager
  id: api/phalcon_loader#geteventsmanager
  summary: null
  belongs_to: Loader
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Loader::getExtensions
  id: api/phalcon_loader#getextensions
  summary: null
  belongs_to: Loader
  description: |-
    ### public **getExtensions** ()

    Returns the file extensions registered in the loader
- name: Loader::getFiles
  id: api/phalcon_loader#getfiles
  summary: null
  belongs_to: Loader
  description: |-
    ### public **getFiles** ()

    Returns the files currently registered in the autoloader
- name: Loader::getFoundPath
  id: api/phalcon_loader#getfoundpath
  summary: null
  belongs_to: Loader
  description: |-
    ### public **getFoundPath** ()

    Get the path when a class was found
- name: Loader::getNamespaces
  id: api/phalcon_loader#getnamespaces
  summary: null
  belongs_to: Loader
  description: |-
    ### public **getNamespaces** ()

    Returns the namespaces currently registered in the autoloader
- name: Loader::loadFiles
  id: api/phalcon_loader#loadfiles
  summary: null
  belongs_to: Loader
  description: |-
    ### public **loadFiles** ()

    Checks if a file exists and then adds the file by doing virtual require
- name: Loader::register
  id: api/phalcon_loader#register
  summary: null
  belongs_to: Loader
  description: |-
    ### public **register** (\[*mixed* $prepend\])

    Register the autoload method
- name: Loader::registerClasses
  id: api/phalcon_loader#registerclasses
  summary: null
  belongs_to: Loader
  description: |-
    ### public **registerClasses** (*array* $classes, \[*mixed* $merge\])

    Register classes and their locations
- name: Loader::registerDirs
  id: api/phalcon_loader#registerdirs
  summary: null
  belongs_to: Loader
  description: |-
    ### public **registerDirs** (*array* $directories, \[*mixed* $merge\])

    Register directories in which “not found” classes could be found
- name: Loader::registerFiles
  id: api/phalcon_loader#registerfiles
  summary: null
  belongs_to: Loader
  description: |-
    ### public **registerFiles** (*array* $files, \[*mixed* $merge\])

    Registers files that are “non-classes” hence need a “require”. This is very useful for including files that only have functions
- name: Loader::registerNamespaces
  id: api/phalcon_loader#registernamespaces
  summary: null
  belongs_to: Loader
  description: |-
    ### public **registerNamespaces** (*array* $namespaces, \[*mixed* $merge\])

    Register namespaces and their related directories

    ### protected **prepareNamespace** (*array* $namespace)

    ...
- name: Loader::setEventsManager
  id: api/phalcon_loader#seteventsmanager
  summary: null
  belongs_to: Loader
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the events manager
- name: Loader::setExtensions
  id: api/phalcon_loader#setextensions
  summary: null
  belongs_to: Loader
  description: |-
    ### public **setExtensions** (*array* $extensions)

    Sets an array of file extensions that the loader must try in each attempt to locate the file
- name: Loader::unregister
  id: api/phalcon_loader#unregister
  summary: null
  belongs_to: Loader
  description: |-
    ### public **unregister** ()

    Unregister the autoload method
- name: Loader\Exception
  id: api/phalcon_loader_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Loader\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/loader/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Loader_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Loader_Exception.html)"
- name: Logger
  id: api/phalcon_logger
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Logger**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger.zep)\n\n## Constants\n\n### *integer* **SPECIAL**\n\n### *integer* **CUSTOM**\n\n### *integer* **DEBUG**\n\n### *integer* **INFO**\n\n### *integer* **NOTICE**\n\n### *integer* **WARNING**\n\n### *integer* **ERROR**\n\n### *integer* **ALERT**\n\n### *integer* **CRITICAL**\n\n### *integer* **EMERGENCE**\n\n### *integer* **EMERGENCY**\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger.html)"
- name: Logger::ALERT
  id: api/phalcon_logger#alert
  summary: null
  belongs_to: Logger
  description: '### *integer* **ALERT**'
- name: Logger::CRITICAL
  id: api/phalcon_logger#critical
  summary: null
  belongs_to: Logger
  description: '### *integer* **CRITICAL**'
- name: Logger::CUSTOM
  id: api/phalcon_logger#custom
  summary: null
  belongs_to: Logger
  description: '### *integer* **CUSTOM**'
- name: Logger::DEBUG
  id: api/phalcon_logger#debug
  summary: null
  belongs_to: Logger
  description: '### *integer* **DEBUG**'
- name: Logger::EMERGENCE
  id: api/phalcon_logger#emergence
  summary: null
  belongs_to: Logger
  description: '### *integer* **EMERGENCE**'
- name: Logger::EMERGENCY
  id: api/phalcon_logger#emergency
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger
  description: "### *integer* **EMERGENCY**\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger.html)"
- name: Logger::ERROR
  id: api/phalcon_logger#error
  summary: null
  belongs_to: Logger
  description: '### *integer* **ERROR**'
- name: Logger::INFO
  id: api/phalcon_logger#info
  summary: null
  belongs_to: Logger
  description: '### *integer* **INFO**'
- name: Logger::NOTICE
  id: api/phalcon_logger#notice
  summary: null
  belongs_to: Logger
  description: '### *integer* **NOTICE**'
- name: Logger::SPECIAL
  id: api/phalcon_logger#special
  summary: null
  belongs_to: Logger
  description: '### *integer* **SPECIAL**'
- name: Logger::WARNING
  id: api/phalcon_logger#warning
  summary: null
  belongs_to: Logger
  description: '### *integer* **WARNING**'
- name: Logger\Adapter
  id: api/phalcon_logger_adapter
  summary: Logs messages to the internal logger
  description: "# Abstract class **Phalcon\\Logger\\Adapter**\n\n*implements* [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter.zep)\n\nBase class for Phalcon\\Logger adapters\n\n## Methods\n\n### public **setLogLevel** (*mixed* $level)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** ()\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter)\n\nSets the message formatter\n\n### public **begin** ()\n\nStarts a transaction\n\n### public **commit** ()\n\nCommits the internal transaction\n\n### public **rollback** ()\n\nRollbacks the internal transaction\n\n### public **isTransaction** ()\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\])\n\nLogs messages to the internal logger. Appends logs to the logger\n\n### abstract public **getFormatter** () inherited from [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n...\n\n### abstract public **close** () inherited from [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter.html)"
- name: Logger\Adapter::alert
  id: api/phalcon_logger_adapter#alert
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **alert** (*mixed* $message, \[*array* $context\])

    Sends/Writes an alert message to the log
- name: Logger\Adapter::begin
  id: api/phalcon_logger_adapter#begin
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **begin** ()

    Starts a transaction
- name: Logger\Adapter::commit
  id: api/phalcon_logger_adapter#commit
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **commit** ()

    Commits the internal transaction
- name: Logger\Adapter::critical
  id: api/phalcon_logger_adapter#critical
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **critical** (*mixed* $message, \[*array* $context\])

    Sends/Writes a critical message to the log
- name: Logger\Adapter::debug
  id: api/phalcon_logger_adapter#debug
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **debug** (*mixed* $message, \[*array* $context\])

    Sends/Writes a debug message to the log
- name: Logger\Adapter::emergency
  id: api/phalcon_logger_adapter#emergency
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **emergency** (*mixed* $message, \[*array* $context\])

    Sends/Writes an emergency message to the log
- name: Logger\Adapter::error
  id: api/phalcon_logger_adapter#error
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **error** (*mixed* $message, \[*array* $context\])

    Sends/Writes an error message to the log
- name: Logger\Adapter::getLogLevel
  id: api/phalcon_logger_adapter#getloglevel
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **getLogLevel** ()

    Returns the current log level
- name: Logger\Adapter::info
  id: api/phalcon_logger_adapter#info
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **info** (*mixed* $message, \[*array* $context\])

    Sends/Writes an info message to the log
- name: Logger\Adapter::isTransaction
  id: api/phalcon_logger_adapter#istransaction
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **isTransaction** ()

    Returns the whether the logger is currently in an active transaction or not
- name: Logger\Adapter::log
  id: api/phalcon_logger_adapter#log
  summary: Logs messages to the internal logger
  belongs_to: Logger\Adapter
  description: "### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\])\n\nLogs messages to the internal logger. Appends logs to the logger\n\n### abstract public **getFormatter** () inherited from [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n...\n\n### abstract public **close** () inherited from [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter.html)"
- name: Logger\Adapter::notice
  id: api/phalcon_logger_adapter#notice
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **notice** (*mixed* $message, \[*array* $context\])

    Sends/Writes a notice message to the log
- name: Logger\Adapter::rollback
  id: api/phalcon_logger_adapter#rollback
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **rollback** ()

    Rollbacks the internal transaction
- name: Logger\Adapter::setFormatter
  id: api/phalcon_logger_adapter#setformatter
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **setFormatter** ([*Phalcon\Logger\FormatterInterface*](phalcon_logger_formatterinterface) $formatter)

    Sets the message formatter
- name: Logger\Adapter::setLogLevel
  id: api/phalcon_logger_adapter#setloglevel
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **setLogLevel** (*mixed* $level)

    Filters the logs sent to the handlers that are less or equal than a specific level
- name: Logger\Adapter::warning
  id: api/phalcon_logger_adapter#warning
  summary: null
  belongs_to: Logger\Adapter
  description: |-
    ### public **warning** (*mixed* $message, \[*array* $context\])

    Sends/Writes a warning message to the log
- name: Logger\AdapterInterface
  id: api/phalcon_logger_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Logger\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapterinterface.zep)\n\n## Methods\n\n### abstract public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter)\n\n...\n\n### abstract public **getFormatter** ()\n\n...\n\n### abstract public **setLogLevel** (*mixed* $level)\n\n...\n\n### abstract public **getLogLevel** ()\n\n...\n\n### abstract public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\])\n\n...\n\n### abstract public **begin** ()\n\n...\n\n### abstract public **commit** ()\n\n...\n\n### abstract public **rollback** ()\n\n...\n\n### abstract public **close** ()\n\n...\n\n### abstract public **debug** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n### abstract public **error** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n### abstract public **info** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n### abstract public **notice** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n### abstract public **warning** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n### abstract public **alert** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n### abstract public **emergency** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_AdapterInterface.html)"
- name: Logger\AdapterInterface::alert
  id: api/phalcon_logger_adapterinterface#alert
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **alert** (*mixed* $message, \[*array* $context\])

    ...
- name: Logger\AdapterInterface::begin
  id: api/phalcon_logger_adapterinterface#begin
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **begin** ()

    ...
- name: Logger\AdapterInterface::close
  id: api/phalcon_logger_adapterinterface#close
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **close** ()

    ...
- name: Logger\AdapterInterface::commit
  id: api/phalcon_logger_adapterinterface#commit
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **commit** ()

    ...
- name: Logger\AdapterInterface::debug
  id: api/phalcon_logger_adapterinterface#debug
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **debug** (*mixed* $message, \[*array* $context\])

    ...
- name: Logger\AdapterInterface::emergency
  id: api/phalcon_logger_adapterinterface#emergency
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\AdapterInterface
  description: "### abstract public **emergency** (*mixed* $message, \\[*array* $context\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_AdapterInterface.html)"
- name: Logger\AdapterInterface::error
  id: api/phalcon_logger_adapterinterface#error
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **error** (*mixed* $message, \[*array* $context\])

    ...
- name: Logger\AdapterInterface::getFormatter
  id: api/phalcon_logger_adapterinterface#getformatter
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **getFormatter** ()

    ...
- name: Logger\AdapterInterface::getLogLevel
  id: api/phalcon_logger_adapterinterface#getloglevel
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **getLogLevel** ()

    ...
- name: Logger\AdapterInterface::info
  id: api/phalcon_logger_adapterinterface#info
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **info** (*mixed* $message, \[*array* $context\])

    ...
- name: Logger\AdapterInterface::log
  id: api/phalcon_logger_adapterinterface#log
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **log** (*mixed* $type, \[*mixed* $message\], \[*array* $context\])

    ...
- name: Logger\AdapterInterface::notice
  id: api/phalcon_logger_adapterinterface#notice
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **notice** (*mixed* $message, \[*array* $context\])

    ...
- name: Logger\AdapterInterface::rollback
  id: api/phalcon_logger_adapterinterface#rollback
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **rollback** ()

    ...
- name: Logger\AdapterInterface::setFormatter
  id: api/phalcon_logger_adapterinterface#setformatter
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **setFormatter** ([*Phalcon\Logger\FormatterInterface*](phalcon_logger_formatterinterface) $formatter)

    ...
- name: Logger\AdapterInterface::setLogLevel
  id: api/phalcon_logger_adapterinterface#setloglevel
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **setLogLevel** (*mixed* $level)

    ...
- name: Logger\AdapterInterface::warning
  id: api/phalcon_logger_adapterinterface#warning
  summary: null
  belongs_to: Logger\AdapterInterface
  description: |-
    ### abstract public **warning** (*mixed* $message, \[*array* $context\])

    ...
- name: Logger\Adapter\File
  id: api/phalcon_logger_adapter_file
  summary: Logs messages to the internal logger
  description: "# Class **Phalcon\\Logger\\Adapter\\File**\n\n*extends* abstract class [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\n*implements* [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/file.zep)\n\nAdapter to store logs in plain text files\n\n``` php\n$logger = new \\Phalcon\\Logger\\Adapter\\File(\"app/logs/test.log\");\n\n$logger->log(\"This is a message\");\n$logger->log(\\Phalcon\\Logger::ERROR, \"This is an error\");\n$logger->error(\"This is another error\");\n\n$logger->close();\n```\n\n## Methods\n\n### public **getPath** ()\n\nFile Path\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $options\\])\n\nPhalcon\\Logger\\Adapter\\File constructor\n\n### public **getFormatter** ()\n\nReturns the internal formatter\n\n### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)\n\nWrites the log to the file itself\n\n### public **close** ()\n\nCloses the logger\n\n### public **\\_\\_wakeup** ()\n\nOpens the internal file handler after unserialization\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_File.html)"
- name: Logger\Adapter\File::close
  id: api/phalcon_logger_adapter_file#close
  summary: null
  belongs_to: Logger\Adapter\File
  description: |-
    ### public **close** ()

    Closes the logger
- name: Logger\Adapter\File::getFormatter
  id: api/phalcon_logger_adapter_file#getformatter
  summary: null
  belongs_to: Logger\Adapter\File
  description: |-
    ### public **getFormatter** ()

    Returns the internal formatter
- name: Logger\Adapter\File::getPath
  id: api/phalcon_logger_adapter_file#getpath
  summary: null
  belongs_to: Logger\Adapter\File
  description: |-
    ### public **getPath** ()

    File Path

    ### public **\_\_construct** (*string* $name, \[*array* $options\])

    Phalcon\Logger\Adapter\File constructor
- name: Logger\Adapter\File::logInternal
  id: api/phalcon_logger_adapter_file#loginternal
  summary: null
  belongs_to: Logger\Adapter\File
  description: |-
    ### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)

    Writes the log to the file itself
- name: Logger\Adapter\File::__wakeup
  id: api/phalcon_logger_adapter_file#__wakeup
  summary: Logs messages to the internal logger
  belongs_to: Logger\Adapter\File
  description: "### public **\\_\\_wakeup** ()\n\nOpens the internal file handler after unserialization\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_File.html)"
- name: Logger\Adapter\Firephp
  id: api/phalcon_logger_adapter_firephp
  summary: Logs messages to the internal logger
  description: "# Class **Phalcon\\Logger\\Adapter\\Firephp**\n\n*extends* abstract class [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\n*implements* [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/firephp.zep)\n\nSends logs to FirePHP\n\n``` php\nuse Phalcon\\Logger\\Adapter\\Firephp;\nuse Phalcon\\Logger;\n\n$logger = new Firephp();\n\n$logger->log(Logger::ERROR, \"This is an error\");\n$logger->error(\"This is another error\");\n```\n\n## Methods\n\n### public **getFormatter** ()\n\nReturns the internal formatter\n\n### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)\n\nWrites the log to the stream itself\n\n### public **close** ()\n\nCloses the logger\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Firephp.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Firephp.html)"
- name: Logger\Adapter\Firephp::close
  id: api/phalcon_logger_adapter_firephp#close
  summary: Logs messages to the internal logger
  belongs_to: Logger\Adapter\Firephp
  description: "### public **close** ()\n\nCloses the logger\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Firephp.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Firephp.html)"
- name: Logger\Adapter\Firephp::getFormatter
  id: api/phalcon_logger_adapter_firephp#getformatter
  summary: null
  belongs_to: Logger\Adapter\Firephp
  description: |-
    ### public **getFormatter** ()

    Returns the internal formatter
- name: Logger\Adapter\Firephp::logInternal
  id: api/phalcon_logger_adapter_firephp#loginternal
  summary: null
  belongs_to: Logger\Adapter\Firephp
  description: |-
    ### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)

    Writes the log to the stream itself
- name: Logger\Adapter\Stream
  id: api/phalcon_logger_adapter_stream
  summary: Logs messages to the internal logger
  description: "# Class **Phalcon\\Logger\\Adapter\\Stream**\n\n*extends* abstract class [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\n*implements* [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/stream.zep)\n\nSends logs to a valid PHP stream\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$logger = new Stream(\"php://stderr\");\n\n$logger->log(\"This is a message\");\n$logger->log(Logger::ERROR, \"This is an error\");\n$logger->error(\"This is another error\");\n```\n\n## Methods\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $options\\])\n\nPhalcon\\Logger\\Adapter\\Stream constructor\n\n### public **getFormatter** ()\n\nReturns the internal formatter\n\n### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)\n\nWrites the log to the stream itself\n\n### public **close** ()\n\nCloses the logger\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Stream.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Stream.html)"
- name: Logger\Adapter\Stream::close
  id: api/phalcon_logger_adapter_stream#close
  summary: Logs messages to the internal logger
  belongs_to: Logger\Adapter\Stream
  description: "### public **close** ()\n\nCloses the logger\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Stream.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Stream.html)"
- name: Logger\Adapter\Stream::getFormatter
  id: api/phalcon_logger_adapter_stream#getformatter
  summary: null
  belongs_to: Logger\Adapter\Stream
  description: |-
    ### public **getFormatter** ()

    Returns the internal formatter
- name: Logger\Adapter\Stream::logInternal
  id: api/phalcon_logger_adapter_stream#loginternal
  summary: null
  belongs_to: Logger\Adapter\Stream
  description: |-
    ### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)

    Writes the log to the stream itself
- name: Logger\Adapter\Syslog
  id: api/phalcon_logger_adapter_syslog
  summary: Logs messages to the internal logger
  description: "# Class **Phalcon\\Logger\\Adapter\\Syslog**\n\n*extends* abstract class [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\n*implements* [*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/syslog.zep)\n\nSends logs to the system logger\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Syslog;\n\n// LOG_USER is the only valid log type under Windows operating systems\n$logger = new Syslog(\n    \"ident\",\n    [\n        \"option\"   => LOG_CONS | LOG_NDELAY | LOG_PID,\n        \"facility\" => LOG_USER,\n    ]\n);\n\n$logger->log(\"This is a message\");\n$logger->log(Logger::ERROR, \"This is an error\");\n$logger->error(\"This is another error\");\n```\n\n## Methods\n\n### public **\\_\\_construct** (*string* $name, \\[*array* $options\\])\n\nPhalcon\\Logger\\Adapter\\Syslog constructor\n\n### public **getFormatter** ()\n\nReturns the internal formatter\n\n### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)\n\nWrites the log to the stream itself\n\n### public **close** ()\n\nCloses the logger\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Syslog.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Syslog.html)"
- name: Logger\Adapter\Syslog::close
  id: api/phalcon_logger_adapter_syslog#close
  summary: Logs messages to the internal logger
  belongs_to: Logger\Adapter\Syslog
  description: "### public **close** ()\n\nCloses the logger\n\n### public **setLogLevel** (*mixed* $level) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nFilters the logs sent to the handlers that are less or equal than a specific level\n\n### public **getLogLevel** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the current log level\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSets the message formatter\n\n### public **begin** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nStarts a transaction\n\n### public **commit** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nCommits the internal transaction\n\n### public **rollback** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nRollbacks the internal transaction\n\n### public **isTransaction** () inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nReturns the whether the logger is currently in an active transaction or not\n\n### public **critical** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nSends/Writes an alert message to the log\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Adapter*](phalcon_logger_adapter)\n\nLogs messages to the internal logger. Appends logs to the logger\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Syslog.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Syslog.html)"
- name: Logger\Adapter\Syslog::getFormatter
  id: api/phalcon_logger_adapter_syslog#getformatter
  summary: null
  belongs_to: Logger\Adapter\Syslog
  description: |-
    ### public **getFormatter** ()

    Returns the internal formatter
- name: Logger\Adapter\Syslog::logInternal
  id: api/phalcon_logger_adapter_syslog#loginternal
  summary: null
  belongs_to: Logger\Adapter\Syslog
  description: |-
    ### public **logInternal** (*mixed* $message, *mixed* $type, *mixed* $time, *array* $context)

    Writes the log to the stream itself
- name: Logger\Exception
  id: api/phalcon_logger_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Logger\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Exception.html)"
- name: Logger\Formatter
  id: api/phalcon_logger_formatter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Logger\\Formatter**\n\n*implements* [*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter.zep)\n\nThis is a base class for logger formatters\n\n## Methods\n\n### public **getTypeString** (*mixed* $type)\n\nReturns the string meaning of a logger constant\n\n### public **interpolate** (*string* $message, \\[*array* $context\\])\n\nInterpolates context values into the message placeholders\n\n### abstract public **format** (*mixed* $message, *mixed* $type, *mixed* $timestamp, \\[*mixed* $context\\]) inherited from [*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter.html)"
- name: Logger\Formatter::getTypeString
  id: api/phalcon_logger_formatter#gettypestring
  summary: null
  belongs_to: Logger\Formatter
  description: |-
    ### public **getTypeString** (*mixed* $type)

    Returns the string meaning of a logger constant
- name: Logger\Formatter::interpolate
  id: api/phalcon_logger_formatter#interpolate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\Formatter
  description: "### public **interpolate** (*string* $message, \\[*array* $context\\])\n\nInterpolates context values into the message placeholders\n\n### abstract public **format** (*mixed* $message, *mixed* $type, *mixed* $timestamp, \\[*mixed* $context\\]) inherited from [*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter.html)"
- name: Logger\FormatterInterface
  id: api/phalcon_logger_formatterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Logger\\FormatterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatterinterface.zep)\n\n## Methods\n\n### abstract public **format** (*mixed* $message, *mixed* $type, *mixed* $timestamp, \\[*mixed* $context\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_FormatterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_FormatterInterface.html)"
- name: Logger\FormatterInterface::format
  id: api/phalcon_logger_formatterinterface#format
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\FormatterInterface
  description: "### abstract public **format** (*mixed* $message, *mixed* $type, *mixed* $timestamp, \\[*mixed* $context\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_FormatterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_FormatterInterface.html)"
- name: Logger\Formatter\Firephp
  id: api/phalcon_logger_formatter_firephp
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Logger\\Formatter\\Firephp**\n\n*extends* abstract class [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\n*implements* [*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/firephp.zep)\n\nFormats messages so that they can be sent to FirePHP\n\n## Methods\n\n### public **getTypeString** (*mixed* $type)\n\nReturns the string meaning of a logger constant\n\n### public **setShowBacktrace** (\\[*mixed* $isShow\\])\n\nReturns the string meaning of a logger constant\n\n### public **getShowBacktrace** ()\n\nReturns the string meaning of a logger constant\n\n### public **enableLabels** (\\[*mixed* $isEnable\\])\n\nReturns the string meaning of a logger constant\n\n### public **labelsEnabled** ()\n\nReturns the labels enabled\n\n### public *string* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sending it to the log\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Firephp.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Firephp.html)"
- name: Logger\Formatter\Firephp::enableLabels
  id: api/phalcon_logger_formatter_firephp#enablelabels
  summary: null
  belongs_to: Logger\Formatter\Firephp
  description: |-
    ### public **enableLabels** (\[*mixed* $isEnable\])

    Returns the string meaning of a logger constant
- name: Logger\Formatter\Firephp::format
  id: api/phalcon_logger_formatter_firephp#format
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\Formatter\Firephp
  description: "### public *string* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sending it to the log\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Firephp.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Firephp.html)"
- name: Logger\Formatter\Firephp::getShowBacktrace
  id: api/phalcon_logger_formatter_firephp#getshowbacktrace
  summary: null
  belongs_to: Logger\Formatter\Firephp
  description: |-
    ### public **getShowBacktrace** ()

    Returns the string meaning of a logger constant
- name: Logger\Formatter\Firephp::getTypeString
  id: api/phalcon_logger_formatter_firephp#gettypestring
  summary: null
  belongs_to: Logger\Formatter\Firephp
  description: |-
    ### public **getTypeString** (*mixed* $type)

    Returns the string meaning of a logger constant
- name: Logger\Formatter\Firephp::labelsEnabled
  id: api/phalcon_logger_formatter_firephp#labelsenabled
  summary: null
  belongs_to: Logger\Formatter\Firephp
  description: |-
    ### public **labelsEnabled** ()

    Returns the labels enabled
- name: Logger\Formatter\Firephp::setShowBacktrace
  id: api/phalcon_logger_formatter_firephp#setshowbacktrace
  summary: null
  belongs_to: Logger\Formatter\Firephp
  description: |-
    ### public **setShowBacktrace** (\[*mixed* $isShow\])

    Returns the string meaning of a logger constant
- name: Logger\Formatter\Json
  id: api/phalcon_logger_formatter_json
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Logger\\Formatter\\Json**\n\n*extends* abstract class [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\n*implements* [*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/json.zep)\n\nFormats messages using JSON encoding\n\n## Methods\n\n### public *string* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sent it to the internal log\n\n### public **getTypeString** (*mixed* $type) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nReturns the string meaning of a logger constant\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Json.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Json.html)"
- name: Logger\Formatter\Json::format
  id: api/phalcon_logger_formatter_json#format
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\Formatter\Json
  description: "### public *string* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sent it to the internal log\n\n### public **getTypeString** (*mixed* $type) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nReturns the string meaning of a logger constant\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Json.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Json.html)"
- name: Logger\Formatter\Line
  id: api/phalcon_logger_formatter_line
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Logger\\Formatter\\Line**\n\n*extends* abstract class [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\n*implements* [*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/line.zep)\n\nFormats messages using an one-line string\n\n## Methods\n\n### public **getDateFormat** ()\n\nDefault date format\n\n### public **setDateFormat** (*mixed* $dateFormat)\n\nDefault date format\n\n### public **getFormat** ()\n\nFormat applied to each message\n\n### public **setFormat** (*mixed* $format)\n\nFormat applied to each message\n\n### public **\\_\\_construct** (\\[*string* $format\\], \\[*string* $dateFormat\\])\n\nPhalcon\\Logger\\Formatter\\Line construct\n\n### public *string* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sent it to the internal log\n\n### public **getTypeString** (*mixed* $type) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nReturns the string meaning of a logger constant\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Line.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Line.html)"
- name: Logger\Formatter\Line::format
  id: api/phalcon_logger_formatter_line#format
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\Formatter\Line
  description: "### public *string* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sent it to the internal log\n\n### public **getTypeString** (*mixed* $type) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nReturns the string meaning of a logger constant\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Line.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Line.html)"
- name: Logger\Formatter\Line::getDateFormat
  id: api/phalcon_logger_formatter_line#getdateformat
  summary: null
  belongs_to: Logger\Formatter\Line
  description: |-
    ### public **getDateFormat** ()

    Default date format
- name: Logger\Formatter\Line::getFormat
  id: api/phalcon_logger_formatter_line#getformat
  summary: null
  belongs_to: Logger\Formatter\Line
  description: |-
    ### public **getFormat** ()

    Format applied to each message
- name: Logger\Formatter\Line::setDateFormat
  id: api/phalcon_logger_formatter_line#setdateformat
  summary: null
  belongs_to: Logger\Formatter\Line
  description: |-
    ### public **setDateFormat** (*mixed* $dateFormat)

    Default date format
- name: Logger\Formatter\Line::setFormat
  id: api/phalcon_logger_formatter_line#setformat
  summary: null
  belongs_to: Logger\Formatter\Line
  description: |-
    ### public **setFormat** (*mixed* $format)

    Format applied to each message

    ### public **\_\_construct** (\[*string* $format\], \[*string* $dateFormat\])

    Phalcon\Logger\Formatter\Line construct
- name: Logger\Formatter\Syslog
  id: api/phalcon_logger_formatter_syslog
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Logger\\Formatter\\Syslog**\n\n*extends* abstract class [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\n*implements* [*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/syslog.zep)\n\nPrepares a message to be used in a Syslog backend\n\n## Methods\n\n### public *array* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sent it to the internal log\n\n### public **getTypeString** (*mixed* $type) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nReturns the string meaning of a logger constant\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Syslog.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Syslog.html)"
- name: Logger\Formatter\Syslog::format
  id: api/phalcon_logger_formatter_syslog#format
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\Formatter\Syslog
  description: "### public *array* **format** (*string* $message, *int* $type, *int* $timestamp, \\[*array* $context\\])\n\nApplies a format to a message before sent it to the internal log\n\n### public **getTypeString** (*mixed* $type) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nReturns the string meaning of a logger constant\n\n### public **interpolate** (*string* $message, \\[*array* $context\\]) inherited from [*Phalcon\\Logger\\Formatter*](phalcon_logger_formatter)\n\nInterpolates context values into the message placeholders\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Syslog.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Syslog.html)"
- name: Logger\Item
  id: api/phalcon_logger_item
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Logger\\Item**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/item.zep)\n\nRepresents each item in a logging transaction\n\n## Methods\n\n### public **getType** ()\n\nLog type\n\n### public **getMessage** ()\n\nLog message\n\n### public **getTime** ()\n\nLog timestamp\n\n### public **getContext** ()\n\n...\n\n### public **\\_\\_construct** (*string* $message, *integer* $type, \\[*integer* $time\\], \\[*array* $context\\])\n\nPhalcon\\Logger\\Item constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Item.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Item.html)"
- name: Logger\Item::getContext
  id: api/phalcon_logger_item#getcontext
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\Item
  description: "### public **getContext** ()\n\n...\n\n### public **\\_\\_construct** (*string* $message, *integer* $type, \\[*integer* $time\\], \\[*array* $context\\])\n\nPhalcon\\Logger\\Item constructor\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Item.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Item.html)"
- name: Logger\Item::getMessage
  id: api/phalcon_logger_item#getmessage
  summary: null
  belongs_to: Logger\Item
  description: |-
    ### public **getMessage** ()

    Log message
- name: Logger\Item::getTime
  id: api/phalcon_logger_item#gettime
  summary: null
  belongs_to: Logger\Item
  description: |-
    ### public **getTime** ()

    Log timestamp
- name: Logger\Item::getType
  id: api/phalcon_logger_item#gettype
  summary: null
  belongs_to: Logger\Item
  description: |-
    ### public **getType** ()

    Log type
- name: Logger\Multiple
  id: api/phalcon_logger_multiple
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Logger\\Multiple**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/multiple.zep)\n\nHandles multiples logger handlers\n\n## Methods\n\n### public **getLoggers** ()\n\n...\n\n### public **getFormatter** ()\n\n...\n\n### public **getLogLevel** ()\n\n...\n\n### public **push** ([*Phalcon\\Logger\\AdapterInterface*](phalcon_logger_adapterinterface) $logger)\n\nPushes a logger to the logger tail\n\n### public **setFormatter** ([*Phalcon\\Logger\\FormatterInterface*](phalcon_logger_formatterinterface) $formatter)\n\nSets a global formatter\n\n### public **setLogLevel** (*mixed* $level)\n\nSets a global level\n\n### public **log** (*mixed* $type, \\[*mixed* $message\\], \\[*array* $context\\])\n\nSends a message to each registered logger\n\n### public **critical** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an critical message to the log\n\n### public **emergency** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an emergency message to the log\n\n### public **debug** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes a debug message to the log\n\n### public **error** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an error message to the log\n\n### public **info** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an info message to the log\n\n### public **notice** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes a notice message to the log\n\n### public **warning** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes a warning message to the log\n\n### public **alert** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an alert message to the log\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Multiple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Multiple.html)"
- name: Logger\Multiple::alert
  id: api/phalcon_logger_multiple#alert
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Logger\Multiple
  description: "### public **alert** (*mixed* $message, \\[*array* $context\\])\n\nSends/Writes an alert message to the log\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Multiple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Multiple.html)"
- name: Logger\Multiple::critical
  id: api/phalcon_logger_multiple#critical
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **critical** (*mixed* $message, \[*array* $context\])

    Sends/Writes an critical message to the log
- name: Logger\Multiple::debug
  id: api/phalcon_logger_multiple#debug
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **debug** (*mixed* $message, \[*array* $context\])

    Sends/Writes a debug message to the log
- name: Logger\Multiple::emergency
  id: api/phalcon_logger_multiple#emergency
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **emergency** (*mixed* $message, \[*array* $context\])

    Sends/Writes an emergency message to the log
- name: Logger\Multiple::error
  id: api/phalcon_logger_multiple#error
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **error** (*mixed* $message, \[*array* $context\])

    Sends/Writes an error message to the log
- name: Logger\Multiple::getFormatter
  id: api/phalcon_logger_multiple#getformatter
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **getFormatter** ()

    ...
- name: Logger\Multiple::getLoggers
  id: api/phalcon_logger_multiple#getloggers
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **getLoggers** ()

    ...
- name: Logger\Multiple::getLogLevel
  id: api/phalcon_logger_multiple#getloglevel
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **getLogLevel** ()

    ...
- name: Logger\Multiple::info
  id: api/phalcon_logger_multiple#info
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **info** (*mixed* $message, \[*array* $context\])

    Sends/Writes an info message to the log
- name: Logger\Multiple::log
  id: api/phalcon_logger_multiple#log
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **log** (*mixed* $type, \[*mixed* $message\], \[*array* $context\])

    Sends a message to each registered logger
- name: Logger\Multiple::notice
  id: api/phalcon_logger_multiple#notice
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **notice** (*mixed* $message, \[*array* $context\])

    Sends/Writes a notice message to the log
- name: Logger\Multiple::push
  id: api/phalcon_logger_multiple#push
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **push** ([*Phalcon\Logger\AdapterInterface*](phalcon_logger_adapterinterface) $logger)

    Pushes a logger to the logger tail
- name: Logger\Multiple::setFormatter
  id: api/phalcon_logger_multiple#setformatter
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **setFormatter** ([*Phalcon\Logger\FormatterInterface*](phalcon_logger_formatterinterface) $formatter)

    Sets a global formatter
- name: Logger\Multiple::setLogLevel
  id: api/phalcon_logger_multiple#setloglevel
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **setLogLevel** (*mixed* $level)

    Sets a global level
- name: Logger\Multiple::warning
  id: api/phalcon_logger_multiple#warning
  summary: null
  belongs_to: Logger\Multiple
  description: |-
    ### public **warning** (*mixed* $message, \[*array* $context\])

    Sends/Writes a warning message to the log
- name: Logging
  id: reference/logging
  summary: Phalcon\Logger is a component whose purpose is to provide logging services for applications
  description: "# Logging\n\n[*Phalcon\\Logger*](../api/phalcon_logger) is a component whose purpose is to provide logging services for applications. It offers logging to different backends using different adapters. It also offers transaction logging, configuration options, different formats and filters. You can use the [*Phalcon\\Logger*](../api/phalcon_logger) for every logging need your application has, from debugging processes to tracing application flow.\n\n## Adapters\n\nThis component makes use of adapters to store the logged messages. The use of adapters allows for a common logging interface which provides the ability to easily switch backends if necessary. The adapters supported are:\n\n| Adapter                                                                   | Description               |\n|---------------------------------------------------------------------------|---------------------------|\n| [*Phalcon\\Logger\\Adapter\\File*](../api/phalcon_logger_adapter_file)       | Logs to a plain text file |\n| [*Phalcon\\Logger\\Adapter\\Stream*](../api/phalcon_logger_adapter_stream)   | Logs to a PHP Streams     |\n| [*Phalcon\\Logger\\Adapter\\Syslog*](../api/phalcon_logger_adapter_syslog)   | Logs to the system logger |\n| [*Phalcon\\Logger\\Adapter\\FirePHP*](../api/phalcon_logger_adapter_firephp) | Logs to the FirePHP       |\n\n## Creating a Log\n\nThe example below shows how to create a log and add messages to it:\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n$logger = new FileAdapter(\"app/logs/test.log\");\n\n\n\n// These are the different log levels available:\n\n$logger->critical(\n    \"This is a critical message\"\n);\n\n$logger->emergency(\n    \"This is an emergency message\"\n);\n\n$logger->debug(\n    \"This is a debug message\"\n);\n\n$logger->error(\n    \"This is an error message\"\n);\n\n$logger->info(\n    \"This is an info message\"\n);\n\n$logger->notice(\n    \"This is a notice message\"\n);\n\n$logger->warning(\n    \"This is a warning message\"\n);\n\n$logger->alert(\n    \"This is an alert message\"\n);\n\n\n\n// You can also use the log() method with a Logger constant:\n$logger->log(\n    \"This is another error message\",\n    Logger::ERROR\n);\n\n// If no constant is given, DEBUG is assumed.\n$logger->log(\n    \"This is a message\"\n);\n\n// You can also pass context parameters like this\n$logger->log(\n    \"This is a {message}\",\n    [\n        'message' => 'parameter'\n    ]\n);\n```\n\nThe log generated is below:\n\n``` none\n[Tue, 28 Jul 15 22:09:02 -0500][CRITICAL] This is a critical message\n[Tue, 28 Jul 15 22:09:02 -0500][EMERGENCY] This is an emergency message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a debug message\n[Tue, 28 Jul 15 22:09:02 -0500][ERROR] This is an error message\n[Tue, 28 Jul 15 22:09:02 -0500][INFO] This is an info message\n[Tue, 28 Jul 15 22:09:02 -0500][NOTICE] This is a notice message\n[Tue, 28 Jul 15 22:09:02 -0500][WARNING] This is a warning message\n[Tue, 28 Jul 15 22:09:02 -0500][ALERT] This is an alert message\n[Tue, 28 Jul 15 22:09:02 -0500][ERROR] This is another error message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a parameter\n```\n\nYou can also set a log level using the `setLogLevel()` method. This method takes a Logger constant and will only save log messages that are as important or more important than the constant:\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n$logger = new FileAdapter(\"app/logs/test.log\");\n\n$logger->setLogLevel(\n    Logger::CRITICAL\n);\n```\n\nIn the example above, only critical and emergency messages will get saved to the log. By default, everything is saved.\n\n## Transactions\n\nLogging data to an adapter i.e. File (file system) is always an expensive operation in terms of performance. To combat that, you can take advantage of logging transactions. Transactions store log data temporarily in memory and later on write the data to the relevant adapter (File in this case) in a single atomic operation.\n\n``` php\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n// Create the logger\n$logger = new FileAdapter(\"app/logs/test.log\");\n\n// Start a transaction\n$logger->begin();\n\n// Add messages\n\n$logger->alert(\n    \"This is an alert\"\n);\n\n$logger->error(\n    \"This is another error\"\n);\n\n// Commit messages to file\n$logger->commit();\n```\n\n## Logging to Multiple Handlers\n\n[*Phalcon\\Logger*](../api/phalcon_logger) can send messages to multiple handlers with a just single call:\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Multiple as MultipleStream;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\nuse Phalcon\\Logger\\Adapter\\Stream as StreamAdapter;\n\n$logger = new MultipleStream();\n\n\n\n$logger->push(\n    new FileAdapter(\"test.log\")\n);\n\n$logger->push(\n    new StreamAdapter(\"php://stdout\")\n);\n\n\n\n$logger->log(\n    \"This is a message\"\n);\n\n$logger->log(\n    \"This is an error\",\n    Logger::ERROR\n);\n\n$logger->error(\n    \"This is another error\"\n);\n```\n\nThe messages are sent to the handlers in the order they were registered.\n\n## Message Formatting\n\nThis component makes use of ‘formatters’ to format messages before sending them to the backend. The formatters available are:\n\n| Adapter                                                                       | Description                                              |\n|-------------------------------------------------------------------------------|----------------------------------------------------------|\n| [*Phalcon\\Logger\\Formatter\\Line*](../api/phalcon_logger_formatter_line)       | Formats the messages using a one-line string             |\n| [*Phalcon\\Logger\\Formatter\\Firephp*](../api/phalcon_logger_formatter_firephp) | Formats the messages so that they can be sent to FirePHP |\n| [*Phalcon\\Logger\\Formatter\\Json*](../api/phalcon_logger_formatter_json)       | Prepares a message to be encoded with JSON               |\n| [*Phalcon\\Logger\\Formatter\\Syslog*](../api/phalcon_logger_formatter_syslog)   | Prepares a message to be sent to syslog                  |\n\n### Line Formatter\n\nFormats the messages using a one-line string. The default logging format is:\n\n``` none\n[%date%][%type%] %message%\n```\n\nYou can change the default format using `setFormat()`, this allows you to change the format of the logged messages by defining your own. The log format variables allowed are:\n\n| Variable  | Description                              |\n|-----------|------------------------------------------|\n| %message% | The message itself expected to be logged |\n| %date%    | Date the message was added               |\n| %type%    | Uppercase string with message type       |\n\nThe example below shows how to change the log format:\n\n``` php\nuse Phalcon\\Logger\\Formatter\\Line as LineFormatter;\n\n$formatter = new LineFormatter(\"%date% - %message%\");\n\n// Changing the logger format\n$logger->setFormatter($formatter);\n```\n\n### Implementing your own formatters\n\nThe [*Phalcon\\Logger\\FormatterInterface*](../api/phalcon_logger_formatterinterface) interface must be implemented in order to create your own logger formatter or extend the existing ones.\n\n## Adapters\n\nThe following examples show the basic use of each adapter:\n\n### Stream Logger\n\nThe stream logger writes messages to a valid registered stream in PHP. A list of streams is available [here](http://php.net/manual/en/wrappers.php):\n\n``` php\nuse Phalcon\\Logger\\Adapter\\Stream as StreamAdapter;\n\n// Opens a stream using zlib compression\n$logger = new StreamAdapter(\"compress.zlib://week.log.gz\");\n\n// Writes the logs to stderr\n$logger = new StreamAdapter(\"php://stderr\");\n```\n\n### File Logger\n\nThis logger uses plain files to log any kind of data. By default all logger files are opened using append mode which opens the files for writing only; placing the file pointer at the end of the file. If the file does not exist, an attempt will be made to create it. You can change this mode by passing additional options to the constructor:\n\n``` php\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n// Create the file logger in 'w' mode\n$logger = new FileAdapter(\n    \"app/logs/test.log\",\n    [\n        \"mode\" => \"w\",\n    ]\n);\n```\n\n### Syslog Logger\n\nThis logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.\n\n``` php\nuse Phalcon\\Logger\\Adapter\\Syslog as SyslogAdapter;\n\n// Basic Usage\n$logger = new SyslogAdapter(null);\n\n// Setting ident/mode/facility\n$logger = new SyslogAdapter(\n    \"ident-name\",\n    [\n        \"option\"   => LOG_NDELAY,\n        \"facility\" => LOG_MAIL,\n    ]\n);\n```\n\n### FirePHP Logger\n\nThis logger sends messages in HTTP response headers that are displayed by [FirePHP](http://www.firephp.org/), a [Firebug](http://getfirebug.com/) extension for Firefox.\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Firephp as Firephp;\n\n$logger = new Firephp(\"\");\n\n\n\n$logger->log(\n    \"This is a message\"\n);\n\n$logger->log(\n    \"This is an error\",\n    Logger::ERROR\n);\n\n$logger->error(\n    \"This is another error\"\n);\n```\n\n### Implementing your own adapters\n\nThe [*Phalcon\\Logger\\AdapterInterface*](../api/phalcon_logger_adapterinterface) interface must be implemented in order to create your own logger adapters or extend the existing ones.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/logging.html](https://docs.phalconphp.com/en/latest/reference/logging.html)"
- name: Micro Applications
  id: reference/micro
  summary: With Phalcon you can create “Micro-Framework like” applications
  description: "# Micro Applications\n\nWith Phalcon you can create “Micro-Framework like” applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to implement small applications, APIs and prototypes in a practical way.\n\n``` php\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app->get(\n    \"/say/welcome/{name}\",\n    function ($name) {\n        echo \"<h1>Welcome $name!</h1>\";\n    }\n);\n\n$app->handle();\n```\n\n## Creating a Micro Application\n\n[*Phalcon\\Mvc\\Micro*](../api/phalcon_mvc_micro) is the class responsible for implementing a micro application.\n\n``` php\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n```\n\n## Defining routes\n\nAfter instantiating the object, you will need to add some routes. [*Phalcon\\Mvc\\Router*](../api/phalcon_mvc_router) manages routing internally. Routes must always start with /. A HTTP method constraint is optionally required when defining routes, so as to instruct the router to match only if the request also matches the HTTP methods. The following example shows how to define a route for the method GET:\n\n``` php\n$app->get(\n    \"/say/hello/{name}\",\n    function ($name) {\n        echo \"<h1>Hello! $name</h1>\";\n    }\n);\n```\n\nThe “get” method indicates that the associated HTTP method is GET. The route `/say/hello/{name}` also has a parameter `{$name}` that is passed directly to the route handler (the anonymous function). Handlers are executed when a route is matched. A handler could be any callable item in the PHP userland. The following example shows how to define different types of handlers:\n\n``` php\n// With a function\nfunction say_hello($name) {\n    echo \"<h1>Hello! $name</h1>\";\n}\n\n$app->get(\n    \"/say/hello/{name}\",\n    \"say_hello\"\n);\n\n// With a static method\n$app->get(\n    \"/say/hello/{name}\",\n    \"SomeClass::someSayMethod\"\n);\n\n// With a method in an object\n$myController = new MyController();\n$app->get(\n    \"/say/hello/{name}\",\n    [\n        $myController,\n        \"someAction\"\n    ]\n);\n\n// Anonymous function\n$app->get(\n    \"/say/hello/{name}\",\n    function ($name) {\n        echo \"<h1>Hello! $name</h1>\";\n    }\n);\n```\n\n[*Phalcon\\Mvc\\Micro*](../api/phalcon_mvc_micro) provides a set of methods to define the HTTP method (or methods) which the route is constrained for:\n\n``` php\n// Matches if the HTTP method is GET\n$app->get(\n    \"/api/products\",\n    \"get_products\"\n);\n\n// Matches if the HTTP method is POST\n$app->post(\n    \"/api/products/add\",\n    \"add_product\"\n);\n\n// Matches if the HTTP method is PUT\n$app->put(\n    \"/api/products/update/{id}\",\n    \"update_product\"\n);\n\n// Matches if the HTTP method is DELETE\n$app->delete(\n    \"/api/products/remove/{id}\",\n    \"delete_product\"\n);\n\n// Matches if the HTTP method is OPTIONS\n$app->options(\n    \"/api/products/info/{id}\",\n    \"info_product\"\n);\n\n// Matches if the HTTP method is PATCH\n$app->patch(\n    \"/api/products/update/{id}\",\n    \"info_product\"\n);\n\n// Matches if the HTTP method is GET or POST\n$app->map(\n    \"/repos/store/refs\",\n    \"action_product\"\n)->via(\n    [\n        \"GET\",\n        \"POST\",\n    ]\n);\n```\n\nTo access the HTTP method data `$app` needs to be passed into the closure:\n\n``` php\n// Matches if the HTTP method is POST\n$app->post(\n    \"/api/products/add\",\n    function () use ($app) {\n        echo $app->request->getPost(\"productID\");\n    }\n);\n```\n\n### Routes with Parameters\n\nDefining parameters in routes is very easy as demonstrated above. The name of the parameter has to be enclosed in brackets. Parameter formatting is also available using regular expressions to ensure consistency of data. This is demonstrated in the example below:\n\n``` php\n// This route have two parameters and each of them have a format\n$app->get(\n    \"/posts/{year:[0-9]+}/{title:[a-zA-Z\\-]+}\",\n    function ($year, $title) {\n        echo \"<h1>Title: $title</h1>\";\n        echo \"<h2>Year: $year</h2>\";\n    }\n);\n```\n\n### Starting Route\n\nNormally, the starting route in an application is the route /, and it will more frequent to be accessed by the method GET. This scenario is coded as follows:\n\n``` php\n// This is the start route\n$app->get(\n    \"/\",\n    function () {\n        echo \"<h1>Welcome!</h1>\";\n    }\n);\n```\n\n### Rewrite Rules\n\nThe following rules can be used together with Apache to rewrite the URis:\n\n``` apacheconf\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n</IfModule>\n```\n\n## Working with Responses\n\nYou are free to produce any kind of response in a handler: directly make an output, use a template engine, include a view, return a json, etc.:\n\n``` php\n// Direct output\n$app->get(\n    \"/say/hello\",\n    function () {\n        echo \"<h1>Hello! $name</h1>\";\n    }\n);\n\n// Requiring another file\n$app->get(\n    \"/show/results\",\n    function () {\n        require \"views/results.php\";\n    }\n);\n\n// Returning JSON\n$app->get(\n    \"/get/some-json\",\n    function () {\n        echo json_encode(\n            [\n                \"some\",\n                \"important\",\n                \"data\",\n            ]\n        );\n    }\n);\n```\n\nIn addition to that, you have access to the service [*“response”*](response), with which you can manipulate better the response:\n\n``` php\n$app->get(\n    \"/show/data\",\n    function () use ($app) {\n        // Set the Content-Type header\n        $app->response->setContentType(\"text/plain\");\n\n        $app->response->sendHeaders();\n\n        // Print a file\n        readfile(\"data.txt\");\n    }\n);\n```\n\nOr create a response object and return it from the handler:\n\n``` php\n$app->get(\n    \"/show/data\",\n    function () {\n        // Create a response\n        $response = new Phalcon\\Http\\Response();\n\n        // Set the Content-Type header\n        $response->setContentType(\"text/plain\");\n\n        // Pass the content of a file\n        $response->setContent(file_get_contents(\"data.txt\"));\n\n        // Return the response\n        return $response;\n    }\n);\n```\n\n## Making redirections\n\nRedirections could be performed to forward the execution flow to another route:\n\n``` php\n// This route makes a redirection to another route\n$app->post(\"/old/welcome\",\n    function () use ($app) {\n        $app->response->redirect(\"new/welcome\");\n\n        $app->response->sendHeaders();\n    }\n);\n\n$app->post(\"/new/welcome\",\n    function () use ($app) {\n        echo \"This is the new Welcome\";\n    }\n);\n```\n\n## Generating URLs for Routes\n\n[*Phalcon\\Mvc\\Url*](url) can be used to produce URLs based on the defined routes. You need to set up a name for the route; by this way the “url” service can produce the corresponding URL:\n\n``` php\n// Set a route with the name \"show-post\"\n$app->get(\n    \"/blog/{year}/{title}\",\n    function ($year, $title) use ($app) {\n        // ... Show the post here\n    }\n)->setName(\"show-post\");\n\n// Produce a URL somewhere\n$app->get(\n    \"/\",\n    function () use ($app) {\n        echo '<a href=\"', $app->url->get(\n            [\n                \"for\"   => \"show-post\",\n                \"title\" => \"php-is-a-great-framework\",\n                \"year\"  => 2015\n            ]\n        ), '\">Show the post</a>';\n    }\n);\n```\n\n## Interacting with the Dependency Injector\n\nIn the micro application, a [*Phalcon\\Di\\FactoryDefault*](di) services container is created implicitly; additionally you can create outside the application a container to manipulate its services:\n\n``` php\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Config\\Adapter\\Ini as IniConfig;\n\n$di = new FactoryDefault();\n\n$di->set(\n    \"config\",\n    function () {\n        return new IniConfig(\"config.ini\");\n    }\n);\n\n$app = new Micro();\n\n$app->setDI($di);\n\n$app->get(\n    \"/\",\n    function () use ($app) {\n        // Read a setting from the config\n        echo $app->config->app_name;\n    }\n);\n\n$app->post(\n    \"/contact\",\n    function () use ($app) {\n        $app->flash->success(\"Yes!, the contact was made!\");\n    }\n);\n```\n\nThe array-syntax is allowed to easily set/get services in the internal services container:\n\n``` php\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlAdapter;\n\n$app = new Micro();\n\n// Setup the database service\n$app[\"db\"] = function () {\n    return new MysqlAdapter(\n        [\n            \"host\"     => \"localhost\",\n            \"username\" => \"root\",\n            \"password\" => \"secret\",\n            \"dbname\"   => \"test_db\"\n        ]\n    );\n};\n\n$app->get(\n    \"/blog\",\n    function () use ($app) {\n        $news = $app[\"db\"]->query(\"SELECT * FROM news\");\n\n        foreach ($news as $new) {\n            echo $new->title;\n        }\n    }\n);\n```\n\n## Not-Found Handler\n\nWhen a user tries to access a route that is not defined, the micro application will try to execute the “Not-Found” handler. An example of that behavior is below:\n\n``` php\n$app->notFound(\n    function () use ($app) {\n        $app->response->setStatusCode(404, \"Not Found\");\n\n        $app->response->sendHeaders();\n\n        echo \"This is crazy, but this page was not found!\";\n    }\n);\n```\n\n## Models in Micro Applications\n\n[*Models*](models) can be used transparently in Micro Applications, only is required an autoloader to load models:\n\n``` php\n$loader = new \\Phalcon\\Loader();\n\n$loader->registerDirs(\n    [\n        __DIR__ . \"/models/\"\n    ]\n)->register();\n\n$app = new \\Phalcon\\Mvc\\Micro();\n\n$app->get(\n    \"/products/find\",\n    function () {\n        $products = Products::find();\n\n        foreach ($products as $product) {\n            echo $product->name, \"<br>\";\n        }\n    }\n);\n\n$app->handle();\n```\n\n## Inject model instances\n\nBy using class [*Phalcon\\Mvc\\Model\\Binder*](../api/phalcon_mvc_model_binder) you can inject model instances into your routes:\n\n``` php\n$loader = new \\Phalcon\\Loader();\n\n$loader->registerDirs(\n    [\n        __DIR__ . \"/models/\"\n    ]\n)->register();\n\n$app = new \\Phalcon\\Mvc\\Micro();\n$app->setModelBinder(new \\Phalcon\\Mvc\\Model\\Binder());\n\n$app->get(\n    \"/products/{product:[0-9]+}\",\n    function (Products $product) {\n        // do anything with $product object\n    }\n);\n\n$app->handle();\n```\n\n> Since Binder object is using internally Reflection Api which can be heavy there is ability to set cache. This can be done by using second argument in `setModelBinder()` which can also accept service name or just by passing cache instance to `Binder` constructor.\n\n> Currently the binder will only use the models primary key to perform a `findFirst()` on. An example route for the above would be /products/1\n\n## Micro Application Events\n\n[*Phalcon\\Mvc\\Micro*](../api/phalcon_mvc_micro) is able to send events to the [*EventsManager*](events) (if it is present). Events are triggered using the type “micro”. The following events are supported:\n\n| Event Name         | Triggered                                                                                                 | Can stop operation? |\n|--------------------|-----------------------------------------------------------------------------------------------------------|---------------------|\n| beforeHandleRoute  | The main method is just called, at this point the application doesn’t know if there is some matched route | Yes                 |\n| beforeExecuteRoute | A route has been matched and it contains a valid handler, at this point the handler has not been executed | Yes                 |\n| afterExecuteRoute  | Triggered after running the handler                                                                       | No                  |\n| beforeNotFound     | Triggered when any of the defined routes match the requested URI                                          | Yes                 |\n| afterHandleRoute   | Triggered after completing the whole process in a successful way                                          | Yes                 |\n| afterBinding       | Triggered after models are bound but before executing the handler                                         | Yes                 |\n\nIn the following example, we explain how to control the application security using events:\n\n``` php\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// Create a events manager\n$eventsManager = new EventsManager();\n\n$eventsManager->attach(\n    \"micro:beforeExecuteRoute\",\n    function (Event $event, $app) {\n        if ($app->session->get(\"auth\") === false) {\n            $app->flashSession->error(\"The user isn't authenticated\");\n\n            $app->response->redirect(\"/\");\n\n            $app->response->sendHeaders();\n\n            // Return (false) stop the operation\n            return false;\n        }\n    }\n);\n\n$app = new Micro();\n\n// Bind the events manager to the app\n$app->setEventsManager($eventsManager);\n```\n\n## Middleware events\n\nIn addition to the events manager, events can be added using the methods ‘before’, ‘after’ and ‘finish’:\n\n``` php\n$app = new Phalcon\\Mvc\\Micro();\n\n// Executed before every route is executed\n// Return false cancels the route execution\n$app->before(\n    function () use ($app) {\n        if ($app[\"session\"]->get(\"auth\") === false) {\n            $app[\"flashSession\"]->error(\"The user isn't authenticated\");\n\n            $app[\"response\"]->redirect(\"/error\");\n\n            // Return false stops the normal execution\n            return false;\n        }\n\n        return true;\n    }\n);\n\n$app->map(\n    \"/api/robots\",\n    function () {\n        return [\n            \"status\" => \"OK\",\n        ];\n    }\n);\n\n$app->after(\n    function () use ($app) {\n        // This is executed after the route is executed\n        echo json_encode($app->getReturnedValue());\n    }\n);\n\n$app->finish(\n    function () use ($app) {\n        // This is executed when the request has been served\n    }\n);\n```\n\nYou can call the methods several times to add more events of the same type:\n\n``` php\n$app->finish(\n    function () use ($app) {\n        // First 'finish' middleware\n    }\n);\n\n$app->finish(\n    function () use ($app) {\n        // Second 'finish' middleware\n    }\n);\n```\n\nCode for middlewares can be reused using separate classes:\n\n``` php\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * CacheMiddleware\n *\n * Caches pages to reduce processing\n */\nclass CacheMiddleware implements MiddlewareInterface\n{\n    public function call($application)\n    {\n        $cache  = $application[\"cache\"];\n        $router = $application[\"router\"];\n\n        $key = preg_replace(\"/^[a-zA-Z0-9]/\", \"\", $router->getRewriteUri());\n\n        // Check if the request is cached\n        if ($cache->exists($key)) {\n            echo $cache->get($key);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\nThen add the instance to the application:\n\n``` php\n$app->before(\n    new CacheMiddleware()\n);\n```\n\nThe following middleware events are available:\n\n| Event Name | Triggered                                                                             | Can stop operation? |\n|------------|---------------------------------------------------------------------------------------|---------------------|\n| before     | Before executing the handler. It can be used to control the access to the application | Yes                 |\n| after      | Executed after the handler is executed. It can be used to prepare the response        | No                  |\n| finish     | Executed after sending the response. It can be used to perform clean-up               | No                  |\n\nfinish \\| Executed after sending the response. It can be used to perform clean-up \\| No \\|\n\n>   \n\n## Using Controllers as Handlers\n\nMedium applications using the `Mvc\\Micro` approach may require organize handlers in controllers. You can use [*Phalcon\\Mvc\\Micro\\Collection*](../api/phalcon_mvc_micro_collection) to group handlers that belongs to controllers:\n\n``` php\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$posts = new MicroCollection();\n\n// Set the main handler. ie. a controller instance\n$posts->setHandler(\n    new PostsController()\n);\n\n// Set a common prefix for all routes\n$posts->setPrefix(\"/posts\");\n\n// Use the method 'index' in PostsController\n$posts->get(\"/\", \"index\");\n\n// Use the method 'show' in PostsController\n$posts->get(\"/show/{slug}\", \"show\");\n\n$app->mount($posts);\n```\n\nThe controller ‘PostsController’ might look like this:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function index()\n    {\n        // ...\n    }\n\n    public function show($slug)\n    {\n        // ...\n    }\n}\n```\n\nIn the above example the controller is directly instantiated, Collection also have the ability to lazy-load controllers, this option provide better performance loading controllers only if the related routes are matched:\n\n``` php\n$posts->setHandler(\"PostsController\", true);\n$posts->setHandler(\"Blog\\Controllers\\PostsController\", true);\n```\n\n## Returning Responses\n\nHandlers may return raw responses using [*Phalcon\\Http\\Response*](response) or a component that implements the relevant interface. When responses are returned by handlers they are automatically sent by the application.\n\n``` php\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Http\\Response;\n\n$app = new Micro();\n\n// Return a response\n$app->get(\n    \"/welcome/index\",\n    function () {\n        $response = new Response();\n\n        $response->setStatusCode(401, \"Unauthorized\");\n\n        $response->setContent(\"Access is not authorized\");\n\n        return $response;\n    }\n);\n```\n\n## Rendering Views\n\n[*Phalcon\\Mvc\\View\\Simple*](views) can be used to render views, the following example shows how to do that:\n\n``` php\n$app = new Phalcon\\Mvc\\Micro();\n\n$app[\"view\"] = function () {\n    $view = new \\Phalcon\\Mvc\\View\\Simple();\n\n    $view->setViewsDir(\"app/views/\");\n\n    return $view;\n};\n\n// Return a rendered view\n$app->get(\n    \"/products/show\",\n    function () use ($app) {\n        // Render app/views/products/show.phtml passing some variables\n        echo $app[\"view\"]->render(\n            \"products/show\",\n            [\n                \"id\"   => 100,\n                \"name\" => \"Artichoke\"\n            ]\n        );\n    }\n);\n```\n\nPlease note that this code block uses [*Phalcon\\Mvc\\View\\Simple*](../api/phalcon_mvc_view_simple) which uses relative paths instead of controllers and actions. If you would like to use [*Phalcon\\Mvc\\View\\Simple*](../api/phalcon_mvc_view_simple) instead, you will need to change the parameters of the `render()` method:\n\n``` php\n$app = new Phalcon\\Mvc\\Micro();\n\n$app[\"view\"] = function () {\n    $view = new \\Phalcon\\Mvc\\View();\n\n    $view->setViewsDir(\"app/views/\");\n\n    return $view;\n};\n\n// Return a rendered view\n$app->get(\n    \"/products/show\",\n    function () use ($app) {\n        // Render app/views/products/show.phtml passing some variables\n        echo $app[\"view\"]->render(\n            \"products\",\n            \"show\",\n            [\n                \"id\"   => 100,\n                \"name\" => \"Artichoke\"\n            ]\n        );\n    }\n);\n```\n\n## Error Handling\n\nA proper response can be generated if an exception is raised in a micro handler:\n\n``` php\n$app = new Phalcon\\Mvc\\Micro();\n\n$app->get(\n    \"/\",\n    function () {\n        throw new \\Exception(\"An error\");\n    }\n);\n\n$app->error(\n    function ($exception) {\n        echo \"An error has occurred\";\n    }\n);\n```\n\nIf the handler returns “false” the exception is stopped.\n\n## Related Sources\n\n- [*Creating a Simple REST API*](tutorial-rest) is a tutorial that explains how to create a micro application to implement a RESTful web service.\n- [Stickers Store](http://store.phalconphp.com) is a very simple micro-application making use of the micro-mvc approach \\[[Github](https://github.com/phalcon/store)\\].\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/micro.html](https://docs.phalconphp.com/en/latest/reference/micro.html)"
- name: Model Behaviors
  id: reference/model-behaviors
  summary: Behaviors are shared conducts that several models may adopt in order to re-use code, the ORM provides an API to implement behaviors in your models
  description: "# Model Behaviors\n\nBehaviors are shared conducts that several models may adopt in order to re-use code, the ORM provides an API to implement behaviors in your models. Also, you can use the events and callbacks as seen before as an alternative to implement Behaviors with more freedom.\n\nA behavior must be added in the model initializer, a model can have zero or more behaviors:\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Users extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $created_at;\n\n    public function initialize()\n    {\n        $this->addBehavior(\n            new Timestampable(\n                [\n                    \"beforeCreate\" => [\n                        \"field\"  => \"created_at\",\n                        \"format\" => \"Y-m-d\",\n                    ]\n                ]\n            )\n        );\n    }\n}\n```\n\nThe following built-in behaviors are provided by the framework:\n\n| Name          | Description                                                                                                |\n|---------------|------------------------------------------------------------------------------------------------------------|\n| Timestampable | Allows to automatically update a model’s attribute saving the datetime when a record is created or updated |\n| SoftDelete    | Instead of permanently delete a record it marks the record as deleted changing the value of a flag column  |\n\n## Timestampable\n\nThis behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this->addBehavior(\n        new Timestampable(\n            [\n                \"beforeCreate\" => [\n                    \"field\"  => \"created_at\",\n                    \"format\" => \"Y-m-d\",\n                ]\n            ]\n        )\n    );\n}\n```\n\nEach event can have its own options, ‘field’ is the name of the column that must be updated, if ‘format’ is a string it will be used as format of the PHP’s function [date](http://php.net/manual/en/function.date.php), format can also be an anonymous function providing you the free to generate any kind timestamp:\n\n``` php\nuse DateTime;\nuse DateTimeZone;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this->addBehavior(\n        new Timestampable(\n            [\n                \"beforeCreate\" => [\n                    \"field\"  => \"created_at\",\n                    \"format\" => function () {\n                        $datetime = new Datetime(\n                            new DateTimeZone(\"Europe/Stockholm\")\n                        );\n\n                        return $datetime->format(\"Y-m-d H:i:sP\");\n                    }\n                ]\n            ]\n        )\n    );\n}\n```\n\nIf the option ‘format’ is omitted a timestamp using the PHP’s function [time](http://php.net/manual/en/function.time.php), will be used.\n\n## SoftDelete\n\nThis behavior can be used in the following way:\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\SoftDelete;\n\nclass Users extends Model\n{\n    const DELETED = \"D\";\n\n    const NOT_DELETED = \"N\";\n\n\n\n    public $id;\n\n    public $name;\n\n    public $status;\n\n\n\n    public function initialize()\n    {\n        $this->addBehavior(\n            new SoftDelete(\n                [\n                    \"field\" => \"status\",\n                    \"value\" => Users::DELETED,\n                ]\n            )\n        );\n    }\n}\n```\n\nThis behavior accepts two options: ‘field’ and ‘value’, ‘field’ determines what field must be updated and ‘value’ the value to be deleted. Let’s pretend the table ‘users’ has the following data:\n\n``` bash\nmysql> select * from users;\n+----+---------+--------+\n| id | name    | status |\n+----+---------+--------+\n|  1 | Lana    | N      |\n|  2 | Brandon | N      |\n+----+---------+--------+\n2 rows in set (0.00 sec)\n```\n\nIf we delete any of the two records the status will be updated instead of delete the record:\n\n``` php\nUsers::findFirst(2)->delete();\n```\n\nThe operation will result in the following data in the table:\n\n``` bash\nmysql> select * from users;\n+----+---------+--------+\n| id | name    | status |\n+----+---------+--------+\n|  1 | Lana    | N      |\n|  2 | Brandon | D      |\n+----+---------+--------+\n2 rows in set (0.01 sec)\n```\n\nNote that you need to specify the deleted condition in your queries to effectively ignore them as deleted records, this behavior doesn’t support that.\n\n## Creating your own behaviors\n\nThe ORM provides an API to create your own behaviors. A behavior must be a class implementing the [*Phalcon\\Mvc\\Model\\BehaviorInterface*](../api/phalcon_mvc_model_behaviorinterface). Also, [*Phalcon\\Mvc\\Model\\Behavior*](../api/phalcon_mvc_model_behavior) provides most of the methods needed to ease the implementation of behaviors.\n\nThe following behavior is an example, it implements the Blameable behavior which helps identify the user that is performed operations over a model:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Behavior;\nuse Phalcon\\Mvc\\Model\\BehaviorInterface;\n\nclass Blameable extends Behavior implements BehaviorInterface\n{\n    public function notify($eventType, $model)\n    {\n        switch ($eventType) {\n\n            case \"afterCreate\":\n            case \"afterDelete\":\n            case \"afterUpdate\":\n\n                $userName = // ... get the current user from session\n\n                // Store in a log the username, event type and primary key\n                file_put_contents(\n                    \"logs/blamable-log.txt\",\n                    $userName . \" \" . $eventType . \" \" . $model->id\n                );\n\n                break;\n\n            default:\n                /* ignore the rest of events */\n        }\n    }\n}\n```\n\nThe former is a very simple behavior, but it illustrates how to create a behavior, now let’s add this behavior to a model:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Profiles extends Model\n{\n    public function initialize()\n    {\n        $this->addBehavior(\n            new Blameable()\n        );\n    }\n}\n```\n\nA behavior is also capable of intercepting missing methods on your models:\n\n``` php\nuse Phalcon\\Tag;\nuse Phalcon\\Mvc\\Model\\Behavior;\nuse Phalcon\\Mvc\\Model\\BehaviorInterface;\n\nclass Sluggable extends Behavior implements BehaviorInterface\n{\n    public function missingMethod($model, $method, $arguments = [])\n    {\n        // If the method is 'getSlug' convert the title\n        if ($method === \"getSlug\") {\n            return Tag::friendlyTitle($model->title);\n        }\n    }\n}\n```\n\nCall that method on a model that implements Sluggable returns a SEO friendly title:\n\n``` php\n$title = $post->getSlug();\n```\n\n## Using Traits as behaviors\n\nStarting from PHP 5.4 you can use [Traits](http://php.net/manual/en/language.oop5.traits.php) to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the Timestampable behavior:\n\n``` php\ntrait MyTimestampable\n{\n    public function beforeCreate()\n    {\n        $this->created_at = date(\"r\");\n    }\n\n    public function beforeUpdate()\n    {\n        $this->updated_at = date(\"r\");\n    }\n}\n```\n\nThen you can use it in your model as follows:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    use MyTimestampable;\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/model-behaviors.html](https://docs.phalconphp.com/en/latest/reference/model-behaviors.html)"
- name: Model Events
  id: reference/model-events
  summary: Models allow you to implement events that will be thrown while performing an insert/update/delete which can be used to define business rules
  description: "# Model Events\n\n## Events and Events Manager\n\nModels allow you to implement events that will be thrown while performing an insert/update/delete which can be used to define business rules. The following are the events supported by [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) and their order of execution:\n\n| Operation          | Name                     | Can stop operation?   | Explanation                                                                                                                       |\n|--------------------|--------------------------|-----------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| Inserting/Updating | beforeValidation         | YES                   | Is executed before the fields are validated for not nulls/empty strings or foreign keys                                           |\n| Inserting          | beforeValidationOnCreate | YES                   | Is executed before the fields are validated for not nulls/empty strings or foreign keys when an insertion operation is being made |\n| Updating           | beforeValidationOnUpdate | YES                   | Is executed before the fields are validated for not nulls/empty strings or foreign keys when an updating operation is being made  |\n| Inserting/Updating | onValidationFails        | YES (already stopped) | Is executed after an integrity validator fails                                                                                    |\n| Inserting          | afterValidationOnCreate  | YES                   | Is executed after the fields are validated for not nulls/empty strings or foreign keys when an insertion operation is being made  |\n| Updating           | afterValidationOnUpdate  | YES                   | Is executed after the fields are validated for not nulls/empty strings or foreign keys when an updating operation is being made   |\n| Inserting/Updating | afterValidation          | YES                   | Is executed after the fields are validated for not nulls/empty strings or foreign keys                                            |\n| Inserting/Updating | beforeSave               | YES                   | Runs before the required operation over the database system                                                                       |\n| Updating           | beforeUpdate             | YES                   | Runs before the required operation over the database system only when an updating operation is being made                         |\n| Inserting          | beforeCreate             | YES                   | Runs before the required operation over the database system only when an inserting operation is being made                        |\n| Updating           | afterUpdate              | NO                    | Runs after the required operation over the database system only when an updating operation is being made                          |\n| Inserting          | afterCreate              | NO                    | Runs after the required operation over the database system only when an inserting operation is being made                         |\n| Inserting/Updating | afterSave                | NO                    | Runs after the required operation over the database system                                                                        |\n\n### Implementing Events in the Model’s class\n\nThe easier way to make a model react to events is to implement a method with the same name of the event in the model’s class:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function beforeValidationOnCreate()\n    {\n        echo \"This is executed before creating a Robot!\";\n    }\n}\n```\n\nEvents can be used to assign values before performing an operation, for example:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    public function beforeCreate()\n    {\n        // Set the creation date\n        $this->created_at = date(\"Y-m-d H:i:s\");\n    }\n\n    public function beforeUpdate()\n    {\n        // Set the modification date\n        $this->modified_in = date(\"Y-m-d H:i:s\");\n    }\n}\n```\n\n### Using a custom Events Manager\n\nAdditionally, this component is integrated with [*Phalcon\\Events\\Manager*](../api/phalcon_events_manager), this means we can create listeners that run when an event is triggered.\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for \"model\" events\n        $eventsManager->attach(\n            \"model:beforeSave\",\n            function (Event $event, $robot) {\n                if ($robot->name === \"Scooby Doo\") {\n                    echo \"Scooby Doo isn't a robot!\";\n\n                    return false;\n                }\n\n                return true;\n            }\n        );\n\n        // Attach the events manager to the event\n        $this->setEventsManager($eventsManager);\n    }\n}\n```\n\nIn the example given above, the Events Manager only acts as a bridge between an object and a listener (the anonymous function). Events will be fired to the listener when ‘robots’ are saved:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot->name = \"Scooby Doo\";\n$robot->year = 1969;\n\n$robot->save();\n```\n\nIf we want all objects created in our application use the same EventsManager, then we need to assign it to the Models Manager:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// Registering the modelsManager service\n$di->setShared(\n    \"modelsManager\",\n    function () {\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for \"model\" events\n        $eventsManager->attach(\n            \"model:beforeSave\",\n            function (Event $event, $model) {\n                // Catch events produced by the Robots model\n                if (get_class($model) === \"Store\\\\Toys\\\\Robots\") {\n                    if ($model->name === \"Scooby Doo\") {\n                        echo \"Scooby Doo isn't a robot!\";\n\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        );\n\n        // Setting a default EventsManager\n        $modelsManager = new ModelsManager();\n\n        $modelsManager->setEventsManager($eventsManager);\n\n        return $modelsManager;\n    }\n);\n```\n\nIf a listener returns false that will stop the operation that is executing currently.\n\n## Logging Low-Level SQL Statements\n\nWhen using high-level abstraction components such as [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) to access a database, it is difficult to understand which statements are finally sent to the database system. [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) is supported internally by [*Phalcon\\Db*](../api/phalcon_db). [*Phalcon\\Logger*](../api/phalcon_logger) interacts with [*Phalcon\\Db*](../api/phalcon_db), providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.\n\n``` php\nuse Phalcon\\Logger;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Logger\\Adapter\\File as FileLogger;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\n\n$di->set(\n    \"db\",\n    function () {\n        $eventsManager = new EventsManager();\n\n        $logger = new FileLogger(\"app/logs/debug.log\");\n\n        // Listen all the database events\n        $eventsManager->attach(\n            \"db:beforeQuery\",\n            function ($event, $connection) use ($logger) {\n                $logger->log(\n                    $connection->getSQLStatement(),\n                    Logger::INFO\n                );\n            }\n        );\n\n        $connection = new Connection(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n\n        // Assign the eventsManager to the db adapter instance\n        $connection->setEventsManager($eventsManager);\n\n        return $connection;\n    }\n);\n```\n\nAs models access the default database connection, all SQL statements that are sent to the database system will be logged in the file:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot->name       = \"Robby the Robot\";\n$robot->created_at = \"1956-07-21\";\n\nif ($robot->save() === false) {\n    echo \"Cannot save robot\";\n}\n```\n\nAs above, the file *app/logs/db.log* will contain something like this:\n\n``` irc\n[Mon, 30 Apr 12 13:47:18 -0500][DEBUG][Resource Id #77] INSERT INTO robots\n(name, created_at) VALUES ('Robby the Robot', '1956-07-21')\n```\n\n## Profiling SQL Statements\n\nThanks to [*Phalcon\\Db*](../api/phalcon_db), the underlying component of [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model), it’s possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.\n\n``` php\nuse Phalcon\\Db\\Profiler as ProfilerDb;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlPdo;\n\n$di->set(\n    \"profiler\",\n    function () {\n        return new ProfilerDb();\n    },\n    true\n);\n\n$di->set(\n    \"db\",\n    function () use ($di) {\n        $eventsManager = new EventsManager();\n\n        // Get a shared instance of the DbProfiler\n        $profiler = $di->getProfiler();\n\n        // Listen all the database events\n        $eventsManager->attach(\n            \"db\",\n            function ($event, $connection) use ($profiler) {\n                if ($event->getType() === \"beforeQuery\") {\n                    $profiler->startProfile(\n                        $connection->getSQLStatement()\n                    );\n                }\n\n                if ($event->getType() === \"afterQuery\") {\n                    $profiler->stopProfile();\n                }\n            }\n        );\n\n        $connection = new MysqlPdo(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n\n        // Assign the eventsManager to the db adapter instance\n        $connection->setEventsManager($eventsManager);\n\n        return $connection;\n    }\n);\n```\n\nProfiling some queries:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// Send some SQL statements to the database\nRobots::find();\n\nRobots::find(\n    [\n        \"order\" => \"name\",\n    ]\n);\n\nRobots::find(\n    [\n        \"limit\" => 30,\n    ]\n);\n\n// Get the generated profiles from the profiler\n$profiles = $di->get(\"profiler\")->getProfiles();\n\nforeach ($profiles as $profile) {\n   echo \"SQL Statement: \", $profile->getSQLStatement(), \"\\n\";\n   echo \"Start Time: \", $profile->getInitialTime(), \"\\n\";\n   echo \"Final Time: \", $profile->getFinalTime(), \"\\n\";\n   echo \"Total Elapsed Time: \", $profile->getTotalElapsedSeconds(), \"\\n\";\n}\n```\n\nEach generated profile contains the duration in milliseconds that each instruction takes to complete as well as the generated SQL statement.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/model-events.html](https://docs.phalconphp.com/en/latest/reference/model-events.html)"
- name: Model Relationships
  id: reference/model-relationships
  summary: 'There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many'
  description: "# Model Relationships\n\n## Relationships between Models\n\nThere are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.\n\n### Unidirectional relationships\n\nUnidirectional relations are those that are generated in relation to one another but not vice versa.\n\n### Bidirectional relations\n\nThe bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.\n\n### Defining relationships\n\nIn Phalcon, relationships must be defined in the `initialize()` method of a model. The methods `belongsTo()`, `hasOne()`, `hasMany()` and `hasManyToMany()` define the relationship between one or more fields from the current model to fields in another model. Each of these methods requires 3 parameters: local fields, referenced model, referenced fields.\n\n| Method        | Description                |\n|---------------|----------------------------|\n| hasMany       | Defines a 1-n relationship |\n| hasOne        | Defines a 1-1 relationship |\n| belongsTo     | Defines a n-1 relationship |\n| hasManyToMany | Defines a n-n relationship |\n\nThe following schema shows 3 tables whose relations will serve us as an example regarding relationships:\n\n``` sql\nCREATE TABLE `robots` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `name` varchar(70) NOT NULL,\n    `type` varchar(32) NOT NULL,\n    `year` int(11) NOT NULL,\n    PRIMARY KEY (`id`)\n);\n\nCREATE TABLE `robots_parts` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `robots_id` int(10) NOT NULL,\n    `parts_id` int(10) NOT NULL,\n    `created_at` DATE NOT NULL,\n    PRIMARY KEY (`id`),\n    KEY `robots_id` (`robots_id`),\n    KEY `parts_id` (`parts_id`)\n);\n\nCREATE TABLE `parts` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `name` varchar(70) NOT NULL,\n    PRIMARY KEY (`id`)\n);\n```\n\n- The model “Robots” has many “RobotsParts”.\n- The model “Parts” has many “RobotsParts”.\n- The model “RobotsParts” belongs to both “Robots” and “Parts” models as a many-to-one relation.\n- The model “Robots” has a relation many-to-many to “Parts” through “RobotsParts”.\n\nCheck the EER diagram to understand better the relations:\n\nThe models with their relations could be implemented as follows:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this->hasMany(\n            \"id\",\n            \"RobotsParts\",\n            \"robots_id\"\n        );\n    }\n}\n```\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this->hasMany(\n            \"id\",\n            \"RobotsParts\",\n            \"parts_id\"\n        );\n    }\n}\n```\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this->belongsTo(\n            \"robots_id\",\n            \"Store\\\\Toys\\\\Robots\",\n            \"id\"\n        );\n\n        $this->belongsTo(\n            \"parts_id\",\n            \"Parts\",\n            \"id\"\n        );\n    }\n}\n```\n\nThe first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.\n\nMany to many relationships require 3 models and define the attributes involved in the relationship:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this->hasManyToMany(\n            \"id\",\n            \"RobotsParts\",\n            \"robots_id\", \"parts_id\",\n            \"Parts\",\n            \"id\"\n        );\n    }\n}\n```\n\n### Taking advantage of relationships\n\nWhen explicitly defining the relationships between models, it is easy to find related records for a particular record.\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\nforeach ($robot->robotsParts as $robotPart) {\n    echo $robotPart->parts->name, \"\\n\";\n}\n```\n\nPhalcon uses the magic methods `__set`/`__get`/`__call` to store or retrieve related data using relationships.\n\nBy accessing an attribute with the same name as the relationship will retrieve all its related record(s).\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst();\n\n// All the related records in RobotsParts\n$robotsParts = $robot->robotsParts;\n```\n\nAlso, you can use a magic getter:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst();\n\n// All the related records in RobotsParts\n$robotsParts = $robot->getRobotsParts();\n\n// Passing parameters\n$robotsParts = $robot->getRobotsParts(\n    [\n        \"limit\" => 5,\n    ]\n);\n```\n\nIf the called method has a “get” prefix [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) will return a `findFirst()`/`find()` result. The following example compares retrieving related results with using magic methods and without:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\n// Robots model has a 1-n (hasMany)\n// relationship to RobotsParts then\n$robotsParts = $robot->robotsParts;\n\n// Only parts that match conditions\n$robotsParts = $robot->getRobotsParts(\n    [\n        \"created_at = :date:\",\n        \"bind\" => [\n            \"date\" => \"2015-03-15\"\n        ]\n    ]\n);\n\n$robotPart = RobotsParts::findFirst(1);\n\n// RobotsParts model has a n-1 (belongsTo)\n// relationship to RobotsParts then\n$robot = $robotPart->robots;\n```\n\nGetting related records manually:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\n// Robots model has a 1-n (hasMany)\n// relationship to RobotsParts, then\n$robotsParts = RobotsParts::find(\n    [\n        \"robots_id = :id:\",\n        \"bind\" => [\n            \"id\" => $robot->id,\n        ]\n    ]\n);\n\n// Only parts that match conditions\n$robotsParts = RobotsParts::find(\n    [\n        \"robots_id = :id: AND created_at = :date:\",\n        \"bind\" => [\n            \"id\"   => $robot->id,\n            \"date\" => \"2015-03-15\",\n        ]\n    ]\n);\n\n$robotPart = RobotsParts::findFirst(1);\n\n// RobotsParts model has a n-1 (belongsTo)\n// relationship to RobotsParts then\n$robot = Robots::findFirst(\n    [\n        \"id = :id:\",\n        \"bind\" => [\n            \"id\" => $robotPart->robots_id,\n        ]\n    ]\n);\n```\n\nThe prefix “get” is used to `find()`/`findFirst()` related records. Depending on the type of relation it will use `find()` or `findFirst()`:\n\n| Type             | Description                                                                                                                | Implicit Method |\n|------------------|----------------------------------------------------------------------------------------------------------------------------|-----------------|\n| Belongs-To       | Returns a model instance of the related record directly                                                                    | findFirst       |\n| Has-One          | Returns a model instance of the related record directly                                                                    | findFirst       |\n| Has-Many         | Returns a collection of model instances of the referenced model                                                            | find            |\n| Has-Many-to-Many | Returns a collection of model instances of the referenced model, it implicitly does ‘inner joins’ with the involved models | (complex query) |\n\nYou can also use the “count” prefix to return an integer denoting the count of the related records:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\necho \"The robot has \", $robot->countRobotsParts(), \" parts\\n\";\n```\n\n### Aliasing Relationships\n\nTo explain better how aliases work, let’s check the following example:\n\nThe “robots_similar” table has the function to define what robots are similar to others:\n\n``` bash\nmysql> desc robots_similar;\n+-------------------+------------------+------+-----+---------+----------------+\n| Field             | Type             | Null | Key | Default | Extra          |\n+-------------------+------------------+------+-----+---------+----------------+\n| id                | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| robots_id         | int(10) unsigned | NO   | MUL | NULL    |                |\n| similar_robots_id | int(10) unsigned | NO   |     | NULL    |                |\n+-------------------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n```\n\nBoth “robots_id” and “similar_robots_id” have a relation to the model Robots:\n\nA model that maps this table and its relationships is the following:\n\n``` php\nclass RobotsSimilar extends Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->belongsTo(\n            \"robots_id\",\n            \"Store\\\\Toys\\\\Robots\",\n            \"id\"\n        );\n\n        $this->belongsTo(\n            \"similar_robots_id\",\n            \"Store\\\\Toys\\\\Robots\",\n            \"id\"\n        );\n    }\n}\n```\n\nSince both relations point to the same model (Robots), obtain the records related to the relationship could not be clear:\n\n``` php\n$robotsSimilar = RobotsSimilar::findFirst();\n\n// Returns the related record based on the column (robots_id)\n// Also as is a belongsTo it's only returning one record\n// but the name 'getRobots' seems to imply that return more than one\n$robot = $robotsSimilar->getRobots();\n\n// but, how to get the related record based on the column (similar_robots_id)\n// if both relationships have the same name?\n```\n\nThe aliases allow us to rename both relationships to solve these problems:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsSimilar extends Model\n{\n    public function initialize()\n    {\n        $this->belongsTo(\n            \"robots_id\",\n            \"Store\\\\Toys\\\\Robots\",\n            \"id\",\n            [\n                \"alias\" => \"Robot\",\n            ]\n        );\n\n        $this->belongsTo(\n            \"similar_robots_id\",\n            \"Store\\\\Toys\\\\Robots\",\n            \"id\",\n            [\n                \"alias\" => \"SimilarRobot\",\n            ]\n        );\n    }\n}\n```\n\nWith the aliasing we can get the related records easily:\n\n``` php\n$robotsSimilar = RobotsSimilar::findFirst();\n\n// Returns the related record based on the column (robots_id)\n$robot = $robotsSimilar->getRobot();\n$robot = $robotsSimilar->robot;\n\n// Returns the related record based on the column (similar_robots_id)\n$similarRobot = $robotsSimilar->getSimilarRobot();\n$similarRobot = $robotsSimilar->similarRobot;\n```\n\n### Magic Getters vs. Explicit methods\n\nMost IDEs and editors with auto-completion capabilities can not infer the correct types when using magic getters, instead of use the magic getters you can optionally define those methods explicitly with the corresponding docblocks helping the IDE to produce a better auto-completion:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this->hasMany(\n            \"id\",\n            \"RobotsParts\",\n            \"robots_id\"\n        );\n    }\n\n    /**\n     * Return the related \"robots parts\"\n     *\n     * @return \\RobotsParts[]\n     */\n    public function getRobotsParts($parameters = null)\n    {\n        return $this->getRelated(\"RobotsParts\", $parameters);\n    }\n}\n```\n\n## Virtual Foreign Keys\n\nBy default, relationships do not act like database foreign keys, that is, if you try to insert/update a value without having a valid value in the referenced model, Phalcon will not produce a validation message. You can modify this behavior by adding a fourth parameter when defining a relationship.\n\nThe RobotsPart model can be changed to demonstrate this feature:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this->belongsTo(\n            \"robots_id\",\n            \"Store\\\\Toys\\\\Robots\",\n            \"id\",\n            [\n                \"foreignKey\" => true\n            ]\n        );\n\n        $this->belongsTo(\n            \"parts_id\",\n            \"Parts\",\n            \"id\",\n            [\n                \"foreignKey\" => [\n                    \"message\" => \"The part_id does not exist on the Parts model\"\n                ]\n            ]\n        );\n    }\n}\n```\n\nIf you alter a `belongsTo()` relationship to act as foreign key, it will validate that the values inserted/updated on those fields have a valid value on the referenced model. Similarly, if a `hasMany()`/`hasOne()` is altered it will validate that the records cannot be deleted if that record is used on a referenced model.\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public function initialize()\n    {\n        $this->hasMany(\n            \"id\",\n            \"RobotsParts\",\n            \"parts_id\",\n            [\n                \"foreignKey\" => [\n                    \"message\" => \"The part cannot be deleted because other robots are using it\",\n                ]\n            ]\n        );\n    }\n}\n```\n\nA virtual foreign key can be set up to allow null values as follows:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this->belongsTo(\n            \"parts_id\",\n            \"Parts\",\n            \"id\",\n            [\n                \"foreignKey\" => [\n                    \"allowNulls\" => true,\n                    \"message\"    => \"The part_id does not exist on the Parts model\",\n                ]\n            ]\n        );\n    }\n}\n```\n\n### Cascade/Restrict actions\n\nRelationships that act as virtual foreign keys by default restrict the creation/update/deletion of records to maintain the integrity of data:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Relation;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this->hasMany(\n            \"id\",\n            \"Parts\",\n            \"robots_id\",\n            [\n                \"foreignKey\" => [\n                    \"action\" => Relation::ACTION_CASCADE,\n                ]\n            ]\n        );\n    }\n}\n```\n\nThe above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.\n\n## Storing Related Records\n\nMagic properties can be used to store a record and its related properties:\n\n``` php\n// Create an artist\n$artist = new Artists();\n\n$artist->name    = \"Shinichi Osawa\";\n$artist->country = \"Japan\";\n\n// Create an album\n$album = new Albums();\n\n$album->name   = \"The One\";\n$album->artist = $artist; // Assign the artist\n$album->year   = 2008;\n\n// Save both records\n$album->save();\n```\n\nSaving a record and its related records in a has-many relation:\n\n``` php\n// Get an existing artist\n$artist = Artists::findFirst(\n    \"name = 'Shinichi Osawa'\"\n);\n\n// Create an album\n$album = new Albums();\n\n$album->name   = \"The One\";\n$album->artist = $artist;\n\n$songs = [];\n\n// Create a first song\n$songs[0]           = new Songs();\n$songs[0]->name     = \"Star Guitar\";\n$songs[0]->duration = \"5:54\";\n\n// Create a second song\n$songs[1]           = new Songs();\n$songs[1]->name     = \"Last Days\";\n$songs[1]->duration = \"4:29\";\n\n// Assign the songs array\n$album->songs = $songs;\n\n// Save the album + its songs\n$album->save();\n```\n\nSaving the album and the artist at the same time implicitly makes use of a transaction so if anything goes wrong with saving the related records, the parent will not be saved either. Messages are passed back to the user for information regarding any errors.\n\nNote: Adding related entities by overloading the following methods is not possible:\n\n> - `Phalcon\\Mvc\\Model::beforeSave()`\n> - `Phalcon\\Mvc\\Model::beforeCreate()`\n> - `Phalcon\\Mvc\\Model::beforeUpdate()`\n\nYou need to overload `Phalcon\\Mvc\\Model::save()` for this to work from within a model.\n\n## Operations over Resultsets\n\nIf a resultset is composed of complete objects, the resultset is in the ability to perform operations on the records obtained in a simple manner:\n\n### Updating related records\n\nInstead of doing this:\n\n``` php\n$parts = $robots->getParts();\n\nforeach ($parts as $part) {\n    $part->stock      = 100;\n    $part->updated_at = time();\n\n    if ($part->update() === false) {\n        $messages = $part->getMessages();\n\n        foreach ($messages as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n```\n\nyou can do this:\n\n``` php\n$robots->getParts()->update(\n    [\n        \"stock\"      => 100,\n        \"updated_at\" => time(),\n    ]\n);\n```\n\n‘update’ also accepts an anonymous function to filter what records must be updated:\n\n``` php\n$data = [\n    \"stock\"      => 100,\n    \"updated_at\" => time(),\n];\n\n// Update all the parts except those whose type is basic\n$robots->getParts()->update(\n    $data,\n    function ($part) {\n        if ($part->type === Part::TYPE_BASIC) {\n            return false;\n        }\n\n        return true;\n    }\n);\n```\n\n### Deleting related records\n\nInstead of doing this:\n\n``` php\n$parts = $robots->getParts();\n\nforeach ($parts as $part) {\n    if ($part->delete() === false) {\n        $messages = $part->getMessages();\n\n        foreach ($messages as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n```\n\nyou can do this:\n\n``` php\n$robots->getParts()->delete();\n```\n\n`delete()` also accepts an anonymous function to filter what records must be deleted:\n\n``` php\n// Delete only whose stock is greater or equal than zero\n$robots->getParts()->delete(\n    function ($part) {\n        if ($part->stock < 0) {\n            return false;\n        }\n\n        return true;\n    }\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/model-relationships.html](https://docs.phalconphp.com/en/latest/reference/model-relationships.html)"
- name: Model Transactions
  id: reference/model-transactions
  summary: When a process performs multiple database operations, it might be important that each step is completed successfully so that data integrity can be maintained
  description: "# Model Transactions\n\nWhen a process performs multiple database operations, it might be important that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data is committed to the database.\n\nTransactions in Phalcon allow you to commit all operations if they were executed successfully or rollback all operations if something went wrong.\n\n## Manual Transactions\n\nIf an application only uses one connection and the transactions aren’t very complex, a transaction can be created by just moving the current connection into transaction mode and then commit or rollback the operation whether it is successful or not:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass RobotsController extends Controller\n{\n    public function saveAction()\n    {\n        // Start a transaction\n        $this->db->begin();\n\n        $robot = new Robots();\n\n        $robot->name       = \"WALL·E\";\n        $robot->created_at = date(\"Y-m-d\");\n\n        // The model failed to save, so rollback the transaction\n        if ($robot->save() === false) {\n            $this->db->rollback();\n            return;\n        }\n\n        $robotPart = new RobotParts();\n\n        $robotPart->robots_id = $robot->id;\n        $robotPart->type      = \"head\";\n\n        // The model failed to save, so rollback the transaction\n        if ($robotPart->save() === false) {\n            $this->db->rollback();\n\n            return;\n        }\n\n        // Commit the transaction\n        $this->db->commit();\n    }\n}\n```\n\n## Implicit Transactions\n\nExisting relationships can be used to store records and their related instances, this kind of operation implicitly creates a transaction to ensure that data is correctly stored:\n\n``` php\n$robotPart = new RobotParts();\n\n$robotPart->type = \"head\";\n\n\n\n$robot = new Robots();\n\n$robot->name       = \"WALL·E\";\n$robot->created_at = date(\"Y-m-d\");\n$robot->robotPart  = $robotPart;\n\n// Creates an implicit transaction to store both records\n$robot->save();\n```\n\n## Isolated Transactions\n\nIsolated transactions are executed in a new connection ensuring that all the generated SQL, virtual foreign key checks and business rules are isolated from the main connection. This kind of transaction requires a transaction manager that globally manages each transaction created ensuring that they are correctly rolled back/committed before ending the request:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\ntry {\n    // Create a transaction manager\n    $manager = new TxManager();\n\n    // Request a transaction\n    $transaction = $manager->get();\n\n    $robot = new Robots();\n\n    $robot->setTransaction($transaction);\n\n    $robot->name       = \"WALL·E\";\n    $robot->created_at = date(\"Y-m-d\");\n\n    if ($robot->save() === false) {\n        $transaction->rollback(\n            \"Cannot save robot\"\n        );\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart->setTransaction($transaction);\n\n    $robotPart->robots_id = $robot->id;\n    $robotPart->type      = \"head\";\n\n    if ($robotPart->save() === false) {\n        $transaction->rollback(\n            \"Cannot save robot part\"\n        );\n    }\n\n    // Everything's gone fine, let's commit the transaction\n    $transaction->commit();\n} catch (TxFailed $e) {\n    echo \"Failed, reason: \", $e->getMessage();\n}\n```\n\nTransactions can be used to delete many records in a consistent way:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\ntry {\n    // Create a transaction manager\n    $manager = new TxManager();\n\n    // Request a transaction\n    $transaction = $manager->get();\n\n    // Get the robots to be deleted\n    $robots = Robots::find(\n        \"type = 'mechanical'\"\n    );\n\n    foreach ($robots as $robot) {\n        $robot->setTransaction($transaction);\n\n        // Something's gone wrong, we should rollback the transaction\n        if ($robot->delete() === false) {\n            $messages = $robot->getMessages();\n\n            foreach ($messages as $message) {\n                $transaction->rollback(\n                    $message->getMessage()\n                );\n            }\n        }\n    }\n\n    // Everything's gone fine, let's commit the transaction\n    $transaction->commit();\n\n    echo \"Robots were deleted successfully!\";\n} catch (TxFailed $e) {\n    echo \"Failed, reason: \", $e->getMessage();\n}\n```\n\nTransactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a `commit()` or `rollback()` is performed. You can use the service container to create the global transaction manager for the entire application:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TransactionManager\n\n$di->setShared(\n    \"transactions\",\n    function () {\n        return new TransactionManager();\n    }\n);\n```\n\nThen access it from a controller or view:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        // Obtain the TransactionsManager from the services container\n        $manager = $this->di->getTransactions();\n\n        // Or\n        $manager = $this->transactions;\n\n        // Request a transaction\n        $transaction = $manager->get();\n\n        // ...\n    }\n}\n```\n\nWhile a transaction is active, the transaction manager will always return the same transaction across the application.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/model-transactions.html](https://docs.phalconphp.com/en/latest/reference/model-transactions.html)"
- name: Models Metadata
  id: reference/models-metadata
  summary: To speed up development Phalcon\Mvc\Model helps you to query fields and constraints from tables related to models
  description: "# Models Metadata\n\nTo speed up development [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) helps you to query fields and constraints from tables related to models. To achieve this, [*Phalcon\\Mvc\\Model\\MetaData*](../api/phalcon_mvc_model_metadata) is available to manage and cache table metadata.\n\nSometimes it is necessary to get those attributes when working with models. You can get a metadata instance as follows:\n\n``` php\n$robot = new Robots();\n\n// Get Phalcon\\Mvc\\Model\\Metadata instance\n$metadata = $robot->getModelsMetaData();\n\n// Get robots fields names\n$attributes = $metadata->getAttributes($robot);\nprint_r($attributes);\n\n// Get robots fields data types\n$dataTypes = $metadata->getDataTypes($robot);\nprint_r($dataTypes);\n```\n\n## Caching Metadata\n\nOnce the application is in a production stage, it is not necessary to query the metadata of the table from the database system each time you use the table. This could be done caching the metadata using any of the following adapters:\n\n| Adapter | Description                                                                                                                                                                                                                                                                                                                                | API                                                                               |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|\n| Memory  | This adapter is the default. The metadata is cached only during the request. When the request is completed, the metadata are released as part of the normal memory of the request. This adapter is perfect when the application is in development so as to refresh the metadata in each request containing the new and/or modified fields. | [*Phalcon\\Mvc\\Model\\MetaData\\Memory*](../api/phalcon_mvc_model_metadata_memory)   |\n| Session | This adapter stores metadata in the `$_SESSION` superglobal. This adapter is recommended only when the application is actually using a small number of models. The metadata are refreshed every time a new session starts. This also requires the use of `session_start()` to start the session before using any models.                   | [*Phalcon\\Mvc\\Model\\MetaData\\Session*](../api/phalcon_mvc_model_metadata_session) |\n| Apc     | This adapter uses the [Alternative PHP Cache (APC)](http://www.php.net/manual/en/book.apc.php) to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.                                                     | [*Phalcon\\Mvc\\Model\\MetaData\\Apc*](../api/phalcon_mvc_model_metadata_apc)         |\n| XCache  | This adapter uses [XCache](http://xcache.lighttpd.net/) to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.                                                                                            | [*Phalcon\\Mvc\\Model\\MetaData\\Xcache*](../api/phalcon_mvc_model_metadata_xcache)   |\n| Files   | This adapter uses plain files to store metadata. By using this adapter the disk-reading is increased but the database access is reduced.                                                                                                                                                                                                   | [*Phalcon\\Mvc\\Model\\MetaData\\Files*](../api/phalcon_mvc_model_metadata_files)     |\n\nAs other ORM’s dependencies, the metadata manager is requested from the services container:\n\n``` php\nuse Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\n\n$di[\"modelsMetadata\"] = function () {\n    // Create a metadata manager with APC\n    $metadata = new ApcMetaData(\n        [\n            \"lifetime\" => 86400,\n            \"prefix\"   => \"my-prefix\",\n        ]\n    );\n\n    return $metadata;\n};\n```\n\n## Metadata Strategies\n\nAs mentioned above the default strategy to obtain the model’s metadata is database introspection. In this strategy, the information schema is used to know the fields in a table, its primary key, nullable fields, data types, etc.\n\nYou can change the default metadata introspection in the following way:\n\n``` php\nuse Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\n\n$di[\"modelsMetadata\"] = function () {\n    // Instantiate a metadata adapter\n    $metadata = new ApcMetaData(\n        [\n            \"lifetime\" => 86400,\n            \"prefix\"   => \"my-prefix\",\n        ]\n    );\n\n    // Set a custom metadata introspection strategy\n    $metadata->setStrategy(\n        new MyIntrospectionStrategy()\n    );\n\n    return $metadata;\n};\n```\n\n### Database Introspection Strategy\n\nThis strategy doesn’t require any customization and is implicitly used by all the metadata adapters.\n\n### Annotations Strategy\n\nThis strategy makes use of [*annotations*](annotations) to describe the columns in a model:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * @Primary\n     * @Identity\n     * @Column(type=\"integer\", nullable=false)\n     */\n    public $id;\n\n    /**\n     * @Column(type=\"string\", length=70, nullable=false)\n     */\n    public $name;\n\n    /**\n     * @Column(type=\"string\", length=32, nullable=false)\n     */\n    public $type;\n\n    /**\n     * @Column(type=\"integer\", nullable=false)\n     */\n    public $year;\n}\n```\n\nAnnotations must be placed in properties that are mapped to columns in the mapped source. Properties without the @Column annotation are handled as simple class attributes.\n\nThe following annotations are supported:\n\n| Name     | Description                                       |\n|----------|---------------------------------------------------|\n| Primary  | Mark the field as part of the table’s primary key |\n| Identity | The field is an auto_increment/serial column      |\n| Column   | This marks an attribute as a mapped column        |\n\nThe annotation @Column supports the following parameters:\n\n| Name     | Description                                           |\n|----------|-------------------------------------------------------|\n| type     | The column’s type (string, integer, decimal, boolean) |\n| length   | The column’s length if any                            |\n| nullable | Set whether the column accepts null values or not     |\n\nThe annotations strategy could be set up this way:\n\n``` php\nuse Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\nuse Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations as StrategyAnnotations;\n\n$di[\"modelsMetadata\"] = function () {\n    // Instantiate a metadata adapter\n    $metadata = new ApcMetaData(\n        [\n            \"lifetime\" => 86400,\n            \"prefix\"   => \"my-prefix\",\n        ]\n    );\n\n    // Set a custom metadata database introspection\n    $metadata->setStrategy(\n        new StrategyAnnotations()\n    );\n\n    return $metadata;\n};\n```\n\n## Manual Metadata\n\nPhalcon can obtain the metadata for each model automatically without the developer must set them manually using any of the introspection strategies presented above.\n\nThe developer also has the option of define the metadata manually. This strategy overrides any strategy set in the metadata manager. New columns added/modified/removed to/from the mapped table must be added/modified/removed also for everything to work properly.\n\nThe following example shows how to define the metadata manually:\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\Column;\nuse Phalcon\\Mvc\\Model\\MetaData;\n\nclass Robots extends Model\n{\n    public function metaData()\n    {\n        return array(\n            // Every column in the mapped table\n            MetaData::MODELS_ATTRIBUTES => [\n                \"id\",\n                \"name\",\n                \"type\",\n                \"year\",\n            ],\n\n            // Every column part of the primary key\n            MetaData::MODELS_PRIMARY_KEY => [\n                \"id\",\n            ],\n\n            // Every column that isn't part of the primary key\n            MetaData::MODELS_NON_PRIMARY_KEY => [\n                \"name\",\n                \"type\",\n                \"year\",\n            ],\n\n            // Every column that doesn't allows null values\n            MetaData::MODELS_NOT_NULL => [\n                \"id\",\n                \"name\",\n                \"type\",\n            ],\n\n            // Every column and their data types\n            MetaData::MODELS_DATA_TYPES => [\n                \"id\"   => Column::TYPE_INTEGER,\n                \"name\" => Column::TYPE_VARCHAR,\n                \"type\" => Column::TYPE_VARCHAR,\n                \"year\" => Column::TYPE_INTEGER,\n            ],\n\n            // The columns that have numeric data types\n            MetaData::MODELS_DATA_TYPES_NUMERIC => [\n                \"id\"   => true,\n                \"year\" => true,\n            ],\n\n            // The identity column, use boolean false if the model doesn't have\n            // an identity column\n            MetaData::MODELS_IDENTITY_COLUMN => \"id\",\n\n            // How every column must be bound/casted\n            MetaData::MODELS_DATA_TYPES_BIND => [\n                \"id\"   => Column::BIND_PARAM_INT,\n                \"name\" => Column::BIND_PARAM_STR,\n                \"type\" => Column::BIND_PARAM_STR,\n                \"year\" => Column::BIND_PARAM_INT,\n            ],\n\n            // Fields that must be ignored from INSERT SQL statements\n            MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT => [\n                \"year\" => true,\n            ],\n\n            // Fields that must be ignored from UPDATE SQL statements\n            MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE => [\n                \"year\" => true,\n            ],\n\n            // Default values for columns\n            MetaData::MODELS_DEFAULT_VALUES => [\n                \"year\" => \"2015\",\n            ],\n\n            // Fields that allow empty strings\n            MetaData::MODELS_EMPTY_STRING_VALUES => [\n                \"name\" => true,\n            ],\n        );\n    }\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/models-metadata.html](https://docs.phalconphp.com/en/latest/reference/models-metadata.html)"
- name: Multi-lingual Support
  id: reference/translate
  summary: The component Phalcon\Translate aids in creating multilingual applications
  description: "# Multi-lingual Support\n\nThe component [*Phalcon\\Translate*](../api/phalcon_translate) aids in creating multilingual applications. Applications using this component, display content in different languages, based on the user’s chosen language supported by the application.\n\n## Adapters\n\nThis component makes use of adapters to read translation messages from different sources in a unified way.\n\n| Adapter                                                                                 | Description                                                                             |\n|-----------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|\n| [*Phalcon\\Translate\\Adapter\\NativeArray*](../api/phalcon_translate_adapter_nativearray) | Uses PHP arrays to store the messages. This is the best option in terms of performance. |\n\n## Component Usage\n\nTranslation strings are stored in files. The structure of these files could vary depending of the adapter used. Phalcon gives you the freedom to organize your translation strings. A simple structure could be:\n\n``` bash\napp/messages/en.php\napp/messages/es.php\napp/messages/fr.php\napp/messages/zh.php\n```\n\nEach file contains an array of the translations in a key/value manner. For each translation file, keys are unique. The same array is used in different files, where keys remain the same and values contain the translated strings depending on each language.\n\n``` php\n// app/messages/en.php\n$messages = [\n    \"hi\"      => \"Hello\",\n    \"bye\"     => \"Good Bye\",\n    \"hi-name\" => \"Hello %name%\",\n    \"song\"    => \"This song is %song%\",\n];\n```\n\n``` php\n// app/messages/fr.php\n$messages = [\n    \"hi\"      => \"Bonjour\",\n    \"bye\"     => \"Au revoir\",\n    \"hi-name\" => \"Bonjour %name%\",\n    \"song\"    => \"La chanson est %song%\",\n];\n```\n\nImplementing the translation mechanism in your application is trivial but depends on how you wish to implement it. You can use an automatic detection of the language from the user’s browser or you can provide a settings page where the user can select their language.\n\nA simple way of detecting the user’s language is to parse the `$_SERVER['HTTP_ACCEPT_LANGUAGE']` contents, or if you wish, access it directly by calling `$this->request->getBestLanguage()` from an action/controller:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Translate\\Adapter\\NativeArray;\n\nclass UserController extends Controller\n{\n    protected function getTranslation()\n    {\n        // Ask browser what is the best language\n        $language = $this->request->getBestLanguage();\n\n        $translationFile = \"app/messages/\" . $language . \".php\";\n\n        // Check if we have a translation file for that lang\n        if (file_exists($translationFile)) {\n            require $translationFile;\n        } else {\n            // Fallback to some default\n            require \"app/messages/en.php\";\n        }\n\n        // Return a translation object\n        return new NativeArray(\n            [\n                \"content\" => $messages,\n            ]\n        );\n    }\n\n    public function indexAction()\n    {\n        $this->view->name = \"Mike\";\n        $this->view->t    = $this->getTranslation();\n    }\n}\n```\n\nThe `_getTranslation()` method is available for all actions that require translations. The `$t` variable is passed to the views, and with it, we can translate strings in that layer:\n\n``` html\n<!-- welcome -->\n<!-- String: hi => 'Hello' -->\n<p><?php echo $t->_(\"hi\"), \" \", $name; ?></p>\n```\n\nThe `_()` method is returning the translated string based on the index passed. Some strings need to incorporate placeholders for calculated data i.e. Hello %name%. These placeholders can be replaced with passed parameters in the `_()` method. The passed parameters are in the form of a key/value array, where the key matches the placeholder name and the value is the actual data to be replaced:\n\n``` html\n<!-- welcome -->\n<!-- String: hi-name => 'Hello %name%' -->\n<p><?php echo $t->_(\"hi-name\", [\"name\" => $name]); ?></p>\n```\n\nSome applications implement multilingual on the URL such as [http://www.mozilla.org/](http://www.mozilla.org/)**es-ES**/firefox/. Phalcon can implement this by using a [*Router*](routing).\n\n## Implementing your own adapters\n\nThe [*Phalcon\\Translate\\AdapterInterface*](../api/phalcon_translate_adapterinterface) interface must be implemented in order to create your own translate adapters or extend the existing ones:\n\n``` php\nuse Phalcon\\Translate\\AdapterInterface;\n\nclass MyTranslateAdapter implements AdapterInterface\n{\n    /**\n     * Adapter constructor\n     *\n     * @param array $data\n     */\n    public function __construct($options);\n\n    /**\n     * Returns the translation string of the given key\n     *\n     * @param   string $translateKey\n     * @param   array $placeholders\n     * @return  string\n     */\n    public function _($translateKey, $placeholders = null);\n\n    /**\n     * Returns the translation related to the given key\n     *\n     * @param   string $index\n     * @param   array $placeholders\n     * @return  string\n     */\n    public function query($index, $placeholders = null);\n\n    /**\n     * Check whether is defined a translation key in the internal array\n     *\n     * @param   string $index\n     * @return  bool\n     */\n    public function exists($index);\n}\n```\n\nThere are more adapters available for this components in the [Phalcon Incubator](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/translate.html](https://docs.phalconphp.com/en/latest/reference/translate.html)"
- name: MVC Applications
  id: reference/applications
  summary: All the hard work behind orchestrating the operation of MVC in Phalcon is normally done by Phalcon\Mvc\Application
  description: "# MVC Applications\n\nAll the hard work behind orchestrating the operation of MVC in Phalcon is normally done by [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application). This component encapsulates all the complex operations required in the background, instantiating every component needed and integrating it with the project, to allow the MVC pattern to operate as desired.\n\n## Single or Multi Module Applications\n\nWith this component you can run various types of MVC structures:\n\n### Single Module\n\nSingle MVC applications consist of one module only. Namespaces can be used but are not necessary. An application like this would have the following file structure:\n\n``` php\nsingle/\n    app/\n        controllers/\n        models/\n        views/\n    public/\n        css/\n        img/\n        js/\n```\n\nIf namespaces are not used, the following bootstrap file could be used to orchestrate the MVC flow:\n\n``` php\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$loader = new Loader();\n\n$loader->registerDirs(\n    [\n        \"../apps/controllers/\",\n        \"../apps/models/\",\n    ]\n);\n\n$loader->register();\n\n$di = new FactoryDefault();\n\n// Registering the view component\n$di->set(\n    \"view\",\n    function () {\n        $view = new View();\n\n        $view->setViewsDir(\"../apps/views/\");\n\n        return $view;\n    }\n);\n\n$application = new Application($di);\n\ntry {\n    $response = $application->handle();\n\n    $response->send();\n} catch (\\Exception $e) {\n    echo $e->getMessage();\n}\n```\n\nIf namespaces are used, the following bootstrap can be used:\n\n``` php\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$loader = new Loader();\n\n// Use autoloading with namespaces prefixes\n$loader->registerNamespaces(\n    [\n        \"Single\\\\Controllers\" => \"../apps/controllers/\",\n        \"Single\\\\Models\"      => \"../apps/models/\",\n    ]\n);\n\n$loader->register();\n\n$di = new FactoryDefault();\n\n// Register the default dispatcher's namespace for controllers\n$di->set(\n    \"dispatcher\",\n    function () {\n        $dispatcher = new Dispatcher();\n\n        $dispatcher->setDefaultNamespace(\"Single\\\\Controllers\");\n\n        return $dispatcher;\n    }\n);\n\n// Register the view component\n$di->set(\n    \"view\",\n    function () {\n        $view = new View();\n\n        $view->setViewsDir(\"../apps/views/\");\n\n        return $view;\n    }\n);\n\n$application = new Application($di);\n\ntry {\n    $response = $application->handle();\n\n    $response->send();\n} catch (\\Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n### Multi Module\n\nA multi-module application uses the same document root for more than one module. In this case the following file structure can be used:\n\n``` php\nmultiple/\n  apps/\n    frontend/\n       controllers/\n       models/\n       views/\n       Module.php\n    backend/\n       controllers/\n       models/\n       views/\n       Module.php\n  public/\n    css/\n    img/\n    js/\n```\n\nEach directory in apps/ have its own MVC structure. A Module.php is present to configure specific settings of each module like autoloaders or custom services:\n\n``` php\nnamespace Multiple\\Backend;\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\DiInterface;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\ModuleDefinitionInterface;\n\nclass Module implements ModuleDefinitionInterface\n{\n    /**\n     * Register a specific autoloader for the module\n     */\n    public function registerAutoloaders(DiInterface $di = null)\n    {\n        $loader = new Loader();\n\n        $loader->registerNamespaces(\n            [\n                \"Multiple\\\\Backend\\\\Controllers\" => \"../apps/backend/controllers/\",\n                \"Multiple\\\\Backend\\\\Models\"      => \"../apps/backend/models/\",\n            ]\n        );\n\n        $loader->register();\n    }\n\n    /**\n     * Register specific services for the module\n     */\n    public function registerServices(DiInterface $di)\n    {\n        // Registering a dispatcher\n        $di->set(\n            \"dispatcher\",\n            function () {\n                $dispatcher = new Dispatcher();\n\n                $dispatcher->setDefaultNamespace(\"Multiple\\\\Backend\\\\Controllers\");\n\n                return $dispatcher;\n            }\n        );\n\n        // Registering the view component\n        $di->set(\n            \"view\",\n            function () {\n                $view = new View();\n\n                $view->setViewsDir(\"../apps/backend/views/\");\n\n                return $view;\n            }\n        );\n    }\n}\n```\n\nA special bootstrap file is required to load a multi-module MVC architecture:\n\n``` php\nuse Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$di = new FactoryDefault();\n\n// Specify routes for modules\n// More information how to set the router up https://docs.phalconphp.com/en/latest/reference/routing.html\n$di->set(\n    \"router\",\n    function () {\n        $router = new Router();\n\n        $router->setDefaultModule(\"frontend\");\n\n        $router->add(\n            \"/login\",\n            [\n                \"module\"     => \"backend\",\n                \"controller\" => \"login\",\n                \"action\"     => \"index\",\n            ]\n        );\n\n        $router->add(\n            \"/admin/products/:action\",\n            [\n                \"module\"     => \"backend\",\n                \"controller\" => \"products\",\n                \"action\"     => 1,\n            ]\n        );\n\n        $router->add(\n            \"/products/:action\",\n            [\n                \"controller\" => \"products\",\n                \"action\"     => 1,\n            ]\n        );\n\n        return $router;\n    }\n);\n\n// Create an application\n$application = new Application($di);\n\n// Register the installed modules\n$application->registerModules(\n    [\n        \"frontend\" => [\n            \"className\" => \"Multiple\\\\Frontend\\\\Module\",\n            \"path\"      => \"../apps/frontend/Module.php\",\n        ],\n        \"backend\"  => [\n            \"className\" => \"Multiple\\\\Backend\\\\Module\",\n            \"path\"      => \"../apps/backend/Module.php\",\n        ]\n    ]\n);\n\ntry {\n    // Handle the request\n    $response = $application->handle();\n\n    $response->send();\n} catch (\\Exception $e) {\n    echo $e->getMessage();\n}\n```\n\nIf you want to maintain the module configuration in the bootstrap file you can use an anonymous function to register the module:\n\n``` php\nuse Phalcon\\Mvc\\View;\n\n// Creating a view component\n$view = new View();\n\n// Set options to view component\n// ...\n\n// Register the installed modules\n$application->registerModules(\n    [\n        \"frontend\" => function ($di) use ($view) {\n            $di->setShared(\n                \"view\",\n                function () use ($view) {\n                    $view->setViewsDir(\"../apps/frontend/views/\");\n\n                    return $view;\n                }\n            );\n        },\n        \"backend\" => function ($di) use ($view) {\n            $di->setShared(\n                \"view\",\n                function () use ($view) {\n                    $view->setViewsDir(\"../apps/backend/views/\");\n\n                    return $view;\n                }\n            );\n        }\n    ]\n);\n```\n\nWhen [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application) have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: registerAutoloaders() and registerServices(), they will be called by [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application) according to the module to be executed.\n\n## Application Events\n\n[*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application) is able to send events to the [*EventsManager*](events) (if it is present). Events are triggered using the type “application”. The following events are supported:\n\n| Event Name          | Triggered                                                    |\n|---------------------|--------------------------------------------------------------|\n| boot                | Executed when the application handles its first request      |\n| beforeStartModule   | Before initialize a module, only when modules are registered |\n| afterStartModule    | After initialize a module, only when modules are registered  |\n| beforeHandleRequest | Before execute the dispatch loop                             |\n| afterHandleRequest  | After execute the dispatch loop                              |\n\nThe following example demonstrates how to attach listeners to this component:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n$application->setEventsManager($eventsManager);\n\n$eventsManager->attach(\n    \"application\",\n    function (Event $event, $application) {\n        // ...\n    }\n);\n```\n\n## External Resources\n\n- [MVC examples on Github](https://github.com/phalcon/mvc)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/applications.html](https://docs.phalconphp.com/en/latest/reference/applications.html)"
- name: Mvc\Application
  id: api/phalcon_mvc_application
  summary: This component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired
  description: "# Class **Phalcon\\Mvc\\Application**\n\n*extends* abstract class [*Phalcon\\Application*](phalcon_application)\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/application.zep)\n\nThis component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired.\n\n``` php\nuse Phalcon\\Mvc\\Application;\n\nclass MyApp extends Application\n{\n    /**\n     * Register the services here to make them general or register\n     * in the ModuleDefinition to make them module-specific\n     */\n    protected function registerServices()\n    {\n\n    }\n\n    /**\n     * This method registers all the modules in the application\n     */\n    public function main()\n    {\n        $this->registerModules(\n            [\n                \"frontend\" => [\n                    \"className\" => \"Multiple\\\\Frontend\\\\Module\",\n                    \"path\"      => \"../apps/frontend/Module.php\",\n                ],\n                \"backend\" => [\n                    \"className\" => \"Multiple\\\\Backend\\\\Module\",\n                    \"path\"      => \"../apps/backend/Module.php\",\n                ],\n            ]\n        );\n    }\n}\n\n$application = new MyApp();\n\n$application->main();\n```\n\n## Methods\n\n### public **useImplicitView** (*mixed* $implicitView)\n\nBy default. The view is implicitly buffering all the output You can full disable the view component using this method\n\n### public **handle** (\\[*mixed* $uri\\])\n\nHandles a MVC request\n\n### public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nPhalcon\\Application\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the internal event manager\n\n### public **registerModules** (*array* $modules, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nRegister an array of modules present in the application\n\n``` php\n$this->registerModules(\n    [\n        \"frontend\" => [\n            \"className\" => \"Multiple\\\\Frontend\\\\Module\",\n            \"path\"      => \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" => [\n            \"className\" => \"Multiple\\\\Backend\\\\Module\",\n            \"path\"      => \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n```\n\n### public **getModules** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturn the modules registered in the application\n\n### public **getModule** (*mixed* $name) inherited from [*Phalcon\\Application*](phalcon_application)\n\nGets the module definition registered in the application via module name\n\n### public **setDefaultModule** (*mixed* $defaultModule) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the module name to be used if the router doesn’t return a valid module\n\n### public **getDefaultModule** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the default module name\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application.html)"
- name: Mvc\Application::handle
  id: api/phalcon_mvc_application#handle
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Application
  description: "### public **handle** (\\[*mixed* $uri\\])\n\nHandles a MVC request\n\n### public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nPhalcon\\Application\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the internal event manager\n\n### public **registerModules** (*array* $modules, \\[*mixed* $merge\\]) inherited from [*Phalcon\\Application*](phalcon_application)\n\nRegister an array of modules present in the application\n\n``` php\n$this->registerModules(\n    [\n        \"frontend\" => [\n            \"className\" => \"Multiple\\\\Frontend\\\\Module\",\n            \"path\"      => \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" => [\n            \"className\" => \"Multiple\\\\Backend\\\\Module\",\n            \"path\"      => \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n```\n\n### public **getModules** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturn the modules registered in the application\n\n### public **getModule** (*mixed* $name) inherited from [*Phalcon\\Application*](phalcon_application)\n\nGets the module definition registered in the application via module name\n\n### public **setDefaultModule** (*mixed* $defaultModule) inherited from [*Phalcon\\Application*](phalcon_application)\n\nSets the module name to be used if the router doesn’t return a valid module\n\n### public **getDefaultModule** () inherited from [*Phalcon\\Application*](phalcon_application)\n\nReturns the default module name\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application.html)"
- name: Mvc\Application::useImplicitView
  id: api/phalcon_mvc_application#useimplicitview
  summary: By default
  belongs_to: Mvc\Application
  description: |-
    ### public **useImplicitView** (*mixed* $implicitView)

    By default. The view is implicitly buffering all the output You can full disable the view component using this method
- name: Mvc\Application\Exception
  id: api/phalcon_mvc_application_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Application\\Exception**\n\n*extends* class [*Phalcon\\Application\\Exception*](phalcon_application_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/application/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application_Exception.html)"
- name: Mvc\Collection
  id: api/phalcon_mvc_collection
  summary: Deletes a model instance
  description: "# Abstract class **Phalcon\\Mvc\\Collection**\n\n*implements* [*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface), [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [Serializable](http://php.net/manual/en/class.serializable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection.zep)\n\nThis component implements a high level abstraction for NoSQL databases which works with documents\n\n## Constants\n\n### *integer* **OP_NONE**\n\n### *integer* **OP_CREATE**\n\n### *integer* **OP_UPDATE**\n\n### *integer* **OP_DELETE**\n\n### *integer* **DIRTY_STATE_PERSISTENT**\n\n### *integer* **DIRTY_STATE_TRANSIENT**\n\n### *integer* **DIRTY_STATE_DETACHED**\n\n## Methods\n\n### final public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\], \\[[*Phalcon\\Mvc\\Collection\\ManagerInterface*](phalcon_mvc_collection_managerinterface) $modelsManager\\])\n\nPhalcon\\Mvc\\Collection constructor\n\n### public **setId** (*mixed* $id)\n\nSets a value for the \\_id property, creates a MongoId object if needed\n\n### public *MongoId* **getId** ()\n\nReturns the value of the \\_id property\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injection container\n\n### public **getDI** ()\n\nReturns the dependency injection container\n\n### protected **setEventsManager** ([*Phalcon\\Mvc\\Collection\\ManagerInterface*](phalcon_mvc_collection_managerinterface) $eventsManager)\n\nSets a custom events manager\n\n### protected **getEventsManager** ()\n\nReturns the custom events manager\n\n### public **getCollectionManager** ()\n\nReturns the models manager related to the entity instance\n\n### public **getReservedAttributes** ()\n\nReturns an array with reserved properties that cannot be part of the insert/update\n\n### protected **useImplicitObjectIds** (*mixed* $useImplicitObjectIds)\n\nSets if a model must use implicit objects ids\n\n### protected **setSource** (*mixed* $source)\n\nSets collection name which model should be mapped\n\n### public **getSource** ()\n\nReturns collection name mapped in the model\n\n### public **setConnectionService** (*mixed* $connectionService)\n\nSets the DependencyInjection connection service name\n\n### public **getConnectionService** ()\n\nReturns DependencyInjection connection service\n\n### public *MongoDb* **getConnection** ()\n\nRetrieves a database connection\n\n### public *mixed* **readAttribute** (*string* $attribute)\n\nReads an attribute value by its name\n\n``` php\necho $robot->readAttribute(\"name\");\n```\n\n### public **writeAttribute** (*string* $attribute, *mixed* $value)\n\nWrites an attribute value by its name\n\n``` php\n$robot->writeAttribute(\"name\", \"Rosey\");\n```\n\n### public static **cloneResult** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $collection, *array* $document)\n\nReturns a cloned collection\n\n### protected static *array* **\\_getResultset** (*array* $params, [*Phalcon\\Mvc\\Collection*](phalcon_mvc_collection) $collection, *MongoDb* $connection, *boolean* $unique)\n\nReturns a collection resultset\n\n### protected static *int* **\\_getGroupResultset** (*array* $params, [*Phalcon\\Mvc\\Collection*](phalcon_mvc_collection) $collection, *MongoDb* $connection)\n\nPerform a count over a resultset\n\n### final protected *boolean* **\\_preSave** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector, *boolean* $disableEvents, *boolean* $exists)\n\nExecutes internal hooks before save a document\n\n### final protected **\\_postSave** (*mixed* $disableEvents, *mixed* $success, *mixed* $exists)\n\nExecutes internal events after save a document\n\n### protected **validate** (*mixed* $validator)\n\nExecutes validators on every validation call\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionIn;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        // Old, deprecated syntax, use new one below\n        $this->validate(\n            new ExclusionIn(\n                [\n                    \"field\"  => \"status\",\n                    \"domain\" => [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n```\n\n``` php\nuse Phalcon\\Validation\\Validator\\ExclusionIn as ExclusionIn;\nuse Phalcon\\Validation;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $validator = new Validation();\n        $validator->add(\"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" => [\"A\", \"I\"]\n                ]\n            )\n        );\n\n        return $this->validate($validator);\n    }\n}\n```\n\n### public **validationHasFailed** ()\n\nCheck whether validation process has generated any messages\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionIn;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new ExclusionIn(\n                [\n                    \"field\"  => \"status\",\n                    \"domain\" => [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n```\n\n### public **fireEvent** (*mixed* $eventName)\n\nFires an internal event\n\n### public **fireEventCancel** (*mixed* $eventName)\n\nFires an internal event that cancels the operation\n\n### protected **\\_cancelOperation** (*mixed* $disableEvents)\n\nCancel the current operation\n\n### protected *boolean* **\\_exists** (*MongoCollection* $collection)\n\nChecks if the document exists in the collection\n\n### public **getMessages** ()\n\nReturns all the validation messages\n\n``` php\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\nif ($robot->save() === false) {\n    echo \"Umh, We can't store robots right now \";\n\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n```\n\n### public **appendMessage** ([*Phalcon\\Mvc\\Model\\MessageInterface*](phalcon_mvc_model_messageinterface) $message)\n\nAppends a customized message on the validation process\n\n``` php\nuse \\Phalcon\\Mvc\\Model\\Message as Message;\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function beforeSave()\n    {\n        if ($this->name === \"Peter\") {\n            $message = new Message(\n                \"Sorry, but a robot cannot be named Peter\"\n            );\n\n            $this->appendMessage(message);\n        }\n    }\n}\n```\n\n### protected **prepareCU** ()\n\nShared Code for CU Operations Prepares Collection\n\n### public **save** ()\n\nCreates/Updates a collection based on the values in the attributes\n\n### public **create** ()\n\nCreates a collection based on the values in the attributes\n\n### public **createIfNotExist** (*array* $criteria)\n\nCreates a document based on the values in the attributes, if not found by criteria Preferred way to avoid duplication is to create index on attribute\n\n``` php\n$robot = new Robot();\n\n$robot->name = \"MyRobot\";\n$robot->type = \"Droid\";\n\n// Create only if robot with same name and type does not exist\n$robot->createIfNotExist(\n    [\n        \"name\",\n        \"type\",\n    ]\n);\n```\n\n### public **update** ()\n\nCreates/Updates a collection based on the values in the attributes\n\n### public static **findById** (*mixed* $id)\n\nFind a document by its id (\\_id)\n\n``` php\n// Find user by using \\MongoId object\n$user = Users::findById(\n    new \\MongoId(\"545eb081631d16153a293a66\")\n);\n\n// Find user by using id as sting\n$user = Users::findById(\"45cbc4a0e4123f6920000002\");\n\n// Validate input\nif ($user = Users::findById($_POST[\"id\"])) {\n    // ...\n}\n```\n\n### public static **findFirst** (\\[*array* $parameters\\])\n\nAllows to query the first record that match the specified conditions\n\n``` php\n// What's the first robot in the robots table?\n$robot = Robots::findFirst();\n\necho \"The robot name is \", $robot->name, \"\\n\";\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ]\n    ]\n);\n\necho \"The first mechanical robot name is \", $robot->name, \"\\n\";\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ],\n        \"order\" => [\n            \"name\" => 1,\n        ],\n    ]\n);\n\necho \"The first virtual robot name is \", $robot->name, \"\\n\";\n\n// Get first robot by id (_id)\n$robot = Robots::findFirst(\n    [\n        [\n            \"_id\" => new \\MongoId(\"45cbc4a0e4123f6920000002\"),\n        ]\n    ]\n);\n\necho \"The robot id is \", $robot->_id, \"\\n\";\n```\n\n### public static **find** (\\[*array* $parameters\\])\n\nAllows to query a set of records that match the specified conditions\n\n``` php\n// How many robots are there?\n$robots = Robots::find();\n\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ]\n    ]\n);\n\necho \"There are \", count(robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::findFirst(\n    [\n        [\n            \"type\" => \"virtual\"\n        ],\n        \"order\" => [\n            \"name\" => 1,\n        ]\n    ]\n);\n\nforeach ($robots as $robot) {\n   echo $robot->name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    [\n        [\n            \"type\" => \"virtual\",\n        ],\n        \"order\" => [\n            \"name\" => 1,\n        ],\n        \"limit\" => 100,\n    ]\n);\n\nforeach ($robots as $robot) {\n   echo $robot->name, \"\\n\";\n}\n```\n\n### public static **count** (\\[*array* $parameters\\])\n\nPerform a count over a collection\n\n``` php\necho \"There are \", Robots::count(), \" robots\";\n```\n\n### public static **aggregate** (\\[*array* $parameters\\])\n\nPerform an aggregation using the Mongo aggregation framework\n\n### public static **summatory** (*mixed* $field, \\[*mixed* $conditions\\], \\[*mixed* $finalize\\])\n\nAllows to perform a summatory group for a column in the collection\n\n### public **delete** ()\n\nDeletes a model instance. Returning true on success or false otherwise.\n\n``` php\n$robot = Robots::findFirst();\n\n$robot->delete();\n\n$robots = Robots::find();\n\nforeach ($robots as $robot) {\n    $robot->delete();\n}\n```\n\n### public **setDirtyState** (*mixed* $dirtyState)\n\nSets the dirty state of the object using one of the DIRTY_STATE\\_\\* constants\n\n### public **getDirtyState** ()\n\nReturns one of the DIRTY_STATE\\_\\* constants telling if the document exists in the collection or not\n\n### protected **addBehavior** ([*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface) $behavior)\n\nSets up a behavior in a collection\n\n### public **skipOperation** (*mixed* $skip)\n\nSkips the current operation forcing a success state\n\n### public **toArray** ()\n\nReturns the instance as an array representation\n\n``` php\nprint_r(\n    $robot->toArray()\n);\n```\n\n### public **serialize** ()\n\nSerializes the object ignoring connections or protected properties\n\n### public **unserialize** (*mixed* $data)\n\nUnserializes the object from a serialized string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection.html)"
- name: Mvc\Collection::aggregate
  id: api/phalcon_mvc_collection#aggregate
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public static **aggregate** (\[*array* $parameters\])

    Perform an aggregation using the Mongo aggregation framework
- name: Mvc\Collection::appendMessage
  id: api/phalcon_mvc_collection#appendmessage
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **appendMessage** ([*Phalcon\Mvc\Model\MessageInterface*](phalcon_mvc_model_messageinterface) $message)

    Appends a customized message on the validation process

    ``` php
    use \Phalcon\Mvc\Model\Message as Message;

    class Robots extends \Phalcon\Mvc\Model
    {
        public function beforeSave()
        {
            if ($this->name === "Peter") {
                $message = new Message(
                    "Sorry, but a robot cannot be named Peter"
                );

                $this->appendMessage(message);
            }
        }
    }
    ```

    ### protected **prepareCU** ()

    Shared Code for CU Operations Prepares Collection
- name: Mvc\Collection::cloneResult
  id: api/phalcon_mvc_collection#cloneresult
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public static **cloneResult** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $collection, *array* $document)

    Returns a cloned collection

    ### protected static *array* **\_getResultset** (*array* $params, [*Phalcon\Mvc\Collection*](phalcon_mvc_collection) $collection, *MongoDb* $connection, *boolean* $unique)

    Returns a collection resultset

    ### protected static *int* **\_getGroupResultset** (*array* $params, [*Phalcon\Mvc\Collection*](phalcon_mvc_collection) $collection, *MongoDb* $connection)

    Perform a count over a resultset

    ### final protected *boolean* **\_preSave** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector, *boolean* $disableEvents, *boolean* $exists)

    Executes internal hooks before save a document

    ### final protected **\_postSave** (*mixed* $disableEvents, *mixed* $success, *mixed* $exists)

    Executes internal events after save a document

    ### protected **validate** (*mixed* $validator)

    Executes validators on every validation call

    ``` php
    use Phalcon\Mvc\Model\Validator\ExclusionIn as ExclusionIn;

    class Subscriptors extends \Phalcon\Mvc\Collection
    {
        public function validation()
        {
            // Old, deprecated syntax, use new one below
            $this->validate(
                new ExclusionIn(
                    [
                        "field"  => "status",
                        "domain" => ["A", "I"],
                    ]
                )
            );

            if ($this->validationHasFailed() == true) {
                return false;
            }
        }
    }
    ```

    ``` php
    use Phalcon\Validation\Validator\ExclusionIn as ExclusionIn;
    use Phalcon\Validation;

    class Subscriptors extends \Phalcon\Mvc\Collection
    {
        public function validation()
        {
            $validator = new Validation();
            $validator->add("status",
                new ExclusionIn(
                    [
                        "domain" => ["A", "I"]
                    ]
                )
            );

            return $this->validate($validator);
        }
    }
    ```
- name: Mvc\Collection::count
  id: api/phalcon_mvc_collection#count
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public static **count** (\[*array* $parameters\])

    Perform a count over a collection

    ``` php
    echo "There are ", Robots::count(), " robots";
    ```
- name: Mvc\Collection::create
  id: api/phalcon_mvc_collection#create
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **create** ()

    Creates a collection based on the values in the attributes
- name: Mvc\Collection::createIfNotExist
  id: api/phalcon_mvc_collection#createifnotexist
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **createIfNotExist** (*array* $criteria)

    Creates a document based on the values in the attributes, if not found by criteria Preferred way to avoid duplication is to create index on attribute

    ``` php
    $robot = new Robot();

    $robot->name = "MyRobot";
    $robot->type = "Droid";

    // Create only if robot with same name and type does not exist
    $robot->createIfNotExist(
        [
            "name",
            "type",
        ]
    );
    ```
- name: Mvc\Collection::delete
  id: api/phalcon_mvc_collection#delete
  summary: Deletes a model instance
  belongs_to: Mvc\Collection
  description: |-
    ### public **delete** ()

    Deletes a model instance. Returning true on success or false otherwise.

    ``` php
    $robot = Robots::findFirst();

    $robot->delete();

    $robots = Robots::find();

    foreach ($robots as $robot) {
        $robot->delete();
    }
    ```
- name: Mvc\Collection::DIRTY_STATE_DETACHED
  id: api/phalcon_mvc_collection#dirty_state_detached
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### *integer* **DIRTY_STATE_DETACHED**

    ## Methods

    ### final public **\_\_construct** (\[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\], \[[*Phalcon\Mvc\Collection\ManagerInterface*](phalcon_mvc_collection_managerinterface) $modelsManager\])

    Phalcon\Mvc\Collection constructor
- name: Mvc\Collection::DIRTY_STATE_PERSISTENT
  id: api/phalcon_mvc_collection#dirty_state_persistent
  summary: null
  belongs_to: Mvc\Collection
  description: '### *integer* **DIRTY_STATE_PERSISTENT**'
- name: Mvc\Collection::DIRTY_STATE_TRANSIENT
  id: api/phalcon_mvc_collection#dirty_state_transient
  summary: null
  belongs_to: Mvc\Collection
  description: '### *integer* **DIRTY_STATE_TRANSIENT**'
- name: Mvc\Collection::find
  id: api/phalcon_mvc_collection#find
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public static **find** (\[*array* $parameters\])

    Allows to query a set of records that match the specified conditions

    ``` php
    // How many robots are there?
    $robots = Robots::find();

    echo "There are ", count($robots), "\n";

    // How many mechanical robots are there?
    $robots = Robots::find(
        [
            [
                "type" => "mechanical",
            ]
        ]
    );

    echo "There are ", count(robots), "\n";

    // Get and print virtual robots ordered by name
    $robots = Robots::findFirst(
        [
            [
                "type" => "virtual"
            ],
            "order" => [
                "name" => 1,
            ]
        ]
    );

    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }

    // Get first 100 virtual robots ordered by name
    $robots = Robots::find(
        [
            [
                "type" => "virtual",
            ],
            "order" => [
                "name" => 1,
            ],
            "limit" => 100,
        ]
    );

    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }
    ```
- name: Mvc\Collection::findById
  id: api/phalcon_mvc_collection#findbyid
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public static **findById** (*mixed* $id)

    Find a document by its id (\_id)

    ``` php
    // Find user by using \MongoId object
    $user = Users::findById(
        new \MongoId("545eb081631d16153a293a66")
    );

    // Find user by using id as sting
    $user = Users::findById("45cbc4a0e4123f6920000002");

    // Validate input
    if ($user = Users::findById($_POST["id"])) {
        // ...
    }
    ```
- name: Mvc\Collection::findFirst
  id: api/phalcon_mvc_collection#findfirst
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public static **findFirst** (\[*array* $parameters\])

    Allows to query the first record that match the specified conditions

    ``` php
    // What's the first robot in the robots table?
    $robot = Robots::findFirst();

    echo "The robot name is ", $robot->name, "\n";

    // What's the first mechanical robot in robots table?
    $robot = Robots::findFirst(
        [
            [
                "type" => "mechanical",
            ]
        ]
    );

    echo "The first mechanical robot name is ", $robot->name, "\n";

    // Get first virtual robot ordered by name
    $robot = Robots::findFirst(
        [
            [
                "type" => "mechanical",
            ],
            "order" => [
                "name" => 1,
            ],
        ]
    );

    echo "The first virtual robot name is ", $robot->name, "\n";

    // Get first robot by id (_id)
    $robot = Robots::findFirst(
        [
            [
                "_id" => new \MongoId("45cbc4a0e4123f6920000002"),
            ]
        ]
    );

    echo "The robot id is ", $robot->_id, "\n";
    ```
- name: Mvc\Collection::fireEvent
  id: api/phalcon_mvc_collection#fireevent
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **fireEvent** (*mixed* $eventName)

    Fires an internal event
- name: Mvc\Collection::fireEventCancel
  id: api/phalcon_mvc_collection#fireeventcancel
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **fireEventCancel** (*mixed* $eventName)

    Fires an internal event that cancels the operation

    ### protected **\_cancelOperation** (*mixed* $disableEvents)

    Cancel the current operation

    ### protected *boolean* **\_exists** (*MongoCollection* $collection)

    Checks if the document exists in the collection
- name: Mvc\Collection::getCollectionManager
  id: api/phalcon_mvc_collection#getcollectionmanager
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **getCollectionManager** ()

    Returns the models manager related to the entity instance
- name: Mvc\Collection::getConnection
  id: api/phalcon_mvc_collection#getconnection
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public *MongoDb* **getConnection** ()

    Retrieves a database connection
- name: Mvc\Collection::getConnectionService
  id: api/phalcon_mvc_collection#getconnectionservice
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **getConnectionService** ()

    Returns DependencyInjection connection service
- name: Mvc\Collection::getDI
  id: api/phalcon_mvc_collection#getdi
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **getDI** ()

    Returns the dependency injection container

    ### protected **setEventsManager** ([*Phalcon\Mvc\Collection\ManagerInterface*](phalcon_mvc_collection_managerinterface) $eventsManager)

    Sets a custom events manager

    ### protected **getEventsManager** ()

    Returns the custom events manager
- name: Mvc\Collection::getDirtyState
  id: api/phalcon_mvc_collection#getdirtystate
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **getDirtyState** ()

    Returns one of the DIRTY_STATE\_\* constants telling if the document exists in the collection or not

    ### protected **addBehavior** ([*Phalcon\Mvc\Collection\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface) $behavior)

    Sets up a behavior in a collection
- name: Mvc\Collection::getId
  id: api/phalcon_mvc_collection#getid
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public *MongoId* **getId** ()

    Returns the value of the \_id property
- name: Mvc\Collection::getMessages
  id: api/phalcon_mvc_collection#getmessages
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **getMessages** ()

    Returns all the validation messages

    ``` php
    $robot = new Robots();

    $robot->type = "mechanical";
    $robot->name = "Astro Boy";
    $robot->year = 1952;

    if ($robot->save() === false) {
        echo "Umh, We can't store robots right now ";

        $messages = $robot->getMessages();

        foreach ($messages as $message) {
            echo $message;
        }
    } else {
        echo "Great, a new robot was saved successfully!";
    }
    ```
- name: Mvc\Collection::getReservedAttributes
  id: api/phalcon_mvc_collection#getreservedattributes
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **getReservedAttributes** ()

    Returns an array with reserved properties that cannot be part of the insert/update

    ### protected **useImplicitObjectIds** (*mixed* $useImplicitObjectIds)

    Sets if a model must use implicit objects ids

    ### protected **setSource** (*mixed* $source)

    Sets collection name which model should be mapped
- name: Mvc\Collection::getSource
  id: api/phalcon_mvc_collection#getsource
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **getSource** ()

    Returns collection name mapped in the model
- name: Mvc\Collection::OP_CREATE
  id: api/phalcon_mvc_collection#op_create
  summary: null
  belongs_to: Mvc\Collection
  description: '### *integer* **OP_CREATE**'
- name: Mvc\Collection::OP_DELETE
  id: api/phalcon_mvc_collection#op_delete
  summary: null
  belongs_to: Mvc\Collection
  description: '### *integer* **OP_DELETE**'
- name: Mvc\Collection::OP_NONE
  id: api/phalcon_mvc_collection#op_none
  summary: null
  belongs_to: Mvc\Collection
  description: '### *integer* **OP_NONE**'
- name: Mvc\Collection::OP_UPDATE
  id: api/phalcon_mvc_collection#op_update
  summary: null
  belongs_to: Mvc\Collection
  description: '### *integer* **OP_UPDATE**'
- name: Mvc\Collection::readAttribute
  id: api/phalcon_mvc_collection#readattribute
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public *mixed* **readAttribute** (*string* $attribute)

    Reads an attribute value by its name

    ``` php
    echo $robot->readAttribute("name");
    ```
- name: Mvc\Collection::save
  id: api/phalcon_mvc_collection#save
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **save** ()

    Creates/Updates a collection based on the values in the attributes
- name: Mvc\Collection::serialize
  id: api/phalcon_mvc_collection#serialize
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **serialize** ()

    Serializes the object ignoring connections or protected properties
- name: Mvc\Collection::setConnectionService
  id: api/phalcon_mvc_collection#setconnectionservice
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **setConnectionService** (*mixed* $connectionService)

    Sets the DependencyInjection connection service name
- name: Mvc\Collection::setDI
  id: api/phalcon_mvc_collection#setdi
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injection container
- name: Mvc\Collection::setDirtyState
  id: api/phalcon_mvc_collection#setdirtystate
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **setDirtyState** (*mixed* $dirtyState)

    Sets the dirty state of the object using one of the DIRTY_STATE\_\* constants
- name: Mvc\Collection::setId
  id: api/phalcon_mvc_collection#setid
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **setId** (*mixed* $id)

    Sets a value for the \_id property, creates a MongoId object if needed
- name: Mvc\Collection::skipOperation
  id: api/phalcon_mvc_collection#skipoperation
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **skipOperation** (*mixed* $skip)

    Skips the current operation forcing a success state
- name: Mvc\Collection::summatory
  id: api/phalcon_mvc_collection#summatory
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public static **summatory** (*mixed* $field, \[*mixed* $conditions\], \[*mixed* $finalize\])

    Allows to perform a summatory group for a column in the collection
- name: Mvc\Collection::toArray
  id: api/phalcon_mvc_collection#toarray
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **toArray** ()

    Returns the instance as an array representation

    ``` php
    print_r(
        $robot->toArray()
    );
    ```
- name: Mvc\Collection::unserialize
  id: api/phalcon_mvc_collection#unserialize
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection
  description: "### public **unserialize** (*mixed* $data)\n\nUnserializes the object from a serialized string\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection.html)"
- name: Mvc\Collection::update
  id: api/phalcon_mvc_collection#update
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **update** ()

    Creates/Updates a collection based on the values in the attributes
- name: Mvc\Collection::validationHasFailed
  id: api/phalcon_mvc_collection#validationhasfailed
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **validationHasFailed** ()

    Check whether validation process has generated any messages

    ``` php
    use Phalcon\Mvc\Model\Validator\ExclusionIn as ExclusionIn;

    class Subscriptors extends \Phalcon\Mvc\Collection
    {
        public function validation()
        {
            $this->validate(
                new ExclusionIn(
                    [
                        "field"  => "status",
                        "domain" => ["A", "I"],
                    ]
                )
            );

            if ($this->validationHasFailed() == true) {
                return false;
            }
        }
    }
    ```
- name: Mvc\Collection::writeAttribute
  id: api/phalcon_mvc_collection#writeattribute
  summary: null
  belongs_to: Mvc\Collection
  description: |-
    ### public **writeAttribute** (*string* $attribute, *mixed* $value)

    Writes an attribute value by its name

    ``` php
    $robot->writeAttribute("name", "Rosey");
    ```
- name: Mvc\CollectionInterface
  id: api/phalcon_mvc_collectioninterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\CollectionInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collectioninterface.zep)\n\n## Methods\n\n### abstract public **setId** (*mixed* $id)\n\n...\n\n### abstract public **getId** ()\n\n...\n\n### abstract public **getReservedAttributes** ()\n\n...\n\n### abstract public **getSource** ()\n\n...\n\n### abstract public **setConnectionService** (*mixed* $connectionService)\n\n...\n\n### abstract public **getConnection** ()\n\n...\n\n### abstract public **setDirtyState** (*mixed* $dirtyState)\n\n...\n\n### abstract public **getDirtyState** ()\n\n...\n\n### abstract public static **cloneResult** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $collection, *array* $document)\n\n...\n\n### abstract public **fireEvent** (*mixed* $eventName)\n\n...\n\n### abstract public **fireEventCancel** (*mixed* $eventName)\n\n...\n\n### abstract public **validationHasFailed** ()\n\n...\n\n### abstract public **getMessages** ()\n\n...\n\n### abstract public **appendMessage** ([*Phalcon\\Mvc\\Model\\MessageInterface*](phalcon_mvc_model_messageinterface) $message)\n\n...\n\n### abstract public **save** ()\n\n...\n\n### abstract public static **findById** (*mixed* $id)\n\n...\n\n### abstract public static **findFirst** (\\[*array* $parameters\\])\n\n...\n\n### abstract public static **find** (\\[*array* $parameters\\])\n\n...\n\n### abstract public static **count** (\\[*array* $parameters\\])\n\n...\n\n### abstract public **delete** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_CollectionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_CollectionInterface.html)"
- name: Mvc\CollectionInterface::appendMessage
  id: api/phalcon_mvc_collectioninterface#appendmessage
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **appendMessage** ([*Phalcon\Mvc\Model\MessageInterface*](phalcon_mvc_model_messageinterface) $message)

    ...
- name: Mvc\CollectionInterface::cloneResult
  id: api/phalcon_mvc_collectioninterface#cloneresult
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public static **cloneResult** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $collection, *array* $document)

    ...
- name: Mvc\CollectionInterface::count
  id: api/phalcon_mvc_collectioninterface#count
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public static **count** (\[*array* $parameters\])

    ...
- name: Mvc\CollectionInterface::delete
  id: api/phalcon_mvc_collectioninterface#delete
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\CollectionInterface
  description: "### abstract public **delete** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_CollectionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_CollectionInterface.html)"
- name: Mvc\CollectionInterface::find
  id: api/phalcon_mvc_collectioninterface#find
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public static **find** (\[*array* $parameters\])

    ...
- name: Mvc\CollectionInterface::findById
  id: api/phalcon_mvc_collectioninterface#findbyid
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public static **findById** (*mixed* $id)

    ...
- name: Mvc\CollectionInterface::findFirst
  id: api/phalcon_mvc_collectioninterface#findfirst
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public static **findFirst** (\[*array* $parameters\])

    ...
- name: Mvc\CollectionInterface::fireEvent
  id: api/phalcon_mvc_collectioninterface#fireevent
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **fireEvent** (*mixed* $eventName)

    ...
- name: Mvc\CollectionInterface::fireEventCancel
  id: api/phalcon_mvc_collectioninterface#fireeventcancel
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **fireEventCancel** (*mixed* $eventName)

    ...
- name: Mvc\CollectionInterface::getConnection
  id: api/phalcon_mvc_collectioninterface#getconnection
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **getConnection** ()

    ...
- name: Mvc\CollectionInterface::getDirtyState
  id: api/phalcon_mvc_collectioninterface#getdirtystate
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **getDirtyState** ()

    ...
- name: Mvc\CollectionInterface::getId
  id: api/phalcon_mvc_collectioninterface#getid
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **getId** ()

    ...
- name: Mvc\CollectionInterface::getMessages
  id: api/phalcon_mvc_collectioninterface#getmessages
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **getMessages** ()

    ...
- name: Mvc\CollectionInterface::getReservedAttributes
  id: api/phalcon_mvc_collectioninterface#getreservedattributes
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **getReservedAttributes** ()

    ...
- name: Mvc\CollectionInterface::getSource
  id: api/phalcon_mvc_collectioninterface#getsource
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **getSource** ()

    ...
- name: Mvc\CollectionInterface::save
  id: api/phalcon_mvc_collectioninterface#save
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **save** ()

    ...
- name: Mvc\CollectionInterface::setConnectionService
  id: api/phalcon_mvc_collectioninterface#setconnectionservice
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **setConnectionService** (*mixed* $connectionService)

    ...
- name: Mvc\CollectionInterface::setDirtyState
  id: api/phalcon_mvc_collectioninterface#setdirtystate
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **setDirtyState** (*mixed* $dirtyState)

    ...
- name: Mvc\CollectionInterface::setId
  id: api/phalcon_mvc_collectioninterface#setid
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **setId** (*mixed* $id)

    ...
- name: Mvc\CollectionInterface::validationHasFailed
  id: api/phalcon_mvc_collectioninterface#validationhasfailed
  summary: null
  belongs_to: Mvc\CollectionInterface
  description: |-
    ### abstract public **validationHasFailed** ()

    ...
- name: Mvc\Collection\Behavior
  id: api/phalcon_mvc_collection_behavior
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Mvc\\Collection\\Behavior**\n\n*implements* [*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behavior.zep)\n\nThis is an optional base class for ORM behaviors\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\n### protected **mustTakeAction** (*mixed* $eventName)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\])\n\nReturns the behavior options related to an event\n\n### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nThis method receives the notifications from the EventsManager\n\n### public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $method, \\[*mixed* $arguments\\])\n\nActs as fallbacks when a missing method is called on the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior.html)"
- name: Mvc\Collection\Behavior::missingMethod
  id: api/phalcon_mvc_collection_behavior#missingmethod
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection\Behavior
  description: "### public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $method, \\[*mixed* $arguments\\])\n\nActs as fallbacks when a missing method is called on the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior.html)"
- name: Mvc\Collection\Behavior::notify
  id: api/phalcon_mvc_collection_behavior#notify
  summary: null
  belongs_to: Mvc\Collection\Behavior
  description: |-
    ### public **notify** (*mixed* $type, [*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    This method receives the notifications from the EventsManager
- name: Mvc\Collection\BehaviorInterface
  id: api/phalcon_mvc_collection_behaviorinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Collection\\BehaviorInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behaviorinterface.zep)\n\n## Methods\n\n### abstract public **notify** (*mixed* $type, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $collection)\n\n...\n\n### abstract public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $collection, *mixed* $method, \\[*mixed* $arguments\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_BehaviorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_BehaviorInterface.html)"
- name: Mvc\Collection\BehaviorInterface::missingMethod
  id: api/phalcon_mvc_collection_behaviorinterface#missingmethod
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection\BehaviorInterface
  description: "### abstract public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $collection, *mixed* $method, \\[*mixed* $arguments\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_BehaviorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_BehaviorInterface.html)"
- name: Mvc\Collection\BehaviorInterface::notify
  id: api/phalcon_mvc_collection_behaviorinterface#notify
  summary: null
  belongs_to: Mvc\Collection\BehaviorInterface
  description: |-
    ### abstract public **notify** (*mixed* $type, [*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $collection)

    ...
- name: Mvc\Collection\Behavior\SoftDelete
  id: api/phalcon_mvc_collection_behavior_softdelete
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Collection\\Behavior\\SoftDelete**\n\n*extends* abstract class [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\n*implements* [*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behavior/softdelete.zep)\n\nInstead of permanently delete a record it marks the record as deleted changing the value of a flag column\n\n## Methods\n\n### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nPhalcon\\Mvc\\Collection\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $method, \\[*mixed* $arguments\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nActs as fallbacks when a missing method is called on the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_SoftDelete.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_SoftDelete.html)"
- name: Mvc\Collection\Behavior\SoftDelete::notify
  id: api/phalcon_mvc_collection_behavior_softdelete#notify
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection\Behavior\SoftDelete
  description: "### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nPhalcon\\Mvc\\Collection\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $method, \\[*mixed* $arguments\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nActs as fallbacks when a missing method is called on the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_SoftDelete.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_SoftDelete.html)"
- name: Mvc\Collection\Behavior\Timestampable
  id: api/phalcon_mvc_collection_behavior_timestampable
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Collection\\Behavior\\Timestampable**\n\n*extends* abstract class [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\n*implements* [*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behavior/timestampable.zep)\n\nAllows to automatically update a model’s attribute saving the datetime when a record is created or updated\n\n## Methods\n\n### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nPhalcon\\Mvc\\Collection\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $method, \\[*mixed* $arguments\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nActs as fallbacks when a missing method is called on the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_Timestampable.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_Timestampable.html)"
- name: Mvc\Collection\Behavior\Timestampable::notify
  id: api/phalcon_mvc_collection_behavior_timestampable#notify
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection\Behavior\Timestampable
  description: "### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nPhalcon\\Mvc\\Collection\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $method, \\[*mixed* $arguments\\]) inherited from [*Phalcon\\Mvc\\Collection\\Behavior*](phalcon_mvc_collection_behavior)\n\nActs as fallbacks when a missing method is called on the collection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_Timestampable.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_Timestampable.html)"
- name: Mvc\Collection\Document
  id: api/phalcon_mvc_collection_document
  summary: This component allows Phalcon\Mvc\Collection to return rows without an associated entity
  description: "# Class **Phalcon\\Mvc\\Collection\\Document**\n\n*implements* [*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/document.zep)\n\nThis component allows Phalcon\\Mvc\\Collection to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-\\>x or array\\[x\\].\n\n## Methods\n\n### public *boolean* **offsetExists** (*int* $index)\n\nChecks whether an offset exists in the document\n\n### public **offsetGet** (*mixed* $index)\n\nReturns the value of a field using the ArrayAccess interfase\n\n### public **offsetSet** (*mixed* $index, *mixed* $value)\n\nChange a value using the ArrayAccess interface\n\n### public **offsetUnset** (*string* $offset)\n\nRows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public *mixed* **readAttribute** (*string* $attribute)\n\nReads an attribute value by its name\n\n``` php\necho $robot->readAttribute(\"name\");\n```\n\n### public **writeAttribute** (*string* $attribute, *mixed* $value)\n\nWrites an attribute value by its name\n\n``` php\n$robot->writeAttribute(\"name\", \"Rosey\");\n```\n\n### public *array* **toArray** ()\n\nReturns the instance as an array representation\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Document.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Document.html)"
- name: Mvc\Collection\Document::offsetExists
  id: api/phalcon_mvc_collection_document#offsetexists
  summary: null
  belongs_to: Mvc\Collection\Document
  description: |-
    ### public *boolean* **offsetExists** (*int* $index)

    Checks whether an offset exists in the document
- name: Mvc\Collection\Document::offsetGet
  id: api/phalcon_mvc_collection_document#offsetget
  summary: null
  belongs_to: Mvc\Collection\Document
  description: |-
    ### public **offsetGet** (*mixed* $index)

    Returns the value of a field using the ArrayAccess interfase
- name: Mvc\Collection\Document::offsetSet
  id: api/phalcon_mvc_collection_document#offsetset
  summary: null
  belongs_to: Mvc\Collection\Document
  description: |-
    ### public **offsetSet** (*mixed* $index, *mixed* $value)

    Change a value using the ArrayAccess interface
- name: Mvc\Collection\Document::offsetUnset
  id: api/phalcon_mvc_collection_document#offsetunset
  summary: Rows cannot be changed
  belongs_to: Mvc\Collection\Document
  description: |-
    ### public **offsetUnset** (*string* $offset)

    Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface
- name: Mvc\Collection\Document::readAttribute
  id: api/phalcon_mvc_collection_document#readattribute
  summary: null
  belongs_to: Mvc\Collection\Document
  description: |-
    ### public *mixed* **readAttribute** (*string* $attribute)

    Reads an attribute value by its name

    ``` php
    echo $robot->readAttribute("name");
    ```
- name: Mvc\Collection\Document::toArray
  id: api/phalcon_mvc_collection_document#toarray
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection\Document
  description: "### public *array* **toArray** ()\n\nReturns the instance as an array representation\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Document.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Document.html)"
- name: Mvc\Collection\Document::writeAttribute
  id: api/phalcon_mvc_collection_document#writeattribute
  summary: null
  belongs_to: Mvc\Collection\Document
  description: |-
    ### public **writeAttribute** (*string* $attribute, *mixed* $value)

    Writes an attribute value by its name

    ``` php
    $robot->writeAttribute("name", "Rosey");
    ```
- name: Mvc\Collection\Exception
  id: api/phalcon_mvc_collection_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Collection\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Exception.html)"
- name: Mvc\Collection\Manager
  id: api/phalcon_mvc_collection_manager
  summary: This components controls the initialization of models, keeping record of relations between the different models of the application
  description: "# Class **Phalcon\\Mvc\\Collection\\Manager**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/manager.zep)\n\nThis components controls the initialization of models, keeping record of relations between the different models of the application.\n\nA CollectionManager is injected to a model via a Dependency Injector Container such as Phalcon\\Di.\n\n``` php\n$di = new \\Phalcon\\Di();\n\n$di->set(\n    \"collectionManager\",\n    function () {\n        return new \\Phalcon\\Mvc\\Collection\\Manager();\n    }\n);\n\n$robot = new Robots($di);\n```\n\n## Methods\n\n### public **getServiceName** ()\n\n...\n\n### public **setServiceName** (*mixed* $serviceName)\n\n...\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public **getDI** ()\n\nReturns the DependencyInjector container\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the event manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **setCustomEventsManager** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets a custom events manager for a specific model\n\n### public **getCustomEventsManager** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nReturns a custom events manager related to a model\n\n### public **initialize** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nInitializes a model in the models manager\n\n### public **isInitialized** (*mixed* $modelName)\n\nCheck whether a model is already initialized\n\n### public **getLastInitialized** ()\n\nGet the latest initialized model\n\n### public **setConnectionService** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $connectionService)\n\nSets a connection service for a specific model\n\n### public **getConnectionService** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nGets a connection service for a specific model\n\n### public **useImplicitObjectIds** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $useImplicitObjectIds)\n\nSets whether a model must use implicit objects ids\n\n### public **isUsingImplicitObjectIds** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nChecks if a model is using implicit object ids\n\n### public *Mongo* **getConnection** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nReturns the connection related to a model\n\n### public **notifyEvent** (*mixed* $eventName, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\nReceives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model\n\n### public **missingMethod** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $eventName, *mixed* $data)\n\nDispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that at least one was implemented\n\n### public **addBehavior** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface) $behavior)\n\nBinds a behavior to a model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Manager.html)"
- name: Mvc\Collection\Manager::addBehavior
  id: api/phalcon_mvc_collection_manager#addbehavior
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection\Manager
  description: "### public **addBehavior** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface) $behavior)\n\nBinds a behavior to a model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Manager.html)"
- name: Mvc\Collection\Manager::getConnection
  id: api/phalcon_mvc_collection_manager#getconnection
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public *Mongo* **getConnection** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    Returns the connection related to a model
- name: Mvc\Collection\Manager::getConnectionService
  id: api/phalcon_mvc_collection_manager#getconnectionservice
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **getConnectionService** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    Gets a connection service for a specific model
- name: Mvc\Collection\Manager::getCustomEventsManager
  id: api/phalcon_mvc_collection_manager#getcustomeventsmanager
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **getCustomEventsManager** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    Returns a custom events manager related to a model
- name: Mvc\Collection\Manager::getDI
  id: api/phalcon_mvc_collection_manager#getdi
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **getDI** ()

    Returns the DependencyInjector container
- name: Mvc\Collection\Manager::getEventsManager
  id: api/phalcon_mvc_collection_manager#geteventsmanager
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Mvc\Collection\Manager::getLastInitialized
  id: api/phalcon_mvc_collection_manager#getlastinitialized
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **getLastInitialized** ()

    Get the latest initialized model
- name: Mvc\Collection\Manager::getServiceName
  id: api/phalcon_mvc_collection_manager#getservicename
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **getServiceName** ()

    ...
- name: Mvc\Collection\Manager::initialize
  id: api/phalcon_mvc_collection_manager#initialize
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **initialize** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    Initializes a model in the models manager
- name: Mvc\Collection\Manager::isInitialized
  id: api/phalcon_mvc_collection_manager#isinitialized
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **isInitialized** (*mixed* $modelName)

    Check whether a model is already initialized
- name: Mvc\Collection\Manager::isUsingImplicitObjectIds
  id: api/phalcon_mvc_collection_manager#isusingimplicitobjectids
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **isUsingImplicitObjectIds** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    Checks if a model is using implicit object ids
- name: Mvc\Collection\Manager::missingMethod
  id: api/phalcon_mvc_collection_manager#missingmethod
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **missingMethod** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $eventName, *mixed* $data)

    Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that at least one was implemented
- name: Mvc\Collection\Manager::notifyEvent
  id: api/phalcon_mvc_collection_manager#notifyevent
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **notifyEvent** (*mixed* $eventName, [*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    Receives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model
- name: Mvc\Collection\Manager::setConnectionService
  id: api/phalcon_mvc_collection_manager#setconnectionservice
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **setConnectionService** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $connectionService)

    Sets a connection service for a specific model
- name: Mvc\Collection\Manager::setCustomEventsManager
  id: api/phalcon_mvc_collection_manager#setcustomeventsmanager
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **setCustomEventsManager** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets a custom events manager for a specific model
- name: Mvc\Collection\Manager::setDI
  id: api/phalcon_mvc_collection_manager#setdi
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Mvc\Collection\Manager::setEventsManager
  id: api/phalcon_mvc_collection_manager#seteventsmanager
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the event manager
- name: Mvc\Collection\Manager::setServiceName
  id: api/phalcon_mvc_collection_manager#setservicename
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **setServiceName** (*mixed* $serviceName)

    ...
- name: Mvc\Collection\Manager::useImplicitObjectIds
  id: api/phalcon_mvc_collection_manager#useimplicitobjectids
  summary: null
  belongs_to: Mvc\Collection\Manager
  description: |-
    ### public **useImplicitObjectIds** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $useImplicitObjectIds)

    Sets whether a model must use implicit objects ids
- name: Mvc\Collection\ManagerInterface
  id: api/phalcon_mvc_collection_managerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Collection\\ManagerInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/managerinterface.zep)\n\n## Methods\n\n### abstract public **setCustomEventsManager** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\n...\n\n### abstract public **getCustomEventsManager** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\n...\n\n### abstract public **initialize** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\n...\n\n### abstract public **isInitialized** (*mixed* $modelName)\n\n...\n\n### abstract public **getLastInitialized** ()\n\n...\n\n### abstract public **setConnectionService** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $connectionService)\n\n...\n\n### abstract public **useImplicitObjectIds** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $useImplicitObjectIds)\n\n...\n\n### abstract public **isUsingImplicitObjectIds** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\n...\n\n### abstract public **getConnection** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\n...\n\n### abstract public **notifyEvent** (*mixed* $eventName, [*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model)\n\n...\n\n### abstract public **addBehavior** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface) $behavior)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_ManagerInterface.html)"
- name: Mvc\Collection\ManagerInterface::addBehavior
  id: api/phalcon_mvc_collection_managerinterface#addbehavior
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Collection\ManagerInterface
  description: "### abstract public **addBehavior** ([*Phalcon\\Mvc\\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\\Mvc\\Collection\\BehaviorInterface*](phalcon_mvc_collection_behaviorinterface) $behavior)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_ManagerInterface.html)"
- name: Mvc\Collection\ManagerInterface::getConnection
  id: api/phalcon_mvc_collection_managerinterface#getconnection
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **getConnection** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    ...
- name: Mvc\Collection\ManagerInterface::getCustomEventsManager
  id: api/phalcon_mvc_collection_managerinterface#getcustomeventsmanager
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **getCustomEventsManager** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    ...
- name: Mvc\Collection\ManagerInterface::getLastInitialized
  id: api/phalcon_mvc_collection_managerinterface#getlastinitialized
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **getLastInitialized** ()

    ...
- name: Mvc\Collection\ManagerInterface::initialize
  id: api/phalcon_mvc_collection_managerinterface#initialize
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **initialize** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    ...
- name: Mvc\Collection\ManagerInterface::isInitialized
  id: api/phalcon_mvc_collection_managerinterface#isinitialized
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **isInitialized** (*mixed* $modelName)

    ...
- name: Mvc\Collection\ManagerInterface::isUsingImplicitObjectIds
  id: api/phalcon_mvc_collection_managerinterface#isusingimplicitobjectids
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **isUsingImplicitObjectIds** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    ...
- name: Mvc\Collection\ManagerInterface::notifyEvent
  id: api/phalcon_mvc_collection_managerinterface#notifyevent
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **notifyEvent** (*mixed* $eventName, [*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model)

    ...
- name: Mvc\Collection\ManagerInterface::setConnectionService
  id: api/phalcon_mvc_collection_managerinterface#setconnectionservice
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **setConnectionService** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $connectionService)

    ...
- name: Mvc\Collection\ManagerInterface::setCustomEventsManager
  id: api/phalcon_mvc_collection_managerinterface#setcustomeventsmanager
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **setCustomEventsManager** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model, [*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    ...
- name: Mvc\Collection\ManagerInterface::useImplicitObjectIds
  id: api/phalcon_mvc_collection_managerinterface#useimplicitobjectids
  summary: null
  belongs_to: Mvc\Collection\ManagerInterface
  description: |-
    ### abstract public **useImplicitObjectIds** ([*Phalcon\Mvc\CollectionInterface*](phalcon_mvc_collectioninterface) $model, *mixed* $useImplicitObjectIds)

    ...
- name: Mvc\Controller
  id: api/phalcon_mvc_controller
  summary: The controllers provide the “flow” between models and views
  description: "# Abstract class **Phalcon\\Mvc\\Controller**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Mvc\\ControllerInterface*](phalcon_mvc_controllerinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/controller.zep)\n\nEvery application controller should extend this class that encapsulates all the controller functionality\n\nThe controllers provide the “flow” between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.\n\n``` php\n<?php\n\nclass PeopleController extends \\Phalcon\\Mvc\\Controller\n{\n    // This action will be executed by default\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Forwards flow to the index action\n        return $this->dispatcher->forward(\n            [\n                \"controller\" => \"people\",\n                \"action\"     => \"index\",\n            ]\n        );\n    }\n}\n```\n\n## Methods\n\n### final public **\\_\\_construct** ()\n\nPhalcon\\Mvc\\Controller constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller.html)"
- name: Mvc\ControllerInterface
  id: api/phalcon_mvc_controllerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\ControllerInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/controllerinterface.zep)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ControllerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ControllerInterface.html)"
- name: Mvc\Controller\BindModelInterface
  id: api/phalcon_mvc_controller_bindmodelinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Controller\\BindModelInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/controller/bindmodelinterface.zep)\n\n## Methods\n\n### abstract public static **getModelName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller_BindModelInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller_BindModelInterface.html)"
- name: Mvc\Controller\BindModelInterface::getModelName
  id: api/phalcon_mvc_controller_bindmodelinterface#getmodelname
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Controller\BindModelInterface
  description: "### abstract public static **getModelName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller_BindModelInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller_BindModelInterface.html)"
- name: Mvc\Dispatcher
  id: api/phalcon_mvc_dispatcher
  summary: Dispatching is the process of taking the request object, extracting the module name, controller name, action name, and optional parameters contained in it, and then instantiating a controller and calling an action of that controller
  description: "# Class **Phalcon\\Mvc\\Dispatcher**\n\n*extends* abstract class [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface), [*Phalcon\\Mvc\\DispatcherInterface*](phalcon_mvc_dispatcherinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/dispatcher.zep)\n\nDispatching is the process of taking the request object, extracting the module name, controller name, action name, and optional parameters contained in it, and then instantiating a controller and calling an action of that controller.\n\n``` php\n$di = new \\Phalcon\\Di();\n\n$dispatcher = new \\Phalcon\\Mvc\\Dispatcher();\n\n$dispatcher->setDI($di);\n\n$dispatcher->setControllerName(\"posts\");\n$dispatcher->setActionName(\"index\");\n$dispatcher->setParams([]);\n\n$controller = $dispatcher->dispatch();\n```\n\n## Constants\n\n### *integer* **EXCEPTION_NO_DI**\n\n### *integer* **EXCEPTION_CYCLIC_ROUTING**\n\n### *integer* **EXCEPTION_HANDLER_NOT_FOUND**\n\n### *integer* **EXCEPTION_INVALID_HANDLER**\n\n### *integer* **EXCEPTION_INVALID_PARAMS**\n\n### *integer* **EXCEPTION_ACTION_NOT_FOUND**\n\n## Methods\n\n### public **setControllerSuffix** (*mixed* $controllerSuffix)\n\nSets the default controller suffix\n\n### public **setDefaultController** (*mixed* $controllerName)\n\nSets the default controller name\n\n### public **setControllerName** (*mixed* $controllerName)\n\nSets the controller name to be dispatched\n\n### public **getControllerName** ()\n\nGets last dispatched controller name\n\n### public **getPreviousNamespaceName** ()\n\nGets previous dispatched namespace name\n\n### public **getPreviousControllerName** ()\n\nGets previous dispatched controller name\n\n### public **getPreviousActionName** ()\n\nGets previous dispatched action name\n\n### protected **\\_throwDispatchException** (*mixed* $message, \\[*mixed* $exceptionCode\\])\n\nThrows an internal exception\n\n### protected **\\_handleException** ([Exception](http://php.net/manual/en/class.exception.php) $exception)\n\nHandles a user exception\n\n### public **getControllerClass** ()\n\nPossible controller class name that will be located to dispatch the request\n\n### public **getLastController** ()\n\nReturns the latest dispatched controller\n\n### public **getActiveController** ()\n\nReturns the active controller in the dispatcher\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal event manager\n\n### public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action suffix\n\n### public **getActionSuffix** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the default action suffix\n\n### public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the module where the controller is (only informative)\n\n### public **getModuleName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the module where the controller class is\n\n### public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the namespace where the controller class is\n\n### public **getNamespaceName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a namespace to be prepended to the current handler name\n\n### public **setDefaultNamespace** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default namespace\n\n### public **getDefaultNamespace** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the default namespace\n\n### public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action name\n\n### public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the action name to be dispatched\n\n### public **getActionName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the latest dispatched action name\n\n### public **setParams** (*array* $params) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets action params to be dispatched\n\n### public **getParams** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets action params\n\n### public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet a param by its name or numeric index\n\n### public *mixed* **getParam** (*mixed* $param, \\[*string* \\| *array* $filters\\], \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a param by its name or numeric index\n\n### public *boolean* **hasParam** (*mixed* $param) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if a param exists\n\n### public **getActiveMethod** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the current method to be/executed in the dispatcher\n\n### public **isFinished** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nChecks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch\n\n### public **setReturnedValue** (*mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the latest returned value by an action manually\n\n### public *mixed* **getReturnedValue** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns value returned by the latest dispatched action\n\n### public **setModelBinding** (*mixed* $value, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable/Disable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n```\n\n### public **setModelBinder** ([*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n```\n\n### public **getModelBinder** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets model binder\n\n### public *object* **dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### protected *object* **\\_dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### public **forward** (*array* $forward) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nForwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed\n\n``` php\n$this->dispatcher->forward(\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n### public **wasForwarded** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if the current executed action was forwarded by another one\n\n### public **getHandlerClass** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nPossible class name that will be located to dispatch the request\n\n### public **callActionMethod** (*mixed* $handler, *mixed* $actionMethod, \\[*array* $params\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\n...\n\n### public **getBoundModels** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns bound models from binder instance\n\n``` php\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this->dispatcher->getBoundModels(); // return array with $user\n    }\n}\n```\n\n### protected **\\_resolveEmptyProperties** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet empty properties to their defaults (where defaults are available)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher.html)"
- name: Mvc\Dispatcher::EXCEPTION_ACTION_NOT_FOUND
  id: api/phalcon_mvc_dispatcher#exception_action_not_found
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### *integer* **EXCEPTION_ACTION_NOT_FOUND**

    ## Methods
- name: Mvc\Dispatcher::EXCEPTION_CYCLIC_ROUTING
  id: api/phalcon_mvc_dispatcher#exception_cyclic_routing
  summary: null
  belongs_to: Mvc\Dispatcher
  description: '### *integer* **EXCEPTION_CYCLIC_ROUTING**'
- name: Mvc\Dispatcher::EXCEPTION_HANDLER_NOT_FOUND
  id: api/phalcon_mvc_dispatcher#exception_handler_not_found
  summary: null
  belongs_to: Mvc\Dispatcher
  description: '### *integer* **EXCEPTION_HANDLER_NOT_FOUND**'
- name: Mvc\Dispatcher::EXCEPTION_INVALID_HANDLER
  id: api/phalcon_mvc_dispatcher#exception_invalid_handler
  summary: null
  belongs_to: Mvc\Dispatcher
  description: '### *integer* **EXCEPTION_INVALID_HANDLER**'
- name: Mvc\Dispatcher::EXCEPTION_INVALID_PARAMS
  id: api/phalcon_mvc_dispatcher#exception_invalid_params
  summary: null
  belongs_to: Mvc\Dispatcher
  description: '### *integer* **EXCEPTION_INVALID_PARAMS**'
- name: Mvc\Dispatcher::EXCEPTION_NO_DI
  id: api/phalcon_mvc_dispatcher#exception_no_di
  summary: null
  belongs_to: Mvc\Dispatcher
  description: '### *integer* **EXCEPTION_NO_DI**'
- name: Mvc\Dispatcher::getActiveController
  id: api/phalcon_mvc_dispatcher#getactivecontroller
  summary: Forwards the execution flow to another controller/action Dispatchers are unique per module
  belongs_to: Mvc\Dispatcher
  description: "### public **getActiveController** ()\n\nReturns the active controller in the dispatcher\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the internal event manager\n\n### public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action suffix\n\n### public **getActionSuffix** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the default action suffix\n\n### public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the module where the controller is (only informative)\n\n### public **getModuleName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the module where the controller class is\n\n### public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the namespace where the controller class is\n\n### public **getNamespaceName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a namespace to be prepended to the current handler name\n\n### public **setDefaultNamespace** (*mixed* $namespaceName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default namespace\n\n### public **getDefaultNamespace** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the default namespace\n\n### public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the default action name\n\n### public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the action name to be dispatched\n\n### public **getActionName** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets the latest dispatched action name\n\n### public **setParams** (*array* $params) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets action params to be dispatched\n\n### public **getParams** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets action params\n\n### public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet a param by its name or numeric index\n\n### public *mixed* **getParam** (*mixed* $param, \\[*string* \\| *array* $filters\\], \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets a param by its name or numeric index\n\n### public *boolean* **hasParam** (*mixed* $param) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if a param exists\n\n### public **getActiveMethod** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns the current method to be/executed in the dispatcher\n\n### public **isFinished** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nChecks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch\n\n### public **setReturnedValue** (*mixed* $value) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSets the latest returned value by an action manually\n\n### public *mixed* **getReturnedValue** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns value returned by the latest dispatched action\n\n### public **setModelBinding** (*mixed* $value, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable/Disable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n```\n\n### public **setModelBinder** ([*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \\[*mixed* $cache\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nEnable model binding during dispatch\n\n``` php\n$di->set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher->setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n```\n\n### public **getModelBinder** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nGets model binder\n\n### public *object* **dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### protected *object* **\\_dispatch** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nDispatches a handle action taking into account the routing parameters\n\n### public **forward** (*array* $forward) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nForwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed\n\n``` php\n$this->dispatcher->forward(\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n### public **wasForwarded** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nCheck if the current executed action was forwarded by another one\n\n### public **getHandlerClass** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nPossible class name that will be located to dispatch the request\n\n### public **callActionMethod** (*mixed* $handler, *mixed* $actionMethod, \\[*array* $params\\]) inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\n...\n\n### public **getBoundModels** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nReturns bound models from binder instance\n\n``` php\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this->dispatcher->getBoundModels(); // return array with $user\n    }\n}\n```\n\n### protected **\\_resolveEmptyProperties** () inherited from [*Phalcon\\Dispatcher*](phalcon_dispatcher)\n\nSet empty properties to their defaults (where defaults are available)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher.html)"
- name: Mvc\Dispatcher::getControllerClass
  id: api/phalcon_mvc_dispatcher#getcontrollerclass
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **getControllerClass** ()

    Possible controller class name that will be located to dispatch the request
- name: Mvc\Dispatcher::getControllerName
  id: api/phalcon_mvc_dispatcher#getcontrollername
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **getControllerName** ()

    Gets last dispatched controller name
- name: Mvc\Dispatcher::getLastController
  id: api/phalcon_mvc_dispatcher#getlastcontroller
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **getLastController** ()

    Returns the latest dispatched controller
- name: Mvc\Dispatcher::getPreviousActionName
  id: api/phalcon_mvc_dispatcher#getpreviousactionname
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **getPreviousActionName** ()

    Gets previous dispatched action name

    ### protected **\_throwDispatchException** (*mixed* $message, \[*mixed* $exceptionCode\])

    Throws an internal exception

    ### protected **\_handleException** ([Exception](http://php.net/manual/en/class.exception.php) $exception)

    Handles a user exception
- name: Mvc\Dispatcher::getPreviousControllerName
  id: api/phalcon_mvc_dispatcher#getpreviouscontrollername
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **getPreviousControllerName** ()

    Gets previous dispatched controller name
- name: Mvc\Dispatcher::getPreviousNamespaceName
  id: api/phalcon_mvc_dispatcher#getpreviousnamespacename
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **getPreviousNamespaceName** ()

    Gets previous dispatched namespace name
- name: Mvc\Dispatcher::setControllerName
  id: api/phalcon_mvc_dispatcher#setcontrollername
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **setControllerName** (*mixed* $controllerName)

    Sets the controller name to be dispatched
- name: Mvc\Dispatcher::setControllerSuffix
  id: api/phalcon_mvc_dispatcher#setcontrollersuffix
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **setControllerSuffix** (*mixed* $controllerSuffix)

    Sets the default controller suffix
- name: Mvc\Dispatcher::setDefaultController
  id: api/phalcon_mvc_dispatcher#setdefaultcontroller
  summary: null
  belongs_to: Mvc\Dispatcher
  description: |-
    ### public **setDefaultController** (*mixed* $controllerName)

    Sets the default controller name
- name: Mvc\DispatcherInterface
  id: api/phalcon_mvc_dispatcherinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\DispatcherInterface**\n\n*implements* [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/dispatcherinterface.zep)\n\n## Methods\n\n### abstract public **setControllerSuffix** (*mixed* $controllerSuffix)\n\n...\n\n### abstract public **setDefaultController** (*mixed* $controllerName)\n\n...\n\n### abstract public **setControllerName** (*mixed* $controllerName)\n\n...\n\n### abstract public **getControllerName** ()\n\n...\n\n### abstract public **getLastController** ()\n\n...\n\n### abstract public **getActiveController** ()\n\n...\n\n### abstract public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionSuffix** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultNamespace** (*mixed* $defaultNamespace) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionName** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParams** (*mixed* $params) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParams** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParam** (*mixed* $param, \\[*mixed* $filters\\]) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **hasParam** (*mixed* $param) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **isFinished** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getReturnedValue** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **dispatch** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **forward** (*mixed* $forward) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_DispatcherInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_DispatcherInterface.html)"
- name: Mvc\DispatcherInterface::getActiveController
  id: api/phalcon_mvc_dispatcherinterface#getactivecontroller
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\DispatcherInterface
  description: "### abstract public **getActiveController** ()\n\n...\n\n### abstract public **setActionSuffix** (*mixed* $actionSuffix) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionSuffix** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultNamespace** (*mixed* $defaultNamespace) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setNamespaceName** (*mixed* $namespaceName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setModuleName** (*mixed* $moduleName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setActionName** (*mixed* $actionName) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getActionName** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParams** (*mixed* $params) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParams** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **setParam** (*mixed* $param, *mixed* $value) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getParam** (*mixed* $param, \\[*mixed* $filters\\]) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **hasParam** (*mixed* $param) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **isFinished** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **getReturnedValue** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **dispatch** () inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n### abstract public **forward** (*mixed* $forward) inherited from [*Phalcon\\DispatcherInterface*](phalcon_dispatcherinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_DispatcherInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_DispatcherInterface.html)"
- name: Mvc\DispatcherInterface::getControllerName
  id: api/phalcon_mvc_dispatcherinterface#getcontrollername
  summary: null
  belongs_to: Mvc\DispatcherInterface
  description: |-
    ### abstract public **getControllerName** ()

    ...
- name: Mvc\DispatcherInterface::getLastController
  id: api/phalcon_mvc_dispatcherinterface#getlastcontroller
  summary: null
  belongs_to: Mvc\DispatcherInterface
  description: |-
    ### abstract public **getLastController** ()

    ...
- name: Mvc\DispatcherInterface::setControllerName
  id: api/phalcon_mvc_dispatcherinterface#setcontrollername
  summary: null
  belongs_to: Mvc\DispatcherInterface
  description: |-
    ### abstract public **setControllerName** (*mixed* $controllerName)

    ...
- name: Mvc\DispatcherInterface::setControllerSuffix
  id: api/phalcon_mvc_dispatcherinterface#setcontrollersuffix
  summary: null
  belongs_to: Mvc\DispatcherInterface
  description: |-
    ### abstract public **setControllerSuffix** (*mixed* $controllerSuffix)

    ...
- name: Mvc\DispatcherInterface::setDefaultController
  id: api/phalcon_mvc_dispatcherinterface#setdefaultcontroller
  summary: null
  belongs_to: Mvc\DispatcherInterface
  description: |-
    ### abstract public **setDefaultController** (*mixed* $controllerName)

    ...
- name: Mvc\Dispatcher\Exception
  id: api/phalcon_mvc_dispatcher_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Dispatcher\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/dispatcher/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher_Exception.html)"
- name: Mvc\EntityInterface
  id: api/phalcon_mvc_entityinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\EntityInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/entityinterface.zep)\n\n## Methods\n\n### abstract public **readAttribute** (*mixed* $attribute)\n\n...\n\n### abstract public **writeAttribute** (*mixed* $attribute, *mixed* $value)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_EntityInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_EntityInterface.html)"
- name: Mvc\EntityInterface::readAttribute
  id: api/phalcon_mvc_entityinterface#readattribute
  summary: null
  belongs_to: Mvc\EntityInterface
  description: |-
    ### abstract public **readAttribute** (*mixed* $attribute)

    ...
- name: Mvc\EntityInterface::writeAttribute
  id: api/phalcon_mvc_entityinterface#writeattribute
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\EntityInterface
  description: "### abstract public **writeAttribute** (*mixed* $attribute, *mixed* $value)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_EntityInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_EntityInterface.html)"
- name: Mvc\Micro
  id: api/phalcon_mvc_micro
  summary: With Phalcon you can create “Micro-Framework like” applications
  description: "# Class **Phalcon\\Mvc\\Micro**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro.zep)\n\nWith Phalcon you can create “Micro-Framework like” applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to small applications, APIs and prototypes in a practical way.\n\n``` php\n$app = new \\Phalcon\\Mvc\\Micro();\n\n$app->get(\n    \"/say/welcome/{name}\",\n    function ($name) {\n        echo \"<h1>Welcome $name!</h1>\";\n    }\n);\n\n$app->handle();\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\nPhalcon\\Mvc\\Micro constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **map** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler without any HTTP method constraint\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **get** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler that only matches if the HTTP method is GET\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **post** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler that only matches if the HTTP method is POST\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **put** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler that only matches if the HTTP method is PUT\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **patch** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler that only matches if the HTTP method is PATCH\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **head** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler that only matches if the HTTP method is HEAD\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **delete** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler that only matches if the HTTP method is DELETE\n\n### public [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface) **options** (*string* $routePattern, *callable* $handler)\n\nMaps a route to a handler that only matches if the HTTP method is OPTIONS\n\n### public **mount** ([*Phalcon\\Mvc\\Micro\\CollectionInterface*](phalcon_mvc_micro_collectioninterface) $collection)\n\nMounts a collection of handlers\n\n### public [*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) **notFound** (*callable* $handler)\n\nSets a handler that will be called when the router doesn’t match any of the defined routes\n\n### public [*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) **error** (*callable* $handler)\n\nSets a handler that will be called when an exception is thrown handling the route\n\n### public **getRouter** ()\n\nReturns the internal router used by the application\n\n### public [*Phalcon\\Di\\ServiceInterface*](phalcon_di_serviceinterface) **setService** (*string* $serviceName, *mixed* $definition, \\[*boolean* $shared\\])\n\nSets a service from the DI\n\n### public **hasService** (*mixed* $serviceName)\n\nChecks if a service is registered in the DI\n\n### public *object* **getService** (*string* $serviceName)\n\nObtains a service from the DI\n\n### public *mixed* **getSharedService** (*string* $serviceName)\n\nObtains a shared service from the DI\n\n### public *mixed* **handle** (\\[*string* $uri\\])\n\nHandle the whole request\n\n### public **stop** ()\n\nStops the middleware execution avoiding than other middlewares be executed\n\n### public **setActiveHandler** (*callable* $activeHandler)\n\nSets externally the handler that must be called by the matched route\n\n### public *callable* **getActiveHandler** ()\n\nReturn the handler that will be called for the matched route\n\n### public *mixed* **getReturnedValue** ()\n\nReturns the value returned by the executed handler\n\n### public *boolean* **offsetExists** (*string* $alias)\n\nCheck if a service is registered in the internal services container using the array syntax\n\n### public **offsetSet** (*string* $alias, *mixed* $definition)\n\nAllows to register a shared service in the internal services container using the array syntax\n\n``` php\n$app[\"request\"] = new \\Phalcon\\Http\\Request();\n```\n\n### public *mixed* **offsetGet** (*string* $alias)\n\nAllows to obtain a shared service in the internal services container using the array syntax\n\n``` php\nvar_dump(\n    $app[\"request\"]\n);\n```\n\n### public **offsetUnset** (*string* $alias)\n\nRemoves a service from the internal services container using the array syntax\n\n### public [*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) **before** (*callable* $handler)\n\nAppends a before middleware to be called before execute the route\n\n### public [*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) **afterBinding** (*callable* $handler)\n\nAppends a afterBinding middleware to be called after model binding\n\n### public [*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) **after** (*callable* $handler)\n\nAppends an ‘after’ middleware to be called after execute the route\n\n### public [*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) **finish** (*callable* $handler)\n\nAppends a ‘finish’ middleware to be called when the request is finished\n\n### public **getHandlers** ()\n\nReturns the internal handlers attached to the application\n\n### public **getModelBinder** ()\n\nGets model binder\n\n### public **setModelBinder** ([*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \\[*mixed* $cache\\])\n\nSets model binder\n\n``` php\n$micro = new Micro($di);\n$micro->setModelBinder(new Binder(), 'cache');\n```\n\n### public **getBoundModels** ()\n\nReturns bound models from binder instance\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro.html)"
- name: Mvc\Micro::after
  id: api/phalcon_mvc_micro#after
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Micro*](phalcon_mvc_micro) **after** (*callable* $handler)

    Appends an ‘after’ middleware to be called after execute the route
- name: Mvc\Micro::afterBinding
  id: api/phalcon_mvc_micro#afterbinding
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Micro*](phalcon_mvc_micro) **afterBinding** (*callable* $handler)

    Appends a afterBinding middleware to be called after model binding
- name: Mvc\Micro::before
  id: api/phalcon_mvc_micro#before
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Micro*](phalcon_mvc_micro) **before** (*callable* $handler)

    Appends a before middleware to be called before execute the route
- name: Mvc\Micro::delete
  id: api/phalcon_mvc_micro#delete
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **delete** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler that only matches if the HTTP method is DELETE
- name: Mvc\Micro::error
  id: api/phalcon_mvc_micro#error
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Micro*](phalcon_mvc_micro) **error** (*callable* $handler)

    Sets a handler that will be called when an exception is thrown handling the route
- name: Mvc\Micro::finish
  id: api/phalcon_mvc_micro#finish
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Micro*](phalcon_mvc_micro) **finish** (*callable* $handler)

    Appends a ‘finish’ middleware to be called when the request is finished
- name: Mvc\Micro::get
  id: api/phalcon_mvc_micro#get
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **get** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler that only matches if the HTTP method is GET
- name: Mvc\Micro::getActiveHandler
  id: api/phalcon_mvc_micro#getactivehandler
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public *callable* **getActiveHandler** ()

    Return the handler that will be called for the matched route
- name: Mvc\Micro::getBoundModels
  id: api/phalcon_mvc_micro#getboundmodels
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Micro
  description: "### public **getBoundModels** ()\n\nReturns bound models from binder instance\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro.html)"
- name: Mvc\Micro::getHandlers
  id: api/phalcon_mvc_micro#gethandlers
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **getHandlers** ()

    Returns the internal handlers attached to the application
- name: Mvc\Micro::getModelBinder
  id: api/phalcon_mvc_micro#getmodelbinder
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **getModelBinder** ()

    Gets model binder
- name: Mvc\Micro::getReturnedValue
  id: api/phalcon_mvc_micro#getreturnedvalue
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public *mixed* **getReturnedValue** ()

    Returns the value returned by the executed handler
- name: Mvc\Micro::getRouter
  id: api/phalcon_mvc_micro#getrouter
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **getRouter** ()

    Returns the internal router used by the application
- name: Mvc\Micro::getService
  id: api/phalcon_mvc_micro#getservice
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public *object* **getService** (*string* $serviceName)

    Obtains a service from the DI
- name: Mvc\Micro::getSharedService
  id: api/phalcon_mvc_micro#getsharedservice
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public *mixed* **getSharedService** (*string* $serviceName)

    Obtains a shared service from the DI
- name: Mvc\Micro::handle
  id: api/phalcon_mvc_micro#handle
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public *mixed* **handle** (\[*string* $uri\])

    Handle the whole request
- name: Mvc\Micro::hasService
  id: api/phalcon_mvc_micro#hasservice
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **hasService** (*mixed* $serviceName)

    Checks if a service is registered in the DI
- name: Mvc\Micro::head
  id: api/phalcon_mvc_micro#head
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **head** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler that only matches if the HTTP method is HEAD
- name: Mvc\Micro::map
  id: api/phalcon_mvc_micro#map
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **map** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler without any HTTP method constraint
- name: Mvc\Micro::mount
  id: api/phalcon_mvc_micro#mount
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **mount** ([*Phalcon\Mvc\Micro\CollectionInterface*](phalcon_mvc_micro_collectioninterface) $collection)

    Mounts a collection of handlers
- name: Mvc\Micro::notFound
  id: api/phalcon_mvc_micro#notfound
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Micro*](phalcon_mvc_micro) **notFound** (*callable* $handler)

    Sets a handler that will be called when the router doesn’t match any of the defined routes
- name: Mvc\Micro::offsetExists
  id: api/phalcon_mvc_micro#offsetexists
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public *boolean* **offsetExists** (*string* $alias)

    Check if a service is registered in the internal services container using the array syntax
- name: Mvc\Micro::offsetGet
  id: api/phalcon_mvc_micro#offsetget
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public *mixed* **offsetGet** (*string* $alias)

    Allows to obtain a shared service in the internal services container using the array syntax

    ``` php
    var_dump(
        $app["request"]
    );
    ```
- name: Mvc\Micro::offsetSet
  id: api/phalcon_mvc_micro#offsetset
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **offsetSet** (*string* $alias, *mixed* $definition)

    Allows to register a shared service in the internal services container using the array syntax

    ``` php
    $app["request"] = new \Phalcon\Http\Request();
    ```
- name: Mvc\Micro::offsetUnset
  id: api/phalcon_mvc_micro#offsetunset
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **offsetUnset** (*string* $alias)

    Removes a service from the internal services container using the array syntax
- name: Mvc\Micro::options
  id: api/phalcon_mvc_micro#options
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **options** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler that only matches if the HTTP method is OPTIONS
- name: Mvc\Micro::patch
  id: api/phalcon_mvc_micro#patch
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **patch** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler that only matches if the HTTP method is PATCH
- name: Mvc\Micro::post
  id: api/phalcon_mvc_micro#post
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **post** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler that only matches if the HTTP method is POST
- name: Mvc\Micro::put
  id: api/phalcon_mvc_micro#put
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Mvc\Router\RouteInterface*](phalcon_mvc_router_routeinterface) **put** (*string* $routePattern, *callable* $handler)

    Maps a route to a handler that only matches if the HTTP method is PUT
- name: Mvc\Micro::setActiveHandler
  id: api/phalcon_mvc_micro#setactivehandler
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **setActiveHandler** (*callable* $activeHandler)

    Sets externally the handler that must be called by the matched route
- name: Mvc\Micro::setDI
  id: api/phalcon_mvc_micro#setdi
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Mvc\Micro::setModelBinder
  id: api/phalcon_mvc_micro#setmodelbinder
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **setModelBinder** ([*Phalcon\Mvc\Model\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder, \[*mixed* $cache\])

    Sets model binder

    ``` php
    $micro = new Micro($di);
    $micro->setModelBinder(new Binder(), 'cache');
    ```
- name: Mvc\Micro::setService
  id: api/phalcon_mvc_micro#setservice
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public [*Phalcon\Di\ServiceInterface*](phalcon_di_serviceinterface) **setService** (*string* $serviceName, *mixed* $definition, \[*boolean* $shared\])

    Sets a service from the DI
- name: Mvc\Micro::stop
  id: api/phalcon_mvc_micro#stop
  summary: null
  belongs_to: Mvc\Micro
  description: |-
    ### public **stop** ()

    Stops the middleware execution avoiding than other middlewares be executed
- name: Mvc\Micro\Collection
  id: api/phalcon_mvc_micro_collection
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Micro\\Collection**\n\n*implements* [*Phalcon\\Mvc\\Micro\\CollectionInterface*](phalcon_mvc_micro_collectioninterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/collection.zep)\n\nGroups Micro-Mvc handlers as controllers\n\n``` php\n$app = new \\Phalcon\\Mvc\\Micro();\n\n$collection = new Collection();\n\n$collection->setHandler(\n    new PostsController()\n);\n\n$collection->get(\"/posts/edit/{id}\", \"edit\");\n\n$app->mount($collection);\n```\n\n## Methods\n\n### protected **\\_addMap** (*string* \\| *array* $method, *string* $routePattern, *mixed* $handler, *string* $name)\n\nInternal function to add a handler to the group\n\n### public **setPrefix** (*mixed* $prefix)\n\nSets a prefix for all routes added to the collection\n\n### public **getPrefix** ()\n\nReturns the collection prefix if any\n\n### public *array* **getHandlers** ()\n\nReturns the registered handlers\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **setHandler** (*mixed* $handler, \\[*boolean* $lazy\\])\n\nSets the main handler\n\n### public **setLazy** (*mixed* $lazy)\n\nSets if the main handler must be lazy loaded\n\n### public **isLazy** ()\n\nReturns if the main handler must be lazy loaded\n\n### public *mixed* **getHandler** ()\n\nReturns the main handler\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **map** (*string* $routePattern, *callable* $handler, \\[*string* $name\\])\n\nMaps a route to a handler\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **get** (*string* $routePattern, *callable* $handler, \\[*string* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is GET\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **post** (*string* $routePattern, *callable* $handler, \\[*string* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is POST\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **put** (*string* $routePattern, *callable* $handler, \\[*string* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is PUT\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **patch** (*string* $routePattern, *callable* $handler, \\[*string* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is PATCH\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **head** (*string* $routePattern, *callable* $handler, \\[*string* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is HEAD\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **delete** (*string* $routePattern, *callable* $handler, \\[*string* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is DELETE\n\n### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **options** (*string* $routePattern, *callable* $handler, \\[*mixed* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is OPTIONS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Collection.html)"
- name: Mvc\Micro\Collection::delete
  id: api/phalcon_mvc_micro_collection#delete
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **delete** (*string* $routePattern, *callable* $handler, \[*string* $name\])

    Maps a route to a handler that only matches if the HTTP method is DELETE
- name: Mvc\Micro\Collection::get
  id: api/phalcon_mvc_micro_collection#get
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **get** (*string* $routePattern, *callable* $handler, \[*string* $name\])

    Maps a route to a handler that only matches if the HTTP method is GET
- name: Mvc\Micro\Collection::getHandler
  id: api/phalcon_mvc_micro_collection#gethandler
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public *mixed* **getHandler** ()

    Returns the main handler
- name: Mvc\Micro\Collection::getHandlers
  id: api/phalcon_mvc_micro_collection#gethandlers
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public *array* **getHandlers** ()

    Returns the registered handlers
- name: Mvc\Micro\Collection::getPrefix
  id: api/phalcon_mvc_micro_collection#getprefix
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public **getPrefix** ()

    Returns the collection prefix if any
- name: Mvc\Micro\Collection::head
  id: api/phalcon_mvc_micro_collection#head
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **head** (*string* $routePattern, *callable* $handler, \[*string* $name\])

    Maps a route to a handler that only matches if the HTTP method is HEAD
- name: Mvc\Micro\Collection::isLazy
  id: api/phalcon_mvc_micro_collection#islazy
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public **isLazy** ()

    Returns if the main handler must be lazy loaded
- name: Mvc\Micro\Collection::map
  id: api/phalcon_mvc_micro_collection#map
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **map** (*string* $routePattern, *callable* $handler, \[*string* $name\])

    Maps a route to a handler
- name: Mvc\Micro\Collection::options
  id: api/phalcon_mvc_micro_collection#options
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Micro\Collection
  description: "### public [*Phalcon\\Mvc\\Micro\\Collection*](phalcon_mvc_micro_collection) **options** (*string* $routePattern, *callable* $handler, \\[*mixed* $name\\])\n\nMaps a route to a handler that only matches if the HTTP method is OPTIONS\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Collection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Collection.html)"
- name: Mvc\Micro\Collection::patch
  id: api/phalcon_mvc_micro_collection#patch
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **patch** (*string* $routePattern, *callable* $handler, \[*string* $name\])

    Maps a route to a handler that only matches if the HTTP method is PATCH
- name: Mvc\Micro\Collection::post
  id: api/phalcon_mvc_micro_collection#post
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **post** (*string* $routePattern, *callable* $handler, \[*string* $name\])

    Maps a route to a handler that only matches if the HTTP method is POST
- name: Mvc\Micro\Collection::put
  id: api/phalcon_mvc_micro_collection#put
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **put** (*string* $routePattern, *callable* $handler, \[*string* $name\])

    Maps a route to a handler that only matches if the HTTP method is PUT
- name: Mvc\Micro\Collection::setHandler
  id: api/phalcon_mvc_micro_collection#sethandler
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public [*Phalcon\Mvc\Micro\Collection*](phalcon_mvc_micro_collection) **setHandler** (*mixed* $handler, \[*boolean* $lazy\])

    Sets the main handler
- name: Mvc\Micro\Collection::setLazy
  id: api/phalcon_mvc_micro_collection#setlazy
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public **setLazy** (*mixed* $lazy)

    Sets if the main handler must be lazy loaded
- name: Mvc\Micro\Collection::setPrefix
  id: api/phalcon_mvc_micro_collection#setprefix
  summary: null
  belongs_to: Mvc\Micro\Collection
  description: |-
    ### public **setPrefix** (*mixed* $prefix)

    Sets a prefix for all routes added to the collection
- name: Mvc\Micro\CollectionInterface
  id: api/phalcon_mvc_micro_collectioninterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Micro\\CollectionInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/collectioninterface.zep)\n\n## Methods\n\n### abstract public **setPrefix** (*mixed* $prefix)\n\n...\n\n### abstract public **getPrefix** ()\n\n...\n\n### abstract public **getHandlers** ()\n\n...\n\n### abstract public **setHandler** (*mixed* $handler, \\[*mixed* $lazy\\])\n\n...\n\n### abstract public **setLazy** (*mixed* $lazy)\n\n...\n\n### abstract public **isLazy** ()\n\n...\n\n### abstract public **getHandler** ()\n\n...\n\n### abstract public **map** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n### abstract public **get** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n### abstract public **post** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n### abstract public **put** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n### abstract public **patch** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n### abstract public **head** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n### abstract public **delete** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n### abstract public **options** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_CollectionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_CollectionInterface.html)"
- name: Mvc\Micro\CollectionInterface::delete
  id: api/phalcon_mvc_micro_collectioninterface#delete
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **delete** (*mixed* $routePattern, *mixed* $handler, \[*mixed* $name\])

    ...
- name: Mvc\Micro\CollectionInterface::get
  id: api/phalcon_mvc_micro_collectioninterface#get
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **get** (*mixed* $routePattern, *mixed* $handler, \[*mixed* $name\])

    ...
- name: Mvc\Micro\CollectionInterface::getHandler
  id: api/phalcon_mvc_micro_collectioninterface#gethandler
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **getHandler** ()

    ...
- name: Mvc\Micro\CollectionInterface::getHandlers
  id: api/phalcon_mvc_micro_collectioninterface#gethandlers
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **getHandlers** ()

    ...
- name: Mvc\Micro\CollectionInterface::getPrefix
  id: api/phalcon_mvc_micro_collectioninterface#getprefix
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **getPrefix** ()

    ...
- name: Mvc\Micro\CollectionInterface::head
  id: api/phalcon_mvc_micro_collectioninterface#head
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **head** (*mixed* $routePattern, *mixed* $handler, \[*mixed* $name\])

    ...
- name: Mvc\Micro\CollectionInterface::isLazy
  id: api/phalcon_mvc_micro_collectioninterface#islazy
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **isLazy** ()

    ...
- name: Mvc\Micro\CollectionInterface::map
  id: api/phalcon_mvc_micro_collectioninterface#map
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **map** (*mixed* $routePattern, *mixed* $handler, \[*mixed* $name\])

    ...
- name: Mvc\Micro\CollectionInterface::options
  id: api/phalcon_mvc_micro_collectioninterface#options
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Micro\CollectionInterface
  description: "### abstract public **options** (*mixed* $routePattern, *mixed* $handler, \\[*mixed* $name\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_CollectionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_CollectionInterface.html)"
- name: Mvc\Micro\CollectionInterface::patch
  id: api/phalcon_mvc_micro_collectioninterface#patch
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **patch** (*mixed* $routePattern, *mixed* $handler, \[*mixed* $name\])

    ...
- name: Mvc\Micro\CollectionInterface::post
  id: api/phalcon_mvc_micro_collectioninterface#post
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **post** (*mixed* $routePattern, *mixed* $handler, \[*mixed* $name\])

    ...
- name: Mvc\Micro\CollectionInterface::put
  id: api/phalcon_mvc_micro_collectioninterface#put
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **put** (*mixed* $routePattern, *mixed* $handler, \[*mixed* $name\])

    ...
- name: Mvc\Micro\CollectionInterface::setHandler
  id: api/phalcon_mvc_micro_collectioninterface#sethandler
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **setHandler** (*mixed* $handler, \[*mixed* $lazy\])

    ...
- name: Mvc\Micro\CollectionInterface::setLazy
  id: api/phalcon_mvc_micro_collectioninterface#setlazy
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **setLazy** (*mixed* $lazy)

    ...
- name: Mvc\Micro\CollectionInterface::setPrefix
  id: api/phalcon_mvc_micro_collectioninterface#setprefix
  summary: null
  belongs_to: Mvc\Micro\CollectionInterface
  description: |-
    ### abstract public **setPrefix** (*mixed* $prefix)

    ...
- name: Mvc\Micro\Exception
  id: api/phalcon_mvc_micro_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Micro\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Exception.html)"
- name: Mvc\Micro\LazyLoader
  id: api/phalcon_mvc_micro_lazyloader
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Micro\\LazyLoader**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/lazyloader.zep)\n\nLazy-Load of handlers for Mvc\\Micro using auto-loading\n\n## Methods\n\n### public **getDefinition** ()\n\n...\n\n### public **\\_\\_construct** (*mixed* $definition)\n\nPhalcon\\Mvc\\Micro\\LazyLoader constructor\n\n### public *mixed* **\\_\\_call** (*string* $method, *array* $arguments)\n\nInitializes the internal handler, calling functions on it\n\n### public *mixed* **callMethod** (*string* $method, *array* $arguments, \\[[*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder\\])\n\nCalling \\_\\_call method\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_LazyLoader.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_LazyLoader.html)"
- name: Mvc\Micro\LazyLoader::callMethod
  id: api/phalcon_mvc_micro_lazyloader#callmethod
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Micro\LazyLoader
  description: "### public *mixed* **callMethod** (*string* $method, *array* $arguments, \\[[*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface) $modelBinder\\])\n\nCalling \\_\\_call method\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_LazyLoader.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_LazyLoader.html)"
- name: Mvc\Micro\LazyLoader::getDefinition
  id: api/phalcon_mvc_micro_lazyloader#getdefinition
  summary: null
  belongs_to: Mvc\Micro\LazyLoader
  description: |-
    ### public **getDefinition** ()

    ...

    ### public **\_\_construct** (*mixed* $definition)

    Phalcon\Mvc\Micro\LazyLoader constructor
- name: Mvc\Micro\LazyLoader::__call
  id: api/phalcon_mvc_micro_lazyloader#__call
  summary: null
  belongs_to: Mvc\Micro\LazyLoader
  description: |-
    ### public *mixed* **\_\_call** (*string* $method, *array* $arguments)

    Initializes the internal handler, calling functions on it
- name: Mvc\Micro\MiddlewareInterface
  id: api/phalcon_mvc_micro_middlewareinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Micro\\MiddlewareInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/middlewareinterface.zep)\n\n## Methods\n\n### abstract public **call** ([*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) $application)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_MiddlewareInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_MiddlewareInterface.html)"
- name: Mvc\Micro\MiddlewareInterface::call
  id: api/phalcon_mvc_micro_middlewareinterface#call
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Micro\MiddlewareInterface
  description: "### abstract public **call** ([*Phalcon\\Mvc\\Micro*](phalcon_mvc_micro) $application)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_MiddlewareInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_MiddlewareInterface.html)"
- name: Mvc\Model
  id: api/phalcon_mvc_model
  summary: Phalcon\Mvc\Model connects business objects and database tables to create a persistable domain model where logic and data are presented in one wrapping
  description: "# Abstract class **Phalcon\\Mvc\\Model**\n\n*implements* [*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface), [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface), [*Phalcon\\Mvc\\Model\\ResultInterface*](phalcon_mvc_model_resultinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [Serializable](http://php.net/manual/en/class.serializable.php), [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model.zep)\n\nPhalcon\\Mvc\\Model connects business objects and database tables to create a persistable domain model where logic and data are presented in one wrapping. It‘s an implementation of the object-relational mapping (ORM).\n\nA model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models.\n\nPhalcon\\Mvc\\Model is the first ORM written in Zephir/C languages for PHP, giving to developers high performance when interacting with databases while is also easy to use.\n\n``` php\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\nif ($robot->save() === false) {\n    echo \"Umh, We can store robots: \";\n\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n```\n\n## Constants\n\n### *integer* **OP_NONE**\n\n### *integer* **OP_CREATE**\n\n### *integer* **OP_UPDATE**\n\n### *integer* **OP_DELETE**\n\n### *integer* **DIRTY_STATE_PERSISTENT**\n\n### *integer* **DIRTY_STATE_TRANSIENT**\n\n### *integer* **DIRTY_STATE_DETACHED**\n\n## Methods\n\n### final public **\\_\\_construct** (\\[*mixed* $data\\], \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\], \\[[*Phalcon\\Mvc\\Model\\ManagerInterface*](phalcon_mvc_model_managerinterface) $modelsManager\\])\n\nPhalcon\\Mvc\\Model constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injection container\n\n### public **getDI** ()\n\nReturns the dependency injection container\n\n### protected **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets a custom events manager\n\n### protected **getEventsManager** ()\n\nReturns the custom events manager\n\n### public **getModelsMetaData** ()\n\nReturns the models meta-data service related to the entity instance\n\n### public **getModelsManager** ()\n\nReturns the models manager related to the entity instance\n\n### public **setTransaction** ([*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)\n\nSets a transaction related to the Model instance\n\n``` php\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\n\ntry {\n    $txManager = new TxManager();\n\n    $transaction = $txManager->get();\n\n    $robot = new Robots();\n\n    $robot->setTransaction($transaction);\n\n    $robot->name       = \"WALL·E\";\n    $robot->created_at = date(\"Y-m-d\");\n\n    if ($robot->save() === false) {\n        $transaction->rollback(\"Can't save robot\");\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart->setTransaction($transaction);\n\n    $robotPart->type = \"head\";\n\n    if ($robotPart->save() === false) {\n        $transaction->rollback(\"Robot part cannot be saved\");\n    }\n\n    $transaction->commit();\n} catch (TxFailed $e) {\n    echo \"Failed, reason: \", $e->getMessage();\n}\n```\n\n### protected **setSource** (*mixed* $source)\n\nSets the table name to which model should be mapped\n\n### public **getSource** ()\n\nReturns the table name mapped in the model\n\n### protected **setSchema** (*mixed* $schema)\n\nSets schema name where the mapped table is located\n\n### public **getSchema** ()\n\nReturns schema name where the mapped table is located\n\n### public **setConnectionService** (*mixed* $connectionService)\n\nSets the DependencyInjection connection service name\n\n### public **setReadConnectionService** (*mixed* $connectionService)\n\nSets the DependencyInjection connection service name used to read data\n\n### public **setWriteConnectionService** (*mixed* $connectionService)\n\nSets the DependencyInjection connection service name used to write data\n\n### public **getReadConnectionService** ()\n\nReturns the DependencyInjection connection service name used to read data related the model\n\n### public **getWriteConnectionService** ()\n\nReturns the DependencyInjection connection service name used to write data related to the model\n\n### public **setDirtyState** (*mixed* $dirtyState)\n\nSets the dirty state of the object using one of the DIRTY_STATE\\_\\* constants\n\n### public **getDirtyState** ()\n\nReturns one of the DIRTY_STATE\\_\\* constants telling if the record exists in the database or not\n\n### public **getReadConnection** ()\n\nGets the connection used to read data for the model\n\n### public **getWriteConnection** ()\n\nGets the connection used to write data to the model\n\n### public [*Phalcon\\Mvc\\Model*](phalcon_mvc_model) **assign** (*array* $data, \\[*mixed* $dataColumnMap\\], \\[*array* $whiteList\\])\n\nAssigns values to a model from an array\n\n``` php\n$robot->assign(\n    [\n        \"type\" => \"mechanical\",\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n\n// Assign by db row, column map needed\n$robot->assign(\n    $dbRow,\n    [\n        \"db_type\" => \"type\",\n        \"db_name\" => \"name\",\n        \"db_year\" => \"year\",\n    ]\n);\n\n// Allow assign only name and year\n$robot->assign(\n    $_POST,\n    null,\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n```\n\n### public static **cloneResultMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) \\| [*Phalcon\\Mvc\\Model\\Row*](phalcon_mvc_model_row) $base, *array* $data, *array* $columnMap, \\[*int* $dirtyState\\], \\[*boolean* $keepSnapshots\\])\n\nAssigns values to a model from an array, returning a new model.\n\n``` php\n$robot = \\Phalcon\\Mvc\\Model::cloneResultMap(\n    new Robots(),\n    [\n        \"type\" => \"mechanical\",\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n```\n\n### public static *mixed* **cloneResultMapHydrate** (*array* $data, *array* $columnMap, *int* $hydrationMode)\n\nReturns an hydrated result based on the data and the column map\n\n### public static [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) **cloneResult** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $base, *array* $data, \\[*int* $dirtyState\\])\n\nAssigns values to a model from an array returning a new model\n\n``` php\n$robot = Phalcon\\Mvc\\Model::cloneResult(\n    new Robots(),\n    [\n        \"type\" => \"mechanical\",\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n```\n\n### public static **find** (\\[*mixed* $parameters\\])\n\nQuery for a set of records that match the specified conditions\n\n``` php\n// How many robots are there?\n$robots = Robots::find();\n\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    \"type = 'mechanical'\"\n);\n\necho \"There are \", count($robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n    ]\n);\n\nforeach ($robots as $robot) {\n echo $robot->name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n        \"limit\" => 100,\n    ]\n);\n\nforeach ($robots as $robot) {\n echo $robot->name, \"\\n\";\n}\n```\n\n### public static *static* **findFirst** (\\[*string* \\| *array* $parameters\\])\n\nQuery the first record that matches the specified conditions\n\n``` php\n// What's the first robot in robots table?\n$robot = Robots::findFirst();\n\necho \"The robot name is \", $robot->name;\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\n    \"type = 'mechanical'\"\n);\n\necho \"The first mechanical robot name is \", $robot->name;\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n    ]\n);\n\necho \"The first virtual robot name is \", $robot->name;\n```\n\n### public static **query** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\nCreate a criteria for a specific model\n\n### protected *boolean* **\\_exists** ([*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface) $connection, \\[*string* \\| *array* $table\\])\n\nChecks whether the current record already exists\n\n### protected static [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface) **\\_groupResult** (*mixed* $functionName, *string* $alias, *array* $parameters)\n\nGenerate a PHQL SELECT statement for an aggregate\n\n### public static *mixed* **count** (\\[*array* $parameters\\])\n\nCounts how many records match the specified conditions\n\n``` php\n// How many robots are there?\n$number = Robots::count();\n\necho \"There are \", $number, \"\\n\";\n\n// How many mechanical robots are there?\n$number = Robots::count(\"type = 'mechanical'\");\n\necho \"There are \", $number, \" mechanical robots\\n\";\n```\n\n### public static *mixed* **sum** (\\[*array* $parameters\\])\n\nCalculates the sum on a column for a result-set of rows that match the specified conditions\n\n``` php\n// How much are all robots?\n$sum = Robots::sum(\n    [\n        \"column\" => \"price\",\n    ]\n);\n\necho \"The total price of robots is \", $sum, \"\\n\";\n\n// How much are mechanical robots?\n$sum = Robots::sum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" => \"price\",\n    ]\n);\n\necho \"The total price of mechanical robots is  \", $sum, \"\\n\";\n```\n\n### public static *mixed* **maximum** (\\[*array* $parameters\\])\n\nReturns the maximum value of a column for a result-set of rows that match the specified conditions\n\n``` php\n// What is the maximum robot id?\n$id = Robots::maximum(\n    [\n        \"column\" => \"id\",\n    ]\n);\n\necho \"The maximum robot id is: \", $id, \"\\n\";\n\n// What is the maximum id of mechanical robots?\n$sum = Robots::maximum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" => \"id\",\n    ]\n);\n\necho \"The maximum robot id of mechanical robots is \", $id, \"\\n\";\n```\n\n### public static *mixed* **minimum** (\\[*array* $parameters\\])\n\nReturns the minimum value of a column for a result-set of rows that match the specified conditions\n\n``` php\n// What is the minimum robot id?\n$id = Robots::minimum(\n    [\n        \"column\" => \"id\",\n    ]\n);\n\necho \"The minimum robot id is: \", $id;\n\n// What is the minimum id of mechanical robots?\n$sum = Robots::minimum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" => \"id\",\n    ]\n);\n\necho \"The minimum robot id of mechanical robots is \", $id;\n```\n\n### public static *double* **average** (\\[*array* $parameters\\])\n\nReturns the average value on a column for a result-set of rows matching the specified conditions\n\n``` php\n// What's the average price of robots?\n$average = Robots::average(\n    [\n        \"column\" => \"price\",\n    ]\n);\n\necho \"The average price is \", $average, \"\\n\";\n\n// What's the average price of mechanical robots?\n$average = Robots::average(\n    [\n        \"type = 'mechanical'\",\n        \"column\" => \"price\",\n    ]\n);\n\necho \"The average price of mechanical robots is \", $average, \"\\n\";\n```\n\n### public **fireEvent** (*mixed* $eventName)\n\nFires an event, implicitly calls behaviors and listeners in the events manager are notified\n\n### public **fireEventCancel** (*mixed* $eventName)\n\nFires an event, implicitly calls behaviors and listeners in the events manager are notified This method stops if one of the callbacks/listeners returns boolean false\n\n### protected **\\_cancelOperation** ()\n\nCancel the current operation\n\n### public **appendMessage** ([*Phalcon\\Mvc\\Model\\MessageInterface*](phalcon_mvc_model_messageinterface) $message)\n\nAppends a customized message on the validation process\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message as Message;\n\nclass Robots extends Model\n{\n    public function beforeSave()\n    {\n        if ($this->name === \"Peter\") {\n            $message = new Message(\n                \"Sorry, but a robot cannot be named Peter\"\n            );\n\n            $this->appendMessage($message);\n        }\n    }\n}\n```\n\n### protected **validate** ([*Phalcon\\ValidationInterface*](phalcon_validationinterface) $validator)\n\nExecutes validators on every validation call\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Subscriptors extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator->add(\n            \"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" => [\n                        \"A\",\n                        \"I\",\n                    ],\n                ]\n            )\n        );\n\n        return $this->validate($validator);\n    }\n}\n```\n\n### public **validationHasFailed** ()\n\nCheck whether validation process has generated any messages\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Subscriptors extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator->validate(\n            \"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" => [\n                        \"A\",\n                        \"I\",\n                    ],\n                ]\n            )\n        );\n\n        return $this->validate($validator);\n    }\n}\n```\n\n### public **getMessages** (\\[*mixed* $filter\\])\n\nReturns array of validation messages\n\n``` php\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\nif ($robot->save() === false) {\n    echo \"Umh, We can't store robots right now \";\n\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n```\n\n### final protected **\\_checkForeignKeysRestrict** ()\n\nReads “belongs to” relations and check the virtual foreign keys when inserting or updating records to verify that inserted/updated values are present in the related entity\n\n### final protected **\\_checkForeignKeysReverseCascade** ()\n\nReads both “hasMany” and “hasOne” relations and checks the virtual foreign keys (cascade) when deleting records\n\n### final protected **\\_checkForeignKeysReverseRestrict** ()\n\nReads both “hasMany” and “hasOne” relations and checks the virtual foreign keys (restrict) when deleting records\n\n### protected **\\_preSave** ([*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, *mixed* $exists, *mixed* $identityField)\n\nExecutes internal hooks before save a record\n\n### protected **\\_postSave** (*mixed* $success, *mixed* $exists)\n\nExecutes internal events after save a record\n\n### protected *boolean* **\\_doLowInsert** ([*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface) $connection, *string* \\| *array* $table, *boolean* \\| *string* $identityField)\n\nSends a pre-build INSERT SQL statement to the relational database system\n\n### protected *boolean* **\\_doLowUpdate** ([*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, [*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface) $connection, *string* \\| *array* $table)\n\nSends a pre-build UPDATE SQL statement to the relational database system\n\n### protected *boolean* **\\_preSaveRelatedRecords** ([*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface) $connection, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface)\\[\\] $related)\n\nSaves related records that must be stored prior to save the master record\n\n### protected *boolean* **\\_postSaveRelatedRecords** ([*Phalcon\\Db\\AdapterInterface*](phalcon_db_adapterinterface) $connection, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface)\\[\\] $related)\n\nSave the related records assigned in the has-one/has-many relations\n\n### public *boolean* **save** (\\[*array* $data\\], \\[*array* $whiteList\\])\n\nInserts or updates a model instance. Returning true on success or false otherwise.\n\n``` php\n// Creating a new robot\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\n$robot->save();\n\n// Updating a robot name\n$robot = Robots::findFirst(\"id = 100\");\n\n$robot->name = \"Biomass\";\n\n$robot->save();\n```\n\n### public **create** (\\[*mixed* $data\\], \\[*mixed* $whiteList\\])\n\nInserts a model instance. If the instance already exists in the persistence it will throw an exception Returning true on success or false otherwise.\n\n``` php\n// Creating a new robot\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\n$robot->create();\n\n// Passing an array to create\n$robot = new Robots();\n\n$robot->create(\n    [\n        \"type\" => \"mechanical\",\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n```\n\n### public **update** (\\[*mixed* $data\\], \\[*mixed* $whiteList\\])\n\nUpdates a model instance. If the instance doesn’t exist in the persistence it will throw an exception Returning true on success or false otherwise.\n\n``` php\n// Updating a robot name\n$robot = Robots::findFirst(\"id = 100\");\n\n$robot->name = \"Biomass\";\n\n$robot->update();\n```\n\n### public **delete** ()\n\nDeletes a model instance. Returning true on success or false otherwise.\n\n``` php\n$robot = Robots::findFirst(\"id=100\");\n\n$robot->delete();\n\n$robots = Robots::find(\"type = 'mechanical'\");\n\nforeach ($robots as $robot) {\n    $robot->delete();\n}\n```\n\n### public **getOperationMade** ()\n\nReturns the type of the latest operation performed by the ORM Returns one of the OP\\_\\* class constants\n\n### public **refresh** ()\n\nRefreshes the model attributes re-querying the record from the database\n\n### public **skipOperation** (*mixed* $skip)\n\nSkips the current operation forcing a success state\n\n### public **readAttribute** (*mixed* $attribute)\n\nReads an attribute value by its name\n\n``` php\necho $robot->readAttribute(\"name\");\n```\n\n### public **writeAttribute** (*mixed* $attribute, *mixed* $value)\n\nWrites an attribute value by its name\n\n``` php\n$robot->writeAttribute(\"name\", \"Rosey\");\n```\n\n### protected **skipAttributes** (*array* $attributes)\n\nSets a list of attributes that must be skipped from the generated INSERT/UPDATE statement\n\n``` php\n<?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->skipAttributes(\n            [\n                \"price\",\n            ]\n        );\n    }\n}\n```\n\n### protected **skipAttributesOnCreate** (*array* $attributes)\n\nSets a list of attributes that must be skipped from the generated INSERT statement\n\n``` php\n<?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->skipAttributesOnCreate(\n            [\n                \"created_at\",\n            ]\n        );\n    }\n}\n```\n\n### protected **skipAttributesOnUpdate** (*array* $attributes)\n\nSets a list of attributes that must be skipped from the generated UPDATE statement\n\n``` php\n<?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->skipAttributesOnUpdate(\n            [\n                \"modified_in\",\n            ]\n        );\n    }\n}\n```\n\n### protected **allowEmptyStringValues** (*array* $attributes)\n\nSets a list of attributes that must be skipped from the generated UPDATE statement\n\n``` php\n<?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->allowEmptyStringValues(\n            [\n                \"name\",\n            ]\n        );\n    }\n}\n```\n\n### protected **hasOne** (*mixed* $fields, *mixed* $referenceModel, *mixed* $referencedFields, \\[*mixed* $options\\])\n\nSetup a 1-1 relation between two models\n\n``` php\n<?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->hasOne(\"id\", \"RobotsDescription\", \"robots_id\");\n    }\n}\n```\n\n### protected **belongsTo** (*mixed* $fields, *mixed* $referenceModel, *mixed* $referencedFields, \\[*mixed* $options\\])\n\nSetup a reverse 1-1 or n-1 relation between two models\n\n``` php\n<?php\n\nclass RobotsParts extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->belongsTo(\"robots_id\", \"Robots\", \"id\");\n    }\n}\n```\n\n### protected **hasMany** (*mixed* $fields, *mixed* $referenceModel, *mixed* $referencedFields, \\[*mixed* $options\\])\n\nSetup a 1-n relation between two models\n\n``` php\n<?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this->hasMany(\"id\", \"RobotsParts\", \"robots_id\");\n    }\n}\n```\n\n### protected [*Phalcon\\Mvc\\Model\\Relation*](phalcon_mvc_model_relation) **hasManyToMany** (*string* \\| *array* $fields, *string* $intermediateModel, *string* \\| *array* $intermediateFields, *string* \\| *array* $intermediateReferencedFields, *mixed* $referenceModel, *string* \\| *array* $referencedFields, \\[*array* $options\\])\n\nSetup an n-n relation between two models, through an intermediate relation\n\n``` php\n<?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        // Setup a many-to-many relation to Parts through RobotsParts\n        $this->hasManyToMany(\n            \"id\",\n            \"RobotsParts\",\n            \"robots_id\",\n            \"parts_id\",\n            \"Parts\",\n            \"id\",\n        );\n    }\n}\n```\n\n### public **addBehavior** ([*Phalcon\\Mvc\\Model\\BehaviorInterface*](phalcon_mvc_model_behaviorinterface) $behavior)\n\nSetups a behavior in a model\n\n``` php\n<?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->addBehavior(\n            new Timestampable(\n               [\n                   \"onCreate\" => [\n                        \"field\"  => \"created_at\",\n                        \"format\" => \"Y-m-d\",\n                       ],\n                ]\n            )\n        );\n    }\n}\n```\n\n### protected **keepSnapshots** (*mixed* $keepSnapshot)\n\nSets if the model must keep the original record snapshot in memory\n\n``` php\n<?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->keepSnapshots(true);\n    }\n}\n```\n\n### public **setSnapshotData** (*array* $data, \\[*array* $columnMap\\])\n\nSets the record’s snapshot data. This method is used internally to set snapshot data when the model was set up to keep snapshot data\n\n### public **hasSnapshotData** ()\n\nChecks if the object has internal snapshot data\n\n### public **getSnapshotData** ()\n\nReturns the internal snapshot data\n\n### public **hasChanged** (\\[*string* \\| *array* $fieldName\\])\n\nCheck if a specific attribute has changed This only works if the model is keeping data snapshots\n\n### public **getChangedFields** ()\n\nReturns a list of changed values.\n\n``` php\n$robots = Robots::findFirst();\nprint_r($robots->getChangedFields()); // []\n\n$robots->deleted = 'Y';\n\n$robots->getChangedFields();\nprint_r($robots->getChangedFields()); // [\"deleted\"]\n```\n\n### protected **useDynamicUpdate** (*mixed* $dynamicUpdate)\n\nSets if a model must use dynamic update instead of the all-field update\n\n``` php\n<?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->useDynamicUpdate(true);\n    }\n}\n```\n\n### public [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface) **getRelated** (*string* $alias, \\[*array* $arguments\\])\n\nReturns related records based on defined relations\n\n### protected *mixed* **\\_getRelatedRecords** (*string* $modelName, *string* $method, *array* $arguments)\n\nReturns related records defined relations depending on the method name\n\n### final protected static [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface)\\[\\] \\| [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) \\| *boolean* **\\_invokeFinder** (*string* $method, *array* $arguments)\n\nTry to check if the query must invoke a finder\n\n### public *mixed* **\\_\\_call** (*string* $method, *array* $arguments)\n\nHandles method calls when a method is not implemented\n\n### public static *mixed* **\\_\\_callStatic** (*string* $method, *array* $arguments)\n\nHandles method calls when a static method is not implemented\n\n### public **\\_\\_set** (*string* $property, *mixed* $value)\n\nMagic method to assign values to the the model\n\n### final protected *string* **\\_possibleSetter** (*string* $property, *mixed* $value)\n\nCheck for, and attempt to use, possible setter.\n\n### public [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset) \\| [*Phalcon\\Mvc\\Model*](phalcon_mvc_model) **\\_\\_get** (*string* $property)\n\nMagic method to get related records using the relation alias as a property\n\n### public **\\_\\_isset** (*mixed* $property)\n\nMagic method to check if a property is a valid relation\n\n### public **serialize** ()\n\nSerializes the object ignoring connections, services, related objects or static properties\n\n### public **unserialize** (*mixed* $data)\n\nUnserializes the object from a serialized string\n\n### public **dump** ()\n\nReturns a simple representation of the object that can be used with var_dump\n\n``` php\nvar_dump(\n    $robot->dump()\n);\n```\n\n### public *array* **toArray** (\\[*array* $columns\\])\n\nReturns the instance as an array representation\n\n``` php\nprint_r(\n    $robot->toArray()\n);\n```\n\n### public *array* **jsonSerialize** ()\n\nSerializes the object for json_encode\n\n``` php\necho json_encode($robot);\n```\n\n### public static **setup** (*array* $options)\n\nEnables/disables options in the ORM\n\n### public **reset** ()\n\nReset a model instance data\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model.html)"
- name: Mvc\Model::addBehavior
  id: api/phalcon_mvc_model#addbehavior
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **addBehavior** ([*Phalcon\Mvc\Model\BehaviorInterface*](phalcon_mvc_model_behaviorinterface) $behavior)

    Setups a behavior in a model

    ``` php
    <?php

    use Phalcon\Mvc\Model;
    use Phalcon\Mvc\Model\Behavior\Timestampable;

    class Robots extends Model
    {
        public function initialize()
        {
            $this->addBehavior(
                new Timestampable(
                   [
                       "onCreate" => [
                            "field"  => "created_at",
                            "format" => "Y-m-d",
                           ],
                    ]
                )
            );
        }
    }
    ```

    ### protected **keepSnapshots** (*mixed* $keepSnapshot)

    Sets if the model must keep the original record snapshot in memory

    ``` php
    <?php

    use Phalcon\Mvc\Model;

    class Robots extends Model
    {
        public function initialize()
        {
            $this->keepSnapshots(true);
        }
    }
    ```
- name: Mvc\Model::appendMessage
  id: api/phalcon_mvc_model#appendmessage
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **appendMessage** ([*Phalcon\Mvc\Model\MessageInterface*](phalcon_mvc_model_messageinterface) $message)

    Appends a customized message on the validation process

    ``` php
    use Phalcon\Mvc\Model;
    use Phalcon\Mvc\Model\Message as Message;

    class Robots extends Model
    {
        public function beforeSave()
        {
            if ($this->name === "Peter") {
                $message = new Message(
                    "Sorry, but a robot cannot be named Peter"
                );

                $this->appendMessage($message);
            }
        }
    }
    ```

    ### protected **validate** ([*Phalcon\ValidationInterface*](phalcon_validationinterface) $validator)

    Executes validators on every validation call

    ``` php
    use Phalcon\Mvc\Model;
    use Phalcon\Validation;
    use Phalcon\Validation\Validator\ExclusionIn;

    class Subscriptors extends Model
    {
        public function validation()
        {
            $validator = new Validation();

            $validator->add(
                "status",
                new ExclusionIn(
                    [
                        "domain" => [
                            "A",
                            "I",
                        ],
                    ]
                )
            );

            return $this->validate($validator);
        }
    }
    ```
- name: Mvc\Model::assign
  id: api/phalcon_mvc_model#assign
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public [*Phalcon\Mvc\Model*](phalcon_mvc_model) **assign** (*array* $data, \[*mixed* $dataColumnMap\], \[*array* $whiteList\])

    Assigns values to a model from an array

    ``` php
    $robot->assign(
        [
            "type" => "mechanical",
            "name" => "Astro Boy",
            "year" => 1952,
        ]
    );

    // Assign by db row, column map needed
    $robot->assign(
        $dbRow,
        [
            "db_type" => "type",
            "db_name" => "name",
            "db_year" => "year",
        ]
    );

    // Allow assign only name and year
    $robot->assign(
        $_POST,
        null,
        [
            "name",
            "year",
        ]
    );
    ```
- name: Mvc\Model::average
  id: api/phalcon_mvc_model#average
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *double* **average** (\[*array* $parameters\])

    Returns the average value on a column for a result-set of rows matching the specified conditions

    ``` php
    // What's the average price of robots?
    $average = Robots::average(
        [
            "column" => "price",
        ]
    );

    echo "The average price is ", $average, "\n";

    // What's the average price of mechanical robots?
    $average = Robots::average(
        [
            "type = 'mechanical'",
            "column" => "price",
        ]
    );

    echo "The average price of mechanical robots is ", $average, "\n";
    ```
- name: Mvc\Model::cloneResult
  id: api/phalcon_mvc_model#cloneresult
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) **cloneResult** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $base, *array* $data, \[*int* $dirtyState\])

    Assigns values to a model from an array returning a new model

    ``` php
    $robot = Phalcon\Mvc\Model::cloneResult(
        new Robots(),
        [
            "type" => "mechanical",
            "name" => "Astro Boy",
            "year" => 1952,
        ]
    );
    ```
- name: Mvc\Model::cloneResultMap
  id: api/phalcon_mvc_model#cloneresultmap
  summary: Assigns values to a model from an array, returning a new model
  belongs_to: Mvc\Model
  description: |-
    ### public static **cloneResultMap** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) \| [*Phalcon\Mvc\Model\Row*](phalcon_mvc_model_row) $base, *array* $data, *array* $columnMap, \[*int* $dirtyState\], \[*boolean* $keepSnapshots\])

    Assigns values to a model from an array, returning a new model.

    ``` php
    $robot = \Phalcon\Mvc\Model::cloneResultMap(
        new Robots(),
        [
            "type" => "mechanical",
            "name" => "Astro Boy",
            "year" => 1952,
        ]
    );
    ```
- name: Mvc\Model::cloneResultMapHydrate
  id: api/phalcon_mvc_model#cloneresultmaphydrate
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *mixed* **cloneResultMapHydrate** (*array* $data, *array* $columnMap, *int* $hydrationMode)

    Returns an hydrated result based on the data and the column map
- name: Mvc\Model::count
  id: api/phalcon_mvc_model#count
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *mixed* **count** (\[*array* $parameters\])

    Counts how many records match the specified conditions

    ``` php
    // How many robots are there?
    $number = Robots::count();

    echo "There are ", $number, "\n";

    // How many mechanical robots are there?
    $number = Robots::count("type = 'mechanical'");

    echo "There are ", $number, " mechanical robots\n";
    ```
- name: Mvc\Model::create
  id: api/phalcon_mvc_model#create
  summary: Inserts a model instance
  belongs_to: Mvc\Model
  description: |-
    ### public **create** (\[*mixed* $data\], \[*mixed* $whiteList\])

    Inserts a model instance. If the instance already exists in the persistence it will throw an exception Returning true on success or false otherwise.

    ``` php
    // Creating a new robot
    $robot = new Robots();

    $robot->type = "mechanical";
    $robot->name = "Astro Boy";
    $robot->year = 1952;

    $robot->create();

    // Passing an array to create
    $robot = new Robots();

    $robot->create(
        [
            "type" => "mechanical",
            "name" => "Astro Boy",
            "year" => 1952,
        ]
    );
    ```
- name: Mvc\Model::delete
  id: api/phalcon_mvc_model#delete
  summary: Deletes a model instance
  belongs_to: Mvc\Model
  description: |-
    ### public **delete** ()

    Deletes a model instance. Returning true on success or false otherwise.

    ``` php
    $robot = Robots::findFirst("id=100");

    $robot->delete();

    $robots = Robots::find("type = 'mechanical'");

    foreach ($robots as $robot) {
        $robot->delete();
    }
    ```
- name: Mvc\Model::DIRTY_STATE_DETACHED
  id: api/phalcon_mvc_model#dirty_state_detached
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### *integer* **DIRTY_STATE_DETACHED**

    ## Methods

    ### final public **\_\_construct** (\[*mixed* $data\], \[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\], \[[*Phalcon\Mvc\Model\ManagerInterface*](phalcon_mvc_model_managerinterface) $modelsManager\])

    Phalcon\Mvc\Model constructor
- name: Mvc\Model::DIRTY_STATE_PERSISTENT
  id: api/phalcon_mvc_model#dirty_state_persistent
  summary: null
  belongs_to: Mvc\Model
  description: '### *integer* **DIRTY_STATE_PERSISTENT**'
- name: Mvc\Model::DIRTY_STATE_TRANSIENT
  id: api/phalcon_mvc_model#dirty_state_transient
  summary: null
  belongs_to: Mvc\Model
  description: '### *integer* **DIRTY_STATE_TRANSIENT**'
- name: Mvc\Model::dump
  id: api/phalcon_mvc_model#dump
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **dump** ()

    Returns a simple representation of the object that can be used with var_dump

    ``` php
    var_dump(
        $robot->dump()
    );
    ```
- name: Mvc\Model::find
  id: api/phalcon_mvc_model#find
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static **find** (\[*mixed* $parameters\])

    Query for a set of records that match the specified conditions

    ``` php
    // How many robots are there?
    $robots = Robots::find();

    echo "There are ", count($robots), "\n";

    // How many mechanical robots are there?
    $robots = Robots::find(
        "type = 'mechanical'"
    );

    echo "There are ", count($robots), "\n";

    // Get and print virtual robots ordered by name
    $robots = Robots::find(
        [
            "type = 'virtual'",
            "order" => "name",
        ]
    );

    foreach ($robots as $robot) {
     echo $robot->name, "\n";
    }

    // Get first 100 virtual robots ordered by name
    $robots = Robots::find(
        [
            "type = 'virtual'",
            "order" => "name",
            "limit" => 100,
        ]
    );

    foreach ($robots as $robot) {
     echo $robot->name, "\n";
    }
    ```
- name: Mvc\Model::findFirst
  id: api/phalcon_mvc_model#findfirst
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *static* **findFirst** (\[*string* \| *array* $parameters\])

    Query the first record that matches the specified conditions

    ``` php
    // What's the first robot in robots table?
    $robot = Robots::findFirst();

    echo "The robot name is ", $robot->name;

    // What's the first mechanical robot in robots table?
    $robot = Robots::findFirst(
        "type = 'mechanical'"
    );

    echo "The first mechanical robot name is ", $robot->name;

    // Get first virtual robot ordered by name
    $robot = Robots::findFirst(
        [
            "type = 'virtual'",
            "order" => "name",
        ]
    );

    echo "The first virtual robot name is ", $robot->name;
    ```
- name: Mvc\Model::fireEvent
  id: api/phalcon_mvc_model#fireevent
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **fireEvent** (*mixed* $eventName)

    Fires an event, implicitly calls behaviors and listeners in the events manager are notified
- name: Mvc\Model::fireEventCancel
  id: api/phalcon_mvc_model#fireeventcancel
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **fireEventCancel** (*mixed* $eventName)

    Fires an event, implicitly calls behaviors and listeners in the events manager are notified This method stops if one of the callbacks/listeners returns boolean false

    ### protected **\_cancelOperation** ()

    Cancel the current operation
- name: Mvc\Model::getChangedFields
  id: api/phalcon_mvc_model#getchangedfields
  summary: Returns a list of changed values
  belongs_to: Mvc\Model
  description: |-
    ### public **getChangedFields** ()

    Returns a list of changed values.

    ``` php
    $robots = Robots::findFirst();
    print_r($robots->getChangedFields()); // []

    $robots->deleted = 'Y';

    $robots->getChangedFields();
    print_r($robots->getChangedFields()); // ["deleted"]
    ```

    ### protected **useDynamicUpdate** (*mixed* $dynamicUpdate)

    Sets if a model must use dynamic update instead of the all-field update

    ``` php
    <?php

    use Phalcon\Mvc\Model;

    class Robots extends Model
    {
        public function initialize()
        {
            $this->useDynamicUpdate(true);
        }
    }
    ```
- name: Mvc\Model::getDI
  id: api/phalcon_mvc_model#getdi
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getDI** ()

    Returns the dependency injection container

    ### protected **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets a custom events manager

    ### protected **getEventsManager** ()

    Returns the custom events manager
- name: Mvc\Model::getDirtyState
  id: api/phalcon_mvc_model#getdirtystate
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getDirtyState** ()

    Returns one of the DIRTY_STATE\_\* constants telling if the record exists in the database or not
- name: Mvc\Model::getMessages
  id: api/phalcon_mvc_model#getmessages
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getMessages** (\[*mixed* $filter\])

    Returns array of validation messages

    ``` php
    $robot = new Robots();

    $robot->type = "mechanical";
    $robot->name = "Astro Boy";
    $robot->year = 1952;

    if ($robot->save() === false) {
        echo "Umh, We can't store robots right now ";

        $messages = $robot->getMessages();

        foreach ($messages as $message) {
            echo $message;
        }
    } else {
        echo "Great, a new robot was saved successfully!";
    }
    ```

    ### final protected **\_checkForeignKeysRestrict** ()

    Reads “belongs to” relations and check the virtual foreign keys when inserting or updating records to verify that inserted/updated values are present in the related entity

    ### final protected **\_checkForeignKeysReverseCascade** ()

    Reads both “hasMany” and “hasOne” relations and checks the virtual foreign keys (cascade) when deleting records

    ### final protected **\_checkForeignKeysReverseRestrict** ()

    Reads both “hasMany” and “hasOne” relations and checks the virtual foreign keys (restrict) when deleting records

    ### protected **\_preSave** ([*Phalcon\Mvc\Model\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, *mixed* $exists, *mixed* $identityField)

    Executes internal hooks before save a record

    ### protected **\_postSave** (*mixed* $success, *mixed* $exists)

    Executes internal events after save a record

    ### protected *boolean* **\_doLowInsert** ([*Phalcon\Mvc\Model\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, [*Phalcon\Db\AdapterInterface*](phalcon_db_adapterinterface) $connection, *string* \| *array* $table, *boolean* \| *string* $identityField)

    Sends a pre-build INSERT SQL statement to the relational database system

    ### protected *boolean* **\_doLowUpdate** ([*Phalcon\Mvc\Model\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, [*Phalcon\Db\AdapterInterface*](phalcon_db_adapterinterface) $connection, *string* \| *array* $table)

    Sends a pre-build UPDATE SQL statement to the relational database system

    ### protected *boolean* **\_preSaveRelatedRecords** ([*Phalcon\Db\AdapterInterface*](phalcon_db_adapterinterface) $connection, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface)\[\] $related)

    Saves related records that must be stored prior to save the master record

    ### protected *boolean* **\_postSaveRelatedRecords** ([*Phalcon\Db\AdapterInterface*](phalcon_db_adapterinterface) $connection, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface)\[\] $related)

    Save the related records assigned in the has-one/has-many relations
- name: Mvc\Model::getModelsManager
  id: api/phalcon_mvc_model#getmodelsmanager
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getModelsManager** ()

    Returns the models manager related to the entity instance
- name: Mvc\Model::getModelsMetaData
  id: api/phalcon_mvc_model#getmodelsmetadata
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getModelsMetaData** ()

    Returns the models meta-data service related to the entity instance
- name: Mvc\Model::getOperationMade
  id: api/phalcon_mvc_model#getoperationmade
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getOperationMade** ()

    Returns the type of the latest operation performed by the ORM Returns one of the OP\_\* class constants
- name: Mvc\Model::getReadConnection
  id: api/phalcon_mvc_model#getreadconnection
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getReadConnection** ()

    Gets the connection used to read data for the model
- name: Mvc\Model::getReadConnectionService
  id: api/phalcon_mvc_model#getreadconnectionservice
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getReadConnectionService** ()

    Returns the DependencyInjection connection service name used to read data related the model
- name: Mvc\Model::getRelated
  id: api/phalcon_mvc_model#getrelated
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public [*Phalcon\Mvc\Model\ResultsetInterface*](phalcon_mvc_model_resultsetinterface) **getRelated** (*string* $alias, \[*array* $arguments\])

    Returns related records based on defined relations

    ### protected *mixed* **\_getRelatedRecords** (*string* $modelName, *string* $method, *array* $arguments)

    Returns related records defined relations depending on the method name

    ### final protected static [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface)\[\] \| [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) \| *boolean* **\_invokeFinder** (*string* $method, *array* $arguments)

    Try to check if the query must invoke a finder
- name: Mvc\Model::getSchema
  id: api/phalcon_mvc_model#getschema
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getSchema** ()

    Returns schema name where the mapped table is located
- name: Mvc\Model::getSnapshotData
  id: api/phalcon_mvc_model#getsnapshotdata
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getSnapshotData** ()

    Returns the internal snapshot data
- name: Mvc\Model::getSource
  id: api/phalcon_mvc_model#getsource
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getSource** ()

    Returns the table name mapped in the model

    ### protected **setSchema** (*mixed* $schema)

    Sets schema name where the mapped table is located
- name: Mvc\Model::getWriteConnection
  id: api/phalcon_mvc_model#getwriteconnection
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getWriteConnection** ()

    Gets the connection used to write data to the model
- name: Mvc\Model::getWriteConnectionService
  id: api/phalcon_mvc_model#getwriteconnectionservice
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **getWriteConnectionService** ()

    Returns the DependencyInjection connection service name used to write data related to the model
- name: Mvc\Model::hasChanged
  id: api/phalcon_mvc_model#haschanged
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **hasChanged** (\[*string* \| *array* $fieldName\])

    Check if a specific attribute has changed This only works if the model is keeping data snapshots
- name: Mvc\Model::hasSnapshotData
  id: api/phalcon_mvc_model#hassnapshotdata
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **hasSnapshotData** ()

    Checks if the object has internal snapshot data
- name: Mvc\Model::jsonSerialize
  id: api/phalcon_mvc_model#jsonserialize
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public *array* **jsonSerialize** ()

    Serializes the object for json_encode

    ``` php
    echo json_encode($robot);
    ```
- name: Mvc\Model::maximum
  id: api/phalcon_mvc_model#maximum
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *mixed* **maximum** (\[*array* $parameters\])

    Returns the maximum value of a column for a result-set of rows that match the specified conditions

    ``` php
    // What is the maximum robot id?
    $id = Robots::maximum(
        [
            "column" => "id",
        ]
    );

    echo "The maximum robot id is: ", $id, "\n";

    // What is the maximum id of mechanical robots?
    $sum = Robots::maximum(
        [
            "type = 'mechanical'",
            "column" => "id",
        ]
    );

    echo "The maximum robot id of mechanical robots is ", $id, "\n";
    ```
- name: Mvc\Model::minimum
  id: api/phalcon_mvc_model#minimum
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *mixed* **minimum** (\[*array* $parameters\])

    Returns the minimum value of a column for a result-set of rows that match the specified conditions

    ``` php
    // What is the minimum robot id?
    $id = Robots::minimum(
        [
            "column" => "id",
        ]
    );

    echo "The minimum robot id is: ", $id;

    // What is the minimum id of mechanical robots?
    $sum = Robots::minimum(
        [
            "type = 'mechanical'",
            "column" => "id",
        ]
    );

    echo "The minimum robot id of mechanical robots is ", $id;
    ```
- name: Mvc\Model::OP_CREATE
  id: api/phalcon_mvc_model#op_create
  summary: null
  belongs_to: Mvc\Model
  description: '### *integer* **OP_CREATE**'
- name: Mvc\Model::OP_DELETE
  id: api/phalcon_mvc_model#op_delete
  summary: null
  belongs_to: Mvc\Model
  description: '### *integer* **OP_DELETE**'
- name: Mvc\Model::OP_NONE
  id: api/phalcon_mvc_model#op_none
  summary: null
  belongs_to: Mvc\Model
  description: '### *integer* **OP_NONE**'
- name: Mvc\Model::OP_UPDATE
  id: api/phalcon_mvc_model#op_update
  summary: null
  belongs_to: Mvc\Model
  description: '### *integer* **OP_UPDATE**'
- name: Mvc\Model::query
  id: api/phalcon_mvc_model#query
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static **query** (\[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\])

    Create a criteria for a specific model

    ### protected *boolean* **\_exists** ([*Phalcon\Mvc\Model\MetaDataInterface*](phalcon_mvc_model_metadatainterface) $metaData, [*Phalcon\Db\AdapterInterface*](phalcon_db_adapterinterface) $connection, \[*string* \| *array* $table\])

    Checks whether the current record already exists

    ### protected static [*Phalcon\Mvc\Model\ResultsetInterface*](phalcon_mvc_model_resultsetinterface) **\_groupResult** (*mixed* $functionName, *string* $alias, *array* $parameters)

    Generate a PHQL SELECT statement for an aggregate
- name: Mvc\Model::readAttribute
  id: api/phalcon_mvc_model#readattribute
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **readAttribute** (*mixed* $attribute)

    Reads an attribute value by its name

    ``` php
    echo $robot->readAttribute("name");
    ```
- name: Mvc\Model::refresh
  id: api/phalcon_mvc_model#refresh
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **refresh** ()

    Refreshes the model attributes re-querying the record from the database
- name: Mvc\Model::reset
  id: api/phalcon_mvc_model#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model
  description: "### public **reset** ()\n\nReset a model instance data\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model.html)"
- name: Mvc\Model::save
  id: api/phalcon_mvc_model#save
  summary: Inserts or updates a model instance
  belongs_to: Mvc\Model
  description: |-
    ### public *boolean* **save** (\[*array* $data\], \[*array* $whiteList\])

    Inserts or updates a model instance. Returning true on success or false otherwise.

    ``` php
    // Creating a new robot
    $robot = new Robots();

    $robot->type = "mechanical";
    $robot->name = "Astro Boy";
    $robot->year = 1952;

    $robot->save();

    // Updating a robot name
    $robot = Robots::findFirst("id = 100");

    $robot->name = "Biomass";

    $robot->save();
    ```
- name: Mvc\Model::serialize
  id: api/phalcon_mvc_model#serialize
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **serialize** ()

    Serializes the object ignoring connections, services, related objects or static properties
- name: Mvc\Model::setConnectionService
  id: api/phalcon_mvc_model#setconnectionservice
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **setConnectionService** (*mixed* $connectionService)

    Sets the DependencyInjection connection service name
- name: Mvc\Model::setDI
  id: api/phalcon_mvc_model#setdi
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injection container
- name: Mvc\Model::setDirtyState
  id: api/phalcon_mvc_model#setdirtystate
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **setDirtyState** (*mixed* $dirtyState)

    Sets the dirty state of the object using one of the DIRTY_STATE\_\* constants
- name: Mvc\Model::setReadConnectionService
  id: api/phalcon_mvc_model#setreadconnectionservice
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **setReadConnectionService** (*mixed* $connectionService)

    Sets the DependencyInjection connection service name used to read data
- name: Mvc\Model::setSnapshotData
  id: api/phalcon_mvc_model#setsnapshotdata
  summary: Sets the record’s snapshot data
  belongs_to: Mvc\Model
  description: |-
    ### public **setSnapshotData** (*array* $data, \[*array* $columnMap\])

    Sets the record’s snapshot data. This method is used internally to set snapshot data when the model was set up to keep snapshot data
- name: Mvc\Model::setTransaction
  id: api/phalcon_mvc_model#settransaction
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **setTransaction** ([*Phalcon\Mvc\Model\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)

    Sets a transaction related to the Model instance

    ``` php
    use Phalcon\Mvc\Model\Transaction\Manager as TxManager;
    use Phalcon\Mvc\Model\Transaction\Failed as TxFailed;

    try {
        $txManager = new TxManager();

        $transaction = $txManager->get();

        $robot = new Robots();

        $robot->setTransaction($transaction);

        $robot->name       = "WALL·E";
        $robot->created_at = date("Y-m-d");

        if ($robot->save() === false) {
            $transaction->rollback("Can't save robot");
        }

        $robotPart = new RobotParts();

        $robotPart->setTransaction($transaction);

        $robotPart->type = "head";

        if ($robotPart->save() === false) {
            $transaction->rollback("Robot part cannot be saved");
        }

        $transaction->commit();
    } catch (TxFailed $e) {
        echo "Failed, reason: ", $e->getMessage();
    }
    ```

    ### protected **setSource** (*mixed* $source)

    Sets the table name to which model should be mapped
- name: Mvc\Model::setup
  id: api/phalcon_mvc_model#setup
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static **setup** (*array* $options)

    Enables/disables options in the ORM
- name: Mvc\Model::setWriteConnectionService
  id: api/phalcon_mvc_model#setwriteconnectionservice
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **setWriteConnectionService** (*mixed* $connectionService)

    Sets the DependencyInjection connection service name used to write data
- name: Mvc\Model::skipOperation
  id: api/phalcon_mvc_model#skipoperation
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **skipOperation** (*mixed* $skip)

    Skips the current operation forcing a success state
- name: Mvc\Model::sum
  id: api/phalcon_mvc_model#sum
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *mixed* **sum** (\[*array* $parameters\])

    Calculates the sum on a column for a result-set of rows that match the specified conditions

    ``` php
    // How much are all robots?
    $sum = Robots::sum(
        [
            "column" => "price",
        ]
    );

    echo "The total price of robots is ", $sum, "\n";

    // How much are mechanical robots?
    $sum = Robots::sum(
        [
            "type = 'mechanical'",
            "column" => "price",
        ]
    );

    echo "The total price of mechanical robots is  ", $sum, "\n";
    ```
- name: Mvc\Model::toArray
  id: api/phalcon_mvc_model#toarray
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public *array* **toArray** (\[*array* $columns\])

    Returns the instance as an array representation

    ``` php
    print_r(
        $robot->toArray()
    );
    ```
- name: Mvc\Model::unserialize
  id: api/phalcon_mvc_model#unserialize
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **unserialize** (*mixed* $data)

    Unserializes the object from a serialized string
- name: Mvc\Model::update
  id: api/phalcon_mvc_model#update
  summary: Updates a model instance
  belongs_to: Mvc\Model
  description: |-
    ### public **update** (\[*mixed* $data\], \[*mixed* $whiteList\])

    Updates a model instance. If the instance doesn’t exist in the persistence it will throw an exception Returning true on success or false otherwise.

    ``` php
    // Updating a robot name
    $robot = Robots::findFirst("id = 100");

    $robot->name = "Biomass";

    $robot->update();
    ```
- name: Mvc\Model::validationHasFailed
  id: api/phalcon_mvc_model#validationhasfailed
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **validationHasFailed** ()

    Check whether validation process has generated any messages

    ``` php
    use Phalcon\Mvc\Model;
    use Phalcon\Validation;
    use Phalcon\Validation\Validator\ExclusionIn;

    class Subscriptors extends Model
    {
        public function validation()
        {
            $validator = new Validation();

            $validator->validate(
                "status",
                new ExclusionIn(
                    [
                        "domain" => [
                            "A",
                            "I",
                        ],
                    ]
                )
            );

            return $this->validate($validator);
        }
    }
    ```
- name: Mvc\Model::writeAttribute
  id: api/phalcon_mvc_model#writeattribute
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **writeAttribute** (*mixed* $attribute, *mixed* $value)

    Writes an attribute value by its name

    ``` php
    $robot->writeAttribute("name", "Rosey");
    ```

    ### protected **skipAttributes** (*array* $attributes)

    Sets a list of attributes that must be skipped from the generated INSERT/UPDATE statement

    ``` php
    <?php

    class Robots extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            $this->skipAttributes(
                [
                    "price",
                ]
            );
        }
    }
    ```

    ### protected **skipAttributesOnCreate** (*array* $attributes)

    Sets a list of attributes that must be skipped from the generated INSERT statement

    ``` php
    <?php

    class Robots extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            $this->skipAttributesOnCreate(
                [
                    "created_at",
                ]
            );
        }
    }
    ```

    ### protected **skipAttributesOnUpdate** (*array* $attributes)

    Sets a list of attributes that must be skipped from the generated UPDATE statement

    ``` php
    <?php

    class Robots extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            $this->skipAttributesOnUpdate(
                [
                    "modified_in",
                ]
            );
        }
    }
    ```

    ### protected **allowEmptyStringValues** (*array* $attributes)

    Sets a list of attributes that must be skipped from the generated UPDATE statement

    ``` php
    <?php

    class Robots extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            $this->allowEmptyStringValues(
                [
                    "name",
                ]
            );
        }
    }
    ```

    ### protected **hasOne** (*mixed* $fields, *mixed* $referenceModel, *mixed* $referencedFields, \[*mixed* $options\])

    Setup a 1-1 relation between two models

    ``` php
    <?php

    class Robots extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            $this->hasOne("id", "RobotsDescription", "robots_id");
        }
    }
    ```

    ### protected **belongsTo** (*mixed* $fields, *mixed* $referenceModel, *mixed* $referencedFields, \[*mixed* $options\])

    Setup a reverse 1-1 or n-1 relation between two models

    ``` php
    <?php

    class RobotsParts extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            $this->belongsTo("robots_id", "Robots", "id");
        }
    }
    ```

    ### protected **hasMany** (*mixed* $fields, *mixed* $referenceModel, *mixed* $referencedFields, \[*mixed* $options\])

    Setup a 1-n relation between two models

    ``` php
    <?php

    class Robots extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            $this->hasMany("id", "RobotsParts", "robots_id");
        }
    }
    ```

    ### protected [*Phalcon\Mvc\Model\Relation*](phalcon_mvc_model_relation) **hasManyToMany** (*string* \| *array* $fields, *string* $intermediateModel, *string* \| *array* $intermediateFields, *string* \| *array* $intermediateReferencedFields, *mixed* $referenceModel, *string* \| *array* $referencedFields, \[*array* $options\])

    Setup an n-n relation between two models, through an intermediate relation

    ``` php
    <?php

    class Robots extends \Phalcon\Mvc\Model
    {
        public function initialize()
        {
            // Setup a many-to-many relation to Parts through RobotsParts
            $this->hasManyToMany(
                "id",
                "RobotsParts",
                "robots_id",
                "parts_id",
                "Parts",
                "id",
            );
        }
    }
    ```
- name: Mvc\Model::__call
  id: api/phalcon_mvc_model#__call
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public *mixed* **\_\_call** (*string* $method, *array* $arguments)

    Handles method calls when a method is not implemented
- name: Mvc\Model::__callStatic
  id: api/phalcon_mvc_model#__callstatic
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public static *mixed* **\_\_callStatic** (*string* $method, *array* $arguments)

    Handles method calls when a static method is not implemented
- name: Mvc\Model::__get
  id: api/phalcon_mvc_model#__get
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public [*Phalcon\Mvc\Model\Resultset*](phalcon_mvc_model_resultset) \| [*Phalcon\Mvc\Model*](phalcon_mvc_model) **\_\_get** (*string* $property)

    Magic method to get related records using the relation alias as a property
- name: Mvc\Model::__isset
  id: api/phalcon_mvc_model#__isset
  summary: null
  belongs_to: Mvc\Model
  description: |-
    ### public **\_\_isset** (*mixed* $property)

    Magic method to check if a property is a valid relation
- name: Mvc\Model::__set
  id: api/phalcon_mvc_model#__set
  summary: Check for, and attempt to use, possible setter
  belongs_to: Mvc\Model
  description: |-
    ### public **\_\_set** (*string* $property, *mixed* $value)

    Magic method to assign values to the the model

    ### final protected *string* **\_possibleSetter** (*string* $property, *mixed* $value)

    Check for, and attempt to use, possible setter.
- name: Mvc\ModelInterface
  id: api/phalcon_mvc_modelinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\ModelInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/modelinterface.zep)\n\n## Methods\n\n### abstract public **setTransaction** ([*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)\n\n...\n\n### abstract public **getSource** ()\n\n...\n\n### abstract public **getSchema** ()\n\n...\n\n### abstract public **setConnectionService** (*mixed* $connectionService)\n\n...\n\n### abstract public **setWriteConnectionService** (*mixed* $connectionService)\n\n...\n\n### abstract public **setReadConnectionService** (*mixed* $connectionService)\n\n...\n\n### abstract public **getReadConnectionService** ()\n\n...\n\n### abstract public **getWriteConnectionService** ()\n\n...\n\n### abstract public **getReadConnection** ()\n\n...\n\n### abstract public **getWriteConnection** ()\n\n...\n\n### abstract public **setDirtyState** (*mixed* $dirtyState)\n\n...\n\n### abstract public **getDirtyState** ()\n\n...\n\n### abstract public **assign** (*array* $data, \\[*mixed* $dataColumnMap\\], \\[*mixed* $whiteList\\])\n\n...\n\n### abstract public static **cloneResultMap** (*mixed* $base, *array* $data, *mixed* $columnMap, \\[*mixed* $dirtyState\\], \\[*mixed* $keepSnapshots\\])\n\n...\n\n### abstract public static **cloneResult** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $base, *array* $data, \\[*mixed* $dirtyState\\])\n\n...\n\n### abstract public static **cloneResultMapHydrate** (*array* $data, *mixed* $columnMap, *mixed* $hydrationMode)\n\n...\n\n### abstract public static **find** (\\[*mixed* $parameters\\])\n\n...\n\n### abstract public static **findFirst** (\\[*mixed* $parameters\\])\n\n...\n\n### abstract public static **query** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\n...\n\n### abstract public static **count** (\\[*mixed* $parameters\\])\n\n...\n\n### abstract public static **sum** (\\[*mixed* $parameters\\])\n\n...\n\n### abstract public static **maximum** (\\[*mixed* $parameters\\])\n\n...\n\n### abstract public static **minimum** (\\[*mixed* $parameters\\])\n\n...\n\n### abstract public static **average** (\\[*mixed* $parameters\\])\n\n...\n\n### abstract public **fireEvent** (*mixed* $eventName)\n\n...\n\n### abstract public **fireEventCancel** (*mixed* $eventName)\n\n...\n\n### abstract public **appendMessage** ([*Phalcon\\Mvc\\Model\\MessageInterface*](phalcon_mvc_model_messageinterface) $message)\n\n...\n\n### abstract public **validationHasFailed** ()\n\n...\n\n### abstract public **getMessages** ()\n\n...\n\n### abstract public **save** (\\[*mixed* $data\\], \\[*mixed* $whiteList\\])\n\n...\n\n### abstract public **create** (\\[*mixed* $data\\], \\[*mixed* $whiteList\\])\n\n...\n\n### abstract public **update** (\\[*mixed* $data\\], \\[*mixed* $whiteList\\])\n\n...\n\n### abstract public **delete** ()\n\n...\n\n### abstract public **getOperationMade** ()\n\n...\n\n### abstract public **refresh** ()\n\n...\n\n### abstract public **skipOperation** (*mixed* $skip)\n\n...\n\n### abstract public **getRelated** (*mixed* $alias, \\[*mixed* $arguments\\])\n\n...\n\n### abstract public **setSnapshotData** (*array* $data, \\[*mixed* $columnMap\\])\n\n...\n\n### abstract public **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModelInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModelInterface.html)"
- name: Mvc\ModelInterface::appendMessage
  id: api/phalcon_mvc_modelinterface#appendmessage
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **appendMessage** ([*Phalcon\Mvc\Model\MessageInterface*](phalcon_mvc_model_messageinterface) $message)

    ...
- name: Mvc\ModelInterface::assign
  id: api/phalcon_mvc_modelinterface#assign
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **assign** (*array* $data, \[*mixed* $dataColumnMap\], \[*mixed* $whiteList\])

    ...
- name: Mvc\ModelInterface::average
  id: api/phalcon_mvc_modelinterface#average
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **average** (\[*mixed* $parameters\])

    ...
- name: Mvc\ModelInterface::cloneResult
  id: api/phalcon_mvc_modelinterface#cloneresult
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **cloneResult** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $base, *array* $data, \[*mixed* $dirtyState\])

    ...
- name: Mvc\ModelInterface::cloneResultMap
  id: api/phalcon_mvc_modelinterface#cloneresultmap
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **cloneResultMap** (*mixed* $base, *array* $data, *mixed* $columnMap, \[*mixed* $dirtyState\], \[*mixed* $keepSnapshots\])

    ...
- name: Mvc\ModelInterface::cloneResultMapHydrate
  id: api/phalcon_mvc_modelinterface#cloneresultmaphydrate
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **cloneResultMapHydrate** (*array* $data, *mixed* $columnMap, *mixed* $hydrationMode)

    ...
- name: Mvc\ModelInterface::count
  id: api/phalcon_mvc_modelinterface#count
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **count** (\[*mixed* $parameters\])

    ...
- name: Mvc\ModelInterface::create
  id: api/phalcon_mvc_modelinterface#create
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **create** (\[*mixed* $data\], \[*mixed* $whiteList\])

    ...
- name: Mvc\ModelInterface::delete
  id: api/phalcon_mvc_modelinterface#delete
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **delete** ()

    ...
- name: Mvc\ModelInterface::find
  id: api/phalcon_mvc_modelinterface#find
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **find** (\[*mixed* $parameters\])

    ...
- name: Mvc\ModelInterface::findFirst
  id: api/phalcon_mvc_modelinterface#findfirst
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **findFirst** (\[*mixed* $parameters\])

    ...
- name: Mvc\ModelInterface::fireEvent
  id: api/phalcon_mvc_modelinterface#fireevent
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **fireEvent** (*mixed* $eventName)

    ...
- name: Mvc\ModelInterface::fireEventCancel
  id: api/phalcon_mvc_modelinterface#fireeventcancel
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **fireEventCancel** (*mixed* $eventName)

    ...
- name: Mvc\ModelInterface::getDirtyState
  id: api/phalcon_mvc_modelinterface#getdirtystate
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getDirtyState** ()

    ...
- name: Mvc\ModelInterface::getMessages
  id: api/phalcon_mvc_modelinterface#getmessages
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getMessages** ()

    ...
- name: Mvc\ModelInterface::getOperationMade
  id: api/phalcon_mvc_modelinterface#getoperationmade
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getOperationMade** ()

    ...
- name: Mvc\ModelInterface::getReadConnection
  id: api/phalcon_mvc_modelinterface#getreadconnection
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getReadConnection** ()

    ...
- name: Mvc\ModelInterface::getReadConnectionService
  id: api/phalcon_mvc_modelinterface#getreadconnectionservice
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getReadConnectionService** ()

    ...
- name: Mvc\ModelInterface::getRelated
  id: api/phalcon_mvc_modelinterface#getrelated
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getRelated** (*mixed* $alias, \[*mixed* $arguments\])

    ...
- name: Mvc\ModelInterface::getSchema
  id: api/phalcon_mvc_modelinterface#getschema
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getSchema** ()

    ...
- name: Mvc\ModelInterface::getSource
  id: api/phalcon_mvc_modelinterface#getsource
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getSource** ()

    ...
- name: Mvc\ModelInterface::getWriteConnection
  id: api/phalcon_mvc_modelinterface#getwriteconnection
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getWriteConnection** ()

    ...
- name: Mvc\ModelInterface::getWriteConnectionService
  id: api/phalcon_mvc_modelinterface#getwriteconnectionservice
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **getWriteConnectionService** ()

    ...
- name: Mvc\ModelInterface::maximum
  id: api/phalcon_mvc_modelinterface#maximum
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **maximum** (\[*mixed* $parameters\])

    ...
- name: Mvc\ModelInterface::minimum
  id: api/phalcon_mvc_modelinterface#minimum
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **minimum** (\[*mixed* $parameters\])

    ...
- name: Mvc\ModelInterface::query
  id: api/phalcon_mvc_modelinterface#query
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **query** (\[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\])

    ...
- name: Mvc\ModelInterface::refresh
  id: api/phalcon_mvc_modelinterface#refresh
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **refresh** ()

    ...
- name: Mvc\ModelInterface::reset
  id: api/phalcon_mvc_modelinterface#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\ModelInterface
  description: "### abstract public **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModelInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModelInterface.html)"
- name: Mvc\ModelInterface::save
  id: api/phalcon_mvc_modelinterface#save
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **save** (\[*mixed* $data\], \[*mixed* $whiteList\])

    ...
- name: Mvc\ModelInterface::setConnectionService
  id: api/phalcon_mvc_modelinterface#setconnectionservice
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **setConnectionService** (*mixed* $connectionService)

    ...
- name: Mvc\ModelInterface::setDirtyState
  id: api/phalcon_mvc_modelinterface#setdirtystate
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **setDirtyState** (*mixed* $dirtyState)

    ...
- name: Mvc\ModelInterface::setReadConnectionService
  id: api/phalcon_mvc_modelinterface#setreadconnectionservice
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **setReadConnectionService** (*mixed* $connectionService)

    ...
- name: Mvc\ModelInterface::setSnapshotData
  id: api/phalcon_mvc_modelinterface#setsnapshotdata
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **setSnapshotData** (*array* $data, \[*mixed* $columnMap\])

    ...
- name: Mvc\ModelInterface::setTransaction
  id: api/phalcon_mvc_modelinterface#settransaction
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **setTransaction** ([*Phalcon\Mvc\Model\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)

    ...
- name: Mvc\ModelInterface::setWriteConnectionService
  id: api/phalcon_mvc_modelinterface#setwriteconnectionservice
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **setWriteConnectionService** (*mixed* $connectionService)

    ...
- name: Mvc\ModelInterface::skipOperation
  id: api/phalcon_mvc_modelinterface#skipoperation
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **skipOperation** (*mixed* $skip)

    ...
- name: Mvc\ModelInterface::sum
  id: api/phalcon_mvc_modelinterface#sum
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public static **sum** (\[*mixed* $parameters\])

    ...
- name: Mvc\ModelInterface::update
  id: api/phalcon_mvc_modelinterface#update
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **update** (\[*mixed* $data\], \[*mixed* $whiteList\])

    ...
- name: Mvc\ModelInterface::validationHasFailed
  id: api/phalcon_mvc_modelinterface#validationhasfailed
  summary: null
  belongs_to: Mvc\ModelInterface
  description: |-
    ### abstract public **validationHasFailed** ()

    ...
- name: Mvc\Model\Behavior
  id: api/phalcon_mvc_model_behavior
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Mvc\\Model\\Behavior**\n\n*implements* [*Phalcon\\Mvc\\Model\\BehaviorInterface*](phalcon_mvc_model_behaviorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behavior.zep)\n\nThis is an optional base class for ORM behaviors\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\n### protected **mustTakeAction** (*mixed* $eventName)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\])\n\nReturns the behavior options related to an event\n\n### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nThis method receives the notifications from the EventsManager\n\n### public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $method, \\[*array* $arguments\\])\n\nActs as fallbacks when a missing method is called on the model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior.html)"
- name: Mvc\Model\Behavior::missingMethod
  id: api/phalcon_mvc_model_behavior#missingmethod
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Behavior
  description: "### public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $method, \\[*array* $arguments\\])\n\nActs as fallbacks when a missing method is called on the model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior.html)"
- name: Mvc\Model\Behavior::notify
  id: api/phalcon_mvc_model_behavior#notify
  summary: null
  belongs_to: Mvc\Model\Behavior
  description: |-
    ### public **notify** (*mixed* $type, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    This method receives the notifications from the EventsManager
- name: Mvc\Model\BehaviorInterface
  id: api/phalcon_mvc_model_behaviorinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\BehaviorInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behaviorinterface.zep)\n\n## Methods\n\n### abstract public **notify** (*mixed* $type, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $method, \\[*mixed* $arguments\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BehaviorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BehaviorInterface.html)"
- name: Mvc\Model\BehaviorInterface::missingMethod
  id: api/phalcon_mvc_model_behaviorinterface#missingmethod
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\BehaviorInterface
  description: "### abstract public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $method, \\[*mixed* $arguments\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BehaviorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BehaviorInterface.html)"
- name: Mvc\Model\BehaviorInterface::notify
  id: api/phalcon_mvc_model_behaviorinterface#notify
  summary: null
  belongs_to: Mvc\Model\BehaviorInterface
  description: |-
    ### abstract public **notify** (*mixed* $type, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\Behavior\SoftDelete
  id: api/phalcon_mvc_model_behavior_softdelete
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Behavior\\SoftDelete**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\n*implements* [*Phalcon\\Mvc\\Model\\BehaviorInterface*](phalcon_mvc_model_behaviorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behavior/softdelete.zep)\n\nInstead of permanently delete a record it marks the record as deleted changing the value of a flag column\n\n## Methods\n\n### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nPhalcon\\Mvc\\Model\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $method, \\[*array* $arguments\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nActs as fallbacks when a missing method is called on the model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_SoftDelete.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_SoftDelete.html)"
- name: Mvc\Model\Behavior\SoftDelete::notify
  id: api/phalcon_mvc_model_behavior_softdelete#notify
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Behavior\SoftDelete
  description: "### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nPhalcon\\Mvc\\Model\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $method, \\[*array* $arguments\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nActs as fallbacks when a missing method is called on the model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_SoftDelete.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_SoftDelete.html)"
- name: Mvc\Model\Behavior\Timestampable
  id: api/phalcon_mvc_model_behavior_timestampable
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Behavior\\Timestampable**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\n*implements* [*Phalcon\\Mvc\\Model\\BehaviorInterface*](phalcon_mvc_model_behaviorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behavior/timestampable.zep)\n\nAllows to automatically update a model’s attribute saving the datetime when a record is created or updated\n\n## Methods\n\n### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nPhalcon\\Mvc\\Model\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $method, \\[*array* $arguments\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nActs as fallbacks when a missing method is called on the model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_Timestampable.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_Timestampable.html)"
- name: Mvc\Model\Behavior\Timestampable::notify
  id: api/phalcon_mvc_model_behavior_timestampable#notify
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Behavior\Timestampable
  description: "### public **notify** (*mixed* $type, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nListens for notifications from the models manager\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nPhalcon\\Mvc\\Model\\Behavior\n\n### protected **mustTakeAction** (*mixed* $eventName) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nChecks whether the behavior must take action on certain event\n\n### protected *array* **getOptions** (\\[*string* $eventName\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nReturns the behavior options related to an event\n\n### public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $method, \\[*array* $arguments\\]) inherited from [*Phalcon\\Mvc\\Model\\Behavior*](phalcon_mvc_model_behavior)\n\nActs as fallbacks when a missing method is called on the model\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_Timestampable.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_Timestampable.html)"
- name: Mvc\Model\Binder
  id: api/phalcon_mvc_model_binder
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Binder**\n\n*implements* [*Phalcon\\Mvc\\Model\\BinderInterface*](phalcon_mvc_model_binderinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/binder.zep)\n\nPhalcon\\Mvc\\Model\\Binding\n\nThis is an class for binding models into params for handler\n\n## Methods\n\n### public **getBoundModels** ()\n\nArray for storing active bound models\n\n### public **getOriginalValues** ()\n\nArray for original values\n\n### public **\\_\\_construct** (\\[[*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $cache\\])\n\nPhalcon\\Mvc\\Model\\Binder constructor\n\n### public **setCache** ([*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $cache)\n\nGets cache instance\n\n### public **getCache** ()\n\nSets cache instance\n\n### public **bindToHandler** (*mixed* $handler, *array* $params, *mixed* $cacheKey, \\[*mixed* $methodName\\])\n\nBind models into params in proper handler\n\n### protected **getParamsFromCache** (*mixed* $cacheKey)\n\nGet params classes from cache by key\n\n### protected **getParamsFromReflection** (*mixed* $handler, *array* $params, *mixed* $cacheKey, *mixed* $methodName)\n\nGet modified params for handler using reflection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder.html)"
- name: Mvc\Model\Binder::bindToHandler
  id: api/phalcon_mvc_model_binder#bindtohandler
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Binder
  description: "### public **bindToHandler** (*mixed* $handler, *array* $params, *mixed* $cacheKey, \\[*mixed* $methodName\\])\n\nBind models into params in proper handler\n\n### protected **getParamsFromCache** (*mixed* $cacheKey)\n\nGet params classes from cache by key\n\n### protected **getParamsFromReflection** (*mixed* $handler, *array* $params, *mixed* $cacheKey, *mixed* $methodName)\n\nGet modified params for handler using reflection\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder.html)"
- name: Mvc\Model\Binder::getBoundModels
  id: api/phalcon_mvc_model_binder#getboundmodels
  summary: null
  belongs_to: Mvc\Model\Binder
  description: |-
    ### public **getBoundModels** ()

    Array for storing active bound models
- name: Mvc\Model\Binder::getCache
  id: api/phalcon_mvc_model_binder#getcache
  summary: null
  belongs_to: Mvc\Model\Binder
  description: |-
    ### public **getCache** ()

    Sets cache instance
- name: Mvc\Model\Binder::getOriginalValues
  id: api/phalcon_mvc_model_binder#getoriginalvalues
  summary: null
  belongs_to: Mvc\Model\Binder
  description: |-
    ### public **getOriginalValues** ()

    Array for original values

    ### public **\_\_construct** (\[[*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $cache\])

    Phalcon\Mvc\Model\Binder constructor
- name: Mvc\Model\Binder::setCache
  id: api/phalcon_mvc_model_binder#setcache
  summary: null
  belongs_to: Mvc\Model\Binder
  description: |-
    ### public **setCache** ([*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $cache)

    Gets cache instance
- name: Mvc\Model\BinderInterface
  id: api/phalcon_mvc_model_binderinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\BinderInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/binderinterface.zep)\n\n## Methods\n\n### abstract public **getBoundModels** ()\n\n...\n\n### abstract public **getCache** ()\n\n...\n\n### abstract public **setCache** ([*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $cache)\n\n...\n\n### abstract public **bindToHandler** (*mixed* $handler, *array* $params, *mixed* $cacheKey, \\[*mixed* $methodName\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BinderInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BinderInterface.html)"
- name: Mvc\Model\BinderInterface::bindToHandler
  id: api/phalcon_mvc_model_binderinterface#bindtohandler
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\BinderInterface
  description: "### abstract public **bindToHandler** (*mixed* $handler, *array* $params, *mixed* $cacheKey, \\[*mixed* $methodName\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BinderInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BinderInterface.html)"
- name: Mvc\Model\BinderInterface::getBoundModels
  id: api/phalcon_mvc_model_binderinterface#getboundmodels
  summary: null
  belongs_to: Mvc\Model\BinderInterface
  description: |-
    ### abstract public **getBoundModels** ()

    ...
- name: Mvc\Model\BinderInterface::getCache
  id: api/phalcon_mvc_model_binderinterface#getcache
  summary: null
  belongs_to: Mvc\Model\BinderInterface
  description: |-
    ### abstract public **getCache** ()

    ...
- name: Mvc\Model\BinderInterface::setCache
  id: api/phalcon_mvc_model_binderinterface#setcache
  summary: null
  belongs_to: Mvc\Model\BinderInterface
  description: |-
    ### abstract public **setCache** ([*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $cache)

    ...
- name: Mvc\Model\Binder\BindableInterface
  id: api/phalcon_mvc_model_binder_bindableinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\Binder\\BindableInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/binder/bindableinterface.zep)\n\n## Methods\n\n### abstract public **getModelName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder_BindableInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder_BindableInterface.html)"
- name: Mvc\Model\Binder\BindableInterface::getModelName
  id: api/phalcon_mvc_model_binder_bindableinterface#getmodelname
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Binder\BindableInterface
  description: "### abstract public **getModelName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder_BindableInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Binder_BindableInterface.html)"
- name: Mvc\Model\Criteria
  id: api/phalcon_mvc_model_criteria
  summary: This class is used to build the array parameter required by Phalcon\Mvc\Model::find() and Phalcon\Mvc\Model::findFirst() using an object-oriented interface
  description: "# Class **Phalcon\\Mvc\\Model\\Criteria**\n\n*implements* [*Phalcon\\Mvc\\Model\\CriteriaInterface*](phalcon_mvc_model_criteriainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/criteria.zep)\n\nThis class is used to build the array parameter required by Phalcon\\Mvc\\Model::find() and Phalcon\\Mvc\\Model::findFirst() using an object-oriented interface.\n\n``` php\n$robots = Robots::query()\n    ->where(\"type = :type:\")\n    ->andWhere(\"year < 2000\")\n    ->bind([\"type\" => \"mechanical\"])\n    ->limit(5, 10)\n    ->orderBy(\"name\")\n    ->execute();\n```\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public **getDI** ()\n\nReturns the DependencyInjector container\n\n### public **setModelName** (*mixed* $modelName)\n\nSet a model on which the query will be executed\n\n### public **getModelName** ()\n\nReturns an internal model name on which the criteria will be applied\n\n### public **bind** (*array* $bindParams, \\[*mixed* $merge\\])\n\nSets the bound parameters in the criteria This method replaces all previously set bound parameters\n\n### public **bindTypes** (*array* $bindTypes)\n\nSets the bind types in the criteria This method replaces all previously set bound parameters\n\n### public **distinct** (*mixed* $distinct)\n\nSets SELECT DISTINCT / SELECT ALL flag\n\n### public [*Phalcon\\Mvc\\Model\\Criteria*](phalcon_mvc_model_criteria) **columns** (*string* \\| *array* $columns)\n\nSets the columns to be queried\n\n``` php\n$criteria->columns(\n    [\n        \"id\",\n        \"name\",\n    ]\n);\n```\n\n### public **join** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\], \\[*mixed* $type\\])\n\nAdds an INNER join to the query\n\n``` php\n$criteria->join(\"Robots\");\n$criteria->join(\"Robots\", \"r.id = RobotsParts.robots_id\");\n$criteria->join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n$criteria->join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\", \"LEFT\");\n```\n\n### public **innerJoin** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\])\n\nAdds an INNER join to the query\n\n``` php\n$criteria->innerJoin(\"Robots\");\n$criteria->innerJoin(\"Robots\", \"r.id = RobotsParts.robots_id\");\n$criteria->innerJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n```\n\n### public **leftJoin** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\])\n\nAdds a LEFT join to the query\n\n``` php\n$criteria->leftJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n```\n\n### public **rightJoin** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\])\n\nAdds a RIGHT join to the query\n\n``` php\n$criteria->rightJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n```\n\n### public **where** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\nSets the conditions parameter in the criteria\n\n### public **addWhere** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\nAppends a condition to the current conditions using an AND operator (deprecated)\n\n### public **andWhere** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\nAppends a condition to the current conditions using an AND operator\n\n### public **orWhere** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\nAppends a condition to the current conditions using an OR operator\n\n### public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)\n\nAppends a BETWEEN condition to the current conditions\n\n``` php\n$criteria->betweenWhere(\"price\", 100.25, 200.50);\n```\n\n### public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)\n\nAppends a NOT BETWEEN condition to the current conditions\n\n``` php\n$criteria->notBetweenWhere(\"price\", 100.25, 200.50);\n```\n\n### public **inWhere** (*mixed* $expr, *array* $values)\n\nAppends an IN condition to the current conditions\n\n``` php\n$criteria->inWhere(\"id\", [1, 2, 3]);\n```\n\n### public **notInWhere** (*mixed* $expr, *array* $values)\n\nAppends a NOT IN condition to the current conditions\n\n``` php\n$criteria->notInWhere(\"id\", [1, 2, 3]);\n```\n\n### public **conditions** (*mixed* $conditions)\n\nAdds the conditions parameter to the criteria\n\n### public **order** (*mixed* $orderColumns)\n\nAdds the order-by parameter to the criteria (deprecated)\n\n### public **orderBy** (*mixed* $orderColumns)\n\nAdds the order-by clause to the criteria\n\n### public **groupBy** (*mixed* $group)\n\nAdds the group-by clause to the criteria\n\n### public **having** (*mixed* $having)\n\nAdds the having clause to the criteria\n\n### public **limit** (*mixed* $limit, \\[*mixed* $offset\\])\n\nAdds the limit parameter to the criteria.\n\n``` php\n$criteria->limit(100);\n$criteria->limit(100, 200);\n$criteria->limit(\"100\", \"200\");\n```\n\n### public **forUpdate** (\\[*mixed* $forUpdate\\])\n\nAdds the “for_update” parameter to the criteria\n\n### public **sharedLock** (\\[*mixed* $sharedLock\\])\n\nAdds the “shared_lock” parameter to the criteria\n\n### public **cache** (*array* $cache)\n\nSets the cache options in the criteria This method replaces all previously set cache options\n\n### public **getWhere** ()\n\nReturns the conditions parameter in the criteria\n\n### public *string* \\| *array* \\| *null* **getColumns** ()\n\nReturns the columns to be queried\n\n### public **getConditions** ()\n\nReturns the conditions parameter in the criteria\n\n### public *int* \\| *array* \\| *null* **getLimit** ()\n\nReturns the limit parameter in the criteria, which will be an integer if limit was set without an offset, an array with ‘number’ and ‘offset’ keys if an offset was set with the limit, or null if limit has not been set.\n\n### public **getOrderBy** ()\n\nReturns the order clause in the criteria\n\n### public **getGroupBy** ()\n\nReturns the group clause in the criteria\n\n### public **getHaving** ()\n\nReturns the having clause in the criteria\n\n### public *array* **getParams** ()\n\nReturns all the parameters defined in the criteria\n\n### public static **fromInput** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector, *mixed* $modelName, *array* $data, \\[*mixed* $operator\\])\n\nBuilds a Phalcon\\Mvc\\Model\\Criteria based on an input array like \\_POST\n\n### public **execute** ()\n\nExecutes a find using the parameters built with the criteria\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Criteria.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Criteria.html)"
- name: Mvc\Model\Criteria::addWhere
  id: api/phalcon_mvc_model_criteria#addwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **addWhere** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    Appends a condition to the current conditions using an AND operator (deprecated)
- name: Mvc\Model\Criteria::andWhere
  id: api/phalcon_mvc_model_criteria#andwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **andWhere** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    Appends a condition to the current conditions using an AND operator
- name: Mvc\Model\Criteria::betweenWhere
  id: api/phalcon_mvc_model_criteria#betweenwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)

    Appends a BETWEEN condition to the current conditions

    ``` php
    $criteria->betweenWhere("price", 100.25, 200.50);
    ```
- name: Mvc\Model\Criteria::bind
  id: api/phalcon_mvc_model_criteria#bind
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **bind** (*array* $bindParams, \[*mixed* $merge\])

    Sets the bound parameters in the criteria This method replaces all previously set bound parameters
- name: Mvc\Model\Criteria::bindTypes
  id: api/phalcon_mvc_model_criteria#bindtypes
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **bindTypes** (*array* $bindTypes)

    Sets the bind types in the criteria This method replaces all previously set bound parameters
- name: Mvc\Model\Criteria::cache
  id: api/phalcon_mvc_model_criteria#cache
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **cache** (*array* $cache)

    Sets the cache options in the criteria This method replaces all previously set cache options
- name: Mvc\Model\Criteria::columns
  id: api/phalcon_mvc_model_criteria#columns
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public [*Phalcon\Mvc\Model\Criteria*](phalcon_mvc_model_criteria) **columns** (*string* \| *array* $columns)

    Sets the columns to be queried

    ``` php
    $criteria->columns(
        [
            "id",
            "name",
        ]
    );
    ```
- name: Mvc\Model\Criteria::conditions
  id: api/phalcon_mvc_model_criteria#conditions
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **conditions** (*mixed* $conditions)

    Adds the conditions parameter to the criteria
- name: Mvc\Model\Criteria::distinct
  id: api/phalcon_mvc_model_criteria#distinct
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **distinct** (*mixed* $distinct)

    Sets SELECT DISTINCT / SELECT ALL flag
- name: Mvc\Model\Criteria::execute
  id: api/phalcon_mvc_model_criteria#execute
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Criteria
  description: "### public **execute** ()\n\nExecutes a find using the parameters built with the criteria\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Criteria.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Criteria.html)"
- name: Mvc\Model\Criteria::forUpdate
  id: api/phalcon_mvc_model_criteria#forupdate
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **forUpdate** (\[*mixed* $forUpdate\])

    Adds the “for_update” parameter to the criteria
- name: Mvc\Model\Criteria::fromInput
  id: api/phalcon_mvc_model_criteria#frominput
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public static **fromInput** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector, *mixed* $modelName, *array* $data, \[*mixed* $operator\])

    Builds a Phalcon\Mvc\Model\Criteria based on an input array like \_POST
- name: Mvc\Model\Criteria::getColumns
  id: api/phalcon_mvc_model_criteria#getcolumns
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public *string* \| *array* \| *null* **getColumns** ()

    Returns the columns to be queried
- name: Mvc\Model\Criteria::getConditions
  id: api/phalcon_mvc_model_criteria#getconditions
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **getConditions** ()

    Returns the conditions parameter in the criteria
- name: Mvc\Model\Criteria::getDI
  id: api/phalcon_mvc_model_criteria#getdi
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **getDI** ()

    Returns the DependencyInjector container
- name: Mvc\Model\Criteria::getGroupBy
  id: api/phalcon_mvc_model_criteria#getgroupby
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **getGroupBy** ()

    Returns the group clause in the criteria
- name: Mvc\Model\Criteria::getHaving
  id: api/phalcon_mvc_model_criteria#gethaving
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **getHaving** ()

    Returns the having clause in the criteria
- name: Mvc\Model\Criteria::getLimit
  id: api/phalcon_mvc_model_criteria#getlimit
  summary: Returns the limit parameter in the criteria, which will be an integer if limit was set without an offset, an array with ‘number’ and ‘offset’ keys if an offset was set with the limit, or null if limit has not been set
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public *int* \| *array* \| *null* **getLimit** ()

    Returns the limit parameter in the criteria, which will be an integer if limit was set without an offset, an array with ‘number’ and ‘offset’ keys if an offset was set with the limit, or null if limit has not been set.
- name: Mvc\Model\Criteria::getModelName
  id: api/phalcon_mvc_model_criteria#getmodelname
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **getModelName** ()

    Returns an internal model name on which the criteria will be applied
- name: Mvc\Model\Criteria::getOrderBy
  id: api/phalcon_mvc_model_criteria#getorderby
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **getOrderBy** ()

    Returns the order clause in the criteria
- name: Mvc\Model\Criteria::getParams
  id: api/phalcon_mvc_model_criteria#getparams
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public *array* **getParams** ()

    Returns all the parameters defined in the criteria
- name: Mvc\Model\Criteria::getWhere
  id: api/phalcon_mvc_model_criteria#getwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **getWhere** ()

    Returns the conditions parameter in the criteria
- name: Mvc\Model\Criteria::groupBy
  id: api/phalcon_mvc_model_criteria#groupby
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **groupBy** (*mixed* $group)

    Adds the group-by clause to the criteria
- name: Mvc\Model\Criteria::having
  id: api/phalcon_mvc_model_criteria#having
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **having** (*mixed* $having)

    Adds the having clause to the criteria
- name: Mvc\Model\Criteria::innerJoin
  id: api/phalcon_mvc_model_criteria#innerjoin
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **innerJoin** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\])

    Adds an INNER join to the query

    ``` php
    $criteria->innerJoin("Robots");
    $criteria->innerJoin("Robots", "r.id = RobotsParts.robots_id");
    $criteria->innerJoin("Robots", "r.id = RobotsParts.robots_id", "r");
    ```
- name: Mvc\Model\Criteria::inWhere
  id: api/phalcon_mvc_model_criteria#inwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **inWhere** (*mixed* $expr, *array* $values)

    Appends an IN condition to the current conditions

    ``` php
    $criteria->inWhere("id", [1, 2, 3]);
    ```
- name: Mvc\Model\Criteria::join
  id: api/phalcon_mvc_model_criteria#join
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **join** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\], \[*mixed* $type\])

    Adds an INNER join to the query

    ``` php
    $criteria->join("Robots");
    $criteria->join("Robots", "r.id = RobotsParts.robots_id");
    $criteria->join("Robots", "r.id = RobotsParts.robots_id", "r");
    $criteria->join("Robots", "r.id = RobotsParts.robots_id", "r", "LEFT");
    ```
- name: Mvc\Model\Criteria::leftJoin
  id: api/phalcon_mvc_model_criteria#leftjoin
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **leftJoin** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\])

    Adds a LEFT join to the query

    ``` php
    $criteria->leftJoin("Robots", "r.id = RobotsParts.robots_id", "r");
    ```
- name: Mvc\Model\Criteria::limit
  id: api/phalcon_mvc_model_criteria#limit
  summary: Adds the limit parameter to the criteria
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **limit** (*mixed* $limit, \[*mixed* $offset\])

    Adds the limit parameter to the criteria.

    ``` php
    $criteria->limit(100);
    $criteria->limit(100, 200);
    $criteria->limit("100", "200");
    ```
- name: Mvc\Model\Criteria::notBetweenWhere
  id: api/phalcon_mvc_model_criteria#notbetweenwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)

    Appends a NOT BETWEEN condition to the current conditions

    ``` php
    $criteria->notBetweenWhere("price", 100.25, 200.50);
    ```
- name: Mvc\Model\Criteria::notInWhere
  id: api/phalcon_mvc_model_criteria#notinwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **notInWhere** (*mixed* $expr, *array* $values)

    Appends a NOT IN condition to the current conditions

    ``` php
    $criteria->notInWhere("id", [1, 2, 3]);
    ```
- name: Mvc\Model\Criteria::order
  id: api/phalcon_mvc_model_criteria#order
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **order** (*mixed* $orderColumns)

    Adds the order-by parameter to the criteria (deprecated)
- name: Mvc\Model\Criteria::orderBy
  id: api/phalcon_mvc_model_criteria#orderby
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **orderBy** (*mixed* $orderColumns)

    Adds the order-by clause to the criteria
- name: Mvc\Model\Criteria::orWhere
  id: api/phalcon_mvc_model_criteria#orwhere
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **orWhere** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    Appends a condition to the current conditions using an OR operator
- name: Mvc\Model\Criteria::rightJoin
  id: api/phalcon_mvc_model_criteria#rightjoin
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **rightJoin** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\])

    Adds a RIGHT join to the query

    ``` php
    $criteria->rightJoin("Robots", "r.id = RobotsParts.robots_id", "r");
    ```
- name: Mvc\Model\Criteria::setDI
  id: api/phalcon_mvc_model_criteria#setdi
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Mvc\Model\Criteria::setModelName
  id: api/phalcon_mvc_model_criteria#setmodelname
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **setModelName** (*mixed* $modelName)

    Set a model on which the query will be executed
- name: Mvc\Model\Criteria::sharedLock
  id: api/phalcon_mvc_model_criteria#sharedlock
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **sharedLock** (\[*mixed* $sharedLock\])

    Adds the “shared_lock” parameter to the criteria
- name: Mvc\Model\Criteria::where
  id: api/phalcon_mvc_model_criteria#where
  summary: null
  belongs_to: Mvc\Model\Criteria
  description: |-
    ### public **where** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    Sets the conditions parameter in the criteria
- name: Mvc\Model\CriteriaInterface
  id: api/phalcon_mvc_model_criteriainterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\CriteriaInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/criteriainterface.zep)\n\n## Methods\n\n### abstract public **setModelName** (*mixed* $modelName)\n\n...\n\n### abstract public **getModelName** ()\n\n...\n\n### abstract public **bind** (*array* $bindParams)\n\n...\n\n### abstract public **bindTypes** (*array* $bindTypes)\n\n...\n\n### abstract public **where** (*mixed* $conditions)\n\n...\n\n### abstract public **conditions** (*mixed* $conditions)\n\n...\n\n### abstract public **orderBy** (*mixed* $orderColumns)\n\n...\n\n### abstract public **limit** (*mixed* $limit, \\[*mixed* $offset\\])\n\n...\n\n### abstract public **forUpdate** (\\[*mixed* $forUpdate\\])\n\n...\n\n### abstract public **sharedLock** (\\[*mixed* $sharedLock\\])\n\n...\n\n### abstract public **andWhere** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\n...\n\n### abstract public **orWhere** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\n...\n\n### abstract public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)\n\n...\n\n### abstract public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)\n\n...\n\n### abstract public **inWhere** (*mixed* $expr, *array* $values)\n\n...\n\n### abstract public **notInWhere** (*mixed* $expr, *array* $values)\n\n...\n\n### abstract public **getWhere** ()\n\n...\n\n### abstract public **getConditions** ()\n\n...\n\n### abstract public **getLimit** ()\n\n...\n\n### abstract public **getOrderBy** ()\n\n...\n\n### abstract public **getParams** ()\n\n...\n\n### abstract public **execute** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_CriteriaInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_CriteriaInterface.html)"
- name: Mvc\Model\CriteriaInterface::andWhere
  id: api/phalcon_mvc_model_criteriainterface#andwhere
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **andWhere** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    ...
- name: Mvc\Model\CriteriaInterface::betweenWhere
  id: api/phalcon_mvc_model_criteriainterface#betweenwhere
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)

    ...
- name: Mvc\Model\CriteriaInterface::bind
  id: api/phalcon_mvc_model_criteriainterface#bind
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **bind** (*array* $bindParams)

    ...
- name: Mvc\Model\CriteriaInterface::bindTypes
  id: api/phalcon_mvc_model_criteriainterface#bindtypes
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **bindTypes** (*array* $bindTypes)

    ...
- name: Mvc\Model\CriteriaInterface::conditions
  id: api/phalcon_mvc_model_criteriainterface#conditions
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **conditions** (*mixed* $conditions)

    ...
- name: Mvc\Model\CriteriaInterface::execute
  id: api/phalcon_mvc_model_criteriainterface#execute
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\CriteriaInterface
  description: "### abstract public **execute** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_CriteriaInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_CriteriaInterface.html)"
- name: Mvc\Model\CriteriaInterface::forUpdate
  id: api/phalcon_mvc_model_criteriainterface#forupdate
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **forUpdate** (\[*mixed* $forUpdate\])

    ...
- name: Mvc\Model\CriteriaInterface::getConditions
  id: api/phalcon_mvc_model_criteriainterface#getconditions
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **getConditions** ()

    ...
- name: Mvc\Model\CriteriaInterface::getLimit
  id: api/phalcon_mvc_model_criteriainterface#getlimit
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **getLimit** ()

    ...
- name: Mvc\Model\CriteriaInterface::getModelName
  id: api/phalcon_mvc_model_criteriainterface#getmodelname
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **getModelName** ()

    ...
- name: Mvc\Model\CriteriaInterface::getOrderBy
  id: api/phalcon_mvc_model_criteriainterface#getorderby
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **getOrderBy** ()

    ...
- name: Mvc\Model\CriteriaInterface::getParams
  id: api/phalcon_mvc_model_criteriainterface#getparams
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **getParams** ()

    ...
- name: Mvc\Model\CriteriaInterface::getWhere
  id: api/phalcon_mvc_model_criteriainterface#getwhere
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **getWhere** ()

    ...
- name: Mvc\Model\CriteriaInterface::inWhere
  id: api/phalcon_mvc_model_criteriainterface#inwhere
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **inWhere** (*mixed* $expr, *array* $values)

    ...
- name: Mvc\Model\CriteriaInterface::limit
  id: api/phalcon_mvc_model_criteriainterface#limit
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **limit** (*mixed* $limit, \[*mixed* $offset\])

    ...
- name: Mvc\Model\CriteriaInterface::notBetweenWhere
  id: api/phalcon_mvc_model_criteriainterface#notbetweenwhere
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum)

    ...
- name: Mvc\Model\CriteriaInterface::notInWhere
  id: api/phalcon_mvc_model_criteriainterface#notinwhere
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **notInWhere** (*mixed* $expr, *array* $values)

    ...
- name: Mvc\Model\CriteriaInterface::orderBy
  id: api/phalcon_mvc_model_criteriainterface#orderby
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **orderBy** (*mixed* $orderColumns)

    ...
- name: Mvc\Model\CriteriaInterface::orWhere
  id: api/phalcon_mvc_model_criteriainterface#orwhere
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **orWhere** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    ...
- name: Mvc\Model\CriteriaInterface::setModelName
  id: api/phalcon_mvc_model_criteriainterface#setmodelname
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **setModelName** (*mixed* $modelName)

    ...
- name: Mvc\Model\CriteriaInterface::sharedLock
  id: api/phalcon_mvc_model_criteriainterface#sharedlock
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **sharedLock** (\[*mixed* $sharedLock\])

    ...
- name: Mvc\Model\CriteriaInterface::where
  id: api/phalcon_mvc_model_criteriainterface#where
  summary: null
  belongs_to: Mvc\Model\CriteriaInterface
  description: |-
    ### abstract public **where** (*mixed* $conditions)

    ...
- name: Mvc\Model\Exception
  id: api/phalcon_mvc_model_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Exception.html)"
- name: Mvc\Model\Manager
  id: api/phalcon_mvc_model_manager
  summary: This components controls the initialization of models, keeping record of relations between the different models of the application
  description: "# Class **Phalcon\\Mvc\\Model\\Manager**\n\n*implements* [*Phalcon\\Mvc\\Model\\ManagerInterface*](phalcon_mvc_model_managerinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/manager.zep)\n\nThis components controls the initialization of models, keeping record of relations between the different models of the application.\n\nA ModelsManager is injected to a model via a Dependency Injector/Services Container such as Phalcon\\Di.\n\n``` php\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\n\n$di = new Di();\n\n$di->set(\n    \"modelsManager\",\n    function() {\n        return new ModelsManager();\n    }\n);\n\n$robot = new Robots($di);\n```\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public **getDI** ()\n\nReturns the DependencyInjector container\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets a global events manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **setCustomEventsManager** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets a custom events manager for a specific model\n\n### public **getCustomEventsManager** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns a custom events manager related to a model\n\n### public **initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nInitializes a model in the model manager\n\n### public **isInitialized** (*mixed* $modelName)\n\nCheck whether a model is already initialized\n\n### public **getLastInitialized** ()\n\nGet last initialized model\n\n### public **load** (*mixed* $modelName, \\[*mixed* $newInstance\\])\n\nLoads a model throwing an exception if it doesn’t exist\n\n### public **setModelSource** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $source)\n\nSets the mapped source for a model\n\n### final public **isVisibleModelProperty** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $property)\n\nCheck whether a model property is declared as public.\n\n``` php\n$isPublic = $manager->isVisibleModelProperty(\n    new Robots(),\n    \"name\"\n);\n```\n\n### public **getModelSource** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the mapped source for a model\n\n### public **setModelSchema** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $schema)\n\nSets the mapped schema for a model\n\n### public **getModelSchema** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the mapped schema for a model\n\n### public **setConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)\n\nSets both write and read connection service for a model\n\n### public **setWriteConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)\n\nSets write connection service for a model\n\n### public **setReadConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)\n\nSets read connection service for a model\n\n### public **getReadConnection** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the connection to read data related to a model\n\n### public **getWriteConnection** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the connection to write data related to a model\n\n### protected **\\_getConnection** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionServices)\n\nReturns the connection to read or write data related to a model depending on the connection services.\n\n### public **getReadConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the connection service name used to read data related to a model\n\n### public **getWriteConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the connection service name used to write data related to a model\n\n### public **\\_getConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionServices)\n\nReturns the connection service name used to read or write data related to a model depending on the connection services\n\n### public **notifyEvent** (*mixed* $eventName, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReceives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model\n\n### public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $eventName, *mixed* $data)\n\nDispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that a least one was implemented\n\n### public **addBehavior** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\Mvc\\Model\\BehaviorInterface*](phalcon_mvc_model_behaviorinterface) $behavior)\n\nBinds a behavior to a model\n\n### public **keepSnapshots** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $keepSnapshots)\n\nSets if a model must keep snapshots\n\n### public **isKeepingSnapshots** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nChecks if a model is keeping snapshots for the queried records\n\n### public **useDynamicUpdate** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $dynamicUpdate)\n\nSets if a model must use dynamic update instead of the all-field update\n\n### public **isUsingDynamicUpdate** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nChecks if a model is using dynamic update instead of all-field update\n\n### public [*Phalcon\\Mvc\\Model\\Relation*](phalcon_mvc_model_relation) **addHasOne** ([*Phalcon\\Mvc\\Model*](phalcon_mvc_model) $model, *mixed* $fields, *string* $referencedModel, *mixed* $referencedFields, \\[*array* $options\\])\n\nSetup a 1-1 relation between two models\n\n### public [*Phalcon\\Mvc\\Model\\Relation*](phalcon_mvc_model_relation) **addBelongsTo** ([*Phalcon\\Mvc\\Model*](phalcon_mvc_model) $model, *mixed* $fields, *string* $referencedModel, *mixed* $referencedFields, \\[*array* $options\\])\n\nSetup a relation reverse many to one between two models\n\n### public **addHasMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *string* $referencedModel, *mixed* $referencedFields, \\[*array* $options\\])\n\nSetup a relation 1-n between two models\n\n### public [*Phalcon\\Mvc\\Model\\Relation*](phalcon_mvc_model_relation) **addHasManyToMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $fields, *string* $intermediateModel, *string* $intermediateFields, *string* $intermediateReferencedFields, *string* $referencedModel, *string* $referencedFields, \\[*array* $options\\])\n\nSetups a relation n-m between two models\n\n### public **existsBelongsTo** (*mixed* $modelName, *mixed* $modelRelation)\n\nChecks whether a model has a belongsTo relation with another model\n\n### public **existsHasMany** (*mixed* $modelName, *mixed* $modelRelation)\n\nChecks whether a model has a hasMany relation with another model\n\n### public **existsHasOne** (*mixed* $modelName, *mixed* $modelRelation)\n\nChecks whether a model has a hasOne relation with another model\n\n### public **existsHasManyToMany** (*mixed* $modelName, *mixed* $modelRelation)\n\nChecks whether a model has a hasManyToMany relation with another model\n\n### public **getRelationByAlias** (*mixed* $modelName, *mixed* $alias)\n\nReturns a relation by its alias\n\n### final protected **\\_mergeFindParameters** (*mixed* $findParamsOne, *mixed* $findParamsTwo)\n\nMerge two arrays of find parameters\n\n### public [*Phalcon\\Mvc\\Model\\Resultset\\Simple*](phalcon_mvc_model_resultset_simple) \\| [*Phalcon\\Mvc\\Model\\Resultset\\Simple*](phalcon_mvc_model_resultset_simple) \\| *int* \\| *false* **getRelationRecords** ([*Phalcon\\Mvc\\Model\\RelationInterface*](phalcon_mvc_model_relationinterface) $relation, *mixed* $method, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record, \\[*mixed* $parameters\\])\n\nHelper method to query records based on a relation definition\n\n### public **getReusableRecords** (*mixed* $modelName, *mixed* $key)\n\nReturns a reusable object from the internal list\n\n### public **setReusableRecords** (*mixed* $modelName, *mixed* $key, *mixed* $records)\n\nStores a reusable record in the internal list\n\n### public **clearReusableObjects** ()\n\nClears the internal reusable list\n\n### public **getBelongsToRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record, \\[*mixed* $parameters\\])\n\nGets belongsTo related records from a model\n\n### public **getHasManyRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record, \\[*mixed* $parameters\\])\n\nGets hasMany related records from a model\n\n### public **getHasOneRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record, \\[*mixed* $parameters\\])\n\nGets belongsTo related records from a model\n\n### public **getBelongsTo** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nGets all the belongsTo relations defined in a model\n\n``` php\n$relations = $modelsManager->getBelongsTo(\n    new Robots()\n);\n```\n\n### public **getHasMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nGets hasMany relations defined on a model\n\n### public **getHasOne** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nGets hasOne relations defined on a model\n\n### public **getHasManyToMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nGets hasManyToMany relations defined on a model\n\n### public **getHasOneAndHasMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nGets hasOne relations defined on a model\n\n### public **getRelations** (*mixed* $modelName)\n\nQuery all the relationships defined on a model\n\n### public **getRelationsBetween** (*mixed* $first, *mixed* $second)\n\nQuery the first relationship defined between two models\n\n### public **createQuery** (*mixed* $phql)\n\nCreates a Phalcon\\Mvc\\Model\\Query without execute it\n\n### public **executeQuery** (*mixed* $phql, \\[*mixed* $placeholders\\], \\[*mixed* $types\\])\n\nCreates a Phalcon\\Mvc\\Model\\Query and execute it\n\n### public **createBuilder** (\\[*mixed* $params\\])\n\nCreates a Phalcon\\Mvc\\Model\\Query\\Builder\n\n### public **getLastQuery** ()\n\nReturns the last query created or executed in the models manager\n\n### public **registerNamespaceAlias** (*mixed* $alias, *mixed* $namespaceName)\n\nRegisters shorter aliases for namespaces in PHQL statements\n\n### public **getNamespaceAlias** (*mixed* $alias)\n\nReturns a real namespace from its alias\n\n### public **getNamespaceAliases** ()\n\nReturns all the registered namespace aliases\n\n### public **\\_\\_destruct** ()\n\nDestroys the current PHQL cache\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Manager.html)"
- name: Mvc\Model\Manager::addBehavior
  id: api/phalcon_mvc_model_manager#addbehavior
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **addBehavior** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\Mvc\Model\BehaviorInterface*](phalcon_mvc_model_behaviorinterface) $behavior)

    Binds a behavior to a model
- name: Mvc\Model\Manager::addBelongsTo
  id: api/phalcon_mvc_model_manager#addbelongsto
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public [*Phalcon\Mvc\Model\Relation*](phalcon_mvc_model_relation) **addBelongsTo** ([*Phalcon\Mvc\Model*](phalcon_mvc_model) $model, *mixed* $fields, *string* $referencedModel, *mixed* $referencedFields, \[*array* $options\])

    Setup a relation reverse many to one between two models
- name: Mvc\Model\Manager::addHasMany
  id: api/phalcon_mvc_model_manager#addhasmany
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **addHasMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *string* $referencedModel, *mixed* $referencedFields, \[*array* $options\])

    Setup a relation 1-n between two models
- name: Mvc\Model\Manager::addHasManyToMany
  id: api/phalcon_mvc_model_manager#addhasmanytomany
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public [*Phalcon\Mvc\Model\Relation*](phalcon_mvc_model_relation) **addHasManyToMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *string* $fields, *string* $intermediateModel, *string* $intermediateFields, *string* $intermediateReferencedFields, *string* $referencedModel, *string* $referencedFields, \[*array* $options\])

    Setups a relation n-m between two models
- name: Mvc\Model\Manager::addHasOne
  id: api/phalcon_mvc_model_manager#addhasone
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public [*Phalcon\Mvc\Model\Relation*](phalcon_mvc_model_relation) **addHasOne** ([*Phalcon\Mvc\Model*](phalcon_mvc_model) $model, *mixed* $fields, *string* $referencedModel, *mixed* $referencedFields, \[*array* $options\])

    Setup a 1-1 relation between two models
- name: Mvc\Model\Manager::clearReusableObjects
  id: api/phalcon_mvc_model_manager#clearreusableobjects
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **clearReusableObjects** ()

    Clears the internal reusable list
- name: Mvc\Model\Manager::createBuilder
  id: api/phalcon_mvc_model_manager#createbuilder
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **createBuilder** (\[*mixed* $params\])

    Creates a Phalcon\Mvc\Model\Query\Builder
- name: Mvc\Model\Manager::createQuery
  id: api/phalcon_mvc_model_manager#createquery
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **createQuery** (*mixed* $phql)

    Creates a Phalcon\Mvc\Model\Query without execute it
- name: Mvc\Model\Manager::executeQuery
  id: api/phalcon_mvc_model_manager#executequery
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **executeQuery** (*mixed* $phql, \[*mixed* $placeholders\], \[*mixed* $types\])

    Creates a Phalcon\Mvc\Model\Query and execute it
- name: Mvc\Model\Manager::existsBelongsTo
  id: api/phalcon_mvc_model_manager#existsbelongsto
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **existsBelongsTo** (*mixed* $modelName, *mixed* $modelRelation)

    Checks whether a model has a belongsTo relation with another model
- name: Mvc\Model\Manager::existsHasMany
  id: api/phalcon_mvc_model_manager#existshasmany
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **existsHasMany** (*mixed* $modelName, *mixed* $modelRelation)

    Checks whether a model has a hasMany relation with another model
- name: Mvc\Model\Manager::existsHasManyToMany
  id: api/phalcon_mvc_model_manager#existshasmanytomany
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **existsHasManyToMany** (*mixed* $modelName, *mixed* $modelRelation)

    Checks whether a model has a hasManyToMany relation with another model
- name: Mvc\Model\Manager::existsHasOne
  id: api/phalcon_mvc_model_manager#existshasone
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **existsHasOne** (*mixed* $modelName, *mixed* $modelRelation)

    Checks whether a model has a hasOne relation with another model
- name: Mvc\Model\Manager::getBelongsTo
  id: api/phalcon_mvc_model_manager#getbelongsto
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getBelongsTo** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Gets all the belongsTo relations defined in a model

    ``` php
    $relations = $modelsManager->getBelongsTo(
        new Robots()
    );
    ```
- name: Mvc\Model\Manager::getBelongsToRecords
  id: api/phalcon_mvc_model_manager#getbelongstorecords
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getBelongsToRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $record, \[*mixed* $parameters\])

    Gets belongsTo related records from a model
- name: Mvc\Model\Manager::getCustomEventsManager
  id: api/phalcon_mvc_model_manager#getcustomeventsmanager
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getCustomEventsManager** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns a custom events manager related to a model
- name: Mvc\Model\Manager::getDI
  id: api/phalcon_mvc_model_manager#getdi
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getDI** ()

    Returns the DependencyInjector container
- name: Mvc\Model\Manager::getEventsManager
  id: api/phalcon_mvc_model_manager#geteventsmanager
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Mvc\Model\Manager::getHasMany
  id: api/phalcon_mvc_model_manager#gethasmany
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getHasMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Gets hasMany relations defined on a model
- name: Mvc\Model\Manager::getHasManyRecords
  id: api/phalcon_mvc_model_manager#gethasmanyrecords
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getHasManyRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $record, \[*mixed* $parameters\])

    Gets hasMany related records from a model
- name: Mvc\Model\Manager::getHasManyToMany
  id: api/phalcon_mvc_model_manager#gethasmanytomany
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getHasManyToMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Gets hasManyToMany relations defined on a model
- name: Mvc\Model\Manager::getHasOne
  id: api/phalcon_mvc_model_manager#gethasone
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getHasOne** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Gets hasOne relations defined on a model
- name: Mvc\Model\Manager::getHasOneAndHasMany
  id: api/phalcon_mvc_model_manager#gethasoneandhasmany
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getHasOneAndHasMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Gets hasOne relations defined on a model
- name: Mvc\Model\Manager::getHasOneRecords
  id: api/phalcon_mvc_model_manager#gethasonerecords
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getHasOneRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $record, \[*mixed* $parameters\])

    Gets belongsTo related records from a model
- name: Mvc\Model\Manager::getLastInitialized
  id: api/phalcon_mvc_model_manager#getlastinitialized
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getLastInitialized** ()

    Get last initialized model
- name: Mvc\Model\Manager::getLastQuery
  id: api/phalcon_mvc_model_manager#getlastquery
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getLastQuery** ()

    Returns the last query created or executed in the models manager
- name: Mvc\Model\Manager::getModelSchema
  id: api/phalcon_mvc_model_manager#getmodelschema
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getModelSchema** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the mapped schema for a model
- name: Mvc\Model\Manager::getModelSource
  id: api/phalcon_mvc_model_manager#getmodelsource
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getModelSource** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the mapped source for a model
- name: Mvc\Model\Manager::getNamespaceAlias
  id: api/phalcon_mvc_model_manager#getnamespacealias
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getNamespaceAlias** (*mixed* $alias)

    Returns a real namespace from its alias
- name: Mvc\Model\Manager::getNamespaceAliases
  id: api/phalcon_mvc_model_manager#getnamespacealiases
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getNamespaceAliases** ()

    Returns all the registered namespace aliases
- name: Mvc\Model\Manager::getReadConnection
  id: api/phalcon_mvc_model_manager#getreadconnection
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getReadConnection** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the connection to read data related to a model
- name: Mvc\Model\Manager::getReadConnectionService
  id: api/phalcon_mvc_model_manager#getreadconnectionservice
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getReadConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the connection service name used to read data related to a model
- name: Mvc\Model\Manager::getRelationByAlias
  id: api/phalcon_mvc_model_manager#getrelationbyalias
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getRelationByAlias** (*mixed* $modelName, *mixed* $alias)

    Returns a relation by its alias

    ### final protected **\_mergeFindParameters** (*mixed* $findParamsOne, *mixed* $findParamsTwo)

    Merge two arrays of find parameters
- name: Mvc\Model\Manager::getRelationRecords
  id: api/phalcon_mvc_model_manager#getrelationrecords
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public [*Phalcon\Mvc\Model\Resultset\Simple*](phalcon_mvc_model_resultset_simple) \| [*Phalcon\Mvc\Model\Resultset\Simple*](phalcon_mvc_model_resultset_simple) \| *int* \| *false* **getRelationRecords** ([*Phalcon\Mvc\Model\RelationInterface*](phalcon_mvc_model_relationinterface) $relation, *mixed* $method, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $record, \[*mixed* $parameters\])

    Helper method to query records based on a relation definition
- name: Mvc\Model\Manager::getRelations
  id: api/phalcon_mvc_model_manager#getrelations
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getRelations** (*mixed* $modelName)

    Query all the relationships defined on a model
- name: Mvc\Model\Manager::getRelationsBetween
  id: api/phalcon_mvc_model_manager#getrelationsbetween
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getRelationsBetween** (*mixed* $first, *mixed* $second)

    Query the first relationship defined between two models
- name: Mvc\Model\Manager::getReusableRecords
  id: api/phalcon_mvc_model_manager#getreusablerecords
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getReusableRecords** (*mixed* $modelName, *mixed* $key)

    Returns a reusable object from the internal list
- name: Mvc\Model\Manager::getWriteConnection
  id: api/phalcon_mvc_model_manager#getwriteconnection
  summary: Returns the connection to read or write data related to a model depending on the connection services
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getWriteConnection** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the connection to write data related to a model

    ### protected **\_getConnection** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionServices)

    Returns the connection to read or write data related to a model depending on the connection services.
- name: Mvc\Model\Manager::getWriteConnectionService
  id: api/phalcon_mvc_model_manager#getwriteconnectionservice
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **getWriteConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the connection service name used to write data related to a model
- name: Mvc\Model\Manager::initialize
  id: api/phalcon_mvc_model_manager#initialize
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **initialize** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Initializes a model in the model manager
- name: Mvc\Model\Manager::isInitialized
  id: api/phalcon_mvc_model_manager#isinitialized
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **isInitialized** (*mixed* $modelName)

    Check whether a model is already initialized
- name: Mvc\Model\Manager::isKeepingSnapshots
  id: api/phalcon_mvc_model_manager#iskeepingsnapshots
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **isKeepingSnapshots** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Checks if a model is keeping snapshots for the queried records
- name: Mvc\Model\Manager::isUsingDynamicUpdate
  id: api/phalcon_mvc_model_manager#isusingdynamicupdate
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **isUsingDynamicUpdate** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Checks if a model is using dynamic update instead of all-field update
- name: Mvc\Model\Manager::isVisibleModelProperty
  id: api/phalcon_mvc_model_manager#isvisiblemodelproperty
  summary: Check whether a model property is declared as public
  belongs_to: Mvc\Model\Manager
  description: |-
    ### final public **isVisibleModelProperty** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $property)

    Check whether a model property is declared as public.

    ``` php
    $isPublic = $manager->isVisibleModelProperty(
        new Robots(),
        "name"
    );
    ```
- name: Mvc\Model\Manager::keepSnapshots
  id: api/phalcon_mvc_model_manager#keepsnapshots
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **keepSnapshots** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $keepSnapshots)

    Sets if a model must keep snapshots
- name: Mvc\Model\Manager::load
  id: api/phalcon_mvc_model_manager#load
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **load** (*mixed* $modelName, \[*mixed* $newInstance\])

    Loads a model throwing an exception if it doesn’t exist
- name: Mvc\Model\Manager::missingMethod
  id: api/phalcon_mvc_model_manager#missingmethod
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **missingMethod** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $eventName, *mixed* $data)

    Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that a least one was implemented
- name: Mvc\Model\Manager::notifyEvent
  id: api/phalcon_mvc_model_manager#notifyevent
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **notifyEvent** (*mixed* $eventName, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Receives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model
- name: Mvc\Model\Manager::registerNamespaceAlias
  id: api/phalcon_mvc_model_manager#registernamespacealias
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **registerNamespaceAlias** (*mixed* $alias, *mixed* $namespaceName)

    Registers shorter aliases for namespaces in PHQL statements
- name: Mvc\Model\Manager::setConnectionService
  id: api/phalcon_mvc_model_manager#setconnectionservice
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)

    Sets both write and read connection service for a model
- name: Mvc\Model\Manager::setCustomEventsManager
  id: api/phalcon_mvc_model_manager#setcustomeventsmanager
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setCustomEventsManager** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets a custom events manager for a specific model
- name: Mvc\Model\Manager::setDI
  id: api/phalcon_mvc_model_manager#setdi
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Mvc\Model\Manager::setEventsManager
  id: api/phalcon_mvc_model_manager#seteventsmanager
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets a global events manager
- name: Mvc\Model\Manager::setModelSchema
  id: api/phalcon_mvc_model_manager#setmodelschema
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setModelSchema** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $schema)

    Sets the mapped schema for a model
- name: Mvc\Model\Manager::setModelSource
  id: api/phalcon_mvc_model_manager#setmodelsource
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setModelSource** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $source)

    Sets the mapped source for a model
- name: Mvc\Model\Manager::setReadConnectionService
  id: api/phalcon_mvc_model_manager#setreadconnectionservice
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setReadConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)

    Sets read connection service for a model
- name: Mvc\Model\Manager::setReusableRecords
  id: api/phalcon_mvc_model_manager#setreusablerecords
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setReusableRecords** (*mixed* $modelName, *mixed* $key, *mixed* $records)

    Stores a reusable record in the internal list
- name: Mvc\Model\Manager::setWriteConnectionService
  id: api/phalcon_mvc_model_manager#setwriteconnectionservice
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **setWriteConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)

    Sets write connection service for a model
- name: Mvc\Model\Manager::useDynamicUpdate
  id: api/phalcon_mvc_model_manager#usedynamicupdate
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **useDynamicUpdate** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $dynamicUpdate)

    Sets if a model must use dynamic update instead of the all-field update
- name: Mvc\Model\Manager::_getConnectionService
  id: api/phalcon_mvc_model_manager#_getconnectionservice
  summary: null
  belongs_to: Mvc\Model\Manager
  description: |-
    ### public **\_getConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionServices)

    Returns the connection service name used to read or write data related to a model depending on the connection services
- name: Mvc\Model\Manager::__destruct
  id: api/phalcon_mvc_model_manager#__destruct
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Manager
  description: "### public **\\_\\_destruct** ()\n\nDestroys the current PHQL cache\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Manager.html)"
- name: Mvc\Model\ManagerInterface
  id: api/phalcon_mvc_model_managerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\ManagerInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/managerinterface.zep)\n\n## Methods\n\n### abstract public **initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **setModelSource** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $source)\n\n...\n\n### abstract public **getModelSource** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **setModelSchema** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $schema)\n\n...\n\n### abstract public **getModelSchema** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **setConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)\n\n...\n\n### abstract public **setReadConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)\n\n...\n\n### abstract public **getReadConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **setWriteConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)\n\n...\n\n### abstract public **getWriteConnectionService** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getReadConnection** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getWriteConnection** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **isInitialized** (*mixed* $modelName)\n\n...\n\n### abstract public **getLastInitialized** ()\n\n...\n\n### abstract public **load** (*mixed* $modelName, \\[*mixed* $newInstance\\])\n\n...\n\n### abstract public **addHasOne** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *mixed* $referencedModel, *mixed* $referencedFields, \\[*mixed* $options\\])\n\n...\n\n### abstract public **addBelongsTo** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *mixed* $referencedModel, *mixed* $referencedFields, \\[*mixed* $options\\])\n\n...\n\n### abstract public **addHasMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *mixed* $referencedModel, *mixed* $referencedFields, \\[*mixed* $options\\])\n\n...\n\n### abstract public **existsBelongsTo** (*mixed* $modelName, *mixed* $modelRelation)\n\n...\n\n### abstract public **existsHasMany** (*mixed* $modelName, *mixed* $modelRelation)\n\n...\n\n### abstract public **existsHasOne** (*mixed* $modelName, *mixed* $modelRelation)\n\n...\n\n### abstract public **getBelongsToRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record, \\[*mixed* $parameters\\])\n\n...\n\n### abstract public **getHasManyRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record, \\[*mixed* $parameters\\])\n\n...\n\n### abstract public **getHasOneRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record, \\[*mixed* $parameters\\])\n\n...\n\n### abstract public **getBelongsTo** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getHasMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getHasOne** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getHasOneAndHasMany** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getRelations** (*mixed* $modelName)\n\n...\n\n### abstract public **getRelationsBetween** (*mixed* $first, *mixed* $second)\n\n...\n\n### abstract public **createQuery** (*mixed* $phql)\n\n...\n\n### abstract public **executeQuery** (*mixed* $phql, \\[*mixed* $placeholders\\])\n\n...\n\n### abstract public **createBuilder** (\\[*mixed* $params\\])\n\n...\n\n### abstract public **addBehavior** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\Mvc\\Model\\BehaviorInterface*](phalcon_mvc_model_behaviorinterface) $behavior)\n\n...\n\n### abstract public **notifyEvent** (*mixed* $eventName, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **missingMethod** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $eventName, *mixed* $data)\n\n...\n\n### abstract public **getLastQuery** ()\n\n...\n\n### abstract public **getRelationByAlias** (*mixed* $modelName, *mixed* $alias)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ManagerInterface.html)"
- name: Mvc\Model\ManagerInterface::addBehavior
  id: api/phalcon_mvc_model_managerinterface#addbehavior
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **addBehavior** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\Mvc\Model\BehaviorInterface*](phalcon_mvc_model_behaviorinterface) $behavior)

    ...
- name: Mvc\Model\ManagerInterface::addBelongsTo
  id: api/phalcon_mvc_model_managerinterface#addbelongsto
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **addBelongsTo** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *mixed* $referencedModel, *mixed* $referencedFields, \[*mixed* $options\])

    ...
- name: Mvc\Model\ManagerInterface::addHasMany
  id: api/phalcon_mvc_model_managerinterface#addhasmany
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **addHasMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *mixed* $referencedModel, *mixed* $referencedFields, \[*mixed* $options\])

    ...
- name: Mvc\Model\ManagerInterface::addHasOne
  id: api/phalcon_mvc_model_managerinterface#addhasone
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **addHasOne** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $fields, *mixed* $referencedModel, *mixed* $referencedFields, \[*mixed* $options\])

    ...
- name: Mvc\Model\ManagerInterface::createBuilder
  id: api/phalcon_mvc_model_managerinterface#createbuilder
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **createBuilder** (\[*mixed* $params\])

    ...
- name: Mvc\Model\ManagerInterface::createQuery
  id: api/phalcon_mvc_model_managerinterface#createquery
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **createQuery** (*mixed* $phql)

    ...
- name: Mvc\Model\ManagerInterface::executeQuery
  id: api/phalcon_mvc_model_managerinterface#executequery
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **executeQuery** (*mixed* $phql, \[*mixed* $placeholders\])

    ...
- name: Mvc\Model\ManagerInterface::existsBelongsTo
  id: api/phalcon_mvc_model_managerinterface#existsbelongsto
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **existsBelongsTo** (*mixed* $modelName, *mixed* $modelRelation)

    ...
- name: Mvc\Model\ManagerInterface::existsHasMany
  id: api/phalcon_mvc_model_managerinterface#existshasmany
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **existsHasMany** (*mixed* $modelName, *mixed* $modelRelation)

    ...
- name: Mvc\Model\ManagerInterface::existsHasOne
  id: api/phalcon_mvc_model_managerinterface#existshasone
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **existsHasOne** (*mixed* $modelName, *mixed* $modelRelation)

    ...
- name: Mvc\Model\ManagerInterface::getBelongsTo
  id: api/phalcon_mvc_model_managerinterface#getbelongsto
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getBelongsTo** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getBelongsToRecords
  id: api/phalcon_mvc_model_managerinterface#getbelongstorecords
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getBelongsToRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $record, \[*mixed* $parameters\])

    ...
- name: Mvc\Model\ManagerInterface::getHasMany
  id: api/phalcon_mvc_model_managerinterface#gethasmany
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getHasMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getHasManyRecords
  id: api/phalcon_mvc_model_managerinterface#gethasmanyrecords
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getHasManyRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $record, \[*mixed* $parameters\])

    ...
- name: Mvc\Model\ManagerInterface::getHasOne
  id: api/phalcon_mvc_model_managerinterface#gethasone
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getHasOne** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getHasOneAndHasMany
  id: api/phalcon_mvc_model_managerinterface#gethasoneandhasmany
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getHasOneAndHasMany** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getHasOneRecords
  id: api/phalcon_mvc_model_managerinterface#gethasonerecords
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getHasOneRecords** (*mixed* $method, *mixed* $modelName, *mixed* $modelRelation, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $record, \[*mixed* $parameters\])

    ...
- name: Mvc\Model\ManagerInterface::getLastInitialized
  id: api/phalcon_mvc_model_managerinterface#getlastinitialized
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getLastInitialized** ()

    ...
- name: Mvc\Model\ManagerInterface::getLastQuery
  id: api/phalcon_mvc_model_managerinterface#getlastquery
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getLastQuery** ()

    ...
- name: Mvc\Model\ManagerInterface::getModelSchema
  id: api/phalcon_mvc_model_managerinterface#getmodelschema
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getModelSchema** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getModelSource
  id: api/phalcon_mvc_model_managerinterface#getmodelsource
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getModelSource** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getReadConnection
  id: api/phalcon_mvc_model_managerinterface#getreadconnection
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getReadConnection** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getReadConnectionService
  id: api/phalcon_mvc_model_managerinterface#getreadconnectionservice
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getReadConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getRelationByAlias
  id: api/phalcon_mvc_model_managerinterface#getrelationbyalias
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\ManagerInterface
  description: "### abstract public **getRelationByAlias** (*mixed* $modelName, *mixed* $alias)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ManagerInterface.html)"
- name: Mvc\Model\ManagerInterface::getRelations
  id: api/phalcon_mvc_model_managerinterface#getrelations
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getRelations** (*mixed* $modelName)

    ...
- name: Mvc\Model\ManagerInterface::getRelationsBetween
  id: api/phalcon_mvc_model_managerinterface#getrelationsbetween
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getRelationsBetween** (*mixed* $first, *mixed* $second)

    ...
- name: Mvc\Model\ManagerInterface::getWriteConnection
  id: api/phalcon_mvc_model_managerinterface#getwriteconnection
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getWriteConnection** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::getWriteConnectionService
  id: api/phalcon_mvc_model_managerinterface#getwriteconnectionservice
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **getWriteConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::initialize
  id: api/phalcon_mvc_model_managerinterface#initialize
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **initialize** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::isInitialized
  id: api/phalcon_mvc_model_managerinterface#isinitialized
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **isInitialized** (*mixed* $modelName)

    ...
- name: Mvc\Model\ManagerInterface::load
  id: api/phalcon_mvc_model_managerinterface#load
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **load** (*mixed* $modelName, \[*mixed* $newInstance\])

    ...
- name: Mvc\Model\ManagerInterface::missingMethod
  id: api/phalcon_mvc_model_managerinterface#missingmethod
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **missingMethod** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $eventName, *mixed* $data)

    ...
- name: Mvc\Model\ManagerInterface::notifyEvent
  id: api/phalcon_mvc_model_managerinterface#notifyevent
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **notifyEvent** (*mixed* $eventName, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\ManagerInterface::setConnectionService
  id: api/phalcon_mvc_model_managerinterface#setconnectionservice
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **setConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)

    ...
- name: Mvc\Model\ManagerInterface::setModelSchema
  id: api/phalcon_mvc_model_managerinterface#setmodelschema
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **setModelSchema** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $schema)

    ...
- name: Mvc\Model\ManagerInterface::setModelSource
  id: api/phalcon_mvc_model_managerinterface#setmodelsource
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **setModelSource** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $source)

    ...
- name: Mvc\Model\ManagerInterface::setReadConnectionService
  id: api/phalcon_mvc_model_managerinterface#setreadconnectionservice
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **setReadConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)

    ...
- name: Mvc\Model\ManagerInterface::setWriteConnectionService
  id: api/phalcon_mvc_model_managerinterface#setwriteconnectionservice
  summary: null
  belongs_to: Mvc\Model\ManagerInterface
  description: |-
    ### abstract public **setWriteConnectionService** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $connectionService)

    ...
- name: Mvc\Model\Message
  id: api/phalcon_mvc_model_message
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Message**\n\n*implements* [*Phalcon\\Mvc\\Model\\MessageInterface*](phalcon_mvc_model_messageinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/message.zep)\n\nEncapsulates validation info generated before save/delete records fails\n\n``` php\nuse Phalcon\\Mvc\\Model\\Message as Message;\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function beforeSave()\n    {\n        if ($this->name === \"Peter\") {\n            $text  = \"A robot cannot be named Peter\";\n            $field = \"name\";\n            $type  = \"InvalidValue\";\n\n            $message = new Message($text, $field, $type);\n\n            $this->appendMessage($message);\n        }\n    }\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\], \\[[*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model\\], \\[*int* \\| *null* $code\\])\n\nPhalcon\\Mvc\\Model\\Message constructor\n\n### public **setType** (*mixed* $type)\n\nSets message type\n\n### public **getType** ()\n\nReturns message type\n\n### public **setMessage** (*mixed* $message)\n\nSets verbose message\n\n### public **getMessage** ()\n\nReturns verbose message\n\n### public **setField** (*mixed* $field)\n\nSets field name related to message\n\n### public **getField** ()\n\nReturns field name related to message\n\n### public **setModel** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nSet the model who generates the message\n\n### public **setCode** (*mixed* $code)\n\nSets code for the message\n\n### public **getModel** ()\n\nReturns the model that produced the message\n\n### public **getCode** ()\n\nReturns the message code\n\n### public **\\_\\_toString** ()\n\nMagic \\_\\_toString method returns verbose message\n\n### public static **\\_\\_set_state** (*array* $message)\n\nMagic \\_\\_set_state helps to re-build messages variable exporting\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Message.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Message.html)"
- name: Mvc\Model\Message::getCode
  id: api/phalcon_mvc_model_message#getcode
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **getCode** ()

    Returns the message code

    ### public **\_\_toString** ()

    Magic \_\_toString method returns verbose message
- name: Mvc\Model\Message::getField
  id: api/phalcon_mvc_model_message#getfield
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **getField** ()

    Returns field name related to message
- name: Mvc\Model\Message::getMessage
  id: api/phalcon_mvc_model_message#getmessage
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **getMessage** ()

    Returns verbose message
- name: Mvc\Model\Message::getModel
  id: api/phalcon_mvc_model_message#getmodel
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **getModel** ()

    Returns the model that produced the message
- name: Mvc\Model\Message::getType
  id: api/phalcon_mvc_model_message#gettype
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **getType** ()

    Returns message type
- name: Mvc\Model\Message::setCode
  id: api/phalcon_mvc_model_message#setcode
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **setCode** (*mixed* $code)

    Sets code for the message
- name: Mvc\Model\Message::setField
  id: api/phalcon_mvc_model_message#setfield
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **setField** (*mixed* $field)

    Sets field name related to message
- name: Mvc\Model\Message::setMessage
  id: api/phalcon_mvc_model_message#setmessage
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **setMessage** (*mixed* $message)

    Sets verbose message
- name: Mvc\Model\Message::setModel
  id: api/phalcon_mvc_model_message#setmodel
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **setModel** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Set the model who generates the message
- name: Mvc\Model\Message::setType
  id: api/phalcon_mvc_model_message#settype
  summary: null
  belongs_to: Mvc\Model\Message
  description: |-
    ### public **setType** (*mixed* $type)

    Sets message type
- name: Mvc\Model\Message::__set_state
  id: api/phalcon_mvc_model_message#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Message
  description: "### public static **\\_\\_set_state** (*array* $message)\n\nMagic \\_\\_set_state helps to re-build messages variable exporting\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Message.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Message.html)"
- name: Mvc\Model\MessageInterface
  id: api/phalcon_mvc_model_messageinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\MessageInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/messageinterface.zep)\n\n## Methods\n\n### abstract public **setType** (*mixed* $type)\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **setMessage** (*mixed* $message)\n\n...\n\n### abstract public **getMessage** ()\n\n...\n\n### abstract public **setField** (*mixed* $field)\n\n...\n\n### abstract public **getField** ()\n\n...\n\n### abstract public **\\_\\_toString** ()\n\n...\n\n### abstract public static **\\_\\_set_state** (*array* $message)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MessageInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MessageInterface.html)"
- name: Mvc\Model\MessageInterface::getField
  id: api/phalcon_mvc_model_messageinterface#getfield
  summary: null
  belongs_to: Mvc\Model\MessageInterface
  description: |-
    ### abstract public **getField** ()

    ...

    ### abstract public **\_\_toString** ()

    ...
- name: Mvc\Model\MessageInterface::getMessage
  id: api/phalcon_mvc_model_messageinterface#getmessage
  summary: null
  belongs_to: Mvc\Model\MessageInterface
  description: |-
    ### abstract public **getMessage** ()

    ...
- name: Mvc\Model\MessageInterface::getType
  id: api/phalcon_mvc_model_messageinterface#gettype
  summary: null
  belongs_to: Mvc\Model\MessageInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Mvc\Model\MessageInterface::setField
  id: api/phalcon_mvc_model_messageinterface#setfield
  summary: null
  belongs_to: Mvc\Model\MessageInterface
  description: |-
    ### abstract public **setField** (*mixed* $field)

    ...
- name: Mvc\Model\MessageInterface::setMessage
  id: api/phalcon_mvc_model_messageinterface#setmessage
  summary: null
  belongs_to: Mvc\Model\MessageInterface
  description: |-
    ### abstract public **setMessage** (*mixed* $message)

    ...
- name: Mvc\Model\MessageInterface::setType
  id: api/phalcon_mvc_model_messageinterface#settype
  summary: null
  belongs_to: Mvc\Model\MessageInterface
  description: |-
    ### abstract public **setType** (*mixed* $type)

    ...
- name: Mvc\Model\MessageInterface::__set_state
  id: api/phalcon_mvc_model_messageinterface#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MessageInterface
  description: "### abstract public static **\\_\\_set_state** (*array* $message)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MessageInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MessageInterface.html)"
- name: Mvc\Model\MetaData
  id: api/phalcon_mvc_model_metadata
  summary: Because Phalcon\Mvc\Model requires meta-data like field names, data types, primary keys, etc
  description: "# Abstract class **Phalcon\\Mvc\\Model\\MetaData**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata.zep)\n\nBecause Phalcon\\Mvc\\Model requires meta-data like field names, data types, primary keys, etc. this component collect them and store for further querying by Phalcon\\Mvc\\Model. Phalcon\\Mvc\\Model\\MetaData can also use adapters to store temporarily or permanently the meta-data.\n\nA standard Phalcon\\Mvc\\Model\\MetaData can be used to query model attributes:\n\n``` php\n$metaData = new \\Phalcon\\Mvc\\Model\\MetaData\\Memory();\n\n$attributes = $metaData->getAttributes(\n    new Robots()\n);\n\nprint_r($attributes);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public **getDI** ()\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** ()\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** ()\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** ()\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n### abstract public **read** (*mixed* $key) inherited from [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface)\n\n...\n\n### abstract public **write** (*mixed* $key, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData.html)"
- name: Mvc\Model\MetaData::getAttributes
  id: api/phalcon_mvc_model_metadata#getattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns table attributes names (fields)

    ``` php
    print_r(
        $metaData->getAttributes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getAutomaticCreateAttributes
  id: api/phalcon_mvc_model_metadata#getautomaticcreateattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getAutomaticCreateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns attributes that must be ignored from the INSERT SQL generation

    ``` php
    print_r(
        $metaData->getAutomaticCreateAttributes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getAutomaticUpdateAttributes
  id: api/phalcon_mvc_model_metadata#getautomaticupdateattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getAutomaticUpdateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns attributes that must be ignored from the UPDATE SQL generation

    ``` php
    print_r(
        $metaData->getAutomaticUpdateAttributes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getBindTypes
  id: api/phalcon_mvc_model_metadata#getbindtypes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getBindTypes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns attributes and their bind data types

    ``` php
    print_r(
        $metaData->getBindTypes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getColumnMap
  id: api/phalcon_mvc_model_metadata#getcolumnmap
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getColumnMap** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the column map if any

    ``` php
    print_r(
        $metaData->getColumnMap(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getDataTypes
  id: api/phalcon_mvc_model_metadata#getdatatypes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getDataTypes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns attributes and their data types

    ``` php
    print_r(
        $metaData->getDataTypes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getDataTypesNumeric
  id: api/phalcon_mvc_model_metadata#getdatatypesnumeric
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getDataTypesNumeric** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns attributes which types are numerical

    ``` php
    print_r(
        $metaData->getDataTypesNumeric(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getDefaultValues
  id: api/phalcon_mvc_model_metadata#getdefaultvalues
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getDefaultValues** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns attributes (which have default values) and their default values

    ``` php
    print_r(
        $metaData->getDefaultValues(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getDI
  id: api/phalcon_mvc_model_metadata#getdi
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getDI** ()

    Returns the DependencyInjector container
- name: Mvc\Model\MetaData::getEmptyStringAttributes
  id: api/phalcon_mvc_model_metadata#getemptystringattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getEmptyStringAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns attributes allow empty strings

    ``` php
    print_r(
        $metaData->getEmptyStringAttributes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getIdentityField
  id: api/phalcon_mvc_model_metadata#getidentityfield
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public *string* **getIdentityField** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the name of identity field (if one is present)

    ``` php
    print_r(
        $metaData->getIdentityField(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getNonPrimaryKeyAttributes
  id: api/phalcon_mvc_model_metadata#getnonprimarykeyattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getNonPrimaryKeyAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns an array of fields which are not part of the primary key

    ``` php
    print_r(
        $metaData->getNonPrimaryKeyAttributes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getNotNullAttributes
  id: api/phalcon_mvc_model_metadata#getnotnullattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getNotNullAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns an array of not null attributes

    ``` php
    print_r(
        $metaData->getNotNullAttributes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getPrimaryKeyAttributes
  id: api/phalcon_mvc_model_metadata#getprimarykeyattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getPrimaryKeyAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns an array of fields which are part of the primary key

    ``` php
    print_r(
        $metaData->getPrimaryKeyAttributes(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getReverseColumnMap
  id: api/phalcon_mvc_model_metadata#getreversecolumnmap
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getReverseColumnMap** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Returns the reverse column map if any

    ``` php
    print_r(
        $metaData->getReverseColumnMap(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::getStrategy
  id: api/phalcon_mvc_model_metadata#getstrategy
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **getStrategy** ()

    Return the strategy to obtain the meta-data
- name: Mvc\Model\MetaData::hasAttribute
  id: api/phalcon_mvc_model_metadata#hasattribute
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **hasAttribute** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute)

    Check if a model has certain attribute

    ``` php
    var_dump(
        $metaData->hasAttribute(
            new Robots(),
            "name"
        )
    );
    ```
- name: Mvc\Model\MetaData::isEmpty
  id: api/phalcon_mvc_model_metadata#isempty
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **isEmpty** ()

    Checks if the internal meta-data container is empty

    ``` php
    var_dump(
        $metaData->isEmpty()
    );
    ```
- name: Mvc\Model\MetaData::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### final protected **\_initialize** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema)

    Initialize the metadata for certain table
- name: Mvc\Model\MetaData::readColumnMap
  id: api/phalcon_mvc_model_metadata#readcolumnmap
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### final public **readColumnMap** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Reads the ordered/reversed column map for certain model

    ``` php
    print_r(
        $metaData->readColumnMap(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::readColumnMapIndex
  id: api/phalcon_mvc_model_metadata#readcolumnmapindex
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### final public **readColumnMapIndex** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)

    Reads column-map information for certain model using a MODEL\_\* constant

    ``` php
    print_r(
        $metaData->readColumnMapIndex(
            new Robots(),
            MetaData::MODELS_REVERSE_COLUMN_MAP
        )
    );
    ```
- name: Mvc\Model\MetaData::readMetaData
  id: api/phalcon_mvc_model_metadata#readmetadata
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### final public **readMetaData** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    Reads the complete meta-data for certain model

    ``` php
    print_r(
        $metaData->readMetaData(
            new Robots()
        )
    );
    ```
- name: Mvc\Model\MetaData::readMetaDataIndex
  id: api/phalcon_mvc_model_metadata#readmetadataindex
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### final public **readMetaDataIndex** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)

    Reads meta-data for certain model

    ``` php
    print_r(
        $metaData->readMetaDataIndex(
            new Robots(),
            0
        )
    );
    ```
- name: Mvc\Model\MetaData::reset
  id: api/phalcon_mvc_model_metadata#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData
  description: "### public **reset** ()\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n### abstract public **read** (*mixed* $key) inherited from [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface)\n\n...\n\n### abstract public **write** (*mixed* $key, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData.html)"
- name: Mvc\Model\MetaData::setAutomaticCreateAttributes
  id: api/phalcon_mvc_model_metadata#setautomaticcreateattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **setAutomaticCreateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)

    Set the attributes that must be ignored from the INSERT SQL generation

    ``` php
    $metaData->setAutomaticCreateAttributes(
        new Robots(),
        [
            "created_at" => true,
        ]
    );
    ```
- name: Mvc\Model\MetaData::setAutomaticUpdateAttributes
  id: api/phalcon_mvc_model_metadata#setautomaticupdateattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **setAutomaticUpdateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)

    Set the attributes that must be ignored from the UPDATE SQL generation

    ``` php
    $metaData->setAutomaticUpdateAttributes(
        new Robots(),
        [
            "modified_at" => true,
        ]
    );
    ```
- name: Mvc\Model\MetaData::setDI
  id: api/phalcon_mvc_model_metadata#setdi
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Mvc\Model\MetaData::setEmptyStringAttributes
  id: api/phalcon_mvc_model_metadata#setemptystringattributes
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **setEmptyStringAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)

    Set the attributes that allow empty string values

    ``` php
    $metaData->setEmptyStringAttributes(
        new Robots(),
        [
            "name" => true,
        ]
    );
    ```
- name: Mvc\Model\MetaData::setStrategy
  id: api/phalcon_mvc_model_metadata#setstrategy
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### public **setStrategy** ([*Phalcon\Mvc\Model\MetaData\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy)

    Set the meta-data extraction strategy
- name: Mvc\Model\MetaData::writeMetaDataIndex
  id: api/phalcon_mvc_model_metadata#writemetadataindex
  summary: null
  belongs_to: Mvc\Model\MetaData
  description: |-
    ### final public **writeMetaDataIndex** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data)

    Writes meta-data for certain model using a MODEL\_\* constant

    ``` php
    print_r(
        $metaData->writeColumnMapIndex(
            new Robots(),
            MetaData::MODELS_REVERSE_COLUMN_MAP,
            [
                "leName" => "name",
            ]
        )
    );
    ```
- name: Mvc\Model\MetaDataInterface
  id: api/phalcon_mvc_model_metadatainterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\MetaDataInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadatainterface.zep)\n\n## Methods\n\n### abstract public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy)\n\n...\n\n### abstract public **getStrategy** ()\n\n...\n\n### abstract public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)\n\n...\n\n### abstract public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data)\n\n...\n\n### abstract public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)\n\n...\n\n### abstract public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)\n\n...\n\n### abstract public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)\n\n...\n\n### abstract public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)\n\n...\n\n### abstract public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model)\n\n...\n\n### abstract public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute)\n\n...\n\n### abstract public **isEmpty** ()\n\n...\n\n### abstract public **reset** ()\n\n...\n\n### abstract public **read** (*mixed* $key)\n\n...\n\n### abstract public **write** (*mixed* $key, *mixed* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaDataInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaDataInterface.html)"
- name: Mvc\Model\MetaDataInterface::getAttributes
  id: api/phalcon_mvc_model_metadatainterface#getattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getAutomaticCreateAttributes
  id: api/phalcon_mvc_model_metadatainterface#getautomaticcreateattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getAutomaticCreateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getAutomaticUpdateAttributes
  id: api/phalcon_mvc_model_metadatainterface#getautomaticupdateattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getAutomaticUpdateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getBindTypes
  id: api/phalcon_mvc_model_metadatainterface#getbindtypes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getBindTypes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getColumnMap
  id: api/phalcon_mvc_model_metadatainterface#getcolumnmap
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getColumnMap** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getDataTypes
  id: api/phalcon_mvc_model_metadatainterface#getdatatypes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getDataTypes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getDataTypesNumeric
  id: api/phalcon_mvc_model_metadatainterface#getdatatypesnumeric
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getDataTypesNumeric** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getDefaultValues
  id: api/phalcon_mvc_model_metadatainterface#getdefaultvalues
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getDefaultValues** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getEmptyStringAttributes
  id: api/phalcon_mvc_model_metadatainterface#getemptystringattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getEmptyStringAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getIdentityField
  id: api/phalcon_mvc_model_metadatainterface#getidentityfield
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getIdentityField** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getNonPrimaryKeyAttributes
  id: api/phalcon_mvc_model_metadatainterface#getnonprimarykeyattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getNonPrimaryKeyAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getNotNullAttributes
  id: api/phalcon_mvc_model_metadatainterface#getnotnullattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getNotNullAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getPrimaryKeyAttributes
  id: api/phalcon_mvc_model_metadatainterface#getprimarykeyattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getPrimaryKeyAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getReverseColumnMap
  id: api/phalcon_mvc_model_metadatainterface#getreversecolumnmap
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getReverseColumnMap** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::getStrategy
  id: api/phalcon_mvc_model_metadatainterface#getstrategy
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **getStrategy** ()

    ...
- name: Mvc\Model\MetaDataInterface::hasAttribute
  id: api/phalcon_mvc_model_metadatainterface#hasattribute
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **hasAttribute** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute)

    ...
- name: Mvc\Model\MetaDataInterface::isEmpty
  id: api/phalcon_mvc_model_metadatainterface#isempty
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **isEmpty** ()

    ...
- name: Mvc\Model\MetaDataInterface::read
  id: api/phalcon_mvc_model_metadatainterface#read
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **read** (*mixed* $key)

    ...
- name: Mvc\Model\MetaDataInterface::readColumnMap
  id: api/phalcon_mvc_model_metadatainterface#readcolumnmap
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **readColumnMap** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::readColumnMapIndex
  id: api/phalcon_mvc_model_metadatainterface#readcolumnmapindex
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **readColumnMapIndex** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)

    ...
- name: Mvc\Model\MetaDataInterface::readMetaData
  id: api/phalcon_mvc_model_metadatainterface#readmetadata
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **readMetaData** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model)

    ...
- name: Mvc\Model\MetaDataInterface::readMetaDataIndex
  id: api/phalcon_mvc_model_metadatainterface#readmetadataindex
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **readMetaDataIndex** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index)

    ...
- name: Mvc\Model\MetaDataInterface::reset
  id: api/phalcon_mvc_model_metadatainterface#reset
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **reset** ()

    ...
- name: Mvc\Model\MetaDataInterface::setAutomaticCreateAttributes
  id: api/phalcon_mvc_model_metadatainterface#setautomaticcreateattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **setAutomaticCreateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)

    ...
- name: Mvc\Model\MetaDataInterface::setAutomaticUpdateAttributes
  id: api/phalcon_mvc_model_metadatainterface#setautomaticupdateattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **setAutomaticUpdateAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)

    ...
- name: Mvc\Model\MetaDataInterface::setEmptyStringAttributes
  id: api/phalcon_mvc_model_metadatainterface#setemptystringattributes
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **setEmptyStringAttributes** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes)

    ...
- name: Mvc\Model\MetaDataInterface::setStrategy
  id: api/phalcon_mvc_model_metadatainterface#setstrategy
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **setStrategy** ([*Phalcon\Mvc\Model\MetaData\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy)

    ...
- name: Mvc\Model\MetaDataInterface::write
  id: api/phalcon_mvc_model_metadatainterface#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaDataInterface
  description: "### abstract public **write** (*mixed* $key, *mixed* $data)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaDataInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaDataInterface.html)"
- name: Mvc\Model\MetaDataInterface::writeMetaDataIndex
  id: api/phalcon_mvc_model_metadatainterface#writemetadataindex
  summary: null
  belongs_to: Mvc\Model\MetaDataInterface
  description: |-
    ### abstract public **writeMetaDataIndex** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data)

    ...
- name: Mvc\Model\MetaData\Apc
  id: api/phalcon_mvc_model_metadata_apc
  summary: Stores model meta-data in the APC cache
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Apc**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/apc.zep)\n\nStores model meta-data in the APC cache. Data will erased if the web server is restarted\n\nBy default meta-data is stored for 48 hours (172800 seconds)\n\nYou can query the meta-data by printing apc_fetch(‘$PMM$’) or apc_fetch(‘$PMM$my-app-id’)\n\n``` php\n$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Apc(\n    [\n        \"prefix\"   => \"my-app-id\",\n        \"lifetime\" => 86400,\n    ]\n);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Apc constructor\n\n### public **read** (*mixed* $key)\n\nReads meta-data from APC\n\n### public **write** (*mixed* $key, *mixed* $data)\n\nWrites the meta-data to APC\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Apc.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Apc.html)"
- name: Mvc\Model\MetaData\Apc::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_apc#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Apc::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_apc#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Apc::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_apc#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Apc::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_apc#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Apc::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_apc#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Apc::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_apc#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Apc::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_apc#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Apc::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_apc#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Apc::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_apc#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Apc::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_apc#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Apc::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_apc#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Apc::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_apc#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Apc::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_apc#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Apc::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_apc#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Apc::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_apc#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Apc::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_apc#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Apc constructor
- name: Mvc\Model\MetaData\Apc::read
  id: api/phalcon_mvc_model_metadata_apc#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Apc
  description: |-
    ### public **read** (*mixed* $key)

    Reads meta-data from APC
- name: Mvc\Model\MetaData\Apc::write
  id: api/phalcon_mvc_model_metadata_apc#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Apc
  description: "### public **write** (*mixed* $key, *mixed* $data)\n\nWrites the meta-data to APC\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Apc.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Apc.html)"
- name: Mvc\Model\MetaData\Files
  id: api/phalcon_mvc_model_metadata_files
  summary: Stores model meta-data in PHP files
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Files**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/files.zep)\n\nStores model meta-data in PHP files.\n\n``` php\n$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Files(\n    [\n        \"metaDataDir\" => \"app/cache/metadata/\",\n    ]\n);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Files constructor\n\n### public *mixed* **read** (*string* $key)\n\nReads meta-data from files\n\n### public **write** (*string* $key, *array* $data)\n\nWrites the meta-data to files\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Files.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Files.html)"
- name: Mvc\Model\MetaData\Files::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_files#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Files::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_files#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Files::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_files#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Files::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_files#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Files::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_files#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Files::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_files#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Files::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_files#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Files::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_files#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Files::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_files#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Files::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_files#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Files::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_files#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Files::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_files#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Files::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_files#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Files::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_files#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Files::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_files#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Files::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_files#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Files constructor
- name: Mvc\Model\MetaData\Files::read
  id: api/phalcon_mvc_model_metadata_files#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Files
  description: |-
    ### public *mixed* **read** (*string* $key)

    Reads meta-data from files
- name: Mvc\Model\MetaData\Files::write
  id: api/phalcon_mvc_model_metadata_files#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Files
  description: "### public **write** (*string* $key, *array* $data)\n\nWrites the meta-data to files\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Files.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Files.html)"
- name: Mvc\Model\MetaData\Libmemcached
  id: api/phalcon_mvc_model_metadata_libmemcached
  summary: Stores model meta-data in the Memcache
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Libmemcached**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/libmemcached.zep)\n\nStores model meta-data in the Memcache.\n\nBy default meta-data is stored for 48 hours (172800 seconds)\n\n``` php\n$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Libmemcached(\n    [\n        \"servers\" => [\n            [\n                \"host\"   => \"localhost\",\n                \"port\"   => 11211,\n                \"weight\" => 1,\n            ],\n        ],\n        \"client\" => [\n            Memcached::OPT_HASH       => Memcached::HASH_MD5,\n            Memcached::OPT_PREFIX_KEY => \"prefix.\",\n        ],\n        \"lifetime\" => 3600,\n        \"prefix\"   => \"my_\",\n    ]\n);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Libmemcached constructor\n\n### public **read** (*mixed* $key)\n\nReads metadata from Memcache\n\n### public **write** (*mixed* $key, *mixed* $data)\n\nWrites the metadata to Memcache\n\n### public **reset** ()\n\nFlush Memcache data and resets internal meta-data in order to regenerate it\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Libmemcached.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Libmemcached.html)"
- name: Mvc\Model\MetaData\Libmemcached::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_libmemcached#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_libmemcached#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_libmemcached#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_libmemcached#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_libmemcached#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_libmemcached#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_libmemcached#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_libmemcached#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_libmemcached#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_libmemcached#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_libmemcached#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_libmemcached#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_libmemcached#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_libmemcached#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_libmemcached#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Libmemcached::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_libmemcached#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Libmemcached constructor
- name: Mvc\Model\MetaData\Libmemcached::read
  id: api/phalcon_mvc_model_metadata_libmemcached#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: |-
    ### public **read** (*mixed* $key)

    Reads metadata from Memcache
- name: Mvc\Model\MetaData\Libmemcached::reset
  id: api/phalcon_mvc_model_metadata_libmemcached#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: "### public **reset** ()\n\nFlush Memcache data and resets internal meta-data in order to regenerate it\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Libmemcached.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Libmemcached.html)"
- name: Mvc\Model\MetaData\Libmemcached::write
  id: api/phalcon_mvc_model_metadata_libmemcached#write
  summary: null
  belongs_to: Mvc\Model\MetaData\Libmemcached
  description: |-
    ### public **write** (*mixed* $key, *mixed* $data)

    Writes the metadata to Memcache
- name: Mvc\Model\MetaData\Memcache
  id: api/phalcon_mvc_model_metadata_memcache
  summary: Stores model meta-data in the Memcache
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Memcache**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/memcache.zep)\n\nStores model meta-data in the Memcache.\n\nBy default meta-data is stored for 48 hours (172800 seconds)\n\n``` php\n$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Memcache(\n    [\n        \"prefix\"     => \"my-app-id\",\n        \"lifetime\"   => 86400,\n        \"host\"       => \"localhost\",\n        \"port\"       => 11211,\n        \"persistent\" => false,\n    ]\n);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Memcache constructor\n\n### public **read** (*mixed* $key)\n\nReads metadata from Memcache\n\n### public **write** (*mixed* $key, *mixed* $data)\n\nWrites the metadata to Memcache\n\n### public **reset** ()\n\nFlush Memcache data and resets internal meta-data in order to regenerate it\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memcache.html)"
- name: Mvc\Model\MetaData\Memcache::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_memcache#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Memcache::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_memcache#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Memcache::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_memcache#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Memcache::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_memcache#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Memcache::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_memcache#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Memcache::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_memcache#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Memcache::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_memcache#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Memcache::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_memcache#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Memcache::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_memcache#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Memcache::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_memcache#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Memcache::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_memcache#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Memcache::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_memcache#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Memcache::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_memcache#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Memcache::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_memcache#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Memcache::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_memcache#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Memcache::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_memcache#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Memcache constructor
- name: Mvc\Model\MetaData\Memcache::read
  id: api/phalcon_mvc_model_metadata_memcache#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: |-
    ### public **read** (*mixed* $key)

    Reads metadata from Memcache
- name: Mvc\Model\MetaData\Memcache::reset
  id: api/phalcon_mvc_model_metadata_memcache#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Memcache
  description: "### public **reset** ()\n\nFlush Memcache data and resets internal meta-data in order to regenerate it\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memcache.html)"
- name: Mvc\Model\MetaData\Memcache::write
  id: api/phalcon_mvc_model_metadata_memcache#write
  summary: null
  belongs_to: Mvc\Model\MetaData\Memcache
  description: |-
    ### public **write** (*mixed* $key, *mixed* $data)

    Writes the metadata to Memcache
- name: Mvc\Model\MetaData\Memory
  id: api/phalcon_mvc_model_metadata_memory
  summary: Stores model meta-data in memory
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Memory**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/memory.zep)\n\nStores model meta-data in memory. Data will be erased when the request finishes\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Memory constructor\n\n### public *array* **read** (*string* $key)\n\nReads the meta-data from temporal memory\n\n### public **write** (*string* $key, *array* $data)\n\nWrites the meta-data to temporal memory\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memory.html)"
- name: Mvc\Model\MetaData\Memory::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_memory#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Memory::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_memory#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Memory::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_memory#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Memory::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_memory#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Memory::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_memory#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Memory::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_memory#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Memory::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_memory#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Memory::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_memory#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Memory::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_memory#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Memory::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_memory#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Memory::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_memory#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Memory::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_memory#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Memory::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_memory#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Memory::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_memory#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Memory::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_memory#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Memory::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_memory#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Memory constructor
- name: Mvc\Model\MetaData\Memory::read
  id: api/phalcon_mvc_model_metadata_memory#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Memory
  description: |-
    ### public *array* **read** (*string* $key)

    Reads the meta-data from temporal memory
- name: Mvc\Model\MetaData\Memory::write
  id: api/phalcon_mvc_model_metadata_memory#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Memory
  description: "### public **write** (*string* $key, *array* $data)\n\nWrites the meta-data to temporal memory\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memory.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memory.html)"
- name: Mvc\Model\MetaData\Redis
  id: api/phalcon_mvc_model_metadata_redis
  summary: Stores model meta-data in the Redis
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Redis**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/redis.zep)\n\nStores model meta-data in the Redis.\n\nBy default meta-data is stored for 48 hours (172800 seconds)\n\n``` php\nuse Phalcon\\Mvc\\Model\\Metadata\\Redis;\n\n$metaData = new Redis(\n    [\n        \"host\"       => \"127.0.0.1\",\n        \"port\"       => 6379,\n        \"persistent\" => 0,\n        \"statsKey\"   => \"_PHCM_MM\",\n        \"lifetime\"   => 172800,\n        \"index\"      => 2,\n    ]\n);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Redis constructor\n\n### public **read** (*mixed* $key)\n\nReads metadata from Redis\n\n### public **write** (*mixed* $key, *mixed* $data)\n\nWrites the metadata to Redis\n\n### public **reset** ()\n\nFlush Redis data and resets internal meta-data in order to regenerate it\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Redis.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Redis.html)"
- name: Mvc\Model\MetaData\Redis::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_redis#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Redis::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_redis#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Redis::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_redis#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Redis::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_redis#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Redis::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_redis#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Redis::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_redis#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Redis::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_redis#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Redis::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_redis#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Redis::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_redis#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Redis::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_redis#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Redis::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_redis#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Redis::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_redis#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Redis::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_redis#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Redis::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_redis#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Redis::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_redis#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Redis::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_redis#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Redis constructor
- name: Mvc\Model\MetaData\Redis::read
  id: api/phalcon_mvc_model_metadata_redis#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: |-
    ### public **read** (*mixed* $key)

    Reads metadata from Redis
- name: Mvc\Model\MetaData\Redis::reset
  id: api/phalcon_mvc_model_metadata_redis#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Redis
  description: "### public **reset** ()\n\nFlush Redis data and resets internal meta-data in order to regenerate it\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Redis.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Redis.html)"
- name: Mvc\Model\MetaData\Redis::write
  id: api/phalcon_mvc_model_metadata_redis#write
  summary: null
  belongs_to: Mvc\Model\MetaData\Redis
  description: |-
    ### public **write** (*mixed* $key, *mixed* $data)

    Writes the metadata to Redis
- name: Mvc\Model\MetaData\Session
  id: api/phalcon_mvc_model_metadata_session
  summary: Stores model meta-data in session
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Session**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/session.zep)\n\nStores model meta-data in session. Data will erased when the session finishes. Meta-data are permanent while the session is active.\n\nYou can query the meta-data by printing $\\_SESSION\\[‘$PMM$’\\]\n\n``` php\n$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Session(\n    [\n       \"prefix\" => \"my-app-id\",\n    ]\n);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Session constructor\n\n### public *array* **read** (*string* $key)\n\nReads meta-data from $\\_SESSION\n\n### public **write** (*string* $key, *array* $data)\n\nWrites the meta-data to $\\_SESSION\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Session.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Session.html)"
- name: Mvc\Model\MetaData\Session::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_session#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Session::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_session#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Session::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_session#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Session::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_session#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Session::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_session#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Session::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_session#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Session::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_session#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Session::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_session#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Session::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_session#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Session::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_session#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Session::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_session#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Session::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_session#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Session::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_session#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Session::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_session#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Session::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_session#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Session::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_session#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Session constructor
- name: Mvc\Model\MetaData\Session::read
  id: api/phalcon_mvc_model_metadata_session#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Session
  description: |-
    ### public *array* **read** (*string* $key)

    Reads meta-data from $\_SESSION
- name: Mvc\Model\MetaData\Session::write
  id: api/phalcon_mvc_model_metadata_session#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Session
  description: "### public **write** (*string* $key, *array* $data)\n\nWrites the meta-data to $\\_SESSION\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Session.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Session.html)"
- name: Mvc\Model\MetaData\StrategyInterface
  id: api/phalcon_mvc_model_metadata_strategyinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/strategyinterface.zep)\n\n## Methods\n\n### abstract public **getMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\n...\n\n### abstract public **getColumnMaps** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_StrategyInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_StrategyInterface.html)"
- name: Mvc\Model\MetaData\StrategyInterface::getColumnMaps
  id: api/phalcon_mvc_model_metadata_strategyinterface#getcolumnmaps
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\StrategyInterface
  description: "### abstract public **getColumnMaps** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_StrategyInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_StrategyInterface.html)"
- name: Mvc\Model\MetaData\StrategyInterface::getMetaData
  id: api/phalcon_mvc_model_metadata_strategyinterface#getmetadata
  summary: null
  belongs_to: Mvc\Model\MetaData\StrategyInterface
  description: |-
    ### abstract public **getMetaData** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    ...
- name: Mvc\Model\MetaData\Strategy\Annotations
  id: api/phalcon_mvc_model_metadata_strategy_annotations
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations**\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/strategy/annotations.zep)\n\n## Methods\n\n### final public **getMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nThe meta-data is obtained by reading the column descriptions from the database information schema\n\n### final public **getColumnMaps** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nRead the model’s column map, this can’t be inferred\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Annotations.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Annotations.html)"
- name: Mvc\Model\MetaData\Strategy\Annotations::getColumnMaps
  id: api/phalcon_mvc_model_metadata_strategy_annotations#getcolumnmaps
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Strategy\Annotations
  description: "### final public **getColumnMaps** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nRead the model’s column map, this can’t be inferred\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Annotations.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Annotations.html)"
- name: Mvc\Model\MetaData\Strategy\Annotations::getMetaData
  id: api/phalcon_mvc_model_metadata_strategy_annotations#getmetadata
  summary: null
  belongs_to: Mvc\Model\MetaData\Strategy\Annotations
  description: |-
    ### final public **getMetaData** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    The meta-data is obtained by reading the column descriptions from the database information schema
- name: Mvc\Model\MetaData\Strategy\Introspection
  id: api/phalcon_mvc_model_metadata_strategy_introspection
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection**\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/strategy/introspection.zep)\n\nQueries the table meta-data in order to introspect the model’s metadata\n\n## Methods\n\n### final public **getMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nThe meta-data is obtained by reading the column descriptions from the database information schema\n\n### final public **getColumnMaps** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nRead the model’s column map, this can’t be inferred\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Introspection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Introspection.html)"
- name: Mvc\Model\MetaData\Strategy\Introspection::getColumnMaps
  id: api/phalcon_mvc_model_metadata_strategy_introspection#getcolumnmaps
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Strategy\Introspection
  description: "### final public **getColumnMaps** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nRead the model’s column map, this can’t be inferred\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Introspection.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Introspection.html)"
- name: Mvc\Model\MetaData\Strategy\Introspection::getMetaData
  id: api/phalcon_mvc_model_metadata_strategy_introspection#getmetadata
  summary: null
  belongs_to: Mvc\Model\MetaData\Strategy\Introspection
  description: |-
    ### final public **getMetaData** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, [*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    The meta-data is obtained by reading the column descriptions from the database information schema
- name: Mvc\Model\MetaData\Xcache
  id: api/phalcon_mvc_model_metadata_xcache
  summary: Stores model meta-data in the XCache cache
  description: "# Class **Phalcon\\Mvc\\Model\\MetaData\\Xcache**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\n*implements* [*Phalcon\\Mvc\\Model\\MetaDataInterface*](phalcon_mvc_model_metadatainterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/xcache.zep)\n\nStores model meta-data in the XCache cache. Data will erased if the web server is restarted\n\nBy default meta-data is stored for 48 hours (172800 seconds)\n\nYou can query the meta-data by printing xcache_get(‘$PMM$’) or xcache_get(‘$PMM$my-app-id’)\n\n``` php\n$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Xcache(\n    [\n        \"prefix\"   => \"my-app-id\",\n        \"lifetime\" => 86400,\n    ]\n);\n```\n\n## Constants\n\n### *integer* **MODELS_ATTRIBUTES**\n\n### *integer* **MODELS_PRIMARY_KEY**\n\n### *integer* **MODELS_NON_PRIMARY_KEY**\n\n### *integer* **MODELS_NOT_NULL**\n\n### *integer* **MODELS_DATA_TYPES**\n\n### *integer* **MODELS_DATA_TYPES_NUMERIC**\n\n### *integer* **MODELS_DATE_AT**\n\n### *integer* **MODELS_DATE_IN**\n\n### *integer* **MODELS_IDENTITY_COLUMN**\n\n### *integer* **MODELS_DATA_TYPES_BIND**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**\n\n### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**\n\n### *integer* **MODELS_DEFAULT_VALUES**\n\n### *integer* **MODELS_EMPTY_STRING_VALUES**\n\n### *integer* **MODELS_COLUMN_MAP**\n\n### *integer* **MODELS_REVERSE_COLUMN_MAP**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\MetaData\\Xcache constructor\n\n### public *array* **read** (*string* $key)\n\nReads metadata from XCache\n\n### public **write** (*string* $key, *array* $data)\n\nWrites the metadata to XCache\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Xcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Xcache.html)"
- name: Mvc\Model\MetaData\Xcache::MODELS_ATTRIBUTES
  id: api/phalcon_mvc_model_metadata_xcache#models_attributes
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_ATTRIBUTES**'
- name: Mvc\Model\MetaData\Xcache::MODELS_AUTOMATIC_DEFAULT_INSERT
  id: api/phalcon_mvc_model_metadata_xcache#models_automatic_default_insert
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_INSERT**'
- name: Mvc\Model\MetaData\Xcache::MODELS_AUTOMATIC_DEFAULT_UPDATE
  id: api/phalcon_mvc_model_metadata_xcache#models_automatic_default_update
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_AUTOMATIC_DEFAULT_UPDATE**'
- name: Mvc\Model\MetaData\Xcache::MODELS_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_xcache#models_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_COLUMN_MAP**'
- name: Mvc\Model\MetaData\Xcache::MODELS_DATA_TYPES
  id: api/phalcon_mvc_model_metadata_xcache#models_data_types
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_DATA_TYPES**'
- name: Mvc\Model\MetaData\Xcache::MODELS_DATA_TYPES_BIND
  id: api/phalcon_mvc_model_metadata_xcache#models_data_types_bind
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_DATA_TYPES_BIND**'
- name: Mvc\Model\MetaData\Xcache::MODELS_DATA_TYPES_NUMERIC
  id: api/phalcon_mvc_model_metadata_xcache#models_data_types_numeric
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_DATA_TYPES_NUMERIC**'
- name: Mvc\Model\MetaData\Xcache::MODELS_DATE_AT
  id: api/phalcon_mvc_model_metadata_xcache#models_date_at
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_DATE_AT**'
- name: Mvc\Model\MetaData\Xcache::MODELS_DATE_IN
  id: api/phalcon_mvc_model_metadata_xcache#models_date_in
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_DATE_IN**'
- name: Mvc\Model\MetaData\Xcache::MODELS_DEFAULT_VALUES
  id: api/phalcon_mvc_model_metadata_xcache#models_default_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_DEFAULT_VALUES**'
- name: Mvc\Model\MetaData\Xcache::MODELS_EMPTY_STRING_VALUES
  id: api/phalcon_mvc_model_metadata_xcache#models_empty_string_values
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_EMPTY_STRING_VALUES**'
- name: Mvc\Model\MetaData\Xcache::MODELS_IDENTITY_COLUMN
  id: api/phalcon_mvc_model_metadata_xcache#models_identity_column
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_IDENTITY_COLUMN**'
- name: Mvc\Model\MetaData\Xcache::MODELS_NON_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_xcache#models_non_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_NON_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Xcache::MODELS_NOT_NULL
  id: api/phalcon_mvc_model_metadata_xcache#models_not_null
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_NOT_NULL**'
- name: Mvc\Model\MetaData\Xcache::MODELS_PRIMARY_KEY
  id: api/phalcon_mvc_model_metadata_xcache#models_primary_key
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: '### *integer* **MODELS_PRIMARY_KEY**'
- name: Mvc\Model\MetaData\Xcache::MODELS_REVERSE_COLUMN_MAP
  id: api/phalcon_mvc_model_metadata_xcache#models_reverse_column_map
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: |-
    ### *integer* **MODELS_REVERSE_COLUMN_MAP**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\Model\MetaData\Xcache constructor
- name: Mvc\Model\MetaData\Xcache::read
  id: api/phalcon_mvc_model_metadata_xcache#read
  summary: null
  belongs_to: Mvc\Model\MetaData\Xcache
  description: |-
    ### public *array* **read** (*string* $key)

    Reads metadata from XCache
- name: Mvc\Model\MetaData\Xcache::write
  id: api/phalcon_mvc_model_metadata_xcache#write
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\MetaData\Xcache
  description: "### public **write** (*string* $key, *array* $data)\n\nWrites the metadata to XCache\n\n### final protected **\\_initialize** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $key, *mixed* $table, *mixed* $schema) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nInitialize the metadata for certain table\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSets the DependencyInjector container\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the DependencyInjector container\n\n### public **setStrategy** ([*Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface*](phalcon_mvc_model_metadata_strategyinterface) $strategy) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the meta-data extraction strategy\n\n### public **getStrategy** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturn the strategy to obtain the meta-data\n\n### final public **readMetaData** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the complete meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaData(\n        new Robots()\n    )\n);\n```\n\n### final public **readMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads meta-data for certain model\n\n``` php\nprint_r(\n    $metaData->readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n```\n\n### final public **writeMetaDataIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index, *mixed* $data) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nWrites meta-data for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" => \"name\",\n        ]\n    )\n);\n```\n\n### final public **readColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads the ordered/reversed column map for certain model\n\n``` php\nprint_r(\n    $metaData->readColumnMap(\n        new Robots()\n    )\n);\n```\n\n### final public **readColumnMapIndex** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReads column-map information for certain model using a MODEL\\_\\* constant\n\n``` php\nprint_r(\n    $metaData->readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n```\n\n### public **getAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns table attributes names (fields)\n\n``` php\nprint_r(\n    $metaData->getAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are part of the primary key\n\n``` php\nprint_r(\n    $metaData->getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNonPrimaryKeyAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of fields which are not part of the primary key\n\n``` php\nprint_r(\n    $metaData->getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getNotNullAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns an array of not null attributes\n\n``` php\nprint_r(\n    $metaData->getNotNullAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their data types\n\n``` php\nprint_r(\n    $metaData->getDataTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getDataTypesNumeric** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes which types are numerical\n\n``` php\nprint_r(\n    $metaData->getDataTypesNumeric(\n        new Robots()\n    )\n);\n```\n\n### public *string* **getIdentityField** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the name of identity field (if one is present)\n\n``` php\nprint_r(\n    $metaData->getIdentityField(\n        new Robots()\n    )\n);\n```\n\n### public **getBindTypes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes and their bind data types\n\n``` php\nprint_r(\n    $metaData->getBindTypes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the INSERT SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes that must be ignored from the UPDATE SQL generation\n\n``` php\nprint_r(\n    $metaData->getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **setAutomaticCreateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the INSERT SQL generation\n\n``` php\n$metaData->setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" => true,\n    ]\n);\n```\n\n### public **setAutomaticUpdateAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that must be ignored from the UPDATE SQL generation\n\n``` php\n$metaData->setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" => true,\n    ]\n);\n```\n\n### public **setEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $attributes) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nSet the attributes that allow empty string values\n\n``` php\n$metaData->setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" => true,\n    ]\n);\n```\n\n### public **getEmptyStringAttributes** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes allow empty strings\n\n``` php\nprint_r(\n    $metaData->getEmptyStringAttributes(\n        new Robots()\n    )\n);\n```\n\n### public **getDefaultValues** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns attributes (which have default values) and their default values\n\n``` php\nprint_r(\n    $metaData->getDefaultValues(\n        new Robots()\n    )\n);\n```\n\n### public **getColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the column map if any\n\n``` php\nprint_r(\n    $metaData->getColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **getReverseColumnMap** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nReturns the reverse column map if any\n\n``` php\nprint_r(\n    $metaData->getReverseColumnMap(\n        new Robots()\n    )\n);\n```\n\n### public **hasAttribute** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *mixed* $attribute) inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nCheck if a model has certain attribute\n\n``` php\nvar_dump(\n    $metaData->hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n```\n\n### public **isEmpty** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nChecks if the internal meta-data container is empty\n\n``` php\nvar_dump(\n    $metaData->isEmpty()\n);\n```\n\n### public **reset** () inherited from [*Phalcon\\Mvc\\Model\\MetaData*](phalcon_mvc_model_metadata)\n\nResets internal meta-data in order to regenerate it\n\n``` php\n$metaData->reset();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Xcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Xcache.html)"
- name: Mvc\Model\Query
  id: api/phalcon_mvc_model_query
  summary: This class takes a PHQL intermediate representation and executes it
  description: "# Class **Phalcon\\Mvc\\Model\\Query**\n\n*implements* [*Phalcon\\Mvc\\Model\\QueryInterface*](phalcon_mvc_model_queryinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query.zep)\n\nThis class takes a PHQL intermediate representation and executes it.\n\n``` php\n$phql = \"SELECT c.price*0.16 AS taxes, c.* FROM Cars AS c JOIN Brands AS b\n         WHERE b.name = :name: ORDER BY c.name\";\n\n$result = $manager->executeQuery(\n    $phql,\n    [\n        \"name\" => \"Lamborghini\",\n    ]\n);\n\nforeach ($result as $row) {\n    echo \"Name: \",  $row->cars->name, \"\\n\";\n    echo \"Price: \", $row->cars->price, \"\\n\";\n    echo \"Taxes: \", $row->taxes, \"\\n\";\n}\n```\n\n## Constants\n\n### *integer* **TYPE_SELECT**\n\n### *integer* **TYPE_INSERT**\n\n### *integer* **TYPE_UPDATE**\n\n### *integer* **TYPE_DELETE**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*string* $phql\\], \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\], \\[*mixed* $options\\])\n\nPhalcon\\Mvc\\Model\\Query constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injection container\n\n### public **getDI** ()\n\nReturns the dependency injection container\n\n### public **setUniqueRow** (*mixed* $uniqueRow)\n\nTells to the query if only the first row in the resultset must be returned\n\n### public **getUniqueRow** ()\n\nCheck if the query is programmed to get only the first row in the resultset\n\n### final protected **\\_getQualified** (*array* $expr)\n\nReplaces the model’s name to its source name in a qualified-name expression\n\n### final protected **\\_getCallArgument** (*array* $argument)\n\nResolves an expression in a single call argument\n\n### final protected **\\_getCaseExpression** (*array* $expr)\n\nResolves an expression in a single call argument\n\n### final protected **\\_getFunctionCall** (*array* $expr)\n\nResolves an expression in a single call argument\n\n### final protected *string* **\\_getExpression** (*array* $expr, \\[*boolean* $quoting\\])\n\nResolves an expression from its intermediate code into a string\n\n### final protected **\\_getSelectColumn** (*array* $column)\n\nResolves a column from its intermediate representation into an array used to determine if the resultset produced is simple or complex\n\n### final protected *string* **\\_getTable** ([*Phalcon\\Mvc\\Model\\ManagerInterface*](phalcon_mvc_model_managerinterface) $manager, *array* $qualifiedName)\n\nResolves a table in a SELECT statement checking if the model exists\n\n### final protected **\\_getJoin** ([*Phalcon\\Mvc\\Model\\ManagerInterface*](phalcon_mvc_model_managerinterface) $manager, *mixed* $join)\n\nResolves a JOIN clause checking if the associated models exist\n\n### final protected *string* **\\_getJoinType** (*array* $join)\n\nResolves a JOIN type\n\n### final protected *array* **\\_getSingleJoin** (*string* $joinType, *string* $joinSource, *string* $modelAlias, *string* $joinAlias, [*Phalcon\\Mvc\\Model\\RelationInterface*](phalcon_mvc_model_relationinterface) $relation)\n\nResolves joins involving has-one/belongs-to/has-many relations\n\n### final protected *array* **\\_getMultiJoin** (*string* $joinType, *string* $joinSource, *string* $modelAlias, *string* $joinAlias, [*Phalcon\\Mvc\\Model\\RelationInterface*](phalcon_mvc_model_relationinterface) $relation)\n\nResolves joins involving many-to-many relations\n\n### final protected *array* **\\_getJoins** (*array* $select)\n\nProcesses the JOINs in the query returning an internal representation for the database dialect\n\n### final protected *array* **\\_getOrderClause** (*array* \\| *string* $order)\n\nReturns a processed order clause for a SELECT statement\n\n### final protected **\\_getGroupClause** (*array* $group)\n\nReturns a processed group clause for a SELECT statement\n\n### final protected **\\_getLimitClause** (*array* $limitClause)\n\nReturns a processed limit clause for a SELECT statement\n\n### final protected **\\_prepareSelect** (\\[*mixed* $ast\\], \\[*mixed* $merge\\])\n\nAnalyzes a SELECT intermediate code and produces an array to be executed later\n\n### final protected **\\_prepareInsert** ()\n\nAnalyzes an INSERT intermediate code and produces an array to be executed later\n\n### final protected **\\_prepareUpdate** ()\n\nAnalyzes an UPDATE intermediate code and produces an array to be executed later\n\n### final protected **\\_prepareDelete** ()\n\nAnalyzes a DELETE intermediate code and produces an array to be executed later\n\n### public **parse** ()\n\nParses the intermediate code produced by Phalcon\\Mvc\\Model\\Query\\Lang generating another intermediate representation that could be executed by Phalcon\\Mvc\\Model\\Query\n\n### public **getCache** ()\n\nReturns the current cache backend instance\n\n### final protected **\\_executeSelect** (*mixed* $intermediate, *mixed* $bindParams, *mixed* $bindTypes, \\[*mixed* $simulate\\])\n\nExecutes the SELECT intermediate representation producing a Phalcon\\Mvc\\Model\\Resultset\n\n### final protected [*Phalcon\\Mvc\\Model\\Query\\StatusInterface*](phalcon_mvc_model_query_statusinterface) **\\_executeInsert** (*array* $intermediate, *array* $bindParams, *array* $bindTypes)\n\nExecutes the INSERT intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status\n\n### final protected [*Phalcon\\Mvc\\Model\\Query\\StatusInterface*](phalcon_mvc_model_query_statusinterface) **\\_executeUpdate** (*array* $intermediate, *array* $bindParams, *array* $bindTypes)\n\nExecutes the UPDATE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status\n\n### final protected [*Phalcon\\Mvc\\Model\\Query\\StatusInterface*](phalcon_mvc_model_query_statusinterface) **\\_executeDelete** (*array* $intermediate, *array* $bindParams, *array* $bindTypes)\n\nExecutes the DELETE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status\n\n### final protected [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface) **\\_getRelatedRecords** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $intermediate, *array* $bindParams, *array* $bindTypes)\n\nQuery the records on which the UPDATE/DELETE operation well be done\n\n### public *mixed* **execute** (\\[*array* $bindParams\\], \\[*array* $bindTypes\\])\n\nExecutes a parsed PHQL statement\n\n### public [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) **getSingleResult** (\\[*array* $bindParams\\], \\[*array* $bindTypes\\])\n\nExecutes the query returning the first result\n\n### public **setType** (*mixed* $type)\n\nSets the type of PHQL statement to be executed\n\n### public **getType** ()\n\nGets the type of PHQL statement executed\n\n### public **setBindParams** (*array* $bindParams, \\[*mixed* $merge\\])\n\nSet default bind parameters\n\n### public *array* **getBindParams** ()\n\nReturns default bind params\n\n### public **setBindTypes** (*array* $bindTypes, \\[*mixed* $merge\\])\n\nSet default bind parameters\n\n### public **setSharedLock** (\\[*mixed* $sharedLock\\])\n\nSet SHARED LOCK clause\n\n### public *array* **getBindTypes** ()\n\nReturns default bind types\n\n### public **setIntermediate** (*array* $intermediate)\n\nAllows to set the IR to be executed\n\n### public *array* **getIntermediate** ()\n\nReturns the intermediate representation of the PHQL statement\n\n### public **cache** (*mixed* $cacheOptions)\n\nSets the cache parameters of the query\n\n### public **getCacheOptions** ()\n\nReturns the current cache options\n\n### public **getSql** ()\n\nReturns the SQL to be generated by the internal PHQL (only works in SELECT statements)\n\n### public static **clean** ()\n\nDestroys the internal PHQL cache\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query.html)"
- name: Mvc\Model\Query::cache
  id: api/phalcon_mvc_model_query#cache
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **cache** (*mixed* $cacheOptions)

    Sets the cache parameters of the query
- name: Mvc\Model\Query::clean
  id: api/phalcon_mvc_model_query#clean
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Query
  description: "### public static **clean** ()\n\nDestroys the internal PHQL cache\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query.html)"
- name: Mvc\Model\Query::execute
  id: api/phalcon_mvc_model_query#execute
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public *mixed* **execute** (\[*array* $bindParams\], \[*array* $bindTypes\])

    Executes a parsed PHQL statement
- name: Mvc\Model\Query::getBindParams
  id: api/phalcon_mvc_model_query#getbindparams
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public *array* **getBindParams** ()

    Returns default bind params
- name: Mvc\Model\Query::getBindTypes
  id: api/phalcon_mvc_model_query#getbindtypes
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public *array* **getBindTypes** ()

    Returns default bind types
- name: Mvc\Model\Query::getCache
  id: api/phalcon_mvc_model_query#getcache
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **getCache** ()

    Returns the current cache backend instance

    ### final protected **\_executeSelect** (*mixed* $intermediate, *mixed* $bindParams, *mixed* $bindTypes, \[*mixed* $simulate\])

    Executes the SELECT intermediate representation producing a Phalcon\Mvc\Model\Resultset

    ### final protected [*Phalcon\Mvc\Model\Query\StatusInterface*](phalcon_mvc_model_query_statusinterface) **\_executeInsert** (*array* $intermediate, *array* $bindParams, *array* $bindTypes)

    Executes the INSERT intermediate representation producing a Phalcon\Mvc\Model\Query\Status

    ### final protected [*Phalcon\Mvc\Model\Query\StatusInterface*](phalcon_mvc_model_query_statusinterface) **\_executeUpdate** (*array* $intermediate, *array* $bindParams, *array* $bindTypes)

    Executes the UPDATE intermediate representation producing a Phalcon\Mvc\Model\Query\Status

    ### final protected [*Phalcon\Mvc\Model\Query\StatusInterface*](phalcon_mvc_model_query_statusinterface) **\_executeDelete** (*array* $intermediate, *array* $bindParams, *array* $bindTypes)

    Executes the DELETE intermediate representation producing a Phalcon\Mvc\Model\Query\Status

    ### final protected [*Phalcon\Mvc\Model\ResultsetInterface*](phalcon_mvc_model_resultsetinterface) **\_getRelatedRecords** ([*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $model, *array* $intermediate, *array* $bindParams, *array* $bindTypes)

    Query the records on which the UPDATE/DELETE operation well be done
- name: Mvc\Model\Query::getCacheOptions
  id: api/phalcon_mvc_model_query#getcacheoptions
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **getCacheOptions** ()

    Returns the current cache options
- name: Mvc\Model\Query::getDI
  id: api/phalcon_mvc_model_query#getdi
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **getDI** ()

    Returns the dependency injection container
- name: Mvc\Model\Query::getIntermediate
  id: api/phalcon_mvc_model_query#getintermediate
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public *array* **getIntermediate** ()

    Returns the intermediate representation of the PHQL statement
- name: Mvc\Model\Query::getSingleResult
  id: api/phalcon_mvc_model_query#getsingleresult
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) **getSingleResult** (\[*array* $bindParams\], \[*array* $bindTypes\])

    Executes the query returning the first result
- name: Mvc\Model\Query::getSql
  id: api/phalcon_mvc_model_query#getsql
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **getSql** ()

    Returns the SQL to be generated by the internal PHQL (only works in SELECT statements)
- name: Mvc\Model\Query::getType
  id: api/phalcon_mvc_model_query#gettype
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **getType** ()

    Gets the type of PHQL statement executed
- name: Mvc\Model\Query::getUniqueRow
  id: api/phalcon_mvc_model_query#getuniquerow
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **getUniqueRow** ()

    Check if the query is programmed to get only the first row in the resultset

    ### final protected **\_getQualified** (*array* $expr)

    Replaces the model’s name to its source name in a qualified-name expression

    ### final protected **\_getCallArgument** (*array* $argument)

    Resolves an expression in a single call argument

    ### final protected **\_getCaseExpression** (*array* $expr)

    Resolves an expression in a single call argument

    ### final protected **\_getFunctionCall** (*array* $expr)

    Resolves an expression in a single call argument

    ### final protected *string* **\_getExpression** (*array* $expr, \[*boolean* $quoting\])

    Resolves an expression from its intermediate code into a string

    ### final protected **\_getSelectColumn** (*array* $column)

    Resolves a column from its intermediate representation into an array used to determine if the resultset produced is simple or complex

    ### final protected *string* **\_getTable** ([*Phalcon\Mvc\Model\ManagerInterface*](phalcon_mvc_model_managerinterface) $manager, *array* $qualifiedName)

    Resolves a table in a SELECT statement checking if the model exists

    ### final protected **\_getJoin** ([*Phalcon\Mvc\Model\ManagerInterface*](phalcon_mvc_model_managerinterface) $manager, *mixed* $join)

    Resolves a JOIN clause checking if the associated models exist

    ### final protected *string* **\_getJoinType** (*array* $join)

    Resolves a JOIN type

    ### final protected *array* **\_getSingleJoin** (*string* $joinType, *string* $joinSource, *string* $modelAlias, *string* $joinAlias, [*Phalcon\Mvc\Model\RelationInterface*](phalcon_mvc_model_relationinterface) $relation)

    Resolves joins involving has-one/belongs-to/has-many relations

    ### final protected *array* **\_getMultiJoin** (*string* $joinType, *string* $joinSource, *string* $modelAlias, *string* $joinAlias, [*Phalcon\Mvc\Model\RelationInterface*](phalcon_mvc_model_relationinterface) $relation)

    Resolves joins involving many-to-many relations

    ### final protected *array* **\_getJoins** (*array* $select)

    Processes the JOINs in the query returning an internal representation for the database dialect

    ### final protected *array* **\_getOrderClause** (*array* \| *string* $order)

    Returns a processed order clause for a SELECT statement

    ### final protected **\_getGroupClause** (*array* $group)

    Returns a processed group clause for a SELECT statement

    ### final protected **\_getLimitClause** (*array* $limitClause)

    Returns a processed limit clause for a SELECT statement

    ### final protected **\_prepareSelect** (\[*mixed* $ast\], \[*mixed* $merge\])

    Analyzes a SELECT intermediate code and produces an array to be executed later

    ### final protected **\_prepareInsert** ()

    Analyzes an INSERT intermediate code and produces an array to be executed later

    ### final protected **\_prepareUpdate** ()

    Analyzes an UPDATE intermediate code and produces an array to be executed later

    ### final protected **\_prepareDelete** ()

    Analyzes a DELETE intermediate code and produces an array to be executed later
- name: Mvc\Model\Query::parse
  id: api/phalcon_mvc_model_query#parse
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **parse** ()

    Parses the intermediate code produced by Phalcon\Mvc\Model\Query\Lang generating another intermediate representation that could be executed by Phalcon\Mvc\Model\Query
- name: Mvc\Model\Query::setBindParams
  id: api/phalcon_mvc_model_query#setbindparams
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **setBindParams** (*array* $bindParams, \[*mixed* $merge\])

    Set default bind parameters
- name: Mvc\Model\Query::setBindTypes
  id: api/phalcon_mvc_model_query#setbindtypes
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **setBindTypes** (*array* $bindTypes, \[*mixed* $merge\])

    Set default bind parameters
- name: Mvc\Model\Query::setDI
  id: api/phalcon_mvc_model_query#setdi
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injection container
- name: Mvc\Model\Query::setIntermediate
  id: api/phalcon_mvc_model_query#setintermediate
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **setIntermediate** (*array* $intermediate)

    Allows to set the IR to be executed
- name: Mvc\Model\Query::setSharedLock
  id: api/phalcon_mvc_model_query#setsharedlock
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **setSharedLock** (\[*mixed* $sharedLock\])

    Set SHARED LOCK clause
- name: Mvc\Model\Query::setType
  id: api/phalcon_mvc_model_query#settype
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **setType** (*mixed* $type)

    Sets the type of PHQL statement to be executed
- name: Mvc\Model\Query::setUniqueRow
  id: api/phalcon_mvc_model_query#setuniquerow
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### public **setUniqueRow** (*mixed* $uniqueRow)

    Tells to the query if only the first row in the resultset must be returned
- name: Mvc\Model\Query::TYPE_DELETE
  id: api/phalcon_mvc_model_query#type_delete
  summary: null
  belongs_to: Mvc\Model\Query
  description: |-
    ### *integer* **TYPE_DELETE**

    ## Methods

    ### public **\_\_construct** (\[*string* $phql\], \[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\], \[*mixed* $options\])

    Phalcon\Mvc\Model\Query constructor
- name: Mvc\Model\Query::TYPE_INSERT
  id: api/phalcon_mvc_model_query#type_insert
  summary: null
  belongs_to: Mvc\Model\Query
  description: '### *integer* **TYPE_INSERT**'
- name: Mvc\Model\Query::TYPE_SELECT
  id: api/phalcon_mvc_model_query#type_select
  summary: null
  belongs_to: Mvc\Model\Query
  description: '### *integer* **TYPE_SELECT**'
- name: Mvc\Model\Query::TYPE_UPDATE
  id: api/phalcon_mvc_model_query#type_update
  summary: null
  belongs_to: Mvc\Model\Query
  description: '### *integer* **TYPE_UPDATE**'
- name: Mvc\Model\QueryInterface
  id: api/phalcon_mvc_model_queryinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\QueryInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/queryinterface.zep)\n\n## Methods\n\n### abstract public **parse** ()\n\n...\n\n### abstract public **cache** (*mixed* $cacheOptions)\n\n...\n\n### abstract public **getCacheOptions** ()\n\n...\n\n### abstract public **setUniqueRow** (*mixed* $uniqueRow)\n\n...\n\n### abstract public **getUniqueRow** ()\n\n...\n\n### abstract public **execute** (\\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_QueryInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_QueryInterface.html)"
- name: Mvc\Model\QueryInterface::cache
  id: api/phalcon_mvc_model_queryinterface#cache
  summary: null
  belongs_to: Mvc\Model\QueryInterface
  description: |-
    ### abstract public **cache** (*mixed* $cacheOptions)

    ...
- name: Mvc\Model\QueryInterface::execute
  id: api/phalcon_mvc_model_queryinterface#execute
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\QueryInterface
  description: "### abstract public **execute** (\\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_QueryInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_QueryInterface.html)"
- name: Mvc\Model\QueryInterface::getCacheOptions
  id: api/phalcon_mvc_model_queryinterface#getcacheoptions
  summary: null
  belongs_to: Mvc\Model\QueryInterface
  description: |-
    ### abstract public **getCacheOptions** ()

    ...
- name: Mvc\Model\QueryInterface::getUniqueRow
  id: api/phalcon_mvc_model_queryinterface#getuniquerow
  summary: null
  belongs_to: Mvc\Model\QueryInterface
  description: |-
    ### abstract public **getUniqueRow** ()

    ...
- name: Mvc\Model\QueryInterface::parse
  id: api/phalcon_mvc_model_queryinterface#parse
  summary: null
  belongs_to: Mvc\Model\QueryInterface
  description: |-
    ### abstract public **parse** ()

    ...
- name: Mvc\Model\QueryInterface::setUniqueRow
  id: api/phalcon_mvc_model_queryinterface#setuniquerow
  summary: null
  belongs_to: Mvc\Model\QueryInterface
  description: |-
    ### abstract public **setUniqueRow** (*mixed* $uniqueRow)

    ...
- name: Mvc\Model\Query\Builder
  id: api/phalcon_mvc_model_query_builder
  summary: Sets a HAVING condition clause
  description: "# Class **Phalcon\\Mvc\\Model\\Query\\Builder**\n\n*implements* [*Phalcon\\Mvc\\Model\\Query\\BuilderInterface*](phalcon_mvc_model_query_builderinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/builder.zep)\n\nHelps to create PHQL queries using an OO interface\n\n``` php\n$params = [\n    \"models\"     => [\"Users\"],\n    \"columns\"    => [\"id\", \"name\", \"status\"],\n    \"conditions\" => [\n        [\n            \"created > :min: AND created < :max:\",\n            [\n                \"min\" => \"2013-01-01\",\n                \"max\" => \"2014-01-01\",\n            ],\n            [\n                \"min\" => PDO::PARAM_STR,\n                \"max\" => PDO::PARAM_STR,\n            ],\n        ],\n    ],\n    // or \"conditions\" => \"created > '2013-01-01' AND created < '2014-01-01'\",\n    \"group\"      => [\"id\", \"name\"],\n    \"having\"     => \"name = 'Kamil'\",\n    \"order\"      => [\"name\", \"id\"],\n    \"limit\"      => 20,\n    \"offset\"     => 20,\n    // or \"limit\" => [20, 20],\n];\n\n$queryBuilder = new \\Phalcon\\Mvc\\Model\\Query\\Builder($params);\n```\n\n## Constants\n\n### *string* **OPERATOR_OR**\n\n### *string* **OPERATOR_AND**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*mixed* $params\\], \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\nPhalcon\\Mvc\\Model\\Query\\Builder constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public **getDI** ()\n\nReturns the DependencyInjector container\n\n### public **distinct** (*mixed* $distinct)\n\nSets SELECT DISTINCT / SELECT ALL flag\n\n``` php\n$builder->distinct(\"status\");\n$builder->distinct(null);\n```\n\n### public **getDistinct** ()\n\nReturns SELECT DISTINCT / SELECT ALL flag\n\n### public **columns** (*mixed* $columns)\n\nSets the columns to be queried\n\n``` php\n$builder->columns(\"id, name\");\n\n$builder->columns(\n    [\n        \"id\",\n        \"name\",\n    ]\n);\n\n$builder->columns(\n    [\n        \"name\",\n        \"number\" => \"COUNT(*)\",\n    ]\n);\n```\n\n### public *string* \\| *array* **getColumns** ()\n\nReturn the columns to be queried\n\n### public **from** (*mixed* $models)\n\nSets the models who makes part of the query\n\n``` php\n$builder->from(\"Robots\");\n\n$builder->from(\n    [\n        \"Robots\",\n        \"RobotsParts\",\n    ]\n);\n\n$builder->from(\n    [\n        \"r\"  => \"Robots\",\n        \"rp\" => \"RobotsParts\",\n    ]\n);\n```\n\n### public **addFrom** (*mixed* $model, \\[*mixed* $alias\\], \\[*mixed* $with\\])\n\nAdd a model to take part of the query\n\n``` php\n// Load data from models Robots\n$builder->addFrom(\"Robots\");\n\n// Load data from model 'Robots' using 'r' as alias in PHQL\n$builder->addFrom(\"Robots\", \"r\");\n\n// Load data from model 'Robots' using 'r' as alias in PHQL\n// and eager load model 'RobotsParts'\n$builder->addFrom(\"Robots\", \"r\", \"RobotsParts\");\n\n// Load data from model 'Robots' using 'r' as alias in PHQL\n// and eager load models 'RobotsParts' and 'Parts'\n$builder->addFrom(\n    \"Robots\",\n    \"r\",\n    [\n        \"RobotsParts\",\n        \"Parts\",\n    ]\n);\n```\n\n### public *string* \\| *array* **getFrom** ()\n\nReturn the models who makes part of the query\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **join** (*string* $model, \\[*string* $conditions\\], \\[*string* $alias\\], \\[*string* $type\\])\n\nAdds an INNER join to the query\n\n``` php\n// Inner Join model 'Robots' with automatic conditions and alias\n$builder->join(\"Robots\");\n\n// Inner Join model 'Robots' specifying conditions\n$builder->join(\"Robots\", \"Robots.id = RobotsParts.robots_id\");\n\n// Inner Join model 'Robots' specifying conditions and alias\n$builder->join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n\n// Left Join model 'Robots' specifying conditions, alias and type of join\n$builder->join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\", \"LEFT\");\n```\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **innerJoin** (*string* $model, \\[*string* $conditions\\], \\[*string* $alias\\])\n\nAdds an INNER join to the query\n\n``` php\n// Inner Join model 'Robots' with automatic conditions and alias\n$builder->innerJoin(\"Robots\");\n\n// Inner Join model 'Robots' specifying conditions\n$builder->innerJoin(\"Robots\", \"Robots.id = RobotsParts.robots_id\");\n\n// Inner Join model 'Robots' specifying conditions and alias\n$builder->innerJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n```\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **leftJoin** (*string* $model, \\[*string* $conditions\\], \\[*string* $alias\\])\n\nAdds a LEFT join to the query\n\n``` php\n$builder->leftJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n```\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **rightJoin** (*string* $model, \\[*string* $conditions\\], \\[*string* $alias\\])\n\nAdds a RIGHT join to the query\n\n``` php\n$builder->rightJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n```\n\n### public *array* **getJoins** ()\n\nReturn join parts of the query\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **where** (*mixed* $conditions, \\[*array* $bindParams\\], \\[*array* $bindTypes\\])\n\nSets the query conditions\n\n``` php\n$builder->where(100);\n\n$builder->where(\"name = 'Peter'\");\n\n$builder->where(\n    \"name = :name: AND id > :id:\",\n    [\n        \"name\" => \"Peter\",\n        \"id\"   => 100,\n    ]\n);\n```\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **andWhere** (*string* $conditions, \\[*array* $bindParams\\], \\[*array* $bindTypes\\])\n\nAppends a condition to the current conditions using a AND operator\n\n``` php\n$builder->andWhere(\"name = 'Peter'\");\n\n$builder->andWhere(\n    \"name = :name: AND id > :id:\",\n    [\n        \"name\" => \"Peter\",\n        \"id\"   => 100,\n    ]\n);\n```\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **orWhere** (*string* $conditions, \\[*array* $bindParams\\], \\[*array* $bindTypes\\])\n\nAppends a condition to the current conditions using an OR operator\n\n``` php\n$builder->orWhere(\"name = 'Peter'\");\n\n$builder->orWhere(\n    \"name = :name: AND id > :id:\",\n    [\n        \"name\" => \"Peter\",\n        \"id\"   => 100,\n    ]\n);\n```\n\n### public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \\[*mixed* $operator\\])\n\nAppends a BETWEEN condition to the current conditions\n\n``` php\n$builder->betweenWhere(\"price\", 100.25, 200.50);\n```\n\n### public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \\[*mixed* $operator\\])\n\nAppends a NOT BETWEEN condition to the current conditions\n\n``` php\n$builder->notBetweenWhere(\"price\", 100.25, 200.50);\n```\n\n### public **inWhere** (*mixed* $expr, *array* $values, \\[*mixed* $operator\\])\n\nAppends an IN condition to the current conditions\n\n``` php\n$builder->inWhere(\"id\", [1, 2, 3]);\n```\n\n### public **notInWhere** (*mixed* $expr, *array* $values, \\[*mixed* $operator\\])\n\nAppends a NOT IN condition to the current conditions\n\n``` php\n$builder->notInWhere(\"id\", [1, 2, 3]);\n```\n\n### public *string* \\| *array* **getWhere** ()\n\nReturn the conditions for the query\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **orderBy** (*string* \\| *array* $orderBy)\n\nSets an ORDER BY condition clause\n\n``` php\n$builder->orderBy(\"Robots.name\");\n$builder->orderBy([\"1\", \"Robots.name\"]);\n```\n\n### public *string* \\| *array* **getOrderBy** ()\n\nReturns the set ORDER BY clause\n\n### public **having** (*mixed* $having)\n\nSets a HAVING condition clause. You need to escape PHQL reserved words using \\[ and \\] delimiters\n\n``` php\n$builder->having(\"SUM(Robots.price) > 0\");\n```\n\n### public **forUpdate** (*mixed* $forUpdate)\n\nSets a FOR UPDATE clause\n\n``` php\n$builder->forUpdate(true);\n```\n\n### public *string* \\| *array* **getHaving** ()\n\nReturn the current having clause\n\n### public **limit** (*mixed* $limit, \\[*mixed* $offset\\])\n\nSets a LIMIT clause, optionally an offset clause\n\n``` php\n$builder->limit(100);\n$builder->limit(100, 20);\n$builder->limit(\"100\", \"20\");\n```\n\n### public *string* \\| *array* **getLimit** ()\n\nReturns the current LIMIT clause\n\n### public **offset** (*mixed* $offset)\n\nSets an OFFSET clause\n\n``` php\n$builder->offset(30);\n```\n\n### public *string* \\| *array* **getOffset** ()\n\nReturns the current OFFSET clause\n\n### public [*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) **groupBy** (*string* \\| *array* $group)\n\nSets a GROUP BY clause\n\n``` php\n$builder->groupBy(\n    [\n        \"Robots.name\",\n    ]\n);\n```\n\n### public *string* **getGroupBy** ()\n\nReturns the GROUP BY clause\n\n### final public *string* **getPhql** ()\n\nReturns a PHQL statement built based on the builder parameters\n\n### public **getQuery** ()\n\nReturns the query built\n\n### final public **autoescape** (*mixed* $identifier)\n\nAutomatically escapes identifiers but only if they need to be escaped.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Builder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Builder.html)"
- name: Mvc\Model\Query\Builder::addFrom
  id: api/phalcon_mvc_model_query_builder#addfrom
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **addFrom** (*mixed* $model, \[*mixed* $alias\], \[*mixed* $with\])

    Add a model to take part of the query

    ``` php
    // Load data from models Robots
    $builder->addFrom("Robots");

    // Load data from model 'Robots' using 'r' as alias in PHQL
    $builder->addFrom("Robots", "r");

    // Load data from model 'Robots' using 'r' as alias in PHQL
    // and eager load model 'RobotsParts'
    $builder->addFrom("Robots", "r", "RobotsParts");

    // Load data from model 'Robots' using 'r' as alias in PHQL
    // and eager load models 'RobotsParts' and 'Parts'
    $builder->addFrom(
        "Robots",
        "r",
        [
            "RobotsParts",
            "Parts",
        ]
    );
    ```
- name: Mvc\Model\Query\Builder::andWhere
  id: api/phalcon_mvc_model_query_builder#andwhere
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **andWhere** (*string* $conditions, \[*array* $bindParams\], \[*array* $bindTypes\])

    Appends a condition to the current conditions using a AND operator

    ``` php
    $builder->andWhere("name = 'Peter'");

    $builder->andWhere(
        "name = :name: AND id > :id:",
        [
            "name" => "Peter",
            "id"   => 100,
        ]
    );
    ```
- name: Mvc\Model\Query\Builder::autoescape
  id: api/phalcon_mvc_model_query_builder#autoescape
  summary: Automatically escapes identifiers but only if they need to be escaped
  belongs_to: Mvc\Model\Query\Builder
  description: "### final public **autoescape** (*mixed* $identifier)\n\nAutomatically escapes identifiers but only if they need to be escaped.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Builder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Builder.html)"
- name: Mvc\Model\Query\Builder::betweenWhere
  id: api/phalcon_mvc_model_query_builder#betweenwhere
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \[*mixed* $operator\])

    Appends a BETWEEN condition to the current conditions

    ``` php
    $builder->betweenWhere("price", 100.25, 200.50);
    ```
- name: Mvc\Model\Query\Builder::columns
  id: api/phalcon_mvc_model_query_builder#columns
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **columns** (*mixed* $columns)

    Sets the columns to be queried

    ``` php
    $builder->columns("id, name");

    $builder->columns(
        [
            "id",
            "name",
        ]
    );

    $builder->columns(
        [
            "name",
            "number" => "COUNT(*)",
        ]
    );
    ```
- name: Mvc\Model\Query\Builder::distinct
  id: api/phalcon_mvc_model_query_builder#distinct
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **distinct** (*mixed* $distinct)

    Sets SELECT DISTINCT / SELECT ALL flag

    ``` php
    $builder->distinct("status");
    $builder->distinct(null);
    ```
- name: Mvc\Model\Query\Builder::forUpdate
  id: api/phalcon_mvc_model_query_builder#forupdate
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **forUpdate** (*mixed* $forUpdate)

    Sets a FOR UPDATE clause

    ``` php
    $builder->forUpdate(true);
    ```
- name: Mvc\Model\Query\Builder::from
  id: api/phalcon_mvc_model_query_builder#from
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **from** (*mixed* $models)

    Sets the models who makes part of the query

    ``` php
    $builder->from("Robots");

    $builder->from(
        [
            "Robots",
            "RobotsParts",
        ]
    );

    $builder->from(
        [
            "r"  => "Robots",
            "rp" => "RobotsParts",
        ]
    );
    ```
- name: Mvc\Model\Query\Builder::getColumns
  id: api/phalcon_mvc_model_query_builder#getcolumns
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* \| *array* **getColumns** ()

    Return the columns to be queried
- name: Mvc\Model\Query\Builder::getDI
  id: api/phalcon_mvc_model_query_builder#getdi
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **getDI** ()

    Returns the DependencyInjector container
- name: Mvc\Model\Query\Builder::getDistinct
  id: api/phalcon_mvc_model_query_builder#getdistinct
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **getDistinct** ()

    Returns SELECT DISTINCT / SELECT ALL flag
- name: Mvc\Model\Query\Builder::getFrom
  id: api/phalcon_mvc_model_query_builder#getfrom
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* \| *array* **getFrom** ()

    Return the models who makes part of the query
- name: Mvc\Model\Query\Builder::getGroupBy
  id: api/phalcon_mvc_model_query_builder#getgroupby
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* **getGroupBy** ()

    Returns the GROUP BY clause
- name: Mvc\Model\Query\Builder::getHaving
  id: api/phalcon_mvc_model_query_builder#gethaving
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* \| *array* **getHaving** ()

    Return the current having clause
- name: Mvc\Model\Query\Builder::getJoins
  id: api/phalcon_mvc_model_query_builder#getjoins
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *array* **getJoins** ()

    Return join parts of the query
- name: Mvc\Model\Query\Builder::getLimit
  id: api/phalcon_mvc_model_query_builder#getlimit
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* \| *array* **getLimit** ()

    Returns the current LIMIT clause
- name: Mvc\Model\Query\Builder::getOffset
  id: api/phalcon_mvc_model_query_builder#getoffset
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* \| *array* **getOffset** ()

    Returns the current OFFSET clause
- name: Mvc\Model\Query\Builder::getOrderBy
  id: api/phalcon_mvc_model_query_builder#getorderby
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* \| *array* **getOrderBy** ()

    Returns the set ORDER BY clause
- name: Mvc\Model\Query\Builder::getPhql
  id: api/phalcon_mvc_model_query_builder#getphql
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### final public *string* **getPhql** ()

    Returns a PHQL statement built based on the builder parameters
- name: Mvc\Model\Query\Builder::getQuery
  id: api/phalcon_mvc_model_query_builder#getquery
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **getQuery** ()

    Returns the query built
- name: Mvc\Model\Query\Builder::getWhere
  id: api/phalcon_mvc_model_query_builder#getwhere
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public *string* \| *array* **getWhere** ()

    Return the conditions for the query
- name: Mvc\Model\Query\Builder::groupBy
  id: api/phalcon_mvc_model_query_builder#groupby
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **groupBy** (*string* \| *array* $group)

    Sets a GROUP BY clause

    ``` php
    $builder->groupBy(
        [
            "Robots.name",
        ]
    );
    ```
- name: Mvc\Model\Query\Builder::having
  id: api/phalcon_mvc_model_query_builder#having
  summary: Sets a HAVING condition clause
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **having** (*mixed* $having)

    Sets a HAVING condition clause. You need to escape PHQL reserved words using \[ and \] delimiters

    ``` php
    $builder->having("SUM(Robots.price) > 0");
    ```
- name: Mvc\Model\Query\Builder::innerJoin
  id: api/phalcon_mvc_model_query_builder#innerjoin
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **innerJoin** (*string* $model, \[*string* $conditions\], \[*string* $alias\])

    Adds an INNER join to the query

    ``` php
    // Inner Join model 'Robots' with automatic conditions and alias
    $builder->innerJoin("Robots");

    // Inner Join model 'Robots' specifying conditions
    $builder->innerJoin("Robots", "Robots.id = RobotsParts.robots_id");

    // Inner Join model 'Robots' specifying conditions and alias
    $builder->innerJoin("Robots", "r.id = RobotsParts.robots_id", "r");
    ```
- name: Mvc\Model\Query\Builder::inWhere
  id: api/phalcon_mvc_model_query_builder#inwhere
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **inWhere** (*mixed* $expr, *array* $values, \[*mixed* $operator\])

    Appends an IN condition to the current conditions

    ``` php
    $builder->inWhere("id", [1, 2, 3]);
    ```
- name: Mvc\Model\Query\Builder::join
  id: api/phalcon_mvc_model_query_builder#join
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **join** (*string* $model, \[*string* $conditions\], \[*string* $alias\], \[*string* $type\])

    Adds an INNER join to the query

    ``` php
    // Inner Join model 'Robots' with automatic conditions and alias
    $builder->join("Robots");

    // Inner Join model 'Robots' specifying conditions
    $builder->join("Robots", "Robots.id = RobotsParts.robots_id");

    // Inner Join model 'Robots' specifying conditions and alias
    $builder->join("Robots", "r.id = RobotsParts.robots_id", "r");

    // Left Join model 'Robots' specifying conditions, alias and type of join
    $builder->join("Robots", "r.id = RobotsParts.robots_id", "r", "LEFT");
    ```
- name: Mvc\Model\Query\Builder::leftJoin
  id: api/phalcon_mvc_model_query_builder#leftjoin
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **leftJoin** (*string* $model, \[*string* $conditions\], \[*string* $alias\])

    Adds a LEFT join to the query

    ``` php
    $builder->leftJoin("Robots", "r.id = RobotsParts.robots_id", "r");
    ```
- name: Mvc\Model\Query\Builder::limit
  id: api/phalcon_mvc_model_query_builder#limit
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **limit** (*mixed* $limit, \[*mixed* $offset\])

    Sets a LIMIT clause, optionally an offset clause

    ``` php
    $builder->limit(100);
    $builder->limit(100, 20);
    $builder->limit("100", "20");
    ```
- name: Mvc\Model\Query\Builder::notBetweenWhere
  id: api/phalcon_mvc_model_query_builder#notbetweenwhere
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \[*mixed* $operator\])

    Appends a NOT BETWEEN condition to the current conditions

    ``` php
    $builder->notBetweenWhere("price", 100.25, 200.50);
    ```
- name: Mvc\Model\Query\Builder::notInWhere
  id: api/phalcon_mvc_model_query_builder#notinwhere
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **notInWhere** (*mixed* $expr, *array* $values, \[*mixed* $operator\])

    Appends a NOT IN condition to the current conditions

    ``` php
    $builder->notInWhere("id", [1, 2, 3]);
    ```
- name: Mvc\Model\Query\Builder::offset
  id: api/phalcon_mvc_model_query_builder#offset
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **offset** (*mixed* $offset)

    Sets an OFFSET clause

    ``` php
    $builder->offset(30);
    ```
- name: Mvc\Model\Query\Builder::OPERATOR_AND
  id: api/phalcon_mvc_model_query_builder#operator_and
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### *string* **OPERATOR_AND**

    ## Methods

    ### public **\_\_construct** (\[*mixed* $params\], \[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\])

    Phalcon\Mvc\Model\Query\Builder constructor
- name: Mvc\Model\Query\Builder::OPERATOR_OR
  id: api/phalcon_mvc_model_query_builder#operator_or
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: '### *string* **OPERATOR_OR**'
- name: Mvc\Model\Query\Builder::orderBy
  id: api/phalcon_mvc_model_query_builder#orderby
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **orderBy** (*string* \| *array* $orderBy)

    Sets an ORDER BY condition clause

    ``` php
    $builder->orderBy("Robots.name");
    $builder->orderBy(["1", "Robots.name"]);
    ```
- name: Mvc\Model\Query\Builder::orWhere
  id: api/phalcon_mvc_model_query_builder#orwhere
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **orWhere** (*string* $conditions, \[*array* $bindParams\], \[*array* $bindTypes\])

    Appends a condition to the current conditions using an OR operator

    ``` php
    $builder->orWhere("name = 'Peter'");

    $builder->orWhere(
        "name = :name: AND id > :id:",
        [
            "name" => "Peter",
            "id"   => 100,
        ]
    );
    ```
- name: Mvc\Model\Query\Builder::rightJoin
  id: api/phalcon_mvc_model_query_builder#rightjoin
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **rightJoin** (*string* $model, \[*string* $conditions\], \[*string* $alias\])

    Adds a RIGHT join to the query

    ``` php
    $builder->rightJoin("Robots", "r.id = RobotsParts.robots_id", "r");
    ```
- name: Mvc\Model\Query\Builder::setDI
  id: api/phalcon_mvc_model_query_builder#setdi
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Mvc\Model\Query\Builder::where
  id: api/phalcon_mvc_model_query_builder#where
  summary: null
  belongs_to: Mvc\Model\Query\Builder
  description: |-
    ### public [*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) **where** (*mixed* $conditions, \[*array* $bindParams\], \[*array* $bindTypes\])

    Sets the query conditions

    ``` php
    $builder->where(100);

    $builder->where("name = 'Peter'");

    $builder->where(
        "name = :name: AND id > :id:",
        [
            "name" => "Peter",
            "id"   => 100,
        ]
    );
    ```
- name: Mvc\Model\Query\BuilderInterface
  id: api/phalcon_mvc_model_query_builderinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\Query\\BuilderInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/builderinterface.zep)\n\n## Constants\n\n### *string* **OPERATOR_OR**\n\n### *string* **OPERATOR_AND**\n\n## Methods\n\n### abstract public **columns** (*mixed* $columns)\n\n...\n\n### abstract public **getColumns** ()\n\n...\n\n### abstract public **from** (*mixed* $models)\n\n...\n\n### abstract public **addFrom** (*mixed* $model, \\[*mixed* $alias\\])\n\n...\n\n### abstract public **getFrom** ()\n\n...\n\n### abstract public **join** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\])\n\n...\n\n### abstract public **innerJoin** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\])\n\n...\n\n### abstract public **leftJoin** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\])\n\n...\n\n### abstract public **rightJoin** (*mixed* $model, \\[*mixed* $conditions\\], \\[*mixed* $alias\\])\n\n...\n\n### abstract public **getJoins** ()\n\n...\n\n### abstract public **where** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\n...\n\n### abstract public **andWhere** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\n...\n\n### abstract public **orWhere** (*mixed* $conditions, \\[*mixed* $bindParams\\], \\[*mixed* $bindTypes\\])\n\n...\n\n### abstract public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \\[*mixed* $operator\\])\n\n...\n\n### abstract public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \\[*mixed* $operator\\])\n\n...\n\n### abstract public **inWhere** (*mixed* $expr, *array* $values, \\[*mixed* $operator\\])\n\n...\n\n### abstract public **notInWhere** (*mixed* $expr, *array* $values, \\[*mixed* $operator\\])\n\n...\n\n### abstract public **getWhere** ()\n\n...\n\n### abstract public **orderBy** (*mixed* $orderBy)\n\n...\n\n### abstract public **getOrderBy** ()\n\n...\n\n### abstract public **having** (*mixed* $having)\n\n...\n\n### abstract public **getHaving** ()\n\n...\n\n### abstract public **limit** (*mixed* $limit, \\[*mixed* $offset\\])\n\n...\n\n### abstract public **getLimit** ()\n\n...\n\n### abstract public **groupBy** (*mixed* $group)\n\n...\n\n### abstract public **getGroupBy** ()\n\n...\n\n### abstract public **getPhql** ()\n\n...\n\n### abstract public **getQuery** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_BuilderInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_BuilderInterface.html)"
- name: Mvc\Model\Query\BuilderInterface::addFrom
  id: api/phalcon_mvc_model_query_builderinterface#addfrom
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **addFrom** (*mixed* $model, \[*mixed* $alias\])

    ...
- name: Mvc\Model\Query\BuilderInterface::andWhere
  id: api/phalcon_mvc_model_query_builderinterface#andwhere
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **andWhere** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    ...
- name: Mvc\Model\Query\BuilderInterface::betweenWhere
  id: api/phalcon_mvc_model_query_builderinterface#betweenwhere
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **betweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \[*mixed* $operator\])

    ...
- name: Mvc\Model\Query\BuilderInterface::columns
  id: api/phalcon_mvc_model_query_builderinterface#columns
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **columns** (*mixed* $columns)

    ...
- name: Mvc\Model\Query\BuilderInterface::from
  id: api/phalcon_mvc_model_query_builderinterface#from
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **from** (*mixed* $models)

    ...
- name: Mvc\Model\Query\BuilderInterface::getColumns
  id: api/phalcon_mvc_model_query_builderinterface#getcolumns
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getColumns** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getFrom
  id: api/phalcon_mvc_model_query_builderinterface#getfrom
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getFrom** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getGroupBy
  id: api/phalcon_mvc_model_query_builderinterface#getgroupby
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getGroupBy** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getHaving
  id: api/phalcon_mvc_model_query_builderinterface#gethaving
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getHaving** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getJoins
  id: api/phalcon_mvc_model_query_builderinterface#getjoins
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getJoins** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getLimit
  id: api/phalcon_mvc_model_query_builderinterface#getlimit
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getLimit** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getOrderBy
  id: api/phalcon_mvc_model_query_builderinterface#getorderby
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getOrderBy** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getPhql
  id: api/phalcon_mvc_model_query_builderinterface#getphql
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getPhql** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::getQuery
  id: api/phalcon_mvc_model_query_builderinterface#getquery
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: "### abstract public **getQuery** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_BuilderInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_BuilderInterface.html)"
- name: Mvc\Model\Query\BuilderInterface::getWhere
  id: api/phalcon_mvc_model_query_builderinterface#getwhere
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **getWhere** ()

    ...
- name: Mvc\Model\Query\BuilderInterface::groupBy
  id: api/phalcon_mvc_model_query_builderinterface#groupby
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **groupBy** (*mixed* $group)

    ...
- name: Mvc\Model\Query\BuilderInterface::having
  id: api/phalcon_mvc_model_query_builderinterface#having
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **having** (*mixed* $having)

    ...
- name: Mvc\Model\Query\BuilderInterface::innerJoin
  id: api/phalcon_mvc_model_query_builderinterface#innerjoin
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **innerJoin** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\])

    ...
- name: Mvc\Model\Query\BuilderInterface::inWhere
  id: api/phalcon_mvc_model_query_builderinterface#inwhere
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **inWhere** (*mixed* $expr, *array* $values, \[*mixed* $operator\])

    ...
- name: Mvc\Model\Query\BuilderInterface::join
  id: api/phalcon_mvc_model_query_builderinterface#join
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **join** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\])

    ...
- name: Mvc\Model\Query\BuilderInterface::leftJoin
  id: api/phalcon_mvc_model_query_builderinterface#leftjoin
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **leftJoin** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\])

    ...
- name: Mvc\Model\Query\BuilderInterface::limit
  id: api/phalcon_mvc_model_query_builderinterface#limit
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **limit** (*mixed* $limit, \[*mixed* $offset\])

    ...
- name: Mvc\Model\Query\BuilderInterface::notBetweenWhere
  id: api/phalcon_mvc_model_query_builderinterface#notbetweenwhere
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **notBetweenWhere** (*mixed* $expr, *mixed* $minimum, *mixed* $maximum, \[*mixed* $operator\])

    ...
- name: Mvc\Model\Query\BuilderInterface::notInWhere
  id: api/phalcon_mvc_model_query_builderinterface#notinwhere
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **notInWhere** (*mixed* $expr, *array* $values, \[*mixed* $operator\])

    ...
- name: Mvc\Model\Query\BuilderInterface::OPERATOR_AND
  id: api/phalcon_mvc_model_query_builderinterface#operator_and
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### *string* **OPERATOR_AND**

    ## Methods
- name: Mvc\Model\Query\BuilderInterface::OPERATOR_OR
  id: api/phalcon_mvc_model_query_builderinterface#operator_or
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: '### *string* **OPERATOR_OR**'
- name: Mvc\Model\Query\BuilderInterface::orderBy
  id: api/phalcon_mvc_model_query_builderinterface#orderby
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **orderBy** (*mixed* $orderBy)

    ...
- name: Mvc\Model\Query\BuilderInterface::orWhere
  id: api/phalcon_mvc_model_query_builderinterface#orwhere
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **orWhere** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    ...
- name: Mvc\Model\Query\BuilderInterface::rightJoin
  id: api/phalcon_mvc_model_query_builderinterface#rightjoin
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **rightJoin** (*mixed* $model, \[*mixed* $conditions\], \[*mixed* $alias\])

    ...
- name: Mvc\Model\Query\BuilderInterface::where
  id: api/phalcon_mvc_model_query_builderinterface#where
  summary: null
  belongs_to: Mvc\Model\Query\BuilderInterface
  description: |-
    ### abstract public **where** (*mixed* $conditions, \[*mixed* $bindParams\], \[*mixed* $bindTypes\])

    ...
- name: Mvc\Model\Query\Lang
  id: api/phalcon_mvc_model_query_lang
  summary: PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS
  description: "# Abstract class **Phalcon\\Mvc\\Model\\Query\\Lang**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/lang.zep)\n\nPHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS. It allows Phalcon to offer a unified SQL language to the developer, while internally doing all the work of translating PHQL instructions to the most optimal SQL instructions depending on the RDBMS type associated with a model.\n\nTo achieve the highest performance possible, we wrote a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.\n\n``` php\n$intermediate = Phalcon\\Mvc\\Model\\Query\\Lang::parsePHQL(\"SELECT r.* FROM Robots r LIMIT 10\");\n```\n\n## Methods\n\n### public static *string* **parsePHQL** (*string* $phql)\n\nParses a PHQL statement returning an intermediate representation (IR)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Lang.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Lang.html)"
- name: Mvc\Model\Query\Lang::parsePHQL
  id: api/phalcon_mvc_model_query_lang#parsephql
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Query\Lang
  description: "### public static *string* **parsePHQL** (*string* $phql)\n\nParses a PHQL statement returning an intermediate representation (IR)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Lang.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Lang.html)"
- name: Mvc\Model\Query\Status
  id: api/phalcon_mvc_model_query_status
  summary: This class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE
  description: "# Class **Phalcon\\Mvc\\Model\\Query\\Status**\n\n*implements* [*Phalcon\\Mvc\\Model\\Query\\StatusInterface*](phalcon_mvc_model_query_statusinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/status.zep)\n\nThis class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE. It offers context information and the related messages produced by the model which finally executes the operations when it fails\n\n``` php\n$phql = \"UPDATE Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:\";\n\n$status = $app->modelsManager->executeQuery(\n    $phql,\n    [\n        \"id\"   => 100,\n        \"name\" => \"Astroy Boy\",\n        \"type\" => \"mechanical\",\n        \"year\" => 1959,\n    ]\n);\n\n// Check if the update was successful\nif ($status->success() === true) {\n    echo \"OK\";\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $success, \\[[*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $model\\])\n\n### public **getModel** ()\n\nReturns the model that executed the action\n\n### public **getMessages** ()\n\nReturns the messages produced because of a failed operation\n\n### public **success** ()\n\nAllows to check if the executed operation was successful\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Status.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Status.html)"
- name: Mvc\Model\Query\Status::getMessages
  id: api/phalcon_mvc_model_query_status#getmessages
  summary: null
  belongs_to: Mvc\Model\Query\Status
  description: |-
    ### public **getMessages** ()

    Returns the messages produced because of a failed operation
- name: Mvc\Model\Query\Status::getModel
  id: api/phalcon_mvc_model_query_status#getmodel
  summary: null
  belongs_to: Mvc\Model\Query\Status
  description: |-
    ### public **getModel** ()

    Returns the model that executed the action
- name: Mvc\Model\Query\Status::success
  id: api/phalcon_mvc_model_query_status#success
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Query\Status
  description: "### public **success** ()\n\nAllows to check if the executed operation was successful\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Status.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Status.html)"
- name: Mvc\Model\Query\StatusInterface
  id: api/phalcon_mvc_model_query_statusinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\Query\\StatusInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/statusinterface.zep)\n\n## Methods\n\n### abstract public **getModel** ()\n\n...\n\n### abstract public **getMessages** ()\n\n...\n\n### abstract public **success** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_StatusInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_StatusInterface.html)"
- name: Mvc\Model\Query\StatusInterface::getMessages
  id: api/phalcon_mvc_model_query_statusinterface#getmessages
  summary: null
  belongs_to: Mvc\Model\Query\StatusInterface
  description: |-
    ### abstract public **getMessages** ()

    ...
- name: Mvc\Model\Query\StatusInterface::getModel
  id: api/phalcon_mvc_model_query_statusinterface#getmodel
  summary: null
  belongs_to: Mvc\Model\Query\StatusInterface
  description: |-
    ### abstract public **getModel** ()

    ...
- name: Mvc\Model\Query\StatusInterface::success
  id: api/phalcon_mvc_model_query_statusinterface#success
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Query\StatusInterface
  description: "### abstract public **success** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_StatusInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_StatusInterface.html)"
- name: Mvc\Model\Relation
  id: api/phalcon_mvc_model_relation
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Relation**\n\n*implements* [*Phalcon\\Mvc\\Model\\RelationInterface*](phalcon_mvc_model_relationinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/relation.zep)\n\nThis class represents a relationship between two models\n\n## Constants\n\n### *integer* **BELONGS_TO**\n\n### *integer* **HAS_ONE**\n\n### *integer* **HAS_MANY**\n\n### *integer* **HAS_ONE_THROUGH**\n\n### *integer* **HAS_MANY_THROUGH**\n\n### *integer* **NO_ACTION**\n\n### *integer* **ACTION_RESTRICT**\n\n### *integer* **ACTION_CASCADE**\n\n## Methods\n\n### public **\\_\\_construct** (*int* $type, *string* $referencedModel, *string* \\| *array* $fields, *string* \\| *array* $referencedFields, \\[*array* $options\\])\n\nPhalcon\\Mvc\\Model\\Relation constructor\n\n### public **setIntermediateRelation** (*string* \\| *array* $intermediateFields, *string* $intermediateModel, *string* $intermediateReferencedFields)\n\nSets the intermediate model data for has-[\\*](#id1)-through relations\n\n### public **getType** ()\n\nReturns the relation type\n\n### public **getReferencedModel** ()\n\nReturns the referenced model\n\n### public *string* \\| *array* **getFields** ()\n\nReturns the fields\n\n### public *string* \\| *array* **getReferencedFields** ()\n\nReturns the referenced fields\n\n### public *string* \\| *array* **getOptions** ()\n\nReturns the options\n\n### public **getOption** (*mixed* $name)\n\nReturns an option by the specified name If the option doesn’t exist null is returned\n\n### public **isForeignKey** ()\n\nCheck whether the relation act as a foreign key\n\n### public *string* \\| *array* **getForeignKey** ()\n\nReturns the foreign key configuration\n\n### public *array* **getParams** ()\n\nReturns parameters that must be always used when the related records are obtained\n\n### public **isThrough** ()\n\nCheck whether the relation is a ‘many-to-many’ relation or not\n\n### public **isReusable** ()\n\nCheck if records returned by getting belongs-to/has-many are implicitly cached during the current request\n\n### public *string* \\| *array* **getIntermediateFields** ()\n\nGets the intermediate fields for has-[\\*](#id3)-through relations\n\n### public **getIntermediateModel** ()\n\nGets the intermediate model for has-[\\*](#id5)-through relations\n\n### public *string* \\| *array* **getIntermediateReferencedFields** ()\n\nGets the intermediate referenced fields for has-[\\*](#id7)-through relations\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Relation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Relation.html)"
- name: Mvc\Model\Relation::ACTION_CASCADE
  id: api/phalcon_mvc_model_relation#action_cascade
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### *integer* **ACTION_CASCADE**

    ## Methods

    ### public **\_\_construct** (*int* $type, *string* $referencedModel, *string* \| *array* $fields, *string* \| *array* $referencedFields, \[*array* $options\])

    Phalcon\Mvc\Model\Relation constructor
- name: Mvc\Model\Relation::ACTION_RESTRICT
  id: api/phalcon_mvc_model_relation#action_restrict
  summary: null
  belongs_to: Mvc\Model\Relation
  description: '### *integer* **ACTION_RESTRICT**'
- name: Mvc\Model\Relation::BELONGS_TO
  id: api/phalcon_mvc_model_relation#belongs_to
  summary: null
  belongs_to: Mvc\Model\Relation
  description: '### *integer* **BELONGS_TO**'
- name: Mvc\Model\Relation::getFields
  id: api/phalcon_mvc_model_relation#getfields
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public *string* \| *array* **getFields** ()

    Returns the fields
- name: Mvc\Model\Relation::getForeignKey
  id: api/phalcon_mvc_model_relation#getforeignkey
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public *string* \| *array* **getForeignKey** ()

    Returns the foreign key configuration
- name: Mvc\Model\Relation::getIntermediateFields
  id: api/phalcon_mvc_model_relation#getintermediatefields
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public *string* \| *array* **getIntermediateFields** ()

    Gets the intermediate fields for has-[\*](#id3)-through relations
- name: Mvc\Model\Relation::getIntermediateModel
  id: api/phalcon_mvc_model_relation#getintermediatemodel
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **getIntermediateModel** ()

    Gets the intermediate model for has-[\*](#id5)-through relations
- name: Mvc\Model\Relation::getIntermediateReferencedFields
  id: api/phalcon_mvc_model_relation#getintermediatereferencedfields
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Relation
  description: "### public *string* \\| *array* **getIntermediateReferencedFields** ()\n\nGets the intermediate referenced fields for has-[\\*](#id7)-through relations\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Relation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Relation.html)"
- name: Mvc\Model\Relation::getOption
  id: api/phalcon_mvc_model_relation#getoption
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **getOption** (*mixed* $name)

    Returns an option by the specified name If the option doesn’t exist null is returned
- name: Mvc\Model\Relation::getOptions
  id: api/phalcon_mvc_model_relation#getoptions
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public *string* \| *array* **getOptions** ()

    Returns the options
- name: Mvc\Model\Relation::getParams
  id: api/phalcon_mvc_model_relation#getparams
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public *array* **getParams** ()

    Returns parameters that must be always used when the related records are obtained
- name: Mvc\Model\Relation::getReferencedFields
  id: api/phalcon_mvc_model_relation#getreferencedfields
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public *string* \| *array* **getReferencedFields** ()

    Returns the referenced fields
- name: Mvc\Model\Relation::getReferencedModel
  id: api/phalcon_mvc_model_relation#getreferencedmodel
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **getReferencedModel** ()

    Returns the referenced model
- name: Mvc\Model\Relation::getType
  id: api/phalcon_mvc_model_relation#gettype
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **getType** ()

    Returns the relation type
- name: Mvc\Model\Relation::HAS_MANY
  id: api/phalcon_mvc_model_relation#has_many
  summary: null
  belongs_to: Mvc\Model\Relation
  description: '### *integer* **HAS_MANY**'
- name: Mvc\Model\Relation::HAS_MANY_THROUGH
  id: api/phalcon_mvc_model_relation#has_many_through
  summary: null
  belongs_to: Mvc\Model\Relation
  description: '### *integer* **HAS_MANY_THROUGH**'
- name: Mvc\Model\Relation::HAS_ONE
  id: api/phalcon_mvc_model_relation#has_one
  summary: null
  belongs_to: Mvc\Model\Relation
  description: '### *integer* **HAS_ONE**'
- name: Mvc\Model\Relation::HAS_ONE_THROUGH
  id: api/phalcon_mvc_model_relation#has_one_through
  summary: null
  belongs_to: Mvc\Model\Relation
  description: '### *integer* **HAS_ONE_THROUGH**'
- name: Mvc\Model\Relation::isForeignKey
  id: api/phalcon_mvc_model_relation#isforeignkey
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **isForeignKey** ()

    Check whether the relation act as a foreign key
- name: Mvc\Model\Relation::isReusable
  id: api/phalcon_mvc_model_relation#isreusable
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **isReusable** ()

    Check if records returned by getting belongs-to/has-many are implicitly cached during the current request
- name: Mvc\Model\Relation::isThrough
  id: api/phalcon_mvc_model_relation#isthrough
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **isThrough** ()

    Check whether the relation is a ‘many-to-many’ relation or not
- name: Mvc\Model\Relation::NO_ACTION
  id: api/phalcon_mvc_model_relation#no_action
  summary: null
  belongs_to: Mvc\Model\Relation
  description: '### *integer* **NO_ACTION**'
- name: Mvc\Model\Relation::setIntermediateRelation
  id: api/phalcon_mvc_model_relation#setintermediaterelation
  summary: null
  belongs_to: Mvc\Model\Relation
  description: |-
    ### public **setIntermediateRelation** (*string* \| *array* $intermediateFields, *string* $intermediateModel, *string* $intermediateReferencedFields)

    Sets the intermediate model data for has-[\*](#id1)-through relations
- name: Mvc\Model\RelationInterface
  id: api/phalcon_mvc_model_relationinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\RelationInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/relationinterface.zep)\n\n## Methods\n\n### abstract public **setIntermediateRelation** (*mixed* $intermediateFields, *mixed* $intermediateModel, *mixed* $intermediateReferencedFields)\n\n...\n\n### abstract public **isReusable** ()\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **getReferencedModel** ()\n\n...\n\n### abstract public **getFields** ()\n\n...\n\n### abstract public **getReferencedFields** ()\n\n...\n\n### abstract public **getOptions** ()\n\n...\n\n### abstract public **getOption** (*mixed* $name)\n\n...\n\n### abstract public **isForeignKey** ()\n\n...\n\n### abstract public **getForeignKey** ()\n\n...\n\n### abstract public **isThrough** ()\n\n...\n\n### abstract public **getIntermediateFields** ()\n\n...\n\n### abstract public **getIntermediateModel** ()\n\n...\n\n### abstract public **getIntermediateReferencedFields** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_RelationInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_RelationInterface.html)"
- name: Mvc\Model\RelationInterface::getFields
  id: api/phalcon_mvc_model_relationinterface#getfields
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getFields** ()

    ...
- name: Mvc\Model\RelationInterface::getForeignKey
  id: api/phalcon_mvc_model_relationinterface#getforeignkey
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getForeignKey** ()

    ...
- name: Mvc\Model\RelationInterface::getIntermediateFields
  id: api/phalcon_mvc_model_relationinterface#getintermediatefields
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getIntermediateFields** ()

    ...
- name: Mvc\Model\RelationInterface::getIntermediateModel
  id: api/phalcon_mvc_model_relationinterface#getintermediatemodel
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getIntermediateModel** ()

    ...
- name: Mvc\Model\RelationInterface::getIntermediateReferencedFields
  id: api/phalcon_mvc_model_relationinterface#getintermediatereferencedfields
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\RelationInterface
  description: "### abstract public **getIntermediateReferencedFields** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_RelationInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_RelationInterface.html)"
- name: Mvc\Model\RelationInterface::getOption
  id: api/phalcon_mvc_model_relationinterface#getoption
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getOption** (*mixed* $name)

    ...
- name: Mvc\Model\RelationInterface::getOptions
  id: api/phalcon_mvc_model_relationinterface#getoptions
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getOptions** ()

    ...
- name: Mvc\Model\RelationInterface::getReferencedFields
  id: api/phalcon_mvc_model_relationinterface#getreferencedfields
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getReferencedFields** ()

    ...
- name: Mvc\Model\RelationInterface::getReferencedModel
  id: api/phalcon_mvc_model_relationinterface#getreferencedmodel
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getReferencedModel** ()

    ...
- name: Mvc\Model\RelationInterface::getType
  id: api/phalcon_mvc_model_relationinterface#gettype
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Mvc\Model\RelationInterface::isForeignKey
  id: api/phalcon_mvc_model_relationinterface#isforeignkey
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **isForeignKey** ()

    ...
- name: Mvc\Model\RelationInterface::isReusable
  id: api/phalcon_mvc_model_relationinterface#isreusable
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **isReusable** ()

    ...
- name: Mvc\Model\RelationInterface::isThrough
  id: api/phalcon_mvc_model_relationinterface#isthrough
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **isThrough** ()

    ...
- name: Mvc\Model\RelationInterface::setIntermediateRelation
  id: api/phalcon_mvc_model_relationinterface#setintermediaterelation
  summary: null
  belongs_to: Mvc\Model\RelationInterface
  description: |-
    ### abstract public **setIntermediateRelation** (*mixed* $intermediateFields, *mixed* $intermediateModel, *mixed* $intermediateReferencedFields)

    ...
- name: Mvc\Model\ResultInterface
  id: api/phalcon_mvc_model_resultinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\ResultInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultinterface.zep)\n\n## Methods\n\n### abstract public **setDirtyState** (*mixed* $dirtyState)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultInterface.html)"
- name: Mvc\Model\ResultInterface::setDirtyState
  id: api/phalcon_mvc_model_resultinterface#setdirtystate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\ResultInterface
  description: "### abstract public **setDirtyState** (*mixed* $dirtyState)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultInterface.html)"
- name: Mvc\Model\Resultset
  id: api/phalcon_mvc_model_resultset
  summary: This component allows to Phalcon\Mvc\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement
  description: "# Abstract class **Phalcon\\Mvc\\Model\\Resultset**\n\n*implements* [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface), [Iterator](http://php.net/manual/en/class.iterator.php), [Traversable](http://php.net/manual/en/class.traversable.php), [SeekableIterator](http://php.net/manual/en/class.seekableiterator.php), [Countable](http://php.net/manual/en/class.countable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Serializable](http://php.net/manual/en/class.serializable.php), [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultset.zep)\n\nThis component allows to Phalcon\\Mvc\\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement. If a resultset is serialized it will dump all the rows into a big array. Then unserialize will retrieve the rows as they were before serializing.\n\n``` php\n// Using a standard foreach\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n    ]\n);\n\nforeach ($robots as robot) {\n    echo robot->name, \"\\n\";\n}\n\n// Using a while\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n    ]\n);\n\n$robots->rewind();\n\nwhile ($robots->valid()) {\n    $robot = $robots->current();\n\n    echo $robot->name, \"\\n\";\n\n    $robots->next();\n}\n```\n\n## Constants\n\n### *integer* **TYPE_RESULT_FULL**\n\n### *integer* **TYPE_RESULT_PARTIAL**\n\n### *integer* **HYDRATE_RECORDS**\n\n### *integer* **HYDRATE_OBJECTS**\n\n### *integer* **HYDRATE_ARRAYS**\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Db\\ResultInterface*](phalcon_db_resultinterface) \\| *false* $result, \\[[*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $cache\\])\n\nPhalcon\\Mvc\\Model\\Resultset constructor\n\n### public **next** ()\n\nMoves cursor to next row in the resultset\n\n### public **valid** ()\n\nCheck whether internal resource has rows to fetch\n\n### public **key** ()\n\nGets pointer number of active row in the resultset\n\n### final public **rewind** ()\n\nRewinds resultset to its beginning\n\n### final public **seek** (*mixed* $position)\n\nChanges internal pointer to a specific position in the resultset Set new position if required and set this-\\>\\_row\n\n### final public **count** ()\n\nCounts how many rows are in the resultset\n\n### public **offsetExists** (*mixed* $index)\n\nChecks whether offset exists in the resultset\n\n### public **offsetGet** (*mixed* $index)\n\nGets row in a specific position of the resultset\n\n### public **offsetSet** (*int* $index, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $value)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **offsetUnset** (*mixed* $offset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **getType** ()\n\nReturns the internal type of data retrieval that the resultset is using\n\n### public **getFirst** ()\n\nGet first row in the resultset\n\n### public **getLast** ()\n\nGet last row in the resultset\n\n### public **setIsFresh** (*mixed* $isFresh)\n\nSet if the resultset is fresh or an old one cached\n\n### public **isFresh** ()\n\nTell if the resultset if fresh or an old one cached\n\n### public **setHydrateMode** (*mixed* $hydrateMode)\n\nSets the hydration mode in the resultset\n\n### public **getHydrateMode** ()\n\nReturns the current hydration mode\n\n### public **getCache** ()\n\nReturns the associated cache for the resultset\n\n### public **getMessages** ()\n\nReturns the error messages produced by a batch operation\n\n### public *boolean* **update** (*array* $data, \\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\])\n\nUpdates every record in the resultset\n\n### public **delete** (\\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\])\n\nDeletes every record in the resultset\n\n### public [*Phalcon\\Mvc\\Model*](phalcon_mvc_model)\\[\\] **filter** (*callback* $filter)\n\nFilters a resultset returning only those the developer requires\n\n``` php\n$filtered = $robots->filter(\n    function ($robot) {\n        if ($robot->id < 3) {\n            return $robot;\n        }\n    }\n);\n```\n\n### public *array* **jsonSerialize** ()\n\nReturns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present\n\n``` php\n$robots = Robots::find();\necho json_encode($robots);\n```\n\n### abstract public **toArray** () inherited from [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface)\n\n...\n\n### abstract public **current** () inherited from [Iterator](http://php.net/manual/en/class.iterator.php)\n\n...\n\n### abstract public **serialize** () inherited from [Serializable](http://php.net/manual/en/class.serializable.php)\n\n...\n\n### abstract public **unserialize** (*mixed* $serialized) inherited from [Serializable](http://php.net/manual/en/class.serializable.php)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset.html)"
- name: Mvc\Model\Resultset::count
  id: api/phalcon_mvc_model_resultset#count
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### final public **count** ()

    Counts how many rows are in the resultset
- name: Mvc\Model\Resultset::delete
  id: api/phalcon_mvc_model_resultset#delete
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **delete** (\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\])

    Deletes every record in the resultset
- name: Mvc\Model\Resultset::filter
  id: api/phalcon_mvc_model_resultset#filter
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public [*Phalcon\Mvc\Model*](phalcon_mvc_model)\[\] **filter** (*callback* $filter)

    Filters a resultset returning only those the developer requires

    ``` php
    $filtered = $robots->filter(
        function ($robot) {
            if ($robot->id < 3) {
                return $robot;
            }
        }
    );
    ```
- name: Mvc\Model\Resultset::getCache
  id: api/phalcon_mvc_model_resultset#getcache
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **getCache** ()

    Returns the associated cache for the resultset
- name: Mvc\Model\Resultset::getFirst
  id: api/phalcon_mvc_model_resultset#getfirst
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **getFirst** ()

    Get first row in the resultset
- name: Mvc\Model\Resultset::getHydrateMode
  id: api/phalcon_mvc_model_resultset#gethydratemode
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **getHydrateMode** ()

    Returns the current hydration mode
- name: Mvc\Model\Resultset::getLast
  id: api/phalcon_mvc_model_resultset#getlast
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **getLast** ()

    Get last row in the resultset
- name: Mvc\Model\Resultset::getMessages
  id: api/phalcon_mvc_model_resultset#getmessages
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **getMessages** ()

    Returns the error messages produced by a batch operation
- name: Mvc\Model\Resultset::getType
  id: api/phalcon_mvc_model_resultset#gettype
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **getType** ()

    Returns the internal type of data retrieval that the resultset is using
- name: Mvc\Model\Resultset::HYDRATE_ARRAYS
  id: api/phalcon_mvc_model_resultset#hydrate_arrays
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### *integer* **HYDRATE_ARRAYS**

    ## Methods

    ### public **\_\_construct** ([*Phalcon\Db\ResultInterface*](phalcon_db_resultinterface) \| *false* $result, \[[*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $cache\])

    Phalcon\Mvc\Model\Resultset constructor
- name: Mvc\Model\Resultset::HYDRATE_OBJECTS
  id: api/phalcon_mvc_model_resultset#hydrate_objects
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: '### *integer* **HYDRATE_OBJECTS**'
- name: Mvc\Model\Resultset::HYDRATE_RECORDS
  id: api/phalcon_mvc_model_resultset#hydrate_records
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: '### *integer* **HYDRATE_RECORDS**'
- name: Mvc\Model\Resultset::isFresh
  id: api/phalcon_mvc_model_resultset#isfresh
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **isFresh** ()

    Tell if the resultset if fresh or an old one cached
- name: Mvc\Model\Resultset::jsonSerialize
  id: api/phalcon_mvc_model_resultset#jsonserialize
  summary: Returns serialised model objects as array for json_encode
  belongs_to: Mvc\Model\Resultset
  description: "### public *array* **jsonSerialize** ()\n\nReturns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present\n\n``` php\n$robots = Robots::find();\necho json_encode($robots);\n```\n\n### abstract public **toArray** () inherited from [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface)\n\n...\n\n### abstract public **current** () inherited from [Iterator](http://php.net/manual/en/class.iterator.php)\n\n...\n\n### abstract public **serialize** () inherited from [Serializable](http://php.net/manual/en/class.serializable.php)\n\n...\n\n### abstract public **unserialize** (*mixed* $serialized) inherited from [Serializable](http://php.net/manual/en/class.serializable.php)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset.html)"
- name: Mvc\Model\Resultset::key
  id: api/phalcon_mvc_model_resultset#key
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **key** ()

    Gets pointer number of active row in the resultset
- name: Mvc\Model\Resultset::next
  id: api/phalcon_mvc_model_resultset#next
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **next** ()

    Moves cursor to next row in the resultset
- name: Mvc\Model\Resultset::offsetExists
  id: api/phalcon_mvc_model_resultset#offsetexists
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **offsetExists** (*mixed* $index)

    Checks whether offset exists in the resultset
- name: Mvc\Model\Resultset::offsetGet
  id: api/phalcon_mvc_model_resultset#offsetget
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **offsetGet** (*mixed* $index)

    Gets row in a specific position of the resultset
- name: Mvc\Model\Resultset::offsetSet
  id: api/phalcon_mvc_model_resultset#offsetset
  summary: Resultsets cannot be changed
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **offsetSet** (*int* $index, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $value)

    Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface
- name: Mvc\Model\Resultset::offsetUnset
  id: api/phalcon_mvc_model_resultset#offsetunset
  summary: Resultsets cannot be changed
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **offsetUnset** (*mixed* $offset)

    Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface
- name: Mvc\Model\Resultset::rewind
  id: api/phalcon_mvc_model_resultset#rewind
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### final public **rewind** ()

    Rewinds resultset to its beginning
- name: Mvc\Model\Resultset::seek
  id: api/phalcon_mvc_model_resultset#seek
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### final public **seek** (*mixed* $position)

    Changes internal pointer to a specific position in the resultset Set new position if required and set this-\>\_row
- name: Mvc\Model\Resultset::setHydrateMode
  id: api/phalcon_mvc_model_resultset#sethydratemode
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **setHydrateMode** (*mixed* $hydrateMode)

    Sets the hydration mode in the resultset
- name: Mvc\Model\Resultset::setIsFresh
  id: api/phalcon_mvc_model_resultset#setisfresh
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **setIsFresh** (*mixed* $isFresh)

    Set if the resultset is fresh or an old one cached
- name: Mvc\Model\Resultset::TYPE_RESULT_FULL
  id: api/phalcon_mvc_model_resultset#type_result_full
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: '### *integer* **TYPE_RESULT_FULL**'
- name: Mvc\Model\Resultset::TYPE_RESULT_PARTIAL
  id: api/phalcon_mvc_model_resultset#type_result_partial
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: '### *integer* **TYPE_RESULT_PARTIAL**'
- name: Mvc\Model\Resultset::update
  id: api/phalcon_mvc_model_resultset#update
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public *boolean* **update** (*array* $data, \[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\])

    Updates every record in the resultset
- name: Mvc\Model\Resultset::valid
  id: api/phalcon_mvc_model_resultset#valid
  summary: null
  belongs_to: Mvc\Model\Resultset
  description: |-
    ### public **valid** ()

    Check whether internal resource has rows to fetch
- name: Mvc\Model\ResultsetInterface
  id: api/phalcon_mvc_model_resultsetinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\ResultsetInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultsetinterface.zep)\n\n## Methods\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **getFirst** ()\n\n...\n\n### abstract public **getLast** ()\n\n...\n\n### abstract public **setIsFresh** (*mixed* $isFresh)\n\n...\n\n### abstract public **isFresh** ()\n\n...\n\n### abstract public **getCache** ()\n\n...\n\n### abstract public **toArray** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultsetInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultsetInterface.html)"
- name: Mvc\Model\ResultsetInterface::getCache
  id: api/phalcon_mvc_model_resultsetinterface#getcache
  summary: null
  belongs_to: Mvc\Model\ResultsetInterface
  description: |-
    ### abstract public **getCache** ()

    ...
- name: Mvc\Model\ResultsetInterface::getFirst
  id: api/phalcon_mvc_model_resultsetinterface#getfirst
  summary: null
  belongs_to: Mvc\Model\ResultsetInterface
  description: |-
    ### abstract public **getFirst** ()

    ...
- name: Mvc\Model\ResultsetInterface::getLast
  id: api/phalcon_mvc_model_resultsetinterface#getlast
  summary: null
  belongs_to: Mvc\Model\ResultsetInterface
  description: |-
    ### abstract public **getLast** ()

    ...
- name: Mvc\Model\ResultsetInterface::getType
  id: api/phalcon_mvc_model_resultsetinterface#gettype
  summary: null
  belongs_to: Mvc\Model\ResultsetInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Mvc\Model\ResultsetInterface::isFresh
  id: api/phalcon_mvc_model_resultsetinterface#isfresh
  summary: null
  belongs_to: Mvc\Model\ResultsetInterface
  description: |-
    ### abstract public **isFresh** ()

    ...
- name: Mvc\Model\ResultsetInterface::setIsFresh
  id: api/phalcon_mvc_model_resultsetinterface#setisfresh
  summary: null
  belongs_to: Mvc\Model\ResultsetInterface
  description: |-
    ### abstract public **setIsFresh** (*mixed* $isFresh)

    ...
- name: Mvc\Model\ResultsetInterface::toArray
  id: api/phalcon_mvc_model_resultsetinterface#toarray
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\ResultsetInterface
  description: "### abstract public **toArray** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultsetInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultsetInterface.html)"
- name: Mvc\Model\Resultset\Complex
  id: api/phalcon_mvc_model_resultset_complex
  summary: Complex resultsets may include complete objects and scalar values
  description: "# Class **Phalcon\\Mvc\\Model\\Resultset\\Complex**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\n*implements* [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php), [Serializable](http://php.net/manual/en/class.serializable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Countable](http://php.net/manual/en/class.countable.php), [SeekableIterator](http://php.net/manual/en/class.seekableiterator.php), [Traversable](http://php.net/manual/en/class.traversable.php), [Iterator](http://php.net/manual/en/class.iterator.php), [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultset/complex.zep)\n\nComplex resultsets may include complete objects and scalar values. This class builds every complex row as it is required\n\n## Constants\n\n### *integer* **TYPE_RESULT_FULL**\n\n### *integer* **TYPE_RESULT_PARTIAL**\n\n### *integer* **HYDRATE_RECORDS**\n\n### *integer* **HYDRATE_OBJECTS**\n\n### *integer* **HYDRATE_ARRAYS**\n\n## Methods\n\n### public **\\_\\_construct** (*array* $columnTypes, \\[[*Phalcon\\Db\\ResultInterface*](phalcon_db_resultinterface) $result\\], \\[[*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $cache\\])\n\nPhalcon\\Mvc\\Model\\Resultset\\Complex constructor\n\n### final public **current** ()\n\nReturns current row in the resultset\n\n### public **toArray** ()\n\nReturns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does.\n\n### public **serialize** ()\n\nSerializing a resultset will dump all related rows into a big array\n\n### public **unserialize** (*mixed* $data)\n\nUnserializing a resultset will allow to only works on the rows present in the saved state\n\n### public **next** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nMoves cursor to next row in the resultset\n\n### public **valid** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCheck whether internal resource has rows to fetch\n\n### public **key** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets pointer number of active row in the resultset\n\n### final public **rewind** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nRewinds resultset to its beginning\n\n### final public **seek** (*mixed* $position) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChanges internal pointer to a specific position in the resultset Set new position if required and set this-\\>\\_row\n\n### final public **count** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCounts how many rows are in the resultset\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChecks whether offset exists in the resultset\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets row in a specific position of the resultset\n\n### public **offsetSet** (*int* $index, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $value) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **offsetUnset** (*mixed* $offset) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **getType** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the internal type of data retrieval that the resultset is using\n\n### public **getFirst** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet first row in the resultset\n\n### public **getLast** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet last row in the resultset\n\n### public **setIsFresh** (*mixed* $isFresh) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSet if the resultset is fresh or an old one cached\n\n### public **isFresh** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nTell if the resultset if fresh or an old one cached\n\n### public **setHydrateMode** (*mixed* $hydrateMode) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSets the hydration mode in the resultset\n\n### public **getHydrateMode** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the current hydration mode\n\n### public **getCache** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the associated cache for the resultset\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the error messages produced by a batch operation\n\n### public *boolean* **update** (*array* $data, \\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nUpdates every record in the resultset\n\n### public **delete** (\\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nDeletes every record in the resultset\n\n### public [*Phalcon\\Mvc\\Model*](phalcon_mvc_model)\\[\\] **filter** (*callback* $filter) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nFilters a resultset returning only those the developer requires\n\n``` php\n$filtered = $robots->filter(\n    function ($robot) {\n        if ($robot->id < 3) {\n            return $robot;\n        }\n    }\n);\n```\n\n### public *array* **jsonSerialize** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present\n\n``` php\n$robots = Robots::find();\necho json_encode($robots);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Complex.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Complex.html)"
- name: Mvc\Model\Resultset\Complex::current
  id: api/phalcon_mvc_model_resultset_complex#current
  summary: null
  belongs_to: Mvc\Model\Resultset\Complex
  description: |-
    ### final public **current** ()

    Returns current row in the resultset
- name: Mvc\Model\Resultset\Complex::HYDRATE_ARRAYS
  id: api/phalcon_mvc_model_resultset_complex#hydrate_arrays
  summary: null
  belongs_to: Mvc\Model\Resultset\Complex
  description: |-
    ### *integer* **HYDRATE_ARRAYS**

    ## Methods

    ### public **\_\_construct** (*array* $columnTypes, \[[*Phalcon\Db\ResultInterface*](phalcon_db_resultinterface) $result\], \[[*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $cache\])

    Phalcon\Mvc\Model\Resultset\Complex constructor
- name: Mvc\Model\Resultset\Complex::HYDRATE_OBJECTS
  id: api/phalcon_mvc_model_resultset_complex#hydrate_objects
  summary: null
  belongs_to: Mvc\Model\Resultset\Complex
  description: '### *integer* **HYDRATE_OBJECTS**'
- name: Mvc\Model\Resultset\Complex::HYDRATE_RECORDS
  id: api/phalcon_mvc_model_resultset_complex#hydrate_records
  summary: null
  belongs_to: Mvc\Model\Resultset\Complex
  description: '### *integer* **HYDRATE_RECORDS**'
- name: Mvc\Model\Resultset\Complex::serialize
  id: api/phalcon_mvc_model_resultset_complex#serialize
  summary: null
  belongs_to: Mvc\Model\Resultset\Complex
  description: |-
    ### public **serialize** ()

    Serializing a resultset will dump all related rows into a big array
- name: Mvc\Model\Resultset\Complex::toArray
  id: api/phalcon_mvc_model_resultset_complex#toarray
  summary: Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does
  belongs_to: Mvc\Model\Resultset\Complex
  description: |-
    ### public **toArray** ()

    Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does.
- name: Mvc\Model\Resultset\Complex::TYPE_RESULT_FULL
  id: api/phalcon_mvc_model_resultset_complex#type_result_full
  summary: null
  belongs_to: Mvc\Model\Resultset\Complex
  description: '### *integer* **TYPE_RESULT_FULL**'
- name: Mvc\Model\Resultset\Complex::TYPE_RESULT_PARTIAL
  id: api/phalcon_mvc_model_resultset_complex#type_result_partial
  summary: null
  belongs_to: Mvc\Model\Resultset\Complex
  description: '### *integer* **TYPE_RESULT_PARTIAL**'
- name: Mvc\Model\Resultset\Complex::unserialize
  id: api/phalcon_mvc_model_resultset_complex#unserialize
  summary: Resultsets cannot be changed
  belongs_to: Mvc\Model\Resultset\Complex
  description: "### public **unserialize** (*mixed* $data)\n\nUnserializing a resultset will allow to only works on the rows present in the saved state\n\n### public **next** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nMoves cursor to next row in the resultset\n\n### public **valid** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCheck whether internal resource has rows to fetch\n\n### public **key** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets pointer number of active row in the resultset\n\n### final public **rewind** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nRewinds resultset to its beginning\n\n### final public **seek** (*mixed* $position) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChanges internal pointer to a specific position in the resultset Set new position if required and set this-\\>\\_row\n\n### final public **count** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCounts how many rows are in the resultset\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChecks whether offset exists in the resultset\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets row in a specific position of the resultset\n\n### public **offsetSet** (*int* $index, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $value) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **offsetUnset** (*mixed* $offset) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **getType** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the internal type of data retrieval that the resultset is using\n\n### public **getFirst** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet first row in the resultset\n\n### public **getLast** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet last row in the resultset\n\n### public **setIsFresh** (*mixed* $isFresh) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSet if the resultset is fresh or an old one cached\n\n### public **isFresh** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nTell if the resultset if fresh or an old one cached\n\n### public **setHydrateMode** (*mixed* $hydrateMode) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSets the hydration mode in the resultset\n\n### public **getHydrateMode** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the current hydration mode\n\n### public **getCache** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the associated cache for the resultset\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the error messages produced by a batch operation\n\n### public *boolean* **update** (*array* $data, \\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nUpdates every record in the resultset\n\n### public **delete** (\\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nDeletes every record in the resultset\n\n### public [*Phalcon\\Mvc\\Model*](phalcon_mvc_model)\\[\\] **filter** (*callback* $filter) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nFilters a resultset returning only those the developer requires\n\n``` php\n$filtered = $robots->filter(\n    function ($robot) {\n        if ($robot->id < 3) {\n            return $robot;\n        }\n    }\n);\n```\n\n### public *array* **jsonSerialize** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present\n\n``` php\n$robots = Robots::find();\necho json_encode($robots);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Complex.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Complex.html)"
- name: Mvc\Model\Resultset\Simple
  id: api/phalcon_mvc_model_resultset_simple
  summary: Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does
  description: "# Class **Phalcon\\Mvc\\Model\\Resultset\\Simple**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\n*implements* [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php), [Serializable](http://php.net/manual/en/class.serializable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Countable](http://php.net/manual/en/class.countable.php), [SeekableIterator](http://php.net/manual/en/class.seekableiterator.php), [Traversable](http://php.net/manual/en/class.traversable.php), [Iterator](http://php.net/manual/en/class.iterator.php), [*Phalcon\\Mvc\\Model\\ResultsetInterface*](phalcon_mvc_model_resultsetinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultset/simple.zep)\n\nSimple resultsets only contains a complete objects This class builds every complete object as it is required\n\n## Constants\n\n### *integer* **TYPE_RESULT_FULL**\n\n### *integer* **TYPE_RESULT_PARTIAL**\n\n### *integer* **HYDRATE_RECORDS**\n\n### *integer* **HYDRATE_OBJECTS**\n\n### *integer* **HYDRATE_ARRAYS**\n\n## Methods\n\n### public **\\_\\_construct** (*array* $columnMap, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) \\| [*Phalcon\\Mvc\\Model\\Row*](phalcon_mvc_model_row) $model, [*Phalcon\\Db\\Result\\Pdo*](phalcon_db_result_pdo) \\| *null* $result, \\[[*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $cache\\], \\[*boolean* $keepSnapshots\\])\n\nPhalcon\\Mvc\\Model\\Resultset\\Simple constructor\n\n### final public **current** ()\n\nReturns current row in the resultset\n\n### public **toArray** (\\[*mixed* $renameColumns\\])\n\nReturns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does. Export the resultset to an array couldn’t be faster with a large number of records\n\n### public **serialize** ()\n\nSerializing a resultset will dump all related rows into a big array\n\n### public **unserialize** (*mixed* $data)\n\nUnserializing a resultset will allow to only works on the rows present in the saved state\n\n### public **next** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nMoves cursor to next row in the resultset\n\n### public **valid** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCheck whether internal resource has rows to fetch\n\n### public **key** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets pointer number of active row in the resultset\n\n### final public **rewind** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nRewinds resultset to its beginning\n\n### final public **seek** (*mixed* $position) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChanges internal pointer to a specific position in the resultset Set new position if required and set this-\\>\\_row\n\n### final public **count** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCounts how many rows are in the resultset\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChecks whether offset exists in the resultset\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets row in a specific position of the resultset\n\n### public **offsetSet** (*int* $index, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $value) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **offsetUnset** (*mixed* $offset) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **getType** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the internal type of data retrieval that the resultset is using\n\n### public **getFirst** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet first row in the resultset\n\n### public **getLast** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet last row in the resultset\n\n### public **setIsFresh** (*mixed* $isFresh) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSet if the resultset is fresh or an old one cached\n\n### public **isFresh** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nTell if the resultset if fresh or an old one cached\n\n### public **setHydrateMode** (*mixed* $hydrateMode) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSets the hydration mode in the resultset\n\n### public **getHydrateMode** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the current hydration mode\n\n### public **getCache** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the associated cache for the resultset\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the error messages produced by a batch operation\n\n### public *boolean* **update** (*array* $data, \\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nUpdates every record in the resultset\n\n### public **delete** (\\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nDeletes every record in the resultset\n\n### public [*Phalcon\\Mvc\\Model*](phalcon_mvc_model)\\[\\] **filter** (*callback* $filter) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nFilters a resultset returning only those the developer requires\n\n``` php\n$filtered = $robots->filter(\n    function ($robot) {\n        if ($robot->id < 3) {\n            return $robot;\n        }\n    }\n);\n```\n\n### public *array* **jsonSerialize** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present\n\n``` php\n$robots = Robots::find();\necho json_encode($robots);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Simple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Simple.html)"
- name: Mvc\Model\Resultset\Simple::current
  id: api/phalcon_mvc_model_resultset_simple#current
  summary: null
  belongs_to: Mvc\Model\Resultset\Simple
  description: |-
    ### final public **current** ()

    Returns current row in the resultset
- name: Mvc\Model\Resultset\Simple::HYDRATE_ARRAYS
  id: api/phalcon_mvc_model_resultset_simple#hydrate_arrays
  summary: null
  belongs_to: Mvc\Model\Resultset\Simple
  description: |-
    ### *integer* **HYDRATE_ARRAYS**

    ## Methods

    ### public **\_\_construct** (*array* $columnMap, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) \| [*Phalcon\Mvc\Model\Row*](phalcon_mvc_model_row) $model, [*Phalcon\Db\Result\Pdo*](phalcon_db_result_pdo) \| *null* $result, \[[*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $cache\], \[*boolean* $keepSnapshots\])

    Phalcon\Mvc\Model\Resultset\Simple constructor
- name: Mvc\Model\Resultset\Simple::HYDRATE_OBJECTS
  id: api/phalcon_mvc_model_resultset_simple#hydrate_objects
  summary: null
  belongs_to: Mvc\Model\Resultset\Simple
  description: '### *integer* **HYDRATE_OBJECTS**'
- name: Mvc\Model\Resultset\Simple::HYDRATE_RECORDS
  id: api/phalcon_mvc_model_resultset_simple#hydrate_records
  summary: null
  belongs_to: Mvc\Model\Resultset\Simple
  description: '### *integer* **HYDRATE_RECORDS**'
- name: Mvc\Model\Resultset\Simple::serialize
  id: api/phalcon_mvc_model_resultset_simple#serialize
  summary: null
  belongs_to: Mvc\Model\Resultset\Simple
  description: |-
    ### public **serialize** ()

    Serializing a resultset will dump all related rows into a big array
- name: Mvc\Model\Resultset\Simple::toArray
  id: api/phalcon_mvc_model_resultset_simple#toarray
  summary: Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does
  belongs_to: Mvc\Model\Resultset\Simple
  description: |-
    ### public **toArray** (\[*mixed* $renameColumns\])

    Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does. Export the resultset to an array couldn’t be faster with a large number of records
- name: Mvc\Model\Resultset\Simple::TYPE_RESULT_FULL
  id: api/phalcon_mvc_model_resultset_simple#type_result_full
  summary: null
  belongs_to: Mvc\Model\Resultset\Simple
  description: '### *integer* **TYPE_RESULT_FULL**'
- name: Mvc\Model\Resultset\Simple::TYPE_RESULT_PARTIAL
  id: api/phalcon_mvc_model_resultset_simple#type_result_partial
  summary: null
  belongs_to: Mvc\Model\Resultset\Simple
  description: '### *integer* **TYPE_RESULT_PARTIAL**'
- name: Mvc\Model\Resultset\Simple::unserialize
  id: api/phalcon_mvc_model_resultset_simple#unserialize
  summary: Resultsets cannot be changed
  belongs_to: Mvc\Model\Resultset\Simple
  description: "### public **unserialize** (*mixed* $data)\n\nUnserializing a resultset will allow to only works on the rows present in the saved state\n\n### public **next** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nMoves cursor to next row in the resultset\n\n### public **valid** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCheck whether internal resource has rows to fetch\n\n### public **key** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets pointer number of active row in the resultset\n\n### final public **rewind** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nRewinds resultset to its beginning\n\n### final public **seek** (*mixed* $position) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChanges internal pointer to a specific position in the resultset Set new position if required and set this-\\>\\_row\n\n### final public **count** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nCounts how many rows are in the resultset\n\n### public **offsetExists** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nChecks whether offset exists in the resultset\n\n### public **offsetGet** (*mixed* $index) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGets row in a specific position of the resultset\n\n### public **offsetSet** (*int* $index, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $value) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **offsetUnset** (*mixed* $offset) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nResultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **getType** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the internal type of data retrieval that the resultset is using\n\n### public **getFirst** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet first row in the resultset\n\n### public **getLast** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nGet last row in the resultset\n\n### public **setIsFresh** (*mixed* $isFresh) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSet if the resultset is fresh or an old one cached\n\n### public **isFresh** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nTell if the resultset if fresh or an old one cached\n\n### public **setHydrateMode** (*mixed* $hydrateMode) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nSets the hydration mode in the resultset\n\n### public **getHydrateMode** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the current hydration mode\n\n### public **getCache** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the associated cache for the resultset\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns the error messages produced by a batch operation\n\n### public *boolean* **update** (*array* $data, \\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nUpdates every record in the resultset\n\n### public **delete** (\\[[Closure](http://php.net/manual/en/class.closure.php) $conditionCallback\\]) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nDeletes every record in the resultset\n\n### public [*Phalcon\\Mvc\\Model*](phalcon_mvc_model)\\[\\] **filter** (*callback* $filter) inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nFilters a resultset returning only those the developer requires\n\n``` php\n$filtered = $robots->filter(\n    function ($robot) {\n        if ($robot->id < 3) {\n            return $robot;\n        }\n    }\n);\n```\n\n### public *array* **jsonSerialize** () inherited from [*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset)\n\nReturns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present\n\n``` php\n$robots = Robots::find();\necho json_encode($robots);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Simple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Simple.html)"
- name: Mvc\Model\Row
  id: api/phalcon_mvc_model_row
  summary: This component allows Phalcon\Mvc\Model to return rows without an associated entity
  description: "# Class **Phalcon\\Mvc\\Model\\Row**\n\n*implements* [*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface), [*Phalcon\\Mvc\\Model\\ResultInterface*](phalcon_mvc_model_resultinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/row.zep)\n\nThis component allows Phalcon\\Mvc\\Model to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-\\>x or array\\[x\\].\n\n## Methods\n\n### public **setDirtyState** (*mixed* $dirtyState)\n\nSet the current object’s state\n\n### public *boolean* **offsetExists** (*string* \\| *int* $index)\n\nChecks whether offset exists in the row\n\n### public *string* \\| [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) **offsetGet** (*string* \\| *int* $index)\n\nGets a record in a specific position of the row\n\n### public **offsetSet** (*string* \\| *int* $index, [*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $value)\n\nRows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public **offsetUnset** (*string* \\| *int* $offset)\n\nRows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface\n\n### public *mixed* **readAttribute** (*string* $attribute)\n\nReads an attribute value by its name\n\n``` php\necho $robot->readAttribute(\"name\");\n```\n\n### public **writeAttribute** (*string* $attribute, *mixed* $value)\n\nWrites an attribute value by its name\n\n``` php\n$robot->writeAttribute(\"name\", \"Rosey\");\n```\n\n### public *array* **toArray** ()\n\nReturns the instance as an array representation\n\n### public *array* **jsonSerialize** ()\n\nSerializes the object for json_encode\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Row.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Row.html)"
- name: Mvc\Model\Row::jsonSerialize
  id: api/phalcon_mvc_model_row#jsonserialize
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Row
  description: "### public *array* **jsonSerialize** ()\n\nSerializes the object for json_encode\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Row.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Row.html)"
- name: Mvc\Model\Row::offsetExists
  id: api/phalcon_mvc_model_row#offsetexists
  summary: null
  belongs_to: Mvc\Model\Row
  description: |-
    ### public *boolean* **offsetExists** (*string* \| *int* $index)

    Checks whether offset exists in the row
- name: Mvc\Model\Row::offsetGet
  id: api/phalcon_mvc_model_row#offsetget
  summary: null
  belongs_to: Mvc\Model\Row
  description: |-
    ### public *string* \| [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) **offsetGet** (*string* \| *int* $index)

    Gets a record in a specific position of the row
- name: Mvc\Model\Row::offsetSet
  id: api/phalcon_mvc_model_row#offsetset
  summary: Rows cannot be changed
  belongs_to: Mvc\Model\Row
  description: |-
    ### public **offsetSet** (*string* \| *int* $index, [*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $value)

    Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface
- name: Mvc\Model\Row::offsetUnset
  id: api/phalcon_mvc_model_row#offsetunset
  summary: Rows cannot be changed
  belongs_to: Mvc\Model\Row
  description: |-
    ### public **offsetUnset** (*string* \| *int* $offset)

    Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface
- name: Mvc\Model\Row::readAttribute
  id: api/phalcon_mvc_model_row#readattribute
  summary: null
  belongs_to: Mvc\Model\Row
  description: |-
    ### public *mixed* **readAttribute** (*string* $attribute)

    Reads an attribute value by its name

    ``` php
    echo $robot->readAttribute("name");
    ```
- name: Mvc\Model\Row::setDirtyState
  id: api/phalcon_mvc_model_row#setdirtystate
  summary: null
  belongs_to: Mvc\Model\Row
  description: |-
    ### public **setDirtyState** (*mixed* $dirtyState)

    Set the current object’s state
- name: Mvc\Model\Row::toArray
  id: api/phalcon_mvc_model_row#toarray
  summary: null
  belongs_to: Mvc\Model\Row
  description: |-
    ### public *array* **toArray** ()

    Returns the instance as an array representation
- name: Mvc\Model\Row::writeAttribute
  id: api/phalcon_mvc_model_row#writeattribute
  summary: null
  belongs_to: Mvc\Model\Row
  description: |-
    ### public **writeAttribute** (*string* $attribute, *mixed* $value)

    Writes an attribute value by its name

    ``` php
    $robot->writeAttribute("name", "Rosey");
    ```
- name: Mvc\Model\Transaction
  id: api/phalcon_mvc_model_transaction
  summary: Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action
  description: "# Class **Phalcon\\Mvc\\Model\\Transaction**\n\n*implements* [*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction.zep)\n\nTransactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. Phalcon\\Transaction is intended to be used with Phalcon_Model_Base. Phalcon Transactions should be created using Phalcon\\Transaction\\Manager.\n\n``` php\ntry {\n    $manager = new \\Phalcon\\Mvc\\Model\\Transaction\\Manager();\n\n    $transaction = $manager->get();\n\n    $robot = new Robots();\n\n    $robot->setTransaction($transaction);\n\n    $robot->name       = \"WALL·E\";\n    $robot->created_at = date(\"Y-m-d\");\n\n    if ($robot->save() === false) {\n        $transaction->rollback(\"Can't save robot\");\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart->setTransaction($transaction);\n\n    $robotPart->type = \"head\";\n\n    if ($robotPart->save() === false) {\n        $transaction->rollback(\"Can't save robot part\");\n    }\n\n    $transaction->commit();\n} catch(Phalcon\\Mvc\\Model\\Transaction\\Failed $e) {\n    echo \"Failed, reason: \", $e->getMessage();\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector, \\[*boolean* $autoBegin\\], \\[*string* $service\\])\n\nPhalcon\\Mvc\\Model\\Transaction constructor\n\n### public **setTransactionManager** ([*Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface*](phalcon_mvc_model_transaction_managerinterface) $manager)\n\nSets transaction manager related to the transaction\n\n### public **begin** ()\n\nStarts the transaction\n\n### public **commit** ()\n\nCommits the transaction\n\n### public *boolean* **rollback** (\\[*string* $rollbackMessage\\], \\[[*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $rollbackRecord\\])\n\nRollbacks the transaction\n\n### public **getConnection** ()\n\nReturns the connection related to transaction\n\n### public **setIsNewTransaction** (*mixed* $isNew)\n\nSets if is a reused transaction or new once\n\n### public **setRollbackOnAbort** (*mixed* $rollbackOnAbort)\n\nSets flag to rollback on abort the HTTP connection\n\n### public **isManaged** ()\n\nChecks whether transaction is managed by a transaction manager\n\n### public **getMessages** ()\n\nReturns validations messages from last save try\n\n### public **isValid** ()\n\nChecks whether internal connection is under an active transaction\n\n### public **setRollbackedRecord** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record)\n\nSets object which generates rollback action\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction.html)"
- name: Mvc\Model\Transaction::begin
  id: api/phalcon_mvc_model_transaction#begin
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **begin** ()

    Starts the transaction
- name: Mvc\Model\Transaction::commit
  id: api/phalcon_mvc_model_transaction#commit
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **commit** ()

    Commits the transaction
- name: Mvc\Model\Transaction::getConnection
  id: api/phalcon_mvc_model_transaction#getconnection
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **getConnection** ()

    Returns the connection related to transaction
- name: Mvc\Model\Transaction::getMessages
  id: api/phalcon_mvc_model_transaction#getmessages
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **getMessages** ()

    Returns validations messages from last save try
- name: Mvc\Model\Transaction::isManaged
  id: api/phalcon_mvc_model_transaction#ismanaged
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **isManaged** ()

    Checks whether transaction is managed by a transaction manager
- name: Mvc\Model\Transaction::isValid
  id: api/phalcon_mvc_model_transaction#isvalid
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **isValid** ()

    Checks whether internal connection is under an active transaction
- name: Mvc\Model\Transaction::rollback
  id: api/phalcon_mvc_model_transaction#rollback
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public *boolean* **rollback** (\[*string* $rollbackMessage\], \[[*Phalcon\Mvc\ModelInterface*](phalcon_mvc_modelinterface) $rollbackRecord\])

    Rollbacks the transaction
- name: Mvc\Model\Transaction::setIsNewTransaction
  id: api/phalcon_mvc_model_transaction#setisnewtransaction
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **setIsNewTransaction** (*mixed* $isNew)

    Sets if is a reused transaction or new once
- name: Mvc\Model\Transaction::setRollbackedRecord
  id: api/phalcon_mvc_model_transaction#setrollbackedrecord
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Transaction
  description: "### public **setRollbackedRecord** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record)\n\nSets object which generates rollback action\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction.html)"
- name: Mvc\Model\Transaction::setRollbackOnAbort
  id: api/phalcon_mvc_model_transaction#setrollbackonabort
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **setRollbackOnAbort** (*mixed* $rollbackOnAbort)

    Sets flag to rollback on abort the HTTP connection
- name: Mvc\Model\Transaction::setTransactionManager
  id: api/phalcon_mvc_model_transaction#settransactionmanager
  summary: null
  belongs_to: Mvc\Model\Transaction
  description: |-
    ### public **setTransactionManager** ([*Phalcon\Mvc\Model\Transaction\ManagerInterface*](phalcon_mvc_model_transaction_managerinterface) $manager)

    Sets transaction manager related to the transaction
- name: Mvc\Model\TransactionInterface
  id: api/phalcon_mvc_model_transactioninterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\TransactionInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transactioninterface.zep)\n\n## Methods\n\n### abstract public **setTransactionManager** ([*Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface*](phalcon_mvc_model_transaction_managerinterface) $manager)\n\n...\n\n### abstract public **begin** ()\n\n...\n\n### abstract public **commit** ()\n\n...\n\n### abstract public **rollback** (\\[*mixed* $rollbackMessage\\], \\[*mixed* $rollbackRecord\\])\n\n...\n\n### abstract public **getConnection** ()\n\n...\n\n### abstract public **setIsNewTransaction** (*mixed* $isNew)\n\n...\n\n### abstract public **setRollbackOnAbort** (*mixed* $rollbackOnAbort)\n\n...\n\n### abstract public **isManaged** ()\n\n...\n\n### abstract public **getMessages** ()\n\n...\n\n### abstract public **isValid** ()\n\n...\n\n### abstract public **setRollbackedRecord** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_TransactionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_TransactionInterface.html)"
- name: Mvc\Model\TransactionInterface::begin
  id: api/phalcon_mvc_model_transactioninterface#begin
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **begin** ()

    ...
- name: Mvc\Model\TransactionInterface::commit
  id: api/phalcon_mvc_model_transactioninterface#commit
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **commit** ()

    ...
- name: Mvc\Model\TransactionInterface::getConnection
  id: api/phalcon_mvc_model_transactioninterface#getconnection
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **getConnection** ()

    ...
- name: Mvc\Model\TransactionInterface::getMessages
  id: api/phalcon_mvc_model_transactioninterface#getmessages
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **getMessages** ()

    ...
- name: Mvc\Model\TransactionInterface::isManaged
  id: api/phalcon_mvc_model_transactioninterface#ismanaged
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **isManaged** ()

    ...
- name: Mvc\Model\TransactionInterface::isValid
  id: api/phalcon_mvc_model_transactioninterface#isvalid
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **isValid** ()

    ...
- name: Mvc\Model\TransactionInterface::rollback
  id: api/phalcon_mvc_model_transactioninterface#rollback
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **rollback** (\[*mixed* $rollbackMessage\], \[*mixed* $rollbackRecord\])

    ...
- name: Mvc\Model\TransactionInterface::setIsNewTransaction
  id: api/phalcon_mvc_model_transactioninterface#setisnewtransaction
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **setIsNewTransaction** (*mixed* $isNew)

    ...
- name: Mvc\Model\TransactionInterface::setRollbackedRecord
  id: api/phalcon_mvc_model_transactioninterface#setrollbackedrecord
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\TransactionInterface
  description: "### abstract public **setRollbackedRecord** ([*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_TransactionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_TransactionInterface.html)"
- name: Mvc\Model\TransactionInterface::setRollbackOnAbort
  id: api/phalcon_mvc_model_transactioninterface#setrollbackonabort
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **setRollbackOnAbort** (*mixed* $rollbackOnAbort)

    ...
- name: Mvc\Model\TransactionInterface::setTransactionManager
  id: api/phalcon_mvc_model_transactioninterface#settransactionmanager
  summary: null
  belongs_to: Mvc\Model\TransactionInterface
  description: |-
    ### abstract public **setTransactionManager** ([*Phalcon\Mvc\Model\Transaction\ManagerInterface*](phalcon_mvc_model_transaction_managerinterface) $manager)

    ...
- name: Mvc\Model\Transaction\Exception
  id: api/phalcon_mvc_model_transaction_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Transaction\\Exception**\n\n*extends* class [*Phalcon\\Mvc\\Model\\Exception*](phalcon_mvc_model_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Exception.html)"
- name: Mvc\Model\Transaction\Failed
  id: api/phalcon_mvc_model_transaction_failed
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\Transaction\\Failed**\n\n*extends* class [*Phalcon\\Mvc\\Model\\Transaction\\Exception*](phalcon_mvc_model_transaction_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/failed.zep)\n\nThis class will be thrown to exit a try/catch block for isolated transactions\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $message, \\[[*Phalcon\\Mvc\\ModelInterface*](phalcon_mvc_modelinterface) $record\\])\n\nPhalcon\\Mvc\\Model\\Transaction\\Failed constructor\n\n### public **getRecordMessages** ()\n\nReturns validation record messages which stop the transaction\n\n### public **getRecord** ()\n\nReturns validation record messages which stop the transaction\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Failed.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Failed.html)"
- name: Mvc\Model\Transaction\Failed::getRecord
  id: api/phalcon_mvc_model_transaction_failed#getrecord
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Transaction\Failed
  description: "### public **getRecord** ()\n\nReturns validation record messages which stop the transaction\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Failed.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Failed.html)"
- name: Mvc\Model\Transaction\Failed::getRecordMessages
  id: api/phalcon_mvc_model_transaction_failed#getrecordmessages
  summary: null
  belongs_to: Mvc\Model\Transaction\Failed
  description: |-
    ### public **getRecordMessages** ()

    Returns validation record messages which stop the transaction
- name: Mvc\Model\Transaction\Manager
  id: api/phalcon_mvc_model_transaction_manager
  summary: A transaction acts on a single database connection
  description: "# Class **Phalcon\\Mvc\\Model\\Transaction\\Manager**\n\n*implements* [*Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface*](phalcon_mvc_model_transaction_managerinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/manager.zep)\n\nA transaction acts on a single database connection. If you have multiple class-specific databases, the transaction will not protect interaction among them.\n\nThis class manages the objects that compose a transaction. A transaction produces a unique connection that is passed to every object part of the transaction.\n\n``` php\ntry {\n   use Phalcon\\Mvc\\Model\\Transaction\\Manager as TransactionManager;\n\n   $transactionManager = new TransactionManager();\n\n   $transaction = $transactionManager->get();\n\n   $robot = new Robots();\n\n   $robot->setTransaction($transaction);\n\n   $robot->name       = \"WALL·E\";\n   $robot->created_at = date(\"Y-m-d\");\n\n   if ($robot->save() === false){\n       $transaction->rollback(\"Can't save robot\");\n   }\n\n   $robotPart = new RobotParts();\n\n   $robotPart->setTransaction($transaction);\n\n   $robotPart->type = \"head\";\n\n   if ($robotPart->save() === false) {\n       $transaction->rollback(\"Can't save robot part\");\n   }\n\n   $transaction->commit();\n} catch (Phalcon\\Mvc\\Model\\Transaction\\Failed $e) {\n   echo \"Failed, reason: \", $e->getMessage();\n}\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\nPhalcon\\Mvc\\Model\\Transaction\\Manager constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injection container\n\n### public **getDI** ()\n\nReturns the dependency injection container\n\n### public **setDbService** (*mixed* $service)\n\nSets the database service used to run the isolated transactions\n\n### public *string* **getDbService** ()\n\nReturns the database service used to isolate the transaction\n\n### public **setRollbackPendent** (*mixed* $rollbackPendent)\n\nSet if the transaction manager must register a shutdown function to clean up pendent transactions\n\n### public **getRollbackPendent** ()\n\nCheck if the transaction manager is registering a shutdown function to clean up pendent transactions\n\n### public **has** ()\n\nChecks whether the manager has an active transaction\n\n### public **get** (\\[*mixed* $autoBegin\\])\n\nReturns a new \\Phalcon\\Mvc\\Model\\Transaction or an already created once This method registers a shutdown function to rollback active connections\n\n### public **getOrCreateTransaction** (\\[*mixed* $autoBegin\\])\n\nCreate/Returns a new transaction or an existing one\n\n### public **rollbackPendent** ()\n\nRollbacks active transactions within the manager\n\n### public **commit** ()\n\nCommits active transactions within the manager\n\n### public **rollback** (\\[*boolean* $collect\\])\n\nRollbacks active transactions within the manager Collect will remove the transaction from the manager\n\n### public **notifyRollback** ([*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)\n\nNotifies the manager about a rollbacked transaction\n\n### public **notifyCommit** ([*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)\n\nNotifies the manager about a committed transaction\n\n### protected **\\_collectTransaction** ([*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)\n\nRemoves transactions from the TransactionManager\n\n### public **collectTransactions** ()\n\nRemove all the transactions from the manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Manager.html)"
- name: Mvc\Model\Transaction\Manager::collectTransactions
  id: api/phalcon_mvc_model_transaction_manager#collecttransactions
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Transaction\Manager
  description: "### public **collectTransactions** ()\n\nRemove all the transactions from the manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Manager.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Manager.html)"
- name: Mvc\Model\Transaction\Manager::commit
  id: api/phalcon_mvc_model_transaction_manager#commit
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **commit** ()

    Commits active transactions within the manager
- name: Mvc\Model\Transaction\Manager::get
  id: api/phalcon_mvc_model_transaction_manager#get
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **get** (\[*mixed* $autoBegin\])

    Returns a new \Phalcon\Mvc\Model\Transaction or an already created once This method registers a shutdown function to rollback active connections
- name: Mvc\Model\Transaction\Manager::getDbService
  id: api/phalcon_mvc_model_transaction_manager#getdbservice
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public *string* **getDbService** ()

    Returns the database service used to isolate the transaction
- name: Mvc\Model\Transaction\Manager::getDI
  id: api/phalcon_mvc_model_transaction_manager#getdi
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **getDI** ()

    Returns the dependency injection container
- name: Mvc\Model\Transaction\Manager::getOrCreateTransaction
  id: api/phalcon_mvc_model_transaction_manager#getorcreatetransaction
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **getOrCreateTransaction** (\[*mixed* $autoBegin\])

    Create/Returns a new transaction or an existing one
- name: Mvc\Model\Transaction\Manager::getRollbackPendent
  id: api/phalcon_mvc_model_transaction_manager#getrollbackpendent
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **getRollbackPendent** ()

    Check if the transaction manager is registering a shutdown function to clean up pendent transactions
- name: Mvc\Model\Transaction\Manager::has
  id: api/phalcon_mvc_model_transaction_manager#has
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **has** ()

    Checks whether the manager has an active transaction
- name: Mvc\Model\Transaction\Manager::notifyCommit
  id: api/phalcon_mvc_model_transaction_manager#notifycommit
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **notifyCommit** ([*Phalcon\Mvc\Model\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)

    Notifies the manager about a committed transaction

    ### protected **\_collectTransaction** ([*Phalcon\Mvc\Model\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)

    Removes transactions from the TransactionManager
- name: Mvc\Model\Transaction\Manager::notifyRollback
  id: api/phalcon_mvc_model_transaction_manager#notifyrollback
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **notifyRollback** ([*Phalcon\Mvc\Model\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)

    Notifies the manager about a rollbacked transaction
- name: Mvc\Model\Transaction\Manager::rollback
  id: api/phalcon_mvc_model_transaction_manager#rollback
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **rollback** (\[*boolean* $collect\])

    Rollbacks active transactions within the manager Collect will remove the transaction from the manager
- name: Mvc\Model\Transaction\Manager::rollbackPendent
  id: api/phalcon_mvc_model_transaction_manager#rollbackpendent
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **rollbackPendent** ()

    Rollbacks active transactions within the manager
- name: Mvc\Model\Transaction\Manager::setDbService
  id: api/phalcon_mvc_model_transaction_manager#setdbservice
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **setDbService** (*mixed* $service)

    Sets the database service used to run the isolated transactions
- name: Mvc\Model\Transaction\Manager::setDI
  id: api/phalcon_mvc_model_transaction_manager#setdi
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injection container
- name: Mvc\Model\Transaction\Manager::setRollbackPendent
  id: api/phalcon_mvc_model_transaction_manager#setrollbackpendent
  summary: null
  belongs_to: Mvc\Model\Transaction\Manager
  description: |-
    ### public **setRollbackPendent** (*mixed* $rollbackPendent)

    Set if the transaction manager must register a shutdown function to clean up pendent transactions
- name: Mvc\Model\Transaction\ManagerInterface
  id: api/phalcon_mvc_model_transaction_managerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/managerinterface.zep)\n\n## Methods\n\n### abstract public **has** ()\n\n...\n\n### abstract public **get** (\\[*mixed* $autoBegin\\])\n\n...\n\n### abstract public **rollbackPendent** ()\n\n...\n\n### abstract public **commit** ()\n\n...\n\n### abstract public **rollback** (\\[*mixed* $collect\\])\n\n...\n\n### abstract public **notifyRollback** ([*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)\n\n...\n\n### abstract public **notifyCommit** ([*Phalcon\\Mvc\\Model\\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)\n\n...\n\n### abstract public **collectTransactions** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_ManagerInterface.html)"
- name: Mvc\Model\Transaction\ManagerInterface::collectTransactions
  id: api/phalcon_mvc_model_transaction_managerinterface#collecttransactions
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: "### abstract public **collectTransactions** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_ManagerInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_ManagerInterface.html)"
- name: Mvc\Model\Transaction\ManagerInterface::commit
  id: api/phalcon_mvc_model_transaction_managerinterface#commit
  summary: null
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: |-
    ### abstract public **commit** ()

    ...
- name: Mvc\Model\Transaction\ManagerInterface::get
  id: api/phalcon_mvc_model_transaction_managerinterface#get
  summary: null
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: |-
    ### abstract public **get** (\[*mixed* $autoBegin\])

    ...
- name: Mvc\Model\Transaction\ManagerInterface::has
  id: api/phalcon_mvc_model_transaction_managerinterface#has
  summary: null
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: |-
    ### abstract public **has** ()

    ...
- name: Mvc\Model\Transaction\ManagerInterface::notifyCommit
  id: api/phalcon_mvc_model_transaction_managerinterface#notifycommit
  summary: null
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: |-
    ### abstract public **notifyCommit** ([*Phalcon\Mvc\Model\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)

    ...
- name: Mvc\Model\Transaction\ManagerInterface::notifyRollback
  id: api/phalcon_mvc_model_transaction_managerinterface#notifyrollback
  summary: null
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: |-
    ### abstract public **notifyRollback** ([*Phalcon\Mvc\Model\TransactionInterface*](phalcon_mvc_model_transactioninterface) $transaction)

    ...
- name: Mvc\Model\Transaction\ManagerInterface::rollback
  id: api/phalcon_mvc_model_transaction_managerinterface#rollback
  summary: null
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: |-
    ### abstract public **rollback** (\[*mixed* $collect\])

    ...
- name: Mvc\Model\Transaction\ManagerInterface::rollbackPendent
  id: api/phalcon_mvc_model_transaction_managerinterface#rollbackpendent
  summary: null
  belongs_to: Mvc\Model\Transaction\ManagerInterface
  description: |-
    ### abstract public **rollbackPendent** ()

    ...
- name: Mvc\Model\ValidationFailed
  id: api/phalcon_mvc_model_validationfailed
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Model\\ValidationFailed**\n\n*extends* class [*Phalcon\\Mvc\\Model\\Exception*](phalcon_mvc_model_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validationfailed.zep)\n\nThis exception is generated when a model fails to save a record Phalcon\\Mvc\\Model must be set up to have this behavior\n\n## Methods\n\n### public **\\_\\_construct** (*Model* $model, *Message*\\[\\] $validationMessages)\n\nPhalcon\\Mvc\\Model\\ValidationFailed constructor\n\n### public **getModel** ()\n\nReturns the model that generated the messages\n\n### public **getMessages** ()\n\nReturns the complete group of messages produced in the validation\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidationFailed.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidationFailed.html)"
- name: Mvc\Model\ValidationFailed::getMessages
  id: api/phalcon_mvc_model_validationfailed#getmessages
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\ValidationFailed
  description: "### public **getMessages** ()\n\nReturns the complete group of messages produced in the validation\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidationFailed.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidationFailed.html)"
- name: Mvc\Model\ValidationFailed::getModel
  id: api/phalcon_mvc_model_validationfailed#getmodel
  summary: null
  belongs_to: Mvc\Model\ValidationFailed
  description: |-
    ### public **getModel** ()

    Returns the model that generated the messages
- name: Mvc\Model\Validator
  id: api/phalcon_mvc_model_validator
  summary: This class is only for backward compatibility reasons to use with Phalcon\Mvc\Collection
  description: "# Abstract class **Phalcon\\Mvc\\Model\\Validator**\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator.zep)\n\nThis is a base class for Phalcon\\Mvc\\Model validators\n\nThis class is only for backward compatibility reasons to use with Phalcon\\Mvc\\Collection. Otherwise please use the validators provided by Phalcon\\Validation.\n\n## Methods\n\n### public **\\_\\_construct** (*array* $options)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\])\n\nAppends a message to the validator\n\n### public **getMessages** ()\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** ()\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\])\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option)\n\nCheck whether an option has been defined in the validator options\n\n### abstract public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record) inherited from [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator.html)"
- name: Mvc\Model\Validator::getMessages
  id: api/phalcon_mvc_model_validator#getmessages
  summary: null
  belongs_to: Mvc\Model\Validator
  description: |-
    ### public **getMessages** ()

    Returns messages generated by the validator
- name: Mvc\Model\Validator::getOption
  id: api/phalcon_mvc_model_validator#getoption
  summary: null
  belongs_to: Mvc\Model\Validator
  description: |-
    ### public **getOption** (*mixed* $option, \[*mixed* $defaultValue\])

    Returns an option
- name: Mvc\Model\Validator::getOptions
  id: api/phalcon_mvc_model_validator#getoptions
  summary: null
  belongs_to: Mvc\Model\Validator
  description: |-
    ### public *array* **getOptions** ()

    Returns all the options from the validator
- name: Mvc\Model\Validator::isSetOption
  id: api/phalcon_mvc_model_validator#issetoption
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator
  description: "### public **isSetOption** (*mixed* $option)\n\nCheck whether an option has been defined in the validator options\n\n### abstract public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record) inherited from [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator.html)"
- name: Mvc\Model\ValidatorInterface
  id: api/phalcon_mvc_model_validatorinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Model\\ValidatorInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validatorinterface.zep)\n\n## Methods\n\n### abstract public **getMessages** ()\n\n...\n\n### abstract public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidatorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidatorInterface.html)"
- name: Mvc\Model\ValidatorInterface::getMessages
  id: api/phalcon_mvc_model_validatorinterface#getmessages
  summary: null
  belongs_to: Mvc\Model\ValidatorInterface
  description: |-
    ### abstract public **getMessages** ()

    ...
- name: Mvc\Model\ValidatorInterface::validate
  id: api/phalcon_mvc_model_validatorinterface#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\ValidatorInterface
  description: "### abstract public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidatorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidatorInterface.html)"
- name: Mvc\Model\Validator\Email
  id: api/phalcon_mvc_model_validator_email
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Email**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/email.zep)\n\nAllows to validate if email fields has correct values\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\Email as EmailValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new EmailValidator(\n                [\n                    \"field\" => \"electronic_mail\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Email.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Email.html)"
- name: Mvc\Model\Validator\Email::validate
  id: api/phalcon_mvc_model_validator_email#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Email
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Email.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Email.html)"
- name: Mvc\Model\Validator\Exclusionin
  id: api/phalcon_mvc_model_validator_exclusionin
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Exclusionin**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/exclusionin.zep)\n\nPhalcon\\Mvc\\Model\\Validator\\ExclusionIn\n\nCheck if a value is not included into a list of values\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionInValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new ExclusionInValidator(\n                [\n                    \"field\"  => \"status\",\n                    \"domain\" => [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Exclusionin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Exclusionin.html)"
- name: Mvc\Model\Validator\Exclusionin::validate
  id: api/phalcon_mvc_model_validator_exclusionin#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Exclusionin
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Exclusionin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Exclusionin.html)"
- name: Mvc\Model\Validator\Inclusionin
  id: api/phalcon_mvc_model_validator_inclusionin
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Inclusionin**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/inclusionin.zep)\n\nPhalcon\\Mvc\\Model\\Validator\\InclusionIn\n\nCheck if a value is included into a list of values\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\InclusionIn as InclusionInValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new InclusionInValidator(\n                [\n                    \"field\"  => \"status\",\n                    \"domain\" => [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Inclusionin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Inclusionin.html)"
- name: Mvc\Model\Validator\Inclusionin::validate
  id: api/phalcon_mvc_model_validator_inclusionin#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Inclusionin
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Inclusionin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Inclusionin.html)"
- name: Mvc\Model\Validator\Ip
  id: api/phalcon_mvc_model_validator_ip
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Ip**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/ip.zep)\n\nPhalcon\\Mvc\\Model\\Validator\\IP\n\nValidates that a value is ipv4 address in valid range\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\Ip;\n\nclass Data extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        // Any pubic IP\n        $this->validate(\n            new IP(\n                [\n                    \"field\"         => \"server_ip\",\n                    \"version\"       => IP::VERSION_4 | IP::VERSION_6, // v6 and v4. The same if not specified\n                    \"allowReserved\" => false,   // False if not specified. Ignored for v6\n                    \"allowPrivate\"  => false,   // False if not specified\n                    \"message\"       => \"IP address has to be correct\",\n                ]\n            )\n        );\n\n        // Any public v4 address\n        $this->validate(\n            new IP(\n                [\n                    \"field\"   => \"ip_4\",\n                    \"version\" => IP::VERSION_4,\n                    \"message\" => \"IP address has to be correct\",\n                ]\n            )\n        );\n\n        // Any v6 address\n        $this->validate(\n            new IP(\n                [\n                    \"field\"        => \"ip6\",\n                    \"version\"      => IP::VERSION_6,\n                    \"allowPrivate\" => true,\n                    \"message\"      => \"IP address has to be correct\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Constants\n\n### *integer* **VERSION_4**\n\n### *integer* **VERSION_6**\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Ip.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Ip.html)"
- name: Mvc\Model\Validator\Ip::validate
  id: api/phalcon_mvc_model_validator_ip#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Ip
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Ip.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Ip.html)"
- name: Mvc\Model\Validator\Ip::VERSION_4
  id: api/phalcon_mvc_model_validator_ip#version_4
  summary: null
  belongs_to: Mvc\Model\Validator\Ip
  description: '### *integer* **VERSION_4**'
- name: Mvc\Model\Validator\Ip::VERSION_6
  id: api/phalcon_mvc_model_validator_ip#version_6
  summary: null
  belongs_to: Mvc\Model\Validator\Ip
  description: |-
    ### *integer* **VERSION_6**

    ## Methods
- name: Mvc\Model\Validator\Numericality
  id: api/phalcon_mvc_model_validator_numericality
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Numericality**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/numericality.zep)\n\nAllows to validate if a field has a valid numeric format\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\Numericality as NumericalityValidator;\n\nclass Products extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new NumericalityValidator(\n                [\n                    \"field\" => \"price\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Numericality.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Numericality.html)"
- name: Mvc\Model\Validator\Numericality::validate
  id: api/phalcon_mvc_model_validator_numericality#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Numericality
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Numericality.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Numericality.html)"
- name: Mvc\Model\Validator\PresenceOf
  id: api/phalcon_mvc_model_validator_presenceof
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\PresenceOf**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/presenceof.zep)\n\nAllows to validate if a filed have a value different of null and empty string (“”)\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\PresenceOf;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new PresenceOf(\n                [\n                    \"field\"   => \"name\",\n                    \"message\" => \"The name is required\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_PresenceOf.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_PresenceOf.html)"
- name: Mvc\Model\Validator\PresenceOf::validate
  id: api/phalcon_mvc_model_validator_presenceof#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\PresenceOf
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_PresenceOf.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_PresenceOf.html)"
- name: Mvc\Model\Validator\Regex
  id: api/phalcon_mvc_model_validator_regex
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Regex**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/regex.zep)\n\nAllows validate if the value of a field matches a regular expression\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\Regex as RegexValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new RegexValidator(\n                [\n                    \"field\"   => \"created_at\",\n                    \"pattern\" => \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])/\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Regex.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Regex.html)"
- name: Mvc\Model\Validator\Regex::validate
  id: api/phalcon_mvc_model_validator_regex#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Regex
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Regex.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Regex.html)"
- name: Mvc\Model\Validator\StringLength
  id: api/phalcon_mvc_model_validator_stringlength
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\StringLength**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/stringlength.zep)\n\nSimply validates specified string length constraints\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\StringLength as StringLengthValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new StringLengthValidator(\n                [\n                    \"field\"          => \"name_last\",\n                    \"max\"            => 50,\n                    \"min\"            => 2,\n                    \"messageMaximum\" => \"We don't like really long names\",\n                    \"messageMinimum\" => \"We want more than just their initials\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_StringLength.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_StringLength.html)"
- name: Mvc\Model\Validator\StringLength::validate
  id: api/phalcon_mvc_model_validator_stringlength#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\StringLength
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_StringLength.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_StringLength.html)"
- name: Mvc\Model\Validator\Uniqueness
  id: api/phalcon_mvc_model_validator_uniqueness
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Uniqueness**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/uniqueness.zep)\n\nValidates that a field or a combination of a set of fields are not present more than once in the existing records of the related table\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Collection;\nuse Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\n\nclass Subscriptors extends Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new Uniqueness(\n                [\n                    \"field\"   => \"email\",\n                    \"message\" => \"Value of field 'email' is already present in another record\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Uniqueness.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Uniqueness.html)"
- name: Mvc\Model\Validator\Uniqueness::validate
  id: api/phalcon_mvc_model_validator_uniqueness#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Uniqueness
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Uniqueness.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Uniqueness.html)"
- name: Mvc\Model\Validator\Url
  id: api/phalcon_mvc_model_validator_url
  summary: This validator is only for use with Phalcon\Mvc\Collection
  description: "# Class **Phalcon\\Mvc\\Model\\Validator\\Url**\n\n*extends* abstract class [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\n*implements* [*Phalcon\\Mvc\\Model\\ValidatorInterface*](phalcon_mvc_model_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/url.zep)\n\nAllows to validate if a field has a url format\n\nThis validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.\n\n``` php\nuse Phalcon\\Mvc\\Model\\Validator\\Url as UrlValidator;\n\nclass Posts extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this->validate(\n            new UrlValidator(\n                [\n                    \"field\" => \"source_url\",\n                ]\n            )\n        );\n\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Url.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Url.html)"
- name: Mvc\Model\Validator\Url::validate
  id: api/phalcon_mvc_model_validator_url#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Model\Validator\Url
  description: "### public **validate** ([*Phalcon\\Mvc\\EntityInterface*](phalcon_mvc_entityinterface) $record)\n\nExecutes the validator\n\n### public **\\_\\_construct** (*array* $options) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nPhalcon\\Mvc\\Model\\Validator constructor\n\n### protected **appendMessage** (*string* $message, \\[*string* \\| *array* $field\\], \\[*string* $type\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nAppends a message to the validator\n\n### public **getMessages** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns messages generated by the validator\n\n### public *array* **getOptions** () inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns all the options from the validator\n\n### public **getOption** (*mixed* $option, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nReturns an option\n\n### public **isSetOption** (*mixed* $option) inherited from [*Phalcon\\Mvc\\Model\\Validator*](phalcon_mvc_model_validator)\n\nCheck whether an option has been defined in the validator options\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Url.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Url.html)"
- name: Mvc\ModuleDefinitionInterface
  id: api/phalcon_mvc_moduledefinitioninterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\ModuleDefinitionInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/moduledefinitioninterface.zep)\n\n## Methods\n\n### abstract public **registerAutoloaders** (\\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\n...\n\n### abstract public **registerServices** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModuleDefinitionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModuleDefinitionInterface.html)"
- name: Mvc\ModuleDefinitionInterface::registerAutoloaders
  id: api/phalcon_mvc_moduledefinitioninterface#registerautoloaders
  summary: null
  belongs_to: Mvc\ModuleDefinitionInterface
  description: |-
    ### abstract public **registerAutoloaders** (\[[*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector\])

    ...
- name: Mvc\ModuleDefinitionInterface::registerServices
  id: api/phalcon_mvc_moduledefinitioninterface#registerservices
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\ModuleDefinitionInterface
  description: "### abstract public **registerServices** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModuleDefinitionInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModuleDefinitionInterface.html)"
- name: Mvc\Router
  id: api/phalcon_mvc_router
  summary: Phalcon\Mvc\Router is the standard framework router
  description: "# Class **Phalcon\\Mvc\\Router**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Mvc\\RouterInterface*](phalcon_mvc_routerinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router.zep)\n\nPhalcon\\Mvc\\Router is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URL) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router->add(\n    \"/documentation/{chapter}/{name}\\.{type:[a-z]+}\",\n    [\n        \"controller\" => \"documentation\",\n        \"action\"     => \"show\",\n    ]\n);\n\n$router->handle();\n\necho $router->getControllerName();\n```\n\n## Constants\n\n### *integer* **URI_SOURCE_GET_URL**\n\n### *integer* **URI_SOURCE_SERVER_REQUEST_URI**\n\n### *integer* **POSITION_FIRST**\n\n### *integer* **POSITION_LAST**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*mixed* $defaultRoutes\\])\n\nPhalcon\\Mvc\\Router constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)\n\nSets the events manager\n\n### public **getEventsManager** ()\n\nReturns the internal event manager\n\n### public **getRewriteUri** ()\n\nGet rewrite info. This info is read from $\\_GET\\[“\\_url”\\]. This returns ‘/’ if the rewrite information cannot be read\n\n### public **setUriSource** (*mixed* $uriSource)\n\nSets the URI source. One of the URI_SOURCE\\_\\* constants\n\n``` php\n$router->setUriSource(\n    Router::URI_SOURCE_SERVER_REQUEST_URI\n);\n```\n\n### public **removeExtraSlashes** (*mixed* $remove)\n\nSet whether router must remove the extra slashes in the handled routes\n\n### public **setDefaultNamespace** (*mixed* $namespaceName)\n\nSets the name of the default namespace\n\n### public **setDefaultModule** (*mixed* $moduleName)\n\nSets the name of the default module\n\n### public **setDefaultController** (*mixed* $controllerName)\n\nSets the default controller name\n\n### public **setDefaultAction** (*mixed* $actionName)\n\nSets the default action name\n\n### public **setDefaults** (*array* $defaults)\n\nSets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route\n\n``` php\n$router->setDefaults(\n    [\n        \"module\" => \"common\",\n        \"action\" => \"index\",\n    ]\n);\n```\n\n### public **getDefaults** ()\n\nReturns an array of default parameters\n\n### public **handle** (\\[*mixed* $uri\\])\n\nHandles routing information received from the rewrite engine\n\n``` php\n// Read the info from the rewrite engine\n$router->handle();\n\n// Manually passing an URL\n$router->handle(\"/posts/edit/1\");\n```\n\n### public **add** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\], \\[*mixed* $position\\])\n\nAdds a route to the router without any HTTP constraint\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router->add(\"/about\", \"About::index\");\n$router->add(\"/about\", \"About::index\", [\"GET\", \"POST\"]);\n$router->add(\"/about\", \"About::index\", [\"GET\", \"POST\"], Router::POSITION_FIRST);\n```\n\n### public **addGet** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is GET\n\n### public **addPost** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is POST\n\n### public **addPut** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is PUT\n\n### public **addPatch** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is PATCH\n\n### public **addDelete** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is DELETE\n\n### public **addOptions** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdd a route to the router that only match if the HTTP method is OPTIONS\n\n### public **addHead** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is HEAD\n\n### public **addPurge** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)\n\n### public **addTrace** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is TRACE\n\n### public **addConnect** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\])\n\nAdds a route to the router that only match if the HTTP method is CONNECT\n\n### public **mount** ([*Phalcon\\Mvc\\Router\\GroupInterface*](phalcon_mvc_router_groupinterface) $group)\n\nMounts a group of routes in the router\n\n### public **notFound** (*mixed* $paths)\n\nSet a group of paths to be returned when none of the defined routes are matched\n\n### public **clear** ()\n\nRemoves all the pre-defined routes\n\n### public **getNamespaceName** ()\n\nReturns the processed namespace name\n\n### public **getModuleName** ()\n\nReturns the processed module name\n\n### public **getControllerName** ()\n\nReturns the processed controller name\n\n### public **getActionName** ()\n\nReturns the processed action name\n\n### public **getParams** ()\n\nReturns the processed parameters\n\n### public **getMatchedRoute** ()\n\nReturns the route that matches the handled URI\n\n### public **getMatches** ()\n\nReturns the sub expressions in the regular expression matched\n\n### public **wasMatched** ()\n\nChecks if the router matches any of the defined routes\n\n### public **getRoutes** ()\n\nReturns all the routes defined in the router\n\n### public **getRouteById** (*mixed* $id)\n\nReturns a route object by its id\n\n### public **getRouteByName** (*mixed* $name)\n\nReturns a route object by its name\n\n### public **isExactControllerName** ()\n\nReturns whether controller name should not be mangled\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router.html)"
- name: Mvc\Router::add
  id: api/phalcon_mvc_router#add
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **add** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $httpMethods\], \[*mixed* $position\])

    Adds a route to the router without any HTTP constraint

    ``` php
    use Phalcon\Mvc\Router;

    $router->add("/about", "About::index");
    $router->add("/about", "About::index", ["GET", "POST"]);
    $router->add("/about", "About::index", ["GET", "POST"], Router::POSITION_FIRST);
    ```
- name: Mvc\Router::addConnect
  id: api/phalcon_mvc_router#addconnect
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addConnect** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is CONNECT
- name: Mvc\Router::addDelete
  id: api/phalcon_mvc_router#adddelete
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addDelete** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is DELETE
- name: Mvc\Router::addGet
  id: api/phalcon_mvc_router#addget
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addGet** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is GET
- name: Mvc\Router::addHead
  id: api/phalcon_mvc_router#addhead
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addHead** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is HEAD
- name: Mvc\Router::addOptions
  id: api/phalcon_mvc_router#addoptions
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addOptions** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Add a route to the router that only match if the HTTP method is OPTIONS
- name: Mvc\Router::addPatch
  id: api/phalcon_mvc_router#addpatch
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addPatch** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is PATCH
- name: Mvc\Router::addPost
  id: api/phalcon_mvc_router#addpost
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addPost** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is POST
- name: Mvc\Router::addPurge
  id: api/phalcon_mvc_router#addpurge
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addPurge** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)
- name: Mvc\Router::addPut
  id: api/phalcon_mvc_router#addput
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addPut** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is PUT
- name: Mvc\Router::addTrace
  id: api/phalcon_mvc_router#addtrace
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **addTrace** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $position\])

    Adds a route to the router that only match if the HTTP method is TRACE
- name: Mvc\Router::clear
  id: api/phalcon_mvc_router#clear
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **clear** ()

    Removes all the pre-defined routes
- name: Mvc\Router::getActionName
  id: api/phalcon_mvc_router#getactionname
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getActionName** ()

    Returns the processed action name
- name: Mvc\Router::getControllerName
  id: api/phalcon_mvc_router#getcontrollername
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getControllerName** ()

    Returns the processed controller name
- name: Mvc\Router::getDefaults
  id: api/phalcon_mvc_router#getdefaults
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getDefaults** ()

    Returns an array of default parameters
- name: Mvc\Router::getDI
  id: api/phalcon_mvc_router#getdi
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Mvc\Router::getEventsManager
  id: api/phalcon_mvc_router#geteventsmanager
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getEventsManager** ()

    Returns the internal event manager
- name: Mvc\Router::getMatchedRoute
  id: api/phalcon_mvc_router#getmatchedroute
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getMatchedRoute** ()

    Returns the route that matches the handled URI
- name: Mvc\Router::getMatches
  id: api/phalcon_mvc_router#getmatches
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getMatches** ()

    Returns the sub expressions in the regular expression matched
- name: Mvc\Router::getModuleName
  id: api/phalcon_mvc_router#getmodulename
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getModuleName** ()

    Returns the processed module name
- name: Mvc\Router::getNamespaceName
  id: api/phalcon_mvc_router#getnamespacename
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getNamespaceName** ()

    Returns the processed namespace name
- name: Mvc\Router::getParams
  id: api/phalcon_mvc_router#getparams
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getParams** ()

    Returns the processed parameters
- name: Mvc\Router::getRewriteUri
  id: api/phalcon_mvc_router#getrewriteuri
  summary: Get rewrite info
  belongs_to: Mvc\Router
  description: |-
    ### public **getRewriteUri** ()

    Get rewrite info. This info is read from $\_GET\[“\_url”\]. This returns ‘/’ if the rewrite information cannot be read
- name: Mvc\Router::getRouteById
  id: api/phalcon_mvc_router#getroutebyid
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getRouteById** (*mixed* $id)

    Returns a route object by its id
- name: Mvc\Router::getRouteByName
  id: api/phalcon_mvc_router#getroutebyname
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getRouteByName** (*mixed* $name)

    Returns a route object by its name
- name: Mvc\Router::getRoutes
  id: api/phalcon_mvc_router#getroutes
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **getRoutes** ()

    Returns all the routes defined in the router
- name: Mvc\Router::handle
  id: api/phalcon_mvc_router#handle
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **handle** (\[*mixed* $uri\])

    Handles routing information received from the rewrite engine

    ``` php
    // Read the info from the rewrite engine
    $router->handle();

    // Manually passing an URL
    $router->handle("/posts/edit/1");
    ```
- name: Mvc\Router::isExactControllerName
  id: api/phalcon_mvc_router#isexactcontrollername
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Router
  description: "### public **isExactControllerName** ()\n\nReturns whether controller name should not be mangled\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router.html)"
- name: Mvc\Router::mount
  id: api/phalcon_mvc_router#mount
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **mount** ([*Phalcon\Mvc\Router\GroupInterface*](phalcon_mvc_router_groupinterface) $group)

    Mounts a group of routes in the router
- name: Mvc\Router::notFound
  id: api/phalcon_mvc_router#notfound
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **notFound** (*mixed* $paths)

    Set a group of paths to be returned when none of the defined routes are matched
- name: Mvc\Router::POSITION_FIRST
  id: api/phalcon_mvc_router#position_first
  summary: null
  belongs_to: Mvc\Router
  description: '### *integer* **POSITION_FIRST**'
- name: Mvc\Router::POSITION_LAST
  id: api/phalcon_mvc_router#position_last
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### *integer* **POSITION_LAST**

    ## Methods

    ### public **\_\_construct** (\[*mixed* $defaultRoutes\])

    Phalcon\Mvc\Router constructor
- name: Mvc\Router::removeExtraSlashes
  id: api/phalcon_mvc_router#removeextraslashes
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **removeExtraSlashes** (*mixed* $remove)

    Set whether router must remove the extra slashes in the handled routes
- name: Mvc\Router::setDefaultAction
  id: api/phalcon_mvc_router#setdefaultaction
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **setDefaultAction** (*mixed* $actionName)

    Sets the default action name
- name: Mvc\Router::setDefaultController
  id: api/phalcon_mvc_router#setdefaultcontroller
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **setDefaultController** (*mixed* $controllerName)

    Sets the default controller name
- name: Mvc\Router::setDefaultModule
  id: api/phalcon_mvc_router#setdefaultmodule
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **setDefaultModule** (*mixed* $moduleName)

    Sets the name of the default module
- name: Mvc\Router::setDefaultNamespace
  id: api/phalcon_mvc_router#setdefaultnamespace
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **setDefaultNamespace** (*mixed* $namespaceName)

    Sets the name of the default namespace
- name: Mvc\Router::setDefaults
  id: api/phalcon_mvc_router#setdefaults
  summary: Sets an array of default paths
  belongs_to: Mvc\Router
  description: |-
    ### public **setDefaults** (*array* $defaults)

    Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route

    ``` php
    $router->setDefaults(
        [
            "module" => "common",
            "action" => "index",
        ]
    );
    ```
- name: Mvc\Router::setDI
  id: api/phalcon_mvc_router#setdi
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Mvc\Router::setEventsManager
  id: api/phalcon_mvc_router#seteventsmanager
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **setEventsManager** ([*Phalcon\Events\ManagerInterface*](phalcon_events_managerinterface) $eventsManager)

    Sets the events manager
- name: Mvc\Router::setUriSource
  id: api/phalcon_mvc_router#seturisource
  summary: Sets the URI source
  belongs_to: Mvc\Router
  description: |-
    ### public **setUriSource** (*mixed* $uriSource)

    Sets the URI source. One of the URI_SOURCE\_\* constants

    ``` php
    $router->setUriSource(
        Router::URI_SOURCE_SERVER_REQUEST_URI
    );
    ```
- name: Mvc\Router::URI_SOURCE_GET_URL
  id: api/phalcon_mvc_router#uri_source_get_url
  summary: null
  belongs_to: Mvc\Router
  description: '### *integer* **URI_SOURCE_GET_URL**'
- name: Mvc\Router::URI_SOURCE_SERVER_REQUEST_URI
  id: api/phalcon_mvc_router#uri_source_server_request_uri
  summary: null
  belongs_to: Mvc\Router
  description: '### *integer* **URI_SOURCE_SERVER_REQUEST_URI**'
- name: Mvc\Router::wasMatched
  id: api/phalcon_mvc_router#wasmatched
  summary: null
  belongs_to: Mvc\Router
  description: |-
    ### public **wasMatched** ()

    Checks if the router matches any of the defined routes
- name: Mvc\RouterInterface
  id: api/phalcon_mvc_routerinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\RouterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/routerinterface.zep)\n\n## Methods\n\n### abstract public **setDefaultModule** (*mixed* $moduleName)\n\n...\n\n### abstract public **setDefaultController** (*mixed* $controllerName)\n\n...\n\n### abstract public **setDefaultAction** (*mixed* $actionName)\n\n...\n\n### abstract public **setDefaults** (*array* $defaults)\n\n...\n\n### abstract public **handle** (\\[*mixed* $uri\\])\n\n...\n\n### abstract public **add** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\])\n\n...\n\n### abstract public **addGet** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addPost** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addPut** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addPatch** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addDelete** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addOptions** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addHead** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addPurge** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addTrace** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addConnect** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **mount** ([*Phalcon\\Mvc\\Router\\GroupInterface*](phalcon_mvc_router_groupinterface) $group)\n\n...\n\n### abstract public **clear** ()\n\n...\n\n### abstract public **getModuleName** ()\n\n...\n\n### abstract public **getNamespaceName** ()\n\n...\n\n### abstract public **getControllerName** ()\n\n...\n\n### abstract public **getActionName** ()\n\n...\n\n### abstract public **getParams** ()\n\n...\n\n### abstract public **getMatchedRoute** ()\n\n...\n\n### abstract public **getMatches** ()\n\n...\n\n### abstract public **wasMatched** ()\n\n...\n\n### abstract public **getRoutes** ()\n\n...\n\n### abstract public **getRouteById** (*mixed* $id)\n\n...\n\n### abstract public **getRouteByName** (*mixed* $name)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_RouterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_RouterInterface.html)"
- name: Mvc\RouterInterface::add
  id: api/phalcon_mvc_routerinterface#add
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **add** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $httpMethods\])

    ...
- name: Mvc\RouterInterface::addConnect
  id: api/phalcon_mvc_routerinterface#addconnect
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addConnect** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addDelete
  id: api/phalcon_mvc_routerinterface#adddelete
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addDelete** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addGet
  id: api/phalcon_mvc_routerinterface#addget
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addGet** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addHead
  id: api/phalcon_mvc_routerinterface#addhead
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addHead** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addOptions
  id: api/phalcon_mvc_routerinterface#addoptions
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addOptions** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addPatch
  id: api/phalcon_mvc_routerinterface#addpatch
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addPatch** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addPost
  id: api/phalcon_mvc_routerinterface#addpost
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addPost** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addPurge
  id: api/phalcon_mvc_routerinterface#addpurge
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addPurge** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addPut
  id: api/phalcon_mvc_routerinterface#addput
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addPut** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::addTrace
  id: api/phalcon_mvc_routerinterface#addtrace
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **addTrace** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\RouterInterface::clear
  id: api/phalcon_mvc_routerinterface#clear
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **clear** ()

    ...
- name: Mvc\RouterInterface::getActionName
  id: api/phalcon_mvc_routerinterface#getactionname
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getActionName** ()

    ...
- name: Mvc\RouterInterface::getControllerName
  id: api/phalcon_mvc_routerinterface#getcontrollername
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getControllerName** ()

    ...
- name: Mvc\RouterInterface::getMatchedRoute
  id: api/phalcon_mvc_routerinterface#getmatchedroute
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getMatchedRoute** ()

    ...
- name: Mvc\RouterInterface::getMatches
  id: api/phalcon_mvc_routerinterface#getmatches
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getMatches** ()

    ...
- name: Mvc\RouterInterface::getModuleName
  id: api/phalcon_mvc_routerinterface#getmodulename
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getModuleName** ()

    ...
- name: Mvc\RouterInterface::getNamespaceName
  id: api/phalcon_mvc_routerinterface#getnamespacename
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getNamespaceName** ()

    ...
- name: Mvc\RouterInterface::getParams
  id: api/phalcon_mvc_routerinterface#getparams
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getParams** ()

    ...
- name: Mvc\RouterInterface::getRouteById
  id: api/phalcon_mvc_routerinterface#getroutebyid
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getRouteById** (*mixed* $id)

    ...
- name: Mvc\RouterInterface::getRouteByName
  id: api/phalcon_mvc_routerinterface#getroutebyname
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\RouterInterface
  description: "### abstract public **getRouteByName** (*mixed* $name)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_RouterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_RouterInterface.html)"
- name: Mvc\RouterInterface::getRoutes
  id: api/phalcon_mvc_routerinterface#getroutes
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **getRoutes** ()

    ...
- name: Mvc\RouterInterface::handle
  id: api/phalcon_mvc_routerinterface#handle
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **handle** (\[*mixed* $uri\])

    ...
- name: Mvc\RouterInterface::mount
  id: api/phalcon_mvc_routerinterface#mount
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **mount** ([*Phalcon\Mvc\Router\GroupInterface*](phalcon_mvc_router_groupinterface) $group)

    ...
- name: Mvc\RouterInterface::setDefaultAction
  id: api/phalcon_mvc_routerinterface#setdefaultaction
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **setDefaultAction** (*mixed* $actionName)

    ...
- name: Mvc\RouterInterface::setDefaultController
  id: api/phalcon_mvc_routerinterface#setdefaultcontroller
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **setDefaultController** (*mixed* $controllerName)

    ...
- name: Mvc\RouterInterface::setDefaultModule
  id: api/phalcon_mvc_routerinterface#setdefaultmodule
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **setDefaultModule** (*mixed* $moduleName)

    ...
- name: Mvc\RouterInterface::setDefaults
  id: api/phalcon_mvc_routerinterface#setdefaults
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **setDefaults** (*array* $defaults)

    ...
- name: Mvc\RouterInterface::wasMatched
  id: api/phalcon_mvc_routerinterface#wasmatched
  summary: null
  belongs_to: Mvc\RouterInterface
  description: |-
    ### abstract public **wasMatched** ()

    ...
- name: Mvc\Router\Annotations
  id: api/phalcon_mvc_router_annotations
  summary: Get rewrite info
  description: "# Class **Phalcon\\Mvc\\Router\\Annotations**\n\n*extends* class [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Mvc\\RouterInterface*](phalcon_mvc_routerinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/annotations.zep)\n\nA router that reads routes annotations from classes/resources\n\n``` php\nuse Phalcon\\Mvc\\Router\\Annotations;\n\n$di->setShared(\n    \"router\",\n    function() {\n        // Use the annotations router\n        $router = new Annotations(false);\n\n        // This will do the same as above but only if the handled uri starts with /robots\n        $router->addResource(\"Robots\", \"/robots\");\n\n        return $router;\n    }\n);\n```\n\n## Constants\n\n### *integer* **URI_SOURCE_GET_URL**\n\n### *integer* **URI_SOURCE_SERVER_REQUEST_URI**\n\n### *integer* **POSITION_FIRST**\n\n### *integer* **POSITION_LAST**\n\n## Methods\n\n### public **addResource** (*mixed* $handler, \\[*mixed* $prefix\\])\n\nAdds a resource to the annotations handler A resource is a class that contains routing annotations\n\n### public **addModuleResource** (*mixed* $module, *mixed* $handler, \\[*mixed* $prefix\\])\n\nAdds a resource to the annotations handler A resource is a class that contains routing annotations The class is located in a module\n\n### public **handle** (\\[*mixed* $uri\\])\n\nProduce the routing parameters from the rewrite information\n\n### public **processControllerAnnotation** (*mixed* $handler, [*Phalcon\\Annotations\\Annotation*](phalcon_annotations_annotation) $annotation)\n\nChecks for annotations in the controller docblock\n\n### public **processActionAnnotation** (*mixed* $module, *mixed* $namespaceName, *mixed* $controller, *mixed* $action, [*Phalcon\\Annotations\\Annotation*](phalcon_annotations_annotation) $annotation)\n\nChecks for annotations in the public methods of the controller\n\n### public **setControllerSuffix** (*mixed* $controllerSuffix)\n\nChanges the controller class suffix\n\n### public **setActionSuffix** (*mixed* $actionSuffix)\n\nChanges the action method suffix\n\n### public **getResources** ()\n\nReturn the registered resources\n\n### public **\\_\\_construct** (\\[*mixed* $defaultRoutes\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nPhalcon\\Mvc\\Router constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the internal event manager\n\n### public **getRewriteUri** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nGet rewrite info. This info is read from $\\_GET\\[“\\_url”\\]. This returns ‘/’ if the rewrite information cannot be read\n\n### public **setUriSource** (*mixed* $uriSource) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the URI source. One of the URI_SOURCE\\_\\* constants\n\n``` php\n$router->setUriSource(\n    Router::URI_SOURCE_SERVER_REQUEST_URI\n);\n```\n\n### public **removeExtraSlashes** (*mixed* $remove) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSet whether router must remove the extra slashes in the handled routes\n\n### public **setDefaultNamespace** (*mixed* $namespaceName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the name of the default namespace\n\n### public **setDefaultModule** (*mixed* $moduleName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the name of the default module\n\n### public **setDefaultController** (*mixed* $controllerName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the default controller name\n\n### public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the default action name\n\n### public **setDefaults** (*array* $defaults) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route\n\n``` php\n$router->setDefaults(\n    [\n        \"module\" => \"common\",\n        \"action\" => \"index\",\n    ]\n);\n```\n\n### public **getDefaults** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns an array of default parameters\n\n### public **add** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router without any HTTP constraint\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router->add(\"/about\", \"About::index\");\n$router->add(\"/about\", \"About::index\", [\"GET\", \"POST\"]);\n$router->add(\"/about\", \"About::index\", [\"GET\", \"POST\"], Router::POSITION_FIRST);\n```\n\n### public **addGet** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is GET\n\n### public **addPost** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is POST\n\n### public **addPut** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is PUT\n\n### public **addPatch** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is PATCH\n\n### public **addDelete** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is DELETE\n\n### public **addOptions** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdd a route to the router that only match if the HTTP method is OPTIONS\n\n### public **addHead** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is HEAD\n\n### public **addPurge** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)\n\n### public **addTrace** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is TRACE\n\n### public **addConnect** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is CONNECT\n\n### public **mount** ([*Phalcon\\Mvc\\Router\\GroupInterface*](phalcon_mvc_router_groupinterface) $group) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nMounts a group of routes in the router\n\n### public **notFound** (*mixed* $paths) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSet a group of paths to be returned when none of the defined routes are matched\n\n### public **clear** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nRemoves all the pre-defined routes\n\n### public **getNamespaceName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed namespace name\n\n### public **getModuleName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed module name\n\n### public **getControllerName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed controller name\n\n### public **getActionName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed action name\n\n### public **getParams** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed parameters\n\n### public **getMatchedRoute** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the route that matches the handled URI\n\n### public **getMatches** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the sub expressions in the regular expression matched\n\n### public **wasMatched** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nChecks if the router matches any of the defined routes\n\n### public **getRoutes** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns all the routes defined in the router\n\n### public **getRouteById** (*mixed* $id) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns a route object by its id\n\n### public **getRouteByName** (*mixed* $name) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns a route object by its name\n\n### public **isExactControllerName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns whether controller name should not be mangled\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Annotations.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Annotations.html)"
- name: Mvc\Router\Annotations::addModuleResource
  id: api/phalcon_mvc_router_annotations#addmoduleresource
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### public **addModuleResource** (*mixed* $module, *mixed* $handler, \[*mixed* $prefix\])

    Adds a resource to the annotations handler A resource is a class that contains routing annotations The class is located in a module
- name: Mvc\Router\Annotations::addResource
  id: api/phalcon_mvc_router_annotations#addresource
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### public **addResource** (*mixed* $handler, \[*mixed* $prefix\])

    Adds a resource to the annotations handler A resource is a class that contains routing annotations
- name: Mvc\Router\Annotations::getResources
  id: api/phalcon_mvc_router_annotations#getresources
  summary: Get rewrite info
  belongs_to: Mvc\Router\Annotations
  description: "### public **getResources** ()\n\nReturn the registered resources\n\n### public **\\_\\_construct** (\\[*mixed* $defaultRoutes\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nPhalcon\\Mvc\\Router constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the events manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the internal event manager\n\n### public **getRewriteUri** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nGet rewrite info. This info is read from $\\_GET\\[“\\_url”\\]. This returns ‘/’ if the rewrite information cannot be read\n\n### public **setUriSource** (*mixed* $uriSource) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the URI source. One of the URI_SOURCE\\_\\* constants\n\n``` php\n$router->setUriSource(\n    Router::URI_SOURCE_SERVER_REQUEST_URI\n);\n```\n\n### public **removeExtraSlashes** (*mixed* $remove) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSet whether router must remove the extra slashes in the handled routes\n\n### public **setDefaultNamespace** (*mixed* $namespaceName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the name of the default namespace\n\n### public **setDefaultModule** (*mixed* $moduleName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the name of the default module\n\n### public **setDefaultController** (*mixed* $controllerName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the default controller name\n\n### public **setDefaultAction** (*mixed* $actionName) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets the default action name\n\n### public **setDefaults** (*array* $defaults) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route\n\n``` php\n$router->setDefaults(\n    [\n        \"module\" => \"common\",\n        \"action\" => \"index\",\n    ]\n);\n```\n\n### public **getDefaults** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns an array of default parameters\n\n### public **add** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router without any HTTP constraint\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router->add(\"/about\", \"About::index\");\n$router->add(\"/about\", \"About::index\", [\"GET\", \"POST\"]);\n$router->add(\"/about\", \"About::index\", [\"GET\", \"POST\"], Router::POSITION_FIRST);\n```\n\n### public **addGet** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is GET\n\n### public **addPost** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is POST\n\n### public **addPut** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is PUT\n\n### public **addPatch** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is PATCH\n\n### public **addDelete** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is DELETE\n\n### public **addOptions** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdd a route to the router that only match if the HTTP method is OPTIONS\n\n### public **addHead** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is HEAD\n\n### public **addPurge** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)\n\n### public **addTrace** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is TRACE\n\n### public **addConnect** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $position\\]) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nAdds a route to the router that only match if the HTTP method is CONNECT\n\n### public **mount** ([*Phalcon\\Mvc\\Router\\GroupInterface*](phalcon_mvc_router_groupinterface) $group) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nMounts a group of routes in the router\n\n### public **notFound** (*mixed* $paths) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nSet a group of paths to be returned when none of the defined routes are matched\n\n### public **clear** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nRemoves all the pre-defined routes\n\n### public **getNamespaceName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed namespace name\n\n### public **getModuleName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed module name\n\n### public **getControllerName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed controller name\n\n### public **getActionName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed action name\n\n### public **getParams** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the processed parameters\n\n### public **getMatchedRoute** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the route that matches the handled URI\n\n### public **getMatches** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns the sub expressions in the regular expression matched\n\n### public **wasMatched** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nChecks if the router matches any of the defined routes\n\n### public **getRoutes** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns all the routes defined in the router\n\n### public **getRouteById** (*mixed* $id) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns a route object by its id\n\n### public **getRouteByName** (*mixed* $name) inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns a route object by its name\n\n### public **isExactControllerName** () inherited from [*Phalcon\\Mvc\\Router*](phalcon_mvc_router)\n\nReturns whether controller name should not be mangled\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Annotations.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Annotations.html)"
- name: Mvc\Router\Annotations::handle
  id: api/phalcon_mvc_router_annotations#handle
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### public **handle** (\[*mixed* $uri\])

    Produce the routing parameters from the rewrite information
- name: Mvc\Router\Annotations::POSITION_FIRST
  id: api/phalcon_mvc_router_annotations#position_first
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: '### *integer* **POSITION_FIRST**'
- name: Mvc\Router\Annotations::POSITION_LAST
  id: api/phalcon_mvc_router_annotations#position_last
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### *integer* **POSITION_LAST**

    ## Methods
- name: Mvc\Router\Annotations::processActionAnnotation
  id: api/phalcon_mvc_router_annotations#processactionannotation
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### public **processActionAnnotation** (*mixed* $module, *mixed* $namespaceName, *mixed* $controller, *mixed* $action, [*Phalcon\Annotations\Annotation*](phalcon_annotations_annotation) $annotation)

    Checks for annotations in the public methods of the controller
- name: Mvc\Router\Annotations::processControllerAnnotation
  id: api/phalcon_mvc_router_annotations#processcontrollerannotation
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### public **processControllerAnnotation** (*mixed* $handler, [*Phalcon\Annotations\Annotation*](phalcon_annotations_annotation) $annotation)

    Checks for annotations in the controller docblock
- name: Mvc\Router\Annotations::setActionSuffix
  id: api/phalcon_mvc_router_annotations#setactionsuffix
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### public **setActionSuffix** (*mixed* $actionSuffix)

    Changes the action method suffix
- name: Mvc\Router\Annotations::setControllerSuffix
  id: api/phalcon_mvc_router_annotations#setcontrollersuffix
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: |-
    ### public **setControllerSuffix** (*mixed* $controllerSuffix)

    Changes the controller class suffix
- name: Mvc\Router\Annotations::URI_SOURCE_GET_URL
  id: api/phalcon_mvc_router_annotations#uri_source_get_url
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: '### *integer* **URI_SOURCE_GET_URL**'
- name: Mvc\Router\Annotations::URI_SOURCE_SERVER_REQUEST_URI
  id: api/phalcon_mvc_router_annotations#uri_source_server_request_uri
  summary: null
  belongs_to: Mvc\Router\Annotations
  description: '### *integer* **URI_SOURCE_SERVER_REQUEST_URI**'
- name: Mvc\Router\Exception
  id: api/phalcon_mvc_router_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Router\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Exception.html)"
- name: Mvc\Router\Group
  id: api/phalcon_mvc_router_group
  summary: Sets a callback that is called if the route is matched
  description: "# Class **Phalcon\\Mvc\\Router\\Group**\n\n*implements* [*Phalcon\\Mvc\\Router\\GroupInterface*](phalcon_mvc_router_groupinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/group.zep)\n\nHelper class to create a group of routes with common attributes\n\n``` php\n$router = new \\Phalcon\\Mvc\\Router();\n\n//Create a group with a common module and controller\n$blog = new Group(\n    [\n        \"module\"     => \"blog\",\n        \"controller\" => \"index\",\n    ]\n);\n\n//All the routes start with /blog\n$blog->setPrefix(\"/blog\");\n\n//Add a route to the group\n$blog->add(\n    \"/save\",\n    [\n        \"action\" => \"save\",\n    ]\n);\n\n//Add another route to the group\n$blog->add(\n    \"/edit/{id}\",\n    [\n        \"action\" => \"edit\",\n    ]\n);\n\n//This route maps to a controller different than the default\n$blog->add(\n    \"/blog\",\n    [\n        \"controller\" => \"about\",\n        \"action\"     => \"index\",\n    ]\n);\n\n//Add the group to the router\n$router->mount($blog);\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[*mixed* $paths\\])\n\nPhalcon\\Mvc\\Router\\Group constructor\n\n### public **setHostname** (*mixed* $hostname)\n\nSet a hostname restriction for all the routes in the group\n\n### public **getHostname** ()\n\nReturns the hostname restriction\n\n### public **setPrefix** (*mixed* $prefix)\n\nSet a common uri prefix for all the routes in this group\n\n### public **getPrefix** ()\n\nReturns the common prefix for all the routes\n\n### public **beforeMatch** (*mixed* $beforeMatch)\n\nSets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched\n\n### public **getBeforeMatch** ()\n\nReturns the ‘before match’ callback if any\n\n### public **setPaths** (*mixed* $paths)\n\nSet common paths for all the routes in the group\n\n### public **getPaths** ()\n\nReturns the common paths defined for this group\n\n### public **getRoutes** ()\n\nReturns the routes added to the group\n\n### public **add** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\])\n\nAdds a route to the router on any HTTP method\n\n``` php\n$router->add(\"/about\", \"About::index\");\n```\n\n### public [*Phalcon\\Mvc\\Router\\Route*](phalcon_mvc_router_route) **addGet** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdds a route to the router that only match if the HTTP method is GET\n\n### public [*Phalcon\\Mvc\\Router\\Route*](phalcon_mvc_router_route) **addPost** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdds a route to the router that only match if the HTTP method is POST\n\n### public [*Phalcon\\Mvc\\Router\\Route*](phalcon_mvc_router_route) **addPut** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdds a route to the router that only match if the HTTP method is PUT\n\n### public [*Phalcon\\Mvc\\Router\\Route*](phalcon_mvc_router_route) **addPatch** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdds a route to the router that only match if the HTTP method is PATCH\n\n### public [*Phalcon\\Mvc\\Router\\Route*](phalcon_mvc_router_route) **addDelete** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdds a route to the router that only match if the HTTP method is DELETE\n\n### public [*Phalcon\\Mvc\\Router\\Route*](phalcon_mvc_router_route) **addOptions** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdd a route to the router that only match if the HTTP method is OPTIONS\n\n### public [*Phalcon\\Mvc\\Router\\Route*](phalcon_mvc_router_route) **addHead** (*string* $pattern, \\[*string/array* $paths\\])\n\nAdds a route to the router that only match if the HTTP method is HEAD\n\n### public **clear** ()\n\nRemoves all the pre-defined routes\n\n### protected **\\_addRoute** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\])\n\nAdds a route applying the common attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Group.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Group.html)"
- name: Mvc\Router\Group::add
  id: api/phalcon_mvc_router_group#add
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **add** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $httpMethods\])

    Adds a route to the router on any HTTP method

    ``` php
    $router->add("/about", "About::index");
    ```
- name: Mvc\Router\Group::addDelete
  id: api/phalcon_mvc_router_group#adddelete
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public [*Phalcon\Mvc\Router\Route*](phalcon_mvc_router_route) **addDelete** (*string* $pattern, \[*string/array* $paths\])

    Adds a route to the router that only match if the HTTP method is DELETE
- name: Mvc\Router\Group::addGet
  id: api/phalcon_mvc_router_group#addget
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public [*Phalcon\Mvc\Router\Route*](phalcon_mvc_router_route) **addGet** (*string* $pattern, \[*string/array* $paths\])

    Adds a route to the router that only match if the HTTP method is GET
- name: Mvc\Router\Group::addHead
  id: api/phalcon_mvc_router_group#addhead
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public [*Phalcon\Mvc\Router\Route*](phalcon_mvc_router_route) **addHead** (*string* $pattern, \[*string/array* $paths\])

    Adds a route to the router that only match if the HTTP method is HEAD
- name: Mvc\Router\Group::addOptions
  id: api/phalcon_mvc_router_group#addoptions
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public [*Phalcon\Mvc\Router\Route*](phalcon_mvc_router_route) **addOptions** (*string* $pattern, \[*string/array* $paths\])

    Add a route to the router that only match if the HTTP method is OPTIONS
- name: Mvc\Router\Group::addPatch
  id: api/phalcon_mvc_router_group#addpatch
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public [*Phalcon\Mvc\Router\Route*](phalcon_mvc_router_route) **addPatch** (*string* $pattern, \[*string/array* $paths\])

    Adds a route to the router that only match if the HTTP method is PATCH
- name: Mvc\Router\Group::addPost
  id: api/phalcon_mvc_router_group#addpost
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public [*Phalcon\Mvc\Router\Route*](phalcon_mvc_router_route) **addPost** (*string* $pattern, \[*string/array* $paths\])

    Adds a route to the router that only match if the HTTP method is POST
- name: Mvc\Router\Group::addPut
  id: api/phalcon_mvc_router_group#addput
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public [*Phalcon\Mvc\Router\Route*](phalcon_mvc_router_route) **addPut** (*string* $pattern, \[*string/array* $paths\])

    Adds a route to the router that only match if the HTTP method is PUT
- name: Mvc\Router\Group::beforeMatch
  id: api/phalcon_mvc_router_group#beforematch
  summary: Sets a callback that is called if the route is matched
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **beforeMatch** (*mixed* $beforeMatch)

    Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched
- name: Mvc\Router\Group::clear
  id: api/phalcon_mvc_router_group#clear
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Router\Group
  description: "### public **clear** ()\n\nRemoves all the pre-defined routes\n\n### protected **\\_addRoute** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\])\n\nAdds a route applying the common attributes\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Group.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Group.html)"
- name: Mvc\Router\Group::getBeforeMatch
  id: api/phalcon_mvc_router_group#getbeforematch
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **getBeforeMatch** ()

    Returns the ‘before match’ callback if any
- name: Mvc\Router\Group::getHostname
  id: api/phalcon_mvc_router_group#gethostname
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **getHostname** ()

    Returns the hostname restriction
- name: Mvc\Router\Group::getPaths
  id: api/phalcon_mvc_router_group#getpaths
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **getPaths** ()

    Returns the common paths defined for this group
- name: Mvc\Router\Group::getPrefix
  id: api/phalcon_mvc_router_group#getprefix
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **getPrefix** ()

    Returns the common prefix for all the routes
- name: Mvc\Router\Group::getRoutes
  id: api/phalcon_mvc_router_group#getroutes
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **getRoutes** ()

    Returns the routes added to the group
- name: Mvc\Router\Group::setHostname
  id: api/phalcon_mvc_router_group#sethostname
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **setHostname** (*mixed* $hostname)

    Set a hostname restriction for all the routes in the group
- name: Mvc\Router\Group::setPaths
  id: api/phalcon_mvc_router_group#setpaths
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **setPaths** (*mixed* $paths)

    Set common paths for all the routes in the group
- name: Mvc\Router\Group::setPrefix
  id: api/phalcon_mvc_router_group#setprefix
  summary: null
  belongs_to: Mvc\Router\Group
  description: |-
    ### public **setPrefix** (*mixed* $prefix)

    Set a common uri prefix for all the routes in this group
- name: Mvc\Router\GroupInterface
  id: api/phalcon_mvc_router_groupinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Router\\GroupInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/groupinterface.zep)\n\n## Methods\n\n### abstract public **setHostname** (*mixed* $hostname)\n\n...\n\n### abstract public **getHostname** ()\n\n...\n\n### abstract public **setPrefix** (*mixed* $prefix)\n\n...\n\n### abstract public **getPrefix** ()\n\n...\n\n### abstract public **beforeMatch** (*mixed* $beforeMatch)\n\n...\n\n### abstract public **getBeforeMatch** ()\n\n...\n\n### abstract public **setPaths** (*mixed* $paths)\n\n...\n\n### abstract public **getPaths** ()\n\n...\n\n### abstract public **getRoutes** ()\n\n...\n\n### abstract public **add** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\])\n\n...\n\n### abstract public **addGet** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addPost** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addPut** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addPatch** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addDelete** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addOptions** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **addHead** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **clear** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_GroupInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_GroupInterface.html)"
- name: Mvc\Router\GroupInterface::add
  id: api/phalcon_mvc_router_groupinterface#add
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **add** (*mixed* $pattern, \[*mixed* $paths\], \[*mixed* $httpMethods\])

    ...
- name: Mvc\Router\GroupInterface::addDelete
  id: api/phalcon_mvc_router_groupinterface#adddelete
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **addDelete** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\GroupInterface::addGet
  id: api/phalcon_mvc_router_groupinterface#addget
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **addGet** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\GroupInterface::addHead
  id: api/phalcon_mvc_router_groupinterface#addhead
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **addHead** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\GroupInterface::addOptions
  id: api/phalcon_mvc_router_groupinterface#addoptions
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **addOptions** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\GroupInterface::addPatch
  id: api/phalcon_mvc_router_groupinterface#addpatch
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **addPatch** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\GroupInterface::addPost
  id: api/phalcon_mvc_router_groupinterface#addpost
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **addPost** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\GroupInterface::addPut
  id: api/phalcon_mvc_router_groupinterface#addput
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **addPut** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\GroupInterface::beforeMatch
  id: api/phalcon_mvc_router_groupinterface#beforematch
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **beforeMatch** (*mixed* $beforeMatch)

    ...
- name: Mvc\Router\GroupInterface::clear
  id: api/phalcon_mvc_router_groupinterface#clear
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Router\GroupInterface
  description: "### abstract public **clear** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_GroupInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_GroupInterface.html)"
- name: Mvc\Router\GroupInterface::getBeforeMatch
  id: api/phalcon_mvc_router_groupinterface#getbeforematch
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **getBeforeMatch** ()

    ...
- name: Mvc\Router\GroupInterface::getHostname
  id: api/phalcon_mvc_router_groupinterface#gethostname
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **getHostname** ()

    ...
- name: Mvc\Router\GroupInterface::getPaths
  id: api/phalcon_mvc_router_groupinterface#getpaths
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **getPaths** ()

    ...
- name: Mvc\Router\GroupInterface::getPrefix
  id: api/phalcon_mvc_router_groupinterface#getprefix
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **getPrefix** ()

    ...
- name: Mvc\Router\GroupInterface::getRoutes
  id: api/phalcon_mvc_router_groupinterface#getroutes
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **getRoutes** ()

    ...
- name: Mvc\Router\GroupInterface::setHostname
  id: api/phalcon_mvc_router_groupinterface#sethostname
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **setHostname** (*mixed* $hostname)

    ...
- name: Mvc\Router\GroupInterface::setPaths
  id: api/phalcon_mvc_router_groupinterface#setpaths
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **setPaths** (*mixed* $paths)

    ...
- name: Mvc\Router\GroupInterface::setPrefix
  id: api/phalcon_mvc_router_groupinterface#setprefix
  summary: null
  belongs_to: Mvc\Router\GroupInterface
  description: |-
    ### abstract public **setPrefix** (*mixed* $prefix)

    ...
- name: Mvc\Router\Route
  id: api/phalcon_mvc_router_route
  summary: Sets a callback that is called if the route is matched
  description: "# Class **Phalcon\\Mvc\\Router\\Route**\n\n*implements* [*Phalcon\\Mvc\\Router\\RouteInterface*](phalcon_mvc_router_routeinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/route.zep)\n\nThis class represents every route added to the router\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $pattern, \\[*mixed* $paths\\], \\[*mixed* $httpMethods\\])\n\nPhalcon\\Mvc\\Router\\Route constructor\n\n### public **compilePattern** (*mixed* $pattern)\n\nReplaces placeholders from pattern returning a valid PCRE regular expression\n\n### public **via** (*mixed* $httpMethods)\n\nSet one or more HTTP methods that constraint the matching of the route\n\n``` php\n$route->via(\"GET\");\n\n$route->via(\n    [\n        \"GET\",\n        \"POST\",\n    ]\n);\n```\n\n### public **extractNamedParams** (*mixed* $pattern)\n\nExtracts parameters from a string\n\n### public **reConfigure** (*mixed* $pattern, \\[*mixed* $paths\\])\n\nReconfigure the route adding a new pattern and a set of paths\n\n### public static **getRoutePaths** (\\[*mixed* $paths\\])\n\nReturns routePaths\n\n### public **getName** ()\n\nReturns the route’s name\n\n### public **setName** (*mixed* $name)\n\nSets the route’s name\n\n``` php\n$router->add(\n    \"/about\",\n    [\n        \"controller\" => \"about\",\n    ]\n)->setName(\"about\");\n```\n\n### public **beforeMatch** (*mixed* $callback)\n\nSets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched\n\n``` php\n$router->add(\n    \"/login\",\n    [\n        \"module\"     => \"admin\",\n        \"controller\" => \"session\",\n    ]\n)->beforeMatch(\n    function ($uri, $route) {\n        // Check if the request was made with Ajax\n        if ($_SERVER[\"HTTP_X_REQUESTED_WITH\"] === \"xmlhttprequest\") {\n            return false;\n        }\n\n        return true;\n    }\n);\n```\n\n### public **getBeforeMatch** ()\n\nReturns the ‘before match’ callback if any\n\n### public **match** (*mixed* $callback)\n\nAllows to set a callback to handle the request directly in the route\n\n``` php\n$router->add(\n    \"/help\",\n    []\n)->match(\n    function () {\n        return $this->getResponse()->redirect(\"https://support.google.com/\", true);\n    }\n);\n```\n\n### public **getMatch** ()\n\nReturns the ‘match’ callback if any\n\n### public **getRouteId** ()\n\nReturns the route’s id\n\n### public **getPattern** ()\n\nReturns the route’s pattern\n\n### public **getCompiledPattern** ()\n\nReturns the route’s compiled pattern\n\n### public **getPaths** ()\n\nReturns the paths\n\n### public **getReversedPaths** ()\n\nReturns the paths using positions as keys and names as values\n\n### public **setHttpMethods** (*mixed* $httpMethods)\n\nSets a set of HTTP methods that constraint the matching of the route (alias of via)\n\n``` php\n$route->setHttpMethods(\"GET\");\n$route->setHttpMethods([\"GET\", \"POST\"]);\n```\n\n### public **getHttpMethods** ()\n\nReturns the HTTP methods that constraint matching the route\n\n### public **setHostname** (*mixed* $hostname)\n\nSets a hostname restriction to the route\n\n``` php\n$route->setHostname(\"localhost\");\n```\n\n### public **getHostname** ()\n\nReturns the hostname restriction if any\n\n### public **setGroup** ([*Phalcon\\Mvc\\Router\\GroupInterface*](phalcon_mvc_router_groupinterface) $group)\n\nSets the group associated with the route\n\n### public **getGroup** ()\n\nReturns the group associated with the route\n\n### public **convert** (*mixed* $name, *mixed* $converter)\n\nAdds a converter to perform an additional transformation for certain parameter\n\n### public **getConverters** ()\n\nReturns the router converter\n\n### public static **reset** ()\n\nResets the internal route id generator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Route.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Route.html)"
- name: Mvc\Router\Route::beforeMatch
  id: api/phalcon_mvc_router_route#beforematch
  summary: Sets a callback that is called if the route is matched
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **beforeMatch** (*mixed* $callback)

    Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched

    ``` php
    $router->add(
        "/login",
        [
            "module"     => "admin",
            "controller" => "session",
        ]
    )->beforeMatch(
        function ($uri, $route) {
            // Check if the request was made with Ajax
            if ($_SERVER["HTTP_X_REQUESTED_WITH"] === "xmlhttprequest") {
                return false;
            }

            return true;
        }
    );
    ```
- name: Mvc\Router\Route::compilePattern
  id: api/phalcon_mvc_router_route#compilepattern
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **compilePattern** (*mixed* $pattern)

    Replaces placeholders from pattern returning a valid PCRE regular expression
- name: Mvc\Router\Route::convert
  id: api/phalcon_mvc_router_route#convert
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **convert** (*mixed* $name, *mixed* $converter)

    Adds a converter to perform an additional transformation for certain parameter
- name: Mvc\Router\Route::extractNamedParams
  id: api/phalcon_mvc_router_route#extractnamedparams
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **extractNamedParams** (*mixed* $pattern)

    Extracts parameters from a string
- name: Mvc\Router\Route::getBeforeMatch
  id: api/phalcon_mvc_router_route#getbeforematch
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getBeforeMatch** ()

    Returns the ‘before match’ callback if any
- name: Mvc\Router\Route::getCompiledPattern
  id: api/phalcon_mvc_router_route#getcompiledpattern
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getCompiledPattern** ()

    Returns the route’s compiled pattern
- name: Mvc\Router\Route::getConverters
  id: api/phalcon_mvc_router_route#getconverters
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getConverters** ()

    Returns the router converter
- name: Mvc\Router\Route::getGroup
  id: api/phalcon_mvc_router_route#getgroup
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getGroup** ()

    Returns the group associated with the route
- name: Mvc\Router\Route::getHostname
  id: api/phalcon_mvc_router_route#gethostname
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getHostname** ()

    Returns the hostname restriction if any
- name: Mvc\Router\Route::getHttpMethods
  id: api/phalcon_mvc_router_route#gethttpmethods
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getHttpMethods** ()

    Returns the HTTP methods that constraint matching the route
- name: Mvc\Router\Route::getMatch
  id: api/phalcon_mvc_router_route#getmatch
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getMatch** ()

    Returns the ‘match’ callback if any
- name: Mvc\Router\Route::getName
  id: api/phalcon_mvc_router_route#getname
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getName** ()

    Returns the route’s name
- name: Mvc\Router\Route::getPaths
  id: api/phalcon_mvc_router_route#getpaths
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getPaths** ()

    Returns the paths
- name: Mvc\Router\Route::getPattern
  id: api/phalcon_mvc_router_route#getpattern
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getPattern** ()

    Returns the route’s pattern
- name: Mvc\Router\Route::getReversedPaths
  id: api/phalcon_mvc_router_route#getreversedpaths
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getReversedPaths** ()

    Returns the paths using positions as keys and names as values
- name: Mvc\Router\Route::getRouteId
  id: api/phalcon_mvc_router_route#getrouteid
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **getRouteId** ()

    Returns the route’s id
- name: Mvc\Router\Route::getRoutePaths
  id: api/phalcon_mvc_router_route#getroutepaths
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public static **getRoutePaths** (\[*mixed* $paths\])

    Returns routePaths
- name: Mvc\Router\Route::match
  id: api/phalcon_mvc_router_route#match
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **match** (*mixed* $callback)

    Allows to set a callback to handle the request directly in the route

    ``` php
    $router->add(
        "/help",
        []
    )->match(
        function () {
            return $this->getResponse()->redirect("https://support.google.com/", true);
        }
    );
    ```
- name: Mvc\Router\Route::reConfigure
  id: api/phalcon_mvc_router_route#reconfigure
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **reConfigure** (*mixed* $pattern, \[*mixed* $paths\])

    Reconfigure the route adding a new pattern and a set of paths
- name: Mvc\Router\Route::reset
  id: api/phalcon_mvc_router_route#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Router\Route
  description: "### public static **reset** ()\n\nResets the internal route id generator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Route.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Route.html)"
- name: Mvc\Router\Route::setGroup
  id: api/phalcon_mvc_router_route#setgroup
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **setGroup** ([*Phalcon\Mvc\Router\GroupInterface*](phalcon_mvc_router_groupinterface) $group)

    Sets the group associated with the route
- name: Mvc\Router\Route::setHostname
  id: api/phalcon_mvc_router_route#sethostname
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **setHostname** (*mixed* $hostname)

    Sets a hostname restriction to the route

    ``` php
    $route->setHostname("localhost");
    ```
- name: Mvc\Router\Route::setHttpMethods
  id: api/phalcon_mvc_router_route#sethttpmethods
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **setHttpMethods** (*mixed* $httpMethods)

    Sets a set of HTTP methods that constraint the matching of the route (alias of via)

    ``` php
    $route->setHttpMethods("GET");
    $route->setHttpMethods(["GET", "POST"]);
    ```
- name: Mvc\Router\Route::setName
  id: api/phalcon_mvc_router_route#setname
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **setName** (*mixed* $name)

    Sets the route’s name

    ``` php
    $router->add(
        "/about",
        [
            "controller" => "about",
        ]
    )->setName("about");
    ```
- name: Mvc\Router\Route::via
  id: api/phalcon_mvc_router_route#via
  summary: null
  belongs_to: Mvc\Router\Route
  description: |-
    ### public **via** (*mixed* $httpMethods)

    Set one or more HTTP methods that constraint the matching of the route

    ``` php
    $route->via("GET");

    $route->via(
        [
            "GET",
            "POST",
        ]
    );
    ```
- name: Mvc\Router\RouteInterface
  id: api/phalcon_mvc_router_routeinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\Router\\RouteInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/routeinterface.zep)\n\n## Methods\n\n### abstract public **setHostname** (*mixed* $hostname)\n\n...\n\n### abstract public **getHostname** ()\n\n...\n\n### abstract public **compilePattern** (*mixed* $pattern)\n\n...\n\n### abstract public **via** (*mixed* $httpMethods)\n\n...\n\n### abstract public **reConfigure** (*mixed* $pattern, \\[*mixed* $paths\\])\n\n...\n\n### abstract public **getName** ()\n\n...\n\n### abstract public **setName** (*mixed* $name)\n\n...\n\n### abstract public **setHttpMethods** (*mixed* $httpMethods)\n\n...\n\n### abstract public **getRouteId** ()\n\n...\n\n### abstract public **getPattern** ()\n\n...\n\n### abstract public **getCompiledPattern** ()\n\n...\n\n### abstract public **getPaths** ()\n\n...\n\n### abstract public **getReversedPaths** ()\n\n...\n\n### abstract public **getHttpMethods** ()\n\n...\n\n### abstract public static **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_RouteInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_RouteInterface.html)"
- name: Mvc\Router\RouteInterface::compilePattern
  id: api/phalcon_mvc_router_routeinterface#compilepattern
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **compilePattern** (*mixed* $pattern)

    ...
- name: Mvc\Router\RouteInterface::getCompiledPattern
  id: api/phalcon_mvc_router_routeinterface#getcompiledpattern
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getCompiledPattern** ()

    ...
- name: Mvc\Router\RouteInterface::getHostname
  id: api/phalcon_mvc_router_routeinterface#gethostname
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getHostname** ()

    ...
- name: Mvc\Router\RouteInterface::getHttpMethods
  id: api/phalcon_mvc_router_routeinterface#gethttpmethods
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getHttpMethods** ()

    ...
- name: Mvc\Router\RouteInterface::getName
  id: api/phalcon_mvc_router_routeinterface#getname
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getName** ()

    ...
- name: Mvc\Router\RouteInterface::getPaths
  id: api/phalcon_mvc_router_routeinterface#getpaths
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getPaths** ()

    ...
- name: Mvc\Router\RouteInterface::getPattern
  id: api/phalcon_mvc_router_routeinterface#getpattern
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getPattern** ()

    ...
- name: Mvc\Router\RouteInterface::getReversedPaths
  id: api/phalcon_mvc_router_routeinterface#getreversedpaths
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getReversedPaths** ()

    ...
- name: Mvc\Router\RouteInterface::getRouteId
  id: api/phalcon_mvc_router_routeinterface#getrouteid
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **getRouteId** ()

    ...
- name: Mvc\Router\RouteInterface::reConfigure
  id: api/phalcon_mvc_router_routeinterface#reconfigure
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **reConfigure** (*mixed* $pattern, \[*mixed* $paths\])

    ...
- name: Mvc\Router\RouteInterface::reset
  id: api/phalcon_mvc_router_routeinterface#reset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Router\RouteInterface
  description: "### abstract public static **reset** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_RouteInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_RouteInterface.html)"
- name: Mvc\Router\RouteInterface::setHostname
  id: api/phalcon_mvc_router_routeinterface#sethostname
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **setHostname** (*mixed* $hostname)

    ...
- name: Mvc\Router\RouteInterface::setHttpMethods
  id: api/phalcon_mvc_router_routeinterface#sethttpmethods
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **setHttpMethods** (*mixed* $httpMethods)

    ...
- name: Mvc\Router\RouteInterface::setName
  id: api/phalcon_mvc_router_routeinterface#setname
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **setName** (*mixed* $name)

    ...
- name: Mvc\Router\RouteInterface::via
  id: api/phalcon_mvc_router_routeinterface#via
  summary: null
  belongs_to: Mvc\Router\RouteInterface
  description: |-
    ### abstract public **via** (*mixed* $httpMethods)

    ...
- name: Mvc\Url
  id: api/phalcon_mvc_url
  summary: Returns the prefix for all the generated urls
  description: "# Class **Phalcon\\Mvc\\Url**\n\n*implements* [*Phalcon\\Mvc\\UrlInterface*](phalcon_mvc_urlinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/url.zep)\n\nThis components helps in the generation of: URIs, URLs and Paths\n\n``` php\n// Generate a URL appending the URI to the base URI\necho $url->get(\"products/edit/1\");\n\n// Generate a URL for a predefined route\necho $url->get(\n    [\n        \"for\"   => \"blog-post\",\n        \"title\" => \"some-cool-stuff\",\n        \"year\"  => \"2012\",\n    ]\n);\n```\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public **getDI** ()\n\nReturns the DependencyInjector container\n\n### public **setBaseUri** (*mixed* $baseUri)\n\nSets a prefix for all the URIs to be generated\n\n``` php\n$url->setBaseUri(\"/invo/\");\n\n$url->setBaseUri(\"/invo/index.php/\");\n```\n\n### public **setStaticBaseUri** (*mixed* $staticBaseUri)\n\nSets a prefix for all static URLs generated\n\n``` php\n$url->setStaticBaseUri(\"/invo/\");\n```\n\n### public **getBaseUri** ()\n\nReturns the prefix for all the generated urls. By default /\n\n### public **getStaticBaseUri** ()\n\nReturns the prefix for all the generated static urls. By default /\n\n### public **setBasePath** (*mixed* $basePath)\n\nSets a base path for all the generated paths\n\n``` php\n$url->setBasePath(\"/var/www/htdocs/\");\n```\n\n### public **getBasePath** ()\n\nReturns the base path\n\n### public **get** (\\[*mixed* $uri\\], \\[*mixed* $args\\], \\[*mixed* $local\\], \\[*mixed* $baseUri\\])\n\nGenerates a URL\n\n``` php\n// Generate a URL appending the URI to the base URI\necho $url->get(\"products/edit/1\");\n\n// Generate a URL for a predefined route\necho $url->get(\n    [\n        \"for\"   => \"blog-post\",\n        \"title\" => \"some-cool-stuff\",\n        \"year\"  => \"2015\",\n    ]\n);\n\n// Generate a URL with GET arguments (/show/products?id=1&name=Carrots)\necho $url->get(\n    \"show/products\",\n    [\n        \"id\"   => 1,\n        \"name\" => \"Carrots\",\n    ]\n);\n\n// Generate an absolute URL by setting the third parameter as false.\necho $url->get(\n    \"https://phalconphp.com/\",\n    null,\n    false\n);\n```\n\n### public **getStatic** (\\[*mixed* $uri\\])\n\nGenerates a URL for a static resource\n\n``` php\n// Generate a URL for a static resource\necho $url->getStatic(\"img/logo.png\");\n\n// Generate a URL for a static predefined route\necho $url->getStatic(\n    [\n        \"for\" => \"logo-cdn\",\n    ]\n);\n```\n\n### public **path** (\\[*mixed* $path\\])\n\nGenerates a local path\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url.html)"
- name: Mvc\Url::get
  id: api/phalcon_mvc_url#get
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **get** (\[*mixed* $uri\], \[*mixed* $args\], \[*mixed* $local\], \[*mixed* $baseUri\])

    Generates a URL

    ``` php
    // Generate a URL appending the URI to the base URI
    echo $url->get("products/edit/1");

    // Generate a URL for a predefined route
    echo $url->get(
        [
            "for"   => "blog-post",
            "title" => "some-cool-stuff",
            "year"  => "2015",
        ]
    );

    // Generate a URL with GET arguments (/show/products?id=1&name=Carrots)
    echo $url->get(
        "show/products",
        [
            "id"   => 1,
            "name" => "Carrots",
        ]
    );

    // Generate an absolute URL by setting the third parameter as false.
    echo $url->get(
        "https://phalconphp.com/",
        null,
        false
    );
    ```
- name: Mvc\Url::getBasePath
  id: api/phalcon_mvc_url#getbasepath
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **getBasePath** ()

    Returns the base path
- name: Mvc\Url::getBaseUri
  id: api/phalcon_mvc_url#getbaseuri
  summary: Returns the prefix for all the generated urls
  belongs_to: Mvc\Url
  description: |-
    ### public **getBaseUri** ()

    Returns the prefix for all the generated urls. By default /
- name: Mvc\Url::getDI
  id: api/phalcon_mvc_url#getdi
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **getDI** ()

    Returns the DependencyInjector container
- name: Mvc\Url::getStatic
  id: api/phalcon_mvc_url#getstatic
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **getStatic** (\[*mixed* $uri\])

    Generates a URL for a static resource

    ``` php
    // Generate a URL for a static resource
    echo $url->getStatic("img/logo.png");

    // Generate a URL for a static predefined route
    echo $url->getStatic(
        [
            "for" => "logo-cdn",
        ]
    );
    ```
- name: Mvc\Url::getStaticBaseUri
  id: api/phalcon_mvc_url#getstaticbaseuri
  summary: Returns the prefix for all the generated static urls
  belongs_to: Mvc\Url
  description: |-
    ### public **getStaticBaseUri** ()

    Returns the prefix for all the generated static urls. By default /
- name: Mvc\Url::path
  id: api/phalcon_mvc_url#path
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\Url
  description: "### public **path** (\\[*mixed* $path\\])\n\nGenerates a local path\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url.html)"
- name: Mvc\Url::setBasePath
  id: api/phalcon_mvc_url#setbasepath
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **setBasePath** (*mixed* $basePath)

    Sets a base path for all the generated paths

    ``` php
    $url->setBasePath("/var/www/htdocs/");
    ```
- name: Mvc\Url::setBaseUri
  id: api/phalcon_mvc_url#setbaseuri
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **setBaseUri** (*mixed* $baseUri)

    Sets a prefix for all the URIs to be generated

    ``` php
    $url->setBaseUri("/invo/");

    $url->setBaseUri("/invo/index.php/");
    ```
- name: Mvc\Url::setDI
  id: api/phalcon_mvc_url#setdi
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Mvc\Url::setStaticBaseUri
  id: api/phalcon_mvc_url#setstaticbaseuri
  summary: null
  belongs_to: Mvc\Url
  description: |-
    ### public **setStaticBaseUri** (*mixed* $staticBaseUri)

    Sets a prefix for all static URLs generated

    ``` php
    $url->setStaticBaseUri("/invo/");
    ```
- name: Mvc\UrlInterface
  id: api/phalcon_mvc_urlinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\UrlInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/urlinterface.zep)\n\n## Methods\n\n### abstract public **setBaseUri** (*mixed* $baseUri)\n\n...\n\n### abstract public **getBaseUri** ()\n\n...\n\n### abstract public **setBasePath** (*mixed* $basePath)\n\n...\n\n### abstract public **getBasePath** ()\n\n...\n\n### abstract public **get** (\\[*mixed* $uri\\], \\[*mixed* $args\\], \\[*mixed* $local\\])\n\n...\n\n### abstract public **path** (\\[*mixed* $path\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_UrlInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_UrlInterface.html)"
- name: Mvc\UrlInterface::get
  id: api/phalcon_mvc_urlinterface#get
  summary: null
  belongs_to: Mvc\UrlInterface
  description: |-
    ### abstract public **get** (\[*mixed* $uri\], \[*mixed* $args\], \[*mixed* $local\])

    ...
- name: Mvc\UrlInterface::getBasePath
  id: api/phalcon_mvc_urlinterface#getbasepath
  summary: null
  belongs_to: Mvc\UrlInterface
  description: |-
    ### abstract public **getBasePath** ()

    ...
- name: Mvc\UrlInterface::getBaseUri
  id: api/phalcon_mvc_urlinterface#getbaseuri
  summary: null
  belongs_to: Mvc\UrlInterface
  description: |-
    ### abstract public **getBaseUri** ()

    ...
- name: Mvc\UrlInterface::path
  id: api/phalcon_mvc_urlinterface#path
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\UrlInterface
  description: "### abstract public **path** (\\[*mixed* $path\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_UrlInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_UrlInterface.html)"
- name: Mvc\UrlInterface::setBasePath
  id: api/phalcon_mvc_urlinterface#setbasepath
  summary: null
  belongs_to: Mvc\UrlInterface
  description: |-
    ### abstract public **setBasePath** (*mixed* $basePath)

    ...
- name: Mvc\UrlInterface::setBaseUri
  id: api/phalcon_mvc_urlinterface#setbaseuri
  summary: null
  belongs_to: Mvc\UrlInterface
  description: |-
    ### abstract public **setBaseUri** (*mixed* $baseUri)

    ...
- name: Mvc\Url\Exception
  id: api/phalcon_mvc_url_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\Url\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/url/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url_Exception.html)"
- name: Mvc\User\Component
  id: api/phalcon_mvc_user_component
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\User\\Component**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/user/component.zep)\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Component.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Component.html)"
- name: Mvc\User\Module
  id: api/phalcon_mvc_user_module
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\User\\Module**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/user/module.zep)\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Module.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Module.html)"
- name: Mvc\User\Plugin
  id: api/phalcon_mvc_user_plugin
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\User\\Plugin**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/user/plugin.zep)\n\n## Methods\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Plugin.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Plugin.html)"
- name: Mvc\View
  id: api/phalcon_mvc_view
  summary: Phalcon\Mvc\View is a class for working with the “view” portion of the model-view-controller pattern
  description: "# Class **Phalcon\\Mvc\\View**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Mvc\\ViewInterface*](phalcon_mvc_viewinterface), [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view.zep)\n\nPhalcon\\Mvc\\View is a class for working with the “view” portion of the model-view-controller pattern. That is, it exists to help keep the view script separate from the model and controller scripts. It provides a system of helpers, output filters, and variable escaping.\n\n``` php\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\n// Setting views directory\n$view->setViewsDir(\"app/views/\");\n\n$view->start();\n\n// Shows recent posts view (app/views/posts/recent.phtml)\n$view->render(\"posts\", \"recent\");\n$view->finish();\n\n// Printing views output\necho $view->getContent();\n```\n\n## Constants\n\n### *integer* **LEVEL_MAIN_LAYOUT**\n\n### *integer* **LEVEL_AFTER_TEMPLATE**\n\n### *integer* **LEVEL_LAYOUT**\n\n### *integer* **LEVEL_BEFORE_TEMPLATE**\n\n### *integer* **LEVEL_ACTION_VIEW**\n\n### *integer* **LEVEL_NO_RENDER**\n\n### *integer* **CACHE_MODE_NONE**\n\n### *integer* **CACHE_MODE_INVERSE**\n\n## Methods\n\n### public **getRenderLevel** ()\n\n...\n\n### public **getCurrentRenderLevel** ()\n\n...\n\n### public **getRegisteredEngines** ()\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\View constructor\n\n### final protected **\\_isAbsolutePath** (*mixed* $path)\n\nChecks if a path is absolute or not\n\n### public **setViewsDir** (*mixed* $viewsDir)\n\nSets the views directory. Depending of your platform, always add a trailing slash or backslash\n\n### public **getViewsDir** ()\n\nGets views directory\n\n### public **setLayoutsDir** (*mixed* $layoutsDir)\n\nSets the layouts sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash\n\n``` php\n$view->setLayoutsDir(\"../common/layouts/\");\n```\n\n### public **getLayoutsDir** ()\n\nGets the current layouts sub-directory\n\n### public **setPartialsDir** (*mixed* $partialsDir)\n\nSets a partials sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash\n\n``` php\n$view->setPartialsDir(\"../common/partials/\");\n```\n\n### public **getPartialsDir** ()\n\nGets the current partials sub-directory\n\n### public **setBasePath** (*mixed* $basePath)\n\nSets base path. Depending of your platform, always add a trailing slash or backslash\n\n``` php\n$view->setBasePath(__DIR__ . \"/\");\n```\n\n### public **getBasePath** ()\n\nGets base path\n\n### public **setRenderLevel** (*mixed* $level)\n\nSets the render level for the view\n\n``` php\n// Render the view related to the controller only\n$this->view->setRenderLevel(\n    View::LEVEL_LAYOUT\n);\n```\n\n### public **disableLevel** (*mixed* $level)\n\nDisables a specific level of rendering\n\n``` php\n// Render all levels except ACTION level\n$this->view->disableLevel(\n    View::LEVEL_ACTION_VIEW\n);\n```\n\n### public **setMainView** (*mixed* $viewPath)\n\nSets default view name. Must be a file without extension in the views directory\n\n``` php\n// Renders as main view views-dir/base.phtml\n$this->view->setMainView(\"base\");\n```\n\n### public **getMainView** ()\n\nReturns the name of the main view\n\n### public **setLayout** (*mixed* $layout)\n\nChange the layout to be used instead of using the name of the latest controller name\n\n``` php\n$this->view->setLayout(\"main\");\n```\n\n### public **getLayout** ()\n\nReturns the name of the main view\n\n### public **setTemplateBefore** (*mixed* $templateBefore)\n\nSets a template before the controller layout\n\n### public **cleanTemplateBefore** ()\n\nResets any “template before” layouts\n\n### public **setTemplateAfter** (*mixed* $templateAfter)\n\nSets a “template after” controller layout\n\n### public **cleanTemplateAfter** ()\n\nResets any template before layouts\n\n### public **setParamToView** (*mixed* $key, *mixed* $value)\n\nAdds parameters to views (alias of setVar)\n\n``` php\n$this->view->setParamToView(\"products\", $products);\n```\n\n### public **setVars** (*array* $params, \\[*mixed* $merge\\])\n\nSet all the render params\n\n``` php\n$this->view->setVars(\n    [\n        \"products\" => $products,\n    ]\n);\n```\n\n### public **setVar** (*mixed* $key, *mixed* $value)\n\nSet a single view parameter\n\n``` php\n$this->view->setVar(\"products\", $products);\n```\n\n### public **getVar** (*mixed* $key)\n\nReturns a parameter previously set in the view\n\n### public **getParamsToView** ()\n\nReturns parameters to views\n\n### public **getControllerName** ()\n\nGets the name of the controller rendered\n\n### public **getActionName** ()\n\nGets the name of the action rendered\n\n### public **getParams** ()\n\nGets extra parameters of the action rendered\n\n### public **start** ()\n\nStarts rendering process enabling the output buffering\n\n### protected **\\_loadTemplateEngines** ()\n\nLoads registered template engines, if none is registered it will use Phalcon\\Mvc\\View\\Engine\\Php\n\n### protected **\\_engineRender** (*array* $engines, *string* $viewPath, *boolean* $silence, *boolean* $mustClean, \\[[*Phalcon\\Cache\\BackendInterface*](phalcon_cache_backendinterface) $cache\\])\n\nChecks whether view exists on registered extensions and render it\n\n### public **registerEngines** (*array* $engines)\n\nRegister templating engines\n\n``` php\n$this->view->registerEngines(\n    [\n        \".phtml\" => \"Phalcon\\\\Mvc\\\\View\\\\Engine\\\\Php\",\n        \".volt\"  => \"Phalcon\\\\Mvc\\\\View\\\\Engine\\\\Volt\",\n        \".mhtml\" => \"MyCustomEngine\",\n    ]\n);\n```\n\n### public **exists** (*mixed* $view)\n\nChecks whether view exists\n\n### public **render** (*string* $controllerName, *string* $actionName, \\[*array* $params\\])\n\nExecutes render process from dispatching data\n\n``` php\n// Shows recent posts view (app/views/posts/recent.phtml)\n$view->start()->render(\"posts\", \"recent\")->finish();\n```\n\n### public **pick** (*mixed* $renderView)\n\nChoose a different view to render instead of last-controller/last-action\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n   public function saveAction()\n   {\n        // Do some save stuff...\n\n        // Then show the list view\n        $this->view->pick(\"products/list\");\n   }\n}\n```\n\n### public **getPartial** (*mixed* $partialPath, \\[*mixed* $params\\])\n\nRenders a partial view\n\n``` php\n// Retrieve the contents of a partial\necho $this->getPartial(\"shared/footer\");\n```\n\n``` php\n// Retrieve the contents of a partial with arguments\necho $this->getPartial(\n    \"shared/footer\",\n    [\n        \"content\" => $html,\n    ]\n);\n```\n\n### public **partial** (*mixed* $partialPath, \\[*mixed* $params\\])\n\nRenders a partial view\n\n``` php\n// Show a partial inside another view\n$this->partial(\"shared/footer\");\n```\n\n``` php\n// Show a partial inside another view with parameters\n$this->partial(\n    \"shared/footer\",\n    [\n        \"content\" => $html,\n    ]\n);\n```\n\n### public *string* **getRender** (*string* $controllerName, *string* $actionName, \\[*array* $params\\], \\[*mixed* $configCallback\\])\n\nPerform the automatic rendering returning the output as a string\n\n``` php\n$template = $this->view->getRender(\n    \"products\",\n    \"show\",\n    [\n        \"products\" => $products,\n    ]\n);\n```\n\n### public **finish** ()\n\nFinishes the render process by stopping the output buffering\n\n### protected **\\_createCache** ()\n\nCreate a Phalcon\\Cache based on the internal cache options\n\n### public **isCaching** ()\n\nCheck if the component is currently caching the output content\n\n### public **getCache** ()\n\nReturns the cache instance used to cache\n\n### public **cache** (\\[*mixed* $options\\])\n\nCache the actual view render to certain level\n\n``` php\n$this->view->cache(\n    [\n        \"key\"      => \"my-key\",\n        \"lifetime\" => 86400,\n    ]\n);\n```\n\n### public **setContent** (*mixed* $content)\n\nExternally sets the view content\n\n``` php\n$this->view->setContent(\"<h1>hello</h1>\");\n```\n\n### public **getContent** ()\n\nReturns cached output from another view stage\n\n### public **getActiveRenderPath** ()\n\nReturns the path (or paths) of the views that are currently rendered\n\n### public **disable** ()\n\nDisables the auto-rendering process\n\n### public **enable** ()\n\nEnables the auto-rendering process\n\n### public **reset** ()\n\nResets the view component to its factory default values\n\n### public **\\_\\_set** (*mixed* $key, *mixed* $value)\n\nMagic method to pass variables to the views\n\n``` php\n$this->view->products = $products;\n```\n\n### public **\\_\\_get** (*mixed* $key)\n\nMagic method to retrieve a variable passed to the view\n\n``` php\necho $this->view->products;\n```\n\n### public **isDisabled** ()\n\nWhether automatic rendering is enabled\n\n### public **\\_\\_isset** (*mixed* $key)\n\nMagic method to retrieve if a variable is set in the view\n\n``` php\necho isset($this->view->products);\n```\n\n### protected **getViewsDirs** ()\n\nGets views directories\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View.html)"
- name: Mvc\View::cache
  id: api/phalcon_mvc_view#cache
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **cache** (\[*mixed* $options\])

    Cache the actual view render to certain level

    ``` php
    $this->view->cache(
        [
            "key"      => "my-key",
            "lifetime" => 86400,
        ]
    );
    ```
- name: Mvc\View::CACHE_MODE_INVERSE
  id: api/phalcon_mvc_view#cache_mode_inverse
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### *integer* **CACHE_MODE_INVERSE**

    ## Methods
- name: Mvc\View::CACHE_MODE_NONE
  id: api/phalcon_mvc_view#cache_mode_none
  summary: null
  belongs_to: Mvc\View
  description: '### *integer* **CACHE_MODE_NONE**'
- name: Mvc\View::cleanTemplateAfter
  id: api/phalcon_mvc_view#cleantemplateafter
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **cleanTemplateAfter** ()

    Resets any template before layouts
- name: Mvc\View::cleanTemplateBefore
  id: api/phalcon_mvc_view#cleantemplatebefore
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **cleanTemplateBefore** ()

    Resets any “template before” layouts
- name: Mvc\View::disable
  id: api/phalcon_mvc_view#disable
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **disable** ()

    Disables the auto-rendering process
- name: Mvc\View::disableLevel
  id: api/phalcon_mvc_view#disablelevel
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **disableLevel** (*mixed* $level)

    Disables a specific level of rendering

    ``` php
    // Render all levels except ACTION level
    $this->view->disableLevel(
        View::LEVEL_ACTION_VIEW
    );
    ```
- name: Mvc\View::enable
  id: api/phalcon_mvc_view#enable
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **enable** ()

    Enables the auto-rendering process
- name: Mvc\View::exists
  id: api/phalcon_mvc_view#exists
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **exists** (*mixed* $view)

    Checks whether view exists
- name: Mvc\View::finish
  id: api/phalcon_mvc_view#finish
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **finish** ()

    Finishes the render process by stopping the output buffering

    ### protected **\_createCache** ()

    Create a Phalcon\Cache based on the internal cache options
- name: Mvc\View::getActionName
  id: api/phalcon_mvc_view#getactionname
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getActionName** ()

    Gets the name of the action rendered
- name: Mvc\View::getActiveRenderPath
  id: api/phalcon_mvc_view#getactiverenderpath
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getActiveRenderPath** ()

    Returns the path (or paths) of the views that are currently rendered
- name: Mvc\View::getBasePath
  id: api/phalcon_mvc_view#getbasepath
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getBasePath** ()

    Gets base path
- name: Mvc\View::getCache
  id: api/phalcon_mvc_view#getcache
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getCache** ()

    Returns the cache instance used to cache
- name: Mvc\View::getContent
  id: api/phalcon_mvc_view#getcontent
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getContent** ()

    Returns cached output from another view stage
- name: Mvc\View::getControllerName
  id: api/phalcon_mvc_view#getcontrollername
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getControllerName** ()

    Gets the name of the controller rendered
- name: Mvc\View::getCurrentRenderLevel
  id: api/phalcon_mvc_view#getcurrentrenderlevel
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getCurrentRenderLevel** ()

    ...
- name: Mvc\View::getLayout
  id: api/phalcon_mvc_view#getlayout
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getLayout** ()

    Returns the name of the main view
- name: Mvc\View::getLayoutsDir
  id: api/phalcon_mvc_view#getlayoutsdir
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getLayoutsDir** ()

    Gets the current layouts sub-directory
- name: Mvc\View::getMainView
  id: api/phalcon_mvc_view#getmainview
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getMainView** ()

    Returns the name of the main view
- name: Mvc\View::getParams
  id: api/phalcon_mvc_view#getparams
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getParams** ()

    Gets extra parameters of the action rendered
- name: Mvc\View::getParamsToView
  id: api/phalcon_mvc_view#getparamstoview
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getParamsToView** ()

    Returns parameters to views
- name: Mvc\View::getPartial
  id: api/phalcon_mvc_view#getpartial
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getPartial** (*mixed* $partialPath, \[*mixed* $params\])

    Renders a partial view

    ``` php
    // Retrieve the contents of a partial
    echo $this->getPartial("shared/footer");
    ```

    ``` php
    // Retrieve the contents of a partial with arguments
    echo $this->getPartial(
        "shared/footer",
        [
            "content" => $html,
        ]
    );
    ```
- name: Mvc\View::getPartialsDir
  id: api/phalcon_mvc_view#getpartialsdir
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getPartialsDir** ()

    Gets the current partials sub-directory
- name: Mvc\View::getRegisteredEngines
  id: api/phalcon_mvc_view#getregisteredengines
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getRegisteredEngines** ()

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\View constructor

    ### final protected **\_isAbsolutePath** (*mixed* $path)

    Checks if a path is absolute or not
- name: Mvc\View::getRender
  id: api/phalcon_mvc_view#getrender
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public *string* **getRender** (*string* $controllerName, *string* $actionName, \[*array* $params\], \[*mixed* $configCallback\])

    Perform the automatic rendering returning the output as a string

    ``` php
    $template = $this->view->getRender(
        "products",
        "show",
        [
            "products" => $products,
        ]
    );
    ```
- name: Mvc\View::getRenderLevel
  id: api/phalcon_mvc_view#getrenderlevel
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getRenderLevel** ()

    ...
- name: Mvc\View::getVar
  id: api/phalcon_mvc_view#getvar
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getVar** (*mixed* $key)

    Returns a parameter previously set in the view
- name: Mvc\View::getViewsDir
  id: api/phalcon_mvc_view#getviewsdir
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **getViewsDir** ()

    Gets views directory
- name: Mvc\View::isCaching
  id: api/phalcon_mvc_view#iscaching
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **isCaching** ()

    Check if the component is currently caching the output content
- name: Mvc\View::isDisabled
  id: api/phalcon_mvc_view#isdisabled
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **isDisabled** ()

    Whether automatic rendering is enabled
- name: Mvc\View::LEVEL_ACTION_VIEW
  id: api/phalcon_mvc_view#level_action_view
  summary: null
  belongs_to: Mvc\View
  description: '### *integer* **LEVEL_ACTION_VIEW**'
- name: Mvc\View::LEVEL_AFTER_TEMPLATE
  id: api/phalcon_mvc_view#level_after_template
  summary: null
  belongs_to: Mvc\View
  description: '### *integer* **LEVEL_AFTER_TEMPLATE**'
- name: Mvc\View::LEVEL_BEFORE_TEMPLATE
  id: api/phalcon_mvc_view#level_before_template
  summary: null
  belongs_to: Mvc\View
  description: '### *integer* **LEVEL_BEFORE_TEMPLATE**'
- name: Mvc\View::LEVEL_LAYOUT
  id: api/phalcon_mvc_view#level_layout
  summary: null
  belongs_to: Mvc\View
  description: '### *integer* **LEVEL_LAYOUT**'
- name: Mvc\View::LEVEL_MAIN_LAYOUT
  id: api/phalcon_mvc_view#level_main_layout
  summary: null
  belongs_to: Mvc\View
  description: '### *integer* **LEVEL_MAIN_LAYOUT**'
- name: Mvc\View::LEVEL_NO_RENDER
  id: api/phalcon_mvc_view#level_no_render
  summary: null
  belongs_to: Mvc\View
  description: '### *integer* **LEVEL_NO_RENDER**'
- name: Mvc\View::partial
  id: api/phalcon_mvc_view#partial
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **partial** (*mixed* $partialPath, \[*mixed* $params\])

    Renders a partial view

    ``` php
    // Show a partial inside another view
    $this->partial("shared/footer");
    ```

    ``` php
    // Show a partial inside another view with parameters
    $this->partial(
        "shared/footer",
        [
            "content" => $html,
        ]
    );
    ```
- name: Mvc\View::pick
  id: api/phalcon_mvc_view#pick
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **pick** (*mixed* $renderView)

    Choose a different view to render instead of last-controller/last-action

    ``` php
    use Phalcon\Mvc\Controller;

    class ProductsController extends Controller
    {
       public function saveAction()
       {
            // Do some save stuff...

            // Then show the list view
            $this->view->pick("products/list");
       }
    }
    ```
- name: Mvc\View::registerEngines
  id: api/phalcon_mvc_view#registerengines
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **registerEngines** (*array* $engines)

    Register templating engines

    ``` php
    $this->view->registerEngines(
        [
            ".phtml" => "Phalcon\\Mvc\\View\\Engine\\Php",
            ".volt"  => "Phalcon\\Mvc\\View\\Engine\\Volt",
            ".mhtml" => "MyCustomEngine",
        ]
    );
    ```
- name: Mvc\View::render
  id: api/phalcon_mvc_view#render
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **render** (*string* $controllerName, *string* $actionName, \[*array* $params\])

    Executes render process from dispatching data

    ``` php
    // Shows recent posts view (app/views/posts/recent.phtml)
    $view->start()->render("posts", "recent")->finish();
    ```
- name: Mvc\View::reset
  id: api/phalcon_mvc_view#reset
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **reset** ()

    Resets the view component to its factory default values
- name: Mvc\View::setBasePath
  id: api/phalcon_mvc_view#setbasepath
  summary: Sets base path
  belongs_to: Mvc\View
  description: |-
    ### public **setBasePath** (*mixed* $basePath)

    Sets base path. Depending of your platform, always add a trailing slash or backslash

    ``` php
    $view->setBasePath(__DIR__ . "/");
    ```
- name: Mvc\View::setContent
  id: api/phalcon_mvc_view#setcontent
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setContent** (*mixed* $content)

    Externally sets the view content

    ``` php
    $this->view->setContent("<h1>hello</h1>");
    ```
- name: Mvc\View::setLayout
  id: api/phalcon_mvc_view#setlayout
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setLayout** (*mixed* $layout)

    Change the layout to be used instead of using the name of the latest controller name

    ``` php
    $this->view->setLayout("main");
    ```
- name: Mvc\View::setLayoutsDir
  id: api/phalcon_mvc_view#setlayoutsdir
  summary: Sets the layouts sub-directory
  belongs_to: Mvc\View
  description: |-
    ### public **setLayoutsDir** (*mixed* $layoutsDir)

    Sets the layouts sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash

    ``` php
    $view->setLayoutsDir("../common/layouts/");
    ```
- name: Mvc\View::setMainView
  id: api/phalcon_mvc_view#setmainview
  summary: Sets default view name
  belongs_to: Mvc\View
  description: |-
    ### public **setMainView** (*mixed* $viewPath)

    Sets default view name. Must be a file without extension in the views directory

    ``` php
    // Renders as main view views-dir/base.phtml
    $this->view->setMainView("base");
    ```
- name: Mvc\View::setParamToView
  id: api/phalcon_mvc_view#setparamtoview
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setParamToView** (*mixed* $key, *mixed* $value)

    Adds parameters to views (alias of setVar)

    ``` php
    $this->view->setParamToView("products", $products);
    ```
- name: Mvc\View::setPartialsDir
  id: api/phalcon_mvc_view#setpartialsdir
  summary: Sets a partials sub-directory
  belongs_to: Mvc\View
  description: |-
    ### public **setPartialsDir** (*mixed* $partialsDir)

    Sets a partials sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash

    ``` php
    $view->setPartialsDir("../common/partials/");
    ```
- name: Mvc\View::setRenderLevel
  id: api/phalcon_mvc_view#setrenderlevel
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setRenderLevel** (*mixed* $level)

    Sets the render level for the view

    ``` php
    // Render the view related to the controller only
    $this->view->setRenderLevel(
        View::LEVEL_LAYOUT
    );
    ```
- name: Mvc\View::setTemplateAfter
  id: api/phalcon_mvc_view#settemplateafter
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setTemplateAfter** (*mixed* $templateAfter)

    Sets a “template after” controller layout
- name: Mvc\View::setTemplateBefore
  id: api/phalcon_mvc_view#settemplatebefore
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setTemplateBefore** (*mixed* $templateBefore)

    Sets a template before the controller layout
- name: Mvc\View::setVar
  id: api/phalcon_mvc_view#setvar
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setVar** (*mixed* $key, *mixed* $value)

    Set a single view parameter

    ``` php
    $this->view->setVar("products", $products);
    ```
- name: Mvc\View::setVars
  id: api/phalcon_mvc_view#setvars
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **setVars** (*array* $params, \[*mixed* $merge\])

    Set all the render params

    ``` php
    $this->view->setVars(
        [
            "products" => $products,
        ]
    );
    ```
- name: Mvc\View::setViewsDir
  id: api/phalcon_mvc_view#setviewsdir
  summary: Sets the views directory
  belongs_to: Mvc\View
  description: |-
    ### public **setViewsDir** (*mixed* $viewsDir)

    Sets the views directory. Depending of your platform, always add a trailing slash or backslash
- name: Mvc\View::start
  id: api/phalcon_mvc_view#start
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **start** ()

    Starts rendering process enabling the output buffering

    ### protected **\_loadTemplateEngines** ()

    Loads registered template engines, if none is registered it will use Phalcon\Mvc\View\Engine\Php

    ### protected **\_engineRender** (*array* $engines, *string* $viewPath, *boolean* $silence, *boolean* $mustClean, \[[*Phalcon\Cache\BackendInterface*](phalcon_cache_backendinterface) $cache\])

    Checks whether view exists on registered extensions and render it
- name: Mvc\View::__get
  id: api/phalcon_mvc_view#__get
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **\_\_get** (*mixed* $key)

    Magic method to retrieve a variable passed to the view

    ``` php
    echo $this->view->products;
    ```
- name: Mvc\View::__isset
  id: api/phalcon_mvc_view#__isset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\View
  description: "### public **\\_\\_isset** (*mixed* $key)\n\nMagic method to retrieve if a variable is set in the view\n\n``` php\necho isset($this->view->products);\n```\n\n### protected **getViewsDirs** ()\n\nGets views directories\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View.html)"
- name: Mvc\View::__set
  id: api/phalcon_mvc_view#__set
  summary: null
  belongs_to: Mvc\View
  description: |-
    ### public **\_\_set** (*mixed* $key, *mixed* $value)

    Magic method to pass variables to the views

    ``` php
    $this->view->products = $products;
    ```
- name: Mvc\ViewBaseInterface
  id: api/phalcon_mvc_viewbaseinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\ViewBaseInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/viewbaseinterface.zep)\n\n## Methods\n\n### abstract public **setViewsDir** (*mixed* $viewsDir)\n\n...\n\n### abstract public **getViewsDir** ()\n\n...\n\n### abstract public **setParamToView** (*mixed* $key, *mixed* $value)\n\n...\n\n### abstract public **setVar** (*mixed* $key, *mixed* $value)\n\n...\n\n### abstract public **getParamsToView** ()\n\n...\n\n### abstract public **getCache** ()\n\n...\n\n### abstract public **cache** (\\[*mixed* $options\\])\n\n...\n\n### abstract public **setContent** (*mixed* $content)\n\n...\n\n### abstract public **getContent** ()\n\n...\n\n### abstract public **partial** (*mixed* $partialPath, \\[*mixed* $params\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewBaseInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewBaseInterface.html)"
- name: Mvc\ViewBaseInterface::cache
  id: api/phalcon_mvc_viewbaseinterface#cache
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **cache** (\[*mixed* $options\])

    ...
- name: Mvc\ViewBaseInterface::getCache
  id: api/phalcon_mvc_viewbaseinterface#getcache
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **getCache** ()

    ...
- name: Mvc\ViewBaseInterface::getContent
  id: api/phalcon_mvc_viewbaseinterface#getcontent
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **getContent** ()

    ...
- name: Mvc\ViewBaseInterface::getParamsToView
  id: api/phalcon_mvc_viewbaseinterface#getparamstoview
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **getParamsToView** ()

    ...
- name: Mvc\ViewBaseInterface::getViewsDir
  id: api/phalcon_mvc_viewbaseinterface#getviewsdir
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **getViewsDir** ()

    ...
- name: Mvc\ViewBaseInterface::partial
  id: api/phalcon_mvc_viewbaseinterface#partial
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\ViewBaseInterface
  description: "### abstract public **partial** (*mixed* $partialPath, \\[*mixed* $params\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewBaseInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewBaseInterface.html)"
- name: Mvc\ViewBaseInterface::setContent
  id: api/phalcon_mvc_viewbaseinterface#setcontent
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **setContent** (*mixed* $content)

    ...
- name: Mvc\ViewBaseInterface::setParamToView
  id: api/phalcon_mvc_viewbaseinterface#setparamtoview
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **setParamToView** (*mixed* $key, *mixed* $value)

    ...
- name: Mvc\ViewBaseInterface::setVar
  id: api/phalcon_mvc_viewbaseinterface#setvar
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **setVar** (*mixed* $key, *mixed* $value)

    ...
- name: Mvc\ViewBaseInterface::setViewsDir
  id: api/phalcon_mvc_viewbaseinterface#setviewsdir
  summary: null
  belongs_to: Mvc\ViewBaseInterface
  description: |-
    ### abstract public **setViewsDir** (*mixed* $viewsDir)

    ...
- name: Mvc\ViewInterface
  id: api/phalcon_mvc_viewinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\ViewInterface**\n\n*implements* [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/viewinterface.zep)\n\n## Methods\n\n### abstract public **setLayoutsDir** (*mixed* $layoutsDir)\n\n...\n\n### abstract public **getLayoutsDir** ()\n\n...\n\n### abstract public **setPartialsDir** (*mixed* $partialsDir)\n\n...\n\n### abstract public **getPartialsDir** ()\n\n...\n\n### abstract public **setBasePath** (*mixed* $basePath)\n\n...\n\n### abstract public **getBasePath** ()\n\n...\n\n### abstract public **setRenderLevel** (*mixed* $level)\n\n...\n\n### abstract public **setMainView** (*mixed* $viewPath)\n\n...\n\n### abstract public **getMainView** ()\n\n...\n\n### abstract public **setLayout** (*mixed* $layout)\n\n...\n\n### abstract public **getLayout** ()\n\n...\n\n### abstract public **setTemplateBefore** (*mixed* $templateBefore)\n\n...\n\n### abstract public **cleanTemplateBefore** ()\n\n...\n\n### abstract public **setTemplateAfter** (*mixed* $templateAfter)\n\n...\n\n### abstract public **cleanTemplateAfter** ()\n\n...\n\n### abstract public **getControllerName** ()\n\n...\n\n### abstract public **getActionName** ()\n\n...\n\n### abstract public **getParams** ()\n\n...\n\n### abstract public **start** ()\n\n...\n\n### abstract public **registerEngines** (*array* $engines)\n\n...\n\n### abstract public **render** (*mixed* $controllerName, *mixed* $actionName, \\[*mixed* $params\\])\n\n...\n\n### abstract public **pick** (*mixed* $renderView)\n\n...\n\n### abstract public **finish** ()\n\n...\n\n### abstract public **getActiveRenderPath** ()\n\n...\n\n### abstract public **disable** ()\n\n...\n\n### abstract public **enable** ()\n\n...\n\n### abstract public **reset** ()\n\n...\n\n### abstract public **isDisabled** ()\n\n...\n\n### abstract public **setViewsDir** (*mixed* $viewsDir) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getViewsDir** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **setParamToView** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **setVar** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getParamsToView** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getCache** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **cache** (\\[*mixed* $options\\]) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **setContent** (*mixed* $content) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getContent** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **partial** (*mixed* $partialPath, \\[*mixed* $params\\]) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewInterface.html)"
- name: Mvc\ViewInterface::cleanTemplateAfter
  id: api/phalcon_mvc_viewinterface#cleantemplateafter
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **cleanTemplateAfter** ()

    ...
- name: Mvc\ViewInterface::cleanTemplateBefore
  id: api/phalcon_mvc_viewinterface#cleantemplatebefore
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **cleanTemplateBefore** ()

    ...
- name: Mvc\ViewInterface::disable
  id: api/phalcon_mvc_viewinterface#disable
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **disable** ()

    ...
- name: Mvc\ViewInterface::enable
  id: api/phalcon_mvc_viewinterface#enable
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **enable** ()

    ...
- name: Mvc\ViewInterface::finish
  id: api/phalcon_mvc_viewinterface#finish
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **finish** ()

    ...
- name: Mvc\ViewInterface::getActionName
  id: api/phalcon_mvc_viewinterface#getactionname
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getActionName** ()

    ...
- name: Mvc\ViewInterface::getActiveRenderPath
  id: api/phalcon_mvc_viewinterface#getactiverenderpath
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getActiveRenderPath** ()

    ...
- name: Mvc\ViewInterface::getBasePath
  id: api/phalcon_mvc_viewinterface#getbasepath
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getBasePath** ()

    ...
- name: Mvc\ViewInterface::getControllerName
  id: api/phalcon_mvc_viewinterface#getcontrollername
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getControllerName** ()

    ...
- name: Mvc\ViewInterface::getLayout
  id: api/phalcon_mvc_viewinterface#getlayout
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getLayout** ()

    ...
- name: Mvc\ViewInterface::getLayoutsDir
  id: api/phalcon_mvc_viewinterface#getlayoutsdir
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getLayoutsDir** ()

    ...
- name: Mvc\ViewInterface::getMainView
  id: api/phalcon_mvc_viewinterface#getmainview
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getMainView** ()

    ...
- name: Mvc\ViewInterface::getParams
  id: api/phalcon_mvc_viewinterface#getparams
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getParams** ()

    ...
- name: Mvc\ViewInterface::getPartialsDir
  id: api/phalcon_mvc_viewinterface#getpartialsdir
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **getPartialsDir** ()

    ...
- name: Mvc\ViewInterface::isDisabled
  id: api/phalcon_mvc_viewinterface#isdisabled
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\ViewInterface
  description: "### abstract public **isDisabled** ()\n\n...\n\n### abstract public **setViewsDir** (*mixed* $viewsDir) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getViewsDir** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **setParamToView** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **setVar** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getParamsToView** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getCache** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **cache** (\\[*mixed* $options\\]) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **setContent** (*mixed* $content) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **getContent** () inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n### abstract public **partial** (*mixed* $partialPath, \\[*mixed* $params\\]) inherited from [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewInterface.html)"
- name: Mvc\ViewInterface::pick
  id: api/phalcon_mvc_viewinterface#pick
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **pick** (*mixed* $renderView)

    ...
- name: Mvc\ViewInterface::registerEngines
  id: api/phalcon_mvc_viewinterface#registerengines
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **registerEngines** (*array* $engines)

    ...
- name: Mvc\ViewInterface::render
  id: api/phalcon_mvc_viewinterface#render
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **render** (*mixed* $controllerName, *mixed* $actionName, \[*mixed* $params\])

    ...
- name: Mvc\ViewInterface::reset
  id: api/phalcon_mvc_viewinterface#reset
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **reset** ()

    ...
- name: Mvc\ViewInterface::setBasePath
  id: api/phalcon_mvc_viewinterface#setbasepath
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setBasePath** (*mixed* $basePath)

    ...
- name: Mvc\ViewInterface::setLayout
  id: api/phalcon_mvc_viewinterface#setlayout
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setLayout** (*mixed* $layout)

    ...
- name: Mvc\ViewInterface::setLayoutsDir
  id: api/phalcon_mvc_viewinterface#setlayoutsdir
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setLayoutsDir** (*mixed* $layoutsDir)

    ...
- name: Mvc\ViewInterface::setMainView
  id: api/phalcon_mvc_viewinterface#setmainview
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setMainView** (*mixed* $viewPath)

    ...
- name: Mvc\ViewInterface::setPartialsDir
  id: api/phalcon_mvc_viewinterface#setpartialsdir
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setPartialsDir** (*mixed* $partialsDir)

    ...
- name: Mvc\ViewInterface::setRenderLevel
  id: api/phalcon_mvc_viewinterface#setrenderlevel
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setRenderLevel** (*mixed* $level)

    ...
- name: Mvc\ViewInterface::setTemplateAfter
  id: api/phalcon_mvc_viewinterface#settemplateafter
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setTemplateAfter** (*mixed* $templateAfter)

    ...
- name: Mvc\ViewInterface::setTemplateBefore
  id: api/phalcon_mvc_viewinterface#settemplatebefore
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **setTemplateBefore** (*mixed* $templateBefore)

    ...
- name: Mvc\ViewInterface::start
  id: api/phalcon_mvc_viewinterface#start
  summary: null
  belongs_to: Mvc\ViewInterface
  description: |-
    ### abstract public **start** ()

    ...
- name: Mvc\View\Engine
  id: api/phalcon_mvc_view_engine
  summary: All the template engine adapters must inherit this class
  description: "# Abstract class **Phalcon\\Mvc\\View\\Engine**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Mvc\\View\\EngineInterface*](phalcon_mvc_view_engineinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine.zep)\n\nAll the template engine adapters must inherit this class. This provides basic interfacing between the engine and the Phalcon\\Mvc\\View component.\n\n## Methods\n\n### public **\\_\\_construct** ([*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface) $view, \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\])\n\nPhalcon\\Mvc\\View\\Engine constructor\n\n### public **getContent** ()\n\nReturns cached output on another view stage\n\n### public *string* **partial** (*string* $partialPath, \\[*array* $params\\])\n\nRenders a partial inside another view\n\n### public **getView** ()\n\nReturns the view component related to the adapter\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n### abstract public **render** (*mixed* $path, *mixed* $params, \\[*mixed* $mustClean\\]) inherited from [*Phalcon\\Mvc\\View\\EngineInterface*](phalcon_mvc_view_engineinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine.html)"
- name: Mvc\View\Engine::getContent
  id: api/phalcon_mvc_view_engine#getcontent
  summary: null
  belongs_to: Mvc\View\Engine
  description: |-
    ### public **getContent** ()

    Returns cached output on another view stage
- name: Mvc\View\Engine::getView
  id: api/phalcon_mvc_view_engine#getview
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\View\Engine
  description: "### public **getView** ()\n\nReturns the view component related to the adapter\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n### abstract public **render** (*mixed* $path, *mixed* $params, \\[*mixed* $mustClean\\]) inherited from [*Phalcon\\Mvc\\View\\EngineInterface*](phalcon_mvc_view_engineinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine.html)"
- name: Mvc\View\Engine::partial
  id: api/phalcon_mvc_view_engine#partial
  summary: null
  belongs_to: Mvc\View\Engine
  description: |-
    ### public *string* **partial** (*string* $partialPath, \[*array* $params\])

    Renders a partial inside another view
- name: Mvc\View\EngineInterface
  id: api/phalcon_mvc_view_engineinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Mvc\\View\\EngineInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engineinterface.zep)\n\n## Methods\n\n### abstract public **getContent** ()\n\n...\n\n### abstract public **partial** (*mixed* $partialPath, \\[*mixed* $params\\])\n\n...\n\n### abstract public **render** (*mixed* $path, *mixed* $params, \\[*mixed* $mustClean\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_EngineInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_EngineInterface.html)"
- name: Mvc\View\EngineInterface::getContent
  id: api/phalcon_mvc_view_engineinterface#getcontent
  summary: null
  belongs_to: Mvc\View\EngineInterface
  description: |-
    ### abstract public **getContent** ()

    ...
- name: Mvc\View\EngineInterface::partial
  id: api/phalcon_mvc_view_engineinterface#partial
  summary: null
  belongs_to: Mvc\View\EngineInterface
  description: |-
    ### abstract public **partial** (*mixed* $partialPath, \[*mixed* $params\])

    ...
- name: Mvc\View\EngineInterface::render
  id: api/phalcon_mvc_view_engineinterface#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\View\EngineInterface
  description: "### abstract public **render** (*mixed* $path, *mixed* $params, \\[*mixed* $mustClean\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_EngineInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_EngineInterface.html)"
- name: Mvc\View\Engine\Php
  id: api/phalcon_mvc_view_engine_php
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\View\\Engine\\Php**\n\n*extends* abstract class [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\n*implements* [*Phalcon\\Mvc\\View\\EngineInterface*](phalcon_mvc_view_engineinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/php.zep)\n\nAdapter to use PHP itself as templating engine\n\n## Methods\n\n### public **render** (*mixed* $path, *mixed* $params, \\[*mixed* $mustClean\\])\n\nRenders a view using the template engine\n\n### public **\\_\\_construct** ([*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface) $view, \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nPhalcon\\Mvc\\View\\Engine constructor\n\n### public **getContent** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns cached output on another view stage\n\n### public *string* **partial** (*string* $partialPath, \\[*array* $params\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nRenders a partial inside another view\n\n### public **getView** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns the view component related to the adapter\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Php.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Php.html)"
- name: Mvc\View\Engine\Php::render
  id: api/phalcon_mvc_view_engine_php#render
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\View\Engine\Php
  description: "### public **render** (*mixed* $path, *mixed* $params, \\[*mixed* $mustClean\\])\n\nRenders a view using the template engine\n\n### public **\\_\\_construct** ([*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface) $view, \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nPhalcon\\Mvc\\View\\Engine constructor\n\n### public **getContent** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns cached output on another view stage\n\n### public *string* **partial** (*string* $partialPath, \\[*array* $params\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nRenders a partial inside another view\n\n### public **getView** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns the view component related to the adapter\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Php.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Php.html)"
- name: Mvc\View\Engine\Volt
  id: api/phalcon_mvc_view_engine_volt
  summary: Length filter
  description: "# Class **Phalcon\\Mvc\\View\\Engine\\Volt**\n\n*extends* abstract class [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\n*implements* [*Phalcon\\Mvc\\View\\EngineInterface*](phalcon_mvc_view_engineinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/volt.zep)\n\nDesigner friendly and fast template engine for PHP written in Zephir/C\n\n## Methods\n\n### public **setOptions** (*array* $options)\n\nSet Volt’s options\n\n### public **getOptions** ()\n\nReturn Volt’s options\n\n### public **getCompiler** ()\n\nReturns the Volt’s compiler\n\n### public **render** (*mixed* $templatePath, *mixed* $params, \\[*mixed* $mustClean\\])\n\nRenders a view using the template engine\n\n### public **length** (*mixed* $item)\n\nLength filter. If an array/object is passed a count is performed otherwise a strlen/mb_strlen\n\n### public **isIncluded** (*mixed* $needle, *mixed* $haystack)\n\nChecks if the needle is included in the haystack\n\n### public **convertEncoding** (*mixed* $text, *mixed* $from, *mixed* $to)\n\nPerforms a string conversion\n\n### public **slice** (*mixed* $value, \\[*mixed* $start\\], \\[*mixed* $end\\])\n\nExtracts a slice from a string/array/traversable object value\n\n### public **sort** (*array* $value)\n\nSorts an array\n\n### public **callMacro** (*mixed* $name, \\[*array* $arguments\\])\n\nChecks if a macro is defined and calls it\n\n### public **\\_\\_construct** ([*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface) $view, \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nPhalcon\\Mvc\\View\\Engine constructor\n\n### public **getContent** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns cached output on another view stage\n\n### public *string* **partial** (*string* $partialPath, \\[*array* $params\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nRenders a partial inside another view\n\n### public **getView** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns the view component related to the adapter\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt.html)"
- name: Mvc\View\Engine\Volt::callMacro
  id: api/phalcon_mvc_view_engine_volt#callmacro
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\View\Engine\Volt
  description: "### public **callMacro** (*mixed* $name, \\[*array* $arguments\\])\n\nChecks if a macro is defined and calls it\n\n### public **\\_\\_construct** ([*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface) $view, \\[[*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nPhalcon\\Mvc\\View\\Engine constructor\n\n### public **getContent** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns cached output on another view stage\n\n### public *string* **partial** (*string* $partialPath, \\[*array* $params\\]) inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nRenders a partial inside another view\n\n### public **getView** () inherited from [*Phalcon\\Mvc\\View\\Engine*](phalcon_mvc_view_engine)\n\nReturns the view component related to the adapter\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt.html)"
- name: Mvc\View\Engine\Volt::convertEncoding
  id: api/phalcon_mvc_view_engine_volt#convertencoding
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **convertEncoding** (*mixed* $text, *mixed* $from, *mixed* $to)

    Performs a string conversion
- name: Mvc\View\Engine\Volt::getCompiler
  id: api/phalcon_mvc_view_engine_volt#getcompiler
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **getCompiler** ()

    Returns the Volt’s compiler
- name: Mvc\View\Engine\Volt::getOptions
  id: api/phalcon_mvc_view_engine_volt#getoptions
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **getOptions** ()

    Return Volt’s options
- name: Mvc\View\Engine\Volt::isIncluded
  id: api/phalcon_mvc_view_engine_volt#isincluded
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **isIncluded** (*mixed* $needle, *mixed* $haystack)

    Checks if the needle is included in the haystack
- name: Mvc\View\Engine\Volt::length
  id: api/phalcon_mvc_view_engine_volt#length
  summary: Length filter
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **length** (*mixed* $item)

    Length filter. If an array/object is passed a count is performed otherwise a strlen/mb_strlen
- name: Mvc\View\Engine\Volt::render
  id: api/phalcon_mvc_view_engine_volt#render
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **render** (*mixed* $templatePath, *mixed* $params, \[*mixed* $mustClean\])

    Renders a view using the template engine
- name: Mvc\View\Engine\Volt::setOptions
  id: api/phalcon_mvc_view_engine_volt#setoptions
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **setOptions** (*array* $options)

    Set Volt’s options
- name: Mvc\View\Engine\Volt::slice
  id: api/phalcon_mvc_view_engine_volt#slice
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **slice** (*mixed* $value, \[*mixed* $start\], \[*mixed* $end\])

    Extracts a slice from a string/array/traversable object value
- name: Mvc\View\Engine\Volt::sort
  id: api/phalcon_mvc_view_engine_volt#sort
  summary: null
  belongs_to: Mvc\View\Engine\Volt
  description: |-
    ### public **sort** (*array* $value)

    Sorts an array
- name: Mvc\View\Engine\Volt\Compiler
  id: api/phalcon_mvc_view_engine_volt_compiler
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/volt/compiler.zep)\n\nThis class reads and compiles Volt templates into PHP plain code\n\n``` php\n$compiler = new \\Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler();\n\n$compiler->compile(\"views/partials/header.volt\");\n\nrequire $compiler->getCompiledTemplatePath();\n```\n\n## Methods\n\n### public **\\_\\_construct** (\\[[*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface) $view\\])\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setOptions** (*array* $options)\n\nSets the compiler options\n\n### public **setOption** (*string* $option, *mixed* $value)\n\nSets a single compiler option\n\n### public *string* **getOption** (*string* $option)\n\nReturns a compiler’s option\n\n### public **getOptions** ()\n\nReturns the compiler options\n\n### final public *mixed* **fireExtensionEvent** (*string* $name, \\[*array* $arguments\\])\n\nFires an event to registered extensions\n\n### public **addExtension** (*mixed* $extension)\n\nRegisters a Volt’s extension\n\n### public **getExtensions** ()\n\nReturns the list of extensions registered in Volt\n\n### public **addFunction** (*mixed* $name, *mixed* $definition)\n\nRegister a new function in the compiler\n\n### public **getFunctions** ()\n\nRegister the user registered functions\n\n### public **addFilter** (*mixed* $name, *mixed* $definition)\n\nRegister a new filter in the compiler\n\n### public **getFilters** ()\n\nRegister the user registered filters\n\n### public **setUniquePrefix** (*mixed* $prefix)\n\nSet a unique prefix to be used as prefix for compiled variables\n\n### public **getUniquePrefix** ()\n\nReturn a unique prefix to be used as prefix for compiled variables and contexts\n\n### public **attributeReader** (*array* $expr)\n\nResolves attribute reading\n\n### public **functionCall** (*array* $expr)\n\nResolves function intermediate code into PHP function calls\n\n### public **resolveTest** (*array* $test, *mixed* $left)\n\nResolves filter intermediate code into a valid PHP expression\n\n### final protected **resolveFilter** (*array* $filter, *mixed* $left)\n\nResolves filter intermediate code into PHP function calls\n\n### final public **expression** (*array* $expr)\n\nResolves an expression node in an AST volt tree\n\n### final protected *string* \\| *array* **\\_statementListOrExtends** (*array* $statements)\n\nCompiles a block of statements\n\n### public **compileForeach** (*array* $statement, \\[*mixed* $extendsMode\\])\n\nCompiles a “foreach” intermediate code representation into plain PHP code\n\n### public **compileForElse** ()\n\nGenerates a ‘forelse’ PHP code\n\n### public **compileIf** (*array* $statement, \\[*mixed* $extendsMode\\])\n\nCompiles a ‘if’ statement returning PHP code\n\n### public **compileElseIf** (*array* $statement)\n\nCompiles a “elseif” statement returning PHP code\n\n### public **compileCache** (*array* $statement, \\[*mixed* $extendsMode\\])\n\nCompiles a “cache” statement returning PHP code\n\n### public **compileSet** (*array* $statement)\n\nCompiles a “set” statement returning PHP code\n\n### public **compileDo** (*array* $statement)\n\nCompiles a “do” statement returning PHP code\n\n### public **compileReturn** (*array* $statement)\n\nCompiles a “return” statement returning PHP code\n\n### public **compileAutoEscape** (*array* $statement, *mixed* $extendsMode)\n\nCompiles a “autoescape” statement returning PHP code\n\n### public *string* **compileEcho** (*array* $statement)\n\nCompiles a ‘{{‘ ‘}}’ statement returning PHP code\n\n### public **compileInclude** (*array* $statement)\n\nCompiles a ‘include’ statement returning PHP code\n\n### public **compileMacro** (*array* $statement, *mixed* $extendsMode)\n\nCompiles macros\n\n### public *string* **compileCall** (*array* $statement, *boolean* $extendsMode)\n\nCompiles calls to macros\n\n### final protected **\\_statementList** (*array* $statements, \\[*mixed* $extendsMode\\])\n\nTraverses a statement list compiling each of its nodes\n\n### protected **\\_compileSource** (*mixed* $viewCode, \\[*mixed* $extendsMode\\])\n\nCompiles a Volt source code returning a PHP plain version\n\n### public **compileString** (*mixed* $viewCode, \\[*mixed* $extendsMode\\])\n\nCompiles a template into a string\n\n``` php\necho $compiler->compileString('{{ \"hello world\" }}');\n```\n\n### public *string* \\| *array* **compileFile** (*string* $path, *string* $compiledPath, \\[*boolean* $extendsMode\\])\n\nCompiles a template into a file forcing the destination path\n\n``` php\n$compiler->compile(\"views/layouts/main.volt\", \"views/layouts/main.volt.php\");\n```\n\n### public **compile** (*mixed* $templatePath, \\[*mixed* $extendsMode\\])\n\nCompiles a template into a file applying the compiler options This method does not return the compiled path if the template was not compiled\n\n``` php\n$compiler->compile(\"views/layouts/main.volt\");\n\nrequire $compiler->getCompiledTemplatePath();\n```\n\n### public **getTemplatePath** ()\n\nReturns the path that is currently being compiled\n\n### public **getCompiledTemplatePath** ()\n\nReturns the path to the last compiled template\n\n### public *array* **parse** (*string* $viewCode)\n\nParses a Volt template returning its intermediate representation\n\n``` php\nprint_r(\n    $compiler->parse(\"{{ 3 + 2 }}\")\n);\n```\n\n### protected **getFinalPath** (*mixed* $path)\n\nGets the final path with VIEW\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Compiler.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Compiler.html)"
- name: Mvc\View\Engine\Volt\Compiler::addExtension
  id: api/phalcon_mvc_view_engine_volt_compiler#addextension
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **addExtension** (*mixed* $extension)

    Registers a Volt’s extension
- name: Mvc\View\Engine\Volt\Compiler::addFilter
  id: api/phalcon_mvc_view_engine_volt_compiler#addfilter
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **addFilter** (*mixed* $name, *mixed* $definition)

    Register a new filter in the compiler
- name: Mvc\View\Engine\Volt\Compiler::addFunction
  id: api/phalcon_mvc_view_engine_volt_compiler#addfunction
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **addFunction** (*mixed* $name, *mixed* $definition)

    Register a new function in the compiler
- name: Mvc\View\Engine\Volt\Compiler::attributeReader
  id: api/phalcon_mvc_view_engine_volt_compiler#attributereader
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **attributeReader** (*array* $expr)

    Resolves attribute reading
- name: Mvc\View\Engine\Volt\Compiler::compile
  id: api/phalcon_mvc_view_engine_volt_compiler#compile
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compile** (*mixed* $templatePath, \[*mixed* $extendsMode\])

    Compiles a template into a file applying the compiler options This method does not return the compiled path if the template was not compiled

    ``` php
    $compiler->compile("views/layouts/main.volt");

    require $compiler->getCompiledTemplatePath();
    ```
- name: Mvc\View\Engine\Volt\Compiler::compileAutoEscape
  id: api/phalcon_mvc_view_engine_volt_compiler#compileautoescape
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileAutoEscape** (*array* $statement, *mixed* $extendsMode)

    Compiles a “autoescape” statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileCache
  id: api/phalcon_mvc_view_engine_volt_compiler#compilecache
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileCache** (*array* $statement, \[*mixed* $extendsMode\])

    Compiles a “cache” statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileCall
  id: api/phalcon_mvc_view_engine_volt_compiler#compilecall
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public *string* **compileCall** (*array* $statement, *boolean* $extendsMode)

    Compiles calls to macros

    ### final protected **\_statementList** (*array* $statements, \[*mixed* $extendsMode\])

    Traverses a statement list compiling each of its nodes

    ### protected **\_compileSource** (*mixed* $viewCode, \[*mixed* $extendsMode\])

    Compiles a Volt source code returning a PHP plain version
- name: Mvc\View\Engine\Volt\Compiler::compileDo
  id: api/phalcon_mvc_view_engine_volt_compiler#compiledo
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileDo** (*array* $statement)

    Compiles a “do” statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileEcho
  id: api/phalcon_mvc_view_engine_volt_compiler#compileecho
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public *string* **compileEcho** (*array* $statement)

    Compiles a ‘{{‘ ‘}}’ statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileElseIf
  id: api/phalcon_mvc_view_engine_volt_compiler#compileelseif
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileElseIf** (*array* $statement)

    Compiles a “elseif” statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileFile
  id: api/phalcon_mvc_view_engine_volt_compiler#compilefile
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public *string* \| *array* **compileFile** (*string* $path, *string* $compiledPath, \[*boolean* $extendsMode\])

    Compiles a template into a file forcing the destination path

    ``` php
    $compiler->compile("views/layouts/main.volt", "views/layouts/main.volt.php");
    ```
- name: Mvc\View\Engine\Volt\Compiler::compileForeach
  id: api/phalcon_mvc_view_engine_volt_compiler#compileforeach
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileForeach** (*array* $statement, \[*mixed* $extendsMode\])

    Compiles a “foreach” intermediate code representation into plain PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileForElse
  id: api/phalcon_mvc_view_engine_volt_compiler#compileforelse
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileForElse** ()

    Generates a ‘forelse’ PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileIf
  id: api/phalcon_mvc_view_engine_volt_compiler#compileif
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileIf** (*array* $statement, \[*mixed* $extendsMode\])

    Compiles a ‘if’ statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileInclude
  id: api/phalcon_mvc_view_engine_volt_compiler#compileinclude
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileInclude** (*array* $statement)

    Compiles a ‘include’ statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileMacro
  id: api/phalcon_mvc_view_engine_volt_compiler#compilemacro
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileMacro** (*array* $statement, *mixed* $extendsMode)

    Compiles macros
- name: Mvc\View\Engine\Volt\Compiler::compileReturn
  id: api/phalcon_mvc_view_engine_volt_compiler#compilereturn
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileReturn** (*array* $statement)

    Compiles a “return” statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileSet
  id: api/phalcon_mvc_view_engine_volt_compiler#compileset
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileSet** (*array* $statement)

    Compiles a “set” statement returning PHP code
- name: Mvc\View\Engine\Volt\Compiler::compileString
  id: api/phalcon_mvc_view_engine_volt_compiler#compilestring
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **compileString** (*mixed* $viewCode, \[*mixed* $extendsMode\])

    Compiles a template into a string

    ``` php
    echo $compiler->compileString('{{ "hello world" }}');
    ```
- name: Mvc\View\Engine\Volt\Compiler::expression
  id: api/phalcon_mvc_view_engine_volt_compiler#expression
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### final public **expression** (*array* $expr)

    Resolves an expression node in an AST volt tree

    ### final protected *string* \| *array* **\_statementListOrExtends** (*array* $statements)

    Compiles a block of statements
- name: Mvc\View\Engine\Volt\Compiler::fireExtensionEvent
  id: api/phalcon_mvc_view_engine_volt_compiler#fireextensionevent
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### final public *mixed* **fireExtensionEvent** (*string* $name, \[*array* $arguments\])

    Fires an event to registered extensions
- name: Mvc\View\Engine\Volt\Compiler::functionCall
  id: api/phalcon_mvc_view_engine_volt_compiler#functioncall
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **functionCall** (*array* $expr)

    Resolves function intermediate code into PHP function calls
- name: Mvc\View\Engine\Volt\Compiler::getCompiledTemplatePath
  id: api/phalcon_mvc_view_engine_volt_compiler#getcompiledtemplatepath
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getCompiledTemplatePath** ()

    Returns the path to the last compiled template
- name: Mvc\View\Engine\Volt\Compiler::getDI
  id: api/phalcon_mvc_view_engine_volt_compiler#getdi
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Mvc\View\Engine\Volt\Compiler::getExtensions
  id: api/phalcon_mvc_view_engine_volt_compiler#getextensions
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getExtensions** ()

    Returns the list of extensions registered in Volt
- name: Mvc\View\Engine\Volt\Compiler::getFilters
  id: api/phalcon_mvc_view_engine_volt_compiler#getfilters
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getFilters** ()

    Register the user registered filters
- name: Mvc\View\Engine\Volt\Compiler::getFunctions
  id: api/phalcon_mvc_view_engine_volt_compiler#getfunctions
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getFunctions** ()

    Register the user registered functions
- name: Mvc\View\Engine\Volt\Compiler::getOption
  id: api/phalcon_mvc_view_engine_volt_compiler#getoption
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public *string* **getOption** (*string* $option)

    Returns a compiler’s option
- name: Mvc\View\Engine\Volt\Compiler::getOptions
  id: api/phalcon_mvc_view_engine_volt_compiler#getoptions
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getOptions** ()

    Returns the compiler options
- name: Mvc\View\Engine\Volt\Compiler::getTemplatePath
  id: api/phalcon_mvc_view_engine_volt_compiler#gettemplatepath
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getTemplatePath** ()

    Returns the path that is currently being compiled
- name: Mvc\View\Engine\Volt\Compiler::getUniquePrefix
  id: api/phalcon_mvc_view_engine_volt_compiler#getuniqueprefix
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **getUniquePrefix** ()

    Return a unique prefix to be used as prefix for compiled variables and contexts
- name: Mvc\View\Engine\Volt\Compiler::parse
  id: api/phalcon_mvc_view_engine_volt_compiler#parse
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: "### public *array* **parse** (*string* $viewCode)\n\nParses a Volt template returning its intermediate representation\n\n``` php\nprint_r(\n    $compiler->parse(\"{{ 3 + 2 }}\")\n);\n```\n\n### protected **getFinalPath** (*mixed* $path)\n\nGets the final path with VIEW\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Compiler.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Compiler.html)"
- name: Mvc\View\Engine\Volt\Compiler::resolveTest
  id: api/phalcon_mvc_view_engine_volt_compiler#resolvetest
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **resolveTest** (*array* $test, *mixed* $left)

    Resolves filter intermediate code into a valid PHP expression

    ### final protected **resolveFilter** (*array* $filter, *mixed* $left)

    Resolves filter intermediate code into PHP function calls
- name: Mvc\View\Engine\Volt\Compiler::setDI
  id: api/phalcon_mvc_view_engine_volt_compiler#setdi
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Mvc\View\Engine\Volt\Compiler::setOption
  id: api/phalcon_mvc_view_engine_volt_compiler#setoption
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **setOption** (*string* $option, *mixed* $value)

    Sets a single compiler option
- name: Mvc\View\Engine\Volt\Compiler::setOptions
  id: api/phalcon_mvc_view_engine_volt_compiler#setoptions
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **setOptions** (*array* $options)

    Sets the compiler options
- name: Mvc\View\Engine\Volt\Compiler::setUniquePrefix
  id: api/phalcon_mvc_view_engine_volt_compiler#setuniqueprefix
  summary: null
  belongs_to: Mvc\View\Engine\Volt\Compiler
  description: |-
    ### public **setUniquePrefix** (*mixed* $prefix)

    Set a unique prefix to be used as prefix for compiled variables
- name: Mvc\View\Engine\Volt\Exception
  id: api/phalcon_mvc_view_engine_volt_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\View\\Engine\\Volt\\Exception**\n\n*extends* class [*Phalcon\\Mvc\\View\\Exception*](phalcon_mvc_view_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/volt/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Exception.html)"
- name: Mvc\View\Exception
  id: api/phalcon_mvc_view_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Mvc\\View\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Exception.html)"
- name: Mvc\View\Simple
  id: api/phalcon_mvc_view_simple
  summary: Sets views directory
  description: "# Class **Phalcon\\Mvc\\View\\Simple**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Mvc\\ViewBaseInterface*](phalcon_mvc_viewbaseinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/simple.zep)\n\nThis component allows to render views without hierarchical levels\n\n``` php\nuse Phalcon\\Mvc\\View\\Simple as View;\n\n$view = new View();\n\n// Render a view\necho $view->render(\n    \"templates/my-view\",\n    [\n        \"some\" => $param,\n    ]\n);\n\n// Or with filename with extension\necho $view->render(\n    \"templates/my-view.volt\",\n    [\n        \"parameter\" => $here,\n    ]\n);\n```\n\n## Methods\n\n### public **getRegisteredEngines** ()\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Mvc\\View\\Simple constructor\n\n### public **setViewsDir** (*mixed* $viewsDir)\n\nSets views directory. Depending of your platform, always add a trailing slash or backslash\n\n### public **getViewsDir** ()\n\nGets views directory\n\n### public **registerEngines** (*array* $engines)\n\nRegister templating engines\n\n``` php\n$this->view->registerEngines(\n    [\n        \".phtml\" => \"Phalcon\\\\Mvc\\\\View\\\\Engine\\\\Php\",\n        \".volt\"  => \"Phalcon\\\\Mvc\\\\View\\\\Engine\\\\Volt\",\n        \".mhtml\" => \"MyCustomEngine\",\n    ]\n);\n```\n\n### protected *array* **\\_loadTemplateEngines** ()\n\nLoads registered template engines, if none is registered it will use Phalcon\\Mvc\\View\\Engine\\Php\n\n### final protected **\\_internalRender** (*string* $path, *array* $params)\n\nTries to render the view with every engine registered in the component\n\n### public **render** (*string* $path, \\[*array* $params\\])\n\nRenders a view\n\n### public **partial** (*mixed* $partialPath, \\[*mixed* $params\\])\n\nRenders a partial view\n\n``` php\n// Show a partial inside another view\n$this->partial(\"shared/footer\");\n```\n\n``` php\n// Show a partial inside another view with parameters\n$this->partial(\n    \"shared/footer\",\n    [\n        \"content\" => $html,\n    ]\n);\n```\n\n### public **setCacheOptions** (*array* $options)\n\nSets the cache options\n\n### public *array* **getCacheOptions** ()\n\nReturns the cache options\n\n### protected **\\_createCache** ()\n\nCreate a Phalcon\\Cache based on the internal cache options\n\n### public **getCache** ()\n\nReturns the cache instance used to cache\n\n### public **cache** (\\[*mixed* $options\\])\n\nCache the actual view render to certain level\n\n``` php\n$this->view->cache(\n    [\n        \"key\"      => \"my-key\",\n        \"lifetime\" => 86400,\n    ]\n);\n```\n\n### public **setParamToView** (*mixed* $key, *mixed* $value)\n\nAdds parameters to views (alias of setVar)\n\n``` php\n$this->view->setParamToView(\"products\", $products);\n```\n\n### public **setVars** (*array* $params, \\[*mixed* $merge\\])\n\nSet all the render params\n\n``` php\n$this->view->setVars(\n    [\n        \"products\" => $products,\n    ]\n);\n```\n\n### public **setVar** (*mixed* $key, *mixed* $value)\n\nSet a single view parameter\n\n``` php\n$this->view->setVar(\"products\", $products);\n```\n\n### public **getVar** (*mixed* $key)\n\nReturns a parameter previously set in the view\n\n### public *array* **getParamsToView** ()\n\nReturns parameters to views\n\n### public **setContent** (*mixed* $content)\n\nExternally sets the view content\n\n``` php\n$this->view->setContent(\"<h1>hello</h1>\");\n```\n\n### public **getContent** ()\n\nReturns cached output from another view stage\n\n### public *string* **getActiveRenderPath** ()\n\nReturns the path of the view that is currently rendered\n\n### public **\\_\\_set** (*mixed* $key, *mixed* $value)\n\nMagic method to pass variables to the views\n\n``` php\n$this->view->products = $products;\n```\n\n### public **\\_\\_get** (*mixed* $key)\n\nMagic method to retrieve a variable passed to the view\n\n``` php\necho $this->view->products;\n```\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Simple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Simple.html)"
- name: Mvc\View\Simple::cache
  id: api/phalcon_mvc_view_simple#cache
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **cache** (\[*mixed* $options\])

    Cache the actual view render to certain level

    ``` php
    $this->view->cache(
        [
            "key"      => "my-key",
            "lifetime" => 86400,
        ]
    );
    ```
- name: Mvc\View\Simple::getActiveRenderPath
  id: api/phalcon_mvc_view_simple#getactiverenderpath
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public *string* **getActiveRenderPath** ()

    Returns the path of the view that is currently rendered
- name: Mvc\View\Simple::getCache
  id: api/phalcon_mvc_view_simple#getcache
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **getCache** ()

    Returns the cache instance used to cache
- name: Mvc\View\Simple::getCacheOptions
  id: api/phalcon_mvc_view_simple#getcacheoptions
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public *array* **getCacheOptions** ()

    Returns the cache options

    ### protected **\_createCache** ()

    Create a Phalcon\Cache based on the internal cache options
- name: Mvc\View\Simple::getContent
  id: api/phalcon_mvc_view_simple#getcontent
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **getContent** ()

    Returns cached output from another view stage
- name: Mvc\View\Simple::getParamsToView
  id: api/phalcon_mvc_view_simple#getparamstoview
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public *array* **getParamsToView** ()

    Returns parameters to views
- name: Mvc\View\Simple::getRegisteredEngines
  id: api/phalcon_mvc_view_simple#getregisteredengines
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **getRegisteredEngines** ()

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Mvc\View\Simple constructor
- name: Mvc\View\Simple::getVar
  id: api/phalcon_mvc_view_simple#getvar
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **getVar** (*mixed* $key)

    Returns a parameter previously set in the view
- name: Mvc\View\Simple::getViewsDir
  id: api/phalcon_mvc_view_simple#getviewsdir
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **getViewsDir** ()

    Gets views directory
- name: Mvc\View\Simple::partial
  id: api/phalcon_mvc_view_simple#partial
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **partial** (*mixed* $partialPath, \[*mixed* $params\])

    Renders a partial view

    ``` php
    // Show a partial inside another view
    $this->partial("shared/footer");
    ```

    ``` php
    // Show a partial inside another view with parameters
    $this->partial(
        "shared/footer",
        [
            "content" => $html,
        ]
    );
    ```
- name: Mvc\View\Simple::registerEngines
  id: api/phalcon_mvc_view_simple#registerengines
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **registerEngines** (*array* $engines)

    Register templating engines

    ``` php
    $this->view->registerEngines(
        [
            ".phtml" => "Phalcon\\Mvc\\View\\Engine\\Php",
            ".volt"  => "Phalcon\\Mvc\\View\\Engine\\Volt",
            ".mhtml" => "MyCustomEngine",
        ]
    );
    ```

    ### protected *array* **\_loadTemplateEngines** ()

    Loads registered template engines, if none is registered it will use Phalcon\Mvc\View\Engine\Php

    ### final protected **\_internalRender** (*string* $path, *array* $params)

    Tries to render the view with every engine registered in the component
- name: Mvc\View\Simple::render
  id: api/phalcon_mvc_view_simple#render
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **render** (*string* $path, \[*array* $params\])

    Renders a view
- name: Mvc\View\Simple::setCacheOptions
  id: api/phalcon_mvc_view_simple#setcacheoptions
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **setCacheOptions** (*array* $options)

    Sets the cache options
- name: Mvc\View\Simple::setContent
  id: api/phalcon_mvc_view_simple#setcontent
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **setContent** (*mixed* $content)

    Externally sets the view content

    ``` php
    $this->view->setContent("<h1>hello</h1>");
    ```
- name: Mvc\View\Simple::setParamToView
  id: api/phalcon_mvc_view_simple#setparamtoview
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **setParamToView** (*mixed* $key, *mixed* $value)

    Adds parameters to views (alias of setVar)

    ``` php
    $this->view->setParamToView("products", $products);
    ```
- name: Mvc\View\Simple::setVar
  id: api/phalcon_mvc_view_simple#setvar
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **setVar** (*mixed* $key, *mixed* $value)

    Set a single view parameter

    ``` php
    $this->view->setVar("products", $products);
    ```
- name: Mvc\View\Simple::setVars
  id: api/phalcon_mvc_view_simple#setvars
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **setVars** (*array* $params, \[*mixed* $merge\])

    Set all the render params

    ``` php
    $this->view->setVars(
        [
            "products" => $products,
        ]
    );
    ```
- name: Mvc\View\Simple::setViewsDir
  id: api/phalcon_mvc_view_simple#setviewsdir
  summary: Sets views directory
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **setViewsDir** (*mixed* $viewsDir)

    Sets views directory. Depending of your platform, always add a trailing slash or backslash
- name: Mvc\View\Simple::__get
  id: api/phalcon_mvc_view_simple#__get
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Mvc\View\Simple
  description: "### public **\\_\\_get** (*mixed* $key)\n\nMagic method to retrieve a variable passed to the view\n\n``` php\necho $this->view->products;\n```\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Simple.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Simple.html)"
- name: Mvc\View\Simple::__set
  id: api/phalcon_mvc_view_simple#__set
  summary: null
  belongs_to: Mvc\View\Simple
  description: |-
    ### public **\_\_set** (*mixed* $key, *mixed* $value)

    Magic method to pass variables to the views

    ``` php
    $this->view->products = $products;
    ```
- name: Nginx Installation Notes
  id: reference/nginx
  summary: Nginx is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server
  description: "# Nginx Installation Notes\n\n[Nginx](http://wiki.nginx.org/Main) is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. Unlike traditional servers, [Nginx](http://wiki.nginx.org/Main) doesn’t rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.\n\nThe [PHP-FPM](http://php-fpm.org/) (FastCGI Process Manager) is usually used to allow [Nginx](http://wiki.nginx.org/Main) to process PHP files. Nowadays, [PHP-FPM](http://php-fpm.org/) is bundled with any Unix PHP distribution. Phalcon + [Nginx](http://wiki.nginx.org/Main) + [PHP-FPM](http://php-fpm.org/) provides a powerful set of tools that offer maximum performance for your PHP applications.\n\n## Configuring Nginx for Phalcon\n\nThe following are potential configurations you can use to setup nginx with Phalcon:\n\n### Basic configuration\n\nUsing `$_GET['_url']` as source of URIs:\n\n``` nginx\nserver {\n    listen      80;\n    server_name localhost.dev;\n    root        /var/www/phalcon/public;\n    index       index.php index.html index.htm;\n    charset     utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?_url=$uri&$args;\n    }\n\n    location ~ \\.php {\n        fastcgi_pass  unix:/run/php-fpm/php-fpm.sock;\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\nUsing `$_SERVER['REQUEST_URI']` as source of URIs:\n\n``` nginx\nserver {\n    listen      80;\n    server_name localhost.dev;\n    root        /var/www/phalcon/public;\n    index       index.php index.html index.htm;\n    charset     utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php;\n    }\n\n    location ~ \\.php$ {\n        try_files     $uri =404;\n\n        fastcgi_pass  127.0.0.1:9000;\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/nginx.html](https://docs.phalconphp.com/en/latest/reference/nginx.html)"
- name: ODM (Object-Document Mapper)
  id: reference/odm
  summary: In addition to its ability to map tables in relational databases, Phalcon can map documents from NoSQL databases
  description: "# ODM (Object-Document Mapper)\n\nIn addition to its ability to [*map tables*](models) in relational databases, Phalcon can map documents from NoSQL databases. The ODM offers a CRUD functionality, events, validations among other services.\n\nDue to the absence of SQL queries and planners, NoSQL databases can see real improvements in performance using the Phalcon approach. Additionally, there are no SQL building reducing the possibility of SQL injections.\n\nThe following NoSQL databases are supported:\n\n| Name                               | Description                                                          |\n|------------------------------------|----------------------------------------------------------------------|\n| [MongoDB](http://www.mongodb.org/) | MongoDB is a scalable, high-performance, open source NoSQL database. |\n\n## Creating Models\n\nA model is a class that extends from [*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection). It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n\n}\n```\n\n> If you’re using PHP 5.4/5.5 is recommended declare each column that makes part of the model in order to save memory and reduce the memory allocation.\n\nBy default model “Robots” will refer to the collection “robots”. If you want to manually specify another name for the mapping collection, you can use the `setSource()` method:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this->setSource(\"the_robots\");\n    }\n}\n```\n\n## Understanding Documents To Objects\n\nEvery instance of a model represents a document in the collection. You can easily access collection data by reading object properties. For example, for a collection “robots” with the documents:\n\n``` bash\n$ mongo test\nMongoDB shell version: 1.8.2\nconnecting to: test\n> db.robots.find()\n{ \"_id\" : ObjectId(\"508735512d42b8c3d15ec4e1\"), \"name\" : \"Astro Boy\", \"year\" : 1952,\n    \"type\" : \"mechanical\" }\n{ \"_id\" : ObjectId(\"5087358f2d42b8c3d15ec4e2\"), \"name\" : \"Bender\", \"year\" : 1999,\n    \"type\" : \"mechanical\" }\n{ \"_id\" : ObjectId(\"508735d32d42b8c3d15ec4e3\"), \"name\" : \"Wall-E\", \"year\" : 2008 }\n>\n```\n\n## Models in Namespaces\n\nNamespaces can be used to avoid class name collision. In this case it is necessary to indicate the name of the related collection using the `setSource()` method:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this->setSource(\"robots\");\n    }\n}\n```\n\nYou could find a certain document by its ID and then print its name:\n\n``` php\n// Find record with _id = \"5087358f2d42b8c3d15ec4e2\"\n$robot = Robots::findById(\"5087358f2d42b8c3d15ec4e2\");\n\n// Prints \"Bender\"\necho $robot->name;\n```\n\nOnce the record is in memory, you can make modifications to its data and then save changes:\n\n``` php\n$robot = Robots::findFirst(\n    [\n        [\n            \"name\" => \"Astro Boy\",\n        ]\n    ]\n);\n\n$robot->name = \"Voltron\";\n\n$robot->save();\n```\n\n## Setting a Connection\n\nConnections are retrieved from the services container. By default, Phalcon tries to find the connection in a service called “mongo”:\n\n``` php\n// Simple database connection to localhost\n$di->set(\n    \"mongo\",\n    function () {\n        $mongo = new MongoClient();\n\n        return $mongo->selectDB(\"store\");\n    },\n    true\n);\n\n// Connecting to a domain socket, falling back to localhost connection\n$di->set(\n    \"mongo\",\n    function () {\n        $mongo = new MongoClient(\n            \"mongodb:///tmp/mongodb-27017.sock,localhost:27017\"\n        );\n\n        return $mongo->selectDB(\"store\");\n    },\n    true\n);\n```\n\n## Finding Documents\n\nAs [*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection) relies on the Mongo PHP extension you have the same facilities to query documents and convert them transparently to model instances:\n\n``` php\n// How many robots are there?\n$robots = Robots::find();\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ]\n    ]\n);\necho \"There are \", count($robots), \"\\n\";\n\n// Get and print mechanical robots ordered by name upward\n$robots = Robots::find(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ],\n        \"sort\" => [\n            \"name\" => 1,\n        ],\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n\n// Get first 100 mechanical robots ordered by name\n$robots = Robots::find(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ],\n        \"sort\"  => [\n            \"name\" => 1,\n        ],\n        \"limit\" => 100,\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n```\n\nYou could also use the `findFirst()` method to get only the first record matching the given criteria:\n\n``` php\n// What's the first robot in robots collection?\n$robot = Robots::findFirst();\necho \"The robot name is \", $robot->name, \"\\n\";\n\n// What's the first mechanical robot in robots collection?\n$robot = Robots::findFirst(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ]\n    ]\n);\necho \"The first mechanical robot name is \", $robot->name, \"\\n\";\n```\n\nBoth `find()` and `findFirst()` methods accept an associative array specifying the search criteria:\n\n``` php\n// First robot where type = \"mechanical\" and year = \"1999\"\n$robot = Robots::findFirst(\n    [\n        \"conditions\" => [\n            \"type\" => \"mechanical\",\n            \"year\" => \"1999\",\n        ],\n    ]\n);\n\n// All virtual robots ordered by name downward\n$robots = Robots::find(\n    [\n        \"conditions\" => [\n            \"type\" => \"virtual\",\n        ],\n        \"sort\" => [\n            \"name\" => -1,\n        ],\n    ]\n);\n```\n\nThe available query options are:\n\n| Parameter    | Description                                                                                                                                                                                  | Example                                                                    |\n|--------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|\n| `conditions` | Search conditions for the find operation. Is used to extract only those records that fulfill a specified criterion. By default Phalcon_model assumes the first parameter are the conditions. | `\"conditions\"`` ``=>`` ``array('$gt'`` ``=>`` ``1990)`                     |\n| `fields`     | Returns specific columns instead of the full fields in the collection. When using this option an incomplete object is returned                                                               | `\"fields\"`` ``=>`` ``array('name'`` ``=>`` ``true)`                        |\n| `sort`       | It’s used to sort the resultset. Use one or more fields as each element in the array, 1 means ordering upwards, -1 downward                                                                  | `\"sort\"`` ``=>`` ``array(\"name\"`` ``=>`` ``-1,`` ``\"status\"`` ``=>`` ``1)` |\n| `limit`      | Limit the results of the query to results to certain range                                                                                                                                   | `\"limit\"`` ``=>`` ``10`                                                    |\n| `skip`       | Skips a number of results                                                                                                                                                                    | `\"skip\"`` ``=>`` ``50`                                                     |\n\nIf you have experience with SQL databases, you may want to check the [SQL to Mongo Mapping Chart](http://www.php.net/manual/en/mongo.sqltomongo.php).\n\n## Aggregations\n\nA model can return calculations using [aggregation framework](http://docs.mongodb.org/manual/applications/aggregation/) provided by Mongo. The aggregated values are calculate without having to use MapReduce. With this option is easy perform tasks such as totaling or averaging field values:\n\n``` php\n$data = Article::aggregate(\n    [\n        [\n            \"\\$project\" => [\n                \"category\" => 1,\n            ],\n        ],\n        [\n            \"\\$group\" => [\n                \"_id\" => [\n                    \"category\" => \"\\$category\"\n                ],\n                \"id\"  => [\n                    \"\\$max\" => \"\\$_id\",\n                ],\n            ],\n        ],\n    ]\n);\n```\n\n## Creating Updating/Records\n\nThe `Phalcon\\Mvc\\Collection::save()` method allows you to create/update documents according to whether they already exist in the collection associated with a model. The `save()` method is called internally by the create and update methods of [*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection).\n\nAlso the method executes associated validators and events that are defined in the model:\n\n``` php\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\nif ($robot->save() === false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n```\n\nThe “\\_id” property is automatically updated with the [MongoId](http://www.php.net/manual/en/class.mongoid.php) object created by the driver:\n\n``` php\n$robot->save();\n\necho \"The generated id is: \", $robot->getId();\n```\n\n### Validation Messages\n\n[*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection) has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.\n\nEach message consists of an instance of the class [*Phalcon\\Mvc\\Model\\Message*](../api/phalcon_mvc_model_message). The set of messages generated can be retrieved with the method getMessages(). Each message provides extended information like the field name that generated the message or the message type:\n\n``` php\nif ($robot->save() === false) {\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo \"Message: \", $message->getMessage();\n        echo \"Field: \", $message->getField();\n        echo \"Type: \", $message->getType();\n    }\n}\n```\n\n### Validation Events and Events Manager\n\nModels allow you to implement events that will be thrown when performing an insert or update. They help define business rules for a certain model. The following are the events supported by [*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection) and their order of execution:\n\n| Operation          | Name                       | Can stop operation?   | Explanation                                                                                                        |\n|--------------------|----------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------|\n| Inserting/Updating | `beforeValidation`         | YES                   | Is executed before the validation process and the final insert/update to the database                              |\n| Inserting          | `beforeValidationOnCreate` | YES                   | Is executed before the validation process only when an insertion operation is being made                           |\n| Updating           | `beforeValidationOnUpdate` | YES                   | Is executed before the fields are validated for not nulls or foreign keys when an updating operation is being made |\n| Inserting/Updating | `onValidationFails`        | YES (already stopped) | Is executed before the validation process only when an insertion operation is being made                           |\n| Inserting          | `afterValidationOnCreate`  | YES                   | Is executed after the validation process when an insertion operation is being made                                 |\n| Updating           | `afterValidationOnUpdate`  | YES                   | Is executed after the validation process when an updating operation is being made                                  |\n| Inserting/Updating | `afterValidation`          | YES                   | Is executed after the validation process                                                                           |\n| Inserting/Updating | `beforeSave`               | YES                   | Runs before the required operation over the database system                                                        |\n| Updating           | `beforeUpdate`             | YES                   | Runs before the required operation over the database system only when an updating operation is being made          |\n| Inserting          | `beforeCreate`             | YES                   | Runs before the required operation over the database system only when an inserting operation is being made         |\n| Updating           | `afterUpdate`              | NO                    | Runs after the required operation over the database system only when an updating operation is being made           |\n| Inserting          | `afterCreate`              | NO                    | Runs after the required operation over the database system only when an inserting operation is being made          |\n| Inserting/Updating | `afterSave`                | NO                    | Runs after the required operation over the database system                                                         |\n\nTo make a model to react to an event, we must to implement a method with the same name of the event:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function beforeValidationOnCreate()\n    {\n        echo \"This is executed before creating a Robot!\";\n    }\n}\n```\n\nEvents can be useful to assign values before performing an operation, for example:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Products extends Collection\n{\n    public function beforeCreate()\n    {\n        // Set the creation date\n        $this->created_at = date(\"Y-m-d H:i:s\");\n    }\n\n    public function beforeUpdate()\n    {\n        // Set the modification date\n        $this->modified_in = date(\"Y-m-d H:i:s\");\n    }\n}\n```\n\nAdditionally, this component is integrated with [*Phalcon\\Events\\Manager*](events), this means we can create listeners that run when an event is triggered.\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n// Attach an anonymous function as a listener for \"model\" events\n$eventsManager->attach(\n    \"collection:beforeSave\",\n    function (Event $event, $robot) {\n        if ($robot->name === \"Scooby Doo\") {\n            echo \"Scooby Doo isn't a robot!\";\n\n            return false;\n        }\n\n        return true;\n    }\n);\n\n$robot = new Robots();\n\n$robot->setEventsManager($eventsManager);\n\n$robot->name = \"Scooby Doo\";\n$robot->year = 1969;\n\n$robot->save();\n```\n\nIn the example given above the EventsManager only acted as a bridge between an object and a listener (the anonymous function). If we want all objects created in our application use the same EventsManager, then we need to assign this to the Models Manager:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\Collection\\Manager as CollectionManager;\n\n// Registering the collectionManager service\n$di->set(\n    \"collectionManager\",\n    function () {\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for \"model\" events\n        $eventsManager->attach(\n            \"collection:beforeSave\",\n            function (Event $event, $model) {\n                if (get_class($model) === \"Robots\") {\n                    if ($model->name === \"Scooby Doo\") {\n                        echo \"Scooby Doo isn't a robot!\";\n\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        );\n\n        // Setting a default EventsManager\n        $modelsManager = new CollectionManager();\n\n        $modelsManager->setEventsManager($eventsManager);\n\n        return $modelsManager;\n    },\n    true\n);\n```\n\n### Implementing a Business Rule\n\nWhen an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.\n\nWe recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.\n\nThe following example implements an event that validates the year cannot be smaller than 0 on update or insert:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function beforeSave()\n    {\n        if ($this->year < 0) {\n            echo \"Year cannot be smaller than zero!\";\n\n            return false;\n        }\n    }\n}\n```\n\nSome events return false as an indication to stop the current operation. If an event doesn’t return anything, [*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection) will assume a true value.\n\n### Validating Data Integrity\n\n[*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection) provides several events to validate data and implement business rules. The special “validation” event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.\n\nThe following example shows how to use it:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\nclass Robots extends Collection\n{\n    public function validation()\n    {\n        $validation = new Validation();\n\n        $validation->add(\n            \"type\",\n            new InclusionIn(\n                [\n                    \"message\" => \"Type must be: mechanical or virtual\",\n                    \"domain\" => [\n                        \"Mechanical\",\n                        \"Virtual\",\n                    ],\n                ]\n            )\n        );\n\n        $validation->add(\n            \"price\",\n            new Numericality(\n                [\n                    \"message\" => \"Price must be numeric\"\n                ]\n            )\n        );\n\n        return $this->validate($validation);\n    }\n}\n```\n\nThe example given above performs a validation using the built-in validator “InclusionIn”. It checks the value of the field “type” in a domain list. If the value is not included in the method, then the validator will fail and return false.\n\n> For more information on validators, see the [*Validation documentation*](validation).\n\n## Deleting Records\n\nThe `Phalcon\\Mvc\\Collection::delete()` method allows you to delete a document. You can use it as follows:\n\n``` php\n$robot = Robots::findFirst();\n\nif ($robot !== false) {\n    if ($robot->delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot->getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n```\n\nYou can also delete many documents by traversing a resultset with a `foreach` loop:\n\n``` php\n$robots = Robots::find(\n    [\n        [\n            \"type\" => \"mechanical\",\n        ]\n    ]\n);\n\nforeach ($robots as $robot) {\n    if ($robot->delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot->getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n```\n\nThe following events are available to define custom business rules that can be executed when a delete operation is performed:\n\n| Operation | Name           | Can stop operation? | Explanation                              |\n|-----------|----------------|---------------------|------------------------------------------|\n| Deleting  | `beforeDelete` | YES                 | Runs before the delete operation is made |\n| Deleting  | `afterDelete`  | NO                  | Runs after the delete operation was made |\n\n## Validation Failed Events\n\nAnother type of events is available when the data validation process finds any inconsistency:\n\n| Operation                | Name                | Explanation                                                     |\n|--------------------------|---------------------|-----------------------------------------------------------------|\n| Insert or Update         | `notSave`           | Triggered when the insert/update operation fails for any reason |\n| Insert, Delete or Update | `onValidationFails` | Triggered when any data manipulation operation fails            |\n\n## Implicit Ids vs. User Primary Keys\n\nBy default [*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection) assumes that the `_id` attribute is automatically generated using [MongoIds](http://www.php.net/manual/en/class.mongoid.php). If a model uses custom primary keys this behavior can be overridden:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this->useImplicitObjectIds(false);\n    }\n}\n```\n\n## Setting multiple databases\n\nIn Phalcon, all models can belong to the same database connection or have an individual one. Actually, when [*Phalcon\\Mvc\\Collection*](../api/phalcon_mvc_collection) needs to connect to the database it requests the “mongo” service in the application’s services container. You can overwrite this service setting it in the initialize method:\n\n``` php\n// This service returns a mongo database at 192.168.1.100\n$di->set(\n    \"mongo1\",\n    function () {\n        $mongo = new MongoClient(\n            \"mongodb://scott:[email protected]\"\n        );\n\n        return $mongo->selectDB(\"management\");\n    },\n    true\n);\n\n// This service returns a mongo database at localhost\n$di->set(\n    \"mongo2\",\n    function () {\n        $mongo = new MongoClient(\n            \"mongodb://localhost\"\n        );\n\n        return $mongo->selectDB(\"invoicing\");\n    },\n    true\n);\n```\n\nThen, in the `initialize()` method, we define the connection service for the model:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this->setConnectionService(\"mongo1\");\n    }\n}\n```\n\n## Injecting services into Models\n\nYou may be required to access the application services within a model, the following example explains how to do that:\n\n``` php\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function notSave()\n    {\n        // Obtain the flash service from the DI container\n        $flash = $this->getDI()->getShared(\"flash\");\n\n        $messages = $this->getMessages();\n\n        // Show validation messages\n        foreach ($messages as $message) {\n            $flash->error(\n                (string) $message\n            );\n        }\n    }\n}\n```\n\nThe “notSave” event is triggered whenever a “creating” or “updating” action fails. We’re flashing the validation messages obtaining the “flash” service from the DI container. By doing this, we don’t have to print messages after each saving.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/odm.html](https://docs.phalconphp.com/en/latest/reference/odm.html)"
- name: Pagination
  id: reference/pagination
  summary: The process of pagination takes place when we need to present big groups of arbitrary data gradually
  description: "# Pagination\n\nThe process of pagination takes place when we need to present big groups of arbitrary data gradually. `Phalcon\\Paginator` offers a fast and convenient way to split these sets of data into browsable pages.\n\n## Data Adapters\n\nThis component makes use of adapters to encapsulate different sources of data:\n\n| Adapter                                                                                   | Description                                                                                                                                                                                                        |\n|-------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [*Phalcon\\Paginator\\Adapter\\NativeArray*](../api/phalcon_paginator_adapter_nativearray)   | Use a PHP array as source data                                                                                                                                                                                     |\n| [*Phalcon\\Paginator\\Adapter\\Model*](../api/phalcon_paginator_adapter_model)               | Use a [*Phalcon\\Mvc\\Model\\Resultset*](../api/phalcon_mvc_model_resultset) object as source data. Since PDO doesn’t support scrollable cursors this adapter shouldn’t be used to paginate a large number of records |\n| [*Phalcon\\Paginator\\Adapter\\QueryBuilder*](../api/phalcon_paginator_adapter_querybuilder) | Use a [*Phalcon\\Mvc\\Model\\Query\\Builder*](../api/phalcon_mvc_model_query_builder) object as source data                                                                                                            |\n\n## Examples\n\nIn the example below, the paginator will use the result of a query from a model as its source data, and limit the displayed data to 10 records per page:\n\n``` php\nuse Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\n\n// Current page to show\n// In a controller/component this can be:\n// $this->request->getQuery(\"page\", \"int\"); // GET\n// $this->request->getPost(\"page\", \"int\"); // POST\n$currentPage = (int) $_GET[\"page\"];\n\n// The data set to paginate\n$robots = Robots::find();\n\n// Create a Model paginator, show 10 rows by page starting from $currentPage\n$paginator = new PaginatorModel(\n    [\n        \"data\"  => $robots,\n        \"limit\" => 10,\n        \"page\"  => $currentPage,\n    ]\n);\n\n// Get the paginated results\n$page = $paginator->getPaginate();\n```\n\nThe `$currentPage` variable controls the page to be displayed. The `$paginator->getPaginate()` returns a `$page` object that contains the paginated data. It can be used for generating the pagination:\n\n``` html\n<table>\n    <tr>\n        <th>Id</th>\n        <th>Name</th>\n        <th>Type</th>\n    </tr>\n    <?php foreach ($page->items as $item) { ?>\n    <tr>\n        <td><?php echo $item->id; ?></td>\n        <td><?php echo $item->name; ?></td>\n        <td><?php echo $item->type; ?></td>\n    </tr>\n    <?php } ?>\n</table>\n```\n\nThe `$page` object also contains navigation data:\n\n``` html\n<a href=\"/robots/search\">First</a>\n<a href=\"/robots/search?page=<?= $page->before; ?>\">Previous</a>\n<a href=\"/robots/search?page=<?= $page->next; ?>\">Next</a>\n<a href=\"/robots/search?page=<?= $page->last; ?>\">Last</a>\n\n<?php echo \"You are in page \", $page->current, \" of \", $page->total_pages; ?>\n```\n\n## Adapters Usage\n\nAn example of the source data that must be used for each adapter:\n\n``` php\nuse Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\nuse Phalcon\\Paginator\\Adapter\\NativeArray as PaginatorArray;\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder as PaginatorQueryBuilder;\n\n// Passing a resultset as data\n$paginator = new PaginatorModel(\n    [\n        \"data\"  => Products::find(),\n        \"limit\" => 10,\n        \"page\"  => $currentPage,\n    ]\n);\n\n// Passing an array as data\n$paginator = new PaginatorArray(\n    [\n        \"data\"  => [\n            [\"id\" => 1, \"name\" => \"Artichoke\"],\n            [\"id\" => 2, \"name\" => \"Carrots\"],\n            [\"id\" => 3, \"name\" => \"Beet\"],\n            [\"id\" => 4, \"name\" => \"Lettuce\"],\n            [\"id\" => 5, \"name\" => \"\"],\n        ],\n        \"limit\" => 2,\n        \"page\"  => $currentPage,\n    ]\n);\n\n// Passing a QueryBuilder as data\n\n$builder = $this->modelsManager->createBuilder()\n    ->columns(\"id, name\")\n    ->from(\"Robots\")\n    ->orderBy(\"name\");\n\n$paginator = new PaginatorQueryBuilder(\n    [\n        \"builder\" => $builder,\n        \"limit\"   => 20,\n        \"page\"    => 1,\n    ]\n);\n```\n\n## Page Attributes\n\nThe `$page` object has the following attributes:\n\n| Attribute   | Description                                            |\n|-------------|--------------------------------------------------------|\n| items       | The set of records to be displayed at the current page |\n| current     | The current page                                       |\n| before      | The previous page to the current one                   |\n| next        | The next page to the current one                       |\n| last        | The last page in the set of records                    |\n| total_pages | The number of pages                                    |\n| total_items | The number of items in the source data                 |\n\n## Implementing your own adapters\n\nThe [*Phalcon\\Paginator\\AdapterInterface*](../api/phalcon_paginator_adapterinterface) interface must be implemented in order to create your own paginator adapters or extend the existing ones:\n\n``` php\nuse Phalcon\\Paginator\\AdapterInterface as PaginatorInterface;\n\nclass MyPaginator implements PaginatorInterface\n{\n    /**\n     * Adapter constructor\n     *\n     * @param array $config\n     */\n    public function __construct($config);\n\n    /**\n     * Set the current page number\n     *\n     * @param int $page\n     */\n    public function setCurrentPage($page);\n\n    /**\n     * Returns a slice of the resultset to show in the pagination\n     *\n     * @return stdClass\n     */\n    public function getPaginate();\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/pagination.html](https://docs.phalconphp.com/en/latest/reference/pagination.html)"
- name: Paginator\Adapter
  id: api/phalcon_paginator_adapter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Paginator\\Adapter**\n\n*implements* [*Phalcon\\Paginator\\AdapterInterface*](phalcon_paginator_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter.zep)\n\n## Methods\n\n### public **setCurrentPage** (*mixed* $page)\n\nSet the current page number\n\n### public **setLimit** (*mixed* $limitRows)\n\nSet current rows limit\n\n### public **getLimit** ()\n\nGet current rows limit\n\n### abstract public **getPaginate** () inherited from [*Phalcon\\Paginator\\AdapterInterface*](phalcon_paginator_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter.html)"
- name: Paginator\Adapter::getLimit
  id: api/phalcon_paginator_adapter#getlimit
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Paginator\Adapter
  description: "### public **getLimit** ()\n\nGet current rows limit\n\n### abstract public **getPaginate** () inherited from [*Phalcon\\Paginator\\AdapterInterface*](phalcon_paginator_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter.html)"
- name: Paginator\Adapter::setCurrentPage
  id: api/phalcon_paginator_adapter#setcurrentpage
  summary: null
  belongs_to: Paginator\Adapter
  description: |-
    ### public **setCurrentPage** (*mixed* $page)

    Set the current page number
- name: Paginator\Adapter::setLimit
  id: api/phalcon_paginator_adapter#setlimit
  summary: null
  belongs_to: Paginator\Adapter
  description: |-
    ### public **setLimit** (*mixed* $limitRows)

    Set current rows limit
- name: Paginator\AdapterInterface
  id: api/phalcon_paginator_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Paginator\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapterinterface.zep)\n\n## Methods\n\n### abstract public **setCurrentPage** (*mixed* $page)\n\n...\n\n### abstract public **getPaginate** ()\n\n...\n\n### abstract public **setLimit** (*mixed* $limit)\n\n...\n\n### abstract public **getLimit** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_AdapterInterface.html)"
- name: Paginator\AdapterInterface::getLimit
  id: api/phalcon_paginator_adapterinterface#getlimit
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Paginator\AdapterInterface
  description: "### abstract public **getLimit** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_AdapterInterface.html)"
- name: Paginator\AdapterInterface::getPaginate
  id: api/phalcon_paginator_adapterinterface#getpaginate
  summary: null
  belongs_to: Paginator\AdapterInterface
  description: |-
    ### abstract public **getPaginate** ()

    ...
- name: Paginator\AdapterInterface::setCurrentPage
  id: api/phalcon_paginator_adapterinterface#setcurrentpage
  summary: null
  belongs_to: Paginator\AdapterInterface
  description: |-
    ### abstract public **setCurrentPage** (*mixed* $page)

    ...
- name: Paginator\AdapterInterface::setLimit
  id: api/phalcon_paginator_adapterinterface#setlimit
  summary: null
  belongs_to: Paginator\AdapterInterface
  description: |-
    ### abstract public **setLimit** (*mixed* $limit)

    ...
- name: Paginator\Adapter\Model
  id: api/phalcon_paginator_adapter_model
  summary: This adapter allows to paginate data using a Phalcon\Mvc\Model resultset as a base
  description: "# Class **Phalcon\\Paginator\\Adapter\\Model**\n\n*extends* abstract class [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\n*implements* [*Phalcon\\Paginator\\AdapterInterface*](phalcon_paginator_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter/model.zep)\n\nThis adapter allows to paginate data using a Phalcon\\Mvc\\Model resultset as a base.\n\n``` php\nuse Phalcon\\Paginator\\Adapter\\Model;\n\n$paginator = new Model(\n    [\n        \"data\"  => Robots::find(),\n        \"limit\" => 25,\n        \"page\"  => $currentPage,\n    ]\n);\n\n$paginate = $paginator->getPaginate();\n```\n\n## Methods\n\n### public **\\_\\_construct** (*array* $config)\n\nPhalcon\\Paginator\\Adapter\\Model constructor\n\n### public **getPaginate** ()\n\nReturns a slice of the resultset to show in the pagination\n\n### public **setCurrentPage** (*mixed* $page) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet the current page number\n\n### public **setLimit** (*mixed* $limitRows) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet current rows limit\n\n### public **getLimit** () inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nGet current rows limit\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_Model.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_Model.html)"
- name: Paginator\Adapter\Model::getPaginate
  id: api/phalcon_paginator_adapter_model#getpaginate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Paginator\Adapter\Model
  description: "### public **getPaginate** ()\n\nReturns a slice of the resultset to show in the pagination\n\n### public **setCurrentPage** (*mixed* $page) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet the current page number\n\n### public **setLimit** (*mixed* $limitRows) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet current rows limit\n\n### public **getLimit** () inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nGet current rows limit\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_Model.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_Model.html)"
- name: Paginator\Adapter\NativeArray
  id: api/phalcon_paginator_adapter_nativearray
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Paginator\\Adapter\\NativeArray**\n\n*extends* abstract class [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\n*implements* [*Phalcon\\Paginator\\AdapterInterface*](phalcon_paginator_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter/nativearray.zep)\n\nPagination using a PHP array as source of data\n\n``` php\nuse Phalcon\\Paginator\\Adapter\\NativeArray;\n\n$paginator = new NativeArray(\n    [\n        \"data\"  => [\n            [\"id\" => 1, \"name\" => \"Artichoke\"],\n            [\"id\" => 2, \"name\" => \"Carrots\"],\n            [\"id\" => 3, \"name\" => \"Beet\"],\n            [\"id\" => 4, \"name\" => \"Lettuce\"],\n            [\"id\" => 5, \"name\" => \"\"],\n        ],\n        \"limit\" => 2,\n        \"page\"  => $currentPage,\n    ]\n);\n```\n\n## Methods\n\n### public **\\_\\_construct** (*array* $config)\n\nPhalcon\\Paginator\\Adapter\\NativeArray constructor\n\n### public **getPaginate** ()\n\nReturns a slice of the resultset to show in the pagination\n\n### public **setCurrentPage** (*mixed* $page) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet the current page number\n\n### public **setLimit** (*mixed* $limitRows) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet current rows limit\n\n### public **getLimit** () inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nGet current rows limit\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_NativeArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_NativeArray.html)"
- name: Paginator\Adapter\NativeArray::getPaginate
  id: api/phalcon_paginator_adapter_nativearray#getpaginate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Paginator\Adapter\NativeArray
  description: "### public **getPaginate** ()\n\nReturns a slice of the resultset to show in the pagination\n\n### public **setCurrentPage** (*mixed* $page) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet the current page number\n\n### public **setLimit** (*mixed* $limitRows) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet current rows limit\n\n### public **getLimit** () inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nGet current rows limit\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_NativeArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_NativeArray.html)"
- name: Paginator\Adapter\QueryBuilder
  id: api/phalcon_paginator_adapter_querybuilder
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Paginator\\Adapter\\QueryBuilder**\n\n*extends* abstract class [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\n*implements* [*Phalcon\\Paginator\\AdapterInterface*](phalcon_paginator_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter/querybuilder.zep)\n\nPagination using a PHQL query builder as source of data\n\n``` php\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder;\n\n$builder = $this->modelsManager->createBuilder()\n                ->columns(\"id, name\")\n                ->from(\"Robots\")\n                ->orderBy(\"name\");\n\n$paginator = new QueryBuilder(\n    [\n        \"builder\" => $builder,\n        \"limit\"   => 20,\n        \"page\"    => 1,\n    ]\n);\n```\n\n## Methods\n\n### public **\\_\\_construct** (*array* $config)\n\n### public **getCurrentPage** ()\n\nGet the current page number\n\n### public **setQueryBuilder** ([*Phalcon\\Mvc\\Model\\Query\\Builder*](phalcon_mvc_model_query_builder) $builder)\n\nSet query builder object\n\n### public **getQueryBuilder** ()\n\nGet query builder object\n\n### public **getPaginate** ()\n\nReturns a slice of the resultset to show in the pagination\n\n### public **setCurrentPage** (*mixed* $page) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet the current page number\n\n### public **setLimit** (*mixed* $limitRows) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet current rows limit\n\n### public **getLimit** () inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nGet current rows limit\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_QueryBuilder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_QueryBuilder.html)"
- name: Paginator\Adapter\QueryBuilder::getCurrentPage
  id: api/phalcon_paginator_adapter_querybuilder#getcurrentpage
  summary: null
  belongs_to: Paginator\Adapter\QueryBuilder
  description: |-
    ### public **getCurrentPage** ()

    Get the current page number
- name: Paginator\Adapter\QueryBuilder::getPaginate
  id: api/phalcon_paginator_adapter_querybuilder#getpaginate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Paginator\Adapter\QueryBuilder
  description: "### public **getPaginate** ()\n\nReturns a slice of the resultset to show in the pagination\n\n### public **setCurrentPage** (*mixed* $page) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet the current page number\n\n### public **setLimit** (*mixed* $limitRows) inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nSet current rows limit\n\n### public **getLimit** () inherited from [*Phalcon\\Paginator\\Adapter*](phalcon_paginator_adapter)\n\nGet current rows limit\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_QueryBuilder.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_QueryBuilder.html)"
- name: Paginator\Adapter\QueryBuilder::getQueryBuilder
  id: api/phalcon_paginator_adapter_querybuilder#getquerybuilder
  summary: null
  belongs_to: Paginator\Adapter\QueryBuilder
  description: |-
    ### public **getQueryBuilder** ()

    Get query builder object
- name: Paginator\Adapter\QueryBuilder::setQueryBuilder
  id: api/phalcon_paginator_adapter_querybuilder#setquerybuilder
  summary: null
  belongs_to: Paginator\Adapter\QueryBuilder
  description: |-
    ### public **setQueryBuilder** ([*Phalcon\Mvc\Model\Query\Builder*](phalcon_mvc_model_query_builder) $builder)

    Set query builder object
- name: Paginator\Exception
  id: api/phalcon_paginator_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Paginator\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Exception.html)"
- name: Phalcon Developer Tools
  id: reference/tools
  summary: These tools are a collection of useful scripts to generate skeleton code
  description: "# Phalcon Developer Tools\n\nThese tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.\n\n> If you prefer to use the web version instead of the console, this [blog post](https://blog.phalconphp.com/post/dont-like-command-line-and-consoles-no-problem) offers more information.\n\n## Download\n\nYou can download or clone a cross platform package containing the developer tools from [Github](https://github.com/phalcon/phalcon-devtools).\n\n### Installation\n\nThese are detailed instructions on how to install the developer tools on different platforms:\n\n- [Phalcon Developer Tools on Windows](wintools)\n- [Phalcon Developer Tools on Mac OS X](mactools)\n- [Phalcon Developer Tools on Linux](linuxtools)\n\n## Getting Available Commands\n\nYou can get a list of available commands in Phalcon tools by typing: `phalcon`` ``commands`\n\n``` sh\n$ phalcon commands\n\nPhalcon DevTools (3.0.0)\n\nAvailable commands:\n  commands         (alias of: list, enumerate)\n  controller       (alias of: create-controller)\n  module           (alias of: create-module)\n  model            (alias of: create-model)\n  all-models       (alias of: create-all-models)\n  project          (alias of: create-project)\n  scaffold         (alias of: create-scaffold)\n  migration        (alias of: create-migration)\n  webtools         (alias of: create-webtools)\n```\n\n## Generating a Project Skeleton\n\nYou can use Phalcon tools to generate pre-defined project skeletons for your applications with Phalcon framework. By default the project skeleton generator will use mod_rewrite for Apache. Type the following command on your web server document root:\n\n``` sh\n$ pwd\n\n/Applications/MAMP/htdocs\n\n$ phalcon create-project store\n```\n\nThe above recommended project structure was generated:\n\nYou could add the parameter *–help* to get help on the usage of a certain script:\n\n``` sh\n$ phalcon project --help\n\nPhalcon DevTools (3.0.0)\n\nHelp:\n  Creates a project\n\nUsage:\n  project [name] [type] [directory] [enable-webtools]\n\nArguments:\n  help    Shows this help text\n\nExample\n  phalcon project store simple\n\nOptions:\n --name               Name of the new project\n --enable-webtools    Determines if webtools should be enabled [optional]\n --directory=s        Base path on which project will be created [optional]\n --type=s             Type of the application to be generated (cli, micro, simple, modules)\n --template-path=s    Specify a template path [optional]\n --use-config-ini     Use a ini file as configuration file [optional]\n --trace              Shows the trace of the framework in case of exception. [optional]\n --help               Shows this help\n```\n\nAccessing the project from the web server will show you:\n\n## Generating Controllers\n\nThe command “create-controller” generates controller skeleton structures. It’s important to invoke this command inside a directory that already has a Phalcon project.\n\n``` sh\n$ phalcon create-controller --name test\n```\n\nThe following code is generated by the script:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass TestController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n```\n\n## Preparing Database Settings\n\nWhen a project is generated using developer tools. A configuration file can be found in *app/config/config.ini* To generate models or scaffold, you will need to change the settings used to connect to your database.\n\nChange the database section in your config.ini file:\n\n``` ini\n[database]\nadapter  = Mysql\nhost     = \"127.0.0.1\"\nusername = \"root\"\npassword = \"secret\"\ndbname   = \"store_db\"\n\n[phalcon]\ncontrollersDir = \"../app/controllers/\"\nmodelsDir      = \"../app/models/\"\nviewsDir       = \"../app/views/\"\nbaseUri        = \"/store/\"\n```\n\n## Generating Models\n\nThere are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.\n\nOptions:  \n|                     |                                                                     |\n|---------------------|---------------------------------------------------------------------|\n| --name=`s`          | Table name                                                          |\n| --schema=`s`        | Name of the schema. \\[optional\\]                                    |\n| --namespace=`s`     | Model’s namespace \\[optional\\]                                      |\n| --get-set           | Attributes will be protected and have setters/getters. \\[optional\\] |\n| --extends=`s`       | Model extends the class name supplied \\[optional\\]                  |\n| --excludefields=`l` |                                                                     |\n|                     | Excludes fields defined in a comma separated list \\[optional\\]      |\n| --doc               | Helps to improve code completion on IDEs \\[optional\\]               |\n| --directory=`s`     | Base path on which project will be created \\[optional\\]             |\n| --force             | Rewrite the model. \\[optional\\]                                     |\n| --trace             | Shows the trace of the framework in case of exception. \\[optional\\] |\n| --mapcolumn         | Get some code for map columns. \\[optional\\]                         |\n| --abstract          | Abstract Model \\[optional\\]                                         |\n\nThe simplest way to generate a model is:\n\n``` sh\n$ phalcon model products\n```\n\n``` sh\n$ phalcon model --name tablename\n```\n\nAll table fields are declared public for direct access.\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    /**\n     * @var integer\n     */\n    public $id;\n\n    /**\n     * @var integer\n     */\n    public $typesId;\n\n    /**\n     * @var string\n     */\n    public $name;\n\n    /**\n     * @var string\n     */\n    public $price;\n\n    /**\n     * @var integer\n     */\n    public $quantity;\n\n    /**\n     * @var string\n     */\n    public $status;\n}\n```\n\nBy adding the *–get-set* you can generate the fields with protected variables and public setter/getter methods. Those methods can help in business logic implementation within the setter/getter methods.\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    /**\n     * @var integer\n     */\n    protected $id;\n\n    /**\n     * @var integer\n     */\n    protected $typesId;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string\n     */\n    protected $price;\n\n    /**\n     * @var integer\n     */\n    protected $quantity;\n\n    /**\n     * @var string\n     */\n    protected $status;\n\n\n    /**\n     * Method to set the value of field id\n     *\n     * @param integer $id\n     */\n    public function setId($id)\n    {\n        $this->id = $id;\n    }\n\n    /**\n     * Method to set the value of field typesId\n     *\n     * @param integer $typesId\n     */\n    public function setTypesId($typesId)\n    {\n        $this->typesId = $typesId;\n    }\n\n    // ...\n\n    /**\n     * Returns the value of field status\n     *\n     * @return string\n     */\n    public function getStatus()\n    {\n        return $this->status;\n    }\n}\n```\n\nA nice feature of the model generator is that it keeps changes made by the developer between code generations. This allows the addition or removal of fields and properties, without worrying about losing changes made to the model itself. The following screencast shows you how it works:\n\n## Scaffold a CRUD\n\nScaffolding is a quick way to generate some of the major pieces of an application. If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.\n\nOnce the code is generated, it will have to be customized to meet your needs. Many developers avoid scaffolding entirely, opting to write all or most of their source code from scratch. The generated code can serve as a guide to better understand of how the framework works or develop prototypes. The code below shows a scaffold based on the table “products”:\n\n``` sh\n$ phalcon scaffold --table-name products\n```\n\nThe scaffold generator will build several files in your application, along with some folders. Here’s a quick overview of what will be generated:\n\n| File                                   | Purpose                        |\n|----------------------------------------|--------------------------------|\n| app/controllers/ProductsController.php | The Products controller        |\n| app/models/Products.php                | The Products model             |\n| app/views/layout/products.phtml        | Controller layout for Products |\n| app/views/products/new.phtml           | View for the action “new”      |\n| app/views/products/edit.phtml          | View for the action “edit”     |\n| app/views/products/search.phtml        | View for the action “search”   |\n\nWhen browsing the recently generated controller, you will see a search form and a link to create a new Product:\n\nThe “create page” allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.\n\nAfter performing a search, a pager component is available to show paged results. Use the “Edit” or “Delete” links in front of each result to perform such actions.\n\n## Web Interface to Tools\n\nAlso, if you prefer, it’s possible to use Phalcon Developer Tools from a web interface. Check out the following screencast to figure out how it works:\n\n## Integrating Tools with PhpStorm IDE\n\nThe screencast below shows how to integrate developer tools with the [PhpStorm IDE](http://www.jetbrains.com/phpstorm/). The configuration steps could be easily adapted to other IDEs for PHP.\n\n## Conclusion\n\nPhalcon Developer Tools provides an easy way to generate code for your application, reducing development time and potential coding errors.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tools.html](https://docs.phalconphp.com/en/latest/reference/tools.html)"
- name: Phalcon Developer Tools on Linux
  id: reference/linuxtools
  summary: These steps will guide you through the process of installing Phalcon Developer Tools for Linux
  description: "# Phalcon Developer Tools on Linux\n\nThese steps will guide you through the process of installing Phalcon Developer Tools for Linux.\n\n## Prerequisites\n\nThe Phalcon PHP extension is required to run Phalcon Tools. If you haven’t installed it yet, please see the [*Installation*](install) section for instructions.\n\n## Download\n\nYou can download a cross platform package containing the developer tools from the [Download](http://phalconphp.com/download) section. Also you can clone it from [Github](https://github.com/phalcon/phalcon-devtools).\n\nOpen a terminal and type the command below:\n\n``` bash\ngit clone git://github.com/phalcon/phalcon-devtools.git\n```\n\nThen enter the folder where the tools were cloned and execute ”. ./phalcon.sh”, (don’t forget the dot at beginning of the command):\n\n``` bash\ncd phalcon-devtools/\n\n. ./phalcon.sh\n```\n\nCreate a symbolink link to the phalcon.php script:\n\n``` bash\nln -s ~/phalcon-devtools/phalcon.php /usr/bin/phalcon\n\nchmod ugo+x /usr/bin/phalcon\n```\n\nCongratulations you now have Phalcon tools installed!\n\n### Related Guides\n\n- [*Using Developer Tools*](tools)\n- [*Installation on Windows*](wintools)\n- [*Installation on Mac*](mactools)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/linuxtools.html](https://docs.phalconphp.com/en/latest/reference/linuxtools.html)"
- name: Phalcon Developer Tools on Mac OS X
  id: reference/mactools
  summary: These steps will guide you through the process of installing Phalcon Developer Tools for OS/X
  description: "# Phalcon Developer Tools on Mac OS X\n\nThese steps will guide you through the process of installing Phalcon Developer Tools for OS/X.\n\n## Prerequisites\n\nThe Phalcon PHP extension is required to run Phalcon Tools. If you haven’t installed it yet, please see the [*Installation*](install) section for instructions.\n\n## Download\n\nYou can download a cross platform package containing the developer tools from the [Download](http://phalconphp.com/download) section. You can also clone it from [Github](https://github.com/phalcon/phalcon-devtools).\n\nOpen the terminal application:\n\nCopy & Paste the commands below in your terminal:\n\n``` bash\ngit clone git://github.com/phalcon/phalcon-devtools.git\n```\n\nThen enter the folder where the tools were cloned and execute ”. ./phalcon.sh”, (don’t forget the dot at beginning of the command):\n\n``` bash\ncd phalcon-devtools/\n\n. ./phalcon.sh\n```\n\nIn the terminal window, type the following commands to create a symbolic link to the phalcon.php script:\n\n``` bash\nln -s ~/phalcon-tools/phalcon.php ~/phalcon-tools/phalcon\n\nchmod +x ~/phalcon-tools/phalcon\n```\n\nType the command “phalcon” and you will see something like this:\n\nCongratulations you now have Phalcon tools installed!\n\n### Related Guides\n\n- [*Using Developer Tools*](tools)\n- [*Installation on Windows*](wintools)\n- [*Installation on Linux*](linuxtools)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/mactools.html](https://docs.phalconphp.com/en/latest/reference/mactools.html)"
- name: Phalcon Developer Tools on Windows
  id: reference/wintools
  summary: These steps will guide you through the process of installing Phalcon Developer Tools for Windows
  description: "# Phalcon Developer Tools on Windows\n\nThese steps will guide you through the process of installing Phalcon Developer Tools for Windows.\n\n## Prerequisites\n\nThe Phalcon PHP extension is required to run Phalcon Tools. If you haven’t installed it yet, please see the [*Installation*](install) section for instructions.\n\n## Download\n\nYou can download a cross platform package containing the developer tools from the [Download](http://phalconphp.com/download) section. Also you can clone it from [Github](https://github.com/phalcon/phalcon-devtools).\n\nOn the Windows platform, you need to configure the system PATH to include Phalcon tools as well as the PHP executable. If you download the Phalcon tools as a zip archive, extract it on any path of your local drive i.e. *c:\\phalcon-tools*. You will need this path in the steps below. Edit the file “phalcon.bat” by right clicking on the file and selecting “Edit”:\n\nChange the path to the one you installed the Phalcon tools (set PTOOLSPATH=C:phalcon-tools):\n\nSave the changes.\n\n### Adding PHP and Tools to your system PATH\n\nBecause the scripts are written in PHP, you need to install it on your machine. Depending on your PHP installation, the executable can be located in various places. Search for the file php.exe and copy the path it is located in. For instance, if using the latest WAMP stack, PHP is located in: *C:\\wampbin\\php\\php5.3.10\\php.exe*.\n\nFrom the Windows start menu, right mouse click on the “Computer” icon and select “Properties”:\n\nClick the “Advanced” tab and then the button “Environment Variables”:\n\nAt the bottom, look for the section “System variables” and edit the variable “Path”:\n\nBe very careful on this step! You need to append at the end of the long string the path where your php.exe was located and the path where Phalcon tools are installed. Use the ”;” character to separate the different paths in the variable:\n\nAccept the changes made by clicking “OK” and close the dialogs opened. From the start menu click on the option “Run”. If you can’t find this option, press “Windows Key” + “R”.\n\nType “cmd” and press enter to open the windows command line utility:\n\nType the commands “php -v” and “phalcon” and you will see something like this:\n\nCongratulations you now have Phalcon tools installed!\n\n### Related Guides\n\n- [*Using Developer Tools*](tools)\n- [*Installation on OS X*](mactools)\n- [*Installation on Linux*](linuxtools)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/wintools.html](https://docs.phalconphp.com/en/latest/reference/wintools.html)"
- name: Phalcon Query Language (PHQL)
  id: reference/phql
  summary: Phalcon Query Language, PhalconQL or simply PHQL is a high-level, object-oriented SQL dialect that allows to write queries using a standardized SQL-like language
  description: "# Phalcon Query Language (PHQL)\n\nPhalcon Query Language, PhalconQL or simply PHQL is a high-level, object-oriented SQL dialect that allows to write queries using a standardized SQL-like language. PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS.\n\nTo achieve the highest performance possible, Phalcon provides a parser that uses the same technology as [SQLite](http://en.wikipedia.org/wiki/Lemon_Parser_Generator). This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.\n\nThe parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.\n\nIn PHQL, we’ve implemented a set of features to make your access to databases more secure:\n\n- Bound parameters are part of the PHQL language helping you to secure your code\n- PHQL only allows one SQL statement to be executed per call preventing injections\n- PHQL ignores all SQL comments which are often used in SQL injections\n- PHQL only allows data manipulation statements, avoiding altering or dropping tables/databases by mistake or externally without authorization\n- PHQL implements a high-level abstraction allowing you to handle tables as models and fields as class attributes\n\n## Usage Example\n\nTo better explain how PHQL works consider the following example. We have two models “Cars” and “Brands”:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Cars extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $brand_id;\n\n    public $price;\n\n    public $year;\n\n    public $style;\n\n    /**\n     * This model is mapped to the table sample_cars\n     */\n    public function getSource()\n    {\n        return \"sample_cars\";\n    }\n\n    /**\n     * A car only has a Brand, but a Brand have many Cars\n     */\n    public function initialize()\n    {\n        $this->belongsTo(\"brand_id\", \"Brands\", \"id\");\n    }\n}\n```\n\nAnd every Car has a Brand, so a Brand has many Cars:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Brands extends Model\n{\n    public $id;\n\n    public $name;\n\n    /**\n     * The model Brands is mapped to the \"sample_brands\" table\n     */\n    public function getSource()\n    {\n        return \"sample_brands\";\n    }\n\n    /**\n     * A Brand can have many Cars\n     */\n    public function initialize()\n    {\n        $this->hasMany(\"id\", \"Cars\", \"brand_id\");\n    }\n}\n```\n\n## Creating PHQL Queries\n\nPHQL queries can be created just by instantiating the class [*Phalcon\\Mvc\\Model\\Query*](../api/phalcon_mvc_model_query):\n\n``` php\nuse Phalcon\\Mvc\\Model\\Query;\n\n// Instantiate the Query\n$query = new Query(\n    \"SELECT * FROM Cars\",\n    $this->getDI()\n);\n\n// Execute the query returning a result if any\n$cars = $query->execute();\n```\n\nFrom a controller or a view, it’s easy to create/execute them using an injected [*models manager*](../api/phalcon_mvc_model_manager):\n\n``` php\n// Executing a simple query\n$query = $this->modelsManager->createQuery(\"SELECT * FROM Cars\");\n$cars  = $query->execute();\n\n// With bound parameters\n$query = $this->modelsManager->createQuery(\"SELECT * FROM Cars WHERE name = :name:\");\n$cars  = $query->execute(\n    [\n        \"name\" => \"Audi\",\n    ]\n);\n```\n\nOr simply execute it:\n\n``` php\n// Executing a simple query\n$cars = $this->modelsManager->executeQuery(\n    \"SELECT * FROM Cars\"\n);\n\n// Executing with bound parameters\n$cars = $this->modelsManager->executeQuery(\n    \"SELECT * FROM Cars WHERE name = :name:\",\n    [\n        \"name\" => \"Audi\",\n    ]\n);\n```\n\n## Selecting Records\n\nAs the familiar SQL, PHQL allows querying of records using the SELECT statement we know, except that instead of specifying tables, we use the models classes:\n\n``` php\n$query = $manager->createQuery(\n    \"SELECT * FROM Cars ORDER BY Cars.name\"\n);\n\n$query = $manager->createQuery(\n    \"SELECT Cars.name FROM Cars ORDER BY Cars.name\"\n);\n```\n\nClasses in namespaces are also allowed:\n\n``` php\n$phql  = \"SELECT * FROM Formula\\Cars ORDER BY Formula\\Cars.name\";\n$query = $manager->createQuery($phql);\n\n$phql  = \"SELECT Formula\\Cars.name FROM Formula\\Cars ORDER BY Formula\\Cars.name\";\n$query = $manager->createQuery($phql);\n\n$phql  = \"SELECT c.name FROM Formula\\Cars c ORDER BY c.name\";\n$query = $manager->createQuery($phql);\n```\n\nMost of the SQL standard is supported by PHQL, even nonstandard directives such as LIMIT:\n\n``` php\n$phql = \"SELECT c.name FROM Cars AS c WHERE c.brand_id = 21 ORDER BY c.name LIMIT 100\";\n\n$query = $manager->createQuery($phql);\n```\n\n### Result Types\n\nDepending on the type of columns we query, the result type will vary. If you retrieve a single whole object, then the object returned is a [*Phalcon\\Mvc\\Model\\Resultset\\Simple*](../api/phalcon_mvc_model_resultset_simple). This kind of resultset is a set of complete model objects:\n\n``` php\n$phql = \"SELECT c.* FROM Cars AS c ORDER BY c.name\";\n\n$cars = $manager->executeQuery($phql);\n\nforeach ($cars as $car) {\n    echo \"Name: \", $car->name, \"\\n\";\n}\n```\n\nThis is exactly the same as:\n\n``` php\n$cars = Cars::find(\n    [\n        \"order\" => \"name\"\n    ]\n);\n\nforeach ($cars as $car) {\n    echo \"Name: \", $car->name, \"\\n\";\n}\n```\n\nComplete objects can be modified and re-saved in the database because they represent a complete record of the associated table. There are other types of queries that do not return complete objects, for example:\n\n``` php\n$phql = \"SELECT c.id, c.name FROM Cars AS c ORDER BY c.name\";\n\n$cars = $manager->executeQuery($phql);\n\nforeach ($cars as $car) {\n    echo \"Name: \", $car->name, \"\\n\";\n}\n```\n\nWe are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resultset of type [*Phalcon\\Mvc\\Model\\Resultset\\Simple*](../api/phalcon_mvc_model_resultset_simple). However, each element is a standard object that only contain the two columns that were requested.\n\nThese values that don’t represent complete objects are what we call scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:\n\n``` php\n$phql = \"SELECT CONCAT(c.id, ' ', c.name) AS id_name FROM Cars AS c ORDER BY c.name\";\n\n$cars = $manager->executeQuery($phql);\n\nforeach ($cars as $car) {\n    echo $car->id_name, \"\\n\";\n}\n```\n\nAs we can query complete objects or scalars, we can also query both at once:\n\n``` php\n$phql = \"SELECT c.price*0.16 AS taxes, c.* FROM Cars AS c ORDER BY c.name\";\n\n$result = $manager->executeQuery($phql);\n```\n\nThe result in this case is an object [*Phalcon\\Mvc\\Model\\Resultset\\Complex*](../api/phalcon_mvc_model_resultset_complex). This allows access to both complete objects and scalars at once:\n\n``` php\nforeach ($result as $row) {\n    echo \"Name: \", $row->cars->name, \"\\n\";\n    echo \"Price: \", $row->cars->price, \"\\n\";\n    echo \"Taxes: \", $row->taxes, \"\\n\";\n}\n```\n\nScalars are mapped as properties of each “row”, while complete objects are mapped as properties with the name of its related model.\n\n### Joins\n\nIt’s easy to request records from multiple models using PHQL. Most kinds of Joins are supported. As we defined relationships in the models, PHQL adds these conditions automatically:\n\n``` php\n$phql = \"SELECT Cars.name AS car_name, Brands.name AS brand_name FROM Cars JOIN Brands\";\n\n$rows = $manager->executeQuery($phql);\n\nforeach ($rows as $row) {\n    echo $row->car_name, \"\\n\";\n    echo $row->brand_name, \"\\n\";\n}\n```\n\nBy default, an INNER JOIN is assumed. You can specify the type of JOIN in the query:\n\n``` php\n$phql = \"SELECT Cars.*, Brands.* FROM Cars INNER JOIN Brands\";\n$rows = $manager->executeQuery($phql);\n\n$phql = \"SELECT Cars.*, Brands.* FROM Cars LEFT JOIN Brands\";\n$rows = $manager->executeQuery($phql);\n\n$phql = \"SELECT Cars.*, Brands.* FROM Cars LEFT OUTER JOIN Brands\";\n$rows = $manager->executeQuery($phql);\n\n$phql = \"SELECT Cars.*, Brands.* FROM Cars CROSS JOIN Brands\";\n$rows = $manager->executeQuery($phql);\n```\n\nIt is also possible to manually set the conditions of the JOIN:\n\n``` php\n$phql = \"SELECT Cars.*, Brands.* FROM Cars INNER JOIN Brands ON Brands.id = Cars.brands_id\";\n\n$rows = $manager->executeQuery($phql);\n```\n\nAlso, the joins can be created using multiple tables in the FROM clause:\n\n``` php\n$phql = \"SELECT Cars.*, Brands.* FROM Cars, Brands WHERE Brands.id = Cars.brands_id\";\n\n$rows = $manager->executeQuery($phql);\n\nforeach ($rows as $row) {\n    echo \"Car: \", $row->cars->name, \"\\n\";\n    echo \"Brand: \", $row->brands->name, \"\\n\";\n}\n```\n\nIf an alias is used to rename the models in the query, those will be used to name the attributes in the every row of the result:\n\n``` php\n$phql = \"SELECT c.*, b.* FROM Cars c, Brands b WHERE b.id = c.brands_id\";\n\n$rows = $manager->executeQuery($phql);\n\nforeach ($rows as $row) {\n    echo \"Car: \", $row->c->name, \"\\n\";\n    echo \"Brand: \", $row->b->name, \"\\n\";\n}\n```\n\nWhen the joined model has a many-to-many relation to the ‘from’ model, the intermediate model is implicitly added to the generated query:\n\n``` php\n$phql = \"SELECT Artists.name, Songs.name FROM Artists \" .\n        \"JOIN Songs WHERE Artists.genre = 'Trip-Hop'\";\n\n$result = $this->modelsManager->executeQuery($phql);\n```\n\nThis code executes the following SQL in MySQL:\n\n``` sql\nSELECT `artists`.`name`, `songs`.`name` FROM `artists`\nINNER JOIN `albums` ON `albums`.`artists_id` = `artists`.`id`\nINNER JOIN `songs` ON `albums`.`songs_id` = `songs`.`id`\nWHERE `artists`.`genre` = 'Trip-Hop'\n```\n\n### Aggregations\n\nThe following examples show how to use aggregations in PHQL:\n\n``` php\n// How much are the prices of all the cars?\n$phql = \"SELECT SUM(price) AS summatory FROM Cars\";\n$row  = $manager->executeQuery($phql)->getFirst();\necho $row['summatory'];\n\n// How many cars are by each brand?\n$phql = \"SELECT Cars.brand_id, COUNT(*) FROM Cars GROUP BY Cars.brand_id\";\n$rows = $manager->executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row->brand_id, ' ', $row[\"1\"], \"\\n\";\n}\n\n// How many cars are by each brand?\n$phql = \"SELECT Brands.name, COUNT(*) FROM Cars JOIN Brands GROUP BY 1\";\n$rows = $manager->executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row->name, ' ', $row[\"1\"], \"\\n\";\n}\n\n$phql = \"SELECT MAX(price) AS maximum, MIN(price) AS minimum FROM Cars\";\n$rows = $manager->executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row[\"maximum\"], ' ', $row[\"minimum\"], \"\\n\";\n}\n\n// Count distinct used brands\n$phql = \"SELECT COUNT(DISTINCT brand_id) AS brandId FROM Cars\";\n$rows = $manager->executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row->brandId, \"\\n\";\n}\n```\n\n### Conditions\n\nConditions allow us to filter the set of records we want to query. The WHERE clause allows to do that:\n\n``` php\n// Simple conditions\n$phql = \"SELECT * FROM Cars WHERE Cars.name = 'Lamborghini Espada'\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.price > 10000\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE TRIM(Cars.name) = 'Audi R8'\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.name LIKE 'Ferrari%'\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.name NOT LIKE 'Ferrari%'\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.price IS NULL\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.id IN (120, 121, 122)\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.id NOT IN (430, 431)\";\n$cars = $manager->executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.id BETWEEN 1 AND 100\";\n$cars = $manager->executeQuery($phql);\n```\n\nAlso, as part of PHQL, prepared parameters automatically escape the input data, introducing more security:\n\n``` php\n$phql = \"SELECT * FROM Cars WHERE Cars.name = :name:\";\n$cars = $manager->executeQuery(\n    $phql,\n    [\n        \"name\" => \"Lamborghini Espada\"\n    ]\n);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.name = ?0\";\n$cars = $manager->executeQuery(\n    $phql,\n    [\n        0 => \"Lamborghini Espada\"\n    ]\n);\n```\n\n## Inserting Data\n\nWith PHQL it’s possible to insert data using the familiar INSERT statement:\n\n``` php\n// Inserting without columns\n$phql = \"INSERT INTO Cars VALUES (NULL, 'Lamborghini Espada', \"\n      . \"7, 10000.00, 1969, 'Grand Tourer')\";\n$manager->executeQuery($phql);\n\n// Specifying columns to insert\n$phql = \"INSERT INTO Cars (name, brand_id, year, style) \"\n      . \"VALUES ('Lamborghini Espada', 7, 1969, 'Grand Tourer')\";\n$manager->executeQuery($phql);\n\n// Inserting using placeholders\n$phql = \"INSERT INTO Cars (name, brand_id, year, style) \"\n      . \"VALUES (:name:, :brand_id:, :year:, :style)\";\n$manager->executeQuery(\n    $phql,\n    [\n        \"name\"     => \"Lamborghini Espada\",\n        \"brand_id\" => 7,\n        \"year\"     => 1969,\n        \"style\"    => \"Grand Tourer\",\n    ]\n);\n```\n\nPhalcon doesn’t only transform the PHQL statements into SQL. All events and business rules defined in the model are executed as if we created individual objects manually. Let’s add a business rule on the model cars. A car cannot cost less than $ 10,000:\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\n\nclass Cars extends Model\n{\n    public function beforeCreate()\n    {\n        if ($this->price < 10000) {\n            $this->appendMessage(\n                new Message(\"A car cannot cost less than $ 10,000\")\n            );\n\n            return false;\n        }\n    }\n}\n```\n\nIf we made the following INSERT in the models Cars, the operation will not be successful because the price does not meet the business rule that we implemented. By checking the status of the insertion we can print any validation messages generated internally:\n\n``` php\n$phql = \"INSERT INTO Cars VALUES (NULL, 'Nissan Versa', 7, 9999.00, 2015, 'Sedan')\";\n\n$result = $manager->executeQuery($phql);\n\nif ($result->success() === false) {\n    foreach ($result->getMessages() as $message) {\n        echo $message->getMessage();\n    }\n}\n```\n\n## Updating Data\n\nUpdating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.\n\n``` php\n// Updating a single column\n$phql = \"UPDATE Cars SET price = 15000.00 WHERE id = 101\";\n$manager->executeQuery($phql);\n\n// Updating multiples columns\n$phql = \"UPDATE Cars SET price = 15000.00, type = 'Sedan' WHERE id = 101\";\n$manager->executeQuery($phql);\n\n// Updating multiples rows\n$phql = \"UPDATE Cars SET price = 7000.00, type = 'Sedan' WHERE brands_id > 5\";\n$manager->executeQuery($phql);\n\n// Using placeholders\n$phql = \"UPDATE Cars SET price = ?0, type = ?1 WHERE brands_id > ?2\";\n$manager->executeQuery(\n    $phql,\n    [\n        0 => 7000.00,\n        1 => 'Sedan',\n        2 => 5,\n    ]\n);\n```\n\nAn UPDATE statement performs the update in two phases:\n\n- First, if the UPDATE has a WHERE clause it retrieves all the objects that match these criteria,\n- Second, based on the queried objects it updates/changes the requested attributes storing them to the relational database\n\nThis way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:\n\n``` php\n$phql = \"UPDATE Cars SET price = 15000.00 WHERE id > 101\";\n\n$result = $manager->executeQuery($phql);\n\nif ($result->success() === false) {\n    $messages = $result->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message->getMessage();\n    }\n}\n```\n\nis somewhat equivalent to:\n\n``` php\n$messages = null;\n\n$process = function () use (&$messages) {\n    $cars = Cars::find(\"id > 101\");\n\n    foreach ($cars as $car) {\n        $car->price = 15000;\n\n        if ($car->save() === false) {\n            $messages = $car->getMessages();\n\n            return false;\n        }\n    }\n\n    return true;\n};\n\n$success = $process();\n```\n\n## Deleting Data\n\nWhen a record is deleted the events related to the delete operation will be executed for each row:\n\n``` php\n// Deleting a single row\n$phql = \"DELETE FROM Cars WHERE id = 101\";\n$manager->executeQuery($phql);\n\n// Deleting multiple rows\n$phql = \"DELETE FROM Cars WHERE id > 100\";\n$manager->executeQuery($phql);\n\n// Using placeholders\n$phql = \"DELETE FROM Cars WHERE id BETWEEN :initial: AND :final:\";\n$manager->executeQuery(\n    $phql,\n    [\n        \"initial\" => 1,\n        \"final\"   => 100,\n    ]\n);\n```\n\nDELETE operations are also executed in two phases like UPDATEs. To check if the deletion produces any validation messages you should check the status code returned:\n\n``` php\n// Deleting multiple rows\n$phql = \"DELETE FROM Cars WHERE id > 100\";\n\n$result = $manager->executeQuery($phql);\n\nif ($result->success() === false) {\n    $messages = $result->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message->getMessage();\n    }\n}\n```\n\n## Creating queries using the Query Builder\n\nA builder is available to create PHQL queries without the need to write PHQL statements, also providing IDE facilities:\n\n``` php\n// Getting a whole set\n$robots = $this->modelsManager->createBuilder()\n    ->from(\"Robots\")\n    ->join(\"RobotsParts\")\n    ->orderBy(\"Robots.name\")\n    ->getQuery()\n    ->execute();\n\n// Getting the first row\n$robots = $this->modelsManager->createBuilder()\n    ->from(\"Robots\")\n    ->join(\"RobotsParts\")\n    ->orderBy(\"Robots.name\")\n    ->getQuery()\n    ->getSingleResult();\n```\n\nThat is the same as:\n\n``` php\n$phql = \"SELECT Robots.* FROM Robots JOIN RobotsParts p ORDER BY Robots.name LIMIT 20\";\n\n$result = $manager->executeQuery($phql);\n```\n\nMore examples of the builder:\n\n``` php\n// 'SELECT Robots.* FROM Robots';\n$builder->from(\"Robots\");\n\n// 'SELECT Robots.*, RobotsParts.* FROM Robots, RobotsParts';\n$builder->from(\n    [\n        \"Robots\",\n        \"RobotsParts\",\n    ]\n);\n\n// 'SELECT * FROM Robots';\n$phql = $builder->columns(\"*\")\n                ->from(\"Robots\");\n\n// 'SELECT id FROM Robots';\n$builder->columns(\"id\")\n        ->from(\"Robots\");\n\n// 'SELECT id, name FROM Robots';\n$builder->columns([\"id\", \"name\"])\n        ->from(\"Robots\");\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.name = \"Voltron\"';\n$builder->from(\"Robots\")\n        ->where(\"Robots.name = 'Voltron'\");\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.id = 100';\n$builder->from(\"Robots\")\n        ->where(100);\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.type = \"virtual\" AND Robots.id > 50';\n$builder->from(\"Robots\")\n        ->where(\"type = 'virtual'\")\n        ->andWhere(\"id > 50\");\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.type = \"virtual\" OR Robots.id > 50';\n$builder->from(\"Robots\")\n        ->where(\"type = 'virtual'\")\n        ->orWhere(\"id > 50\");\n\n// 'SELECT Robots.* FROM Robots GROUP BY Robots.name';\n$builder->from(\"Robots\")\n        ->groupBy(\"Robots.name\");\n\n// 'SELECT Robots.* FROM Robots GROUP BY Robots.name, Robots.id';\n$builder->from(\"Robots\")\n        ->groupBy([\"Robots.name\", \"Robots.id\"]);\n\n// 'SELECT Robots.name, SUM(Robots.price) FROM Robots GROUP BY Robots.name';\n$builder->columns([\"Robots.name\", \"SUM(Robots.price)\"])\n    ->from(\"Robots\")\n    ->groupBy(\"Robots.name\");\n\n// 'SELECT Robots.name, SUM(Robots.price) FROM Robots GROUP BY Robots.name HAVING SUM(Robots.price) > 1000';\n$builder->columns([\"Robots.name\", \"SUM(Robots.price)\"])\n    ->from(\"Robots\")\n    ->groupBy(\"Robots.name\")\n    ->having(\"SUM(Robots.price) > 1000\");\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts';\n$builder->from(\"Robots\")\n    ->join(\"RobotsParts\");\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts AS p';\n$builder->from(\"Robots\")\n    ->join(\"RobotsParts\", null, \"p\");\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts ON Robots.id = RobotsParts.robots_id AS p';\n$builder->from(\"Robots\")\n    ->join(\"RobotsParts\", \"Robots.id = RobotsParts.robots_id\", \"p\");\n\n// 'SELECT Robots.* FROM Robots\n// JOIN RobotsParts ON Robots.id = RobotsParts.robots_id AS p\n// JOIN Parts ON Parts.id = RobotsParts.parts_id AS t';\n$builder->from(\"Robots\")\n    ->join(\"RobotsParts\", \"Robots.id = RobotsParts.robots_id\", \"p\")\n    ->join(\"Parts\", \"Parts.id = RobotsParts.parts_id\", \"t\");\n\n// 'SELECT r.* FROM Robots AS r';\n$builder->addFrom(\"Robots\", \"r\");\n\n// 'SELECT Robots.*, p.* FROM Robots, Parts AS p';\n$builder->from(\"Robots\")\n    ->addFrom(\"Parts\", \"p\");\n\n// 'SELECT r.*, p.* FROM Robots AS r, Parts AS p';\n$builder->from([\"r\" => \"Robots\"])\n        ->addFrom(\"Parts\", \"p\");\n\n// 'SELECT r.*, p.* FROM Robots AS r, Parts AS p';\n$builder->from([\"r\" => \"Robots\", \"p\" => \"Parts\"]);\n\n// 'SELECT Robots.* FROM Robots LIMIT 10';\n$builder->from(\"Robots\")\n    ->limit(10);\n\n// 'SELECT Robots.* FROM Robots LIMIT 10 OFFSET 5';\n$builder->from(\"Robots\")\n        ->limit(10, 5);\n\n// 'SELECT Robots.* FROM Robots WHERE id BETWEEN 1 AND 100';\n$builder->from(\"Robots\")\n        ->betweenWhere(\"id\", 1, 100);\n\n// 'SELECT Robots.* FROM Robots WHERE id IN (1, 2, 3)';\n$builder->from(\"Robots\")\n        ->inWhere(\"id\", [1, 2, 3]);\n\n// 'SELECT Robots.* FROM Robots WHERE id NOT IN (1, 2, 3)';\n$builder->from(\"Robots\")\n        ->notInWhere(\"id\", [1, 2, 3]);\n\n// 'SELECT Robots.* FROM Robots WHERE name LIKE '%Art%';\n$builder->from(\"Robots\")\n        ->where(\"name LIKE :name:\", [\"name\" => \"%\" . $name . \"%\"]);\n\n// 'SELECT r.* FROM Store\\Robots WHERE r.name LIKE '%Art%';\n$builder->from(['r' => 'Store\\Robots'])\n        ->where(\"r.name LIKE :name:\", [\"name\" => \"%\" . $name . \"%\"]);\n```\n\n### Bound Parameters\n\nBound parameters in the query builder can be set as the query is constructed or past all at once when executing:\n\n``` php\n// Passing parameters in the query construction\n$robots = $this->modelsManager->createBuilder()\n    ->from(\"Robots\")\n    ->where(\"name = :name:\", [\"name\" => $name])\n    ->andWhere(\"type = :type:\", [\"type\" => $type])\n    ->getQuery()\n    ->execute();\n\n// Passing parameters in query execution\n$robots = $this->modelsManager->createBuilder()\n    ->from(\"Robots\")\n    ->where(\"name = :name:\")\n    ->andWhere(\"type = :type:\")\n    ->getQuery()\n    ->execute([\"name\" => $name, \"type\" => $type]);\n```\n\n## Disallow literals in PHQL\n\nLiterals can be disabled in PHQL, this means that directly using strings, numbers and boolean values in PHQL strings will be disallowed. If PHQL statements are created embedding external data on them, this could open the application to potential SQL injections:\n\n``` php\n$login = 'voltron';\n\n$phql = \"SELECT * FROM Models\\Users WHERE login = '$login'\";\n\n$result = $manager->executeQuery($phql);\n```\n\nIf `$login` is changed to `'`` ``OR`` ``''`` ``=`` ``'`, the produced PHQL is:\n\n``` sql\nSELECT * FROM Models\\Users WHERE login = '' OR '' = ''\n```\n\nWhich is always true no matter what the login stored in the database is.\n\nIf literals are disallowed strings can be used as part of a PHQL statement, thus an exception will be thrown forcing the developer to use bound parameters. The same query can be written in a secure way like this:\n\n``` php\n$phql = \"SELECT Robots.* FROM Robots WHERE Robots.name = :name:\";\n\n$result = $manager->executeQuery(\n    $phql,\n    [\n        \"name\" => $name,\n    ]\n);\n```\n\nYou can disallow literals in the following way:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nModel::setup(\n    [\n        \"phqlLiterals\" => false\n    ]\n);\n```\n\nBound parameters can be used even if literals are allowed or not. Disallowing them is just another security decision a developer could take in web applications.\n\n## Escaping Reserved Words\n\nPHQL has a few reserved words, if you want to use any of them as attributes or models names, you need to escape those words using the cross-database escaping delimiters ‘\\[‘ and ‘\\]’:\n\n``` php\n$phql   = \"SELECT * FROM [Update]\";\n$result = $manager->executeQuery($phql);\n\n$phql   = \"SELECT id, [Like] FROM Posts\";\n$result = $manager->executeQuery($phql);\n```\n\nThe delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.\n\n## PHQL Lifecycle\n\nBeing a high-level language, PHQL gives developers the ability to personalize and customize different aspects in order to suit their needs. The following is the life cycle of each PHQL statement executed:\n\n- The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system\n- The IR is converted to valid SQL according to the database system associated to the model\n- PHQL statements are parsed once and cached in memory. Further executions of the same statement result in a slightly faster execution\n\n## Using Raw SQL\n\nA database system could offer specific SQL extensions that aren’t supported by PHQL, in this case, a raw SQL can be appropriate:\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Robots extends Model\n{\n    public static function findByCreateInterval()\n    {\n        // A raw SQL statement\n        $sql = \"SELECT * FROM robots WHERE id > 0\";\n\n        // Base model\n        $robot = new Robots();\n\n        // Execute the query\n        return new Resultset(\n            null,\n            $robot,\n            $robot->getReadConnection()->query($sql)\n        );\n    }\n}\n```\n\nIf Raw SQL queries are common in your application a generic method could be added to your model:\n\n``` php\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Robots extends Model\n{\n    public static function findByRawSql($conditions, $params = null)\n    {\n        // A raw SQL statement\n        $sql = \"SELECT * FROM robots WHERE $conditions\";\n\n        // Base model\n        $robot = new Robots();\n\n        // Execute the query\n        return new Resultset(\n            null,\n            $robot,\n            $robot->getReadConnection()->query($sql, $params)\n        );\n    }\n}\n```\n\nThe above findByRawSql could be used as follows:\n\n``` php\n$robots = Robots::findByRawSql(\n    \"id > ?\",\n    [\n        10\n    ]\n);\n```\n\n## Troubleshooting\n\nSome things to keep in mind when using PHQL:\n\n- Classes are case-sensitive, if a class is not defined with the same name as it was created this could lead to an unexpected behavior in operating systems with case-sensitive file systems such as Linux.\n- Correct charset must be defined in the connection to bind parameters with success.\n- Aliased classes aren’t replaced by full namespaced classes since this only occurs in PHP code and not inside strings.\n- If column renaming is enabled avoid using column aliases with the same name as columns to be renamed, this may confuse the query resolver.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/phql.html](https://docs.phalconphp.com/en/latest/reference/phql.html)"
- name: Queueing
  id: reference/queue
  summary: Activities like processing videos, resizing images or sending emails aren’t suitable to be executed online or in real time because it may slow the loading time of pages and severely impact the user experience
  description: "# Queueing\n\nActivities like processing videos, resizing images or sending emails aren’t suitable to be executed online or in real time because it may slow the loading time of pages and severely impact the user experience.\n\nThe best solution here is to implement background jobs. The web application puts jobs into a queue and which will be processed separately.\n\nWhile you can find more sophisticated PHP extensions to address queueing in your applications like [RabbitMQ](http://pecl.php.net/package/amqp); Phalcon provides a client for [Beanstalk](http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/), a job queueing backend inspired by [Memcache](http://memcached.org/). It’s simple, lightweight, and completely specialized for job queueing.\n\nAttention\n\nSome of the returns from queue methods require that the module Yaml be installed. Please refer to [http://php.net/manual/book.yaml.php](http://php.net/manual/book.yaml.php) for more information. For PHP \\< 7, Yaml 1.3.0 is acceptable. For PHP \\>= 7, you will need to use Yaml \\>= 2.0.0.\n\n## Putting Jobs into the Queue\n\nAfter connecting to Beanstalk you can insert as many jobs as required. You can define the message structure according to the needs of the application:\n\n``` php\nuse Phalcon\\Queue\\Beanstalk;\n\n// Connect to the queue\n$queue = new Beanstalk(\n    [\n        \"host\" => \"192.168.0.21\",\n        \"port\" => \"11300\",\n    ]\n);\n\n// Insert the job in the queue\n$queue->put(\n    [\n        \"processVideo\" => 4871,\n    ]\n);\n```\n\nAvailable connection options are:\n\n| Option | Description                              | Default   |\n|--------|------------------------------------------|-----------|\n| host   | IP where the beanstalk server is located | 127.0.0.1 |\n| port   | Connection port                          | 11300     |\n\nIn the above example we stored a message which will allow a background job to process a video. The message is stored in the queue immediately and does not have a certain time to live.\n\nAdditional options as time to run, priority and delay can be passed as second parameter:\n\n``` php\n// Insert the job in the queue with options\n$queue->put(\n    [\n        \"processVideo\" => 4871,\n    ],\n    [\n        \"priority\" => 250,\n        \"delay\"    => 10,\n        \"ttr\"      => 3600,\n    ]\n);\n```\n\nThe following options are available:\n\n| Option   | Description                                                                                                                                                                                    |\n|----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| priority | It’s an integer \\< 2\\*\\*32. Jobs with smaller priority values will be scheduled before jobs with larger priorities. The most urgent priority is 0; the least urgent priority is 4,294,967,295. |\n| delay    | It’s an integer number of seconds to wait before putting the job in the ready queue. The job will be in the “delayed” state during this time.                                                  |\n| ttr      | Time to run – is an integer number of seconds to allow a worker to run this job. This time is counted from the moment a worker reserves this job.                                              |\n\nEvery job put into the queue returns a “job id” which you can use to track the status of the job:\n\n``` php\n$jobId = $queue->put(\n    [\n        \"processVideo\" => 4871,\n    ]\n);\n```\n\n## Retrieving Messages\n\nOnce a job is placed into the queue, those messages can be consumed by a background worker which will have enough time to complete the task:\n\n``` php\nwhile (($job = $queue->peekReady()) !== false) {\n    $message = $job->getBody();\n\n    var_dump($message);\n\n    $job->delete();\n}\n```\n\nJobs must be removed from the queue to avoid double processing. If multiple background jobs workers are implemented, jobs must be “reserved” so other workers don’t re-process them while other workers have them reserved:\n\n``` php\nwhile (($job = $queue->reserve()) !== false) {\n    $message = $job->getBody();\n\n    var_dump($message);\n\n    $job->delete();\n}\n```\n\nOur client implement a basic set of the features provided by Beanstalkd but enough to allow you to build applications implementing queues.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/queue.html](https://docs.phalconphp.com/en/latest/reference/queue.html)"
- name: Queue\Beanstalk
  id: api/phalcon_queue_beanstalk
  summary: Class to access the beanstalk queue service
  description: "# Class **Phalcon\\Queue\\Beanstalk**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/queue/beanstalk.zep)\n\nClass to access the beanstalk queue service. Partially implements the protocol version 1.2\n\n``` php\nuse Phalcon\\Queue\\Beanstalk;\n\n$queue = new Beanstalk(\n    [\n        \"host\"       => \"127.0.0.1\",\n        \"port\"       => 11300,\n        \"persistent\" => true,\n    ]\n);\n```\n\n## Constants\n\n### *integer* **DEFAULT_DELAY**\n\n### *integer* **DEFAULT_PRIORITY**\n\n### *integer* **DEFAULT_TTR**\n\n### *string* **DEFAULT_TUBE**\n\n### *string* **DEFAULT_HOST**\n\n### *integer* **DEFAULT_PORT**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $parameters\\])\n\n### public **connect** ()\n\nMakes a connection to the Beanstalkd server\n\n### public **put** (*mixed* $data, \\[*array* $options\\])\n\nPuts a job on the queue using specified tube.\n\n### public **reserve** (\\[*mixed* $timeout\\])\n\nReserves/locks a ready job from the specified tube.\n\n### public **choose** (*mixed* $tube)\n\nChange the active tube. By default the tube is “default”.\n\n### public **watch** (*mixed* $tube)\n\nThe watch command adds the named tube to the watch list for the current connection.\n\n### public **ignore** (*mixed* $tube)\n\nIt removes the named tube from the watch list for the current connection.\n\n### public **pauseTube** (*mixed* $tube, *mixed* $delay)\n\nCan delay any new job being reserved for a given time.\n\n### public **kick** (*mixed* $bound)\n\nThe kick command applies only to the currently used tube.\n\n### public **stats** ()\n\nGives statistical information about the system as a whole.\n\n### public **statsTube** (*mixed* $tube)\n\nGives statistical information about the specified tube if it exists.\n\n### public **listTubes** ()\n\nReturns a list of all existing tubes.\n\n### public **listTubeUsed** ()\n\nReturns the tube currently being used by the client.\n\n### public **listTubesWatched** ()\n\nReturns a list tubes currently being watched by the client.\n\n### public **peekReady** ()\n\nInspect the next ready job.\n\n### public **peekBuried** ()\n\nReturn the next job in the list of buried jobs.\n\n### public **peekDelayed** ()\n\nReturn the next job in the list of buried jobs.\n\n### public **jobPeek** (*mixed* $id)\n\nThe peek commands let the client inspect a job in the system.\n\n### final public **readStatus** ()\n\nReads the latest status from the Beanstalkd server\n\n### final public **readYaml** ()\n\nFetch a YAML payload from the Beanstalkd server\n\n### public **read** (\\[*mixed* $length\\])\n\nReads a packet from the socket. Prior to reading from the socket will check for availability of the connection.\n\n### protected **write** (*mixed* $data)\n\nWrites data to the socket. Performs a connection if none is available\n\n### public **disconnect** ()\n\nCloses the connection to the beanstalk server.\n\n### public **quit** ()\n\nSimply closes the connection.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk.html)"
- name: Queue\Beanstalk::choose
  id: api/phalcon_queue_beanstalk#choose
  summary: Change the active tube
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **choose** (*mixed* $tube)

    Change the active tube. By default the tube is “default”.
- name: Queue\Beanstalk::connect
  id: api/phalcon_queue_beanstalk#connect
  summary: null
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **connect** ()

    Makes a connection to the Beanstalkd server
- name: Queue\Beanstalk::DEFAULT_DELAY
  id: api/phalcon_queue_beanstalk#default_delay
  summary: null
  belongs_to: Queue\Beanstalk
  description: '### *integer* **DEFAULT_DELAY**'
- name: Queue\Beanstalk::DEFAULT_HOST
  id: api/phalcon_queue_beanstalk#default_host
  summary: null
  belongs_to: Queue\Beanstalk
  description: '### *string* **DEFAULT_HOST**'
- name: Queue\Beanstalk::DEFAULT_PORT
  id: api/phalcon_queue_beanstalk#default_port
  summary: null
  belongs_to: Queue\Beanstalk
  description: |-
    ### *integer* **DEFAULT_PORT**

    ## Methods

    ### public **\_\_construct** (\[*array* $parameters\])
- name: Queue\Beanstalk::DEFAULT_PRIORITY
  id: api/phalcon_queue_beanstalk#default_priority
  summary: null
  belongs_to: Queue\Beanstalk
  description: '### *integer* **DEFAULT_PRIORITY**'
- name: Queue\Beanstalk::DEFAULT_TTR
  id: api/phalcon_queue_beanstalk#default_ttr
  summary: null
  belongs_to: Queue\Beanstalk
  description: '### *integer* **DEFAULT_TTR**'
- name: Queue\Beanstalk::DEFAULT_TUBE
  id: api/phalcon_queue_beanstalk#default_tube
  summary: null
  belongs_to: Queue\Beanstalk
  description: '### *string* **DEFAULT_TUBE**'
- name: Queue\Beanstalk::disconnect
  id: api/phalcon_queue_beanstalk#disconnect
  summary: Closes the connection to the beanstalk server
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **disconnect** ()

    Closes the connection to the beanstalk server.
- name: Queue\Beanstalk::ignore
  id: api/phalcon_queue_beanstalk#ignore
  summary: It removes the named tube from the watch list for the current connection
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **ignore** (*mixed* $tube)

    It removes the named tube from the watch list for the current connection.
- name: Queue\Beanstalk::jobPeek
  id: api/phalcon_queue_beanstalk#jobpeek
  summary: The peek commands let the client inspect a job in the system
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **jobPeek** (*mixed* $id)

    The peek commands let the client inspect a job in the system.
- name: Queue\Beanstalk::kick
  id: api/phalcon_queue_beanstalk#kick
  summary: The kick command applies only to the currently used tube
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **kick** (*mixed* $bound)

    The kick command applies only to the currently used tube.
- name: Queue\Beanstalk::listTubes
  id: api/phalcon_queue_beanstalk#listtubes
  summary: Returns a list of all existing tubes
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **listTubes** ()

    Returns a list of all existing tubes.
- name: Queue\Beanstalk::listTubesWatched
  id: api/phalcon_queue_beanstalk#listtubeswatched
  summary: Returns a list tubes currently being watched by the client
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **listTubesWatched** ()

    Returns a list tubes currently being watched by the client.
- name: Queue\Beanstalk::listTubeUsed
  id: api/phalcon_queue_beanstalk#listtubeused
  summary: Returns the tube currently being used by the client
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **listTubeUsed** ()

    Returns the tube currently being used by the client.
- name: Queue\Beanstalk::pauseTube
  id: api/phalcon_queue_beanstalk#pausetube
  summary: Can delay any new job being reserved for a given time
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **pauseTube** (*mixed* $tube, *mixed* $delay)

    Can delay any new job being reserved for a given time.
- name: Queue\Beanstalk::peekBuried
  id: api/phalcon_queue_beanstalk#peekburied
  summary: Return the next job in the list of buried jobs
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **peekBuried** ()

    Return the next job in the list of buried jobs.
- name: Queue\Beanstalk::peekDelayed
  id: api/phalcon_queue_beanstalk#peekdelayed
  summary: Return the next job in the list of buried jobs
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **peekDelayed** ()

    Return the next job in the list of buried jobs.
- name: Queue\Beanstalk::peekReady
  id: api/phalcon_queue_beanstalk#peekready
  summary: Inspect the next ready job
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **peekReady** ()

    Inspect the next ready job.
- name: Queue\Beanstalk::put
  id: api/phalcon_queue_beanstalk#put
  summary: Puts a job on the queue using specified tube
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **put** (*mixed* $data, \[*array* $options\])

    Puts a job on the queue using specified tube.
- name: Queue\Beanstalk::quit
  id: api/phalcon_queue_beanstalk#quit
  summary: Simply closes the connection
  belongs_to: Queue\Beanstalk
  description: "### public **quit** ()\n\nSimply closes the connection.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk.html)"
- name: Queue\Beanstalk::read
  id: api/phalcon_queue_beanstalk#read
  summary: Reads a packet from the socket
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **read** (\[*mixed* $length\])

    Reads a packet from the socket. Prior to reading from the socket will check for availability of the connection.

    ### protected **write** (*mixed* $data)

    Writes data to the socket. Performs a connection if none is available
- name: Queue\Beanstalk::readStatus
  id: api/phalcon_queue_beanstalk#readstatus
  summary: null
  belongs_to: Queue\Beanstalk
  description: |-
    ### final public **readStatus** ()

    Reads the latest status from the Beanstalkd server
- name: Queue\Beanstalk::readYaml
  id: api/phalcon_queue_beanstalk#readyaml
  summary: null
  belongs_to: Queue\Beanstalk
  description: |-
    ### final public **readYaml** ()

    Fetch a YAML payload from the Beanstalkd server
- name: Queue\Beanstalk::reserve
  id: api/phalcon_queue_beanstalk#reserve
  summary: Reserves/locks a ready job from the specified tube
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **reserve** (\[*mixed* $timeout\])

    Reserves/locks a ready job from the specified tube.
- name: Queue\Beanstalk::stats
  id: api/phalcon_queue_beanstalk#stats
  summary: Gives statistical information about the system as a whole
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **stats** ()

    Gives statistical information about the system as a whole.
- name: Queue\Beanstalk::statsTube
  id: api/phalcon_queue_beanstalk#statstube
  summary: Gives statistical information about the specified tube if it exists
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **statsTube** (*mixed* $tube)

    Gives statistical information about the specified tube if it exists.
- name: Queue\Beanstalk::watch
  id: api/phalcon_queue_beanstalk#watch
  summary: The watch command adds the named tube to the watch list for the current connection
  belongs_to: Queue\Beanstalk
  description: |-
    ### public **watch** (*mixed* $tube)

    The watch command adds the named tube to the watch list for the current connection.
- name: Queue\Beanstalk\Exception
  id: api/phalcon_queue_beanstalk_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Queue\\Beanstalk\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/queue/beanstalk/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Exception.html)"
- name: Queue\Beanstalk\Job
  id: api/phalcon_queue_beanstalk_job
  summary: The release command puts a reserved job back into the ready queue (and marks its state as “ready”) to be run by any client
  description: "# Class **Phalcon\\Queue\\Beanstalk\\Job**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/queue/beanstalk/job.zep)\n\nRepresents a job in a beanstalk queue\n\n## Methods\n\n### public **getId** ()\n\n### public **getBody** ()\n\n### public **\\_\\_construct** ([*Phalcon\\Queue\\Beanstalk*](phalcon_queue_beanstalk) $queue, *mixed* $id, *mixed* $body)\n\n### public **delete** ()\n\nRemoves a job from the server entirely\n\n### public **release** (\\[*mixed* $priority\\], \\[*mixed* $delay\\])\n\nThe release command puts a reserved job back into the ready queue (and marks its state as “ready”) to be run by any client. It is normally used when the job fails because of a transitory error.\n\n### public **bury** (\\[*mixed* $priority\\])\n\nThe bury command puts a job into the “buried” state. Buried jobs are put into a FIFO linked list and will not be touched by the server again until a client kicks them with the “kick” command.\n\n### public **touch** ()\n\nThe touch command allows a worker to request more time to work on a job. This is useful for jobs that potentially take a long time, but you still want the benefits of a TTR pulling a job away from an unresponsive worker. A worker may periodically tell the server that it’s still alive and processing a job (e.g. it may do this on DEADLINE_SOON). The command postpones the auto release of a reserved job until TTR seconds from when the command is issued.\n\n### public **kick** ()\n\nMove the job to the ready queue if it is delayed or buried.\n\n### public **stats** ()\n\nGives statistical information about the specified job if it exists.\n\n### public **\\_\\_wakeup** ()\n\nChecks if the job has been modified after unserializing the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Job.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Job.html)"
- name: Queue\Beanstalk\Job::bury
  id: api/phalcon_queue_beanstalk_job#bury
  summary: The bury command puts a job into the “buried” state
  belongs_to: Queue\Beanstalk\Job
  description: |-
    ### public **bury** (\[*mixed* $priority\])

    The bury command puts a job into the “buried” state. Buried jobs are put into a FIFO linked list and will not be touched by the server again until a client kicks them with the “kick” command.
- name: Queue\Beanstalk\Job::delete
  id: api/phalcon_queue_beanstalk_job#delete
  summary: null
  belongs_to: Queue\Beanstalk\Job
  description: |-
    ### public **delete** ()

    Removes a job from the server entirely
- name: Queue\Beanstalk\Job::getBody
  id: api/phalcon_queue_beanstalk_job#getbody
  summary: null
  belongs_to: Queue\Beanstalk\Job
  description: |-
    ### public **getBody** ()

    ### public **\_\_construct** ([*Phalcon\Queue\Beanstalk*](phalcon_queue_beanstalk) $queue, *mixed* $id, *mixed* $body)
- name: Queue\Beanstalk\Job::getId
  id: api/phalcon_queue_beanstalk_job#getid
  summary: null
  belongs_to: Queue\Beanstalk\Job
  description: '### public **getId** ()'
- name: Queue\Beanstalk\Job::kick
  id: api/phalcon_queue_beanstalk_job#kick
  summary: Move the job to the ready queue if it is delayed or buried
  belongs_to: Queue\Beanstalk\Job
  description: |-
    ### public **kick** ()

    Move the job to the ready queue if it is delayed or buried.
- name: Queue\Beanstalk\Job::release
  id: api/phalcon_queue_beanstalk_job#release
  summary: The release command puts a reserved job back into the ready queue (and marks its state as “ready”) to be run by any client
  belongs_to: Queue\Beanstalk\Job
  description: |-
    ### public **release** (\[*mixed* $priority\], \[*mixed* $delay\])

    The release command puts a reserved job back into the ready queue (and marks its state as “ready”) to be run by any client. It is normally used when the job fails because of a transitory error.
- name: Queue\Beanstalk\Job::stats
  id: api/phalcon_queue_beanstalk_job#stats
  summary: Gives statistical information about the specified job if it exists
  belongs_to: Queue\Beanstalk\Job
  description: |-
    ### public **stats** ()

    Gives statistical information about the specified job if it exists.
- name: Queue\Beanstalk\Job::touch
  id: api/phalcon_queue_beanstalk_job#touch
  summary: The touch command allows a worker to request more time to work on a job
  belongs_to: Queue\Beanstalk\Job
  description: |-
    ### public **touch** ()

    The touch command allows a worker to request more time to work on a job. This is useful for jobs that potentially take a long time, but you still want the benefits of a TTR pulling a job away from an unresponsive worker. A worker may periodically tell the server that it’s still alive and processing a job (e.g. it may do this on DEADLINE_SOON). The command postpones the auto release of a reserved job until TTR seconds from when the command is issued.
- name: Queue\Beanstalk\Job::__wakeup
  id: api/phalcon_queue_beanstalk_job#__wakeup
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Queue\Beanstalk\Job
  description: "### public **\\_\\_wakeup** ()\n\nChecks if the job has been modified after unserializing the object\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Job.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Job.html)"
- name: Reading Configurations
  id: reference/config
  summary: Phalcon\Config is a component used to convert configuration files of various formats (using adapters) into PHP objects for use in an application
  description: "# Reading Configurations\n\n[*Phalcon\\Config*](../api/phalcon_config) is a component used to convert configuration files of various formats (using adapters) into PHP objects for use in an application.\n\n## Native Arrays\n\nThe first example shows how to convert native arrays into [*Phalcon\\Config*](../api/phalcon_config) objects. This option offers the best performance since no files are read during this request.\n\n``` php\nuse Phalcon\\Config;\n\n$settings = [\n    \"database\" => [\n        \"adapter\"  => \"Mysql\",\n        \"host\"     => \"localhost\",\n        \"username\" => \"scott\",\n        \"password\" => \"cheetah\",\n        \"dbname\"   => \"test_db\"\n    ],\n     \"app\" => [\n        \"controllersDir\" => \"../app/controllers/\",\n        \"modelsDir\"      => \"../app/models/\",\n        \"viewsDir\"       => \"../app/views/\"\n    ],\n    \"mysetting\" => \"the-value\"\n];\n\n$config = new Config($settings);\n\necho $config->app->controllersDir, \"\\n\";\necho $config->database->username, \"\\n\";\necho $config->mysetting, \"\\n\";\n```\n\nIf you want to better organize your project you can save the array in another file and then read it.\n\n``` php\nuse Phalcon\\Config;\n\nrequire \"config/config.php\";\n\n$config = new Config($settings);\n```\n\n## File Adapters\n\nThe adapters available are:\n\n| Class                                                               | Description                                                                                    |\n|---------------------------------------------------------------------|------------------------------------------------------------------------------------------------|\n| [*Phalcon\\Config\\Adapter\\Ini*](../api/phalcon_config_adapter_ini)   | Uses INI files to store settings. Internally the adapter uses the PHP function parse_ini_file. |\n| [*Phalcon\\Config\\Adapter\\Json*](../api/phalcon_config_adapter_json) | Uses JSON files to store settings.                                                             |\n| [*Phalcon\\Config\\Adapter\\Php*](../api/phalcon_config_adapter_php)   | Uses PHP multidimensional arrays to store settings. This adapter offers the best performance.  |\n| [*Phalcon\\Config\\Adapter\\Yaml*](../api/phalcon_config_adapter_yaml) | Uses YAML files to store settings.                                                             |\n\n## Reading INI Files\n\nIni files are a common way to store settings. [*Phalcon\\Config*](../api/phalcon_config) uses the optimized PHP function parse_ini_file to read these files. Files sections are parsed into sub-settings for easy access.\n\n``` ini\n[database]\nadapter  = Mysql\nhost     = localhost\nusername = scott\npassword = cheetah\ndbname   = test_db\n\n[phalcon]\ncontrollersDir = \"../app/controllers/\"\nmodelsDir      = \"../app/models/\"\nviewsDir       = \"../app/views/\"\n\n[models]\nmetadata.adapter  = \"Memory\"\n```\n\nYou can read the file as follows:\n\n``` php\nuse Phalcon\\Config\\Adapter\\Ini as ConfigIni;\n\n$config = new ConfigIni(\"path/config.ini\");\n\necho $config->phalcon->controllersDir, \"\\n\";\necho $config->database->username, \"\\n\";\necho $config->models->metadata->adapter, \"\\n\";\n```\n\n## Merging Configurations\n\n[*Phalcon\\Config*](../api/phalcon_config) can recursively merge the properties of one configuration object into another. New properties are added and existing properties are updated.\n\n``` php\nuse Phalcon\\Config;\n\n$config = new Config(\n    [\n        \"database\" => [\n            \"host\"   => \"localhost\",\n            \"dbname\" => \"test_db\",\n        ],\n        \"debug\" => 1,\n    ]\n);\n\n$config2 = new Config(\n    [\n        \"database\" => [\n            \"dbname\"   => \"production_db\",\n            \"username\" => \"scott\",\n            \"password\" => \"secret\",\n        ],\n        \"logging\" => 1,\n    ]\n);\n\n$config->merge($config2);\n\nprint_r($config);\n```\n\nThe above code produces the following:\n\n``` html\nPhalcon\\Config Object\n(\n    [database] => Phalcon\\Config Object\n        (\n            [host] => localhost\n            [dbname]   => production_db\n            [username] => scott\n            [password] => secret\n        )\n    [debug] => 1\n    [logging] => 1\n)\n```\n\nThere are more adapters available for this components in the [Phalcon Incubator](https://github.com/phalcon/incubator)\n\n## Injecting Configuration Dependency\n\nYou can inject configuration dependency to controller allowing us to use [*Phalcon\\Config*](../api/phalcon_config) inside [*Phalcon\\Mvc\\Controller*](../api/phalcon_mvc_controller). To be able to do that, add following code inside your dependency injector script.\n\n``` php\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Config;\n\n// Create a DI\n$di = new FactoryDefault();\n\n$di->set(\n    \"config\",\n    function () {\n        $configData = require \"config/config.php\";\n\n        return new Config($configData);\n    }\n);\n```\n\nNow in your controller you can access your configuration by using dependency injection feature using name config like following code:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass MyController extends Controller\n{\n    private function getDatabaseName()\n    {\n        return $this->config->database->dbname;\n    }\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/config.html](https://docs.phalconphp.com/en/latest/reference/config.html)"
- name: Registry
  id: api/phalcon_registry
  summary: A registry is a container for storing objects and values in the application space
  description: "# Final class **Phalcon\\Registry**\n\n*implements* [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Countable](http://php.net/manual/en/class.countable.php), [Iterator](http://php.net/manual/en/class.iterator.php), [Traversable](http://php.net/manual/en/class.traversable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/registry.zep)\n\nA registry is a container for storing objects and values in the application space. By storing the value in a registry, the same object is always available throughout your application.\n\n``` php\n$registry = new \\Phalcon\\Registry();\n\n// Set value\n$registry->something = \"something\";\n// or\n$registry[\"something\"] = \"something\";\n\n// Get value\n$value = $registry->something;\n// or\n$value = $registry[\"something\"];\n\n// Check if the key exists\n$exists = isset($registry->something);\n// or\n$exists = isset($registry[\"something\"]);\n\n// Unset\nunset($registry->something);\n// or\nunset($registry[\"something\"]);\n```\n\nIn addition to ArrayAccess, Phalcon\\Registry also implements Countable (count($registry) will return the number of elements in the registry), Serializable and Iterator (you can iterate over the registry using a foreach loop) interfaces. For PHP 5.4 and higher, JsonSerializable interface is implemented.\n\nPhalcon\\Registry is very fast (it is typically faster than any userspace implementation of the registry); however, this comes at a price: Phalcon\\Registry is a final class and cannot be inherited from.\n\nThough Phalcon\\Registry exposes methods like \\_\\_get(), offsetGet(), count() etc, it is not recommended to invoke them manually (these methods exist mainly to match the interfaces the registry implements): $registry-\\>\\_\\_get(“property”) is several times slower than $registry-\\>property.\n\nInternally all the magic methods (and interfaces except JsonSerializable) are implemented using object handlers or similar techniques: this allows to bypass relatively slow method calls.\n\n## Methods\n\n### final public **\\_\\_construct** ()\n\nRegistry constructor\n\n### final public **offsetExists** (*mixed* $offset)\n\nChecks if the element is present in the registry\n\n### final public **offsetGet** (*mixed* $offset)\n\nReturns an index in the registry\n\n### final public **offsetSet** (*mixed* $offset, *mixed* $value)\n\nSets an element in the registry\n\n### final public **offsetUnset** (*mixed* $offset)\n\nUnsets an element in the registry\n\n### final public **count** ()\n\nChecks how many elements are in the register\n\n### final public **next** ()\n\nMoves cursor to next row in the registry\n\n### final public **key** ()\n\nGets pointer number of active row in the registry\n\n### final public **rewind** ()\n\nRewinds the registry cursor to its beginning\n\n### public **valid** ()\n\nChecks if the iterator is valid\n\n### public **current** ()\n\nObtains the current value in the internal iterator\n\n### final public **\\_\\_set** (*mixed* $key, *mixed* $value)\n\nSets an element in the registry\n\n### final public **\\_\\_get** (*mixed* $key)\n\nReturns an index in the registry\n\n### final public **\\_\\_isset** (*mixed* $key)\n\n...\n\n### final public **\\_\\_unset** (*mixed* $key)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Registry.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Registry.html)"
- name: Registry::count
  id: api/phalcon_registry#count
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **count** ()

    Checks how many elements are in the register
- name: Registry::current
  id: api/phalcon_registry#current
  summary: null
  belongs_to: Registry
  description: |-
    ### public **current** ()

    Obtains the current value in the internal iterator
- name: Registry::key
  id: api/phalcon_registry#key
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **key** ()

    Gets pointer number of active row in the registry
- name: Registry::next
  id: api/phalcon_registry#next
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **next** ()

    Moves cursor to next row in the registry
- name: Registry::offsetExists
  id: api/phalcon_registry#offsetexists
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **offsetExists** (*mixed* $offset)

    Checks if the element is present in the registry
- name: Registry::offsetGet
  id: api/phalcon_registry#offsetget
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **offsetGet** (*mixed* $offset)

    Returns an index in the registry
- name: Registry::offsetSet
  id: api/phalcon_registry#offsetset
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **offsetSet** (*mixed* $offset, *mixed* $value)

    Sets an element in the registry
- name: Registry::offsetUnset
  id: api/phalcon_registry#offsetunset
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **offsetUnset** (*mixed* $offset)

    Unsets an element in the registry
- name: Registry::rewind
  id: api/phalcon_registry#rewind
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **rewind** ()

    Rewinds the registry cursor to its beginning
- name: Registry::valid
  id: api/phalcon_registry#valid
  summary: null
  belongs_to: Registry
  description: |-
    ### public **valid** ()

    Checks if the iterator is valid
- name: Registry::__get
  id: api/phalcon_registry#__get
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **\_\_get** (*mixed* $key)

    Returns an index in the registry
- name: Registry::__isset
  id: api/phalcon_registry#__isset
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **\_\_isset** (*mixed* $key)

    ...
- name: Registry::__set
  id: api/phalcon_registry#__set
  summary: null
  belongs_to: Registry
  description: |-
    ### final public **\_\_set** (*mixed* $key, *mixed* $value)

    Sets an element in the registry
- name: Registry::__unset
  id: api/phalcon_registry#__unset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Registry
  description: "### final public **\\_\\_unset** (*mixed* $key)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Registry.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Registry.html)"
- name: Request Environment
  id: reference/request
  summary: Every HTTP request (usually originated by a browser) contains additional information regarding the request such as header data, files, variables, etc
  description: "# Request Environment\n\nEvery HTTP request (usually originated by a browser) contains additional information regarding the request such as header data, files, variables, etc. A web based application needs to parse that information so as to provide the correct response back to the requester. [*Phalcon\\Http\\Request*](../api/phalcon_http_request) encapsulates the information of the request, allowing you to access it in an object-oriented way.\n\n``` php\nuse Phalcon\\Http\\Request;\n\n// Getting a request instance\n$request = new Request();\n\n// Check whether the request was made with method POST\nif ($request->isPost()) {\n    // Check whether the request was made with Ajax\n    if ($request->isAjax()) {\n        echo \"Request was made using POST and AJAX\";\n    }\n}\n```\n\n## Getting Values\n\nPHP automatically fills the superglobal arrays `$_GET` and `$_POST` depending on the type of the request. These arrays contain the values present in forms submitted or the parameters sent via the URL. The variables in the arrays are never sanitized and can contain illegal characters or even malicious code, which can lead to [SQL injection](http://en.wikipedia.org/wiki/SQL_injection) or [Cross Site Scripting (XSS)](http://en.wikipedia.org/wiki/Cross-site_scripting) attacks.\n\n[*Phalcon\\Http\\Request*](../api/phalcon_http_request) allows you to access the values stored in the `$_REQUEST`, `$_GET` and `$_POST` arrays and sanitize or filter them with the ‘filter’ service, (by default [*Phalcon\\Filter*](filter)). The following examples offer the same behavior:\n\n``` php\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Manually applying the filter\n$email = $filter->sanitize($_POST[\"user_email\"], \"email\");\n\n// Manually applying the filter to the value\n$email = $filter->sanitize($request->getPost(\"user_email\"), \"email\");\n\n// Automatically applying the filter\n$email = $request->getPost(\"user_email\", \"email\");\n\n// Setting a default value if the param is null\n$email = $request->getPost(\"user_email\", \"email\", \"[email protected]\");\n\n// Setting a default value if the param is null without filtering\n$email = $request->getPost(\"user_email\", null, \"[email protected]\");\n```\n\n## Accessing the Request from Controllers\n\nThe most common place to access the request environment is in an action of a controller. To access the [*Phalcon\\Http\\Request*](../api/phalcon_http_request) object from a controller you will need to use the `$this->request` public property of the controller:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Check if request has made with POST\n        if ($this->request->isPost()) {\n            // Access POST data\n            $customerName = $this->request->getPost(\"name\");\n            $customerBorn = $this->request->getPost(\"born\");\n        }\n    }\n}\n```\n\n## Uploading Files\n\nAnother common task is file uploading. [*Phalcon\\Http\\Request*](../api/phalcon_http_request) offers an object-oriented way to achieve this task:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        // Check if the user has uploaded files\n        if ($this->request->hasFiles()) {\n            $files = $this->request->getUploadedFiles();\n\n            // Print the real file names and sizes\n            foreach ($files as $file) {\n                // Print file details\n                echo $file->getName(), \" \", $file->getSize(), \"\\n\";\n\n                // Move the file into the application\n                $file->moveTo(\n                    \"files/\" . $file->getName()\n                );\n            }\n        }\n    }\n}\n```\n\nEach object returned by `Phalcon\\Http\\Request::getUploadedFiles()` is an instance of the [*Phalcon\\Http\\Request\\File*](../api/phalcon_http_request_file) class. Using the `$_FILES` superglobal array offers the same behavior. [*Phalcon\\Http\\Request\\File*](../api/phalcon_http_request_file) encapsulates only the information related to each file uploaded with the request.\n\n## Working with Headers\n\nAs mentioned above, request headers contain useful information that allow us to send the proper response back to the user. The following examples show usages of that information:\n\n``` php\n// Get the Http-X-Requested-With header\n$requestedWith = $request->getHeader(\"HTTP_X_REQUESTED_WITH\");\n\nif ($requestedWith === \"XMLHttpRequest\") {\n    echo \"The request was made with Ajax\";\n}\n\n// Same as above\nif ($request->isAjax()) {\n    echo \"The request was made with Ajax\";\n}\n\n// Check the request layer\nif ($request->isSecure()) {\n    echo \"The request was made using a secure layer\";\n}\n\n// Get the servers's IP address. ie. 192.168.0.100\n$ipAddress = $request->getServerAddress();\n\n// Get the client's IP address ie. 201.245.53.51\n$ipAddress = $request->getClientAddress();\n\n// Get the User Agent (HTTP_USER_AGENT)\n$userAgent = $request->getUserAgent();\n\n// Get the best acceptable content by the browser. ie text/xml\n$contentType = $request->getAcceptableContent();\n\n// Get the best charset accepted by the browser. ie. utf-8\n$charset = $request->getBestCharset();\n\n// Get the best language accepted configured in the browser. ie. en-us\n$language = $request->getBestLanguage();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/request.html](https://docs.phalconphp.com/en/latest/reference/request.html)"
- name: Returning Responses
  id: reference/response
  summary: Part of the HTTP cycle is returning responses to clients
  description: "# Returning Responses\n\nPart of the HTTP cycle is returning responses to clients. [*Phalcon\\Http\\Response*](../api/phalcon_http_response) is the Phalcon component designed to achieve this task. HTTP responses are usually composed by headers and body. The following is an example of basic usage:\n\n``` php\nuse Phalcon\\Http\\Response;\n\n// Getting a response instance\n$response = new Response();\n\n// Set status code\n$response->setStatusCode(404, \"Not Found\");\n\n// Set the content of the response\n$response->setContent(\"Sorry, the page doesn't exist\");\n\n// Send response to the client\n$response->send();\n```\n\nIf you are using the full MVC stack there is no need to create responses manually. However, if you need to return a response directly from a controller’s action follow this example:\n\n``` php\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\n\nclass FeedController extends Controller\n{\n    public function getAction()\n    {\n        // Getting a response instance\n        $response = new Response();\n\n        $feed = // ... Load here the feed\n\n        // Set the content of the response\n        $response->setContent(\n            $feed->asString()\n        );\n\n        // Return the response\n        return $response;\n    }\n}\n```\n\n## Working with Headers\n\nHeaders are an important part of the HTTP response. It contains useful information about the response state like the HTTP status, type of response and much more.\n\nYou can set headers in the following way:\n\n``` php\n// Setting a header by its name\n$response->setHeader(\"Content-Type\", \"application/pdf\");\n$response->setHeader(\"Content-Disposition\", 'attachment; filename=\"downloaded.pdf\"');\n\n// Setting a raw header\n$response->setRawHeader(\"HTTP/1.1 200 OK\");\n```\n\nA [*Phalcon\\Http\\Response\\Headers*](../api/phalcon_http_response_headers) bag internally manages headers. This class retrieves the headers before sending it to client:\n\n``` php\n// Get the headers bag\n$headers = $response->getHeaders();\n\n// Get a header by its name\n$contentType = $headers->get(\"Content-Type\");\n```\n\n## Making Redirections\n\nWith [*Phalcon\\Http\\Response*](../api/phalcon_http_response) you can also execute HTTP redirections:\n\n``` php\n// Redirect to the default URI\n$response->redirect();\n\n// Redirect to the local base URI\n$response->redirect(\"posts/index\");\n\n// Redirect to an external URL\n$response->redirect(\"http://en.wikipedia.org\", true);\n\n// Redirect specifying the HTTP status code\n$response->redirect(\"http://www.example.com/new-location\", true, 301);\n```\n\nAll internal URIs are generated using the ‘url’ service (by default [*Phalcon\\Mvc\\Url*](url)). This example demonstrates how you can redirect using a route you have defined in your application:\n\n``` php\n// Redirect based on a named route\nreturn $response->redirect(\n    [\n        \"for\"        => \"index-lang\",\n        \"lang\"       => \"jp\",\n        \"controller\" => \"index\",\n    ]\n);\n```\n\nNote that a redirection doesn’t disable the view component, so if there is a view associated with the current action it will be executed anyway. You can disable the view from a controller by executing `$this->view->disable()`;\n\n## HTTP Cache\n\nOne of the easiest ways to improve the performance in your applications and reduce the traffic is using HTTP Cache. Most modern browsers support HTTP caching and is one of the reasons why many websites are currently fast.\n\nHTTP Cache can be altered in the following header values sent by the application when serving a page for the first time:\n\n- *Expires:* With this header the application can set a date in the future or the past telling the browser when the page must expire.\n- *Cache-Control:* This header allows to specify how much time a page should be considered fresh in the browser.\n- *Last-Modified:* This header tells the browser which was the last time the site was updated avoiding page re-loads\n- *ETag:* An etag is a unique identifier that must be created including the modification timestamp of the current page\n\n### Setting an Expiration Time\n\nThe expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. Until this date expires no new content will be requested from the server:\n\n``` php\n$expiryDate = new DateTime();\n$expiryDate->modify(\"+2 months\");\n\n$response->setExpires($expiryDate);\n```\n\nThe Response component automatically shows the date in GMT timezone as expected in an Expires header.\n\nIf we set this value to a date in the past the browser will always refresh the requested page:\n\n``` php\n$expiryDate = new DateTime();\n$expiryDate->modify(\"-10 minutes\");\n\n$response->setExpires($expiryDate);\n```\n\nBrowsers rely on the client’s clock to assess if this date has passed or not. The client clock can be modified to make pages expire and this may represent a limitation for this cache mechanism.\n\n### Cache-Control\n\nThis header provides a safer way to cache the pages served. We simply must specify a time in seconds telling the browser how long it must keep the page in its cache:\n\n``` php\n// Starting from now, cache the page for one day\n$response->setHeader(\"Cache-Control\", \"max-age=86400\");\n```\n\nThe opposite effect (avoid page caching) is achieved in this way:\n\n``` php\n// Never cache the served page\n$response->setHeader(\"Cache-Control\", \"private, max-age=0, must-revalidate\");\n```\n\n### E-Tag\n\nAn “entity-tag” or “E-tag” is a unique identifier that helps the browser realize if the page has changed or not between two requests. The identifier must be calculated taking into account that this must change if the previously served content has changed:\n\n``` php\n// Calculate the E-Tag based on the modification time of the latest news\n$mostRecentDate = News::maximum(\n    [\n        \"column\" => \"created_at\"\n    ]\n);\n\n$eTag = md5($mostRecentDate);\n\n// Send an E-Tag header\n$response->setHeader(\"E-Tag\", $eTag);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/response.html](https://docs.phalconphp.com/en/latest/reference/response.html)"
- name: Routing
  id: reference/routing
  summary: The router component allows you to define routes that are mapped to controllers or handlers that should receive the request
  description: "# Routing\n\nThe router component allows you to define routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.\n\n## Defining Routes\n\n[*Phalcon\\Mvc\\Router*](../api/phalcon_mvc_router) provides advanced routing capabilities. In MVC mode, you can define routes and map them to controllers/actions that you require. A route is defined as follows:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n// Create the router\n$router = new Router();\n\n// Define a route\n$router->add(\n    \"/admin/users/my-profile\",\n    [\n        \"controller\" => \"users\",\n        \"action\"     => \"profile\",\n    ]\n);\n\n// Another route\n$router->add(\n    \"/admin/users/change-password\",\n    [\n        \"controller\" => \"users\",\n        \"action\"     => \"changePassword\",\n    ]\n);\n\n$router->handle();\n```\n\nThe first parameter of the `add()` method is the pattern you want to match and, optionally, the second parameter is a set of paths. In this case, if the URI is /admin/users/my-profile, then the “users” controller with its action “profile” will be executed. It’s important to remember that the router does not execute the controller and action, it only collects this information to inform the correct component (ie. [*Phalcon\\Mvc\\Dispatcher*](../api/phalcon_mvc_dispatcher)) that this is the controller/action it should execute.\n\nAn application can have many paths and defining routes one by one can be a cumbersome task. In these cases we can create more flexible routes:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n// Create the router\n$router = new Router();\n\n// Define a route\n$router->add(\n    \"/admin/:controller/a/:action/:params\",\n    [\n        \"controller\" => 1,\n        \"action\"     => 2,\n        \"params\"     => 3,\n    ]\n);\n```\n\nIn the example above, we’re using wildcards to make a route valid for many URIs. For example, by accessing the following URL (/admin/users/a/delete/dave/301) would produce:\n\n|            |        |\n|------------|--------|\n| Controller | users  |\n| Action     | delete |\n| Parameter  | dave   |\n| Parameter  | 301    |\n\nThe `add()` method receives a pattern that can optionally have predefined placeholders and regular expression modifiers. All the routing patterns must start with a forward slash character (/). The regular expression syntax used is the same as the [PCRE regular expressions](http://www.php.net/manual/en/book.pcre.php). Note that, it is not necessary to add regular expression delimiters. All route patterns are case-insensitive.\n\nThe second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (`:controller`) is the controller part of the route, the second the action and so on.\n\nThese placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:\n\n| Placeholder    | Regular Expression    | Usage                                                                                                  |\n|----------------|-----------------------|--------------------------------------------------------------------------------------------------------|\n| `/:module`     | `/([a-zA-Z0-9\\_\\-]+)` | Matches a valid module name with alpha-numeric characters only                                         |\n| `/:controller` | `/([a-zA-Z0-9\\_\\-]+)` | Matches a valid controller name with alpha-numeric characters only                                     |\n| `/:action`     | `/([a-zA-Z0-9\\_]+)`   | Matches a valid action name with alpha-numeric characters only                                         |\n| `/:params`     | `(/.*)*`              | Matches a list of optional words separated by slashes. Only use this placeholder at the end of a route |\n| `/:namespace`  | `/([a-zA-Z0-9\\_\\-]+)` | Matches a single level namespace name                                                                  |\n| `/:int`        | `/([0-9]+)`           | Matches an integer parameter                                                                           |\n\nController names are camelized, this means that characters (`-`) and (`_`) are removed and the next character is uppercased. For instance, some_controller is converted to SomeController.\n\nSince you can add many routes as you need using the `add()` method, the order in which routes are added indicate their relevance, latest routes added have more relevance than first added. Internally, all defined routes are traversed in reverse order until [*Phalcon\\Mvc\\Router*](../api/phalcon_mvc_router) finds the one that matches the given URI and processes it, while ignoring the rest.\n\n### Parameters with Names\n\nThe example below demonstrates how to define names to route parameters:\n\n``` php\n$router->add(\n    \"/news/([0-9]{4})/([0-9]{2})/([0-9]{2})/:params\",\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"show\",\n        \"year\"       => 1, // ([0-9]{4})\n        \"month\"      => 2, // ([0-9]{2})\n        \"day\"        => 3, // ([0-9]{2})\n        \"params\"     => 4, // :params\n    ]\n);\n```\n\nIn the above example, the route doesn’t define a “controller” or “action” part. These parts are replaced with fixed values (“posts” and “show”). The user will not know the controller that is really dispatched by the request. Inside the controller, those named parameters can be accessed as follows:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        // Get \"year\" parameter\n        $year = $this->dispatcher->getParam(\"year\");\n\n        // Get \"month\" parameter\n        $month = $this->dispatcher->getParam(\"month\");\n\n        // Get \"day\" parameter\n        $day = $this->dispatcher->getParam(\"day\");\n\n        // ...\n    }\n}\n```\n\nNote that the values of the parameters are obtained from the dispatcher. This happens because it is the component that finally interacts with the drivers of your application. Moreover, there is also another way to create named parameters as part of the pattern:\n\n``` php\n$router->add(\n    \"/documentation/{chapter}/{name}.{type:[a-z]+}\",\n    [\n        \"controller\" => \"documentation\",\n        \"action\"     => \"show\",\n    ]\n);\n```\n\nYou can access their values in the same way as before:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass DocumentationController extends Controller\n{\n    public function showAction()\n    {\n        // Get \"name\" parameter\n        $name = $this->dispatcher->getParam(\"name\");\n\n        // Get \"type\" parameter\n        $type = $this->dispatcher->getParam(\"type\");\n\n        // ...\n    }\n}\n```\n\n### Short Syntax\n\nIf you don’t like using an array to define the route paths, an alternative syntax is also available. The following examples produce the same result:\n\n``` php\n// Short form\n$router->add(\n    \"/posts/{year:[0-9]+}/{title:[a-z\\-]+}\",\n    \"Posts::show\"\n);\n\n// Array form\n$router->add(\n    \"/posts/([0-9]+)/([a-z\\-]+)\",\n    [\n       \"controller\" => \"posts\",\n       \"action\"     => \"show\",\n       \"year\"       => 1,\n       \"title\"      => 2,\n    ]\n);\n```\n\n### Mixing Array and Short Syntax\n\nArray and short syntax can be mixed to define a route, in this case note that named parameters automatically are added to the route paths according to the position on which they were defined:\n\n``` php\n// First position must be skipped because it is used for\n// the named parameter 'country'\n$router->add(\n    \"/news/{country:[a-z]{2}}/([a-z+])/([a-z\\-+])\",\n    [\n        \"section\" => 2, // Positions start with 2\n        \"article\" => 3,\n    ]\n);\n```\n\n### Routing to Modules\n\nYou can define routes whose paths include modules. This is specially suitable to multi-module applications. It’s possible define a default route that includes a module wildcard:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router(false);\n\n$router->add(\n    \"/:module/:controller/:action/:params\",\n    [\n        \"module\"     => 1,\n        \"controller\" => 2,\n        \"action\"     => 3,\n        \"params\"     => 4,\n    ]\n);\n```\n\nIn this case, the route always must have the module name as part of the URL. For example, the following URL: /admin/users/edit/sonny, will be processed as:\n\n|            |       |\n|------------|-------|\n| Module     | admin |\n| Controller | users |\n| Action     | edit  |\n| Parameter  | sonny |\n\nOr you can bind specific routes to specific modules:\n\n``` php\n$router->add(\n    \"/login\",\n    [\n        \"module\"     => \"backend\",\n        \"controller\" => \"login\",\n        \"action\"     => \"index\",\n    ]\n);\n\n$router->add(\n    \"/products/:action\",\n    [\n        \"module\"     => \"frontend\",\n        \"controller\" => \"products\",\n        \"action\"     => 1,\n    ]\n);\n```\n\nOr bind them to specific namespaces:\n\n``` php\n$router->add(\n    \"/:namespace/login\",\n    [\n        \"namespace\"  => 1,\n        \"controller\" => \"login\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\nNamespaces/class names must be passed separated:\n\n``` php\n$router->add(\n    \"/login\",\n    [\n        \"namespace\"  => \"Backend\\\\Controllers\",\n        \"controller\" => \"login\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n### HTTP Method Restrictions\n\nWhen you add a route using simply `add()`, the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method, this is especially useful when creating RESTful applications:\n\n``` php\n// This route only will be matched if the HTTP method is GET\n$router->addGet(\n    \"/products/edit/{id}\",\n    \"Products::edit\"\n);\n\n// This route only will be matched if the HTTP method is POST\n$router->addPost(\n    \"/products/save\",\n    \"Products::save\"\n);\n\n// This route will be matched if the HTTP method is POST or PUT\n$router->add(\n    \"/products/update\",\n    \"Products::update\"\n)->via(\n    [\n        \"POST\",\n        \"PUT\",\n    ]\n);\n```\n\n### Using conversors\n\nConversors allow you to freely transform the route’s parameters before passing them to the dispatcher. The following examples show how to use them:\n\n``` php\n// The action name allows dashes, an action can be: /products/new-ipod-nano-4-generation\n$route = $router->add(\n    \"/products/{slug:[a-z\\-]+}\",\n    [\n        \"controller\" => \"products\",\n        \"action\"     => \"show\",\n    ]\n);\n\n$route->convert(\n    \"slug\",\n    function ($slug) {\n        // Transform the slug removing the dashes\n        return str_replace(\"-\", \"\", $slug);\n    }\n);\n```\n\nAnother use case for conversors is binding a model into a route. This allows the model to be passed into the defined action directly:\n\n``` php\n// This example works off the assumption that the ID is being used as parameter in the url: /products/4\n$route = $router->add(\n    \"/products/{id}\",\n    [\n        \"controller\" => \"products\",\n        \"action\"     => \"show\",\n    ]\n);\n\n$route->convert(\n    \"id\",\n    function ($id) {\n        // Fetch the model\n        return Product::findFirstById($id);\n    }\n);\n```\n\n### Groups of Routes\n\nIf a set of routes have common paths they can be grouped to easily maintain them:\n\n``` php\nuse Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\n$router = new Router();\n\n// Create a group with a common module and controller\n$blog = new RouterGroup(\n    [\n        \"module\"     => \"blog\",\n        \"controller\" => \"index\",\n    ]\n);\n\n// All the routes start with /blog\n$blog->setPrefix(\"/blog\");\n\n// Add a route to the group\n$blog->add(\n    \"/save\",\n    [\n        \"action\" => \"save\",\n    ]\n);\n\n// Add another route to the group\n$blog->add(\n    \"/edit/{id}\",\n    [\n        \"action\" => \"edit\",\n    ]\n);\n\n// This route maps to a controller different than the default\n$blog->add(\n    \"/blog\",\n    [\n        \"controller\" => \"blog\",\n        \"action\"     => \"index\",\n    ]\n);\n\n// Add the group to the router\n$router->mount($blog);\n```\n\nYou can move groups of routes to separate files in order to improve the organization and code reusing in the application:\n\n``` php\nuse Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\nclass BlogRoutes extends RouterGroup\n{\n    public function initialize()\n    {\n        // Default paths\n        $this->setPaths(\n            [\n                \"module\"    => \"blog\",\n                \"namespace\" => \"Blog\\\\Controllers\",\n            ]\n        );\n\n        // All the routes start with /blog\n        $this->setPrefix(\"/blog\");\n\n        // Add a route to the group\n        $this->add(\n            \"/save\",\n            [\n                \"action\" => \"save\",\n            ]\n        );\n\n        // Add another route to the group\n        $this->add(\n            \"/edit/{id}\",\n            [\n                \"action\" => \"edit\",\n            ]\n        );\n\n        // This route maps to a controller different than the default\n        $this->add(\n            \"/blog\",\n            [\n                \"controller\" => \"blog\",\n                \"action\"     => \"index\",\n            ]\n        );\n    }\n}\n```\n\nThen mount the group in the router:\n\n``` php\n// Add the group to the router\n$router->mount(\n    new BlogRoutes()\n);\n```\n\n## Matching Routes\n\nA valid URI must be passed to the Router so that it can process it and find a matching route. By default, the routing URI is taken from the `$_GET[\"_url\"]` variable that is created by the rewrite engine module. A couple of rewrite rules that work very well with Phalcon are:\n\n``` apacheconf\nRewriteEngine On\nRewriteCond   %{REQUEST_FILENAME} !-d\nRewriteCond   %{REQUEST_FILENAME} !-f\nRewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n```\n\nIn this configuration, any requests to files or folders that don’t exist will be sent to index.php.\n\nThe following example shows how to use this component in stand-alone mode:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n// Creating a router\n$router = new Router();\n\n// Define routes here if any\n// ...\n\n// Taking URI from $_GET[\"_url\"]\n$router->handle();\n\n// Or Setting the URI value directly\n$router->handle(\"/employees/edit/17\");\n\n// Getting the processed controller\necho $router->getControllerName();\n\n// Getting the processed action\necho $router->getActionName();\n\n// Get the matched route\n$route = $router->getMatchedRoute();\n```\n\n## Naming Routes\n\nEach route that is added to the router is stored internally as a [*Phalcon\\Mvc\\Router\\Route*](../api/phalcon_mvc_router_route) object. That class encapsulates all the details of each route. For instance, we can give a name to a path to identify it uniquely in our application. This is especially useful if you want to create URLs from it.\n\n``` php\n$route = $router->add(\n    \"/posts/{year}/{title}\",\n    \"Posts::show\"\n);\n\n$route->setName(\"show-posts\");\n```\n\nThen, using for example the component [*Phalcon\\Mvc\\Url*](../api/phalcon_mvc_url) we can build routes from its name:\n\n``` php\n// Returns /posts/2012/phalcon-1-0-released\necho $url->get(\n    [\n        \"for\"   => \"show-posts\",\n        \"year\"  => \"2012\",\n        \"title\" => \"phalcon-1-0-released\",\n    ]\n);\n```\n\n## Usage Examples\n\nThe following are examples of custom routes:\n\n``` php\n// Matches \"/system/admin/a/edit/7001\"\n$router->add(\n    \"/system/:controller/a/:action/:params\",\n    [\n        \"controller\" => 1,\n        \"action\"     => 2,\n        \"params\"     => 3,\n    ]\n);\n\n// Matches \"/es/news\"\n$router->add(\n    \"/([a-z]{2})/:controller\",\n    [\n        \"controller\" => 2,\n        \"action\"     => \"index\",\n        \"language\"   => 1,\n    ]\n);\n\n// Matches \"/es/news\"\n$router->add(\n    \"/{language:[a-z]{2}}/:controller\",\n    [\n        \"controller\" => 2,\n        \"action\"     => \"index\",\n    ]\n);\n\n// Matches \"/admin/posts/edit/100\"\n$router->add(\n    \"/admin/:controller/:action/:int\",\n    [\n        \"controller\" => 1,\n        \"action\"     => 2,\n        \"id\"         => 3,\n    ]\n);\n\n// Matches \"/posts/2015/02/some-cool-content\"\n$router->add(\n    \"/posts/([0-9]{4})/([0-9]{2})/([a-z\\-]+)\",\n    [\n        \"controller\" => \"posts\",\n        \"action\"     => \"show\",\n        \"year\"       => 1,\n        \"month\"      => 2,\n        \"title\"      => 3,\n    ]\n);\n\n// Matches \"/manual/en/translate.adapter.html\"\n$router->add(\n    \"/manual/([a-z]{2})/([a-z\\.]+)\\.html\",\n    [\n        \"controller\" => \"manual\",\n        \"action\"     => \"show\",\n        \"language\"   => 1,\n        \"file\"       => 2,\n    ]\n);\n\n// Matches /feed/fr/le-robots-hot-news.atom\n$router->add(\n    \"/feed/{lang:[a-z]+}/{blog:[a-z\\-]+}\\.{type:[a-z\\-]+}\",\n    \"Feed::get\"\n);\n\n// Matches /api/v1/users/peter.json\n$router->add(\n    \"/api/(v1|v2)/{method:[a-z]+}/{param:[a-z]+}\\.(json|xml)\",\n    [\n        \"controller\" => \"api\",\n        \"version\"    => 1,\n        \"format\"     => 4,\n    ]\n);\n```\n\n> Beware of characters allowed in regular expression for controllers and namespaces. As these become class names and in turn they’re passed through the file system could be used by attackers to read unauthorized files. A safe regular expression is: `/([a-zA-Z0-9\\_\\-]+)`\n\n## Default Behavior\n\n[*Phalcon\\Mvc\\Router*](../api/phalcon_mvc_router) has a default behavior that provides a very simple routing that always expects a URI that matches the following pattern: /:controller/:action/:params\n\nFor example, for a URL like this *http://phalconphp.com/documentation/show/about.html*, this router will translate it as follows:\n\n|            |               |\n|------------|---------------|\n| Controller | documentation |\n| Action     | show          |\n| Parameter  | about.html    |\n\nIf you don’t want the router to have this behavior, you must create the router passing `false` as the first parameter:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n// Create the router without default routes\n$router = new Router(false);\n```\n\n## Setting the default route\n\nWhen your application is accessed without any route, the ‘/’ route is used to determine what paths must be used to show the initial page in your website/application:\n\n``` php\n$router->add(\n    \"/\",\n    [\n        \"controller\" => \"index\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n## Not Found Paths\n\nIf none of the routes specified in the router are matched, you can define a group of paths to be used in this scenario:\n\n``` php\n// Set 404 paths\n$router->notFound(\n    [\n        \"controller\" => \"index\",\n        \"action\"     => \"route404\",\n    ]\n);\n```\n\nThis is typically for an Error 404 page.\n\n## Setting default paths\n\nIt’s possible to define default values for the module, controller or action. When a route is missing any of those paths they can be automatically filled by the router:\n\n``` php\n// Setting a specific default\n$router->setDefaultModule(\"backend\");\n$router->setDefaultNamespace(\"Backend\\\\Controllers\");\n$router->setDefaultController(\"index\");\n$router->setDefaultAction(\"index\");\n\n// Using an array\n$router->setDefaults(\n    [\n        \"controller\" => \"index\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n## Dealing with extra/trailing slashes\n\nSometimes a route could be accessed with extra/trailing slashes. Those extra slashes would lead to produce a not-found status in the dispatcher. You can set up the router to automatically remove the slashes from the end of handled route:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// Remove trailing slashes automatically\n$router->removeExtraSlashes(true);\n```\n\nOr, you can modify specific routes to optionally accept trailing slashes:\n\n``` php\n// The [/]{0,1} allows this route to have optionally have a trailing slash\n$router->add(\n    \"/{language:[a-z]{2}}/:controller[/]{0,1}\",\n    [\n        \"controller\" => 2,\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n## Match Callbacks\n\nSometimes, routes should only be matched if they meet specific conditions. You can add arbitrary conditions to routes using the `beforeMatch()` callback. If this function return `false`, the route will be treated as non-matched:\n\n``` php\n$route = $router->add(\"/login\",\n    [\n        \"module\"     => \"admin\",\n        \"controller\" => \"session\",\n    ]\n);\n\n$route->beforeMatch(\n    function ($uri, $route) {\n        // Check if the request was made with Ajax\n        if (isset($_SERVER[\"HTTP_X_REQUESTED_WITH\"]) && $_SERVER[\"HTTP_X_REQUESTED_WITH\"] === \"XMLHttpRequest\") {\n            return false;\n        }\n\n        return true;\n    }\n);\n```\n\nYou can re-use these extra conditions in classes:\n\n``` php\nclass AjaxFilter\n{\n    public function check()\n    {\n        return $_SERVER[\"HTTP_X_REQUESTED_WITH\"] === \"XMLHttpRequest\";\n    }\n}\n```\n\nAnd use this class instead of the anonymous function:\n\n``` php\n$route = $router->add(\n    \"/get/info/{id}\",\n    [\n        \"controller\" => \"products\",\n        \"action\"     => \"info\",\n    ]\n);\n\n$route->beforeMatch(\n    [\n        new AjaxFilter(),\n        \"check\"\n    ]\n);\n```\n\nAs of Phalcon 3, there is another way to check this:\n\n``` php\n$route = $router->add(\n    \"/login\",\n    [\n        \"module\"     => \"admin\",\n        \"controller\" => \"session\",\n    ]\n);\n\n$route->beforeMatch(\n    function ($uri, $route) {\n        /**\n         * @var string $uri\n         * @var \\Phalcon\\Mvc\\Router\\Route $route\n         * @var \\Phalcon\\DiInterface $this\n         * @var \\Phalcon\\Http\\Request $request\n         */\n        $request = $this->getShared(\"request\");\n\n        // Check if the request was made with Ajax\n        return $request->isAjax();\n    }\n);\n```\n\n## Hostname Constraints\n\nThe router allows you to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:\n\n``` php\n$route = $router->add(\n    \"/login\",\n    [\n        \"module\"     => \"admin\",\n        \"controller\" => \"session\",\n        \"action\"     => \"login\",\n    ]\n);\n\n$route->setHostName(\"admin.company.com\");\n```\n\nThe hostname can also be passed as a regular expressions:\n\n``` php\n$route = $router->add(\n    \"/login\",\n    [\n        \"module\"     => \"admin\",\n        \"controller\" => \"session\",\n        \"action\"     => \"login\",\n    ]\n);\n\n$route->setHostName(\"([a-z]+).company.com\");\n```\n\nIn groups of routes you can set up a hostname constraint that apply for every route in the group:\n\n``` php\nuse Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\n// Create a group with a common module and controller\n$blog = new RouterGroup(\n    [\n        \"module\"     => \"blog\",\n        \"controller\" => \"posts\",\n    ]\n);\n\n// Hostname restriction\n$blog->setHostName(\"blog.mycompany.com\");\n\n// All the routes start with /blog\n$blog->setPrefix(\"/blog\");\n\n// Default route\n$blog->add(\n    \"/\",\n    [\n        \"action\" => \"index\",\n    ]\n);\n\n// Add a route to the group\n$blog->add(\n    \"/save\",\n    [\n        \"action\" => \"save\",\n    ]\n);\n\n// Add another route to the group\n$blog->add(\n    \"/edit/{id}\",\n    [\n        \"action\" => \"edit\",\n    ]\n);\n\n// Add the group to the router\n$router->mount($blog);\n```\n\n## URI Sources\n\nBy default the URI information is obtained from the `$_GET[\"_url\"]` variable, this is passed by the Rewrite-Engine to Phalcon, you can also use `$_SERVER[\"REQUEST_URI\"]` if required:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n// ...\n\n// Use $_GET[\"_url\"] (default)\n$router->setUriSource(\n    Router::URI_SOURCE_GET_URL\n);\n\n// Use $_SERVER[\"REQUEST_URI\"]\n$router->setUriSource(\n    Router::URI_SOURCE_SERVER_REQUEST_URI\n);\n```\n\nOr you can manually pass a URI to the `handle()` method:\n\n``` php\n$router->handle(\"/some/route/to/handle\");\n```\n\n## Testing your routes\n\nSince this component has no dependencies, you can create a file as shown below to test your routes:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n// These routes simulate real URIs\n$testRoutes = [\n    \"/\",\n    \"/index\",\n    \"/index/index\",\n    \"/index/test\",\n    \"/products\",\n    \"/products/index/\",\n    \"/products/show/101\",\n];\n\n$router = new Router();\n\n// Add here your custom routes\n// ...\n\n// Testing each route\nforeach ($testRoutes as $testRoute) {\n    // Handle the route\n    $router->handle($testRoute);\n\n    echo \"Testing \", $testRoute, \"<br>\";\n\n    // Check if some route was matched\n    if ($router->wasMatched()) {\n        echo \"Controller: \", $router->getControllerName(), \"<br>\";\n        echo \"Action: \", $router->getActionName(), \"<br>\";\n    } else {\n        echo \"The route wasn't matched by any route<br>\";\n    }\n\n    echo \"<br>\";\n}\n```\n\n## Annotations Router\n\nThis component provides a variant that’s integrated with the [*annotations*](annotations) service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:\n\n``` php\nuse Phalcon\\Mvc\\Router\\Annotations as RouterAnnotations;\n\n$di[\"router\"] = function () {\n    // Use the annotations router. We're passing false as we don't want the router to add its default patterns\n    $router = new RouterAnnotations(false);\n\n    // Read the annotations from ProductsController if the URI starts with /api/products\n    $router->addResource(\"Products\", \"/api/products\");\n\n    return $router;\n};\n```\n\nThe annotations can be defined in the following way:\n\n``` php\n/**\n * @RoutePrefix(\"/api/products\")\n */\nclass ProductsController\n{\n    /**\n     * @Get(\n     *     \"/\"\n     * )\n     */\n    public function indexAction()\n    {\n\n    }\n\n    /**\n     * @Get(\n     *     \"/edit/{id:[0-9]+}\",\n     *     name=\"edit-robot\"\n     * )\n     */\n    public function editAction($id)\n    {\n\n    }\n\n    /**\n     * @Route(\n     *     \"/save\",\n     *     methods={\"POST\", \"PUT\"},\n     *     name=\"save-robot\"\n     * )\n     */\n    public function saveAction()\n    {\n\n    }\n\n    /**\n     * @Route(\n     *     \"/delete/{id:[0-9]+}\",\n     *     methods=\"DELETE\",\n     *     conversors={\n     *         id=\"MyConversors::checkId\"\n     *     }\n     * )\n     */\n    public function deleteAction($id)\n    {\n\n    }\n\n    public function infoAction($id)\n    {\n\n    }\n}\n```\n\nOnly methods marked with valid annotations are used as routes. List of annotations supported:\n\n| Name        | Description                                                                                       | Usage                                  |\n|-------------|---------------------------------------------------------------------------------------------------|----------------------------------------|\n| RoutePrefix | A prefix to be prepended to each route URI. This annotation must be placed at the class’ docblock | `@RoutePrefix(\"/api/products\")`        |\n| Route       | This annotation marks a method as a route. This annotation must be placed in a method docblock    | `@Route(\"/api/products/show\")`         |\n| Get         | This annotation marks a method as a route restricting the HTTP method to GET                      | `@Get(\"/api/products/search\")`         |\n| Post        | This annotation marks a method as a route restricting the HTTP method to POST                     | `@Post(\"/api/products/save\")`          |\n| Put         | This annotation marks a method as a route restricting the HTTP method to PUT                      | `@Put(\"/api/products/save\")`           |\n| Delete      | This annotation marks a method as a route restricting the HTTP method to DELETE                   | `@Delete(\"/api/products/delete/{id}\")` |\n| Options     | This annotation marks a method as a route restricting the HTTP method to OPTIONS                  | `@Option(\"/api/products/info\")`        |\n\nFor annotations that add routes, the following parameters are supported:\n\n| Name       | Description                                                          | Usage                                                                    |\n|------------|----------------------------------------------------------------------|--------------------------------------------------------------------------|\n| methods    | Define one or more HTTP method that route must meet with             | `@Route(\"/api/products\",`` ``methods={\"GET\",`` ``\"POST\"})`               |\n| name       | Define a name for the route                                          | `@Route(\"/api/products\",`` ``name=\"get-products\")`                       |\n| paths      | An array of paths like the one passed to `Phalcon\\Mvc\\Router::add()` | `@Route(\"/posts/{id}/{slug}\",`` ``paths={module=\"backend\"})`             |\n| conversors | A hash of conversors to be applied to the parameters                 | `@Route(\"/posts/{id}/{slug}\",`` ``conversors={id=\"MyConversor::getId\"})` |\n\nIf you’re using modules in your application, it is better use the `addModuleResource()` method:\n\n``` php\nuse Phalcon\\Mvc\\Router\\Annotations as RouterAnnotations;\n\n$di[\"router\"] = function () {\n    // Use the annotations router\n    $router = new RouterAnnotations(false);\n\n    // Read the annotations from Backend\\Controllers\\ProductsController if the URI starts with /api/products\n    $router->addModuleResource(\"backend\", \"Products\", \"/api/products\");\n\n    return $router;\n};\n```\n\n## Registering Router instance\n\nYou can register router during service registration with Phalcon dependency injector to make it available inside the controllers.\n\nYou need to add code below in your bootstrap file (for example index.php or app/config/services.php if you use [Phalcon Developer Tools](http://phalconphp.com/en/download/tools))\n\n``` php\n/**\n * Add routing capabilities\n */\n$di->set(\n    \"router\",\n    function () {\n        require __DIR__ . \"/../app/config/routes.php\";\n\n        return $router;\n    }\n);\n```\n\nYou need to create app/config/routes.php and add router initialization code, for example:\n\n``` php\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router->add(\n    \"/login\",\n    [\n        \"controller\" => \"login\",\n        \"action\"     => \"index\",\n    ]\n);\n\n$router->add(\n    \"/products/:action\",\n    [\n        \"controller\" => \"products\",\n        \"action\"     => 1,\n    ]\n);\n\nreturn $router;\n```\n\n## Implementing your own Router\n\nThe [*Phalcon\\Mvc\\RouterInterface*](../api/phalcon_mvc_routerinterface) interface must be implemented to create your own router replacing the one provided by Phalcon.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/routing.html](https://docs.phalconphp.com/en/latest/reference/routing.html)"
- name: Security
  id: reference/security
  summary: This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF)
  description: "# Security\n\nThis component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).\n\n## Password Hashing\n\nStoring passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods “[md5](http://php.net/manual/en/function.md5.php)” and “[sha1](http://php.net/manual/en/function.sha1.php)”. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as [rainbow tables](http://en.wikipedia.org/wiki/Rainbow_table).\n\nTo solve this problem we can use hash algorithms as [bcrypt](http://en.wikipedia.org/wiki/Bcrypt). Why bcrypt? Thanks to its “[Eksblowfish](http://en.wikipedia.org/wiki/Bcrypt#Algorithm)” key setup algorithm we can make the password encryption as “slow” as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.\n\nThis component gives you the ability to use this algorithm in a simple way:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function registerAction()\n    {\n        $user = new Users();\n\n        $login    = $this->request->getPost(\"login\");\n        $password = $this->request->getPost(\"password\");\n\n        $user->login = $login;\n\n        // Store the password hashed\n        $user->password = $this->security->hash($password);\n\n        $user->save();\n    }\n}\n```\n\nWe saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        $login    = $this->request->getPost(\"login\");\n        $password = $this->request->getPost(\"password\");\n\n        $user = Users::findFirstByLogin($login);\n        if ($user) {\n            if ($this->security->checkHash($password, $user->password)) {\n                // The password is valid\n            }\n        } else {\n            // To protect against timing attacks. Regardless of whether a user exists or not, the script will take roughly the same amount as it will always be computing a hash.\n            $this->security->hash(rand());\n        }\n\n        // The validation has failed\n    }\n}\n```\n\nThe salt is generated using pseudo-random bytes with the PHP’s function [openssl_random_pseudo_bytes](http://php.net/manual/en/function.openssl-random-pseudo-bytes.php) so is required to have the [openssl](http://php.net/manual/en/book.openssl.php) extension loaded.\n\n## Cross-Site Request Forgery (CSRF) protection\n\nThis is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.\n\nThe idea is to prevent the form values from being sent outside our application. To fix this, we generate a [random nonce](http://en.wikipedia.org/wiki/Cryptographic_nonce) (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:\n\n``` html\n<?php echo Tag::form('session/login') ?>\n\n    <!-- Login and password inputs ... -->\n\n    <input type=\"hidden\" name=\"<?php echo $this->security->getTokenKey() ?>\"\n        value=\"<?php echo $this->security->getToken() ?>\"/>\n\n</form>\n```\n\nThen in the controller’s action you can check if the CSRF token is valid:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        if ($this->request->isPost()) {\n            if ($this->security->checkToken()) {\n                // The token is OK\n            }\n        }\n    }\n}\n```\n\nRemember to add a session adapter to your Dependency Injector, otherwise the token check won’t work:\n\n``` php\n$di->setShared(\n    \"session\",\n    function () {\n        $session = new \\Phalcon\\Session\\Adapter\\Files();\n\n        $session->start();\n\n        return $session;\n    }\n);\n```\n\nAdding a [captcha](http://www.google.com/recaptcha) to the form is also recommended to completely avoid the risks of this attack.\n\n## Setting up the component\n\nThis component is automatically registered in the services container as ‘security’, you can re-register it to setup its options:\n\n``` php\nuse Phalcon\\Security;\n\n$di->set(\n    \"security\",\n    function () {\n        $security = new Security();\n\n        // Set the password hashing factor to 12 rounds\n        $security->setWorkFactor(12);\n\n        return $security;\n    },\n    true\n);\n```\n\n## Random\n\nThe [*Phalcon\\Security\\Random*](../api/phalcon_security_random) class makes it really easy to generate lots of types of random data.\n\n``` php\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\n// ...\n$bytes      = $random->bytes();\n\n// Generate a random hex string of length $len.\n$hex        = $random->hex($len);\n\n// Generate a random base64 string of length $len.\n$base64     = $random->base64($len);\n\n// Generate a random URL-safe base64 string of length $len.\n$base64Safe = $random->base64Safe($len);\n\n// Generate a UUID (version 4). See https://en.wikipedia.org/wiki/Universally_unique_identifier\n$uuid       = $random->uuid();\n\n// Generate a random integer between 0 and $n.\n$number     = $random->number($n);\n```\n\n## External Resources\n\n- [Vökuró](http://vokuro.phalconphp.com), is a sample application that uses the Security component for avoid CSRF and password hashing, \\[[Github](https://github.com/phalcon/vokuro)\\]\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/security.html](https://docs.phalconphp.com/en/latest/reference/security.html)"
- name: Security
  id: api/phalcon_security
  summary: Getting OpenSSL or LibreSSL version Parse OPENSSL_VERSION_TEXT because OPENSSL_VERSION_NUMBER is no use for LibreSSL
  description: "# Class **Phalcon\\Security**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/security.zep)\n\nThis component provides a set of functions to improve the security in Phalcon applications\n\n``` php\n$login    = $this->request->getPost(\"login\");\n$password = $this->request->getPost(\"password\");\n\n$user = Users::findFirstByLogin($login);\n\nif ($user) {\n    if ($this->security->checkHash($password, $user->password)) {\n        // The password is valid\n    }\n}\n```\n\n## Constants\n\n### *integer* **CRYPT_DEFAULT**\n\n### *integer* **CRYPT_STD_DES**\n\n### *integer* **CRYPT_EXT_DES**\n\n### *integer* **CRYPT_MD5**\n\n### *integer* **CRYPT_BLOWFISH**\n\n### *integer* **CRYPT_BLOWFISH_A**\n\n### *integer* **CRYPT_BLOWFISH_X**\n\n### *integer* **CRYPT_BLOWFISH_Y**\n\n### *integer* **CRYPT_SHA256**\n\n### *integer* **CRYPT_SHA512**\n\n## Methods\n\n### public **setWorkFactor** (*mixed* $workFactor)\n\n...\n\n### public **getWorkFactor** ()\n\n...\n\n### public **\\_\\_construct** ()\n\nPhalcon\\Security constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector\n\n### public **getDI** ()\n\nReturns the internal dependency injector\n\n### public **setRandomBytes** (*mixed* $randomBytes)\n\nSets a number of bytes to be generated by the openssl pseudo random generator\n\n### public **getRandomBytes** ()\n\nReturns a number of bytes to be generated by the openssl pseudo random generator\n\n### public **getRandom** ()\n\nReturns a secure random number generator instance\n\n### public **getSaltBytes** (\\[*mixed* $numberBytes\\])\n\nGenerate a \\>22-length pseudo random string to be used as salt for passwords\n\n### public **hash** (*mixed* $password, \\[*mixed* $workFactor\\])\n\nCreates a password hash using bcrypt with a pseudo random salt\n\n### public **checkHash** (*mixed* $password, *mixed* $passwordHash, \\[*mixed* $maxPassLength\\])\n\nChecks a plain text password and its hash version to check if the password matches\n\n### public **isLegacyHash** (*mixed* $passwordHash)\n\nChecks if a password hash is a valid bcrypt’s hash\n\n### public **getTokenKey** ()\n\nGenerates a pseudo random token key to be used as input’s name in a CSRF check\n\n### public **getToken** ()\n\nGenerates a pseudo random token value to be used as input’s value in a CSRF check\n\n### public **checkToken** (\\[*mixed* $tokenKey\\], \\[*mixed* $tokenValue\\], \\[*mixed* $destroyIfValid\\])\n\nCheck if the CSRF token sent in the request is the same that the current in session\n\n### public **getSessionToken** ()\n\nReturns the value of the CSRF token in session\n\n### public **destroyToken** ()\n\nRemoves the value of the CSRF token and key from session\n\n### public **computeHmac** (*mixed* $data, *mixed* $key, *mixed* $algo, \\[*mixed* $raw\\])\n\nComputes a HMAC\n\n### public **setDefaultHash** (*mixed* $defaultHash)\n\nSets the default hash\n\n### public **getDefaultHash** ()\n\nReturns the default hash\n\n### public **hasLibreSsl** ()\n\nTesting for LibreSSL\n\n### public **getSslVersionNumber** ()\n\nGetting OpenSSL or LibreSSL version Parse OPENSSL_VERSION_TEXT because OPENSSL_VERSION_NUMBER is no use for LibreSSL.\n\n``` php\nif ($security->getSslVersionNumber() >= 20105) {\n    // ...\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Security.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Security.html)"
- name: Security::checkHash
  id: api/phalcon_security#checkhash
  summary: null
  belongs_to: Security
  description: |-
    ### public **checkHash** (*mixed* $password, *mixed* $passwordHash, \[*mixed* $maxPassLength\])

    Checks a plain text password and its hash version to check if the password matches
- name: Security::checkToken
  id: api/phalcon_security#checktoken
  summary: null
  belongs_to: Security
  description: |-
    ### public **checkToken** (\[*mixed* $tokenKey\], \[*mixed* $tokenValue\], \[*mixed* $destroyIfValid\])

    Check if the CSRF token sent in the request is the same that the current in session
- name: Security::computeHmac
  id: api/phalcon_security#computehmac
  summary: null
  belongs_to: Security
  description: |-
    ### public **computeHmac** (*mixed* $data, *mixed* $key, *mixed* $algo, \[*mixed* $raw\])

    Computes a HMAC
- name: Security::CRYPT_BLOWFISH
  id: api/phalcon_security#crypt_blowfish
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_BLOWFISH**'
- name: Security::CRYPT_BLOWFISH_A
  id: api/phalcon_security#crypt_blowfish_a
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_BLOWFISH_A**'
- name: Security::CRYPT_BLOWFISH_X
  id: api/phalcon_security#crypt_blowfish_x
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_BLOWFISH_X**'
- name: Security::CRYPT_BLOWFISH_Y
  id: api/phalcon_security#crypt_blowfish_y
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_BLOWFISH_Y**'
- name: Security::CRYPT_DEFAULT
  id: api/phalcon_security#crypt_default
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_DEFAULT**'
- name: Security::CRYPT_EXT_DES
  id: api/phalcon_security#crypt_ext_des
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_EXT_DES**'
- name: Security::CRYPT_MD5
  id: api/phalcon_security#crypt_md5
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_MD5**'
- name: Security::CRYPT_SHA256
  id: api/phalcon_security#crypt_sha256
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_SHA256**'
- name: Security::CRYPT_SHA512
  id: api/phalcon_security#crypt_sha512
  summary: null
  belongs_to: Security
  description: |-
    ### *integer* **CRYPT_SHA512**

    ## Methods
- name: Security::CRYPT_STD_DES
  id: api/phalcon_security#crypt_std_des
  summary: null
  belongs_to: Security
  description: '### *integer* **CRYPT_STD_DES**'
- name: Security::destroyToken
  id: api/phalcon_security#destroytoken
  summary: null
  belongs_to: Security
  description: |-
    ### public **destroyToken** ()

    Removes the value of the CSRF token and key from session
- name: Security::getDefaultHash
  id: api/phalcon_security#getdefaulthash
  summary: null
  belongs_to: Security
  description: |-
    ### public **getDefaultHash** ()

    Returns the default hash
- name: Security::getDI
  id: api/phalcon_security#getdi
  summary: null
  belongs_to: Security
  description: |-
    ### public **getDI** ()

    Returns the internal dependency injector
- name: Security::getRandom
  id: api/phalcon_security#getrandom
  summary: null
  belongs_to: Security
  description: |-
    ### public **getRandom** ()

    Returns a secure random number generator instance
- name: Security::getRandomBytes
  id: api/phalcon_security#getrandombytes
  summary: null
  belongs_to: Security
  description: |-
    ### public **getRandomBytes** ()

    Returns a number of bytes to be generated by the openssl pseudo random generator
- name: Security::getSaltBytes
  id: api/phalcon_security#getsaltbytes
  summary: null
  belongs_to: Security
  description: |-
    ### public **getSaltBytes** (\[*mixed* $numberBytes\])

    Generate a \>22-length pseudo random string to be used as salt for passwords
- name: Security::getSessionToken
  id: api/phalcon_security#getsessiontoken
  summary: null
  belongs_to: Security
  description: |-
    ### public **getSessionToken** ()

    Returns the value of the CSRF token in session
- name: Security::getSslVersionNumber
  id: api/phalcon_security#getsslversionnumber
  summary: Getting OpenSSL or LibreSSL version Parse OPENSSL_VERSION_TEXT because OPENSSL_VERSION_NUMBER is no use for LibreSSL
  belongs_to: Security
  description: "### public **getSslVersionNumber** ()\n\nGetting OpenSSL or LibreSSL version Parse OPENSSL_VERSION_TEXT because OPENSSL_VERSION_NUMBER is no use for LibreSSL.\n\n``` php\nif ($security->getSslVersionNumber() >= 20105) {\n    // ...\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Security.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Security.html)"
- name: Security::getToken
  id: api/phalcon_security#gettoken
  summary: null
  belongs_to: Security
  description: |-
    ### public **getToken** ()

    Generates a pseudo random token value to be used as input’s value in a CSRF check
- name: Security::getTokenKey
  id: api/phalcon_security#gettokenkey
  summary: null
  belongs_to: Security
  description: |-
    ### public **getTokenKey** ()

    Generates a pseudo random token key to be used as input’s name in a CSRF check
- name: Security::getWorkFactor
  id: api/phalcon_security#getworkfactor
  summary: null
  belongs_to: Security
  description: |-
    ### public **getWorkFactor** ()

    ...

    ### public **\_\_construct** ()

    Phalcon\Security constructor
- name: Security::hash
  id: api/phalcon_security#hash
  summary: null
  belongs_to: Security
  description: |-
    ### public **hash** (*mixed* $password, \[*mixed* $workFactor\])

    Creates a password hash using bcrypt with a pseudo random salt
- name: Security::hasLibreSsl
  id: api/phalcon_security#haslibressl
  summary: null
  belongs_to: Security
  description: |-
    ### public **hasLibreSsl** ()

    Testing for LibreSSL
- name: Security::isLegacyHash
  id: api/phalcon_security#islegacyhash
  summary: null
  belongs_to: Security
  description: |-
    ### public **isLegacyHash** (*mixed* $passwordHash)

    Checks if a password hash is a valid bcrypt’s hash
- name: Security::setDefaultHash
  id: api/phalcon_security#setdefaulthash
  summary: null
  belongs_to: Security
  description: |-
    ### public **setDefaultHash** (*mixed* $defaultHash)

    Sets the default hash
- name: Security::setDI
  id: api/phalcon_security#setdi
  summary: null
  belongs_to: Security
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector
- name: Security::setRandomBytes
  id: api/phalcon_security#setrandombytes
  summary: null
  belongs_to: Security
  description: |-
    ### public **setRandomBytes** (*mixed* $randomBytes)

    Sets a number of bytes to be generated by the openssl pseudo random generator
- name: Security::setWorkFactor
  id: api/phalcon_security#setworkfactor
  summary: null
  belongs_to: Security
  description: |-
    ### public **setWorkFactor** (*mixed* $workFactor)

    ...
- name: Security\Exception
  id: api/phalcon_security_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Security\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/security/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Exception.html)"
- name: Security\Random
  id: api/phalcon_security_random
  summary: Secure random number generator class
  description: "# Class **Phalcon\\Security\\Random**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/security/random.zep)\n\nSecure random number generator class.\n\nProvides secure random number generator which is suitable for generating session key in HTTP cookies, etc.\n\nIt supports following secure random number generators:\n\n- random_bytes (PHP 7)\n- libsodium\n- openssl, libressl\n- /dev/urandom\n\nPhalcon\\Security\\Random could be mainly useful for:\n\n- Key generation (e.g. generation of complicated keys)\n- Generating random passwords for new user accounts\n- Encryption systems\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\n// Random binary string\n$bytes = $random->bytes();\n\n// Random hex string\necho $random->hex(10); // a29f470508d5ccb8e289\necho $random->hex(10); // 533c2f08d5eee750e64a\necho $random->hex(11); // f362ef96cb9ffef150c9cd\necho $random->hex(12); // 95469d667475125208be45c4\necho $random->hex(13); // 05475e8af4a34f8f743ab48761\n\n// Random base64 string\necho $random->base64(12); // XfIN81jGGuKkcE1E\necho $random->base64(12); // 3rcq39QzGK9fUqh8\necho $random->base64();   // DRcfbngL/iOo9hGGvy1TcQ==\necho $random->base64(16); // SvdhPcIHDZFad838Bb0Swg==\n\n// Random URL-safe base64 string\necho $random->base64Safe();           // PcV6jGbJ6vfVw7hfKIFDGA\necho $random->base64Safe();           // GD8JojhzSTrqX7Q8J6uug\necho $random->base64Safe(8);          // mGyy0evy3ok\necho $random->base64Safe(null, true); // DRrAgOFkS4rvRiVHFefcQ==\n\n// Random UUID\necho $random->uuid(); // db082997-2572-4e2c-a046-5eefe97b1235\necho $random->uuid(); // da2aa0e2-b4d0-4e3c-99f5-f5ef62c57fe2\necho $random->uuid(); // 75e6b628-c562-4117-bb76-61c4153455a9\necho $random->uuid(); // dc446df1-0848-4d05-b501-4af3c220c13d\n\n// Random number between 0 and $len\necho $random->number(256); // 84\necho $random->number(256); // 79\necho $random->number(100); // 29\necho $random->number(300); // 40\n\n// Random base58 string\necho $random->base58();   // 4kUgL2pdQMSCQtjE\necho $random->base58();   // Umjxqf7ZPwh765yR\necho $random->base58(24); // qoXcgmw4A9dys26HaNEdCRj9\necho $random->base58(7);  // 774SJD3vgP\n```\n\nThis class partially borrows SecureRandom library from Ruby\n\n## Methods\n\n### public **bytes** (\\[*mixed* $len\\])\n\nGenerates a random binary string The Random::bytes method returns a string and accepts as input an int representing the length in bytes to be returned. If $len is not specified, 16 is assumed. It may be larger in future. The result may contain any byte: “x00” - “xFF”.\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\n$bytes = $random->bytes();\nvar_dump(bin2hex($bytes));\n// Possible output: string(32) \"00f6c04b144b41fad6a59111c126e1ee\"\n```\n\n### public **hex** (\\[*mixed* $len\\])\n\nGenerates a random hex string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len.\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\necho $random->hex(10); // a29f470508d5ccb8e289\n```\n\n### public **base58** (\\[*mixed* $n\\])\n\nGenerates a random base58 string If $len is not specified, 16 is assumed. It may be larger in future. The result may contain alphanumeric characters except 0, O, I and l. It is similar to Base64 but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed.\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\necho $random->base58(); // 4kUgL2pdQMSCQtjE\n```\n\n### public **base64** (\\[*mixed* $len\\])\n\nGenerates a random base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. Size formula: 4 [\\*](#id1)( $len / 3) and this need to be rounded up to a multiple of 4.\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\necho $random->base64(12); // 3rcq39QzGK9fUqh8\n```\n\n### public **base64Safe** (\\[*mixed* $len\\], \\[*mixed* $padding\\])\n\nGenerates a random URL-safe base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. By default, padding is not generated because “=” may be used as a URL delimiter. The result may contain A-Z, a-z, 0-9, “-” and “\\_”. “=” is also used if $padding is true. See RFC 3548 for the definition of URL-safe base64.\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\necho $random->base64Safe(); // GD8JojhzSTrqX7Q8J6uug\n```\n\n### public **uuid** ()\n\nGenerates a v4 random UUID (Universally Unique IDentifier) The version 4 UUID is purely random (except the version). It doesn’t contain meaningful information such as MAC address, time, etc. See RFC 4122 for details of UUID. This algorithm sets the version number (4 bits) as well as two reserved bits. All other bits (the remaining 122 bits) are set using a random or pseudorandom data source. Version 4 UUIDs have the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx where x is any hexadecimal digit and y is one of 8, 9, A, or B (e.g., f47ac10b-58cc-4372-a567-0e02b2c3d479).\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\necho $random->uuid(); // 1378c906-64bb-4f81-a8d6-4ae1bfcdec22\n```\n\n### public **number** (*mixed* $len)\n\nGenerates a random number between 0 and $len Returns an integer: 0 \\<= result \\<= $len.\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\necho $random->number(16); // 8\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Random.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Random.html)"
- name: Security\Random::base58
  id: api/phalcon_security_random#base58
  summary: Generates a random base58 string If $len is not specified, 16 is assumed
  belongs_to: Security\Random
  description: |-
    ### public **base58** (\[*mixed* $n\])

    Generates a random base58 string If $len is not specified, 16 is assumed. It may be larger in future. The result may contain alphanumeric characters except 0, O, I and l. It is similar to Base64 but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed.

    ``` php
    $random = new \Phalcon\Security\Random();

    echo $random->base58(); // 4kUgL2pdQMSCQtjE
    ```
- name: Security\Random::base64
  id: api/phalcon_security_random#base64
  summary: Generates a random base64 string If $len is not specified, 16 is assumed
  belongs_to: Security\Random
  description: |-
    ### public **base64** (\[*mixed* $len\])

    Generates a random base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. Size formula: 4 [\*](#id1)( $len / 3) and this need to be rounded up to a multiple of 4.

    ``` php
    $random = new \Phalcon\Security\Random();

    echo $random->base64(12); // 3rcq39QzGK9fUqh8
    ```
- name: Security\Random::base64Safe
  id: api/phalcon_security_random#base64safe
  summary: Generates a random URL-safe base64 string If $len is not specified, 16 is assumed
  belongs_to: Security\Random
  description: |-
    ### public **base64Safe** (\[*mixed* $len\], \[*mixed* $padding\])

    Generates a random URL-safe base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. By default, padding is not generated because “=” may be used as a URL delimiter. The result may contain A-Z, a-z, 0-9, “-” and “\_”. “=” is also used if $padding is true. See RFC 3548 for the definition of URL-safe base64.

    ``` php
    $random = new \Phalcon\Security\Random();

    echo $random->base64Safe(); // GD8JojhzSTrqX7Q8J6uug
    ```
- name: Security\Random::bytes
  id: api/phalcon_security_random#bytes
  summary: Generates a random binary string The Random::bytes method returns a string and accepts as input an int representing the length in bytes to be returned
  belongs_to: Security\Random
  description: |-
    ### public **bytes** (\[*mixed* $len\])

    Generates a random binary string The Random::bytes method returns a string and accepts as input an int representing the length in bytes to be returned. If $len is not specified, 16 is assumed. It may be larger in future. The result may contain any byte: “x00” - “xFF”.

    ``` php
    $random = new \Phalcon\Security\Random();

    $bytes = $random->bytes();
    var_dump(bin2hex($bytes));
    // Possible output: string(32) "00f6c04b144b41fad6a59111c126e1ee"
    ```
- name: Security\Random::hex
  id: api/phalcon_security_random#hex
  summary: Generates a random hex string If $len is not specified, 16 is assumed
  belongs_to: Security\Random
  description: |-
    ### public **hex** (\[*mixed* $len\])

    Generates a random hex string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len.

    ``` php
    $random = new \Phalcon\Security\Random();

    echo $random->hex(10); // a29f470508d5ccb8e289
    ```
- name: Security\Random::number
  id: api/phalcon_security_random#number
  summary: 'Generates a random number between 0 and $len Returns an integer: 0 <= result <= $len'
  belongs_to: Security\Random
  description: "### public **number** (*mixed* $len)\n\nGenerates a random number between 0 and $len Returns an integer: 0 \\<= result \\<= $len.\n\n``` php\n$random = new \\Phalcon\\Security\\Random();\n\necho $random->number(16); // 8\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Random.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Random.html)"
- name: Security\Random::uuid
  id: api/phalcon_security_random#uuid
  summary: Generates a v4 random UUID (Universally Unique IDentifier) The version 4 UUID is purely random (except the version)
  belongs_to: Security\Random
  description: |-
    ### public **uuid** ()

    Generates a v4 random UUID (Universally Unique IDentifier) The version 4 UUID is purely random (except the version). It doesn’t contain meaningful information such as MAC address, time, etc. See RFC 4122 for details of UUID. This algorithm sets the version number (4 bits) as well as two reserved bits. All other bits (the remaining 122 bits) are set using a random or pseudorandom data source. Version 4 UUIDs have the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx where x is any hexadecimal digit and y is one of 8, 9, A, or B (e.g., f47ac10b-58cc-4372-a567-0e02b2c3d479).

    ``` php
    $random = new \Phalcon\Security\Random();

    echo $random->uuid(); // 1378c906-64bb-4f81-a8d6-4ae1bfcdec22
    ```
- name: Session\Adapter
  id: api/phalcon_session_adapter
  summary: Returns the status of the current session
  description: "# Abstract class **Phalcon\\Session\\Adapter**\n\n*implements* [*Phalcon\\Session\\AdapterInterface*](phalcon_session_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter.zep)\n\nBase class for Phalcon\\Session adapters\n\n## Constants\n\n### *integer* **SESSION_ACTIVE**\n\n### *integer* **SESSION_NONE**\n\n### *integer* **SESSION_DISABLED**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Session\\Adapter constructor\n\n### public **start** ()\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** ()\n\nGet internal options\n\n### public **setName** (*mixed* $name)\n\nSet session name\n\n### public **getName** ()\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\])\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\])\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** ()\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** ()\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **destroy** (\\[*mixed* $removeData\\])\n\nDestroys the active session\n\n``` php\nvar_dump(\n    $session->destroy()\n);\n\nvar_dump(\n    $session->destroy(true)\n);\n```\n\n### public **status** ()\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter.html)"
- name: Session\Adapter::destroy
  id: api/phalcon_session_adapter#destroy
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **destroy** (\[*mixed* $removeData\])

    Destroys the active session

    ``` php
    var_dump(
        $session->destroy()
    );

    var_dump(
        $session->destroy(true)
    );
    ```
- name: Session\Adapter::get
  id: api/phalcon_session_adapter#get
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **get** (*mixed* $index, \[*mixed* $defaultValue\], \[*mixed* $remove\])

    Gets a session variable from an application context

    ``` php
    $session->get("auth", "yes");
    ```
- name: Session\Adapter::getId
  id: api/phalcon_session_adapter#getid
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **getId** ()

    Returns active session id

    ``` php
    echo $session->getId();
    ```
- name: Session\Adapter::getName
  id: api/phalcon_session_adapter#getname
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **getName** ()

    Get session name
- name: Session\Adapter::getOptions
  id: api/phalcon_session_adapter#getoptions
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **getOptions** ()

    Get internal options
- name: Session\Adapter::has
  id: api/phalcon_session_adapter#has
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **has** (*mixed* $index)

    Check whether a session variable is set in an application context

    ``` php
    var_dump(
        $session->has("auth")
    );
    ```
- name: Session\Adapter::isStarted
  id: api/phalcon_session_adapter#isstarted
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **isStarted** ()

    Check whether the session has been started

    ``` php
    var_dump(
        $session->isStarted()
    );
    ```
- name: Session\Adapter::regenerateId
  id: api/phalcon_session_adapter#regenerateid
  summary: null
  belongs_to: Session\Adapter
  description: '### public **regenerateId** (\[*mixed* $deleteOldSession\])'
- name: Session\Adapter::remove
  id: api/phalcon_session_adapter#remove
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **remove** (*mixed* $index)

    Removes a session variable from an application context

    ``` php
    $session->remove("auth");
    ```
- name: Session\Adapter::SESSION_ACTIVE
  id: api/phalcon_session_adapter#session_active
  summary: null
  belongs_to: Session\Adapter
  description: '### *integer* **SESSION_ACTIVE**'
- name: Session\Adapter::SESSION_DISABLED
  id: api/phalcon_session_adapter#session_disabled
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### *integer* **SESSION_DISABLED**

    ## Methods

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Session\Adapter constructor
- name: Session\Adapter::SESSION_NONE
  id: api/phalcon_session_adapter#session_none
  summary: null
  belongs_to: Session\Adapter
  description: '### *integer* **SESSION_NONE**'
- name: Session\Adapter::set
  id: api/phalcon_session_adapter#set
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **set** (*mixed* $index, *mixed* $value)

    Sets a session variable in an application context

    ``` php
    $session->set("auth", "yes");
    ```
- name: Session\Adapter::setId
  id: api/phalcon_session_adapter#setid
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **setId** (*mixed* $id)

    Set the current session id

    ``` php
    $session->setId($id);
    ```
- name: Session\Adapter::setName
  id: api/phalcon_session_adapter#setname
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **setName** (*mixed* $name)

    Set session name
- name: Session\Adapter::setOptions
  id: api/phalcon_session_adapter#setoptions
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **setOptions** (*array* $options)

    Sets session’s options

    ``` php
    $session->setOptions(
        [
            "uniqueId" => "my-private-app",
        ]
    );
    ```
- name: Session\Adapter::start
  id: api/phalcon_session_adapter#start
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **start** ()

    Starts the session (if headers are already sent the session will not be started)
- name: Session\Adapter::status
  id: api/phalcon_session_adapter#status
  summary: Returns the status of the current session
  belongs_to: Session\Adapter
  description: |-
    ### public **status** ()

    Returns the status of the current session.

    ``` php
    var_dump(
        $session->status()
    );

    if ($session->status() !== $session::SESSION_ACTIVE) {
        $session->start();
    }
    ```
- name: Session\Adapter::__destruct
  id: api/phalcon_session_adapter#__destruct
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Session\Adapter
  description: "### public **\\_\\_destruct** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter.html)"
- name: Session\Adapter::__get
  id: api/phalcon_session_adapter#__get
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **\_\_get** (*mixed* $index)

    Alias: Gets a session variable from an application context
- name: Session\Adapter::__isset
  id: api/phalcon_session_adapter#__isset
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **\_\_isset** (*mixed* $index)

    Alias: Check whether a session variable is set in an application context
- name: Session\Adapter::__set
  id: api/phalcon_session_adapter#__set
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **\_\_set** (*mixed* $index, *mixed* $value)

    Alias: Sets a session variable in an application context
- name: Session\Adapter::__unset
  id: api/phalcon_session_adapter#__unset
  summary: null
  belongs_to: Session\Adapter
  description: |-
    ### public **\_\_unset** (*mixed* $index)

    Alias: Removes a session variable from an application context
- name: Session\AdapterInterface
  id: api/phalcon_session_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Session\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapterinterface.zep)\n\n## Methods\n\n### abstract public **start** ()\n\n...\n\n### abstract public **setOptions** (*array* $options)\n\n...\n\n### abstract public **getOptions** ()\n\n...\n\n### abstract public **get** (*mixed* $index, \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **set** (*mixed* $index, *mixed* $value)\n\n...\n\n### abstract public **has** (*mixed* $index)\n\n...\n\n### abstract public **remove** (*mixed* $index)\n\n...\n\n### abstract public **getId** ()\n\n...\n\n### abstract public **isStarted** ()\n\n...\n\n### abstract public **destroy** (\\[*mixed* $removeData\\])\n\n...\n\n### abstract public **regenerateId** (\\[*mixed* $deleteOldSession\\])\n\n...\n\n### abstract public **setName** (*mixed* $name)\n\n...\n\n### abstract public **getName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_AdapterInterface.html)"
- name: Session\AdapterInterface::destroy
  id: api/phalcon_session_adapterinterface#destroy
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **destroy** (\[*mixed* $removeData\])

    ...
- name: Session\AdapterInterface::get
  id: api/phalcon_session_adapterinterface#get
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **get** (*mixed* $index, \[*mixed* $defaultValue\])

    ...
- name: Session\AdapterInterface::getId
  id: api/phalcon_session_adapterinterface#getid
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **getId** ()

    ...
- name: Session\AdapterInterface::getName
  id: api/phalcon_session_adapterinterface#getname
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Session\AdapterInterface
  description: "### abstract public **getName** ()\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_AdapterInterface.html)"
- name: Session\AdapterInterface::getOptions
  id: api/phalcon_session_adapterinterface#getoptions
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **getOptions** ()

    ...
- name: Session\AdapterInterface::has
  id: api/phalcon_session_adapterinterface#has
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **has** (*mixed* $index)

    ...
- name: Session\AdapterInterface::isStarted
  id: api/phalcon_session_adapterinterface#isstarted
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **isStarted** ()

    ...
- name: Session\AdapterInterface::regenerateId
  id: api/phalcon_session_adapterinterface#regenerateid
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **regenerateId** (\[*mixed* $deleteOldSession\])

    ...
- name: Session\AdapterInterface::remove
  id: api/phalcon_session_adapterinterface#remove
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **remove** (*mixed* $index)

    ...
- name: Session\AdapterInterface::set
  id: api/phalcon_session_adapterinterface#set
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **set** (*mixed* $index, *mixed* $value)

    ...
- name: Session\AdapterInterface::setName
  id: api/phalcon_session_adapterinterface#setname
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **setName** (*mixed* $name)

    ...
- name: Session\AdapterInterface::setOptions
  id: api/phalcon_session_adapterinterface#setoptions
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **setOptions** (*array* $options)

    ...
- name: Session\AdapterInterface::start
  id: api/phalcon_session_adapterinterface#start
  summary: null
  belongs_to: Session\AdapterInterface
  description: |-
    ### abstract public **start** ()

    ...
- name: Session\Adapter\Files
  id: api/phalcon_session_adapter_files
  summary: Returns the status of the current session
  description: "# Class **Phalcon\\Session\\Adapter\\Files**\n\n*extends* abstract class [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n*implements* [*Phalcon\\Session\\AdapterInterface*](phalcon_session_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/files.zep)\n\n## Constants\n\n### *integer* **SESSION_ACTIVE**\n\n### *integer* **SESSION_NONE**\n\n### *integer* **SESSION_DISABLED**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nPhalcon\\Session\\Adapter constructor\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **destroy** (\\[*mixed* $removeData\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nDestroys the active session\n\n``` php\nvar_dump(\n    $session->destroy()\n);\n\nvar_dump(\n    $session->destroy(true)\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Files.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Files.html)"
- name: Session\Adapter\Files::SESSION_ACTIVE
  id: api/phalcon_session_adapter_files#session_active
  summary: null
  belongs_to: Session\Adapter\Files
  description: '### *integer* **SESSION_ACTIVE**'
- name: Session\Adapter\Files::SESSION_DISABLED
  id: api/phalcon_session_adapter_files#session_disabled
  summary: Returns the status of the current session
  belongs_to: Session\Adapter\Files
  description: "### *integer* **SESSION_DISABLED**\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nPhalcon\\Session\\Adapter constructor\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **destroy** (\\[*mixed* $removeData\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nDestroys the active session\n\n``` php\nvar_dump(\n    $session->destroy()\n);\n\nvar_dump(\n    $session->destroy(true)\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Files.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Files.html)"
- name: Session\Adapter\Files::SESSION_NONE
  id: api/phalcon_session_adapter_files#session_none
  summary: null
  belongs_to: Session\Adapter\Files
  description: '### *integer* **SESSION_NONE**'
- name: Session\Adapter\Libmemcached
  id: api/phalcon_session_adapter_libmemcached
  summary: Returns the status of the current session
  description: "# Class **Phalcon\\Session\\Adapter\\Libmemcached**\n\n*extends* abstract class [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n*implements* [*Phalcon\\Session\\AdapterInterface*](phalcon_session_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/libmemcached.zep)\n\nThis adapter store sessions in libmemcached\n\n``` php\nuse Phalcon\\Session\\Adapter\\Libmemcached;\n\n$session = new Libmemcached(\n    [\n        \"servers\" => [\n            [\n                \"host\"   => \"localhost\",\n                \"port\"   => 11211,\n                \"weight\" => 1,\n            ],\n        ],\n        \"client\" => [\n            \\Memcached::OPT_HASH       => \\Memcached::HASH_MD5,\n            \\Memcached::OPT_PREFIX_KEY => \"prefix.\",\n        ],\n        \"lifetime\" => 3600,\n        \"prefix\"   => \"my_\",\n    ]\n);\n\n$session->start();\n\n$session->set(\"var\", \"some-value\");\n\necho $session->get(\"var\");\n```\n\n## Constants\n\n### *integer* **SESSION_ACTIVE**\n\n### *integer* **SESSION_NONE**\n\n### *integer* **SESSION_DISABLED**\n\n## Methods\n\n### public **getLibmemcached** ()\n\n...\n\n### public **getLifetime** ()\n\n...\n\n### public **\\_\\_construct** (*array* $options)\n\nPhalcon\\Session\\Adapter\\Libmemcached constructor\n\n### public **open** ()\n\n...\n\n### public **close** ()\n\n...\n\n### public **read** (*mixed* $sessionId)\n\n### public **write** (*mixed* $sessionId, *mixed* $data)\n\n### public **destroy** (\\[*mixed* $sessionId\\])\n\n### public **gc** ()\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Libmemcached.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Libmemcached.html)"
- name: Session\Adapter\Libmemcached::close
  id: api/phalcon_session_adapter_libmemcached#close
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: |-
    ### public **close** ()

    ...
- name: Session\Adapter\Libmemcached::destroy
  id: api/phalcon_session_adapter_libmemcached#destroy
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: '### public **destroy** (\[*mixed* $sessionId\])'
- name: Session\Adapter\Libmemcached::gc
  id: api/phalcon_session_adapter_libmemcached#gc
  summary: Returns the status of the current session
  belongs_to: Session\Adapter\Libmemcached
  description: "### public **gc** ()\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Libmemcached.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Libmemcached.html)"
- name: Session\Adapter\Libmemcached::getLibmemcached
  id: api/phalcon_session_adapter_libmemcached#getlibmemcached
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: |-
    ### public **getLibmemcached** ()

    ...
- name: Session\Adapter\Libmemcached::getLifetime
  id: api/phalcon_session_adapter_libmemcached#getlifetime
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: |-
    ### public **getLifetime** ()

    ...

    ### public **\_\_construct** (*array* $options)

    Phalcon\Session\Adapter\Libmemcached constructor
- name: Session\Adapter\Libmemcached::open
  id: api/phalcon_session_adapter_libmemcached#open
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: |-
    ### public **open** ()

    ...
- name: Session\Adapter\Libmemcached::read
  id: api/phalcon_session_adapter_libmemcached#read
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: '### public **read** (*mixed* $sessionId)'
- name: Session\Adapter\Libmemcached::SESSION_ACTIVE
  id: api/phalcon_session_adapter_libmemcached#session_active
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: '### *integer* **SESSION_ACTIVE**'
- name: Session\Adapter\Libmemcached::SESSION_DISABLED
  id: api/phalcon_session_adapter_libmemcached#session_disabled
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: |-
    ### *integer* **SESSION_DISABLED**

    ## Methods
- name: Session\Adapter\Libmemcached::SESSION_NONE
  id: api/phalcon_session_adapter_libmemcached#session_none
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: '### *integer* **SESSION_NONE**'
- name: Session\Adapter\Libmemcached::write
  id: api/phalcon_session_adapter_libmemcached#write
  summary: null
  belongs_to: Session\Adapter\Libmemcached
  description: '### public **write** (*mixed* $sessionId, *mixed* $data)'
- name: Session\Adapter\Memcache
  id: api/phalcon_session_adapter_memcache
  summary: Returns the status of the current session
  description: "# Class **Phalcon\\Session\\Adapter\\Memcache**\n\n*extends* abstract class [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n*implements* [*Phalcon\\Session\\AdapterInterface*](phalcon_session_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/memcache.zep)\n\nThis adapter store sessions in memcache\n\n``` php\nuse Phalcon\\Session\\Adapter\\Memcache;\n\n$session = new Memcache(\n    [\n        \"uniqueId\"   => \"my-private-app\",\n        \"host\"       => \"127.0.0.1\",\n        \"port\"       => 11211,\n        \"persistent\" => true,\n        \"lifetime\"   => 3600,\n        \"prefix\"     => \"my_\",\n    ]\n);\n\n$session->start();\n\n$session->set(\"var\", \"some-value\");\n\necho $session->get(\"var\");\n```\n\n## Constants\n\n### *integer* **SESSION_ACTIVE**\n\n### *integer* **SESSION_NONE**\n\n### *integer* **SESSION_DISABLED**\n\n## Methods\n\n### public **getMemcache** ()\n\n...\n\n### public **getLifetime** ()\n\n...\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Session\\Adapter\\Memcache constructor\n\n### public **open** ()\n\n...\n\n### public **close** ()\n\n...\n\n### public **read** (*mixed* $sessionId)\n\n### public **write** (*mixed* $sessionId, *mixed* $data)\n\n### public **destroy** (\\[*mixed* $sessionId\\])\n\n### public **gc** ()\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Memcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Memcache.html)"
- name: Session\Adapter\Memcache::close
  id: api/phalcon_session_adapter_memcache#close
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: |-
    ### public **close** ()

    ...
- name: Session\Adapter\Memcache::destroy
  id: api/phalcon_session_adapter_memcache#destroy
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: '### public **destroy** (\[*mixed* $sessionId\])'
- name: Session\Adapter\Memcache::gc
  id: api/phalcon_session_adapter_memcache#gc
  summary: Returns the status of the current session
  belongs_to: Session\Adapter\Memcache
  description: "### public **gc** ()\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Memcache.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Memcache.html)"
- name: Session\Adapter\Memcache::getLifetime
  id: api/phalcon_session_adapter_memcache#getlifetime
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: |-
    ### public **getLifetime** ()

    ...

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Session\Adapter\Memcache constructor
- name: Session\Adapter\Memcache::getMemcache
  id: api/phalcon_session_adapter_memcache#getmemcache
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: |-
    ### public **getMemcache** ()

    ...
- name: Session\Adapter\Memcache::open
  id: api/phalcon_session_adapter_memcache#open
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: |-
    ### public **open** ()

    ...
- name: Session\Adapter\Memcache::read
  id: api/phalcon_session_adapter_memcache#read
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: '### public **read** (*mixed* $sessionId)'
- name: Session\Adapter\Memcache::SESSION_ACTIVE
  id: api/phalcon_session_adapter_memcache#session_active
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: '### *integer* **SESSION_ACTIVE**'
- name: Session\Adapter\Memcache::SESSION_DISABLED
  id: api/phalcon_session_adapter_memcache#session_disabled
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: |-
    ### *integer* **SESSION_DISABLED**

    ## Methods
- name: Session\Adapter\Memcache::SESSION_NONE
  id: api/phalcon_session_adapter_memcache#session_none
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: '### *integer* **SESSION_NONE**'
- name: Session\Adapter\Memcache::write
  id: api/phalcon_session_adapter_memcache#write
  summary: null
  belongs_to: Session\Adapter\Memcache
  description: '### public **write** (*mixed* $sessionId, *mixed* $data)'
- name: Session\Adapter\Redis
  id: api/phalcon_session_adapter_redis
  summary: Returns the status of the current session
  description: "# Class **Phalcon\\Session\\Adapter\\Redis**\n\n*extends* abstract class [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n*implements* [*Phalcon\\Session\\AdapterInterface*](phalcon_session_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/redis.zep)\n\nThis adapter store sessions in Redis\n\n``` php\nuse Phalcon\\Session\\Adapter\\Redis;\n\n$session = new Redis(\n    [\n        \"uniqueId\"   => \"my-private-app\",\n        \"host\"       => \"localhost\",\n        \"port\"       => 6379,\n        \"auth\"       => \"foobared\",\n        \"persistent\" => false,\n        \"lifetime\"   => 3600,\n        \"prefix\"     => \"my\",\n        \"index\"      => 1,\n    ]\n);\n\n$session->start();\n\n$session->set(\"var\", \"some-value\");\n\necho $session->get(\"var\");\n```\n\n## Constants\n\n### *integer* **SESSION_ACTIVE**\n\n### *integer* **SESSION_NONE**\n\n### *integer* **SESSION_DISABLED**\n\n## Methods\n\n### public **getRedis** ()\n\n...\n\n### public **getLifetime** ()\n\n...\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Session\\Adapter\\Redis constructor\n\n### public **open** ()\n\n### public **close** ()\n\n### public **read** (*mixed* $sessionId)\n\n### public **write** (*mixed* $sessionId, *mixed* $data)\n\n### public **destroy** (\\[*mixed* $sessionId\\])\n\n### public **gc** ()\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Redis.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Redis.html)"
- name: Session\Adapter\Redis::close
  id: api/phalcon_session_adapter_redis#close
  summary: null
  belongs_to: Session\Adapter\Redis
  description: '### public **close** ()'
- name: Session\Adapter\Redis::destroy
  id: api/phalcon_session_adapter_redis#destroy
  summary: null
  belongs_to: Session\Adapter\Redis
  description: '### public **destroy** (\[*mixed* $sessionId\])'
- name: Session\Adapter\Redis::gc
  id: api/phalcon_session_adapter_redis#gc
  summary: Returns the status of the current session
  belongs_to: Session\Adapter\Redis
  description: "### public **gc** ()\n\n### public **start** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nStarts the session (if headers are already sent the session will not be started)\n\n### public **setOptions** (*array* $options) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets session’s options\n\n``` php\n$session->setOptions(\n    [\n        \"uniqueId\" => \"my-private-app\",\n    ]\n);\n```\n\n### public **getOptions** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet internal options\n\n### public **setName** (*mixed* $name) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet session name\n\n### public **getName** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGet session name\n\n### public **regenerateId** (\\[*mixed* $deleteOldSession\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n### public **get** (*mixed* $index, \\[*mixed* $defaultValue\\], \\[*mixed* $remove\\]) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nGets a session variable from an application context\n\n``` php\n$session->get(\"auth\", \"yes\");\n```\n\n### public **set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSets a session variable in an application context\n\n``` php\n$session->set(\"auth\", \"yes\");\n```\n\n### public **has** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether a session variable is set in an application context\n\n``` php\nvar_dump(\n    $session->has(\"auth\")\n);\n```\n\n### public **remove** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nRemoves a session variable from an application context\n\n``` php\n$session->remove(\"auth\");\n```\n\n### public **getId** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns active session id\n\n``` php\necho $session->getId();\n```\n\n### public **setId** (*mixed* $id) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nSet the current session id\n\n``` php\n$session->setId($id);\n```\n\n### public **isStarted** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nCheck whether the session has been started\n\n``` php\nvar_dump(\n    $session->isStarted()\n);\n```\n\n### public **status** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nReturns the status of the current session.\n\n``` php\nvar_dump(\n    $session->status()\n);\n\nif ($session->status() !== $session::SESSION_ACTIVE) {\n    $session->start();\n}\n```\n\n### public **\\_\\_get** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Gets a session variable from an application context\n\n### public **\\_\\_set** (*mixed* $index, *mixed* $value) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Sets a session variable in an application context\n\n### public **\\_\\_isset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Check whether a session variable is set in an application context\n\n### public **\\_\\_unset** (*mixed* $index) inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\nAlias: Removes a session variable from an application context\n\n### public **\\_\\_destruct** () inherited from [*Phalcon\\Session\\Adapter*](phalcon_session_adapter)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Redis.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Redis.html)"
- name: Session\Adapter\Redis::getLifetime
  id: api/phalcon_session_adapter_redis#getlifetime
  summary: null
  belongs_to: Session\Adapter\Redis
  description: |-
    ### public **getLifetime** ()

    ...

    ### public **\_\_construct** (\[*array* $options\])

    Phalcon\Session\Adapter\Redis constructor
- name: Session\Adapter\Redis::getRedis
  id: api/phalcon_session_adapter_redis#getredis
  summary: null
  belongs_to: Session\Adapter\Redis
  description: |-
    ### public **getRedis** ()

    ...
- name: Session\Adapter\Redis::open
  id: api/phalcon_session_adapter_redis#open
  summary: null
  belongs_to: Session\Adapter\Redis
  description: '### public **open** ()'
- name: Session\Adapter\Redis::read
  id: api/phalcon_session_adapter_redis#read
  summary: null
  belongs_to: Session\Adapter\Redis
  description: '### public **read** (*mixed* $sessionId)'
- name: Session\Adapter\Redis::SESSION_ACTIVE
  id: api/phalcon_session_adapter_redis#session_active
  summary: null
  belongs_to: Session\Adapter\Redis
  description: '### *integer* **SESSION_ACTIVE**'
- name: Session\Adapter\Redis::SESSION_DISABLED
  id: api/phalcon_session_adapter_redis#session_disabled
  summary: null
  belongs_to: Session\Adapter\Redis
  description: |-
    ### *integer* **SESSION_DISABLED**

    ## Methods
- name: Session\Adapter\Redis::SESSION_NONE
  id: api/phalcon_session_adapter_redis#session_none
  summary: null
  belongs_to: Session\Adapter\Redis
  description: '### *integer* **SESSION_NONE**'
- name: Session\Adapter\Redis::write
  id: api/phalcon_session_adapter_redis#write
  summary: null
  belongs_to: Session\Adapter\Redis
  description: '### public **write** (*mixed* $sessionId, *mixed* $data)'
- name: Session\Bag
  id: api/phalcon_session_bag
  summary: Initializes the session bag
  description: "# Class **Phalcon\\Session\\Bag**\n\n*implements* [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\Session\\BagInterface*](phalcon_session_baginterface), [IteratorAggregate](http://php.net/manual/en/class.iteratoraggregate.php), [Traversable](http://php.net/manual/en/class.traversable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Countable](http://php.net/manual/en/class.countable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/bag.zep)\n\nThis component helps to separate session data into “namespaces”. Working by this way you can easily create groups of session variables into the application\n\n``` php\n$user = new \\Phalcon\\Session\\Bag(\"user\");\n\n$user->name = \"Kimbra Johnson\";\n$user->age  = 22;\n```\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $name)\n\nPhalcon\\Session\\Bag constructor\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the DependencyInjector container\n\n### public **getDI** ()\n\nReturns the DependencyInjector container\n\n### public **initialize** ()\n\nInitializes the session bag. This method must not be called directly, the class calls it when its internal data is accessed\n\n### public **destroy** ()\n\nDestroys the session bag\n\n``` php\n$user->destroy();\n```\n\n### public **set** (*mixed* $property, *mixed* $value)\n\nSets a value in the session bag\n\n``` php\n$user->set(\"name\", \"Kimbra\");\n```\n\n### public **\\_\\_set** (*mixed* $property, *mixed* $value)\n\nMagic setter to assign values to the session bag\n\n``` php\n$user->name = \"Kimbra\";\n```\n\n### public **get** (*mixed* $property, \\[*mixed* $defaultValue\\])\n\nObtains a value from the session bag optionally setting a default value\n\n``` php\necho $user->get(\"name\", \"Kimbra\");\n```\n\n### public **\\_\\_get** (*mixed* $property)\n\nMagic getter to obtain values from the session bag\n\n``` php\necho $user->name;\n```\n\n### public **has** (*mixed* $property)\n\nCheck whether a property is defined in the internal bag\n\n``` php\nvar_dump(\n    $user->has(\"name\")\n);\n```\n\n### public **\\_\\_isset** (*mixed* $property)\n\nMagic isset to check whether a property is defined in the bag\n\n``` php\nvar_dump(\n    isset($user[\"name\"])\n);\n```\n\n### public **remove** (*mixed* $property)\n\nRemoves a property from the internal bag\n\n``` php\n$user->remove(\"name\");\n```\n\n### public **\\_\\_unset** (*mixed* $property)\n\nMagic unset to remove items using the array syntax\n\n``` php\nunset($user[\"name\"]);\n```\n\n### final public **count** ()\n\nReturn length of bag\n\n``` php\necho $user->count();\n```\n\n### final public **getIterator** ()\n\nReturns the bag iterator\n\n### final public **offsetSet** (*mixed* $property, *mixed* $value)\n\n...\n\n### final public **offsetExists** (*mixed* $property)\n\n...\n\n### final public **offsetUnset** (*mixed* $property)\n\n...\n\n### final public **offsetGet** (*mixed* $property)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Bag.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Bag.html)"
- name: Session\Bag::count
  id: api/phalcon_session_bag#count
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### final public **count** ()

    Return length of bag

    ``` php
    echo $user->count();
    ```
- name: Session\Bag::destroy
  id: api/phalcon_session_bag#destroy
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **destroy** ()

    Destroys the session bag

    ``` php
    $user->destroy();
    ```
- name: Session\Bag::get
  id: api/phalcon_session_bag#get
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **get** (*mixed* $property, \[*mixed* $defaultValue\])

    Obtains a value from the session bag optionally setting a default value

    ``` php
    echo $user->get("name", "Kimbra");
    ```
- name: Session\Bag::getDI
  id: api/phalcon_session_bag#getdi
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **getDI** ()

    Returns the DependencyInjector container
- name: Session\Bag::getIterator
  id: api/phalcon_session_bag#getiterator
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### final public **getIterator** ()

    Returns the bag iterator
- name: Session\Bag::has
  id: api/phalcon_session_bag#has
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **has** (*mixed* $property)

    Check whether a property is defined in the internal bag

    ``` php
    var_dump(
        $user->has("name")
    );
    ```
- name: Session\Bag::initialize
  id: api/phalcon_session_bag#initialize
  summary: Initializes the session bag
  belongs_to: Session\Bag
  description: |-
    ### public **initialize** ()

    Initializes the session bag. This method must not be called directly, the class calls it when its internal data is accessed
- name: Session\Bag::offsetExists
  id: api/phalcon_session_bag#offsetexists
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### final public **offsetExists** (*mixed* $property)

    ...
- name: Session\Bag::offsetGet
  id: api/phalcon_session_bag#offsetget
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Session\Bag
  description: "### final public **offsetGet** (*mixed* $property)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Bag.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Bag.html)"
- name: Session\Bag::offsetSet
  id: api/phalcon_session_bag#offsetset
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### final public **offsetSet** (*mixed* $property, *mixed* $value)

    ...
- name: Session\Bag::offsetUnset
  id: api/phalcon_session_bag#offsetunset
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### final public **offsetUnset** (*mixed* $property)

    ...
- name: Session\Bag::remove
  id: api/phalcon_session_bag#remove
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **remove** (*mixed* $property)

    Removes a property from the internal bag

    ``` php
    $user->remove("name");
    ```
- name: Session\Bag::set
  id: api/phalcon_session_bag#set
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **set** (*mixed* $property, *mixed* $value)

    Sets a value in the session bag

    ``` php
    $user->set("name", "Kimbra");
    ```
- name: Session\Bag::setDI
  id: api/phalcon_session_bag#setdi
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the DependencyInjector container
- name: Session\Bag::__get
  id: api/phalcon_session_bag#__get
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **\_\_get** (*mixed* $property)

    Magic getter to obtain values from the session bag

    ``` php
    echo $user->name;
    ```
- name: Session\Bag::__isset
  id: api/phalcon_session_bag#__isset
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **\_\_isset** (*mixed* $property)

    Magic isset to check whether a property is defined in the bag

    ``` php
    var_dump(
        isset($user["name"])
    );
    ```
- name: Session\Bag::__set
  id: api/phalcon_session_bag#__set
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **\_\_set** (*mixed* $property, *mixed* $value)

    Magic setter to assign values to the session bag

    ``` php
    $user->name = "Kimbra";
    ```
- name: Session\Bag::__unset
  id: api/phalcon_session_bag#__unset
  summary: null
  belongs_to: Session\Bag
  description: |-
    ### public **\_\_unset** (*mixed* $property)

    Magic unset to remove items using the array syntax

    ``` php
    unset($user["name"]);
    ```
- name: Session\BagInterface
  id: api/phalcon_session_baginterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Session\\BagInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/baginterface.zep)\n\n## Methods\n\n### abstract public **initialize** ()\n\n...\n\n### abstract public **destroy** ()\n\n...\n\n### abstract public **set** (*mixed* $property, *mixed* $value)\n\n...\n\n### abstract public **get** (*mixed* $property, \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **has** (*mixed* $property)\n\n...\n\n### abstract public **\\_\\_set** (*mixed* $property, *mixed* $value)\n\n...\n\n### abstract public **\\_\\_get** (*mixed* $property)\n\n...\n\n### abstract public **\\_\\_isset** (*mixed* $property)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_BagInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_BagInterface.html)"
- name: Session\BagInterface::destroy
  id: api/phalcon_session_baginterface#destroy
  summary: null
  belongs_to: Session\BagInterface
  description: |-
    ### abstract public **destroy** ()

    ...
- name: Session\BagInterface::get
  id: api/phalcon_session_baginterface#get
  summary: null
  belongs_to: Session\BagInterface
  description: |-
    ### abstract public **get** (*mixed* $property, \[*mixed* $defaultValue\])

    ...
- name: Session\BagInterface::has
  id: api/phalcon_session_baginterface#has
  summary: null
  belongs_to: Session\BagInterface
  description: |-
    ### abstract public **has** (*mixed* $property)

    ...
- name: Session\BagInterface::initialize
  id: api/phalcon_session_baginterface#initialize
  summary: null
  belongs_to: Session\BagInterface
  description: |-
    ### abstract public **initialize** ()

    ...
- name: Session\BagInterface::set
  id: api/phalcon_session_baginterface#set
  summary: null
  belongs_to: Session\BagInterface
  description: |-
    ### abstract public **set** (*mixed* $property, *mixed* $value)

    ...
- name: Session\BagInterface::__get
  id: api/phalcon_session_baginterface#__get
  summary: null
  belongs_to: Session\BagInterface
  description: |-
    ### abstract public **\_\_get** (*mixed* $property)

    ...
- name: Session\BagInterface::__isset
  id: api/phalcon_session_baginterface#__isset
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Session\BagInterface
  description: "### abstract public **\\_\\_isset** (*mixed* $property)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_BagInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_BagInterface.html)"
- name: Session\BagInterface::__set
  id: api/phalcon_session_baginterface#__set
  summary: null
  belongs_to: Session\BagInterface
  description: |-
    ### abstract public **\_\_set** (*mixed* $property, *mixed* $value)

    ...
- name: Session\Exception
  id: api/phalcon_session_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Session\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/session/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Exception.html)"
- name: Storing data in Session
  id: reference/session
  summary: The session component provides object-oriented wrappers to access session data
  description: "# Storing data in Session\n\nThe session component provides object-oriented wrappers to access session data.\n\nReasons to use this component instead of raw-sessions:\n\n- You can easily isolate session data across applications on the same domain\n- Intercept where session data is set/get in your application\n- Change the session adapter according to the application needs\n\n## Starting the Session\n\nSome applications are session-intensive, almost any action that performs requires access to session data. There are others who access session data casually. Thanks to the service container, we can ensure that the session is accessed only when it’s clearly needed:\n\n``` php\nuse Phalcon\\Session\\Adapter\\Files as Session;\n\n// Start the session the first time when some component request the session service\n$di->setShared(\n    \"session\",\n    function () {\n        $session = new Session();\n\n        $session->start();\n\n        return $session;\n    }\n);\n```\n\n## Storing/Retrieving data in Session\n\nFrom a controller, a view or any other component that extends [*Phalcon\\Di\\Injectable*](../api/phalcon_di_injectable) you can access the session service and store items and retrieve them in the following way:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        // Set a session variable\n        $this->session->set(\"user-name\", \"Michael\");\n    }\n\n    public function welcomeAction()\n    {\n        // Check if the variable is defined\n        if ($this->session->has(\"user-name\")) {\n            // Retrieve its value\n            $name = $this->session->get(\"user-name\");\n        }\n    }\n\n}\n```\n\n## Removing/Destroying Sessions\n\nIt’s also possible remove specific variables or destroy the whole session:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function removeAction()\n    {\n        // Remove a session variable\n        $this->session->remove(\"user-name\");\n    }\n\n    public function logoutAction()\n    {\n        // Destroy the whole session\n        $this->session->destroy();\n    }\n}\n```\n\n## Isolating Session Data between Applications\n\nSometimes a user can use the same application twice, on the same server, in the same session. Surely, if we use variables in session, we want that every application have separate session data (even though the same code and same variable names). To solve this, you can add a prefix for every session variable created in a certain application:\n\n``` php\nuse Phalcon\\Session\\Adapter\\Files as Session;\n\n// Isolating the session data\n$di->set(\n    \"session\",\n    function () {\n        // All variables created will prefixed with \"my-app-1\"\n        $session = new Session(\n            [\n                \"uniqueId\" => \"my-app-1\",\n            ]\n        );\n\n        $session->start();\n\n        return $session;\n    }\n);\n```\n\nAdding a unique ID is not necessary.\n\n## Session Bags\n\n[*Phalcon\\Session\\Bag*](../api/phalcon_session_bag) is a component that helps separating session data into “namespaces”. Working by this way you can easily create groups of session variables into the application. By only setting the variables in the “bag”, it’s automatically stored in session:\n\n``` php\nuse Phalcon\\Session\\Bag as SessionBag;\n\n$user = new SessionBag(\"user\");\n\n$user->setDI($di);\n\n$user->name = \"Kimbra Johnson\";\n$user->age  = 22;\n```\n\n## Persistent Data in Components\n\nController, components and classes that extends [*Phalcon\\Di\\Injectable*](../api/phalcon_di_injectable) may inject a [*Phalcon\\Session\\Bag*](../api/phalcon_session_bag). This class isolates variables for every class. Thanks to this you can persist data between requests in every class in an independent way.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        // Create a persistent variable \"name\"\n        $this->persistent->name = \"Laura\";\n    }\n\n    public function welcomeAction()\n    {\n        if (isset($this->persistent->name)) {\n            echo \"Welcome, \", $this->persistent->name;\n        }\n    }\n}\n```\n\nIn a component:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass Security extends Component\n{\n    public function auth()\n    {\n        // Create a persistent variable \"name\"\n        $this->persistent->name = \"Laura\";\n    }\n\n    public function getAuthName()\n    {\n        return $this->persistent->name;\n    }\n}\n```\n\nThe data added to the session (`$this->session`) are available throughout the application, while persistent (`$this->persistent`) can only be accessed in the scope of the current class.\n\n## Implementing your own adapters\n\nThe [*Phalcon\\Session\\AdapterInterface*](../api/phalcon_session_adapterinterface) interface must be implemented in order to create your own session adapters or extend the existing ones.\n\nThere are more adapters available for this components in the [Phalcon Incubator](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/session.html](https://docs.phalconphp.com/en/latest/reference/session.html)"
- name: Tag
  id: api/phalcon_tag
  summary: Phalcon\Tag is designed to simplify building of HTML tags
  description: "# Class **Phalcon\\Tag**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/tag.zep)\n\nPhalcon\\Tag is designed to simplify building of HTML tags. It provides a set of helpers to generate HTML in a dynamic way. This component is an abstract class that you can extend to add more helpers.\n\n## Constants\n\n### *integer* **HTML32**\n\n### *integer* **HTML401_STRICT**\n\n### *integer* **HTML401_TRANSITIONAL**\n\n### *integer* **HTML401_FRAMESET**\n\n### *integer* **HTML5**\n\n### *integer* **XHTML10_STRICT**\n\n### *integer* **XHTML10_TRANSITIONAL**\n\n### *integer* **XHTML10_FRAMESET**\n\n### *integer* **XHTML11**\n\n### *integer* **XHTML20**\n\n### *integer* **XHTML5**\n\n## Methods\n\n### public static *EscaperInterface* **getEscaper** (*array* $params)\n\nObtains the ‘escaper’ service if required\n\n### public static **renderAttributes** (*mixed* $code, *array* $attributes)\n\nRenders parameters keeping order in their HTML attributes\n\n### public static **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector)\n\nSets the dependency injector container.\n\n### public static **getDI** ()\n\nInternally gets the request dispatcher\n\n### public static **getUrlService** ()\n\nReturns a URL service from the default DI\n\n### public static **getEscaperService** ()\n\nReturns an Escaper service from the default DI\n\n### public static **setAutoescape** (*mixed* $autoescape)\n\nSet autoescape mode in generated html\n\n### public static **setDefault** (*string* $id, *string* $value)\n\nAssigns default values to generated tags by helpers\n\n``` php\n// Assigning \"peter\" to \"name\" component\nPhalcon\\Tag::setDefault(\"name\", \"peter\");\n\n// Later in the view\necho Phalcon\\Tag::textField(\"name\"); // Will have the value \"peter\" by default\n```\n\n### public static **setDefaults** (*array* $values, \\[*mixed* $merge\\])\n\nAssigns default values to generated tags by helpers\n\n``` php\n// Assigning \"peter\" to \"name\" component\nPhalcon\\Tag::setDefaults(\n    [\n        \"name\" => \"peter\",\n    ]\n);\n\n// Later in the view\necho Phalcon\\Tag::textField(\"name\"); // Will have the value \"peter\" by default\n```\n\n### public static **displayTo** (*string* $id, *string* $value)\n\nAlias of Phalcon\\Tag::setDefault\n\n### public static *boolean* **hasValue** (*string* $name)\n\nCheck if a helper has a default value set using Phalcon\\Tag::setDefault or value from $\\_POST\n\n### public static *mixed* **getValue** (*string* $name, \\[*array* $params\\])\n\nEvery helper calls this function to check whether a component has a predefined value using Phalcon\\Tag::setDefault or value from $\\_POST\n\n### public static **resetInput** ()\n\nResets the request and internal values to avoid those fields will have any default value.\n\n### public static **linkTo** (*array* \\| *string* $parameters, \\[*string* $text\\], \\[*boolean* $local\\])\n\nBuilds a HTML A tag using framework conventions\n\n``` php\necho Phalcon\\Tag::linkTo(\"signup/register\", \"Register Here!\");\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"signup/register\",\n        \"Register Here!\"\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"signup/register\",\n        \"Register Here!\",\n        \"class\" => \"btn-primary\",\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\"http://phalconphp.com/\", \"Phalcon\", false);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"http://phalconphp.com/\",\n        \"Phalcon Home\",\n        false,\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"http://phalconphp.com/\",\n        \"Phalcon Home\",\n        \"local\" => false,\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"action\" => \"http://phalconphp.com/\",\n        \"text\"   => \"Phalcon Home\",\n        \"local\"  => false,\n        \"target\" => \"_new\"\n    ]\n);\n```\n\n### final protected static *string* **\\_inputField** (*string* $type, *array* $parameters, \\[*boolean* $asValue\\])\n\nBuilds generic INPUT tags\n\n### final protected static *string* **\\_inputFieldChecked** (*string* $type, *array* $parameters)\n\nBuilds INPUT tags that implements the checked attribute\n\n### public static *string* **colorField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”color”\\] tag\n\n### public static *string* **textField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”text”\\] tag\n\n``` php\necho Phalcon\\Tag::textField(\n    [\n        \"name\",\n        \"size\" => 30,\n    ]\n);\n```\n\n### public static *string* **numericField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”number”\\] tag\n\n``` php\necho Phalcon\\Tag::numericField(\n    [\n        \"price\",\n        \"min\" => \"1\",\n        \"max\" => \"5\",\n    ]\n);\n```\n\n### public static *string* **rangeField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”range”\\] tag\n\n### public static *string* **emailField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”email”\\] tag\n\n``` php\necho Phalcon\\Tag::emailField(\"email\");\n```\n\n### public static *string* **dateField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”date”\\] tag\n\n``` php\necho Phalcon\\Tag::dateField(\n    [\n        \"born\",\n        \"value\" => \"14-12-1980\",\n    ]\n);\n```\n\n### public static *string* **dateTimeField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”datetime”\\] tag\n\n### public static *string* **dateTimeLocalField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”datetime-local”\\] tag\n\n### public static *string* **monthField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”month”\\] tag\n\n### public static *string* **timeField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”time”\\] tag\n\n### public static *string* **weekField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”week”\\] tag\n\n### public static *string* **passwordField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”password”\\] tag\n\n``` php\necho Phalcon\\Tag::passwordField(\n    [\n        \"name\",\n        \"size\" => 30,\n    ]\n);\n```\n\n### public static *string* **hiddenField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”hidden”\\] tag\n\n``` php\necho Phalcon\\Tag::hiddenField(\n    [\n        \"name\",\n        \"value\" => \"mike\",\n    ]\n);\n```\n\n### public static *string* **fileField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”file”\\] tag\n\n``` php\necho Phalcon\\Tag::fileField(\"file\");\n```\n\n### public static *string* **searchField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”search”\\] tag\n\n### public static *string* **telField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”tel”\\] tag\n\n### public static *string* **urlField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”url”\\] tag\n\n### public static *string* **checkField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”check”\\] tag\n\n``` php\necho Phalcon\\Tag::checkField(\n    [\n        \"terms\",\n        \"value\" => \"Y\",\n    ]\n);\n```\n\nVolt syntax:\n\n``` php\n{{ check_field(\"terms\") }}\n```\n\n### public static *string* **radioField** (*array* $parameters)\n\nBuilds a HTML input\\[type=”radio”\\] tag\n\n``` php\necho Phalcon\\Tag::radioField(\n    [\n        \"weather\",\n        \"value\" => \"hot\",\n    ]\n);\n```\n\nVolt syntax:\n\n``` php\n{{ radio_field(\"Save\") }}\n```\n\n### public static *string* **imageInput** (*array* $parameters)\n\nBuilds a HTML input\\[type=”image”\\] tag\n\n``` php\necho Phalcon\\Tag::imageInput(\n    [\n        \"src\" => \"/img/button.png\",\n    ]\n);\n```\n\nVolt syntax:\n\n``` php\n{{ image_input(\"src\": \"/img/button.png\") }}\n```\n\n### public static *string* **submitButton** (*array* $parameters)\n\nBuilds a HTML input\\[type=”submit”\\] tag\n\n``` php\necho Phalcon\\Tag::submitButton(\"Save\")\n```\n\nVolt syntax:\n\n``` php\n{{ submit_button(\"Save\") }}\n```\n\n### public static *string* **selectStatic** (*array* $parameters, \\[*array* $data\\])\n\nBuilds a HTML SELECT tag using a PHP array for options\n\n``` php\necho Phalcon\\Tag::selectStatic(\n    \"status\",\n    [\n        \"A\" => \"Active\",\n        \"I\" => \"Inactive\",\n    ]\n);\n```\n\n### public static *string* **select** (*array* $parameters, \\[*array* $data\\])\n\nBuilds a HTML SELECT tag using a Phalcon\\Mvc\\Model resultset as options\n\n``` php\necho Phalcon\\Tag::select(\n    [\n        \"robotId\",\n        Robots::find(\"type = \"mechanical\"\"),\n        \"using\" => [\"id\", \"name\"],\n    ]\n);\n```\n\nVolt syntax:\n\n``` php\n{{ select(\"robotId\", robots, \"using\": [\"id\", \"name\"]) }}\n```\n\n### public static *string* **textArea** (*array* $parameters)\n\nBuilds a HTML TEXTAREA tag\n\n``` php\necho Phalcon\\Tag::textArea(\n    [\n        \"comments\",\n        \"cols\" => 10,\n        \"rows\" => 4,\n    ]\n);\n```\n\nVolt syntax:\n\n``` php\n{{ text_area(\"comments\", \"cols\": 10, \"rows\": 4) }}\n```\n\n### public static *string* **form** (*array* $parameters)\n\nBuilds a HTML FORM tag\n\n``` php\necho Phalcon\\Tag::form(\"posts/save\");\n\necho Phalcon\\Tag::form(\n    [\n        \"posts/save\",\n        \"method\" => \"post\",\n    ]\n);\n```\n\nVolt syntax:\n\n``` php\n{{ form(\"posts/save\") }}\n{{ form(\"posts/save\", \"method\": \"post\") }}\n```\n\n### public static **endForm** ()\n\nBuilds a HTML close FORM tag\n\n### public static **setTitle** (*mixed* $title)\n\nSet the title of view content\n\n``` php\nPhalcon\\Tag::setTitle(\"Welcome to my Page\");\n```\n\n### public static **setTitleSeparator** (*mixed* $titleSeparator)\n\nSet the title separator of view content\n\n``` php\nPhalcon\\Tag::setTitleSeparator(\"-\");\n```\n\n### public static **appendTitle** (*mixed* $title)\n\nAppends a text to current document title\n\n### public static **prependTitle** (*mixed* $title)\n\nPrepends a text to current document title\n\n### public static **getTitle** (\\[*mixed* $tags\\])\n\nGets the current document title. The title will be automatically escaped.\n\n``` php\necho Phalcon\\Tag::getTitle();\n```\n\n``` php\n{{ get_title() }}\n```\n\n### public static **getTitleSeparator** ()\n\nGets the current document title separator\n\n``` php\necho Phalcon\\Tag::getTitleSeparator();\n```\n\n``` php\n{{ get_title_separator() }}\n```\n\n### public static *string* **stylesheetLink** (\\[*array* $parameters\\], \\[*boolean* $local\\])\n\nBuilds a LINK\\[rel=”stylesheet”\\] tag\n\n``` php\necho Phalcon\\Tag::stylesheetLink(\"http://fonts.googleapis.com/css?family=Rosario\", false);\necho Phalcon\\Tag::stylesheetLink(\"css/style.css\");\n```\n\nVolt Syntax:\n\n``` php\n{{ stylesheet_link(\"http://fonts.googleapis.com/css?family=Rosario\", false) }}\n{{ stylesheet_link(\"css/style.css\") }}\n```\n\n### public static *string* **javascriptInclude** (\\[*array* $parameters\\], \\[*boolean* $local\\])\n\nBuilds a SCRIPT\\[type=”javascript”\\] tag\n\n``` php\necho Phalcon\\Tag::javascriptInclude(\"http://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js\", false);\necho Phalcon\\Tag::javascriptInclude(\"javascript/jquery.js\");\n```\n\nVolt syntax:\n\n``` php\n{{ javascript_include(\"http://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js\", false) }}\n{{ javascript_include(\"javascript/jquery.js\") }}\n```\n\n### public static *string* **image** (\\[*array* $parameters\\], \\[*boolean* $local\\])\n\nBuilds HTML IMG tags\n\n``` php\necho Phalcon\\Tag::image(\"img/bg.png\");\n\necho Phalcon\\Tag::image(\n    [\n        \"img/photo.jpg\",\n        \"alt\" => \"Some Photo\",\n    ]\n);\n```\n\nVolt Syntax:\n\n``` php\n{{ image(\"img/bg.png\") }}\n{{ image(\"img/photo.jpg\", \"alt\": \"Some Photo\") }}\n{{ image(\"http://static.mywebsite.com/img/bg.png\", false) }}\n```\n\n### public static **friendlyTitle** (*mixed* $text, \\[*mixed* $separator\\], \\[*mixed* $lowercase\\], \\[*mixed* $replace\\])\n\nConverts texts into URL-friendly titles\n\n``` php\necho Phalcon\\Tag::friendlyTitle(\"These are big important news\", \"-\")\n```\n\n### public static **setDocType** (*mixed* $doctype)\n\nSet the document type of content\n\n### public static **getDocType** ()\n\nGet the document type declaration of content\n\n### public static **tagHtml** (*mixed* $tagName, \\[*mixed* $parameters\\], \\[*mixed* $selfClose\\], \\[*mixed* $onlyStart\\], \\[*mixed* $useEol\\])\n\nBuilds a HTML tag\n\n### public static **tagHtmlClose** (*mixed* $tagName, \\[*mixed* $useEol\\])\n\nBuilds a HTML tag closing tag\n\n``` php\necho Phalcon\\Tag::tagHtmlClose(\"script\", true);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Tag.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Tag.html)"
- name: Tag::appendTitle
  id: api/phalcon_tag#appendtitle
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **appendTitle** (*mixed* $title)

    Appends a text to current document title
- name: Tag::checkField
  id: api/phalcon_tag#checkfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **checkField** (*array* $parameters)

    Builds a HTML input\[type=”check”\] tag

    ``` php
    echo Phalcon\Tag::checkField(
        [
            "terms",
            "value" => "Y",
        ]
    );
    ```

    Volt syntax:

    ``` php
    {{ check_field("terms") }}
    ```
- name: Tag::colorField
  id: api/phalcon_tag#colorfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **colorField** (*array* $parameters)

    Builds a HTML input\[type=”color”\] tag
- name: Tag::dateField
  id: api/phalcon_tag#datefield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **dateField** (*array* $parameters)

    Builds a HTML input\[type=”date”\] tag

    ``` php
    echo Phalcon\Tag::dateField(
        [
            "born",
            "value" => "14-12-1980",
        ]
    );
    ```
- name: Tag::dateTimeField
  id: api/phalcon_tag#datetimefield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **dateTimeField** (*array* $parameters)

    Builds a HTML input\[type=”datetime”\] tag
- name: Tag::dateTimeLocalField
  id: api/phalcon_tag#datetimelocalfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **dateTimeLocalField** (*array* $parameters)

    Builds a HTML input\[type=”datetime-local”\] tag
- name: Tag::displayTo
  id: api/phalcon_tag#displayto
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **displayTo** (*string* $id, *string* $value)

    Alias of Phalcon\Tag::setDefault
- name: Tag::emailField
  id: api/phalcon_tag#emailfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **emailField** (*array* $parameters)

    Builds a HTML input\[type=”email”\] tag

    ``` php
    echo Phalcon\Tag::emailField("email");
    ```
- name: Tag::endForm
  id: api/phalcon_tag#endform
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **endForm** ()

    Builds a HTML close FORM tag
- name: Tag::fileField
  id: api/phalcon_tag#filefield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **fileField** (*array* $parameters)

    Builds a HTML input\[type=”file”\] tag

    ``` php
    echo Phalcon\Tag::fileField("file");
    ```
- name: Tag::form
  id: api/phalcon_tag#form
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **form** (*array* $parameters)

    Builds a HTML FORM tag

    ``` php
    echo Phalcon\Tag::form("posts/save");

    echo Phalcon\Tag::form(
        [
            "posts/save",
            "method" => "post",
        ]
    );
    ```

    Volt syntax:

    ``` php
    {{ form("posts/save") }}
    {{ form("posts/save", "method": "post") }}
    ```
- name: Tag::friendlyTitle
  id: api/phalcon_tag#friendlytitle
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **friendlyTitle** (*mixed* $text, \[*mixed* $separator\], \[*mixed* $lowercase\], \[*mixed* $replace\])

    Converts texts into URL-friendly titles

    ``` php
    echo Phalcon\Tag::friendlyTitle("These are big important news", "-")
    ```
- name: Tag::getDI
  id: api/phalcon_tag#getdi
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **getDI** ()

    Internally gets the request dispatcher
- name: Tag::getDocType
  id: api/phalcon_tag#getdoctype
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **getDocType** ()

    Get the document type declaration of content
- name: Tag::getEscaper
  id: api/phalcon_tag#getescaper
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *EscaperInterface* **getEscaper** (*array* $params)

    Obtains the ‘escaper’ service if required
- name: Tag::getEscaperService
  id: api/phalcon_tag#getescaperservice
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **getEscaperService** ()

    Returns an Escaper service from the default DI
- name: Tag::getTitle
  id: api/phalcon_tag#gettitle
  summary: Gets the current document title
  belongs_to: Tag
  description: |-
    ### public static **getTitle** (\[*mixed* $tags\])

    Gets the current document title. The title will be automatically escaped.

    ``` php
    echo Phalcon\Tag::getTitle();
    ```

    ``` php
    {{ get_title() }}
    ```
- name: Tag::getTitleSeparator
  id: api/phalcon_tag#gettitleseparator
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **getTitleSeparator** ()

    Gets the current document title separator

    ``` php
    echo Phalcon\Tag::getTitleSeparator();
    ```

    ``` php
    {{ get_title_separator() }}
    ```
- name: Tag::getUrlService
  id: api/phalcon_tag#geturlservice
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **getUrlService** ()

    Returns a URL service from the default DI
- name: Tag::getValue
  id: api/phalcon_tag#getvalue
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *mixed* **getValue** (*string* $name, \[*array* $params\])

    Every helper calls this function to check whether a component has a predefined value using Phalcon\Tag::setDefault or value from $\_POST
- name: Tag::hasValue
  id: api/phalcon_tag#hasvalue
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *boolean* **hasValue** (*string* $name)

    Check if a helper has a default value set using Phalcon\Tag::setDefault or value from $\_POST
- name: Tag::hiddenField
  id: api/phalcon_tag#hiddenfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **hiddenField** (*array* $parameters)

    Builds a HTML input\[type=”hidden”\] tag

    ``` php
    echo Phalcon\Tag::hiddenField(
        [
            "name",
            "value" => "mike",
        ]
    );
    ```
- name: Tag::HTML32
  id: api/phalcon_tag#html32
  summary: null
  belongs_to: Tag
  description: '### *integer* **HTML32**'
- name: Tag::HTML401_FRAMESET
  id: api/phalcon_tag#html401_frameset
  summary: null
  belongs_to: Tag
  description: '### *integer* **HTML401_FRAMESET**'
- name: Tag::HTML401_STRICT
  id: api/phalcon_tag#html401_strict
  summary: null
  belongs_to: Tag
  description: '### *integer* **HTML401_STRICT**'
- name: Tag::HTML401_TRANSITIONAL
  id: api/phalcon_tag#html401_transitional
  summary: null
  belongs_to: Tag
  description: '### *integer* **HTML401_TRANSITIONAL**'
- name: Tag::HTML5
  id: api/phalcon_tag#html5
  summary: null
  belongs_to: Tag
  description: '### *integer* **HTML5**'
- name: Tag::image
  id: api/phalcon_tag#image
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **image** (\[*array* $parameters\], \[*boolean* $local\])

    Builds HTML IMG tags

    ``` php
    echo Phalcon\Tag::image("img/bg.png");

    echo Phalcon\Tag::image(
        [
            "img/photo.jpg",
            "alt" => "Some Photo",
        ]
    );
    ```

    Volt Syntax:

    ``` php
    {{ image("img/bg.png") }}
    {{ image("img/photo.jpg", "alt": "Some Photo") }}
    {{ image("http://static.mywebsite.com/img/bg.png", false) }}
    ```
- name: Tag::imageInput
  id: api/phalcon_tag#imageinput
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **imageInput** (*array* $parameters)

    Builds a HTML input\[type=”image”\] tag

    ``` php
    echo Phalcon\Tag::imageInput(
        [
            "src" => "/img/button.png",
        ]
    );
    ```

    Volt syntax:

    ``` php
    {{ image_input("src": "/img/button.png") }}
    ```
- name: Tag::javascriptInclude
  id: api/phalcon_tag#javascriptinclude
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **javascriptInclude** (\[*array* $parameters\], \[*boolean* $local\])

    Builds a SCRIPT\[type=”javascript”\] tag

    ``` php
    echo Phalcon\Tag::javascriptInclude("http://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js", false);
    echo Phalcon\Tag::javascriptInclude("javascript/jquery.js");
    ```

    Volt syntax:

    ``` php
    {{ javascript_include("http://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js", false) }}
    {{ javascript_include("javascript/jquery.js") }}
    ```
- name: Tag::linkTo
  id: api/phalcon_tag#linkto
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **linkTo** (*array* \| *string* $parameters, \[*string* $text\], \[*boolean* $local\])

    Builds a HTML A tag using framework conventions

    ``` php
    echo Phalcon\Tag::linkTo("signup/register", "Register Here!");

    echo Phalcon\Tag::linkTo(
        [
            "signup/register",
            "Register Here!"
        ]
    );

    echo Phalcon\Tag::linkTo(
        [
            "signup/register",
            "Register Here!",
            "class" => "btn-primary",
        ]
    );

    echo Phalcon\Tag::linkTo("http://phalconphp.com/", "Phalcon", false);

    echo Phalcon\Tag::linkTo(
        [
            "http://phalconphp.com/",
            "Phalcon Home",
            false,
        ]
    );

    echo Phalcon\Tag::linkTo(
        [
            "http://phalconphp.com/",
            "Phalcon Home",
            "local" => false,
        ]
    );

    echo Phalcon\Tag::linkTo(
        [
            "action" => "http://phalconphp.com/",
            "text"   => "Phalcon Home",
            "local"  => false,
            "target" => "_new"
        ]
    );
    ```

    ### final protected static *string* **\_inputField** (*string* $type, *array* $parameters, \[*boolean* $asValue\])

    Builds generic INPUT tags

    ### final protected static *string* **\_inputFieldChecked** (*string* $type, *array* $parameters)

    Builds INPUT tags that implements the checked attribute
- name: Tag::monthField
  id: api/phalcon_tag#monthfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **monthField** (*array* $parameters)

    Builds a HTML input\[type=”month”\] tag
- name: Tag::numericField
  id: api/phalcon_tag#numericfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **numericField** (*array* $parameters)

    Builds a HTML input\[type=”number”\] tag

    ``` php
    echo Phalcon\Tag::numericField(
        [
            "price",
            "min" => "1",
            "max" => "5",
        ]
    );
    ```
- name: Tag::passwordField
  id: api/phalcon_tag#passwordfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **passwordField** (*array* $parameters)

    Builds a HTML input\[type=”password”\] tag

    ``` php
    echo Phalcon\Tag::passwordField(
        [
            "name",
            "size" => 30,
        ]
    );
    ```
- name: Tag::prependTitle
  id: api/phalcon_tag#prependtitle
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **prependTitle** (*mixed* $title)

    Prepends a text to current document title
- name: Tag::radioField
  id: api/phalcon_tag#radiofield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **radioField** (*array* $parameters)

    Builds a HTML input\[type=”radio”\] tag

    ``` php
    echo Phalcon\Tag::radioField(
        [
            "weather",
            "value" => "hot",
        ]
    );
    ```

    Volt syntax:

    ``` php
    {{ radio_field("Save") }}
    ```
- name: Tag::rangeField
  id: api/phalcon_tag#rangefield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **rangeField** (*array* $parameters)

    Builds a HTML input\[type=”range”\] tag
- name: Tag::renderAttributes
  id: api/phalcon_tag#renderattributes
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **renderAttributes** (*mixed* $code, *array* $attributes)

    Renders parameters keeping order in their HTML attributes
- name: Tag::resetInput
  id: api/phalcon_tag#resetinput
  summary: Resets the request and internal values to avoid those fields will have any default value
  belongs_to: Tag
  description: |-
    ### public static **resetInput** ()

    Resets the request and internal values to avoid those fields will have any default value.
- name: Tag::searchField
  id: api/phalcon_tag#searchfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **searchField** (*array* $parameters)

    Builds a HTML input\[type=”search”\] tag
- name: Tag::select
  id: api/phalcon_tag#select
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **select** (*array* $parameters, \[*array* $data\])

    Builds a HTML SELECT tag using a Phalcon\Mvc\Model resultset as options

    ``` php
    echo Phalcon\Tag::select(
        [
            "robotId",
            Robots::find("type = "mechanical""),
            "using" => ["id", "name"],
        ]
    );
    ```

    Volt syntax:

    ``` php
    {{ select("robotId", robots, "using": ["id", "name"]) }}
    ```
- name: Tag::selectStatic
  id: api/phalcon_tag#selectstatic
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **selectStatic** (*array* $parameters, \[*array* $data\])

    Builds a HTML SELECT tag using a PHP array for options

    ``` php
    echo Phalcon\Tag::selectStatic(
        "status",
        [
            "A" => "Active",
            "I" => "Inactive",
        ]
    );
    ```
- name: Tag::setAutoescape
  id: api/phalcon_tag#setautoescape
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **setAutoescape** (*mixed* $autoescape)

    Set autoescape mode in generated html
- name: Tag::setDefault
  id: api/phalcon_tag#setdefault
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **setDefault** (*string* $id, *string* $value)

    Assigns default values to generated tags by helpers

    ``` php
    // Assigning "peter" to "name" component
    Phalcon\Tag::setDefault("name", "peter");

    // Later in the view
    echo Phalcon\Tag::textField("name"); // Will have the value "peter" by default
    ```
- name: Tag::setDefaults
  id: api/phalcon_tag#setdefaults
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **setDefaults** (*array* $values, \[*mixed* $merge\])

    Assigns default values to generated tags by helpers

    ``` php
    // Assigning "peter" to "name" component
    Phalcon\Tag::setDefaults(
        [
            "name" => "peter",
        ]
    );

    // Later in the view
    echo Phalcon\Tag::textField("name"); // Will have the value "peter" by default
    ```
- name: Tag::setDI
  id: api/phalcon_tag#setdi
  summary: Sets the dependency injector container
  belongs_to: Tag
  description: |-
    ### public static **setDI** ([*Phalcon\DiInterface*](phalcon_diinterface) $dependencyInjector)

    Sets the dependency injector container.
- name: Tag::setDocType
  id: api/phalcon_tag#setdoctype
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **setDocType** (*mixed* $doctype)

    Set the document type of content
- name: Tag::setTitle
  id: api/phalcon_tag#settitle
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **setTitle** (*mixed* $title)

    Set the title of view content

    ``` php
    Phalcon\Tag::setTitle("Welcome to my Page");
    ```
- name: Tag::setTitleSeparator
  id: api/phalcon_tag#settitleseparator
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **setTitleSeparator** (*mixed* $titleSeparator)

    Set the title separator of view content

    ``` php
    Phalcon\Tag::setTitleSeparator("-");
    ```
- name: Tag::stylesheetLink
  id: api/phalcon_tag#stylesheetlink
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **stylesheetLink** (\[*array* $parameters\], \[*boolean* $local\])

    Builds a LINK\[rel=”stylesheet”\] tag

    ``` php
    echo Phalcon\Tag::stylesheetLink("http://fonts.googleapis.com/css?family=Rosario", false);
    echo Phalcon\Tag::stylesheetLink("css/style.css");
    ```

    Volt Syntax:

    ``` php
    {{ stylesheet_link("http://fonts.googleapis.com/css?family=Rosario", false) }}
    {{ stylesheet_link("css/style.css") }}
    ```
- name: Tag::submitButton
  id: api/phalcon_tag#submitbutton
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **submitButton** (*array* $parameters)

    Builds a HTML input\[type=”submit”\] tag

    ``` php
    echo Phalcon\Tag::submitButton("Save")
    ```

    Volt syntax:

    ``` php
    {{ submit_button("Save") }}
    ```
- name: Tag::tagHtml
  id: api/phalcon_tag#taghtml
  summary: null
  belongs_to: Tag
  description: |-
    ### public static **tagHtml** (*mixed* $tagName, \[*mixed* $parameters\], \[*mixed* $selfClose\], \[*mixed* $onlyStart\], \[*mixed* $useEol\])

    Builds a HTML tag
- name: Tag::tagHtmlClose
  id: api/phalcon_tag#taghtmlclose
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Tag
  description: "### public static **tagHtmlClose** (*mixed* $tagName, \\[*mixed* $useEol\\])\n\nBuilds a HTML tag closing tag\n\n``` php\necho Phalcon\\Tag::tagHtmlClose(\"script\", true);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Tag.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Tag.html)"
- name: Tag::telField
  id: api/phalcon_tag#telfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **telField** (*array* $parameters)

    Builds a HTML input\[type=”tel”\] tag
- name: Tag::textArea
  id: api/phalcon_tag#textarea
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **textArea** (*array* $parameters)

    Builds a HTML TEXTAREA tag

    ``` php
    echo Phalcon\Tag::textArea(
        [
            "comments",
            "cols" => 10,
            "rows" => 4,
        ]
    );
    ```

    Volt syntax:

    ``` php
    {{ text_area("comments", "cols": 10, "rows": 4) }}
    ```
- name: Tag::textField
  id: api/phalcon_tag#textfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **textField** (*array* $parameters)

    Builds a HTML input\[type=”text”\] tag

    ``` php
    echo Phalcon\Tag::textField(
        [
            "name",
            "size" => 30,
        ]
    );
    ```
- name: Tag::timeField
  id: api/phalcon_tag#timefield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **timeField** (*array* $parameters)

    Builds a HTML input\[type=”time”\] tag
- name: Tag::urlField
  id: api/phalcon_tag#urlfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **urlField** (*array* $parameters)

    Builds a HTML input\[type=”url”\] tag
- name: Tag::weekField
  id: api/phalcon_tag#weekfield
  summary: null
  belongs_to: Tag
  description: |-
    ### public static *string* **weekField** (*array* $parameters)

    Builds a HTML input\[type=”week”\] tag
- name: Tag::XHTML10_FRAMESET
  id: api/phalcon_tag#xhtml10_frameset
  summary: null
  belongs_to: Tag
  description: '### *integer* **XHTML10_FRAMESET**'
- name: Tag::XHTML10_STRICT
  id: api/phalcon_tag#xhtml10_strict
  summary: null
  belongs_to: Tag
  description: '### *integer* **XHTML10_STRICT**'
- name: Tag::XHTML10_TRANSITIONAL
  id: api/phalcon_tag#xhtml10_transitional
  summary: null
  belongs_to: Tag
  description: '### *integer* **XHTML10_TRANSITIONAL**'
- name: Tag::XHTML11
  id: api/phalcon_tag#xhtml11
  summary: null
  belongs_to: Tag
  description: '### *integer* **XHTML11**'
- name: Tag::XHTML20
  id: api/phalcon_tag#xhtml20
  summary: null
  belongs_to: Tag
  description: '### *integer* **XHTML20**'
- name: Tag::XHTML5
  id: api/phalcon_tag#xhtml5
  summary: null
  belongs_to: Tag
  description: |-
    ### *integer* **XHTML5**

    ## Methods
- name: Tag\Exception
  id: api/phalcon_tag_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Tag\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/tag/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Exception.html)"
- name: Tag\Select
  id: api/phalcon_tag_select
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Tag\\Select**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/tag/select.zep)\n\nGenerates a SELECT html tag using a static array of values or a Phalcon\\Mvc\\Model resultset\n\n## Methods\n\n### public static **selectField** (*array* $parameters, \\[*array* $data\\])\n\nGenerates a SELECT tag\n\n### private static **\\_optionsFromResultset** ([*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset) $resultset, *array* $using, *mixed* $value, *string* $closeOption)\n\nGenerate the OPTION tags based on a resultset\n\n### private static **\\_optionsFromArray** (*array* $data, *mixed* $value, *string* $closeOption)\n\nGenerate the OPTION tags based on an array\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Select.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Select.html)"
- name: Tag\Select::selectField
  id: api/phalcon_tag_select#selectfield
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Tag\Select
  description: "### public static **selectField** (*array* $parameters, \\[*array* $data\\])\n\nGenerates a SELECT tag\n\n### private static **\\_optionsFromResultset** ([*Phalcon\\Mvc\\Model\\Resultset*](phalcon_mvc_model_resultset) $resultset, *array* $using, *mixed* $value, *string* $closeOption)\n\nGenerate the OPTION tags based on a resultset\n\n### private static **\\_optionsFromArray** (*array* $data, *mixed* $value, *string* $closeOption)\n\nGenerate the OPTION tags based on an array\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Select.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Select.html)"
- name: Text
  id: api/phalcon_text
  summary: Generates a random string based on the given type
  description: "# Abstract class **Phalcon\\Text**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/text.zep)\n\nProvides utilities to work with texts\n\n## Constants\n\n### *integer* **RANDOM_ALNUM**\n\n### *integer* **RANDOM_ALPHA**\n\n### *integer* **RANDOM_HEXDEC**\n\n### *integer* **RANDOM_NUMERIC**\n\n### *integer* **RANDOM_NOZERO**\n\n## Methods\n\n### public static **camelize** (*mixed* $str, \\[*mixed* $delimiter\\])\n\nConverts strings to camelize style\n\n``` php\necho Phalcon\\Text::camelize(\"coco_bongo\"); // CocoBongo\necho Phalcon\\Text::camelize(\"co_co-bon_go\", \"-\"); // Co_coBon_go\necho Phalcon\\Text::camelize(\"co_co-bon_go\", \"_-\"); // CoCoBonGo\n```\n\n### public static **uncamelize** (*mixed* $str, \\[*mixed* $delimiter\\])\n\nUncamelize strings which are camelized\n\n``` php\necho Phalcon\\Text::uncamelize(\"CocoBongo\"); // coco_bongo\necho Phalcon\\Text::uncamelize(\"CocoBongo\", \"-\"); // coco-bongo\n```\n\n### public static **increment** (*mixed* $str, \\[*mixed* $separator\\])\n\nAdds a number to a string or increment that number if it already is defined\n\n``` php\necho Phalcon\\Text::increment(\"a\"); // \"a_1\"\necho Phalcon\\Text::increment(\"a_1\"); // \"a_2\"\n```\n\n### public static **random** (\\[*mixed* $type\\], \\[*mixed* $length\\])\n\nGenerates a random string based on the given type. Type is one of the RANDOM\\_\\* constants\n\n``` php\n// \"aloiwkqz\"\necho Phalcon\\Text::random(\n    Phalcon\\Text::RANDOM_ALNUM\n);\n```\n\n### public static **startsWith** (*mixed* $str, *mixed* $start, \\[*mixed* $ignoreCase\\])\n\nCheck if a string starts with a given string\n\n``` php\necho Phalcon\\Text::startsWith(\"Hello\", \"He\"); // true\necho Phalcon\\Text::startsWith(\"Hello\", \"he\", false); // false\necho Phalcon\\Text::startsWith(\"Hello\", \"he\"); // true\n```\n\n### public static **endsWith** (*mixed* $str, *mixed* $end, \\[*mixed* $ignoreCase\\])\n\nCheck if a string ends with a given string\n\n``` php\necho Phalcon\\Text::endsWith(\"Hello\", \"llo\"); // true\necho Phalcon\\Text::endsWith(\"Hello\", \"LLO\", false); // false\necho Phalcon\\Text::endsWith(\"Hello\", \"LLO\"); // true\n```\n\n### public static **lower** (*mixed* $str, \\[*mixed* $encoding\\])\n\nLowercases a string, this function makes use of the mbstring extension if available\n\n``` php\necho Phalcon\\Text::lower(\"HELLO\"); // hello\n```\n\n### public static **upper** (*mixed* $str, \\[*mixed* $encoding\\])\n\nUppercases a string, this function makes use of the mbstring extension if available\n\n``` php\necho Phalcon\\Text::upper(\"hello\"); // HELLO\n```\n\n### public static **reduceSlashes** (*mixed* $str)\n\nReduces multiple slashes in a string to single slashes\n\n``` php\necho Phalcon\\Text::reduceSlashes(\"foo//bar/baz\"); // foo/bar/baz\necho Phalcon\\Text::reduceSlashes(\"http://foo.bar///baz/buz\"); // http://foo.bar/baz/buz\n```\n\n### public static **concat** ()\n\nConcatenates strings using the separator only once without duplication in places concatenation\n\n``` php\n$str = Phalcon\\Text::concat(\n    \"/\",\n    \"/tmp/\",\n    \"/folder_1/\",\n    \"/folder_2\",\n    \"folder_3/\"\n);\n\n// /tmp/folder_1/folder_2/folder_3/\necho $str;\n```\n\n### public static **dynamic** (*mixed* $text, \\[*mixed* $leftDelimiter\\], \\[*mixed* $rightDelimiter\\], \\[*mixed* $separator\\])\n\nGenerates random text in accordance with the template\n\n``` php\n// Hi my name is a Bob\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hi my name is a Jon\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Bob\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Zyxep\necho Phalcon\\Text::dynamic(\"[Hi/Hello], my name is a [Zyxep/Mark]!\", \"[\", \"]\", \"/\");\n```\n\n### public static **underscore** (*mixed* $text)\n\nMakes a phrase underscored instead of spaced\n\n``` php\necho Phalcon\\Text::underscore(\"look behind\"); // \"look_behind\"\necho Phalcon\\Text::underscore(\"Awesome Phalcon\"); // \"Awesome_Phalcon\"\n```\n\n### public static **humanize** (*mixed* $text)\n\nMakes an underscored or dashed phrase human-readable\n\n``` php\necho Phalcon\\Text::humanize(\"start-a-horse\"); // \"start a horse\"\necho Phalcon\\Text::humanize(\"five_cats\"); // \"five cats\"\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Text.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Text.html)"
- name: Text::camelize
  id: api/phalcon_text#camelize
  summary: null
  belongs_to: Text
  description: |-
    ### public static **camelize** (*mixed* $str, \[*mixed* $delimiter\])

    Converts strings to camelize style

    ``` php
    echo Phalcon\Text::camelize("coco_bongo"); // CocoBongo
    echo Phalcon\Text::camelize("co_co-bon_go", "-"); // Co_coBon_go
    echo Phalcon\Text::camelize("co_co-bon_go", "_-"); // CoCoBonGo
    ```
- name: Text::concat
  id: api/phalcon_text#concat
  summary: null
  belongs_to: Text
  description: |-
    ### public static **concat** ()

    Concatenates strings using the separator only once without duplication in places concatenation

    ``` php
    $str = Phalcon\Text::concat(
        "/",
        "/tmp/",
        "/folder_1/",
        "/folder_2",
        "folder_3/"
    );

    // /tmp/folder_1/folder_2/folder_3/
    echo $str;
    ```
- name: Text::dynamic
  id: api/phalcon_text#dynamic
  summary: null
  belongs_to: Text
  description: |-
    ### public static **dynamic** (*mixed* $text, \[*mixed* $leftDelimiter\], \[*mixed* $rightDelimiter\], \[*mixed* $separator\])

    Generates random text in accordance with the template

    ``` php
    // Hi my name is a Bob
    echo Phalcon\Text::dynamic("{Hi|Hello}, my name is a {Bob|Mark|Jon}!");

    // Hi my name is a Jon
    echo Phalcon\Text::dynamic("{Hi|Hello}, my name is a {Bob|Mark|Jon}!");

    // Hello my name is a Bob
    echo Phalcon\Text::dynamic("{Hi|Hello}, my name is a {Bob|Mark|Jon}!");

    // Hello my name is a Zyxep
    echo Phalcon\Text::dynamic("[Hi/Hello], my name is a [Zyxep/Mark]!", "[", "]", "/");
    ```
- name: Text::endsWith
  id: api/phalcon_text#endswith
  summary: null
  belongs_to: Text
  description: |-
    ### public static **endsWith** (*mixed* $str, *mixed* $end, \[*mixed* $ignoreCase\])

    Check if a string ends with a given string

    ``` php
    echo Phalcon\Text::endsWith("Hello", "llo"); // true
    echo Phalcon\Text::endsWith("Hello", "LLO", false); // false
    echo Phalcon\Text::endsWith("Hello", "LLO"); // true
    ```
- name: Text::humanize
  id: api/phalcon_text#humanize
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Text
  description: "### public static **humanize** (*mixed* $text)\n\nMakes an underscored or dashed phrase human-readable\n\n``` php\necho Phalcon\\Text::humanize(\"start-a-horse\"); // \"start a horse\"\necho Phalcon\\Text::humanize(\"five_cats\"); // \"five cats\"\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Text.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Text.html)"
- name: Text::increment
  id: api/phalcon_text#increment
  summary: null
  belongs_to: Text
  description: |-
    ### public static **increment** (*mixed* $str, \[*mixed* $separator\])

    Adds a number to a string or increment that number if it already is defined

    ``` php
    echo Phalcon\Text::increment("a"); // "a_1"
    echo Phalcon\Text::increment("a_1"); // "a_2"
    ```
- name: Text::lower
  id: api/phalcon_text#lower
  summary: null
  belongs_to: Text
  description: |-
    ### public static **lower** (*mixed* $str, \[*mixed* $encoding\])

    Lowercases a string, this function makes use of the mbstring extension if available

    ``` php
    echo Phalcon\Text::lower("HELLO"); // hello
    ```
- name: Text::random
  id: api/phalcon_text#random
  summary: Generates a random string based on the given type
  belongs_to: Text
  description: |-
    ### public static **random** (\[*mixed* $type\], \[*mixed* $length\])

    Generates a random string based on the given type. Type is one of the RANDOM\_\* constants

    ``` php
    // "aloiwkqz"
    echo Phalcon\Text::random(
        Phalcon\Text::RANDOM_ALNUM
    );
    ```
- name: Text::RANDOM_ALNUM
  id: api/phalcon_text#random_alnum
  summary: null
  belongs_to: Text
  description: '### *integer* **RANDOM_ALNUM**'
- name: Text::RANDOM_ALPHA
  id: api/phalcon_text#random_alpha
  summary: null
  belongs_to: Text
  description: '### *integer* **RANDOM_ALPHA**'
- name: Text::RANDOM_HEXDEC
  id: api/phalcon_text#random_hexdec
  summary: null
  belongs_to: Text
  description: '### *integer* **RANDOM_HEXDEC**'
- name: Text::RANDOM_NOZERO
  id: api/phalcon_text#random_nozero
  summary: null
  belongs_to: Text
  description: |-
    ### *integer* **RANDOM_NOZERO**

    ## Methods
- name: Text::RANDOM_NUMERIC
  id: api/phalcon_text#random_numeric
  summary: null
  belongs_to: Text
  description: '### *integer* **RANDOM_NUMERIC**'
- name: Text::reduceSlashes
  id: api/phalcon_text#reduceslashes
  summary: null
  belongs_to: Text
  description: |-
    ### public static **reduceSlashes** (*mixed* $str)

    Reduces multiple slashes in a string to single slashes

    ``` php
    echo Phalcon\Text::reduceSlashes("foo//bar/baz"); // foo/bar/baz
    echo Phalcon\Text::reduceSlashes("http://foo.bar///baz/buz"); // http://foo.bar/baz/buz
    ```
- name: Text::startsWith
  id: api/phalcon_text#startswith
  summary: null
  belongs_to: Text
  description: |-
    ### public static **startsWith** (*mixed* $str, *mixed* $start, \[*mixed* $ignoreCase\])

    Check if a string starts with a given string

    ``` php
    echo Phalcon\Text::startsWith("Hello", "He"); // true
    echo Phalcon\Text::startsWith("Hello", "he", false); // false
    echo Phalcon\Text::startsWith("Hello", "he"); // true
    ```
- name: Text::uncamelize
  id: api/phalcon_text#uncamelize
  summary: null
  belongs_to: Text
  description: |-
    ### public static **uncamelize** (*mixed* $str, \[*mixed* $delimiter\])

    Uncamelize strings which are camelized

    ``` php
    echo Phalcon\Text::uncamelize("CocoBongo"); // coco_bongo
    echo Phalcon\Text::uncamelize("CocoBongo", "-"); // coco-bongo
    ```
- name: Text::underscore
  id: api/phalcon_text#underscore
  summary: null
  belongs_to: Text
  description: |-
    ### public static **underscore** (*mixed* $text)

    Makes a phrase underscored instead of spaced

    ``` php
    echo Phalcon\Text::underscore("look behind"); // "look_behind"
    echo Phalcon\Text::underscore("Awesome Phalcon"); // "Awesome_Phalcon"
    ```
- name: Text::upper
  id: api/phalcon_text#upper
  summary: null
  belongs_to: Text
  description: |-
    ### public static **upper** (*mixed* $str, \[*mixed* $encoding\])

    Uppercases a string, this function makes use of the mbstring extension if available

    ``` php
    echo Phalcon\Text::upper("hello"); // HELLO
    ```
- name: The MVC Architecture
  id: reference/mvc
  summary: Phalcon offers the object-oriented classes, necessary to implement the Model, View, Controller architecture (often referred to as MVC) in your application
  description: "# The MVC Architecture\n\nPhalcon offers the object-oriented classes, necessary to implement the Model, View, Controller architecture (often referred to as [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)) in your application. This design pattern is widely used by other web frameworks and desktop applications.\n\nMVC benefits include:\n\n- Isolation of business logic from the user interface and the database layer\n- Making it clear where different types of code belong for easier maintenance\n\nIf you decide to use MVC, every request to your application resources will be managed by the MVC architecture. Phalcon classes are written in C language, offering a high performance approach of this pattern in a PHP based application.\n\n## Models\n\nA model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models. [*Learn more*](models)\n\n## Views\n\nViews represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. [*Learn more*](views)\n\n## Controllers\n\nThe controllers provide the “flow” between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. [*Learn more*](controllers)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/mvc.html](https://docs.phalconphp.com/en/latest/reference/mvc.html)"
- name: Translate
  id: api/phalcon_translate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Translate**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate.zep)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate.html)"
- name: Translate\Adapter
  id: api/phalcon_translate_adapter
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Translate\\Adapter**\n\n*implements* [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter.zep)\n\nBase class for Phalcon\\Translate adapters\n\n## Methods\n\n### public **\\_\\_construct** (*array* $options)\n\n...\n\n### public **setInterpolator** ([*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator)\n\n...\n\n### public *string* **t** (*string* $translateKey, \\[*array* $placeholders\\])\n\nReturns the translation string of the given key\n\n### public *string* **\\_** (*string* $translateKey, \\[*array* $placeholders\\])\n\nReturns the translation string of the given key (alias of method ‘t’)\n\n### public **offsetSet** (*string* $offset, *string* $value)\n\nSets a translation value\n\n### public **offsetExists** (*mixed* $translateKey)\n\nCheck whether a translation key exists\n\n### public **offsetUnset** (*string* $offset)\n\nUnsets a translation from the dictionary\n\n### public *string* **offsetGet** (*string* $translateKey)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\nReplaces placeholders by the values passed\n\n### abstract public **query** (*mixed* $index, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface)\n\n...\n\n### abstract public **exists** (*mixed* $index) inherited from [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter.html)"
- name: Translate\Adapter::offsetExists
  id: api/phalcon_translate_adapter#offsetexists
  summary: null
  belongs_to: Translate\Adapter
  description: |-
    ### public **offsetExists** (*mixed* $translateKey)

    Check whether a translation key exists
- name: Translate\Adapter::offsetGet
  id: api/phalcon_translate_adapter#offsetget
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\Adapter
  description: "### public *string* **offsetGet** (*string* $translateKey)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\nReplaces placeholders by the values passed\n\n### abstract public **query** (*mixed* $index, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface)\n\n...\n\n### abstract public **exists** (*mixed* $index) inherited from [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter.html)"
- name: Translate\Adapter::offsetSet
  id: api/phalcon_translate_adapter#offsetset
  summary: null
  belongs_to: Translate\Adapter
  description: |-
    ### public **offsetSet** (*string* $offset, *string* $value)

    Sets a translation value
- name: Translate\Adapter::offsetUnset
  id: api/phalcon_translate_adapter#offsetunset
  summary: null
  belongs_to: Translate\Adapter
  description: |-
    ### public **offsetUnset** (*string* $offset)

    Unsets a translation from the dictionary
- name: Translate\Adapter::setInterpolator
  id: api/phalcon_translate_adapter#setinterpolator
  summary: null
  belongs_to: Translate\Adapter
  description: |-
    ### public **setInterpolator** ([*Phalcon\Translate\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator)

    ...
- name: Translate\Adapter::t
  id: api/phalcon_translate_adapter#t
  summary: null
  belongs_to: Translate\Adapter
  description: |-
    ### public *string* **t** (*string* $translateKey, \[*array* $placeholders\])

    Returns the translation string of the given key
- name: Translate\Adapter::_
  id: api/phalcon_translate_adapter#_
  summary: null
  belongs_to: Translate\Adapter
  description: |-
    ### public *string* **\_** (*string* $translateKey, \[*array* $placeholders\])

    Returns the translation string of the given key (alias of method ‘t’)
- name: Translate\AdapterInterface
  id: api/phalcon_translate_adapterinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Translate\\AdapterInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapterinterface.zep)\n\n## Methods\n\n### abstract public **t** (*mixed* $translateKey, \\[*mixed* $placeholders\\])\n\n...\n\n### abstract public **query** (*mixed* $index, \\[*mixed* $placeholders\\])\n\n...\n\n### abstract public **exists** (*mixed* $index)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_AdapterInterface.html)"
- name: Translate\AdapterInterface::exists
  id: api/phalcon_translate_adapterinterface#exists
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\AdapterInterface
  description: "### abstract public **exists** (*mixed* $index)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_AdapterInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_AdapterInterface.html)"
- name: Translate\AdapterInterface::query
  id: api/phalcon_translate_adapterinterface#query
  summary: null
  belongs_to: Translate\AdapterInterface
  description: |-
    ### abstract public **query** (*mixed* $index, \[*mixed* $placeholders\])

    ...
- name: Translate\AdapterInterface::t
  id: api/phalcon_translate_adapterinterface#t
  summary: null
  belongs_to: Translate\AdapterInterface
  description: |-
    ### abstract public **t** (*mixed* $translateKey, \[*mixed* $placeholders\])

    ...
- name: Translate\Adapter\Csv
  id: api/phalcon_translate_adapter_csv
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Translate\\Adapter\\Csv**\n\n*extends* abstract class [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n*implements* [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter/csv.zep)\n\nAllows to define translation lists using CSV file\n\n## Methods\n\n### public **\\_\\_construct** (*array* $options)\n\nPhalcon\\Translate\\Adapter\\Csv constructor\n\n### private **\\_load** (*string* $file, *int* $length, *string* $delimiter, *string* $enclosure)\n\nLoad translates from file\n\n### public **query** (*mixed* $index, \\[*mixed* $placeholders\\])\n\nReturns the translation related to the given key\n\n### public **exists** (*mixed* $index)\n\nCheck whether is defined a translation key in the internal array\n\n### public **setInterpolator** ([*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n...\n\n### public *string* **t** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key\n\n### public *string* **\\_** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key (alias of method ‘t’)\n\n### public **offsetSet** (*string* $offset, *string* $value) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nSets a translation value\n\n### public **offsetExists** (*mixed* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nCheck whether a translation key exists\n\n### public **offsetUnset** (*string* $offset) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nUnsets a translation from the dictionary\n\n### public *string* **offsetGet** (*string* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Csv.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Csv.html)"
- name: Translate\Adapter\Csv::exists
  id: api/phalcon_translate_adapter_csv#exists
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\Adapter\Csv
  description: "### public **exists** (*mixed* $index)\n\nCheck whether is defined a translation key in the internal array\n\n### public **setInterpolator** ([*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n...\n\n### public *string* **t** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key\n\n### public *string* **\\_** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key (alias of method ‘t’)\n\n### public **offsetSet** (*string* $offset, *string* $value) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nSets a translation value\n\n### public **offsetExists** (*mixed* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nCheck whether a translation key exists\n\n### public **offsetUnset** (*string* $offset) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nUnsets a translation from the dictionary\n\n### public *string* **offsetGet** (*string* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Csv.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Csv.html)"
- name: Translate\Adapter\Csv::query
  id: api/phalcon_translate_adapter_csv#query
  summary: null
  belongs_to: Translate\Adapter\Csv
  description: |-
    ### public **query** (*mixed* $index, \[*mixed* $placeholders\])

    Returns the translation related to the given key
- name: Translate\Adapter\Gettext
  id: api/phalcon_translate_adapter_gettext
  summary: Returns the translation related to the given key
  description: "# Class **Phalcon\\Translate\\Adapter\\Gettext**\n\n*extends* abstract class [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n*implements* [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter/gettext.zep)\n\n``` php\nuse Phalcon\\Translate\\Adapter\\Gettext;\n\n$adapter = new Gettext(\n    [\n        \"locale\"        => \"de_DE.UTF-8\",\n        \"defaultDomain\" => \"translations\",\n        \"directory\"     => \"/path/to/application/locales\",\n        \"category\"      => LC_MESSAGES,\n    ]\n);\n```\n\nAllows translate using gettext\n\n## Methods\n\n### public **getDirectory** ()\n\n### public **getDefaultDomain** ()\n\n### public **getLocale** ()\n\n### public **getCategory** ()\n\n### public **\\_\\_construct** (*array* $options)\n\nPhalcon\\Translate\\Adapter\\Gettext constructor\n\n### public **query** (*mixed* $index, \\[*mixed* $placeholders\\])\n\nReturns the translation related to the given key.\n\n``` php\n$translator->query(\"你好 %name%！\", [\"name\" => \"Phalcon\"]);\n```\n\n### public **exists** (*mixed* $index)\n\nCheck whether is defined a translation key in the internal array\n\n### public **nquery** (*mixed* $msgid1, *mixed* $msgid2, *mixed* $count, \\[*mixed* $placeholders\\], \\[*mixed* $domain\\])\n\nThe plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.\n\n### public **setDomain** (*mixed* $domain)\n\nChanges the current domain (i.e. the translation file)\n\n### public **resetDomain** ()\n\nSets the default domain\n\n### public **setDefaultDomain** (*mixed* $domain)\n\nSets the domain default to search within when calls are made to gettext()\n\n### public **setDirectory** (*mixed* $directory)\n\nSets the path for a domain\n\n``` php\n// Set the directory path\n$gettext->setDirectory(\"/path/to/the/messages\");\n\n// Set the domains and directories path\n$gettext->setDirectory(\n    [\n        \"messages\" => \"/path/to/the/messages\",\n        \"another\"  => \"/path/to/the/another\",\n    ]\n);\n```\n\n### public **setLocale** (*mixed* $category, *mixed* $locale)\n\nSets locale information\n\n``` php\n// Set locale to Dutch\n$gettext->setLocale(LC_ALL, \"nl_NL\");\n\n// Try different possible locale names for german\n$gettext->setLocale(LC_ALL, \"[email protected]\", \"de_DE\", \"de\", \"ge\");\n```\n\n### protected **prepareOptions** (*array* $options)\n\nValidator for constructor\n\n### protected **getOptionsDefault** ()\n\nGets default options\n\n### public **setInterpolator** ([*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n...\n\n### public *string* **t** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key\n\n### public *string* **\\_** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key (alias of method ‘t’)\n\n### public **offsetSet** (*string* $offset, *string* $value) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nSets a translation value\n\n### public **offsetExists** (*mixed* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nCheck whether a translation key exists\n\n### public **offsetUnset** (*string* $offset) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nUnsets a translation from the dictionary\n\n### public *string* **offsetGet** (*string* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Gettext.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Gettext.html)"
- name: Translate\Adapter\Gettext::exists
  id: api/phalcon_translate_adapter_gettext#exists
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **exists** (*mixed* $index)

    Check whether is defined a translation key in the internal array
- name: Translate\Adapter\Gettext::getCategory
  id: api/phalcon_translate_adapter_gettext#getcategory
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **getCategory** ()

    ### public **\_\_construct** (*array* $options)

    Phalcon\Translate\Adapter\Gettext constructor
- name: Translate\Adapter\Gettext::getDefaultDomain
  id: api/phalcon_translate_adapter_gettext#getdefaultdomain
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: '### public **getDefaultDomain** ()'
- name: Translate\Adapter\Gettext::getDirectory
  id: api/phalcon_translate_adapter_gettext#getdirectory
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: '### public **getDirectory** ()'
- name: Translate\Adapter\Gettext::getLocale
  id: api/phalcon_translate_adapter_gettext#getlocale
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: '### public **getLocale** ()'
- name: Translate\Adapter\Gettext::nquery
  id: api/phalcon_translate_adapter_gettext#nquery
  summary: The plural version of gettext()
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **nquery** (*mixed* $msgid1, *mixed* $msgid2, *mixed* $count, \[*mixed* $placeholders\], \[*mixed* $domain\])

    The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.
- name: Translate\Adapter\Gettext::query
  id: api/phalcon_translate_adapter_gettext#query
  summary: Returns the translation related to the given key
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **query** (*mixed* $index, \[*mixed* $placeholders\])

    Returns the translation related to the given key.

    ``` php
    $translator->query("你好 %name%！", ["name" => "Phalcon"]);
    ```
- name: Translate\Adapter\Gettext::resetDomain
  id: api/phalcon_translate_adapter_gettext#resetdomain
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **resetDomain** ()

    Sets the default domain
- name: Translate\Adapter\Gettext::setDefaultDomain
  id: api/phalcon_translate_adapter_gettext#setdefaultdomain
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **setDefaultDomain** (*mixed* $domain)

    Sets the domain default to search within when calls are made to gettext()
- name: Translate\Adapter\Gettext::setDirectory
  id: api/phalcon_translate_adapter_gettext#setdirectory
  summary: null
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **setDirectory** (*mixed* $directory)

    Sets the path for a domain

    ``` php
    // Set the directory path
    $gettext->setDirectory("/path/to/the/messages");

    // Set the domains and directories path
    $gettext->setDirectory(
        [
            "messages" => "/path/to/the/messages",
            "another"  => "/path/to/the/another",
        ]
    );
    ```
- name: Translate\Adapter\Gettext::setDomain
  id: api/phalcon_translate_adapter_gettext#setdomain
  summary: Changes the current domain (i.e
  belongs_to: Translate\Adapter\Gettext
  description: |-
    ### public **setDomain** (*mixed* $domain)

    Changes the current domain (i.e. the translation file)
- name: Translate\Adapter\Gettext::setLocale
  id: api/phalcon_translate_adapter_gettext#setlocale
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\Adapter\Gettext
  description: "### public **setLocale** (*mixed* $category, *mixed* $locale)\n\nSets locale information\n\n``` php\n// Set locale to Dutch\n$gettext->setLocale(LC_ALL, \"nl_NL\");\n\n// Try different possible locale names for german\n$gettext->setLocale(LC_ALL, \"[email protected]\", \"de_DE\", \"de\", \"ge\");\n```\n\n### protected **prepareOptions** (*array* $options)\n\nValidator for constructor\n\n### protected **getOptionsDefault** ()\n\nGets default options\n\n### public **setInterpolator** ([*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n...\n\n### public *string* **t** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key\n\n### public *string* **\\_** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key (alias of method ‘t’)\n\n### public **offsetSet** (*string* $offset, *string* $value) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nSets a translation value\n\n### public **offsetExists** (*mixed* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nCheck whether a translation key exists\n\n### public **offsetUnset** (*string* $offset) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nUnsets a translation from the dictionary\n\n### public *string* **offsetGet** (*string* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Gettext.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Gettext.html)"
- name: Translate\Adapter\NativeArray
  id: api/phalcon_translate_adapter_nativearray
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Translate\\Adapter\\NativeArray**\n\n*extends* abstract class [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n*implements* [*Phalcon\\Translate\\AdapterInterface*](phalcon_translate_adapterinterface), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter/nativearray.zep)\n\nAllows to define translation lists using PHP arrays\n\n## Methods\n\n### public **\\_\\_construct** (*array* $options)\n\nPhalcon\\Translate\\Adapter\\NativeArray constructor\n\n### public **query** (*mixed* $index, \\[*mixed* $placeholders\\])\n\nReturns the translation related to the given key\n\n### public **exists** (*mixed* $index)\n\nCheck whether is defined a translation key in the internal array\n\n### public **setInterpolator** ([*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n...\n\n### public *string* **t** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key\n\n### public *string* **\\_** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key (alias of method ‘t’)\n\n### public **offsetSet** (*string* $offset, *string* $value) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nSets a translation value\n\n### public **offsetExists** (*mixed* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nCheck whether a translation key exists\n\n### public **offsetUnset** (*string* $offset) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nUnsets a translation from the dictionary\n\n### public *string* **offsetGet** (*string* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_NativeArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_NativeArray.html)"
- name: Translate\Adapter\NativeArray::exists
  id: api/phalcon_translate_adapter_nativearray#exists
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\Adapter\NativeArray
  description: "### public **exists** (*mixed* $index)\n\nCheck whether is defined a translation key in the internal array\n\n### public **setInterpolator** ([*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface) $interpolator) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\n...\n\n### public *string* **t** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key\n\n### public *string* **\\_** (*string* $translateKey, \\[*array* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation string of the given key (alias of method ‘t’)\n\n### public **offsetSet** (*string* $offset, *string* $value) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nSets a translation value\n\n### public **offsetExists** (*mixed* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nCheck whether a translation key exists\n\n### public **offsetUnset** (*string* $offset) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nUnsets a translation from the dictionary\n\n### public *string* **offsetGet** (*string* $translateKey) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReturns the translation related to the given key\n\n### protected **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\]) inherited from [*Phalcon\\Translate\\Adapter*](phalcon_translate_adapter)\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_NativeArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_NativeArray.html)"
- name: Translate\Adapter\NativeArray::query
  id: api/phalcon_translate_adapter_nativearray#query
  summary: null
  belongs_to: Translate\Adapter\NativeArray
  description: |-
    ### public **query** (*mixed* $index, \[*mixed* $placeholders\])

    Returns the translation related to the given key
- name: Translate\Exception
  id: api/phalcon_translate_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Translate\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Exception.html)"
- name: Translate\InterpolatorInterface
  id: api/phalcon_translate_interpolatorinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Translate\\InterpolatorInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/interpolatorinterface.zep)\n\n## Methods\n\n### abstract public **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_InterpolatorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_InterpolatorInterface.html)"
- name: Translate\InterpolatorInterface::replacePlaceholders
  id: api/phalcon_translate_interpolatorinterface#replaceplaceholders
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\InterpolatorInterface
  description: "### abstract public **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_InterpolatorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_InterpolatorInterface.html)"
- name: Translate\Interpolator\AssociativeArray
  id: api/phalcon_translate_interpolator_associativearray
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Translate\\Interpolator\\AssociativeArray**\n\n*implements* [*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/interpolator/associativearray.zep)\n\n## Methods\n\n### public **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_AssociativeArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_AssociativeArray.html)"
- name: Translate\Interpolator\AssociativeArray::replacePlaceholders
  id: api/phalcon_translate_interpolator_associativearray#replaceplaceholders
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\Interpolator\AssociativeArray
  description: "### public **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_AssociativeArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_AssociativeArray.html)"
- name: Translate\Interpolator\IndexedArray
  id: api/phalcon_translate_interpolator_indexedarray
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Translate\\Interpolator\\IndexedArray**\n\n*implements* [*Phalcon\\Translate\\InterpolatorInterface*](phalcon_translate_interpolatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/interpolator/indexedarray.zep)\n\n## Methods\n\n### public **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_IndexedArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_IndexedArray.html)"
- name: Translate\Interpolator\IndexedArray::replacePlaceholders
  id: api/phalcon_translate_interpolator_indexedarray#replaceplaceholders
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Translate\Interpolator\IndexedArray
  description: "### public **replacePlaceholders** (*mixed* $translation, \\[*mixed* $placeholders\\])\n\nReplaces placeholders by the values passed\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_IndexedArray.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_IndexedArray.html)"
- name: 'Tutorial 1: Let’s learn by example'
  id: reference/tutorial
  summary: Throughout this first tutorial, we’ll walk you through the creation of an application with a simple registration form from the ground up
  description: "# Tutorial 1: Let’s learn by example\n\nThroughout this first tutorial, we’ll walk you through the creation of an application with a simple registration form from the ground up. We will also explain the basic aspects of the framework’s behavior. If you are interested in automatic code generation tools for Phalcon, you can check our [*developer tools*](tools).\n\nThe best way to use this guide is to follow each step in turn. You can get the complete code [here](https://github.com/phalcon/tutorial).\n\n## File structure\n\nPhalcon does not impose a particular file structure for application development. Due to the fact that it is loosely coupled, you can implement Phalcon powered applications with a file structure you are most comfortable using.\n\nFor the purposes of this tutorial and as a starting point, we suggest this very simple structure:\n\n``` php\ntutorial/\n  app/\n    controllers/\n    models/\n    views/\n  public/\n    css/\n    img/\n    js/\n```\n\nNote that you don’t need any “library” directory related to Phalcon. The framework is available in memory, ready for you to use.\n\nBefore continuing, please be sure you’ve successfully [*installed Phalcon*](install) and have setup either [*Nginx*](nginx), [*Apache*](apache) or [*Cherokee*](cherokee).\n\n## Bootstrap\n\nThe first file you need to create is the bootstrap file. This file is very important; since it serves as the base of your application, giving you control of all aspects of it. In this file you can implement initialization of components as well as application behavior.\n\nUltimately, it is responsible for doing 3 things:\n\n1.  Setting up the autoloader.\n2.  Configuring the Dependency Injector.\n3.  Handling the application request.\n\n### Autoloaders\n\nThe first part that we find in the bootstrap is registering an autoloader. This will be used to load classes as controllers and models in the application. For example we may register one or more directories of controllers increasing the flexibility of the application. In our example we have used the component [*Phalcon\\Loader*](../api/phalcon_loader).\n\nWith it, we can load classes using various strategies but for this example we have chosen to locate classes based on predefined directories:\n\n``` php\nuse Phalcon\\Loader;\n\n// ...\n\n$loader = new Loader();\n\n$loader->registerDirs(\n    [\n        \"../app/controllers/\",\n        \"../app/models/\",\n    ]\n);\n\n$loader->register();\n```\n\n### Dependency Management\n\nA very important concept that must be understood when working with Phalcon is its [*dependency injection container*](di). It may sound complex but is actually very simple and practical.\n\nA service container is a bag where we globally store the services that our application will use to function. Each time the framework requires a component, it will ask the container using an agreed upon name for the service. Since Phalcon is a highly decoupled framework, [*Phalcon\\Di*](../api/phalcon_di) acts as glue facilitating the integration of the different components achieving their work together in a transparent manner.\n\n``` php\nuse Phalcon\\Di\\FactoryDefault;\n\n// ...\n\n// Create a DI\n$di = new FactoryDefault();\n```\n\n[*Phalcon\\Di\\FactoryDefault*](../api/phalcon_di_factorydefault) is a variant of [*Phalcon\\Di*](../api/phalcon_di). To make things easier, it has registered most of the components that come with Phalcon. Thus we should not register them one by one. Later there will be no problem in replacing a factory service.\n\nIn the next part, we register the “view” service indicating the directory where the framework will find the views files. As the views do not correspond to classes, they cannot be charged with an autoloader.\n\nServices can be registered in several ways, but for our tutorial we’ll use an [anonymous function](http://php.net/manual/en/functions.anonymous.php):\n\n``` php\nuse Phalcon\\Mvc\\View;\n\n// ...\n\n// Setup the view component\n$di->set(\n    \"view\",\n    function () {\n        $view = new View();\n\n        $view->setViewsDir(\"../app/views/\");\n\n        return $view;\n    }\n);\n```\n\nNext we register a base URI so that all URIs generated by Phalcon include the “tutorial” folder we setup earlier. This will become important later on in this tutorial when we use the class [*Phalcon\\Tag*](../api/phalcon_tag) to generate a hyperlink.\n\n``` php\nuse Phalcon\\Mvc\\Url as UrlProvider;\n\n// ...\n\n// Setup a base URI so that all generated URIs include the \"tutorial\" folder\n$di->set(\n    \"url\",\n    function () {\n        $url = new UrlProvider();\n\n        $url->setBaseUri(\"/tutorial/\");\n\n        return $url;\n    }\n);\n```\n\n### Handling the application request\n\nIn the last part of this file, we find [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application). Its purpose is to initialize the request environment, route the incoming request, and then dispatch any discovered actions; it aggregates any responses and returns them when the process is complete.\n\n``` php\nuse Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($di);\n\n$response = $application->handle();\n\n$response->send();\n```\n\n### Putting everything together\n\nThe tutorial/public/index.php file should look like:\n\n``` php\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Url as UrlProvider;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n\n\n// Register an autoloader\n$loader = new Loader();\n\n$loader->registerDirs(\n    [\n        \"../app/controllers/\",\n        \"../app/models/\",\n    ]\n);\n\n$loader->register();\n\n\n\n// Create a DI\n$di = new FactoryDefault();\n\n// Setup the view component\n$di->set(\n    \"view\",\n    function () {\n        $view = new View();\n\n        $view->setViewsDir(\"../app/views/\");\n\n        return $view;\n    }\n);\n\n// Setup a base URI so that all generated URIs include the \"tutorial\" folder\n$di->set(\n    \"url\",\n    function () {\n        $url = new UrlProvider();\n\n        $url->setBaseUri(\"/tutorial/\");\n\n        return $url;\n    }\n);\n\n\n\n$application = new Application($di);\n\ntry {\n    // Handle the request\n    $response = $application->handle();\n\n    $response->send();\n} catch (\\Exception $e) {\n    echo \"Exception: \", $e->getMessage();\n}\n```\n\nAs you can see, the bootstrap file is very short and we do not need to include any additional files. We have set ourselves a flexible MVC application in less than 30 lines of code.\n\n## Creating a Controller\n\nBy default Phalcon will look for a controller named “Index”. It is the starting point when no controller or action has been passed in the request. The index controller (app/controllers/IndexController.php) looks like:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function indexAction()\n    {\n        echo \"<h1>Hello!</h1>\";\n    }\n}\n```\n\nThe controller classes must have the suffix “Controller” and controller actions must have the suffix “Action”. If you access the application from your browser, you should see something like this:\n\nCongratulations, you’re flying with Phalcon!\n\n## Sending output to a view\n\nSending output to the screen from the controller is at times necessary but not desirable as most purists in the MVC community will attest. Everything must be passed to the view that is responsible for outputting data on screen. Phalcon will look for a view with the same name as the last executed action inside a directory named as the last executed controller. In our case (app/views/index/index.phtml):\n\n``` php\necho \"<h1>Hello!</h1>\";\n```\n\nOur controller (app/controllers/IndexController.php) now has an empty action definition:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n```\n\nThe browser output should remain the same. The [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) static component is automatically created when the action execution has ended. Learn more about [*views usage here*](views).\n\n## Designing a sign up form\n\nNow we will change the index.phtml view file, to add a link to a new controller named “signup”. The goal is to allow users to sign up within our application.\n\n``` php\necho \"<h1>Hello!</h1>\";\n\necho PHP_EOL;\n\necho PHP_EOL;\n\necho $this->tag->linkTo(\n    \"signup\",\n    \"Sign Up Here!\"\n);\n```\n\nThe generated HTML code displays an anchor (“a”) HTML tag linking to a new controller:\n\n``` html\n<h1>Hello!</h1>\n\n<a href=\"/tutorial/signup\">Sign Up Here!</a>\n```\n\nTo generate the tag we use the class [*Phalcon\\Tag*](../api/phalcon_tag). This is a utility class that allows us to build HTML tags with framework conventions in mind. As this class is a also a service registered in the DI we use `$this->tag` to access it.\n\nA more detailed article regarding HTML generation can be [*found here*](tags).\n\nHere is the Signup controller (app/controllers/SignupController.php):\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n```\n\nThe empty index action gives the clean pass to a view with the form definition (app/views/signup/index.phtml):\n\n``` html\n<h2>\n    Sign up using this form\n</h2>\n\n<?php echo $this->tag->form(\"signup/register\"); ?>\n\n    <p>\n        <label for=\"name\">\n            Name\n        </label>\n\n        <?php echo $this->tag->textField(\"name\"); ?>\n    </p>\n\n    <p>\n        <label for=\"email\">\n            E-Mail\n        </label>\n\n        <?php echo $this->tag->textField(\"email\"); ?>\n    </p>\n\n\n\n    <p>\n        <?php echo $this->tag->submitButton(\"Register\"); ?>\n    </p>\n\n</form>\n```\n\nViewing the form in your browser will show something like this:\n\n[*Phalcon\\Tag*](../api/phalcon_tag) also provides useful methods to build form elements.\n\nThe `Phalcon\\Tag::form()` method receives only one parameter for instance, a relative URI to a controller/action in the application.\n\nBy clicking the “Send” button, you will notice an exception thrown from the framework, indicating that we are missing the “register” action in the controller “signup”. Our public/index.php file throws this exception:\n\n> Exception: Action “register” was not found on handler “signup”\n\nImplementing that method will remove the exception:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n\n    }\n}\n```\n\nIf you click the “Send” button again, you will see a blank page. The name and email input provided by the user should be stored in a database. According to MVC guidelines, database interactions must be done through models so as to ensure clean object-oriented code.\n\n## Creating a Model\n\nPhalcon brings the first ORM for PHP entirely written in C-language. Instead of increasing the complexity of development, it simplifies it.\n\nBefore creating our first model, we need to create a database table outside of Phalcon to map it to. A simple table to store registered users can be defined like this:\n\n``` sql\nCREATE TABLE `users` (\n    `id`    int(10)     unsigned NOT NULL AUTO_INCREMENT,\n    `name`  varchar(70)          NOT NULL,\n    `email` varchar(70)          NOT NULL,\n\n    PRIMARY KEY (`id`)\n);\n```\n\nA model should be located in the app/models directory (app/models/Users.php). The model maps to the “users” table:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nclass Users extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $email;\n}\n```\n\n## Setting a Database Connection\n\nIn order to be able to use a database connection and subsequently access data through our models, we need to specify it in our bootstrap process. A database connection is just another service that our application has that can be used for several components:\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n// Setup the database service\n$di->set(\n    \"db\",\n    function () {\n        return new DbAdapter(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"test_db\",\n            ]\n        );\n    }\n);\n```\n\nWith the correct database parameters, our models are ready to work and interact with the rest of the application.\n\n## Storing data using models\n\nReceiving data from the form and storing them in the table is the next step.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n        $user = new Users();\n\n        // Store and check for errors\n        $success = $user->save(\n            $this->request->getPost(),\n            [\n                \"name\",\n                \"email\",\n            ]\n        );\n\n        if ($success) {\n            echo \"Thanks for registering!\";\n        } else {\n            echo \"Sorry, the following problems were generated: \";\n\n            $messages = $user->getMessages();\n\n            foreach ($messages as $message) {\n                echo $message->getMessage(), \"<br/>\";\n            }\n        }\n\n        $this->view->disable();\n    }\n}\n```\n\nWe then instantiate the Users class, which corresponds to a User record. The class public properties map to the fields of the record in the users table. Setting the relevant values in the new record and calling `save()` will store the data in the database for that record. The `save()` method returns a boolean value which indicates whether the storing of the data was successful or not.\n\nThe ORM automatically escapes the input preventing SQL injections so we only need to pass the request to the `save()` method.\n\nAdditional validation happens automatically on fields that are defined as not null (required). If we don’t enter any of the required fields in the sign up form our screen will look like this:\n\n## Conclusion\n\nThis is a very simple tutorial and as you can see, it’s easy to start building an application using Phalcon. The fact that Phalcon is an extension on your web server has not interfered with the ease of development or features available. We invite you to continue reading the manual so that you can discover additional features offered by Phalcon!\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tutorial.html](https://docs.phalconphp.com/en/latest/reference/tutorial.html)"
- name: 'Tutorial 2: Introducing INVO'
  id: reference/tutorial-invo
  summary: In this second tutorial, we’ll explain a more complete application in order to gain a deeper understanding of developing with Phalcon
  description: "# Tutorial 2: Introducing INVO\n\nIn this second tutorial, we’ll explain a more complete application in order to gain a deeper understanding of developing with Phalcon. INVO is one of the sample applications we have created. INVO is a small website that allows users to generate invoices and do other tasks such as manage customers and products. You can clone its code from [Github](https://github.com/phalcon/invo).\n\nINVO was made with the client-side framework [Bootstrap](http://getbootstrap.com/). Although the application does not generate actual invoices, it still serves as an example showing how the framework works.\n\n## Project Structure\n\nOnce you clone the project in your document root you’ll see the following structure:\n\n``` bash\ninvo/\n    app/\n        config/\n        controllers/\n        forms/\n        library/\n        logs/\n        models/\n        plugins/\n        views/\n    cache/\n        volt/\n    docs/\n    public/\n        css/\n        fonts/\n        js/\n    schemas/\n```\n\nAs you know, Phalcon does not impose a particular file structure for application development. This project has a simple MVC structure and a public document root.\n\nOnce you open the application in your browser [http://localhost/invo](http://localhost/invo) you’ll see something like this:\n\nThe application is divided into two parts: a frontend and a backend. The frontend is a public area where visitors can receive information about INVO and request contact information. The backend is an administrative area where registered users can manage their products and customers.\n\n## Routing\n\nINVO uses the standard route that is built-in with the [*Router*](routing) component. These routes match the following pattern: /:controller/:action/:params. This means that the first part of a URI is the controller, the second the controller action and the rest are the parameters.\n\nThe following route /session/register executes the controller SessionController and its action registerAction.\n\n## Configuration\n\nINVO has a configuration file that sets general parameters in the application. This file is located at app/config/config.ini and is loaded in the very first lines of the application bootstrap (public/index.php):\n\n``` php\nuse Phalcon\\Config\\Adapter\\Ini as ConfigIni;\n\n// ...\n\n// Read the configuration\n$config = new ConfigIni(\n    APP_PATH . \"app/config/config.ini\"\n);\n```\n\n[*Phalcon\\Config*](config) allows us to manipulate the file in an object-oriented way. In this example, we’re using an ini file for configuration but Phalcon has [*adapters*](config) for other file types as well. The configuration file contains the following settings:\n\n``` ini\n[database]\nhost     = localhost\nusername = root\npassword = secret\nname     = invo\n\n[application]\ncontrollersDir = app/controllers/\nmodelsDir      = app/models/\nviewsDir       = app/views/\npluginsDir     = app/plugins/\nformsDir       = app/forms/\nlibraryDir     = app/library/\nbaseUri        = /invo/\n```\n\nPhalcon doesn’t have any pre-defined settings convention. Sections help us to organize the options as appropriate. In this file there are two sections to be used later: “application” and “database”.\n\n## Autoloaders\n\nThe second part that appears in the bootstrap file (public/index.php) is the autoloader:\n\n``` php\n/**\n * Auto-loader configuration\n */\nrequire APP_PATH . \"app/config/loader.php\";\n```\n\nThe autoloader registers a set of directories in which the application will look for the classes that it will eventually need.\n\n``` php\n$loader = new Phalcon\\Loader();\n\n// We're a registering a set of directories taken from the configuration file\n$loader->registerDirs(\n    [\n        APP_PATH . $config->application->controllersDir,\n        APP_PATH . $config->application->pluginsDir,\n        APP_PATH . $config->application->libraryDir,\n        APP_PATH . $config->application->modelsDir,\n        APP_PATH . $config->application->formsDir,\n    ]\n);\n\n$loader->register();\n```\n\nNote that the above code has registered the directories that were defined in the configuration file. The only directory that is not registered is the viewsDir because it contains HTML + PHP files but no classes. Also, note that we use a constant called APP_PATH. This constant is defined in the bootstrap (public/index.php) to allow us to have a reference to the root of our project:\n\n``` php\n// ...\n\ndefine(\n    \"APP_PATH\",\n    realpath(\"..\") . \"/\"\n);\n```\n\n## Registering services\n\nAnother file that is required in the bootstrap is (app/config/services.php). This file allows us to organize the services that INVO uses.\n\n``` php\n/**\n * Load application services\n */\nrequire APP_PATH . \"app/config/services.php\";\n```\n\nService registration is achieved as in the previous tutorial, making use of closures to lazily load the required components:\n\n``` php\nuse Phalcon\\Mvc\\Url as UrlProvider;\n\n// ...\n\n/**\n * The URL component is used to generate all kind of URLs in the application\n */\n$di->set(\n    \"url\",\n    function () use ($config) {\n        $url = new UrlProvider();\n\n        $url->setBaseUri(\n            $config->application->baseUri\n        );\n\n        return $url;\n    }\n);\n```\n\nWe will discuss this file in depth later.\n\n## Handling the Request\n\nIf we skip to the end of the file (public/index.php), the request is finally handled by [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application) which initializes and executes all that is necessary to make the application run:\n\n``` php\nuse Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($di);\n\n$response = $application->handle();\n\n$response->send();\n```\n\n## Dependency Injection\n\nIn the first line of the code block above, the Application class constructor is receiving the variable `$di` as an argument. What is the purpose of that variable? Phalcon is a highly decoupled framework so we need a component that acts as glue to make everything work together. That component is [*Phalcon\\Di*](../api/phalcon_di). It’s a service container that also performs dependency injection and service location, instantiating all components as they are needed by the application.\n\nThere are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions/closures. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.\n\nFor instance, in the following excerpt the session service is registered. The anonymous function will only be called when the application requires access to the session data:\n\n``` php\nuse Phalcon\\Session\\Adapter\\Files as Session;\n\n// ...\n\n// Start the session the first time a component requests the session service\n$di->set(\n    \"session\",\n    function () {\n        $session = new Session();\n\n        $session->start();\n\n        return $session;\n    }\n);\n```\n\nHere, we have the freedom to change the adapter, perform additional initialization and much more. Note that the service was registered using the name “session”. This is a convention that will allow the framework to identify the active service in the services container.\n\nA request can use many services and registering each service individually can be a cumbersome task. For that reason, the framework provides a variant of [*Phalcon\\Di*](../api/phalcon_di) called [*Phalcon\\Di\\FactoryDefault*](../api/phalcon_di_factorydefault) whose task is to register all services providing a full-stack framework.\n\n``` php\nuse Phalcon\\Di\\FactoryDefault;\n\n// ...\n\n// The FactoryDefault Dependency Injector automatically registers the\n// right services providing a full-stack framework\n$di = new FactoryDefault();\n```\n\nIt registers the majority of services with components provided by the framework as standard. If we need to override the definition of some service we could just set it again as we did above with “session” or “url”. This is the reason for the existence of the variable `$di`.\n\nIn next chapter, we will see how authentication and authorization is implemented in INVO.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tutorial-invo.html](https://docs.phalconphp.com/en/latest/reference/tutorial-invo.html)"
- name: 'Tutorial 3: Securing INVO'
  id: reference/tutorial-invo-2
  summary: In this chapter, we continue explaining how INVO is structured, we’ll talk about the implementation of authentication, authorization using events and plugins and an access control list (ACL) managed by Phalcon
  description: "# Tutorial 3: Securing INVO\n\nIn this chapter, we continue explaining how INVO is structured, we’ll talk about the implementation of authentication, authorization using events and plugins and an access control list (ACL) managed by Phalcon.\n\n## Log into the Application\n\nA “log in” facility will allow us to work on backend controllers. The separation between backend controllers and frontend ones is only logical. All controllers are located in the same directory (app/controllers/).\n\nTo enter the system, users must have a valid username and password. Users are stored in the table “users” in the database “invo”.\n\nBefore we can start a session, we need to configure the connection to the database in the application. A service called “db” is set up in the service container with the connection information. As with the autoloader, we are again taking parameters from the configuration file in order to configure a service:\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n// ...\n\n// Database connection is created based on parameters defined in the configuration file\n$di->set(\n    \"db\",\n    function () use ($config) {\n        return new DbAdapter(\n            [\n                \"host\"     => $config->database->host,\n                \"username\" => $config->database->username,\n                \"password\" => $config->database->password,\n                \"dbname\"   => $config->database->name,\n            ]\n        );\n    }\n);\n```\n\nHere, we return an instance of the MySQL connection adapter. If needed, you could do extra actions such as adding a logger, a profiler or change the adapter, setting it up as you want.\n\nThe following simple form (app/views/session/index.volt) requests the login information. We’ve removed some HTML code to make the example more concise:\n\n``` html\n{{ form(\"session/start\") }}\n    <fieldset>\n        <div>\n            <label for=\"email\">\n                Username/Email\n            </label>\n\n            <div>\n                {{ text_field(\"email\") }}\n            </div>\n        </div>\n\n        <div>\n            <label for=\"password\">\n                Password\n            </label>\n\n            <div>\n                {{ password_field(\"password\") }}\n            </div>\n        </div>\n\n\n\n        <div>\n            {{ submit_button(\"Login\") }}\n        </div>\n    </fieldset>\n{{ endForm() }}\n```\n\nInstead of using raw PHP as the previous tutorial, we started to use [*Volt*](volt). This is a built-in template engine inspired by [Jinja](http://jinja.pocoo.org/) providing a simpler and friendly syntax to create templates. It will not take too long before you become familiar with Volt.\n\nThe `SessionController::startAction` function (app/controllers/SessionController.php) has the task of validating the data entered in the form including checking for a valid user in the database:\n\n``` php\nclass SessionController extends ControllerBase\n{\n    // ...\n\n    private function _registerSession($user)\n    {\n        $this->session->set(\n            \"auth\",\n            [\n                \"id\"   => $user->id,\n                \"name\" => $user->name,\n            ]\n        );\n    }\n\n    /**\n     * This action authenticate and logs a user into the application\n     */\n    public function startAction()\n    {\n        if ($this->request->isPost()) {\n            // Get the data from the user\n            $email    = $this->request->getPost(\"email\");\n            $password = $this->request->getPost(\"password\");\n\n            // Find the user in the database\n            $user = Users::findFirst(\n                [\n                    \"(email = :email: OR username = :email:) AND password = :password: AND active = 'Y'\",\n                    \"bind\" => [\n                        \"email\"    => $email,\n                        \"password\" => sha1($password),\n                    ]\n                ]\n            );\n\n            if ($user !== false) {\n                $this->_registerSession($user);\n\n                $this->flash->success(\n                    \"Welcome \" . $user->name\n                );\n\n                // Forward to the 'invoices' controller if the user is valid\n                return $this->dispatcher->forward(\n                    [\n                        \"controller\" => \"invoices\",\n                        \"action\"     => \"index\",\n                    ]\n                );\n            }\n\n            $this->flash->error(\n                \"Wrong email/password\"\n            );\n        }\n\n        // Forward to the login form again\n        return $this->dispatcher->forward(\n            [\n                \"controller\" => \"session\",\n                \"action\"     => \"index\",\n            ]\n        );\n    }\n}\n```\n\nFor the sake of simplicity, we have used “[sha1](http://php.net/manual/en/function.sha1.php)” to store the password hashes in the database, however, this algorithm is not recommended in real applications, use “[*bcrypt*](security)” instead.\n\nNote that multiple public attributes are accessed in the controller like: `$this->flash`, `$this->request` or `$this->session`. These are services defined in the services container from earlier (app/config/services.php). When they’re accessed the first time, they are injected as part of the controller.\n\nThese services are “shared”, which means that we are always accessing the same instance regardless of the place where we invoke them.\n\nFor instance, here we invoke the “session” service and then we store the user identity in the variable “auth”:\n\n``` php\n$this->session->set(\n    \"auth\",\n    [\n        \"id\"   => $user->id,\n        \"name\" => $user->name,\n    ]\n);\n```\n\nAnother important aspect of this section is how the user is validated as a valid one, first we validate whether the request has been made using method POST:\n\n``` php\nif ($this->request->isPost()) {\n```\n\nThen, we receive the parameters from the form:\n\n``` php\n$email    = $this->request->getPost(\"email\");\n$password = $this->request->getPost(\"password\");\n```\n\nNow, we have to check if there is one user with the same username or email and password:\n\n``` php\n$user = Users::findFirst(\n    [\n        \"(email = :email: OR username = :email:) AND password = :password: AND active = 'Y'\",\n        \"bind\" => [\n            \"email\"    => $email,\n            \"password\" => sha1($password),\n        ]\n    ]\n);\n```\n\nNote, the use of ‘bound parameters’, placeholders :email: and :password: are placed where values should be, then the values are ‘bound’ using the parameter ‘bind’. This safely replaces the values for those columns without having the risk of a SQL injection.\n\nIf the user is valid we register it in session and forwards him/her to the dashboard:\n\n``` php\nif ($user !== false) {\n    $this->_registerSession($user);\n\n    $this->flash->success(\n        \"Welcome \" . $user->name\n    );\n\n    return $this->dispatcher->forward(\n        [\n            \"controller\" => \"invoices\",\n            \"action\"     => \"index\",\n        ]\n    );\n}\n```\n\nIf the user does not exist we forward the user back again to action where the form is displayed:\n\n``` php\nreturn $this->dispatcher->forward(\n    [\n        \"controller\" => \"session\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\n## Securing the Backend\n\nThe backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren’t logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:\n\nEvery time someone attempts to access any controller/action, the application verifies that the current role (in session) has access to it, otherwise it displays a message like the above and forwards the flow to the home page.\n\nNow let’s find out how the application accomplishes this. The first thing to know is that there is a component called [*Dispatcher*](dispatching). It is informed about the route found by the [*Routing*](routing) component. Then, it is responsible for loading the appropriate controller and execute the corresponding action method.\n\nNormally, the framework creates the Dispatcher automatically. In our case, we want to perform a verification before executing the required action, checking if the user has access to it or not. To achieve this, we have replaced the component by creating a function in the bootstrap:\n\n``` php\nuse Phalcon\\Mvc\\Dispatcher;\n\n// ...\n\n/**\n * MVC dispatcher\n */\n$di->set(\n    \"dispatcher\",\n    function () {\n        // ...\n\n        $dispatcher = new Dispatcher();\n\n        return $dispatcher;\n    }\n);\n```\n\nWe now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called [*EventsManager*](events) allows us to intercept the events produced by a component, routing the events to listeners.\n\n### Events Management\n\nAn [*EventsManager*](events) allows us to attach listeners to a particular type of event. The type that interests us now is “dispatch”. The following code filters all events produced by the Dispatcher:\n\n``` php\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di->set(\n    \"dispatcher\",\n    function () {\n        // Create an events manager\n        $eventsManager = new EventsManager();\n\n        // Listen for events produced in the dispatcher using the Security plugin\n        $eventsManager->attach(\n            \"dispatch:beforeExecuteRoute\",\n            new SecurityPlugin()\n        );\n\n        // Handle exceptions and not-found exceptions using NotFoundPlugin\n        $eventsManager->attach(\n            \"dispatch:beforeException\",\n            new NotFoundPlugin()\n        );\n\n        $dispatcher = new Dispatcher();\n\n        // Assign the events manager to the dispatcher\n        $dispatcher->setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n```\n\nWhen an event called “beforeExecuteRoute” is triggered the following plugin will be notified:\n\n``` php\n/**\n * Check if the user is allowed to access certain action using the SecurityPlugin\n */\n$eventsManager->attach(\n    \"dispatch:beforeExecuteRoute\",\n    new SecurityPlugin()\n);\n```\n\nWhen a “beforeException” is triggered then other plugin is notified:\n\n``` php\n/**\n * Handle exceptions and not-found exceptions using NotFoundPlugin\n */\n$eventsManager->attach(\n    \"dispatch:beforeException\",\n    new NotFoundPlugin()\n);\n```\n\nSecurityPlugin is a class located at (app/plugins/SecurityPlugin.php). This class implements the method “beforeExecuteRoute”. This is the same name as one of the events produced in the Dispatcher:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Plugin\n{\n    // ...\n\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // ...\n    }\n}\n```\n\nThe hook events always receive a first parameter that contains contextual information of the event produced (`$event`) and a second one that is the object that produced the event itself (`$dispatcher`). It is not mandatory that plugins extend the class [*Phalcon\\Mvc\\User\\Plugin*](../api/phalcon_mvc_user_plugin), but by doing this they gain easier access to the services available in the application.\n\nNow, we’re verifying the role in the current session, checking if the user has access using the ACL list. If the user does not have access we redirect to the home screen as explained before:\n\n``` php\nuse Phalcon\\Acl;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Plugin\n{\n    // ...\n\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // Check whether the \"auth\" variable exists in session to define the active role\n        $auth = $this->session->get(\"auth\");\n\n        if (!$auth) {\n            $role = \"Guests\";\n        } else {\n            $role = \"Users\";\n        }\n\n        // Take the active controller/action from the dispatcher\n        $controller = $dispatcher->getControllerName();\n        $action     = $dispatcher->getActionName();\n\n        // Obtain the ACL list\n        $acl = $this->getAcl();\n\n        // Check if the Role have access to the controller (resource)\n        $allowed = $acl->isAllowed($role, $controller, $action);\n\n        if (!$allowed) {\n            // If he doesn't have access forward him to the index controller\n            $this->flash->error(\n                \"You don't have access to this module\"\n            );\n\n            $dispatcher->forward(\n                [\n                    \"controller\" => \"index\",\n                    \"action\"     => \"index\",\n                ]\n            );\n\n            // Returning \"false\" we tell to the dispatcher to stop the current operation\n            return false;\n        }\n    }\n}\n```\n\n### Providing an ACL list\n\nIn the above example we have obtained the ACL using the method `$this->getAcl()`. This method is also implemented in the Plugin. Now we are going to explain step-by-step how we built the access control list (ACL):\n\n``` php\nuse Phalcon\\Acl;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n// Create the ACL\n$acl = new AclList();\n\n// The default action is DENY access\n$acl->setDefaultAction(\n    Acl::DENY\n);\n\n// Register two roles, Users is registered users\n// and guests are users without a defined identity\n$roles = [\n    \"users\"  => new Role(\"Users\"),\n    \"guests\" => new Role(\"Guests\"),\n];\n\nforeach ($roles as $role) {\n    $acl->addRole($role);\n}\n```\n\nNow, we define the resources for each area respectively. Controller names are resources and their actions are accesses for the resources:\n\n``` php\nuse Phalcon\\Acl\\Resource;\n\n// ...\n\n// Private area resources (backend)\n$privateResources = [\n    \"companies\"    => [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"products\"     => [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"producttypes\" => [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"invoices\"     => [\"index\", \"profile\"],\n];\n\nforeach ($privateResources as $resourceName => $actions) {\n    $acl->addResource(\n        new Resource($resourceName),\n        $actions\n    );\n}\n\n\n\n// Public area resources (frontend)\n$publicResources = [\n    \"index\"    => [\"index\"],\n    \"about\"    => [\"index\"],\n    \"register\" => [\"index\"],\n    \"errors\"   => [\"show404\", \"show500\"],\n    \"session\"  => [\"index\", \"register\", \"start\", \"end\"],\n    \"contact\"  => [\"index\", \"send\"],\n];\n\nforeach ($publicResources as $resourceName => $actions) {\n    $acl->addResource(\n        new Resource($resourceName),\n        $actions\n    );\n}\n```\n\nThe ACL now have knowledge of the existing controllers and their related actions. Role “Users” has access to all the resources of both frontend and backend. The role “Guests” only has access to the public area:\n\n``` php\n// Grant access to public areas to both users and guests\nforeach ($roles as $role) {\n    foreach ($publicResources as $resource => $actions) {\n        $acl->allow(\n            $role->getName(),\n            $resource,\n            \"*\"\n        );\n    }\n}\n\n// Grant access to private area only to role Users\nforeach ($privateResources as $resource => $actions) {\n    foreach ($actions as $action) {\n        $acl->allow(\n            \"Users\",\n            $resource,\n            $action\n        );\n    }\n}\n```\n\nHooray!, the ACL is now complete. In next chapter, we will see how a CRUD is implemented in Phalcon and how you can customize it.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tutorial-invo-2.html](https://docs.phalconphp.com/en/latest/reference/tutorial-invo-2.html)"
- name: 'Tutorial 4: Working with the CRUD'
  id: reference/tutorial-invo-3
  summary: Backends usually provide forms to allow users to manipulate data
  description: "# Tutorial 4: Working with the CRUD\n\nBackends usually provide forms to allow users to manipulate data. Continuing the explanation of INVO, we now address the creation of CRUDs, a very common task that Phalcon will facilitate you using forms, validations, paginators and more.\n\nMost options that manipulate data in INVO (companies, products and types of products) were developed using a basic and common [CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) (Create, Read, Update and Delete). Each CRUD contains the following files:\n\n``` bash\ninvo/\n    app/\n        controllers/\n            ProductsController.php\n        models/\n            Products.php\n        forms/\n            ProductsForm.php\n        views/\n            products/\n                edit.volt\n                index.volt\n                new.volt\n                search.volt\n```\n\nEach controller has the following actions:\n\n``` php\nclass ProductsController extends ControllerBase\n{\n    /**\n     * The start action, it shows the \"search\" view\n     */\n    public function indexAction()\n    {\n        // ...\n    }\n\n    /**\n     * Execute the \"search\" based on the criteria sent from the \"index\"\n     * Returning a paginator for the results\n     */\n    public function searchAction()\n    {\n        // ...\n    }\n\n    /**\n     * Shows the view to create a \"new\" product\n     */\n    public function newAction()\n    {\n        // ...\n    }\n\n    /**\n     * Shows the view to \"edit\" an existing product\n     */\n    public function editAction()\n    {\n        // ...\n    }\n\n    /**\n     * Creates a product based on the data entered in the \"new\" action\n     */\n    public function createAction()\n    {\n        // ...\n    }\n\n    /**\n     * Updates a product based on the data entered in the \"edit\" action\n     */\n    public function saveAction()\n    {\n        // ...\n    }\n\n    /**\n     * Deletes an existing product\n     */\n    public function deleteAction($id)\n    {\n        // ...\n    }\n}\n```\n\n## The Search Form\n\nEvery CRUD starts with a search form. This form shows each field that the table has (products), allowing the user to create a search criteria for any field. The “products” table has a relationship with the table “products_types”. In this case, we previously queried the records in this table in order to facilitate the search by that field:\n\n``` php\n/**\n * The start action, it shows the \"search\" view\n */\npublic function indexAction()\n{\n    $this->persistent->searchParams = null;\n\n    $this->view->form = new ProductsForm();\n}\n```\n\nAn instance of the ProductsForm form (app/forms/ProductsForm.php) is passed to the view. This form defines the fields that are visible to the user:\n\n``` php\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\nclass ProductsForm extends Form\n{\n    /**\n     * Initialize the products form\n     */\n    public function initialize($entity = null, $options = [])\n    {\n        if (!isset($options[\"edit\"])) {\n            $element = new Text(\"id\");\n\n            $element->setLabel(\"Id\");\n\n            $this->add(\n                $element\n            );\n        } else {\n            $this->add(\n                new Hidden(\"id\")\n            );\n        }\n\n\n\n        $name = new Text(\"name\");\n\n        $name->setLabel(\"Name\");\n\n        $name->setFilters(\n            [\n                \"striptags\",\n                \"string\",\n            ]\n        );\n\n        $name->addValidators(\n            [\n                new PresenceOf(\n                    [\n                        \"message\" => \"Name is required\",\n                    ]\n                )\n            ]\n        );\n\n        $this->add($name);\n\n\n\n        $type = new Select(\n            \"profilesId\",\n            ProductTypes::find(),\n            [\n                \"using\"      => [\n                    \"id\",\n                    \"name\",\n                ],\n                \"useEmpty\"   => true,\n                \"emptyText\"  => \"...\",\n                \"emptyValue\" => \"\",\n            ]\n        );\n\n        $this->add($type);\n\n\n\n        $price = new Text(\"price\");\n\n        $price->setLabel(\"Price\");\n\n        $price->setFilters(\n            [\n                \"float\",\n            ]\n        );\n\n        $price->addValidators(\n            [\n                new PresenceOf(\n                    [\n                        \"message\" => \"Price is required\",\n                    ]\n                ),\n                new Numericality(\n                    [\n                        \"message\" => \"Price is required\",\n                    ]\n                ),\n            ]\n        );\n\n        $this->add($price);\n    }\n}\n```\n\nThe form is declared using an object-oriented scheme based on the elements provided by the [*forms*](forms) component. Every element follows almost the same structure:\n\n``` php\n// Create the element\n$name = new Text(\"name\");\n\n// Set its label\n$name->setLabel(\"Name\");\n\n// Before validating the element apply these filters\n$name->setFilters(\n    [\n        \"striptags\",\n        \"string\",\n    ]\n);\n\n// Apply this validators\n$name->addValidators(\n    [\n        new PresenceOf(\n            [\n                \"message\" => \"Name is required\",\n            ]\n        )\n    ]\n);\n\n// Add the element to the form\n$this->add($name);\n```\n\nOther elements are also used in this form:\n\n``` php\n// Add a hidden input to the form\n$this->add(\n    new Hidden(\"id\")\n);\n\n// ...\n\n$productTypes = ProductTypes::find();\n\n// Add a HTML Select (list) to the form\n// and fill it with data from \"product_types\"\n$type = new Select(\n    \"profilesId\",\n    $productTypes,\n    [\n        \"using\"      => [\n            \"id\",\n            \"name\",\n        ],\n        \"useEmpty\"   => true,\n        \"emptyText\"  => \"...\",\n        \"emptyValue\" => \"\",\n    ]\n);\n```\n\nNote that `ProductTypes::find()` contains the data necessary to fill the SELECT tag using `Phalcon\\Tag::select()`. Once the form is passed to the view, it can be rendered and presented to the user:\n\n``` html\n{{ form(\"products/search\") }}\n\n    <h2>\n        Search products\n    </h2>\n\n    <fieldset>\n\n        {% for element in form %}\n            <div class=\"control-group\">\n                {{ element.label([\"class\": \"control-label\"]) }}\n\n                <div class=\"controls\">\n                    {{ element }}\n                </div>\n            </div>\n        {% endfor %}\n\n\n\n        <div class=\"control-group\">\n            {{ submit_button(\"Search\", \"class\": \"btn btn-primary\") }}\n        </div>\n\n    </fieldset>\n\n{{ endForm() }}\n```\n\nThis produces the following HTML:\n\n``` html\n<form action=\"/invo/products/search\" method=\"post\">\n\n    <h2>\n        Search products\n    </h2>\n\n    <fieldset>\n\n        <div class=\"control-group\">\n            <label for=\"id\" class=\"control-label\">Id</label>\n\n            <div class=\"controls\">\n                <input type=\"text\" id=\"id\" name=\"id\" />\n            </div>\n        </div>\n\n        <div class=\"control-group\">\n            <label for=\"name\" class=\"control-label\">Name</label>\n\n            <div class=\"controls\">\n                <input type=\"text\" id=\"name\" name=\"name\" />\n            </div>\n        </div>\n\n        <div class=\"control-group\">\n            <label for=\"profilesId\" class=\"control-label\">profilesId</label>\n\n            <div class=\"controls\">\n                <select id=\"profilesId\" name=\"profilesId\">\n                    <option value=\"\">...</option>\n                    <option value=\"1\">Vegetables</option>\n                    <option value=\"2\">Fruits</option>\n                </select>\n            </div>\n        </div>\n\n        <div class=\"control-group\">\n            <label for=\"price\" class=\"control-label\">Price</label>\n\n            <div class=\"controls\">\n                <input type=\"text\" id=\"price\" name=\"price\" />\n            </div>\n        </div>\n\n\n\n        <div class=\"control-group\">\n            <input type=\"submit\" value=\"Search\" class=\"btn btn-primary\" />\n        </div>\n\n    </fieldset>\n\n</form>\n```\n\nWhen the form is submitted, the “search” action is executed in the controller performing the search based on the data entered by the user.\n\n## Performing a Search\n\nThe “search” action has two behaviors. When accessed via POST, it performs a search based on the data sent from the form but when accessed via GET it moves the current page in the paginator. To differentiate HTTP methods, we check it using the [*Request*](request) component:\n\n``` php\n/**\n * Execute the \"search\" based on the criteria sent from the \"index\"\n * Returning a paginator for the results\n */\npublic function searchAction()\n{\n    if ($this->request->isPost()) {\n        // Create the query conditions\n    } else {\n        // Paginate using the existing conditions\n    }\n\n    // ...\n}\n```\n\nWith the help of [*Phalcon\\Mvc\\Model\\Criteria*](../api/phalcon_mvc_model_criteria), we can create the search conditions intelligently based on the data types and values sent from the form:\n\n``` php\n$query = Criteria::fromInput(\n    $this->di,\n    \"Products\",\n    $this->request->getPost()\n);\n```\n\nThis method verifies which values are different from “” (empty string) and null and takes them into account to create the search criteria:\n\n- If the field data type is text or similar (char, varchar, text, etc.) It uses an SQL “like” operator to filter the results.\n- If the data type is not text or similar, it’ll use the operator “=”.\n\nAdditionally, “Criteria” ignores all the `$_POST` variables that do not match any field in the table. Values are automatically escaped using “bound parameters”.\n\nNow, we store the produced parameters in the controller’s session bag:\n\n``` php\n$this->persistent->searchParams = $query->getParams();\n```\n\nA session bag, is a special attribute in a controller that persists between requests using the session service. When accessed, this attribute injects a [*Phalcon\\Session\\Bag*](../api/phalcon_session_bag) instance that is independent in each controller.\n\nThen, based on the built params we perform the query:\n\n``` php\n$products = Products::find($parameters);\n\nif (count($products) === 0) {\n    $this->flash->notice(\n        \"The search did not found any products\"\n    );\n\n    return $this->dispatcher->forward(\n        [\n            \"controller\" => \"products\",\n            \"action\"     => \"index\",\n        ]\n    );\n}\n```\n\nIf the search doesn’t return any product, we forward the user to the index action again. Let’s pretend the search returned results, then we create a paginator to navigate easily through them:\n\n``` php\nuse Phalcon\\Paginator\\Adapter\\Model as Paginator;\n\n// ...\n\n$paginator = new Paginator(\n    [\n        \"data\"  => $products,   // Data to paginate\n        \"limit\" => 5,           // Rows per page\n        \"page\"  => $numberPage, // Active page\n    ]\n);\n\n// Get active page in the paginator\n$page = $paginator->getPaginate();\n```\n\nFinally we pass the returned page to view:\n\n``` php\n$this->view->page = $page;\n```\n\nIn the view (app/views/products/search.volt), we traverse the results corresponding to the current page, showing every row in the current page to the user:\n\n``` html\n{% for product in page.items %}\n    {% if loop.first %}\n        <table>\n            <thead>\n                <tr>\n                    <th>Id</th>\n                    <th>Product Type</th>\n                    <th>Name</th>\n                    <th>Price</th>\n                    <th>Active</th>\n                </tr>\n            </thead>\n            <tbody>\n    {% endif %}\n\n    <tr>\n        <td>\n            {{ product.id }}\n        </td>\n\n        <td>\n            {{ product.getProductTypes().name }}\n        </td>\n\n        <td>\n            {{ product.name }}\n        </td>\n\n        <td>\n            {{ \"%.2f\"|format(product.price) }}\n        </td>\n\n        <td>\n            {{ product.getActiveDetail() }}\n        </td>\n\n        <td width=\"7%\">\n            {{ link_to(\"products/edit/\" ~ product.id, \"Edit\") }}\n        </td>\n\n        <td width=\"7%\">\n            {{ link_to(\"products/delete/\" ~ product.id, \"Delete\") }}\n        </td>\n    </tr>\n\n    {% if loop.last %}\n            </tbody>\n            <tbody>\n                <tr>\n                    <td colspan=\"7\">\n                        <div>\n                            {{ link_to(\"products/search\", \"First\") }}\n                            {{ link_to(\"products/search?page=\" ~ page.before, \"Previous\") }}\n                            {{ link_to(\"products/search?page=\" ~ page.next, \"Next\") }}\n                            {{ link_to(\"products/search?page=\" ~ page.last, \"Last\") }}\n                            <span class=\"help-inline\">{{ page.current }} of {{ page.total_pages }}</span>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    {% endif %}\n{% else %}\n    No products are recorded\n{% endfor %}\n```\n\nThere are many things in the above example that worth detailing. First of all, active items in the current page are traversed using a Volt’s ‘for’. Volt provides a simpler syntax for a PHP ‘foreach’.\n\n``` html\n{% for product in page.items %}\n```\n\nWhich in PHP is the same as:\n\n``` php\n<?php foreach ($page->items as $product) { ?>\n```\n\nThe whole ‘for’ block provides the following:\n\n``` html\n{% for product in page.items %}\n    {% if loop.first %}\n        Executed before the first product in the loop\n    {% endif %}\n\n    Executed for every product of page.items\n\n    {% if loop.last %}\n        Executed after the last product is loop\n    {% endif %}\n{% else %}\n    Executed if page.items does not have any products\n{% endfor %}\n```\n\nNow you can go back to the view and find out what every block is doing. Every field in “product” is printed accordingly:\n\n``` html\n<tr>\n    <td>\n        {{ product.id }}\n    </td>\n\n    <td>\n        {{ product.productTypes.name }}\n    </td>\n\n    <td>\n        {{ product.name }}\n    </td>\n\n    <td>\n        {{ \"%.2f\"|format(product.price) }}\n    </td>\n\n    <td>\n        {{ product.getActiveDetail() }}\n    </td>\n\n    <td width=\"7%\">\n        {{ link_to(\"products/edit/\" ~ product.id, \"Edit\") }}\n    </td>\n\n    <td width=\"7%\">\n        {{ link_to(\"products/delete/\" ~ product.id, \"Delete\") }}\n    </td>\n</tr>\n```\n\nAs we seen before using `product.id` is the same as in PHP as doing: `$product->id`, we made the same with `product.name` and so on. Other fields are rendered differently, for instance, let’s focus in `product.productTypes.name`. To understand this part, we have to check the Products model (app/models/Products.php):\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\n/**\n * Products\n */\nclass Products extends Model\n{\n    // ...\n\n    /**\n     * Products initializer\n     */\n    public function initialize()\n    {\n        $this->belongsTo(\n            \"product_types_id\",\n            \"ProductTypes\",\n            \"id\",\n            [\n                \"reusable\" => true,\n            ]\n        );\n    }\n\n    // ...\n}\n```\n\nA model can have a method called `initialize()`, this method is called once per request and it serves the ORM to initialize a model. In this case, “Products” is initialized by defining that this model has a one-to-many relationship to another model called “ProductTypes”.\n\n``` php\n$this->belongsTo(\n    \"product_types_id\",\n    \"ProductTypes\",\n    \"id\",\n    [\n        \"reusable\" => true,\n    ]\n);\n```\n\nWhich means, the local attribute “product_types_id” in “Products” has an one-to-many relation to the “ProductTypes” model in its attribute “id”. By defining this relationship we can access the name of the product type by using:\n\n``` html\n<td>{{ product.productTypes.name }}</td>\n```\n\nThe field “price” is printed by its formatted using a Volt filter:\n\n``` html\n<td>{{ \"%.2f\"|format(product.price) }}</td>\n```\n\nIn plain PHP, this would be:\n\n``` php\n<?php echo sprintf(\"%.2f\", $product->price) ?>\n```\n\nPrinting whether the product is active or not uses a helper implemented in the model:\n\n``` php\n<td>{{ product.getActiveDetail() }}</td>\n```\n\nThis method is defined in the model.\n\n## Creating and Updating Records\n\nNow let’s see how the CRUD creates and updates records. From the “new” and “edit” views, the data entered by the user is sent to the “create” and “save” actions that perform actions of “creating” and “updating” products, respectively.\n\nIn the creation case, we recover the data submitted and assign them to a new “Products” instance:\n\n``` php\n/**\n * Creates a product based on the data entered in the \"new\" action\n */\npublic function createAction()\n{\n    if (!$this->request->isPost()) {\n        return $this->dispatcher->forward(\n            [\n                \"controller\" => \"products\",\n                \"action\"     => \"index\",\n            ]\n        );\n    }\n\n    $form = new ProductsForm();\n\n    $product = new Products();\n\n    $product->id               = $this->request->getPost(\"id\", \"int\");\n    $product->product_types_id = $this->request->getPost(\"product_types_id\", \"int\");\n    $product->name             = $this->request->getPost(\"name\", \"striptags\");\n    $product->price            = $this->request->getPost(\"price\", \"double\");\n    $product->active           = $this->request->getPost(\"active\");\n\n    // ...\n}\n```\n\nRemember the filters we defined in the Products form? Data is filtered before being assigned to the object `$product`. This filtering is optional; the ORM also escapes the input data and performs additional casting according to the column types:\n\n``` php\n// ...\n\n$name = new Text(\"name\");\n\n$name->setLabel(\"Name\");\n\n// Filters for name\n$name->setFilters(\n    [\n        \"striptags\",\n        \"string\",\n    ]\n);\n\n// Validators for name\n$name->addValidators(\n    [\n        new PresenceOf(\n            [\n                \"message\" => \"Name is required\",\n            ]\n        )\n    ]\n);\n\n$this->add($name);\n```\n\nWhen saving, we’ll know whether the data conforms to the business rules and validations implemented in the form ProductsForm form (app/forms/ProductsForm.php):\n\n``` php\n// ...\n\n$form = new ProductsForm();\n\n$product = new Products();\n\n// Validate the input\n$data = $this->request->getPost();\n\nif (!$form->isValid($data, $product)) {\n    $messages = $form->getMessages();\n\n    foreach ($messages as $message) {\n        $this->flash->error($message);\n    }\n\n    return $this->dispatcher->forward(\n        [\n            \"controller\" => \"products\",\n            \"action\"     => \"new\",\n        ]\n    );\n}\n```\n\nFinally, if the form does not return any validation message we can save the product instance:\n\n``` php\n// ...\n\nif ($product->save() === false) {\n    $messages = $product->getMessages();\n\n    foreach ($messages as $message) {\n        $this->flash->error($message);\n    }\n\n    return $this->dispatcher->forward(\n        [\n            \"controller\" => \"products\",\n            \"action\"     => \"new\",\n        ]\n    );\n}\n\n$form->clear();\n\n$this->flash->success(\n    \"Product was created successfully\"\n);\n\nreturn $this->dispatcher->forward(\n    [\n        \"controller\" => \"products\",\n        \"action\"     => \"index\",\n    ]\n);\n```\n\nNow, in the case of updating a product, we must first present the user with the data that is currently in the edited record:\n\n``` php\n/**\n * Edits a product based on its id\n */\npublic function editAction($id)\n{\n    if (!$this->request->isPost()) {\n        $product = Products::findFirstById($id);\n\n        if (!$product) {\n            $this->flash->error(\n                \"Product was not found\"\n            );\n\n            return $this->dispatcher->forward(\n                [\n                    \"controller\" => \"products\",\n                    \"action\"     => \"index\",\n                ]\n            );\n        }\n\n        $this->view->form = new ProductsForm(\n            $product,\n            [\n                \"edit\" => true,\n            ]\n        );\n    }\n}\n```\n\nThe data found is bound to the form by passing the model as first parameter. Thanks to this, the user can change any value and then sent it back to the database through to the “save” action:\n\n``` php\n/**\n * Updates a product based on the data entered in the \"edit\" action\n */\npublic function saveAction()\n{\n    if (!$this->request->isPost()) {\n        return $this->dispatcher->forward(\n            [\n                \"controller\" => \"products\",\n                \"action\"     => \"index\",\n            ]\n        );\n    }\n\n    $id = $this->request->getPost(\"id\", \"int\");\n\n    $product = Products::findFirstById($id);\n\n    if (!$product) {\n        $this->flash->error(\n            \"Product does not exist\"\n        );\n\n        return $this->dispatcher->forward(\n            [\n                \"controller\" => \"products\",\n                \"action\"     => \"index\",\n            ]\n        );\n    }\n\n    $form = new ProductsForm();\n\n    $data = $this->request->getPost();\n\n    if (!$form->isValid($data, $product)) {\n        $messages = $form->getMessages();\n\n        foreach ($messages as $message) {\n            $this->flash->error($message);\n        }\n\n        return $this->dispatcher->forward(\n            [\n                \"controller\" => \"products\",\n                \"action\"     => \"new\",\n            ]\n        );\n    }\n\n    if ($product->save() === false) {\n        $messages = $product->getMessages();\n\n        foreach ($messages as $message) {\n            $this->flash->error($message);\n        }\n\n        return $this->dispatcher->forward(\n            [\n                \"controller\" => \"products\",\n                \"action\"     => \"new\",\n            ]\n        );\n    }\n\n    $form->clear();\n\n    $this->flash->success(\n        \"Product was updated successfully\"\n    );\n\n    return $this->dispatcher->forward(\n        [\n            \"controller\" => \"products\",\n            \"action\"     => \"index\",\n        ]\n    );\n}\n```\n\nWe have seen how Phalcon lets you create forms and bind data from a database in a structured way. In next chapter, we will see how to add custom HTML elements like a menu.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tutorial-invo-3.html](https://docs.phalconphp.com/en/latest/reference/tutorial-invo-3.html)"
- name: 'Tutorial 5: Customizing INVO'
  id: reference/tutorial-invo-4
  summary: To finish the detailed explanation of INVO we are going to explain how to customize INVO adding UI elements and changing the title according to the controller executed
  description: "# Tutorial 5: Customizing INVO\n\nTo finish the detailed explanation of INVO we are going to explain how to customize INVO adding UI elements and changing the title according to the controller executed.\n\n## User Components\n\nAll the UI elements and visual style of the application has been achieved mostly through [Bootstrap](http://getbootstrap.com/). Some elements, such as the navigation bar changes according to the state of the application. For example, in the upper right corner, the link “Log in / Sign Up” changes to “Log out” if a user is logged into the application.\n\nThis part of the application is implemented in the component “Elements” (app/library/Elements.php).\n\n``` php\nuse Phalcon\\Mvc\\User\\Component;\n\nclass Elements extends Component\n{\n    public function getMenu()\n    {\n        // ...\n    }\n\n    public function getTabs()\n    {\n        // ...\n    }\n}\n```\n\nThis class extends the [*Phalcon\\Mvc\\User\\Component*](../api/phalcon_mvc_user_component). It is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we are going to register our first user component in the services container:\n\n``` php\n// Register a user component\n$di->set(\n    \"elements\",\n    function () {\n        return new Elements();\n    }\n);\n```\n\nAs controllers, plugins or components within a view, this component also has access to the services registered in the container and by just accessing an attribute with the same name as a previously registered service:\n\n``` html\n<div class=\"navbar navbar-fixed-top\">\n    <div class=\"navbar-inner\">\n        <div class=\"container\">\n            <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\">\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n            </a>\n\n            <a class=\"brand\" href=\"#\">INVO</a>\n\n            {{ elements.getMenu() }}\n        </div>\n    </div>\n</div>\n\n<div class=\"container\">\n    {{ content() }}\n\n    <hr>\n\n    <footer>\n        <p>&copy; Company 2015</p>\n    </footer>\n</div>\n```\n\nThe important part is:\n\n``` html\n{{ elements.getMenu() }}\n```\n\n## Changing the Title Dynamically\n\nWhen you browse between one option and another will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller initializer:\n\n``` php\nclass ProductsController extends ControllerBase\n{\n    public function initialize()\n    {\n        // Set the document title\n        $this->tag->setTitle(\n            \"Manage your product types\"\n        );\n\n        parent::initialize();\n    }\n\n    // ...\n}\n```\n\nNote, that the method `parent::initialize()` is also called, it adds more data to the title:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ControllerBase extends Controller\n{\n    protected function initialize()\n    {\n        // Prepend the application name to the title\n        $this->tag->prependTitle(\n            \"INVO | \"\n        );\n    }\n\n    // ...\n}\n```\n\nFinally, the title is printed in the main view (app/views/index.volt):\n\n``` html\n<!DOCTYPE html>\n<html>\n    <head>\n        <?php echo $this->tag->getTitle(); ?>\n    </head>\n\n    <!-- ... -->\n</html>\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tutorial-invo-4.html](https://docs.phalconphp.com/en/latest/reference/tutorial-invo-4.html)"
- name: 'Tutorial 6: Vökuró'
  id: reference/tutorial-vokuro
  summary: Vökuró is another sample application you can use to learn more about Phalcon
  description: "# Tutorial 6: Vökuró\n\nVökuró is another sample application you can use to learn more about Phalcon. Vökuró is a small website that shows how to implement a security features and management of users and permissions. You can clone its code from [Github](https://github.com/phalcon/vokuro).\n\n## Project Structure\n\nOnce you clone the project in your document root you’ll see the following structure:\n\n``` bash\nvokuro/\n    app/\n        config/\n        controllers/\n        forms/\n        library/\n        models/\n        views/\n    cache/\n    public/\n        css/\n        img/\n    schemas/\n```\n\nThis project follows a quite similar structure to INVO. Once you open the application in your browser [http://localhost/vokuro](http://localhost/vokuro) you’ll see something like this:\n\nThe application is divided into two parts, a frontend, where visitors can sign up the service and a backend where administrative users can manage registered users. Both frontend and backend are combined in a single module.\n\n## Load Classes and Dependencies\n\nThis project uses [*Phalcon\\Loader*](../api/phalcon_loader) to load controllers, models, forms, etc. within the project and [composer](https://getcomposer.org/) to load the project’s dependencies. So, the first thing you have to do before execute Vökuró is install its dependencies via [composer](https://getcomposer.org/). Assuming you have it correctly installed, type the following command in the console:\n\n``` bash\ncd vokuro\ncomposer install\n```\n\nVökuró sends emails to confirm the sign up of registered users using Swift, the composer.json looks like:\n\n``` json\n{\n    \"require\" : {\n        \"php\" : \">=5.5.0\",\n        \"ext-phalcon\" : \">=3.0.0\",\n        \"swiftmailer/swiftmailer\" : \"^5.4\",\n        \"amazonwebservices/aws-sdk-for-php\" : \"~1.0\"\n    }\n}\n```\n\nNow, there is a file called app/config/loader.php where all the auto-loading stuff is set up. At the end of this file you can see that the composer autoloader is included enabling the application to autoload any of the classes in the downloaded dependencies:\n\n``` php\n// ...\n\n// Use composer autoloader to load vendor classes\nrequire_once BASE_PATH . \"/vendor/autoload.php\";\n```\n\nMoreover, Vökuró, unlike the INVO, utilizes namespaces for controllers and models which is the recommended practice to structure a project. This way the autoloader looks slightly different than the one we saw before (app/config/loader.php):\n\n``` php\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader->registerNamespaces(\n    [\n        \"Vokuro\\\\Models\"      => $config->application->modelsDir,\n        \"Vokuro\\\\Controllers\" => $config->application->controllersDir,\n        \"Vokuro\\\\Forms\"       => $config->application->formsDir,\n        \"Vokuro\"              => $config->application->libraryDir,\n    ]\n);\n\n$loader->register();\n\n// ...\n```\n\nInstead of using `registerDirectories()`, we use `registerNamespaces()`. Every namespace points to a directory defined in the configuration file (app/config/config.php). For instance the namespace Vokuro\\Controllers points to app/controllers so all the classes required by the application within this namespace requires it in its definition:\n\n``` php\nnamespace Vokuro\\Controllers;\n\nclass AboutController extends ControllerBase\n{\n    // ...\n}\n```\n\n## Sign Up\n\nFirst, let’s check how users are registered in Vökuró. When a user clicks the “Create an Account” button, the controller SessionController is invoked and the action “signup” is executed:\n\n``` php\nnamespace Vokuro\\Controllers;\n\nuse Vokuro\\Forms\\SignUpForm;\n\nclass RegisterController extends ControllerBase\n{\n    public function signupAction()\n    {\n        $form = new SignUpForm();\n\n        // ...\n\n        $this->view->form = $form;\n    }\n}\n```\n\nThis action simply pass a form instance of SignUpForm to the view, which itself is rendered to allow the user enter the login details:\n\n``` html\n{{ form(\"class\": \"form-search\") }}\n\n    <h2>\n        Sign Up\n    </h2>\n\n    <p>{{ form.label(\"name\") }}</p>\n    <p>\n        {{ form.render(\"name\") }}\n        {{ form.messages(\"name\") }}\n    </p>\n\n    <p>{{ form.label(\"email\") }}</p>\n    <p>\n        {{ form.render(\"email\") }}\n        {{ form.messages(\"email\") }}\n    </p>\n\n    <p>{{ form.label(\"password\") }}</p>\n    <p>\n        {{ form.render(\"password\") }}\n        {{ form.messages(\"password\") }}\n    </p>\n\n    <p>{{ form.label(\"confirmPassword\") }}</p>\n    <p>\n        {{ form.render(\"confirmPassword\") }}\n        {{ form.messages(\"confirmPassword\") }}\n    </p>\n\n    <p>\n        {{ form.render(\"terms\") }} {{ form.label(\"terms\") }}\n        {{ form.messages(\"terms\") }}\n    </p>\n\n    <p>{{ form.render(\"Sign Up\") }}</p>\n\n    {{ form.render(\"csrf\", [\"value\": security.getToken()]) }}\n    {{ form.messages(\"csrf\") }}\n\n    <hr>\n\n{{ endForm() }}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tutorial-vokuro.html](https://docs.phalconphp.com/en/latest/reference/tutorial-vokuro.html)"
- name: 'Tutorial 7: Creating a Simple REST API'
  id: reference/tutorial-rest
  summary: As the application is so simple, we will not implement any full MVC environment to develop it
  description: "# Tutorial 7: Creating a Simple REST API\n\nIn this tutorial, we will explain how to create a simple application that provides a [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) API using the different HTTP methods:\n\n- GET to retrieve and search data\n- POST to add data\n- PUT to update data\n- DELETE to delete data\n\n## Defining the API\n\nThe API consists of the following methods:\n\n| Method | URL                      | Action                                         |\n|--------|--------------------------|------------------------------------------------|\n| GET    | /api/robots              | Retrieves all robots                           |\n| GET    | /api/robots/search/Astro | Searches for robots with ‘Astro’ in their name |\n| GET    | /api/robots/2            | Retrieves robots based on primary key          |\n| POST   | /api/robots              | Adds a new robot                               |\n| PUT    | /api/robots/2            | Updates robots based on primary key            |\n| DELETE | /api/robots/2            | Deletes robots based on primary key            |\n\n## Creating the Application\n\nAs the application is so simple, we will not implement any full MVC environment to develop it. In this case, we will use a [*micro application*](micro) to meet our goal.\n\nThe following file structure is more than enough:\n\n``` php\nmy-rest-api/\n    models/\n        Robots.php\n    index.php\n    .htaccess\n```\n\nFirst, we need an .htaccess file that contains all the rules to rewrite the URIs to the index.php file, that is our application:\n\n``` apacheconf\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n</IfModule>\n```\n\nThen, in the index.php file we create the following:\n\n``` php\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Define the routes here\n\n$app->handle();\n```\n\nNow we will create the routes as we defined above:\n\n``` php\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Retrieves all robots\n$app->get(\n    \"/api/robots\",\n    function () {\n\n    }\n);\n\n// Searches for robots with $name in their name\n$app->get(\n    \"/api/robots/search/{name}\",\n    function ($name) {\n\n    }\n);\n\n// Retrieves robots based on primary key\n$app->get(\n    \"/api/robots/{id:[0-9]+}\",\n    function ($id) {\n\n    }\n);\n\n// Adds a new robot\n$app->post(\n    \"/api/robots\",\n    function () {\n\n    }\n);\n\n// Updates robots based on primary key\n$app->put(\n    \"/api/robots/{id:[0-9]+}\",\n    function () {\n\n    }\n);\n\n// Deletes robots based on primary key\n$app->delete(\n    \"/api/robots/{id:[0-9]+}\",\n    function () {\n\n    }\n);\n\n$app->handle();\n```\n\nEach route is defined with a method with the same name as the HTTP method, as first parameter we pass a route pattern, followed by a handler. In this case, the handler is an anonymous function. The following route: `'/api/robots/{id:[0-9]+}'`, by example, explicitly sets that the “id” parameter must have a numeric format.\n\nWhen a defined route matches the requested URI then the application executes the corresponding handler.\n\n## Creating a Model\n\nOur API provides information about ‘robots’, these data are stored in a database. The following model allows us to access that table in an object-oriented way. We have implemented some business rules using built-in validators and simple validations. Doing this will give us the peace of mind that saved data meet the requirements of our application:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\nuse Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\nuse Phalcon\\Mvc\\Model\\Validator\\InclusionIn;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        // Type must be: droid, mechanical or virtual\n        $this->validate(\n            new InclusionIn(\n                [\n                    \"field\"  => \"type\",\n                    \"domain\" => [\n                        \"droid\",\n                        \"mechanical\",\n                        \"virtual\",\n                    ]\n                )\n            )\n        );\n\n        // Robot name must be unique\n        $this->validate(\n            new Uniqueness(\n                [\n                    \"field\"   => \"name\",\n                    \"message\" => \"The robot name must be unique\",\n                ]\n            )\n        );\n\n        // Year cannot be less than zero\n        if ($this->year < 0) {\n            $this->appendMessage(\n                new Message(\"The year cannot be less than zero\")\n            );\n        }\n\n        // Check if any messages have been produced\n        if ($this->validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n```\n\nNow, we must set up a connection to be used by this model and load it within our app:\n\n``` php\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n// Use Loader() to autoload our model\n$loader = new Loader();\n\n$loader->registerNamespaces(\n    [\n        \"Store\\\\Toys\" => __DIR__ . \"/models/\",\n    ]\n);\n\n$loader->register();\n\n$di = new FactoryDefault();\n\n// Set up the database service\n$di->set(\n    \"db\",\n    function () {\n        return new PdoMysql(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"asimov\",\n                \"password\" => \"zeroth\",\n                \"dbname\"   => \"robotics\",\n            ]\n        );\n    }\n);\n\n// Create and bind the DI to the application\n$app = new Micro($di);\n```\n\n## Retrieving Data\n\nThe first “handler” that we will implement is which by method GET returns all available robots. Let’s use PHQL to perform this simple query returning the results as JSON:\n\n``` php\n// Retrieves all robots\n$app->get(\n    \"/api/robots\",\n    function () use ($app) {\n        $phql = \"SELECT * FROM Store\\\\Toys\\\\Robots ORDER BY name\";\n\n        $robots = $app->modelsManager->executeQuery($phql);\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                \"id\"   => $robot->id,\n                \"name\" => $robot->name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n```\n\n[*PHQL*](phql), allow us to write queries using a high-level, object-oriented SQL dialect that internally translates to the right SQL statements depending on the database system we are using. The clause “use” in the anonymous function allows us to pass some variables from the global to local scope easily.\n\nThe searching by name handler would look like:\n\n``` php\n// Searches for robots with $name in their name\n$app->get(\n    \"/api/robots/search/{name}\",\n    function ($name) use ($app) {\n        $phql = \"SELECT * FROM Store\\\\Toys\\\\Robots WHERE name LIKE :name: ORDER BY name\";\n\n        $robots = $app->modelsManager->executeQuery(\n            $phql,\n            [\n                \"name\" => \"%\" . $name . \"%\"\n            ]\n        );\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                \"id\"   => $robot->id,\n                \"name\" => $robot->name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n```\n\nSearching by the field “id” it’s quite similar, in this case, we’re also notifying if the robot was found or not:\n\n``` php\nuse Phalcon\\Http\\Response;\n\n// Retrieves robots based on primary key\n$app->get(\n    \"/api/robots/{id:[0-9]+}\",\n    function ($id) use ($app) {\n        $phql = \"SELECT * FROM Store\\\\Toys\\\\Robots WHERE id = :id:\";\n\n        $robot = $app->modelsManager->executeQuery(\n            $phql,\n            [\n                \"id\" => $id,\n            ]\n        )->getFirst();\n\n\n\n        // Create a response\n        $response = new Response();\n\n        if ($robot === false) {\n            $response->setJsonContent(\n                [\n                    \"status\" => \"NOT-FOUND\"\n                ]\n            );\n        } else {\n            $response->setJsonContent(\n                [\n                    \"status\" => \"FOUND\",\n                    \"data\"   => [\n                        \"id\"   => $robot->id,\n                        \"name\" => $robot->name\n                    ]\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n```\n\n## Inserting Data\n\nTaking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:\n\n``` php\nuse Phalcon\\Http\\Response;\n\n// Adds a new robot\n$app->post(\n    \"/api/robots\",\n    function () use ($app) {\n        $robot = $app->request->getJsonRawBody();\n\n        $phql = \"INSERT INTO Store\\\\Toys\\\\Robots (name, type, year) VALUES (:name:, :type:, :year:)\";\n\n        $status = $app->modelsManager->executeQuery(\n            $phql,\n            [\n                \"name\" => $robot->name,\n                \"type\" => $robot->type,\n                \"year\" => $robot->year,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        // Check if the insertion was successful\n        if ($status->success() === true) {\n            // Change the HTTP status\n            $response->setStatusCode(201, \"Created\");\n\n            $robot->id = $status->getModel()->id;\n\n            $response->setJsonContent(\n                [\n                    \"status\" => \"OK\",\n                    \"data\"   => $robot,\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response->setStatusCode(409, \"Conflict\");\n\n            // Send errors to the client\n            $errors = [];\n\n            foreach ($status->getMessages() as $message) {\n                $errors[] = $message->getMessage();\n            }\n\n            $response->setJsonContent(\n                [\n                    \"status\"   => \"ERROR\",\n                    \"messages\" => $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n```\n\n## Updating Data\n\nThe data update is similar to insertion. The “id” passed as parameter indicates what robot must be updated:\n\n``` php\nuse Phalcon\\Http\\Response;\n\n// Updates robots based on primary key\n$app->put(\n    \"/api/robots/{id:[0-9]+}\",\n    function ($id) use ($app) {\n        $robot = $app->request->getJsonRawBody();\n\n        $phql = \"UPDATE Store\\\\Toys\\\\Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:\";\n\n        $status = $app->modelsManager->executeQuery(\n            $phql,\n            [\n                \"id\"   => $id,\n                \"name\" => $robot->name,\n                \"type\" => $robot->type,\n                \"year\" => $robot->year,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        // Check if the insertion was successful\n        if ($status->success() === true) {\n            $response->setJsonContent(\n                [\n                    \"status\" => \"OK\"\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response->setStatusCode(409, \"Conflict\");\n\n            $errors = [];\n\n            foreach ($status->getMessages() as $message) {\n                $errors[] = $message->getMessage();\n            }\n\n            $response->setJsonContent(\n                [\n                    \"status\"   => \"ERROR\",\n                    \"messages\" => $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n```\n\n## Deleting Data\n\nThe data delete is similar to update. The “id” passed as parameter indicates what robot must be deleted:\n\n``` php\nuse Phalcon\\Http\\Response;\n\n// Deletes robots based on primary key\n$app->delete(\n    \"/api/robots/{id:[0-9]+}\",\n    function ($id) use ($app) {\n        $phql = \"DELETE FROM Store\\\\Toys\\\\Robots WHERE id = :id:\";\n\n        $status = $app->modelsManager->executeQuery(\n            $phql,\n            [\n                \"id\" => $id,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        if ($status->success() === true) {\n            $response->setJsonContent(\n                [\n                    \"status\" => \"OK\"\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response->setStatusCode(409, \"Conflict\");\n\n            $errors = [];\n\n            foreach ($status->getMessages() as $message) {\n                $errors[] = $message->getMessage();\n            }\n\n            $response->setJsonContent(\n                [\n                    \"status\"   => \"ERROR\",\n                    \"messages\" => $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n```\n\n## Testing our Application\n\nUsing [curl](http://en.wikipedia.org/wiki/CURL) we’ll test every route in our application verifying its proper operation.\n\nObtain all the robots:\n\n``` bash\ncurl -i -X GET http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:05:13 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 117\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"1\",\"name\":\"Robotina\"},{\"id\":\"2\",\"name\":\"Astro Boy\"},{\"id\":\"3\",\"name\":\"Terminator\"}]\n```\n\nSearch a robot by its name:\n\n``` bash\ncurl -i -X GET http://localhost/my-rest-api/api/robots/search/Astro\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:09:23 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 31\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"2\",\"name\":\"Astro Boy\"}]\n```\n\nObtain a robot by its id:\n\n``` bash\ncurl -i -X GET http://localhost/my-rest-api/api/robots/3\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:12:18 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 56\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"FOUND\",\"data\":{\"id\":\"3\",\"name\":\"Terminator\"}}\n```\n\nInsert a new robot:\n\n``` bash\ncurl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 201 Created\nDate: Tue, 21 Jul 2015 07:15:09 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 75\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\",\"data\":{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977,\"id\":\"4\"}}\n```\n\nTry to insert a new robot with the name of an existing robot:\n\n``` bash\ncurl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 07:18:28 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 63\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"The robot name must be unique\"]}\n```\n\nOr update a robot with an unknown type:\n\n``` bash\ncurl -i -X PUT -d '{\"name\":\"ASIMO\",\"type\":\"humanoid\",\"year\":2000}'\n    http://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 08:48:01 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 104\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"Value of field 'type' must be part of\n    list: droid, mechanical, virtual\"]}\n```\n\nFinally, delete a robot:\n\n``` bash\ncurl -i -X DELETE http://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 08:49:29 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 15\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\"}\n```\n\n## Conclusion\n\nAs we have seen, develop a RESTful API with Phalcon is easy. Later in the documentation we’ll explain in detail how to use micro applications and the [*PHQL*](phql) language.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tutorial-rest.html](https://docs.phalconphp.com/en/latest/reference/tutorial-rest.html)"
- name: Understanding How Phalcon Applications Work
  id: reference/applications-explained
  summary: Although the above implementations are a lot more verbose than the code needed while using Phalcon\Mvc\Application, it offers an alternative in bootstrapping your application
  description: "# Understanding How Phalcon Applications Work\n\nIf you’ve been following the [*tutorial*](tutorial) or have generated the code using [*Phalcon Devtools*](tools), you may recognize the following bootstrap file:\n\n``` php\nuse Phalcon\\Mvc\\Application;\n\n// Register autoloaders\n// ...\n\n// Register services\n// ...\n\n// Handle the request\n$application = new Application($di);\n\ntry {\n    $response = $application->handle();\n\n    $response->send();\n} catch (\\Exception $e) {\n    echo \"Exception: \", $e->getMessage();\n}\n```\n\nThe core of all the work of the controller occurs when handle() is invoked:\n\n``` php\n$response = $application->handle();\n```\n\n## Manual bootstrapping\n\nIf you do not wish to use [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application), the code above can be changed as follows:\n\n``` php\n// Get the 'router' service\n$router = $di[\"router\"];\n\n$router->handle();\n\n$view = $di[\"view\"];\n\n$dispatcher = $di[\"dispatcher\"];\n\n// Pass the processed router parameters to the dispatcher\n\n$dispatcher->setControllerName(\n    $router->getControllerName()\n);\n\n$dispatcher->setActionName(\n    $router->getActionName()\n);\n\n$dispatcher->setParams(\n    $router->getParams()\n);\n\n// Start the view\n$view->start();\n\n// Dispatch the request\n$dispatcher->dispatch();\n\n// Render the related views\n$view->render(\n    $dispatcher->getControllerName(),\n    $dispatcher->getActionName(),\n    $dispatcher->getParams()\n);\n\n// Finish the view\n$view->finish();\n\n$response = $di[\"response\"];\n\n// Pass the output of the view to the response\n$response->setContent(\n    $view->getContent()\n);\n\n// Send the response\n$response->send();\n```\n\nThe following replacement of [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application) lacks of a view component making it suitable for Rest APIs:\n\n``` php\nuse Phalcon\\Http\\ResponseInterface;\n\n// Get the 'router' service\n$router = $di[\"router\"];\n\n$router->handle();\n\n$dispatcher = $di[\"dispatcher\"];\n\n// Pass the processed router parameters to the dispatcher\n\n$dispatcher->setControllerName(\n    $router->getControllerName()\n);\n\n$dispatcher->setActionName(\n    $router->getActionName()\n);\n\n$dispatcher->setParams(\n    $router->getParams()\n);\n\n// Dispatch the request\n$dispatcher->dispatch();\n\n// Get the returned value by the last executed action\n$response = $dispatcher->getReturnedValue();\n\n// Check if the action returned is a 'response' object\nif ($response instanceof ResponseInterface) {\n    // Send the response\n    $response->send();\n}\n```\n\nYet another alternative that catch exceptions produced in the dispatcher forwarding to other actions consequently:\n\n``` php\nuse Phalcon\\Http\\ResponseInterface;\n\n// Get the 'router' service\n$router = $di[\"router\"];\n\n$router->handle();\n\n$dispatcher = $di[\"dispatcher\"];\n\n// Pass the processed router parameters to the dispatcher\n\n$dispatcher->setControllerName(\n    $router->getControllerName()\n);\n\n$dispatcher->setActionName(\n    $router->getActionName()\n);\n\n$dispatcher->setParams(\n    $router->getParams()\n);\n\ntry {\n    // Dispatch the request\n    $dispatcher->dispatch();\n} catch (Exception $e) {\n    // An exception has occurred, dispatch some controller/action aimed for that\n\n    // Pass the processed router parameters to the dispatcher\n    $dispatcher->setControllerName(\"errors\");\n    $dispatcher->setActionName(\"action503\");\n\n    // Dispatch the request\n    $dispatcher->dispatch();\n}\n\n// Get the returned value by the last executed action\n$response = $dispatcher->getReturnedValue();\n\n// Check if the action returned is a 'response' object\nif ($response instanceof ResponseInterface) {\n    // Send the response\n    $response->send();\n}\n```\n\nAlthough the above implementations are a lot more verbose than the code needed while using [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application), it offers an alternative in bootstrapping your application. Depending on your needs, you might want to have full control of what should be instantiated or not, or replace certain components with those of your own to extend the default functionality.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/applications-explained.html](https://docs.phalconphp.com/en/latest/reference/applications-explained.html)"
- name: Unit testing
  id: reference/unit-testing
  summary: Writing proper tests can assist in writing better software
  description: "# Unit testing\n\nWriting proper tests can assist in writing better software. If you set up proper test cases you can eliminate most functional bugs and better maintain your software.\n\n## Integrating PHPunit with phalcon\n\nIf you don’t already have phpunit installed, you can do it by using the following composer command:\n\n``` bash\ncomposer require phpunit/phpunit:^5.0\n```\n\nor by manually adding it to composer.json:\n\n``` json\n{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^5.0\"\n    }\n}\n```\n\nOnce phpunit is installed create a directory called ‘tests’ in your root directory:\n\n``` bash\napp/\npublic/\ntests/\n```\n\nNext, we need a ‘helper’ file to bootstrap the application for unit testing.\n\n## The PHPunit helper file\n\nA helper file is required to bootstrap the application for running the tests. We have prepared a sample file. Put the file in your tests/ directory as TestHelper.php.\n\n``` php\nuse Phalcon\\Di;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Loader;\n\nini_set(\"display_errors\", 1);\nerror_reporting(E_ALL);\n\ndefine(\"ROOT_PATH\", __DIR__);\n\nset_include_path(\n    ROOT_PATH . PATH_SEPARATOR . get_include_path()\n);\n\n// Required for phalcon/incubator\ninclude __DIR__ . \"/../vendor/autoload.php\";\n\n// Use the application autoloader to autoload the classes\n// Autoload the dependencies found in composer\n$loader = new Loader();\n\n$loader->registerDirs(\n    [\n        ROOT_PATH,\n    ]\n);\n\n$loader->register();\n\n$di = new FactoryDefault();\n\nDi::reset();\n\n// Add any needed services to the DI here\n\nDi::setDefault($di);\n```\n\nShould you need to test any components from your own library, add them to the autoloader or use the autoloader from your main application.\n\nTo help you build the unit tests, we made a few abstract classes you can use to bootstrap the unit tests themselves. These files exist in the Phalcon incubator @ [https://github.com/phalcon/incubator](https://github.com/phalcon/incubator).\n\nYou can use the incubator library by adding it as a dependency:\n\n``` bash\ncomposer require phalcon/incubator\n```\n\nor by manually adding it to composer.json:\n\n``` json\n{\n    \"require\": {\n        \"phalcon/incubator\": \"^3.0\"\n    }\n}\n```\n\nYou can also clone the repository using the repo link above.\n\n## PHPunit.xml file\n\nNow, create a phpunit file:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"./TestHelper.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         verbose=\"true\"\n         colors=\"false\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"true\">\n    <testsuite name=\"Phalcon - Testsuite\">\n        <directory>./</directory>\n    </testsuite>\n</phpunit>\n```\n\nModify the phpunit.xml to fit your needs and save it in tests/.\n\nThis will run any tests under the tests/ directory.\n\n## Sample unit test\n\nTo run any unit tests you need to define them. The autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.\n\nThis example does not contain a config file, most test cases however, do need one. You can add it to the DI to get the UnitTestCase file.\n\nFirst create a base unit test called UnitTestCase.php in your /tests directory:\n\n``` php\nuse Phalcon\\Di;\nuse Phalcon\\Test\\UnitTestCase as PhalconTestCase;\n\nabstract class UnitTestCase extends PhalconTestCase\n{\n    /**\n     * @var bool\n     */\n    private $_loaded = false;\n\n\n\n    public function setUp()\n    {\n        parent::setUp();\n\n        // Load any additional services that might be required during testing\n        $di = Di::getDefault();\n\n        // Get any DI components here. If you have a config, be sure to pass it to the parent\n\n        $this->setDi($di);\n\n        $this->_loaded = true;\n    }\n\n    /**\n     * Check if the test case is setup properly\n     *\n     * @throws \\PHPUnit_Framework_IncompleteTestError;\n     */\n    public function __destruct()\n    {\n        if (!$this->_loaded) {\n            throw new \\PHPUnit_Framework_IncompleteTestError(\n                \"Please run parent::setUp().\"\n            );\n        }\n    }\n}\n```\n\nIt’s always a good idea to separate your Unit tests in namespaces. For this test we will create the namespace ‘Test’. So create a file called testsTestUnitTest.php:\n\n``` php\nnamespace Test;\n\n/**\n * Class UnitTest\n */\nclass UnitTest extends \\UnitTestCase\n{\n    public function testTestCase()\n    {\n        $this->assertEquals(\n            \"works\",\n            \"works\",\n            \"This is OK\"\n        );\n\n        $this->assertEquals(\n            \"works\",\n            \"works1\",\n            \"This will fail\"\n        );\n    }\n}\n```\n\nNow when you execute ‘phpunit’ in your command-line from the tests directory you will get the following output:\n\n``` bash\n$ phpunit\nPHPUnit 3.7.23 by Sebastian Bergmann.\n\nConfiguration read from /private/var/www/tests/phpunit.xml\n\nTime: 3 ms, Memory: 3.25Mb\n\nThere was 1 failure:\n\n1) Test\\UnitTest::testTestCase\nThis will fail\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'works'\n+'works1'\n\n/private/var/www/tests/Test/UnitTest.php:25\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\nNow you can start building your unit tests. You can view a good guide here (we also recommend reading the PHPunit documentation if you’re not familiar with PHPunit):\n\n[http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/](http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/)\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/unit-testing.html](https://docs.phalconphp.com/en/latest/reference/unit-testing.html)"
- name: Using Controllers
  id: reference/controllers
  summary: Actions are methods on a controller that handle requests
  description: "# Using Controllers\n\nActions are methods on a controller that handle requests. By default all public methods on a controller map to actions and are accessible by a URL. Actions are responsible for interpreting the request and creating the response. Usually responses are in the form of a rendered view, but there are other ways to create responses as well.\n\nFor instance, when you access a URL like this: [http://localhost/blog/posts/show/2015/the-post-title](http://localhost/blog/posts/show/2015/the-post-title) Phalcon by default will decompose each part like this:\n\n|                       |                |\n|-----------------------|----------------|\n| **Phalcon Directory** | blog           |\n| **Controller**        | posts          |\n| **Action**            | show           |\n| **Parameter**         | 2015           |\n| **Parameter**         | the-post-title |\n\nIn this case, the PostsController will handle this request. There is no a special location to put controllers in an application, they could be loaded using [*autoloaders*](loader), so you’re free to organize your controllers as you need.\n\nControllers must have the suffix “Controller” while actions the suffix “Action”. A sample of a controller is as follows:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year, $postTitle)\n    {\n\n    }\n}\n```\n\nAdditional URI parameters are defined as action parameters, so that they can be easily accessed using local variables. A controller can optionally extend [*Phalcon\\Mvc\\Controller*](../api/phalcon_mvc_controller). By doing this, the controller can have easy access to the application services.\n\nParameters without a default value are handled as required. Setting optional values for parameters is done as usual in PHP:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year = 2015, $postTitle = \"some default title\")\n    {\n\n    }\n}\n```\n\nParameters are assigned in the same order as they were passed in the route. You can get an arbitrary parameter from its name in the following way:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        $year      = $this->dispatcher->getParam(\"year\");\n        $postTitle = $this->dispatcher->getParam(\"postTitle\");\n    }\n}\n```\n\n## Dispatch Loop\n\nThe dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the previous example only one action was executed. Now we’ll see how the `forward()` method can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller/action.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year, $postTitle)\n    {\n        $this->flash->error(\n            \"You don't have permission to access this area\"\n        );\n\n        // Forward flow to another action\n        $this->dispatcher->forward(\n            [\n                \"controller\" => \"users\",\n                \"action\"     => \"signin\",\n            ]\n        );\n    }\n}\n```\n\nIf users don’t have permission to access a certain action then they will be forwarded to the ‘signin’ action in the Users controller.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function signinAction()\n    {\n\n    }\n}\n```\n\nThere is no limit on the “forwards” you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view).\n\n## Initializing Controllers\n\n[*Phalcon\\Mvc\\Controller*](../api/phalcon_mvc_controller) offers the `initialize()` method, which is executed first, before any action is executed on a controller. The use of the `__construct()` method is not recommended.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public $settings;\n\n    public function initialize()\n    {\n        $this->settings = [\n            \"mySetting\" => \"value\",\n        ];\n    }\n\n    public function saveAction()\n    {\n        if ($this->settings[\"mySetting\"] === \"value\") {\n            // ...\n        }\n    }\n}\n```\n\n> The `initialize()` method is only called if the ‘beforeExecuteRoute’ event is executed with success. This avoid that application logic in the initializer cannot be executed without authorization.\n\nIf you want to execute some initialization logic just after the controller object is constructed then you can implement the `onConstruct()` method:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n```\n\n> Be aware that `onConstruct()` method is executed even if the action to be executed doesn’t exist in the controller or the user does not have access to it (according to custom control access provided by the developer).\n\n## Injecting Services\n\nIf a controller extends [*Phalcon\\Mvc\\Controller*](../api/phalcon_mvc_controller) then it has easy access to the service container in application. For example, if we have registered a service like this:\n\n``` php\nuse Phalcon\\Di;\n\n$di = new Di();\n\n$di->set(\n    \"storage\",\n    function () {\n        return new Storage(\n            \"/some/directory\"\n        );\n    },\n    true\n);\n```\n\nThen, we can access that service in several ways:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass FilesController extends Controller\n{\n    public function saveAction()\n    {\n        // Injecting the service by just accessing the property with the same name\n        $this->storage->save(\"/some/file\");\n\n        // Accessing the service from the DI\n        $this->di->get(\"storage\")->save(\"/some/file\");\n\n        // Another way to access the service using the magic getter\n        $this->di->getStorage()->save(\"/some/file\");\n\n        // Another way to access the service using the magic getter\n        $this->getDi()->getStorage()->save(\"/some/file\");\n\n        // Using the array-syntax\n        $this->di[\"storage\"]->save(\"/some/file\");\n    }\n}\n```\n\nIf you’re using Phalcon as a full-stack framework, you can read the services provided [*by default*](di) in the framework.\n\n## Request and Response\n\nAssuming that the framework provides a set of pre-registered services. We explain how to interact with the HTTP environment. The “request” service contains an instance of [*Phalcon\\Http\\Request*](../api/phalcon_http_request) and the “response” contains a [*Phalcon\\Http\\Response*](../api/phalcon_http_response) representing what is going to be sent back to the client.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Check if request has made with POST\n        if ($this->request->isPost()) {\n            // Access POST data\n            $customerName = $this->request->getPost(\"name\");\n            $customerBorn = $this->request->getPost(\"born\");\n        }\n    }\n}\n```\n\nThe response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function notFoundAction()\n    {\n        // Send a HTTP 404 response header\n        $this->response->setStatusCode(404, \"Not Found\");\n    }\n}\n```\n\nLearn more about the HTTP environment in their dedicated articles [*request*](request) and [*response*](response).\n\n## Session Data\n\nSessions help us maintain persistent data between requests. You can access a [*Phalcon\\Session\\Bag*](../api/phalcon_session_bag) from any controller to encapsulate data that needs to be persistent:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        $this->persistent->name = \"Michael\";\n    }\n\n    public function welcomeAction()\n    {\n        echo \"Welcome, \", $this->persistent->name;\n    }\n}\n```\n\n## Using Services as Controllers\n\nServices may act as controllers, controllers classes are always requested from the services container. Accordingly, any other class registered with its name can easily replace a controller:\n\n``` php\n// Register a controller as a service\n$di->set(\n    \"IndexController\",\n    function () {\n        $component = new Component();\n\n        return $component;\n    }\n);\n\n// Register a namespaced controller as a service\n$di->set(\n    \"Backend\\\\Controllers\\\\IndexController\",\n    function () {\n        $component = new Component();\n\n        return $component;\n    }\n);\n```\n\n## Events in Controllers\n\nControllers automatically act as listeners for [*dispatcher*](dispatching) events, implementing methods with those event names allow you to implement hook points before/after the actions are executed:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function beforeExecuteRoute($dispatcher)\n    {\n        // This is executed before every found action\n        if ($dispatcher->getActionName() === \"save\") {\n            $this->flash->error(\n                \"You don't have permission to save posts\"\n            );\n\n            $this->dispatcher->forward(\n                [\n                    \"controller\" => \"home\",\n                    \"action\"     => \"index\",\n                ]\n            );\n\n            return false;\n        }\n    }\n\n    public function afterExecuteRoute($dispatcher)\n    {\n        // Executed after every found action\n    }\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/controllers.html](https://docs.phalconphp.com/en/latest/reference/controllers.html)"
- name: Using PHP Built-in webserver
  id: reference/built-in
  summary: As of PHP 5.4.0, you can use PHP’s on built-in web server for development
  description: "# Using PHP Built-in webserver\n\nAs of PHP 5.4.0, you can use PHP’s on [built-in](http://php.net/manual/en/features.commandline.webserver.php) web server for development.\n\nTo start the server type:\n\n``` bash\nphp -S localhost:8000 -t /public\n```\n\nIf you want to rewrite the URIs to the index.php file use the following router file (.htrouter.php):\n\n``` php\nif (!file_exists(__DIR__ . '/' . $_SERVER['REQUEST_URI'])) {\n    $_GET['_url'] = $_SERVER['REQUEST_URI'];\n}\nreturn false;\n```\n\nand then start the server from the base project directory with:\n\n``` bash\nphp -S localhost:8000 -t /public .htrouter.php\n```\n\nThen point your browser to [http://localhost:8000/](http://localhost:8000/) to check if everything is working.\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/built-in.html](https://docs.phalconphp.com/en/latest/reference/built-in.html)"
- name: Using Views
  id: reference/views
  summary: Views represent the user interface of your application
  description: "# Using Views\n\nViews represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.\n\n[*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) and [*Phalcon\\Mvc\\View\\Simple*](../api/phalcon_mvc_view_simple) are responsible for the managing the view layer of your MVC application.\n\n## Integrating Views with Controllers\n\nPhalcon automatically passes the execution to the view component as soon as a particular controller has completed its cycle. The view component will look in the views folder for a folder named as the same name of the last controller executed and then for a file named as the last action executed. For instance, if a request is made to the URL *http://127.0.0.1/blog/posts/show/301*, Phalcon will parse the URL as follows:\n\n|                   |           |\n|-------------------|-----------|\n| Server Address    | 127.0.0.1 |\n| Phalcon Directory | blog      |\n| Controller        | posts     |\n| Action            | show      |\n| Parameter         | 301       |\n\nThe dispatcher will look for a “PostsController” and its action “showAction”. A simple controller file for this example:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($postId)\n    {\n        // Pass the $postId parameter to the view\n        $this->view->postId = $postId;\n    }\n}\n```\n\nThe `setVar()` method allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the `$postId` parameter to the respective view template.\n\n## Hierarchical Rendering\n\n[*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) supports a hierarchy of files and is the default component for view rendering in Phalcon. This hierarchy allows for common layout points (commonly used views), as well as controller named folders defining respective view templates.\n\nThis component uses by default PHP itself as the template engine, therefore views should have the .phtml extension. If the views directory is *app/views* then view component will find automatically for these 3 view files.\n\n| Name              | File                          | Description                                                                                                                                                                                                              |\n|-------------------|-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Action View       | app/views/posts/show.phtml    | This is the view related to the action. It only will be shown when the “show” action was executed.                                                                                                                       |\n| Controller Layout | app/views/layouts/posts.phtml | This is the view related to the controller. It only will be shown for every action executed within the controller “posts”. All the code implemented in the layout will be reused for all the actions in this controller. |\n| Main Layout       | app/views/index.phtml         | This is main action it will be shown for every controller or action executed within the application.                                                                                                                     |\n\nYou are not required to implement all of the files mentioned above. [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) will simply move to the next view level in the hierarchy of files. If all three view files are implemented, they will be processed as follows:\n\n``` html\n<!-- app/views/posts/show.phtml -->\n\n<h3>This is show view!</h3>\n\n<p>I have received the parameter <?php echo $postId; ?></p>\n```\n\n``` html\n<!-- app/views/layouts/posts.phtml -->\n\n<h2>This is the \"posts\" controller layout!</h2>\n\n<?php echo $this->getContent(); ?>\n```\n\n``` html\n<!-- app/views/index.phtml -->\n<html>\n    <head>\n        <title>Example</title>\n    </head>\n    <body>\n\n        <h1>This is main layout!</h1>\n\n        <?php echo $this->getContent(); ?>\n\n    </body>\n</html>\n```\n\nNote the lines where the method `$this->getContent()` was called. This method instructs [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) on where to inject the contents of the previous view executed in the hierarchy. For the example above, the output will be:\n\nThe generated HTML by the request will be:\n\n``` html\n<!-- app/views/index.phtml -->\n<html>\n    <head>\n        <title>Example</title>\n    </head>\n    <body>\n\n        <h1>This is main layout!</h1>\n\n        <!-- app/views/layouts/posts.phtml -->\n\n        <h2>This is the \"posts\" controller layout!</h2>\n\n        <!-- app/views/posts/show.phtml -->\n\n        <h3>This is show view!</h3>\n\n        <p>I have received the parameter 101</p>\n\n    </body>\n</html>\n```\n\n### Using Templates\n\nTemplates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.\n\nTemplates can be rendered before the layout (using `$this->view->setTemplateBefore()`) or they can be rendered after the layout (using `this->view->setTemplateAfter()`). In the following example the template (layouts/common.phtml) is rendered after the main layout (layouts/posts.phtml):\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function initialize()\n    {\n        $this->view->setTemplateAfter(\"common\");\n    }\n\n    public function lastAction()\n    {\n        $this->flash->notice(\n            \"These are the latest posts\"\n        );\n    }\n}\n```\n\n``` html\n<!-- app/views/index.phtml -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Blog's title</title>\n    </head>\n    <body>\n        <?php echo $this->getContent(); ?>\n    </body>\n</html>\n```\n\n``` html\n<!-- app/views/layouts/common.phtml -->\n\n<ul class=\"menu\">\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/articles\">Articles</a></li>\n    <li><a href=\"/contact\">Contact us</a></li>\n</ul>\n\n<div class=\"content\"><?php echo $this->getContent(); ?></div>\n```\n\n``` html\n<!-- app/views/layouts/posts.phtml -->\n\n<h1>Blog Title</h1>\n\n<?php echo $this->getContent(); ?>\n```\n\n``` html\n<!-- app/views/posts/last.phtml -->\n\n<article>\n    <h2>This is a title</h2>\n    <p>This is the post content</p>\n</article>\n\n<article>\n    <h2>This is another title</h2>\n    <p>This is another post content</p>\n</article>\n```\n\nThe final output will be the following:\n\n``` html\n<!-- app/views/index.phtml -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Blog's title</title>\n    </head>\n    <body>\n\n        <!-- app/views/layouts/common.phtml -->\n\n        <ul class=\"menu\">\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/articles\">Articles</a></li>\n            <li><a href=\"/contact\">Contact us</a></li>\n        </ul>\n\n        <div class=\"content\">\n\n            <!-- app/views/layouts/posts.phtml -->\n\n            <h1>Blog Title</h1>\n\n            <!-- app/views/posts/last.phtml -->\n\n            <article>\n                <h2>This is a title</h2>\n                <p>This is the post content</p>\n            </article>\n\n            <article>\n                <h2>This is another title</h2>\n                <p>This is another post content</p>\n            </article>\n\n        </div>\n\n    </body>\n</html>\n```\n\nIf we had used `$this->view->setTemplateBefore(\"common\")`, this would be the final output:\n\n``` html\n<!-- app/views/index.phtml -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Blog's title</title>\n    </head>\n    <body>\n\n        <!-- app/views/layouts/posts.phtml -->\n\n        <h1>Blog Title</h1>\n\n        <!-- app/views/layouts/common.phtml -->\n\n        <ul class=\"menu\">\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/articles\">Articles</a></li>\n            <li><a href=\"/contact\">Contact us</a></li>\n        </ul>\n\n        <div class=\"content\">\n\n            <!-- app/views/posts/last.phtml -->\n\n            <article>\n                <h2>This is a title</h2>\n                <p>This is the post content</p>\n            </article>\n\n            <article>\n                <h2>This is another title</h2>\n                <p>This is another post content</p>\n            </article>\n\n        </div>\n\n    </body>\n</html>\n```\n\n### Control Rendering Levels\n\nAs seen above, [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) supports a view hierarchy. You might need to control the level of rendering produced by the view component. The method `Phalcon\\Mvc\\View::setRenderLevel()` offers this functionality.\n\nThis method can be invoked from the controller or from a superior view layer to interfere with the rendering process.\n\n``` php\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n        // This is an Ajax response so it doesn't generate any kind of view\n        $this->view->setRenderLevel(\n            View::LEVEL_NO_RENDER\n        );\n\n        // ...\n    }\n\n    public function showAction($postId)\n    {\n        // Shows only the view related to the action\n        $this->view->setRenderLevel(\n            View::LEVEL_ACTION_VIEW\n        );\n    }\n}\n```\n\nThe available render levels are:\n\n| Class Constant        | Description                                                              | Order |\n|-----------------------|--------------------------------------------------------------------------|-------|\n| LEVEL_NO_RENDER       | Indicates to avoid generating any kind of presentation.                  |       |\n| LEVEL_ACTION_VIEW     | Generates the presentation to the view associated to the action.         | 1     |\n| LEVEL_BEFORE_TEMPLATE | Generates presentation templates prior to the controller layout.         | 2     |\n| LEVEL_LAYOUT          | Generates the presentation to the controller layout.                     | 3     |\n| LEVEL_AFTER_TEMPLATE  | Generates the presentation to the templates after the controller layout. | 4     |\n| LEVEL_MAIN_LAYOUT     | Generates the presentation to the main layout. File views/index.phtml    | 5     |\n\n### Disabling render levels\n\nYou can permanently or temporarily disable render levels. A level could be permanently disabled if it isn’t used at all in the whole application:\n\n``` php\nuse Phalcon\\Mvc\\View;\n\n$di->set(\n    \"view\",\n    function () {\n        $view = new View();\n\n        // Disable several levels\n        $view->disableLevel(\n            [\n                View::LEVEL_LAYOUT      => true,\n                View::LEVEL_MAIN_LAYOUT => true,\n            ]\n        );\n\n        return $view;\n    },\n    true\n);\n```\n\nOr disable temporarily in some part of the application:\n\n``` php\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n        $this->view->disableLevel(\n            View::LEVEL_MAIN_LAYOUT\n        );\n    }\n}\n```\n\n### Picking Views\n\nAs mentioned above, when [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) is managed by [*Phalcon\\Mvc\\Application*](../api/phalcon_mvc_application) the view rendered is the one related with the last controller and action executed. You could override this by using the `Phalcon\\Mvc\\View::pick()` method:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function listAction()\n    {\n        // Pick \"views-dir/products/search\" as view to render\n        $this->view->pick(\"products/search\");\n\n        // Pick \"views-dir/books/list\" as view to render\n        $this->view->pick(\n            [\n                \"books\",\n            ]\n        );\n\n        // Pick \"views-dir/products/search\" as view to render\n        $this->view->pick(\n            [\n                1 => \"search\",\n            ]\n        );\n    }\n}\n```\n\n### Disabling the view\n\nIf your controller doesn’t produce any output in the view (or not even have one) you may disable the view component avoiding unnecessary processing:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // Close session\n        // ...\n\n        // Disable the view to avoid rendering\n        $this->view->disable();\n    }\n}\n```\n\nAlternatively, you can return `false` to produce the same effect:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // ...\n\n        // Disable the view to avoid rendering\n        return false;\n    }\n}\n```\n\nYou can return a ‘response’ object to avoid disable the view manually:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // Close session\n        // ...\n\n        // A HTTP Redirect\n        return $this->response->redirect(\"index/index\");\n    }\n}\n```\n\n## Simple Rendering\n\n[*Phalcon\\Mvc\\View\\Simple*](../api/phalcon_mvc_view_simple) is an alternative component to [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view). It keeps most of the philosophy of [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) but lacks of a hierarchy of files which is, in fact, the main feature of its counterpart.\n\nThis component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as [*Volt*](volt) and others.\n\nThe default component must be replaced in the service container:\n\n``` php\nuse Phalcon\\Mvc\\View\\Simple as SimpleView;\n\n$di->set(\n    \"view\",\n    function () {\n        $view = new SimpleView();\n\n        $view->setViewsDir(\"../app/views/\");\n\n        return $view;\n    },\n    true\n);\n```\n\nAutomatic rendering must be disabled in [*Phalcon\\Mvc\\Application*](applications) (if needed):\n\n``` php\nuse Exception;\nuse Phalcon\\Mvc\\Application;\n\ntry {\n    $application = new Application($di);\n\n    $application->useImplicitView(false);\n\n    $response = $application->handle();\n\n    $response->send();\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\nTo render a view it’s necessary to call the render method explicitly indicating the relative path to the view you want to display:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends \\Controller\n{\n    public function indexAction()\n    {\n        // Render 'views-dir/index.phtml'\n        echo $this->view->render(\"index\");\n\n        // Render 'views-dir/posts/show.phtml'\n        echo $this->view->render(\"posts/show\");\n\n        // Render 'views-dir/index.phtml' passing variables\n        echo $this->view->render(\n            \"index\",\n            [\n                \"posts\" => Posts::find(),\n            ]\n        );\n\n        // Render 'views-dir/posts/show.phtml' passing variables\n        echo $this->view->render(\n            \"posts/show\",\n            [\n                \"posts\" => Posts::find(),\n            ]\n        );\n    }\n}\n```\n\nThis is different to [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) who’s `render()` method uses controllers and actions as parameters:\n\n``` php\n$params = [\n    \"posts\" => Posts::find(),\n];\n\n// Phalcon\\Mvc\\View\n$view = new \\Phalcon\\Mvc\\View();\necho $view->render(\"posts\", \"show\", $params);\n\n// Phalcon\\Mvc\\View\\Simple\n$simpleView = new \\Phalcon\\Mvc\\View\\Simple();\necho $simpleView->render(\"posts/show\", $params);\n```\n\n## Using Partials\n\nPartial templates are another way of breaking the rendering process into simpler more manageable chunks that can be reused by different parts of the application. With a partial, you can move the code for rendering a particular piece of a response to its own file.\n\nOne way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that your code can be more easily understood. For example, you might have a view that looks like this:\n\n``` html\n<div class=\"top\"><?php $this->partial(\"shared/ad_banner\"); ?></div>\n\n<div class=\"content\">\n    <h1>Robots</h1>\n\n    <p>Check out our specials for robots:</p>\n    ...\n</div>\n\n<div class=\"footer\"><?php $this->partial(\"shared/footer\"); ?></div>\n```\n\nThe `partial()` method does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:\n\n``` html\n<?php $this->partial(\"shared/ad_banner\", [\"id\" => $site->id, \"size\" => \"big\"]); ?>\n```\n\n## Transfer values from the controller to views\n\n[*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) is available in each controller using the view variable (`$this->view`). You can use that object to set variables directly to the view from a controller action by using the `setVar()` method.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        $user  = Users::findFirst();\n        $posts = $user->getPosts();\n\n        // Pass all the username and the posts to the views\n        $this->view->setVar(\"username\", $user->username);\n        $this->view->setVar(\"posts\",    $posts;\n\n        // Using the magic setter\n        $this->view->username = $user->username;\n        $this->view->posts    = $posts;\n\n        // Passing more than one variable at the same time\n        $this->view->setVars(\n            [\n                \"username\" => $user->username,\n                \"posts\"    => $posts,\n            ]\n        );\n    }\n}\n```\n\nA variable with the name of the first parameter of `setVar()` will be created in the view, ready to be used. The variable can be of any type, from a simple string, integer etc. variable to a more complex structure such as array, collection etc.\n\n``` html\n<h1>\n    {{ username }}'s Posts\n</h1>\n\n<div class=\"post\">\n<?php\n\n    foreach ($posts as $post) {\n        echo \"<h2>\", $post->title, \"</h2>\";\n    }\n\n?>\n</div>\n```\n\n## Caching View Fragments\n\nSometimes when you develop dynamic websites and some areas of them are not updated very often, the output is exactly the same between requests. [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) offers caching a part or the whole rendered output to increase performance.\n\n[*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) integrates with [*Phalcon\\Cache*](cache) to provide an easier way to cache output fragments. You could manually set the cache handler or set a global handler:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function showAction()\n    {\n        // Cache the view using the default settings\n        $this->view->cache(true);\n    }\n\n    public function showArticleAction()\n    {\n        // Cache this view for 1 hour\n        $this->view->cache(\n            [\n                \"lifetime\" => 3600,\n            ]\n        );\n    }\n\n    public function resumeAction()\n    {\n        // Cache this view for 1 day with the key \"resume-cache\"\n        $this->view->cache(\n            [\n                \"lifetime\" => 86400,\n                \"key\"      => \"resume-cache\",\n            ]\n        );\n    }\n\n    public function downloadAction()\n    {\n        // Passing a custom service\n        $this->view->cache(\n            [\n                \"service\"  => \"myCache\",\n                \"lifetime\" => 86400,\n                \"key\"      => \"resume-cache\",\n            ]\n        );\n    }\n}\n```\n\nWhen we do not define a key to the cache, the component automatically creates one using an [MD5](http://php.net/manual/en/function.md5.php) hash of the name of the controller and view currently being rendered in the format of “controller/view”. It is a good practice to define a key for each action so you can easily identify the cache associated with each view.\n\nWhen the View component needs to cache something it will request a cache service from the services container. The service name convention for this service is “viewCache”:\n\n``` php\nuse Phalcon\\Cache\\Frontend\\Output as OutputFrontend;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheBackend;\n\n// Set the views cache service\n$di->set(\n    \"viewCache\",\n    function () {\n        // Cache data for one day by default\n        $frontCache = new OutputFrontend(\n            [\n                \"lifetime\" => 86400,\n            ]\n        );\n\n        // Memcached connection settings\n        $cache = new MemcacheBackend(\n            $frontCache,\n            [\n                \"host\" => \"localhost\",\n                \"port\" => \"11211\",\n            ]\n        );\n\n        return $cache;\n    }\n);\n```\n\n> The frontend must always be [*Phalcon\\Cache\\Frontend\\Output*](../api/phalcon_cache_frontend_output) and the service ‘viewCache’ must be registered as always open (not shared) in the services container (DI).\n\nWhen using views, caching can be used to prevent controllers from needing to generate view data on each request.\n\nTo achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations/queries to display data in the view:\n\n``` html\nuse Phalcon\\Mvc\\Controller;\n\nclass DownloadController extends Controller\n{\n    public function indexAction()\n    {\n        // Check whether the cache with key \"downloads\" exists or has expired\n        if ($this->view->getCache()->exists(\"downloads\")) {\n            // Query the latest downloads\n            $latest = Downloads::find(\n                [\n                    \"order\" => \"created_at DESC\",\n                ]\n            );\n\n            $this->view->latest = $latest;\n        }\n\n        // Enable the cache with the same key \"downloads\"\n        $this->view->cache(\n            [\n                \"key\" => \"downloads\",\n            ]\n        );\n    }\n}\n```\n\nThe [PHP alternative site](https://github.com/phalcon/php-site) is an example of implementing the caching of fragments.\n\n## Template Engines\n\nTemplate Engines help designers to create views without the use of a complicated syntax. Phalcon includes a powerful and fast templating engine called [*Volt*](volt).\n\nAdditionally, [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) allows you to use other template engines instead of plain PHP or Volt.\n\nUsing a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application will use.\n\nIf an external template engine is used, [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) provides exactly the same view hierarchy and it’s still possible to access the API inside these templates with a little more effort.\n\nThis component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let’s see how to do that integration.\n\n### Creating your own Template Engine Adapter\n\nThere are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.\n\nA template engine adapter is a class that acts as bridge between [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) and the template engine itself. Usually it only needs two methods implemented: `__construct()` and `render()`. The first one receives the [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) instance that creates the engine adapter and the DI container used by the application.\n\nThe method `render()` accepts an absolute path to the view file and the view parameters set using `$this->view->setVar()`. You could read or require it when it’s necessary.\n\n``` php\nuse Phalcon\\DiInterface;\nuse Phalcon\\Mvc\\Engine;\n\nclass MyTemplateAdapter extends Engine\n{\n    /**\n     * Adapter constructor\n     *\n     * @param \\Phalcon\\Mvc\\View $view\n     * @param \\Phalcon\\Di $di\n     */\n    public function __construct($view, DiInterface $di)\n    {\n        // Initialize here the adapter\n        parent::__construct($view, $di);\n    }\n\n    /**\n     * Renders a view using the template engine\n     *\n     * @param string $path\n     * @param array $params\n     */\n    public function render($path, $params)\n    {\n        // Access view\n        $view = $this->_view;\n\n        // Access options\n        $options = $this->_options;\n\n        // Render the view\n        // ...\n    }\n}\n```\n\n### Changing the Template Engine\n\nYou can replace the template engine completely or use more than one template engine at the same time. The method `Phalcon\\Mvc\\View::registerEngines()` accepts an array containing data that define the template engines. The key of each engine is an extension that aids in distinguishing one from another. Template files related to the particular engine must have those extensions.\n\nThe order that the template engines are defined with `Phalcon\\Mvc\\View::registerEngines()` defines the relevance of execution. If [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) finds two views with the same name but different extensions, it will only render the first one.\n\nIf you want to register a template engine or a set of them for each request in the application. You could register it when the view service is created:\n\n``` php\nuse Phalcon\\Mvc\\View;\n\n// Setting up the view component\n$di->set(\n    \"view\",\n    function () {\n        $view = new View();\n\n        // A trailing directory separator is required\n        $view->setViewsDir(\"../app/views/\");\n\n        // Set the engine\n        $view->registerEngines(\n            [\n                \".my-html\" => \"MyTemplateAdapter\",\n            ]\n        );\n\n        // Using more than one template engine\n        $view->registerEngines(\n            [\n                \".my-html\" => \"MyTemplateAdapter\",\n                \".phtml\"   => \"Phalcon\\\\Mvc\\\\View\\\\Engine\\\\Php\",\n            ]\n        );\n\n        return $view;\n    },\n    true\n);\n```\n\nThere are adapters available for several template engines on the [Phalcon Incubator](https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine)\n\n## Injecting services in View\n\nEvery view executed is included inside a [*Phalcon\\Di\\Injectable*](../api/phalcon_di_injectable) instance, providing easy access to the application’s service container.\n\nThe following example shows how to write a jQuery [ajax request](http://api.jquery.com/jQuery.ajax/) using a URL with the framework conventions. The service “url” (usually [*Phalcon\\Mvc\\Url*](url)) is injected in the view by accessing a property with the same name:\n\n``` html\n<script type=\"text/javascript\">\n\n$.ajax({\n    url: \"<?php echo $this->url->get(\"cities/get\"); ?>\"\n})\n.done(function () {\n    alert(\"Done!\");\n});\n\n</script>\n```\n\n## Stand-Alone Component\n\nAll the components in Phalcon can be used as *glue* components individually because they are loosely coupled to each other:\n\n### Hierarchical Rendering\n\nUsing [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) in a stand-alone mode can be demonstrated below:\n\n``` php\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\n// A trailing directory separator is required\n$view->setViewsDir(\"../app/views/\");\n\n// Passing variables to the views, these will be created as local variables\n$view->setVar(\"someProducts\",       $products);\n$view->setVar(\"someFeatureEnabled\", true);\n\n// Start the output buffering\n$view->start();\n\n// Render all the view hierarchy related to the view products/list.phtml\n$view->render(\"products\", \"list\");\n\n// Finish the output buffering\n$view->finish();\n\necho $view->getContent();\n```\n\nA short syntax is also available:\n\n``` php\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\necho $view->getRender(\n    \"products\",\n    \"list\",\n    [\n        \"someProducts\"       => $products,\n        \"someFeatureEnabled\" => true,\n    ],\n    function ($view) {\n        // Set any extra options here\n\n        $view->setViewsDir(\"../app/views/\");\n\n        $view->setRenderLevel(\n            View::LEVEL_LAYOUT\n        );\n    }\n);\n```\n\n### Simple Rendering\n\nUsing [*Phalcon\\Mvc\\View\\Simple*](../api/phalcon_mvc_view_simple) in a stand-alone mode can be demonstrated below:\n\n``` php\nuse Phalcon\\Mvc\\View\\Simple as SimpleView;\n\n$view = new SimpleView();\n\n// A trailing directory separator is required\n$view->setViewsDir(\"../app/views/\");\n\n// Render a view and return its contents as a string\necho $view->render(\"templates/welcomeMail\");\n\n// Render a view passing parameters\necho $view->render(\n    \"templates/welcomeMail\",\n    [\n        \"email\"   => $email,\n        \"content\" => $content,\n    ]\n);\n```\n\n## View Events\n\n[*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) and [*Phalcon\\Mvc\\View\\Simple*](../api/phalcon_mvc_view_simple) are able to send events to an [*EventsManager*](events) if it is present. Events are triggered using the type “view”. Some events when returning boolean false could stop the active operation. The following events are supported:\n\n| Event Name       | Triggered                                     | Can stop operation? |\n|------------------|-----------------------------------------------|---------------------|\n| beforeRender     | Triggered before starting the render process  | Yes                 |\n| beforeRenderView | Triggered before rendering an existing view   | Yes                 |\n| afterRenderView  | Triggered after rendering an existing view    | No                  |\n| afterRender      | Triggered after completing the render process | No                  |\n| notFoundView     | Triggered when a view was not found           | No                  |\n\nThe following example demonstrates how to attach listeners to this component:\n\n``` php\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\View;\n\n$di->set(\n    \"view\",\n    function () {\n        // Create an events manager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener for type \"view\"\n        $eventsManager->attach(\n            \"view\",\n            function (Event $event, $view) {\n                echo $event->getType(), \" - \", $view->getActiveRenderPath(), PHP_EOL;\n            }\n        );\n\n        $view = new View();\n\n        $view->setViewsDir(\"../app/views/\");\n\n        // Bind the eventsManager to the view component\n        $view->setEventsManager($eventsManager);\n\n        return $view;\n    },\n    true\n);\n```\n\nThe following example shows how to create a plugin that clean/repair the HTML produced by the render process using [Tidy](http://www.php.net/manual/en/book.tidy.php):\n\n``` php\nuse Phalcon\\Events\\Event;\n\nclass TidyPlugin\n{\n    public function afterRender(Event $event, $view)\n    {\n        $tidyConfig = [\n            \"clean\"          => true,\n            \"output-xhtml\"   => true,\n            \"show-body-only\" => true,\n            \"wrap\"           => 0,\n        ];\n\n        $tidy = tidy_parse_string(\n            $view->getContent(),\n            $tidyConfig,\n            \"UTF8\"\n        );\n\n        $tidy->cleanRepair();\n\n        $view->setContent(\n            (string) $tidy\n        );\n    }\n}\n\n// Attach the plugin as a listener\n$eventsManager->attach(\n    \"view:afterRender\",\n    new TidyPlugin()\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/views.html](https://docs.phalconphp.com/en/latest/reference/views.html)"
- name: Validating Models
  id: reference/model-validation
  summary: Phalcon\Mvc\Model provides several events to validate data and implement business rules
  description: "# Validating Models\n\n## Validating Data Integrity\n\n[*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) provides several events to validate data and implement business rules. The special “validation” event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.\n\nThe following example shows how to use it:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator->add(\n            \"type\",\n            new InclusionIn(\n                [\n                    \"domain\" => [\n                        \"Mechanical\",\n                        \"Virtual\",\n                    ]\n                ]\n            )\n        );\n\n        $validator->add(\n            \"name\",\n            new Uniqueness(\n                [\n                    \"message\" => \"The robot name must be unique\",\n                ]\n            )\n        );\n\n        return $this->validate($validator);\n    }\n}\n```\n\nThe above example performs a validation using the built-in validator “InclusionIn”. It checks the value of the field “type” in a domain list. If the value is not included in the method then the validator will fail and return false.\n\n> For more information on validators, see the [*Validation documentation*](validation).\n\nThe idea of creating validators is make them reusable between several models. A validator can also be as simple as:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        if ($this->type === \"Old\") {\n            $message = new Message(\n                \"Sorry, old robots are not allowed anymore\",\n                \"type\",\n                \"MyType\"\n            );\n\n            $this->appendMessage($message);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\n## Validation Messages\n\n[*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.\n\nEach message is an instance of [*Phalcon\\Mvc\\Model\\Message*](../api/phalcon_mvc_model_message) and the set of messages generated can be retrieved with the `getMessages()` method. Each message provides extended information like the field name that generated the message or the message type:\n\n``` php\nif ($robot->save() === false) {\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo \"Message: \", $message->getMessage();\n        echo \"Field: \", $message->getField();\n        echo \"Type: \", $message->getType();\n    }\n}\n```\n\n[*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) can generate the following types of validation messages:\n\n| Type                 | Description                                                                                                                        |\n|----------------------|------------------------------------------------------------------------------------------------------------------------------------|\n| PresenceOf           | Generated when a field with a non-null attribute on the database is trying to insert/update a null value                           |\n| ConstraintViolation  | Generated when a field part of a virtual foreign key is trying to insert/update a value that doesn’t exist in the referenced model |\n| InvalidValue         | Generated when a validator failed because of an invalid value                                                                      |\n| InvalidCreateAttempt | Produced when a record is attempted to be created but it already exists                                                            |\n| InvalidUpdateAttempt | Produced when a record is attempted to be updated but it doesn’t exist                                                             |\n\nThe `getMessages()` method can be overridden in a model to replace/translate the default messages generated automatically by the ORM:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getMessages()\n    {\n        $messages = [];\n\n        foreach (parent::getMessages() as $message) {\n            switch ($message->getType()) {\n                case \"InvalidCreateAttempt\":\n                    $messages[] = \"The record cannot be created because it already exists\";\n                    break;\n\n                case \"InvalidUpdateAttempt\":\n                    $messages[] = \"The record cannot be updated because it doesn't exist\";\n                    break;\n\n                case \"PresenceOf\":\n                    $messages[] = \"The field \" . $message->getField() . \" is mandatory\";\n                    break;\n            }\n        }\n\n        return $messages;\n    }\n}\n```\n\n## Validation Failed Events\n\nAnother type of events are available when the data validation process finds any inconsistency:\n\n| Operation                | Name              | Explanation                                                        |\n|--------------------------|-------------------|--------------------------------------------------------------------|\n| Insert or Update         | notSaved          | Triggered when the INSERT or UPDATE operation fails for any reason |\n| Insert, Delete or Update | onValidationFails | Triggered when any data manipulation operation fails               |\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/model-validation.html](https://docs.phalconphp.com/en/latest/reference/model-validation.html)"
- name: Validation
  id: api/phalcon_validation
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation**\n\n*extends* abstract class [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\n*implements* [*Phalcon\\Events\\EventsAwareInterface*](phalcon_events_eventsawareinterface), [*Phalcon\\Di\\InjectionAwareInterface*](phalcon_di_injectionawareinterface), [*Phalcon\\ValidationInterface*](phalcon_validationinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation.zep)\n\nAllows to validate data using custom or built-in validators\n\n## Methods\n\n### public **getData** ()\n\n...\n\n### public **setValidators** (*mixed* $validators)\n\n...\n\n### public **\\_\\_construct** (\\[*array* $validators\\])\n\nPhalcon\\Validation constructor\n\n### public [*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) **validate** (\\[*array* \\| *object* $data\\], \\[*object* $entity\\])\n\nValidate a set of data according to a set of rules\n\n### public **add** (*mixed* $field, [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\nAdds a validator to a field\n\n### public **rule** (*mixed* $field, [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\nAlias of add method\n\n### public **rules** (*mixed* $field, *array* $validators)\n\nAdds the validators to a field\n\n### public [*Phalcon\\Validation*](phalcon_validation) **setFilters** (*string* $field, *array* \\| *string* $filters)\n\nAdds filters to the field\n\n### public *mixed* **getFilters** (\\[*string* $field\\])\n\nReturns all the filters or a specific one\n\n### public **getValidators** ()\n\nReturns the validators added to the validation\n\n### public **setEntity** (*object* $entity)\n\nSets the bound entity\n\n### public *object* **getEntity** ()\n\nReturns the bound entity\n\n### public **setDefaultMessages** (\\[*array* $messages\\])\n\nAdds default messages to validators\n\n### public **getDefaultMessage** (*mixed* $type)\n\nGet default message for validator type\n\n### public **getMessages** ()\n\nReturns the registered validators\n\n### public **setLabels** (*array* $labels)\n\nAdds labels for fields\n\n### public *string* **getLabel** (*string* $field)\n\nGet label for field\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message)\n\nAppends a message to the messages list\n\n### public [*Phalcon\\Validation*](phalcon_validation) **bind** (*object* $entity, *array* \\| *object* $data)\n\nAssigns the data to an entity The entity is used to obtain the validation values\n\n### public *mixed* **getValue** (*string* $field)\n\nGets the a value to validate in the array/object data source\n\n### protected **preChecking** (*mixed* $field, [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\nInternal validations, if it returns true, then skip the current validator\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html)"
- name: Validation
  id: reference/validation
  summary: Phalcon\Validation is an independent validation component that validates an arbitrary set of data
  description: "# Validation\n\n[*Phalcon\\Validation*](../api/phalcon_validation) is an independent validation component that validates an arbitrary set of data. This component can be used to implement validation rules on data objects that do not belong to a model or collection.\n\nThe following example shows its basic usage:\n\n``` php\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation->add(\n    \"name\",\n    new PresenceOf(\n        [\n            \"message\" => \"The name is required\",\n        ]\n    )\n);\n\n$validation->add(\n    \"email\",\n    new PresenceOf(\n        [\n            \"message\" => \"The e-mail is required\",\n        ]\n    )\n);\n\n$validation->add(\n    \"email\",\n    new Email(\n        [\n            \"message\" => \"The e-mail is not valid\",\n        ]\n    )\n);\n\n$messages = $validation->validate($_POST);\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, \"<br>\";\n    }\n}\n```\n\nThe loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.\n\n## Initializing Validation\n\nValidation chains can be initialized in a direct manner by just adding validators to the [*Phalcon\\Validation*](../api/phalcon_validation) object. You can put your validations in a separate file for better re-use code and organization:\n\n``` php\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\nclass MyValidation extends Validation\n{\n    public function initialize()\n    {\n        $this->add(\n            \"name\",\n            new PresenceOf(\n                [\n                    \"message\" => \"The name is required\",\n                ]\n            )\n        );\n\n        $this->add(\n            \"email\",\n            new PresenceOf(\n                [\n                    \"message\" => \"The e-mail is required\",\n                ]\n            )\n        );\n\n        $this->add(\n            \"email\",\n            new Email(\n                [\n                    \"message\" => \"The e-mail is not valid\",\n                ]\n            )\n        );\n    }\n}\n```\n\nThen initialize and use your own validator:\n\n``` php\n$validation = new MyValidation();\n\n$messages = $validation->validate($_POST);\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, \"<br>\";\n    }\n}\n```\n\n## Validators\n\nPhalcon exposes a set of built-in validators for this component:\n\nThe following example explains how to create additional validators for this component:\n\n``` php\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Message;\nuse Phalcon\\Validation\\Validator;\n\nclass IpValidator extends Validator\n{\n    /**\n     * Executes the validation\n     *\n     * @param Phalcon\\Validation $validator\n     * @param string $attribute\n     * @return boolean\n     */\n    public function validate(Validation $validator, $attribute)\n    {\n        $value = $validator->getValue($attribute);\n\n        if (!filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6)) {\n            $message = $this->getOption(\"message\");\n\n            if (!$message) {\n                $message = \"The IP is not valid\";\n            }\n\n            $validator->appendMessage(\n                new Message($message, $attribute, \"Ip\")\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\nIt is important that validators return a valid boolean value indicating if the validation was successful or not.\n\n## Callback Validator\n\nBy using [*Phalcon\\Validation\\Validator\\Callback*](../api/phalcon_validation_validator_callback) you can execute custom function which must return boolean or new validator class which will be used to validate the same field. By returning `true` validation will be successful, returning `false` will mean validation failed. When executing this validator Phalcon will pass data depending what it is - if it’s an entity then entity will be passed, otherwise data. There is example:\n\n``` php\nuse \\Phalcon\\Validation;\nuse \\Phalcon\\Validation\\Validator\\Callback;\nuse \\Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n$validation->add(\n    \"amount\",\n    new Callback(\n        [\n            \"callback\" => function($data) {\n                return $data[\"amount\"] % 2 == 0;\n            },\n            \"message\" => \"Only even number of products are accepted\"\n        ]\n    )\n);\n$validation->add(\n    \"amount\",\n    new Callback(\n        [\n            \"callback\" => function($data) {\n                if($data[\"amount\"] % 2 == 0) {\n                    return $data[\"amount\"] != 2;\n                }\n\n                return true;\n            },\n            \"message\" => \"You can't buy 2 products\"\n        ]\n    )\n);\n$validation->add(\n    \"description\",\n    new Callback(\n        [\n            \"callback\" => function($data) {\n                if($data[\"amount\"] >= 10) {\n                    return new PresenceOf(\n                        [\n                            \"message\" => \"You must write why you need so big amount.\"\n                        ]\n                    );\n                }\n\n                return true;\n            }\n        ]\n    )\n);\n\n$messages = $validation->validate([\"amount\" => 1]); // will return message from first validator\n$messages = $validation->validate([\"amount\" => 2]); // will return message from second validator\n$messages = $validation->validate([\"amount\" => 10]); // will return message from validator returned by third validator\n```\n\n## Validation Messages\n\n[*Phalcon\\Validation*](../api/phalcon_validation) has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the validation processes.\n\nEach message consists of an instance of the class [*Phalcon\\Validation\\Message*](../api/phalcon_mvc_model_message). The set of messages generated can be retrieved with the `getMessages()` method. Each message provides extended information like the attribute that generated the message or the message type:\n\n``` php\n$messages = $validation->validate();\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo \"Message: \", $message->getMessage(), \"\\n\";\n        echo \"Field: \", $message->getField(), \"\\n\";\n        echo \"Type: \", $message->getType(), \"\\n\";\n    }\n}\n```\n\nYou can pass a ‘message’ parameter to change/translate the default message in each validator:\n\n``` php\nuse Phalcon\\Validation\\Validator\\Email;\n\n$validation->add(\n    \"email\",\n    new Email(\n        [\n            \"message\" => \"The e-mail is not valid\",\n        ]\n    )\n);\n```\n\nBy default, the `getMessages()` method returns all the messages generated during validation. You can filter messages for a specific field using the `filter()` method:\n\n``` php\n$messages = $validation->validate();\n\nif (count($messages)) {\n    // Filter only the messages generated for the field 'name'\n    $filteredMessages = $messages->filter(\"name\");\n\n    foreach ($filteredMessages as $message) {\n        echo $message;\n    }\n}\n```\n\n## Filtering of Data\n\nData can be filtered prior to the validation ensuring that malicious or incorrect data is not validated.\n\n``` php\nuse Phalcon\\Validation;\n\n$validation = new Validation();\n\n$validation->add(\n    \"name\",\n    new PresenceOf(\n        [\n            \"message\" => \"The name is required\",\n        ]\n    )\n);\n\n$validation->add(\n    \"email\",\n    new PresenceOf(\n        [\n            \"message\" => \"The email is required\",\n        ]\n    )\n);\n\n// Filter any extra space\n$validation->setFilters(\"name\", \"trim\");\n$validation->setFilters(\"email\", \"trim\");\n```\n\nFiltering and sanitizing is performed using the [*filter*](filter) component. You can add more filters to this component or use the built-in ones.\n\n## Validation Events\n\nWhen validations are organized in classes, you can implement the `beforeValidation()` and `afterValidation()` methods to perform additional checks, filters, clean-up, etc. If the `beforeValidation()` method returns false the validation is automatically cancelled:\n\n``` php\nuse Phalcon\\Validation;\n\nclass LoginValidation extends Validation\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    /**\n     * Executed before validation\n     *\n     * @param array $data\n     * @param object $entity\n     * @param Phalcon\\Validation\\Message\\Group $messages\n     * @return bool\n     */\n    public function beforeValidation($data, $entity, $messages)\n    {\n        if ($this->request->getHttpHost() !== \"admin.mydomain.com\") {\n            $messages->appendMessage(\n                new Message(\"Only users can log on in the administration domain\")\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Executed after validation\n     *\n     * @param array $data\n     * @param object $entity\n     * @param Phalcon\\Validation\\Message\\Group $messages\n     */\n    public function afterValidation($data, $entity, $messages)\n    {\n        // ... Add additional messages or perform more validations\n    }\n}\n```\n\n## Cancelling Validations\n\nBy default all validators assigned to a field are tested regardless if one of them have failed or not. You can change this behavior by telling the validation component which validator may stop the validation:\n\n``` php\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation->add(\n    \"telephone\",\n    new PresenceOf(\n        [\n            \"message\"      => \"The telephone is required\",\n            \"cancelOnFail\" => true,\n        ]\n    )\n);\n\n$validation->add(\n    \"telephone\",\n    new Regex(\n        [\n            \"message\" => \"The telephone is required\",\n            \"pattern\" => \"/\\+44 [0-9]+/\",\n        ]\n    )\n);\n\n$validation->add(\n    \"telephone\",\n    new StringLength(\n        [\n            \"messageMinimum\" => \"The telephone is too short\",\n            \"min\"            => 2,\n        ]\n    )\n);\n```\n\nThe first validator has the option ‘cancelOnFail’ with a value of true, therefore if that validator fails the remaining validators in the chain are not executed.\n\nIf you are creating custom validators you can dynamically stop the validation chain by setting the ‘cancelOnFail’ option:\n\n``` php\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Message;\nuse Phalcon\\Validation\\Validator;\n\nclass MyValidator extends Validator\n{\n    /**\n     * Executes the validation\n     *\n     * @param Phalcon\\Validation $validator\n     * @param string $attribute\n     * @return boolean\n     */\n    public function validate(Validation $validator, $attribute)\n    {\n        // If the attribute value is name we must stop the chain\n        if ($attribute === \"name\") {\n            $this->setOption(\"cancelOnFail\", true);\n        }\n\n        // ...\n    }\n}\n```\n\n## Avoid validate empty values\n\nYou can pass the option ‘allowEmpty’ to all the built-in validators to avoid the validation to be performed if an empty value is passed:\n\n``` php\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\n\n$validation = new Validation();\n\n$validation->add(\n    \"telephone\",\n    new Regex(\n        [\n            \"message\"    => \"The telephone is required\",\n            \"pattern\"    => \"/\\+44 [0-9]+/\",\n            \"allowEmpty\" => true,\n        ]\n    )\n);\n```\n\n## Recursive Validation\n\nYou can also run Validation instances within another via the `afterValidation()` method. In this example, validating the CompanyValidation instance will also check the PhoneValidation instance:\n\n``` php\nuse Phalcon\\Validation;\n\nclass CompanyValidation extends Validation\n{\n    /**\n     * @var PhoneValidation\n     */\n    protected $phoneValidation;\n\n\n\n    public function initialize()\n    {\n        $this->phoneValidation = new PhoneValidation();\n    }\n\n\n\n    public function afterValidation($data, $entity, $messages)\n    {\n        $phoneValidationMessages = $this->phoneValidation->validate(\n            $data[\"phone\"]\n        );\n\n        $messages->appendMessages(\n            $phoneValidationMessages\n        );\n    }\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/validation.html](https://docs.phalconphp.com/en/latest/reference/validation.html)"
- name: Validation::add
  id: api/phalcon_validation#add
  summary: null
  belongs_to: Validation
  description: |-
    ### public **add** (*mixed* $field, [*Phalcon\Validation\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)

    Adds a validator to a field
- name: Validation::appendMessage
  id: api/phalcon_validation#appendmessage
  summary: null
  belongs_to: Validation
  description: |-
    ### public **appendMessage** ([*Phalcon\Validation\MessageInterface*](phalcon_validation_messageinterface) $message)

    Appends a message to the messages list
- name: Validation::bind
  id: api/phalcon_validation#bind
  summary: null
  belongs_to: Validation
  description: |-
    ### public [*Phalcon\Validation*](phalcon_validation) **bind** (*object* $entity, *array* \| *object* $data)

    Assigns the data to an entity The entity is used to obtain the validation values
- name: Validation::getData
  id: api/phalcon_validation#getdata
  summary: null
  belongs_to: Validation
  description: |-
    ### public **getData** ()

    ...
- name: Validation::getDefaultMessage
  id: api/phalcon_validation#getdefaultmessage
  summary: null
  belongs_to: Validation
  description: |-
    ### public **getDefaultMessage** (*mixed* $type)

    Get default message for validator type
- name: Validation::getEntity
  id: api/phalcon_validation#getentity
  summary: null
  belongs_to: Validation
  description: |-
    ### public *object* **getEntity** ()

    Returns the bound entity
- name: Validation::getFilters
  id: api/phalcon_validation#getfilters
  summary: null
  belongs_to: Validation
  description: |-
    ### public *mixed* **getFilters** (\[*string* $field\])

    Returns all the filters or a specific one
- name: Validation::getLabel
  id: api/phalcon_validation#getlabel
  summary: null
  belongs_to: Validation
  description: |-
    ### public *string* **getLabel** (*string* $field)

    Get label for field
- name: Validation::getMessages
  id: api/phalcon_validation#getmessages
  summary: null
  belongs_to: Validation
  description: |-
    ### public **getMessages** ()

    Returns the registered validators
- name: Validation::getValidators
  id: api/phalcon_validation#getvalidators
  summary: null
  belongs_to: Validation
  description: |-
    ### public **getValidators** ()

    Returns the validators added to the validation
- name: Validation::getValue
  id: api/phalcon_validation#getvalue
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation
  description: "### public *mixed* **getValue** (*string* $field)\n\nGets the a value to validate in the array/object data source\n\n### protected **preChecking** (*mixed* $field, [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\nInternal validations, if it returns true, then skip the current validator\n\n### public **setDI** ([*Phalcon\\DiInterface*](phalcon_diinterface) $dependencyInjector) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the dependency injector\n\n### public **getDI** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal dependency injector\n\n### public **setEventsManager** ([*Phalcon\\Events\\ManagerInterface*](phalcon_events_managerinterface) $eventsManager) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nSets the event manager\n\n### public **getEventsManager** () inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nReturns the internal event manager\n\n### public **\\_\\_get** (*mixed* $propertyName) inherited from [*Phalcon\\Di\\Injectable*](phalcon_di_injectable)\n\nMagic method \\_\\_get\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html)"
- name: Validation::rule
  id: api/phalcon_validation#rule
  summary: null
  belongs_to: Validation
  description: |-
    ### public **rule** (*mixed* $field, [*Phalcon\Validation\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)

    Alias of add method
- name: Validation::rules
  id: api/phalcon_validation#rules
  summary: null
  belongs_to: Validation
  description: |-
    ### public **rules** (*mixed* $field, *array* $validators)

    Adds the validators to a field
- name: Validation::setDefaultMessages
  id: api/phalcon_validation#setdefaultmessages
  summary: null
  belongs_to: Validation
  description: |-
    ### public **setDefaultMessages** (\[*array* $messages\])

    Adds default messages to validators
- name: Validation::setEntity
  id: api/phalcon_validation#setentity
  summary: null
  belongs_to: Validation
  description: |-
    ### public **setEntity** (*object* $entity)

    Sets the bound entity
- name: Validation::setFilters
  id: api/phalcon_validation#setfilters
  summary: null
  belongs_to: Validation
  description: |-
    ### public [*Phalcon\Validation*](phalcon_validation) **setFilters** (*string* $field, *array* \| *string* $filters)

    Adds filters to the field
- name: Validation::setLabels
  id: api/phalcon_validation#setlabels
  summary: null
  belongs_to: Validation
  description: |-
    ### public **setLabels** (*array* $labels)

    Adds labels for fields
- name: Validation::setValidators
  id: api/phalcon_validation#setvalidators
  summary: null
  belongs_to: Validation
  description: |-
    ### public **setValidators** (*mixed* $validators)

    ...

    ### public **\_\_construct** (\[*array* $validators\])

    Phalcon\Validation constructor
- name: Validation::validate
  id: api/phalcon_validation#validate
  summary: null
  belongs_to: Validation
  description: |-
    ### public [*Phalcon\Validation\Message\Group*](phalcon_validation_message_group) **validate** (\[*array* \| *object* $data\], \[*object* $entity\])

    Validate a set of data according to a set of rules
- name: ValidationInterface
  id: api/phalcon_validationinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\ValidationInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validationinterface.zep)\n\n## Methods\n\n### abstract public **validate** (\\[*mixed* $data\\], \\[*mixed* $entity\\])\n\n...\n\n### abstract public **add** (*mixed* $field, [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\n...\n\n### abstract public **rule** (*mixed* $field, [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)\n\n...\n\n### abstract public **rules** (*mixed* $field, *array* $validators)\n\n...\n\n### abstract public **setFilters** (*mixed* $field, *mixed* $filters)\n\n...\n\n### abstract public **getFilters** (\\[*mixed* $field\\])\n\n...\n\n### abstract public **getValidators** ()\n\n...\n\n### abstract public **getEntity** ()\n\n...\n\n### abstract public **setDefaultMessages** (\\[*array* $messages\\])\n\n...\n\n### abstract public **getDefaultMessage** (*mixed* $type)\n\n...\n\n### abstract public **getMessages** ()\n\n...\n\n### abstract public **setLabels** (*array* $labels)\n\n...\n\n### abstract public **getLabel** (*mixed* $field)\n\n...\n\n### abstract public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message)\n\n...\n\n### abstract public **bind** (*mixed* $entity, *mixed* $data)\n\n...\n\n### abstract public **getValue** (*mixed* $field)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_ValidationInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_ValidationInterface.html)"
- name: ValidationInterface::add
  id: api/phalcon_validationinterface#add
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **add** (*mixed* $field, [*Phalcon\Validation\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)

    ...
- name: ValidationInterface::appendMessage
  id: api/phalcon_validationinterface#appendmessage
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **appendMessage** ([*Phalcon\Validation\MessageInterface*](phalcon_validation_messageinterface) $message)

    ...
- name: ValidationInterface::bind
  id: api/phalcon_validationinterface#bind
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **bind** (*mixed* $entity, *mixed* $data)

    ...
- name: ValidationInterface::getDefaultMessage
  id: api/phalcon_validationinterface#getdefaultmessage
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **getDefaultMessage** (*mixed* $type)

    ...
- name: ValidationInterface::getEntity
  id: api/phalcon_validationinterface#getentity
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **getEntity** ()

    ...
- name: ValidationInterface::getFilters
  id: api/phalcon_validationinterface#getfilters
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **getFilters** (\[*mixed* $field\])

    ...
- name: ValidationInterface::getLabel
  id: api/phalcon_validationinterface#getlabel
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **getLabel** (*mixed* $field)

    ...
- name: ValidationInterface::getMessages
  id: api/phalcon_validationinterface#getmessages
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **getMessages** ()

    ...
- name: ValidationInterface::getValidators
  id: api/phalcon_validationinterface#getvalidators
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **getValidators** ()

    ...
- name: ValidationInterface::getValue
  id: api/phalcon_validationinterface#getvalue
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: ValidationInterface
  description: "### abstract public **getValue** (*mixed* $field)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_ValidationInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_ValidationInterface.html)"
- name: ValidationInterface::rule
  id: api/phalcon_validationinterface#rule
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **rule** (*mixed* $field, [*Phalcon\Validation\ValidatorInterface*](phalcon_validation_validatorinterface) $validator)

    ...
- name: ValidationInterface::rules
  id: api/phalcon_validationinterface#rules
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **rules** (*mixed* $field, *array* $validators)

    ...
- name: ValidationInterface::setDefaultMessages
  id: api/phalcon_validationinterface#setdefaultmessages
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **setDefaultMessages** (\[*array* $messages\])

    ...
- name: ValidationInterface::setFilters
  id: api/phalcon_validationinterface#setfilters
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **setFilters** (*mixed* $field, *mixed* $filters)

    ...
- name: ValidationInterface::setLabels
  id: api/phalcon_validationinterface#setlabels
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **setLabels** (*array* $labels)

    ...
- name: ValidationInterface::validate
  id: api/phalcon_validationinterface#validate
  summary: null
  belongs_to: ValidationInterface
  description: |-
    ### abstract public **validate** (\[*mixed* $data\], \[*mixed* $entity\])

    ...
- name: Validation\CombinedFieldsValidator
  id: api/phalcon_validation_combinedfieldsvalidator
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Validation\\CombinedFieldsValidator**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/combinedfieldsvalidator.zep)\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n### abstract public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $attribute) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nExecutes the validation\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_CombinedFieldsValidator.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_CombinedFieldsValidator.html)"
- name: Validation\Exception
  id: api/phalcon_validation_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Exception.html)"
- name: Validation\Message
  id: api/phalcon_validation_message
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Message**\n\n*implements* [*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/message.zep)\n\nEncapsulates validation info generated in the validation process\n\n## Methods\n\n### public **\\_\\_construct** (*mixed* $message, \\[*mixed* $field\\], \\[*mixed* $type\\], \\[*mixed* $code\\])\n\nPhalcon\\Validation\\Message constructor\n\n### public **setType** (*mixed* $type)\n\nSets message type\n\n### public **getType** ()\n\nReturns message type\n\n### public **setMessage** (*mixed* $message)\n\nSets verbose message\n\n### public **getMessage** ()\n\nReturns verbose message\n\n### public **setField** (*mixed* $field)\n\nSets field name related to message\n\n### public *mixed* **getField** ()\n\nReturns field name related to message\n\n### public **setCode** (*mixed* $code)\n\nSets code for the message\n\n### public **getCode** ()\n\nReturns the message code\n\n### public **\\_\\_toString** ()\n\nMagic \\_\\_toString method returns verbose message\n\n### public static **\\_\\_set_state** (*array* $message)\n\nMagic \\_\\_set_state helps to recover messages from serialization\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message.html)"
- name: Validation\Message::getCode
  id: api/phalcon_validation_message#getcode
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public **getCode** ()

    Returns the message code

    ### public **\_\_toString** ()

    Magic \_\_toString method returns verbose message
- name: Validation\Message::getField
  id: api/phalcon_validation_message#getfield
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public *mixed* **getField** ()

    Returns field name related to message
- name: Validation\Message::getMessage
  id: api/phalcon_validation_message#getmessage
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public **getMessage** ()

    Returns verbose message
- name: Validation\Message::getType
  id: api/phalcon_validation_message#gettype
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public **getType** ()

    Returns message type
- name: Validation\Message::setCode
  id: api/phalcon_validation_message#setcode
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public **setCode** (*mixed* $code)

    Sets code for the message
- name: Validation\Message::setField
  id: api/phalcon_validation_message#setfield
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public **setField** (*mixed* $field)

    Sets field name related to message
- name: Validation\Message::setMessage
  id: api/phalcon_validation_message#setmessage
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public **setMessage** (*mixed* $message)

    Sets verbose message
- name: Validation\Message::setType
  id: api/phalcon_validation_message#settype
  summary: null
  belongs_to: Validation\Message
  description: |-
    ### public **setType** (*mixed* $type)

    Sets message type
- name: Validation\Message::__set_state
  id: api/phalcon_validation_message#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Message
  description: "### public static **\\_\\_set_state** (*array* $message)\n\nMagic \\_\\_set_state helps to recover messages from serialization\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message.html)"
- name: Validation\MessageInterface
  id: api/phalcon_validation_messageinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Validation\\MessageInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/messageinterface.zep)\n\n## Methods\n\n### abstract public **setType** (*mixed* $type)\n\n...\n\n### abstract public **getType** ()\n\n...\n\n### abstract public **setMessage** (*mixed* $message)\n\n...\n\n### abstract public **getMessage** ()\n\n...\n\n### abstract public **setField** (*mixed* $field)\n\n...\n\n### abstract public **getField** ()\n\n...\n\n### abstract public **\\_\\_toString** ()\n\n...\n\n### abstract public static **\\_\\_set_state** (*array* $message)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_MessageInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_MessageInterface.html)"
- name: Validation\MessageInterface::getField
  id: api/phalcon_validation_messageinterface#getfield
  summary: null
  belongs_to: Validation\MessageInterface
  description: |-
    ### abstract public **getField** ()

    ...

    ### abstract public **\_\_toString** ()

    ...
- name: Validation\MessageInterface::getMessage
  id: api/phalcon_validation_messageinterface#getmessage
  summary: null
  belongs_to: Validation\MessageInterface
  description: |-
    ### abstract public **getMessage** ()

    ...
- name: Validation\MessageInterface::getType
  id: api/phalcon_validation_messageinterface#gettype
  summary: null
  belongs_to: Validation\MessageInterface
  description: |-
    ### abstract public **getType** ()

    ...
- name: Validation\MessageInterface::setField
  id: api/phalcon_validation_messageinterface#setfield
  summary: null
  belongs_to: Validation\MessageInterface
  description: |-
    ### abstract public **setField** (*mixed* $field)

    ...
- name: Validation\MessageInterface::setMessage
  id: api/phalcon_validation_messageinterface#setmessage
  summary: null
  belongs_to: Validation\MessageInterface
  description: |-
    ### abstract public **setMessage** (*mixed* $message)

    ...
- name: Validation\MessageInterface::setType
  id: api/phalcon_validation_messageinterface#settype
  summary: null
  belongs_to: Validation\MessageInterface
  description: |-
    ### abstract public **setType** (*mixed* $type)

    ...
- name: Validation\MessageInterface::__set_state
  id: api/phalcon_validation_messageinterface#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\MessageInterface
  description: "### abstract public static **\\_\\_set_state** (*array* $message)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_MessageInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_MessageInterface.html)"
- name: Validation\Message\Group
  id: api/phalcon_validation_message_group
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Message\\Group**\n\n*implements* [Countable](http://php.net/manual/en/class.countable.php), [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Iterator](http://php.net/manual/en/class.iterator.php), [Traversable](http://php.net/manual/en/class.traversable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/message/group.zep)\n\nRepresents a group of validation messages\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $messages\\])\n\nPhalcon\\Validation\\Message\\Group constructor\n\n### public [*Phalcon\\Validation\\Message*](phalcon_validation_message) **offsetGet** (*int* $index)\n\nGets an attribute a message using the array syntax\n\n``` php\nprint_r(\n    $messages[0]\n);\n```\n\n### public **offsetSet** (*int* $index, [*Phalcon\\Validation\\Message*](phalcon_validation_message) $message)\n\nSets an attribute using the array-syntax\n\n``` php\n$messages[0] = new \\Phalcon\\Validation\\Message(\"This is a message\");\n```\n\n### public *boolean* **offsetExists** (*int* $index)\n\nChecks if an index exists\n\n``` php\nvar_dump(\n    isset($message[\"database\"])\n);\n```\n\n### public **offsetUnset** (*mixed* $index)\n\nRemoves a message from the list\n\n``` php\nunset($message[\"database\"]);\n```\n\n### public **appendMessage** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface) $message)\n\nAppends a message to the group\n\n``` php\n$messages->appendMessage(\n    new \\Phalcon\\Validation\\Message(\"This is a message\")\n);\n```\n\n### public **appendMessages** ([*Phalcon\\Validation\\MessageInterface*](phalcon_validation_messageinterface)\\[\\] $messages)\n\nAppends an array of messages to the group\n\n``` php\n$messages->appendMessages($messagesArray);\n```\n\n### public *array* **filter** (*string* $fieldName)\n\nFilters the message group by field name\n\n### public **count** ()\n\nReturns the number of messages in the list\n\n### public **rewind** ()\n\nRewinds the internal iterator\n\n### public **current** ()\n\nReturns the current message in the iterator\n\n### public **key** ()\n\nReturns the current position/key in the iterator\n\n### public **next** ()\n\nMoves the internal iteration pointer to the next position\n\n### public **valid** ()\n\nCheck if the current message in the iterator is valid\n\n### public static [*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) **\\_\\_set_state** (*array* $group)\n\nMagic \\_\\_set_state helps to re-build messages variable when exporting\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message_Group.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message_Group.html)"
- name: Validation\Message\Group::appendMessage
  id: api/phalcon_validation_message_group#appendmessage
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **appendMessage** ([*Phalcon\Validation\MessageInterface*](phalcon_validation_messageinterface) $message)

    Appends a message to the group

    ``` php
    $messages->appendMessage(
        new \Phalcon\Validation\Message("This is a message")
    );
    ```
- name: Validation\Message\Group::appendMessages
  id: api/phalcon_validation_message_group#appendmessages
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **appendMessages** ([*Phalcon\Validation\MessageInterface*](phalcon_validation_messageinterface)\[\] $messages)

    Appends an array of messages to the group

    ``` php
    $messages->appendMessages($messagesArray);
    ```
- name: Validation\Message\Group::count
  id: api/phalcon_validation_message_group#count
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **count** ()

    Returns the number of messages in the list
- name: Validation\Message\Group::current
  id: api/phalcon_validation_message_group#current
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **current** ()

    Returns the current message in the iterator
- name: Validation\Message\Group::filter
  id: api/phalcon_validation_message_group#filter
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public *array* **filter** (*string* $fieldName)

    Filters the message group by field name
- name: Validation\Message\Group::key
  id: api/phalcon_validation_message_group#key
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **key** ()

    Returns the current position/key in the iterator
- name: Validation\Message\Group::next
  id: api/phalcon_validation_message_group#next
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **next** ()

    Moves the internal iteration pointer to the next position
- name: Validation\Message\Group::offsetExists
  id: api/phalcon_validation_message_group#offsetexists
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public *boolean* **offsetExists** (*int* $index)

    Checks if an index exists

    ``` php
    var_dump(
        isset($message["database"])
    );
    ```
- name: Validation\Message\Group::offsetGet
  id: api/phalcon_validation_message_group#offsetget
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public [*Phalcon\Validation\Message*](phalcon_validation_message) **offsetGet** (*int* $index)

    Gets an attribute a message using the array syntax

    ``` php
    print_r(
        $messages[0]
    );
    ```
- name: Validation\Message\Group::offsetSet
  id: api/phalcon_validation_message_group#offsetset
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **offsetSet** (*int* $index, [*Phalcon\Validation\Message*](phalcon_validation_message) $message)

    Sets an attribute using the array-syntax

    ``` php
    $messages[0] = new \Phalcon\Validation\Message("This is a message");
    ```
- name: Validation\Message\Group::offsetUnset
  id: api/phalcon_validation_message_group#offsetunset
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **offsetUnset** (*mixed* $index)

    Removes a message from the list

    ``` php
    unset($message["database"]);
    ```
- name: Validation\Message\Group::rewind
  id: api/phalcon_validation_message_group#rewind
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **rewind** ()

    Rewinds the internal iterator
- name: Validation\Message\Group::valid
  id: api/phalcon_validation_message_group#valid
  summary: null
  belongs_to: Validation\Message\Group
  description: |-
    ### public **valid** ()

    Check if the current message in the iterator is valid
- name: Validation\Message\Group::__set_state
  id: api/phalcon_validation_message_group#__set_state
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Message\Group
  description: "### public static [*Phalcon\\Validation\\Message\\Group*](phalcon_validation_message_group) **\\_\\_set_state** (*array* $group)\n\nMagic \\_\\_set_state helps to re-build messages variable when exporting\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message_Group.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message_Group.html)"
- name: Validation\Validator
  id: api/phalcon_validation_validator
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Abstract class **Phalcon\\Validation\\Validator**\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator.zep)\n\nThis is a base class for validators\n\n## Methods\n\n### public **\\_\\_construct** (\\[*array* $options\\])\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\])\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value)\n\nSets an option in the validator\n\n### abstract public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $attribute)\n\nExecutes the validation\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator.html)"
- name: Validation\Validator::getOption
  id: api/phalcon_validation_validator#getoption
  summary: null
  belongs_to: Validation\Validator
  description: |-
    ### public **getOption** (*mixed* $key, \[*mixed* $defaultValue\])

    Returns an option in the validator’s options Returns null if the option hasn’t set
- name: Validation\Validator::hasOption
  id: api/phalcon_validation_validator#hasoption
  summary: null
  belongs_to: Validation\Validator
  description: |-
    ### public **hasOption** (*mixed* $key)

    Checks if an option is defined
- name: Validation\Validator::isSetOption
  id: api/phalcon_validation_validator#issetoption
  summary: null
  belongs_to: Validation\Validator
  description: |-
    ### public **isSetOption** (*mixed* $key)

    Checks if an option has been defined
- name: Validation\Validator::setOption
  id: api/phalcon_validation_validator#setoption
  summary: null
  belongs_to: Validation\Validator
  description: |-
    ### public **setOption** (*mixed* $key, *mixed* $value)

    Sets an option in the validator
- name: Validation\Validator::validate
  id: api/phalcon_validation_validator#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator
  description: "### abstract public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $attribute)\n\nExecutes the validation\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator.html)"
- name: Validation\ValidatorInterface
  id: api/phalcon_validation_validatorinterface
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Interface **Phalcon\\Validation\\ValidatorInterface**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validatorinterface.zep)\n\n## Methods\n\n### abstract public **hasOption** (*mixed* $key)\n\n...\n\n### abstract public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\])\n\n...\n\n### abstract public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $attribute)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_ValidatorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_ValidatorInterface.html)"
- name: Validation\ValidatorInterface::getOption
  id: api/phalcon_validation_validatorinterface#getoption
  summary: null
  belongs_to: Validation\ValidatorInterface
  description: |-
    ### abstract public **getOption** (*mixed* $key, \[*mixed* $defaultValue\])

    ...
- name: Validation\ValidatorInterface::hasOption
  id: api/phalcon_validation_validatorinterface#hasoption
  summary: null
  belongs_to: Validation\ValidatorInterface
  description: |-
    ### abstract public **hasOption** (*mixed* $key)

    ...
- name: Validation\ValidatorInterface::validate
  id: api/phalcon_validation_validatorinterface#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\ValidatorInterface
  description: "### abstract public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $attribute)\n\n...\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_ValidatorInterface.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_ValidatorInterface.html)"
- name: Validation\Validator\Alnum
  id: api/phalcon_validation_validator_alnum
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Alnum**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/alnum.zep)\n\nCheck for alphanumeric character(s)\n\n``` php\nuse Phalcon\\Validation\\Validator\\Alnum as AlnumValidator;\n\n$validator->add(\n    \"username\",\n    new AlnumValidator(\n        [\n            \"message\" => \":field must contain only alphanumeric characters\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new AlnumValidator(\n        [\n            \"message\" => [\n                \"username\" => \"username must contain only alphanumeric characters\",\n                \"name\"     => \"name must contain only alphanumeric characters\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alnum.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alnum.html)"
- name: Validation\Validator\Alnum::validate
  id: api/phalcon_validation_validator_alnum#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Alnum
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alnum.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alnum.html)"
- name: Validation\Validator\Alpha
  id: api/phalcon_validation_validator_alpha
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Alpha**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/alpha.zep)\n\nCheck for alphabetic character(s)\n\n``` php\nuse Phalcon\\Validation\\Validator\\Alpha as AlphaValidator;\n\n$validator->add(\n    \"username\",\n    new AlphaValidator(\n        [\n            \"message\" => \":field must contain only letters\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new AlphaValidator(\n        [\n            \"message\" => [\n                \"username\" => \"username must contain only letters\",\n                \"name\"     => \"name must contain only letters\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alpha.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alpha.html)"
- name: Validation\Validator\Alpha::validate
  id: api/phalcon_validation_validator_alpha#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Alpha
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alpha.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alpha.html)"
- name: Validation\Validator\Between
  id: api/phalcon_validation_validator_between
  summary: Validates that a value is between an inclusive range of two values
  description: "# Class **Phalcon\\Validation\\Validator\\Between**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/between.zep)\n\nValidates that a value is between an inclusive range of two values. For a value x, the test is passed if minimum\\<=x\\<=maximum.\n\n``` php\nuse Phalcon\\Validation\\Validator\\Between;\n\n$validator->add(\n    \"price\",\n    new Between(\n        [\n            \"minimum\" => 0,\n            \"maximum\" => 100,\n            \"message\" => \"The price must be between 0 and 100\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Between(\n        [\n            \"minimum\" => [\n                \"price\"  => 0,\n                \"amount\" => 0,\n            ],\n            \"maximum\" => [\n                \"price\"  => 100,\n                \"amount\" => 50,\n            ],\n            \"message\" => [\n                \"price\"  => \"The price must be between 0 and 100\",\n                \"amount\" => \"The amount must be between 0 and 50\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Between.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Between.html)"
- name: Validation\Validator\Between::validate
  id: api/phalcon_validation_validator_between#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Between
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Between.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Between.html)"
- name: Validation\Validator\Callback
  id: api/phalcon_validation_validator_callback
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Callback**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/callback.zep)\n\nCalls user function for validation\n\n``` php\nuse Phalcon\\Validation\\Validator\\Callback as CallbackValidator;\nuse Phalcon\\Validation\\Validator\\Numericality as NumericalityValidator;\n\n$validator->add(\n    [\"user\", \"admin\"],\n    new CallbackValidator(\n        [\n            \"message\" => \"There must be only an user or admin set\",\n            \"callback\" => function($data) {\n                if (!empty($data->getUser()) && !empty($data->getAdmin())) {\n                    return false;\n                }\n\n                return true;\n            }\n        ]\n    )\n);\n\n$validator->add(\n    \"amount\",\n    new CallbackValidator(\n        [\n            \"callback\" => function($data) {\n                if (!empty($data->getProduct())) {\n                    return new NumericalityValidator(\n                        [\n                            \"message\" => \"Amount must be a number.\"\n                        ]\n                    );\n                }\n            }\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Callback.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Callback.html)"
- name: Validation\Validator\Callback::validate
  id: api/phalcon_validation_validator_callback#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Callback
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Callback.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Callback.html)"
- name: Validation\Validator\Confirmation
  id: api/phalcon_validation_validator_confirmation
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Confirmation**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/confirmation.zep)\n\nChecks that two values have the same value\n\n``` php\nuse Phalcon\\Validation\\Validator\\Confirmation;\n\n$validator->add(\n    \"password\",\n    new Confirmation(\n        [\n            \"message\" => \"Password doesn't match confirmation\",\n            \"with\"    => \"confirmPassword\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"password\",\n        \"email\",\n    ],\n    new Confirmation(\n        [\n            \"message\" => [\n                \"password\" => \"Password doesn't match confirmation\",\n                \"email\"    => \"Email doesn't match confirmation\",\n            ],\n            \"with\" => [\n                \"password\" => \"confirmPassword\",\n                \"email\"    => \"confirmEmail\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### final protected **compare** (*mixed* $a, *mixed* $b)\n\nCompare strings\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Confirmation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Confirmation.html)"
- name: Validation\Validator\Confirmation::validate
  id: api/phalcon_validation_validator_confirmation#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Confirmation
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### final protected **compare** (*mixed* $a, *mixed* $b)\n\nCompare strings\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Confirmation.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Confirmation.html)"
- name: Validation\Validator\CreditCard
  id: api/phalcon_validation_validator_creditcard
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\CreditCard**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/creditcard.zep)\n\nChecks if a value has a valid credit card number\n\n``` php\nuse Phalcon\\Validation\\Validator\\CreditCard as CreditCardValidator;\n\n$validator->add(\n    \"creditCard\",\n    new CreditCardValidator(\n        [\n            \"message\" => \"The credit card number is not valid\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"creditCard\",\n        \"secondCreditCard\",\n    ],\n    new CreditCardValidator(\n        [\n            \"message\" => [\n                \"creditCard\"       => \"The credit card number is not valid\",\n                \"secondCreditCard\" => \"The second credit card number is not valid\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### private *boolean* **verifyByLuhnAlgorithm** (*string* $number)\n\nis a simple checksum formula used to validate a variety of identification numbers\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_CreditCard.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_CreditCard.html)"
- name: Validation\Validator\CreditCard::validate
  id: api/phalcon_validation_validator_creditcard#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\CreditCard
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### private *boolean* **verifyByLuhnAlgorithm** (*string* $number)\n\nis a simple checksum formula used to validate a variety of identification numbers\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_CreditCard.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_CreditCard.html)"
- name: Validation\Validator\Date
  id: api/phalcon_validation_validator_date
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Date**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/date.zep)\n\nChecks if a value is a valid date\n\n``` php\nuse Phalcon\\Validation\\Validator\\Date as DateValidator;\n\n$validator->add(\n    \"date\",\n    new DateValidator(\n        [\n            \"format\"  => \"d-m-Y\",\n            \"message\" => \"The date is invalid\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"date\",\n        \"anotherDate\",\n    ],\n    new DateValidator(\n        [\n            \"format\" => [\n                \"date\"        => \"d-m-Y\",\n                \"anotherDate\" => \"Y-m-d\",\n            ],\n            \"message\" => [\n                \"date\"        => \"The date is invalid\",\n                \"anotherDate\" => \"The another date is invalid\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### private **checkDate** (*mixed* $value, *mixed* $format)\n\n...\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Date.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Date.html)"
- name: Validation\Validator\Date::validate
  id: api/phalcon_validation_validator_date#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Date
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### private **checkDate** (*mixed* $value, *mixed* $format)\n\n...\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Date.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Date.html)"
- name: Validation\Validator\Digit
  id: api/phalcon_validation_validator_digit
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Digit**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/digit.zep)\n\nCheck for numeric character(s)\n\n``` php\nuse Phalcon\\Validation\\Validator\\Digit as DigitValidator;\n\n$validator->add(\n    \"height\",\n    new DigitValidator(\n        [\n            \"message\" => \":field must be numeric\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"height\",\n        \"width\",\n    ],\n    new DigitValidator(\n        [\n            \"message\" => [\n                \"height\" => \"height must be numeric\",\n                \"width\"  => \"width must be numeric\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Digit.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Digit.html)"
- name: Validation\Validator\Digit::validate
  id: api/phalcon_validation_validator_digit#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Digit
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Digit.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Digit.html)"
- name: Validation\Validator\Email
  id: api/phalcon_validation_validator_email
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Email**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/email.zep)\n\nChecks if a value has a correct e-mail format\n\n``` php\nuse Phalcon\\Validation\\Validator\\Email as EmailValidator;\n\n$validator->add(\n    \"email\",\n    new EmailValidator(\n        [\n            \"message\" => \"The e-mail is not valid\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"email\",\n        \"anotherEmail\",\n    ],\n    new EmailValidator(\n        [\n            \"message\" => [\n                \"email\"        => \"The e-mail is not valid\",\n                \"anotherEmail\" => \"The another e-mail is not valid\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Email.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Email.html)"
- name: Validation\Validator\Email::validate
  id: api/phalcon_validation_validator_email#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Email
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Email.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Email.html)"
- name: Validation\Validator\Exception
  id: api/phalcon_validation_validator_exception
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Exception**\n\n*extends* class [*Phalcon\\Exception*](phalcon_exception)\n\n*implements* [Throwable](http://php.net/manual/en/class.throwable.php)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/exception.zep)\n\n## Methods\n\n### final private [Exception](http://php.net/manual/en/class.exception.php) **\\_\\_clone** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nClone the exception\n\n### public **\\_\\_construct** (\\[*string* $message\\], \\[*int* $code\\], \\[[Exception](http://php.net/manual/en/class.exception.php) $previous\\]) inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nException constructor\n\n### public **\\_\\_wakeup** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\n...\n\n### final public *string* **getMessage** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception message\n\n### final public *int* **getCode** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the Exception code\n\n### final public *string* **getFile** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the file in which the exception occurred\n\n### final public *int* **getLine** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the line in which the exception occurred\n\n### final public *array* **getTrace** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getPrevious** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nReturns previous Exception\n\n### final public [Exception](http://php.net/manual/en/class.exception.php) **getTraceAsString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nGets the stack trace as a string\n\n### public *string* **\\_\\_toString** () inherited from [Exception](http://php.net/manual/en/class.exception.php)\n\nString representation of the exception\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Exception.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Exception.html)"
- name: Validation\Validator\ExclusionIn
  id: api/phalcon_validation_validator_exclusionin
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\ExclusionIn**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/exclusionin.zep)\n\nCheck if a value is not included into a list of values\n\n``` php\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\n$validator->add(\n    \"status\",\n    new ExclusionIn(\n        [\n            \"message\" => \"The status must not be A or B\",\n            \"domain\"  => [\n                \"A\",\n                \"B\",\n            ],\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new ExclusionIn(\n        [\n            \"message\" => [\n                \"status\" => \"The status must not be A or B\",\n                \"type\"   => \"The type must not be 1 or \"'\n            ],\n            \"domain\" => [\n                \"status\" => [\n                    \"A\",\n                    \"B\",\n                ],\n                \"type\"   => [1, 2],\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_ExclusionIn.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_ExclusionIn.html)"
- name: Validation\Validator\ExclusionIn::validate
  id: api/phalcon_validation_validator_exclusionin#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\ExclusionIn
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_ExclusionIn.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_ExclusionIn.html)"
- name: Validation\Validator\File
  id: api/phalcon_validation_validator_file
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\File**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/file.zep)\n\nChecks if a value has a correct file\n\n``` php\nuse Phalcon\\Validation\\Validator\\File as FileValidator;\n\n$validator->add(\n    \"file\",\n    new FileValidator(\n        [\n            \"maxSize\"              => \"2M\",\n            \"messageSize\"          => \":field exceeds the max filesize (:max)\",\n            \"allowedTypes\"         => [\n                \"image/jpeg\",\n                \"image/png\",\n            ],\n            \"messageType\"          => \"Allowed file types are :types\",\n            \"maxResolution\"        => \"800x600\",\n            \"messageMaxResolution\" => \"Max resolution of :field is :max\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new FileValidator(\n        [\n            \"maxSize\" => [\n                \"file\"        => \"2M\",\n                \"anotherFile\" => \"4M\",\n            ],\n            \"messageSize\" => [\n                \"file\"        => \"file exceeds the max filesize 2M\",\n                \"anotherFile\" => \"anotherFile exceeds the max filesize 4M\",\n            \"allowedTypes\" => [\n                \"file\"        => [\n                    \"image/jpeg\",\n                    \"image/png\",\n                ],\n                \"anotherFile\" => [\n                    \"image/gif\",\n                    \"image/bmp\",\n                ],\n            ],\n            \"messageType\" => [\n                \"file\"        => \"Allowed file types are image/jpeg and image/png\",\n                \"anotherFile\" => \"Allowed file types are image/gif and image/bmp\",\n            ],\n            \"maxResolution\" => [\n                \"file\"        => \"800x600\",\n                \"anotherFile\" => \"1024x768\",\n            ],\n            \"messageMaxResolution\" => [\n                \"file\"        => \"Max resolution of file is 800x600\",\n                \"anotherFile\" => \"Max resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **isAllowEmpty** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nCheck on empty\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_File.html)"
- name: Validation\Validator\File::isAllowEmpty
  id: api/phalcon_validation_validator_file#isallowempty
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\File
  description: "### public **isAllowEmpty** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nCheck on empty\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_File.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_File.html)"
- name: Validation\Validator\File::validate
  id: api/phalcon_validation_validator_file#validate
  summary: null
  belongs_to: Validation\Validator\File
  description: |-
    ### public **validate** ([*Phalcon\Validation*](phalcon_validation) $validation, *mixed* $field)

    Executes the validation
- name: Validation\Validator\Identical
  id: api/phalcon_validation_validator_identical
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Identical**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/identical.zep)\n\nChecks if a value is identical to other\n\n``` php\nuse Phalcon\\Validation\\Validator\\Identical;\n\n$validator->add(\n    \"terms\",\n    new Identical(\n        [\n            \"accepted\" => \"yes\",\n            \"message\" => \"Terms and conditions must be accepted\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"terms\",\n        \"anotherTerms\",\n    ],\n    new Identical(\n        [\n            \"accepted\" => [\n                \"terms\"        => \"yes\",\n                \"anotherTerms\" => \"yes\",\n            ],\n            \"message\" => [\n                \"terms\"        => \"Terms and conditions must be accepted\",\n                \"anotherTerms\" => \"Another terms  must be accepted\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Identical.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Identical.html)"
- name: Validation\Validator\Identical::validate
  id: api/phalcon_validation_validator_identical#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Identical
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Identical.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Identical.html)"
- name: Validation\Validator\InclusionIn
  id: api/phalcon_validation_validator_inclusionin
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\InclusionIn**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/inclusionin.zep)\n\nCheck if a value is included into a list of values\n\n``` php\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\n$validator->add(\n    \"status\",\n    new InclusionIn(\n        [\n            \"message\" => \"The status must be A or B\",\n            \"domain\"  => [\"A\", \"B\"],\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new InclusionIn(\n        [\n            \"message\" => [\n                \"status\" => \"The status must be A or B\",\n                \"type\"   => \"The status must be 1 or 2\",\n            ],\n            \"domain\" => [\n                \"status\" => [\"A\", \"B\"],\n                \"type\"   => [1, 2],\n            ]\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_InclusionIn.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_InclusionIn.html)"
- name: Validation\Validator\InclusionIn::validate
  id: api/phalcon_validation_validator_inclusionin#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\InclusionIn
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_InclusionIn.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_InclusionIn.html)"
- name: Validation\Validator\Numericality
  id: api/phalcon_validation_validator_numericality
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Numericality**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/numericality.zep)\n\nCheck for a valid numeric value\n\n``` php\nuse Phalcon\\Validation\\Validator\\Numericality;\n\n$validator->add(\n    \"price\",\n    new Numericality(\n        [\n            \"message\" => \":field is not numeric\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Numericality(\n        [\n            \"message\" => [\n                \"price\"  => \"price is not numeric\",\n                \"amount\" => \"amount is not numeric\",\n            ]\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Numericality.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Numericality.html)"
- name: Validation\Validator\Numericality::validate
  id: api/phalcon_validation_validator_numericality#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Numericality
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Numericality.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Numericality.html)"
- name: Validation\Validator\PresenceOf
  id: api/phalcon_validation_validator_presenceof
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\PresenceOf**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/presenceof.zep)\n\nValidates that a value is not null or empty string\n\n``` php\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validator->add(\n    \"name\",\n    new PresenceOf(\n        [\n            \"message\" => \"The name is required\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"name\",\n        \"email\",\n    ],\n    new PresenceOf(\n        [\n            \"message\" => [\n                \"name\"  => \"The name is required\",\n                \"email\" => \"The email is required\",\n            ],\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_PresenceOf.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_PresenceOf.html)"
- name: Validation\Validator\PresenceOf::validate
  id: api/phalcon_validation_validator_presenceof#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\PresenceOf
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_PresenceOf.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_PresenceOf.html)"
- name: Validation\Validator\Regex
  id: api/phalcon_validation_validator_regex
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Regex**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/regex.zep)\n\nAllows validate if the value of a field matches a regular expression\n\n``` php\nuse Phalcon\\Validation\\Validator\\Regex as RegexValidator;\n\n$validator->add(\n    \"created_at\",\n    new RegexValidator(\n        [\n            \"pattern\" => \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/\",\n            \"message\" => \"The creation date is invalid\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"created_at\",\n        \"name\",\n    ],\n    new RegexValidator(\n        [\n            \"pattern\" => [\n                \"created_at\" => \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/\",\n                \"name\"       => \"/^[a-z]$/\",\n            ],\n            \"message\" => [\n                \"created_at\" => \"The creation date is invalid\",\n                \"name\"       => \"The name is invalid\",\n            ]\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Regex.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Regex.html)"
- name: Validation\Validator\Regex::validate
  id: api/phalcon_validation_validator_regex#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Regex
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Regex.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Regex.html)"
- name: Validation\Validator\StringLength
  id: api/phalcon_validation_validator_stringlength
  summary: Validates that a string has the specified maximum and minimum constraints The test is passed if for a string’s length L, min<=L<=max, i.e
  description: "# Class **Phalcon\\Validation\\Validator\\StringLength**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/stringlength.zep)\n\nValidates that a string has the specified maximum and minimum constraints The test is passed if for a string’s length L, min\\<=L\\<=max, i.e. L must be at least min, and at most max.\n\n``` php\nuse Phalcon\\Validation\\Validator\\StringLength as StringLength;\n\n$validation->add(\n    \"name_last\",\n    new StringLength(\n        [\n            \"max\"            => 50,\n            \"min\"            => 2,\n            \"messageMaximum\" => \"We don't like really long names\",\n            \"messageMinimum\" => \"We want more than just their initials\",\n        ]\n    )\n);\n\n$validation->add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new StringLength(\n        [\n            \"max\" => [\n                \"name_last\"  => 50,\n                \"name_first\" => 40,\n            ],\n            \"min\" => [\n                \"name_last\"  => 2,\n                \"name_first\" => 4,\n            ],\n            \"messageMaximum\" => [\n                \"name_last\"  => \"We don't like really long last names\",\n                \"name_first\" => \"We don't like really long first names\",\n            ],\n            \"messageMinimum\" => [\n                \"name_last\"  => \"We don't like too short last names\",\n                \"name_first\" => \"We don't like too short first names\",\n            ]\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_StringLength.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_StringLength.html)"
- name: Validation\Validator\StringLength::validate
  id: api/phalcon_validation_validator_stringlength#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\StringLength
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_StringLength.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_StringLength.html)"
- name: Validation\Validator\Uniqueness
  id: api/phalcon_validation_validator_uniqueness
  summary: It is possible to convert values before validation
  description: "# Class **Phalcon\\Validation\\Validator\\Uniqueness**\n\n*extends* abstract class [*Phalcon\\Validation\\CombinedFieldsValidator*](phalcon_validation_combinedfieldsvalidator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/uniqueness.zep)\n\nCheck that a field is unique in the related table\n\n``` php\nuse Phalcon\\Validation\\Validator\\Uniqueness as UniquenessValidator;\n\n$validator->add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"model\"   => new Users(),\n            \"message\" => \":field must be unique\",\n        ]\n    )\n);\n```\n\nDifferent attribute from the field:\n\n``` php\n$validator->add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"model\"     => new Users(),\n            \"attribute\" => \"nick\",\n        ]\n    )\n);\n```\n\nIn model:\n\n``` php\n$validator->add(\n    \"username\",\n    new UniquenessValidator()\n);\n```\n\nCombination of fields in model:\n\n``` php\n$validator->add(\n    [\n        \"firstName\",\n        \"lastName\",\n    ],\n    new UniquenessValidator()\n);\n```\n\nIt is possible to convert values before validation. This is useful in situations where values need to be converted to do the database lookup:\n\n``` php\n$validator->add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"convert\" => function (array $values) {\n                $values[\"username\"] = strtolower($values[\"username\"]);\n\n                return $values;\n            }\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### protected **isUniqueness** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\n...\n\n### protected **getColumnNameReal** (*mixed* $record, *mixed* $field)\n\nThe column map is used in the case to get real column name\n\n### protected **isUniquenessModel** (*mixed* $record, *array* $field, *array* $values)\n\nUniqueness method used for model\n\n### protected **isUniquenessCollection** (*mixed* $record, *array* $field, *array* $values)\n\nUniqueness method used for collection\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Uniqueness.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Uniqueness.html)"
- name: Validation\Validator\Uniqueness::validate
  id: api/phalcon_validation_validator_uniqueness#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Uniqueness
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### protected **isUniqueness** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\n...\n\n### protected **getColumnNameReal** (*mixed* $record, *mixed* $field)\n\nThe column map is used in the case to get real column name\n\n### protected **isUniquenessModel** (*mixed* $record, *array* $field, *array* $values)\n\nUniqueness method used for model\n\n### protected **isUniquenessCollection** (*mixed* $record, *array* $field, *array* $values)\n\nUniqueness method used for collection\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Uniqueness.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Uniqueness.html)"
- name: Validation\Validator\Url
  id: api/phalcon_validation_validator_url
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  description: "# Class **Phalcon\\Validation\\Validator\\Url**\n\n*extends* abstract class [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\n*implements* [*Phalcon\\Validation\\ValidatorInterface*](phalcon_validation_validatorinterface)\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/url.zep)\n\nChecks if a value has a url format\n\n``` php\nuse Phalcon\\Validation\\Validator\\Url as UrlValidator;\n\n$validator->add(\n    \"url\",\n    new UrlValidator(\n        [\n            \"message\" => \":field must be a url\",\n        ]\n    )\n);\n\n$validator->add(\n    [\n        \"url\",\n        \"homepage\",\n    ],\n    new UrlValidator(\n        [\n            \"message\" => [\n                \"url\"      => \"url must be a url\",\n                \"homepage\" => \"homepage must be a url\",\n            ]\n        ]\n    )\n);\n```\n\n## Methods\n\n### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Url.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Url.html)"
- name: Validation\Validator\Url::validate
  id: api/phalcon_validation_validator_url#validate
  summary: © 2011–2017 Phalcon Framework Team Licensed under the Creative Commons Attribution License 3.0
  belongs_to: Validation\Validator\Url
  description: "### public **validate** ([*Phalcon\\Validation*](phalcon_validation) $validation, *mixed* $field)\n\nExecutes the validation\n\n### public **\\_\\_construct** (\\[*array* $options\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nPhalcon\\Validation\\Validator constructor\n\n### public **isSetOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option has been defined\n\n### public **hasOption** (*mixed* $key) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nChecks if an option is defined\n\n### public **getOption** (*mixed* $key, \\[*mixed* $defaultValue\\]) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nReturns an option in the validator’s options Returns null if the option hasn’t set\n\n### public **setOption** (*mixed* $key, *mixed* $value) inherited from [*Phalcon\\Validation\\Validator*](phalcon_validation_validator)\n\nSets an option in the validator\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Url.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Url.html)"
- name: Version
  id: api/phalcon_version
  summary: Area where the version number is set
  description: "# Class **Phalcon\\Version**\n\n[Source on GitHub](https://github.com/phalcon/cphalcon/blob/master/phalcon/version.zep)\n\nThis class allows to get the installed version of the framework\n\n## Constants\n\n### *integer* **VERSION_MAJOR**\n\n### *integer* **VERSION_MEDIUM**\n\n### *integer* **VERSION_MINOR**\n\n### *integer* **VERSION_SPECIAL**\n\n### *integer* **VERSION_SPECIAL_NUMBER**\n\n## Methods\n\n### protected static **\\_getVersion** ()\n\nArea where the version number is set. The format is as follows: ABBCCDE A - Major version B - Med version (two digits) C - Min version (two digits) D - Special release: 1 = Alpha, 2 = Beta, 3 = RC, 4 = Stable E - Special release version i.e. RC1, Beta2 etc.\n\n### final protected static **\\_getSpecial** (*mixed* $special)\n\nTranslates a number to a special release If Special release = 1 this function will return ALPHA\n\n### public static **get** ()\n\nReturns the active version (string)\n\n``` php\necho Phalcon\\Version::get();\n```\n\n### public static **getId** ()\n\nReturns the numeric active version\n\n``` php\necho Phalcon\\Version::getId();\n```\n\n### public static **getPart** (*mixed* $part)\n\nReturns a specific part of the version. If the wrong parameter is passed it will return the full version\n\n``` php\necho Phalcon\\Version::getPart(\n    Phalcon\\Version::VERSION_MAJOR\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Version.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Version.html)"
- name: Version::get
  id: api/phalcon_version#get
  summary: null
  belongs_to: Version
  description: |-
    ### public static **get** ()

    Returns the active version (string)

    ``` php
    echo Phalcon\Version::get();
    ```
- name: Version::getId
  id: api/phalcon_version#getid
  summary: null
  belongs_to: Version
  description: |-
    ### public static **getId** ()

    Returns the numeric active version

    ``` php
    echo Phalcon\Version::getId();
    ```
- name: Version::getPart
  id: api/phalcon_version#getpart
  summary: Returns a specific part of the version
  belongs_to: Version
  description: "### public static **getPart** (*mixed* $part)\n\nReturns a specific part of the version. If the wrong parameter is passed it will return the full version\n\n``` php\necho Phalcon\\Version::getPart(\n    Phalcon\\Version::VERSION_MAJOR\n);\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/api/Phalcon_Version.html](https://docs.phalconphp.com/en/latest/api/Phalcon_Version.html)"
- name: Version::VERSION_MAJOR
  id: api/phalcon_version#version_major
  summary: null
  belongs_to: Version
  description: '### *integer* **VERSION_MAJOR**'
- name: Version::VERSION_MEDIUM
  id: api/phalcon_version#version_medium
  summary: null
  belongs_to: Version
  description: '### *integer* **VERSION_MEDIUM**'
- name: Version::VERSION_MINOR
  id: api/phalcon_version#version_minor
  summary: null
  belongs_to: Version
  description: '### *integer* **VERSION_MINOR**'
- name: Version::VERSION_SPECIAL
  id: api/phalcon_version#version_special
  summary: null
  belongs_to: Version
  description: '### *integer* **VERSION_SPECIAL**'
- name: Version::VERSION_SPECIAL_NUMBER
  id: api/phalcon_version#version_special_number
  summary: Area where the version number is set
  belongs_to: Version
  description: |-
    ### *integer* **VERSION_SPECIAL_NUMBER**

    ## Methods

    ### protected static **\_getVersion** ()

    Area where the version number is set. The format is as follows: ABBCCDE A - Major version B - Med version (two digits) C - Min version (two digits) D - Special release: 1 = Alpha, 2 = Beta, 3 = RC, 4 = Stable E - Special release version i.e. RC1, Beta2 etc.

    ### final protected static **\_getSpecial** (*mixed* $special)

    Translates a number to a special release If Special release = 1 this function will return ALPHA
- name: View Helpers (Tags)
  id: reference/tags
  summary: Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration
  description: "# View Helpers (Tags)\n\nWriting and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration. Phalcon deals with this complexity by offering [*Phalcon\\Tag*](../api/phalcon_tag), which in turn offers view helpers to generate HTML markup.\n\nThis component can be used in a plain HTML+PHP view or in a [*Volt*](volt) template.\n\n> This guide is not intended to be a complete documentation of available helpers and their arguments. Please visit the [*Phalcon\\Tag*](../api/phalcon_tag) page in the API for a complete reference.\n\n## Document Type of Content\n\nPhalcon provides `Phalcon\\Tag::setDoctype()` helper to set document type of the content. Document type setting may affect HTML output produced by other tag helpers. For example, if you set XHTML document type family, helpers that return or output HTML tags will produce self-closing tags to follow valid XHTML standard.\n\nAvailable document type constants in [*Phalcon\\Tag*](../api/phalcon_tag) namespace are:\n\n| Constant             | Document type          |\n|----------------------|------------------------|\n| HTML32               | HTML 3.2               |\n| HTML401_STRICT       | HTML 4.01 Strict       |\n| HTML401_TRANSITIONAL | HTML 4.01 Transitional |\n| HTML401_FRAMESET     | HTML 4.01 Frameset     |\n| HTML5                | HTML 5                 |\n| XHTML10_STRICT       | XHTML 1.0 Strict       |\n| XHTML10_TRANSITIONAL | XHTML 1.0 Transitional |\n| XHTML10_FRAMESET     | XHTML 1.0 Frameset     |\n| XHTML11              | XHTML 1.1              |\n| XHTML20              | XHTML 2.0              |\n| XHTML5               | XHTML 5                |\n\nSetting document type.\n\n``` php\nuse Phalcon\\Tag;\n\n$this->tag->setDoctype(Tag::HTML401_STRICT);\n\n?>\n```\n\nGetting document type.\n\n``` html\n<?= $this->tag->getDoctype() ?>\n<html>\n<!-- your HTML code -->\n</html>\n```\n\nThe following HTML will be produced.\n\n``` html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n        \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<!-- your HTML code -->\n</html>\n```\n\nVolt syntax:\n\n``` html\n{{ get_doctype() }}\n<html>\n<!-- your HTML code -->\n</html>\n```\n\n## Generating Links\n\nA real common task in any web application or website is to produce links that allow us to navigate from one page to another. When they are internal URLs we can create them in the following manner:\n\n``` html\n<!-- for the default route -->\n<?= $this->tag->linkTo(\"products/search\", \"Search\") ?>\n\n<!-- with CSS attributes -->\n<?= $this->tag->linkTo([\"products/edit/10\", \"Edit\", \"class\" => \"edit-btn\"]) ?>\n\n<!-- for a named route -->\n<?= $this->tag->linkTo([[\"for\" => \"show-product\", \"title\" => 123, \"name\" => \"carrots\"], \"Show\"]) ?>\n```\n\nActually, all produced URLs are generated by the component [*Phalcon\\Mvc\\Url*](url) (or service “url” failing)\n\nSame links generated with Volt:\n\n``` html\n<!-- for the default route -->\n{{ link_to(\"products/search\", \"Search\") }}\n\n<!-- for a named route -->\n{{ link_to([\"for\": \"show-product\", \"id\": 123, \"name\": \"carrots\"], \"Show\") }}\n\n<!-- for a named route with a HTML class -->\n{{ link_to([\"for\": \"show-product\", \"id\": 123, \"name\": \"carrots\"], \"Show\", \"class\": \"edit-btn\") }}\n```\n\n## Creating Forms\n\nForms in web applications play an essential part in retrieving user input. The following example shows how to implement a simple search form using view helpers:\n\n``` html\n<!-- Sending the form by method POST -->\n<?= $this->tag->form(\"products/search\") ?>\n    <label for=\"q\">Search:</label>\n\n    <?= $this->tag->textField(\"q\") ?>\n\n    <?= $this->tag->submitButton(\"Search\") ?>\n<?= $this->tag->endForm() ?>\n\n<!-- Specifying another method or attributes for the FORM tag -->\n<?= $this->tag->form([\"products/search\", \"method\" => \"get\"]); ?>\n    <label for=\"q\">Search:</label>\n\n    <?= $this->tag->textField(\"q\"); ?>\n\n    <?= $this->tag->submitButton(\"Search\"); ?>\n<?= $this->tag->endForm() ?>\n```\n\nThis last code will generate the following HTML:\n\n``` html\n<form action=\"/store/products/search/\" method=\"get\">\n    <label for=\"q\">Search:</label>\n\n    <input type=\"text\" id=\"q\" value=\"\" name=\"q\" />\n\n    <input type=\"submit\" value=\"Search\" />\n</form>\n```\n\nSame form generated in Volt:\n\n``` html\n<!-- Specifying another method or attributes for the FORM tag -->\n{{ form(\"products/search\", \"method\": \"get\") }}\n    <label for=\"q\">Search:</label>\n\n    {{ text_field(\"q\") }}\n\n    {{ submit_button(\"Search\") }}\n{{ endForm() }}\n```\n\nPhalcon also provides a [*form builder*](forms) to create forms in an object-oriented manner.\n\n## Helpers to Generate Form Elements\n\nPhalcon provides a series of helpers to generate form elements such as text fields, buttons and more. The first parameter of each helper is always the name of the element to be generated. When the form is submitted, the name will be passed along with the form data. In a controller you can get these values using the same name by using the `getPost()` and `getQuery()` methods on the request object (`$this->request`).\n\n``` html\n<?php echo $this->tag->textField(\"username\") ?>\n\n<?php echo $this->tag->textArea(\n    [\n        \"comment\",\n        \"This is the content of the text-area\",\n        \"cols\" => \"6\",\n        \"rows\" => 20,\n    ]\n) ?>\n\n<?php echo $this->tag->passwordField(\n    [\n        \"password\",\n        \"size\" => 30,\n    ]\n) ?>\n\n<?php echo $this->tag->hiddenField(\n    [\n        \"parent_id\",\n        \"value\" => \"5\",\n    ]\n) ?>\n```\n\nVolt syntax:\n\n``` html\n{{ text_field(\"username\") }}\n\n{{ text_area(\"comment\", \"This is the content\", \"cols\": \"6\", \"rows\": 20) }}\n\n{{ password_field(\"password\", \"size\": 30) }}\n\n{{ hidden_field(\"parent_id\", \"value\": \"5\") }}\n```\n\n## Making Select Boxes\n\nGenerating select boxes (select box) is easy, especially if the related data is stored in PHP associative arrays. The helpers for select elements are `Phalcon\\Tag::select()` and `Phalcon\\Tag::selectStatic()`. `Phalcon\\Tag::select()` has been was specifically designed to work with [*Phalcon\\Mvc\\Model*](models), while `Phalcon\\Tag::selectStatic()` can with PHP arrays.\n\n``` php\n$products = Products::find(\"type = 'vegetables'\");\n\n// Using data from a resultset\necho $this->tag->select(\n    [\n        \"productId\",\n        $products,\n        \"using\" => [\n            \"id\",\n            \"name\",\n        ]\n    ]\n);\n\n// Using data from an array\necho $this->tag->selectStatic(\n    [\n        \"status\",\n        [\n            \"A\" => \"Active\",\n            \"I\" => \"Inactive\",\n        ]\n    ]\n);\n```\n\nThe following HTML will generated:\n\n``` html\n<select id=\"productId\" name=\"productId\">\n    <option value=\"101\">Tomato</option>\n    <option value=\"102\">Lettuce</option>\n    <option value=\"103\">Beans</option>\n</select>\n\n<select id=\"status\" name=\"status\">\n    <option value=\"A\">Active</option>\n    <option value=\"I\">Inactive</option>\n</select>\n```\n\nYou can add an “empty” option to the generated HTML:\n\n``` php\n$products = Products::find(\"type = 'vegetables'\");\n\n// Creating a Select Tag with an empty option\necho $this->tag->select(\n    [\n        \"productId\",\n        $products,\n        \"using\"    => [\n            \"id\",\n            \"name\",\n        ],\n        \"useEmpty\" => true,\n    ]\n);\n```\n\nProduces this HTML:\n\n``` html\n<select id=\"productId\" name=\"productId\">\n    <option value=\"\">Choose..</option>\n    <option value=\"101\">Tomato</option>\n    <option value=\"102\">Lettuce</option>\n    <option value=\"103\">Beans</option>\n</select>\n```\n\n``` php\n$products = Products::find(\"type = 'vegetables'\");\n\n// Creating a Select Tag with an empty option with default text\necho $this->tag->select(\n    [\n        \"productId\",\n        $products,\n        \"using\"      => [\n            \"id\",\n            \"name\",\n        ],\n        \"useEmpty\"   => true,\n        \"emptyText\"  => \"Please, choose one...\",\n        \"emptyValue\" => \"@\",\n    ]\n);\n```\n\n``` html\n<select id=\"productId\" name=\"productId\">\n    <option value=\"@\">Please, choose one..</option>\n    <option value=\"101\">Tomato</option>\n    <option value=\"102\">Lettuce</option>\n    <option value=\"103\">Beans</option>\n</select>\n```\n\nVolt syntax for above example:\n\n``` jinja\n{# Creating a Select Tag with an empty option with default text #}\n{{ select('productId', products, 'using': ['id', 'name'],\n    'useEmpty': true, 'emptyText': 'Please, choose one...', 'emptyValue': '@') }}\n```\n\n## Assigning HTML attributes\n\nAll the helpers accept an array as their first parameter which can contain additional HTML attributes for the element generated.\n\n``` html\n<?php $this->tag->textField(\n    [\n        \"price\",\n        \"size\"        => 20,\n        \"maxlength\"   => 30,\n        \"placeholder\" => \"Enter a price\",\n    ]\n) ?>\n```\n\nor using Volt:\n\n``` jinja\n{{ text_field(\"price\", \"size\": 20, \"maxlength\": 30, \"placeholder\": \"Enter a price\") }}\n```\n\nThe following HTML is generated:\n\n``` html\n<input type=\"text\" name=\"price\" id=\"price\" size=\"20\" maxlength=\"30\"\n    placeholder=\"Enter a price\" />\n```\n\n## Setting Helper Values\n\n### From Controllers\n\nIt is a good programming principle for MVC frameworks to set specific values for form elements in the view. You can set those values directly from the controller using `Phalcon\\Tag::setDefault()`. This helper preloads a value for any helpers present in the view. If any helper in the view has a name that matches the preloaded value, it will use it, unless a value is directly assigned on the helper in the view.\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n        $this->tag->setDefault(\"color\", \"Blue\");\n    }\n}\n```\n\nAt the view, a selectStatic helper matches the same index used to preset the value. In this case “color”:\n\n``` php\necho $this->tag->selectStatic(\n    [\n        \"color\",\n        [\n            \"Yellow\" => \"Yellow\",\n            \"Blue\"   => \"Blue\",\n            \"Red\"    => \"Red\",\n        ]\n    ]\n);\n```\n\nThis will generate the following select tag with the value “Blue” selected:\n\n``` html\n<select id=\"color\" name=\"color\">\n    <option value=\"Yellow\">Yellow</option>\n    <option value=\"Blue\" selected=\"selected\">Blue</option>\n    <option value=\"Red\">Red</option>\n</select>\n```\n\n### From the Request\n\nA special feature that the [*Phalcon\\Tag*](../api/phalcon_tag) helpers have is that they keep the values of form helpers between requests. This way you can easily show validation messages without losing entered data.\n\n### Specifying values directly\n\nEvery form helper supports the parameter “value”. With it you can specify a value for the helper directly. When this parameter is present, any preset value using setDefault() or via request will be ignored.\n\n## Changing dynamically the Document Title\n\n[*Phalcon\\Tag*](../api/phalcon_tag) offers helpers to change dynamically the document title from the controller. The following example demonstrates just that:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function initialize()\n    {\n        $this->tag->setTitle(\"Your Website\");\n    }\n\n    public function indexAction()\n    {\n        $this->tag->prependTitle(\"Index of Posts - \");\n    }\n}\n```\n\n``` html\n<html>\n    <head>\n        <?php echo $this->tag->getTitle(); ?>\n    </head>\n\n    <body>\n\n    </body>\n</html>\n```\n\nThe following HTML will generated:\n\n``` html\n<html>\n    <head>\n        <title>Index of Posts - Your Website</title>\n    </head>\n\n    <body>\n\n    </body>\n</html>\n```\n\n## Static Content Helpers\n\n[*Phalcon\\Tag*](../api/phalcon_tag) also provide helpers to generate tags such as script, link or img. They aid in quick and easy generation of the static resources of your application\n\n### Images\n\n``` php\n// Generate <img src=\"/your-app/img/hello.gif\">\necho $this->tag->image(\"img/hello.gif\");\n\n// Generate <img alt=\"alternative text\" src=\"/your-app/img/hello.gif\">\necho $this->tag->image(\n    [\n       \"img/hello.gif\",\n       \"alt\" => \"alternative text\",\n    ]\n);\n```\n\nVolt syntax:\n\n``` jinja\n{# Generate <img src=\"/your-app/img/hello.gif\"> #}\n{{ image(\"img/hello.gif\") }}\n\n{# Generate <img alt=\"alternative text\" src=\"/your-app/img/hello.gif\"> #}\n{{ image(\"img/hello.gif\", \"alt\": \"alternative text\") }}\n```\n\n### Stylesheets\n\n``` php\n// Generate <link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Rosario\" type=\"text/css\">\necho $this->tag->stylesheetLink(\"http://fonts.googleapis.com/css?family=Rosario\", false);\n\n// Generate <link rel=\"stylesheet\" href=\"/your-app/css/styles.css\" type=\"text/css\">\necho $this->tag->stylesheetLink(\"css/styles.css\");\n```\n\nVolt syntax:\n\n``` jinja\n{# Generate <link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Rosario\" type=\"text/css\"> #}\n{{ stylesheet_link(\"http://fonts.googleapis.com/css?family=Rosario\", false) }}\n\n{# Generate <link rel=\"stylesheet\" href=\"/your-app/css/styles.css\" type=\"text/css\"> #}\n{{ stylesheet_link(\"css/styles.css\") }}\n```\n\n### Javascript\n\n``` php\n// Generate <script src=\"http://localhost/javascript/jquery.min.js\" type=\"text/javascript\"></script>\necho $this->tag->javascriptInclude(\"http://localhost/javascript/jquery.min.js\", false);\n\n// Generate <script src=\"/your-app/javascript/jquery.min.js\" type=\"text/javascript\"></script>\necho $this->tag->javascriptInclude(\"javascript/jquery.min.js\");\n```\n\nVolt syntax:\n\n``` jinja\n{# Generate <script src=\"http://localhost/javascript/jquery.min.js\" type=\"text/javascript\"></script> #}\n{{ javascript_include(\"http://localhost/javascript/jquery.min.js\", false) }}\n\n{# Generate <script src=\"/your-app/javascript/jquery.min.js\" type=\"text/javascript\"></script> #}\n{{ javascript_include(\"javascript/jquery.min.js\") }}\n```\n\n### HTML5 elements - generic HTML helper\n\nPhalcon offers a generic HTML helper that allows the generation of any kind of HTML element. It is up to the developer to produce a valid HTML element name to the helper.\n\n``` php\n// Generate\n// <canvas id=\"canvas1\" width=\"300\" class=\"cnvclass\">\n// This is my canvas\n// </canvas>\necho $this->tag->tagHtml(\"canvas\", [\"id\" => \"canvas1\", \"width\" => \"300\", \"class\" => \"cnvclass\"], false, true, true);\necho \"This is my canvas\";\necho $this->tag->tagHtmlClose(\"canvas\");\n```\n\nVolt syntax:\n\n``` html\n{# Generate\n<canvas id=\"canvas1\" width=\"300\" class=\"cnvclass\">\nThis is my canvas\n</canvas> #}\n{{ tag_html(\"canvas\", [\"id\": \"canvas1\", width\": \"300\", \"class\": \"cnvclass\"], false, true, true) }}\n    This is my canvas\n{{ tag_html_close(\"canvas\") }}\n```\n\n## Tag Service\n\n[*Phalcon\\Tag*](../api/phalcon_tag) is available via the ‘tag’ service, this means you can access it from any part of the application where the services container is located:\n\n``` php\n<?php echo $this->tag->linkTo(\"pages/about\", \"About\") ?>\n```\n\nYou can easily add new helpers to a custom component replacing the service ‘tag’ in the services container:\n\n``` php\nuse Phalcon\\Tag;\n\nclass MyTags extends Tag\n{\n    // ...\n\n    // Create a new helper\n    public static function myAmazingHelper($parameters)\n    {\n        // ...\n    }\n\n    // Override an existing method\n    public static function textField($parameters)\n    {\n        // ...\n    }\n}\n```\n\nThen change the definition of the service ‘tag’:\n\n``` php\n$di[\"tag\"] = function () {\n    return new MyTags();\n};\n```\n\n## Creating your own helpers\n\nYou can easily create your own helpers. First, start by creating a new folder within the same directory as your controllers and models. Give it a title that is relative to what you are creating. For our example here, we can call it “customhelpers”. Next we will create a new file titled `MyTags.php` within this new directory. At this point, we have a structure that looks similar to : `/app/customhelpers/MyTags.php`. In `MyTags.php`, we will extend the [*Phalcon\\Tag*](../api/phalcon_tag) and implement your own helper. Below is a simple example of a custom helper:\n\n``` php\nuse Phalcon\\Tag;\n\nclass MyTags extends Tag\n{\n    /**\n     * Generates a widget to show a HTML5 audio tag\n     *\n     * @param array\n     * @return string\n     */\n    public static function audioField($parameters)\n    {\n        // Converting parameters to array if it is not\n        if (!is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        // Determining attributes \"id\" and \"name\"\n        if (!isset($parameters[0])) {\n            $parameters[0] = $parameters[\"id\"];\n        }\n\n        $id = $parameters[0];\n\n        if (!isset($parameters[\"name\"])) {\n            $parameters[\"name\"] = $id;\n        } else {\n            if (!$parameters[\"name\"]) {\n                $parameters[\"name\"] = $id;\n            }\n        }\n\n        // Determining widget value,\n        // \\Phalcon\\Tag::setDefault() allows to set the widget value\n        if (isset($parameters[\"value\"])) {\n            $value = $parameters[\"value\"];\n\n            unset($parameters[\"value\"]);\n        } else {\n            $value = self::getValue($id);\n        }\n\n        // Generate the tag code\n        $code = '<audio id=\"' . $id . '\" value=\"' . $value . '\" ';\n\n        foreach ($parameters as $key => $attributeValue) {\n            if (!is_integer($key)) {\n                $code.= $key . '=\"' . $attributeValue . '\" ';\n            }\n        }\n\n        $code.=\" />\";\n\n        return $code;\n    }\n}\n```\n\nAfter creating our custom helper, we will autoload the new directory that contains our helper class from our “index.php” located in the public directory.\n\n``` php\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Exception as PhalconException;\n\ntry {\n    $loader = new Loader();\n\n    $loader->registerDirs(\n        [\n            \"../app/controllers\",\n            \"../app/models\",\n            \"../app/customhelpers\", // Add the new helpers folder\n        ]\n    );\n\n    $loader->register();\n\n    $di = new FactoryDefault();\n\n    // Assign our new tag a definition so we can call it\n    $di->set(\n        \"MyTags\",\n        function () {\n            return new MyTags();\n        }\n    );\n\n    $application = new Application($di);\n\n    $response = $application->handle();\n\n    $response->send();\n} catch (PhalconException $e) {\n    echo \"PhalconException: \", $e->getMessage();\n}\n```\n\nNow you are ready to use your new helper within your views:\n\n``` php\n<body>\n\n    <?php\n\n    echo MyTags::audioField(\n        [\n            \"name\" => \"test\",\n            \"id\"   => \"audio_test\",\n            \"src\"  => \"/path/to/audio.mp3\",\n        ]\n    );\n\n    ?>\n\n</body>\n```\n\nIn next chapter, we’ll talk about [*Volt*](volt) a faster template engine for PHP, where you can use a more friendly syntax for using helpers provided by [*Phalcon\\Tag*](../api/phalcon_tag).\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/tags.html](https://docs.phalconphp.com/en/latest/reference/tags.html)"
- name: 'Volt: Template Engine'
  id: reference/volt
  summary: Volt is an ultra-fast and designer friendly templating language written in C for PHP
  description: "# Volt: Template Engine\n\nVolt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.\n\nVolt is inspired by [Jinja](http://jinja.pocoo.org/), originally created by [Armin Ronacher](https://github.com/mitsuhiko). Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt’s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.\n\n## Introduction\n\nVolt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:\n\n``` html\n{# app/views/products/show.volt #}\n\n{% block last_products %}\n\n{% for product in products %}\n    * Name: {{ product.name|e }}\n    {% if product.status === \"Active\" %}\n       Price: {{ product.price + product.taxes/100 }}\n    {% endif  %}\n{% endfor  %}\n\n{% endblock %}\n```\n\n## Activating Volt\n\nAs with other templating engines, you may register Volt in the view component, using a new extension or reusing the standard .phtml:\n\n``` php\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n// Register Volt as a service\n$di->set(\n    \"voltService\",\n    function ($view, $di) {\n        $volt = new Volt($view, $di);\n\n        $volt->setOptions(\n            [\n                \"compiledPath\"      => \"../app/compiled-templates/\",\n                \"compiledExtension\" => \".compiled\",\n            ]\n        );\n\n        return $volt;\n    }\n);\n\n// Register Volt as template engine\n$di->set(\n    \"view\",\n    function () {\n        $view = new View();\n\n        $view->setViewsDir(\"../app/views/\");\n\n        $view->registerEngines(\n            [\n                \".volt\" => \"voltService\",\n            ]\n        );\n\n        return $view;\n    }\n);\n```\n\nUse the standard ”.phtml” extension:\n\n``` php\n$view->registerEngines(\n    [\n        \".phtml\" => \"voltService\",\n    ]\n);\n```\n\nYou don’t have to specify the Volt Service in the DI; you can also use the Volt engine with the default settings:\n\n``` php\n$view->registerEngines(\n    [\n        \".volt\" => \"Phalcon\\\\Mvc\\\\View\\\\Engine\\\\Volt\",\n    ]\n);\n```\n\nIf you do not want to reuse Volt as a service, you can pass an anonymous function to register the engine instead of a service name:\n\n``` php\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n// Register Volt as template engine with an anonymous function\n$di->set(\n    \"view\",\n    function () {\n        $view = new \\Phalcon\\Mvc\\View();\n\n        $view->setViewsDir(\"../app/views/\");\n\n        $view->registerEngines(\n            [\n                \".volt\" => function ($view, $di) {\n                    $volt = new Volt($view, $di);\n\n                    // Set some options here\n\n                    return $volt;\n                }\n            ]\n        );\n\n        return $view;\n    }\n);\n```\n\nThe following options are available in Volt:\n\n| Option              | Description                                                                                                                  | Default |\n|---------------------|------------------------------------------------------------------------------------------------------------------------------|---------|\n| `compiledPath`      | A writable path where the compiled PHP templates will be placed                                                              | ./      |\n| `compiledExtension` | An additional extension appended to the compiled PHP file                                                                    | .php    |\n| `compiledSeparator` | Volt replaces the directory separators / and \\\\ by this separator in order to create a single file in the compiled directory | %%      |\n| `stat`              | Whether Phalcon must check if exists differences between the template file and its compiled path                             | true    |\n| `compileAlways`     | Tell Volt if the templates must be compiled in each request or only when they change                                         | false   |\n| `prefix`            | Allows to prepend a prefix to the templates in the compilation path                                                          | null    |\n| `autoescape`        | Enables globally autoescape of HTML                                                                                          | false   |\n\nThe compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:\n\n``` php\n// Just append the .php extension to the template path\n// leaving the compiled templates in the same directory\n$volt->setOptions(\n    [\n        \"compiledPath\" => function ($templatePath) {\n            return $templatePath . \".php\";\n        }\n    ]\n);\n\n// Recursively create the same structure in another directory\n$volt->setOptions(\n    [\n        \"compiledPath\" => function ($templatePath) {\n            $dirName = dirname($templatePath);\n\n            if (!is_dir(\"cache/\" . $dirName)) {\n                mkdir(\"cache/\" . $dirName);\n            }\n\n            return \"cache/\" . $dirName . \"/\". $templatePath . \".php\";\n        }\n    ]\n);\n```\n\n## Basic Usage\n\nA view consists of Volt code, PHP and HTML. A set of special delimiters is available to enter into Volt mode. `{%`` ``...`` ``%}` is used to execute statements such as for-loops or assign values and `{{`` ``...`` ``}}`, prints the result of an expression to the template.\n\nBelow is a minimal template that illustrates a few basics:\n\n``` html\n{# app/views/posts/show.phtml #}\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{ title }} - An example blog</title>\n    </head>\n    <body>\n\n        {% if show_navigation %}\n            <ul id=\"navigation\">\n                {% for item in menu %}\n                    <li>\n                        <a href=\"{{ item.href }}\">\n                            {{ item.caption }}\n                        </a>\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n\n        <h1>{{ post.title }}</h1>\n\n        <div class=\"content\">\n            {{ post.content }}\n        </div>\n\n    </body>\n</html>\n```\n\nUsing [*Phalcon\\Mvc\\View*](../api/phalcon_mvc_view) you can pass variables from the controller to the views. In the above example, four variables were passed to the view: `show_navigation`, `menu`, `title` and `post`:\n\n``` php\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function showAction()\n    {\n        $post = Post::findFirst();\n        $menu = Menu::findFirst();\n\n        $this->view->show_navigation = true;\n        $this->view->menu            = $menu;\n        $this->view->title           = $post->title;\n        $this->view->post            = $post;\n\n        // Or...\n\n        $this->view->setVar(\"show_navigation\", true);\n        $this->view->setVar(\"menu\",            $menu);\n        $this->view->setVar(\"title\",           $post->title);\n        $this->view->setVar(\"post\",            $post);\n    }\n}\n```\n\n## Variables\n\nObject variables may have attributes which can be accessed using the syntax: `foo.bar`. If you are passing arrays, you have to use the square bracket syntax: `foo['bar']`\n\n``` jinja\n{{ post.title }} {# for $post->title #}\n{{ post['title'] }} {# for $post['title'] #}\n```\n\n## Filters\n\nVariables can be formatted or modified using filters. The pipe operator `|` is used to apply filters to variables:\n\n``` jinja\n{{ post.title|e }}\n{{ post.content|striptags }}\n{{ name|capitalize|trim }}\n```\n\nThe following is the list of available built-in filters in Volt:\n\n| Filter             | Description                                                                                                                       |\n|--------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| `e`                | Applies `Phalcon\\Escaper->escapeHtml()` to the value                                                                              |\n| `escape`           | Applies `Phalcon\\Escaper->escapeHtml()` to the value                                                                              |\n| `escape_css`       | Applies `Phalcon\\Escaper->escapeCss()` to the value                                                                               |\n| `escape_js`        | Applies `Phalcon\\Escaper->escapeJs()` to the value                                                                                |\n| `escape_attr`      | Applies `Phalcon\\Escaper->escapeHtmlAttr()` to the value                                                                          |\n| `trim`             | Applies the [trim](http://php.net/manual/en/function.trim.php) PHP function to the value. Removing extra spaces                   |\n| `left_trim`        | Applies the [ltrim](http://php.net/manual/en/function.ltrim.php) PHP function to the value. Removing extra spaces                 |\n| `right_trim`       | Applies the [rtrim](http://php.net/manual/en/function.rtrim.php) PHP function to the value. Removing extra spaces                 |\n| `striptags`        | Applies the [striptags](http://php.net/manual/en/function.striptags.php) PHP function to the value. Removing HTML tags            |\n| `slashes`          | Applies the [slashes](http://php.net/manual/en/function.slashes.php) PHP function to the value. Escaping values                   |\n| `stripslashes`     | Applies the [stripslashes](http://php.net/manual/en/function.stripslashes.php) PHP function to the value. Removing escaped quotes |\n| `capitalize`       | Capitalizes a string by applying the [ucwords](http://php.net/manual/en/function.ucwords.php) PHP function to the value           |\n| `lower`            | Change the case of a string to lowercase                                                                                          |\n| `upper`            | Change the case of a string to uppercase                                                                                          |\n| `length`           | Counts the string length or how many items are in an array or object                                                              |\n| `nl2br`            | Changes newlines \\n by line breaks (\\<br /\\>). Uses the PHP function [nl2br](http://php.net/manual/en/function.nl2br.php)         |\n| `sort`             | Sorts an array using the PHP function [asort](http://php.net/manual/en/function.asort.php)                                        |\n| `keys`             | Returns the array keys using [array_keys](http://php.net/manual/en/function.array-keys.php)                                       |\n| `join`             | Joins the array parts using a separator [join](http://php.net/manual/en/function.join.php)                                        |\n| `format`           | Formats a string using [sprintf](http://php.net/manual/en/function.sprintf.php).                                                  |\n| `json_encode`      | Converts a value into its [JSON](http://php.net/manual/en/function.json-encode.php) representation                                |\n| `json_decode`      | Converts a value from its [JSON](http://php.net/manual/en/function.json-encode.php) representation to a PHP representation        |\n| `abs`              | Applies the [abs](http://php.net/manual/en/function.abs.php) PHP function to a value.                                             |\n| `url_encode`       | Applies the [urlencode](http://php.net/manual/en/function.urlencode.php) PHP function to the value                                |\n| `default`          | Sets a default value in case that the evaluated expression is empty (is not set or evaluates to a falsy value)                    |\n| `convert_encoding` | Converts a string from one charset to another                                                                                     |\n\nExamples:\n\n``` jinja\n{# e or escape filter #}\n{{ \"<h1>Hello<h1>\"|e }}\n{{ \"<h1>Hello<h1>\"|escape }}\n\n{# trim filter #}\n{{ \"   hello   \"|trim }}\n\n{# striptags filter #}\n{{ \"<h1>Hello<h1>\"|striptags }}\n\n{# slashes filter #}\n{{ \"'this is a string'\"|slashes }}\n\n{# stripslashes filter #}\n{{ \"\\'this is a string\\'\"|stripslashes }}\n\n{# capitalize filter #}\n{{ \"hello\"|capitalize }}\n\n{# lower filter #}\n{{ \"HELLO\"|lower }}\n\n{# upper filter #}\n{{ \"hello\"|upper }}\n\n{# length filter #}\n{{ \"robots\"|length }}\n{{ [1, 2, 3]|length }}\n\n{# nl2br filter #}\n{{ \"some\\ntext\"|nl2br }}\n\n{# sort filter #}\n{% set sorted = [3, 1, 2]|sort %}\n\n{# keys filter #}\n{% set keys = ['first': 1, 'second': 2, 'third': 3]|keys %}\n\n{# join filter #}\n{% set joined = \"a\"..\"z\"|join(\",\") %}\n\n{# format filter #}\n{{ \"My real name is %s\"|format(name) }}\n\n{# json_encode filter #}\n{% set encoded = robots|json_encode %}\n\n{# json_decode filter #}\n{% set decoded = '{\"one\":1,\"two\":2,\"three\":3}'|json_decode %}\n\n{# url_encode filter #}\n{{ post.permanent_link|url_encode }}\n\n{# convert_encoding filter #}\n{{ \"désolé\"|convert_encoding('utf8', 'latin1') }}\n```\n\n## Comments\n\nComments may also be added to a template using the `{#`` ``...`` ``#}` delimiters. All text inside them is just ignored in the final output:\n\n``` jinja\n{# note: this is a comment\n    {% set price = 100; %}\n#}\n```\n\n## List of Control Structures\n\nVolt provides a set of basic but powerful control structures for use in templates:\n\n### For\n\nLoop over each item in a sequence. The following example shows how to traverse a set of “robots” and print his/her name:\n\n``` html\n<h1>Robots</h1>\n<ul>\n    {% for robot in robots %}\n        <li>\n            {{ robot.name|e }}\n        </li>\n    {% endfor %}\n</ul>\n```\n\nfor-loops can also be nested:\n\n``` html\n<h1>Robots</h1>\n{% for robot in robots %}\n    {% for part in robot.parts %}\n        Robot: {{ robot.name|e }} Part: {{ part.name|e }} <br />\n    {% endfor %}\n{% endfor %}\n```\n\nYou can get the element “keys” as in the PHP counterpart using the following syntax:\n\n``` html\n{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for name, value in numbers %}\n    Name: {{ name }} Value: {{ value }}\n{% endfor %}\n```\n\nAn “if” evaluation can be optionally set:\n\n``` html\n{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for value in numbers if value < 2 %}\n    Value: {{ value }}\n{% endfor %}\n\n{% for name, value in numbers if name !== 'two' %}\n    Name: {{ name }} Value: {{ value }}\n{% endfor %}\n```\n\nIf an ‘else’ is defined inside the ‘for’, it will be executed if the expression in the iterator result in zero iterations:\n\n``` html\n<h1>Robots</h1>\n{% for robot in robots %}\n    Robot: {{ robot.name|e }} Part: {{ part.name|e }} <br />\n{% else %}\n    There are no robots to show\n{% endfor %}\n```\n\nAlternative syntax:\n\n``` html\n<h1>Robots</h1>\n{% for robot in robots %}\n    Robot: {{ robot.name|e }} Part: {{ part.name|e }} <br />\n{% elsefor %}\n    There are no robots to show\n{% endfor %}\n```\n\n### Loop Controls\n\nThe ‘break’ and ‘continue’ statements can be used to exit from a loop or force an iteration in the current block:\n\n``` html\n{# skip the even robots #}\n{% for index, robot in robots %}\n    {% if index is even %}\n        {% continue %}\n    {% endif %}\n    ...\n{% endfor %}\n```\n\n``` html\n{# exit the foreach on the first even robot #}\n{% for index, robot in robots %}\n    {% if index is even %}\n        {% break %}\n    {% endif %}\n    ...\n{% endfor %}\n```\n\n### If\n\nAs PHP, an “if” statement checks if an expression is evaluated as true or false:\n\n``` html\n<h1>Cyborg Robots</h1>\n<ul>\n    {% for robot in robots %}\n        {% if robot.type === \"cyborg\" %}\n            <li>{{ robot.name|e }}</li>\n        {% endif %}\n    {% endfor %}\n</ul>\n```\n\nThe else clause is also supported:\n\n``` html\n<h1>Robots</h1>\n<ul>\n    {% for robot in robots %}\n        {% if robot.type === \"cyborg\" %}\n            <li>{{ robot.name|e }}</li>\n        {% else %}\n            <li>{{ robot.name|e }} (not a cyborg)</li>\n        {% endif %}\n    {% endfor %}\n</ul>\n```\n\nThe ‘elseif’ control flow structure can be used together with if to emulate a ‘switch’ block:\n\n``` html\n{% if robot.type === \"cyborg\" %}\n    Robot is a cyborg\n{% elseif robot.type === \"virtual\" %}\n    Robot is virtual\n{% elseif robot.type === \"mechanical\" %}\n    Robot is mechanical\n{% endif %}\n```\n\n### Loop Context\n\nA special variable is available inside ‘for’ loops providing you information about\n\n| Variable         | Description                                                   |\n|------------------|---------------------------------------------------------------|\n| `loop.index`     | The current iteration of the loop. (1 indexed)                |\n| `loop.index0`    | The current iteration of the loop. (0 indexed)                |\n| `loop.revindex`  | The number of iterations from the end of the loop (1 indexed) |\n| `loop.revindex0` | The number of iterations from the end of the loop (0 indexed) |\n| `loop.first`     | True if in the first iteration.                               |\n| `loop.last`      | True if in the last iteration.                                |\n| `loop.length`    | The number of items to iterate                                |\n\n``` html\n{% for robot in robots %}\n    {% if loop.first %}\n        <table>\n            <tr>\n                <th>#</th>\n                <th>Id</th>\n                <th>Name</th>\n            </tr>\n    {% endif %}\n            <tr>\n                <td>{{ loop.index }}</td>\n                <td>{{ robot.id }}</td>\n                <td>{{ robot.name }}</td>\n            </tr>\n    {% if loop.last %}\n        </table>\n    {% endif %}\n{% endfor %}\n```\n\n## Assignments\n\nVariables may be changed in a template using the instruction “set”:\n\n``` html\n{% set fruits = ['Apple', 'Banana', 'Orange'] %}\n\n{% set name = robot.name %}\n```\n\nMultiple assignments are allowed in the same instruction:\n\n``` html\n{% set fruits = ['Apple', 'Banana', 'Orange'], name = robot.name, active = true %}\n```\n\nAdditionally, you can use compound assignment operators:\n\n``` html\n{% set price += 100.00 %}\n\n{% set age *= 5 %}\n```\n\nThe following operators are available:\n\n| Operator | Description               |\n|----------|---------------------------|\n| =        | Standard Assignment       |\n| +=       | Addition assignment       |\n| -=       | Subtraction assignment    |\n| \\*=      | Multiplication assignment |\n| /=       | Division assignment       |\n\n## Expressions\n\nVolt provides a basic set of expression support, including literals and common operators.\n\nA expression can be evaluated and printed using the ‘{{‘ and ‘}}’ delimiters:\n\n``` html\n{{ (1 + 1) * 2 }}\n```\n\nIf an expression needs to be evaluated without be printed the ‘do’ statement can be used:\n\n``` html\n{% do (1 + 1) * 2 %}\n```\n\n### Literals\n\nThe following literals are supported:\n\n| Filter             | Description                                                        |\n|--------------------|--------------------------------------------------------------------|\n| “this is a string” | Text between double quotes or single quotes are handled as strings |\n| 100.25             | Numbers with a decimal part are handled as doubles/floats          |\n| 100                | Numbers without a decimal part are handled as integers             |\n| false              | Constant “false” is the boolean false value                        |\n| true               | Constant “true” is the boolean true value                          |\n| null               | Constant “null” is the Null value                                  |\n\n### Arrays\n\nWhether you’re using PHP 5.3 or \\>= 5.4 you can create arrays by enclosing a list of values in square brackets:\n\n``` html\n{# Simple array #}\n{{ ['Apple', 'Banana', 'Orange'] }}\n\n{# Other simple array #}\n{{ ['Apple', 1, 2.5, false, null] }}\n\n{# Multi-Dimensional array #}\n{{ [[1, 2], [3, 4], [5, 6]] }}\n\n{# Hash-style array #}\n{{ ['first': 1, 'second': 4/2, 'third': '3'] }}\n```\n\nCurly braces also can be used to define arrays or hashes:\n\n``` html\n{% set myArray = {'Apple', 'Banana', 'Orange'} %}\n{% set myHash  = {'first': 1, 'second': 4/2, 'third': '3'} %}\n```\n\n### Math\n\nYou may make calculations in templates using the following operators:\n\n| Operator | Description                                                                             |\n|----------|-----------------------------------------------------------------------------------------|\n| `+`      | Perform an adding operation. `{{`` ``2`` ``+`` ``3`` ``}}` returns 5                    |\n| `-`      | Perform a substraction operation `{{`` ``2`` ``-`` ``3`` ``}}` returns -1               |\n| `*`      | Perform a multiplication operation `{{`` ``2`` ``*`` ``3`` ``}}` returns 6              |\n| `/`      | Perform a division operation `{{`` ``10`` ``/`` ``2`` ``}}` returns 5                   |\n| `%`      | Calculate the remainder of an integer division `{{`` ``10`` ``%`` ``3`` ``}}` returns 1 |\n\n### Comparisons\n\nThe following comparison operators are available:\n\n| Operator | Description                                                       |\n|----------|-------------------------------------------------------------------|\n| `==`     | Check whether both operands are equal                             |\n| `!=`     | Check whether both operands aren’t equal                          |\n| `<>`     | Check whether both operands aren’t equal                          |\n| `>`      | Check whether left operand is greater than right operand          |\n| `<`      | Check whether left operand is less than right operand             |\n| `<=`     | Check whether left operand is less or equal than right operand    |\n| `>=`     | Check whether left operand is greater or equal than right operand |\n| `===`    | Check whether both operands are identical                         |\n| `!==`    | Check whether both operands aren’t identical                      |\n\n### Logic\n\nLogic operators are useful in the “if” expression evaluation to combine multiple tests:\n\n| Operator           | Description                                                       |\n|--------------------|-------------------------------------------------------------------|\n| `or`               | Return true if the left or right operand is evaluated as true     |\n| `and`              | Return true if both left and right operands are evaluated as true |\n| `not`              | Negates an expression                                             |\n| `(`` ``expr`` ``)` | Parenthesis groups expressions                                    |\n\n### Other Operators\n\nAdditional operators seen the following operators are available:\n\n| Operator                          | Description                                                                                 |\n|-----------------------------------|---------------------------------------------------------------------------------------------|\n| `~`                               | Concatenates both operands `{{`` ``\"hello`` ``\"`` ``~`` ``\"world\"`` ``}}`                   |\n| `|`                               | Applies a filter in the right operand to the left `{{`` ``\"hello\"|uppercase`` ``}}`         |\n| `..`                              | Creates a range `{{`` ``'a'..'z'`` ``}}` `{{`` ``1..10`` ``}}`                              |\n| `is`                              | Same as == (equals), also performs tests                                                    |\n| `in`                              | To check if an expression is contained into other expressions `if`` ``\"a\"`` ``in`` ``\"abc\"` |\n| `is`` ``not`                      | Same as != (not equals)                                                                     |\n| `'a'`` ``?`` ``'b'`` ``:`` ``'c'` | Ternary operator. The same as the PHP ternary operator                                      |\n| `++`                              | Increments a value                                                                          |\n| `--`                              | Decrements a value                                                                          |\n\nThe following example shows how to use operators:\n\n``` html\n{% set robots = ['Voltron', 'Astro Boy', 'Terminator', 'C3PO'] %}\n\n{% for index in 0..robots|length %}\n    {% if robots[index] is defined %}\n        {{ \"Name: \" ~ robots[index] }}\n    {% endif %}\n{% endfor %}\n```\n\n## Tests\n\nTests can be used to test if a variable has a valid expected value. The operator “is” is used to perform the tests:\n\n``` html\n{% set robots = ['1': 'Voltron', '2': 'Astro Boy', '3': 'Terminator', '4': 'C3PO'] %}\n\n{% for position, name in robots %}\n    {% if position is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n```\n\nThe following built-in tests are available in Volt:\n\n| Test          | Description                                                          |\n|---------------|----------------------------------------------------------------------|\n| `defined`     | Checks if a variable is defined (`isset()`)                          |\n| `empty`       | Checks if a variable is empty                                        |\n| `even`        | Checks if a numeric value is even                                    |\n| `odd`         | Checks if a numeric value is odd                                     |\n| `numeric`     | Checks if value is numeric                                           |\n| `scalar`      | Checks if value is scalar (not an array or object)                   |\n| `iterable`    | Checks if a value is iterable. Can be traversed by a “for” statement |\n| `divisibleby` | Checks if a value is divisible by other value                        |\n| `sameas`      | Checks if a value is identical to other value                        |\n| `type`        | Checks if a value is of the specified type                           |\n\nMore examples:\n\n``` html\n{% if robot is defined %}\n    The robot variable is defined\n{% endif %}\n\n{% if robot is empty %}\n    The robot is null or isn't defined\n{% endif %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 3: 'Bender'] %}\n    {% if key is even %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 3: 'Bender'] %}\n    {% if key is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 'third': 'Bender'] %}\n    {% if key is numeric %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% set robots = [1: 'Voltron', 2: 'Astroy Boy'] %}\n{% if robots is iterable %}\n    {% for robot in robots %}\n        ...\n    {% endfor %}\n{% endif %}\n\n{% set world = \"hello\" %}\n{% if world is sameas(\"hello\") %}\n    {{ \"it's hello\" }}\n{% endif %}\n\n{% set external = false %}\n{% if external is type('boolean') %}\n    {{ \"external is false or true\" }}\n{% endif %}\n```\n\n## Macros\n\nMacros can be used to reuse logic in a template, they act as PHP functions, can receive parameters and return values:\n\n``` html\n{# Macro \"display a list of links to related topics\" #}\n{%- macro related_bar(related_links) %}\n    <ul>\n        {%- for link in related_links %}\n            <li>\n                <a href=\"{{ url(link.url) }}\" title=\"{{ link.title|striptags }}\">\n                    {{ link.text }}\n                </a>\n            </li>\n        {%- endfor %}\n    </ul>\n{%- endmacro %}\n\n{# Print related links #}\n{{ related_bar(links) }}\n\n<div>This is the content</div>\n\n{# Print related links again #}\n{{ related_bar(links) }}\n```\n\nWhen calling macros, parameters can be passed by name:\n\n``` html\n{%- macro error_messages(message, field, type) %}\n    <div>\n        <span class=\"error-type\">{{ type }}</span>\n        <span class=\"error-field\">{{ field }}</span>\n        <span class=\"error-message\">{{ message }}</span>\n    </div>\n{%- endmacro %}\n\n{# Call the macro #}\n{{ error_messages('type': 'Invalid', 'message': 'The name is invalid', 'field': 'name') }}\n```\n\nMacros can return values:\n\n``` html\n{%- macro my_input(name, class) %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '<p>' ~ my_input('name', 'input-text') ~ '</p>' }}\n```\n\nAnd receive optional parameters:\n\n``` html\n{%- macro my_input(name, class=\"input-text\") %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '<p>' ~ my_input('name') ~ '</p>' }}\n{{ '<p>' ~ my_input('name', 'input-text') ~ '</p>' }}\n```\n\n## Using Tag Helpers\n\nVolt is highly integrated with [*Phalcon\\Tag*](tags), so it’s easy to use the helpers provided by that component in a Volt template:\n\n``` html\n{{ javascript_include(\"js/jquery.js\") }}\n\n{{ form('products/save', 'method': 'post') }}\n\n    <label for=\"name\">Name</label>\n    {{ text_field(\"name\", \"size\": 32) }}\n\n    <label for=\"type\">Type</label>\n    {{ select(\"type\", productTypes, 'using': ['id', 'name']) }}\n\n    {{ submit_button('Send') }}\n\n{{ end_form() }}\n```\n\nThe following PHP is generated:\n\n``` html\n<?php echo Phalcon\\Tag::javascriptInclude(\"js/jquery.js\") ?>\n\n<?php echo Phalcon\\Tag::form(array('products/save', 'method' => 'post')); ?>\n\n    <label for=\"name\">Name</label>\n    <?php echo Phalcon\\Tag::textField(array('name', 'size' => 32)); ?>\n\n    <label for=\"type\">Type</label>\n    <?php echo Phalcon\\Tag::select(array('type', $productTypes, 'using' => array('id', 'name'))); ?>\n\n    <?php echo Phalcon\\Tag::submitButton('Send'); ?>\n\n{{ end_form() }}\n```\n\nTo call a [*Phalcon\\Tag*](../api/phalcon_tag) helper, you only need to call an uncamelized version of the method:\n\n| Method                           | Volt function        |\n|----------------------------------|----------------------|\n| `Phalcon\\Tag::linkTo`            | `link_to`            |\n| `Phalcon\\Tag::textField`         | `text_field`         |\n| `Phalcon\\Tag::passwordField`     | `password_field`     |\n| `Phalcon\\Tag::hiddenField`       | `hidden_field`       |\n| `Phalcon\\Tag::fileField`         | `file_field`         |\n| `Phalcon\\Tag::checkField`        | `check_field`        |\n| `Phalcon\\Tag::radioField`        | `radio_field`        |\n| `Phalcon\\Tag::dateField`         | `date_field`         |\n| `Phalcon\\Tag::emailField`        | `email_field`        |\n| `Phalcon\\Tag::numericField`      | `numeric_field`      |\n| `Phalcon\\Tag::submitButton`      | `submit_button`      |\n| `Phalcon\\Tag::selectStatic`      | `select_static`      |\n| `Phalcon\\Tag::select`            | `select`             |\n| `Phalcon\\Tag::textArea`          | `text_area`          |\n| `Phalcon\\Tag::form`              | `form`               |\n| `Phalcon\\Tag::endForm`           | `end_form`           |\n| `Phalcon\\Tag::getTitle`          | `get_title`          |\n| `Phalcon\\Tag::stylesheetLink`    | `stylesheet_link`    |\n| `Phalcon\\Tag::javascriptInclude` | `javascript_include` |\n| `Phalcon\\Tag::image`             | `image`              |\n| `Phalcon\\Tag::friendlyTitle`     | `friendly_title`     |\n\n## Functions\n\nThe following built-in functions are available in Volt:\n\n| Name          | Description                                                 |\n|---------------|-------------------------------------------------------------|\n| `content`     | Includes the content produced in a previous rendering stage |\n| `get_content` | Same as `content`                                           |\n| `partial`     | Dynamically loads a partial view in the current template    |\n| `super`       | Render the contents of the parent block                     |\n| `time`        | Calls the PHP function with the same name                   |\n| `date`        | Calls the PHP function with the same name                   |\n| `dump`        | Calls the PHP function `var_dump()`                         |\n| `version`     | Returns the current version of the framework                |\n| `constant`    | Reads a PHP constant                                        |\n| `url`         | Generate a URL using the ‘url’ service                      |\n\n## View Integration\n\nAlso, Volt is integrated with [*Phalcon\\Mvc\\View*](views), you can play with the view hierarchy and include partials as well:\n\n``` html\n{{ content() }}\n\n<!-- Simple include of a partial -->\n<div id=\"footer\">{{ partial(\"partials/footer\") }}</div>\n\n<!-- Passing extra variables -->\n<div id=\"footer\">{{ partial(\"partials/footer\", ['links': links]) }}</div>\n```\n\nA partial is included in runtime, Volt also provides “include”, this compiles the content of a view and returns its contents as part of the view which was included:\n\n``` html\n{# Simple include of a partial #}\n<div id=\"footer\">\n    {% include \"partials/footer\" %}\n</div>\n\n{# Passing extra variables #}\n<div id=\"footer\">\n    {% include \"partials/footer\" with ['links': links] %}\n</div>\n```\n\n### Include\n\n‘include’ has a special behavior that will help us improve performance a bit when using Volt, if you specify the extension when including the file and it exists when the template is compiled, Volt can inline the contents of the template in the parent template where it’s included. Templates aren’t inlined if the ‘include’ have variables passed with ‘with’:\n\n``` html\n{# The contents of 'partials/footer.volt' is compiled and inlined #}\n<div id=\"footer\">\n    {% include \"partials/footer.volt\" %}\n</div>\n```\n\n### Partial vs Include\n\nKeep the following points in mind when choosing to use the “partial” function or “include”:\n\n- ‘Partial’ allows you to include templates made in Volt and in other template engines as well\n- ‘Partial’ allows you to pass an expression like a variable allowing to include the content of other view dynamically\n- ‘Partial’ is better if the content that you have to include changes frequently\n- ‘Include’ copies the compiled content into the view which improves the performance\n- ‘Include’ only allows to include templates made with Volt\n- ‘Include’ requires an existing template at compile time\n\n## Template Inheritance\n\nWith template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define *blocks* than can be overridden by a child template. Let’s pretend that we have the following base template:\n\n``` html\n{# templates/base.volt #}\n<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <link rel=\"stylesheet\" href=\"style.css\" />\n        {% endblock %}\n\n        <title>{% block title %}{% endblock %} - My Webpage</title>\n    </head>\n\n    <body>\n        <div id=\"content\">{% block content %}{% endblock %}</div>\n\n        <div id=\"footer\">\n            {% block footer %}&copy; Copyright 2015, All rights reserved.{% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nFrom other template we could extend the base template replacing the blocks:\n\n``` html\n{% extends \"templates/base.volt\" %}\n\n{% block title %}Index{% endblock %}\n\n{% block head %}<style type=\"text/css\">.important { color: #336699; }</style>{% endblock %}\n\n{% block content %}\n    <h1>Index</h1>\n    <p class=\"important\">Welcome on my awesome homepage.</p>\n{% endblock %}\n```\n\nNot all blocks must be replaced at a child template, only those that are needed. The final output produced will be the following:\n\n``` html\n<!DOCTYPE html>\n<html>\n    <head>\n        <style type=\"text/css\">.important { color: #336699; }</style>\n\n        <title>Index - My Webpage</title>\n    </head>\n\n    <body>\n        <div id=\"content\">\n            <h1>Index</h1>\n            <p class=\"important\">Welcome on my awesome homepage.</p>\n        </div>\n\n        <div id=\"footer\">\n            &copy; Copyright 2015, All rights reserved.\n        </div>\n    </body>\n</html>\n```\n\n### Multiple Inheritance\n\nExtended templates can extend other templates. The following example illustrates this:\n\n``` html\n{# main.volt #}\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Title</title>\n    </head>\n\n    <body>\n        {% block content %}{% endblock %}\n    </body>\n</html>\n```\n\nTemplate “layout.volt” extends “main.volt”\n\n``` html\n{# layout.volt #}\n{% extends \"main.volt\" %}\n\n{% block content %}\n\n    <h1>Table of contents</h1>\n\n{% endblock %}\n```\n\nFinally a view that extends “layout.volt”:\n\n``` html\n{# index.volt #}\n{% extends \"layout.volt\" %}\n\n{% block content %}\n\n    {{ super() }}\n\n    <ul>\n        <li>Some option</li>\n        <li>Some other option</li>\n    </ul>\n\n{% endblock %}\n```\n\nRendering “index.volt” produces:\n\n``` html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Title</title>\n    </head>\n\n    <body>\n\n        <h1>Table of contents</h1>\n\n        <ul>\n            <li>Some option</li>\n            <li>Some other option</li>\n        </ul>\n\n    </body>\n</html>\n```\n\nNote the call to the function `super()`. With that function it’s possible to render the contents of the parent block.\n\nAs partials, the path set to “extends” is a relative path under the current views directory (i.e. app/views/).\n\n> By default, and for performance reasons, Volt only checks for changes in the children templates to know when to re-compile to plain PHP again, so it is recommended initialize Volt with the option `'compileAlways'`` ``=>`` ``true`. Thus, the templates are compiled always taking into account changes in the parent templates.\n\n## Autoescape mode\n\nYou can enable auto-escaping of all variables printed in a block using the autoescape mode:\n\n``` html\nManually escaped: {{ robot.name|e }}\n\n{% autoescape true %}\n    Autoescaped: {{ robot.name }}\n    {% autoescape false %}\n        No Autoescaped: {{ robot.name }}\n    {% endautoescape %}\n{% endautoescape %}\n```\n\n## Extending Volt\n\nUnlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.\n\nThe Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.\n\n### Functions\n\nFunctions act as normal PHP functions, a valid string name is required as function name. Functions can be added using two strategies, returning a simple string or using an anonymous function. Always is required that the chosen strategy returns a valid PHP string expression:\n\n``` php\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n$volt = new Volt($view, $di);\n\n$compiler = $volt->getCompiler();\n\n// This binds the function name 'shuffle' in Volt to the PHP function 'str_shuffle'\n$compiler->addFunction(\"shuffle\", \"str_shuffle\");\n```\n\nRegister the function with an anonymous function. This case we use `$resolvedArgs` to pass the arguments exactly as were passed in the arguments:\n\n``` php\n$compiler->addFunction(\n    \"widget\",\n    function ($resolvedArgs, $exprArgs) {\n        return \"MyLibrary\\\\Widgets::get(\" . $resolvedArgs . \")\";\n    }\n);\n```\n\nTreat the arguments independently and unresolved:\n\n``` php\n$compiler->addFunction(\n    \"repeat\",\n    function ($resolvedArgs, $exprArgs) use ($compiler) {\n        // Resolve the first argument\n        $firstArgument = $compiler->expression($exprArgs[0]['expr']);\n\n        // Checks if the second argument was passed\n        if (isset($exprArgs[1])) {\n            $secondArgument = $compiler->expression($exprArgs[1]['expr']);\n        } else {\n            // Use '10' as default\n            $secondArgument = '10';\n        }\n\n        return \"str_repeat(\" . $firstArgument . \", \" . $secondArgument . \")\";\n    }\n);\n```\n\nGenerate the code based on some function availability:\n\n``` php\n$compiler->addFunction(\n    \"contains_text\",\n    function ($resolvedArgs, $exprArgs) {\n        if (function_exists(\"mb_stripos\")) {\n            return \"mb_stripos(\" . $resolvedArgs . \")\";\n        } else {\n            return \"stripos(\" . $resolvedArgs . \")\";\n        }\n    }\n);\n```\n\nBuilt-in functions can be overridden adding a function with its name:\n\n``` php\n// Replace built-in function dump\n$compiler->addFunction(\"dump\", \"print_r\");\n```\n\n### Filters\n\nA filter has the following form in a template: leftExpr\\|name(optional-args). Adding new filters is similar as seen with the functions:\n\n``` php\n// This creates a filter 'hash' that uses the PHP function 'md5'\n$compiler->addFilter(\"hash\", \"md5\");\n```\n\n``` php\n$compiler->addFilter(\n    \"int\",\n    function ($resolvedArgs, $exprArgs) {\n        return \"intval(\" . $resolvedArgs . \")\";\n    }\n);\n```\n\nBuilt-in filters can be overridden adding a function with its name:\n\n``` php\n// Replace built-in filter 'capitalize'\n$compiler->addFilter(\"capitalize\", \"lcfirst\");\n```\n\n### Extensions\n\nWith extensions the developer has more flexibility to extend the template engine, and override the compilation of a specific instruction, change the behavior of an expression or operator, add functions/filters, and more.\n\nAn extension is a class that implements the events triggered by Volt as a method of itself.\n\nFor example, the class below allows to use any PHP function in Volt:\n\n``` php\nclass PhpFunctionExtension\n{\n    /**\n     * This method is called on any attempt to compile a function call\n     */\n    public function compileFunction($name, $arguments)\n    {\n        if (function_exists($name)) {\n            return $name . \"(\". $arguments . \")\";\n        }\n    }\n}\n```\n\nThe above class implements the method ‘compileFunction’ which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn’t return an string the compilation is done using the default behavior provided by the engine.\n\nThe following compilation events are available to be implemented in extensions:\n\n| Event/Method        | Description                                                                                            |\n|---------------------|--------------------------------------------------------------------------------------------------------|\n| `compileFunction`   | Triggered before trying to compile any function call in a template                                     |\n| `compileFilter`     | Triggered before trying to compile any filter call in a template                                       |\n| `resolveExpression` | Triggered before trying to compile any expression. This allows the developer to override operators     |\n| `compileStatement`  | Triggered before trying to compile any expression. This allows the developer to override any statement |\n\nVolt extensions must be in registered in the compiler making them available in compile time:\n\n``` php\n// Register the extension in the compiler\n$compiler->addExtension(\n    new PhpFunctionExtension()\n);\n```\n\n## Caching view fragments\n\nWith Volt it’s easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:\n\n``` html\n{% cache \"sidebar\" %}\n    <!-- generate this content is slow so we are going to cache it -->\n{% endcache %}\n```\n\nSetting a specific number of seconds:\n\n``` html\n{# cache the sidebar by 1 hour #}\n{% cache \"sidebar\" 3600 %}\n    <!-- generate this content is slow so we are going to cache it -->\n{% endcache %}\n```\n\nAny valid expression can be used as cache key:\n\n``` html\n{% cache (\"article-\" ~ post.id) 3600 %}\n\n    <h1>{{ post.title }}</h1>\n\n    <p>{{ post.content }}</p>\n\n{% endcache %}\n```\n\nThe caching is done by the [*Phalcon\\Cache*](cache) component via the view component. Learn more about how this integration works in the section [*“Caching View Fragments”*](views).\n\n## Inject Services into a Template\n\nIf a service container (DI) is available for Volt, you can use the services by only accessing the name of the service in the template:\n\n``` html\n{# Inject the 'flash' service #}\n<div id=\"messages\">{{ flash.output() }}</div>\n\n{# Inject the 'security' service #}\n<input type=\"hidden\" name=\"token\" value=\"{{ security.getToken() }}\">\n```\n\n## Stand-alone component\n\nUsing Volt in a stand-alone mode can be demonstrated below:\n\n``` php\nuse Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler as VoltCompiler;\n\n// Create a compiler\n$compiler = new VoltCompiler();\n\n// Optionally add some options\n$compiler->setOptions(\n    [\n        // ...\n    ]\n);\n\n// Compile a template string returning PHP code\necho $compiler->compileString(\n    \"{{ 'hello' }}\"\n);\n\n// Compile a template in a file specifying the destination file\n$compiler->compileFile(\n    \"layouts/main.volt\",\n    \"cache/layouts/main.volt.php\"\n);\n\n// Compile a template in a file based on the options passed to the compiler\n$compiler->compile(\n    \"layouts/main.volt\"\n);\n\n// Require the compiled templated (optional)\nrequire $compiler->getCompiledTemplatePath();\n```\n\n## External Resources\n\n- A bundle for Sublime/Textmate is available [here](https://github.com/phalcon/volt-sublime-textmate)\n- [Album-O-Rama](http://album-o-rama.phalconphp.com) is a sample application using Volt as template engine, \\[[Album-O-Rama on Github](https://github.com/phalcon/album-o-rama)\\]\n- [Our website](http://phalconphp.com) is running using Volt as template engine, \\[[Our website on Github](https://github.com/phalcon/website)\\]\n- [Phosphorum](http://forum.phalconphp.com), the Phalcon’s forum, also uses Volt, \\[[Phosphorum on Github](https://github.com/phalcon/forum)\\]\n- [Vökuró](http://vokuro.phalconphp.com), is another sample application that use Volt, \\[[Vökuró on Github](https://github.com/phalcon/vokuro)\\]\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/volt.html](https://docs.phalconphp.com/en/latest/reference/volt.html)"
- name: Working with Models
  id: reference/models
  summary: A model represents the information (data) of the application and the rules to manipulate that data
  description: "# Working with Models\n\nA model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models.\n\n[*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) is the base for all models in a Phalcon application. It provides database independence, basic CRUD functionality, advanced finding capabilities, and the ability to relate models to one another, among other services. [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) avoids the need of having to use SQL statements because it translates methods dynamically to the respective database engine operations.\n\n> Models are intended to work with the database on a high layer of abstraction. If you need to work with databases at a lower level check out the [*Phalcon\\Db*](../api/phalcon_db) component documentation.\n\n## Creating Models\n\nA model is a class that extends from [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model). Its class name should be in camel case notation:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotParts extends Model\n{\n\n}\n```\n\n> If you’re using PHP 5.4/5.5 it is recommended you declare each column that makes part of the model in order to save memory and reduce the memory allocation.\n\nBy default, the model “Store\\Toys\\RobotParts” will refer to the table “robot_parts”. If you want to manually specify another name for the mapping table, you can use the `setSource()` method:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotParts extends Model\n{\n    public function initialize()\n    {\n        $this->setSource(\"toys_robot_parts\");\n    }\n}\n```\n\nThe model RobotParts now maps to “toys_robot_parts” table. The `initialize()` method aids in setting up the model with a custom behavior i.e. a different table.\n\nThe `initialize()` method is only called once during the request, it’s intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can use the `onConstruct()` method:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotParts extends Model\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n```\n\n### Public properties vs. Setters/Getters\n\nModels can be implemented with properties of public scope, meaning that each property can be read/updated from any part of the code that has instantiated that model class without any restrictions:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $price;\n}\n```\n\nBy using getters and setters you can control which properties are visible publicly perform various transformations to the data (which would be impossible otherwise) and also add validation rules to the data stored in the object:\n\n``` php\nnamespace Store\\Toys;\n\nuse InvalidArgumentException;\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    protected $id;\n\n    protected $name;\n\n    protected $price;\n\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    public function setName($name)\n    {\n        // The name is too short?\n        if (strlen($name) < 10) {\n            throw new InvalidArgumentException(\n                \"The name is too short\"\n            );\n        }\n\n        $this->name = $name;\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function setPrice($price)\n    {\n        // Negative prices aren't allowed\n        if ($price < 0) {\n            throw new InvalidArgumentException(\n                \"Price can't be negative\"\n            );\n        }\n\n        $this->price = $price;\n    }\n\n    public function getPrice()\n    {\n        // Convert the value to double before be used\n        return (double) $this->price;\n    }\n}\n```\n\nPublic properties provide less complexity in development. However getters/setters can heavily increase the testability, extensibility and maintainability of applications. Developers can decide which strategy is more appropriate for the application they are creating. The ORM is compatible with both schemes of defining properties.\n\n> Underscores in property names can be problematic when using getters and setters.\n\nIf you use underscores in your property names, you must still use camel case in your getter/setter declarations for use with magic methods. (e.g. $model-\\>getPropertyName instead of $model-\\>getProperty_name, $model-\\>findByPropertyName instead of $model-\\>findByProperty_name, etc.). As much of the system expects camel case, and underscores are commonly removed, it is recommended to name your properties in the manner shown throughout the documentation. You can use a column map (as described above) to ensure proper mapping of your properties to their database counterparts.\n\n## Understanding Records To Objects\n\nEvery instance of a model represents a row in the table. You can easily access record data by reading object properties. For example, for a table “robots” with the records:\n\n``` bash\nmysql> select * from robots;\n+----+------------+------------+------+\n| id | name       | type       | year |\n+----+------------+------------+------+\n|  1 | Robotina   | mechanical | 1972 |\n|  2 | Astro Boy  | mechanical | 1952 |\n|  3 | Terminator | cyborg     | 2029 |\n+----+------------+------------+------+\n3 rows in set (0.00 sec)\n```\n\nYou could find a certain record by its primary key and then print its name:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// Find record with id = 3\n$robot = Robots::findFirst(3);\n\n// Prints \"Terminator\"\necho $robot->name;\n```\n\nOnce the record is in memory, you can make modifications to its data and then save changes:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(3);\n\n$robot->name = \"RoboCop\";\n\n$robot->save();\n```\n\nAs you can see, there is no need to use raw SQL statements. [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) provides high database abstraction for web applications.\n\n## Finding Records\n\n[*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) also offers several methods for querying records. The following examples will show you how to query one or more records from a model:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// How many robots are there?\n$robots = Robots::find();\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\"type = 'mechanical'\");\necho \"There are \", count($robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n    ]\n);\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n        \"limit\" => 100,\n    ]\n);\nforeach ($robots as $robot) {\n   echo $robot->name, \"\\n\";\n}\n```\n\n> If you want find record by external data (such as user input) or variable data you must use [Binding Parameters](#binding-parameters).\n\nYou could also use the `findFirst()` method to get only the first record matching the given criteria:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// What's the first robot in robots table?\n$robot = Robots::findFirst();\necho \"The robot name is \", $robot->name, \"\\n\";\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\"type = 'mechanical'\");\necho \"The first mechanical robot name is \", $robot->name, \"\\n\";\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name\",\n    ]\n);\necho \"The first virtual robot name is \", $robot->name, \"\\n\";\n```\n\nBoth `find()` and `findFirst()` methods accept an associative array specifying the search criteria:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(\n    [\n        \"type = 'virtual'\",\n        \"order\" => \"name DESC\",\n        \"limit\" => 30,\n    ]\n);\n\n$robots = Robots::find(\n    [\n        \"conditions\" => \"type = ?1\",\n        \"bind\"       => [\n            1 => \"virtual\",\n        ]\n    ]\n);\n```\n\nThe available query options are:\n\n| Parameter   | Description                                                                                                                                                                                                                    | Example                                                                               |\n|-------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|\n| conditions  | Search conditions for the find operation. Is used to extract only those records that fulfill a specified criterion. By default [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) assumes the first parameter are the conditions. | `\"conditions\"`` ``=>`` ``\"name`` ``LIKE`` ``'steve%'\"`                                |\n| columns     | Return specific columns instead of the full columns in the model. When using this option an incomplete object is returned                                                                                                      | `\"columns\"`` ``=>`` ``\"id,`` ``name\"`                                                 |\n| bind        | Bind is used together with options, by replacing placeholders and escaping values thus increasing security                                                                                                                     | `\"bind\"`` ``=>`` ``[\"status\"`` ``=>`` ``\"A\",`` ``\"type\"`` ``=>`` ``\"some-time\"]`      |\n| bindTypes   | When binding parameters, you can use this parameter to define additional casting to the bound parameters increasing even more the security                                                                                     | `\"bindTypes\"`` ``=>`` ``[Column::BIND_PARAM_STR,`` ``Column::BIND_PARAM_INT]`         |\n| order       | Is used to sort the resultset. Use one or more fields separated by commas.                                                                                                                                                     | `\"order\"`` ``=>`` ``\"name`` ``DESC,`` ``status\"`                                      |\n| limit       | Limit the results of the query to results to certain range                                                                                                                                                                     | `\"limit\"`` ``=>`` ``10`                                                               |\n| offset      | Offset the results of the query by a certain amount                                                                                                                                                                            | `\"offset\"`` ``=>`` ``5`                                                               |\n| group       | Allows to collect data across multiple records and group the results by one or more columns                                                                                                                                    | `\"group\"`` ``=>`` ``\"name,`` ``status\"`                                               |\n| for_update  | With this option, [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) reads the latest available data, setting exclusive locks on each row it reads                                                                                | `\"for_update\"`` ``=>`` ``true`                                                        |\n| shared_lock | With this option, [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) reads the latest available data, setting shared locks on each row it reads                                                                                   | `\"shared_lock\"`` ``=>`` ``true`                                                       |\n| cache       | Cache the resultset, reducing the continuous access to the relational system                                                                                                                                                   | `\"cache\"`` ``=>`` ``[\"lifetime\"`` ``=>`` ``3600,`` ``\"key\"`` ``=>`` ``\"my-find-key\"]` |\n| hydration   | Sets the hydration strategy to represent each returned record in the result                                                                                                                                                    | `\"hydration\"`` ``=>`` ``Resultset::HYDRATE_OBJECTS`                                   |\n\nIf you prefer, there is also available a way to create queries in an object-oriented way, instead of using an array of parameters:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robots = Robots::query()\n    ->where(\"type = :type:\")\n    ->andWhere(\"year < 2000\")\n    ->bind([\"type\" => \"mechanical\"])\n    ->order(\"name\")\n    ->execute();\n```\n\nThe static method `query()` returns a [*Phalcon\\Mvc\\Model\\Criteria*](../api/phalcon_mvc_model_criteria) object that is friendly with IDE autocompleters.\n\nAll the queries are internally handled as [*PHQL*](phql) queries. PHQL is a high-level, object-oriented and SQL-like language. This language provide you more features to perform queries like joining other models, define groupings, add aggregations etc.\n\nLastly, there is the `findFirstBy<property-name>()` method. This method expands on the `findFirst()` method mentioned earlier. It allows you to quickly perform a retrieval from a table by using the property name in the method itself and passing it a parameter that contains the data you want to search for in that column. An example is in order, so taking our Robots model mentioned earlier:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $price;\n}\n```\n\nWe have three properties to work with here: `$id`, `$name` and `$price`. So, let’s say you want to retrieve the first record in the table with the name ‘Terminator’. This could be written like:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$name = \"Terminator\";\n\n$robot = Robots::findFirstByName($name);\n\nif ($robot) {\n    echo \"The first robot with the name \" . $name . \" cost \" . $robot->price . \".\";\n} else {\n    echo \"There were no robots found in our table with the name \" . $name . \".\";\n}\n```\n\nNotice that we used ‘Name’ in the method call and passed the variable `$name` to it, which contains the name we are looking for in our table. Notice also that when we find a match with our query, all the other properties are available to us as well.\n\n### Model Resultsets\n\nWhile `findFirst()` returns directly an instance of the called class (when there is data to be returned), the `find()` method returns a [*Phalcon\\Mvc\\Model\\Resultset\\Simple*](../api/phalcon_mvc_model_resultset_simple). This is an object that encapsulates all the functionality a resultset has like traversing, seeking specific records, counting, etc.\n\nThese objects are more powerful than standard arrays. One of the greatest features of the [*Phalcon\\Mvc\\Model\\Resultset*](../api/phalcon_mvc_model_resultset) is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.\n\n``` php\nuse Store\\Toys\\Robots;\n\n// Get all robots\n$robots = Robots::find();\n\n// Traversing with a foreach\nforeach ($robots as $robot) {\n    echo $robot->name, \"\\n\";\n}\n\n// Traversing with a while\n$robots->rewind();\n\nwhile ($robots->valid()) {\n    $robot = $robots->current();\n\n    echo $robot->name, \"\\n\";\n\n    $robots->next();\n}\n\n// Count the resultset\necho count($robots);\n\n// Alternative way to count the resultset\necho $robots->count();\n\n// Move the internal cursor to the third robot\n$robots->seek(2);\n\n$robot = $robots->current();\n\n// Access a robot by its position in the resultset\n$robot = $robots[5];\n\n// Check if there is a record in certain position\nif (isset($robots[3])) {\n   $robot = $robots[3];\n}\n\n// Get the first record in the resultset\n$robot = $robots->getFirst();\n\n// Get the last record\n$robot = $robots->getLast();\n```\n\nPhalcon’s resultsets emulate scrollable cursors, you can get any row just by accessing its position, or seeking the internal pointer to a specific position. Note that some database systems don’t support scrollable cursors, this forces to re-execute the query in order to rewind the cursor to the beginning and obtain the record at the requested position. Similarly, if a resultset is traversed several times, the query must be executed the same number of times.\n\nAs storing large query results in memory could consume many resources, resultsets are obtained from the database in chunks of 32 rows - reducing the need to re-execute the request in several cases.\n\nNote that resultsets can be serialized and stored in a cache backend. [*Phalcon\\Cache*](cache) can help with that task. However, serializing data causes [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) to retrieve all the data from the database in an array, thus consuming more memory while this process takes place.\n\n``` php\n// Query all records from model parts\n$parts = Parts::find();\n\n// Store the resultset into a file\nfile_put_contents(\n    \"cache.txt\",\n    serialize($parts)\n);\n\n// Get parts from file\n$parts = unserialize(\n    file_get_contents(\"cache.txt\")\n);\n\n// Traverse the parts\nforeach ($parts as $part) {\n    echo $part->id;\n}\n```\n\n### Filtering Resultsets\n\nThe most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:\n\n``` php\n$customers = Customers::find();\n\n$customers = $customers->filter(\n    function ($customer) {\n        // Return only customers with a valid e-mail\n        if (filter_var($customer->email, FILTER_VALIDATE_EMAIL)) {\n            return $customer;\n        }\n    }\n);\n```\n\n### Binding Parameters\n\nBound parameters are also supported in [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model). You are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and integer placeholders are supported. Binding parameters can simply be achieved as follows:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// Query robots binding parameters with string placeholders\n// Parameters whose keys are the same as placeholders\n$robots = Robots::find(\n    [\n        \"name = :name: AND type = :type:\",\n        \"bind\" => [\n            \"name\" => \"Robotina\",\n            \"type\" => \"maid\",\n        ],\n    ]\n);\n\n// Query robots binding parameters with integer placeholders\n$robots = Robots::find(\n    [\n        \"name = ?1 AND type = ?2\",\n        \"bind\" => [\n            1 => \"Robotina\",\n            2 => \"maid\",\n        ],\n    ]\n);\n\n// Query robots binding parameters with both string and integer placeholders\n// Parameters whose keys are the same as placeholders\n$robots = Robots::find(\n    [\n        \"name = :name: AND type = ?1\",\n        \"bind\" => [\n            \"name\" => \"Robotina\",\n            1      => \"maid\",\n        ],\n    ]\n);\n```\n\nWhen using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case “1” or “2” are considered strings and not numbers, so the placeholder could not be successfully replaced.\n\nStrings are automatically escaped using [PDO](http://php.net/manual/en/pdo.prepared-statements.php). This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.\n\nAdditionally you can set the parameter “bindTypes”, this allows defining how the parameters should be bound according to its data type:\n\n``` php\nuse Phalcon\\Db\\Column;\nuse Store\\Toys\\Robots;\n\n// Bind parameters\n$parameters = [\n    \"name\" => \"Robotina\",\n    \"year\" => 2008,\n];\n\n// Casting Types\n$types = [\n    \"name\" => Column::BIND_PARAM_STR,\n    \"year\" => Column::BIND_PARAM_INT,\n];\n\n// Query robots binding parameters with string placeholders\n$robots = Robots::find(\n    [\n        \"name = :name: AND year = :year:\",\n        \"bind\"      => $parameters,\n        \"bindTypes\" => $types,\n    ]\n);\n```\n\n> Since the default bind-type is `Phalcon\\Db\\Column::BIND_PARAM_STR`, there is no need to specify the “bindTypes” parameter if all of the columns are of that type.\n\nIf you bind arrays in bound parameters, keep in mind, that keys must be numbered from zero:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$array = [\"a\",\"b\",\"c\"]; // $array: [[0] => \"a\", [1] => \"b\", [2] => \"c\"]\n\nunset($array[1]); // $array: [[0] => \"a\", [2] => \"c\"]\n\n// Now we have to renumber the keys\n$array = array_values($array); // $array: [[0] => \"a\", [1] => \"c\"]\n\n$robots = Robots::find(\n    [\n        'letter IN ({letter:array})',\n        'bind' => [\n            'letter' => $array\n        ]\n    ]\n);\n```\n\n> Bound parameters are available for all query methods such as `find()` and `findFirst()` but also the calculation methods like `count()`, `sum()`, `average()` etc.\n\nIf you’re using “finders”, bound parameters are automatically used for you:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// Explicit query using bound parameters\n$robots = Robots::find(\n    [\n        \"name = ?0\",\n        \"bind\" => [\n            \"Ultron\",\n        ],\n    ]\n);\n\n// Implicit query using bound parameters\n$robots = Robots::findByName(\"Ultron\");\n```\n\n## Initializing/Preparing fetched records\n\nMay be the case that after obtaining a record from the database is necessary to initialise the data before being used by the rest of the application. You can implement the `afterFetch()` method in a model, this event will be executed just after create the instance and assign the data to it:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $status;\n\n    public function beforeSave()\n    {\n        // Convert the array into a string\n        $this->status = join(\",\", $this->status);\n    }\n\n    public function afterFetch()\n    {\n        // Convert the string to an array\n        $this->status = explode(\",\", $this->status);\n    }\n\n    public function afterSave()\n    {\n        // Convert the string to an array\n        $this->status = explode(\",\", $this->status);\n    }\n}\n```\n\nIf you use getters/setters instead of/or together with public properties, you can initialize the field once it is accessed:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $status;\n\n    public function getStatus()\n    {\n        return explode(\",\", $this->status);\n    }\n}\n```\n\n## Generating Calculations\n\nCalculations (or aggregations) are helpers for commonly used functions of database systems such as COUNT, SUM, MAX, MIN or AVG. [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) allows to use these functions directly from the exposed methods.\n\nCount examples:\n\n``` php\n// How many employees are?\n$rowcount = Employees::count();\n\n// How many different areas are assigned to employees?\n$rowcount = Employees::count(\n    [\n        \"distinct\" => \"area\",\n    ]\n);\n\n// How many employees are in the Testing area?\n$rowcount = Employees::count(\n    \"area = 'Testing'\"\n);\n\n// Count employees grouping results by their area\n$group = Employees::count(\n    [\n        \"group\" => \"area\",\n    ]\n);\nforeach ($group as $row) {\n   echo \"There are \", $row->rowcount, \" in \", $row->area;\n}\n\n// Count employees grouping by their area and ordering the result by count\n$group = Employees::count(\n    [\n        \"group\" => \"area\",\n        \"order\" => \"rowcount\",\n    ]\n);\n\n// Avoid SQL injections using bound parameters\n$group = Employees::count(\n    [\n        \"type > ?0\",\n        \"bind\" => [\n            $type\n        ],\n    ]\n);\n```\n\nSum examples:\n\n``` php\n// How much are the salaries of all employees?\n$total = Employees::sum(\n    [\n        \"column\" => \"salary\",\n    ]\n);\n\n// How much are the salaries of all employees in the Sales area?\n$total = Employees::sum(\n    [\n        \"column\"     => \"salary\",\n        \"conditions\" => \"area = 'Sales'\",\n    ]\n);\n\n// Generate a grouping of the salaries of each area\n$group = Employees::sum(\n    [\n        \"column\" => \"salary\",\n        \"group\"  => \"area\",\n    ]\n);\nforeach ($group as $row) {\n   echo \"The sum of salaries of the \", $row->area, \" is \", $row->sumatory;\n}\n\n// Generate a grouping of the salaries of each area ordering\n// salaries from higher to lower\n$group = Employees::sum(\n    [\n        \"column\" => \"salary\",\n        \"group\"  => \"area\",\n        \"order\"  => \"sumatory DESC\",\n    ]\n);\n\n// Avoid SQL injections using bound parameters\n$group = Employees::sum(\n    [\n        \"conditions\" => \"area > ?0\",\n        \"bind\"       => [\n            $area\n        ],\n    ]\n);\n```\n\nAverage examples:\n\n``` php\n// What is the average salary for all employees?\n$average = Employees::average(\n    [\n        \"column\" => \"salary\",\n    ]\n);\n\n// What is the average salary for the Sales's area employees?\n$average = Employees::average(\n    [\n        \"column\"     => \"salary\",\n        \"conditions\" => \"area = 'Sales'\",\n    ]\n);\n\n// Avoid SQL injections using bound parameters\n$average = Employees::average(\n    [\n        \"column\"     => \"age\",\n        \"conditions\" => \"area > ?0\",\n        \"bind\"       => [\n            $area\n        ],\n    ]\n);\n```\n\nMax/Min examples:\n\n``` php\n// What is the oldest age of all employees?\n$age = Employees::maximum(\n    [\n        \"column\" => \"age\",\n    ]\n);\n\n// What is the oldest of employees from the Sales area?\n$age = Employees::maximum(\n    [\n        \"column\"     => \"age\",\n        \"conditions\" => \"area = 'Sales'\",\n    ]\n);\n\n// What is the lowest salary of all employees?\n$salary = Employees::minimum(\n    [\n        \"column\" => \"salary\",\n    ]\n);\n```\n\n## Creating/Updating Records\n\nThe `Phalcon\\Mvc\\Model::save()` method allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model). For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.\n\nAlso the method executes associated validators, virtual foreign keys and events that are defined in the model:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\nif ($robot->save() === false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n```\n\nAn array could be passed to “save” to avoid assign every column manually. [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) will check if there are setters implemented for the columns passed in the array giving priority to them instead of assign directly the values of the attributes:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot->save(\n    [\n        \"type\" => \"mechanical\",\n        \"name\" => \"Astro Boy\",\n        \"year\" => 1952,\n    ]\n);\n```\n\nValues assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot->save($_POST);\n```\n\n> Without precautions mass assignment could allow attackers to set any database column’s value. Only use this feature if you want to permit a user to insert/update every column in the model, even if those fields are not in the submitted form.\n\nYou can set an additional parameter in ‘save’ to set a whitelist of fields that only must taken into account when doing the mass assignment:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot->save(\n    $_POST,\n    [\n        \"name\",\n        \"type\",\n    ]\n);\n```\n\n### Create/Update with Confidence\n\nWhen an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use `Phalcon\\Mvc\\Model::save()` to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the `save()` call with `create()` or `update()`:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot->type = \"mechanical\";\n$robot->name = \"Astro Boy\";\n$robot->year = 1952;\n\n// This record only must be created\nif ($robot->create() === false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n\n    $messages = $robot->getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo \"Great, a new robot was created successfully!\";\n}\n```\n\nThese methods “create” and “update” also accept an array of values as parameter.\n\n## Deleting Records\n\nThe `Phalcon\\Mvc\\Model::delete()` method allows to delete a record. You can use it as follows:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(11);\n\nif ($robot !== false) {\n    if ($robot->delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot->getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n```\n\nYou can also delete many records by traversing a resultset with a foreach:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find(\n    \"type = 'mechanical'\"\n);\n\nforeach ($robots as $robot) {\n    if ($robot->delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot->getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n```\n\nThe following events are available to define custom business rules that can be executed when a delete operation is performed:\n\n| Operation | Name         | Can stop operation? | Explanation                              |\n|-----------|--------------|---------------------|------------------------------------------|\n| Deleting  | beforeDelete | YES                 | Runs before the delete operation is made |\n| Deleting  | afterDelete  | NO                  | Runs after the delete operation was made |\n\nWith the above events can also define business rules in the models:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function beforeDelete()\n    {\n        if ($this->status === \"A\") {\n            echo \"The robot is active, it can't be deleted\";\n\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/models.html](https://docs.phalconphp.com/en/latest/reference/models.html)"
- name: Working with Models (Advanced)
  id: reference/models-advanced
  summary: As mentioned previously, resultsets are collections of complete objects, this means that every returned result is an object representing a row in the database
  description: "# Working with Models (Advanced)\n\n## Hydration Modes\n\nAs mentioned previously, resultsets are collections of complete objects, this means that every returned result is an object representing a row in the database. These objects can be modified and saved again to persistence:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find();\n\n// Manipulating a resultset of complete objects\nforeach ($robots as $robot) {\n    $robot->year = 2000;\n\n    $robot->save();\n}\n```\n\nSometimes records are obtained only to be presented to a user in read-only mode, in these cases it may be useful to change the way in which records are represented to facilitate their handling. The strategy used to represent objects returned in a resultset is called ‘hydration mode’:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Resultset;\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find();\n\n// Return every robot as an array\n$robots->setHydrateMode(\n    Resultset::HYDRATE_ARRAYS\n);\n\nforeach ($robots as $robot) {\n    echo $robot[\"year\"], PHP_EOL;\n}\n\n// Return every robot as a stdClass\n$robots->setHydrateMode(\n    Resultset::HYDRATE_OBJECTS\n);\n\nforeach ($robots as $robot) {\n    echo $robot->year, PHP_EOL;\n}\n\n// Return every robot as a Robots instance\n$robots->setHydrateMode(\n    Resultset::HYDRATE_RECORDS\n);\n\nforeach ($robots as $robot) {\n    echo $robot->year, PHP_EOL;\n}\n```\n\nHydration mode can also be passed as a parameter of ‘find’:\n\n``` php\nuse Phalcon\\Mvc\\Model\\Resultset;\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find(\n    [\n        \"hydration\" => Resultset::HYDRATE_ARRAYS,\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot[\"year\"], PHP_EOL;\n}\n```\n\n## Auto-generated identity columns\n\nSome models may have identity columns. These columns usually are the primary key of the mapped table. [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) can recognize the identity column omitting it in the generated SQL INSERT, so the database system can generate an auto-generated value for it. Always after creating a record, the identity field will be registered with the value generated in the database system for it:\n\n``` php\n$robot->save();\n\necho \"The generated id is: \", $robot->id;\n```\n\n[*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) is able to recognize the identity column. Depending on the database system, those columns may be serial columns like in PostgreSQL or auto_increment columns in the case of MySQL.\n\nPostgreSQL uses sequences to generate auto-numeric values, by default, Phalcon tries to obtain the generated value from the sequence “table_field_seq”, for example: robots_id_seq, if that sequence has a different name, the `getSequenceName()` method needs to be implemented:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getSequenceName()\n    {\n        return \"robots_sequence_name\";\n    }\n}\n```\n\n## Skipping Columns\n\nTo tell [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        // Skips fields/columns on both INSERT/UPDATE operations\n        $this->skipAttributes(\n            [\n                \"year\",\n                \"price\",\n            ]\n        );\n\n        // Skips only when inserting\n        $this->skipAttributesOnCreate(\n            [\n                \"created_at\",\n            ]\n        );\n\n        // Skips only when updating\n        $this->skipAttributesOnUpdate(\n            [\n                \"modified_in\",\n            ]\n        );\n    }\n}\n```\n\nThis will ignore globally these fields on each INSERT/UPDATE operation on the whole application. If you want to ignore different attributes on different INSERT/UPDATE operations, you can specify the second parameter (boolean) - true for replacement. Forcing a default value can be done in the following way:\n\n``` php\nuse Store\\Toys\\Robots;\n\nuse Phalcon\\Db\\RawValue;\n\n$robot = new Robots();\n\n$robot->name       = \"Bender\";\n$robot->year       = 1999;\n$robot->created_at = new RawValue(\"default\");\n\n$robot->create();\n```\n\nA callback also can be used to create a conditional assignment of automatic default values:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\RawValue;\n\nclass Robots extends Model\n{\n    public function beforeCreate()\n    {\n        if ($this->price > 10000) {\n            $this->type = new RawValue(\"default\");\n        }\n    }\n}\n```\n\n> Never use a [*Phalcon\\Db\\RawValue*](../api/phalcon_db_rawvalue) to assign external data (such as user input) or variable data. The value of these fields is ignored when binding parameters to the query. So it could be used to attack the application injecting SQL.\n\n### Dynamic Update\n\nSQL UPDATE statements are by default created with every column defined in the model (full all-field SQL update). You can change specific models to make dynamic updates, in this case, just the fields that had changed are used to create the final SQL statement.\n\nIn some cases this could improve the performance by reducing the traffic between the application and the database server, this specially helps when the table has blob/text fields:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->useDynamicUpdate(true);\n    }\n}\n```\n\n## Independent Column Mapping\n\nThe ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $code;\n\n    public $theName;\n\n    public $theType;\n\n    public $theYear;\n\n    public function columnMap()\n    {\n        // Keys are the real names in the table and\n        // the values their names in the application\n        return [\n            \"id\"       => \"code\",\n            \"the_name\" => \"theName\",\n            \"the_type\" => \"theType\",\n            \"the_year\" => \"theYear\",\n        ];\n    }\n}\n```\n\nThen you can use the new names naturally in your code:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// Find a robot by its name\n$robot = Robots::findFirst(\n    \"theName = 'Voltron'\"\n);\n\necho $robot->theName, \"\\n\";\n\n// Get robots ordered by type\n$robot = Robots::find(\n    [\n        \"order\" => \"theType DESC\",\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo \"Code: \", $robot->code, \"\\n\";\n}\n\n// Create a robot\n$robot = new Robots();\n\n$robot->code    = \"10101\";\n$robot->theName = \"Bender\";\n$robot->theType = \"Industrial\";\n$robot->theYear = 2999;\n\n$robot->save();\n```\n\nTake into consideration the following the next when renaming your columns:\n\n- References to attributes in relationships/validators must use the new names\n- Refer the real column names will result in an exception by the ORM\n\nThe independent column map allow you to:\n\n- Write applications using your own conventions\n- Eliminate vendor prefixes/suffixes in your code\n- Change column names without change your application code\n\n## Record Snapshots\n\nSpecific models could be set to maintain a record snapshot when they’re queried. You can use this feature to implement auditing or just to know what fields are changed according to the data queried from the persistence:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->keepSnapshots(true);\n    }\n}\n```\n\nWhen activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed:\n\n``` php\nuse Store\\Toys\\Robots;\n\n// Get a record from the database\n$robot = Robots::findFirst();\n\n// Change a column\n$robot->name = \"Other name\";\n\nvar_dump($robot->getChangedFields()); // [\"name\"]\n\nvar_dump($robot->hasChanged(\"name\")); // true\n\nvar_dump($robot->hasChanged(\"type\")); // false\n```\n\n## Pointing to a different schema\n\nIf a model is mapped to a table that is in a different schemas/databases than the default. You can use the `setSchema()` method to define that:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->setSchema(\"toys\");\n    }\n}\n```\n\n## Setting multiple databases\n\nIn Phalcon, all models can belong to the same database connection or have an individual one. Actually, when [*Phalcon\\Mvc\\Model*](../api/phalcon_mvc_model) needs to connect to the database it requests the “db” service in the application’s services container. You can overwrite this service setting it in the `initialize()` method:\n\n``` php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlPdo;\nuse Phalcon\\Db\\Adapter\\Pdo\\PostgreSQL as PostgreSQLPdo;\n\n// This service returns a MySQL database\n$di->set(\n    \"dbMysql\",\n    function () {\n        return new MysqlPdo(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"root\",\n                \"password\" => \"secret\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n    }\n);\n\n// This service returns a PostgreSQL database\n$di->set(\n    \"dbPostgres\",\n    function () {\n        return new PostgreSQLPdo(\n            [\n                \"host\"     => \"localhost\",\n                \"username\" => \"postgres\",\n                \"password\" => \"\",\n                \"dbname\"   => \"invo\",\n            ]\n        );\n    }\n);\n```\n\nThen, in the `initialize()` method, we define the connection service for the model:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->setConnectionService(\"dbPostgres\");\n    }\n}\n```\n\nBut Phalcon offers you more flexibility, you can define the connection that must be used to ‘read’ and for ‘write’. This is specially useful to balance the load to your databases implementing a master-slave architecture:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->setReadConnectionService(\"dbSlave\");\n\n        $this->setWriteConnectionService(\"dbMaster\");\n    }\n}\n```\n\nThe ORM also provides Horizontal Sharding facilities, by allowing you to implement a ‘shard’ selection according to the current query conditions:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * Dynamically selects a shard\n     *\n     * @param array $intermediate\n     * @param array $bindParams\n     * @param array $bindTypes\n     */\n    public function selectReadConnection($intermediate, $bindParams, $bindTypes)\n    {\n        // Check if there is a 'where' clause in the select\n        if (isset($intermediate[\"where\"])) {\n            $conditions = $intermediate[\"where\"];\n\n            // Choose the possible shard according to the conditions\n            if ($conditions[\"left\"][\"name\"] === \"id\") {\n                $id = $conditions[\"right\"][\"value\"];\n\n                if ($id > 0 && $id < 10000) {\n                    return $this->getDI()->get(\"dbShard1\");\n                }\n\n                if ($id > 10000) {\n                    return $this->getDI()->get(\"dbShard2\");\n                }\n            }\n        }\n\n        // Use a default shard\n        return $this->getDI()->get(\"dbShard0\");\n    }\n}\n```\n\nThe `selectReadConnection()` method is called to choose the right connection, this method intercepts any new query executed:\n\n``` php\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst('id = 101');\n```\n\n## Injecting services into Models\n\nYou may be required to access the application services within a model, the following example explains how to do that:\n\n``` php\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function notSaved()\n    {\n        // Obtain the flash service from the DI container\n        $flash = $this->getDI()->getFlash();\n\n        $messages = $this->getMessages();\n\n        // Show validation messages\n        foreach ($messages as $message) {\n            $flash->error($message);\n        }\n    }\n}\n```\n\nThe “notSaved” event is triggered every time that a “create” or “update” action fails. So we’re flashing the validation messages obtaining the “flash” service from the DI container. By doing this, we don’t have to print messages after each save.\n\n## Disabling/Enabling Features\n\nIn the ORM we have implemented a mechanism that allow you to enable/disable specific features or options globally on the fly. According to how you use the ORM you can disable that you aren’t using. These options can also be temporarily disabled if required:\n\n``` php\nuse Phalcon\\Mvc\\Model;\n\nModel::setup(\n    [\n        \"events\"         => false,\n        \"columnRenaming\" => false,\n    ]\n);\n```\n\nThe available options are:\n\n| Option             | Description                                                                     | Default |\n|--------------------|---------------------------------------------------------------------------------|---------|\n| events             | Enables/Disables callbacks, hooks and event notifications from all the models   | `true`  |\n| columnRenaming     | Enables/Disables the column renaming                                            | `true`  |\n| notNullValidations | The ORM automatically validate the not null columns present in the mapped table | `true`  |\n| virtualForeignKeys | Enables/Disables the virtual foreign keys                                       | `true`  |\n| phqlLiterals       | Enables/Disables literals in the PHQL parser                                    | `true`  |\n| lateStateBinding   | Enables/Disables late state binding of the `Mvc\\Model::cloneResultMap()` method | `false` |\n\n## Stand-Alone component\n\nUsing [*Phalcon\\Mvc\\Model*](models) in a stand-alone mode can be demonstrated below:\n\n``` php\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Sqlite as Connection;\nuse Phalcon\\Mvc\\Model\\Metadata\\Memory as MetaData;\n\n$di = new Di();\n\n// Setup a connection\n$di->set(\n    \"db\",\n    new Connection(\n        [\n            \"dbname\" => \"sample.db\",\n        ]\n    )\n);\n\n// Set a models manager\n$di->set(\n    \"modelsManager\",\n    new ModelsManager()\n);\n\n// Use the memory meta-data adapter or other\n$di->set(\n    \"modelsMetadata\",\n    new MetaData()\n);\n\n// Create a model\nclass Robots extends Model\n{\n\n}\n\n// Use the model\necho Robots::count();\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/models-advanced.html](https://docs.phalconphp.com/en/latest/reference/models-advanced.html)"
- name: Working with Namespaces
  id: reference/namespaces
  summary: Namespaces can be used to avoid class name collisions; this means that if you have two controllers in an application with the same name, a namespace can be used to differentiate them
  description: "# Working with Namespaces\n\n[Namespaces](http://php.net/manual/en/language.namespaces.php) can be used to avoid class name collisions; this means that if you have two controllers in an application with the same name, a namespace can be used to differentiate them. Namespaces are also useful for creating bundles or modules.\n\n## Setting up the framework\n\nUsing namespaces has some implications when loading the appropriate controller. To adjust the framework behavior to namespaces is necessary to perform one or all of the following tasks:\n\nUse an autoload strategy that takes into account the namespaces, for example with [*Phalcon\\Loader*](../api/phalcon_loader):\n\n``` php\n$loader->registerNamespaces(\n    [\n       \"Store\\\\Admin\\\\Controllers\" => \"../bundles/admin/controllers/\",\n       \"Store\\\\Admin\\\\Models\"      => \"../bundles/admin/models/\",\n    ]\n);\n```\n\nSpecify it in the routes as a separate parameter in the route’s paths:\n\n``` php\n$router->add(\n    \"/admin/users/my-profile\",\n    [\n        \"namespace\"  => \"Store\\\\Admin\",\n        \"controller\" => \"Users\",\n        \"action\"     => \"profile\",\n    ]\n);\n```\n\nPassing it as part of the route:\n\n``` php\n$router->add(\n    \"/:namespace/admin/users/my-profile\",\n    [\n        \"namespace\"  => 1,\n        \"controller\" => \"Users\",\n        \"action\"     => \"profile\",\n    ]\n);\n```\n\nIf you are only working with the same namespace for every controller in your application, then you can define a default namespace in the Dispatcher, by doing this, you don’t need to specify a full class name in the router path:\n\n``` php\nuse Phalcon\\Mvc\\Dispatcher;\n\n// Registering a dispatcher\n$di->set(\n    \"dispatcher\",\n    function () {\n        $dispatcher = new Dispatcher();\n\n        $dispatcher->setDefaultNamespace(\n            \"Store\\\\Admin\\\\Controllers\"\n        );\n\n        return $dispatcher;\n    }\n);\n```\n\n## Controllers in Namespaces\n\nThe following example shows how to implement a controller that use namespaces:\n\n``` php\nnamespace Store\\Admin\\Controllers;\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function profileAction()\n    {\n\n    }\n}\n```\n\n## Models in Namespaces\n\nTake the following into consideration when using models in namespaces:\n\n``` php\nnamespace Store\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n\n}\n```\n\nIf models have relationships they must include the namespace too:\n\n``` php\nnamespace Store\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this->hasMany(\n            \"id\",\n            \"Store\\\\Models\\\\Parts\",\n            \"robots_id\",\n            [\n                \"alias\" => \"parts\",\n            ]\n        );\n    }\n}\n```\n\nIn PHQL you must write the statements including namespaces:\n\n``` php\n$phql = \"SELECT r.* FROM Store\\Models\\Robots r JOIN Store\\Models\\Parts p\";\n```\n\n© 2011–2017 Phalcon Framework Team  \nLicensed under the Creative Commons Attribution License 3.0.  \n[https://docs.phalconphp.com/en/latest/reference/namespaces.html](https://docs.phalconphp.com/en/latest/reference/namespaces.html)"
