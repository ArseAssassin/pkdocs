---
name: Gnuplot
slug: gnuplot
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  Copyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley
  Distributed under the gnuplot license (rights to distribute modified
  versions are withheld).
homepage: http://www.gnuplot.info/

---
- name: 3D key
  id: set_show#SECTION0402938100000000000000
  summary: Placement of the key for 3D plots (splot) by default uses the fixed option
  belongs_to: Set-show
  description: |-
    ### 3D key

    Placement of the key for 3D plots (**splot**) by default uses the **fixed** option. Note: this is a change from gnuplot version 5.0 and earlier. **fixed** placement is very similar to **inside** placement with one important difference. The plot boundaries of a 3D plot change as the view point is rotated or scaled. If the key is positioned **inside** these boundaries then the key also moves when the view is changed. **fixed** positioning ignores changes to the view angles or scaling; i.e. the key remains fixed in one location on the canvas as the plot is rotated.

    For 2D plots the **fixed** option is exactly equivalent to **inside**.

    If **splot** is being used to draw contours, by default a separate key entry is generated for each contour level with a distinct line type. To modify this see **[set cntrlabel](set_show#set_cntrlabel)**.
- name: 3D plots
  id: d_plots
  summary: 3D plots are generated using the command splot rather than plot
  description: "# 3D plots\n\n3D plots are generated using the command **splot** rather than **plot**. Many of the 2D plot styles (points, images, impulse, labels, vectors) can also be used in 3D by providing an extra column of data containing z coordinate. Some plot types (pm3d coloring, surfaces, contours) must be generated using the **splot** command even if only a 2D projection is wanted.\n\n## Surface plots\n\nThe styles **splot with lines** and **splot with surface** both generate a surface made from a grid of lines. Solid surfaces can be generated using the style **splot with pm3d**. Usually the surface is displayed at some convenient viewing angle, such that it clearly represents a 3D surface. See **[set view](set_show#set_view)**. In this case the X, Y, and Z axes are all visible in the plot. The illusion of 3D is enhanced by choosing hidden line removal. See **[hidden3d](set_show#hidden3d)**. The **splot** command can also calculate and draw contour lines corresponding to constant Z values. These contour lines may be drawn onto the surface itself, or projected onto the XY plane. See **[set contour](set_show#set_contour)**.\n\n## 2D projection (set view map)\n\nAn important special case of the **splot** command is to map the Z coordinate onto a 2D surface by projecting the plot along the Z axis onto the xy plane. See **[set view map](set_show#set_view_map)**. This plot mode is useful for contour plots and heat maps. This figure shows contours plotted once with plot style **lines** and once with style **labels**.\n\n## PM3D plots\n\n3D surfaces can also be drawn using solid pm3d quadrangles rather than lines. In this case there is no hidden surface removal, but if the component facets are drawn back-to-front then a similar effect is achieved. See **[set pm3d depthorder](set_show#set_pm3d_depthorder)**. While pm3d surfaces are by default colored using a smooth color palette (see **[set palette](set_show#set_palette)**), it is also possible to specify a solid color surface or to specify distinct solid colors for the top and bottom surfaces as in the figure shown here. See **[pm3d fillcolor](set_show#pm3d_fillcolor)**. Unlike the line-trimming in hidden3d mode, pm3d surfaces can be smoothly clipped to the current zrange. See **[set pm3d clipping](set_show#set_pm3d_clipping)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: 3D plots 2D projection (set view map)
  id: d_plots#SECTION030372000000000000000
  summary: An important special case of the splot command is to map the Z coordinate onto a 2D surface by projecting the plot along the Z axis onto the xy plane
  belongs_to: 3D plots
  description: |-
    ## 2D projection (set view map)

    An important special case of the **splot** command is to map the Z coordinate onto a 2D surface by projecting the plot along the Z axis onto the xy plane. See **[set view map](set_show#set_view_map)**. This plot mode is useful for contour plots and heat maps. This figure shows contours plotted once with plot style **lines** and once with style **labels**.
- name: 3D plots PM3D plots
  id: d_plots#SECTION030373000000000000000
  summary: 3D surfaces can also be drawn using solid pm3d quadrangles rather than lines
  belongs_to: 3D plots
  description: "## PM3D plots\n\n3D surfaces can also be drawn using solid pm3d quadrangles rather than lines. In this case there is no hidden surface removal, but if the component facets are drawn back-to-front then a similar effect is achieved. See **[set pm3d depthorder](set_show#set_pm3d_depthorder)**. While pm3d surfaces are by default colored using a smooth color palette (see **[set palette](set_show#set_palette)**), it is also possible to specify a solid color surface or to specify distinct solid colors for the top and bottom surfaces as in the figure shown here. See **[pm3d fillcolor](set_show#pm3d_fillcolor)**. Unlike the line-trimming in hidden3d mode, pm3d surfaces can be smoothly clipped to the current zrange. See **[set pm3d clipping](set_show#set_pm3d_clipping)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: 3D plots Surface plots
  id: d_plots#SECTION030371000000000000000
  summary: The styles splot with lines and splot with surface both generate a surface made from a grid of lines
  belongs_to: 3D plots
  description: |-
    ## Surface plots

    The styles **splot with lines** and **splot with surface** both generate a surface made from a grid of lines. Solid surfaces can be generated using the style **splot with pm3d**. Usually the surface is displayed at some convenient viewing angle, such that it clearly represents a 3D surface. See **[set view](set_show#set_view)**. In this case the X, Y, and Z axes are all visible in the plot. The illusion of 3D is enhanced by choosing hidden line removal. See **[hidden3d](set_show#hidden3d)**. The **splot** command can also calculate and draw contour lines corresponding to constant Z values. These contour lines may be drawn onto the surface itself, or projected onto the XY plane. See **[set contour](set_show#set_contour)**.
- name: Adjustable parameters
  id: fit#SECTION04091000000000000000
  summary: There are two ways that via can specify the parameters to be adjusted, either directly on the command line or indirectly, by referencing a parameter file
  belongs_to: Fit
  description: |-
    ## Adjustable parameters

    There are two ways that **via** can specify the parameters to be adjusted, either directly on the command line or indirectly, by referencing a parameter file. The two use different means to set initial values.

    Adjustable parameters can be specified by a comma-separated list of variable names after the **via** keyword. Any variable that is not already defined is created with an initial value of 1.0. However, the fit is more likely to converge rapidly if the variables have been previously declared with more appropriate starting values.

    In a parameter file, each parameter to be varied and a corresponding initial value are specified, one per line, in the form

        varname = value

    Comments, marked by '#', and blank lines are permissible. The special form

        varname = value       # FIXED

    means that the variable is treated as a 'fixed parameter', initialized by the parameter file, but not adjusted by **fit**. For clarity, it may be useful to designate variables as fixed parameters so that their values are reported by **fit**. The keyword **\# FIXED** has to appear in exactly this form.
- name: Aifm
  id: complete_list_terminals#SECTION05011000000000000000
  summary: 'NOTE: Legacy terminal, originally written for Adobe Illustrator 3.0+. Since Adobe Illustrator understands PostScript level 1 commands directly, you should use set terminal post level1 instead'
  description: |-
    ## Aifm

    **NOTE: Legacy terminal**, originally written for Adobe Illustrator 3.0+. Since Adobe Illustrator understands PostScript level 1 commands directly, you should use **set terminal post level1** instead.

    Syntax:

        set terminal aifm {color|monochrome} {"<fontname>"} {<fontsize>}
- name: Angles
  id: set_show#SECTION040291000000000000000
  summary: By default, gnuplot assumes the independent variable in polar graphs is in units of radians
  belongs_to: Set-show
  description: |-
    ## Angles

    By default, **gnuplot** assumes the independent variable in polar graphs is in units of radians. If **set angles degrees** is specified before **set polar**, then the default range is \[0:360\] and the independent variable has units of degrees. This is particularly useful for plots of data files. The angle setting also applies to 3D mapping as set via the **set mapping** command.

    Syntax:

        set angles {degrees | radians}
        show angles

    The angle specified in **set grid polar** is also read and displayed in the units specified by **set angles**.

    **set angles** also affects the arguments of the machine-defined functions sin(x), cos(x) and tan(x), and the outputs of asin(x), acos(x), atan(x), atan2(x), and arg(x). It has no effect on the arguments of hyperbolic functions or Bessel functions. However, the output arguments of inverse hyperbolic functions of complex arguments are affected; if these functions are used, **set angles radians** must be in effect to maintain consistency between input and output arguments.

        x={1.0,0.1}
        set angles radians
        y=sinh(x)
        print y         #prints {1.16933, 0.154051}
        print asinh(y)  #prints {1.0, 0.1}

    but

        set angles degrees
        y=sinh(x)
        print y         #prints {1.16933, 0.154051}
        print asinh(y)  #prints {57.29578, 5.729578}

    See also [poldat.dem: polar plot using **set angles** demo. ](http://www.gnuplot.info/demo/poldat.html)
- name: Aqua
  id: complete_list_terminals#SECTION05012000000000000000
  summary: This terminal relies on AquaTerm.app for display on Mac OS X
  description: |-
    ## Aqua

    This terminal relies on AquaTerm.app for display on Mac OS X.

    Syntax:

        set terminal aqua {<n>} {title "<wintitle>"} {size <x> <y>}
                          {font "<fontname>{,<fontsize>}"}
                          {linewidth <lw>}"}
                          {{no}enhanced} {solid|dashed} {dl <dashlength>}}

    where \<n\> is the number of the window to draw in (default is 0), \<wintitle\> is the name shown in the title bar (default "Figure \<n\>"), \<x\> \<y\> is the size of the plot (default is 846x594 pt = 11.75x8.25 in).

    Use \<fontname\> to specify the font (default is "Times-Roman"), and \<fontsize\> to specify the font size (default is 14.0 pt).

    The aqua terminal supports enhanced text mode (see **[enhanced](enhanced_text_mode#enhanced)**), except for overprint. Font support is limited to the fonts available on the system. Character encoding can be selected by **set encoding** and currently supports iso_latin_1, iso_latin_2, cp1250, and UTF8 (default).

    Lines can be drawn either solid or dashed, (default is solid) and the dash spacing can be modified by \<dashlength\> which is a multiplier \> 0.
- name: Arrays
  id: expressions#SECTION020168000000000000000
  summary: Arrays are implemented as indexed lists of user variables
  belongs_to: Expressions
  description: "## Arrays\n\nArrays are implemented as indexed lists of user variables. The elements in an array are not limited to a single type of variable. Arrays must be created explicitly before being referenced. The size of an array cannot be changed after creation. All elements are initially undefined. In most places an array element can be used instead of a named user variable.\n\nThe cardinality (number of elements) of array A is given by the expression \\|A\\|.\n\nExample:\n\n    array A[6]\n    A[1] = 1\n    A[2] = 2.0\n    A[3] = {3.0, 3.0}\n    A[4] = \"four\"\n    A[6] = A[2]**3\n    array B[6] = [ 1, 2.0, A[3], \"four\", , B[2]**3 ]\n\n    do for [i=1:6] { print A[i], B[i] }\n        1 1\n        2.0 2.0\n        {3.0, 3.0} {3.0, 3.0}\n        four four\n        <undefined> <undefined>\n        8.0 8.0\n\nNote: Arrays and variables share the same namespace. For example, assignment of a string variable named FOO will destroy any previously created array with name FOO.\n\nThe name of an array can be used in a **plot**, **splot**, **fit**, or **stats** command. This is equivalent to providing a file in which column 1 holds the array index (from 1 to size), column 2 holds the value of real(A\\[i\\]) and column 3 holds the value of imag(A\\[i\\]).\n\nExample:\n\n    array A[200]\n    do for [i=1:200] { A[i] = sin(i * pi/100.) }\n    plot A title \"sin(x) in centiradians\"\n\nWhen plotting the imaginary component of complex array values, it may be referenced either as imag(A\\[$1\\]) or as $3. These two commands are equivalent\n\n    plot A using (real(A[$1])) : (imag(A[$1]))\n    plot A using 2:3\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Arrow
  id: set_show#SECTION040292000000000000000
  summary: Arbitrary arrows can be placed on a plot using the set arrow command
  belongs_to: Set-show
  description: |-
    ## Arrow

    Arbitrary arrows can be placed on a plot using the **set arrow** command.

    Syntax:

        set arrow {<tag>} from <position> to <position>
        set arrow {<tag>} from <position> rto <position>
        set arrow {<tag>} from <position> length <coord> angle <ang>
        set arrow <tag> arrowstyle | as <arrow_style>
        set arrow <tag> {nohead | head | backhead | heads}
                        {size <headlength>,<headangle>{,<backangle>}} {fixed}
                        {filled | empty | nofilled | noborder}
                        {front | back}
                        {linestyle | ls <line_style>}
                        {linetype | lt <line_type>}
                        {linewidth | lw <line_width>}
                        {linecolor | lc <colorspec>}
                        {dashtype | dt <dashtype>}

        unset arrow {<tag>}
        show arrow {<tag>}

    \<tag\> is an integer that identifies the arrow. If no tag is given, the lowest unused tag value is assigned automatically. The tag can be used to delete or change a specific arrow. To change any attribute of an existing arrow, use the **set arrow** command with the appropriate tag and specify the parts of the arrow to be changed.

    The position of the first end point of the arrow is always specified by "from". The other end point can be specified using any of three different mechanisms. The \<position\>s are specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. Unspecified coordinates default to 0. See **[coordinates](coordinates#coordinates)** for details. A coordinate system specifier does not carry over from the first endpoint description the second.

    1\) "to \<position\>" specifies the absolute coordinates of the other end.

    2\) "rto \<position\>" specifies an offset to the "from" position. For linear axes, **graph** and **screen** coordinates, the distance between the start and the end point corresponds to the given relative coordinate. For logarithmic axes, the relative given coordinate corresponds to the factor of the coordinate between start and end point. Thus, a negative relative value or zero are not allowed for logarithmic axes.

    3\) "length \<coordinate\> angle \<angle\>" specifies the orientation of the arrow in the plane of the graph. Again any of the coordinate systems can be used to specify the length. The angle is always in degrees.

    Other characteristics of the arrow can either be specified as a pre-defined arrow style or by providing them in **set arrow** command. For a detailed explanation of arrow characteristics, see **[arrowstyle](set_show#arrowstyle)**.

    Examples:

    To set an arrow pointing from the origin to (1,2) with user-defined linestyle 5, use:

        set arrow to 1,2 ls 5

    To set an arrow from bottom left of plotting area to (-5,5,3), and tag the arrow number 3, use:

        set arrow 3 from graph 0,0 to -5,5,3

    To change the preceding arrow to end at 1,1,1, without an arrow head and double its width, use:

        set arrow 3 to 1,1,1 nohead lw 2

    To draw a vertical line from the bottom to the top of the graph at x=3, use:

        set arrow from 3, graph 0 to 3, graph 1 nohead

    To draw a vertical arrow with T-shape ends, use:

        set arrow 3 from 0,-5 to 0,5 heads size screen 0.1,90

    To draw an arrow relatively to the start point, where the relative distances are given in graph coordinates, use:

        set arrow from 0,-5 rto graph 0.1,0.1

    To draw an arrow with relative end point in logarithmic x axis, use:

        set logscale x
        set arrow from 100,-5 rto 10,10

    This draws an arrow from 100,-5 to 1000,5. For the logarithmic x axis, the relative coordinate 10 means "factor 10" while for the linear y axis, the relative coordinate 10 means "difference 10".

    To delete arrow number 2, use:

        unset arrow 2

    To delete all arrows, use:

        unset arrow

    To show all arrows (in tag order), use:

        show arrow

    [arrows demos. ](http://www.gnuplot.info/demo/arrowstyle.html)
- name: Arrows
  id: arrows
  summary: The 2D arrows style draws an arrow with specified length and orientation angle at each point (x,y)
  description: "# Arrows\n\nThe 2D **arrows** style draws an arrow with specified length and orientation angle at each point (x,y). Additional input columns may be used to provide variable (per-datapoint) color information or arrow style. It is identical to the 2D style **with vectors** except that each the arrow head is positioned using length + angle rather than delta_x + delta_y. See **[with vectors](vectors#with_vectors)**.\n\n    4 columns:  x  y  length  angle\n\nThe keywords **with arrows** may be followed by inline arrow style properties, a reference to a predefined arrow style, or **arrowstyle variable** to load the index of the desired arrow style for each arrow from a separate column.\n\n**length** \\> 0 is interpreted in x-axis coordinates. -1 \\< **length** \\< 0 is interpreted in horizontal graph coordinates; i.e. \\|length\\| is a fraction of the total graph width. The program will adjust for differences in x and y scaling or plot aspect ratio so that the visual length is independent of the orientation angle.\n\n**angle** is always specified in degrees.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Autoscale
  id: set_show#SECTION040293000000000000000
  summary: Autoscaling may be set individually on the x, y or z axis or globally on all axes
  belongs_to: Set-show
  description: |-
    ## Autoscale

    Autoscaling may be set individually on the x, y or z axis or globally on all axes. The default is to autoscale all axes. If you want to autoscale based on a subset of the plots in the figure, you can mark the other ones with the flag **noautoscale**. See **[datafile](plot#datafile)**.

    Syntax:

        set autoscale {<axes>{|min|max|fixmin|fixmax|fix} | fix | keepfix}
        set autoscale noextend
        unset autoscale {<axes>}
        show autoscale

    where \<axes\> is either **x**, **y**, **z**, **cb**, **x2**, **y2**, **xy**, or **paxis {n}**. A keyword with **min** or **max** appended (this cannot be done with **xy**) tells **gnuplot** to autoscale just the minimum or maximum of that axis. If no keyword is given, all axes are autoscaled.

    When autoscaling, the axis range is automatically computed and the dependent axis (y for a **plot** and z for **splot**) is scaled to include the range of the function or data being plotted.

    If autoscaling of the dependent axis (y or z) is not set, the current y or z range is used.

    Autoscaling the independent variables (x for **plot** and x,y for **splot**) is a request to set the domain to match any data file being plotted. If there are no data files, autoscaling an independent variable has no effect. In other words, in the absence of a data file, functions alone do not affect the x range (or the y range if plotting z = f(x,y)).

    Please see **[set xrange](set_show#set_xrange)** for additional information about ranges.

    The behavior of autoscaling remains consistent in parametric mode, (see **[set parametric](set_show#set_parametric)**). However, there are more dependent variables and hence more control over x, y, and z axis scales. In parametric mode, the independent or dummy variable is t for **plot**s and u,v for **splot**s. **autoscale** in parametric mode, then, controls all ranges (t, u, v, x, y, and z) and allows x, y, and z to be fully autoscaled.

    When tics are displayed on second axes but no plot has been specified for those axes, x2range and y2range are inherited from xrange and yrange. This is done *before* applying offsets or autoextending the ranges to a whole number of tics, which can cause unexpected results. To prevent this you can explicitly link the secondary axis range to the primary axis range. See **[set link](set_show#set_link)**.
- name: Autoscale Examples
  id: set_show#SECTION040293200000000000000
  summary: null
  belongs_to: Set-show
  description: |-
    ### Examples

    Examples:

    This sets autoscaling of the y axis (other axes are not affected):

        set autoscale y

    This sets autoscaling only for the minimum of the y axis (the maximum of the y axis and the other axes are not affected):

        set autoscale ymin

    This disables extension of the x2 axis tics to the next tic mark, thus keeping the exact range as found in the plotted data and functions:

        set autoscale x2fixmin
        set autoscale x2fixmax

    This sets autoscaling of the x and y axes:

        set autoscale xy

    This sets autoscaling of the x, y, z, x2 and y2 axes:

        set autoscale

    This disables autoscaling of the x, y, z, x2 and y2 axes:

        unset autoscale

    This disables autoscaling of the z axis only:

        unset autoscale z
- name: Autoscale Noextend
  id: set_show#SECTION040293100000000000000
  summary: By default autoscaling sets the axis range limits to the nearest tic label position that includes all the plot data
  belongs_to: Set-show
  description: |-
    ### Noextend

        set autoscale noextend

    By default autoscaling sets the axis range limits to the nearest tic label position that includes all the plot data. Keywords **fixmin**, **fixmax**, **fix** or **noextend** tell gnuplot to disable extension of the axis range to the next tic mark position. In this case the axis range limit exactly matches the coordinate of the most extreme data point. **set autoscale noextend** is a synonym for **set autoscale fix**. Range extension for a single axis can be disabled by appending the **noextend** keyword to the corresponding range command, e.g.

        set yrange [0:*] noextend

    **set autoscale keepfix** autoscales all axes while leaving the fix settings unchanged.
- name: Autoscale Polar mode
  id: set_show#SECTION040293300000000000000
  summary: When in polar mode (set polar), the xrange and the yrange may be left in autoscale mode
  belongs_to: Set-show
  description: |-
    ### Polar mode

    When in polar mode (**set polar**), the xrange and the yrange may be left in autoscale mode. If **set rrange** is used to limit the extent of the polar axis, then xrange and yrange will adjust to match this automatically. However, explicit xrange and yrange commands can later be used to make further adjustments. See **[set rrange](set_show#set_rrange)**.

    See also [polar demos. ](http://www.gnuplot.info/demo/poldat.html)
- name: Axes
  id: plot#SECTION040181000000000000000
  summary: There are four possible sets of axes available; the keyword <axes> is used to select the axes for which a particular line should be scaled
  belongs_to: Plot
  description: |-
    ## Axes

    There are four possible sets of axes available; the keyword \<axes\> is used to select the axes for which a particular line should be scaled. **x1y1** refers to the axes on the bottom and left; **x2y2** to those on the top and right; **x1y2** to those on the bottom and right; and **x2y1** to those on the top and left. Ranges specified on the **plot** command apply only to the first set of axes (bottom left).
- name: Batch/Interactive Operation
  id: batch_interactive_operation
  summary: Gnuplot may be executed in either batch or interactive modes, and the two may even be mixed together on many systems
  description: "# Batch/Interactive Operation\n\n**Gnuplot** may be executed in either batch or interactive modes, and the two may even be mixed together on many systems.\n\nAny command-line arguments are assumed to be either program options (see command-line-options) or names of files containing **gnuplot** commands. Each file or command string will be executed in the order specified. The special filename \"-\" is indicates that commands are to be read from stdin. **Gnuplot** exits after the last file is processed. If no load files and no command strings are specified, **gnuplot** accepts interactive input from stdin.\n\n## Command line options\n\nGnuplot accepts the following options on the command line\n\n    -V, --version\n    -h, --help\n    -p  --persist\n    -d  --default-settings\n    -s  --slow\n    -e  \"command1; command2; ...\"\n    -c  scriptfile ARG1 ARG2 ...\n\n-p tells the program not to close any remaining interactive plot windows when the program exits.\n\n-d tells the program not to execute any private or system initialization (see **[initialization](start_up_initialization#initialization)**).\n\n-s tells the program to wait for slow font initialization on startup. Otherwise it prints an error and continues with bad font metrics.\n\n-e \"command\" tells gnuplot to execute that single command before continuing.\n\n-c is equivalent to -e \"call scriptfile ARG1 ARG2 ...\". See **[call](call#call)**.\n\n## Examples\n\nTo launch an interactive session:\n\n    gnuplot\n\nTo launch a batch session using two command files \"input1\" and \"input2\":\n\n    gnuplot input1 input2\n\nTo launch an interactive session after an initialization file \"header\" and followed by another command file \"trailer\":\n\n    gnuplot header - trailer\n\nTo give **gnuplot** commands directly in the command line, using the \"-persist\" option so that the plot remains on the screen afterwards:\n\n    gnuplot -persist -e \"set title 'Sine curve'; plot sin(x)\"\n\nTo set user-defined variables a and s prior to executing commands from a file:\n\n    gnuplot -e \"a=2; s='file.png'\" input.gpl\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Batch/Interactive Operation Command line options
  id: batch_interactive_operation#SECTION02081000000000000000
  summary: -p tells the program not to close any remaining interactive plot windows when the program exits
  belongs_to: Batch/Interactive Operation
  description: |-
    ## Command line options

    Gnuplot accepts the following options on the command line

        -V, --version
        -h, --help
        -p  --persist
        -d  --default-settings
        -s  --slow
        -e  "command1; command2; ..."
        -c  scriptfile ARG1 ARG2 ...

    -p tells the program not to close any remaining interactive plot windows when the program exits.

    -d tells the program not to execute any private or system initialization (see **[initialization](start_up_initialization#initialization)**).

    -s tells the program to wait for slow font initialization on startup. Otherwise it prints an error and continues with bad font metrics.

    -e "command" tells gnuplot to execute that single command before continuing.

    -c is equivalent to -e "call scriptfile ARG1 ARG2 ...". See **[call](call#call)**.
- name: Batch/Interactive Operation Examples
  id: batch_interactive_operation#SECTION02082000000000000000
  summary: Copyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley Distributed under the gnuplot license (rights to distribute modified versions are withheld)
  belongs_to: Batch/Interactive Operation
  description: "## Examples\n\nTo launch an interactive session:\n\n    gnuplot\n\nTo launch a batch session using two command files \"input1\" and \"input2\":\n\n    gnuplot input1 input2\n\nTo launch an interactive session after an initialization file \"header\" and followed by another command file \"trailer\":\n\n    gnuplot header - trailer\n\nTo give **gnuplot** commands directly in the command line, using the \"-persist\" option so that the plot remains on the screen afterwards:\n\n    gnuplot -persist -e \"set title 'Sine curve'; plot sin(x)\"\n\nTo set user-defined variables a and s prior to executing commands from a file:\n\n    gnuplot -e \"a=2; s='file.png'\" input.gpl\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Be
  id: complete_list_terminals#SECTION05013000000000000000
  summary: The be terminal type is present if gnuplot is built for the beos operating system and for use with X servers
  description: |-
    ## Be

    The **be** terminal type is present if gnuplot is built for the **beos** operating system and for use with X servers. It is selected at program startup if the **DISPLAY** environment variable is set, if the **TERM** environment variable is set to **xterm**, or if the **-display** command line option is used.

    Syntax:

        set terminal be {reset} {<n>}

    Multiple plot windows are supported: **set terminal be \<n\>** directs the output to plot window number n. If n\>0, the terminal number will be appended to the window title and the icon will be labeled **gplt \<n\>**. The active window may distinguished by a change in cursor (from default to crosshair.)

    Plot windows remain open even when the **gnuplot** driver is changed to a different device. A plot window can be closed by pressing the letter q while that window has input focus, or by choosing **close** from a window manager menu. All plot windows can be closed by specifying **reset**, which actually terminates the subprocess which maintains the windows (unless **-persist** was specified).

    Plot windows will automatically be closed at the end of the session unless the **-persist** option was given.

    The size or aspect ratio of a plot may be changed by resizing the **gnuplot** window.

    Linewidths and pointsizes may be changed from within **gnuplot** with **set linestyle**.

    For terminal type **be**, **gnuplot** accepts (when initialized) the standard X Toolkit options and resources such as geometry, font, and name from the command line arguments or a configuration file. See the X(1) man page (or its equivalent) for a description of such options.

    A number of other **gnuplot** options are available for the **be** terminal. These may be specified either as command-line options when **gnuplot** is invoked or as resources in the configuration file ".Xdefaults". They are set upon initialization and cannot be altered during a **gnuplot** session.
- name: Be Color_resources
  id: complete_list_terminals#SECTION05013300000000000000
  summary: For color displays, gnuplot honors the following resources (shown here with their default values) or the greyscale resources
  description: |-
    ### Color_resources

    For color displays, **gnuplot** honors the following resources (shown here with their default values) or the greyscale resources. The values may be color names as listed in the BE rgb.txt file on your system, hexadecimal RGB color specifications (see BE documentation), or a color name followed by a comma and an **intensity** value from 0 to 1. For example, **blue, 0.5** means a half intensity blue.

    |     |                              |
    |-----|------------------------------|
    |     | gnuplot\*background: white   |
    |     | gnuplot\*textColor: black    |
    |     | gnuplot\*borderColor: black  |
    |     | gnuplot\*axisColor: black    |
    |     | gnuplot\*line1Color: red     |
    |     | gnuplot\*line2Color: green   |
    |     | gnuplot\*line3Color: blue    |
    |     | gnuplot\*line4Color: magenta |
    |     | gnuplot\*line5Color: cyan    |
    |     | gnuplot\*line6Color: sienna  |
    |     | gnuplot\*line7Color: orange  |
    |     | gnuplot\*line8Color: coral   |

    The command-line syntax for these is, for example,

    Example:

        gnuplot -background coral
- name: Be Command-line_options
  id: complete_list_terminals#SECTION05013100000000000000
  summary: The options are shown above in their command-line syntax
  description: |-
    ### Command-line_options

    In addition to the X Toolkit options, the following options may be specified on the command line when starting **gnuplot** or as resources in your ".Xdefaults" file:

    |              |                                                               |
    |--------------|---------------------------------------------------------------|
    | \`-mono\`    | forces monochrome rendering on color displays.                |
    | \`-gray\`    | requests grayscale rendering on grayscale or color displays.  |
    |              | (Grayscale displays receive monochrome rendering by default.) |
    | \`-clear\`   | requests that the window be cleared momentarily before a      |
    |              | new plot is displayed.                                        |
    | \`-raise\`   | raises plot window after each plot.                           |
    | \`-noraise\` | does not raise plot window after each plot.                   |
    | \`-persist\` | plots windows survive after main gnuplot program exits.       |

    The options are shown above in their command-line syntax. When entered as resources in ".Xdefaults", they require a different syntax.

    Example:

        gnuplot*gray: on

    **gnuplot** also provides a command line option (**-pointsize \<v\>**) and a resource, **gnuplot\*pointsize: \<v\>**, to control the size of points plotted with the **points** plotting style. The value **v** is a real number (greater than 0 and less than or equal to ten) used as a scaling factor for point sizes. For example, **-pointsize 2** uses points twice the default size, and **-pointsize 0.5** uses points half the normal size.
- name: Be Grayscale_resources
  id: complete_list_terminals#SECTION05013400000000000000
  summary: When -gray is selected, gnuplot honors the following resources for grayscale or color displays (shown here with their default values)
  description: |-
    ### Grayscale_resources

    When **-gray** is selected, **gnuplot** honors the following resources for grayscale or color displays (shown here with their default values). Note that the default background is black.

    |     |                             |
    |-----|-----------------------------|
    |     | gnuplot\*background: black  |
    |     | gnuplot\*textGray: white    |
    |     | gnuplot\*borderGray: gray50 |
    |     | gnuplot\*axisGray: gray50   |
    |     | gnuplot\*line1Gray: gray100 |
    |     | gnuplot\*line2Gray: gray60  |
    |     | gnuplot\*line3Gray: gray80  |
    |     | gnuplot\*line4Gray: gray40  |
    |     | gnuplot\*line5Gray: gray90  |
    |     | gnuplot\*line6Gray: gray50  |
    |     | gnuplot\*line7Gray: gray70  |
    |     | gnuplot\*line8Gray: gray30  |
- name: Be Line_resources
  id: complete_list_terminals#SECTION05013500000000000000
  summary: gnuplot honors the following resources for setting the width (in pixels) of plot lines (shown here with their default values.) 0 or 1 means a minimal width line of 1 pixel width
  description: |-
    ### Line_resources

    **gnuplot** honors the following resources for setting the width (in pixels) of plot lines (shown here with their default values.) 0 or 1 means a minimal width line of 1 pixel width. A value of 2 or 3 may improve the appearance of some plots.

    |     |                         |
    |-----|-------------------------|
    |     | gnuplot\*borderWidth: 2 |
    |     | gnuplot\*axisWidth: 0   |
    |     | gnuplot\*line1Width: 0  |
    |     | gnuplot\*line2Width: 0  |
    |     | gnuplot\*line3Width: 0  |
    |     | gnuplot\*line4Width: 0  |
    |     | gnuplot\*line5Width: 0  |
    |     | gnuplot\*line6Width: 0  |
    |     | gnuplot\*line7Width: 0  |
    |     | gnuplot\*line8Width: 0  |

    **gnuplot** honors the following resources for setting the dash style used for plotting lines. 0 means a solid line. A two-digit number **jk** (**j** and **k** are \>= 1 and \<= 9) means a dashed line with a repeated pattern of **j** pixels on followed by **k** pixels off. For example, '16' is a "dotted" line with one pixel on followed by six pixels off. More elaborate on/off patterns can be specified with a four-digit value. For example, '4441' is four on, four off, four on, one off. The default values shown below are for monochrome displays or monochrome rendering on color or grayscale displays. For color displays, the default for each is 0 (solid line) except for **axisDashes** which defaults to a '16' dotted line.

    |     |                            |
    |-----|----------------------------|
    |     | gnuplot\*borderDashes: 0   |
    |     | gnuplot\*axisDashes: 16    |
    |     | gnuplot\*line1Dashes: 0    |
    |     | gnuplot\*line2Dashes: 42   |
    |     | gnuplot\*line3Dashes: 13   |
    |     | gnuplot\*line4Dashes: 44   |
    |     | gnuplot\*line5Dashes: 15   |
    |     | gnuplot\*line6Dashes: 4441 |
    |     | gnuplot\*line7Dashes: 42   |
    |     | gnuplot\*line8Dashes: 13   |
- name: Be Monochrome_options
  id: complete_list_terminals#SECTION05013200000000000000
  summary: For monochrome displays, gnuplot does not honor foreground or background colors
  description: |-
    ### Monochrome_options

    For monochrome displays, **gnuplot** does not honor foreground or background colors. The default is black-on-white. **-rv** or **gnuplot\*reverseVideo: on** requests white-on-black.
- name: Bee swarm plots
  id: bee_swarm_plots
  summary: '"Bee swarm" plots result from applying jitter to separate overlapping points'
  description: "# Bee swarm plots\n\n\"Bee swarm\" plots result from applying jitter to separate overlapping points. A typical use is to compare the distribution of y values exhibited by two or more categories of points, where the category determines the x coordinate. See the **[set jitter](set_show#set_jitter)** command for how to control the overlap criteria and the displacement pattern used for jittering. The plots in the figure were created by the same plot command but different jitter settings.\n\n    set jitter\n    plot $data using 1:2:1 with points lc variable\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Binary
  id: plot#SECTION040182000000000000000
  summary: It is necessary to provide the keyword binary after the filename
  belongs_to: Plot
  description: |-
    ## Binary

    BINARY DATA FILES:

    It is necessary to provide the keyword **binary** after the filename. Adequate details of the file format must be given on the command line or extracted from the file itself for a supported binary **filetype**. In particular, there are two structures for binary files, binary matrix format and binary general format.

    The **binary matrix** format contains a two dimensional array of 32 bit IEEE float values plus an additional column and row of coordinate values. In the **using** specifier of a plot command, column 1 refers to the matrix row coordinate, column 2 refers to the matrix column coordinate, and column 3 refers to the value stored in the array at those coordinates.

    The **binary general** format contains an arbitrary number of columns for which information must be specified at the command line. For example, **array**, **record**, **format** and **using** can indicate the size, format and dimension of data. There are a variety of useful commands for skipping file headers and changing endianess. There are a set of commands for positioning and translating data since often coordinates are not part of the file when uniform sampling is inherent in the data. Unlike reading from a text or matrix binary file, general binary does not treat the generated columns as 1, 2 or 3 in the **using** list. Instead column 1 refers to column 1 of the file, or as specified in the **format** list.

    There are global default settings for the various binary options which may be set using the same syntax as the options when used as part of the **(s)plot \<filename\> binary ...** command. This syntax is **set datafile binary ...**. The general rule is that common command-line specified parameters override file-extracted parameters which override default parameters.

    **Binary matrix** is the default binary format when no keywords specific to **binary general** are given, i.e., **array**, **record**, **format**, **filetype**.

    General binary data can be entered at the command line via the special file name '-'. However, this is intended for use through a pipe where programs can exchange binary data, not for keyboards. There is no "end of record" character for binary data. Gnuplot continues reading from a pipe until it has read the number of points declared in the **array** qualifier. See **[binary matrix](splot#binary_matrix)** or **[binary general](plot#binary_general)** for more details.

    The **index** keyword is not supported, since the file format allows only one surface per file. The **every** and **using** filters are supported. **using** operates as if the data were read in the above triplet form. [Binary File Splot Demo. ](http://www.gnuplot.info/demo/binary.html)
- name: Binary Array
  id: plot#SECTION040182200000000000000
  summary: Describes the sampling array dimensions associated with the binary file
  belongs_to: Plot
  description: |-
    ### Array

    Describes the sampling array dimensions associated with the binary file. The coordinates will be generated by gnuplot. A number must be specified for each dimension of the array. For example, **array=(10,20)** means the underlying sampling structure is two-dimensional with 10 points along the first (x) dimension and 20 points along the second (y) dimension. A negative number indicates that data should be read until the end of file. If there is only one dimension, the parentheses may be omitted. A colon can be used to separate the dimensions for multiple records. For example, **array=25:35** indicates there are two one-dimensional records in the file.
- name: Binary Endian
  id: plot#SECTION040182600000000000000
  summary: Often the endianess of binary data in the file does not agree with the endianess used by the platform on which gnuplot is running
  belongs_to: Plot
  description: |-
    ### Endian

    Often the endianess of binary data in the file does not agree with the endianess used by the platform on which gnuplot is running. Several words can direct gnuplot how to arrange bytes. For example **endian=little** means treat the binary file as having byte significance from least to greatest. The options are

             little:  least significant to greatest significance
                big:  greatest significance to least significance
            default:  assume file endianess is the same as compiler
        swap (swab):  Interchange the significance.  (If things
                      don't look right, try this.)

    Gnuplot can support "middle" ("pdp") endian if it is compiled with that option.
- name: Binary Filetype
  id: plot#SECTION040182700000000000000
  summary: For some standard binary file formats gnuplot can extract all the necessary information from the file in question
  belongs_to: Plot
  description: |-
    ### Filetype

    For some standard binary file formats gnuplot can extract all the necessary information from the file in question. As an example, "format=edf" will read ESRF Header File format files. For a list of the currently supported file formats, type **show datafile binary filetypes**.

    There is a special file type called **auto** for which gnuplot will check if the binary file's extension is a quasi-standard extension for a supported format.

    Command line keywords may be used to override settings extracted from the file. The settings from the file override any defaults. See **[set datafile binary](set_show#set_datafile_binary)**.
- name: Binary Filetype Avs
  id: plot#SECTION040182710000000000000
  summary: avs is one of the automatically recognized binary file types for images
  belongs_to: Plot
  description: |-
    #### Avs

    **avs** is one of the automatically recognized binary file types for images. AVS is an extremely simple format, suitable mostly for streaming between applications. It consists of 2 longs (xwidth, ywidth) followed by a stream of pixels, each with four bytes of information alpha/red/green/blue.
- name: Binary Filetype Edf
  id: plot#SECTION040182720000000000000
  summary: edf is one of the automatically recognized binary file types for images
  belongs_to: Plot
  description: |-
    #### Edf

    **edf** is one of the automatically recognized binary file types for images. EDF stands for ESRF Data Format, and it supports both edf and ehf formats (the latter means ESRF Header Format). More information on specifications can be found at

        http://www.edfplus.info/specs
- name: Binary Filetype Png
  id: plot#SECTION040182730000000000000
  summary: If gnuplot was configured to use the libgd library for png/gif/jpeg output, then it can also be used to read these same image types as binary files
  belongs_to: Plot
  description: |-
    #### Png

    If gnuplot was configured to use the libgd library for png/gif/jpeg output, then it can also be used to read these same image types as binary files. You can use an explicit command

        plot 'file.png' binary filetype=png

    Or the file type will be recognized automatically from the extension if you have previously requested

        set datafile binary filetype=auto
- name: Binary Format
  id: plot#SECTION040182500000000000000
  summary: The default binary format is a float
  belongs_to: Plot
  description: |-
    ### Format

    The default binary format is a float. For more flexibility, the format can include details about variable sizes. For example, **format="%uchar%int%float"** associates an unsigned character with the first using column, an int with the second column and a float with the third column. If the number of size specifications is less than the greatest column number, the size is implicitly taken to be similar to the last given variable size.

    Furthermore, similar to the **using** specification, the format can include discarded columns via the **\*** character and have implicit repetition via a numerical repeat-field. For example, **format="%\*2int%3float"** causes gnuplot to discard two ints before reading three floats. To list variable sizes, type **show datafile binary datasizes**. There are a group of names that are machine dependent along with their sizes in bytes for the particular compilation. There is also a group of names which attempt to be machine independent.
- name: Binary General
  id: plot#SECTION040182100000000000000
  summary: The binary keyword appearing alone indicates a binary data file that contains both coordinate information describing a non-uniform grid and the value of each grid point (see binary matrix)
  belongs_to: Plot
  description: |-
    ### General

    The **binary** keyword appearing alone indicates a binary data file that contains both coordinate information describing a non-uniform grid and the value of each grid point (see **[binary matrix](splot#binary_matrix)**). Binary data in any other format requires additional keywords to describe the layout of the data. Unfortunately the syntax of these required additional keywords is convoluted. Nevertheless the general binary mode is particularly useful for application programs sending large amounts of data to gnuplot.

    Syntax:

        plot '<file_name>' {binary <binary list>} ...
        splot '<file_name>' {binary <binary list>} ...

    General binary format is activated by keywords in \<binary list\> pertaining to information about file structure, i.e., **array**, **record**, **format** or **filetype**. Otherwise, non-uniform matrix binary format is assumed. (See **[binary matrix](splot#binary_matrix)** for more details.)

    Gnuplot knows how to read a few standard binary file types that are fully self-describing, e.g. PNG images. Type **show datafile binary** at the command line for a list. Apart from these, you can think of binary data files as conceptually the same as text data. Each point has columns of information which are selected via the **using** specification. If no **format** string is specified, gnuplot will read in a number of binary values equal to the largest column given in the **\<using list\>**. For example, **using 1:3** will result in three columns being read, of which the second will be ignored. Certain plot types have an associated default using specification. For example, **with image** has a default of **using 1**, while **with rgbimage** has a default of **using 1:2:3**.
- name: Binary Keywords
  id: plot#SECTION040182800000000000000
  summary: The following keywords apply only when generating coordinates from binary data files
  belongs_to: Plot
  description: |-
    ### Keywords

    The following keywords apply only when generating coordinates from binary data files. That is, the control mapping the individual elements of a binary array, matrix, or image to specific x/y/z positions.
- name: Binary Keywords Center
  id: plot#SECTION040182860000000000000
  summary: Similar to origin, this keyword will position the array such that its center lies at the point given by the tuple
  belongs_to: Plot
  description: |-
    #### Center

    Similar to **origin**, this keyword will position the array such that its center lies at the point given by the tuple. For example, **center=(0,0)**. Center does not apply when the size of the array is **Inf**.
- name: Binary Keywords Dx, dy, dz
  id: plot#SECTION040182830000000000000
  summary: When gnuplot generates coordinates, it uses the spacing described by these keywords
  belongs_to: Plot
  description: |-
    #### Dx, dy, dz

    When gnuplot generates coordinates, it uses the spacing described by these keywords. For example **dx=10 dy=20** would mean space samples along the x dimension by 10 and space samples along the y dimension by 20. **dy** cannot appear if **dx** does not appear. Similarly, **dz** cannot appear if **dy** does not appear. If the underlying dimensions are greater than the keywords specified, the spacing of the highest dimension given is extended to the other dimensions. For example, if an image is being read from a file and only **dx=3.5** is given gnuplot uses a delta x and delta y of 3.5.

    The following keywords also apply only when generating coordinates. However they may also be used with matrix binary files.
- name: Binary Keywords Flipx, flipy, flipz
  id: plot#SECTION040182840000000000000
  summary: Sometimes the scanning directions in a binary datafile are not consistent with that assumed by gnuplot
  belongs_to: Plot
  description: |-
    #### Flipx, flipy, flipz

    Sometimes the scanning directions in a binary datafile are not consistent with that assumed by gnuplot. These keywords can flip the scanning direction along dimensions x, y, z.
- name: Binary Keywords Origin=
  id: plot#SECTION040182850000000000000
  summary: When gnuplot generates coordinates based upon transposition and flip, it attempts to always position the lower left point in the array at the origin, i.e., the data lies in the first quadrant of a Cartesian system after transpose and flip
  belongs_to: Plot
  description: |-
    #### Origin=

    When gnuplot generates coordinates based upon transposition and flip, it attempts to always position the lower left point in the array at the origin, i.e., the data lies in the first quadrant of a Cartesian system after transpose and flip.

    To position the array somewhere else on the graph, the **origin** keyword directs gnuplot to position the lower left point of the array at a point specified by a tuple. The tuple should be a double for **plot** and a triple for **splot**. For example, **origin=(100,100):(100,200)** is for two records in the file and intended for plotting in two dimensions. A second example, **origin=(0,0,3.5)**, is for plotting in three dimensions.
- name: Binary Keywords Perpendicular
  id: plot#SECTION040182880000000000000
  summary: For splot, the concept of a rotational vector is implemented by a triple representing the vector to be oriented normal to the two-dimensional x-y plane
  belongs_to: Plot
  description: |-
    #### Perpendicular

    For **splot**, the concept of a rotational vector is implemented by a triple representing the vector to be oriented normal to the two-dimensional x-y plane. Naturally, the default is (0,0,1). Thus specifying both rotate and perpendicular together can orient data myriad ways in three-space.

    The two-dimensional rotation is done first, followed by the three-dimensional rotation. That is, if R' is the rotational 2 x 2 matrix described by an angle, and P is the 3 x 3 matrix projecting (0,0,1) to (xp,yp,zp), let R be constructed from R' at the upper left sub-matrix, 1 at element 3,3 and zeros elsewhere. Then the matrix formula for translating data is v' = P R v, where v is the 3 x 1 vector of data extracted from the data file. In cases where the data of the file is inherently not three-dimensional, logical rules are used to place the data in three-space. (E.g., usually setting the z-dimension value to zero and placing 2D data in the x-y plane.)
- name: Binary Keywords Rotate
  id: plot#SECTION040182870000000000000
  summary: The transpose and flip commands provide some flexibility in generating and orienting coordinates
  belongs_to: Plot
  description: |-
    #### Rotate

    The transpose and flip commands provide some flexibility in generating and orienting coordinates. However, for full degrees of freedom, it is possible to apply a rotational vector described by a rotational angle in two dimensions.

    The **rotate** keyword applies to the two-dimensional plane, whether it be **plot** or **splot**. The rotation is done with respect to the positive angle of the Cartesian plane.

    The angle can be expressed in radians, radians as a multiple of pi, or degrees. For example, **rotate=1.5708**, **rotate=0.5pi** and **rotate=90deg** are equivalent.

    If **origin** is specified, the rotation is done about the lower left sample point before translation. Otherwise, the rotation is done about the array **center**.
- name: Binary Keywords Scan
  id: plot#SECTION040182810000000000000
  summary: A great deal of confusion can arise concerning the relationship between how gnuplot scans a binary file and the dimensions seen on the plot
  belongs_to: Plot
  description: |-
    #### Scan

    A great deal of confusion can arise concerning the relationship between how gnuplot scans a binary file and the dimensions seen on the plot. To lessen the confusion, conceptually think of gnuplot *always* scanning the binary file point/line/plane or fast/medium/slow. Then this keyword is used to tell gnuplot how to map this scanning convention to the Cartesian convention shown in plots, i.e., x/y/z. The qualifier for scan is a two or three letter code representing where point is assigned (first letter), line is assigned (second letter), and plane is assigned (third letter). For example, **scan=yx** means the fastest, point-by-point, increment should be mapped along the Cartesian y dimension and the middle, line-by-line, increment should be mapped along the x dimension.

    When the plotting mode is **plot**, the qualifier code can include the two letters x and y. For **splot**, it can include the three letters x, y and z.

    There is nothing restricting the inherent mapping from point/line/plane to apply only to Cartesian coordinates. For this reason there are cylindrical coordinate synonyms for the qualifier codes where t (theta), r and z are analogous to the x, y and z of Cartesian coordinates.
- name: Binary Keywords Transpose
  id: plot#SECTION040182820000000000000
  summary: Shorthand notation for scan=yx or scan=yxz
  belongs_to: Plot
  description: |-
    #### Transpose

    Shorthand notation for **scan=yx** or **scan=yxz**. I.e. it affects the assignment of pixels to scan lines during input. To instead transpose an image when it is displayed try

        plot 'imagefile' binary filetype=auto flipx rotate=90deg with rgbimage
- name: Binary Record
  id: plot#SECTION040182300000000000000
  summary: This keyword serves the same function as array and has the same syntax
  belongs_to: Plot
  description: |-
    ### Record

    This keyword serves the same function as **array** and has the same syntax. However, **record** causes gnuplot to not generate coordinate information. This is for the case where such information may be included in one of the columns of the binary data file.
- name: Binary Skip
  id: plot#SECTION040182400000000000000
  summary: This keyword allows you to skip sections of a binary file
  belongs_to: Plot
  description: |-
    ### Skip

    This keyword allows you to skip sections of a binary file. For instance, if the file contains a 1024 byte header before the start of the data region you would probably want to use

        plot '<file_name>' binary skip=1024 ...

    If there are multiple records in the file, you may specify a leading offset for each. For example, to skip 512 bytes before the 1st record and 256 bytes before the second and third records

        plot '<file_name> binary record=356:356:356 skip=512:256:256 ...
- name: Bind
  id: set_show#SECTION040294000000000000000
  summary: show bind shows the current state of all hotkey bindings
  belongs_to: Set-show
  description: |-
    ## Bind

    **show bind** shows the current state of all hotkey bindings. See **[bind](mouse_input#bind)**.
- name: Bmargin
  id: set_show#SECTION040295000000000000000
  summary: The command set bmargin sets the size of the bottom margin
  belongs_to: Set-show
  description: |-
    ## Bmargin

    The command **set bmargin** sets the size of the bottom margin. Please see **[set margin](set_show#set_margin)** for details.
- name: Border
  id: set_show#SECTION040296000000000000000
  summary: The set border and unset border commands control the display of the graph borders for the plot and splot commands
  belongs_to: Set-show
  description: |-
    ## Border

    The **set border** and **unset border** commands control the display of the graph borders for the **plot** and **splot** commands. Note that the borders do not necessarily coincide with the axes; with **plot** they often do, but with **splot** they usually do not.

    Syntax:

        set border {<integer>}
                   {front | back | behind}
                   {linestyle | ls <line_style>}
                   {linetype | lt <line_type>} {linewidth | lw <line_width>}
                   {linecolor | lc <colorspec>} {dashtype | dt <dashtype>}
                   {polar}
        unset border
        show border

    With a **splot** displayed in an arbitrary orientation, like **set view 56,103**, the four corners of the x-y plane can be referred to as "front", "back", "left" and "right". A similar set of four corners exist for the top surface, of course. Thus the border connecting, say, the back and right corners of the x-y plane is the "bottom right back" border, and the border connecting the top and bottom front corners is the "front vertical". (This nomenclature is defined solely to allow the reader to figure out the table that follows.)

    The borders are encoded in a 12-bit integer: the four low bits control the border for **plot** and the sides of the base for **splot**; the next four bits control the verticals in **splot**; the four high bits control the edges on top of an **splot**. The border settings is thus the sum of the appropriate entries from the following table:

    |                       |           |                    |
    |-----------------------|-----------|--------------------|
    | Graph Border Encoding |           |                    |
    | Bit                   | plot      | splot              |
    | 1                     | bottom    | bottom left front  |
    | 2                     | left      | bottom left back   |
    | 4                     | top       | bottom right front |
    | 8                     | right     | bottom right back  |
    | 16                    | no effect | left vertical      |
    | 32                    | no effect | back vertical      |
    | 64                    | no effect | right vertical     |
    | 128                   | no effect | front vertical     |
    | 256                   | no effect | top left back      |
    | 512                   | no effect | top right back     |
    | 1024                  | no effect | top left front     |
    | 2048                  | no effect | top right front    |
    | 4096                  | polar     | no effect          |

    The default setting is 31, which is all four sides for **plot**, and base and z axis for **splot**.

    In 2D plots the border is normally drawn on top of all plots elements (**front**). If you want the border to be drawn behind the plot elements, use **set border back**.

    In hidden3d plots the lines making up the border are normally subject to the same hidden3d processing as the plot elements. **set border behind** will override this default.

    Using the optional \<linestyle\>, \<linetype\>, \<linewidth\>, \<linecolor\>, and \<dashtype\> specifiers, the way the border lines are drawn can be influenced (limited by what the current terminal driver supports). Besides the border itself, this line style is used for the tics, independent of whether they are plotted on the border or on the axes (see **[set xtics](set_show#set_xtics)**).

    For **plot**, tics may be drawn on edges other than bottom and left by enabling the second axes – see **[set xtics](set_show#set_xtics)** for details.

    If a **splot** draws only on the base, as is the case with "**unset surface; set contour base**", then the verticals and the top are not drawn even if they are specified.

    The **set grid** options 'back', 'front' and 'layerdefault' also control the order in which the border lines are drawn with respect to the output of the plotted data.

    The **polar** keyword enables a circular border for polar plots.

    Examples:

    Draw default borders:

        set border

    Draw only the left and bottom (**plot**) or both front and back bottom left (**splot**) borders:

        set border 3

    Draw a complete box around a **splot**:

        set border 4095

    Draw a topless box around a **splot**, omitting the front vertical:

        set border 127+256+512 # or set border 1023-128

    Draw only the top and right borders for a **plot** and label them as axes:

        unset xtics; unset ytics; set x2tics; set y2tics; set border 12
- name: Boxdepth
  id: set_show#SECTION040298000000000000000
  summary: The set boxdepth command affects only 3D plots created by splot with boxes
  belongs_to: Set-show
  description: |-
    ## Boxdepth

    The **set boxdepth** command affects only 3D plots created by **splot with boxes**. It sets the extent of each box along the y axis, i.e. its thickness.
- name: Boxerrorbars
  id: boxerrorbars
  summary: The boxerrorbars style is only relevant to 2D data plotting
  description: "# Boxerrorbars\n\nThe **boxerrorbars** style is only relevant to 2D data plotting. It is a combination of the **boxes** and **yerrorbars** styles. It requires 3, 4, or 5 columns of data. An additional (4th, 5th or 6th) input column may be used to provide variable (per-datapoint) color information (see **[linecolor](linetypes_colors_styles#linecolor)** and **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**). The error bar will be drawn in the same color as the border of the box.\n\n    3 columns:  x  y  ydelta\n    4 columns:  x  y  ydelta xdelta        # boxwidth != -2\n    4 columns:  x  y  ylow  yhigh          # boxwidth == -2\n    5 columns:  x  y  ylow  yhigh  xdelta\n\nThe boxwidth will come from the fourth column if the y errors are given as \"ydelta\" and the boxwidth was not previously set to -2.0 (**set boxwidth -2.0**) or from the fifth column if the y errors are in the form of \"ylow yhigh\". The special case **boxwidth = -2.0** is for four-column data with y errors in the form \"ylow yhigh\". In this case the boxwidth will be calculated so that each box touches the adjacent boxes. The width will also be calculated in cases where three-column data are used.\n\nThe box height is determined from the y error in the same way as it is for the **yerrorbars** style — either from y-ydelta to y+ydelta or from ylow to yhigh, depending on how many data columns are provided.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Boxes
  id: boxes
  summary: In 2D plots the boxes style draws a rectangle centered about the given x coordinate that extends from the x axis, i.e
  description: "# Boxes\n\nIn 2D plots the **boxes** style draws a rectangle centered about the given x coordinate that extends from the x axis, i.e. from y=0 not from the graph border, to the given y coordinate. The width of the box can be provided in an additional input column or controlled by **set boxwidth**. Otherwise each box extends to touch the adjacent boxes.\n\nIn 3D plots the **boxes** style draws a box centered at the given \\[x,y\\] coordinate that extends from the plane at z=0 to the given z coordinate. The width of the box on x can be provided in a separate input column or via **set boxwidth**. The depth of the box on y is controlled by **set boxdepth**. Boxes do not automatically expand to touch each other as in 2D plots.\n\n## 2D boxes\n\n**plot with boxes** uses 2 or 3 columns of basic data. Additional input columns may be used to provide information such as variable line or fill color. See **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**.\n\n    2 columns:  x  y\n    3 columns:  x  y  x_width\n\nThe width of the box is obtained in one of three ways. If the input data has a third column, this will be used to set the box width. Otherwise if a width has been set using the **set boxwidth** command, this will be used. If neither of these is available, the width of each box will be calculated so that it touches the adjacent boxes.\n\nThe box interiors are drawn using the current fillstyle. Alternatively a fillstyle may be specified in the plot command. See **[set style fill](set_show#set_style_fill)**. If no fillcolor is given in the plot command, the current line color is used.\n\nExamples:\n\nTo plot a data file with solid filled boxes with a small vertical space separating them (bargraph):\n\n    set boxwidth 0.9 relative\n    set style fill solid 1.0\n    plot 'file.dat' with boxes\n\nTo plot a sine and a cosine curve in pattern-filled boxes style:\n\n    set style fill pattern\n    plot sin(x) with boxes, cos(x) with boxes\n\nThe sin plot will use pattern 0; the cos plot will use pattern 1. Any additional plots would cycle through the patterns supported by the terminal driver.\n\nTo specify explicit fillstyles and fillcolors for each dataset:\n\n    plot 'file1' with boxes fs solid 0.25 fc 'cyan', \\\n         'file2' with boxes fs solid 0.50 fc 'blue', \\\n         'file3' with boxes fs solid 0.75 fc 'magenta', \\\n         'file4' with boxes fill pattern 1, \\\n         'file5' with boxes fill empty\n\n## 3D boxes\n\n**splot with boxes** requires at least 3 columns of input data. Additional input columns may be used to provide information such as box width or fill color.\n\n    3 columns:  x  y  z\n    4 columns:  x  y  z  [x_width or color]\n    5 columns:  x  y  z  x_width  color\n\nThe last column is used as a color only if the splot command specifies a variable color mode. Examples\n\n    splot 'blue_boxes.dat' using 1:2:3 fc \"blue\"\n    splot 'rgb_boxes.dat' using 1:2:3:4 fc rgb variable\n    splot 'category_boxes.dat' using 1:2:3:4:5 lc variable\n\nIn the first example all boxes are blue and have the width previously set by **set boxwidth**. In the second example the box width is still taken from **set boxwidth** because the 4th column is interpreted as a 24-bit RGB color. The third example command reads box width from column 4 and interprets the value in column 5 as an integer linetype from which the color is derived.\n\nBy default boxes have no thickness; they consist of a single rectangle parallel to the xz plane at the specified y coordinate. You can change this to a true box with four sides and a top by setting a non-zero extent on y. See **[set boxdepth](set_show#set_boxdepth)**.\n\n3D boxes are processed as pm3d quadrangles rather than as surfaces. Because of this the front/back order of drawing is not affected by **set hidden3d**. Similarly if you want each box face to have a border you must use **set pm3d border** rather than **set style fill border**. See **[set pm3d](set_show#set_pm3d)**. For best results use a combination of **set pm3d depthorder base** and **set pm3d lighting**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Boxes 2D boxes
  id: boxes#SECTION03041000000000000000
  summary: plot with boxes uses 2 or 3 columns of basic data
  belongs_to: Boxes
  description: |-
    ## 2D boxes

    **plot with boxes** uses 2 or 3 columns of basic data. Additional input columns may be used to provide information such as variable line or fill color. See **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**.

        2 columns:  x  y
        3 columns:  x  y  x_width

    The width of the box is obtained in one of three ways. If the input data has a third column, this will be used to set the box width. Otherwise if a width has been set using the **set boxwidth** command, this will be used. If neither of these is available, the width of each box will be calculated so that it touches the adjacent boxes.

    The box interiors are drawn using the current fillstyle. Alternatively a fillstyle may be specified in the plot command. See **[set style fill](set_show#set_style_fill)**. If no fillcolor is given in the plot command, the current line color is used.

    Examples:

    To plot a data file with solid filled boxes with a small vertical space separating them (bargraph):

        set boxwidth 0.9 relative
        set style fill solid 1.0
        plot 'file.dat' with boxes

    To plot a sine and a cosine curve in pattern-filled boxes style:

        set style fill pattern
        plot sin(x) with boxes, cos(x) with boxes

    The sin plot will use pattern 0; the cos plot will use pattern 1. Any additional plots would cycle through the patterns supported by the terminal driver.

    To specify explicit fillstyles and fillcolors for each dataset:

        plot 'file1' with boxes fs solid 0.25 fc 'cyan', \
             'file2' with boxes fs solid 0.50 fc 'blue', \
             'file3' with boxes fs solid 0.75 fc 'magenta', \
             'file4' with boxes fill pattern 1, \
             'file5' with boxes fill empty
- name: Boxes 3D boxes
  id: boxes#SECTION03042000000000000000
  summary: splot with boxes requires at least 3 columns of input data
  belongs_to: Boxes
  description: "## 3D boxes\n\n**splot with boxes** requires at least 3 columns of input data. Additional input columns may be used to provide information such as box width or fill color.\n\n    3 columns:  x  y  z\n    4 columns:  x  y  z  [x_width or color]\n    5 columns:  x  y  z  x_width  color\n\nThe last column is used as a color only if the splot command specifies a variable color mode. Examples\n\n    splot 'blue_boxes.dat' using 1:2:3 fc \"blue\"\n    splot 'rgb_boxes.dat' using 1:2:3:4 fc rgb variable\n    splot 'category_boxes.dat' using 1:2:3:4:5 lc variable\n\nIn the first example all boxes are blue and have the width previously set by **set boxwidth**. In the second example the box width is still taken from **set boxwidth** because the 4th column is interpreted as a 24-bit RGB color. The third example command reads box width from column 4 and interprets the value in column 5 as an integer linetype from which the color is derived.\n\nBy default boxes have no thickness; they consist of a single rectangle parallel to the xz plane at the specified y coordinate. You can change this to a true box with four sides and a top by setting a non-zero extent on y. See **[set boxdepth](set_show#set_boxdepth)**.\n\n3D boxes are processed as pm3d quadrangles rather than as surfaces. Because of this the front/back order of drawing is not affected by **set hidden3d**. Similarly if you want each box face to have a border you must use **set pm3d border** rather than **set style fill border**. See **[set pm3d](set_show#set_pm3d)**. For best results use a combination of **set pm3d depthorder base** and **set pm3d lighting**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Boxplot
  id: boxplot
  summary: Boxplots are a common way to represent a statistical distribution of values
  description: "# Boxplot\n\nBoxplots are a common way to represent a statistical distribution of values. Quartile boundaries are determined such that 1/4 of the points have a value equal or less than the first quartile boundary, 1/2 of the points have a value equal or less than the second quartile (median) value, etc. A box is drawn around the region between the first and third quartiles, with a horizontal line at the median value. Whiskers extend from the box to user-specified limits. Points that lie outside these limits are drawn individually.\n\nExamples\n\n    # Place a boxplot at x coordinate 1.0 representing the y values in column 5\n    plot 'data' using (1.0):5\n\n    # Same plot but suppress outliers and force the width of the boxplot to 0.3\n    set style boxplot nooutliers\n    plot 'data' using (1.0):5:(0.3)\n\nBy default only one boxplot is produced that represents all y values from the second column of the using specification. However, an additional (fourth) column can be added to the specification. If present, the values of that column will be interpreted as the discrete levels of a factor variable. As many boxplots will be drawn as there are levels in the factor variable. The separation between these boxplots is 1.0 by default, but it can be changed by **set style boxplot separation**. By default, the value of the factor variable is shown as a tic label below (or above) each boxplot.\n\nExample\n\n    # Suppose that column 2 of 'data' contains either \"control\" or \"treatment\"\n    # The following example produces two boxplots, one for each level of the\n    # factor\n    plot 'data' using (1.0):5:(0):2\n\nThe default width of the box can be set via **set boxwidth \\<width\\>** or may be specified as an optional 3rd column in the **using** clause of the plot command. The first and third columns (x coordinate and width) are normally provided as constants rather than as data columns.\n\nBy default the whiskers extend from the ends of the box to the most distant point whose y value lies within 1.5 times the interquartile range. By default outliers are drawn as circles (point type 7). The width of the bars at the end of the whiskers may be controlled using **[set bars](set_show#set_bars)** or **[set errorbars](set_show#set_errorbars)**.\n\nThese default properties may be changed using the **set style boxplot** command. See **[set style boxplot](set_show#set_style_boxplot)**, **[bars](set_show#bars)**, **[boxwidth](set_show#boxwidth)**, **[fillstyle](set_show#fillstyle)**, **[candlesticks](candlesticks#candlesticks)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Boxwidth
  id: set_show#SECTION040297000000000000000
  summary: The set boxwidth command is used to set the default width of boxes in the boxes, boxerrorbars, boxplot, candlesticks and histograms styles
  belongs_to: Set-show
  description: |-
    ## Boxwidth

    The **set boxwidth** command is used to set the default width of boxes in the **boxes**, **boxerrorbars**, **boxplot**, **candlesticks** and **histograms** styles.

    Syntax:

        set boxwidth {<width>} {absolute|relative}
        show boxwidth

    By default, adjacent boxes are extended in width until they touch each other. A different default width may be specified using the **set boxwidth** command. **Relative** widths are interpreted as being a fraction of this default width.

    An explicit value for the boxwidth is interpreted as being a number of units along the current x axis (**absolute**) unless the modifier **relative** is given. If the x axis is a log-scale (see **[set log](set_show#set_log)**) then the value of boxwidth is truly "absolute" only at x=1; this physical width is maintained everywhere along the axis (i.e. the boxes do not become narrower the value of x increases). If the range spanned by a log scale x axis is far from x=1, some experimentation may be required to find a useful value of boxwidth.

    The default is superseded by explicit width information taken from an extra data column in styles **boxes** or **boxerrorbars**. In a four-column data set, the fourth column will be interpreted as the box width unless the width is set to -2.0, in which case the width will be calculated automatically. See **[style boxes](boxes#style_boxes)** and **[style boxerrorbars](boxerrorbars#style_boxerrorbars)** for more details.

    To set the box width to automatic use the command

        set boxwidth

    or, for four-column data,

        set boxwidth -2

    The same effect can be achieved with the **using** keyword in **plot**:

        plot 'file' using 1:2:3:4:(-2)

    To set the box width to half of the automatic size use

        set boxwidth 0.5 relative

    To set the box width to an absolute value of 2 use

        set boxwidth 2 absolute
- name: Boxxyerror
  id: boxxyerror
  summary: The boxxyerror plot style is only relevant to 2D data plotting
  description: "# Boxxyerror\n\nThe **boxxyerror** plot style is only relevant to 2D data plotting. It is similar to the **xyerrorbars** style except that it draws rectangular areas rather than crosses. It uses either 4 or 6 basic columns of input data. Additional input columns may be used to provide information such as variable line or fill color (see **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**).\n\n    4 columns:  x  y  xdelta  ydelta\n    6 columns:  x  y  xlow  xhigh  ylow  yhigh\n\nThe box width and height are determined from the x and y errors in the same way as they are for the **xyerrorbars** style — either from xlow to xhigh and from ylow to yhigh, or from x-xdelta to x+xdelta and from y-ydelta to y+ydelta, depending on how many data columns are provided.\n\nThe 6 column form of the command provides a convenient way to plot rectangles with arbitrary x and y bounds.\n\nAn additional (5th or 7th) input column may be used to provide variable (per-datapoint) color information (see **[linecolor](linetypes_colors_styles#linecolor)** and **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**).\n\nThe interior of the boxes is drawn according to the current fillstyle. See **[set style fill](set_show#set_style_fill)** and **[boxes](boxes#boxes)** for details. Alternatively a new fillstyle may be specified in the plot command.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Break
  id: break
  summary: The break command is only meaningful inside the bracketed iteration clause of a do or while statement
  description: "# Break\n\nThe **break** command is only meaningful inside the bracketed iteration clause of a **do** or **while** statement. It causes the remaining statements inside the bracketed clause to be skipped and iteration is terminated. Execution resumes at the statement following the closing bracket. See also **[continue](continue#continue)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Caca
  id: complete_list_terminals#SECTION05014000000000000000
  summary: '[EXPERIMENTAL] The caca terminal is a mostly-for-fun output mode that uses libcaca to plot using ascii characters'
  description: |-
    ## Caca

    \[EXPERIMENTAL\] The **caca** terminal is a mostly-for-fun output mode that uses **libcaca** to plot using ascii characters. In contrast to the **dumb** terminal it includes support for color, box fill, images, rotated text, filled polygons, and mouse interaction.

    Syntax:

        set terminal caca {{driver | format} {default | <driver> | list}}
                          {color | monochrome}
                          {{no}inverted}
                          {enhanced | noenhanced}
                          {background <rgb color>}
                          {title "<plot window title>"}
                          {size <width>,<height>}
                          {charset ascii|blocks|unicode}

    The **driver** option selects the **libcaca** display driver or export **format**. Use **default** is to let **libcaca** choose the platform default display driver. The default driver can be changed by setting the environment variable CACA_DRIVER before starting **gnuplot**. Use **set term caca driver list** to print a list of supported output modes.

    The **color** and **monochrome** options select colored or mono output. Note that this also changes line symbols. Use the **inverted** option if you prefer a black background over the default white. This also changes the color of black default linetypes to white.

    Enhanced text support can be activated using the **enhanced** option, see **[enhanced text](enhanced_text_mode#enhanced_text)**.

    The title of the output window can be changed with the **title** option, if supported by the **libcaca** driver.

    The **size** option selects the size of the canvas in characters. The default is 80 by 25. If supported by the backend, the canvas size will be automatically adjusted to the current window/terminal size. The default size of the "x11" and "gl" window can be controlled via the CACA_GEOMETRY environment variable. The geometry of the window of the "win32" driver can be controlled and permanently changed via the app menu.

    The **charset** option selects the character set used for lines, points, filling of polygons and boxes and dithering of images. Note that some backend/terminal/font combinations might not support some characters of the **blocks** or **unicode** character set. On Windows it is recommend to use a non-raster font such as "Lucida Console" or "Consolas".

    The caca terminal supports mouse interaction. Please beware that some backends of **libcaca** (e.g. slang, ncurses) only update the mouse position on mouse clicks. Modifier keys (ctrl, alt, shift) are not supported by **libcaca** and are thus unavailable.

    The default **encoding** of the **caca** terminal is utf8. It also supports the cp437 **encoding**.

    The number of colors supported by **libcaca** backends differs. Most backends support 16 foreground and 16 background colors only, whereas e.g. the "x11" backend supports truecolor.

    Depending on the terminal and **libcaca** backend, only 8 different background colors might be supported. Bright colors (with the most most significant bit of the background color set) are then interpreted as indicator for blinking text. Try using **background rgb "gray"** in that case.

    See also the libcaca web site at [http://caca.zoy.org/wiki/libcaca ](http://caca.zoy.org/wiki/libcaca)

    and libcaca environment variables [http://caca.zoy.org/doxygen/libcaca/libcaca-env.html ](http://caca.zoy.org/doxygen/libcaca/libcaca-env.html)
- name: Caca limitations and bugs
  id: complete_list_terminals#SECTION05014100000000000000
  summary: Unicode support depends on the driver and the terminal
  description: |-
    ### Caca limitations and bugs

    The **caca** terminal has known bugs and limitations:

    Unicode support depends on the driver and the terminal. The "x11" backend supports unicode since libcaca version 0.99.beta17. Due to a bug in **libcaca** \<0.99.beta20, the "slang" driver does not support unicode. Note that **libcaca** \<0.99.beta19 contains a bug which results in an endless loop if you supply illegal 8bit sequences.

    Bright background colors may cause blinking.

    Modifier keys are not supported for mousing, see **[term caca](complete_list_terminals#term_caca)**.

    Rotated enhanced text, and transparency are not supported. The **size** option is not considered for on-screen display.

    In order to correctly draw the key box, use

        set key width 1 height 1

    Alignment of enhanced text is wrong if it contains utf8 characters. Resizing of Windows console window does not work correctly due to a bug in libcaca. Closing the terminal window by clicking the "X" on the title line will terminate wgnuplot. Press "q" to close the window.
- name: Cairolatex
  id: complete_list_terminals#SECTION05015000000000000000
  summary: The cairolatex terminal device generates encapsulated PostScript (*.eps), PDF, or PNG output using the cairo and pango support libraries and uses LaTeX for text output using the same routines as the epslatex terminal
  description: |-
    ## Cairolatex

    The **cairolatex** terminal device generates encapsulated PostScript (\*.eps), PDF, or PNG output using the cairo and pango support libraries and uses LaTeX for text output using the same routines as the **epslatex** terminal.

    Syntax:

        set terminal cairolatex
                       {eps | pdf | png}
                       {standalone | input}
                       {blacktext | colortext | colourtext}
                       {header <header> | noheader}
                       {mono|color}
                       {{no}transparent} {{no}crop} {background <rgbcolor>}
                       {font <font>} {fontscale <scale>}
                       {linewidth <lw>} {rounded|butt|square} {dashlength <dl>}
                       {size <XX>{unit},<YY>{unit}}
                       {resolution <dpi>}

    The cairolatex terminal prints a plot like **terminal epscairo** or **terminal pdfcairo** but transfers the texts to LaTeX instead of including them in the graph. For reference of options not explained here see **[pdfcairo](complete_list_terminals#pdfcairo)**.

    **eps**, **pdf**, or **png** select the type of graphics output. Use **eps** with latex/dvips and **pdf** for pdflatex. If your plot has a huge number of points use **png** to keep the filesize down. When using the **png** option, the terminal accepts an extra option **resolution** to control the pixel density of the resulting PNG. The argument of **resolution** is an integer with the implied unit of DPI.

    **blacktext** forces all text to be written in black even in color mode;

    The **cairolatex** driver offers a special way of controlling text positioning: (a) If any text string begins with '{', you also need to include a '}' at the end of the text, and the whole text will be centered both horizontally and vertically by LaTeX. (b) If the text string begins with '\[', you need to continue it with: a position specification (up to two out of t,b,l,r,c), '\]{', the text itself, and finally, '}'. The text itself may be anything LaTeX can typeset as an LR-box. \\rule{}{}'s may help for best positioning. See also the documentation for the **[pslatex](complete_list_terminals#pslatex)** terminal driver. To create multiline labels, use \\shortstack, for example

        set ylabel '[r]{\shortstack{first line \\ second line}}'

    The **back** option of **set label** commands is handled slightly different than in other terminals. Labels using 'back' are printed behind all other elements of the plot while labels using 'front' are printed above everything else.

    The driver produces two different files, one for the eps, pdf, or png part of the figure and one for the LaTeX part. The name of the LaTeX file is taken from the **set output** command. The name of the eps/pdf/png file is derived by replacing the file extension (normally '.tex') with '.eps'/'.pdf'/'.png' instead. There is no LaTeX output if no output file is given! Remember to close the **output file** before next plot unless in **multiplot** mode.

    In your LaTeX documents use ' \\input{filename}' to include the figure. The '.eps'/'.pdf'/'.png' file is included by the command \\includegraphics{...}, so you must also include \\usepackage{graphicx} in the LaTeX preamble. If you want to use coloured text (option **colourtext**) you also have to include \\usepackage{color} in the LaTeX preamble.

    The behaviour concerning font selection depends on the header mode. In all cases, the given font size is used for the calculation of proper spacing. When not using the **standalone** mode the actual LaTeX font and font size at the point of inclusion is taken, so use LaTeX commands for changing fonts. If you use e.g. 12pt as font size for your LaTeX document, use '", 12"' as options. The font name is ignored. If using **standalone** the given font and font size are used, see below for a detailed description.

    If text is printed coloured is controlled by the TeX booleans \\ifGPcolor and \\ifGPblacktext. Only if \\ifGPcolor is true and \\ifGPblacktext is false, text is printed coloured. You may either change them in the generated TeX file or provide them globally in your TeX file, for example by using

        \newif\ifGPblacktext
        \GPblacktexttrue

    in the preamble of your document. The local assignment is only done if no global value is given.

    When using the cairolatex terminal give the name of the TeX file in the **set output** command including the file extension (normally ".tex"). The graph filename is generated by replacing the extension.

    If using the **standalone** mode a complete LaTeX header is added to the LaTeX file; and "-inc" is added to the filename of the gaph file. The **standalone** mode generates a TeX file that produces output with the correct size when using dvips, pdfTeX, or VTeX. The default, **input**, generates a file that has to be included into a LaTeX document using the \\input command.

    If a font other than "" or "default" is given it is interpreted as LaTeX font name. It contains up to three parts, separated by a comma: 'fontname,fontseries,fontshape'. If the default fontshape or fontseries are requested, they can be omitted. Thus, the real syntax for the fontname is '{fontname}{,fontseries}{,fontshape}'. The naming convention for all parts is given by the LaTeX font scheme. The fontname is 3 to 4 characters long and is built as follows: One character for the font vendor, two characters for the name of the font, and optionally one additional character for special fonts, e.g., 'j' for fonts with old-style numerals or 'x' for expert fonts. The names of many fonts is described in [http://www.tug.org/fontname/fontname.pdf ](http://www.tug.org/fontname/fontname.pdf)

    For example, 'cmr' stands for Computer Modern Roman, 'ptm' for Times-Roman, and 'phv' for Helvetica. The font series denotes the thickness of the glyphs, in most cases 'm' for normal ("medium") and 'bx' or 'b' for bold fonts. The font shape is 'n' for upright, 'it' for italics, 'sl' for slanted, or 'sc' for small caps, in general. Some fonts may provide different font series or shapes.

    Examples:

    Use Times-Roman boldface (with the same shape as in the surrounding text):

        set terminal cairolatex font 'ptm,bx'

    Use Helvetica, boldface, italics:

        set terminal cairolatex font 'phv,bx,it'

    Continue to use the surrounding font in slanted shape:

        set terminal cairolatex font ',,sl'

    Use small capitals:

        set terminal cairolatex font ',,sc'

    By this method, only text fonts are changed. If you also want to change the math fonts you have to use the "gnuplot.cfg" file or the **header** option, described below.

    In **standalone** mode, the font size is taken from the given font size in the **set terminal** command. To be able to use a specified font size, a file "size\<size\>.clo" has to reside in the LaTeX search path. By default, 10pt, 11pt, and 12pt are supported. If the package "extsizes" is installed, 8pt, 9pt, 14pt, 17pt, and 20pt are added.

    The **header** option takes a string as argument. This string is written into the generated LaTeX file. If using the **standalone** mode, it is written into the preamble, directly before the \\begin{document} command. In the **input** mode, it is placed directly after the \\begingroup command to ensure that all settings are local to the plot.

    Examples:

    Use T1 fontencoding, change the text and math font to Times-Roman as well as the sans-serif font to Helvetica:

        set terminal cairolatex standalone header \
        "\\usepackage[T1]{fontenc}\n\\usepackage{mathptmx}\n\\usepackage{helvet}"

    Use a boldface font in the plot, not influencing the text outside the plot:

        set terminal cairolatex input header "\\bfseries"

    If the file "gnuplot.cfg" is found by LaTeX it is input in the preamble the LaTeX document, when using **standalone** mode. It can be used for further settings, e.g., changing the document font to Times-Roman, Helvetica, and Courier, including math fonts (handled by "mathptmx.sty"):

        \usepackage{mathptmx}
        \usepackage[scaled=0.92]{helvet}
        \usepackage{courier}

    The file "gnuplot.cfg" is loaded before the header information given by the **header** command. Thus, you can use **header** to overwrite some of settings performed using "gnuplot.cfg"
- name: Call
  id: call
  summary: 'The call command is identical to the load command with one exception: the name of the file being loaded may be followed by up to nine parameters'
  description: "# Call\n\nThe **call** command is identical to the **load** command with one exception: the name of the file being loaded may be followed by up to nine parameters.\n\n    call \"inputfile\" <param-1> <param-2> <param-3> ... <param-9>\n\nPrevious versions of gnuplot performed macro-like substitution of the special tokens $0, $1, ... $9 with the literal contents of these parameters. This mechanism is now deprecated (see **[call old-style](call#call_old-style)**).\n\nGnuplot now provides a set of string variables ARG0, ARG1, ..., ARG9 and an integer variable ARGC. When a **call** command is executed ARG0 is set to the name of the input file, ARGC is set to the number of parameters present, and ARG1 to ARG9 are loaded from the parameters that follow it on the command line. Any existing contents of the ARG variables are saved and restored across a **call** command.\n\nBecause the parameters ARG1 ... ARG9 are stored in ordinary string variables they may be dereferenced by macro expansion (analogous to the older deprecated syntax). However in many cases it is more natural to use them as you would any other variable.\n\nIn parallel to the string parameters ARG1 ... ARG9, the passed parameters are stored in an array ARGV\\[9\\]. See **[argv](call#argv)**.\n\n## Argv\\[ \\]\n\nWhen a gnuplot script is entered via the **call** command any parameters passed by the caller are available via two mechanisms. Each parameter is stored as a string in variables ARG1, ARG2, ... ARG9. Each parameter is also stored as one element of the array ARGV\\[9\\]. Numerical values are stored as complex variables. All other values are stored as strings. Thus after a call\n\n    call 'routine_1.gp'  1 pi \"title\"\n\nThe three arguments are available inside routine_1.gp as follows\n\n    ARG1 = \"1\"         ARGV[1] = 1.0\n    ARG2 = \"3.14159\"   ARGV[2] = 3.14159265358979...\n    ARG3 = \"title\"     ARGV[3] = \"title\"\n\nIn this example ARGV\\[1\\] and ARGV\\[2\\] have the full precision of a floating point variable. ARG2 lost precision in being stored as a string using format \"%g\".\n\n## Example\n\n    Call site\n        MYFILE = \"script1.gp\"\n        FUNC = \"sin(x)\"\n        call MYFILE FUNC 1.23 \"This is a plot title\"\n    Upon entry to the called script\n        ARG0 holds \"script1.gp\"\n        ARG1 holds the string \"sin(x)\"\n        ARG2 holds the string \"1.23\"\n        ARG3 holds the string \"This is a plot title\"\n        ARGC is 3\n    The script itself can now execute\n        plot @ARG1 with lines title ARG3\n        print ARG2 * 4.56, @ARG2 * 4.56\n        print \"This plot produced by script \", ARG0\n\nNotice that because ARG1 is a string it must be dereferenced as a macro, but ARG2 may be dereferenced either as a macro (yielding a numerical constant) or a variable (yielding that same numerical value after auto-promotion of the string \"1.23\" to a real).\n\nThe same result could be obtained directly from a shell script by invoking gnuplot with the **-c** command line option:\n\n    gnuplot -persist -c \"script1.gp\" \"sin(x)\" 1.23 \"This is a plot title\"\n\n## Old-style\n\nThis describes the deprecated call mechanism used by old versions of gnuplot.\n\n    call \"<input-file>\" <param-0> <param-1> ... <param-9>\n\nThe name of the input file must be enclosed in quotes. As each line is read from the input file, it is scanned for the following special character sequences: $0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $#. If found, the sequence **$**+digit is replaced by the corresponding parameter from the **call** command line. Quote characters are not copied and string variable substitution is not performed. The character sequence **$#** is replaced by the number of passed parameters. **$** followed by any other character is treated as an escape sequence; use **$$** to get a single **$**.\n\nExample:\n\nIf the file 'calltest.gp' contains the line:\n\n    print \"argc=$# p0=$0 p1=$1 p2=$2 p3=$3 p4=$4 p5=$5 p6=$6 p7=x$7x\"\n\nentering the command:\n\n    call 'calltest.gp' \"abcd\" 1.2 + \"'quoted'\" -- \"$2\"\n\nwill display:\n\n    argc=7 p0=abcd p1=1.2 p2=+ p3='quoted' p4=- p5=- p6=$2 p7=xx\n\nNOTES: This use of the **$** character conflicts both with gnuplot's own syntax for datafile columns and with the use of **$** to indicate environmental variables in a unix-like shell. The special sequence **$#** was mis-interpreted as a comment delimiter in gnuplot versions 4.5 through 4.6.3. Quote characters are ignored during substitution, so string constants are easily corrupted.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Call Argv[ ]
  id: call#SECTION04031000000000000000
  summary: When a gnuplot script is entered via the call command any parameters passed by the caller are available via two mechanisms
  belongs_to: Call
  description: |-
    ## Argv\[ \]

    When a gnuplot script is entered via the **call** command any parameters passed by the caller are available via two mechanisms. Each parameter is stored as a string in variables ARG1, ARG2, ... ARG9. Each parameter is also stored as one element of the array ARGV\[9\]. Numerical values are stored as complex variables. All other values are stored as strings. Thus after a call

        call 'routine_1.gp'  1 pi "title"

    The three arguments are available inside routine_1.gp as follows

        ARG1 = "1"         ARGV[1] = 1.0
        ARG2 = "3.14159"   ARGV[2] = 3.14159265358979...
        ARG3 = "title"     ARGV[3] = "title"

    In this example ARGV\[1\] and ARGV\[2\] have the full precision of a floating point variable. ARG2 lost precision in being stored as a string using format "%g".
- name: Call Example
  id: call#SECTION04032000000000000000
  summary: Notice that because ARG1 is a string it must be dereferenced as a macro, but ARG2 may be dereferenced either as a macro (yielding a numerical constant) or a variable (yielding that same numerical value after auto-promotion of the string "1.23" to a real)
  belongs_to: Call
  description: |-
    ## Example

        Call site
            MYFILE = "script1.gp"
            FUNC = "sin(x)"
            call MYFILE FUNC 1.23 "This is a plot title"
        Upon entry to the called script
            ARG0 holds "script1.gp"
            ARG1 holds the string "sin(x)"
            ARG2 holds the string "1.23"
            ARG3 holds the string "This is a plot title"
            ARGC is 3
        The script itself can now execute
            plot @ARG1 with lines title ARG3
            print ARG2 * 4.56, @ARG2 * 4.56
            print "This plot produced by script ", ARG0

    Notice that because ARG1 is a string it must be dereferenced as a macro, but ARG2 may be dereferenced either as a macro (yielding a numerical constant) or a variable (yielding that same numerical value after auto-promotion of the string "1.23" to a real).

    The same result could be obtained directly from a shell script by invoking gnuplot with the **-c** command line option:

        gnuplot -persist -c "script1.gp" "sin(x)" 1.23 "This is a plot title"
- name: Call Old-style
  id: call#SECTION04033000000000000000
  summary: This describes the deprecated call mechanism used by old versions of gnuplot
  belongs_to: Call
  description: "## Old-style\n\nThis describes the deprecated call mechanism used by old versions of gnuplot.\n\n    call \"<input-file>\" <param-0> <param-1> ... <param-9>\n\nThe name of the input file must be enclosed in quotes. As each line is read from the input file, it is scanned for the following special character sequences: $0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $#. If found, the sequence **$**+digit is replaced by the corresponding parameter from the **call** command line. Quote characters are not copied and string variable substitution is not performed. The character sequence **$#** is replaced by the number of passed parameters. **$** followed by any other character is treated as an escape sequence; use **$$** to get a single **$**.\n\nExample:\n\nIf the file 'calltest.gp' contains the line:\n\n    print \"argc=$# p0=$0 p1=$1 p2=$2 p3=$3 p4=$4 p5=$5 p6=$6 p7=x$7x\"\n\nentering the command:\n\n    call 'calltest.gp' \"abcd\" 1.2 + \"'quoted'\" -- \"$2\"\n\nwill display:\n\n    argc=7 p0=abcd p1=1.2 p2=+ p3='quoted' p4=- p5=- p6=$2 p7=xx\n\nNOTES: This use of the **$** character conflicts both with gnuplot's own syntax for datafile columns and with the use of **$** to indicate environmental variables in a unix-like shell. The special sequence **$#** was mis-interpreted as a comment delimiter in gnuplot versions 4.5 through 4.6.3. Quote characters are ignored during substitution, so string constants are easily corrupted.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Candlesticks
  id: candlesticks
  summary: The candlesticks style can be used for 2D data plotting of financial data or for generating box-and-whisker plots of statistical data
  description: "# Candlesticks\n\nThe **candlesticks** style can be used for 2D data plotting of financial data or for generating box-and-whisker plots of statistical data. The symbol is a rectangular box, centered horizontally at the x coordinate and limited vertically by the opening and closing prices. A vertical line segment at the x coordinate extends up from the top of the rectangle to the high price and another down to the low. The vertical line will be unchanged if the low and high prices are interchanged.\n\nFive columns of basic data are required:\n\n    financial data:   date  open  low  high  close\n    whisker plot:     x  box_min  whisker_min  whisker_high  box_high\n\nThe width of the rectangle can be controlled by the **set boxwidth** command. For backwards compatibility with earlier gnuplot versions, when the boxwidth parameter has not been set then the width of the candlestick rectangle is taken from **set errorbars \\<width\\>**.\n\nAlternatively, an explicit width for each box-and-whiskers grouping may be specified in an optional 6th column of data. The width must be given in the same units as the x coordinate.\n\nAn additional (6th, or 7th if the 6th column is used for width data) input column may be used to provide variable (per-datapoint) color information (see **[linecolor](linetypes_colors_styles#linecolor)** and **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**).\n\nBy default the vertical line segments have no crossbars at the top and bottom. If you want crossbars, which are typically used for box-and-whisker plots, then add the keyword **whiskerbars** to the plot command. By default these whiskerbars extend the full horizontal width of the candlestick, but you can modify this by specifying a fraction of the full width.\n\nThe usual convention for financial data is that the rectangle is empty if (open \\< close) and solid fill if (close \\< open). This is the behavior you will get if the current fillstyle is set to \"empty\". See **[fillstyle](set_show#fillstyle)**. If you set the fillstyle to solid or pattern, then this will be used for all boxes independent of open and close values. See also **[set errorbars](set_show#set_errorbars)** and **[financebars](financebars#financebars)**. See also the [candlestick ](http://www.gnuplot.info/demo/candlesticks.html)\n\nand [finance ](http://www.gnuplot.info/demo/finance.html)\n\ndemos.\n\nNote: To place additional symbols, such as the median value, on a box-and-whisker plot requires additional plot commands as in this example:\n\n    # Data columns:X Min 1stQuartile Median 3rdQuartile Max\n    set errorbars 4.0\n    set style fill empty\n    plot 'stat.dat' using 1:3:2:6:5 with candlesticks title 'Quartiles', \\\n         ”         using 1:4:4:4:4 with candlesticks lt -1 notitle\n\n    # Plot with crossbars on the whiskers, crossbars are 50% of full width\n    plot 'stat.dat' using 1:3:2:6:5 with candlesticks whiskerbars 0.5\n\nSee **[set boxwidth](set_show#set_boxwidth)**, **[set errorbars](set_show#set_errorbars)**, **[set style fill](set_show#set_style_fill)**, and **[boxplot](boxplot#boxplot)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Canvas
  id: complete_list_terminals#SECTION05016000000000000000
  summary: The canvas terminal creates a set of javascript commands that draw onto the HTML5 canvas element
  description: |-
    ## Canvas

    The **canvas** terminal creates a set of javascript commands that draw onto the HTML5 canvas element. Syntax:

        set terminal canvas {size <xsize>, <ysize>} {background <rgb_color>}
                            {font {<fontname>}{,<fontsize>}} | {fsize <fontsize>}
                            {{no}enhanced} {linewidth <lw>}
                            {rounded | butt | square}
                            {dashlength <dl>}
                            {standalone {mousing} | name '<funcname>'}
                            {jsdir 'URL/for/javascripts'}
                            {title '<some string>'}

    where \<xsize\> and \<ysize\> set the size of the plot area in pixels. The default size in standalone mode is 600 by 400 pixels. The default font size is 10.

    NB: Only one font is available, the ascii portion of Hershey simplex Roman provided in the file canvastext.js. You can replace this with the file canvasmath.js, which contains also UTF-8 encoded Hershey simplex Greek and math symbols. For consistency with other terminals, it is also possible to use **font "name,size"**. Currently the font **name** is ignored, but browser support for named fonts is likely to arrive eventually.

    The default **standalone** mode creates an html page containing javascript code that renders the plot using the HTML 5 canvas element. The html page links to two required javascript files 'canvastext.js' and 'gnuplot_common.js'. An additional file 'gnuplot_dashedlines.js' is needed to support dashed lines. By default these point to local files, on unix-like systems usually in directory /usr/local/share/gnuplot/\<version\>/js. See installation notes for other platforms. You can change this by using the **jsdir** option to specify either a different local directory or a general URL. The latter is usually appropriate if the plot is exported for viewing on remote client machines.

    All plots produced by the canvas terminal are mouseable. The additional keyword **mousing** causes the **standalone** mode to add a mouse-tracking box underneath the plot. It also adds a link to a javascript file 'gnuplot_mouse.js' and to a stylesheet for the mouse box 'gnuplot_mouse.css' in the same local or URL directory as 'canvastext.js'.

    The **name** option creates a file containing only javascript. Both the javascript function it contains and the id of the canvas element that it draws onto are taken from the following string parameter. The commands

        set term canvas name 'fishplot'
        set output 'fishplot.js'

    will create a file containing a javascript function fishplot() that will draw onto a canvas with id=fishplot. An html page that invokes this javascript function must also load the canvastext.js function as described above. A minimal html file to wrap the fishplot created above might be:

        <html>
        <head>
            <script src="canvastext.js"></script>
            <script src="gnuplot_common.js"></script>
        </head>
        <body onload="fishplot();">
            <script src="fishplot.js"></script>
            <canvas id="fishplot" width=600 height=400>
                <div id="err_msg">No support for HTML 5 canvas element</div>
            </canvas>
        </body>
        </html>

    The individual plots drawn on this canvas will have names fishplot_plot_1, fishplot_plot_2, and so on. These can be referenced by external javascript routines, for example gnuplot.toggle_visibility("fishplot_plot_2").
- name: Canvas size
  id: canvas_size
  summary: This documentation uses the term "canvas" to mean the full drawing area available for positioning the plot and associated elements like labels, titles, key, etc
  description: "# Canvas size\n\nThis documentation uses the term \"canvas\" to mean the full drawing area available for positioning the plot and associated elements like labels, titles, key, etc. NB: For information about the HTML5 canvas terminal see **[set term canvas](complete_list_terminals#set_term_canvas)**.\n\nIn earlier versions of gnuplot, some terminal types used the values from **set size** to control also the size of the output canvas; others did not. The use of 'set size' for this purpose was deprecated in version 4. Almost all terminals now behave as follows:\n\n**set term \\<terminal_type\\> size \\<XX\\>, \\<YY\\>** controls the size of the output file, or \"canvas\". By default, the plot will fill this canvas.\n\n**set size \\<XX\\>, \\<YY\\>** scales the plot itself relative to the size of the canvas. Scale values less than 1 will cause the plot to not fill the entire canvas. Scale values larger than 1 will cause only a portion of the plot to fit on the canvas. Please be aware that setting scale values larger than 1 may cause problems.\n\nExample:\n\n    set size 0.5, 0.5\n    set term png size 600, 400\n    set output \"figure.png\"\n    plot \"data\" with lines\n\nThese commands produce an output file \"figure.png\" that is 600 pixels wide and 400 pixels tall. The plot will fill the lower left quarter of this canvas. This is consistent with the way multiplot mode has always worked.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Cbdata
  id: set_show#SECTION04029143000000000000000
  summary: Set color box axis data to timeseries (dates/times)
  belongs_to: Set-show
  description: |-
    ## Cbdata

    Set color box axis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.
- name: Cbdtics
  id: set_show#SECTION04029144000000000000000
  summary: The set cbdtics command changes tics on the color box axis to days of the week
  belongs_to: Set-show
  description: |-
    ## Cbdtics

    The **set cbdtics** command changes tics on the color box axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.
- name: Cblabel
  id: set_show#SECTION04029151000000000000000
  summary: This command sets the label for the color box axis
  belongs_to: Set-show
  description: |-
    ## Cblabel

    This command sets the label for the color box axis. Please see **[set xlabel](set_show#set_xlabel)**.
- name: Cbmtics
  id: set_show#SECTION04029152000000000000000
  summary: The set cbmtics command changes tics on the color box axis to months of the year
  belongs_to: Set-show
  description: |-
    ## Cbmtics

    The **set cbmtics** command changes tics on the color box axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.
- name: Cbrange
  id: set_show#SECTION04029153000000000000000
  summary: The set cbrange command sets the range of values which are colored using the current palette by styles with pm3d, with image and with palette
  belongs_to: Set-show
  description: |-
    ## Cbrange

    The **set cbrange** command sets the range of values which are colored using the current **palette** by styles **with pm3d**, **with image** and **with palette**. Values outside of the color range use color of the nearest extreme.

    If the cb-axis is autoscaled in **splot**, then the colorbox range is taken from **zrange**. Points drawn in **splot ... pm3d\|palette** can be filtered by using different **zrange** and **cbrange**.

    Please see **[set xrange](set_show#set_xrange)** for details on **[set cbrange](set_show#set_cbrange)** syntax. See also **[set palette](set_show#set_palette)** and **[set colorbox](set_show#set_colorbox)**.
- name: Cbtics
  id: set_show#SECTION04029154000000000000000
  summary: The set cbtics command controls major (labeled) tics on the color box axis
  belongs_to: Set-show
  description: "## Cbtics\n\nThe **set cbtics** command controls major (labeled) tics on the color box axis. Please see **[set xtics](set_show#set_xtics)** for details.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Cd
  id: cd
  summary: The cd command changes the working directory
  description: "# Cd\n\nThe **cd** command changes the working directory.\n\nSyntax:\n\n    cd '<directory-name>'\n\nThe directory name must be enclosed in quotes.\n\nExamples:\n\n    cd 'subdir'\n    cd \"..\"\n\nIt is recommended that Windows users use single-quotes, because backslash \\[ \\\\\\] has special significance inside double-quotes and has to be escaped. For example,\n\n    cd \"c:\\newdata\"\n\nfails, but\n\n    cd 'c:\\newdata'\n    cd \"c:\\\\newdata\"\n\nwork as expected.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Cgm
  id: complete_list_terminals#SECTION05017000000000000000
  summary: The cgm terminal generates a Computer Graphics Metafile, Version 1
  description: |-
    ## Cgm

    The **cgm** terminal generates a Computer Graphics Metafile, Version 1. This file format is a subset of the ANSI X3.122-1986 standard entitled "Computer Graphics - Metafile for the Storage and Transfer of Picture Description Information".

    Syntax:

            set terminal cgm {color | monochrome} {solid | dashed} {{no}rotate}
                             {<mode>} {width <plot_width>} {linewidth <line_width>}
                             {font "<fontname>,<fontsize>"}
                             {background <rgb_color>}
        [deprecated]         {<color0> <color1> <color2> ...}

    **solid** draws all curves with solid lines, overriding any dashed patterns; \<mode\> is **landscape**, **portrait**, or **default**; \<plot_width\> is the assumed width of the plot in points; \<line_width\> is the line width in points (default 1); \<fontname\> is the name of a font (see list of fonts below) \<fontsize\> is the size of the font in points (default 12).

    The first six options can be in any order. Selecting **default** sets all options to their default values.

    The mechanism of setting line colors in the **set term** command is deprecated. Instead you should set the background using a separate keyword and set the line colors using **set linetype**. The deprecated mechanism accepted colors of the form 'xrrggbb', where x is the literal character 'x' and 'rrggbb' are the red, green and blue components in hex. The first color was used for the background, subsequent colors are assigned to successive line types.

    Examples:

        set terminal cgm landscape color rotate dashed width 432 \
                       linewidth 1  'Helvetica Bold' 12       # defaults
        set terminal cgm linewidth 2  14  # wider lines & larger font
        set terminal cgm portrait "Times Italic" 12
        set terminal cgm color solid      # no pesky dashes!
- name: Cgm font
  id: complete_list_terminals#SECTION05017100000000000000
  summary: The first part of a Computer Graphics Metafile, the metafile description, includes a font table
  description: |-
    ### Cgm font

    The first part of a Computer Graphics Metafile, the metafile description, includes a font table. In the picture body, a font is designated by an index into this table. By default, this terminal generates a table with the following 35 fonts, plus six more with **italic** replaced by **oblique**, or vice-versa (since at least the Microsoft Office and Corel Draw CGM import filters treat **italic** and **oblique** as equivalent):

    |           |                        |                            |
    |-----------|------------------------|----------------------------|
    | CGM fonts |                        |                            |
    |           | Helvetica              | Hershey/Cartographic_Roman |
    |           | Helvetica Bold         | Hershey/Cartographic_Greek |
    |           | Helvetica Oblique      | Hershey/Simplex_Roman      |
    |           | Helvetica Bold Oblique | Hershey/Simplex_Greek      |
    |           | Times Roman            | Hershey/Simplex_Script     |
    |           | Times Bold             | Hershey/Complex_Roman      |
    |           | Times Italic           | Hershey/Complex_Greek      |
    |           | Times Bold Italic      | Hershey/Complex_Italic     |
    |           | Courier                | Hershey/Complex_Cyrillic   |
    |           | Courier Bold           | Hershey/Duplex_Roman       |
    |           | Courier Oblique        | Hershey/Triplex_Roman      |
    |           | Courier Bold Oblique   | Hershey/Triplex_Italic     |
    |           | Symbol                 | Hershey/Gothic_German      |
    |           | ZapfDingbats           | Hershey/Gothic_English     |
    |           | Script                 | Hershey/Gothic_Italian     |
    |           | 15                     | Hershey/Symbol_Set_1       |
    |           |                        | Hershey/Symbol_Set_2       |
    |           |                        | Hershey/Symbol_Math        |

    The first thirteen of these fonts are required for WebCGM. The Microsoft Office CGM import filter implements the 13 standard fonts listed above, and also 'ZapfDingbats' and 'Script'. However, the script font may only be accessed under the name '15'. For more on Microsoft import filter font substitutions, check its help file which you may find here:

        C:\Program Files\Microsoft Office\Office\Cgmimp32.hlp

    and/or its configuration file, which you may find here:

        C:\Program Files\Common Files\Microsoft Shared\Grphflt\Cgmimp32.cfg

    In the **set term** command, you may specify a font name which does not appear in the default font table. In that case, a new font table is constructed with the specified font as its first entry. You must ensure that the spelling, capitalization, and spacing of the name are appropriate for the application that will read the CGM file. (Gnuplot and any MIL-D-28003A compliant application ignore case in font names.) If you need to add several new fonts, use several **set term** commands.

    Example:

        set terminal cgm 'Old English'
        set terminal cgm 'Tengwar'
        set terminal cgm 'Arabic'
        set output 'myfile.cgm'
        plot ...
        set output

    You cannot introduce a new font in a **set label** command.
- name: Cgm fontsize
  id: complete_list_terminals#SECTION05017200000000000000
  summary: Fonts are scaled assuming the page is 6 inches wide
  description: |-
    ### Cgm fontsize

    Fonts are scaled assuming the page is 6 inches wide. If the **size** command is used to change the aspect ratio of the page or the CGM file is converted to a different width, the resulting font sizes will be scaled up or down accordingly. To change the assumed width, use the **width** option.
- name: Cgm linewidth
  id: complete_list_terminals#SECTION05017300000000000000
  summary: The linewidth option sets the width of lines in pt
  description: |-
    ### Cgm linewidth

    The **linewidth** option sets the width of lines in pt. The default width is 1 pt. Scaling is affected by the actual width of the page, as discussed under the **fontsize** and **width** options.
- name: Cgm nofontlist
  id: complete_list_terminals#SECTION05017800000000000000
  summary: The default font table includes the fonts recommended for WebCGM, which are compatible with the Computer Graphics Metafile input filter for Microsoft Office and Corel Draw
  description: |-
    ### Cgm nofontlist

    The default font table includes the fonts recommended for WebCGM, which are compatible with the Computer Graphics Metafile input filter for Microsoft Office and Corel Draw. Another application might use different fonts and/or different font names, which may not be documented. The **nofontlist** (synonym **winword6**) option deletes the font table from the CGM file. In this case, the reading application should use a default table. Gnuplot will still use its own default font table to select font indices. Thus, 'Helvetica' will give you an index of 1, which should get you the first entry in your application's default font table. 'Helvetica Bold' will give you its second entry, etc.
- name: Cgm rotate
  id: complete_list_terminals#SECTION05017400000000000000
  summary: The norotate option may be used to disable text rotation
  description: |-
    ### Cgm rotate

    The **norotate** option may be used to disable text rotation. For example, the CGM input filter for Word for Windows 6.0c can accept rotated text, but the DRAW editor within Word cannot. If you edit a graph (for example, to label a curve), all rotated text is restored to horizontal. The Y axis label will then extend beyond the clip boundary. With **norotate**, the Y axis label starts in a less attractive location, but the page can be edited without damage. The **rotate** option confirms the default behavior.
- name: Cgm size
  id: complete_list_terminals#SECTION05017600000000000000
  summary: Default size of a CGM plot is 32599 units wide and 23457 units high for landscape, or 23457 units wide by 32599 units high for portrait
  description: |-
    ### Cgm size

    Default size of a CGM plot is 32599 units wide and 23457 units high for landscape, or 23457 units wide by 32599 units high for portrait.
- name: Cgm solid
  id: complete_list_terminals#SECTION05017500000000000000
  summary: The solid option may be used to disable dashed line styles in the plots
  description: |-
    ### Cgm solid

    The **solid** option may be used to disable dashed line styles in the plots. This is useful when color is enabled and the dashing of the lines detracts from the appearance of the plot. The **dashed** option confirms the default behavior, which gives a different dash pattern to each line type.
- name: Cgm width
  id: complete_list_terminals#SECTION05017700000000000000
  summary: All distances in the CGM file are in abstract units
  description: |-
    ### Cgm width

    All distances in the CGM file are in abstract units. The application that reads the file determines the size of the final plot. By default, the width of the final plot is assumed to be 6 inches (15.24 cm). This distance is used to calculate the correct font size, and may be changed with the **width** option. The keyword should be followed by the width in points. (Here, a point is 1/72 inch, as in PostScript. This unit is known as a "big point" in TeX.) Gnuplot **expressions** can be used to convert from other units.

    Example:

        set terminal cgm width 432            # default
        set terminal cgm width 6*72           # same as above
        set terminal cgm width 10/2.54*72     # 10 cm wide
- name: Circles
  id: circles
  summary: The circles style plots a circle with an explicit radius at each data point
  description: "# Circles\n\nThe **circles** style plots a circle with an explicit radius at each data point. The radius is always interpreted in the units of the plot's horizontal axis (x or x2). The scale on y and the aspect ratio of the plot are both ignored. If the radius is not given in a separate column for each point it is taken from **set style circle**. In this case the radius may use graph or screen coordinates.\n\nMany combinations of per-point and previously set properties are possible. For 2D plots these include\n\n    using x:y\n    using x:y:radius\n    using x:y:color\n    using x:y:radius:color\n    using x:y:radius:arc_begin:arc_end\n    using x:y:radius:arc_begin:arc_end:color\n\nBy default a full circle will be drawn. It is possible to instead plot arc segments by specifying a start and end angle (in degrees) in columns 4 and 5.\n\nA per-circle color may be provided in the last column of the using specifier. In this case the plot command must include a corresponding variable color term such as **lc variable** or **fillcolor rgb variable**.\n\nFor 3D plots the using specifier must contain\n\n    splot DATA using x:y:z:radius:color\n\nwhere the variable color column is options. See **[set style circle](set_show#set_style_circle)** and **[set style fill](set_show#set_style_fill)**.\n\nExamples:\n\n    # draws circles whose area is proportional to the value in column 3\n    set style fill transparent solid 0.2 noborder\n    plot 'data' using 1:2:(sqrt($3)) with circles, \\\n         'data' using 1:2 with linespoints\n\n    # draws Pac-men instead of circles\n    plot 'data' using 1:2:(10):(40):(320) with circles\n\n    # draw a pie chart with inline data\n    set xrange [-15:15]\n    set style fill transparent solid 0.9 noborder\n    plot '-' using 1:2:3:4:5:6 with circles lc var\n    0    0    5    0    30    1\n    0    0    5   30    70    2\n    0    0    5   70   120    3\n    0    0    5  120   230    4\n    0    0    5  230   360    5\n    e\n\nThe result is similar to using a **points** plot with variable size points and pointstyle 7, except that the circles will scale with the x axis range. See also **[set object circle](set_show#set_object_circle)** and **[fillstyle](set_show#fillstyle)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Clabel
  id: set_show#SECTION0402911000000000000000
  summary: This command is deprecated
  belongs_to: Set-show
  description: |-
    ## Clabel

    This command is deprecated. Use **set cntrlabel** instead. **unset clabel** is replaced by **set cntrlabel onecolor**. **set clabel "format"** is replaced by **set cntrlabel format "format"**.
- name: Clear
  id: clear
  summary: The clear command erases the current screen or output device as specified by set terminal and set output
  description: "# Clear\n\nThe **clear** command erases the current screen or output device as specified by **set terminal** and **set output**. This usually generates a formfeed on hardcopy devices.\n\nFor some terminals **clear** erases only the portion of the plotting surface defined by **set size**, so for these it can be used in conjunction with **set multiplot** to create an inset.\n\nExample:\n\n    set multiplot\n    plot sin(x)\n    set origin 0.5,0.5\n    set size 0.4,0.4\n    clear\n    plot cos(x)\n    unset multiplot\n\nPlease see **[set multiplot](set_show#set_multiplot)**, **[set size](set_show#set_size)**, and **[set origin](set_show#set_origin)** for details.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Clip
  id: set_show#SECTION0402912000000000000000
  summary: Data points whose center lies inside the plot boundaries are normally drawn even if the finite size of the point symbol causes it to extend past a boundary line
  belongs_to: Set-show
  description: |-
    ## Clip

    Syntax:

        set clip {points|one|two|radial}
        unset clip {points|one|two|radial}
        show clip

    Default state:

        unset clip points
        set clip one
        unset clip two
        unset clip radial

    Data points whose center lies inside the plot boundaries are normally drawn even if the finite size of the point symbol causes it to extend past a boundary line. **set clip points** causes such points to be clipped (i.e. not drawn) even though the point center is inside the boundaries of a 2D plot. Data points whose center lies outside the plot boundaries are never drawn.

    **unset clip** causes a line segment in a plot not to be drawn if either end of that segment lies outside the plot boundaries (i.e. xrange and yrange).

    **set clip one** causes **gnuplot** to draw the in-range portion of line segments with one endpoint in range and one endpoint out of range. **set clip two** causes **gnuplot** to draw the in-range portion of line segments with both endpoints out of range. Line segments that lie entirely outside the plot boundaries are never drawn.

    **set clip radial** affects plotting only in polar mode. It clips lines against the radial bound established by **set rrange \[0:MAX\]**. This criteria is applied in conjunction with **set clip {one\|two}**. I.e. the portion of a line between two points with R \> RMAX that passes through the circle R = RMAX is drawn only if both **clip two** and **clip radial** are set.

    Notes:

    \* **set clip** affects only points and lines produced by plot styles **lines**, **linespoints**, **points**, **arrows**, and **vectors**.

    \* Clipping of colored quadrangles drawn for pm3d surfaces and other solid objects is controlled **set pm3d clipping**. The default is smooth clipping against the current zrange.

    \* Object clipping is controlled by the **clip** or **noclip** property of the individual object.

    \* In the current version of gnuplot, "plot with vectors" in polar mode does not test or clip against the maximum radius.
- name: Cntrlabel
  id: set_show#SECTION0402913000000000000000
  summary: set cntrlabel controls the labeling of contours, either in the key (default) or on the plot itself in the case of splot ... with labels
  belongs_to: Set-show
  description: |-
    ## Cntrlabel

    Syntax:

        set cntrlabel {format "format"} {font "font"}
        set cntrlabel {start <int>} {interval <int>}
        set contrlabel onecolor

    **set cntrlabel** controls the labeling of contours, either in the key (default) or on the plot itself in the case of **splot ... with labels**. In the latter case labels are placed along each contour line according to the **pointinterval** or **pointnumber** property of the label descriptor. By default a label is placed on the 5th line segment making up the contour line and repeated every 20th segment. These defaults are equivalent to

        set cntrlabel start 5 interval 20

    They can be changed either via the **set cntrlabel** command or by specifying the interval in the **splot** command itself

        set contours; splot $FOO with labels point pointinterval -1

    Setting the interval to a negative value means that the label appear only once per contour line. However if **set samples** or **set isosamples** is large then many contour lines may be created, each with a single label.

    A contour label is placed in the plot key for each linetype used. By default each contour level is given its own linetype, so a separate label appears for each. The command **set cntrlabel onecolor** causes all contours to be drawn using the same linetype, so only one label appears in the plot key. This command replaces an older command **unset clabel**.
- name: Cntrparam
  id: set_show#SECTION0402914000000000000000
  summary: set cntrparam controls the generation of contours and their smoothness for a contour plot
  belongs_to: Set-show
  description: "## Cntrparam\n\n**set cntrparam** controls the generation of contours and their smoothness for a contour plot. **show contour** displays current settings of **cntrparam** as well as **contour**.\n\nSyntax:\n\n    set cntrparam { { linear\n                    | cubicspline\n                    | bspline\n                    | points <n>\n                    | order <n>\n                    | levels { <n> \n                               | auto {<n>}\n                               | discrete <z1> {,<z2>{,<z3>...}}\n                               | incremental <start>, <incr> {,<end>}\n                             }\n                      {{un}sorted}\n                      {firstlinetype N}\n                    }\n                  }\n    show contour\n\nThis command has two functions. First, it sets the values of z for which contours are to be determined. The number of contour levels \\<n\\> should be an integral constant expression. \\<z1\\>, \\<z2\\> ... are real-valued expressions. Second, it controls the appearance of the individual contour lines.\n\nKeywords controlling the smoothness of contour lines:\n\n**linear**, **cubicspline**, **bspline** — Controls type of approximation or interpolation. If **linear**, then straight line segments connect points of equal z magnitude. If **cubicspline**, then piecewise-linear contours are interpolated between the same equal z points to form somewhat smoother contours, but which may undulate. If **bspline**, a guaranteed-smoother curve is drawn, which only approximates the position of the points of equal-z.\n\n**points** — Eventually all drawings are done with piecewise-linear strokes. This number controls the number of line segments used to approximate the **bspline** or **cubicspline** curve. Number of cubicspline or bspline segments (strokes) = **points** \\* number of linear segments.\n\n**order** — Order of the bspline approximation to be used. The bigger this order is, the smoother the resulting contour. (Of course, higher order bspline curves will move further away from the original piecewise linear data.) This option is relevant for **bspline** mode only. Allowed values are integers in the range from 2 (linear) to 10.\n\nKeywords controlling the selection of contour levels:\n\n**levels auto** — This is the default. \\<n\\> specifies a nominal number of levels; the actual number will be adjusted to give simple labels. If the surface is bounded by zmin and zmax, contours will be generated at integer multiples of dz between zmin and zmax, where dz is 1, 2, or 5 times some power of ten (like the step between two tic marks).\n\n**levels discrete** — Contours will be generated at z = \\<z1\\>, \\<z2\\> ... as specified; the number of discrete levels sets the number of contour levels. In **discrete** mode, any **set cntrparam levels \\<n\\>** are ignored.\n\n**levels incremental** — Contours are generated at values of z beginning at \\<start\\> and increasing by \\<increment\\>, until the number of contours is reached. \\<end\\> is used to determine the number of contour levels, which will be changed by any subsequent **set cntrparam levels \\<n\\>**. If the z axis is logarithmic, \\<increment\\> will be interpreted as a multiplicative factor, as it is for **set ztics**, and \\<end\\> should not be used.\n\nKeywords controlling the assignment of linetype to contours:\n\nBy default the contours are generated in the reverse order specified (**unsorted**). Thus **set cntrparam levels increment 0, 10, 100** will create 11 contours levels starting with 100 and ending with 0. Adding the keyword **sorted** re-orders the contours by increasing numerical value, which in this case would mean the first contour is drawn at 0.\n\nBy default contours are drawn using successive linetypes starting with the next linetype after that used for the corresponding surface. Thus **splot x\\*y lt 5** would use lt 6 for the first contour generated. If **hidden3d** mode is active then each surface uses two linetypes. In this case using default settings would cause the first contour to use the same linetype as the hidden surface, which is undesirable. This can be avoided in either of two ways. (1) Use **set hidden3d offset N** to change the linetype used for the hidden surface. A good choice would be **offset -1** since that will avoid all the contour linetypes. (2) Use the **set cntrparam firstlinetype N** option to specify a block of linetypes used for contour lines independent of whatever was used for the surface. This is particularly useful if you want to customize the set of contour linetypes. N \\<= 0 restores the default.\n\nIf the command **set cntrparam** is given without any arguments specified all options are reset to the default:\n\n    set cntrparam order 4 points 5\n    set cntrparam levels auto 5 unsorted\n    set cntrparam firstlinetype 0"
- name: Cntrparam Examples
  id: set_show#SECTION0402914100000000000000
  summary: See also set contour for control of where the contours are drawn, and set cntrlabel for control of the format of the contour labels and linetypes
  belongs_to: Set-show
  description: |-
    ### Examples

    Examples:

        set cntrparam bspline
        set cntrparam points 7
        set cntrparam order 10

    To select levels automatically, 5 if the level increment criteria are met:

        set cntrparam levels auto 5

    To specify discrete levels at .1, .37, and .9:

        set cntrparam levels discrete .1,1/exp(1),.9

    To specify levels from 0 to 4 with increment 1:

        set cntrparam levels incremental  0,1,4

    To set the number of levels to 10 (changing an incremental end or possibly the number of auto levels):

        set cntrparam levels 10

    To set the start and increment while retaining the number of levels:

        set cntrparam levels incremental 100,50

    To define and use a customized block of contour linetypes

        set linetype 100 lc "red" dt '....'
        do for [L=101:199] {
            if (L%10 == 0) {
                set linetype L lc "black" dt solid lw 2
            } else {
                set linetype L lc "gray" dt solid lw 1
            }
        }
        set cntrparam firstlinetype 100
        set cntrparam sorted levels incremental 0, 1, 100

    See also **[set contour](set_show#set_contour)** for control of where the contours are drawn, and **[set cntrlabel](set_show#set_cntrlabel)** for control of the format of the contour labels and linetypes.

    See also [contours demo (contours.dem) ](http://www.gnuplot.info/demo/contours.html)

    and [contours with user defined levels demo (discrete.dem). ](http://www.gnuplot.info/demo/discrete.html)
- name: Color
  id: set_show#SECTION040299000000000000000
  summary: Gnuplot supports two alternative sets of linetypes
  belongs_to: Set-show
  description: |-
    ## Color

    Gnuplot supports two alternative sets of linetypes. The default set uses a different color for each linetype, although it also allows you to draw dotted or dashed lines in that color. The alternative monochrome set uses only dot/dash pattern or linewidth to distinguish linetypes. The **set color** command selects the color linetypes. See **[set monochrome](set_show#set_monochrome)**, **[set linetype](set_show#set_linetype)**, and **[set colorsequence](set_show#set_colorsequence)**.
- name: Color box
  id: set_show#SECTION0402915000000000000000
  summary: The color scheme, i.e
  belongs_to: Set-show
  description: |-
    ## Color box

    The color scheme, i.e. the gradient of the smooth color with min_z and max_z values of **pm3d**'s **palette**, is drawn in a color box unless **unset colorbox**.

        set colorbox
        set colorbox {
                   { vertical | horizontal } {{no}invert}
                   { default | user }
                   { origin x, y }
                   { size x, y }
                   { front | back }
                   { noborder | bdefault | border [line style] }
                 }
        show colorbox
        unset colorbox

    Color box position can be **default** or **user**. If the latter is specified the values as given with the **origin** and **size** subcommands are used. The box can be drawn after (**front**) or before (**back**) the graph or the surface.

    The orientation of the color gradient can be switched by options **vertical** and **horizontal**.

    **origin x, y** and **size x, y** are used only in combination with the **user** option. The x and y values are interpreted as screen coordinates by default, and this is the only legal option for 3D plots. 2D plots, including splot with **set view map**, allow any coordinate system to be specified. Try for example:

        set colorbox horiz user origin .1,.02 size .8,.04

    which will draw a horizontal gradient somewhere at the bottom of the graph.

    **border** turns the border on (this is the default). **noborder** turns the border off. If an positive integer argument is given after **border**, it is used as a line style tag which is used for drawing the border, e.g.:

        set style line 2604 linetype -1 linewidth .4
        set colorbox border 2604

    will use line style **2604**, a thin line with the default border color (-1) for drawing the border. **bdefault** (which is the default) will use the default border line style for drawing the border of the color box.

    The axis of the color box is called **cb** and it is controlled by means of the usual axes commands, i.e. **set/unset/show** with **cbrange**, **\[m\]cbtics**, **format cb**, **grid \[m\]cb**, **cblabel**, and perhaps even **cbdata**, **\[no\]cbdtics**, **\[no\]cbmtics**.

    **set colorbox** without any parameter switches the position to default. **unset colorbox** resets the default parameters for the colorbox and switches the colorbox off.

    See also help for **[set pm3d](set_show#set_pm3d)**, **[set palette](set_show#set_palette)**, **[x11 pm3d](complete_list_terminals#x11_pm3d)**, and **[set style line](set_show#set_style_line)**.
- name: Colornames
  id: set_show#SECTION0402916000000000000000
  summary: Gnuplot knows a limited number of color names
  belongs_to: Set-show
  description: |-
    ## Colornames

    Gnuplot knows a limited number of color names. You can use these to define the color range spanned by a pm3d palette, or to assign a terminal-independent color to a particular linetype or linestyle. To see the list of known color names, use the command **[show colornames](set_show#show_colornames)**. Example:

        set style line 1 linecolor "sea-green"
- name: Colorsequence
  id: set_show#SECTION0402910000000000000000
  summary: set colorsequence default selects a terminal-independent repeating sequence of eight colors
  belongs_to: Set-show
  description: |-
    ## Colorsequence

    Syntax:

        set colorsequence {default|classic|podo}

    **set colorsequence default** selects a terminal-independent repeating sequence of eight colors. See **[set linetype](set_show#set_linetype)**, **[colors](linetypes_colors_styles#colors)**.

    **set colorsequence classic** lets each separate terminal type provide its own sequence of line colors. The number provided varies from 4 to more than 100, but most start with red/green/blue/magenta/cyan/yellow. This was the default behaviour prior to version 5.

    **set colorsequence podo** selects eight colors drawn from a set recommended by Wong (2011) \[Nature Methods 8:441\] as being easily distinguished by color-blind viewers with either protanopia or deuteranopia.

    In each case you can further customize the length of the sequence and the colors used. See **[set linetype](set_show#set_linetype)**, **[colors](linetypes_colors_styles#colors)**.
- name: Colorspec
  id: linetypes_colors_styles#SECTION020211000000000000000
  summary: Many commands allow you to specify a linetype with an explicit color
  belongs_to: Linetypes, colors, and styles
  description: |-
    ## Colorspec

    Many commands allow you to specify a linetype with an explicit color.

    Syntax:

        ... {linecolor | lc} {"colorname" | <colorspec> | <n>}
        ... {textcolor | tc} {<colorspec> | {linetype | lt} <n>}
        ... {fillcolor | fc} {<colorspec> | linetype <n> | linestyle <n>}

    where \<colorspec\> has one of the following forms:

        rgbcolor "colorname"    # e.g. "blue"
        rgbcolor "0xRRGGBB"     # string containing hexadecimal constant
        rgbcolor "0xAARRGGBB"   # string containing hexadecimal constant
        rgbcolor "#RRGGBB"      # string containing hexadecimal in x11 format
        rgbcolor "#AARRGGBB"    # string containing hexadecimal in x11 format
        rgbcolor <integer val>  # integer value representing AARRGGBB
        rgbcolor variable       # integer value is read from input file
        palette frac <val>      # <val> runs from 0 to 1
        palette cb <value>      # <val> lies within cbrange
        palette z
        variable                # color index is read from input file
        bgnd                    # background color
        black

    The "\<n\>" is the linetype number the color of which is used, see **[test](test#test)**.

    "colorname" refers to one of the color names built in to gnuplot. For a list of the available names, see **[show colornames](set_show#show_colornames)**.

    Hexadecimal constants can be given in quotes as "\#RRGGBB" or "0xRRGGBB", where RRGGBB represents the red, green, and blue components of the color and must be between 00 and FF. For example, magenta = full-scale red + full-scale blue could be represented by "0xFF00FF", which is the hexadecimal representation of (255 \<\< 16) + (0 \<\< 8) + (255).

    "\#AARRGGBB" represents an RGB color with an alpha channel (transparency) value in the high bits. An alpha value of 0 represents a fully opaque color; i.e., "\#00RRGGBB" is the same as "\#RRGGBB". An alpha value of 255 (FF) represents full transparency.

    The color palette is a linear gradient of colors that smoothly maps a single numerical value onto a particular color. Two such mappings are always in effect. **palette frac** maps a fractional value between 0 and 1 onto the full range of the color palette. **palette cb** maps the range of the color axis onto the same palette. See **[set cbrange](set_show#set_cbrange)**. See also **[set colorbox](set_show#set_colorbox)**. You can use either of these to select a constant color from the current palette.

    "palette z" maps the z value of each plot segment or plot element into the cbrange mapping of the palette. This allows smoothly-varying color along a 3d line or surface. It also allows coloring 2D plots by palette values read from an extra column of data (not all 2D plot styles allow an extra column). There are two special color specifiers: **bgnd** for background color and **black**.
- name: Colorspec Background color
  id: linetypes_colors_styles#SECTION020211100000000000000
  summary: Most terminals allow you to set an explicit background color for the plot
  belongs_to: Linetypes, colors, and styles
  description: |-
    ### Background color

    Most terminals allow you to set an explicit background color for the plot. The special linetype **bgnd** will draw in this color, and **bgnd** is also recognized as a color. Examples:

        # This will erase a section of the canvas by writing over it in the
        # background color
        set term wxt background rgb "gray75"
        set object 1 rectangle from x0,y0 to x1,y1 fillstyle solid fillcolor bgnd
        # This will draw an "invisible" line along the x axis
        plot 0 lt bgnd
- name: Colorspec Linecolor variable
  id: linetypes_colors_styles#SECTION020211200000000000000
  summary: lc variable tells the program to use the value read from one column of the input data as a linetype index, and use the color belonging to that linetype
  belongs_to: Linetypes, colors, and styles
  description: |-
    ### Linecolor variable

    **lc variable** tells the program to use the value read from one column of the input data as a linetype index, and use the color belonging to that linetype. This requires a corresponding additional column in the **using** specifier. Text colors can be set similarly using **tc variable**.

    Examples:

        # Use the third column of data to assign colors to individual points
        plot 'data' using 1:2:3 with points lc variable

        # A single data file may contain multiple sets of data, separated by two
        # blank lines.  Each data set is assigned as index value (see `index`)
        # that can be retrieved via the `using` specifier `column(-2)`.
        # See `pseudocolumns`.  This example uses to value in column -2 to
        # draw each data set in a different line color.
        plot 'data' using 1:2:(column(-2)) with lines lc variable
- name: Colorspec Rgbcolor variable
  id: linetypes_colors_styles#SECTION020211300000000000000
  summary: You can assign a separate color for each data point, line segment, or label in your plot
  belongs_to: Linetypes, colors, and styles
  description: |-
    ### Rgbcolor variable

    You can assign a separate color for each data point, line segment, or label in your plot. **lc rgbcolor variable** tells the program to read RGB color information for each line in the data file. This requires a corresponding additional column in the **using** specifier. The extra column is interpreted as a 24-bit packed RGB triple. If the value is provided directly in the data file it is easiest to give it as a hexadecimal value (see **[rgbcolor](linetypes_colors_styles#rgbcolor)**). Alternatively, the **using** specifier can contain an expression that evaluates to a 24-bit RGB color as in the example below. Text colors are similarly set using **tc rgbcolor variable**.

    Example:

        # Place colored points in 3D at the x,y,z coordinates corresponding to
        # their red, green, and blue components
        rgb(r,g,b) = 65536 * int(r) + 256 * int(g) + int(b)
        splot "data" using 1:2:3:(rgb($1,$2,$3)) with points lc rgb variable
- name: Command-line-editing
  id: command_line_editing
  summary: Command-line editing and command history are supported using either an external gnu readline library, an external BSD libedit library, or a built-in equivalent
  description: "# Command-line-editing\n\nCommand-line editing and command history are supported using either an external gnu readline library, an external BSD libedit library, or a built-in equivalent. This choice is a configuration option at the time gnuplot is built.\n\nThe editing commands of the built-in version are given below. Please note that the action of the DEL key is system-dependent. The gnu readline and BSD libedit libraries have their own documentation.\n\n|                               |                                                                      |\n|-------------------------------|----------------------------------------------------------------------|\n| Command-line Editing Commands |                                                                      |\n| Character                     | Function                                                             |\n|                               | Line Editing                                                         |\n| `^B`                          | move back a single character.                                        |\n| `^F`                          | move forward a single character.                                     |\n| `^A`                          | move to the beginning of the line.                                   |\n| `^E`                          | move to the end of the line.                                         |\n| `^H`                          | delete the previous character.                                       |\n| `DEL`                         | delete the current character.                                        |\n| `^D`                          | delete current character. EOF if line is empty.                      |\n| `^K`                          | delete from current position to the end of line.                     |\n| `^L`                          | redraw line in case it gets trashed.                                 |\n| `^U`                          | delete the entire line.                                              |\n| `^W`                          | delete previous word.                                                |\n| `^V`                          | inhibits the interpretation of the following key as editing command. |\n| `TAB`                         | performs filename-completion.                                        |\n|                               | History                                                              |\n| `^P`                          | move back through history.                                           |\n| `^N`                          | move forward through history.                                        |\n| `^R`                          | starts a backward-search.                                            |\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Comments
  id: comments
  summary: 'The comment character # may appear almost anywhere in a command line, and gnuplot will ignore the rest of that line'
  description: "# Comments\n\nThe comment character **\\#** may appear almost anywhere in a command line, and **gnuplot** will ignore the rest of that line. A **\\#** does not have this effect inside a quoted string. Note that if a commented line ends in ' \\\\' then the subsequent line is also treated as part of the comment.\n\nSee also **[set datafile commentschars](set_show#set_datafile_commentschars)** for specifying a comment character for data files.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Complex arithmetic
  id: expressions#SECTION020161000000000000000
  summary: Arithmetic operations and most built-in functions support the use of complex arguments
  belongs_to: Expressions
  description: |-
    ## Complex arithmetic

    Arithmetic operations and most built-in functions support the use of complex arguments. Complex constants are expressed as {\<real\>,\<imag\>}, where \<real\> and \<imag\> must be numerical constants. Thus {0,1} represents 'i'. The real and imaginary components of complex value x can be extracted as real(x) and imag(x). The modulus is given by abs(x).

    Gnuplot's standard 2D and 3D plot styles can plot only real values; if you need to plot a complex-valued function f(x) with non-zero imaginary components you must choose between plotting real(f(x)) or abs(f(x)). For examples of representing complex values using color, see the [complex trigonometric function demos (complex_trig.dem) ](http://www.gnuplot.info/demo/complex_trig.html)
- name: Constants
  id: expressions#SECTION020162000000000000000
  summary: Integer constants are interpreted via the C library routine strtoll()
  belongs_to: Expressions
  description: |-
    ## Constants

    Integer constants are interpreted via the C library routine strtoll(). This means that constants beginning with "0" are interpreted as octal, and constants beginning with "0x" or "0X" are interpreted as hexadecimal.

    Floating point constants are interpreted via the C library routine atof().

    Complex constants are expressed as {\<real\>,\<imag\>}, where \<real\> and \<imag\> must be numerical constants. For example, {3,2} represents 3 + 2i; {0,1} represents 'i' itself. The curly braces are explicitly required here.

    String constants consist of any sequence of characters enclosed either in single quotes or double quotes. The distinction between single and double quotes is important. See **[quotes](syntax#quotes)**.

    Examples:

        1 -10 0xffaabb        # integer constants
        1.0 -10. 1e1 3.5e-1   # floating point constants
        {1.2, -3.4}           # complex constant
        "Line 1\nLine 2"      # string constant (\n is expanded to newline)
        '123\n456'            # string constant (\ and n are ordinary characters)
- name: Context
  id: complete_list_terminals#SECTION05018000000000000000
  summary: ConTeXt is a macro package for TeX, highly integrated with Metapost (for drawing figures) and intended for creation of high-quality PDF documents
  description: |-
    ## Context

    ConTeXt is a macro package for TeX, highly integrated with Metapost (for drawing figures) and intended for creation of high-quality PDF documents. The terminal outputs Metafun source, which can be edited manually, but you should be able to configure most things from outside.

    For an average user of ConTeXt + gnuplot module it's recommended to refer to **Using ConTeXt** rather than reading this page or to read the manual of the gnuplot module for ConTeXt.

    The **context** terminal supports the following options:

    Syntax:

        set term context {default}
                {defaultsize | size <scale> | size <xsize>{in|cm}, <ysize>{in|cm}}
                {input | standalone}
                {timestamp | notimestamp}
                {noheader | header "<header>"}
                {color | colour | monochrome}
                {rounded | mitered | beveled} {round | butt | squared}
                {dashed | solid} {dashlength | dl <dl>}
                {linewidth | lw <lw>}
                {fontscale <fontscale>}
                {mppoints | texpoints}
                {inlineimages | externalimages}
                {defaultfont | font "{<fontname>}{,<fontsize>}"}

    In non-standalone (**input**) graphic only parameters **size** to select graphic size, **fontscale** to scale all the labels for a factor \<fontscale\> and font size, make sense, the rest is silently ignored and should be configured in the .tex file which inputs the graphic. It's highly recommended to set the proper fontsize if document font differs from 12pt, so that gnuplot will know how much space to reserve for labels.

    **default** resets all the options to their default values.

    **defaultsize** sets the plot size to 5in,3in. **size** \<scale\> sets the plot size to \<scale\> times \<default value\>. If two arguments are given (separated with ','), the first one sets the horizontal size and the second one the vertical size. Size may be given without units (in which case it means relative to the default value), with inches ('in') or centimeters ('cm').

    **input** (default) creates a graphic that can be included into another ConTeXt document. **standalone** adds some lines, so that the document might be compiled as-is. You might also want to add **header** in that case.

    Use **header** for any additional settings/definitions/macros that you might want to include in a standalone graphic. **noheader** is the default.

    **notimestamp** prevents printing creation time in comments (if version control is used, one may prefer not to commit new version when only date changes).

    **color** to make color plots is the default, but **monochrome** doesn't do anything special yet. If you have any good ideas how the behaviour should differ to suit the monochrome printers better, your suggestions are welcome.

    **rounded** (default), **mitered** and **beveled** control the shape of line joins. **round** (default), **butt** and **squared** control the shape of line caps. See PostScript or PDF Reference Manual for explanation. For wild-behaving functions and thick lines it is better to use **rounded** and **round** to prevent sharp corners in line joins. (Some general support for this should be added to Gnuplot, so that the same options could be set for each line (style) separately).

    **dashed** (default) uses different dash patterns for different line types, **solid** draws all plots with solid lines.

    **dashlength** or **dl** scales the length of the dashed-line segments by \<dl\>. **linewidth** or **lw** scales all linewidths by \<lw\>. (lw 1 stands for 0.5bp, which is the default line width when drawing with Metapost.) **fontscale** scales text labels for factor \<fontscale\> relative to default document font.

    **mppoints** uses predefined point shapes, drawn in Metapost. **texpoints** uses easily configurable set of symbols, defined with ConTeXt in the following way:

        \defineconversion[my own points][+,{\ss x},\mathematics{\circ}]
        \setupGNUPLOTterminal[context][points=tex,pointset=my own points]

    **inlineimages** writes binary images to a string and only works in ConTeXt MKIV. **externalimages** writes PNG files to disk and also works with ConTeXt MKII. Gnuplot needs to have support for PNG images built in for this to work.

    With **font** you can set font name and size in standalone graphics. In non-standalone (**input**) mode only the font size is important to reserve enough space for text labels. The command

        set term context font "myfont,ss,10"

    will result in

        \setupbodyfont[myfont,ss,10pt]

    If you additionally set **fontscale** to 0.8 for example, then the resulting font will be 8pt big and

        set label ... font "myfont,12"

    will come out as 9.6pt.

    It is your own responsibility to provide proper typescripts (and header), otherwise switching the font will have no effect. For a standard font in ConTeXt MKII (pdfTeX) you could use:

        set terminal context standalone header '\usetypescript[iwona][ec]' \
            font "iwona,ss,11"

    Please take a look into ConTeXt documentation, wiki or mailing list (archives) for any up-to-date information about font usage.

    Examples:

        set terminal context size 10cm, 5cm     # 10cm, 5cm
        set terminal context size 4in, 3in      # 4in, 3in

    For standalone (whole-page) plots with labels in UTF-8 encoding:

        set terminal context standalone header '\enableregime[utf-8]'
- name: Context Calling gnuplot from ConTeXt
  id: complete_list_terminals#SECTION05018200000000000000
  summary: This will run gnuplot automatically and include the resulting figure in the document
  description: |-
    ### Calling gnuplot from ConTeXt

    The easiest way to make plots in ConTeXt documents is

        \usemodule[gnuplot]
        \starttext
        \title{How to draw nice plots with {\sc gnuplot}?}
        \startGNUPLOTscript[sin]
        set format y "%.1f"
        plot sin(x) t '$\sin(x)$'
        \stopGNUPLOTscript
        \useGNUPLOTgraphic[sin]
        \stoptext

    This will run gnuplot automatically and include the resulting figure in the document.
- name: Context Requirements
  id: complete_list_terminals#SECTION05018100000000000000
  summary: and a recent version of ConTeXt
  description: |-
    ### Requirements

    You need gnuplot module for ConTeXt [http://ctan.org/pkg/context-gnuplot ](http://ctan.org/pkg/context-gnuplot)

    and a recent version of ConTeXt. If you want to call gnuplot on-the-fly, you also need write18 enabled. In most TeX distributions this can be set with shell_escape=t in texmf.cnf.

    See [http://wiki.contextgarden.net/Gnuplot ](http://wiki.contextgarden.net/Gnuplot)

    for details about this terminal and for more exhaustive help & examples.
- name: Continue
  id: continue
  summary: The continue command is only meaningful inside the bracketed iteration clause of a do or while statement
  description: "# Continue\n\nThe **continue** command is only meaningful inside the bracketed iteration clause of a **do** or **while** statement. It causes the remaining statements inside the bracketed clause to be skipped. Execution resumes at the start of the next iteration (if any remain in the loop condition). See also **[break](break#break)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Contour
  id: set_show#SECTION0402917000000000000000
  summary: set contour enables contour drawing for surfaces
  belongs_to: Set-show
  description: |-
    ## Contour

    **set contour** enables contour drawing for surfaces. This option is available for **splot** only. It requires grid data, see **[grid_data](splot#grid_data)** for more details. If contours are desired from non-grid data, **set dgrid3d** can be used to create an appropriate grid.

    Syntax:

        set contour {base | surface | both}
        unset contour
        show contour

    The three options specify where to draw the contours: **base** draws the contours on the grid base where the x/ytics are placed, **surface** draws the contours on the surfaces themselves, and **both** draws the contours on both the base and the surface. If no option is provided, the default is **base**.

    See also **[set cntrparam](set_show#set_cntrparam)** for the parameters that affect the drawing of contours, and **[set cntrlabel](set_show#set_cntrlabel)** for control of labeling of the contours.

    The surface can be switched off (see **[unset surface](set_show#unset_surface)**), giving a contour-only graph. Though it is possible to use **set size** to enlarge the plot to fill the screen, more control over the output format can be obtained by writing the contour information to a datablock, and rereading it as a 2D datafile plot:

        unset surface
        set contour
        set cntrparam ...
        set table $datablock
        splot ...
        unset table
        # contour info now in $datablock
        set term <whatever>
        plot $datablock

    In order to draw contours, the data should be organized as "grid data". In such a file all the points for a single y-isoline are listed, then all the points for the next y-isoline, and so on. A single blank line (a line containing no characters other than blank spaces and a carriage return and/or a line feed) separates one y-isoline from the next.

    While **set contour** is in effect, **splot with \<style\>** will place the style elements (points, lines, impulses, labels, etc) along the contour lines. **with pm3d** will produce a pm3d surface and also contour lines. If you want to mix other plot elements, say labels read from a file, with the contours generated while **set contour** is active you must append the keyword **nocontours** after that clause in the splot command.

    See also **[splot datafile](splot#splot_datafile)**.

    See also [contours demo (contours.dem) ](http://www.gnuplot.info/demo/contours.html)

    and [contours with user defined levels demo (discrete.dem). ](http://www.gnuplot.info/demo/discrete.html)
- name: Control
  id: fit#SECTION04094000000000000000
  summary: There are a number of environment variables that can be defined to affect fit before starting gnuplot, see fit control environment
  belongs_to: Fit
  description: |-
    ## Control

    There are a number of environment variables that can be defined to affect **fit** before starting **gnuplot**, see **[fit control environment](fit#fit_control_environment)**. At run time adjustments to the **fit** command operation can be controlled by **set fit**. See **[fit control variables](fit#fit_control_variables)**.
- name: Control Environment variables
  id: fit#SECTION04094200000000000000
  summary: The environment variables must be defined before gnuplot is executed; how to do so depends on your operating system
  belongs_to: Fit
  description: |-
    ### Environment variables

    The environment variables must be defined before **gnuplot** is executed; how to do so depends on your operating system.

        FIT_LOG

    changes the name (and/or path) of the file to which the fit log will be written from the default of "fit.log" in the working directory. The default value can be overwritten using the command **set fit logfile**.

        FIT_SCRIPT

    specifies a command that may be executed after an user interrupt. The default is **replot**, but a **plot** or **load** command may be useful to display a plot customized to highlight the progress of the fit. This setting can also be changed using **set fit script**.
- name: Control variables
  id: fit#SECTION04094100000000000000
  summary: DEPRECATED in version 5
  belongs_to: Fit
  description: |-
    ### Control variables

    DEPRECATED in version 5. These user variables used to affect fit behaviour.

        FIT_LIMIT - use `set fit limit <epsilon>`
        FIT_MAXITER - use `set fit maxiter <number_of_cycles>`
        FIT_START_LAMBDA - use `set fit start-lambda <value>`
        FIT_LAMBDA_FACTOR - use `set fit lambda-factor <value>`
        FIT_SKIP - use the datafile `every` modifier
        FIT_INDEX - See `fit multi-branch`
- name: Coordinates
  id: coordinates
  summary: The commands set arrow, set key, set label and set object allow you to draw something at an arbitrary position on the graph
  description: "# Coordinates\n\nThe commands **set arrow**, **set key**, **set label** and **set object** allow you to draw something at an arbitrary position on the graph. This position is specified by the syntax:\n\n    {<system>} <x>, {<system>} <y> {,{<system>} <z>}\n\nEach \\<system\\> can either be **first**, **second**, **polar**, **graph**, **screen**, or **character**.\n\n**first** places the x, y, or z coordinate in the system defined by the left and bottom axes; **second** places it in the system defined by the x2,y2 axes (top and right); **graph** specifies the area within the axes — 0,0 is bottom left and 1,1 is top right (for splot, 0,0,0 is bottom left of plotting area; use negative z to get to the base — see **[set xyplane](set_show#set_xyplane)**); **screen** specifies the screen area (the entire area — not just the portion selected by **set size**), with 0,0 at bottom left and 1,1 at top right. **character** coordinates are used primarily for offsets, not absolute positions. The **character** vertical and horizontal size depend on the current font.\n\n**polar** causes the first two values to be interpreted as angle theta and radius r rather than as x and y. This could be used, for example, to place labels on a 2D plot in polar coordinates or a 3D plot in cylindrical coordinates.\n\nIf the coordinate system for x is not specified, **first** is used. If the system for y is not specified, the one used for x is adopted.\n\nIn some cases, the given coordinate is not an absolute position but a relative value (e.g., the second position in **set arrow** ... **rto**). In most cases, the given value serves as difference to the first position. If the given coordinate belongs to a log-scaled axis, a relative value is interpreted as multiplier. For example,\n\n    set logscale x\n    set arrow 100,5 rto 10,2\n\nplots an arrow from position 100,5 to position 1000,7 since the x axis is logarithmic while the y axis is linear.\n\nIf one (or more) axis is timeseries, the appropriate coordinate should be given as a quoted time string according to the **timefmt** format string. See **[set xdata](set_show#set_xdata)** and **[set timefmt](set_show#set_timefmt)**. **Gnuplot** will also accept an integer expression, which will be interpreted as seconds relative to 1 January 1970.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Corel
  id: complete_list_terminals#SECTION05019000000000000000
  summary: Legacy terminal for CorelDraw (circa 1995)
  description: |-
    ## Corel

    Legacy terminal for CorelDraw (circa 1995).

    Syntax:

        set terminal corel {monochrome | color} {"<font>" {<fontsize>}}
                           {<xsize> <ysize> {<linewidth> }}

    where the fontsize and linewidth are specified in points and the sizes in inches. The defaults are monochrome, "SwitzerlandLight", 22, 8.2, 10 and 1.2.
- name: Dashtype
  id: linetypes_colors_styles#SECTION020212000000000000000
  summary: In gnuplot version 5 the dash pattern (dashtype) is a separate property associated with each line, analogous to linecolor or linewidth
  belongs_to: Linetypes, colors, and styles
  description: |-
    ## Dashtype

    In gnuplot version 5 the dash pattern (**dashtype**) is a separate property associated with each line, analogous to **linecolor** or **linewidth**. It is not necessary to place the current terminal in a special mode just to draw dashed lines. I.e. the command **set term \<termname\> {solid\|dashed}** is now ignored. If backwards compatibility with old scripts written for version 4 is required, the following lines can be used instead:

        if (GPVAL_VERSION >= 5.0) set for [i=1:9] linetype i dashtype i
        if (GPVAL_VERSION < 5.0) set termoption dashed

    All lines have the property **dashtype solid** unless you specify otherwise. You can change the default for a particular linetype using the command **set linetype** so that it affects all subsequent commands, or you can include the desired dashtype as part of the **plot** or other command.

    Syntax:

        dashtype N          # predefined dashtype invoked by number
        dashtype "pattern"  # string containing a combination of the characters
                            # dot (.) hyphen (-) underscore(_) and space.
        dashtype (s1,e1,s2,e2,s3,e3,s4,e4)  # dash pattern specified by 1 to 4
                            # numerical pairs <solid length>, <emptyspace length>

    Example:

        # Two functions using linetype 1 but distinguished by dashtype
        plot f1(x) with lines lt 1 dt solid, f2(x) with lines lt 1 dt 3

    Some terminals support user-defined dash patterns in addition to whatever set of predefined dash patterns they offer.

    Examples:

        plot f(x) dt 3            # use terminal-specific dash pattern 3
        plot f(x) dt ".. "        # construct a dash pattern on the spot
        plot f(x) dt (2,5,2,15)   # numerical representation of the same pattern
        set dashtype 11 (2,4,4,7) # define new dashtype to be called by index
        plot f(x) dt 11           # plot using our new dashtype

    If you specify a dash pattern using a string the program will convert this to a sequence of \<solid\>,\<empty\> pairs. Dot "." becomes (2,5), dash "-" becomes (10,10), underscore "\_" becomes (20,10), and each space character " " adds 10 to the previous \<empty\> value. The command **show dashtype** will show both the original string and the converted numerical sequence.
- name: Dashtype
  id: set_show#SECTION0402918000000000000000
  summary: The set dashtype command allows you to define a dash pattern that can then be referred to by its index
  belongs_to: Set-show
  description: |-
    ## Dashtype

    The **set dashtype** command allows you to define a dash pattern that can then be referred to by its index. This is purely a convenience, as anywhere that would accept the dashtype by its numerical index would also accept an explicit dash pattern. Example:

        set dashtype 5 (2,4,2,6)   # define or redefine dashtype number 5
        plot f1(x) dt 5            # plot using the new dashtype
        plot f1(x) dt (2,4,2,6)    # exactly the same plot as above
        set linetype 5 dt 5        # always use this dash pattern with linetype 5
        set dashtype 66 "..-"      # define a new dashtype using a string

    See also **[dashtype](linetypes_colors_styles#dashtype)**.
- name: Data
  id: plot#SECTION040183000000000000000
  summary: Discrete data contained in a file can be displayed by specifying the name of the data file (enclosed in single or double quotes) on the plot command line
  belongs_to: Plot
  description: |-
    ## Data

    Discrete data contained in a file can be displayed by specifying the name of the data file (enclosed in single or double quotes) on the **plot** command line.

    Syntax:

        plot '<file_name>' {binary <binary list>}
                           {{nonuniform} matrix}
                           {index <index list> | index "<name>"}
                           {every <every list>}
                           {skip <number-of-lines>}
                           {using <using list>}
                           {smooth <option>}
                           {bins <options>}
                           {volatile} {noautoscale}

    The modifiers **binary**, **index**, **every**, **skip**, **using**, **bins**, and **smooth** are discussed separately. In brief

    - **skip N** tells the program to ignore N lines at the start of the input file
    - **binary** indicates that the file contains binary data rather than text
    - **index** selects which data sets in a multi-data-set file are to be plotted
    - **every** specifies which points within a single data set are to be plotted
    - **using** specifies which columns in the file are to be used in which order
    - **smooth** performs simple filtering, interpolation, or curve-fitting of the data prior to plotting
    - **bins** sorts individual input points into equal-sized intervals along x and plots a single accumulated value per interval
    - **volatile** indicates that the content of the file may not be available to reread later and therefore it should be retained internally for re-use.

    **splot** has a similar syntax but does not support **smooth** or **bins**.

    The **noautoscale** keyword means that the points making up this plot will be ignored when automatically determining axis range limits.

    TEXT DATA FILES:

    Each non-empty line in a data file describes one data point, except that records beginning with **\#** (and also with **!** on VMS) will be treated as comments and ignored.

    Depending on the plot style and options selected, from one to eight values are read from each line and associated with a single data point. See **[using](plot#using)**.

    The individual records on a single line of data must be separated by white space (one or more blanks or tabs) a special field separator character is is specified by the **set datafile** command. A single field may itself contain white space characters if the entire field is enclosed in a pair of double quotes, or if a field separator other than white space is in effect. Whitespace inside a pair of double quotes is ignored when counting columns, so the following datafile line has three columns:

        1.0 "second column" 3.0

    Data may be written in exponential format with the exponent preceded by the letter e or E. The fortran exponential specifiers d, D, q, and Q may also be used if the command **set datafile fortran** is in effect.

    Blank records in a data file are significant. Single blank records designate discontinuities in a **plot**; no line will join points separated by a blank records (if they are plotted with a line style). Two blank records in a row indicate a break between separate data sets. See **[index](plot#index)**.

    If autoscaling has been enabled (**set autoscale**), the axes are automatically extended to include all datapoints, with a whole number of tic marks if tics are being drawn. This has two consequences: i) For **splot**, the corner of the surface may not coincide with the corner of the base. In this case, no vertical line is drawn. ii) When plotting data with the same x range on a dual-axis graph, the x coordinates may not coincide if the x2tics are not being drawn. This is because the x axis has been autoextended to a whole number of tics, but the x2 axis has not. The following example illustrates the problem:

        reset; plot '-', '-' axes x2y1
        1 1
        19 19
        e
        1 1
        19 19
        e

    To avoid this, you can use the **noextend** modifier of the **set autoscale** or **set \[axis\]range** commands. This turns off extension of the axis range to include the next tic mark.

    Label coordinates and text can also be read from a data file (see **[labels](labels#labels)**).
- name: Data Bins
  id: plot#SECTION040183100000000000000
  summary: The bins option to a plot command first assigns the original data to equal width bins on x and then plots a single value per bin
  belongs_to: Plot
  description: |-
    ### Bins

    Syntax:

        plot 'DATA' using <XCOL> {:<YCOL>} bins{=<NBINS>}
             {binrange [<LOW>:<HIGH>]} {binwidth=<width>}
             {binvalue={sum|avg}

    The **bins** option to a **plot** command first assigns the original data to equal width bins on x and then plots a single value per bin. The default number of bins is controlled by **set samples**, but this can be changed by giving an explicit number of bins in the command.

    If no binrange is given, the range is taken from the extremes of the x values found in 'DATA'.

    Given the range and the number of bins, bin width is calculated automatically and points are assigned to bins 0 to NBINS-1

        BINWIDTH = (HIGH - LOW) / (NBINS-1)
        xmin = LOW - BINWIDTH/2
        xmax = HIGH + BINWIDTH/2
        first bin holds points with (xmin <= x < xmin + BINWIDTH)
        last bin holds points with (xmax-BINWIDTH <= x < xman)
        each point is assigned to bin i = floor(NBINS * (x-xmin)/(xmax-xmin))

    Alternatively you can provide a fixed bin width, in which case nbins is calculated as the smallest number of bins that will span the range.

    On output bins are plotted or tabulated by midpoint. E.g. if the program calculates bin width as shown above, the x coordinate output for the first bin is x=LOW (not x=xmin).

    If only a single column is given in the using clause then each data point contributes a count of 1 to the accumulation of total counts in the bin for that x coordinate value. If a second column is given then the value in that column is added to the accumulation for the bin. Thus the following two plot command are equivalent:

        plot 'DATA" using N bins=20
        set samples 20
        plot 'DATA' using (column(N)):(1)

    The y value plotted for each bin is the sum of the y values over all points in that bin. This corresponds to **binvalue=sum**. EXPERIMENTAL: **binvalue=avg** instead plots the mean y value for that bin.

    For related plotting styles see **[smooth frequency](plot#smooth_frequency)** and **[smooth kdensity](plot#smooth_kdensity)**.
- name: Data Columnheaders
  id: plot#SECTION040183200000000000000
  summary: Extra lines at the start of a data file may be explicitly ignored using the skip keyword in the plot command
  belongs_to: Plot
  description: |-
    ### Columnheaders

    Extra lines at the start of a data file may be explicitly ignored using the **skip** keyword in the plot command. A single additional line containing text column headers may be present. It is skipped automatically if the plot command refers explicitly to column headers, e.g. by using them for titles. Otherwise you may need to skip it explicitly either by adding one to the skip count or by setting the attribute **set datafile columnheaders**. See **[skip](plot#skip)**, **[columnhead](expressions#columnhead)**, **[autotitle columnheader](set_show#autotitle_columnheader)**, **[set datafile](set_show#set_datafile)**.
- name: Data Csv files
  id: plot#SECTION040183300000000000000
  summary: '"csv" is short for "comma-separated values". The term "csv file" is loosely applied to files in which data fields are delimited by a specific character, not necessarily a comma'
  belongs_to: Plot
  description: |-
    ### Csv files

    Syntax:

        set datafile separator {whitespace | tab | comma | "chars"}

    "csv" is short for "comma-separated values". The term "csv file" is loosely applied to files in which data fields are delimited by a specific character, not necessarily a comma. To read data from a csv file you must tell gnuplot what the field-delimiting character is. For instance to read from a file using semicolon as a field delimiter:

        set datafile separator ";"

    See **[set datafile separator](set_show#set_datafile_separator)**. This applies only to files used for input. To create a csv file on output, use the corresponding **separator** option to **set table**.
- name: Data Every
  id: plot#SECTION040183400000000000000
  summary: The every keyword allows a periodic sampling of a data set to be plotted
  belongs_to: Plot
  description: |-
    ### Every

    The **every** keyword allows a periodic sampling of a data set to be plotted.

    For ordinary files a "point" single record (line); a "block" of data is a set of consecutive records with blank lines before and after the block.

    For matrix data a "block" and "point" correspond to "row" and "column". See **[matrix every](splot#matrix_every)**.

    Syntax:

        plot 'file' every {<point_incr>}
                            {:{<block_incr>}
                              {:{<start_point>}
                                {:{<start_block>}
                                  {:{<end_point>}
                                    {:<end_block>}}}}}

    The data points to be plotted are selected according to a loop from \<**start_point**\> to \<**end_point**\> with increment \<**point_incr**\> and the blocks according to a loop from \<**start_block**\> to \<**end_block**\> with increment \<**block_incr**\>.

    The first datum in each block is numbered '0', as is the first block in the file.

    Note that records containing unplottable information are counted.

    Any of the numbers can be omitted; the increments default to unity, the start values to the first point or block, and the end values to the last point or block. ':' at the end of the **every** option is not permitted. If **every** is not specified, all points in all lines are plotted.

    Examples:

        every :::3::3    # selects just the fourth block ('0' is first)
        every :::::9     # selects the first 10 blocks
        every 2:2        # selects every other point in every other block
        every ::5::15    # selects points 5 through 15 in each block

    See [simple plot demos (simple.dem) ](http://www.gnuplot.info/demo/simple.html)

    , [Non-parametric splot demos ](http://www.gnuplot.info/demo/surface1.html)

    , and [Parametric splot demos ](http://www.gnuplot.info/demo/surface2.html)

    .
- name: Data Example datafile
  id: plot#SECTION040183500000000000000
  summary: See also binary matrix
  belongs_to: Plot
  description: |-
    ### Example datafile

    This example plots the data in the file "population.dat" and a theoretical curve:

        pop(x) = 103*exp((1965-x)/10)
        set xrange [1960:1990]
        plot 'population.dat', pop(x)

    The file "population.dat" might contain:

        # Gnu population in Antarctica since 1965
           1965   103
           1970   55
           1975   34
           1980   24
           1985   10

    Binary examples:

        # Selects two float values (second one implicit) with a float value
        # discarded between them for an indefinite length of 1D data.
        plot '<file_name>' binary format="%float%*float" using 1:2 with lines

        # The data file header contains all details necessary for creating
        # coordinates from an EDF file.
        plot '<file_name>' binary filetype=edf with image
        plot '<file_name>.edf' binary filetype=auto with image

        # Selects three unsigned characters for components of a raw RGB image
        # and flips the y-dimension so that typical image orientation (start
        # at top left corner) translates to the Cartesian plane.  Pixel
        # spacing is given and there are two images in the file.  One of them
        # is translated via origin.
        plot '<file_name>' binary array=(512,1024):(1024,512) format='%uchar' \
             dx=2:1 dy=1:2 origin=(0,0):(1024,1024) flipy u 1:2:3 w rgbimage

        # Four separate records in which the coordinates are part of the
        # data file.  The file was created with a endianess different from
        # the system on which gnuplot is running.
        splot '<file_name>' binary record=30:30:29:26 endian=swap u 1:2:3

        # Same input file, but this time we skip the 1st and 3rd records
        splot '<file_name>' binary record=30:26 skip=360:348 endian=swap u 1:2:3

    See also **[binary matrix](splot#binary_matrix)**.
- name: Data Index
  id: plot#SECTION040183600000000000000
  summary: The index keyword allows you to select specific data sets in a multi-data-set file for plotting
  belongs_to: Plot
  description: |-
    ### Index

    The **index** keyword allows you to select specific data sets in a multi-data-set file for plotting.

    Syntax:

        plot 'file' index { <m>{:<n>{:<p>}} | "<name>" }

    Data sets are separated by pairs of blank records. **index \<m\>** selects only set \<m\>; **index \<m\>:\<n\>** selects sets in the range \<m\> to \<n\>; and **index \<m\>:\<n\>:\<p\>** selects indices \<m\>, \<m\>+\<p\>, \<m\>+2\<p\>, etc., but stopping at \<n\>. Following C indexing, the index 0 is assigned to the first data set in the file. Specifying too large an index results in an error message. If \<p\> is specified but \<n\> is left blank then every \<p\>-th dataset is read until the end of the file. If **index** is not specified, the entire file is plotted as a single data set.

    Example:

        plot 'file' index 4:5

    For each point in the file, the index value of the data set it appears in is available via the pseudo-column **column(-2)**. This leads to an alternative way of distinguishing individual data sets within a file as shown below. This is more awkward than the **index** command if all you are doing is selecting one data set for plotting, but is very useful if you want to assign different properties to each data set. See **[pseudocolumns](plot#pseudocolumns)**, **[lc variable](linetypes_colors_styles#lc_variable)**.

    Example:

        plot 'file' using 1:(column(-2)==4 ? $2 : NaN)        # very awkward
        plot 'file' using 1:2:(column(-2)) linecolor variable # very useful!

    **index '\<name\>'** selects the data set with name '\<name\>'. Names are assigned to data sets in comment lines. The comment character and leading white space are removed from the comment line. If the resulting line starts with \<name\>, the following data set is now named \<name\> and can be selected.

    Example:

        plot 'file' index 'Population'

    Please note that every comment that starts with \<name\> will name the following data set. To avoid problems it may be useful to choose a naming scheme like '== Population ==' or '\[Population\]'.
- name: Data Piped-data
  id: plot#SECTION0401831000000000000000
  summary: would plot the same information as the first population example but with years since 1965 as the x axis
  belongs_to: Plot
  description: |-
    ### Piped-data

    On systems with a popen function, the datafile can be piped through a shell command by starting the file name with a '\<'. For example,

        pop(x) = 103*exp(-x/10)
        plot "< awk '{print $1-1965, $2}' population.dat", pop(x)

    would plot the same information as the first population example but with years since 1965 as the x axis. If you want to execute this example, you have to delete all comments from the data file above or substitute the following command for the first part of the command above (the part up to the comma):

        plot "< awk '$0 !~ /^#/ {print $1-1965, $2}' population.dat"

    While this approach is most flexible, it is possible to achieve simple filtering with the **using** keyword.

    On systems with an fdopen() function, data can be read from an arbitrary file descriptor attached to either a file or pipe. To read from file descriptor **n** use **'\<&n'**. This allows you to easily pipe in several data files in a single call from a POSIX shell:

        $ gnuplot -p -e "plot '<&3', '<&4'" 3<data-3 4<data-4
        $ ./gnuplot 5< <(myprogram -with -options)
        gnuplot> plot '<&5'
- name: Data Skip
  id: plot#SECTION040183700000000000000
  summary: The skip keyword tells the program to skip lines at the start of a text (i.e
  belongs_to: Plot
  description: |-
    ### Skip

    The **skip** keyword tells the program to skip lines at the start of a text (i.e. not binary) data file. The lines that are skipped do not count toward the line count used in processing the **every** keyword. Note that **skip N** skips lines only at the start of the file, whereas **every ::N** skips lines at the start of every block of data in the file. See also **[binary skip](plot#binary_skip)** for a similar option that applies to binary data files.
- name: Data Smooth
  id: plot#SECTION040183800000000000000
  summary: gnuplot includes a few general-purpose routines for filtering, interpolation and grouping data as it is input; these are grouped under the smooth option
  belongs_to: Plot
  description: |-
    ### Smooth

    **gnuplot** includes a few general-purpose routines for filtering, interpolation and grouping data as it is input; these are grouped under the **smooth** option. More sophisticated data processing may be performed by preprocessing the data externally or by using **fit** with an appropriate model.

    Syntax:

        smooth {unique | frequency | fnormal | cumulative | cnormal | bins
                       | kdensity {bandwidth} {period}
                       | csplines | acsplines | mcsplines | bezier | sbezier
                       | unwrap | zsort}

    The **unique**, **frequency**, **fnormal**, **cumulative** and **cnormal** sort the data on x and then plot some aspect of the distribution of x values.

    The spline and Bezier options determine coefficients describing a continuous curve between the endpoints of the data. This curve is then plotted in the same manner as a function, that is, by finding its value at uniform intervals along the abscissa (see **[set samples](set_show#set_samples)**) and connecting these points with straight line segments. If the data set is interrupted by blank lines or undefined values a separate continuous curve is fit for each uninterrupted subset of the data. Adjacent separately fit segments may be separated by a gap or discontinuity.

    **unwrap** manipulates the data to avoid jumps of more than pi by adding or subtracting multiples of 2\*pi.

    **zsort** uses a 3rd column of input to sort points prior to plotting.

    If **autoscale** is in effect, axis ranges will be computed for the final curve rather than for the original data.

    If **autoscale** is not in effect, and a spline curve is being generated, sampling of the spline fit is done across the intersection of the x range covered by the input data and the fixed abscissa range defined by **set xrange**.

    If too few points are available to apply the requested smoothing operation an error message is produced.

    The **smooth** options have no effect on function plots.
- name: Data Smooth Acsplines
  id: plot#SECTION040183810000000000000
  summary: The smooth acsplines option approximates the data with a natural smoothing spline
  belongs_to: Plot
  description: |-
    #### Acsplines

    The **smooth acsplines** option approximates the data with a natural smoothing spline. After the data are made monotonic in x (see **[smooth unique](plot#smooth_unique)**), a curve is piecewise constructed from segments of cubic polynomials whose coefficients are found by fitting to the individual data points weighted by the value, if any, given in the third column of the using spec. The default is equivalent to

        plot 'data-file' using 1:2:(1.0) smooth acsplines

    Qualitatively, the absolute magnitude of the weights determines the number of segments used to construct the curve. If the weights are large, the effect of each datum is large and the curve approaches that produced by connecting consecutive points with natural cubic splines. If the weights are small, the curve is composed of fewer segments and thus is smoother; the limiting case is the single segment produced by a weighted linear least squares fit to all the data. The smoothing weight can be expressed in terms of errors as a statistical weight for a point divided by a "smoothing factor" for the curve so that (standard) errors in the file can be used as smoothing weights.

    Example:

        sw(x,S)=1/(x*x*S)
        plot 'data_file' using 1:2:(sw($3,100)) smooth acsplines
- name: Data Smooth Bezier
  id: plot#SECTION040183820000000000000
  summary: The smooth bezier option approximates the data with a Bezier curve of degree n (the number of data points) that connects the endpoints
  belongs_to: Plot
  description: |-
    #### Bezier

    The **smooth bezier** option approximates the data with a Bezier curve of degree n (the number of data points) that connects the endpoints.
- name: Data Smooth Bins
  id: plot#SECTION040183830000000000000
  summary: smooth bins is the same as bins
  belongs_to: Plot
  description: |-
    #### Bins

    **smooth bins** is the same as **bins**. See **[bins](plot#bins)**. For related plotting styles see **[smooth frequency](plot#smooth_frequency)** and **[smooth kdensity](plot#smooth_kdensity)**.
- name: Data Smooth Cnormal
  id: plot#SECTION0401838120000000000000
  summary: The smooth cnormal option makes the data monotonic in x and normalises the y-values onto the range [0:1]
  belongs_to: Plot
  description: |-
    #### Cnormal

    The **smooth cnormal** option makes the data monotonic in x and normalises the y-values onto the range \[0:1\]. Points with the same x-value are replaced by a single point containing the cumulative sum of y-values of all data points with lower x-values (i.e. to the left of the current data point) divided by the total sum of all y-values. This can be used to obtain a normalised cumulative distribution function from data (useful when comparing sets of samples with differing numbers of members). See also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)
- name: Data Smooth Csplines
  id: plot#SECTION040183840000000000000
  summary: The smooth csplines option connects consecutive points by natural cubic splines after rendering the data monotonic (see smooth unique)
  belongs_to: Plot
  description: |-
    #### Csplines

    The **smooth csplines** option connects consecutive points by natural cubic splines after rendering the data monotonic (see **[smooth unique](plot#smooth_unique)**).
- name: Data Smooth Cumulative
  id: plot#SECTION0401838110000000000000
  summary: The smooth cumulative option makes the data monotonic in x; points with the same x-value are replaced by a single point containing the cumulative sum of y-values of all data points with lower x-values (i.e
  belongs_to: Plot
  description: |-
    #### Cumulative

    The **smooth cumulative** option makes the data monotonic in x; points with the same x-value are replaced by a single point containing the cumulative sum of y-values of all data points with lower x-values (i.e. to the left of the current data point). This can be used to obtain a cumulative distribution function from data. See also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)
- name: Data Smooth Fnormal
  id: plot#SECTION0401838100000000000000
  summary: The smooth fnormal option work just like the frequency option, but produces a normalized histogram
  belongs_to: Plot
  description: |-
    #### Fnormal

    The **smooth fnormal** option work just like the **frequency** option, but produces a normalized histogram. It makes the data monotonic in x and normalises the y-values so they all sum to 1. Points with the same x-value are replaced by a single point containing the sumed y-values. To plot a histogram of the number of data values in equal size bins, set the y-value to 1.0 so that the sum is a count of occurrences in that bin. This is done implicitly if only a single column is provided. See also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)
- name: Data Smooth Frequency
  id: plot#SECTION040183890000000000000
  summary: The smooth frequency option makes the data monotonic in x; points with the same x-value are replaced by a single point having the summed y-values
  belongs_to: Plot
  description: |-
    #### Frequency

    The **smooth frequency** option makes the data monotonic in x; points with the same x-value are replaced by a single point having the summed y-values. To plot a histogram of the number of data values in equal size bins, set the y-value to 1.0 so that the sum is a count of occurrences in that bin. This is done implicitly if only a single column is provided. Example:

        binwidth = <something>  # set width of x values in each bin
        bin(val) = binwidth * floor(val/binwidth)
        plot "datafile" using (bin(column(1))):(1.0) smooth frequency
        plot "datafile" using (bin(column(1))) smooth frequency  # same result

    See also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)
- name: Data Smooth Kdensity
  id: plot#SECTION0401838130000000000000
  summary: The smooth kdensity option generates and plots a kernel density estimate using Gaussian kernels for the distribution from which a set of values was drawn
  belongs_to: Plot
  description: |-
    #### Kdensity

    The **smooth kdensity** option generates and plots a kernel density estimate using Gaussian kernels for the distribution from which a set of values was drawn. Values are taken from the first data column, optional weights are taken from the second column. A Gaussian is placed at the location of each point and the sum of all these Gaussians is plotted as a function. To obtain a normalized histogram, each weight should be 1/number-of-points.

    Bandwidth: By default gnuplot calculates and uses the bandwidth which would be optimal for normally distributed data values.

        default_bandwidth = sigma * (4/3N) ** (0.2)

    This will usually be a very conservative, i.e. broad bandwidth. Alternatively, you can provide an explicit bandwidth.

        plot $DATA smooth kdensity bandwidth <value> with boxes

    The bandwidth used in the previous plot is stored in GPVAL_KDENSITY_BANDWIDTH.

    Period: For periodic data individual Gaussian components should be treated as repeating at intervals of one period. One example is data measured as a function of angle, where the period is 2pi. Another example is data indexed by day-of-year and measured over multiple years, where the period is 365. In such cases the period should be provided in the plot command:

        plot $ANGULAR_DAT smooth kdensity period 2*pi with lines
- name: Data Smooth Mcsplines
  id: plot#SECTION040183850000000000000
  summary: The smooth mcsplines option connects consecutive points by cubic splines constrained such that the smoothed function preserves the monotonicity and convexity of the original data points
  belongs_to: Plot
  description: |-
    #### Mcsplines

    The **smooth mcsplines** option connects consecutive points by cubic splines constrained such that the smoothed function preserves the monotonicity and convexity of the original data points. This reduces the effect of outliers. FN Fritsch & RE Carlson (1980) "Monotone Piecewise Cubic Interpolation", SIAM Journal on Numerical Analysis 17: 238–246.
- name: Data Smooth Sbezier
  id: plot#SECTION040183860000000000000
  summary: The smooth sbezier option first renders the data monotonic (unique) and then applies the bezier algorithm
  belongs_to: Plot
  description: |-
    #### Sbezier

    The **smooth sbezier** option first renders the data monotonic (**unique**) and then applies the **bezier** algorithm.
- name: Data Smooth Unique
  id: plot#SECTION040183870000000000000
  summary: The smooth unique option makes the data monotonic in x; points with the same x-value are replaced by a single point having the average y-value
  belongs_to: Plot
  description: |-
    #### Unique

    The **smooth unique** option makes the data monotonic in x; points with the same x-value are replaced by a single point having the average y-value. The resulting points are then connected by straight line segments.
- name: Data Smooth Unwrap
  id: plot#SECTION040183880000000000000
  summary: The smooth unwrap option modifies the input data so that any two successive points will not differ by more than pi; a point whose y value is outside this range will be incremented or decremented by multiples of 2pi until it falls within pi of the previous point
  belongs_to: Plot
  description: |-
    #### Unwrap

    The **smooth unwrap** option modifies the input data so that any two successive points will not differ by more than pi; a point whose y value is outside this range will be incremented or decremented by multiples of 2pi until it falls within pi of the previous point. This operation is useful for making wrapped phase measurements continuous over time.
- name: Data Smooth Zsort
  id: plot#SECTION0401838140000000000000
  summary: The intended use is to filter presentation of 2D scatter plots with a huge number of points so that the distribution of high-scoring points remains evident
  belongs_to: Plot
  description: |-
    #### Zsort

    Syntax

        plot FOO using x:y:z:color smooth zsort with points lc palette

    The intended use is to filter presentation of 2D scatter plots with a huge number of points so that the distribution of high-scoring points remains evident. Sorting the points on z guarantees that points with a high z-value will not be obscured by points with lower z-values. Limited to plot style "with points".
- name: Data Special-filenames
  id: plot#SECTION040183900000000000000
  summary: The empty filename ' ' tells gnuplot to re-use the previous input file in the same plot command
  belongs_to: Plot
  description: |-
    ### Special-filenames

    There are a few filenames that have a special meaning: ' ', '-', '+' and '++'.

    The empty filename ' ' tells gnuplot to re-use the previous input file in the same plot command. So to plot two columns from the same input file:

        plot 'filename' using 1:2, ” using 1:3

    The filename can also be reused over subsequent plot commands, however **save** then only records the name in a comment.

    The special filenames '+' and '++' are a mechanism to allow the full range of **using** specifiers and plot styles with inline functions. Normally a function plot can only have a single y (or z) value associated with each sampled point. The pseudo-file '+' treats the sampled points as column 1, and allows additional column values to be specified via a **using** specification, just as for a true input file. The number of samples is controlled via **set samples**. By default samples are generated over the range given by **set trange**, or if trange has not been set than over the full range of **set xrange**.

    Note: The use of trange is a change from previous gnuplot versions. It allows the sampling range to differ from the x axis range.

        plot '+' using ($1):(sin($1)):(sin($1)**2) with filledcurves

    An independent sampling range can be provided immediately before the '+'. As in normal function plots, a name can be assigned to the independent variable. If given for the first plot element, the sampling range specifier has to be preceded by the **sample** keyword (see also **[plot sampling](plot#plot_sampling)**).

        plot sample [beta=0:2*pi] '+' using (sin(beta)):(cos(beta)) with lines

    Additionally, the range specifier of '+' supports giving a sampling increment.

        plot $MYDATA, [t=-3:25:1] '+' using (t):(f(t))

    The pseudo-file '++' returns 2 columns of data forming a regular grid of \[u,v\] coordinates with the number of points along u controlled by **set samples** and the number of points along v controlled by **set isosamples**. You must set urange and vrange before plotting '++'. However the x and y ranges can be autoscaled or can be explicitly set to different values than urange and vrange. Use of u and v to sample '++' is a CHANGE introduced in version 5.2 Examples:

        splot '++' using 1:2:(sin($1)*sin($2)) with pm3d
        plot '++' using 1:2:(sin($1)*sin($2)) with image

    The special filename **'-'** specifies that the data are inline; i.e., they follow the command. Only the data follow the command; **plot** options like filters, titles, and line styles remain on the **plot** command line. This is similar to \<\< in unix shell script, and $DECK in VMS DCL. The data are entered as though they are being read from a file, one data point per record. The letter "e" at the start of the first column terminates data entry.

    **'-'** is intended for situations where it is useful to have data and commands together, e.g. when both are piped to **gnuplot** from another application. Some of the demos, for example, might use this feature. While **plot** options such as **index** and **every** are recognized, their use forces you to enter data that won't be used. For all but the simplest cases it is probably easier to first define a datablock and then read from it rather than from **'-'**. See **[datablocks](inline_data_datablocks#datablocks)**.

    If you use **'-'** with **replot**, you may need to enter the data more than once. See **[replot](replot#replot)**, **[refresh](refresh#refresh)**. Here again it may be better to use a datablock.

    A blank filename (' ') specifies that the previous filename should be reused. This can be useful with things like

        plot 'a/very/long/filename' using 1:2, ” using 1:3, ” using 1:4

    (If you use both **'-'** and **' '** on the same **plot** command, you'll need to have two sets of inline data, as in the example above.)
- name: Data style
  id: set_show#SECTION0402919000000000000000
  summary: This form of the command is deprecated
  belongs_to: Set-show
  description: |-
    ## Data style

    This form of the command is deprecated. Please see **[set style data](set_show#set_style_data)**.
- name: Data Using
  id: plot#SECTION0401831100000000000000
  summary: The most common datafile modifier is using
  belongs_to: Plot
  description: |-
    ### Using

    The most common datafile modifier is **using**. It tells the program which columns of data in the input file are to be plotted.

    Syntax:

        plot 'file' using <entry> {:<entry> {:<entry> ...}} {'format'}

    If a format is specified, it is used to read in each datafile record using the C library 'scanf' function. Otherwise the record is interpreted as consisting of columns (fields) of data separated by whitespace (spaces and/or tabs), but see **[datafile separator](set_show#datafile_separator)**.

    Each \<entry\> may be a simple column number that selects the value from one field of the input file, a string that matches a column label in the first line of a data set, an expression enclosed in parentheses, or a special function not enclosed in parentheses such as xticlabels(2).

    If the entry is an expression in parentheses, then the function column(N) may be used to indicate the value in column N. That is, column(1) refers to the first item read, column(2) to the second, and so on. The special symbols $1, $2, ... are shorthand for column(1), column(2) ...

    The special symbol $# evaluates to the total number of columns in the current line of input, so column($#) or stringcolumn($#) always returns the content of the final column even if the number of columns is unknown or different lines in the file contain different numbers of columns.

    The function **valid(N)** tests whether column N contains a valid number. If each column of data in the input file contains a label in the first row rather than a data value, this label can be used to identify the column on input and/or in the plot legend. The column() function can be used to select an input column by label rather than by column number. For example, if the data file contains

        Height    Weight    Age
        val1      val1      val1
        ...       ...       ...

    then the following plot commands are all equivalent

        plot 'datafile' using 3:1, ” using 3:2
        plot 'datafile' using (column("Age")):(column(1)), \
                     ” using (column("Age")):(column(2))
        plot 'datafile' using "Age":"Height", ” using "Age":"Weight"

    The full string must match. Comparison is case-sensitive. To use column labels in the plot legend, use **set key autotitle columnhead**.

    In addition to the actual columns 1...N in the input data file, gnuplot presents data from several "pseudo-columns" that hold bookkeeping information. E.g. $0 or column(0) returns the sequence number of this data record within a dataset. Please see **[pseudocolumns](plot#pseudocolumns)**.

    An empty \<entry\> will default to its order in the list of entries. For example, **using ::4** is interpreted as **using 1:2:4**.

    If the **using** list has only a single entry, that \<entry\> will be used for y and the data point number (pseudo-column $0) is used for x; for example, "**plot 'file' using 1**" is identical to "**plot 'file' using 0:1**". If the **using** list has two entries, these will be used for x and y. See **[set style](set_show#set_style)** and **[fit](fit#fit)** for details about plotting styles that make use of data from additional columns of input.

    'scanf' accepts several numerical specifications but **gnuplot** requires all inputs to be double-precision floating-point variables, so "%lf" is essentially the only permissible specifier. A format string given by the user must contain at least one such input specifier, and no more than seven of them. 'scanf' expects to see white space — a blank, tab (" \\t"), newline (" \\n"), or formfeed (" \\f") — between numbers; anything else in the input stream must be explicitly skipped.

    Note that the use of " \\t", " \\n", or " \\f" requires use of double-quotes rather than single-quotes.
- name: Data Using Cbticlabels
  id: plot#SECTION0401831190000000000000
  summary: 'EXPERIMENTAL (details may change in a future release version) 2D plots: colorbar labels are placed at the palette coordinate used by the plot for variable coloring "lc palette z". 3D plots: colorbar labels are placed at the z coordinate of the point'
  belongs_to: Plot
  description: |-
    #### Cbticlabels

    EXPERIMENTAL (details may change in a future release version) 2D plots: colorbar labels are placed at the palette coordinate used by the plot for variable coloring "lc palette z". 3D plots: colorbar labels are placed at the z coordinate of the point. Note that in the case of a 3D heat map with variable color that does not match z, this is probably not the correct label. See also **[plot using xticlabels](plot#plot_using_xticlabels)**.
- name: Data Using Key
  id: plot#SECTION0401831130000000000000
  summary: The layout of certain plot styles (column-stacked histograms, spider plots) is such that it would make no sense to generate plot titles from a data column header
  belongs_to: Plot
  description: |-
    #### Key

    The layout of certain plot styles (column-stacked histograms, spider plots) is such that it would make no sense to generate plot titles from a data column header. Also it would make no sense to generate axis tic labels from the content of a data column (e.g. **using 2:3:xticlabels(1)**). These plots styles instead use the form **using 2:3:key(1)** to generate plot titles for the key from the text content of a data column, usually a first column of row headers. See the example given for **[spiderplot](spiderplot#spiderplot)**.
- name: Data Using Pseudocolumns
  id: plot#SECTION0401831120000000000000
  summary: Expressions in the using clause of a plot statement can refer to additional bookkeeping values in addition to the actual data values contained in the input file
  belongs_to: Plot
  description: |-
    #### Pseudocolumns

    Expressions in the **using** clause of a plot statement can refer to additional bookkeeping values in addition to the actual data values contained in the input file. These are contained in "pseudocolumns".

        column(0)   The sequential order of each point within a data set.
                    The counter starts at 0, increments on each non-blank,
                    non-comment line, and is reset by two sequential blank
                    records.  The shorthand form $0 is available.
        column(-1)  This counter starts at 0, increments on a single blank line,
                    and is reset by two sequential blank lines.
                    This corresponds to the data line in array or grid data.
                    It can also be used to distinguish separate line segments
                    or polygons within a data set.
        column(-2)  Starts at 0 and increments on two sequential blank lines.
                    This is the index number of the current data set within a
                    file that contains multiple data sets.  See `index`.
        column($#)  The special symbol $# evaluates to the total number of
                    columns available, so column($#) refers to the last
                    (rightmost) field in the current input line.
                    column($# - 1) would refer to the last-but-one column, etc.
- name: Data Using Using_examples
  id: plot#SECTION0401831110000000000000
  summary: 'This creates a plot of the sum of the 2nd and 3rd data against the first: The format string specifies comma- rather than space-separated columns'
  belongs_to: Plot
  description: |-
    #### Using_examples

    This creates a plot of the sum of the 2nd and 3rd data against the first: The format string specifies comma- rather than space-separated columns. The same result could be achieved by specifying **set datafile separator comma**.

        plot 'file' using 1:($2+$3) '%lf,%lf,%lf'

    In this example the data are read from the file "MyData" using a more complicated format:

        plot 'MyData' using "%*lf%lf%*20[^\n]%lf"

    The meaning of this format is:

        %*lf        ignore a number
        %lf         read a double-precision number (x by default)
        %*20[^\n]   ignore 20 non-newline characters
        %lf         read a double-precision number (y by default)

    One trick is to use the ternary **?:** operator to filter data:

        plot 'file' using 1:($3>10 ? $2 : 1/0)

    which plots the datum in column two against that in column one provided the datum in column three exceeds ten. **1/0** is undefined; **gnuplot** quietly ignores undefined points, so unsuitable points are suppressed. Or you can use the pre-defined variable NaN to achieve the same result.

    In fact, you can use a constant expression for the column number, provided it doesn't start with an opening parenthesis; constructs like **using 0+(complicated expression)** can be used. The crucial point is that the expression is evaluated once if it doesn't start with a left parenthesis, or once for each data point read if it does.

    If timeseries data are being used, the time can span multiple columns. The starting column should be specified. Note that the spaces within the time must be included when calculating starting columns for other data. E.g., if the first element on a line is a time with an embedded space, the y value should be specified as column three.

    It should be noted that (a) **plot 'file'**, (b) **plot 'file' using 1:2**, and (c) **plot 'file' using ($1):($2)** can be subtly different. The exact behaviour has changed in version 5. See **[missing](set_show#missing)**.

    It is often possible to plot a file with lots of lines of garbage at the top simply by specifying

        plot 'file' using 1:2

    However, if you want to leave text in your data files, it is safer to put the comment character (#) in the first column of the text lines.
- name: Data Using X2ticlabels
  id: plot#SECTION0401831150000000000000
  summary: See plot using xticlabels
  belongs_to: Plot
  description: |-
    #### X2ticlabels

    See **[plot using xticlabels](plot#plot_using_xticlabels)**.
- name: Data Using Xticlabels
  id: plot#SECTION0401831140000000000000
  summary: Axis tick labels can be generated via a string function, usually taking a data column as an argument
  belongs_to: Plot
  description: |-
    #### Xticlabels

    Axis tick labels can be generated via a string function, usually taking a data column as an argument. The simplest form uses the data column itself as a string. That is, xticlabels(N) is shorthand for xticlabels(stringcolumn(N)). This example uses the contents of column 3 as x-axis tick labels.

        plot 'datafile' using <xcol>:<ycol>:xticlabels(3) with <plotstyle>

    Axis tick labels may be generated for any of the plot axes: x x2 y y2 z. The **ticlabels(\<labelcol\>)** specifiers must come after all of the data coordinate specifiers in the **using** portion of the command. For each data point which has a valid set of X,Y\[,Z\] coordinates, the string value given to xticlabels() is added to the list of xtic labels at the same X coordinate as the point it belongs to. **xticlabels()** may be shortened to **xtic()** and so on.

    Example:

        splot "data" using 2:4:6:xtic(1):ytic(3):ztic(6)

    In this example the x and y axis tic labels are taken from different columns than the x and y coordinate values. The z axis tics, however, are generated from the z coordinate of the corresponding point.

    Example:

        plot "data" using 1:2:xtic( $3 > 10. ? "A" : "B" )

    This example shows the use of a string-valued function to generate x-axis tick labels. Each point in the data file generates a tick mark on x labeled either "A" or "B" depending on the value in column 3.
- name: Data Using Y2ticlabels
  id: plot#SECTION0401831170000000000000
  summary: See plot using xticlabels
  belongs_to: Plot
  description: |-
    #### Y2ticlabels

    See **[plot using xticlabels](plot#plot_using_xticlabels)**.
- name: Data Using Yticlabels
  id: plot#SECTION0401831160000000000000
  summary: See plot using xticlabels
  belongs_to: Plot
  description: |-
    #### Yticlabels

    See **[plot using xticlabels](plot#plot_using_xticlabels)**.
- name: Data Using Zticlabels
  id: plot#SECTION0401831180000000000000
  summary: See plot using xticlabels
  belongs_to: Plot
  description: |-
    #### Zticlabels

    See **[plot using xticlabels](plot#plot_using_xticlabels)**.
- name: Data Volatile
  id: plot#SECTION0401831200000000000000
  summary: The volatile keyword in a plot command indicates that the data previously read from the input stream or file may not be available for re-reading
  belongs_to: Plot
  description: |-
    ### Volatile

    The **volatile** keyword in a plot command indicates that the data previously read from the input stream or file may not be available for re-reading. This tells the program to use **refresh** rather than **replot** commands whenever possible. See **[refresh](refresh#refresh)**.
- name: Data-file
  id: splot#SECTION040311000000000000000
  summary: Splot, like plot, can display from a file
  belongs_to: Splot
  description: |-
    ## Data-file

    **Splot**, like **plot**, can display from a file.

    Syntax:

        splot '<file_name>' {binary <binary list>}
                            {{nonuniform} matrix}
                            {index <index list>}
                            {every <every list>}
                            {using <using list>}

    The special filenames **""** and **"-"** are permitted, as in **plot**. See **[special-filenames](plot#special-filenames)**.

    In brief, **binary** and **matrix** indicate that the data are in a special form, **index** selects which data sets in a multi-data-set file are to be plotted, **every** specifies which datalines (subsets) within a single data set are to be plotted, and **using** determines how the columns within a single record are to be interpreted.

    The options **index** and **every** behave the same way as with **plot**; **using** does so also, except that the **using** list must provide three entries instead of two.

    The **plot** option **smooth** is not available for **splot**, but **cntrparam** and **dgrid3d** provide limited smoothing capabilities.

    Data file organization is essentially the same as for **plot**, except that each point is an (x,y,z) triple. If only a single value is provided, it will be used for z, the block number will be used for y, and the index of the data point in the block will be used for x. If two or four values are provided, **gnuplot** uses the last value for calculating the color in pm3d plots. Three values are interpreted as an (x,y,z) triple. Additional values are generally used as errors, which can be used by **fit**.

    Single blank records separate blocks of data in a **splot** datafile; **splot** treats blocks as the equivalent of function y-isolines. No line will join points separated by a blank record. If all blocks contain the same number of points, **gnuplot** will draw cross-isolines between points in the blocks, connecting corresponding points. This is termed "grid data", and is required for drawing a surface, for contouring (**set contour**) and hidden-line removal (**set hidden3d**). See also **[splot grid_data](splot#splot_grid_data)**.

    It is no longer necessary to specify **parametric** mode for three-column **splot**s.
- name: Data-file Example datafile
  id: splot#SECTION040311200000000000000
  summary: Note that "datafile.dat" defines a 4 by 3 grid ( 4 rows of 3 points each )
  belongs_to: Splot
  description: |-
    ### Example datafile

    A simple example of plotting a 3D data file is

        splot 'datafile.dat'

    where the file "datafile.dat" might contain:

        # The valley of the Gnu.
           0 0 10
           0 1 10
           0 2 10

        1 0 10
        1 1 5
        1 2 10

        2 0 10
        2 1 1
        2 2 10

        3 0 10
        3 1 0
        3 2 10

    Note that "datafile.dat" defines a 4 by 3 grid ( 4 rows of 3 points each ). Rows (blocks) are separated by blank records.

    Note also that the x value is held constant within each dataline. If you instead keep y constant, and plot with hidden-line removal enabled, you will find that the surface is drawn 'inside-out'.

    Actually for grid data it is not necessary to keep the x values constant within a block, nor is it necessary to keep the same sequence of y values. **gnuplot** requires only that the number of points be the same for each block. However since the surface mesh, from which contours are derived, connects sequentially corresponding points, the effect of an irregular grid on a surface plot is unpredictable and should be examined on a case-by-case basis.
- name: Data-file Matrix
  id: splot#SECTION040311100000000000000
  summary: Gnuplot can interpret matrix data input in two different ways
  belongs_to: Splot
  description: |-
    ### Matrix

    Gnuplot can interpret matrix data input in two different ways.

    The first of these assumes a uniform grid of x and y coordinates and assigns each value in the input matrix to one element M\[i,j\] of this uniform grid. The assigned x coordinates are the integers \[0:NCOLS-1\]. The assigned y coordinates are the integers \[0:NROWS-1\]. This is the default for text data input, but not for binary input. See **[matrix uniform](splot#matrix_uniform)** for examples and additional keywords.

    The second interpretation assumes a non-uniform grid with explicit x and y coordinates. The first row of input data contains the y coordinates; the first column of input data contains the x coordinates. For binary input data, the first element of the first row must contain the number of columns. This is the default for **binary matrix** input, but requires an additional keyword **nonuniform** for text input data. See **[matrix nonuniform](splot#matrix_nonuniform)** for examples.
- name: Data-file Matrix Every
  id: splot#SECTION040311130000000000000
  summary: The every keyword has special meaning when used with matrix data
  belongs_to: Splot
  description: |-
    #### Every

    The **every** keyword has special meaning when used with matrix data. Rather than applying to blocks of single points, it applies to rows and column values. Note that matrix rows and columns are indexed starting from 0, so the row with index N is the (N+1)th row. Syntax:

        plot 'file' every {<column_incr>}
                            {:{<row_incr>}
                              {:{<start_column>}
                                {:{<start_row>}
                                  {:{<end_column>}
                                    {:<end_row>}}}}}

    Examples:

        plot 'file' matrix every :::N::N   # plot all values in row with index N
        plot 'file' matrix every ::3::7    # plot columns 3 to 7 for all rows
        plot 'file' matrix every ::3:0:7:4 # submatrix bounded by [3,0] and [7,4]
- name: Data-file Matrix Examples
  id: splot#SECTION040311140000000000000
  summary: A collection of matrix and vector manipulation routines (in C) is provided in binary.c
  belongs_to: Splot
  description: |-
    #### Examples

    A collection of matrix and vector manipulation routines (in C) is provided in **binary.c**. The routine to write binary data is

        int fwrite_matrix(file,m,nrl,nrl,ncl,nch,row_title,column_title)

    An example of using these routines is provided in the file **bf_test.c**, which generates binary files for the demo file **demo/binary.dem**.

    Usage in **plot**:

        plot `a.dat` matrix
        plot `a.dat` matrix using 1:3
        plot 'a.gpbin' {matrix} binary using 1:3

    will plot rows of the matrix, while using 2:3 will plot matrix columns, and using 1:2 the point coordinates (rather useless). Applying the **every** option you can specify explicit rows and columns.

    Example – rescale axes of a matrix in a text file:

        splot `a.dat` matrix using (1+$1):(1+$2*10):3

    Example – plot the 3rd row of a matrix in a text file:

        plot 'a.dat' matrix using 1:3 every 1:999:1:2

    (rows are enumerated from 0, thus 2 instead of 3).

    Gnuplot can read matrix binary files by use of the option **binary** appearing without keyword qualifications unique to general binary, i.e., **array**, **record**, **format**, or **filetype**. Other general binary keywords for translation should also apply to matrix binary. (See **[binary general](plot#binary_general)** for more details.)
- name: Data-file Matrix Nonuniform
  id: splot#SECTION040311120000000000000
  summary: The first row of input data contains the y coordinates
  belongs_to: Splot
  description: |-
    #### Nonuniform

    The first row of input data contains the y coordinates. The first column of input data contains the x coordinates. For binary input data, the first field of the first row must contain the number of columns. (This number is ignored for text input).

    Example commands for plotting non-uniform matrix data:

        splot 'file' nonuniform matrix using 1:2:3  # text input
        splot 'file' binary matrix using 1:2:3      # binary input

    Thus the data organization for non-uniform matrix input is

        <N+1>  <x0>   <x1>   <x2>  ...  <xN>
         <y0> <z0,0> <z0,1> <z0,2> ... <z0,N>
         <y1> <z1,0> <z1,1> <z1,2> ... <z1,N>
          :      :      :      :   ...    :

    which is then converted into triplets:

        <x0> <y0> <z0,0>
        <x0> <y1> <z0,1>
        <x0> <y2> <z0,2>
         :    :     :
        <x0> <yN> <z0,N>

        <x1> <y0> <z1,0>
        <x1> <y1> <z1,1>
         :    :     :

    These triplets are then converted into **gnuplot** iso-curves and then **gnuplot** proceeds in the usual manner to do the rest of the plotting.
- name: Data-file Matrix Uniform
  id: splot#SECTION040311110000000000000
  summary: In a uniform grid matrix the z-values are read in a row at a time, i
  belongs_to: Splot
  description: |-
    #### Uniform

    Example commands for plotting uniform matrix data:

        splot 'file' matrix using 1:2:3          # text input
        splot 'file' binary general using 1:2:3  # binary input

    In a uniform grid matrix the z-values are read in a row at a time, i. e.,

        z11 z12 z13 z14 ...
        z21 z22 z23 z24 ...
        z31 z32 z33 z34 ...

    and so forth.

    For text input, if the first row contains column labels rather than data, use the additional keyword **columnheaders**. Similarly if the first field in each row contains a label rather than data, use the additional keyword **rowheaders**. Here is an example that uses both:

        $DATA << EOD
        xxx A   B   C   D
        aa  z11 z12 z13 z14
        bb  z21 z22 z23 z24
        cc  z31 z32 z33 z34
        EOD
        plot $DATA matrix columnheaders rowheaders with image

    For text input, a blank line or comment line ends the matrix, and starts a new data block. You can select among the data blocks in a file by the **index** option to the **splot** command, as usual. The columnheaders option, if present, is applied only to the first data block.
- name: Datafile
  id: set_show#SECTION0402920000000000000000
  summary: The set datafile command options control interpretation of fields read from input data files by the plot, splot, and fit commands
  belongs_to: Set-show
  description: |-
    ## Datafile

    The **set datafile** command options control interpretation of fields read from input data files by the **plot**, **splot**, and **fit** commands. Several options are currently implemented.
- name: Datastrings
  id: datastrings
  summary: Data files may contain string data consisting of either an arbitrary string of printable characters containing no whitespace or an arbitrary string of characters, possibly including whitespace, delimited by double quotes
  description: "# Datastrings\n\nData files may contain string data consisting of either an arbitrary string of printable characters containing no whitespace or an arbitrary string of characters, possibly including whitespace, delimited by double quotes. The following line from a datafile is interpreted to contain four columns, with a text field in column 3:\n\n    1.000 2.000 \"Third column is all of this text\" 4.00\n\nText fields can be positioned within a 2-D or 3-D plot using the commands:\n\n    plot 'datafile' using 1:2:4 with labels\n    splot 'datafile' using 1:2:3:4 with labels\n\nA column of text data can also be used to label the ticmarks along one or more of the plot axes. The example below plots a line through a series of points with (X,Y) coordinates taken from columns 3 and 4 of the input datafile. However, rather than generating regularly spaced tics along the x axis labeled numerically, gnuplot will position a tic mark along the x axis at the X coordinate of each point and label the tic mark with text taken from column 1 of the input datafile.\n\n    set xtics\n    plot 'datafile' using 3:4:xticlabels(1) with linespoints\n\nThere is also an option that will interpret the first entry in a column of input data (i.e. the column heading) as a text field, and use it as the key title for data plotted from that column. The example given below will use the first entry in column 2 to generate a title in the key box, while processing the remainder of columns 2 and 4 to draw the required line:\n\n    plot 'datafile' using 1:(f($2)/$4) with lines title columnhead(2)\n\nAnother example:\n\n    plot for [i=2:6] 'datafile' using i title \"Results for \".columnhead(i)\n\nThis use of column headings is automated by **set datafile columnheaders** or **set key autotitle columnhead**. See **[labels](labels#labels)**, **[using xticlabels](plot#using_xticlabels)**, **[plot title](plot#plot_title)**, **[using](plot#using)**, **[key autotitle](set_show#key_autotitle)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Debug
  id: complete_list_terminals#SECTION050110000000000000000
  summary: This terminal is provided to allow for the debugging of gnuplot
  description: |-
    ## Debug

    This terminal is provided to allow for the debugging of **gnuplot**. It is likely to be of use only for users who are modifying the source code.
- name: Decimalsign
  id: set_show#SECTION0402921000000000000000
  summary: The set decimalsign command selects a decimal sign for numbers printed into tic labels or set label strings
  belongs_to: Set-show
  description: |-
    ## Decimalsign

    The **set decimalsign** command selects a decimal sign for numbers printed into tic labels or **set label** strings.

    Syntax:

        set decimalsign {<value> | locale {"<locale>"}}
        unset decimalsign
        show decimalsign

    The argument \<value\> is a string to be used in place of the usual decimal point. Typical choices include the period, '.', and the comma, ',', but others may be useful, too. If you omit the \<value\> argument, the decimal separator is not modified from the usual default, which is a period. Unsetting decimalsign has the same effect as omitting \<value\>.

    Example:

    Correct typesetting in most European countries requires:

        set decimalsign ','

    Please note: If you set an explicit string, this affects only numbers that are printed using gnuplot's gprintf() formatting routine, including axis tics. It does not affect the format expected for input data, and it does not affect numbers printed with the sprintf() formatting routine. To change the behavior of both input and output formatting, instead use the form

        set decimalsign locale

    This instructs the program to use both input and output formats in accordance with the current setting of the LC_ALL, LC_NUMERIC, or LANG environmental variables.

        set decimalsign locale "foo"

    This instructs the program to format all input and output in accordance with locale "foo", which must be installed. If locale "foo" is not found then an error message is printed and the decimal sign setting is unchanged. On linux systems you can get a list of the locales installed on your machine by typing "locale -a". A typical linux locale string is of the form "sl_SI.UTF-8". A typical Windows locale string is of the form "Slovenian_Slovenia.1250" or "slovenian". Please note that interpretation of the locale settings is done by the C library at runtime. Older C libraries may offer only partial support for locale settings such as the thousands grouping separator character.

        set decimalsign locale; set decimalsign "."

    This sets all input and output to use whatever decimal sign is correct for the current locale, but over-rides this with an explicit '.' in numbers formatted using gnuplot's internal gprintf() function.
- name: Dgrid3d
  id: set_show#SECTION0402922000000000000000
  summary: The set dgrid3d command enables, and can set parameters for, non-grid to grid data mapping
  belongs_to: Set-show
  description: |-
    ## Dgrid3d

    The **set dgrid3d** command enables, and can set parameters for, non-grid to grid data mapping. See **[splot grid_data](splot#splot_grid_data)** for more details about the grid data structure.

    Syntax:

        set dgrid3d {<rows>} {,{<cols>}}
                    { splines |
                      qnorm {<norm>} |
                      (gauss | cauchy | exp | box | hann)
                        {kdensity} {<dx>} {,<dy>} }
        unset dgrid3d
        show dgrid3d

    By default **dgrid3d** is disabled. When enabled, 3D data read from a file are always treated as a scattered data set. A grid with dimensions derived from a bounding box of the scattered data and size as specified by the row/col_size parameters is created for plotting and contouring. The grid is equally spaced in x (rows) and in y (columns); the z values are computed as weighted averages or spline interpolations of the scattered points' z values. In other words, a regularly spaced grid is created and the a smooth approximation to the raw data is evaluated for all grid points. This approximation is plotted in place of the raw data.

    The number of columns defaults to the number of rows, which defaults to 10.

    Several algorithms are available to calculate the approximation from the raw data. Some of these algorithms can take additional parameters. These interpolations are such the closer the data point is to a grid point, the more effect it has on that grid point.

    The **splines** algorithm calculates an interpolation based on "thin plate splines". It does not take additional parameters.

    The **qnorm** algorithm calculates a weighted average of the input data at each grid point. Each data point is weighted by the inverse of its distance from the grid point raised to some power. The power is specified as an optional integer parameter that defaults to 1. This algorithm is the default.

    Finally, several smoothing kernels are available to calculate weighted averages: z = Sum_i w(d_i) \* z_i / Sum_i w(d_i), where z_i is the value of the i-th data point and d_i is the distance between the current grid point and the location of the i-th data point. All kernels assign higher weights to data points that are close to the current grid point and lower weights to data points further away.

    The following kernels are available:

        gauss :     w(d) = exp(-d*d)
        cauchy :    w(d) = 1/(1 + d*d)
        exp :       w(d) = exp(-d)
        box :       w(d) = 1                     if d<1
                         = 0                     otherwise
        hann :      w(d) = 0.5*(1+cos(pi*d))     if d<1
                    w(d) = 0                     otherwise

    When using one of these five smoothing kernels, up to two additional numerical parameters can be specified: dx and dy. These are used to rescale the coordinate differences when calculating the distance: d_i = sqrt( ((x-x_i)/dx)\*\*2 + ((y-y_i)/dy)\*\*2 ), where x,y are the coordinates of the current grid point and x_i,y_i are the coordinates of the i-th data point. The value of dy defaults to the value of dx, which defaults to 1. The parameters dx and dy make it possible to control the radius over which data points contribute to a grid point IN THE UNITS OF THE DATA ITSELF.

    The optional keyword **kdensity**, which must come after the name of the kernel, but before the (optional) scale parameters, modifies the algorithm so that the values calculated for the grid points are not divided by the sum of the weights ( z = Sum_i w(d_i) \* z_i ). If all z_i are constant, this effectively plots a bivariate kernel density estimate: a kernel function (one of the five defined above) is placed at each data point, the sum of these kernels is evaluated at every grid point, and this smooth surface is plotted instead of the original data. This is similar in principle to + what the **smooth kdensity** option does to 1D datasets. (See kdensity2d.dem for usage demo)

    A slightly different syntax is also supported for reasons of backwards compatibility. If no interpolation algorithm has been explicitly selected, the **qnorm** algorithm is assumed. Up to three comma-separated, optional parameters can be specified, which are interpreted as the the number of rows, the number of columns, and the norm value, respectively.

    The **dgrid3d** option is a simple scheme which replaces scattered data with weighted averages on a regular grid. More sophisticated approaches to this problem exist and should be used to preprocess the data outside **gnuplot** if this simple solution is found inadequate.

    See also [dgrid3d.dem: dgrid3d demo. ](http://www.gnuplot.info/demo/dgrid3d.html)

    and [scatter.dem: dgrid3d demo. ](http://www.gnuplot.info/demo/scatter.html)
- name: Differences between versions 4 and 5
  id: differences_between_version
  summary: Some changes introduced in version 5 may cause certain scripts written for earlier versions of gnuplot to behave differently
  description: "# Differences between versions 4 and 5\n\nSome changes introduced in version 5 may cause certain scripts written for earlier versions of gnuplot to behave differently.\n\n\\* Revised handling of input data containing NaN, inconsistent number of data columns, or other unexpected content. See Note under **[missing](set_show#missing)** for examples and figures.\n\n\\* Time coordinates are stored internally as the number of seconds relative to the standard unix epoch 1-Jan-1970. Earlier versions of gnuplot used a different epoch internally (1-Jan-2000). This change resolves inconsistencies introduced whenever time in seconds was generated externally. The epoch convention used by a particular gnuplot installation can be determined using the command **print strftime(\"%F\",0)**. Time is now stored to at least millisecond precision.\n\n\\* The function **timecolumn(N,\"timeformat\")** now has 2 parameters. Because the new second parameter is not associated with any particular data axis, this allows using the **timecolumn** function to read time data for reasons other than specifying the x or y coordinate. This functionality replaces the command sequence **set xdata time; set timefmt \"timeformat\"**. It allows combining time data read from multiple files with different formats within a single plot.\n\n\\* The **reverse** keyword of the **set \\[axis\\]range** command affects only autoscaling. It does not invert or otherwise alter the meaning of a command such as **set xrange \\[0:1\\]**. If you want to reverse the direction of the x axis in such a case, say instead **set xrange \\[1:0\\]**.\n\n\\* The **call** command is provides a set of variables ARGC, ARG0, ..., ARG9. ARG0 holds the name of the script file being executed. ARG1 to ARG9 are string variables and thus may either be referenced directly or expanded as macros, e.g. @ARG1. The contents of ARG0 ... ARG9 may alternatively be accessed as array elements ARGV\\[0\\] ... ARGV\\[ARGC\\]. An older gnuplot convention of referencing call parameters as tokens $0 ... $9 is deprecated.\n\n\\* The optional bandwidth for the kernel density smoothing option is taken from a keyword rather than a data column. See **[smooth kdensity](plot#smooth_kdensity)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Do
  id: do
  summary: Execute a sequence of commands multiple times
  description: "# Do\n\nSyntax:\n\n    do for <iteration-spec> {\n         <commands>\n         <commands>\n    }\n\nExecute a sequence of commands multiple times. The commands must be enclosed in curly brackets, and the opening \"{\" must be on the same line as the **do** keyword. This command cannot be used with old-style (un-bracketed) if/else statements. See **[if](if#if)**. For examples of iteration specifiers, see **[iteration](iteration#iteration)**. Example:\n\n    set multiplot layout 2,2\n    do for [name in \"A B C D\"] {\n        filename = name . \".dat\"\n        set title sprintf(\"Condition %s\",name)\n        plot filename title name\n    }\n    unset multiplot\n\nSee also **[while](while#while)**, **[continue](continue#continue)**, **[break](break#break)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Domterm
  id: complete_list_terminals#SECTION050111000000000000000
  summary: The domterm terminal device runs on the DomTerm terminal emulator including the domterm and qtdomterm programs
  description: |-
    ## Domterm

    The **domterm** terminal device runs on the DomTerm terminal emulator including the domterm and qtdomterm programs. It supports SVG graphics embedded directly in the terminal output. See http://domterm.org .

    Please read the help for the **svg** terminal.
- name: Dots
  id: dots
  summary: The dots style plots a tiny dot at each point; this is useful for scatter plots with many points
  description: "# Dots\n\nThe **dots** style plots a tiny dot at each point; this is useful for scatter plots with many points. Either 1 or 2 columns of input data are required in 2D. Three columns are required in 3D.\n\nFor some terminals (post, pdf) the size of the dot can be controlled by changing the linewidth.\n\n    1 column    y         # x is row number\n    2 columns:  x  y\n    3 columns:  x  y  z   # 3D only (splot)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Dumb
  id: complete_list_terminals#SECTION050112000000000000000
  summary: The dumb terminal driver plots into a text block using ascii characters
  description: |-
    ## Dumb

    The **dumb** terminal driver plots into a text block using ascii characters. It has an optional size specification and a trailing linefeed flag.

    Syntax:

        set terminal dumb {size <xchars>,<ychars>} {[no]feed}
                          {aspect <htic>{,<vtic>}}
                          {[no]enhanced}
                          {mono|ansi|ansi256|ansirgb}

    where \<xchars\> and \<ychars\> set the size of the text block. The default is 79 by 24. The last newline is printed only if **feed** is enabled.

    The **aspect** option can be used to control the aspect ratio of the plot by setting the length of the horizontal and vertical tic marks. Only integer values are allowed. Default is 2,1 – corresponding to the aspect ratio of common screen fonts.

    The **ansi**, **ansi256**, and **ansirgb** options will include escape sequences in the output to handle colors. Note that these might not be handled by your terminal. Default is **mono**. To obtain the best color match in **ansi** mode, you should use **set colorsequence classic**. Depending on the mode, the **dumb** terminal will emit the following sequences (without the additional whitespace):

        ESC [ 0 m           reset attributes to defaults
        foreground color:
        ESC [ 1 m           set intense/bold
        ESC [ 22 m          intense/bold off
        ESC [ <fg> m        with color code 30 <= <fg> <= 37
        ESC [ 39 m          reset to default
        ESC [ 38; 5; <c> m  with palette index 16 <= <c> <= 255
        ESC [ 38; 2; <r>; <g>; <b> m  with components 0 <= <r,g,b> <= 255
        background color:
        ESC [ <bg> m        with color code 40 <= <bg> <= 47
        ESC [ 49 m          reset to default
        ESC [ 48; 5; <c> m  with palette index 16 <= <c> <= 231
        ESC [ 48; 2; <r>; <g>; <b> m  with components 0 <= <r,g,b> <= 255

    See also e.g. the description at [https://en.wikipedia.org/wiki/ANSI_escape_code#Colors ](https://en.wikipedia.org/wiki/ANSI_escape_code#Colors)

    Example:

        set term dumb mono size 60,15 aspect 1
        set tics nomirror scale 0.5
        plot [-5:6.5] sin(x) with impulse ls -1

           1 +-------------------------------------------------+
         0.8 +|||++                   ++||||++                 |
         0.6 +|||||+                 ++|||||||+  sin(x) +----+ |
         0.4 +||||||+               ++|||||||||+               |
         0.2 +|||||||+             ++|||||||||||+             +|
           0 ++++++++++++++++++++++++++++++++++++++++++++++++++|
        -0.2 +        +|||||||||||+              +|||||||||||+ |
        -0.4 +         +|||||||||+                +|||||||||+  |
        -0.6 +          +|||||||+                  +|||||||+   |
        -0.8 +           ++||||+                    ++||||+    |
          -1 +---+--------+--------+-------+--------+--------+-+
                -4       -2        0       2        4        6
- name: Dummy
  id: set_show#SECTION0402923000000000000000
  summary: The set dummy command changes the default dummy variable names
  belongs_to: Set-show
  description: |-
    ## Dummy

    The **set dummy** command changes the default dummy variable names.

    Syntax:

        set dummy {<dummy-var>} {,<dummy-var>}
        show dummy

    By default, **gnuplot** assumes that the independent, or "dummy", variable for the **plot** command is "t" if in parametric or polar mode, or "x" otherwise. Similarly the independent variables for the **splot** command are "u" and "v" in parametric mode (**splot** cannot be used in polar mode), or "x" and "y" otherwise.

    It may be more convenient to call a dummy variable by a more physically meaningful or conventional name. For example, when plotting time functions:

        set dummy t
        plot sin(t), cos(t)

    Examples:

        set dummy u,v
        set dummy ,s

    The second example sets the second variable to s. To reset the dummy variable names to their default values, use

        unset dummy
- name: Dxf
  id: complete_list_terminals#SECTION050113000000000000000
  summary: Terminal driver dxf for export to AutoCad (Release 10.x)
  description: |-
    ## Dxf

    Terminal driver **dxf** for export to AutoCad (Release 10.x). It has no options. The default size is 120x80 AutoCad units. **dxf** uses seven colors (white, red, yellow, green, cyan, blue and magenta) that can be changed only by modifying the source file. If a black-and-white plotting device is used the colors are mapped to differing line thicknesses. Note: someone please update this terminal to the 2012 DXF standard!
- name: Dxy800a
  id: complete_list_terminals#SECTION050114000000000000000
  summary: 'Note: legacy terminal'
  description: |-
    ## Dxy800a

    Note: legacy terminal. This terminal driver supports the Roland DXY800A plotter. It has no options.
- name: Eepic
  id: complete_list_terminals#SECTION050115000000000000000
  summary: 'Note: Legacy terminal (not built by default)'
  description: |-
    ## Eepic

    Note: Legacy terminal (not built by default). The latex, emtex, eepic, and tpic terminals in older versions of gnuplot provided minimal support for graphics styles beyond simple lines and points. They have been directly superseded by the **pict2e** terminal. For more capable TeX/LaTeX compatible terminal types see **[cairolatex](complete_list_terminals#cairolatex)**, **[context](complete_list_terminals#context)**, **[epslatex](complete_list_terminals#epslatex)**, **[mp](complete_list_terminals#mp)**, **[pstricks](complete_list_terminals#pstricks)**, and **[tikz](complete_list_terminals#tikz)**.

    The output of this terminal is intended for use with the "eepic.sty" macro package for LaTeX. To use it, you need "eepic.sty", "epic.sty" and a DVI driver that supports the "tpic" \\specials. If your driver doesn't support those \\specials, "eepicemu.sty" will enable you to use some of them. dvips and dvipdfm do support the "tpic" \\specials, pdflatex does not.

    Syntax:

        set terminal eepic {default} {color|monochrome|dashed}
                           {rotate} {size XX,YY}
                           {small|tiny|<fontsize>}

    **color** causes gnuplot to produce \\color{...} commands so that the graphs are colored. Using this option, you must include \\usepackage{color} in the preamble of your latex document.

    **dashed** will allow dashed line types; without this option, only solid lines with varying thickness will be used. **dashed** and **color** are mutually exclusive; if **color** is specified, then **dashed** will be ignored.

    **rotate** will enable true rotated text (by 90 degrees). Otherwise, rotated text will be typeset with letters stacked above each other. If you use this option you must include \\usepackage{graphicx} in the preamble.

    **small** will use \\scriptsize symbols as point markers. Default is to use the default math size. **tiny** uses \\scriptscriptstyle symbols.

    The default size of an eepic plot is 5x3 inches. You can change this using the **size** terminal option.

    \<fontsize\> is a number which specifies the font size inside the picture environment; the unit is pt (points), i.e., 10 pt equals approx. 3.5 mm. If fontsize is not specified, then all text inside the picture will be set in \\footnotesize.

    **default** resets all options to their defaults = no color, no dashed lines, pseudo-rotated (stacked) text, large point symbols.

    Notes:

    Remember to escape the \# character (or other chars meaningful to (La-)TeX) by \\ \\ (2 backslashes).

    It seems that dashed lines become solid lines when the vertices of a plot are too close. (I do not know if that is a general problem with the tpic specials, or if it is caused by a bug in eepic.sty or dvips/dvipdfm.)

    Points, among other things, are drawn using the LaTeX commands " \\Diamond", " \\Box", etc. These commands no longer belong to the LaTeX2e core; they are included in the latexsym package, which is part of the base distribution and thus part of any LaTeX implementation. Please do not forget to use this package. Instead of latexsym, you can also include the amssymb package.

    All drivers for LaTeX offer a special way of controlling text positioning: If any text string begins with '{', you also need to include a '}' at the end of the text, and the whole text will be centered both horizontally and vertically. If the text string begins with '\[', you need to follow this with a position specification (up to two out of t,b,l,r), '\]{', the text itself, and finally '}'. The text itself may be anything LaTeX can typeset as an LR-box. ' \\rule{}{}'s may help for best positioning.

    Examples:

        set term eepic

    output graphs as eepic macros inside a picture environment; \\input the resulting file in your LaTeX document.

        set term eepic color tiny rotate 8

    eepic macros with \\color macros, \\scripscriptsize point markers, true rotated text, and all text set with 8pt.

    About label positioning: Use gnuplot defaults (mostly sensible, but sometimes not really best):

        set title '\LaTeX\ -- $ \gamma $'

    Force centering both horizontally and vertically:

        set label '{\LaTeX\ -- $ \gamma $}' at 0,0

    Specify own positioning (top here):

        set xlabel '[t]{\LaTeX\ -- $ \gamma $}'

    The other label – account for long ticlabels:

        set ylabel '[r]{\LaTeX\ -- $ \gamma $\rule{7mm}{0pt}}'
- name: Ellipses
  id: ellipses
  summary: The ellipses style plots an ellipse at each data point
  description: "# Ellipses\n\nThe **ellipses** style plots an ellipse at each data point. This style is only relevant for 2D plotting. Each ellipse is described in terms of its center, major and minor diameters, and the angle between its major diameter and the x axis.\n\n    2 columns: x y\n    3 columns: x y major_diam\n    4 columns: x y major_diam minor_diam\n    5 columns: x y major_diam minor_diam angle\n\nIf only two input columns are present, they are taken as the coordinates of the centers, and the ellipses will be drawn with the default extent (see **[set style ellipse](set_show#set_style_ellipse)**). The orientation of the ellipse, which is defined as the angle between the major diameter and the plot's x axis, is taken from the default ellipse style (see **[set style ellipse](set_show#set_style_ellipse)**). If three input columns are provided, the third column is used for both diameters. The orientation angle defaults to zero. If four columns are present, they are interpreted as x, y, major diameter, minor diameter. Note that these are diameters, not radii. An optional 5th column may specify the orientation angle in degrees. The ellipses will also be drawn with their default extent if either of the supplied diameters in the 3-4-5 column form is negative.\n\nIn all of the above cases, optional variable color data may be given in an additional last (3th, 4th, 5th or 6th) column. See **[colorspec](linetypes_colors_styles#colorspec)**.\n\nBy default, the major diameter is interpreted in the units of the plot's horizontal axis (x or x2) while the minor diameter in that of the vertical (y or y2). If the x and y axis scales are not equal, the major/minor diameter ratio will no longer be correct after rotation. This can be changed with the **units** keyword, however.\n\nThere are three alternatives: if **units xy** is included in the plot specification, the axes will be scaled as described above. **units xx** ensures that both diameters are interpreted in units of the x axis, while **units yy** means that both diameters are interpreted in units of the y axis. In the latter two cases the ellipses will have the correct aspect ratio, even if the plot is resized. If **units** is omitted from the plot command, the setting from **set style ellipse** will be used.\n\nExample (draws ellipses, cycling through the available line types):\n\n    plot 'data' using 1:2:3:4:(0):0 with ellipses\n\nSee also **[set object ellipse](set_show#set_object_ellipse)**, **[set style ellipse](set_show#set_style_ellipse)** and **[fillstyle](set_show#fillstyle)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Emf
  id: complete_list_terminals#SECTION050116000000000000000
  summary: The emf terminal generates an Enhanced Metafile Format file
  description: |-
    ## Emf

    The **emf** terminal generates an Enhanced Metafile Format file. This file format is recognized by many Windows applications.

    Syntax:

        set terminal emf {color | monochrome}
                         {enhanced {noproportional}}
                         {rounded | butt}
                         {linewidth <LW>} {dashlength <DL>}
                         {size XX,YY} {background <rgb_color>}
                         {font "<fontname>{,<fontsize>}"}
                         {fontscale <scale>}

    In **monochrome** mode successive line types cycle through dash patterns. **linewidth \<factor\>** multiplies all line widths by this factor. **dashlength \<factor\>** is useful for thick lines. \<fontname\> is the name of a font; and **\<fontsize\>** is the size of the font in points.

    The nominal size of the output image defaults to 1024x768 in arbitrary units. You may specify a different nominal size using the **size** option.

    Enhanced text mode tries to approximate proportional character spacing. If you are using a monospaced font, or don't like the approximation, you can turn off this correction using the **noproportional** option.

    The default settings are **color font "Arial,12" size 1024,768** Selecting **default** sets all options to their default values.

    Examples:

        set terminal emf 'Times Roman Italic, 12'
- name: Emxvga
  id: complete_list_terminals#SECTION050117000000000000000
  summary: 'Note: legacy terminal'
  description: |-
    ## Emxvga

    Note: legacy terminal. The **emxvga** and **emxvesa** terminal drivers support PCs with SVGA, VESA SVGA and VGA graphics boards, respectively. They are intended to be compiled with "emx-gcc" under either DOS or OS/2. They also need VESA and SVGAKIT maintained by Johannes Martin (JMARTIN@GOOFY.ZDV.UNI-MAINZ.DE) with additions by David J. Liu (liu@phri.nyu.edu).

    Syntax:

        set terminal emxvga
        set terminal emxvesa {vesa-mode}

    The only option is the vesa mode for **emxvesa**, which defaults to G640x480x256.
- name: Encoding
  id: set_show#SECTION0402924000000000000000
  summary: The set encoding command selects a character encoding
  belongs_to: Set-show
  description: |-
    ## Encoding

    The **set encoding** command selects a character encoding.

    Syntax:

        set encoding {<value>}
        set encoding locale
        show encoding

    Valid values are

        default     - tells a terminal to use its default encoding
        iso_8859_1  - the most common Western European encoding prior to UTF-8.
                      Known in the PostScript world as 'ISO-Latin1'.
        iso_8859_15 - a variant of iso_8859_1 that includes the Euro symbol
        iso_8859_2  - used in Central and Eastern Europe
        iso_8859_9  - used in Turkey (also known as Latin5)
        koi8r       - popular Unix cyrillic encoding
        koi8u       - Ukrainian Unix cyrillic encoding
        cp437       - codepage for MS-DOS
        cp850       - codepage for OS/2, Western Europe
        cp852       - codepage for OS/2, Central and Eastern Europe
        cp950       - MS version of Big5 (emf terminal only)
        cp1250      - codepage for MS Windows, Central and Eastern Europe
        cp1251      - codepage for 8-bit Russian, Serbian, Bulgarian, Macedonian
        cp1252      - codepage for MS Windows, Western Europe
        cp1254      - codepage for MS Windows, Turkish (superset of Latin5)
        sjis        - shift-JIS Japanese encoding
        utf8        - variable-length (multibyte) representation of Unicode
                      entry point for each character

    The command **set encoding locale** is different from the other options. It attempts to determine the current locale from the runtime environment. On most systems this is controlled by the environmental variables LC_ALL, LC_CTYPE, or LANG. This mechanism is necessary, for example, to pass multibyte character encodings such as UTF-8 or EUC_JP to the wxt and pdf terminals. This command does not affect the locale-specific representation of dates or numbers. See also **[set locale](set_show#set_locale)** and **[set decimalsign](set_show#set_decimalsign)**.

    Generally you must set the encoding before setting the terminal type, as it may affect the choice of appropriate fonts.
- name: Enhanced text mode
  id: enhanced_text_mode
  summary: Many terminal types support an enhanced text mode in which additional formatting information is embedded in the text string
  description: "# Enhanced text mode\n\nMany terminal types support an enhanced text mode in which additional formatting information is embedded in the text string. For example, \"x`^`2\" will write x-squared as we are used to seeing it, with a superscript 2. This mode is selected by default when you set the terminal, but may be toggled afterward using \"set termoption \\[no\\]enhanced\", or by marking individual strings as in \"set label 'x_2' noenhanced\".\n\n|                             |                        |                           |                                               |\n|-----------------------------|------------------------|---------------------------|-----------------------------------------------|\n| Enhanced Text Control Codes |                        |                           |                                               |\n| Control                     | Example                | Result                    | Explanation                                   |\n| `^`                         | `a^x`                  | *a*^(x)                   | superscript                                   |\n| `_`                         | `a_x`                  | *a*_(x)                   | subscript                                     |\n| `@`                         | `a@^b_{cd}`            | *a*^(b)_(cd)              | phantom box (occupies no width)               |\n| `&`                         | `d&{space}b`           | db                        | inserts space of specified length             |\n| `~`                         | `~a{.8-}`              | [\\[IMAGE svg\\]](img2.svg) | overprints '-' on 'a', raised by .8           |\n|                             |                        |                           | times the current fontsize                    |\n|                             | `{/Times abc}`         | abc                       | print abc in font Times at current size       |\n|                             | `{/Times*2 abc}`       |  abc                      | print abc in font Times at twice current size |\n|                             | `{/Times:Italic abc}`  | *abc*                     | print abc in font Times with style italic     |\n|                             | `{/Arial:Bold=20 abc}` | abc                       | print abc in boldface Arial font size 20      |\n| `\\U+`                       | `\\U+221E`              | ∞                         | Unicode point U+221E INFINITY                 |\n\nThe markup control characters act on the following single character or bracketed clause. The bracketed clause may contain a string of characters with no additional markup, e.g. 2`^`{10}, or it may contain additional markup that changes font properties. Font specifiers MUST be preceded by a '/' character that immediately follows the opening '{'. If a font name contains spaces it must be enclosed in single or double quotes.\n\nExamples: The first example illustrates nesting one bracketed clause inside another to produce a boldface A with an italic subscript i, all in the current font. If the clause introduced by :Normal were omitted the subscript would be both italic and boldface. The second example illustrates the same markup applied to font \"Times New Roman\" at 20 point size.\n\n    {/:Bold A_{/:Normal{/:Italic i}}}\n    {/\"Times New Roman\":Bold=20 A_{/:Normal{/:Italic i}}}\n\nThe phantom box is useful for a@`^`b_c to align superscripts and subscripts but does not work well for overwriting an accent on a letter. For the latter, it is much better to use an encoding (e.g. iso_8859_1 or utf8) that contains a large variety of letters with accents or other diacritical marks. See **[set encoding](set_show#set_encoding)**. Since the box is non-spacing, it is sensible to put the shorter of the subscript or superscript in the box (that is, after the @).\n\nSpace equal in length to a string can be inserted using the '&' character. Thus\n\n    'abc&{def}ghi'\n\nwould produce\n\n    'abc   ghi'.\n\nThe '˜ ' character causes the next character or bracketed text to be overprinted by the following character or bracketed text. The second text will be horizontally centered on the first. Thus '˜ a/' will result in an 'a' with a slash through it. You can also shift the second text vertically by preceding the second text with a number, which will define the fraction of the current fontsize by which the text will be raised or lowered. In this case the number and text must be enclosed in brackets because more than one character is necessary. If the overprinted text begins with a number, put a space between the vertical offset and the text ('˜ {abc}{.5 000}'); otherwise no space is needed ('˜ {abc}{.5 — }'). You can change the font for one or both strings ('˜ a{.5 /\\*.2 o}' — an 'a' with a one-fifth-size 'o' on top — and the space between the number and the slash is necessary), but you can't change it after the beginning of the string. Neither can you use any other special syntax within either string. You can, of course, use control characters by escaping them (see below), such as '˜ a{ \\\\`^`}'\n\nYou can escape control characters using \\\\, e.g., \\\\ \\\\, \\\\{, and so on. See **[escape sequences](enhanced_text_mode#escape_sequences)** below.\n\nNote that strings in double-quotes are parsed differently than those enclosed in single-quotes. The major difference is that backslashes may need to be doubled when in double-quoted strings.\n\nThe file \"ps_guide.ps\" in the /docs/psdoc subdirectory of the gnuplot source distribution contains more examples of the enhanced syntax, as does the demo [**enhanced_utf8.dem** ](http://www.gnuplot.info/demo/enhanced_utf8.html)\n\n## Escape sequences\n\nThe backslash character \\\\ is used to escape single byte character codes or Unicode entry points.\n\nThe form \\\\ooo (where ooo is a 3 character octal value) can be used to index a known character code in a specific font encoding. For example the Adobe Symbol font uses a custom encoding in which octal 245 represents the infinity symbol. You could embed this in an enhanced text string by giving the font name and the character code \"{/Symbol \\\\245}\". This is mostly useful for the PostScript terminal, which cannot easily handle UTF-8 encoding.\n\nYou can specify a character by its Unicode code point as \\\\U+hhhh, where hhhh is the 4 or 5 character hexadecimal code point. For example the code point for the infinity symbol is \\\\U+221E. This will be converted to a UTF-8 byte sequence on output if appropriate. In a UTF-8 environment this mechanism is not needed for printable special characters since they are handled in a text string like any other character. However it is useful for combining forms or supplemental diacritical marks (e.g. an arrow over a letter to represent a vector). See **[set encoding](set_show#set_encoding)**, **[utf8](set_show#utf8)**, and the [online unicode demo. ](http://www.gnuplot.info/demo_5.4/unicode.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Enhanced text mode Escape sequences
  id: enhanced_text_mode#SECTION020141000000000000000
  summary: The backslash character \ is used to escape single byte character codes or Unicode entry points
  belongs_to: Enhanced text mode
  description: "## Escape sequences\n\nThe backslash character \\\\ is used to escape single byte character codes or Unicode entry points.\n\nThe form \\\\ooo (where ooo is a 3 character octal value) can be used to index a known character code in a specific font encoding. For example the Adobe Symbol font uses a custom encoding in which octal 245 represents the infinity symbol. You could embed this in an enhanced text string by giving the font name and the character code \"{/Symbol \\\\245}\". This is mostly useful for the PostScript terminal, which cannot easily handle UTF-8 encoding.\n\nYou can specify a character by its Unicode code point as \\\\U+hhhh, where hhhh is the 4 or 5 character hexadecimal code point. For example the code point for the infinity symbol is \\\\U+221E. This will be converted to a UTF-8 byte sequence on output if appropriate. In a UTF-8 environment this mechanism is not needed for printable special characters since they are handled in a text string like any other character. However it is useful for combining forms or supplemental diacritical marks (e.g. an arrow over a letter to represent a vector). See **[set encoding](set_show#set_encoding)**, **[utf8](set_show#utf8)**, and the [online unicode demo. ](http://www.gnuplot.info/demo_5.4/unicode.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Environment
  id: environment
  summary: A number of shell environment variables are understood by gnuplot
  description: "# Environment\n\nA number of shell environment variables are understood by **gnuplot**. None of these are required, but may be useful.\n\nGNUTERM, if defined, is used to set the terminal type on start-up. Starting with version 5.2 the entire string in GNUTERM is passed to \"set term\" so that terminal options may be included. E.g.\n\n    GNUTERM=\"postscript eps color size 5in, 3in\"\n\nThis can be overridden by the ˜ /.gnuplot (or equivalent) start-up file (see **[startup](start_up_initialization#startup)**) and of course by later explicit **set term** commands.\n\nGNUHELP may be defined to be the pathname of the HELP file (gnuplot.gih).\n\nOn VMS, the logical name GNUPLOT$HELP should be defined as the name of the help library for **gnuplot**. The **gnuplot** help can be put inside any VMS system help library.\n\nOn Unix, HOME is used as the name of a directory to search for a .gnuplot file if none is found in the current directory. On MS-DOS, Windows and OS/2, GNUPLOT is used. On Windows, the NT-specific variable USERPROFILE is also tried. VMS, SYS$LOGIN: is used. Type **help startup**.\n\nOn Unix, PAGER is used as an output filter for help messages.\n\nOn Unix, SHELL is used for the **shell** command. On MS-DOS and OS/2, COMSPEC is used for the **shell** command.\n\n**FIT_SCRIPT** may be used to specify a **gnuplot** command to be executed when a fit is interrupted — see **[fit](fit#fit)**. **FIT_LOG** specifies the default filename of the logfile maintained by fit.\n\nGNUPLOT_LIB may be used to define additional search directories for data and command files. The variable may contain a single directory name, or a list of directories separated by a platform-specific path separator, eg. ':' on Unix, or ';' on DOS/Windows/OS/2 platforms. The contents of GNUPLOT_LIB are appended to the **loadpath** variable, but not saved with the **save** and **save set** commands.\n\nSeveral gnuplot terminal drivers access TrueType fonts via the gd library. For these drivers the font search path is controlled by the environmental variable GDFONTPATH. Furthermore, a default font for these drivers may be set via the environmental variable GNUPLOT_DEFAULT_GDFONT.\n\nThe postscript terminal uses its own font search path. It is controlled by the environmental variable GNUPLOT_FONTPATH.\n\nGNUPLOT_PS_DIR is used by the postscript driver to search for external prologue files. Depending on the build process, gnuplot contains either a built-in copy of those files or a default hardcoded path. You can use this variable have the postscript terminal use custom prologue files rather than the default files. See **[postscript prologue](complete_list_terminals#postscript_prologue)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Epscairo
  id: complete_list_terminals#SECTION050118000000000000000
  summary: The epscairo terminal device generates encapsulated PostScript (*.eps) using the cairo and pango support libraries
  description: |-
    ## Epscairo

    The **epscairo** terminal device generates encapsulated PostScript (\*.eps) using the cairo and pango support libraries. cairo version \>= 1.6 is required.

    Please read the help for the **pdfcairo** terminal.
- name: Epslatex
  id: complete_list_terminals#SECTION050119000000000000000
  summary: The epslatex driver generates output for further processing by LaTeX
  description: |-
    ## Epslatex

    The **epslatex** driver generates output for further processing by LaTeX.

    Syntax:

        set terminal epslatex   {default}
        set terminal epslatex   {standalone | input}
                                {oldstyle | newstyle}
                                {level1 | leveldefault | level3}
                                {color | colour | monochrome}
                                {background <rgbcolor> | nobackground}
                                {dashlength | dl <DL>}
                                {linewidth | lw <LW>} {pointscale | ps <PS>}
                                {rounded | butt}
                                {clip | noclip}
                                {palfuncparam <samples>{,<maxdeviation>}}
                                {size <XX>{unit},<YY>{unit}}
                                {header <header> | noheader}
                                {blacktext | colortext | colourtext}
                                {{font} "fontname{,fontsize}" {<fontsize>}}
                                {fontscale <scale>}

    The epslatex terminal prints a plot as **terminal postscript eps** but transfers the texts to LaTeX instead of including in the PostScript code. Thus, many options are the same as in the **postscript terminal**.

    The appearance of the epslatex terminal changed between versions 4.0 and 4.2 to reach better consistency with the postscript terminal: The plot size has been changed from 5 x 3 inches to 5 x 3.5 inches; the character width is now estimated to be 60% of the font size while the old epslatex terminal used 50%; now, the larger number of postscript linetypes and symbols are used. To reach an appearance that is nearly identical to the old one specify the option **oldstyle**. (In fact some small differences remain: the symbol sizes are slightly different, the tics are half as large as in the old terminal which can be changed using **set tics scale**, and the arrows have all features as in the postscript terminal.)

    If you see the error message

        "Can't find PostScript prologue file ... "

    Please see and follow the instructions in **[postscript prologue](complete_list_terminals#postscript_prologue)**.

    The option **color** enables color, while **monochrome** prefers black and white drawing elements. Further, **monochrome** uses gray **palette** but it does not change color of objects specified with an explicit **colorspec**. **dashlength** or **dl** scales the length of dashed-line segments by \<DL\>, which is a floating-point number greater than zero. **linewidth** or **lw** scales all linewidths by \<LW\>.

    By default the generated PostScript code uses language features that were introduced in PostScript Level 2, notably filters and pattern-fill of irregular objects such as filledcurves. PostScript Level 2 features are conditionally protected so that PostScript Level 1 interpreters do not issue errors but, rather, display a message or a PostScript Level 1 approximation. The **level1** option substitutes PostScript Level 1 approximations of these features and uses no PostScript Level 2 code. This may be required by some old printers and old versions of Adobe Illustrator. The flag **level1** can be toggled later by editing a single line in the PostScript output file to force PostScript Level 1 interpretation. In the case of files containing level 2 code, the above features will not appear or will be replaced by a note when this flag is set or when the interpreting program does not indicate that it understands level 2 PostScript or higher. The flag **level3** enables PNG encoding for bitmapped images, which can reduce the output size considerably.

    **rounded** sets line caps and line joins to be rounded; **butt** is the default, butt caps and mitered joins.

    **clip** tells PostScript to clip all output to the bounding box; **noclip** is the default.

    **palfuncparam** controls how **set palette functions** are encoded as gradients in the output. Analytic color component functions (set via **set palette functions**) are encoded as linear interpolated gradients in the postscript output: The color component functions are sampled at \<samples\> points and all points are removed from this gradient which can be removed without changing the resulting colors by more than \<maxdeviation\>. For almost every useful palette you may safely leave the defaults of \<samples\>=2000 and \<maxdeviation\>=0.003 untouched.

    The default size for postscript output is 10 inches x 7 inches. The default for eps output is 5 x 3.5 inches. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in inches, but other units are possibly (currently only cm). The BoundingBox of the plot is correctly adjusted to contain the resized image. Screen coordinates always run from 0.0 to 1.0 along the full length of the plot edges as specified by the **size** option. NB: **this is a change from the previously recommended method of using the set size command prior to setting the terminal type**. The old method left the BoundingBox unchanged and screen coordinates did not correspond to the actual limits of the plot.

    **blacktext** forces all text to be written in black even in color mode;

    The epslatex driver offers a special way of controlling text positioning: (a) If any text string begins with '{', you also need to include a '}' at the end of the text, and the whole text will be centered both horizontally and vertically by LaTeX. (b) If the text string begins with '\[', you need to continue it with: a position specification (up to two out of t,b,l,r,c), '\]{', the text itself, and finally, '}'. The text itself may be anything LaTeX can typeset as an LR-box. \\rule{}{}'s may help for best positioning. See also the documentation for the **[pslatex](complete_list_terminals#pslatex)** terminal driver. To create multiline labels, use \\shortstack, for example

        set ylabel '[r]{\shortstack{first line \\ second line}}'

    The **back** option of **set label** commands is handled slightly different than in other terminals. Labels using 'back' are printed behind all other elements of the plot while labels using 'front' are printed above everything else.

    The driver produces two different files, one for the eps part of the figure and one for the LaTeX part. The name of the LaTeX file is taken from the **set output** command. The name of the eps file is derived by replacing the file extension (normally **.tex**) with **.eps** instead. There is no LaTeX output if no output file is given! Remember to close the **output file** before next plot unless in **multiplot** mode.

    In your LaTeX documents use ' \\input{filename}' to include the figure. The **.eps** file is included by the command \\includegraphics{...}, so you must also include \\usepackage{graphicx} in the LaTeX preamble. If you want to use coloured text (option **textcolour**) you also have to include \\usepackage{color} in the LaTeX preamble.

    Pdf files can be made from the eps file using 'epstopdf'. If the graphics package is properly configured, the LaTeX files can also be processed by pdflatex without changes, using the pdf files instead of the eps files. The behaviour concerning font selection depends on the header mode. In all cases, the given font size is used for the calculation of proper spacing. When not using the **standalone** mode the actual LaTeX font and font size at the point of inclusion is taken, so use LaTeX commands for changing fonts. If you use e.g. 12pt as font size for your LaTeX document, use '"" 12' as options. The font name is ignored. If using **standalone** the given font and font size are used, see below for a detailed description.

    If text is printed coloured is controlled by the TeX booleans \\ifGPcolor and \\ifGPblacktext. Only if \\ifGPcolor is true and \\ifGPblacktext is false, text is printed coloured. You may either change them in the generated TeX file or provide them globally in your TeX file, for example by using

        \newif\ifGPblacktext
        \GPblacktexttrue

    in the preamble of your document. The local assignment is only done if no global value is given.

    When using the epslatex terminal give the name of the TeX file in the **set output** command including the file extension (normally ".tex"). The eps filename is generated by replacing the extension by ".eps".

    If using the **standalone** mode a complete LaTeX header is added to the LaTeX file; and "-inc" is added to the filename of the eps file. The **standalone** mode generates a TeX file that produces output with the correct size when using dvips, pdfTeX, or VTeX. The default, **input**, generates a file that has to be included into a LaTeX document using the \\input command.

    If a font other than "" or "default" is given it is interpreted as LaTeX font name. It contains up to three parts, separated by a comma: 'fontname,fontseries,fontshape'. If the default fontshape or fontseries are requested, they can be omitted. Thus, the real syntax for the fontname is '\[fontname\]\[,fontseries\]\[,fontshape\]'. The naming convention for all parts is given by the LaTeX font scheme. The fontname is 3 to 4 characters long and is built as follows: One character for the font vendor, two characters for the name of the font, and optionally one additional character for special fonts, e.g., 'j' for fonts with old-style numerals or 'x' for expert fonts. The names of many fonts is described in [http://www.tug.org/fontname/fontname.pdf ](http://www.tug.org/fontname/fontname.pdf)

    For example, 'cmr' stands for Computer Modern Roman, 'ptm' for Times-Roman, and 'phv' for Helvetica. The font series denotes the thickness of the glyphs, in most cases 'm' for normal ("medium") and 'bx' or 'b' for bold fonts. The font shape is 'n' for upright, 'it' for italics, 'sl' for slanted, or 'sc' for small caps, in general. Some fonts may provide different font series or shapes.

    Examples:

    Use Times-Roman boldface (with the same shape as in the surrounding text):

        set terminal epslatex 'ptm,bx'

    Use Helvetica, boldface, italics:

        set terminal epslatex 'phv,bx,it'

    Continue to use the surrounding font in slanted shape:

        set terminal epslatex ',,sl'

    Use small capitals:

        set terminal epslatex ',,sc'

    By this method, only text fonts are changed. If you also want to change the math fonts you have to use the "gnuplot.cfg" file or the **header** option, described below.

    In standalone mode, the font size is taken from the given font size in the **set terminal** command. To be able to use a specified font size, a file "size\<size\>.clo" has to reside in the LaTeX search path. By default, 10pt, 11pt, and 12pt are supported. If the package "extsizes" is installed, 8pt, 9pt, 14pt, 17pt, and 20pt are added.

    The **header** option takes a string as argument. This string is written into the generated LaTeX file. If using the **standalone** mode, it is written into the preamble, directly before the \\begin{document} command. In the **input** mode, it is placed directly after the \\begingroup command to ensure that all settings are local to the plot.

    Examples:

    Use T1 fontencoding, change the text and math font to Times-Roman as well as the sans-serif font to Helvetica:

        set terminal epslatex standalone header \
        "\\usepackage[T1]{fontenc}\n\\usepackage{mathptmx}\n\\usepackage{helvet}"

    Use a boldface font in the plot, not influencing the text outside the plot:

        set terminal epslatex input header "\\bfseries"

    If the file "gnuplot.cfg" is found by LaTeX it is input in the preamble the LaTeX document, when using **standalone** mode. It can be used for further settings, e.g., changing the document font to Times-Roman, Helvetica, and Courier, including math fonts (handled by "mathptmx.sty"):

        \usepackage{mathptmx}
        \usepackage[scaled=0.92]{helvet}
        \usepackage{courier}

    The file "gnuplot.cfg" is loaded before the header information given by the **header** command. Thus, you can use **header** to overwrite some of settings performed using "gnuplot.cfg"
- name: Epson_180dpi
  id: complete_list_terminals#SECTION050120000000000000000
  summary: 'Note: only available if gnuplot is configured –with-bitmap-terminals'
  description: |-
    ## Epson_180dpi

    Note: only available if gnuplot is configured –with-bitmap-terminals. This driver supports a family of Epson printers and derivatives.

    **epson_180dpi** and **epson_60dpi** are drivers for Epson LQ-style 24-pin printers with resolutions of 180 and 60 dots per inch, respectively.

    **epson_lx800** is a generic 9-pin driver appropriate for printers like the Epson LX-800, the Star NL-10 and NX-1000, the PROPRINTER, and so forth.

    **nec_cp6** is generic 24-pin driver that can be used for printers like the NEC CP6 and the Epson LQ-800.

    The **okidata** driver supports the 9-pin OKIDATA 320/321 Standard printers.

    The **starc** driver is for the Star Color Printer.

    The **tandy_60dpi** driver is for the Tandy DMP-130 series of 9-pin, 60-dpi printers.

    The **dpu414** driver is for the Seiko DPU-414 thermal printer.

    **nec_cp6** has the options:

    Syntax:

        set terminal nec_cp6 {monochrome | colour | draft}

    which defaults to monochrome.

    **dpu414** has the options:

    Syntax:

        set terminal dpu414 {small | medium | large} {normal | draft}

    which defaults to medium (=font size) and normal. Preferred combinations are **medium normal** and **small draft**.
- name: Error estimates
  id: fit#SECTION04093000000000000000
  summary: In fit, the term "error" is used in two different contexts, data error estimates and parameter error estimates
  belongs_to: Fit
  description: |-
    ## Error estimates

    In **fit**, the term "error" is used in two different contexts, data error estimates and parameter error estimates.

    Data error estimates are used to calculate the relative weight of each data point when determining the weighted sum of squared residuals, WSSR or chisquare. They can affect the parameter estimates, since they determine how much influence the deviation of each data point from the fitted function has on the final values. Some of the **fit** output information, including the parameter error estimates, is more meaningful if accurate data error estimates have been provided.

    The **statistical overview** describes some of the **fit** output and gives some background for the 'practical guidelines'.
- name: Error estimates Practical guidelines
  id: fit#SECTION04093200000000000000
  summary: If you have a basis for assigning weights to each data point, doing so lets you make use of additional knowledge about your measurements, e.g., take into account that some points may be more reliable than others
  belongs_to: Fit
  description: |-
    ### Practical guidelines

    If you have a basis for assigning weights to each data point, doing so lets you make use of additional knowledge about your measurements, e.g., take into account that some points may be more reliable than others. That may affect the final values of the parameters.

    Weighting the data provides a basis for interpreting the additional **fit** output after the last iteration. Even if you weight each point equally, estimating an average standard deviation rather than using a weight of 1 makes WSSR a dimensionless variable, as chisquare is by definition.

    Each fit iteration will display information which can be used to evaluate the progress of the fit. (An '\*' indicates that it did not find a smaller WSSR and is trying again.) The 'sum of squares of residuals', also called 'chisquare', is the WSSR between the data and your fitted function; **fit** has minimized that. At this stage, with weighted data, chisquare is expected to approach the number of degrees of freedom (data points minus parameters). The WSSR can be used to calculate the reduced chisquare (WSSR/ndf) or stdfit, the standard deviation of the fit, sqrt(WSSR/ndf). Both of these are reported for the final WSSR.

    If the data are unweighted, stdfit is the rms value of the deviation of the data from the fitted function, in user units.

    If you supplied valid data errors, the number of data points is large enough, and the model is correct, the reduced chisquare should be about unity. (For details, look up the 'chi-squared distribution' in your favorite statistics reference.) If so, there are additional tests, beyond the scope of this overview, for determining how well the model fits the data.

    A reduced chisquare much larger than 1.0 may be due to incorrect data error estimates, data errors not normally distributed, systematic measurement errors, 'outliers', or an incorrect model function. A plot of the residuals, e.g., **plot 'datafile' using 1:($2-f($1))**, may help to show any systematic trends. Plotting both the data points and the function may help to suggest another model.

    Similarly, a reduced chisquare less than 1.0 indicates WSSR is less than that expected for a random sample from the function with normally distributed errors. The data error estimates may be too large, the statistical assumptions may not be justified, or the model function may be too general, fitting fluctuations in a particular sample in addition to the underlying trends. In the latter case, a simpler function may be more appropriate.

    The p-value of the fit is one minus the cumulative distribution function of the chisquare-distribution for the number of degrees of freedom and the resulting chisquare. This can serve as a measure of the goodness-of-fit. The range of the p-value is between zero and one. A very small or large p-value indicates that the model does not describe the data and its errors well. As described above, this might indicate a problem with the data, its errors or the model, or a combination thereof. A small p-value might indicate that the errors have been underestimated and the errors of the final parameters should thus be scaled. See also **[set fit errorscaling](set_show#set_fit_errorscaling)**.

    You'll have to get used to both **fit** and the kind of problems you apply it to before you can relate the standard errors to some more practical estimates of parameter uncertainties or evaluate the significance of the correlation matrix.

    Note that **fit**, in common with most NLLS implementations, minimizes the weighted sum of squared distances (y-f(x))\*\*2. It does not provide any means to account for "errors" in the values of x, only in y. Also, any "outliers" (data points outside the normal distribution of the model) will have an exaggerated effect on the solution.
- name: Error estimates Statistical overview
  id: fit#SECTION04093100000000000000
  summary: The theory of non-linear least-squares (NLLS) is generally described in terms of a normal distribution of errors, that is, the input data is assumed to be a sample from a population having a given mean and a Gaussian (normal) distribution about the mean with a given standard deviation
  belongs_to: Fit
  description: |-
    ### Statistical overview

    The theory of non-linear least-squares (NLLS) is generally described in terms of a normal distribution of errors, that is, the input data is assumed to be a sample from a population having a given mean and a Gaussian (normal) distribution about the mean with a given standard deviation. For a sample of sufficiently large size, and knowing the population standard deviation, one can use the statistics of the chisquare distribution to describe a "goodness of fit" by looking at the variable often called "chisquare". Here, it is sufficient to say that a reduced chisquare (chisquare/degrees of freedom, where degrees of freedom is the number of datapoints less the number of parameters being fitted) of 1.0 is an indication that the weighted sum of squared deviations between the fitted function and the data points is the same as that expected for a random sample from a population characterized by the function with the current value of the parameters and the given standard deviations.

    If the standard deviation for the population is not constant, as in counting statistics where variance = counts, then each point should be individually weighted when comparing the observed sum of deviations and the expected sum of deviations.

    At the conclusion **fit** reports 'stdfit', the standard deviation of the fit, which is the rms of the residuals, and the variance of the residuals, also called 'reduced chisquare' when the data points are weighted. The number of degrees of freedom (the number of data points minus the number of fitted parameters) is used in these estimates because the parameters used in calculating the residuals of the datapoints were obtained from the same data. If the data points have weights, **gnuplot** calculates the so-called p-value, i.e. one minus the cumulative distribution function of the chisquare-distribution for the number of degrees of freedom and the resulting chisquare, see **[practical_guidelines](fit#practical_guidelines)**. These values are exported to the variables

        FIT_NDF = Number of degrees of freedom
        FIT_WSSR = Weighted sum-of-squares residual
        FIT_STDFIT = sqrt(WSSR/NDF)
        FIT_P = p-value

    To estimate confidence levels for the parameters, one can use the minimum chisquare obtained from the fit and chisquare statistics to determine the value of chisquare corresponding to the desired confidence level, but considerably more calculation is required to determine the combinations of parameters which produce such values.

    Rather than determine confidence intervals, **fit** reports parameter error estimates which are readily obtained from the variance-covariance matrix after the final iteration. By convention, these estimates are called "standard errors" or "asymptotic standard errors", since they are calculated in the same way as the standard errors (standard deviation of each parameter) of a linear least-squares problem, even though the statistical conditions for designating the quantity calculated to be a standard deviation are not generally valid for the NLLS problem. The asymptotic standard errors are generally over-optimistic and should not be used for determining confidence levels, but are useful for qualitative purposes.

    The final solution also produces a correlation matrix indicating correlation of parameters in the region of the solution; The main diagonal elements, autocorrelation, are always 1; if all parameters were independent, the off-diagonal elements would be nearly 0. Two variables which completely compensate each other would have an off-diagonal element of unit magnitude, with a sign depending on whether the relation is proportional or inversely proportional. The smaller the magnitudes of the off-diagonal elements, the closer the estimates of the standard deviation of each parameter would be to the asymptotic standard error.
- name: Errorbars
  id: plot#SECTION040184000000000000000
  summary: Error bars are supported for 2D data file plots by reading one to four additional columns (or using entries); these additional values are used in different ways by the various errorbar styles
  belongs_to: Plot
  description: |-
    ## Errorbars

    Error bars are supported for 2D data file plots by reading one to four additional columns (or **using** entries); these additional values are used in different ways by the various errorbar styles.

    In the default situation, **gnuplot** expects to see three, four, or six numbers on each line of the data file — either

        (x, y, ydelta),
        (x, y, ylow, yhigh),
        (x, y, xdelta),
        (x, y, xlow, xhigh),
        (x, y, xdelta, ydelta), or
        (x, y, xlow, xhigh, ylow, yhigh).

    The x coordinate must be specified. The order of the numbers must be exactly as given above, though the **using** qualifier can manipulate the order and provide values for missing columns. For example,

        plot 'file' with errorbars
        plot 'file' using 1:2:(sqrt($1)) with xerrorbars
        plot 'file' using 1:2:($1-$3):($1+$3):4:5 with xyerrorbars

    The last example is for a file containing an unsupported combination of relative x and absolute y errors. The **using** entry generates absolute x min and max from the relative error.

    The y error bar is a vertical line plotted from (x, ylow) to (x, yhigh). If ydelta is specified instead of ylow and yhigh, ylow = y - ydelta and yhigh = y + ydelta are derived. If there are only two numbers on the record, yhigh and ylow are both set to y. The x error bar is a horizontal line computed in the same fashion. To get lines plotted between the data points, **plot** the data file twice, once with errorbars and once with lines (but remember to use the **notitle** option on one to avoid two entries in the key). Alternately, use the errorlines command (see **[errorlines](plot#errorlines)**).

    The tic marks at the ends of the bar are controlled by **set errorbars**.

    If autoscaling is on, the ranges will be adjusted to include the error bars.

    See also [errorbar demos. ](http://www.gnuplot.info/demo/mgr.html)

    See **[plot using](plot#plot_using)**, **[plot with](plot#plot_with)**, and **[set style](set_show#set_style)** for more information.
- name: Errorbars
  id: set_show#SECTION0402925000000000000000
  summary: The set errorbars command controls the tics at the ends of error bars, and also at the end of the whiskers belonging to a boxplot
  belongs_to: Set-show
  description: |-
    ## Errorbars

    The **set errorbars** command controls the tics at the ends of error bars, and also at the end of the whiskers belonging to a boxplot.

    Syntax:

        set errorbars {small | large | fullwidth | <size>} {front | back}
                      {line-properties}
        unset errorbars
        show errorbars

    **small** is a synonym for 0.0 (no crossbar), and **large** for 1.0. The default is 1.0 if no size is given.

    The keyword **fullwidth** is relevant only to boxplots and to histograms with errorbars. It sets the width of the errorbar ends to be the same as the width of the associated box. It does not change the width of the box itself.

    The **front** and **back** keywords are relevant only to errorbars attached to filled rectangles (boxes, candlesticks, histograms).

    Error bars are by default drawn using the same line properties as the border of the associated box. You can change this by providing a separate set of line properties for the error bars.

        set errorbars linecolor black linewidth 0.5 dashtype '.'
- name: Errorlines
  id: plot#SECTION040185000000000000000
  summary: Lines with error bars are supported for 2D data file plots by reading one to four additional columns (or using entries); these additional values are used in different ways by the various errorlines styles
  belongs_to: Plot
  description: |-
    ## Errorlines

    Lines with error bars are supported for 2D data file plots by reading one to four additional columns (or **using** entries); these additional values are used in different ways by the various errorlines styles.

    In the default situation, **gnuplot** expects to see three, four, or six numbers on each line of the data file — either

        (x, y, ydelta),
        (x, y, ylow, yhigh),
        (x, y, xdelta),
        (x, y, xlow, xhigh),
        (x, y, xdelta, ydelta), or
        (x, y, xlow, xhigh, ylow, yhigh).

    The x coordinate must be specified. The order of the numbers must be exactly as given above, though the **using** qualifier can manipulate the order and provide values for missing columns. For example,

        plot 'file' with errorlines
        plot 'file' using 1:2:(sqrt($1)) with xerrorlines
        plot 'file' using 1:2:($1-$3):($1+$3):4:5 with xyerrorlines

    The last example is for a file containing an unsupported combination of relative x and absolute y errors. The **using** entry generates absolute x min and max from the relative error.

    The y error bar is a vertical line plotted from (x, ylow) to (x, yhigh). If ydelta is specified instead of ylow and yhigh, ylow = y - ydelta and yhigh = y + ydelta are derived. If there are only two numbers on the record, yhigh and ylow are both set to y. The x error bar is a horizontal line computed in the same fashion.

    The tic marks at the ends of the bar are controlled by **set errorbars**.

    If autoscaling is on, the ranges will be adjusted to include the error bars.

    See **[plot using](plot#plot_using)**, **[plot with](plot#plot_with)**, and **[set style](set_show#set_style)** for more information.
- name: Evaluate
  id: evaluate
  summary: The evaluate command executes the commands given as an argument string
  description: "# Evaluate\n\nThe **evaluate** command executes the commands given as an argument string. Newline characters are not allowed within the string.\n\nSyntax:\n\n    eval <string expression>\n\nThis is especially useful for a repetition of similar commands.\n\nExample:\n\n    set_label(x, y, text) \\\n      = sprintf(\"set label '%s' at %f, %f point pt 5\", text, x, y)\n    eval set_label(1., 1., 'one/one')\n    eval set_label(2., 1., 'two/one')\n    eval set_label(1., 2., 'one/two')\n\nPlease see **[substitution macros](substitution_command_line_m#substitution_macros)** for another way to execute commands from a string.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Excl
  id: complete_list_terminals#SECTION050121000000000000000
  summary: 'Note: legacy terminal'
  description: |-
    ## Excl

    Note: legacy terminal. The **excl** terminal driver supports Talaris printers such as the EXCL Laser printer and the 1590. It has no options.
- name: Exit
  id: exit
  summary: 'The commands exit and quit, as well as the END-OF-FILE character (usually Ctrl-D) terminate input from the current input stream: terminal session, pipe, or file input (pipe)'
  description: "# Exit\n\n    exit\n    exit message \"error message text\"\n    exit status <integer error code>\n\nThe commands **exit** and **quit**, as well as the END-OF-FILE character (usually Ctrl-D) terminate input from the current input stream: terminal session, pipe, or file input (pipe). If input streams are nested (inherited **load** scripts), then reading will continue in the parent stream. When the top level stream is closed, the program itself will exit.\n\nThe command **exit gnuplot** will immediately and unconditionally cause gnuplot to exit even if the input stream is multiply nested. In this case any open output files may not be completed cleanly. Example of use:\n\n    bind \"ctrl-x\" \"unset output; exit gnuplot\"\n\nThe command **exit error \"error message\"** simulates a program error. In interactive mode it prints the error message and returns to the command line, breaking out of all nested loops or calls. In non-interactive mode the program will exit.\n\nWhen gnuplot exits to the controlling shell, the return value is not usually informative. This variant of the command allows you to return a specific value.\n\n    exit status <value>\n\nSee help for **[batch/interactive](batch_interactive_operation#batch_interactive)** for more details.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Expressions
  id: expressions
  summary: In general, any mathematical expression accepted by C, FORTRAN, Pascal, or BASIC is valid
  description: "# Expressions\n\nIn general, any mathematical expression accepted by C, FORTRAN, Pascal, or BASIC is valid. The precedence of these operators is determined by the specifications of the C programming language. White space (spaces and tabs) is ignored inside expressions.\n\nNote that gnuplot uses both \"real\" and \"integer\" arithmetic, like FORTRAN and C. Integers are entered as \"1\", \"-10\", etc; reals as \"1.0\", \"-10.0\", \"1e1\", 3.5e-1, etc. The most important difference between the two forms is in division: division of integers truncates: 5/2 = 2; division of reals does not: 5.0/2.0 = 2.5. In mixed expressions, integers are \"promoted\" to reals before evaluation: 5/2e0 = 2.5. The result of division of a negative integer by a positive one may vary among compilers. Try a test like \"print -5/2\" to determine if your system always rounds down (-5/2 yields -3) or always rounds toward zero (-5/2 yields -2).\n\nThe integer expression \"1/0\" may be used to generate an \"undefined\" flag, which causes a point to be ignored. Or you can use the pre-defined variable NaN to achieve the same result. See **[using](plot#using)** for an example.\n\nGnuplot can also perform simple operations on strings and string variables. For example, the expression (\"A\" . \"B\" eq \"AB\") evaluates as true, illustrating the string concatenation operator and the string equality operator.\n\nA string which contains a numerical value is promoted to the corresponding integer or real value if used in a numerical expression. Thus (\"3\" + \"4\" == 7) and (6.78 == \"6.78\") both evaluate to true. An integer, but not a real or complex value, is promoted to a string if used in string concatenation. A typical case is the use of integers to construct file names or other strings; e.g. (\"file\" . 4 eq \"file4\") is true.\n\nSubstrings can be specified using a postfixed range descriptor \\[beg:end\\]. For example, \"ABCDEF\"\\[3:4\\] == \"CD\" and \"ABCDEF\"\\[4:\\*\\] == \"DEF\" The syntax \"string\"\\[beg:end\\] is exactly equivalent to calling the built-in string-valued function substr(\"string\",beg,end), except that you cannot omit either beg or end from the function call.\n\n## Complex arithmetic\n\nArithmetic operations and most built-in functions support the use of complex arguments. Complex constants are expressed as {\\<real\\>,\\<imag\\>}, where \\<real\\> and \\<imag\\> must be numerical constants. Thus {0,1} represents 'i'. The real and imaginary components of complex value x can be extracted as real(x) and imag(x). The modulus is given by abs(x).\n\nGnuplot's standard 2D and 3D plot styles can plot only real values; if you need to plot a complex-valued function f(x) with non-zero imaginary components you must choose between plotting real(f(x)) or abs(f(x)). For examples of representing complex values using color, see the [complex trigonometric function demos (complex_trig.dem) ](http://www.gnuplot.info/demo/complex_trig.html)\n\n## Constants\n\nInteger constants are interpreted via the C library routine strtoll(). This means that constants beginning with \"0\" are interpreted as octal, and constants beginning with \"0x\" or \"0X\" are interpreted as hexadecimal.\n\nFloating point constants are interpreted via the C library routine atof().\n\nComplex constants are expressed as {\\<real\\>,\\<imag\\>}, where \\<real\\> and \\<imag\\> must be numerical constants. For example, {3,2} represents 3 + 2i; {0,1} represents 'i' itself. The curly braces are explicitly required here.\n\nString constants consist of any sequence of characters enclosed either in single quotes or double quotes. The distinction between single and double quotes is important. See **[quotes](syntax#quotes)**.\n\nExamples:\n\n    1 -10 0xffaabb        # integer constants\n    1.0 -10. 1e1 3.5e-1   # floating point constants\n    {1.2, -3.4}           # complex constant\n    \"Line 1\\nLine 2\"      # string constant (\\n is expanded to newline)\n    '123\\n456'            # string constant (\\ and n are ordinary characters)\n\n## Functions\n\nArguments to math functions in **gnuplot** can be integer, real, or complex unless otherwise noted. Functions that accept or return angles (e.g. sin(x)) treat angle values as radians, but this may be changed to degrees using the command **set angles**.\n\n|                        |                            |                                                                                                         |\n|------------------------|----------------------------|---------------------------------------------------------------------------------------------------------|\n| Math library functions |                            |                                                                                                         |\n| Function               | Arguments                  | Returns                                                                                                 |\n|                        |                            |                                                                                                         |\n| abs(x)                 | any                        | absolute value of *x*, \\| *x*\\|; same type                                                              |\n| abs(x)                 | complex                    | length of *x*, [\\[IMAGE svg\\]](img3.svg)                                                                |\n| acos(x)                | any                        | cos⁻¹*x* (inverse cosine)                                                                               |\n| acosh(x)               | any                        | cosh⁻¹*x* (inverse hyperbolic cosine) in radians                                                        |\n| airy(x)                | any                        | Airy function Ai(x)                                                                                     |\n| arg(x)                 | complex                    | the phase of *x*                                                                                        |\n| asin(x)                | any                        | sin⁻¹*x* (inverse sin)                                                                                  |\n| asinh(x)               | any                        | sinh⁻¹*x* (inverse hyperbolic sin) in radians                                                           |\n| atan(x)                | any                        | tan⁻¹*x* (inverse tangent)                                                                              |\n| atan2(y,x)             | int or real                | tan⁻¹(*y*/*x*) (inverse tangent)                                                                        |\n| atanh(x)               | any                        | tanh⁻¹*x* (inverse hyperbolic tangent) in radians                                                       |\n| EllipticK(k)           | real k ∈ (-1:1)            | *K*(*k*) complete elliptic integral of the first kind                                                   |\n| EllipticE(k)           | real k ∈ \\[-1:1\\]          | *E*(*k*) complete elliptic integral of the second kind                                                  |\n| EllipticPi(n,k)        | real n\\<1, real k ∈ (-1:1) | *Π*(*n*, *k*) complete elliptic integral of the third kind                                              |\n| besj0(x)               | int or real                | *J*₀ Bessel function of *x* in radians                                                                  |\n| besj1(x)               | int or real                | *J*₁ Bessel function of *x* in radians                                                                  |\n| besjn(n,x)             | int, real                  | *J*_(n) Bessel function of *x* in radians                                                               |\n| besy0(x)               | int or real                | *Y*₀ Bessel function of *x* in radians                                                                  |\n| besy1(x)               | int or real                | *Y*₁ Bessel function of *x* in radians                                                                  |\n| besyn(n,x)             | int, real                  | *Y*_(n) Bessel function of *x* in radians                                                               |\n| besi0(x)               | real                       | Modified Bessel function of order 0, *x* in radians                                                     |\n| besi1(x)               | real                       | Modified Bessel function of order 1, *x* in radians                                                     |\n| besin(n,x)             | int, real                  | Modified Bessel function of order n, *x* in radians                                                     |\n| ceil(x)                | any                        | ⌈*x*⌉, smallest integer not less than *x* (real part)                                                   |\n| cos(x)                 | any                        | cos *x*, cosine of *x*                                                                                  |\n| cosh(x)                | any                        | cosh *x*, hyperbolic cosine of *x* in radians                                                           |\n| erf(x)                 | any                        | erf(real(*x*)), error function of real(*x*)                                                             |\n| erfc(x)                | any                        | erfc(real(*x*)), 1.0 - error function of real(*x*)                                                      |\n| exp(x)                 | any                        | *e*^(x), exponential function of *x*                                                                    |\n| expint(n,x)            | int *n*≥ 0, real *x*≥ 0    | *E*_(n)(*x*) = [\\[IMAGE svg\\]](img4.svg)*t*^(-n)*e*^(-xt) d*t*, exponential integral of *x*             |\n| floor(x)               | any                        | ⌊*x*⌋, largest integer not greater than *x* (real part)                                                 |\n| gamma(x)               | any                        | gamma(real(*x*)), gamma function of real(*x*)                                                           |\n| ibeta(p,q,x)           | any                        | ibeta(real(*p*, *q*, *x*)), ibeta function of real(*p*,*q*,*x*)                                         |\n| inverf(x)              | any                        | inverse error function of real(*x*)                                                                     |\n| igamma(a,x)            | any                        | igamma(real(*a*, *x*)), igamma function of real(*a*,*x*)                                                |\n| imag(x)                | complex                    | imaginary part of *x* as a real number                                                                  |\n| invnorm(x)             | any                        | inverse normal distribution function of real(*x*)                                                       |\n| int(x)                 | real                       | integer part of *x*, truncated toward zero                                                              |\n| lambertw(x)            | real                       | Lambert W function                                                                                      |\n| lgamma(x)              | any                        | lgamma(real(*x*)), lgamma function of real(*x*)                                                         |\n| log(x)                 | any                        | log_(e)*x*, natural logarithm (base *e*) of *x*                                                         |\n| log10(x)               | any                        | log₁₀*x*, logarithm (base 10) of *x*                                                                    |\n| norm(x)                | any                        | normal distribution (Gaussian) function of real(*x*)                                                    |\n| rand(x)                | int                        | pseudo random number in the open interval (0:1)                                                         |\n| real(x)                | any                        | real part of *x*                                                                                        |\n| sgn(x)                 | any                        | 1 if *x* \\> 0, -1 if *x* \\< 0, 0 if *x* = 0. imag(*x*) ignored                                          |\n| sin(x)                 | any                        | sin *x*, sine of *x*                                                                                    |\n| sinh(x)                | any                        | sinh *x*, hyperbolic sine of *x* in radians                                                             |\n| sqrt(x)                | any                        | [\\[IMAGE svg\\]](img5.svg), square root of *x*                                                           |\n| tan(x)                 | any                        | tan *x*, tangent of *x*                                                                                 |\n| tanh(x)                | any                        | tanh *x*, hyperbolic tangent of *x* in radians                                                          |\n| voigt(x,y)             | real                       | Voigt/Faddeeva function [\\[IMAGE svg\\]](img6.svg)[\\[IMAGE svg\\]](img7.svg)[\\[IMAGE svg\\]](img8.svg)*dt* |\n|                        |                            | Note: voigt(*x*, *y*) = *real* (faddeeva(*x* + *iy*))                                                   |\n|                        |                            |                                                                                                         |\n\n|                                                    |           |                                                                                                            |\n|----------------------------------------------------|-----------|------------------------------------------------------------------------------------------------------------|\n| Special functions from libcerf (only if available) |           |                                                                                                            |\n| Function                                           | Arguments | Returns                                                                                                    |\n|                                                    |           |                                                                                                            |\n| cerf(z)                                            | complex   | complex error function                                                                                     |\n| cdawson(z)                                         | complex   | complex extension of Dawson's integral *D*(*z*) = [\\[IMAGE svg\\]](img9.svg)*e*^(-z²)*erfi*(*z*)            |\n| faddeeva(z)                                        | complex   | rescaled complex error function *w*(*z*) = *e*^(-z²) *erfc*(- *iz*)                                        |\n| erfi(x)                                            | real      | imaginary error function *erf* (*x*) = - *i*\\**erf* (*ix*)                                                 |\n| VP(x,*σ*,*γ*)                                      | real      | Voigt profile *VP*(*x*, *σ*, *γ*) = [\\[IMAGE svg\\]](img10.svg)*G*(*x*^(′);*σ*)*L*(*x*-*x*^(′);*γ*)*dx*^(′) |\n|                                                    |           |                                                                                                            |\n\n|                          |             |                                                     |\n|--------------------------|-------------|-----------------------------------------------------|\n| String functions         |             |                                                     |\n| Function                 | Arguments   | Returns                                             |\n| gprintf(\"format\",x,...)  | any         | string result from applying gnuplot's format parser |\n| sprintf(\"format\",x,...)  | multiple    | string result from C-language sprintf               |\n| strlen(\"string\")         | string      | number of characters in string                      |\n| strstrt(\"string\",\"key\")  | strings     | int index of first character of substring \"key\"     |\n| substr(\"string\",beg,end) | multiple    | string \"string\"\\[beg:end\\]                          |\n| strftime(\"timeformat\",t) | any         | string result from applying gnuplot's time parser   |\n| strptime(\"timeformat\",s) | string      | seconds since year 1970 as given in string s        |\n| system(\"command\")        | string      | string containing output stream of shell command    |\n| trim(\" string \")         | string      | string without leading or trailing whitespace       |\n| word(\"string\",n)         | string, int | returns the nth word in \"string\"                    |\n| words(\"string\")          | string      | returns the number of words in \"string\"             |\n\n|                             |                 |                                                          |\n|-----------------------------|-----------------|----------------------------------------------------------|\n| other **gnuplot** functions |                 |                                                          |\n| Function                    | Arguments       | Returns                                                  |\n| column(x)                   | int or string   | column *x* during datafile manipulation.                 |\n| columnhead(x)               | int             | string containing first entry of column *x* in datafile. |\n| exists(\"X\")                 | string          | returns 1 if a variable named X is defined, 0 otherwise. |\n| hsv2rgb(h,s,v)              | h,s,v ∈ \\[0:1\\] | 24bit RGB color value.                                   |\n| palette(z)                  | double          | RGB palette color mapped to z.                           |\n| stringcolumn(x)             | int or string   | content of column *x* as a string.                       |\n| timecolumn(N,\"timeformat\")  | int, string     | time data from column *N* during data input.             |\n| tm_hour(t)                  | time in sec     | the hour (0..23)                                         |\n| tm_mday(t)                  | time in sec     | the day of the month (1..31)                             |\n| tm_min(t)                   | time in sec     | the minute (0..59)                                       |\n| tm_mon(t)                   | time in sec     | the month (0..11)                                        |\n| tm_sec(t)                   | time in sec     | the second (0..59)                                       |\n| tm_wday(t)                  | time in sec     | the day of the week (Sun..Sat) as (0..6)                 |\n| tm_week(t)                  | time in sec     | week of year in ISO8601 \"week date\" system (1..53)       |\n| tm_yday(t)                  | time in sec     | the day of the year (0..365)                             |\n| tm_year(t)                  | time in sec     | the year                                                 |\n| time(x)                     | any             | the current system time in seconds                       |\n| valid(x)                    | int             | test validity of column(*x*) during datafile manip.      |\n| value(\"name\")               | string          | returns the value of the named variable.                 |\n| voxel(x,y,z)                | real            | value of the active grid voxel containing point (x,y,z)  |\n\n### Elliptic integrals\n\nThe **EllipticK(k)** function returns the complete elliptic integral of the first kind, i.e. the definite integral between 0 and pi/2 of the function **(1-(k\\*sin(p))\\*\\*2)\\*\\*(-0.5)**. The domain of **k** is -1 to 1 (exclusive).\n\nThe **EllipticE(k)** function returns the complete elliptic integral of the second kind, i.e. the definite integral between 0 and pi/2 of the function **(1-(k\\*sin(p))\\*\\*2)\\*\\*0.5**. The domain of **k** is -1 to 1 (inclusive).\n\nThe **EllipticPi(n,k)** function returns the complete elliptic integral of the third kind, i.e. the definite integral between 0 and pi/2 of the function **(1-(k\\*sin(p))\\*\\*2)\\*\\*(-0.5)/(1-n\\*sin(p)\\*\\*2)**. The parameter **n** must be less than 1, while **k** must lie between -1 and 1 (exclusive). Note that by definition EllipticPi(0,k) == EllipticK(k) for all possible values of **k**.\n\n### Random number generator\n\nThe function **rand()** produces a sequence of pseudo-random numbers between 0 and 1 using an algorithm from P. L'Ecuyer and S. Cote, \"Implementing a random number package with splitting facilities\", ACM Transactions on Mathematical Software, 17:98-111 (1991).\n\n    rand(0)     returns a pseudo random number in the open interval (0:1)\n                generated from the current value of two internal\n                32-bit seeds.\n    rand(-1)    resets both seeds to a standard value.\n    rand(x)     for integer 0 < x < 2^31-1 sets both internal seeds\n                to x.\n    rand({x,y}) for integer 0 < x,y < 2^31-1 sets seed1 to x and\n                seed2 to y.\n\n### Value\n\nB = value(\"A\") is effectively the same as B = A, where A is the name of a user-defined variable. This is useful when the name of the variable is itself held in a string variable. See **[user-defined variables](expressions#user-defined_variables)**. It also allows you to read the name of a variable from a data file. If the argument is a numerical expression, value() returns the value of that expression. If the argument is a string that does not correspond to a currently defined variable, value() returns NaN.\n\n### Counting and extracting words\n\n**word(\"string\",n)** returns the nth word in string. For example, **word(\"one two three\",2)** returns the string \"two\".\n\n**words(\"string\")** returns the number of words in string. For example, **words(\" a b c d\")** returns 4.\n\nThe **word** and **words** functions provide limited support for quoted strings, both single and double quotes can be used:\n\n    print words(\"\\\"double quotes\\\" or 'single quotes'\")   # 3\n\nA starting quote must either be preceded by a white space, or start the string. This means that apostrophes in the middle or at the end of words are considered as parts of the respective word:\n\n    print words(\"Alexis' phone doesn't work\") # 4\n\nEscaping quote characters is not supported. If you want to keep certain quotes, the respective section must be surrounded by the other kind of quotes:\n\n    s = \"Keep \\\"'single quotes'\\\" or '\\\"double quotes\\\"'\"\n    print word(s, 2) # 'single quotes'\n    print word(s, 4) # \"double quotes\"\n\nNote, that in this last example the escaped quotes are necessary only for the string definition.\n\n**trim(\" padded string \")** returns the original string stripped of leading and trailing whitespace. This is useful for string comparisons of input data fields that may contain extra whitespace. For example\n\n    plot FOO using 1:( trim(strcol(3)) eq \"A\" ? $2 : NaN )\n\n## Operators\n\nThe operators in **gnuplot** are the same as the corresponding operators in the C programming language, except that all operators accept integer, real, and complex arguments, unless otherwise noted. The \\*\\* operator (exponentiation) is supported, as in FORTRAN.\n\nParentheses may be used to change order of evaluation.\n\n### Unary\n\nThe following is a list of all the unary operators and their usages:\n\n|                 |         |                                                  |\n|-----------------|---------|--------------------------------------------------|\n| Unary Operators |         |                                                  |\n| Symbol          | Example | Explanation                                      |\n| `-`             | `-a`    | unary minus                                      |\n| `+`             | `+a`    | unary plus (no-operation)                        |\n| `~`             | `~a`    | \\* one's complement                              |\n| `!`             | `!a`    | \\* logical negation                              |\n| `!`             | `a!`    | \\* factorial                                     |\n| `$`             | `$3`    | \\* call arg/column during \\`using\\` manipulation |\n| `|`             | `|A|`   | cardinality of array A                           |\n\n(\\*) Starred explanations indicate that the operator requires an integer argument.\n\nOperator precedence is the same as in Fortran and C. As in those languages, parentheses may be used to change the order of operation. Thus -2\\*\\*2 = -4, but (-2)\\*\\*2 = 4.\n\nThe factorial operator returns an integer when N! is sufficiently small (N \\<= 20 for 64-bit integers). It returns a floating point approximation for larger values of N.\n\nThis operator returns the number of elements \\|A\\| when applied to array A. It returns the number of data lines \\|$DATA\\| when applied to datablock $DATA.\n\n### Binary\n\nThe following is a list of all the binary operators and their usages:\n\n|                  |           |                          |\n|------------------|-----------|--------------------------|\n| Binary Operators |           |                          |\n| Symbol           | Example   | Explanation              |\n| `**`             | `a**b`    | exponentiation           |\n| `*`              | `a*b`     | multiplication           |\n| `/`              | `a/b`     | division                 |\n| `%`              | `a%b`     | \\* modulo                |\n| `+`              | `a+b`     | addition                 |\n| `-`              | `a-b`     | subtraction              |\n| `==`             | `a==b`    | equality                 |\n| `!=`             | `a!=b`    | inequality               |\n| `<`              | `a<b`     | less than                |\n| `<=`             | `a<=b`    | less than or equal to    |\n| `>`              | `a>b`     | greater than             |\n| `>=`             | `a>=b`    | greater than or equal to |\n| `<<`             | `0xff<<1` | left shift unsigned      |\n| `>>`             | `0xff>>1` | right shift unsigned     |\n| `&`              | `a&b`     | \\* bitwise AND           |\n| `^`              | `a^b`     | \\* bitwise exclusive OR  |\n| `|`              | `a|b`     | \\* bitwise inclusive OR  |\n| `&&`             | `a&&b`    | \\* logical AND           |\n| `||`             | `a||b`    | \\* logical OR            |\n| `=`              | `a = b`   | assignment               |\n| `,`              | `(a,b)`   | serial evaluation        |\n| `.`              | `A.B`     | string concatenation     |\n| `eq`             | `A eq B`  | string equality          |\n| `ne`             | `A ne B`  | string inequality        |\n\n(\\*) Starred explanations indicate that the operator requires integer arguments. Capital letters A and B indicate that the operator requires string arguments.\n\nLogical AND (&&) and OR (\\|\\|) short-circuit the way they do in C. That is, the second **&&** operand is not evaluated if the first is false; the second **\\|\\|** operand is not evaluated if the first is true.\n\nSerial evaluation occurs only in parentheses and is guaranteed to proceed in left to right order. The value of the rightmost subexpression is returned.\n\n### Ternary\n\nThere is a single ternary operator:\n\n|                  |         |                   |\n|------------------|---------|-------------------|\n| Ternary Operator |         |                   |\n| Symbol           | Example | Explanation       |\n| `?:`             | `a?b:c` | ternary operation |\n\nThe ternary operator behaves as it does in C. The first argument (a), which must be an integer, is evaluated. If it is true (non-zero), the second argument (b) is evaluated and returned; otherwise the third argument (c) is evaluated and returned.\n\nThe ternary operator is very useful both in constructing piecewise functions and in plotting points only when certain conditions are met.\n\nExamples:\n\nPlot a function that is to equal sin(x) for 0 \\<= x \\< 1, 1/x for 1 \\<= x \\< 2, and undefined elsewhere:\n\n    f(x) = 0<=x && x<1 ? sin(x) : 1<=x && x<2 ? 1/x : 1/0\n    plot f(x)\n\nNote that **gnuplot** quietly ignores undefined values, so the final branch of the function (1/0) will produce no plottable points. Note also that f(x) will be plotted as a continuous function across the discontinuity if a line style is used. To plot it discontinuously, create separate functions for the two pieces. (Parametric functions are also useful for this purpose.)\n\nFor data in a file, plot the average of the data in columns 2 and 3 against the datum in column 1, but only if the datum in column 4 is non-negative:\n\n    plot 'file' using 1:( $4<0 ? 1/0 : ($2+$3)/2 )\n\nFor an explanation of the **using** syntax, please see **[plot datafile using](plot#plot_datafile_using)**.\n\n## Summation\n\nA summation expression has the form\n\n    sum [<var> = <start> : <end>] <expression>\n\n\\<var\\> is treated as an integer variable that takes on successive integral values from \\<start\\> to \\<end\\>. For each of these, the current value of \\<expression\\> is added to a running total whose final value becomes the value of the summation expression. Examples:\n\n    print sum [i=1:10] i\n        55.\n    # Equivalent to plot 'data' using 1:($2+$3+$4+$5+$6+...)\n    plot 'data' using 1 : (sum [col=2:MAXCOL] column(col))\n\nIt is not necessary that \\<expression\\> contain the variable \\<var\\>. Although \\<start\\> and \\<end\\> can be specified as variables or expressions, their value cannot be changed dynamically as a side-effect of carrying out the summation. If \\<end\\> is less than \\<start\\> then the value of the summation is zero.\n\n## Gnuplot-defined variables\n\nGnuplot maintains a number of read-only variables that reflect the current internal state of the program and the most recent plot. These variables begin with the prefix \"GPVAL\\_\". Examples include GPVAL_TERM, GPVAL_X_MIN, GPVAL_X_MAX, GPVAL_Y_MIN. Type **show variables all** to display the complete list and current values. Values related to axes parameters (ranges, log base) are values used during the last plot, not those currently **set**.\n\nExample: To calculate the fractional screen coordinates of the point \\[X,Y\\]\n\n    GRAPH_X = (X - GPVAL_X_MIN) / (GPVAL_X_MAX - GPVAL_X_MIN)\n    GRAPH_Y = (Y - GPVAL_Y_MIN) / (GPVAL_Y_MAX - GPVAL_Y_MIN)\n    SCREEN_X = GPVAL_TERM_XMIN + GRAPH_X * (GPVAL_TERM_XMAX - GPVAL_TERM_XMIN)\n    SCREEN_Y = GPVAL_TERM_YMIN + GRAPH_Y * (GPVAL_TERM_YMAX - GPVAL_TERM_YMIN)\n    FRAC_X = SCREEN_X * GPVAL_TERM_SCALE / GPVAL_TERM_XSIZE\n    FRAC_Y = SCREEN_Y * GPVAL_TERM_SCALE / GPVAL_TERM_YSIZE\n\nThe read-only variable GPVAL_ERRNO is set to a non-zero value if any gnuplot command terminates early due to an error. The most recent error message is stored in the string variable GPVAL_ERRMSG. Both GPVAL_ERRNO and GPVAL_ERRMSG can be cleared using the command **reset errors**.\n\nInteractive terminals with **mouse** functionality maintain read-only variables with the prefix \"MOUSE\\_\". See **[mouse variables](mouse_input#mouse_variables)** for details.\n\nThe **fit** mechanism uses several variables with names that begin \"FIT\\_\". It is safest to avoid using such names. When using **set fit errorvariables**, the error for each fitted parameter will be stored in a variable named like the parameter, but with \"\\_err\" appended. See the documentation on **[fit](fit#fit)** and **[set fit](set_show#set_fit)** for details.\n\nSee **[user-defined variables](expressions#user-defined_variables)**, **[reset errors](reset#reset_errors)**, **[mouse variables](mouse_input#mouse_variables)**, and **[fit](fit#fit)**.\n\n## User-defined variables and functions\n\nNew user-defined variables and functions of one through twelve variables may be declared and used anywhere, including on the **plot** command itself.\n\nUser-defined function syntax:\n\n    <func-name>( <dummy1> {,<dummy2>} ... {,<dummy12>} ) = <expression>\n\nwhere \\<expression\\> is defined in terms of \\<dummy1\\> through \\<dummy12\\>.\n\nUser-defined variable syntax:\n\n    <variable-name> = <constant-expression>\n\nExamples:\n\n    w = 2\n    q = floor(tan(pi/2 - 0.1))\n    f(x) = sin(w*x)\n    sinc(x) = sin(pi*x)/(pi*x)\n    delta(t) = (t == 0)\n    ramp(t) = (t > 0) ? t : 0\n    min(a,b) = (a < b) ? a : b\n    comb(n,k) = n!/(k!*(n-k)!)\n    len3d(x,y,z) = sqrt(x*x+y*y+z*z)\n    plot f(x) = sin(x*a), a = 0.2, f(x), a = 0.4, f(x)\n\n    file = \"mydata.inp\"\n    file(n) = sprintf(\"run_%d.dat\",n)\n\nThe final two examples illustrate a user-defined string variable and a user-defined string function.\n\nNote that the variables **pi** (3.14159...) and **NaN** (IEEE \"Not a Number\") are already defined. You can redefine these to something else if you really need to. The original values can be recovered by setting:\n\n    NaN = GPVAL_NaN\n    pi  = GPVAL_pi\n\nOther variables may be defined under various gnuplot operations like mousing in interactive terminals or fitting; see **[gnuplot-defined variables](expressions#gnuplot-defined_variables)** for details.\n\nYou can check for existence of a given variable V by the exists(\"V\") expression. For example\n\n    a = 10\n    if (exists(\"a\")) print \"a is defined\"\n    if (!exists(\"b\")) print \"b is not defined\"\n\nValid names are the same as in most programming languages: they must begin with a letter, but subsequent characters may be letters, digits, or \"\\_\".\n\nEach function definition is made available as a special string-valued variable with the prefix 'GPFUN\\_'.\n\nExample:\n\n    set label GPFUN_sinc at graph .05,.95\n\nSee **[show functions](set_show#show_functions)**, **[functions](plot#functions)**, **[gnuplot-defined variables](expressions#gnuplot-defined_variables)**, **[macros](substitution_command_line_m#macros)**, **[value](expressions#value)**.\n\n## Arrays\n\nArrays are implemented as indexed lists of user variables. The elements in an array are not limited to a single type of variable. Arrays must be created explicitly before being referenced. The size of an array cannot be changed after creation. All elements are initially undefined. In most places an array element can be used instead of a named user variable.\n\nThe cardinality (number of elements) of array A is given by the expression \\|A\\|.\n\nExample:\n\n    array A[6]\n    A[1] = 1\n    A[2] = 2.0\n    A[3] = {3.0, 3.0}\n    A[4] = \"four\"\n    A[6] = A[2]**3\n    array B[6] = [ 1, 2.0, A[3], \"four\", , B[2]**3 ]\n\n    do for [i=1:6] { print A[i], B[i] }\n        1 1\n        2.0 2.0\n        {3.0, 3.0} {3.0, 3.0}\n        four four\n        <undefined> <undefined>\n        8.0 8.0\n\nNote: Arrays and variables share the same namespace. For example, assignment of a string variable named FOO will destroy any previously created array with name FOO.\n\nThe name of an array can be used in a **plot**, **splot**, **fit**, or **stats** command. This is equivalent to providing a file in which column 1 holds the array index (from 1 to size), column 2 holds the value of real(A\\[i\\]) and column 3 holds the value of imag(A\\[i\\]).\n\nExample:\n\n    array A[200]\n    do for [i=1:200] { A[i] = sin(i * pi/100.) }\n    plot A title \"sin(x) in centiradians\"\n\nWhen plotting the imaginary component of complex array values, it may be referenced either as imag(A\\[$1\\]) or as $3. These two commands are equivalent\n\n    plot A using (real(A[$1])) : (imag(A[$1]))\n    plot A using 2:3\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Extra key entries
  id: set_show#SECTION0402938300000000000000
  summary: Normally each plot autogenerates a single line entry in the key
  belongs_to: Set-show
  description: |-
    ### Extra key entries

    Normally each plot autogenerates a single line entry in the key. If you need more control over what appears in the key you can use the **keyentry** keyword in the **plot** or **splot** command to insert extra lines. Instead of providing a filename or function to plot, use **keyentry** as a placeholder followed by plot style information (used to generate a key symbol) and a title. All the usual options for title font, text color, **at** coordinates, and enhanced text markup apply. Example:

        plot $HEATMAP matrix with image notitle, \
             keyentry with boxes fc palette cb 0 title "no effect", \
             keyentry with boxes fc palette cb 1 title "threshold", \
             keyentry with boxes fc palette cb 3 title "typical range", \
             keyentry with labels nopoint title "as reported in [12]", \
             keyentry with boxes fc palette cb 5 title "strong effect"
- name: Fence plots
  id: fence_plots
  summary: Fence plots combine several 2D plots by aligning their Y coordinates and separating them from each other by a displacement along X
  description: "# Fence plots\n\nFence plots combine several 2D plots by aligning their Y coordinates and separating them from each other by a displacement along X. Filling the area between a base value and each plot's series of Z values enhances the visual impact of the alignment on Y and comparison on Z. There are several ways such plots can be created in gnuplot. The simplest is to use the 5 column variant of the **zerrorfill** style. Suppose there are separate curves z = Fi(y) indexed by i. A fence plot is generated by **splot with zerrorfill** using input columns\n\n    i y z_base z_base Fi(y)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Fig
  id: complete_list_terminals#SECTION050122000000000000000
  summary: The fig terminal device generates output in the Fig graphics language for import into the xfig interactive drawing tool
  description: |-
    ## Fig

    The **fig** terminal device generates output in the Fig graphics language for import into the xfig interactive drawing tool. Notes:

        The fig terminal was significantly revised in gnuplot version 5.3.
        Currently only version 3.2 of the fig file format is supported.
        Use of dash patterns may require Xfig 3.2.6 or newer.

    Syntax:

        set terminal fig {monochrome | color}
                         {small | big | size <xsize>{in|cm},<ysize>{in|cm}}
                         {landscape | portrait}
                         {font "<fontname>{,<fontsize>}"} {fontsize <size>}
                         {textnormal | {textspecial texthidden textrigid}}
                         {{linewidth|lw} <multiplier>}

    The default settings are

        set term fig color small landscape font "Times Roman,10" lw 1.0

    **size** sets the size of the drawing area to \<xsize\>\*\<ysize\> in units of inches (default) or centimeters. The default is **size 5in,3in**. **small** is shorthand for **size 5in,3in** (3in,5in in portrait mode). **big** is shorthand for **size 8in,5in**.

    **font** sets the text font face to \<fontname\> and its size to \<fontsize\> points. Choice is limited to the 35 standard PostScript fonts. **textnormal** resets the text flags and selects postscript fonts, **textspecial** sets the text flags for LaTeX specials, **texthidden** sets the hidden flag and **textrigid** the rigid flag.

    **linewidth** is a multiplier for the linewidth property of all lines.

    Additional point-plot symbols are also available in the **fig** driver. The symbols can be used through **pointtype** values % 100 above 50, with different fill intensities controlled by \<pointtype\> % 5 and outlines in black (for \<pointtype\> % 10 \< 5) or in the current color. Available symbols are

        50 - 59:  circles
        60 - 69:  squares
        70 - 79:  diamonds
        80 - 89:  upwards triangles
        90 - 99:  downwards triangles

    The size of these symbols scales with the font size.

    RGB colors will be replaced with gray unless they have been defined in a linetype prior to plotting or match a known named color or palette value. See **[colornames](set_show#colornames)**. E.g.

        set linetype 999 lc rgb '#aabbcc'
        plot $data with fillecurve fillcolor rgb '#aabbcc'
- name: Filledcurves
  id: filledcurves
  summary: The filledcurves style is only used for 2D plotting
  description: "# Filledcurves\n\nThe **filledcurves** style is only used for 2D plotting. It has three variants. The first two variants require either a single function or two columns (x,y) of input data, and may be further modified by the options listed below.\n\nSyntax:\n\n    plot ... with filledcurves [option]\n\nwhere the option can be one of the following\n\n    [closed | {above | below}\n    {x1 | x2 | y | r}[=<a>] | xy=<x>,<y>]\n\nThe first variant, **closed**, treats the curve itself as a closed polygon. This is the default if there are two columns of input data.\n\nThe second variant is to fill the area between the curve and a given axis, a horizontal or vertical line, or a point.\n\n    filledcurves closed   ... just filled closed curve,\n    filledcurves x1       ... x1 axis,\n    filledcurves x2       ... x2 axis, etc for y1 and y2 axes,\n    filledcurves y=42     ... line at y=42, i.e. parallel to x axis,\n    filledcurves xy=10,20 ... point 10,20 of x1,y1 axes (arc-like shape).\n    filledcurves above r=1.5  the area of a polar plot outside radius 1.5\n\nThe third variant fills the area between two curves sampled at the same set of x coordinates. It requires three columns of input data (x, y1, y2). This is the default if there are three or more columns of input data. If you have a y value in column 2 and an associated error value in column 3 the area of uncertainty can be represented by shading. See also the similar 3D plot style **[zerrorfill](zerrorfill#zerrorfill)**.\n\n    3 columns:  x  y  yerror\n\n    plot $DAT using 1:($2-$3):($2+$3) with filledcurves, \\\n         $DAT using 1:2 smooth mcs with lines\n\nThe **above** and **below** options apply both to commands of the form\n\n    ... filledcurves above {x1|x2|y|r}=<val>\n\nand to commands of the form\n\n    ... using 1:2:3 with filledcurves below\n\nIn either case the option limits the filled area to one side of the bounding line or curve.\n\nNotes: Not all terminal types support this plotting mode.\n\n    The x= and y= keywords are ignored for 3 columns data plots\n\nZooming a filled curve drawn from a datafile may produce empty or incorrect areas because gnuplot is clipping points and lines, and not areas.\n\nIf the values \\<x\\>, \\<y\\>, or \\<a\\> are outside the drawing boundary they are moved to the graph boundary. Then the actual fill area in the case of option xy=\\<x\\>,\\<y\\> will depend on xrange and yrange.\n\n## Fill properties\n\nPlotting **with filledcurves** can be further customized by giving a fillstyle (solid/transparent/pattern) or a fillcolor. If no fillstyle (**fs**) is given in the plot command then the current default fill style is used. See **[set style fill](set_show#set_style_fill)**. If no fillcolor (**fc**) is given in the plot command, the usual linetype color sequence is followed.\n\nThe {{no}border} property of the fillstyle is honored by filledcurves mode **closed**, the default. It is ignored by all other filledcurves modes. Example:\n\n    plot 'data' with filledcurves fc \"cyan\" fs solid 0.5 border lc \"blue\"\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Filledcurves Fill properties
  id: filledcurves#SECTION030111000000000000000
  summary: Plotting with filledcurves can be further customized by giving a fillstyle (solid/transparent/pattern) or a fillcolor
  belongs_to: Filledcurves
  description: "## Fill properties\n\nPlotting **with filledcurves** can be further customized by giving a fillstyle (solid/transparent/pattern) or a fillcolor. If no fillstyle (**fs**) is given in the plot command then the current default fill style is used. See **[set style fill](set_show#set_style_fill)**. If no fillcolor (**fc**) is given in the plot command, the usual linetype color sequence is followed.\n\nThe {{no}border} property of the fillstyle is honored by filledcurves mode **closed**, the default. It is ignored by all other filledcurves modes. Example:\n\n    plot 'data' with filledcurves fc \"cyan\" fs solid 0.5 border lc \"blue\"\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Fillsteps
  id: fillsteps
  summary: The fillsteps style is exactly like steps except that the area between the curve and y=0 is filled in the current fill style
  description: "# Fillsteps\n\nThe **fillsteps** style is exactly like **steps** except that the area between the curve and y=0 is filled in the current fill style. See **[steps](steps#steps)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Financebars
  id: financebars
  summary: The financebars style is only relevant for 2D data plotting of financial data
  description: "# Financebars\n\nThe **financebars** style is only relevant for 2D data plotting of financial data. It requires 1 x coordinate (usually a date) and 4 y values (prices).\n\n    5 columns:   date  open  low  high  close\n\nAn additional (6th) input column may be used to provide variable (per-record) color information (see **[linecolor](linetypes_colors_styles#linecolor)** and **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**).\n\nThe symbol is a vertical line segment, located horizontally at the x coordinate and limited vertically by the high and low prices. A horizontal tic on the left marks the opening price and one on the right marks the closing price. The length of these tics may be changed by **set errorbars**. The symbol will be unchanged if the high and low prices are interchanged. See **[set errorbars](set_show#set_errorbars)** and **[candlesticks](candlesticks#candlesticks)**, and also the [finance demo. ](http://www.gnuplot.info/demo/finance.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Fit
  id: fit
  summary: The fit command fits a user-supplied real-valued expression to a set of data points, using the nonlinear least-squares Marquardt-Levenberg algorithm
  description: "# Fit\n\nThe **fit** command fits a user-supplied real-valued expression to a set of data points, using the nonlinear least-squares Marquardt-Levenberg algorithm. There can be up to 12 independent variables, there is always 1 dependent variable, and any number of parameters can be fitted. Optionally, error estimates can be input for weighting the data points.\n\nThe basic use of **fit** is best explained by a simple example:\n\n    f(x) = a + b*x + c*x**2\n    fit f(x) 'measured.dat' using 1:2 via a,b,c\n    plot 'measured.dat' u 1:2, f(x)\n\nSyntax:\n\n    fit {<ranges>} <expression>\n        '<datafile>' {datafile-modifiers}\n        {{unitweights} | {y|xy|z}error | errors <var1>{,<var2>,...}}\n        via '<parameter file>' | <var1>{,<var2>,...}\n\nRanges may be specified to filter the data used in fitting. Out-of-range data points are ignored. The syntax is\n\n    [{dummy_variable=}{<min>}{:<max>}],\n\nanalogous to **plot**; see **[plot ranges](plot#plot_ranges)**.\n\n\\<expression\\> can be any valid **gnuplot** expression, although the most common is a previously user-defined function of the form f(x) or f(x,y). It must be real-valued. The names of the independent variables are set by the **set dummy** command, or in the \\<ranges\\> part of the command (see below); by default, the first two are called x and y. Furthermore, the expression should depend on one or more variables whose value is to be determined by the fitting procedure.\n\n\\<datafile\\> is treated as in the **plot** command. All the **plot datafile** modifiers (**using**, **every**,...) except **smooth** are applicable to **fit**. See **[plot datafile](plot#plot_datafile)**.\n\nThe datafile contents can be interpreted flexibly by providing a **using** qualifier as with plot commands. For example to generate the independent variable x as the sum of columns 2 and 3, while taking z from column 6 and requesting equal weights:\n\n    fit ... using ($2+$3):6\n\nIn the absence of a **using** specification, the fit implicitly assumes there is only a single independent variable. If the file itself, or the using specification, contains only a single column of data, the line number is taken as the independent variable. If a **using** specification is given, there can be up to 12 independent variables (and more if specially configured at compile time).\n\nThe **unitweights** option, which is the default, causes all data points to be weighted equally. This can be changed by using the **errors** keyword to read error estimates of one or more of the variables from the data file. These error estimates are interpreted as the standard deviation s of the corresponding variable value and used to compute a weight for the datum as 1/s\\*\\*2.\n\nIn case of error estimates of the independent variables, these weights are further multiplied by fitting function derivatives according to the \"effective variance method\" (Jay Orear, Am. J. Phys., Vol. 50, 1982).\n\nThe **errors** keyword is to be followed by a comma-separated list of one or more variable names for which errors are to be input; the dependent variable z must always be among them, while independent variables are optional. For each variable in this list, an additional column will be read from the file, containing that variable's error estimate. Again, flexible interpretation is possible by providing the **using** qualifier. Note that the number of independent variables is thus implicitly given by the total number of columns in the **using** qualifier, minus 1 (for the dependent variable), minus the number of variables in the **errors** qualifier.\n\nAs an example, if one has 2 independent variables, and errors for the first independent variable and the dependent variable, one uses the **errors x,z** qualifier, and a **using** qualifier with 5 columns, which are interpreted as x:y:z:sx:sz (where x and y are the independent variables, z the dependent variable, and sx and sz the standard deviations of x and z).\n\nA few shorthands for the **errors** qualifier are available: **yerrors** (for fits with 1 column of independent variable), and **zerrors** (for the general case) are all equivalent to **errors z**, indicating that there is a single extra column with errors of the dependent variable.\n\n**xyerrors**, for the case of 1 independent variable, indicates that there are two extra columns, with errors of both the independent and the dependent variable. In this case the errors on x and y are treated by Orear's effective variance method.\n\nNote that **yerror** and **xyerror** are similar in both form and interpretation to the **yerrorlines** and **xyerrorlines** 2D plot styles.\n\nWith the command **set fit v4** the fit command syntax is compatible with **gnuplot** version 4. In this case there must be two more **using** qualifiers (z and s) than there are independent variables, unless there is only one variable. **gnuplot** then uses the following formats, depending on the number of columns given in the **using** specification:\n\n    z                           # 1 independent variable (line number)\n    x:z                         # 1 independent variable (1st column)\n    x:z:s                       # 1 independent variable (3 columns total)\n    x:y:z:s                     # 2 independent variables (4 columns total)\n    x1:x2:x3:z:s                # 3 independent variables (5 columns total)\n    x1:x2:x3:...:xN:z:s         # N independent variables (N+2 columns total)\n\nPlease beware that this means that you have to supply z-errors s in a fit with two or more independent variables. If you want unit weights you need to supply them explicitly by using e.g. then format x:y:z:(1).\n\nThe dummy variable names may be changed when specifying a range as noted above. The first range corresponds to the first **using** spec, and so on. A range may also be given for z (the dependent variable), in which case data points for which f(x,...) is out of the z range will not contribute to the residual being minimized.\n\nMultiple datasets may be simultaneously fit with functions of one independent variable by making y a 'pseudo-variable', e.g., the dataline number, and fitting as two independent variables. See **[fit multi-branch](fit#fit_multi-branch)**.\n\nThe **via** qualifier specifies which parameters are to be optimized, either directly, or by referencing a parameter file.\n\nExamples:\n\n    f(x) = a*x**2 + b*x + c\n    g(x,y) = a*x**2 + b*y**2 + c*x*y\n    set fit limit 1e-6\n    fit f(x) 'measured.dat' via 'start.par'\n    fit f(x) 'measured.dat' using 3:($7-5) via 'start.par'\n    fit f(x) './data/trash.dat' using 1:2:3 yerror via a, b, c\n    fit g(x,y) 'surface.dat' using 1:2:3 via a, b, c\n    fit a0 + a1*x/(1 + a2*x/(1 + a3*x)) 'measured.dat' via a0,a1,a2,a3\n    fit a*x + b*y 'surface.dat' using 1:2:3 via a,b\n    fit [*:*][yaks=*:*] a*x+b*yaks 'surface.dat' u 1:2:3 via a,b\n\n    fit [][][t=*:*] a*x + b*y + c*t 'foo.dat' using 1:2:3:4 via a,b,c\n\n    set dummy x1, x2, x3, x4, x5\n    h(x1,x2,x3,x4,s5) = a*x1 + b*x2 + c*x3 + d*x4 + e*x5\n    fit h(x1,x2,x3,x4,x5) 'foo.dat' using 1:2:3:4:5:6 via a,b,c,d,e\n\nAfter each iteration step, detailed information about the current state of the fit is written to the display. The same information about the initial and final states is written to a log file, \"fit.log\". This file is always appended to, so as to not lose any previous fit history; it should be deleted or renamed as desired. By using the command **set fit logfile**, the name of the log file can be changed.\n\nIf activated by using **set fit errorvariables**, the error for each fitted parameter will be stored in a variable named like the parameter, but with \"\\_err\" appended. Thus the errors can be used as input for further computations.\n\nIf **set fit prescale** is activated, fit parameters are prescaled by their initial values. This helps the Marquardt-Levenberg routine converge more quickly and reliably in cases where parameters differ in size by several orders of magnitude.\n\nThe fit may be interrupted by pressing Ctrl-C (Ctrl-Break in wgnuplot). After the current iteration completes, you have the option to (1) stop the fit and accept the current parameter values, (2) continue the fit, (3) execute a **gnuplot** command as specified by **set fit script** or the environment variable **FIT_SCRIPT**. The default is **replot**, so if you had previously plotted both the data and the fitting function in one graph, you can display the current state of the fit.\n\nOnce **fit** has finished, the **save fit** command may be used to store final values in a file for subsequent use as a parameter file. See **[save fit](save#save_fit)** for details.\n\n## Adjustable parameters\n\nThere are two ways that **via** can specify the parameters to be adjusted, either directly on the command line or indirectly, by referencing a parameter file. The two use different means to set initial values.\n\nAdjustable parameters can be specified by a comma-separated list of variable names after the **via** keyword. Any variable that is not already defined is created with an initial value of 1.0. However, the fit is more likely to converge rapidly if the variables have been previously declared with more appropriate starting values.\n\nIn a parameter file, each parameter to be varied and a corresponding initial value are specified, one per line, in the form\n\n    varname = value\n\nComments, marked by '#', and blank lines are permissible. The special form\n\n    varname = value       # FIXED\n\nmeans that the variable is treated as a 'fixed parameter', initialized by the parameter file, but not adjusted by **fit**. For clarity, it may be useful to designate variables as fixed parameters so that their values are reported by **fit**. The keyword **\\# FIXED** has to appear in exactly this form.\n\n## Short introduction\n\n**fit** is used to find a set of parameters that 'best' fits your data to your user-defined function. The fit is judged on the basis of the sum of the squared differences or 'residuals' (SSR) between the input data points and the function values, evaluated at the same places. This quantity is often called 'chisquare' (i.e., the Greek letter chi, to the power of 2). The algorithm attempts to minimize SSR, or more precisely, WSSR, as the residuals are 'weighted' by the input data errors (or 1.0) before being squared; see **[fit error_estimates](fit#fit_error_estimates)** for details.\n\nThat's why it is called 'least-squares fitting'. Let's look at an example to see what is meant by 'non-linear', but first we had better go over some terms. Here it is convenient to use z as the dependent variable for user-defined functions of either one independent variable, z=f(x), or two independent variables, z=f(x,y). A parameter is a user-defined variable that **fit** will adjust, i.e., an unknown quantity in the function declaration. Linearity/non-linearity refers to the relationship of the dependent variable, z, to the parameters which **fit** is adjusting, not of z to the independent variables, x and/or y. (To be technical, the second {and higher} derivatives of the fitting function with respect to the parameters are zero for a linear least-squares problem).\n\nFor linear least-squares (LLS), the user-defined function will be a sum of simple functions, not involving any parameters, each multiplied by one parameter. NLLS handles more complicated functions in which parameters can be used in a large number of ways. An example that illustrates the difference between linear and nonlinear least-squares is the Fourier series. One member may be written as\n\n    z=a*sin(c*x) + b*cos(c*x).\n\nIf a and b are the unknown parameters and c is constant, then estimating values of the parameters is a linear least-squares problem. However, if c is an unknown parameter, the problem is nonlinear.\n\nIn the linear case, parameter values can be determined by comparatively simple linear algebra, in one direct step. However LLS is a special case which is also solved along with more general NLLS problems by the iterative procedure that **gnuplot** uses. **fit** attempts to find the minimum by doing a search. Each step (iteration) calculates WSSR with a new set of parameter values. The Marquardt-Levenberg algorithm selects the parameter values for the next iteration. The process continues until a preset criterion is met, either (1) the fit has \"converged\" (the relative change in WSSR is less than a certain limit, see **[set fit limit](set_show#set_fit_limit)**), or (2) it reaches a preset iteration count limit (see **[set fit maxiter](set_show#set_fit_maxiter)**). The fit may also be interrupted and subsequently halted from the keyboard (see **[fit](fit#fit)**). The user variable FIT_CONVERGED contains 1 if the previous fit command terminated due to convergence; it contains 0 if the previous fit terminated for any other reason. FIT_NITER contains the number of iterations that were done during the last fit.\n\nOften the function to be fitted will be based on a model (or theory) that attempts to describe or predict the behaviour of the data. Then **fit** can be used to find values for the free parameters of the model, to determine how well the data fits the model, and to estimate an error range for each parameter. See **[fit error_estimates](fit#fit_error_estimates)**.\n\nAlternatively, in curve-fitting, functions are selected independent of a model (on the basis of experience as to which are likely to describe the trend of the data with the desired resolution and a minimum number of parameters\\*functions.) The **fit** solution then provides an analytic representation of the curve.\n\nHowever, if all you really want is a smooth curve through your data points, the **smooth** option to **plot** may be what you've been looking for rather than **fit**.\n\n## Error estimates\n\nIn **fit**, the term \"error\" is used in two different contexts, data error estimates and parameter error estimates.\n\nData error estimates are used to calculate the relative weight of each data point when determining the weighted sum of squared residuals, WSSR or chisquare. They can affect the parameter estimates, since they determine how much influence the deviation of each data point from the fitted function has on the final values. Some of the **fit** output information, including the parameter error estimates, is more meaningful if accurate data error estimates have been provided.\n\nThe **statistical overview** describes some of the **fit** output and gives some background for the 'practical guidelines'.\n\n### Statistical overview\n\nThe theory of non-linear least-squares (NLLS) is generally described in terms of a normal distribution of errors, that is, the input data is assumed to be a sample from a population having a given mean and a Gaussian (normal) distribution about the mean with a given standard deviation. For a sample of sufficiently large size, and knowing the population standard deviation, one can use the statistics of the chisquare distribution to describe a \"goodness of fit\" by looking at the variable often called \"chisquare\". Here, it is sufficient to say that a reduced chisquare (chisquare/degrees of freedom, where degrees of freedom is the number of datapoints less the number of parameters being fitted) of 1.0 is an indication that the weighted sum of squared deviations between the fitted function and the data points is the same as that expected for a random sample from a population characterized by the function with the current value of the parameters and the given standard deviations.\n\nIf the standard deviation for the population is not constant, as in counting statistics where variance = counts, then each point should be individually weighted when comparing the observed sum of deviations and the expected sum of deviations.\n\nAt the conclusion **fit** reports 'stdfit', the standard deviation of the fit, which is the rms of the residuals, and the variance of the residuals, also called 'reduced chisquare' when the data points are weighted. The number of degrees of freedom (the number of data points minus the number of fitted parameters) is used in these estimates because the parameters used in calculating the residuals of the datapoints were obtained from the same data. If the data points have weights, **gnuplot** calculates the so-called p-value, i.e. one minus the cumulative distribution function of the chisquare-distribution for the number of degrees of freedom and the resulting chisquare, see **[practical_guidelines](fit#practical_guidelines)**. These values are exported to the variables\n\n    FIT_NDF = Number of degrees of freedom\n    FIT_WSSR = Weighted sum-of-squares residual\n    FIT_STDFIT = sqrt(WSSR/NDF)\n    FIT_P = p-value\n\nTo estimate confidence levels for the parameters, one can use the minimum chisquare obtained from the fit and chisquare statistics to determine the value of chisquare corresponding to the desired confidence level, but considerably more calculation is required to determine the combinations of parameters which produce such values.\n\nRather than determine confidence intervals, **fit** reports parameter error estimates which are readily obtained from the variance-covariance matrix after the final iteration. By convention, these estimates are called \"standard errors\" or \"asymptotic standard errors\", since they are calculated in the same way as the standard errors (standard deviation of each parameter) of a linear least-squares problem, even though the statistical conditions for designating the quantity calculated to be a standard deviation are not generally valid for the NLLS problem. The asymptotic standard errors are generally over-optimistic and should not be used for determining confidence levels, but are useful for qualitative purposes.\n\nThe final solution also produces a correlation matrix indicating correlation of parameters in the region of the solution; The main diagonal elements, autocorrelation, are always 1; if all parameters were independent, the off-diagonal elements would be nearly 0. Two variables which completely compensate each other would have an off-diagonal element of unit magnitude, with a sign depending on whether the relation is proportional or inversely proportional. The smaller the magnitudes of the off-diagonal elements, the closer the estimates of the standard deviation of each parameter would be to the asymptotic standard error.\n\n### Practical guidelines\n\nIf you have a basis for assigning weights to each data point, doing so lets you make use of additional knowledge about your measurements, e.g., take into account that some points may be more reliable than others. That may affect the final values of the parameters.\n\nWeighting the data provides a basis for interpreting the additional **fit** output after the last iteration. Even if you weight each point equally, estimating an average standard deviation rather than using a weight of 1 makes WSSR a dimensionless variable, as chisquare is by definition.\n\nEach fit iteration will display information which can be used to evaluate the progress of the fit. (An '\\*' indicates that it did not find a smaller WSSR and is trying again.) The 'sum of squares of residuals', also called 'chisquare', is the WSSR between the data and your fitted function; **fit** has minimized that. At this stage, with weighted data, chisquare is expected to approach the number of degrees of freedom (data points minus parameters). The WSSR can be used to calculate the reduced chisquare (WSSR/ndf) or stdfit, the standard deviation of the fit, sqrt(WSSR/ndf). Both of these are reported for the final WSSR.\n\nIf the data are unweighted, stdfit is the rms value of the deviation of the data from the fitted function, in user units.\n\nIf you supplied valid data errors, the number of data points is large enough, and the model is correct, the reduced chisquare should be about unity. (For details, look up the 'chi-squared distribution' in your favorite statistics reference.) If so, there are additional tests, beyond the scope of this overview, for determining how well the model fits the data.\n\nA reduced chisquare much larger than 1.0 may be due to incorrect data error estimates, data errors not normally distributed, systematic measurement errors, 'outliers', or an incorrect model function. A plot of the residuals, e.g., **plot 'datafile' using 1:($2-f($1))**, may help to show any systematic trends. Plotting both the data points and the function may help to suggest another model.\n\nSimilarly, a reduced chisquare less than 1.0 indicates WSSR is less than that expected for a random sample from the function with normally distributed errors. The data error estimates may be too large, the statistical assumptions may not be justified, or the model function may be too general, fitting fluctuations in a particular sample in addition to the underlying trends. In the latter case, a simpler function may be more appropriate.\n\nThe p-value of the fit is one minus the cumulative distribution function of the chisquare-distribution for the number of degrees of freedom and the resulting chisquare. This can serve as a measure of the goodness-of-fit. The range of the p-value is between zero and one. A very small or large p-value indicates that the model does not describe the data and its errors well. As described above, this might indicate a problem with the data, its errors or the model, or a combination thereof. A small p-value might indicate that the errors have been underestimated and the errors of the final parameters should thus be scaled. See also **[set fit errorscaling](set_show#set_fit_errorscaling)**.\n\nYou'll have to get used to both **fit** and the kind of problems you apply it to before you can relate the standard errors to some more practical estimates of parameter uncertainties or evaluate the significance of the correlation matrix.\n\nNote that **fit**, in common with most NLLS implementations, minimizes the weighted sum of squared distances (y-f(x))\\*\\*2. It does not provide any means to account for \"errors\" in the values of x, only in y. Also, any \"outliers\" (data points outside the normal distribution of the model) will have an exaggerated effect on the solution.\n\n## Control\n\nThere are a number of environment variables that can be defined to affect **fit** before starting **gnuplot**, see **[fit control environment](fit#fit_control_environment)**. At run time adjustments to the **fit** command operation can be controlled by **set fit**. See **[fit control variables](fit#fit_control_variables)**.\n\n### Control variables\n\nDEPRECATED in version 5. These user variables used to affect fit behaviour.\n\n    FIT_LIMIT - use `set fit limit <epsilon>`\n    FIT_MAXITER - use `set fit maxiter <number_of_cycles>`\n    FIT_START_LAMBDA - use `set fit start-lambda <value>`\n    FIT_LAMBDA_FACTOR - use `set fit lambda-factor <value>`\n    FIT_SKIP - use the datafile `every` modifier\n    FIT_INDEX - See `fit multi-branch`\n\n### Environment variables\n\nThe environment variables must be defined before **gnuplot** is executed; how to do so depends on your operating system.\n\n    FIT_LOG\n\nchanges the name (and/or path) of the file to which the fit log will be written from the default of \"fit.log\" in the working directory. The default value can be overwritten using the command **set fit logfile**.\n\n    FIT_SCRIPT\n\nspecifies a command that may be executed after an user interrupt. The default is **replot**, but a **plot** or **load** command may be useful to display a plot customized to highlight the progress of the fit. This setting can also be changed using **set fit script**.\n\n## Multi-branch\n\nIn multi-branch fitting, multiple data sets can be simultaneously fit with functions of one independent variable having common parameters by minimizing the total WSSR. The function and parameters (branch) for each data set are selected by using a 'pseudo-variable', e.g., either the dataline number (a 'column' index of -1) or the datafile index (-2), as the second independent variable.\n\nExample: Given two exponential decays of the form, z=f(x), each describing a different data set but having a common decay time, estimate the values of the parameters. If the datafile has the format x:z:s, then\n\n    f(x,y) = (y==0) ? a*exp(-x/tau) : b*exp(-x/tau)\n    fit f(x,y) 'datafile' using  1:-2:2:3  via a, b, tau\n\nFor a more complicated example, see the file \"hexa.fnc\" used by the \"fit.dem\" demo.\n\nAppropriate weighting may be required since unit weights may cause one branch to predominate if there is a difference in the scale of the dependent variable. Fitting each branch separately, using the multi-branch solution as initial values, may give an indication as to the relative effect of each branch on the joint solution.\n\n## Starting values\n\nNonlinear fitting is not guaranteed to converge to the global optimum (the solution with the smallest sum of squared residuals, SSR), and can get stuck at a local minimum. The routine has no way to determine that; it is up to you to judge whether this has happened.\n\n**fit** may, and often will get \"lost\" if started far from a solution, where SSR is large and changing slowly as the parameters are varied, or it may reach a numerically unstable region (e.g., too large a number causing a floating point overflow) which results in an \"undefined value\" message or **gnuplot** halting.\n\nTo improve the chances of finding the global optimum, you should set the starting values at least roughly in the vicinity of the solution, e.g., within an order of magnitude, if possible. The closer your starting values are to the solution, the less chance of stopping at a false minimum. One way to find starting values is to plot data and the fitting function on the same graph and change parameter values and **replot** until reasonable similarity is reached. The same plot is also useful to check whether the fit found a false minimum.\n\nOf course finding a nice-looking fit does not prove there is no \"better\" fit (in either a statistical sense, characterized by an improved goodness-of-fit criterion, or a physical sense, with a solution more consistent with the model.) Depending on the problem, it may be desirable to **fit** with various sets of starting values, covering a reasonable range for each parameter.\n\n## Tips\n\nHere are some tips to keep in mind to get the most out of **fit**. They're not very organized, so you'll have to read them several times until their essence has sunk in.\n\nThe two forms of the **via** argument to **fit** serve two largely distinct purposes. The **via \"file\"** form is best used for (possibly unattended) batch operation, where you supply the starting parameter values in a file.\n\nThe **via var1, var2, ...** form is best used interactively, where the command history mechanism may be used to edit the list of parameters to be fitted or to supply new startup values for the next try. This is particularly useful for hard problems, where a direct fit to all parameters at once won't work without good starting values. To find such, you can iterate several times, fitting only some of the parameters, until the values are close enough to the goal that the final fit to all parameters at once will work.\n\nMake sure that there is no mutual dependency among parameters of the function you are fitting. For example, don't try to fit a\\*exp(x+b), because a\\*exp(x+b)=a\\*exp(b)\\*exp(x). Instead, fit either a\\*exp(x) or exp(x+b).\n\nA technical issue: The larger the ratio of the largest and the smallest absolute parameter values, the slower the fit will converge. If the ratio is close to or above the inverse of the machine floating point precision, it may take next to forever to converge, or refuse to converge at all. You will either have to adapt your function to avoid this, e.g., replace 'parameter' by '1e9\\*parameter' in the function definition, and divide the starting value by 1e9 or use **set fit prescale** which does this internally according to the parameter starting values.\n\nIf you can write your function as a linear combination of simple functions weighted by the parameters to be fitted, by all means do so. That helps a lot, because the problem is no longer nonlinear and should converge with only a small number of iterations, perhaps just one.\n\nSome prescriptions for analysing data, given in practical experimentation courses, may have you first fit some functions to your data, perhaps in a multi-step process of accounting for several aspects of the underlying theory one by one, and then extract the information you really wanted from the fitting parameters of those functions. With **fit**, this may often be done in one step by writing the model function directly in terms of the desired parameters. Transforming data can also quite often be avoided, though sometimes at the cost of a more difficult fit problem. If you think this contradicts the previous paragraph about simplifying the fit function, you are correct.\n\nA \"singular matrix\" message indicates that this implementation of the Marquardt-Levenberg algorithm can't calculate parameter values for the next iteration. Try different starting values, writing the function in another form, or a simpler function.\n\nFinally, a nice quote from the manual of another fitting package (fudgit), that kind of summarizes all these issues: \"Nonlinear fitting is an art\\!\"\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Fit
  id: set_show#SECTION0402926000000000000000
  summary: The set fit command controls the options for the fit command
  belongs_to: Set-show
  description: |-
    ## Fit

    The **set fit** command controls the options for the **fit** command.

    Syntax:

        set fit {nolog | logfile {"<filename>"|default}}
                {{no}quiet|results|brief|verbose}
                {{no}errorvariables}
                {{no}covariancevariables}
                {{no}errorscaling}
                {{no}prescale}
                {maxiter <value>|default}
                {limit <epsilon>|default}
                {limit_abs <epsilon_abs>}
                {start-lambda <value>|default}
                {lambda-factor <value>|default}
                {script {"<command>"|default}}
                {v4 | v5}
        unset fit
        show fit

    The **logfile** option defines where the **fit** command writes its output. The \<filename\> argument must be enclosed in single or double quotes. If no filename is given or **unset fit** is used the log file is reset to its default value "fit.log" or the value of the environmental variable **FIT_LOG**. If the given logfile name ends with a / or \\, it is interpreted to be a directory name, and the actual filename will be "fit.log" in that directory.

    By default the information written to the log file is also echoed to the terminal session. **set fit quiet** turns off the echo, whereas **results** prints only final results. **brief** gives one line summaries for every iteration of the fit in addition. **verbose** yields detailed iteration reports as in version 4.

    If the **errorvariables** option is turned on, the error of each fitted parameter computed by **fit** will be copied to a user-defined variable whose name is formed by appending "\_err" to the name of the parameter itself. This is useful mainly to put the parameter and its error onto a plot of the data and the fitted function, for reference, as in:

        set fit errorvariables
        fit f(x) 'datafile' using 1:2 via a, b
        print "error of a is:", a_err
        set label 1 sprintf("a=%6.2f +/- %6.2f", a, a_err)
        plot 'datafile' using 1:2, f(x)

    If the **errorscaling** option is specified, which is the default, the calculated parameter errors are scaled with the reduced chi square. This is equivalent to providing data errors equal to the calculated standard deviation of the fit (FIT_STDFIT) resulting in a reduced chi square of one. With the **noerrorscaling** option the estimated errors are the unscaled standard deviations of the fit parameters. If no weights are specified for the data, parameter errors are always scaled.

    If the **prescale** option is turned on, parameters are prescaled by their initial values before being passed to the Marquardt-Levenberg routine. This helps tremendously if there are parameters that differ in size by many orders of magnitude. Fit parameters with an initial value of exactly zero are never prescaled.

    The maximum number of iterations may be limited with the **maxiter** option. A value of 0 or **default** means that there is no limit.

    The **limit** option can be used to change the default epsilon limit (1e-5) to detect convergence. When the sum of squared residuals changes by a factor less than this number (epsilon), the fit is considered to have 'converged'. The **limit_abs** option imposes an additional absolute limit in the change of the sum of squared residuals and defaults to zero.

    If you need even more control about the algorithm, and know the Marquardt-Levenberg algorithm well, the following options can be used to influence it. The startup value of **lambda** is normally calculated automatically from the ML-matrix, but if you want to, you may provide your own using the **start_lambda** option. Setting it to **default** will re-enable the automatic selection. The option **lambda_factor** sets the factor by which **lambda** is increased or decreased whenever the chi-squared target function increased or decreased significantly. Setting it to **default** re-enables the default factor of 10.0.

    The **script** option may be used to specify a **gnuplot** command to be executed when a fit is interrupted — see **[fit](fit#fit)**. This setting takes precedence over the default of **replot** and the environment variable **FIT_SCRIPT**.

    If the **covariancevariables** option is turned on, the covariances between final parameters will be saved to user-defined variables. The variable name for a certain parameter combination is formed by prepending "FIT_COV\_" to the name of the first parameter and combining the two parameter names by "\_". For example given the parameters "a" and "b" the covariance variable is named "FIT_COV_a_b".

    In version 5 the syntax of the fit command changed and it now defaults to unitweights if no 'error' keyword is given. The **v4** option restores the default behavior of gnuplot version 4, see also **[fit](fit#fit)**.
- name: Fontpath
  id: set_show#SECTION0402927000000000000000
  summary: The fontpath directory is relevant only for embedding fonts in postscript output produced by the postscript terminal
  belongs_to: Set-show
  description: |-
    ## Fontpath

    Syntax:

        set fontpath "/directory/where/my/fonts/live"
        set term postscript fontfile <filename>

    \[DEPRECATED in version 5.4\]

    The **fontpath** directory is relevant only for embedding fonts in postscript output produced by the postscript terminal. It has no effect on other gnuplot terminals. If you are not embedding fonts you do not need this command, and even if you are embedding fonts you only need it for fonts that cannot be found via the other paths below.

    Earlier versions of gnuplot tried to emulate a font manager by tracking multiple directory trees containing fonts. This is now replaced by a search in the following places: (1) an absolute path given in the **set term postscript fontfile** command (2) the current directory (3) any of the directories specified by **set loadpath** (4) the directory specified by **set fontpath** (5) the directory provided in environmental variable GNUPLOT_FONTPATH

    Note: The search path for fonts specified by filename for the libgd terminals (png gif jpeg sixel) is controlled by environmental variable GDFONTPATH.
- name: Fonts
  id: fonts
  summary: Gnuplot does not provide any fonts of its own
  description: "# Fonts\n\nGnuplot does not provide any fonts of its own. It relies on external font handling, the details of which unfortunately vary from one terminal type to another. Brief documentation of font mechanisms that apply to more than one terminal type is given here. For information on font use by other individual terminals, see the documentation for that terminal.\n\nAlthough it is possible to include non-alphabetic symbols by temporarily switching to a special font, e.g. the Adobe Symbol font, the preferred method is now to choose UTF-8 encoding and treat the symbol like any other character. Alternatively you can specify the unicode entry point for the desired symbol as an escape sequence in enhanced text mode. See **[encoding](set_show#encoding)**, **[unicode](enhanced_text_mode#unicode)**, **[locale](set_show#locale)**, and **[escape sequences](enhanced_text_mode#escape_sequences)**.\n\n## Cairo (pdfcairo, pngcairo, epscairo, wxt terminals)\n\nThese terminals find and access fonts using the external fontconfig tool set. Please see the [fontconfig user manual.](http://fontconfig.org/fontconfig-user.html)\n\nIt is usually sufficient in gnuplot to request a font by a generic name and size, letting fontconfig substitute a similar font if necessary. The following will probably all work:\n\n    set term pdfcairo font \"sans,12\"\n    set term pdfcairo font \"Times,12\"\n    set term pdfcairo font \"Times-New-Roman,12\"\n\n## Gd (png, gif, jpeg, sixel terminals)\n\nFont handling for the png, gif, jpeg, and sixelgd terminals is done by the library libgd. Five basic fonts are provided directly by libgd. These are **tiny** (5x8 pixels), **small** (6x12 pixels), **medium**, (7x13 Bold), **large** (8x16) or **giant** (9x15 pixels). These fonts cannot be scaled or rotated. Use one of these keywords instead of the **font** keyword. E.g.\n\n    set term png tiny\n\nOn most systems libgd also provides access to Adobe Type 1 fonts (\\*.pfa) and TrueType fonts (\\*.ttf). You must give the name of the font file, not the name of the font inside it, in the form \"\\<face\\> {,\\<pointsize\\>}\". \\<face\\> is either the full pathname to the font file, or the first part of a filename in one of the directories listed in the GDFONTPATH environmental variable. That is, 'set term png font \"Face\"' will look for a font file named either \\<somedirectory\\>/Face.ttf or \\<somedirectory\\>/Face.pfa. For example, if GDFONTPATH contains **/usr/local/fonts/ttf:/usr/local/fonts/pfa** then the following pairs of commands are equivalent\n\n    set term png font \"arial\"\n    set term png font \"/usr/local/fonts/ttf/arial.ttf\"\n    set term png font \"Helvetica\"\n    set term png font \"/usr/local/fonts/pfa/Helvetica.pfa\"\n\nTo request a default font size at the same time:\n\n    set term png font \"arial,11\"\n\nBoth TrueType and Adobe Type 1 fonts are fully scalable and rotatable. If no specific font is requested in the \"set term\" command, gnuplot checks the environmental variable GNUPLOT_DEFAULT_GDFONT to see if there is a preferred default font.\n\n## Postscript (also encapsulated postscript \\*.eps)\n\nPostScript font handling is done by the printer or viewing program. Gnuplot can create valid PostScript or encapsulated PostScript (\\*.eps) even if no fonts at all are installed on your computer. Gnuplot simply refers to the font by name in the output file, and assumes that the printer or viewing program will know how to find or approximate a font by that name.\n\nAll PostScript printers or viewers should know about the standard set of Adobe fonts **Times-Roman**, **Helvetica**, **Courier**, and **Symbol**. It is likely that many additional fonts are also available, but the specific set depends on your system or printer configuration. Gnuplot does not know or care about this; the output \\*.ps or \\*.eps files that it creates will simply refer to whatever font names you request.\n\nThus\n\n    set term postscript eps font \"Times-Roman,12\"\n\nwill produce output that is suitable for all printers and viewers.\n\nOn the other hand\n\n    set term postscript eps font \"Garamond-Premier-Pro-Italic\"\n\nwill produce an output file that contains valid PostScript, but since it refers to a specialized font, only some printers or viewers will be able to display the specific font that was requested. Most will substitute a different font.\n\nHowever, it is possible to embed a specific font in the output file so that all printers will be able to use it. This requires that the a suitable font description file is available on your system. Note that some font files require specific licensing if they are to be embedded in this way. See **[postscript fontfile](complete_list_terminals#postscript_fontfile)** for more detailed description and examples.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Fonts Cairo (pdfcairo, pngcairo, epscairo, wxt terminals)
  id: fonts#SECTION020171000000000000000
  summary: These terminals find and access fonts using the external fontconfig tool set
  belongs_to: Fonts
  description: |-
    ## Cairo (pdfcairo, pngcairo, epscairo, wxt terminals)

    These terminals find and access fonts using the external fontconfig tool set. Please see the [fontconfig user manual.](http://fontconfig.org/fontconfig-user.html)

    It is usually sufficient in gnuplot to request a font by a generic name and size, letting fontconfig substitute a similar font if necessary. The following will probably all work:

        set term pdfcairo font "sans,12"
        set term pdfcairo font "Times,12"
        set term pdfcairo font "Times-New-Roman,12"
- name: Fonts Gd (png, gif, jpeg, sixel terminals)
  id: fonts#SECTION020172000000000000000
  summary: Font handling for the png, gif, jpeg, and sixelgd terminals is done by the library libgd
  belongs_to: Fonts
  description: |-
    ## Gd (png, gif, jpeg, sixel terminals)

    Font handling for the png, gif, jpeg, and sixelgd terminals is done by the library libgd. Five basic fonts are provided directly by libgd. These are **tiny** (5x8 pixels), **small** (6x12 pixels), **medium**, (7x13 Bold), **large** (8x16) or **giant** (9x15 pixels). These fonts cannot be scaled or rotated. Use one of these keywords instead of the **font** keyword. E.g.

        set term png tiny

    On most systems libgd also provides access to Adobe Type 1 fonts (\*.pfa) and TrueType fonts (\*.ttf). You must give the name of the font file, not the name of the font inside it, in the form "\<face\> {,\<pointsize\>}". \<face\> is either the full pathname to the font file, or the first part of a filename in one of the directories listed in the GDFONTPATH environmental variable. That is, 'set term png font "Face"' will look for a font file named either \<somedirectory\>/Face.ttf or \<somedirectory\>/Face.pfa. For example, if GDFONTPATH contains **/usr/local/fonts/ttf:/usr/local/fonts/pfa** then the following pairs of commands are equivalent

        set term png font "arial"
        set term png font "/usr/local/fonts/ttf/arial.ttf"
        set term png font "Helvetica"
        set term png font "/usr/local/fonts/pfa/Helvetica.pfa"

    To request a default font size at the same time:

        set term png font "arial,11"

    Both TrueType and Adobe Type 1 fonts are fully scalable and rotatable. If no specific font is requested in the "set term" command, gnuplot checks the environmental variable GNUPLOT_DEFAULT_GDFONT to see if there is a preferred default font.
- name: Fonts Postscript (also encapsulated postscript *.eps)
  id: fonts#SECTION020173000000000000000
  summary: PostScript font handling is done by the printer or viewing program
  belongs_to: Fonts
  description: "## Postscript (also encapsulated postscript \\*.eps)\n\nPostScript font handling is done by the printer or viewing program. Gnuplot can create valid PostScript or encapsulated PostScript (\\*.eps) even if no fonts at all are installed on your computer. Gnuplot simply refers to the font by name in the output file, and assumes that the printer or viewing program will know how to find or approximate a font by that name.\n\nAll PostScript printers or viewers should know about the standard set of Adobe fonts **Times-Roman**, **Helvetica**, **Courier**, and **Symbol**. It is likely that many additional fonts are also available, but the specific set depends on your system or printer configuration. Gnuplot does not know or care about this; the output \\*.ps or \\*.eps files that it creates will simply refer to whatever font names you request.\n\nThus\n\n    set term postscript eps font \"Times-Roman,12\"\n\nwill produce output that is suitable for all printers and viewers.\n\nOn the other hand\n\n    set term postscript eps font \"Garamond-Premier-Pro-Italic\"\n\nwill produce an output file that contains valid PostScript, but since it refers to a specialized font, only some printers or viewers will be able to display the specific font that was requested. Most will substitute a different font.\n\nHowever, it is possible to embed a specific font in the output file so that all printers will be able to use it. This requires that the a suitable font description file is available on your system. Note that some font files require specific licensing if they are to be embedded in this way. See **[postscript fontfile](complete_list_terminals#postscript_fontfile)** for more detailed description and examples.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: For
  id: for
  summary: The plot, splot, set and unset commands may optionally contain an iteration for clause
  description: "# For\n\nThe **plot**, **splot**, **set** and **unset** commands may optionally contain an iteration for clause. This has the effect of executing the basic command multiple times, each time re-evaluating any expressions that make use of the iteration control variable. Iteration of arbitrary command sequences can be requested using the **do** command. Two forms of iteration clause are currently supported:\n\n    for [intvar = start:end{:increment}]\n    for [stringvar in \"A B C D\"]\n\nExamples:\n\n    plot for [filename in \"A.dat B.dat C.dat\"] filename using 1:2 with lines\n    plot for [basename in \"A B C\"] basename.\".dat\" using 1:2 with lines\n    set for [i = 1:10] style line i lc rgb \"blue\"\n    unset for [tag = 100:200] label tag\n\nNested iteration is supported:\n\n    set for [i=1:9] for [j=1:9] label i*10+j sprintf(\"%d\",i*10+j) at i,j\n\nSee additional documentation for **[iteration](iteration#iteration)**, **[do](do#do)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: For loops in plot command
  id: plot#SECTION0401810000000000000000
  summary: If many similar files or functions are to be plotted together, it may be convenient to do so by iterating over a shared plot command
  belongs_to: Plot
  description: |-
    ## For loops in plot command

    If many similar files or functions are to be plotted together, it may be convenient to do so by iterating over a shared plot command.

    Syntax:

        plot for [<variable> = <start> : <end> {:<increment>}]
        plot for [<variable> in "string of words"]

    The scope of an iteration ends at the next comma or the end of the command, whichever comes first. An exception to this is that definitions are grouped with the following plot item even if there is an intervening comma. Note that iteration does not work for plots in parametric mode.

    Example:

        plot for [j=1:3] sin(j*x)

    Example:

        plot for [dataset in "apples bananas"] dataset."dat" title dataset

    In this example iteration is used both to generate a file name and a corresponding title.

    Example:

        file(n) = sprintf("dataset_%d.dat",n)
        splot for [i=1:10] file(i) title sprintf("dataset %d",i)

    This example defines a string-valued function that generates file names, and plots ten such files together. The iteration variable ('i' in this example) is treated as an integer, and may be used more than once.

    Example:

        set key left
        plot for [n=1:4] x**n sprintf("%d",n)

    This example plots a family of functions.

    Example:

        list = "apple banana cabbage daikon eggplant"
        item(n) = word(list,n)
        plot for [i=1:words(list)] item[i].".dat" title item(i)
        list = "new stuff"
        replot

    This example steps through a list and plots once per item. Because the items are retrieved dynamically, you can change the list and then replot.

    Example:

        list = "apple banana cabbage daikon eggplant"
        plot for [i in list] i.".dat" title i
        list = "new stuff"
        replot

    This example does exactly the same thing as the previous example, but uses the string iterator form of the command rather than an integer iterator.

    If an iteration is to continue until all available data is consumed, use the symbol \* instead of an integer \<end\>. This can be used to process all columns in a line, all datasets (separated by 2 blank lines) in a file, or all files matching a template.

    Examples:

        plot for [i=2:*] 'datafile' using 1:i with histogram
        splot for [i=0:*] 'datafile' index i using 1:2:3 with lines
        plot for [i=1:*] file=sprintf("File_%03d.dat",i) file using 2 title file
- name: Format
  id: set_show#SECTION0402928000000000000000
  summary: The format of the tic-mark labels can be set with the set format command or with the set tics format or individual set {axis}tics format commands
  belongs_to: Set-show
  description: |-
    ## Format

    The format of the tic-mark labels can be set with the **set format** command or with the **set tics format** or individual **set {axis}tics format** commands.

    Syntax:

        set format {<axes>} {"<format-string>"} {numeric|timedate|geographic}
        show format

    where \<axes\> is either **x**, **y**, **xy**, **x2**, **y2**, **z**, **cb** or nothing (which applies the format to all axes). The following two commands are equivalent:

        set format y "%.2f"
        set ytics format "%.2f"

    The length of the string is restricted to 100 characters. The default format is "% h", "$%h$" for LaTeX terminals. Other formats such as "%.2f" or "%3.0em" are often desirable. "set format" with no following string will restore the default.

    If the empty string "" is given, tics will have no labels, although the tic mark will still be plotted. To eliminate the tic marks, use **unset xtics** or **set tics scale 0**.

    Newline ( \\n) and enhanced text markup is accepted in the format string. Use double-quotes rather than single-quotes in this case. See also **[syntax](syntax#syntax)**. Characters not preceded by "%" are printed verbatim. Thus you can include spaces and labels in your format string, such as "%g m", which will put " m" after each number. If you want "%" itself, double it: "%g %%".

    See also **[set xtics](set_show#set_xtics)** for more information about tic labels, and **[set decimalsign](set_show#set_decimalsign)** for how to use non-default decimal separators in numbers printed this way. See also [electron demo (electron.dem). ](http://www.gnuplot.info/demo/electron.html)
- name: Format specifiers
  id: set_show#SECTION0402928200000000000000
  summary: A 'scientific' power is one such that the exponent is a multiple of three
  belongs_to: Set-show
  description: |-
    ### Format specifiers

    The acceptable formats (if not in time/date mode) are:

    |                                            |                                                                     |
    |--------------------------------------------|---------------------------------------------------------------------|
    | Tic-mark label numerical format specifiers |                                                                     |
    | Format                                     | Explanation                                                         |
    | `%f`                                       | floating point notation                                             |
    | `%e` or `%E`                               | exponential notation; an "e" or "E" before the power                |
    | `%g` or `%G`                               | the shorter of `%e` (or `%E`) and `%f`                              |
    | `%h` or `%H`                               | like `%g with "x10^{%S}" or "*10^{%S}" instead of "e%S"`            |
    | `%x` or `%X`                               | hex                                                                 |
    | `%o` or `%O`                               | octal                                                               |
    | `%t`                                       | mantissa to base 10                                                 |
    | `%l`                                       | mantissa to base of current logscale                                |
    | `%s`                                       | mantissa to base of current logscale; scientific power              |
    | `%T`                                       | power to base 10                                                    |
    | `%L`                                       | power to base of current logscale                                   |
    | `%S`                                       | scientific power                                                    |
    | `%c`                                       | character replacement for scientific power                          |
    | `%b`                                       | mantissa of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi) |
    | `%B`                                       | prefix of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi)   |
    | `%P`                                       | multiple of pi                                                      |

    A 'scientific' power is one such that the exponent is a multiple of three. Character replacement of scientific powers (**"%c"**) has been implemented for powers in the range -18 to +18. For numbers outside of this range the format reverts to exponential.

    Other acceptable modifiers (which come after the "%" but before the format specifier) are "-", which left-justifies the number; "+", which forces all numbers to be explicitly signed; " " (a space), which makes positive numbers have a space in front of them where negative numbers have "-"; "\#", which places a decimal point after floats that have only zeroes following the decimal point; a positive integer, which defines the field width; "0" (the digit, not the letter) immediately preceding the field width, which indicates that leading zeroes are to be used instead of leading blanks; and a decimal point followed by a non-negative integer, which defines the precision (the minimum number of digits of an integer, or the number of digits following the decimal point of a float).

    Some systems may not support all of these modifiers but may also support others; in case of doubt, check the appropriate documentation and then experiment.

    Examples:

        set format y "%t"; set ytics (5,10)          # "5.0" and "1.0"
        set format y "%s"; set ytics (500,1000)      # "500" and "1.0"
        set format y "%+-12.3f"; set ytics(12345)    # "+12345.000  "
        set format y "%.2t*10^%+03T"; set ytic(12345)# "1.23*10^+04"
        set format y "%s*10^{%S}"; set ytic(12345)   # "12.345*10^{3}"
        set format y "%s %cg"; set ytic(12345)       # "12.345 kg"
        set format y "%.0P pi"; set ytic(6.283185)   # "2 pi"
        set format y "%.0f%%"; set ytic(50)          # "50%"

        set log y 2; set format y '%l'; set ytics (1,2,3)
        #displays "1.0", "1.0" and "1.5" (since 3 is 1.5 * 2^1)

    There are some problem cases that arise when numbers like 9.999 are printed with a format that requires both rounding and a power.

    If the data type for the axis is time/date, the format string must contain valid codes for the 'strftime' function (outside of **gnuplot**, type "man strftime"). See **[set timefmt](set_show#set_timefmt)** for a list of the allowed input format codes.
- name: Fsteps
  id: fsteps
  summary: The fsteps style is only relevant to 2D plotting
  description: "# Fsteps\n\nThe **fsteps** style is only relevant to 2D plotting. It connects consecutive points with two line segments: the first from (x1,y1) to (x1,y2) and the second from (x1,y2) to (x2,y2). The input column requires are the same as for plot styles **lines** and **points**. The difference between **fsteps** and **steps** is that **fsteps** traces first the change in y and then the change in x. **steps** traces first the change in x and then the change in y.\n\nSee also [steps demo. ](http://www.gnuplot.info/demo/steps.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Function style
  id: set_show#SECTION0402929000000000000000
  summary: This form of the command is deprecated
  belongs_to: Set-show
  description: |-
    ## Function style

    This form of the command is deprecated. Please use **set style function**.
- name: Functions
  id: expressions#SECTION020163000000000000000
  summary: Arguments to math functions in gnuplot can be integer, real, or complex unless otherwise noted
  belongs_to: Expressions
  description: |-
    ## Functions

    Arguments to math functions in **gnuplot** can be integer, real, or complex unless otherwise noted. Functions that accept or return angles (e.g. sin(x)) treat angle values as radians, but this may be changed to degrees using the command **set angles**.

    |                        |                            |                                                                                                         |
    |------------------------|----------------------------|---------------------------------------------------------------------------------------------------------|
    | Math library functions |                            |                                                                                                         |
    | Function               | Arguments                  | Returns                                                                                                 |
    |                        |                            |                                                                                                         |
    | abs(x)                 | any                        | absolute value of *x*, \| *x*\|; same type                                                              |
    | abs(x)                 | complex                    | length of *x*, [\[IMAGE svg\]](img3.svg)                                                                |
    | acos(x)                | any                        | cos⁻¹*x* (inverse cosine)                                                                               |
    | acosh(x)               | any                        | cosh⁻¹*x* (inverse hyperbolic cosine) in radians                                                        |
    | airy(x)                | any                        | Airy function Ai(x)                                                                                     |
    | arg(x)                 | complex                    | the phase of *x*                                                                                        |
    | asin(x)                | any                        | sin⁻¹*x* (inverse sin)                                                                                  |
    | asinh(x)               | any                        | sinh⁻¹*x* (inverse hyperbolic sin) in radians                                                           |
    | atan(x)                | any                        | tan⁻¹*x* (inverse tangent)                                                                              |
    | atan2(y,x)             | int or real                | tan⁻¹(*y*/*x*) (inverse tangent)                                                                        |
    | atanh(x)               | any                        | tanh⁻¹*x* (inverse hyperbolic tangent) in radians                                                       |
    | EllipticK(k)           | real k ∈ (-1:1)            | *K*(*k*) complete elliptic integral of the first kind                                                   |
    | EllipticE(k)           | real k ∈ \[-1:1\]          | *E*(*k*) complete elliptic integral of the second kind                                                  |
    | EllipticPi(n,k)        | real n\<1, real k ∈ (-1:1) | *Π*(*n*, *k*) complete elliptic integral of the third kind                                              |
    | besj0(x)               | int or real                | *J*₀ Bessel function of *x* in radians                                                                  |
    | besj1(x)               | int or real                | *J*₁ Bessel function of *x* in radians                                                                  |
    | besjn(n,x)             | int, real                  | *J*_(n) Bessel function of *x* in radians                                                               |
    | besy0(x)               | int or real                | *Y*₀ Bessel function of *x* in radians                                                                  |
    | besy1(x)               | int or real                | *Y*₁ Bessel function of *x* in radians                                                                  |
    | besyn(n,x)             | int, real                  | *Y*_(n) Bessel function of *x* in radians                                                               |
    | besi0(x)               | real                       | Modified Bessel function of order 0, *x* in radians                                                     |
    | besi1(x)               | real                       | Modified Bessel function of order 1, *x* in radians                                                     |
    | besin(n,x)             | int, real                  | Modified Bessel function of order n, *x* in radians                                                     |
    | ceil(x)                | any                        | ⌈*x*⌉, smallest integer not less than *x* (real part)                                                   |
    | cos(x)                 | any                        | cos *x*, cosine of *x*                                                                                  |
    | cosh(x)                | any                        | cosh *x*, hyperbolic cosine of *x* in radians                                                           |
    | erf(x)                 | any                        | erf(real(*x*)), error function of real(*x*)                                                             |
    | erfc(x)                | any                        | erfc(real(*x*)), 1.0 - error function of real(*x*)                                                      |
    | exp(x)                 | any                        | *e*^(x), exponential function of *x*                                                                    |
    | expint(n,x)            | int *n*≥ 0, real *x*≥ 0    | *E*_(n)(*x*) = [\[IMAGE svg\]](img4.svg)*t*^(-n)*e*^(-xt) d*t*, exponential integral of *x*             |
    | floor(x)               | any                        | ⌊*x*⌋, largest integer not greater than *x* (real part)                                                 |
    | gamma(x)               | any                        | gamma(real(*x*)), gamma function of real(*x*)                                                           |
    | ibeta(p,q,x)           | any                        | ibeta(real(*p*, *q*, *x*)), ibeta function of real(*p*,*q*,*x*)                                         |
    | inverf(x)              | any                        | inverse error function of real(*x*)                                                                     |
    | igamma(a,x)            | any                        | igamma(real(*a*, *x*)), igamma function of real(*a*,*x*)                                                |
    | imag(x)                | complex                    | imaginary part of *x* as a real number                                                                  |
    | invnorm(x)             | any                        | inverse normal distribution function of real(*x*)                                                       |
    | int(x)                 | real                       | integer part of *x*, truncated toward zero                                                              |
    | lambertw(x)            | real                       | Lambert W function                                                                                      |
    | lgamma(x)              | any                        | lgamma(real(*x*)), lgamma function of real(*x*)                                                         |
    | log(x)                 | any                        | log_(e)*x*, natural logarithm (base *e*) of *x*                                                         |
    | log10(x)               | any                        | log₁₀*x*, logarithm (base 10) of *x*                                                                    |
    | norm(x)                | any                        | normal distribution (Gaussian) function of real(*x*)                                                    |
    | rand(x)                | int                        | pseudo random number in the open interval (0:1)                                                         |
    | real(x)                | any                        | real part of *x*                                                                                        |
    | sgn(x)                 | any                        | 1 if *x* \> 0, -1 if *x* \< 0, 0 if *x* = 0. imag(*x*) ignored                                          |
    | sin(x)                 | any                        | sin *x*, sine of *x*                                                                                    |
    | sinh(x)                | any                        | sinh *x*, hyperbolic sine of *x* in radians                                                             |
    | sqrt(x)                | any                        | [\[IMAGE svg\]](img5.svg), square root of *x*                                                           |
    | tan(x)                 | any                        | tan *x*, tangent of *x*                                                                                 |
    | tanh(x)                | any                        | tanh *x*, hyperbolic tangent of *x* in radians                                                          |
    | voigt(x,y)             | real                       | Voigt/Faddeeva function [\[IMAGE svg\]](img6.svg)[\[IMAGE svg\]](img7.svg)[\[IMAGE svg\]](img8.svg)*dt* |
    |                        |                            | Note: voigt(*x*, *y*) = *real* (faddeeva(*x* + *iy*))                                                   |
    |                        |                            |                                                                                                         |

    |                                                    |           |                                                                                                            |
    |----------------------------------------------------|-----------|------------------------------------------------------------------------------------------------------------|
    | Special functions from libcerf (only if available) |           |                                                                                                            |
    | Function                                           | Arguments | Returns                                                                                                    |
    |                                                    |           |                                                                                                            |
    | cerf(z)                                            | complex   | complex error function                                                                                     |
    | cdawson(z)                                         | complex   | complex extension of Dawson's integral *D*(*z*) = [\[IMAGE svg\]](img9.svg)*e*^(-z²)*erfi*(*z*)            |
    | faddeeva(z)                                        | complex   | rescaled complex error function *w*(*z*) = *e*^(-z²)*erfc*(- *iz*)                                         |
    | erfi(x)                                            | real      | imaginary error function *erf* (*x*) = - *i*\**erf* (*ix*)                                                 |
    | VP(x,*σ*,*γ*)                                      | real      | Voigt profile *VP*(*x*, *σ*, *γ*) = [\[IMAGE svg\]](img10.svg)*G*(*x*^(′);*σ*)*L*(*x*-*x*^(′);*γ*)*dx*^(′) |
    |                                                    |           |                                                                                                            |

    |                          |             |                                                     |
    |--------------------------|-------------|-----------------------------------------------------|
    | String functions         |             |                                                     |
    | Function                 | Arguments   | Returns                                             |
    | gprintf("format",x,...)  | any         | string result from applying gnuplot's format parser |
    | sprintf("format",x,...)  | multiple    | string result from C-language sprintf               |
    | strlen("string")         | string      | number of characters in string                      |
    | strstrt("string","key")  | strings     | int index of first character of substring "key"     |
    | substr("string",beg,end) | multiple    | string "string"\[beg:end\]                          |
    | strftime("timeformat",t) | any         | string result from applying gnuplot's time parser   |
    | strptime("timeformat",s) | string      | seconds since year 1970 as given in string s        |
    | system("command")        | string      | string containing output stream of shell command    |
    | trim(" string ")         | string      | string without leading or trailing whitespace       |
    | word("string",n)         | string, int | returns the nth word in "string"                    |
    | words("string")          | string      | returns the number of words in "string"             |

    |                             |                 |                                                          |
    |-----------------------------|-----------------|----------------------------------------------------------|
    | other **gnuplot** functions |                 |                                                          |
    | Function                    | Arguments       | Returns                                                  |
    | column(x)                   | int or string   | column *x* during datafile manipulation.                 |
    | columnhead(x)               | int             | string containing first entry of column *x* in datafile. |
    | exists("X")                 | string          | returns 1 if a variable named X is defined, 0 otherwise. |
    | hsv2rgb(h,s,v)              | h,s,v ∈ \[0:1\] | 24bit RGB color value.                                   |
    | palette(z)                  | double          | RGB palette color mapped to z.                           |
    | stringcolumn(x)             | int or string   | content of column *x* as a string.                       |
    | timecolumn(N,"timeformat")  | int, string     | time data from column *N* during data input.             |
    | tm_hour(t)                  | time in sec     | the hour (0..23)                                         |
    | tm_mday(t)                  | time in sec     | the day of the month (1..31)                             |
    | tm_min(t)                   | time in sec     | the minute (0..59)                                       |
    | tm_mon(t)                   | time in sec     | the month (0..11)                                        |
    | tm_sec(t)                   | time in sec     | the second (0..59)                                       |
    | tm_wday(t)                  | time in sec     | the day of the week (Sun..Sat) as (0..6)                 |
    | tm_week(t)                  | time in sec     | week of year in ISO8601 "week date" system (1..53)       |
    | tm_yday(t)                  | time in sec     | the day of the year (0..365)                             |
    | tm_year(t)                  | time in sec     | the year                                                 |
    | time(x)                     | any             | the current system time in seconds                       |
    | valid(x)                    | int             | test validity of column(*x*) during datafile manip.      |
    | value("name")               | string          | returns the value of the named variable.                 |
    | voxel(x,y,z)                | real            | value of the active grid voxel containing point (x,y,z)  |
- name: Functions
  id: plot#SECTION040186000000000000000
  summary: Built-in or user-defined functions can be displayed by the plot and splot commands in addition to, or instead of, data read from a file
  belongs_to: Plot
  description: |-
    ## Functions

    Built-in or user-defined functions can be displayed by the **plot** and **splot** commands in addition to, or instead of, data read from a file. The requested function is evaluated by sampling at regular intervals spanning the independent axis range\[s\]. See **[set samples](set_show#set_samples)** and **[set isosamples](set_show#set_isosamples)**. Example:

        approx(ang) = ang - ang**3 / (3*2)
        plot sin(x) title "sin(x)", approx(x) title "approximation"

    To set a default plot style for functions, see **[set style function](set_show#set_style_function)**. For information on built-in functions, see **[expressions functions](expressions#expressions_functions)**. For information on defining your own functions, see **[user-defined](expressions#user-defined)**.
- name: Functions
  id: set_show#SECTION0402930000000000000000
  summary: The show functions command lists all user-defined functions and their definitions
  belongs_to: Set-show
  description: |-
    ## Functions

    The **show functions** command lists all user-defined functions and their definitions.

    Syntax:

        show functions

    For information about the definition and usage of functions in **gnuplot**, please see **[expressions](expressions#expressions)**. See also [splines as user defined functions (spline.dem) ](http://www.gnuplot.info/demo/spline.html)

    and [use of functions and complex variables for airfoils (airfoil.dem). ](http://www.gnuplot.info/demo/airfoil.html)
- name: Functions Counting and extracting words
  id: expressions#SECTION020163400000000000000
  summary: word("string",n) returns the nth word in string
  belongs_to: Expressions
  description: |-
    ### Counting and extracting words

    **word("string",n)** returns the nth word in string. For example, **word("one two three",2)** returns the string "two".

    **words("string")** returns the number of words in string. For example, **words(" a b c d")** returns 4.

    The **word** and **words** functions provide limited support for quoted strings, both single and double quotes can be used:

        print words("\"double quotes\" or 'single quotes'")   # 3

    A starting quote must either be preceded by a white space, or start the string. This means that apostrophes in the middle or at the end of words are considered as parts of the respective word:

        print words("Alexis' phone doesn't work") # 4

    Escaping quote characters is not supported. If you want to keep certain quotes, the respective section must be surrounded by the other kind of quotes:

        s = "Keep \"'single quotes'\" or '\"double quotes\"'"
        print word(s, 2) # 'single quotes'
        print word(s, 4) # "double quotes"

    Note, that in this last example the escaped quotes are necessary only for the string definition.

    **trim(" padded string ")** returns the original string stripped of leading and trailing whitespace. This is useful for string comparisons of input data fields that may contain extra whitespace. For example

        plot FOO using 1:( trim(strcol(3)) eq "A" ? $2 : NaN )
- name: Functions Elliptic integrals
  id: expressions#SECTION020163100000000000000
  summary: The EllipticK(k) function returns the complete elliptic integral of the first kind, i.e
  belongs_to: Expressions
  description: |-
    ### Elliptic integrals

    The **EllipticK(k)** function returns the complete elliptic integral of the first kind, i.e. the definite integral between 0 and pi/2 of the function **(1-(k\*sin(p))\*\*2)\*\*(-0.5)**. The domain of **k** is -1 to 1 (exclusive).

    The **EllipticE(k)** function returns the complete elliptic integral of the second kind, i.e. the definite integral between 0 and pi/2 of the function **(1-(k\*sin(p))\*\*2)\*\*0.5**. The domain of **k** is -1 to 1 (inclusive).

    The **EllipticPi(n,k)** function returns the complete elliptic integral of the third kind, i.e. the definite integral between 0 and pi/2 of the function **(1-(k\*sin(p))\*\*2)\*\*(-0.5)/(1-n\*sin(p)\*\*2)**. The parameter **n** must be less than 1, while **k** must lie between -1 and 1 (exclusive). Note that by definition EllipticPi(0,k) == EllipticK(k) for all possible values of **k**.
- name: Functions Random number generator
  id: expressions#SECTION020163200000000000000
  summary: The function rand() produces a sequence of pseudo-random numbers between 0 and 1 using an algorithm from P
  belongs_to: Expressions
  description: |-
    ### Random number generator

    The function **rand()** produces a sequence of pseudo-random numbers between 0 and 1 using an algorithm from P. L'Ecuyer and S. Cote, "Implementing a random number package with splitting facilities", ACM Transactions on Mathematical Software, 17:98-111 (1991).

        rand(0)     returns a pseudo random number in the open interval (0:1)
                    generated from the current value of two internal
                    32-bit seeds.
        rand(-1)    resets both seeds to a standard value.
        rand(x)     for integer 0 < x < 2^31-1 sets both internal seeds
                    to x.
        rand({x,y}) for integer 0 < x,y < 2^31-1 sets seed1 to x and
                    seed2 to y.
- name: Functions Value
  id: expressions#SECTION020163300000000000000
  summary: B = value("A") is effectively the same as B = A, where A is the name of a user-defined variable
  belongs_to: Expressions
  description: |-
    ### Value

    B = value("A") is effectively the same as B = A, where A is the name of a user-defined variable. This is useful when the name of the variable is itself held in a string variable. See **[user-defined variables](expressions#user-defined_variables)**. It also allows you to read the name of a variable from a data file. If the argument is a numerical expression, value() returns the value of that expression. If the argument is a string that does not correspond to a currently defined variable, value() returns NaN.
- name: Ggi
  id: complete_list_terminals#SECTION050123000000000000000
  summary: Legacy terminal driver for the GGI (General Graphics Interface) project
  description: |-
    ## Ggi

    Legacy terminal driver for the GGI (General Graphics Interface) project. Syntax:

        set terminal ggi [acceleration <integer>] [[mode] {mode}]

    In X the window cannot be resized using window manager handles, but the mode can be given with the mode option, e.g.:

        - V1024x768
        - V800x600
        - V640x480
        - V320x200

    Please refer to the ggi documentation for other modes. The 'mode' keyword is optional. It is recommended to select the target by environment variables as explained in the libggi manual page. To get DGA on X, you should for example

        bash> export GGI_DISPLAY=DGA
        csh>  setenv GGI_DISPLAY DGA

    'acceleration' is only used for targets which report relative pointer motion events (e.g. DGA) and is a strictly positive integer multiplication factor for the relative distances. The default for acceleration is 7.

    Examples:

        set term ggi acc 10
        set term ggi acc 1 mode V1024x768
        set term ggi V1024x768
- name: Gif
  id: complete_list_terminals#SECTION050124000000000000000
  summary: PNG, JPEG and GIF images are created using the external library libgd
  description: "## Gif\n\nSyntax:\n\n    set terminal gif \n           {{no}enhanced}\n           {{no}transparent} {rounded|butt}\n           {linewidth <lw>} {dashlength <dl>}\n           {tiny | small | medium | large | giant}\n           {font \"<face> {,<pointsize>}\"} {fontscale <scale>}\n           {size <x>,<y>} {{no}crop}\n           {background <rgb_color>}\n           {animate {delay <d>} {loop <n>} {optimize}}\n\nPNG, JPEG and GIF images are created using the external library libgd. GIF plots may be viewed interactively by piping the output to the 'display' program from the ImageMagick package as follows:\n\n    set term gif\n    set output '| display gif:-'\n\nYou can view the output from successive plot commands interactively by typing \\<space\\> in the display window. To save the current plot to a file, left click in the display window and choose **save**.\n\n**transparent** instructs the driver to make the background color transparent. Default is **notransparent**.\n\nThe **linewidth** and **dashlength** options are scaling factors that affect all lines drawn, i.e. they are multiplied by values requested in various drawing commands.\n\n**butt** instructs the driver to use a line drawing method that does not overshoot the desired end point of a line. This setting is only applicable for line widths greater than 1. This setting is most useful when drawing horizontal or vertical lines. Default is **rounded**.\n\nThe output plot size \\<x,y\\> is given in pixels — it defaults to 640x480. Please see additional information under **[canvas](canvas_size#canvas)** and **[set size](set_show#set_size)**. Blank space at the edges of the finished plot may be trimmed using the **crop** option, resulting in a smaller final image size. Default is **nocrop**."
- name: Gif Animate
  id: complete_list_terminals#SECTION050124100000000000000
  summary: The gif terminal animate option creates a single gif file containing multiple frames
  description: |-
    ### Animate

        set term gif animate {delay <d>} {loop <n>} {{no}optimize}}

    The gif terminal **animate** option creates a single gif file containing multiple frames. The delay between display of successive frames may be specified in units of 1/100 second (default 5), but this value may or may not be honored accurately by a program used to view the animation later. The number of animation loops during playback can be specified, with the default of 0 meaning unlimited looping. Again this value may or may not be honored by the program later used for viewing. An animation sequence is terminated by the next **set output** or **set term** command.

    The **optimize** option \[DEPRECATED\] is passed to the gd library when the output file is opened. It has two effects on the animation.

    1\) A single color map is used for the entire animation. This requires that all colors used in any frame of the animation are already defined in the first frame.

    2\) If possible, only the portions of a frame that differ from the previous frame are stored in the animation file. This space saving may not be possible if the animation uses transparency.

    Both of these optimizations are intended to produce a smaller output file, but the decrease in size is probably only significant for long animations. Caveat: The implementation of optimization in libgd is known to be buggy. Therefore use of this option in gnuplot is not recommended.

    Example showing continuous rotation:

        set term gif animate loop 0
        set output 'rotating_surface.gif'
        do for [ang=1:359] {
            set view 60, ang
            splot f(x,y) with pm3d
        }
        unset output
- name: Gif Fonts
  id: complete_list_terminals#SECTION050124200000000000000
  summary: The details of font selection are complicated
  description: |-
    ### Fonts

    The details of font selection are complicated. For more information please see the separate section under **[fonts gd](fonts#fonts_gd)**.

    Examples:

        set terminal gif medium noenhanced size 640,480 background '#ffffff'

    Use the medium size built-in non-scaleable, non-rotatable font. Enhanced text mode will not work with this font. Use white (24 bit RGB in hexadecimal) for the non-transparent background.

        set terminal gif font arial 14

    Searches for a font with face name 'arial' and sets the font size to 14pt.
- name: Glossary
  id: glossary
  summary: Throughout this document an attempt has been made to maintain consistency of nomenclature
  description: "# Glossary\n\nThroughout this document an attempt has been made to maintain consistency of nomenclature. This cannot be wholly successful because as **gnuplot** has evolved over time, certain command and keyword names have been adopted that preclude such perfection. This section contains explanations of the way some of these terms are used.\n\nA \"page\" or \"screen\" or \"canvas\" is the entire area addressable by **gnuplot**. On a desktop it is a full window; on a plotter, it is a single sheet of paper; in svga mode it is the full monitor screen.\n\nA screen may contain one or more \"plots\". A plot is defined by an abscissa and an ordinate, although these need not actually appear on it, as well as the margins and any text written therein.\n\nA plot contains one \"graph\". A graph is defined by an abscissa and an ordinate, although these need not actually appear on it.\n\nA graph may contain one or more \"lines\". A line is a single function or data set. \"Line\" is also a plotting style. The word will also be used in sense \"a line of text\". Presumably the context will remove any ambiguity.\n\nThe lines on a graph may have individual names. These may be listed together with a sample of the plotting style used to represent them in the \"key\", sometimes also called the \"legend\".\n\nThe word \"title\" occurs with multiple meanings in **gnuplot**. In this document, it will always be preceded by the adjective \"plot\", \"line\", or \"key\" to differentiate among them. A 2D graph may have up to four labeled **axes**. The names of the four axes are \"x\" for the axis along the bottom border of the plot, \"y\" for the axis along the left border, \"x2\" for the top border, and \"y2\" for the right border. See **[axes](plot#axes)**.\n\nA 3D graph may have up to three labeled **axes** – \"x\", \"y\" and \"z\". It is not possible to say where on the graph any particular axis will fall because you can change the direction from which the graph is seen with **set view**.\n\nWhen discussing data files, the term \"record\" will be resurrected and used to denote a single line of text in the file, that is, the characters between newline or end-of-record characters. A \"point\" is the datum extracted from a single record. A \"block\" of data is a set of consecutive records delimited by blank records. A line, when referred to in the context of a data file, is a subset of a block. Note that the term \"data block\" may also be used to refer to a named block inline data (see **[datablocks](inline_data_datablocks#datablocks)**).\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Gnuplot-defined variables
  id: expressions#SECTION020166000000000000000
  summary: Gnuplot maintains a number of read-only variables that reflect the current internal state of the program and the most recent plot
  belongs_to: Expressions
  description: |-
    ## Gnuplot-defined variables

    Gnuplot maintains a number of read-only variables that reflect the current internal state of the program and the most recent plot. These variables begin with the prefix "GPVAL\_". Examples include GPVAL_TERM, GPVAL_X_MIN, GPVAL_X_MAX, GPVAL_Y_MIN. Type **show variables all** to display the complete list and current values. Values related to axes parameters (ranges, log base) are values used during the last plot, not those currently **set**.

    Example: To calculate the fractional screen coordinates of the point \[X,Y\]

        GRAPH_X = (X - GPVAL_X_MIN) / (GPVAL_X_MAX - GPVAL_X_MIN)
        GRAPH_Y = (Y - GPVAL_Y_MIN) / (GPVAL_Y_MAX - GPVAL_Y_MIN)
        SCREEN_X = GPVAL_TERM_XMIN + GRAPH_X * (GPVAL_TERM_XMAX - GPVAL_TERM_XMIN)
        SCREEN_Y = GPVAL_TERM_YMIN + GRAPH_Y * (GPVAL_TERM_YMAX - GPVAL_TERM_YMIN)
        FRAC_X = SCREEN_X * GPVAL_TERM_SCALE / GPVAL_TERM_XSIZE
        FRAC_Y = SCREEN_Y * GPVAL_TERM_SCALE / GPVAL_TERM_YSIZE

    The read-only variable GPVAL_ERRNO is set to a non-zero value if any gnuplot command terminates early due to an error. The most recent error message is stored in the string variable GPVAL_ERRMSG. Both GPVAL_ERRNO and GPVAL_ERRMSG can be cleared using the command **reset errors**.

    Interactive terminals with **mouse** functionality maintain read-only variables with the prefix "MOUSE\_". See **[mouse variables](mouse_input#mouse_variables)** for details.

    The **fit** mechanism uses several variables with names that begin "FIT\_". It is safest to avoid using such names. When using **set fit errorvariables**, the error for each fitted parameter will be stored in a variable named like the parameter, but with "\_err" appended. See the documentation on **[fit](fit#fit)** and **[set fit](set_show#set_fit)** for details.

    See **[user-defined variables](expressions#user-defined_variables)**, **[reset errors](reset#reset_errors)**, **[mouse variables](mouse_input#mouse_variables)**, and **[fit](fit#fit)**.
- name: Gpic
  id: complete_list_terminals#SECTION050125000000000000000
  summary: The gpic terminal driver generates GPIC graphs in the Free Software Foundations's "groff" package
  description: |-
    ## Gpic

    The **gpic** terminal driver generates GPIC graphs in the Free Software Foundations's "groff" package. The default size is 5 x 3 inches. The only option is the origin, which defaults to (0,0).

    Syntax:

        set terminal gpic {<x> <y>}

    where **x** and **y** are in inches.

    A simple graph can be formatted using

        groff -p -mpic -Tps file.pic > file.ps.

    The output from pic can be pipe-lined into eqn, so it is possible to put complex functions in a graph with the **set label** and **set {x/y}label** commands. For instance,

        set ylab '@space 0 int from 0 to x alpha ( t ) roman d t@'

    will label the y axis with a nice integral if formatted with the command:

        gpic filename.pic | geqn -d@@ -Tps | groff -m[macro-package] -Tps
            > filename.ps

    Figures made this way can be scaled to fit into a document. The pic language is easy to understand, so the graphs can be edited by hand if need be. All co-ordinates in the pic-file produced by **gnuplot** are given as x+gnuplotx and y+gnuploty. By default x and y are given the value 0. If this line is removed with an editor in a number of files, one can put several graphs in one figure like this (default size is 5.0x3.0 inches):

        .PS 8.0
        x=0;y=3
        copy "figa.pic"
        x=5;y=3
        copy "figb.pic"
        x=0;y=0
        copy "figc.pic"
        x=5;y=0
        copy "figd.pic"
        .PE

    This will produce an 8-inch-wide figure with four graphs in two rows on top of each other.

    One can also achieve the same thing by specifying x and y in the command

        set terminal gpic x y
- name: Gprintf
  id: set_show#SECTION0402928100000000000000
  summary: The string function gprintf("format",x) uses gnuplot's own format specifiers, as do the gnuplot commands set format, set timestamp, and others
  belongs_to: Set-show
  description: |-
    ### Gprintf

    The string function gprintf("format",x) uses gnuplot's own format specifiers, as do the gnuplot commands **set format**, **set timestamp**, and others. These format specifiers are not the same as those used by the standard C-language routine sprintf(). gprintf() accepts only a single variable to be formatted. Gnuplot also provides an sprintf("format",x1,x2,...) routine if you prefer. For a list of gnuplot's format options, see **[format specifiers](set_show#format_specifiers)**.
- name: Grass
  id: complete_list_terminals#SECTION050126000000000000000
  summary: 'Note: legacy terminal'
  description: |-
    ## Grass

    Note: legacy terminal. The **grass** terminal driver gives **gnuplot** capabilities to users of the GRASS geographic information system. Contact grassp-list@moon.cecer.army.mil for more information. Pages are written to the current frame of the GRASS Graphics Window. There are no options.
- name: Grid
  id: set_show#SECTION0402931000000000000000
  summary: The set grid command allows grid lines to be drawn on the plot
  belongs_to: Set-show
  description: |-
    ## Grid

    The **set grid** command allows grid lines to be drawn on the plot.

    Syntax:

        set grid {{no}{m}xtics} {{no}{m}ytics} {{no}{m}ztics}
                 {{no}{m}x2tics} {{no}{m}y2tics} {{no}{m}rtics}
                 {{no}{m}cbtics}
                 {polar {<angle>}}
                 {layerdefault | front | back}
                 {{no}vertical}
                 {<line-properties-major> {, <line-properties-minor>}}
        unset grid
        show grid

    The grid can be enabled and disabled for the major and/or minor tic marks on any axis, and the linetype and linewidth can be specified for major and minor grid lines, also via a predefined linestyle, as far as the active terminal driver supports this (see **[set style line](set_show#set_style_line)**).

    A polar grid can be drawn for 2D plots. This is the default action of **set grid** if the program is already in polar mode, but can be enabled explicitly by **set grid polar \<angle\> rtics** whether or not the program is in polar mode. Circles are drawn to intersect major and/or minor tics along the r axis, and radial lines are drawn with a spacing of \<angle\>. Tic marks around the perimeter are controlled by **set ttics**, but these do not produce radial grid lines.

    The pertinent tics must be enabled before **set grid** can draw them; **gnuplot** will quietly ignore instructions to draw grid lines at non-existent tics, but they will appear if the tics are subsequently enabled.

    If no linetype is specified for the minor gridlines, the same linetype as the major gridlines is used. The default polar angle is 30 degrees.

    If **front** is given, the grid is drawn on top of the graphed data. If **back** is given, the grid is drawn underneath the graphed data. Using **front** will prevent the grid from being obscured by dense data. The default setup, **layerdefault**, is equivalent to **back** for 2D plots. In 3D plots the default is to split up the grid and the graph box into two layers: one behind, the other in front of the plotted data and functions. Since **hidden3d** mode does its own sorting, it ignores all grid drawing order options and passes the grid lines through the hidden line removal machinery instead. These options actually affect not only the grid, but also the lines output by **set border** and the various ticmarks (see **[set xtics](set_show#set_xtics)**).

    In 3D plots grid lines at x- and y- axis tic positions are by default drawn only on the base plane parallel to z=0. The **vertical** keyword activates drawing grid lines in the xz and yz planes also, running from zmin to zmax.

    Z grid lines are drawn on the bottom of the plot. This looks better if a partial box is drawn around the plot — see **[set border](set_show#set_border)**.
- name: Grid data
  id: splot#SECTION040312000000000000000
  summary: The 3D routines are designed for points in a grid format, with one sample, datapoint, at each mesh intersection; the datapoints may originate from either evaluating a function, see set isosamples, or reading a datafile, see splot datafile
  belongs_to: Splot
  description: |-
    ## Grid data

    The 3D routines are designed for points in a grid format, with one sample, datapoint, at each mesh intersection; the datapoints may originate from either evaluating a function, see **[set isosamples](set_show#set_isosamples)**, or reading a datafile, see **[splot datafile](splot#splot_datafile)**. The term "isoline" is applied to the mesh lines for both functions and data. Note that the mesh need not be rectangular in x and y, as it may be parameterized in u and v, see **[set isosamples](set_show#set_isosamples)**.

    However, **gnuplot** does not require that format. In the case of functions, 'samples' need not be equal to 'isosamples', i.e., not every x-isoline sample need intersect a y-isoline. In the case of data files, if there are an equal number of scattered data points in each block, then "isolines" will connect the points in a block, and "cross-isolines" will connect the corresponding points in each block to generate a "surface". In either case, contour and hidden3d modes may give different plots than if the points were in the intended format. Scattered data can be converted to a {different} grid format with **set dgrid3d**.

    The contour code tests for z intensity along a line between a point on a y-isoline and the corresponding point in the next y-isoline. Thus a **splot** contour of a surface with samples on the x-isolines that do not coincide with a y-isoline intersection will ignore such samples. Try:

        set xrange [-pi/2:pi/2]; set yrange [-pi/2:pi/2]
        set style function lp
        set contour
        set isosamples 10,10; set samples 10,10;
        splot cos(x)*cos(y)
        set samples 4,10; replot
        set samples 10,4; replot
- name: Help
  id: help
  summary: The help command displays built-in help
  description: "# Help\n\nThe **help** command displays built-in help. To specify information on a particular topic use the syntax:\n\n    help {<topic>}\n\nIf \\<topic\\> is not specified, a short message is printed about **gnuplot**. After help for the requested topic is given, a menu of subtopics is given; help for a subtopic may be requested by typing its name, extending the help request. After that subtopic has been printed, the request may be extended again or you may go back one level to the previous topic. Eventually, the **gnuplot** command line will return.\n\nIf a question mark (?) is given as the topic, the list of topics currently available is printed on the screen.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Hidden3d
  id: set_show#SECTION0402932000000000000000
  summary: The set hidden3d command enables hidden line removal for surface plotting (see splot)
  belongs_to: Set-show
  description: |-
    ## Hidden3d

    The **set hidden3d** command enables hidden line removal for surface plotting (see **[splot](splot#splot)**). Some optional features of the underlying algorithm can also be controlled using this command.

    Syntax:

        set hidden3d {defaults} |
                     { {front|back}
                       {{offset <offset>} | {nooffset}}
                       {trianglepattern <bitpattern>}
                       {{undefined <level>} | {noundefined}}
                       {{no}altdiagonal}
                       {{no}bentover} }
        unset hidden3d
        show hidden3d

    In contrast to the usual display in gnuplot, hidden line removal actually treats the given function or data grids as real surfaces that can't be seen through, so plot elements behind the surface will be hidden by it. For this to work, the surface needs to have 'grid structure' (see **[splot datafile](splot#splot_datafile)** about this), and it has to be drawn **with lines** or **with linespoints**.

    When **hidden3d** is set, both the hidden portion of the surface and possibly its contours drawn on the base (see **[set contour](set_show#set_contour)**) as well as the grid will be hidden. Each surface has its hidden parts removed with respect to itself and to other surfaces, if more than one surface is plotted. Contours drawn on the surface (**set contour surface**) don't work.

    **hidden3d** also affects 3D plotting styles **points**, **labels**, **vectors**, and **impulses** even if no surface is present in the graph. Unobscured portions of each vector are drawn as line segments (no arrowheads). Individual plots within the graph may be explicitly excluded from this processing by appending the extra option **nohidden3d** to the **with** specifier.

    Hidden3d does not affect solid surfaces drawn using the pm3d mode. To achieve a similar effect purely for pm3d surfaces, use instead **set pm3d depthorder**. To mix pm3d surfaces with normal **hidden3d** processing, use the option **set hidden3d front** to force all elements included in hidden3d processing to be drawn after any remaining plot elements, including the pm3d surface.

    Functions are evaluated at isoline intersections. The algorithm interpolates linearly between function points or data points when determining the visible line segments. This means that the appearance of a function may be different when plotted with **hidden3d** than when plotted with **nohidden3d** because in the latter case functions are evaluated at each sample. Please see **[set samples](set_show#set_samples)** and **[set isosamples](set_show#set_isosamples)** for discussion of the difference.

    The algorithm used to remove the hidden parts of the surfaces has some additional features controllable by this command. Specifying **defaults** will set them all to their default settings, as detailed below. If **defaults** is not given, only explicitly specified options will be influenced: all others will keep their previous values, so you can turn on/off hidden line removal via **set {no}hidden3d**, without modifying the set of options you chose.

    The first option, **offset**, influences the linetype used for lines on the 'back' side. Normally, they are drawn in a linetype one index number higher than the one used for the front, to make the two sides of the surface distinguishable. You can specify a different linetype offset to add instead of the default 1, by **offset \<offset\>**. Option **nooffset** stands for **offset 0**, making the two sides of the surface use the same linetype.

    Next comes the option **trianglepattern \<bitpattern\>**. \<bitpattern\> must be a number between 0 and 7, interpreted as a bit pattern. Each bit determines the visibility of one edge of the triangles each surface is split up into. Bit 0 is for the 'horizontal' edges of the grid, Bit 1 for the 'vertical' ones, and Bit 2 for the diagonals that split each cell of the original grid into two triangles. The default pattern is 3, making all horizontal and vertical lines visible, but not the diagonals. You may want to choose 7 to see those diagonals as well.

    The **undefined \<level\>** option lets you decide what the algorithm is to do with data points that are undefined (missing data, or undefined function values), or exceed the given x-, y- or z-ranges. Such points can either be plotted nevertheless, or taken out of the input data set. All surface elements touching a point that is taken out will be taken out as well, thus creating a hole in the surface. If \<level\> = 3, equivalent to option **noundefined**, no points will be thrown away at all. This may produce all kinds of problems elsewhere, so you should avoid this. \<level\> = 2 will throw away undefined points, but keep the out-of-range ones. \<level\> = 1, the default, will get rid of out-of-range points as well.

    By specifying **noaltdiagonal**, you can override the default handling of a special case can occur if **undefined** is active (i.e. \<level\> is not 3). Each cell of the grid-structured input surface will be divided in two triangles along one of its diagonals. Normally, all these diagonals have the same orientation relative to the grid. If exactly one of the four cell corners is excluded by the **undefined** handler, and this is on the usual diagonal, both triangles will be excluded. However if the default setting of **altdiagonal** is active, the other diagonal will be chosen for this cell instead, minimizing the size of the hole in the surface.

    The **bentover** option controls what happens to another special case, this time in conjunction with the **trianglepattern**. For rather crumply surfaces, it can happen that the two triangles a surface cell is divided into are seen from opposite sides (i.e. the original quadrangle is 'bent over'), as illustrated in the following ASCII art:

                                                                  C----B
        original quadrangle:  A--B      displayed quadrangle:     |\   |
          ("set view 0,0")    | /|    ("set view 75,75" perhaps)  | \  |
                              |/ |                                |  \ |
                              C--D                                |   \|
                                                                  A    D

    If the diagonal edges of the surface cells aren't generally made visible by bit 2 of the \<bitpattern\> there, the edge CB above wouldn't be drawn at all, normally, making the resulting display hard to understand. Therefore, the default option of **bentover** will turn it visible in this case. If you don't want that, you may choose **nobentover** instead. See also [hidden line removal demo (hidden.dem) ](http://www.gnuplot.info/demo/hidden.html)

    and [complex hidden line demo (singulr.dem). ](http://www.gnuplot.info/demo/singulr.html)
- name: Histeps
  id: histeps
  summary: The histeps style is only relevant to 2D plotting
  description: "# Histeps\n\nThe **histeps** style is only relevant to 2D plotting. It is intended for plotting histograms. Y-values are assumed to be centered at the x-values; the point at x1 is represented as a horizontal line from ((x0+x1)/2,y1) to ((x1+x2)/2,y1). The lines representing the end points are extended so that the step is centered on at x. Adjacent points are connected by a vertical line at their average x, that is, from ((x1+x2)/2,y1) to ((x1+x2)/2,y2). The input column requires are the same as for plot styles **lines** and **points**.\n\nIf **autoscale** is in effect, it selects the xrange from the data rather than the steps, so the end points will appear only half as wide as the others. See also [steps demo. ](http://www.gnuplot.info/demo/steps.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Histograms
  id: histograms
  summary: The histograms style is only relevant to 2D plotting
  description: "# Histograms\n\nThe **histograms** style is only relevant to 2D plotting. It produces a bar chart from a sequence of parallel data columns. Each element of the **plot** command must specify a single input data source (e.g. one column of the input file), possibly with associated tic values or key titles. Four styles of histogram layout are currently supported.\n\n    set style histogram clustered {gap <gapsize>}\n    set style histogram errorbars {gap <gapsize>} {<linewidth>}\n    set style histogram rowstacked\n    set style histogram columnstacked\n    set style histogram {title font \"name,size\" tc <colorspec>}\n\nThe default style corresponds to **set style histogram clustered gap 2**. In this style, each set of parallel data values is collected into a group of boxes clustered at the x-axis coordinate corresponding to their sequential position (row \\#) in the selected datafile columns. Thus if \\<n\\> datacolumns are selected, the first cluster is centered about x=1, and contains \\<n\\> boxes whose heights are taken from the first entry in the corresponding \\<n\\> data columns. This is followed by a gap and then a second cluster of boxes centered about x=2 corresponding to the second entry in the respective data columns, and so on. The default gap width of 2 indicates that the empty space between clusters is equivalent to the width of 2 boxes. All boxes derived from any one column are given the same fill color and/or pattern (see **[set style fill](set_show#set_style_fill)**).\n\nEach cluster of boxes is derived from a single row of the input data file. It is common in such input files that the first element of each row is a label. Labels from this column may be placed along the x-axis underneath the appropriate cluster of boxes with the **xticlabels** option to **using**.\n\nThe **errorbars** style is very similar to the **clustered** style, except that it requires additional columns of input for each entry. The first column holds the height (y value) of that box, exactly as for the **clustered** style.\n\n    2 columns:        y yerr          bar extends from y-yerr to y+err\n    3 columns:        y ymin ymax     bar extends from ymin to ymax\n\nThe appearance of the error bars is controlled by the current value of **set errorbars** and by the optional \\<linewidth\\> specification.\n\nTwo styles of stacked histogram are supported, chosen by the command **set style histogram {rowstacked\\|columnstacked}**. In these styles the data values from the selected columns are collected into stacks of boxes. Positive values stack upwards from y=0; negative values stack downwards. Mixed positive and negative values will produce both an upward stack and a downward stack. The default stacking mode is **rowstacked**.\n\nThe **rowstacked** style places a box resting on the x-axis for each data value in the first selected column; the first data value results in a box a x=1, the second at x=2, and so on. Boxes corresponding to the second and subsequent data columns are layered on top of these, resulting in a stack of boxes at x=1 representing the first data value from each column, a stack of boxes at x=2 representing the second data value from each column, and so on. All boxes derived from any one column are given the same fill color and/or pattern (see **[set style fill](set_show#set_style_fill)**).\n\nThe **columnstacked** style is similar, except that each stack of boxes is built up from a single data column. Each data value from the first specified column yields a box in the stack at x=1, each data value from the second specified column yields a box in the stack at x=2, and so on. In this style the color of each box is taken from the row number, rather than the column number, of the corresponding data field.\n\nBox widths may be modified using the **set boxwidth** command. Box fill styles may be set using the **set style fill** command.\n\nHistograms always use the x1 axis, but may use either y1 or y2. If a plot contains both histograms and other plot styles, the non-histogram plot elements may use either the x1 or the x2 axis.\n\nExamples: Suppose that the input file contains data values in columns 2, 4, 6, ... and error estimates in columns 3, 5, 7, ... This example plots the values in columns 2 and 4 as a histogram of clustered boxes (the default style). Because we use iteration in the plot command, any number of data columns can be handled in a single command. See **[plot for](plot#plot_for)**.\n\n    set boxwidth 0.9 relative\n    set style data histograms\n    set style histogram cluster\n    set style fill solid 1.0 border lt -1\n    plot for [COL=2:4:2] 'file.dat' using COL\n\nThis will produce a plot with clusters of two boxes (vertical bars) centered at each integral value on the x axis. If the first column of the input file contains labels, they may be placed along the x-axis using the variant command\n\n    plot for [COL=2:4:2] 'file.dat' using COL:xticlabels(1)\n\nIf the file contains both magnitude and range information for each value, then error bars can be added to the plot. The following commands will add error bars extending from (y-\\<error\\>) to (y+\\<error\\>), capped by horizontal bar ends drawn the same width as the box itself. The error bars and bar ends are drawn with linewidth 2, using the border linetype from the current fill style.\n\n    set errorbars fullwidth\n    set style fill solid 1 border lt -1\n    set style histogram errorbars gap 2 lw 2\n    plot for [COL=2:4:2] 'file.dat' using COL:COL+1\n\nThis shows how to plot the same data as a rowstacked histogram. Just to be different, this example lists the separate columns explicitly rather than using iteration.\n\n    set style histogram rowstacked\n    plot 'file.dat' using 2, ” using 4:xtic(1)\n\nThis will produce a plot in which each vertical bar corresponds to one row of data. Each vertical bar contains a stack of two segments, corresponding in height to the values found in columns 2 and 4 of the datafile.\n\nFinally, the commands\n\n    set style histogram columnstacked\n    plot 'file.dat' using 2, ” using 4\n\nwill produce two vertical stacks, one for each column of data. The stack at x=1 will contain a box for each entry in column 2 of the datafile. The stack at x=2 will contain a box for each parallel entry in column 4 of the datafile.\n\nBecause this interchanges gnuplot's usual interpretation of input rows and columns, the specification of key titles and x-axis tic labels must also be modified accordingly. See the comments given below.\n\n    set style histogram columnstacked\n    plot ” u 5:key(1)            # uses first column to generate key titles\n    plot ” u 5 title columnhead  # uses first row to generate xtic labels\n\nNote that the two examples just given present exactly the same data values, but in different formats.\n\n## Newhistogram\n\nSyntax:\n\n    newhistogram {\"<title>\" {font \"name,size\"} {tc <colorspec>}}\n                 {lt <linetype>} {fs <fillstyle>} {at <x-coord>}\n\nMore than one set of histograms can appear in a single plot. In this case you can force a gap between them, and a separate label for each set, by using the **newhistogram** command. For example\n\n    set style histogram  cluster\n    plot newhistogram \"Set A\", 'a' using 1, ” using 2, ” using 3, \\\n         newhistogram \"Set B\", 'b' using 1, ” using 2, ” using 3\n\nThe labels \"Set A\" and \"Set B\" will appear beneath the respective sets of histograms, under the overall x axis label.\n\nThe newhistogram command can also be used to force histogram coloring to begin with a specific color (linetype). By default colors will continue to increment successively even across histogram boundaries. Here is an example using the same coloring for multiple histograms\n\n    plot newhistogram \"Set A\" lt 4, 'a' using 1, ” using 2, ” using 3, \\\n         newhistogram \"Set B\" lt 4, 'b' using 1, ” using 2, ” using 3\n\nSimilarly you can force the next histogram to begin with a specified fillstyle. If the fillstyle is set to **pattern**, then the pattern used for filling will be incremented automatically.\n\nThe **at \\<x-coord\\>** option sets the x coordinate position of the following histogram to \\<x-coord\\>. For example\n\n    set style histogram cluster\n    set style data histogram\n    set style fill solid 1.0 border -1\n    set xtic 1 offset character 0,0.3\n    plot newhistogram \"Set A\", \\\n         'file.dat' u 1 t 1, ” u 2 t 2, \\\n         newhistogram \"Set B\" at 8, \\\n         'file.dat' u 2 t 2, ” u 2 t 2\n\nwill position the second histogram to start at x=8.\n\n## Automated iteration over multiple columns\n\nIf you want to create a histogram from many columns of data in a single file, it is very convenient to use the plot iteration feature. See **[plot for](plot#plot_for)**. For example, to create stacked histograms of the data in columns 3 through 8\n\n    set style histogram columnstacked\n    plot for [i=3:8] \"datafile\" using i title columnhead\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Histograms Automated iteration over multiple columns
  id: histograms#SECTION030162000000000000000
  summary: If you want to create a histogram from many columns of data in a single file, it is very convenient to use the plot iteration feature
  belongs_to: Histograms
  description: "## Automated iteration over multiple columns\n\nIf you want to create a histogram from many columns of data in a single file, it is very convenient to use the plot iteration feature. See **[plot for](plot#plot_for)**. For example, to create stacked histograms of the data in columns 3 through 8\n\n    set style histogram columnstacked\n    plot for [i=3:8] \"datafile\" using i title columnhead\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Histograms Newhistogram
  id: histograms#SECTION030161000000000000000
  summary: More than one set of histograms can appear in a single plot
  belongs_to: Histograms
  description: |-
    ## Newhistogram

    Syntax:

        newhistogram {"<title>" {font "name,size"} {tc <colorspec>}}
                     {lt <linetype>} {fs <fillstyle>} {at <x-coord>}

    More than one set of histograms can appear in a single plot. In this case you can force a gap between them, and a separate label for each set, by using the **newhistogram** command. For example

        set style histogram  cluster
        plot newhistogram "Set A", 'a' using 1, ” using 2, ” using 3, \
             newhistogram "Set B", 'b' using 1, ” using 2, ” using 3

    The labels "Set A" and "Set B" will appear beneath the respective sets of histograms, under the overall x axis label.

    The newhistogram command can also be used to force histogram coloring to begin with a specific color (linetype). By default colors will continue to increment successively even across histogram boundaries. Here is an example using the same coloring for multiple histograms

        plot newhistogram "Set A" lt 4, 'a' using 1, ” using 2, ” using 3, \
             newhistogram "Set B" lt 4, 'b' using 1, ” using 2, ” using 3

    Similarly you can force the next histogram to begin with a specified fillstyle. If the fillstyle is set to **pattern**, then the pattern used for filling will be incremented automatically.

    The **at \<x-coord\>** option sets the x coordinate position of the following histogram to \<x-coord\>. For example

        set style histogram cluster
        set style data histogram
        set style fill solid 1.0 border -1
        set xtic 1 offset character 0,0.3
        plot newhistogram "Set A", \
             'file.dat' u 1 t 1, ” u 2 t 2, \
             newhistogram "Set B" at 8, \
             'file.dat' u 2 t 2, ” u 2 t 2

    will position the second histogram to start at x=8.
- name: History
  id: history
  summary: The history command prints or saves previous commands in the history list, or reexecutes a previous entry in the list
  description: "# History\n\nThe **history** command prints or saves previous commands in the history list, or reexecutes a previous entry in the list. To modify the behavior of this command, see **[set history](set_show#set_history)**.\n\nInput lines with **history** as their first command are not stored in the command history.\n\nExamples:\n\n    history               # show the complete history\n    history 5             # show last 5 entries in the history\n    history quiet 5       # show last 5 entries without entry numbers\n    history \"hist.gp\"     # write the complete history to file hist.gp\n    history \"hist.gp\" append # append the complete history to file hist.gp\n    history 10 \"hist.gp\"  # write last 10 commands to file hist.gp\n    history 10 \"|head -5 >>diary.gp\" # write 5 history commands using pipe\n    history ?load         # show all history entries starting with \"load\"\n    history ?\"set c\"      # like above, several words enclosed in quotes\n    hist !\"set xr\"        # like above, several words enclosed in quotes\n    hist !55              # reexecute the command at history entry 55\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: History
  id: set_show#SECTION0402934000000000000000
  summary: When leaving gnuplot the value of history size limits the number of lines saved to the history file
  belongs_to: Set-show
  description: |-
    ## History

    Syntax:

        set history {size <N>} {quiet|numbers} {full|trim} {default}

    When leaving gnuplot the value of history size limits the number of lines saved to the history file. **set history size -1** allows an unlimited number of lines to be written to the history file.

    By default the **history** command prints a line number in front of each command. **history quiet** suppresses the number for this command only. **set history quiet** suppresses numbers for all future **history** commands.

    The **trim** option reduces the number of duplicate lines in the history list by removing earlier instances of the current command.

    Default settings: **set history size 500 numbers trim**.
- name: Historysize
  id: set_show#SECTION0402933000000000000000
  summary: (Deprecated)
  belongs_to: Set-show
  description: |-
    ## Historysize

    (Deprecated). **set historysize N** is equivalent to **set history size N**. **unset historysize** is equivalent to **set history size -1**.
- name: Hp2623a
  id: complete_list_terminals#SECTION050127000000000000000
  summary: The hp2623a terminal driver supports the Hewlett Packard HP2623A
  description: |-
    ## Hp2623a

    The **hp2623a** terminal driver supports the Hewlett Packard HP2623A. It has no options.
- name: Hp2648
  id: complete_list_terminals#SECTION050128000000000000000
  summary: The hp2648 terminal driver supports the Hewlett Packard HP2647 and HP2648
  description: |-
    ## Hp2648

    The **hp2648** terminal driver supports the Hewlett Packard HP2647 and HP2648. It has no options.
- name: Hp500c
  id: complete_list_terminals#SECTION050129000000000000000
  summary: 'Note: only available if gnuplot is configured –with-bitmap-terminals'
  description: |-
    ## Hp500c

    Note: only available if gnuplot is configured –with-bitmap-terminals. The **hp500c** terminal driver supports the Hewlett Packard HP DeskJet 500c. It has options for resolution and compression.

    Syntax:

        set terminal hp500c {<res>} {<comp>}

    where **res** can be 75, 100, 150 or 300 dots per inch and **comp** can be "rle", or "tiff". Any other inputs are replaced by the defaults, which are 75 dpi and no compression. Rasterization at the higher resolutions may require a large amount of memory.
- name: Hpgl
  id: complete_list_terminals#SECTION050130000000000000000
  summary: The hpgl driver produces HPGL output for devices like the HP7475A plotter
  description: |-
    ## Hpgl

    The **hpgl** driver produces HPGL output for devices like the HP7475A plotter. There are two options which can be set: the number of pens and **eject**, which tells the plotter to eject a page when done. The default is to use 6 pens and not to eject the page when done.

    The international character sets ISO-8859-1 and CP850 are recognized via **set encoding iso_8859_1** or **set encoding cp850** (see **[set encoding](set_show#set_encoding)** for details).

    Syntax:

        set terminal hpgl {<number_of_pens>} {eject}

    The selection

        set terminal hpgl 8 eject

    is equivalent to the previous **hp7550** terminal, and the selection

        set terminal hpgl 4

    is equivalent to the previous **hp7580b** terminal. HPGL graphics can be imported by many software packages.
- name: Hpljii
  id: complete_list_terminals#SECTION050131000000000000000
  summary: 'Note: only available if gnuplot is configured –with-bitmap-terminals'
  description: |-
    ## Hpljii

    Note: only available if gnuplot is configured –with-bitmap-terminals. The **hpljii** terminal driver supports the HP Laserjet Series II printer. The **hpdj** driver supports the HP DeskJet 500 printer. These drivers allow a choice of resolutions.

    Syntax:

        set terminal hpljii | hpdj {<res>}

    where **res** may be 75, 100, 150 or 300 dots per inch; the default is 75. Rasterization at the higher resolutions may require a large amount of memory.

    The **hp500c** terminal is similar to **hpdj**; **hp500c** additionally supports color and compression.
- name: Hppj
  id: complete_list_terminals#SECTION050132000000000000000
  summary: 'Note: only available if gnuplot is configured –with-bitmap-terminals'
  description: |-
    ## Hppj

    Note: only available if gnuplot is configured –with-bitmap-terminals. The **hppj** terminal driver supports the HP PaintJet and HP3630 printers. The only option is the choice of font.

    Syntax:

        set terminal hppj {FNT5X9 | FNT9X17 | FNT13X25}

    with the middle-sized font (FNT9X17) being the default.
- name: If
  id: if
  summary: This version of gnuplot supports block-structured if/else statements
  description: "# If\n\nNew syntax:\n\n    if (<condition>) { <commands>;\n           <commands>\n           <commands>\n    } else {\n           <commands>\n    }\n\nOld syntax:\n\n    if (<condition>) <command-line> [; else if (<condition>) ...; else ...]\n\nThis version of gnuplot supports block-structured if/else statements. If the keyword **if** or **else** is immediately followed by an opening \"{\", then conditional execution applies to all statements, possibly on multiple input lines, until a matching \"}\" terminates the block. If commands may be nested.\n\nThe old single-line if/else syntax is still supported, but can not be mixed with the new block-structured syntax. See **[if-old](if#if-old)**.\n\n## If-old\n\nThrough gnuplot version 4.4, the scope of the if/else commands was limited to a single input line. Now a multi-line clause may be enclosed in curly brackets. The old syntax is still honored but cannot be used inside a bracketed clause.\n\nIf no opening \"{\" follows the **if** keyword, the command(s) in \\<command-line\\> will be executed if \\<condition\\> is true (non-zero) or skipped if \\<condition\\> is false (zero). Either case will consume commands on the input line until the end of the line or an occurrence of **else**. Note that use of **;** to allow multiple commands on the same line will *not* end the conditionalized commands.\n\nExamples:\n\n    pi=3\n    if (pi!=acos(-1)) print \"?Fixing pi!\"; pi=acos(-1); print pi\n\nwill display:\n\n    ?Fixing pi!\n    3.14159265358979\n\nbut\n\n    if (1==2) print \"Never see this\"; print \"Or this either\"\n\nwill not display anything.\n\nelse:\n\n    v=0\n    v=v+1; if (v%2) print \"2\" ; else if (v%3) print \"3\"; else print \"fred\"\n\n(repeat the last line repeatedly!)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: If-old
  id: if#SECTION040121000000000000000
  summary: Through gnuplot version 4.4, the scope of the if/else commands was limited to a single input line
  belongs_to: If
  description: "## If-old\n\nThrough gnuplot version 4.4, the scope of the if/else commands was limited to a single input line. Now a multi-line clause may be enclosed in curly brackets. The old syntax is still honored but cannot be used inside a bracketed clause.\n\nIf no opening \"{\" follows the **if** keyword, the command(s) in \\<command-line\\> will be executed if \\<condition\\> is true (non-zero) or skipped if \\<condition\\> is false (zero). Either case will consume commands on the input line until the end of the line or an occurrence of **else**. Note that use of **;** to allow multiple commands on the same line will *not* end the conditionalized commands.\n\nExamples:\n\n    pi=3\n    if (pi!=acos(-1)) print \"?Fixing pi!\"; pi=acos(-1); print pi\n\nwill display:\n\n    ?Fixing pi!\n    3.14159265358979\n\nbut\n\n    if (1==2) print \"Never see this\"; print \"Or this either\"\n\nwill not display anything.\n\nelse:\n\n    v=0\n    v=v+1; if (v%2) print \"2\" ; else if (v%3) print \"3\"; else print \"fred\"\n\n(repeat the last line repeatedly!)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Image
  id: image
  summary: The image, rgbimage, and rgbalpha plotting styles all project a uniformly sampled grid of data values onto a plane in either 2D or 3D
  description: "# Image\n\nThe **image**, **rgbimage**, and **rgbalpha** plotting styles all project a uniformly sampled grid of data values onto a plane in either 2D or 3D. The input data may be an actual bitmapped image, perhaps converted from a standard format such as PNG, or a simple array of numerical values.\n\nThis figure illustrates generation of a heat map from an array of scalar values. The current palette is used to map each value onto the color assigned to the corresponding pixel.\n\n    plot '-' matrix with image\n    5 4 3 1 0\n    2 2 0 0 1\n    0 0 0 1 0\n    0 1 2 4 3\n    e\n    e\n\nEach pixel (data point) of the input 2D image will become a rectangle or parallelipiped in the plot. The coordinates of each data point will determine the center of the parallelipiped. That is, an M x N set of data will form an image with M x N pixels. This is different from the pm3d plotting style, where an M x N set of data will form a surface of (M-1) x (N-1) elements. The scan directions for a binary image data grid can be further controlled by additional keywords. See **[binary keywords flipx](plot#binary_keywords_flipx)**, **[keywords center](plot#keywords_center)**, and **[keywords rotate](plot#keywords_rotate)**.\n\nImage data can be scaled to fill a particular rectangle within a 2D plot coordinate system by specifying the x and y extent of each pixel. See **[binary keywords dx](plot#binary_keywords_dx)** and **[dy](plot#dy)**. To generate the figure at the right, the same input image was placed multiple times, each with a specified dx, dy, and origin. The input PNG image of a building is 50x128 pixels. The tall building was drawn by mapping this using **dx=0.5 dy=1.5**. The short building used a mapping **dx=0.5 dy=0.35**.\n\nThe **image** style handles input pixels containing a grayscale or color palette value. Thus 2D plots (**plot** command) require 3 columns of data (x,y,value), while 3D plots (**splot** command) require 4 columns of data (x,y,z,value).\n\nThe **rgbimage** style handles input pixels that are described by three separate values for the red, green, and blue components. Thus 5D data (x,y,r,g,b) is needed for **plot** and 6D data (x,y,z,r,g,b) for **splot**. The individual red, green, and blue components are assumed to lie in the range \\[0:255\\]. This matches the convention used in PNG and JPEG files (see **[binary filetype](plot#binary_filetype)**). However some data files use an alternative convention in which RGB components are floating point values in the range \\[0:1\\]. To use the **rgbimage** style with such data, first use the command **set rgbmax 1.0**.\n\nThe **rgbalpha** style handles input pixels that contain alpha channel (transparency) information in addition to the red, green, and blue components. Thus 6D data (x,y,r,g,b,a) is needed for **plot** and 7D data (x,y,z,r,g,b,a) for **splot**. The r, g, b, and alpha components are assumed to lie in the range \\[0:255\\]. To plot data for which RGBA components are floating point values in the range \\[0:1\\], first use the command **set rgbmax 1.0**.\n\nIf only a single data column is provided for the color components of either rgbimage or rgbalpha plots, it is interpreted as containing 32 bit packed ARGB data using the convention that alpha=0 means opaque and alpha=255 means fully transparent. Note that this is backwards from the alpha convention if alpha is supplied in a separate column, but matches the ARGB packing convention for individual commands to set color. See **[colorspec](linetypes_colors_styles#colorspec)**.\n\n## Transparency\n\nThe **rgbalpha** plotting style assumes that each pixel of input data contains an alpha value in the range \\[0:255\\]. A pixel with alpha = 0 is purely transparent and does not alter the underlying contents of the plot. A pixel with alpha = 255 is purely opaque. All terminal types can handle these two extreme cases. A pixel with 0 \\< alpha \\< 255 is partially transparent. Terminal types that do not support partial transparency will round this value to 0 or 255.\n\n## Image pixels\n\nSome terminals use device- or library-specific optimizations to render image data within a rectangular 2D area. This sometimes produces undesirable output, e.g. bad clipping or scaling, missing edges. The **pixels** keyword tells gnuplot to use generic code that renders the image pixel-by-pixel instead. This rendering mode is slower and may result in much larger output files, but should produce a consistent rendered view on all terminals. Example:\n\n    plot 'data' with image pixels\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Image pixels
  id: image#SECTION030172000000000000000
  summary: Some terminals use device- or library-specific optimizations to render image data within a rectangular 2D area
  belongs_to: Image
  description: "## Image pixels\n\nSome terminals use device- or library-specific optimizations to render image data within a rectangular 2D area. This sometimes produces undesirable output, e.g. bad clipping or scaling, missing edges. The **pixels** keyword tells gnuplot to use generic code that renders the image pixel-by-pixel instead. This rendering mode is slower and may result in much larger output files, but should produce a consistent rendered view on all terminals. Example:\n\n    plot 'data' with image pixels\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Image Transparency
  id: image#SECTION030171000000000000000
  summary: The rgbalpha plotting style assumes that each pixel of input data contains an alpha value in the range [0:255]
  belongs_to: Image
  description: |-
    ## Transparency

    The **rgbalpha** plotting style assumes that each pixel of input data contains an alpha value in the range \[0:255\]. A pixel with alpha = 0 is purely transparent and does not alter the underlying contents of the plot. A pixel with alpha = 255 is purely opaque. All terminal types can handle these two extreme cases. A pixel with 0 \< alpha \< 255 is partially transparent. Terminal types that do not support partial transparency will round this value to 0 or 255.
- name: Imagen
  id: complete_list_terminals#SECTION050133000000000000000
  summary: The imagen terminal driver supports Imagen laser printers
  description: |-
    ## Imagen

    The **imagen** terminal driver supports Imagen laser printers. It is capable of placing multiple graphs on a single page.

    Syntax:

        set terminal imagen {<fontsize>} {portrait | landscape}
                            {[<horiz>,<vert>]}

    where **fontsize** defaults to 12 points and the layout defaults to **landscape**. **\<horiz\>** and **\<vert\>** are the number of graphs in the horizontal and vertical directions; these default to unity.

    Example:

        set terminal imagen portrait [2,3]

    puts six graphs on the page in three rows of two in portrait orientation.
- name: Import
  id: import
  summary: The import command associates a user-defined function name with a function exported by an external shared object
  description: "# Import\n\nThe **import** command associates a user-defined function name with a function exported by an external shared object. This constitutes a plugin mechanism that extends the set of functions available in gnuplot. See **[plugins](plugins#plugins)**.\n\nSyntax:\n\n    import func(x[,y,z,...]) from \"sharedobj[:symbol]\"\n\nExamples:\n\n    # make the function myfun, exported by \"mylib.so\" or \"mylib.dll\"\n    # available for plotting or numerical calculation in gnuplot\n    import myfun(x) from \"mylib\"\n    import myfun(x) from \"mylib:myfun\"    # same as above\n\n    # make the function theirfun, defined in \"theirlib.so\" or \"theirlib.dll\"\n    # available under a different name\n    import myfun(x,y,z) from \"theirlib:theirfun\"\n\nThe program extends the name given for the shared object by either \".so\" or \".dll\" depending on the operating system, and searches for it first as a full path name and then as a path relative to the current directory. The operating system itself may also search any directories in LD_LIBRARY_PATH or DYLD_LIBRARY_PATH.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Impulses
  id: impulses
  summary: The impulses style displays a vertical line from y=0 to the y value of each point (2D) or from z=0 to the z value of each point (3D)
  description: "# Impulses\n\nThe **impulses** style displays a vertical line from y=0 to the y value of each point (2D) or from z=0 to the z value of each point (3D). Note that the y or z values may be negative. Data from additional columns can be used to control the color of each impulse. To use this style effectively in 3D plots, it is useful to choose thick lines (linewidth \\> 1). This approximates a 3D bar chart.\n\n    1 column:   y\n    2 columns:  x  y     # line from [x,0] to [x,y]  (2D)\n    3 columns:  x  y  z  # line from [x,y,0] to [x,y,z] (3D)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Inline data and datablocks
  id: inline_data_datablocks
  summary: There are two mechanisms for embedding data into a stream of gnuplot commands
  description: "# Inline data and datablocks\n\nThere are two mechanisms for embedding data into a stream of gnuplot commands. If the special filename '-' appears in a plot command, then the lines immediately following the plot command are interpreted as inline data. See **[special-filenames](plot#special-filenames)**. Data provided in this way can only be used once, by the plot command it follows.\n\nThe second mechanism defines a named data block as a here-document. The named data is persistent and may be referred to by more than one plot command. Example:\n\n    $Mydata << EOD\n    11 22 33 first line of data\n    44 55 66 second line of data\n    # comments work just as in a data file\n    77 88 99\n    EOD\n    stats $Mydata using 1:3\n    plot $Mydata using 1:3 with points, $Mydata using 1:2 with impulses\n\nData block names must begin with a $ character, which distinguishes them from other types of persistent variables. The end-of-data delimiter (EOD in the example) may be any sequence of alphanumeric characters.\n\nThe storage associated with named data blocks can be released using **undefine** command. **undefine $\\*** frees all named data blocks at once.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Isosamples
  id: set_show#SECTION0402935000000000000000
  summary: The isoline density (grid) for plotting functions as surfaces may be changed by the set isosamples command
  belongs_to: Set-show
  description: |-
    ## Isosamples

    The isoline density (grid) for plotting functions as surfaces may be changed by the **set isosamples** command.

    Syntax:

        set isosamples <iso_1> {,<iso_2>}
        show isosamples

    Each function surface plot will have \<iso_1\> iso-u lines and \<iso_2\> iso-v lines. If you only specify \<iso_1\>, \<iso_2\> will be set to the same value as \<iso_1\>. By default, sampling is set to 10 isolines per u or v axis. A higher sampling rate will produce more accurate plots, but will take longer. These parameters have no effect on data file plotting.

    An isoline is a curve parameterized by one of the surface parameters while the other surface parameter is fixed. Isolines provide a simple means to display a surface. By fixing the u parameter of surface s(u,v), the iso-u lines of the form c(v) = s(u0,v) are produced, and by fixing the v parameter, the iso-v lines of the form c(u) = s(u,v0) are produced.

    When a function surface plot is being done without the removal of hidden lines, **set samples** controls the number of points sampled along each isoline; see **[set samples](set_show#set_samples)** and **[set hidden3d](set_show#set_hidden3d)**. The contour algorithm assumes that a function sample occurs at each isoline intersection, so change in **samples** as well as **isosamples** may be desired when changing the resolution of a function surface/contour.
- name: Isosurface
  id: isosurface
  summary: This 3D plot style requires a populated voxel grid (see set vgrid, vfill)
  description: "# Isosurface\n\nThis 3D plot style requires a populated voxel grid (see **[set vgrid](set_show#set_vgrid)**, **[vfill](vfill#vfill)**). Linear interpolation of voxel grid values is used to estimate fractional grid coordinates corresponding to the requested isolevel. These points are then used to generate a tessellated surface. The facets making up the surface are rendered as pm3d polygons, so the surface coloring, transparency, and border properties are controlled by **set pm3d**. In general the surface is easier to interpret visually if facets are given a thin border that is darker than the fill color. By default the tessellation uses a mixture of quadrangles and triangles. To use triangle only, see **[set isosurface](set_show#set_isosurface)**. Example:\n\n    set style fill solid 0.3\n    set pm3d depthorder border lc \"blue\" lw 0.2\n    splot $helix with isosurface level 10 fc \"cyan\"\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Isosurface
  id: set_show#SECTION0402936000000000000000
  summary: Surfaces plotted by the command splot $voxelgrid with isosurface are by default constructed from a mixture of quadrangles and triangles
  belongs_to: Set-show
  description: |-
    ## Isosurface

    Syntax:

        set isosurface {mixed|triangles}
        set isosurface {no}insidecolor <n>

    Surfaces plotted by the command **splot $voxelgrid with isosurface** are by default constructed from a mixture of quadrangles and triangles. The use of quadrangles creates a less complicated visual impression. This is the default. This command proveds an option to tessellate with only triangles.

    By default the inside of an isosurface is drawn in a separate color. The method of choosing that color is the same as for hidden3d surfaces, where an offset \<n\> is added to the base linetype. To draw both the inside and outside surfaces in the same color, use **set isosurface noinsidecolor**.
- name: Iteration
  id: iteration
  summary: gnuplot supports command iteration and block-structured if/else/while/do constructs
  description: "# Iteration\n\ngnuplot supports command iteration and block-structured if/else/while/do constructs. See **[if](if#if)**, **[while](while#while)**, and **[do](do#do)**. Simple iteration is possible inside **plot** or **set** commands. See **[plot for](plot#plot_for)**. General iteration spanning multiple commands is possible using a block construct as shown below. For a related new feature, see the **[summation](expressions#summation)** expression type. Here is an example using several of these new syntax features:\n\n    set multiplot layout 2,2\n    fourier(k, x) = sin(3./2*k)/k * 2./3*cos(k*x)\n    do for [power = 0:3] {\n        TERMS = 10**power\n        set title sprintf(\"%g term Fourier series\",TERMS)\n        plot 0.5 + sum [k=1:TERMS] fourier(k,x) notitle\n    }\n    unset multiplot\n\nIteration is controlled by an iteration specifier with syntax\n\n    for [<var> in \"string of N elements\"]\n\nor\n\n    for [<var> = <start> : <end> { : <increment> }]\n\nIn the first case \\<var\\> is a string variable that successively evaluates to single-word substrings 1 to N of the string in the iteration specifier. In the second case \\<start\\>, \\<end\\>, and \\<increment\\> are integers or integer expressions.\n\nWith one exception, gnuplot variables are global. There is a single, persistent, list of active variables indexed by name. Assignment to a variable creates or replaces an entry in that list. The only way to remove a variable from that list is the **undefine** command.\n\nThe single exception to this is the variable used in an iteration specifier. The scope of the iteration variable is private to that iteration. You cannot permanently change the value of the iteration variable inside the iterated clause. If the iteration variable has a value prior to iteration, that value will be retained or restored at the end of the iteration. For example, the following commands will print 1 2 3 4 5 6 7 8 9 10 A.\n\n    i = \"A\"\n    do for [i=1:10] { print i; i=10; }\n    print i\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Jitter
  id: set_show#SECTION0402937000000000000000
  summary: When one or both coordinates of a data set are restricted to discrete values then many points may lie exactly on top of each other
  belongs_to: Set-show
  description: |-
    ## Jitter

    Syntax:

        set jitter {overlap <yposition>} {spread <factor>} {wrap <limit>}
                   {swarm|square|vertical}

    Examples:

        set jitter                    # jitter points within 1 character width
        set jitter overlap 1.5        # jitter points within 1.5 character width
        set jitter over 1.5 spread 0.5  # same but half the displacement on x

    When one or both coordinates of a data set are restricted to discrete values then many points may lie exactly on top of each other. Jittering introduces an offset to the coordinates of these superimposed points that spreads them into a cluster. The threshold value for treating the points as being overlapped may be specified in character widths or any of the usual coordinate options. See **[coordinates](coordinates#coordinates)**. Jitter affects 2D plot styles **with points** and **with impulses**. It also affects 3D plotting of voxel grids.

    The default jittering operation displaces points only along x. This produces a distinctive pattern sometimes called a "bee swarm plot". The optional keyword **square** adjusts the y coordinate of displaced points in addition to their x coordinate so that the points lie in distinct layers separated by at least the **overlap** distance.

    To jitter along y (only) rather than along x, use keyword **vertical**.

    The maximum displacement (in character units) can be limited using the **wrap** keyword.

    Note that both the overlap criterion and the magnitude of jitter default to one character unit. Thus the plot appearance will change with the terminal font size, canvas size, or zoom factor. To avoid this you can specify the overlap criterion in the y axis coordinate system (the **first** keyword) and adjust the point size and spread multiplier as appropriate. See **[coordinates](coordinates#coordinates)**, **[pointsize](set_show#pointsize)**.

    Caveat: jitter is incompatible with "pointsize variable".

    **set jitter** is also useful in 3D plots of voxel data. Because voxel grids are regular lattices of evenly spaced points, many view angles cause points to overlap and/or generate Moiré patterns. These artifacts can be removed by displacing the symbol drawn at each grid point by a random amount.
- name: Jpeg
  id: complete_list_terminals#SECTION050134000000000000000
  summary: PNG, JPEG and GIF images are created using the external library libgd
  description: "## Jpeg\n\nSyntax:\n\n    set terminal jpeg \n           {{no}enhanced}\n           {{no}interlace}\n           {linewidth <lw>} {dashlength <dl>} {rounded|butt}\n           {tiny | small | medium | large | giant}\n           {font \"<face> {,<pointsize>}\"} {fontscale <scale>}\n           {size <x>,<y>} {{no}crop}\n           {background <rgb_color>}\n\nPNG, JPEG and GIF images are created using the external library libgd. In most cases, PNG is to be preferred for single plots, and GIF for animations. Both are loss-less image formats, and produce better image quality than the lossy JPEG format. This is in particular noticeable for solid color lines against a solid background, i.e. exactly the sort of image typically created by gnuplot.\n\nThe **interlace** option creates a progressive JPEG image. Default is **nointerlace**.\n\nThe **linewidth** and **dashlength** options are scaling factors that affect all lines drawn, i.e. they are multiplied by values requested in various drawing commands.\n\n**butt** instructs the driver to use a line drawing method that does not overshoot the desired end point of a line. This setting is only applicable for line widths greater than 1. This setting is most useful when drawing horizontal or vertical lines. Default is **rounded**.\n\nThe details of font selection are complicated. Two equivalent simple examples are given below:\n\n    set term jpeg font arial 11\n    set term jpeg font \"arial,11\"\n\nFor more information please see the separate section under **[fonts](fonts#fonts)**.\n\nThe output plot size \\<x,y\\> is given in pixels — it defaults to 640x480. Please see additional information under **[canvas](canvas_size#canvas)** and **[set size](set_show#set_size)**. Blank space at the edges of the finished plot may be trimmed using the **crop** option, resulting in a smaller final image size. Default is **nocrop**."
- name: Key
  id: set_show#SECTION0402938000000000000000
  summary: The set key command enables a key (or legend) containing a title and a sample (line, point, box) for each plot in the graph
  belongs_to: Set-show
  description: |-
    ## Key

    The **set key** command enables a key (or legend) containing a title and a sample (line, point, box) for each plot in the graph. The key may be turned off by requesting **set key off** or **unset key**. Individual key entries may be turned off by using the **notitle** keyword in the corresponding plot command. The text of the titles is controlled by the **set key autotitle** option or by the **title** keyword of individual **plot** and **splot** commands. See **[plot title](plot#plot_title)** for more information.

    Syntax:

        set key {on|off} {default}
              {{inside | outside | fixed} | {lmargin | rmargin | tmargin | bmargin}
                | {at <position>}}
              {left | right | center} {top | bottom | center}
              {vertical | horizontal} {Left | Right}
              {{no}enhanced}
              {{no}opaque {fc <colorspec>}}
              {{no}reverse} {{no}invert}
              {samplen <sample_length>} {spacing <line_spacing>}
              {width <width_increment>} {height <height_increment>}
              {{no}autotitle {columnheader}}
              {title {"<text>"} {{no}enhanced} {center | left | right}}
              {font "<face>,<size>"} {textcolor <colorspec>}
              {{no}box {linestyle <style> | linetype <type> | linewidth <width>}}
              {maxcols {<max no. of columns> | auto}}
              {maxrows {<max no. of rows> | auto}}
        unset key
        show key

    Elements within the key are stacked according to **vertical** or **horizontal**. In the case of **vertical**, the key occupies as few columns as possible. That is, elements are aligned in a column until running out of vertical space at which point a new column is started. The vertical space may be limited using 'maxrows'. In the case of **horizontal**, the key occupies as few rows as possible. The horizontal space may be limited using 'maxcols'.

    By default the key is placed in the upper right inside corner of the graph. The keywords **left**, **right**, **top**, **bottom**, **center**, **inside**, **outside**, **lmargin**, **rmargin**, **tmargin**, **bmargin** (, **above**, **over**, **below** and **under**) may be used to automatically place the key in other positions of the graph. Also an **at \<position\>** may be given to indicate precisely where the plot should be placed. In this case, the keywords **left**, **right**, **top**, **bottom** and **center** serve an analogous purpose for alignment. For more information, see **[key placement](set_show#key_placement)**.

    Justification of the plot titles within the key is controlled by **Left** or **Right** (default). The text and sample can be reversed (**reverse**) and a box can be drawn around the key (**box {...}**) in a specified **linetype** and **linewidth**, or a user-defined **linestyle**.

    The text in the key is set in **enhanced** mode by default, this can be changed with the **{no}enhanced** option, also independently for the key title only and for each individual plot.

    By default the key is built up one plot at a time. That is, the key symbol and title are drawn at the same time as the corresponding plot. That means newer plots may sometimes place elements on top of the key. **set key opaque** causes the key to be generated after all the plots. In this case the key area is filled with background color or the requested fill color and then the key symbols and titles are written. The default can be restored by **set key noopaque**.

    By default the first plot label is at the top of the key and successive labels are entered below it. The **invert** option causes the first label to be placed at the bottom of the key, with successive labels entered above it. This option is useful to force the vertical ordering of labels in the key to match the order of box types in a stacked histogram.

    The \<height_increment\> is a number of character heights to be added to or subtracted from the height of the key box. This is useful mainly when you are putting a box around the key and want larger borders around the key entries.

    An overall title can be put on the key (**title "\<text\>"**) — see also **[syntax](syntax#syntax)** for the distinction between text in single- or double-quotes. The justification of the title defaults to center and can be changed by the keywords **right** or **left**

    The defaults for **set key** are **on**, **right**, **top**, **vertical**, **Right**, **noreverse**, **noinvert**, **samplen 4**, **spacing 1**, **notitle**, and **nobox**. The default \<linetype\> is the same as that used for the plot borders. Entering **set key default** returns the key to its default configuration.

    Each plot is represented in the key by a single line containing a line or symbol or shape representing the plot style and a corresponding title. Using the keyword **notitle** in the plot command will suppress generation of the line. Contour plots generated additional entries in the key, one for each contour (see **[cntrlabel](set_show#cntrlabel)**). You can add extra lines to the key by inserting a dummy plot command that uses the keyword **keyentry** rather than a filename or a function. See **[keyentry](set_show#keyentry)**.

    When using the TeX/LaTeX group of terminals or terminals in which formatting information is embedded in the string, **gnuplot** can only estimate the width of the string for key positioning. If the key is to be positioned at the left, it may be convenient to use the combination **set key left Left reverse**.
- name: Key autotitle
  id: set_show#SECTION0402938400000000000000
  summary: set key autotitle causes each plot to be identified in the key by the name of the data file or function used in the plot command
  belongs_to: Set-show
  description: |-
    ### Key autotitle

    **set key autotitle** causes each plot to be identified in the key by the name of the data file or function used in the plot command. This is the default. **set key noautotitle** disables the automatic generation of plot titles. The command **set key autotitle columnheader** causes the first entry in each column of input data to be interpreted as a text string and used as a title for the corresponding plot. If the quantity being plotted is a function of data from several columns, gnuplot may be confused as to which column to draw the title from. In this case it is necessary to specify the column explicitly in the plot command, e.g.

        plot "datafile" using (($2+$3)/$4) title columnhead(3) with lines

    Note: The effect of **set key autotitle columnheader**, treatment of the first line in a data file as column headers rather than data applies even if the key is disabled by **unset key**. It also applies to **stats** and **fit** commands even though they generate no key. If you want the first line of data to be treated as column headers but *not* to use them for plot titles, use **set datafile columnheaders**.

    In all cases an explicit **title** or **notitle** keyword in the plot command itself will override the default from **set key autotitle**.
- name: Key examples
  id: set_show#SECTION0402938200000000000000
  summary: null
  belongs_to: Set-show
  description: |-
    ### Key examples

    This places the key at the default location:

        set key default

    This disables the key:

        unset key

    This places a key at coordinates 2,3.5,2 in the default (first) coordinate system:

        set key at 2,3.5,2

    This places the key below the graph:

        set key below

    This places the key in the bottom left corner, left-justifies the text, gives it a title, and draws a box around it in linetype 3:

        set key left bottom Left title 'Legend' box 3
- name: Key placement
  id: set_show#SECTION0402938500000000000000
  summary: This section describes placement of the primary, auto-generated key
  belongs_to: Set-show
  description: |-
    ### Key placement

    This section describes placement of the primary, auto-generated key. To construct a secondary key or place plot titles elsewhere, see **[multiple keys](set_show#multiple_keys)**.

    To understand positioning, the best concept is to think of a region, i.e., inside/outside, or one of the margins. Along with the region, keywords **left/center/right** (l/c/r) and **top/center/bottom** (t/c/b) control where within the particular region the key should be placed.

    When in **inside** mode, the keywords **left** (l), **right** (r), **top** (t), **bottom** (b), and **center** (c) push the key out toward the plot boundary as illustrated:

        t/l   t/c   t/r

        c/l    c    c/r

        b/l   b/c   b/r

    When in **outside** mode, automatic placement is similar to the above illustration, but with respect to the view, rather than the graph boundary. That is, a border is moved inward to make room for the key outside of the plotting area, although this may interfere with other labels and may cause an error on some devices. The particular plot border that is moved depends upon the position described above and the stacking direction. For options centered in one of the dimensions, there is no ambiguity about which border to move. For the corners, when the stack direction is **vertical**, the left or right border is moved inward appropriately. When the stack direction is **horizontal**, the top or bottom border is moved inward appropriately.

    The margin syntax allows automatic placement of key regardless of stack direction. When one of the margins **lmargin** (lm), **rmargin** (rm), **tmargin** (tm), and **bmargin** (bm) is combined with a single, non-conflicting direction keyword, the following illustrated positions may contain the key:

        l/tm  c/tm  r/tm

        t/lm                  t/rm

        c/lm                  c/rm

        b/lm                  b/rm

        l/bm  c/bm  r/bm

    Keywords **above** and **over** are synonymous with **tmargin**. For version compatibility, **above** or **over** without an additional l/c/r or stack direction keyword uses **center** and **horizontal**. Keywords **below** and **under** are synonymous with **bmargin**. For compatibility, **below** or **under** without an additional l/c/r or stack direction keyword uses **center** and **horizontal**. A further compatibility issue is that **outside** appearing without an additional t/b/c or stack direction keyword uses **top**, **right** and **vertical** (i.e., the same as t/rm above).

    The \<position\> can be a simple x,y,z as in previous versions, but these can be preceded by one of five keywords (**first**, **second**, **graph**, **screen**, **character**) which selects the coordinate system in which the position of the first sample line is specified. See **[coordinates](coordinates#coordinates)** for more details. The effect of **left**, **right**, **top**, **bottom**, and **center** when \<position\> is given is to align the key as though it were text positioned using the label command, i.e., **left** means left align with key to the right of \<position\>, etc.
- name: Key samples
  id: set_show#SECTION0402938600000000000000
  summary: By default, each plot on the graph generates a corresponding entry in the key
  belongs_to: Set-show
  description: |-
    ### Key samples

    By default, each plot on the graph generates a corresponding entry in the key. This entry contains a plot title and a sample line/point/box of the same color and fill properties as used in the plot itself. The font and textcolor properties control the appearance of the individual plot titles that appear in the key. Setting the textcolor to "variable" causes the text for each key entry to be the same color as the line or fill color for that plot. This was the default in some earlier versions of gnuplot.

    The length of the sample line can be controlled by **samplen**. The sample length is computed as the sum of the tic length and \<sample_length\> times the character width. **samplen** also affects the positions of point samples in the key since these are drawn at the midpoint of the sample line, even if the sample line itself is not drawn.

    Key entry lines are single-spaced based on the current font size. This can be adjusted by **set key spacing \<line-spacing\>**.

    The \<width_increment\> is a number of character widths to be added to or subtracted from the length of the string. This is useful only when you are putting a box around the key and you are using control characters in the text. **gnuplot** simply counts the number of characters in the string when computing the box width; this allows you to correct it.
- name: Kyo
  id: complete_list_terminals#SECTION050135000000000000000
  summary: The kyo and prescribe terminal drivers support the Kyocera laser printer
  description: |-
    ## Kyo

    The **kyo** and **prescribe** terminal drivers support the Kyocera laser printer. The only difference between the two is that **kyo** uses "Helvetica" whereas **prescribe** uses "Courier". There are no options.
- name: Label
  id: set_show#SECTION0402939000000000000000
  summary: Arbitrary labels can be placed on the plot using the set label command
  belongs_to: Set-show
  description: |-
    ## Label

    Arbitrary labels can be placed on the plot using the **set label** command.

    Syntax:

        set label {<tag>} {"<label text>"} {at <position>}
                  {left | center | right}
                  {norotate | rotate {by <degrees>}}
                  {font "<name>{,<size>}"}
                  {noenhanced}
                  {front | back}
                  {textcolor <colorspec>}
                  {point <pointstyle> | nopoint}
                  {offset <offset>}
                  {nobox} {boxed {bs <boxstyle>}}
                  {hypertext}
        unset label {<tag>}
        show label

    The \<position\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **polar**, **graph**, **screen**, or **character** to indicate the coordinate system. See **[coordinates](coordinates#coordinates)** for details.

    The tag is an integer that is used to identify the label. If no \<tag\> is given, the lowest unused tag value is assigned automatically. The tag can be used to delete or modify a specific label. To change any attribute of an existing label, use the **set label** command with the appropriate tag, and specify the parts of the label to be changed.

    The \<label text\> can be a string constant, a string variable, or a string- valued expression. See **[strings](string_constants_string_var#strings)**, **[sprintf](expressions#sprintf)**, and **[gprintf](set_show#gprintf)**.

    By default, the text is placed flush left against the point x,y,z. To adjust the way the label is positioned with respect to the point x,y,z, add the justification parameter, which may be **left**, **right** or **center**, indicating that the point is to be at the left, right or center of the text. Labels outside the plotted boundaries are permitted but may interfere with axis labels or other text.

    Some terminals support enclosing the label in a box. See **[set style textbox](set_show#set_style_textbox)**. Not all terminals can handle boxes for rotated text.

    If **rotate** is given, the label is written vertically. If **rotate by \<degrees\>** is given, the baseline of the text will be set to the specified angle. Some terminals do not support text rotation.

    Font and its size can be chosen explicitly by **font "\<name\>{,\<size\>}"** if the terminal supports font settings. Otherwise the default font of the terminal will be used.

    Normally the enhanced text mode string interpretation, if enabled for the current terminal, is applied to all text strings including label text. The **noenhanced** property can be used to exempt a specific label from the enhanced text mode processing. The can be useful if the label contains underscores, for example. See **[enhanced text](enhanced_text_mode#enhanced_text)**.

    If **front** is given, the label is written on top of the graphed data. If **back** is given (the default), the label is written underneath the graphed data. Using **front** will prevent a label from being obscured by dense data.

    **textcolor \<colorspec\>** changes the color of the label text. \<colorspec\> can be a linetype, an rgb color, or a palette mapping. See help for **[colorspec](linetypes_colors_styles#colorspec)** and **[palette](expressions#palette)**. **textcolor** may be abbreviated **tc**.

        `tc default` resets the text color to its default state.
        `tc lt <n>` sets the text color to that of line type <n>.
        `tc ls <n>` sets the text color to that of line style <n>.
        `tc palette z` selects a palette color corresponding to the label z position.
        `tc palette cb <val>` selects a color corresponding to <val> on the colorbar.
        `tc palette fraction <val>`, with 0<=val<=1, selects a color corresponding to
            the mapping [0:1] to grays/colors of the `palette`.
        `tc rgb "#RRGGBB"` or `tc rgb "0xRRGGBB"` sets an arbitrary 24-bit RGB color.
        `tc rgb 0xRRGGBB`  As above; a hexadecimal constant does not require quotes.

    If a \<pointstyle\> is given, using keywords **lt**, **pt** and **ps**, see **[style](plot#style)**, a point with the given style and color of the given line type is plotted at the label position and the text of the label is displaced slightly. This option is used by default for placing labels in **mouse** enhanced terminals. Use **nopoint** to turn off the drawing of a point near the label (this is the default).

    The displacement defaults to 1,1 in **pointsize** units if a \<pointstyle\> is given, 0,0 if no \<pointstyle\> is given. The displacement can be controlled by the optional **offset \<offset\>** where \<offset\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. See **[coordinates](coordinates#coordinates)** for details.

    If one (or more) axis is timeseries, the appropriate coordinate should be given as a quoted time string according to the **timefmt** format string. See **[set xdata](set_show#set_xdata)** and **[set timefmt](set_show#set_timefmt)**.

    The options available for **set label** are also available for the **labels** plot style. See **[labels](labels#labels)**. In this case the properties **textcolor**, **rotate**, and **pointsize** may be followed by keyword **variable** rather than by a fixed value. In this case the corresponding property of individual labels is determined by additional columns in the **using** specifier.
- name: Label Examples
  id: set_show#SECTION0402939100000000000000
  summary: null
  belongs_to: Set-show
  description: |-
    ### Examples

    Examples:

    To set a label at (1,2) to "y=x", use:

        set label "y=x" at 1,2

    To set a Sigma of size 24, from the Symbol font set, at the center of the graph, use:

        set label "S" at graph 0.5,0.5 center font "Symbol,24"

    To set a label "y=x`^`2" with the right of the text at (2,3,4), and tag the label as number 3, use:

        set label 3 "y=x^2" at 2,3,4 right

    To change the preceding label to center justification, use:

        set label 3 center

    To delete label number 2, use:

        unset label 2

    To delete all labels, use:

        unset label

    To show all labels (in tag order), use:

        show label

    To set a label on a graph with a timeseries on the x axis, use, for example:

        set timefmt "%d/%m/%y,%H:%M"
        set label "Harvest" at "25/8/93",1

    To display a freshly fitted parameter on the plot with the data and the fitted function, do this after the **fit**, but before the **plot**:

        set label sprintf("a = %3.5g",par_a) at 30,15
        bfit = gprintf("b = %s*10^%S",par_b)
        set label bfit at 30,20

    To display a function definition along with its fitted parameters, use:

        f(x)=a+b*x
        fit f(x) 'datafile' via a,b
        set label GPFUN_f at graph .05,.95
        set label sprintf("a = %g", a) at graph .05,.90
        set label sprintf("b = %g", b) at graph .05,.85

    To set a label displaced a little bit from a small point:

        set label 'origin' at 0,0 point lt 1 pt 2 ps 3 offset 1,-1

    To set a label whose color matches the z value (in this case 5.5) of some point on a 3D splot colored using pm3d:

        set label 'text' at 0,0,5.5 tc palette z
- name: Label Hypertext
  id: set_show#SECTION0402939200000000000000
  summary: Some terminals (wxt, qt, svg, canvas, win) allow you to attach hypertext to specific points on the graph or elsewhere on the canvas
  belongs_to: Set-show
  description: |-
    ### Hypertext

    Some terminals (wxt, qt, svg, canvas, win) allow you to attach hypertext to specific points on the graph or elsewhere on the canvas. When the mouse hovers over the anchor point, a pop-up box containing the text is displayed. Terminals that do not support hypertext will display nothing. You must enable the **point** attribute of the label in order for the hypertext to be anchored. Examples:

        set label at 0,0 "Plot origin" hypertext point pt 1
        plot 'data' using 1:2:0 with labels hypertext point pt 7 \
             title 'mouse over point to see its order in data set'

    For the wxt and qt terminals, left-click on a hypertext anchor after the text has appeared will copy the hypertext to the clipboard.

    EXPERIMENTAL (implementation details may change) Text of the form "image{\<xsize\>,\<ysize\>}:\<filename\>{ \\n\<caption text\>}" will trigger display of the image file in a pop-up box. The optional size overrides a default box size 300x200. The types of image file recognized may vary by terminal type, but \*.png should always work. Any additional text lines following the image filename are displayed as usual for hypertext. Example:

        set label 7 "image:../figures/Fig7_inset.png\nFigure 7 caption..."
        set label 7 at 10,100 hypertext point pt 7
- name: Labels
  id: labels
  summary: The labels style reads coordinates and text from a data file and places the text string at the corresponding 2D or 3D position
  description: "# Labels\n\nThe **labels** style reads coordinates and text from a data file and places the text string at the corresponding 2D or 3D position. 3 or 4 input columns of basic data are required. Additional input columns may be used to provide properties that vary point by point such as text rotation angle (keywords **rotate variable**) or color (see **[textcolor variable](linetypes_colors_styles#textcolor_variable)**).\n\n    3 columns:  x  y  string    # 2D version\n    4 columns:  x  y  z  string # 3D version\n\nThe font, color, rotation angle and other properties of the printed text may be specified as additional command options (see **[set label](set_show#set_label)**). The example below generates a 2D plot with text labels constructed from the city whose name is taken from column 1 of the input file, and whose geographic coordinates are in columns 4 and 5. The font size is calculated from the value in column 3, in this case the population.\n\n    CityName(String,Size) = sprintf(\"{/=%d %s}\", Scale(Size), String)\n    plot 'cities.dat' using 5:4:(CityName(stringcolumn(1),$3)) with labels\n\nIf we did not want to adjust the font size to a different size for each city name, the command would be much simpler:\n\n    plot 'cities.dat' using 5:4:1 with labels font \"Times,8\"\n\nIf the labels are marked as **hypertext** then the text only appears if the mouse is hovering over the corresponding anchor point. See **[hypertext](set_show#hypertext)**. In this case you must enable the label's **point** attribute so that there is a point to act as the hypertext anchor:\n\n    plot 'cities.dat' using 5:4:1 with labels hypertext point pt 7\n\nThe **labels** style can also be used in place of the **points** style when the set of predefined point symbols is not suitable or not sufficiently flexible. For example, here we define a set of chosen single-character symbols and assign one of them to each point in a plot based on the value in data column 3:\n\n    set encoding utf8\n    symbol(z) = \"∙□+⊙♠♣♡♢\"[int(z):int(z)]\n    splot 'file' using 1:2:(symbol($3)) with labels\n\nThis example shows use of labels with variable rotation angle in column 4 and textcolor (\"tc\") in column 5. Note that variable color is always taken from the last column in the **using** specifier.\n\n    plot $Data using 1:2:3:4:5 with labels tc variable rotate variable\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Latex
  id: complete_list_terminals#SECTION050136000000000000000
  summary: 'Note: Legacy terminal (not built by default)'
  description: |-
    ## Latex

    Note: Legacy terminal (not built by default). The latex, emtex, eepic, and tpic terminals in older versions of gnuplot provided minimal support for graphics styles beyond simple lines and points. They have been directly superseded by the **pict2e** terminal. For more capable TeX/LaTeX compatible terminal types see **[cairolatex](complete_list_terminals#cairolatex)**, **[context](complete_list_terminals#context)**, **[epslatex](complete_list_terminals#epslatex)**, **[mp](complete_list_terminals#mp)**, **[pstricks](complete_list_terminals#pstricks)**, and **[tikz](complete_list_terminals#tikz)**.

    Syntax:

        set terminal {latex | emtex} {default | {courier|roman} {<fontsize>}}
                     {size <XX>{unit}, <YY>{unit}} {rotate | norotate}
                     {color | monochrome}

    By default the plot will inherit font settings from the embedding document. You have the option of forcing either Courier (cmtt) or Roman (cmr) fonts instead. In this case you may also specify a fontsize. Unless your driver is capable of building fonts at any size (e.g. dvips), stick to the standard 10, 11 and 12 point sizes.

    METAFONT users beware: METAFONT does not like odd sizes.

    All drivers for LaTeX offer a special way of controlling text positioning: If any text string begins with '{', you also need to include a '}' at the end of the text, and the whole text will be centered both horizontally and vertically. If the text string begins with '\[', you need to follow this with a position specification (up to two out of t,b,l,r), '\]{', the text itself, and finally '}'. The text itself may be anything LaTeX can typeset as an LR-box. ' \\rule{}{}'s may help for best positioning.

    Points, among other things, are drawn using the LaTeX commands " \\Diamond" and " \\Box". These commands no longer belong to the LaTeX2e core; they are included in the latexsym package, which is part of the base distribution and thus part of any LaTeX implementation. Please do not forget to use this package. Other point types use symbols from the amssymb package.

    The default size for the plot is 5 inches by 3 inches. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in inches, but other units are possible (currently only cm).

    If **rotate** is specified, rotated text, especially a rotated y-axis label, is possible (the packages graphics or graphicx are needed). The 'stacked' y-axis label mechanism is then deactivated. This will also significantly improve the quality of line drawing, and is default since version 5.3.

    The option **color** enables color, while **monochrome** uses only black and white drawing elements. You need to load the color or xcolor package in the preamble of your latex document.

    Examples: About label positioning: Use gnuplot defaults (mostly sensible, but sometimes not really best):

        set title '\LaTeX\ -- $ \gamma $'

    Force centering both horizontally and vertically:

        set label '{\LaTeX\ -- $ \gamma $}' at 0,0

    Specify own positioning (top here):

        set xlabel '[t]{\LaTeX\ -- $ \gamma $}'

    The other label – account for long ticlabels:

        set ylabel '[r]{\LaTeX\ -- $ \gamma $\rule{7mm}{0pt}}'
- name: Layers
  id: layers
  summary: A gnuplot plot is built up by drawing its various components in a fixed order
  description: "# Layers\n\nA gnuplot plot is built up by drawing its various components in a fixed order. This order can be modified by assigning some components to a specific layer using the keywords **behind**, **back**, or **front**. For example, to replace the background color of the plot area you could define a colored rectangle with the attribute **behind**.\n\n    set object 1 rectangle from graph 0,0 to graph 1,1 fc rgb \"gray\" behind\n\nThe order of drawing is\n\n    behind\n    back\n    the plot itself\n    the plot legend (`key`)\n    front\n\nWithin each layer elements are drawn in the order\n\n    grid, axis, and border elements\n    pixmaps in numerical order\n    objects (rectangles, circles, ellipses, polygons) in numerical order\n    labels in numerical order\n    arrows in numerical order\n\nIn the case of multiple plots on a single page (multiplot mode) this order applies separately to each component plot, not to the multiplot as a whole.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Lines
  id: lines
  summary: The lines style connects adjacent points with straight line segments
  description: "# Lines\n\nThe **lines** style connects adjacent points with straight line segments. It may be used in either 2D or 3D plots. The basic form requires 1, 2, or 3 columns of input data. Additional input columns may be used to provide information such as variable line color (see **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**).\n\n2D form (no \"using\" spec)\n\n    1 column:   y       # implicit x from row number\n    2 columns:  x  y\n\n3D form (no \"using\" spec)\n\n    1 column:   z       # implicit x from row, y from index\n    3 columns:  x  y  z\n\nSee also **[linetype](set_show#linetype)**, **[linewidth](set_show#linewidth)**, and **[linestyle](set_show#linestyle)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Linespoints
  id: linespoints
  summary: The linespoints style (short form lp) connects adjacent points with straight line segments and then goes back to draw a small symbol at each point
  description: "# Linespoints\n\nThe **linespoints** style (short form **lp**) connects adjacent points with straight line segments and then goes back to draw a small symbol at each point. Points are drawn with the default size determined by **set pointsize** unless a specific point size is given in the plot command or a variable point size is provided in an additional column of input data. Additional input columns may also be used to provide information such as variable line color. See **[lines](lines#lines)** and **[points](points#points)**.\n\nTwo keywords control whether or not every point in the plot is marked with a symbol, **pointinterval** (short form **pi**) and **pointnumber** (short form **pn**).\n\n**pi N** or **pi -N** tells gnuplot to only place a symbol on every Nth point. A negative value for N will erase the portion of line segment that passes underneath the symbol. The size of the erased portion is controlled by **set pointintervalbox**.\n\n**pn N** or **pn -N** tells gnuplot to label only N of the data points, evenly spaced over the data set. As with **pi**, a negative value for N will erase the portion of line segment that passes underneath the symbol.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Linestyles vs linetypes
  id: linetypes_colors_styles#SECTION020213000000000000000
  summary: A linestyle is a temporary association of properties linecolor, linewidth, dashtype, and pointtype
  belongs_to: Linetypes, colors, and styles
  description: "## Linestyles vs linetypes\n\nA **linestyle** is a temporary association of properties linecolor, linewidth, dashtype, and pointtype. It is defined using the command **set style line**. Once you have defined a linestyle, you can use it in a plot command to control the appearance of one or more plot elements. In other words, it is just like a linetype except for its lifetime. Whereas **linetypes** are permanent (they last until you explicitly redefine them), **linestyles** last until the next reset of the graphics state.\n\nExamples:\n\n    # define a new line style with terminal-independent color cyan,\n    # linewidth 3, and associated point type 6 (a circle with a dot in it).\n    set style line 5 lt rgb \"cyan\" lw 3 pt 6\n    plot sin(x) with linespoints ls 5          # user-defined line style 5\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Linetype
  id: set_show#SECTION0402940000000000000000
  summary: The set linetype command allows you to redefine the basic linetypes used for plots
  belongs_to: Set-show
  description: |-
    ## Linetype

    The **set linetype** command allows you to redefine the basic linetypes used for plots. The command options are identical to those for "set style line". Unlike line styles, redefinitions by **set linetype** are persistent; they are not affected by **reset**.

    For example, whatever linetypes one and two look like to begin with, if you redefine them like this:

        set linetype 1 lw 2 lc rgb "blue" pointtype 6
        set linetype 2 lw 2 lc rgb "forest-green" pointtype 8

    everywhere that uses lt 1 will now get a thick blue line. This includes uses such as the definition of a temporary linestyle derived from the base linetype 1. Similarly lt 2 will now produce a thick green line.

    This mechanism can be used to define a set of personal preferences for the sequence of lines used in gnuplot. The recommended way to do this is to add to the run-time initialization file ˜ /.gnuplot a sequence of commands like

        set linetype 1 lc rgb "dark-violet" lw 2 pt 1
        set linetype 2 lc rgb "sea-green"   lw 2 pt 7
        set linetype 3 lc rgb "cyan"        lw 2 pt 6 pi -1
        set linetype 4 lc rgb "dark-red"    lw 2 pt 5 pi -1
        set linetype 5 lc rgb "blue"        lw 2 pt 8
        set linetype 6 lc rgb "dark-orange" lw 2 pt 3
        set linetype 7 lc rgb "black"       lw 2 pt 11
        set linetype 8 lc rgb "goldenrod"   lw 2
        set linetype cycle 8

    Every time you run gnuplot the line types will be initialized to these values. You may initialize as many linetypes as you like. If you do not redefine, say, linetype 3 then it will continue to have the default properties (in this case blue, pt 3, lw 1, etc).

    Similar script files can be used to define theme-based color choices, or sets of colors optimized for a particular plot type or output device.

    The command **set linetype cycle 8** tells gnuplot to re-use these definitions for the color and linewidth of higher-numbered linetypes. That is, linetypes 9-16, 17-24, and so on will use this same sequence of colors and widths. The point properties (pointtype, pointsize, pointinterval) are not affected by this command. **unset linetype cycle** disables this feature. If the line properties of a higher numbered linetype are explicitly defined, this takes precedence over the recycled low-number linetype properties.
- name: Linetypes, colors, and styles
  id: linetypes_colors_styles
  summary: In older gnuplot versions, each terminal type provided a set of distinct "linetypes" that could differ in color, in thickness, in dot/dash pattern, or in some combination of color and dot/dash
  description: "# Linetypes, colors, and styles\n\nIn older gnuplot versions, each terminal type provided a set of distinct \"linetypes\" that could differ in color, in thickness, in dot/dash pattern, or in some combination of color and dot/dash. These colors and patterns were not guaranteed to be consistent across different terminal types although most used the color sequence red/green/blue/magenta/cyan/yellow. You can select this old behaviour via the command **set colorsequence classic**, but by default gnuplot version 5 uses a terminal-independent sequence of 8 colors.\n\nYou can further customize the sequence of linetype properties interactively or in an initialization file. See **[set linetype](set_show#set_linetype)**. Several sample initialization files are provided in the distribution package.\n\nThe current linetype properties for a particular terminal can be previewed by issuing the **test** command after setting the terminal type.\n\nSuccessive functions or datafiles plotted by a single command will be assigned successive linetypes in the current default sequence. You can override this for any individual function, datafile, or plot element by giving explicit line properties in the plot command.\n\nExamples:\n\n    plot \"foo\", \"bar\"                 # plot two files using linetypes 1, 2\n    plot sin(x) linetype 4            # use linetype color 4\n\nIn general, colors can be specified using named colors, rgb (red, green, blue) components, hsv (hue, saturation, value) components, or a coordinate along the current pm3d palette.\n\nExamples:\n\n    plot sin(x) lt rgb \"violet\"       # one of gnuplot's named colors\n    plot sin(x) lt rgb \"#FF00FF\"      # explicit RGB triple in hexadecimal\n    plot sin(x) lt palette cb -45     # whatever color corresponds to -45\n                                      # in the current cbrange of the palette\n    plot sin(x) lt palette frac 0.3   # fractional value along the palette\n\nSee **[colorspec](linetypes_colors_styles#colorspec)**, **[show colornames](set_show#show_colornames)**, **[hsv](expressions#hsv)**, **[set palette](set_show#set_palette)**, **[cbrange](set_show#cbrange)**. See also **[set monochrome](set_show#set_monochrome)**.\n\nLinetypes also have an associated dot-dash pattern although not all terminal types are capable of using it. Gnuplot version 5 allows you to specify the dot-dash pattern independent of the line color. See **[dashtype](linetypes_colors_styles#dashtype)**.\n\n## Colorspec\n\nMany commands allow you to specify a linetype with an explicit color.\n\nSyntax:\n\n    ... {linecolor | lc} {\"colorname\" | <colorspec> | <n>}\n    ... {textcolor | tc} {<colorspec> | {linetype | lt} <n>}\n    ... {fillcolor | fc} {<colorspec> | linetype <n> | linestyle <n>}\n\nwhere \\<colorspec\\> has one of the following forms:\n\n    rgbcolor \"colorname\"    # e.g. \"blue\"\n    rgbcolor \"0xRRGGBB\"     # string containing hexadecimal constant\n    rgbcolor \"0xAARRGGBB\"   # string containing hexadecimal constant\n    rgbcolor \"#RRGGBB\"      # string containing hexadecimal in x11 format\n    rgbcolor \"#AARRGGBB\"    # string containing hexadecimal in x11 format\n    rgbcolor <integer val>  # integer value representing AARRGGBB\n    rgbcolor variable       # integer value is read from input file\n    palette frac <val>      # <val> runs from 0 to 1\n    palette cb <value>      # <val> lies within cbrange\n    palette z\n    variable                # color index is read from input file\n    bgnd                    # background color\n    black\n\nThe \"\\<n\\>\" is the linetype number the color of which is used, see **[test](test#test)**.\n\n\"colorname\" refers to one of the color names built in to gnuplot. For a list of the available names, see **[show colornames](set_show#show_colornames)**.\n\nHexadecimal constants can be given in quotes as \"\\#RRGGBB\" or \"0xRRGGBB\", where RRGGBB represents the red, green, and blue components of the color and must be between 00 and FF. For example, magenta = full-scale red + full-scale blue could be represented by \"0xFF00FF\", which is the hexadecimal representation of (255 \\<\\< 16) + (0 \\<\\< 8) + (255).\n\n\"\\#AARRGGBB\" represents an RGB color with an alpha channel (transparency) value in the high bits. An alpha value of 0 represents a fully opaque color; i.e., \"\\#00RRGGBB\" is the same as \"\\#RRGGBB\". An alpha value of 255 (FF) represents full transparency.\n\nThe color palette is a linear gradient of colors that smoothly maps a single numerical value onto a particular color. Two such mappings are always in effect. **palette frac** maps a fractional value between 0 and 1 onto the full range of the color palette. **palette cb** maps the range of the color axis onto the same palette. See **[set cbrange](set_show#set_cbrange)**. See also **[set colorbox](set_show#set_colorbox)**. You can use either of these to select a constant color from the current palette.\n\n\"palette z\" maps the z value of each plot segment or plot element into the cbrange mapping of the palette. This allows smoothly-varying color along a 3d line or surface. It also allows coloring 2D plots by palette values read from an extra column of data (not all 2D plot styles allow an extra column). There are two special color specifiers: **bgnd** for background color and **black**.\n\n### Background color\n\nMost terminals allow you to set an explicit background color for the plot. The special linetype **bgnd** will draw in this color, and **bgnd** is also recognized as a color. Examples:\n\n    # This will erase a section of the canvas by writing over it in the\n    # background color\n    set term wxt background rgb \"gray75\"\n    set object 1 rectangle from x0,y0 to x1,y1 fillstyle solid fillcolor bgnd\n    # This will draw an \"invisible\" line along the x axis\n    plot 0 lt bgnd\n\n### Linecolor variable\n\n**lc variable** tells the program to use the value read from one column of the input data as a linetype index, and use the color belonging to that linetype. This requires a corresponding additional column in the **using** specifier. Text colors can be set similarly using **tc variable**.\n\nExamples:\n\n    # Use the third column of data to assign colors to individual points\n    plot 'data' using 1:2:3 with points lc variable\n\n    # A single data file may contain multiple sets of data, separated by two\n    # blank lines.  Each data set is assigned as index value (see `index`)\n    # that can be retrieved via the `using` specifier `column(-2)`.\n    # See `pseudocolumns`.  This example uses to value in column -2 to\n    # draw each data set in a different line color.\n    plot 'data' using 1:2:(column(-2)) with lines lc variable\n\n### Rgbcolor variable\n\nYou can assign a separate color for each data point, line segment, or label in your plot. **lc rgbcolor variable** tells the program to read RGB color information for each line in the data file. This requires a corresponding additional column in the **using** specifier. The extra column is interpreted as a 24-bit packed RGB triple. If the value is provided directly in the data file it is easiest to give it as a hexadecimal value (see **[rgbcolor](linetypes_colors_styles#rgbcolor)**). Alternatively, the **using** specifier can contain an expression that evaluates to a 24-bit RGB color as in the example below. Text colors are similarly set using **tc rgbcolor variable**.\n\nExample:\n\n    # Place colored points in 3D at the x,y,z coordinates corresponding to\n    # their red, green, and blue components\n    rgb(r,g,b) = 65536 * int(r) + 256 * int(g) + int(b)\n    splot \"data\" using 1:2:3:(rgb($1,$2,$3)) with points lc rgb variable\n\n## Dashtype\n\nIn gnuplot version 5 the dash pattern (**dashtype**) is a separate property associated with each line, analogous to **linecolor** or **linewidth**. It is not necessary to place the current terminal in a special mode just to draw dashed lines. I.e. the command **set term \\<termname\\> {solid\\|dashed}** is now ignored. If backwards compatibility with old scripts written for version 4 is required, the following lines can be used instead:\n\n    if (GPVAL_VERSION >= 5.0) set for [i=1:9] linetype i dashtype i\n    if (GPVAL_VERSION < 5.0) set termoption dashed\n\nAll lines have the property **dashtype solid** unless you specify otherwise. You can change the default for a particular linetype using the command **set linetype** so that it affects all subsequent commands, or you can include the desired dashtype as part of the **plot** or other command.\n\nSyntax:\n\n    dashtype N          # predefined dashtype invoked by number\n    dashtype \"pattern\"  # string containing a combination of the characters\n                        # dot (.) hyphen (-) underscore(_) and space.\n    dashtype (s1,e1,s2,e2,s3,e3,s4,e4)  # dash pattern specified by 1 to 4\n                        # numerical pairs <solid length>, <emptyspace length>\n\nExample:\n\n    # Two functions using linetype 1 but distinguished by dashtype\n    plot f1(x) with lines lt 1 dt solid, f2(x) with lines lt 1 dt 3\n\nSome terminals support user-defined dash patterns in addition to whatever set of predefined dash patterns they offer.\n\nExamples:\n\n    plot f(x) dt 3            # use terminal-specific dash pattern 3\n    plot f(x) dt \".. \"        # construct a dash pattern on the spot\n    plot f(x) dt (2,5,2,15)   # numerical representation of the same pattern\n    set dashtype 11 (2,4,4,7) # define new dashtype to be called by index\n    plot f(x) dt 11           # plot using our new dashtype\n\nIf you specify a dash pattern using a string the program will convert this to a sequence of \\<solid\\>,\\<empty\\> pairs. Dot \".\" becomes (2,5), dash \"-\" becomes (10,10), underscore \"\\_\" becomes (20,10), and each space character \" \" adds 10 to the previous \\<empty\\> value. The command **show dashtype** will show both the original string and the converted numerical sequence.\n\n## Linestyles vs linetypes\n\nA **linestyle** is a temporary association of properties linecolor, linewidth, dashtype, and pointtype. It is defined using the command **set style line**. Once you have defined a linestyle, you can use it in a plot command to control the appearance of one or more plot elements. In other words, it is just like a linetype except for its lifetime. Whereas **linetypes** are permanent (they last until you explicitly redefine them), **linestyles** last until the next reset of the graphics state.\n\nExamples:\n\n    # define a new line style with terminal-independent color cyan,\n    # linewidth 3, and associated point type 6 (a circle with a dot in it).\n    set style line 5 lt rgb \"cyan\" lw 3 pt 6\n    plot sin(x) with linespoints ls 5          # user-defined line style 5\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Link
  id: set_show#SECTION0402941000000000000000
  summary: The set link command establishes a mapping between the x and x2 axes, or the y and y2 axes
  belongs_to: Set-show
  description: |-
    ## Link

    Syntax:

        set link {x2 | y2} {via <expression1> inverse <expression2>}
        unset link

    The **set link** command establishes a mapping between the x and x2 axes, or the y and y2 axes. \<expression1\> maps primary axis coordinates onto the secondary axis. \<expression2\> maps secondary axis coordinates onto the primary axis.

    Examples:

        set link x2

    This is the simplest form of the command. It forces the x2 axis to have identically the same range, scale, and direction as the x axis. Commands **set xrange**, **set x2range**, **set auto x**, etc will affect both the x and x2 axes.

        set link x2 via x**2 inverse sqrt(x)
        plot "sqrt_data" using 1:2 axes x2y1, "linear_data" using 1:2 axes x1y1

    This command establishes forward and reverse mapping between the x and x2 axes. The forward mapping is used to generate x2 tic labels and x2 mouse coordinate The reverse mapping is used to plot coordinates given in the x2 coordinate system. Note that the mapping as given is valid only for x non-negative. When mapping to the y2 axis, both \<expression1\> and \<expression2\> must use y as dummy variable.
- name: Linux console
  id: complete_list_terminals#SECTION050137000000000000000
  summary: Older gnuplot versions required special terminals linux or vgagl in order to display graphics on the linux console, i.e
  description: |-
    ## Linux console

    Older gnuplot versions required special terminals **linux** or **vgagl** in order to display graphics on the linux console, i.e. in the absence of X11 or other windowing environment. These terminals have been deprecated.

    The recommended way to run gnuplot from the linux console is now to use a console terminal emulator such as yaft (https://github.com/uobikiemukot/yaft) that supports sixel graphics. With yaft as your console terminal you can run gnuplot and select a terminal with sixel output. See **[sixelgd](complete_list_terminals#sixelgd)**. As a fall-back option you could use **set term dumb**, but sixel graphics are much nicer.
- name: Lmargin
  id: set_show#SECTION0402942000000000000000
  summary: The command set lmargin sets the size of the left margin
  belongs_to: Set-show
  description: |-
    ## Lmargin

    The command **set lmargin** sets the size of the left margin. Please see **[set margin](set_show#set_margin)** for details.
- name: Load
  id: load
  summary: The load command executes each line of the specified input file as if it had been typed in interactively
  description: "# Load\n\nThe **load** command executes each line of the specified input file as if it had been typed in interactively. Files created by the **save** command can later be **load**ed. Any text file containing valid commands can be created and then executed by the **load** command. Files being **load**ed may themselves contain **load** or **call** commands. See **[comments](comments#comments)** for information about comments in commands. To **load** with arguments, see **[call](call#call)**.\n\nSyntax:\n\n    load \"<input-file>\"\n\nThe name of the input file must be enclosed in quotes.\n\nThe special filename \"-\" may be used to **load** commands from standard input. This allows a **gnuplot** command file to accept some commands from standard input. Please see help for **[batch/interactive](batch_interactive_operation#batch_interactive)** for more details.\n\nOn some systems which support a popen function (Unix), the load file can be read from a pipe by starting the file name with a '\\<'.\n\nExamples:\n\n    load 'work.gnu'\n    load \"func.dat\"\n    load \"< loadfile_generator.sh\"\n\nThe **load** command is performed implicitly on any file names given as arguments to **gnuplot**. These are loaded in the order specified, and then **gnuplot** exits.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Loadpath
  id: set_show#SECTION0402943000000000000000
  summary: The loadpath setting defines additional locations for data and command files searched by the call, load, plot and splot commands
  belongs_to: Set-show
  description: |-
    ## Loadpath

    The **loadpath** setting defines additional locations for data and command files searched by the **call**, **load**, **plot** and **splot** commands. If a file cannot be found in the current directory, the directories in **loadpath** are tried.

    Syntax:

        set loadpath {"pathlist1" {"pathlist2"...}}
        show loadpath

    Path names may be entered as single directory names, or as a list of path names separated by a platform-specific path separator, eg. colon (':') on Unix, semicolon (';') on DOS/Windows/OS/2 platforms. The **show loadpath**, **save** and **save set** commands replace the platform-specific separator with a space character (' ').

    If the environment variable GNUPLOT_LIB is set, its contents are appended to **loadpath**. However, **show loadpath** prints the contents of **set loadpath** and GNUPLOT_LIB separately. Also, the **save** and **save set** commands ignore the contents of GNUPLOT_LIB.
- name: Locale
  id: set_show#SECTION0402944000000000000000
  summary: The locale setting determines the language with which {x,y,z}{d,m}tics will write the days and months
  belongs_to: Set-show
  description: |-
    ## Locale

    The **locale** setting determines the language with which **{x,y,z}{d,m}tics** will write the days and months.

    Syntax:

        set locale {"<locale>"}

    \<locale\> may be any language designation acceptable to your installation. See your system documentation for the available options. The command **set locale ""** will try to determine the locale from the LC_TIME, LC_ALL, or LANG environment variables.

    To change the decimal point locale, see **[set decimalsign](set_show#set_decimalsign)**. To change the character encoding to the current locale, see **[set encoding](set_show#set_encoding)**.
- name: Logscale
  id: set_show#SECTION0402945000000000000000
  summary: where <axes> may be any combinations of x, x2, y, y2, z, cb, and r in any order
  belongs_to: Set-show
  description: |-
    ## Logscale

    Syntax:

        set logscale <axes> {<base>}
        unset logscale <axes>
        show logscale

    where \<axes\> may be any combinations of **x**, **x2**, **y**, **y2**, **z**, **cb**, and **r** in any order. \<base\> is the base of the log scaling (default is base 10). If no axes are specified, the command affects all axes except **r**. The command **unset logscale** turns off log scaling for all axes. Note that the ticmarks generated for logscaled axes are not uniformly spaced. See **[set xtics](set_show#set_xtics)**.

    Examples:

    To enable log scaling in both x and z axes:

        set logscale xz

    To enable scaling log base 2 of the y axis:

        set logscale y 2

    To enable z and color log axes for a pm3d plot:

        set logscale zcb

    To disable z axis log scaling:

        unset logscale z
- name: Lower
  id: lower
  summary: See raise
  description: "# Lower\n\nSee **[raise](raise#raise)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Lua
  id: complete_list_terminals#SECTION050138000000000000000
  summary: The lua generic terminal driver works in conjunction with an external Lua script to create a target-specific plot file
  description: |-
    ## Lua

    The **lua** generic terminal driver works in conjunction with an external Lua script to create a target-specific plot file. Currently the only supported target is TikZ -\> pdflatex.

    Information about Lua is available at http://www.lua.org .

    Syntax:

        set terminal lua <target name> | "<file name>"
                            {<script_args> ...}
                            {help}

    A 'target name' or 'file name' (in quotes) for a script is mandatory. If a 'target name' for the script is given, the terminal will look for "gnuplot-\<target name\>.lua" in the local directory and on failure in the environmental variable GNUPLOT_LUA_DIR.

    All arguments will be provided to the selected script for further evaluation. E.g. 'set term lua tikz help' will cause the script itself to print additional help on options and choices for the script.
- name: Macros
  id: set_show#SECTION0402946000000000000000
  summary: In this version of gnuplot macro substitution is always enabled
  belongs_to: Set-show
  description: |-
    ## Macros

    In this version of gnuplot macro substitution is always enabled. Tokens in the command line of the form @\<stringvariablename\> will be replaced by the text string contained in \<stringvariablename\>. See **[substitution](substitution_command_line_m#substitution)**.
- name: Mapping
  id: set_show#SECTION0402947000000000000000
  summary: If data are provided to splot in spherical or cylindrical coordinates, the set mapping command should be used to instruct gnuplot how to interpret them
  belongs_to: Set-show
  description: |-
    ## Mapping

    If data are provided to **splot** in spherical or cylindrical coordinates, the **set mapping** command should be used to instruct **gnuplot** how to interpret them.

    Syntax:

        set mapping {cartesian | spherical | cylindrical}

    A cartesian coordinate system is used by default.

    For a spherical coordinate system, the data occupy two or three columns (or **using** entries). The first two are interpreted as the azimuthal and polar angles theta and phi (or "longitude" and "latitude"), in the units specified by **set angles**. The radius r is taken from the third column if there is one, or is set to unity if there is no third column. The mapping is:

        x = r * cos(theta) * cos(phi)
        y = r * sin(theta) * cos(phi)
        z = r * sin(phi)

    Note that this is a "geographic" spherical system, rather than a "polar" one (that is, phi is measured from the equator, rather than the pole).

    For a cylindrical coordinate system, the data again occupy two or three columns. The first two are interpreted as theta (in the units specified by **set angles**) and z. The radius is either taken from the third column or set to unity, as in the spherical case. The mapping is:

        x = r * cos(theta)
        y = r * sin(theta)
        z = z

    The effects of **mapping** can be duplicated with the **using** filter on the **splot** command, but **mapping** may be more convenient if many data files are to be processed. However even if **mapping** is used, **using** may still be necessary if the data in the file are not in the required order.

    **mapping** has no effect on **plot**. [world.dem: mapping demos. ](http://www.gnuplot.info/demo/world.html)
- name: Margin
  id: set_show#SECTION0402948000000000000000
  summary: The margin is the distance between the plot border and the outer edge of the canvas
  belongs_to: Set-show
  description: |-
    ## Margin

    The **margin** is the distance between the plot border and the outer edge of the canvas. The size of the margin is chosen automatically, but can be overridden by the **set margin** commands. **show margin** shows the current settings. To alter the distance between the inside of the plot border and the data in the plot itself, see **[set offsets](set_show#set_offsets)**.

    Syntax:

        set lmargin {{at screen} <margin>}
        set rmargin {{at screen} <margin>}
        set tmargin {{at screen} <margin>}
        set bmargin {{at screen} <margin>}
        set margins <left>, <right>, <bottom>, <top>
        show margin

    The default units of \<margin\> are character heights or widths, as appropriate. A positive value defines the absolute size of the margin. A negative value (or none) causes **gnuplot** to revert to the computed value. For 3D plots, only the left margin can be set using character units.

    The keywords **at screen** indicates that the margin is specified as a fraction of the full drawing area. This can be used to precisely line up the corners of individual 2D and 3D graphs in a multiplot. This placement ignores the current values of **set origin** and **set size**, and is intended as an alternative method for positioning graphs within a multiplot.

    Normally the margins of a plot are automatically calculated based on tics, tic labels, axis labels, the plot title, the timestamp and the size of the key if it is outside the borders. If, however, tics are attached to the axes (**set xtics axis**, for example), neither the tics themselves nor their labels will be included in either the margin calculation or the calculation of the positions of other text to be written in the margin. This can lead to tic labels overwriting other text if the axis is very close to the border.
- name: Mf
  id: complete_list_terminals#SECTION050139000000000000000
  summary: The mf terminal driver creates an input file to the METAFONT program
  description: |-
    ## Mf

    The **mf** terminal driver creates an input file to the METAFONT program. Thus a figure may be used in the TeX document in the same way as is a character.

    To use a picture in a document, the METAFONT program must be run with the output file from **gnuplot** as input. Thus, the user needs a basic knowledge of the font creating process and the procedure for including a new font in a document. However, if the METAFONT program is set up properly at the local site, an unexperienced user could perform the operation without much trouble.

    The text support is based on a METAFONT character set. Currently the Computer Modern Roman font set is input, but the user is in principal free to choose whatever fonts he or she needs. The METAFONT source files for the chosen font must be available. Each character is stored in a separate picture variable in METAFONT. These variables may be manipulated (rotated, scaled etc.) when characters are needed. The drawback is the interpretation time in the METAFONT program. On some machines (i.e. PC) the limited amount of memory available may also cause problems if too many pictures are stored.

    The **mf** terminal has no options.
- name: Mf METAFONT Instructions
  id: complete_list_terminals#SECTION050139100000000000000
  summary: '- Create your pictures'
  description: |-
    ### METAFONT Instructions

    \- Set your terminal to METAFONT:

        set terminal mf

    \- Select an output-file, e.g.:

        set output "myfigures.mf"

    \- Create your pictures. Each picture will generate a separate character. Its default size will be 5\*3 inches. You can change the size by saying **set size 0.5,0.5** or whatever fraction of the default size you want to have.

    \- Quit **gnuplot**.

    \- Generate a TFM and GF file by running METAFONT on the output of **gnuplot**. Since the picture is quite large (5\*3 in), you will have to use a version of METAFONT that has a value of at least 150000 for memmax. On Unix systems these are conventionally installed under the name bigmf. For the following assume that the command virmf stands for a big version of METAFONT. For example:

    \- Invoke METAFONT:

        virmf '&plain'

    \- Select the output device: At the METAFONT prompt ('\*') type:

        \mode:=CanonCX;     % or whatever printer you use

    \- Optionally select a magnification:

        mag:=1;             % or whatever you wish

    \- Input the **gnuplot**-file:

        input myfigures.mf

    On a typical Unix machine there will usually be a script called "mf" that executes virmf '&plain', so you probably can substitute mf for virmf &plain. This will generate two files: mfput.tfm and mfput.$$$gf (where $$$ indicates the resolution of your device). The above can be conveniently achieved by typing everything on the command line, e.g.: virmf '&plain' ' \\mode:=CanonCX; mag:=1; input myfigures.mf' In this case the output files will be named myfigures.tfm and myfigures.300gf.

    \- Generate a PK file from the GF file using gftopk:

        gftopk myfigures.300gf myfigures.300pk

    The name of the output file for gftopk depends on the DVI driver you use. Ask your local TeX administrator about the naming conventions. Next, either install the TFM and PK files in the appropriate directories, or set your environment variables properly. Usually this involves setting TEXFONTS to include the current directory and doing the same thing for the environment variable that your DVI driver uses (no standard name here...). This step is necessary so that TeX will find the font metric file and your DVI driver will find the PK file.

    \- To include your pictures in your document you have to tell TeX the font:

        \font\gnufigs=myfigures

    Each picture you made is stored in a single character. The first picture is character 0, the second is character 1, and so on... After doing the above step, you can use the pictures just like any other characters. Therefore, to place pictures 1 and 2 centered in your document, all you have to do is:

        \centerline{\gnufigs\char0}
        \centerline{\gnufigs\char1}

    in plain TeX. For LaTeX you can, of course, use the picture environment and place the picture wherever you wish by using the \\makebox and \\put macros.

    This conversion saves you a lot of time once you have generated the font; TeX handles the pictures as characters and uses minimal time to place them, and the documents you make change more often than the pictures do. It also saves a lot of TeX memory. One last advantage of using the METAFONT driver is that the DVI file really remains device independent, because no \\special commands are used as in the eepic and tpic drivers.
- name: Micro
  id: set_show#SECTION0402949000000000000000
  summary: By default the "%c" format specifier for scientific notation used to generate axis tick labels uses a lower case u as a prefix to indicate "micro" (10^-6)
  belongs_to: Set-show
  description: |-
    ## Micro

    By default the "%c" format specifier for scientific notation used to generate axis tick labels uses a lower case u as a prefix to indicate "micro" (10`^`-6). The **set micro** command tells gnuplot to use a different typographic character (unicode U+00B5). The byte sequence used to represent this character depends on the current encoding. See **[format specifiers](set_show#format_specifiers)**, **[encoding](set_show#encoding)**.

    This command is EXPERIMENTAL. Implementation details may change.
- name: Mif
  id: complete_list_terminals#SECTION050140000000000000000
  summary: 'Note: Legacy terminal'
  description: |-
    ## Mif

    Note: Legacy terminal. The **mif** terminal driver produces Frame Maker MIF format version 3.00. It plots in MIF Frames with the size 15\*10 cm, and plot primitives with the same pen will be grouped in the same MIF group. Plot primitives in a **gnuplot** page will be plotted in a MIF Frame, and several MIF Frames are collected in one large MIF Frame. The MIF font used for text is "Times".

    Several options may be set in the MIF 3.00 driver.

    Syntax:

        set terminal mif {color | colour | monochrome} {polyline | vectors}
                         {help | ?}

    **colour** plots lines with line types \>= 0 in colour (MIF sep. 2–7) and **monochrome** plots all line types in black (MIF sep. 0). **polyline** plots curves as continuous curves and **vectors** plots curves as collections of vectors. **help** and **?** print online help on standard error output — both print a short description of the usage; **help** also lists the options.

    Examples:

        set term mif colour polylines    # defaults
        set term mif                     # defaults
        set term mif vectors
        set term mif help
- name: Minussign
  id: set_show#SECTION0402950000000000000000
  summary: Gnuplot uses the C language library routine sprintf() for most formatted input
  belongs_to: Set-show
  description: |-
    ## Minussign

    Gnuplot uses the C language library routine sprintf() for most formatted input. However it also has its own formatting routine **gprintf()** that is used to generate axis tic labels. The C library routine always use a hyphen character (ascii \\055) to indicate a negative number, as in -7. Many people prefer a different typographic minus sign character (unicode U+2212) for this purpose, as in −7. The command

        set minussign

    causes gprintf() to use this minus sign character rather than a hyphen in numeric output. In a utf-8 locale this is the multibyte sequence corresponding to unicode U+2212. In a Window codepage 1252 locale this is the 8-bit character ALT+150 ("en dash"). The **set minussign** command will affect axis tic labels and any labels that are created by explicitly invoking gprintf. It has no effect on other strings that contain a hyphen. See **[gprintf](set_show#gprintf)**.

    Note that this command is ignored when you are using any of the LaTeX terminals, as LaTeX has its own mechanism for handling minus signs. It also is not necessary when using the postscript terminal because the postscript prologue output by gnuplot remaps the ascii hyphen code \\055 to a different glyph named **minus**.

    This command is EXPERIMENTAL. Implementation details may change.

    Example (assumes utf8 locale):

        set minus
        A = -5
        print "A = ",A                 # printed string will contain a hyphen
        print gprintf("A = %g",A)      # printed string will contain character U+2212
        set label "V = -5"             # label will contain a hyphen
        set label sprintf("V = %g",-5) # label will contain a hyphen
        set label gprintf("V = %g",-5) # label will contain character U+2212
- name: Monochrome
  id: set_show#SECTION0402951000000000000000
  summary: The set monochrome command selects an alternative set of linetypes that differ by dot/dash pattern or line width rather than by color
  belongs_to: Set-show
  description: |-
    ## Monochrome

    Syntax:

        set monochrome {linetype N <linetype properties>}

    The **set monochrome** command selects an alternative set of linetypes that differ by dot/dash pattern or line width rather than by color. This command replaces the monochrome option offered by certain terminal types in earlier versions of gnuplot. For backward compatibility these terminal types now implicitly invoke "set monochrome" if their own "mono" option is present. For example,

        set terminal pdf mono

    is equivalent to

        set terminal pdf
        set mono

    Selecting monochrome mode does not prevent you from explicitly drawing lines using RGB or palette colors, but see also **[set palette gray](set_show#set_palette_gray)**. Six monochrome linetypes are defined by default. You can change their properties or add additional monochrome linetypes by using the full form of the command. Changes made to the monochrome linetypes do not affect the color linetypes and vice versa. To restore the usual set of color linetypes, use either **unset monochrome** or **set color**.
- name: Mouse
  id: set_show#SECTION0402952000000000000000
  summary: The command set mouse enables mouse actions for the current interactive terminal
  belongs_to: Set-show
  description: |-
    ## Mouse

    The command **set mouse** enables mouse actions for the current interactive terminal. It is usually enabled by default in interactive mode, but disabled by default if commands are being read from a file.

    There are two mouse modes. The 2D mode works for **plot** commands and for **splot** maps (i.e. **set view** with z-rotation 0, 90, 180, 270 or 360 degrees, including **set view map**). In this mode the mouse position is tracked and you can pan or zoom using the mouse buttons or arrow keys. Some terminals support toggling individual plots on/off by clicking on the corresponding key title or on a separate widget.

    For 3D graphs **splot**, the view and scaling of the graph can be changed with mouse buttons 1 and 2, respectively. A vertical motion of Button 2 with the shift key held down changes the **xyplane**. If additionally to these buttons the modifier \<ctrl\> is held down, the coordinate axes are displayed but the data are suppressed. This is useful for large data sets. Mouse button 3 controls the azimuth of the z axis (see **[set view azimuth](set_show#set_view_azimuth)**).

    Mousing is not available inside multiplot mode. When multiplot is completed using **unset multiplot**, then the mouse will be turned on again but acts only on the most recent plot within the multiplot (like replot does).

    Syntax:

        set mouse {doubleclick <ms>} {nodoubleclick}
                  {{no}zoomcoordinates}
                  {zoomfactors <xmultiplier>, <ymultiplier>}
                  {noruler | ruler {at x,y}}
                  {polardistance{deg|tan} | nopolardistance}
                  {format <string>}
                  {mouseformat <int> | <string> | function <f(x,y)>}
                  {{no}labels {"labeloptions"}}
                  {{no}zoomjump} {{no}verbose}
        unset mouse

    The options **noruler** and **ruler** switch the ruler off and on, the latter optionally setting the origin at the given coordinates. While the ruler is on, the distance in user units from the ruler origin to the mouse is displayed continuously. By default, toggling the ruler has the key binding 'r'.

    The option **polardistance** determines if the distance between the mouse cursor and the ruler is also shown in polar coordinates (distance and angle in degrees or tangent (slope)). This corresponds to the default key binding '5'.

    Choose the option **labels** to define persistent gnuplot labels using Button 2. The default is **nolabels**, which makes Button 2 draw only a temporary label at the mouse position. Labels are drawn with the current setting of **mouseformat**. The **labeloptions** string is passed to the **set label** command. The default is "point pointstyle 1" which will plot a small plus at the label position. Temporary labels will disappear at the next **replot** or mouse zoom operation. Persistent labels can be removed by holding the Ctrl-Key down while clicking Button 2 on the label's point. The threshold for how close you must be to the label is also determined by the **pointsize**.

    If the option **verbose** is turned on the communication commands are shown during execution. This option can also be toggled by hitting **6** in the driver's window. **verbose** is off by default.

    Press 'h' in the driver's window for a short summary of the mouse and key bindings. This will also display user defined bindings or **hotkeys** which can be defined using the **bind** command, see help for **[bind](mouse_input#bind)**. Note, that user defined **hotkeys** may override the default bindings. See also help for **[bind](mouse_input#bind)** and **[label](set_show#label)**.
- name: Mouse Doubleclick
  id: set_show#SECTION0402952100000000000000
  summary: The doubleclick resolution is given in milliseconds and used for Button 1, which copies the current mouse position to the clipboard on some terminals
  belongs_to: Set-show
  description: |-
    ### Doubleclick

    The doubleclick resolution is given in milliseconds and used for Button 1, which copies the current mouse position to the **clipboard** on some terminals. The default value is 300 ms. Setting the value to 0 ms triggers the copy on a single click.
- name: Mouse Format
  id: set_show#SECTION0402952200000000000000
  summary: The set mouse format command specifies a format string for sprintf() which determines how the mouse cursor [x,y] coordinates are printed to the plot window and to the clipboard
  belongs_to: Set-show
  description: |-
    ### Format

    The **set mouse format** command specifies a format string for sprintf() which determines how the mouse cursor \[x,y\] coordinates are printed to the plot window and to the clipboard. The default is "% \#g".

    This setting is superseded by "set mouse mouseformat".
- name: Mouse input
  id: mouse_input
  summary: Many terminals allow interaction with the current plot using the mouse
  description: "# Mouse input\n\nMany terminals allow interaction with the current plot using the mouse. Some also support the definition of hotkeys to activate pre-defined functions by hitting a single key while the mouse focus is in the active plot window. It is even possible to combine mouse input with **batch** command scripts, by invoking the command **pause mouse** and then using the mouse variables returned by mouse clicking as parameters for subsequent scripted actions. See **[bind](mouse_input#bind)** and **[mouse variables](mouse_input#mouse_variables)**. See also the command **[set mouse](set_show#set_mouse)**.\n\n## Bind\n\nSyntax:\n\n    bind {allwindows} [<key-sequence>] [\"<gnuplot commands>\"]\n    bind <key-sequence> \"\"\n    reset bind\n\nThe **bind** allows defining or redefining a hotkey, i.e. a sequence of gnuplot commands which will be executed when a certain key or key sequence is pressed while the driver's window has the input focus. Note that **bind** is only available if gnuplot was compiled with **mouse** support and it is used by all mouse-capable terminals. A user-specified binding supersedes any builtin bindings, except that \\<space\\> and 'q' cannot normally be rebound. For an exception, see **[bind space](mouse_input#bind_space)**.\n\nOnly mouse button 1 can be bound, and only for 2D plots.\n\nYou get the list of all hotkeys by typing **show bind** or **bind** or by typing the hotkey 'h' in the graph window.\n\nKey bindings are restored to their default state by **reset bind**.\n\nNote that multikey-bindings with modifiers must be given in quotes.\n\nNormally hotkeys are only recognized when the currently active plot window has focus. **bind allwindows \\<key\\> ...** (short form: **bind all \\<key\\> ...**) causes the binding for \\<key\\> to apply to all gnuplot plot windows, active or not. In this case gnuplot variable MOUSE_KEY_WINDOW is set to the ID of the originating window, and may be used by the bound command.\n\nExamples:\n\n\\- set bindings:\n\n    bind a \"replot\"\n    bind \"ctrl-a\" \"plot x*x\"\n    bind \"ctrl-alt-a\" 'print \"great\"'\n    bind Home \"set view 60,30; replot\"\n    bind all Home 'print \"This is window \",MOUSE_KEY_WINDOW'\n\n\\- show bindings:\n\n    bind \"ctrl-a\"          # shows the binding for ctrl-a\n    bind                   # shows all bindings\n    show bind              # show all bindings\n\n\\- remove bindings:\n\n    bind \"ctrl-alt-a\" \"\"   # removes binding for ctrl-alt-a\n                             (note that builtins cannot be removed)\n    reset bind             # installs default (builtin) bindings\n\n\\- bind a key to toggle something:\n\n    v=0\n    bind \"ctrl-r\" \"v=v+1;if(v%2)set term x11 noraise; else set term x11 raise\"\n\nModifiers (ctrl / alt) are case insensitive, keys not:\n\n    ctrl-alt-a == CtRl-alT-a\n    ctrl-alt-a != ctrl-alt-A\n\nList of modifiers (alt == meta):\n\n    ctrl, alt, shift (only valid for Button1 Button2 Button3)\n\nList of supported special keys:\n\n    \"BackSpace\", \"Tab\", \"Linefeed\", \"Clear\", \"Return\", \"Pause\", \"Scroll_Lock\",\n    \"Sys_Req\", \"Escape\", \"Delete\", \"Home\", \"Left\", \"Up\", \"Right\", \"Down\",\n    \"PageUp\", \"PageDown\", \"End\", \"Begin\",\n\n    \"KP_Space\", \"KP_Tab\", \"KP_Enter\", \"KP_F1\", \"KP_F2\", \"KP_F3\", \"KP_F4\",\n    \"KP_Home\", \"KP_Left\", \"KP_Up\", \"KP_Right\", \"KP_Down\", \"KP_PageUp\",\n    \"KP_PageDown\", \"KP_End\", \"KP_Begin\", \"KP_Insert\", \"KP_Delete\", \"KP_Equal\",\n    \"KP_Multiply\", \"KP_Add\", \"KP_Separator\", \"KP_Subtract\", \"KP_Decimal\",\n    \"KP_Divide\",\n\n    \"KP_1\" - \"KP_9\", \"F1\" - \"F12\"\n\nThe following are window events rather than actual keys\n\n    \"Button1\" \"Button2\" \"Button3\" \"Close\"\n\nSee also help for **[mouse](set_show#mouse)**.\n\n### Bind space\n\nIf gnuplot was built with configuration option –enable-raise-console, then typing \\<space\\> in the plot window raises gnuplot's command window. This hotkey can be changed to ctrl-space by starting gnuplot as 'gnuplot -ctrlq', or by setting the XResource 'gnuplot\\*ctrlq'. See **[x11 command-line-options](complete_list_terminals#x11_command-line-options)**.\n\n## Mouse variables\n\nWhen **mousing** is active, clicking in the active window will set several user variables that can be accessed from the gnuplot command line. The coordinates of the mouse at the time of the click are stored in MOUSE_X MOUSE_Y MOUSE_X2 and MOUSE_Y2. The mouse button clicked, and any meta-keys active at that time, are stored in MOUSE_BUTTON MOUSE_SHIFT MOUSE_ALT and MOUSE_CTRL. These variables are set to undefined at the start of every plot, and only become defined in the event of a mouse click in the active plot window. To determine from a script if the mouse has been clicked in the active plot window, it is sufficient to test for any one of these variables being defined.\n\n    plot 'something'\n    pause mouse\n    if (exists(\"MOUSE_BUTTON\")) call 'something_else'; \\\n    else print \"No mouse click.\"\n\nIt is also possible to track keystrokes in the plot window using the mousing code.\n\n    plot 'something'\n    pause mouse keypress\n    print \"Keystroke \", MOUSE_KEY, \" at \", MOUSE_X, \" \", MOUSE_Y\n\nWhen **pause mouse keypress** is terminated by a keypress, then MOUSE_KEY will contain the ascii character value of the key that was pressed. MOUSE_CHAR will contain the character itself as a string variable. If the pause command is terminated abnormally (e.g. by ctrl-C or by externally closing the plot window) then MOUSE_KEY will equal -1.\n\nNote that after a zoom by mouse, you can read the new ranges as GPVAL_X_MIN, GPVAL_X_MAX, GPVAL_Y_MIN, and GPVAL_Y_MAX, see **[gnuplot-defined variables](expressions#gnuplot-defined_variables)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Mouse input Bind
  id: mouse_input#SECTION020231000000000000000
  summary: The bind allows defining or redefining a hotkey, i.e
  belongs_to: Mouse input
  description: |-
    ## Bind

    Syntax:

        bind {allwindows} [<key-sequence>] ["<gnuplot commands>"]
        bind <key-sequence> ""
        reset bind

    The **bind** allows defining or redefining a hotkey, i.e. a sequence of gnuplot commands which will be executed when a certain key or key sequence is pressed while the driver's window has the input focus. Note that **bind** is only available if gnuplot was compiled with **mouse** support and it is used by all mouse-capable terminals. A user-specified binding supersedes any builtin bindings, except that \<space\> and 'q' cannot normally be rebound. For an exception, see **[bind space](mouse_input#bind_space)**.

    Only mouse button 1 can be bound, and only for 2D plots.

    You get the list of all hotkeys by typing **show bind** or **bind** or by typing the hotkey 'h' in the graph window.

    Key bindings are restored to their default state by **reset bind**.

    Note that multikey-bindings with modifiers must be given in quotes.

    Normally hotkeys are only recognized when the currently active plot window has focus. **bind allwindows \<key\> ...** (short form: **bind all \<key\> ...**) causes the binding for \<key\> to apply to all gnuplot plot windows, active or not. In this case gnuplot variable MOUSE_KEY_WINDOW is set to the ID of the originating window, and may be used by the bound command.

    Examples:

    \- set bindings:

        bind a "replot"
        bind "ctrl-a" "plot x*x"
        bind "ctrl-alt-a" 'print "great"'
        bind Home "set view 60,30; replot"
        bind all Home 'print "This is window ",MOUSE_KEY_WINDOW'

    \- show bindings:

        bind "ctrl-a"          # shows the binding for ctrl-a
        bind                   # shows all bindings
        show bind              # show all bindings

    \- remove bindings:

        bind "ctrl-alt-a" ""   # removes binding for ctrl-alt-a
                                 (note that builtins cannot be removed)
        reset bind             # installs default (builtin) bindings

    \- bind a key to toggle something:

        v=0
        bind "ctrl-r" "v=v+1;if(v%2)set term x11 noraise; else set term x11 raise"

    Modifiers (ctrl / alt) are case insensitive, keys not:

        ctrl-alt-a == CtRl-alT-a
        ctrl-alt-a != ctrl-alt-A

    List of modifiers (alt == meta):

        ctrl, alt, shift (only valid for Button1 Button2 Button3)

    List of supported special keys:

        "BackSpace", "Tab", "Linefeed", "Clear", "Return", "Pause", "Scroll_Lock",
        "Sys_Req", "Escape", "Delete", "Home", "Left", "Up", "Right", "Down",
        "PageUp", "PageDown", "End", "Begin",

        "KP_Space", "KP_Tab", "KP_Enter", "KP_F1", "KP_F2", "KP_F3", "KP_F4",
        "KP_Home", "KP_Left", "KP_Up", "KP_Right", "KP_Down", "KP_PageUp",
        "KP_PageDown", "KP_End", "KP_Begin", "KP_Insert", "KP_Delete", "KP_Equal",
        "KP_Multiply", "KP_Add", "KP_Separator", "KP_Subtract", "KP_Decimal",
        "KP_Divide",

        "KP_1" - "KP_9", "F1" - "F12"

    The following are window events rather than actual keys

        "Button1" "Button2" "Button3" "Close"

    See also help for **[mouse](set_show#mouse)**.
- name: Mouse input Bind Bind space
  id: mouse_input#SECTION020231100000000000000
  summary: If gnuplot was built with configuration option –enable-raise-console, then typing <space> in the plot window raises gnuplot's command window
  belongs_to: Mouse input
  description: |-
    ### Bind space

    If gnuplot was built with configuration option –enable-raise-console, then typing \<space\> in the plot window raises gnuplot's command window. This hotkey can be changed to ctrl-space by starting gnuplot as 'gnuplot -ctrlq', or by setting the XResource 'gnuplot\*ctrlq'. See **[x11 command-line-options](complete_list_terminals#x11_command-line-options)**.
- name: Mouse input Mouse variables
  id: mouse_input#SECTION020232000000000000000
  summary: When mousing is active, clicking in the active window will set several user variables that can be accessed from the gnuplot command line
  belongs_to: Mouse input
  description: "## Mouse variables\n\nWhen **mousing** is active, clicking in the active window will set several user variables that can be accessed from the gnuplot command line. The coordinates of the mouse at the time of the click are stored in MOUSE_X MOUSE_Y MOUSE_X2 and MOUSE_Y2. The mouse button clicked, and any meta-keys active at that time, are stored in MOUSE_BUTTON MOUSE_SHIFT MOUSE_ALT and MOUSE_CTRL. These variables are set to undefined at the start of every plot, and only become defined in the event of a mouse click in the active plot window. To determine from a script if the mouse has been clicked in the active plot window, it is sufficient to test for any one of these variables being defined.\n\n    plot 'something'\n    pause mouse\n    if (exists(\"MOUSE_BUTTON\")) call 'something_else'; \\\n    else print \"No mouse click.\"\n\nIt is also possible to track keystrokes in the plot window using the mousing code.\n\n    plot 'something'\n    pause mouse keypress\n    print \"Keystroke \", MOUSE_KEY, \" at \", MOUSE_X, \" \", MOUSE_Y\n\nWhen **pause mouse keypress** is terminated by a keypress, then MOUSE_KEY will contain the ascii character value of the key that was pressed. MOUSE_CHAR will contain the character itself as a string variable. If the pause command is terminated abnormally (e.g. by ctrl-C or by externally closing the plot window) then MOUSE_KEY will equal -1.\n\nNote that after a zoom by mouse, you can read the new ranges as GPVAL_X_MIN, GPVAL_X_MAX, GPVAL_Y_MIN, and GPVAL_Y_MAX, see **[gnuplot-defined variables](expressions#gnuplot-defined_variables)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Mouse Scrolling
  id: set_show#SECTION0402952400000000000000
  summary: X and Y axis scaling in both 2D and 3D graphs can be adjusted using the mouse wheel
  belongs_to: Set-show
  description: |-
    ### Scrolling

    X and Y axis scaling in both 2D and 3D graphs can be adjusted using the mouse wheel. \<wheel-up\> scrolls up (increases both YMIN and YMAX by ten percent of the Y range, and increases both Y2MIN and Y2MAX likewise), and \<wheel down\> scrolls down. \<shift-wheel-up\> scrolls left (decreases both XMIN and XMAX, and both X2MIN and X2MAX), and \<shift-wheel-down\> scrolls right. \<control-wheel-up\> zooms in toward the center of the plot, and \<control-wheel-down\> zooms out. \<shift-control-wheel-up\> zooms in along the X and X2 axes only, and \<shift-control-wheel-down\> zooms out along the X and X2 axes only.
- name: Mouse X11 mouse
  id: set_show#SECTION0402952500000000000000
  summary: If multiple X11 plot windows have been opened using the set term x11 <n> terminal option, then only the current plot window supports the entire range of mouse commands and hotkeys
  belongs_to: Set-show
  description: |-
    ### X11 mouse

    If multiple X11 plot windows have been opened using the **set term x11 \<n\>** terminal option, then only the current plot window supports the entire range of mouse commands and hotkeys. The other windows will, however, continue to display mouse coordinates at the lower left.
- name: Mouse Zoom
  id: set_show#SECTION0402952600000000000000
  summary: Zooming is usually accomplished by holding down the left mouse button and dragging the mouse to delineate a zoom region
  belongs_to: Set-show
  description: |-
    ### Zoom

    Zooming is usually accomplished by holding down the left mouse button and dragging the mouse to delineate a zoom region. Some platforms may require using a different mouse button. The original plot can be restored by typing the 'u' hotkey in the plot window. The hotkeys 'p' and 'n' step back and forth through a history of zoom operations.

    The option **zoomcoordinates** determines if the coordinates of the zoom box are drawn at the edges while zooming. This is on by default.

    If the option **zoomjump** is on, the mouse pointer will be automatically offset a small distance after starting a zoom region with button 3. This can be useful to avoid a tiny (or even empty) zoom region. **zoomjump** is off by default.
- name: Mouseformat
  id: set_show#SECTION0402952300000000000000
  summary: This command controls the format used to report the current mouse position
  belongs_to: Set-show
  description: |-
    ### Mouseformat

    Syntax:

        set mouse mouseformat i
        set mouse mouseformat "custom format"
        set mouse mouseformat function string_valued_function(x, y)

    This command controls the format used to report the current mouse position. An integer argument selects one of the format options in the table below. A string argument is used as a format for sprintf() in option 7 and should contain two float specifiers, one for x and one for y.

    Use of a custom function returning a string is EXPERIMENTAL. It allows readout of coordinate systems in which inverse mapping from screen coordinates to plot coordinates requires joint consideration of both x and y. See for example the map_projection demo.

    Example:

        `set mouse mouseformat "mouse x,y = %5.2g, %10.3f"`.

    Use **set mouse mouseformat ""** to turn this string off again.

    The following formats are available:

        0   default (same as 1)
        1   axis coordinates                    1.23, 2.45
        2   graph coordinates (from 0 to 1)    /0.00, 1.00/
        3   x = timefmt     y = axis           [(as set by `set timefmt`), 2.45]
        4   x = date        y = axis           [31. 12. 1999, 2.45]
        5   x = time        y = axis           [23:59, 2.45]
        6   x = date time   y = axis           [31. 12. 1999 23:59, 2.45]
        7   format from `set mouse mouseformat <format-string>`
        8   format from `set mouse mouseformat function <func>`
- name: Mp
  id: complete_list_terminals#SECTION050141000000000000000
  summary: The mp driver produces output intended to be input to the Metapost program
  description: |-
    ## Mp

    The **mp** driver produces output intended to be input to the Metapost program. Running Metapost on the file creates EPS files containing the plots. By default, Metapost passes all text through TeX. This has the advantage of allowing essentially any TeX symbols in titles and labels.

    Syntax:

        set term mp {color | colour | monochrome}
                    {solid | dashed}
                    {notex | tex | latex}
                    {magnification <magsize>}
                    {psnfss | psnfss-version7 | nopsnfss}
                    {prologues <value>}
                    {a4paper}
                    {amstex}
                    {"<fontname> {,<fontsize>}"}

    The option **color** causes lines to be drawn in color (on a printer or display that supports it), **monochrome** (or nothing) selects black lines. The option **solid** draws solid lines, while **dashed** (or nothing) selects lines with different patterns of dashes. If **solid** is selected but **color** is not, nearly all lines will be identical. This may occasionally be useful, so it is allowed.

    The option **notex** bypasses TeX entirely, therefore no TeX code can be used in labels under this option. This is intended for use on old plot files or files that make frequent use of common characters like **$** and **%** that require special handling in TeX.

    The option **tex** sets the terminal to output its text for TeX to process.

    The option **latex** sets the terminal to output its text for processing by LaTeX. This allows things like \\frac for fractions which LaTeX knows about but TeX does not. Note that you must set the environment variable TEX to the name of your LaTeX executable (normally latex) if you use this option or use **mpost –tex=\<name of LaTeX executable\> ...**. Otherwise metapost will try and use TeX to process the text and it won't work.

    Changing font sizes in TeX has no effect on the size of mathematics, and there is no foolproof way to make such a change, except by globally setting a magnification factor. This is the purpose of the **magnification** option. It must be followed by a scaling factor. All text (NOT the graphs) will be scaled by this factor. Use this if you have math that you want at some size other than the default 10pt. Unfortunately, all math will be the same size, but see the discussion below on editing the MP output. **mag** will also work under **notex** but there seems no point in using it as the font size option (below) works as well.

    The option **psnfss** uses postscript fonts in combination with LaTeX. Since this option only makes sense, if LaTeX is being used, the **latex** option is selected automatically. This option includes the following packages for LaTeX: inputenc(latin1), fontenc(T1), mathptmx, helvet(scaled=09.2), courier, latexsym and textcomp.

    The option **psnfss-version7** uses also postscript fonts in LaTeX (option **latex** is also automatically selected), but uses the following packages with LaTeX: inputenc(latin1), fontenc(T1), times, mathptmx, helvet and courier.

    The option **nopsnfss** is the default and uses the standard font (cmr10 if not otherwise specified).

    The option **prologues** takes a value as an additional argument and adds the line **prologues:=\<value\>** to the metapost file. If a value of **2** is specified metapost uses postscript fonts to generate the eps-file, so that the result can be viewed using e.g. ghostscript. Normally the output of metapost uses TeX fonts and therefore has to be included in a (La)TeX file before you can look at it.

    The option **noprologues** is the default. No additional line specifying the prologue will be added.

    The option **a4paper** adds a **\[a4paper\]** to the documentclass. Normally letter paper is used (default). Since this option is only used in case of LaTeX, the **latex** option is selected automatically.

    The option **amstex** automatically selects the **latex** option and includes the following LaTeX packages: amsfonts, amsmath(intlimits). By default these packages are not included.

    A name in quotes selects the font that will be used when no explicit font is given in a **set label** or **set title**. A name recognized by TeX (a TFM file exists) must be used. The default is "cmr10" unless **notex** is selected, then it is "pcrr8r" (Courier). Even under **notex**, a TFM file is needed by Metapost. The file **pcrr8r.tfm** is the name given to Courier in LaTeX's psnfss package. If you change the font from the **notex** default, choose a font that matches the ASCII encoding at least in the range 32-126. **cmtt10** almost works, but it has a nonblank character in position 32 (space).

    The size can be any number between 5.0 and 99.99. If it is omitted, 10.0 is used. It is advisable to use **magstep** sizes: 10 times an integer or half-integer power of 1.2, rounded to two decimals, because those are the most available sizes of fonts in TeX systems.

    All the options are optional. If font information is given, it must be at the end, with size (if present) last. The size is needed to select a size for the font, even if the font name includes size information. For example, **set term mp "cmtt12"** selects cmtt12 shrunk to the default size 10. This is probably not what you want or you would have used cmtt10.

    The following common ascii characters need special treatment in TeX:

        $, &, #, %, _;  |, <, >;  ^, ~,  \, {, and }

    The five characters $, \#, &, \_, and % can simply be escaped, e.g., **\\$**. The three characters \<, \>, and \| can be wrapped in math mode, e.g., **$\<$**. The remainder require some TeX work-arounds. Any good book on TeX will give some guidance.

    If you type your labels inside double quotes, backslashes in TeX code need to be escaped (doubled). Using single quotes will avoid having to do this, but then you cannot use **\\n** for line breaks. As of this writing, version 3.7 of gnuplot processes titles given in a **plot** command differently than in other places, and backslashes in TeX commands need to be doubled regardless of the style of quotes.

    Metapost pictures are typically used in TeX documents. Metapost deals with fonts pretty much the same way TeX does, which is different from most other document preparation programs. If the picture is included in a LaTeX document using the graphics package, or in a plainTeX document via epsf.tex, and then converted to PostScript with dvips (or other dvi-to-ps converter), the text in the plot will usually be handled correctly. However, the text may not appear if you send the Metapost output as-is to a PostScript interpreter.
- name: Mp Metapost Instructions
  id: complete_list_terminals#SECTION050141100000000000000
  summary: '- Create your pictures'
  description: |-
    ### Metapost Instructions

    \- Set your terminal to Metapost, e.g.:

        set terminal mp mono "cmtt12" 12

    \- Select an output-file, e.g.:

        set output "figure.mp"

    \- Create your pictures. Each plot (or multiplot group) will generate a separate Metapost beginfig...endfig group. Its default size will be 5 by 3 inches. You can change the size by saying **set size 0.5,0.5** or whatever fraction of the default size you want to have.

    \- Quit gnuplot.

    \- Generate EPS files by running Metapost on the output of gnuplot:

        mpost figure.mp  OR  mp figure.mp

    The name of the Metapost program depends on the system, typically **mpost** for a Unix machine and **mp** on many others. Metapost will generate one EPS file for each picture.

    \- To include your pictures in your document you can use the graphics package in LaTeX or epsf.tex in plainTeX:

        \usepackage{graphics} % LaTeX
        \input epsf.tex       % plainTeX

    If you use a driver other than dvips for converting TeX DVI output to PS, you may need to add the following line in your LaTeX document:

        \DeclareGraphicsRule{*}{eps}{*}{}

    Each picture you made is in a separate file. The first picture is in, e.g., figure.0, the second in figure.1, and so on.... To place the third picture in your document, for example, all you have to do is:

        \includegraphics{figure.2} % LaTeX
        \epsfbox{figure.2}         % plainTeX

    The advantage, if any, of the mp terminal over a postscript terminal is editable output. Considerable effort went into making this output as clean as possible. For those knowledgeable in the Metapost language, the default line types and colors can be changed by editing the arrays **lt\[\]** and **col\[\]**. The choice of solid vs dashed lines, and color vs black lines can be change by changing the values assigned to the booleans **dashedlines** and **colorlines**. If the default **tex** option was in effect, global changes to the text of labels can be achieved by editing the **vebatimtex...etex** block. In particular, a LaTeX preamble can be added if desired, and then LaTeX's built-in size changing commands can be used for maximum flexibility. Be sure to set the appropriate MP configuration variable to force Metapost to run LaTeX instead of plainTeX.
- name: Mttics
  id: set_show#SECTION0402953000000000000000
  summary: Minor tic marks around the perimeter of a polar plot are controlled by by set mttics
  belongs_to: Set-show
  description: |-
    ## Mttics

    Minor tic marks around the perimeter of a polar plot are controlled by by **set mttics**. Please see **[set mxtics](set_show#set_mxtics)**.
- name: Multi-branch
  id: fit#SECTION04095000000000000000
  summary: In multi-branch fitting, multiple data sets can be simultaneously fit with functions of one independent variable having common parameters by minimizing the total WSSR
  belongs_to: Fit
  description: |-
    ## Multi-branch

    In multi-branch fitting, multiple data sets can be simultaneously fit with functions of one independent variable having common parameters by minimizing the total WSSR. The function and parameters (branch) for each data set are selected by using a 'pseudo-variable', e.g., either the dataline number (a 'column' index of -1) or the datafile index (-2), as the second independent variable.

    Example: Given two exponential decays of the form, z=f(x), each describing a different data set but having a common decay time, estimate the values of the parameters. If the datafile has the format x:z:s, then

        f(x,y) = (y==0) ? a*exp(-x/tau) : b*exp(-x/tau)
        fit f(x,y) 'datafile' using  1:-2:2:3  via a, b, tau

    For a more complicated example, see the file "hexa.fnc" used by the "fit.dem" demo.

    Appropriate weighting may be required since unit weights may cause one branch to predominate if there is a difference in the scale of the dependent variable. Fitting each branch separately, using the multi-branch solution as initial values, may give an indication as to the relative effect of each branch on the joint solution.
- name: Multiple keys
  id: set_show#SECTION0402938700000000000000
  summary: It is possible to construct a legend/key manually rather than having the plot titles all appear in the auto-generated key
  belongs_to: Set-show
  description: |-
    ### Multiple keys

    It is possible to construct a legend/key manually rather than having the plot titles all appear in the auto-generated key. This allows, for example, creating a single legend for the component panels in a multiplot. Here is an example:

        set multiplot layout 3,2 columnsfirst
        set style data boxes
        plot $D using 0:6  lt 1 title at 0.75, 0.20
        plot $D using 0:12 lt 2 title at 0.75, 0.17
        plot $D using 0:13 lt 3 title at 0.75, 0.14
        plot $D using 0:14 lt 4 title at 0.75, 0.11
        set label 1 at screen 0.75, screen 0.22 "Custom combined key area"
        plot $D using 0:($6+$12+$13+$14) with linespoints title "total"
        unset multiplot
- name: Multiplot
  id: set_show#SECTION0402954000000000000000
  summary: The command set multiplot places gnuplot in the multiplot mode, in which several plots are placed next to each other on the same page or screen window
  belongs_to: Set-show
  description: |-
    ## Multiplot

    The command **set multiplot** places **gnuplot** in the multiplot mode, in which several plots are placed next to each other on the same page or screen window.

    Syntax:

        set multiplot
            { title <page title> {font <fontspec>} {enhanced|noenhanced} }
            { layout <rows>,<cols>
              {rowsfirst|columnsfirst} {downwards|upwards}
              {scale <xscale>{,<yscale>}} {offset <xoff>{,<yoff>}}
              {margins <left>,<right>,<bottom>,<top>}
              {spacing <xspacing>{,<yspacing>}}
            }
        set multiplot {next|previous}
        unset multiplot

    For some terminals, no plot is displayed until the command **unset multiplot** is given, which causes the entire page to be drawn and then returns gnuplot to its normal single-plot mode. For other terminals, each separate **plot** command produces an updated display.

    The **clear** command is used to erase the rectangular area of the page that will be used for the next plot. This is typically needed to inset a small plot inside a larger plot.

    Any labels or arrows that have been defined will be drawn for each plot according to the current size and origin (unless their coordinates are defined in the **screen** system). Just about everything else that can be **set** is applied to each plot, too. If you want something to appear only once on the page, for instance a single time stamp, you'll need to put a **set time**/**unset time** pair around one of the **plot**, **splot** or **replot** commands within the **set multiplot**/**unset multiplot** block.

    The multiplot title is separate from the individual plot titles, if any. Space is reserved for it at the top of the page, spanning the full width of the canvas.

    The commands **set origin** and **set size** must be used to correctly position each plot if no layout is specified or if fine tuning is desired. See **[set origin](set_show#set_origin)** and **[set size](set_show#set_size)** for details of their usage.

    Example:

        set multiplot
        set size 0.4,0.4
        set origin 0.1,0.1
        plot sin(x)
        set size 0.2,0.2
        set origin 0.5,0.5
        plot cos(x)
        unset multiplot

    This displays a plot of cos(x) stacked above a plot of sin(x).

    **set size** and **set origin** refer to the entire plotting area used for each plot. Please also see **[set term size](canvas_size#set_term_size)**. If you want to have the axes themselves line up, you can guarantee that the margins are the same size with the **set margin** commands. See **[set margin](set_show#set_margin)** for their use. Note that the margin settings are absolute, in character units, so the appearance of the graph in the remaining space will depend on the screen size of the display device, e.g., perhaps quite different on a video display and a printer.

    With the **layout** option you can generate simple multiplots without having to give the **set size** and **set origin** commands before each plot: Those are generated automatically, but can be overridden at any time. With **layout** the display will be divided by a grid with \<rows\> rows and \<cols\> columns. This grid is filled rows first or columns first depending on whether the corresponding option is given in the multiplot command. The stack of plots can grow **downwards** or **upwards**. Default is **rowsfirst** and **downwards**. The commands **set multiplot next** and **set multiplot previous** are relevant only in the context of using the layout option. **next** skips the next position in the grid, leaving a blank space. **prev** returns to the grid position immediately preceding the most recently plotted position.

    Each plot can be scaled by **scale** and shifted with **offset**; if the y-values for scale or offset are omitted, the x-value will be used. **unset multiplot** will turn off the automatic layout and restore the values of **set size** and **set origin** as they were before **set multiplot layout**.

    Example:

        set size 1,1
        set origin 0,0
        set multiplot layout 3,2 columnsfirst scale 1.1,0.9
        [ up to 6 plot commands here ]
        unset multiplot

    The above example will produce 6 plots in 2 columns filled top to bottom, left to right. Each plot will have a horizontal size of 1.1/2 and a vertical size of 0.9/3.

    Another possibility is to set uniform margins for all plots in the layout with options **layout margins** and **spacing**, which must be used together. With **margins** you set the outer margins of the whole multiplot grid.

    **spacing** gives the gap size between two adjacent subplots, and can also be given in **character** or **screen** units. If a single value is given, it is used for both x and y direction, otherwise two different values can be selected.

    If one value has no unit, the one of the preceding margin setting is used.

    Example:

        set multiplot layout 2,2 margins 0.1, 0.9, 0.1, 0.9 spacing 0.0

    In this case the two left-most subplots will have left boundaries at screen coordinate 0.1, the two right-most subplots will have right boundaries at screen coordinate 0.9, and so on. Because the spacing between subplots is given as 0, their inner boundaries will superimpose.

    Example:

        set multiplot layout 2,2 margins char 5,1,1,2 spacing screen 0, char 2

    This produces a layout in which the boundary of both left subplots is 5 character widths from the left edge of the canvas, the right boundary of the right subplots is 1 character width from the canvas edge. The overall bottom margin is one character height and the overall top margin is 2 character heights. There is no horizontal gap between the two columns of subplots. The vertical gap between subplots is equal to 2 character heights.

    Example:

        set multiplot layout 2,2 columnsfirst margins 0.1,0.9,0.1,0.9 spacing 0.1
        set ylabel 'ylabel'
        plot sin(x)
        set xlabel 'xlabel'
        plot cos(x)
        unset ylabel
        unset xlabel
        plot sin(2*x)
        set xlabel 'xlabel'
        plot cos(2*x)
        unset multiplot

    See also [multiplot demo (multiplt.dem) ](http://www.gnuplot.info/demo/multiplt.html)
- name: Mx2tics
  id: set_show#SECTION0402955000000000000000
  summary: Minor tic marks along the x2 (top) axis are controlled by set mx2tics
  belongs_to: Set-show
  description: |-
    ## Mx2tics

    Minor tic marks along the x2 (top) axis are controlled by **set mx2tics**. Please see **[set mxtics](set_show#set_mxtics)**.
- name: Mxtics
  id: set_show#SECTION0402956000000000000000
  summary: Minor tic marks along the x axis are controlled by set mxtics
  belongs_to: Set-show
  description: |-
    ## Mxtics

    Minor tic marks along the x axis are controlled by **set mxtics**. They can be turned off with **unset mxtics**. Similar commands control minor tics along the other axes.

    Syntax:

        set mxtics {<freq> | default}
        unset mxtics
        show mxtics

    The same syntax applies to **mytics**, **mztics**, **mx2tics**, **my2tics**, **mrtics**, **mttics** and **mcbtics**.

    \<freq\> is the number of sub-intervals (NOT the number of minor tics) between major tics (the default for a linear axis is either two or five depending on the major tics, so there are one or four minor tics between major tics). Selecting **default** will return the number of minor ticks to its default value.

    If the axis is logarithmic, the number of sub-intervals will be set to a reasonable number by default (based upon the length of a decade). This will be overridden if \<freq\> is given. However the usual minor tics (2, 3, ..., 8, 9 between 1 and 10, for example) are obtained by setting \<freq\> to 10, even though there are but nine sub-intervals.

    To set minor tics at arbitrary positions, use the ("\<label\>" \<pos\> \<level\>, ...) form of **set {x\|x2\|y\|y2\|z}tics** with \<label\> empty and \<level\> set to 1.

    The **set m{x\|x2\|y\|y2\|z}tics** commands work only when there are uniformly spaced major tics. If all major tics were placed explicitly by **set {x\|x2\|y\|y2\|z}tics**, then minor tic commands are ignored. Implicit major tics and explicit minor tics can be combined using **set {x\|x2\|y\|y2\|z}tics** and **set {x\|x2\|y\|y2\|z}tics add**.

    Examples:

        set xtics 0, 5, 10
        set xtics add (7.5)
        set mxtics 5

    Major tics at 0,5,7.5,10, minor tics at 1,2,3,4,6,7,8,9

        set logscale y
        set ytics format ""
        set ytics 1e-6, 10, 1
        set ytics add ("1" 1, ".1" 0.1, ".01" 0.01, "10^-3" 0.001, \
                       "10^-4" 0.0001)
        set mytics 10

    Major tics with special formatting, minor tics at log positions

    By default, minor tics are off for linear axes and on for logarithmic axes. They inherit the settings for **axis\|border** and **{no}mirror** specified for the major tics. Please see **[set xtics](set_show#set_xtics)** for information about these.
- name: My2tics
  id: set_show#SECTION0402957000000000000000
  summary: Minor tic marks along the y2 (right-hand) axis are controlled by set my2tics
  belongs_to: Set-show
  description: |-
    ## My2tics

    Minor tic marks along the y2 (right-hand) axis are controlled by **set my2tics**. Please see **[set mxtics](set_show#set_mxtics)**.
- name: Mytics
  id: set_show#SECTION0402958000000000000000
  summary: Minor tic marks along the y axis are controlled by set mytics
  belongs_to: Set-show
  description: |-
    ## Mytics

    Minor tic marks along the y axis are controlled by **set mytics**. Please see **[set mxtics](set_show#set_mxtics)**.
- name: Mztics
  id: set_show#SECTION0402959000000000000000
  summary: Minor tic marks along the z axis are controlled by set mztics
  belongs_to: Set-show
  description: |-
    ## Mztics

    Minor tic marks along the z axis are controlled by **set mztics**. Please see **[set mxtics](set_show#set_mxtics)**.
- name: Nonlinear
  id: set_show#SECTION0402960000000000000000
  summary: This command is similar to the set link command except that only one of the two linked axes is visible
  belongs_to: Set-show
  description: |-
    ## Nonlinear

    Syntax:

        set nonlinear <axis> via f(axis) inverse g(axis)
        unset nonlinear <axis>

    This command is similar to the **set link** command except that only one of the two linked axes is visible. The hidden axis remains linear. Coordinates along the visible axis are mapped by applying g(x) to hidden axis coordinates. f(x) maps the visible axis coordinates back onto the hidden linear axis. You must provide both the forward and inverse expressions.

    To illustrate how this works, consider the case of a log-scale x2 axis.

        set x2ange [1:1000]
        set nonlinear x2 via log10(x) inverse 10**x

    This achieves the same effect as **set log x2**. The hidden axis in this case has range \[0:3\], obtained by calculating \[log10(xmin):log10(xmax)\].

    The transformation functions f() and g() must be defined using a dummy variable appropriate to the nonlinear axis:

        axis: x x2   dummy variable x
        axis: y y2   dummy variable y
        axis: z cb   dummy variable z
        axis: r      dummy variable r

    Example:

        set xrange [-3:3]
        set nonlinear x via norm(x) inverse invnorm(x)

    This example establishes a probability-scaled ("probit") x axis, such that plotting the cumulative normal function Phi(x) produces a straight line plot against a linear y axis.

    Example:

        logit(p) = log(p/(1-p))
        logistic(a) = 1. / (1. + exp(-a))
        set xrange [.001 : .999]
        set nonlinear y via logit(y) inverse logistic(y)
        plot logit(x)

    This example establishes a logit-scaled y axis such that plotting logit(x) on a linear x axis produces a straight line plot.

    Example:

        f(x) = (x <= 100) ? x : (x < 500) ? NaN : x-390
        g(x) = (x <= 100) ? x : x+390
        set xrange [0:1000] noextend
        set nonlinear x via f(x) inverse g(x)
        set xtics add (100,500)
        plot sample [x=1:100] x, [x=500:1000] x

    This example creates a "broken axis". X coordinates 0-100 are at the left, X coordinates 500-1000 are at the right, there is a small gap (10 units) between them. So long as no data points with (100 \< x \< 500) are plotted, this works as expected.
- name: Object
  id: set_show#SECTION0402961000000000000000
  summary: The set object command defines a single object which will appear in subsequent plots
  belongs_to: Set-show
  description: |-
    ## Object

    The **set object** command defines a single object which will appear in subsequent plots. You may define as many objects as you like. Currently the supported object types are **rectangle**, **circle**, **ellipse**, and **polygon**. Rectangles inherit a default set of style properties (fill, color, border) from those set by the command **set style rectangle**, but each object can also be given individual style properties. Circles, ellipses, and polygons inherit the fill style from **set style fill**. Objects to be drawn in 2D plots may be defined in any combination of axis, graph, polar, or screen coordinates.

    Object specifications in 3D plots cannot use graph coordinates. Rectangles and ellipses in 3D plots are limited to screen coordinates.

    Syntax:

        set object <index>
            <object-type> <object-properties>
            {front|back|behind|depthorder}
            {clip|noclip}
            {fc|fillcolor <colorspec>} {fs <fillstyle>}
            {default} {lw|linewidth <width>} {dt|dashtype <dashtype>}
        unset object <index>

    \<object-type\> is either **rectangle**, **ellipse**, **circle**, or **polygon**. Each object type has its own set of characteristic properties.

    The options **front**, **back**, **behind** control whether the object is drawn before or after the plot itself. See **[layers](layers#layers)**. Setting **front** will draw the object in front of all plot elements, but behind any labels that are also marked **front**. Setting **back** will place the object behind all plot curves and labels. Setting **behind** will place the object behind everything including the axes and **back** rectangles, thus

        set object rectangle from screen 0,0 to screen 1,1 behind

    can be used to provide a colored background for the entire graph or page.

    By default, objects are clipped to the graph boundary unless one or more vertices are given in screen coordinates. Setting **noclip** will disable clipping to the graph boundary, but will still clip against the screen size.

    The fill color of the object is taken from the \<colorspec\>. **fillcolor** may be abbreviated **fc**. The fill style is taken from \<fillstyle\>. See **[colorspec](linetypes_colors_styles#colorspec)** and **[fillstyle](set_show#fillstyle)**. If the keyword **default** is given, these properties are inherited from the default settings at the time a plot is drawn. See **[set style rectangle](set_show#set_style_rectangle)**.
- name: Object Circle
  id: set_show#SECTION0402961300000000000000
  summary: The position of the circle is specified by giving the position of the center center followed by the radius
  belongs_to: Set-show
  description: |-
    ### Circle

    Syntax:

        set object <index> circle {at|center} <position> size <radius>
            {arc [<begin>:<end>]} {no{wedge}}
            {<other-object-properties>}

    The position of the circle is specified by giving the position of the center center followed by the radius. The keywords **at** and **center** are synonyms. In 2D plots the position and radius may be given in any coordinate system. See **[coordinates](coordinates#coordinates)**. Circles in 3D plots cannot use graph coordinates. In all cases the radius is calculated relative to the horizontal scale of the axis, graph, or canvas. Any disparity between the horizontal and vertical scaling will be corrected for so that the result is always a circle. If you want to draw a circle in plot coordinates (such that it will appear as an ellipse if the horizontal and vertical scales are different), use **set object ellipse** instead.

    By default a full circle is drawn. The optional qualifier **arc** specifies a starting angle and ending angle, in degrees, for one arc of the circle. The arc is always drawn counterclockwise.

    See also **[set style circle](set_show#set_style_circle)**, **[set object ellipse](set_show#set_object_ellipse)**.
- name: Object Ellipse
  id: set_show#SECTION0402961200000000000000
  summary: The position of the ellipse is specified by giving the center followed by the width and the height (actually the major and minor axes)
  belongs_to: Set-show
  description: |-
    ### Ellipse

    Syntax:

        set object <index> ellipse {at|center} <position> size <w>,<h>
            {angle <orientation>} {units xy|xx|yy}
            {<other-object-properties>}

    The position of the ellipse is specified by giving the center followed by the width and the height (actually the major and minor axes). The keywords **at** and **center** are synonyms. The center position may be given in axis, graph, or screen coordinates. See **[coordinates](coordinates#coordinates)**. The major and minor axis lengths must be given in axis coordinates. The orientation of the ellipse is specified by the angle between the horizontal axis and the major diameter of the ellipse. If no angle is given, the default ellipse orientation will be used instead (see **[set style ellipse](set_show#set_style_ellipse)**). The **units** keyword controls the scaling of the axes of the ellipse. **units xy** means that the major axis is interpreted in terms of units along the x axis, while the minor axis in that of the y axis. **units xx** means that both axes of the ellipses are scaled in the units of the x axis, while **units yy** means that both axes are in units of the y axis. The default is **xy** or whatever **set style ellipse units** was set to.

    NB: If the x and y axis scales are not equal, (e.g. **units xy** is in effect) then the major/minor axis ratio will no longer be correct after rotation.

    Note that **set object ellipse size \<2r\>,\<2r\>** does not in general produce the same result as **set object circle \<r\>**. The circle radius is always interpreted in terms of units along the x axis, and will always produce a circle even if the x and y axis scales are different and even if the aspect ratio of your plot is not 1. If **units** is set to **xy**, then 'set object ellipse' interprets the first \<2r\> in terms of x axis units and the second \<2r\> in terms of y axis units. This will only produce a circle if the x and y axis scales are identical and the plot aspect ratio is 1. On the other hand, if **units** is set to **xx** or **yy**, then the diameters specified in the 'set object' command will be interpreted in the same units, so the ellipse will have the correct aspect ratio, and it will maintain its aspect ratio even if the plot is resized.
- name: Object Polygon
  id: set_show#SECTION0402961400000000000000
  summary: The position of the polygon may be specified by giving the position of a sequence of vertices
  belongs_to: Set-show
  description: |-
    ### Polygon

    Syntax:

        set object <index> polygon
            from <position> to <position> ... {to <position>}

    or

        from <position> rto <position> ... {rto <position>}

    The position of the polygon may be specified by giving the position of a sequence of vertices. These may be given in any coordinate system. If relative coordinates are used (rto) then the coordinate type must match that of the previous vertex. See **[coordinates](coordinates#coordinates)**.

    Example:

        set object 1 polygon from 0,0 to 1,1 to 2,0
        set object 1 fc rgb "cyan" fillstyle solid 1.0 border lt -1
- name: Object Polygon Depthorder
  id: set_show#SECTION0402961410000000000000
  summary: The option set object N depthorder applies to 3D polygon objects only
  belongs_to: Set-show
  description: |-
    #### Depthorder

    The option **set object N depthorder** applies to 3D polygon objects only. Rather than assigning the object to layer front/back/behind it is included in the list of pm3d quadrangles sorted and rendered in order of depth by **set pm3d depthorder**. As with pm3d surfaces, two-sided coloring can be generated by specifying the object fillcolor as a linestyle. In this case the ordering of the first three vertices in the polygon determines the "side".

    If you set this property for an object that is not a 3D polygon it probably will not be drawn at all.
- name: Object Rectangle
  id: set_show#SECTION0402961100000000000000
  summary: The position of the rectangle may be specified by giving the position of two diagonal corners (bottom left and top right) or by giving the position of the center followed by the width and the height
  belongs_to: Set-show
  description: |-
    ### Rectangle

    Syntax:

        set object <index> rectangle
            {from <position> {to|rto} <position> |
             center <position> size <w>,<h> |
             at <position> size <w>,<h>}

    The position of the rectangle may be specified by giving the position of two diagonal corners (bottom left and top right) or by giving the position of the center followed by the width and the height. In either case the positions may be given in axis, graph, or screen coordinates. See **[coordinates](coordinates#coordinates)**. The options **at** and **center** are synonyms.

    Examples:

        # Force the entire area enclosed by the axes to have background color cyan
        set object 1 rect from graph 0, graph 0 to graph 1, graph 1 back
        set object 1 rect fc rgb "cyan" fillstyle solid 1.0

        # Position a red square with lower left at 0,0 and upper right at 2,3
        set object 2 rect from 0,0 to 2,3 fc lt 1

        # Position an empty rectangle (no fill) with a blue border
        set object 3 rect from 0,0 to 2,3 fs empty border rgb "blue"

        # Return fill and color to the default style but leave vertices unchanged
        set object 2 rect default

    Rectangle corners specified in screen coordinates may extend beyond the edge of the current graph. Otherwise the rectangle is clipped to fit in the graph.
- name: Offsets
  id: set_show#SECTION0402962000000000000000
  summary: Autoscaling sets the x and y axis ranges to match the coordinates of the data that is plotted
  belongs_to: Set-show
  description: |-
    ## Offsets

    Autoscaling sets the x and y axis ranges to match the coordinates of the data that is plotted. Offsets provide a mechanism to expand these ranges to leave empty space between the data and the plot borders. Autoscaling then further extends each range to reach the next axis tic unless this has been suppressed by **set autoscale noextend** or **set xrange noextend**. See **[noextend](set_show#noextend)**. Offsets affect only scaling for the x1 and y1 axes.

    Syntax:

        set offsets <left>, <right>, <top>, <bottom>
        unset offsets
        show offsets

    Each offset may be a constant or an expression. Each defaults to 0. By default, the left and right offsets are given in units of the first x axis, the top and bottom offsets in units of the first y axis. Alternatively, you may specify the offsets as a fraction of the total graph dimension by using the keyword "graph". Only "graph" offsets are possible for nonlinear axes.

    A positive offset expands the axis range in the specified direction, e.g. a positive bottom offset makes ymin more negative. Negative offsets interact badly with autoscaling and clipping.

    Example:

        set autoscale noextend
        set offsets graph 0.05, 0, 2, 2
        plot sin(x)

    This graph of sin(x) will have y range \[-3:3\] because the function will be autoscaled to \[-1:1\] and the vertical offsets add 2 at each end of the range. The x range will be \[-11:10\] because the default is \[-10:10\] and it has been expanded to the left by 0.05 of that total range.
- name: Operators
  id: expressions#SECTION020164000000000000000
  summary: The operators in gnuplot are the same as the corresponding operators in the C programming language, except that all operators accept integer, real, and complex arguments, unless otherwise noted
  belongs_to: Expressions
  description: |-
    ## Operators

    The operators in **gnuplot** are the same as the corresponding operators in the C programming language, except that all operators accept integer, real, and complex arguments, unless otherwise noted. The \*\* operator (exponentiation) is supported, as in FORTRAN.

    Parentheses may be used to change order of evaluation.
- name: Operators Binary
  id: expressions#SECTION020164200000000000000
  summary: (*) Starred explanations indicate that the operator requires integer arguments
  belongs_to: Expressions
  description: |-
    ### Binary

    The following is a list of all the binary operators and their usages:

    |                  |           |                          |
    |------------------|-----------|--------------------------|
    | Binary Operators |           |                          |
    | Symbol           | Example   | Explanation              |
    | `**`             | `a**b`    | exponentiation           |
    | `*`              | `a*b`     | multiplication           |
    | `/`              | `a/b`     | division                 |
    | `%`              | `a%b`     | \* modulo                |
    | `+`              | `a+b`     | addition                 |
    | `-`              | `a-b`     | subtraction              |
    | `==`             | `a==b`    | equality                 |
    | `!=`             | `a!=b`    | inequality               |
    | `<`              | `a<b`     | less than                |
    | `<=`             | `a<=b`    | less than or equal to    |
    | `>`              | `a>b`     | greater than             |
    | `>=`             | `a>=b`    | greater than or equal to |
    | `<<`             | `0xff<<1` | left shift unsigned      |
    | `>>`             | `0xff>>1` | right shift unsigned     |
    | `&`              | `a&b`     | \* bitwise AND           |
    | `^`              | `a^b`     | \* bitwise exclusive OR  |
    | `|`              | `a|b`     | \* bitwise inclusive OR  |
    | `&&`             | `a&&b`    | \* logical AND           |
    | `||`             | `a||b`    | \* logical OR            |
    | `=`              | `a = b`   | assignment               |
    | `,`              | `(a,b)`   | serial evaluation        |
    | `.`              | `A.B`     | string concatenation     |
    | `eq`             | `A eq B`  | string equality          |
    | `ne`             | `A ne B`  | string inequality        |

    (\*) Starred explanations indicate that the operator requires integer arguments. Capital letters A and B indicate that the operator requires string arguments.

    Logical AND (&&) and OR (\|\|) short-circuit the way they do in C. That is, the second **&&** operand is not evaluated if the first is false; the second **\|\|** operand is not evaluated if the first is true.

    Serial evaluation occurs only in parentheses and is guaranteed to proceed in left to right order. The value of the rightmost subexpression is returned.
- name: Operators Ternary
  id: expressions#SECTION020164300000000000000
  summary: The ternary operator behaves as it does in C
  belongs_to: Expressions
  description: |-
    ### Ternary

    There is a single ternary operator:

    |                  |         |                   |
    |------------------|---------|-------------------|
    | Ternary Operator |         |                   |
    | Symbol           | Example | Explanation       |
    | `?:`             | `a?b:c` | ternary operation |

    The ternary operator behaves as it does in C. The first argument (a), which must be an integer, is evaluated. If it is true (non-zero), the second argument (b) is evaluated and returned; otherwise the third argument (c) is evaluated and returned.

    The ternary operator is very useful both in constructing piecewise functions and in plotting points only when certain conditions are met.

    Examples:

    Plot a function that is to equal sin(x) for 0 \<= x \< 1, 1/x for 1 \<= x \< 2, and undefined elsewhere:

        f(x) = 0<=x && x<1 ? sin(x) : 1<=x && x<2 ? 1/x : 1/0
        plot f(x)

    Note that **gnuplot** quietly ignores undefined values, so the final branch of the function (1/0) will produce no plottable points. Note also that f(x) will be plotted as a continuous function across the discontinuity if a line style is used. To plot it discontinuously, create separate functions for the two pieces. (Parametric functions are also useful for this purpose.)

    For data in a file, plot the average of the data in columns 2 and 3 against the datum in column 1, but only if the datum in column 4 is non-negative:

        plot 'file' using 1:( $4<0 ? 1/0 : ($2+$3)/2 )

    For an explanation of the **using** syntax, please see **[plot datafile using](plot#plot_datafile_using)**.
- name: Operators Unary
  id: expressions#SECTION020164100000000000000
  summary: (*) Starred explanations indicate that the operator requires an integer argument
  belongs_to: Expressions
  description: |-
    ### Unary

    The following is a list of all the unary operators and their usages:

    |                 |         |                                                  |
    |-----------------|---------|--------------------------------------------------|
    | Unary Operators |         |                                                  |
    | Symbol          | Example | Explanation                                      |
    | `-`             | `-a`    | unary minus                                      |
    | `+`             | `+a`    | unary plus (no-operation)                        |
    | `~`             | `~a`    | \* one's complement                              |
    | `!`             | `!a`    | \* logical negation                              |
    | `!`             | `a!`    | \* factorial                                     |
    | `$`             | `$3`    | \* call arg/column during \`using\` manipulation |
    | `|`             | `|A|`   | cardinality of array A                           |

    (\*) Starred explanations indicate that the operator requires an integer argument.

    Operator precedence is the same as in Fortran and C. As in those languages, parentheses may be used to change the order of operation. Thus -2\*\*2 = -4, but (-2)\*\*2 = 4.

    The factorial operator returns an integer when N! is sufficiently small (N \<= 20 for 64-bit integers). It returns a floating point approximation for larger values of N.

    This operator returns the number of elements \|A\| when applied to array A. It returns the number of data lines \|$DATA\| when applied to datablock $DATA.
- name: Origin
  id: set_show#SECTION0402963000000000000000
  summary: The set origin command is used to specify the origin of a plotting surface (i.e., the graph and its margins) on the screen
  belongs_to: Set-show
  description: |-
    ## Origin

    The **set origin** command is used to specify the origin of a plotting surface (i.e., the graph and its margins) on the screen. The coordinates are given in the **screen** coordinate system (see **[coordinates](coordinates#coordinates)** for information about this system).

    Syntax:

        set origin <x-origin>,<y-origin>
- name: Output
  id: set_show#SECTION0402964000000000000000
  summary: By default, screens are displayed to the standard output
  belongs_to: Set-show
  description: |-
    ## Output

    By default, screens are displayed to the standard output. The **set output** command redirects the display to the specified file or device.

    Syntax:

        set output {"<filename>"}
        show output

    The filename must be enclosed in quotes. If the filename is omitted, any output file opened by a previous invocation of **set output** will be closed and new output will be sent to STDOUT. (If you give the command **set output "STDOUT"**, your output may be sent to a file named "STDOUT"! \["May be", not "will be", because some terminals, like **x11** or **wxt**, ignore **set output**.\])

    When both **set terminal** and **set output** are used together, it is safest to give **set terminal** first, because some terminals set a flag which is needed in some operating systems. This would be the case, for example, if the operating system needs a separate open command for binary files.

    On platforms that support pipes, it may be useful to pipe terminal output. For instance,

        set output "|lpr -Plaser filename"
        set term png; set output "|display png:-"

    On MSDOS machines, **set output "PRN"** will direct the output to the default printer. On VMS, output can be sent directly to any spooled device.
- name: Overflow
  id: set_show#SECTION0402965000000000000000
  summary: This version of gnuplot supports 64-bit integer arithmetic
  belongs_to: Set-show
  description: |-
    ## Overflow

    Syntax:

        set overflow {float | NaN | undefined}
        unset overflow

    This version of gnuplot supports 64-bit integer arithmetic. This means that for values from 2`^`53 to 2`^`63 (roughly 10`^`16 to 10`^`19) integer evaluation preserves more precision than evaluation using IEEE 754 floating point arithmetic. However unlike the IEEE floating point representation, which sacrifices precision to span a total range of roughly \[-10`^`307 : 10`^`307\], integer operations that result in values outside the range \[-2`^`63 : 2`^`63\] overflow. The **set overflow** command lets you control what happens in case of overflow. See options below.

    **set overflow** is the same as **set overflow float**. It causes the result to be returned as a real number rather than as an integer. This is the default.

    The command **unset overflow** causes integer arithmetic overflow to be ignored. No error is shown. This may be desirable if your platform allows only 32-bit integer arithmetic and you want to approximate the behaviour of gnuplot versions prior to 5.4.

    The **reset** command does not affect the state of overflow handling.

    Earlier gnuplot versions were limited to 32-bit arithmetic and ignored integer overflow. Note, however, that some built-in operators did not use integer arithmetic at all, even when given integer arguments. This included the exponentiation operator N\*\*M and the summation operator (see **[summation](expressions#summation)**). These operations now return an integer value when given integer arguments, making them potentially susceptible to overflow and thus affected by the state of **set overflow**.
- name: Overflow Affected operations
  id: set_show#SECTION0402965400000000000000
  summary: and the built-in summation operation sum
  belongs_to: Set-show
  description: |-
    ### Affected operations

    The **set overflow** state affects the arithmetic operators

        + - * / **

    and the built-in summation operation **sum**.

    All of these operations will return an integer result if all of the arguments are integers, so long as no overflow occurs during evaluation.

    The **set overflow** state does not affect logical or bit operations

        << >>  | ^ &

    If overflow occurs at any point during the course of evaluating of a summation **set overflow float** will cause the result to be returned as a real number even if the final sum is within the range of integer representation.
- name: Overflow Float
  id: set_show#SECTION0402965100000000000000
  summary: 'If an integer arithmetic expression overflows the limiting range, [-2^63 : 2^63] for 64-bit integers, the result is returned as a floating point value instead'
  belongs_to: Set-show
  description: |-
    ### Float

    If an integer arithmetic expression overflows the limiting range, \[-2`^`63 : 2`^`63\] for 64-bit integers, the result is returned as a floating point value instead. This is not treated as an error. Example:

        gnuplot> set overflow float
        gnuplot> A = 2**62 - 1;  print A, A+A, A+A+A
        4611686018427387903 9223372036854775806 1.38350580552822e+19
- name: Overflow NaN
  id: set_show#SECTION0402965200000000000000
  summary: 'If an integer arithmetic expression overflows the limiting range, [-2^63 : 2^63] for 64-bit integers, the result is returned as NaN (Not a Number)'
  belongs_to: Set-show
  description: |-
    ### NaN

    If an integer arithmetic expression overflows the limiting range, \[-2`^`63 : 2`^`63\] for 64-bit integers, the result is returned as NaN (Not a Number). This is not treated as an error. Example:

        gnuplot> set overflow NaN
        gnuplot> print 10**18, 10**19
        1000000000000000000 NaN
- name: Overflow Undefined
  id: set_show#SECTION0402965300000000000000
  summary: 'If an integer arithmetic expression overflows the limiting range, [-2^63 : 2^63] for 64-bit integers, the result is undefined'
  belongs_to: Set-show
  description: |-
    ### Undefined

    If an integer arithmetic expression overflows the limiting range, \[-2`^`63 : 2`^`63\] for 64-bit integers, the result is undefined. This is treated as an error. Example:

        gnuplot> set overflow undefined
        gnuplot> A = 10**19
                     ^
                 undefined value
- name: Palette
  id: set_show#SECTION0402966000000000000000
  summary: The palette is a set of colors, usually ordered in the form of one or more stepped gradients, used for pm3d surfaces and other graph elements colored by z value
  belongs_to: Set-show
  description: |-
    ## Palette

    The palette is a set of colors, usually ordered in the form of one or more stepped gradients, used for **pm3d** surfaces and other graph elements colored by z value. Colors in the current palette are automatically mapped from plot coordinates z values or an extra data column of gray values. Palette colors also can be accessed explicitly in a color specification (see **[colorspec](linetypes_colors_styles#colorspec)**)

    - as a **gray value** also known as **palette fraction** in the range \[0:1\]
    - as a **z value** corresponding to the z coordinate of a plot element
    - as a **cb value** in the range \[cbmin:cbmax\] (see **[set cbrange](set_show#set_cbrange)**)

    The current palette is shown by default in a separate **colorbox** drawn next to plots that use plot style **pm3d**. The colorbox can be manually selected or disabled. See **[set colorbox](set_show#set_colorbox)**.

    Syntax:

        set palette
        set palette {
                   { gray | color }
                   { gamma <gamma> }
                   {   rgbformulae <r>,<g>,<b>
                     | defined { ( <gray1> <color1> {, <grayN> <colorN>}... ) }
                     | file '<filename>' {datafile-modifiers}
                     | functions <R>,<G>,<B>
                   }
                   { cubehelix {start <val>} {cycles <val>} {saturation <val>} }
                   { model { RGB | HSV | CMY } }
                   { positive | negative }
                   { nops_allcF | ps_allcF }
                   { maxcolors <maxcolors> }
                 }
        show palette
        show palette palette <n> {{float | int}}
        show palette gradient
        show palette fit2rgbformulae
        show palette rgbformulae
        show colornames

    **set palette** (i.e. without options) sets up the default values. Otherwise, the options can be given in any order. **show palette** shows the current palette properties.

    **show palette gradient** displays the gradient defining the palette (if appropriate). **show palette rgbformulae** prints the available fixed gray –\> color transformation formulae. **show colornames** prints the known color names.

    **show palette palette \<n\>** prints to the screen or to the file given by **set print** a table of RGB triplets calculated for the current palette settings and a palette having \<n\> discrete colors. The default wide table can be limited to 3 columns of r,g,b float values \[0..1\] or integer values \[0..255\] by options float or int, respectively. This way, the current gnuplot color palette can be loaded into other imaging applications, for example Octave. Alternatively, the **test palette** command will plot the R,G,B profiles for the current palette and leave the profile values in a datablock $PALETTE.

    The following options determine the coloring properties.

    Figure using this palette can be **gray** or **color**. For instance, in **pm3d** color surfaces the gray of each small spot is obtained by mapping the averaged z-coordinate of the 4 corners of surface quadrangles into the range \[min_z,max_z\] providing range of grays \[0:1\]. This value can be used directly as the gray for gray maps. The color map requires a transformation gray –\> (R,G,B), i.e. a mapping \[0:1\] –\> (\[0:1\],\[0:1\],\[0:1\]).

    Basically two different types of mappings can be used: Analytic formulae to convert gray to color, or discrete mapping tables which are interpolated. **palette rgbformulae** and **palette functions** use analytic formulae whereas **palette defined** and **palette file** use interpolated tables. **palette rgbformulae** reduces the size of postscript output to a minimum.

    The command **show palette fit2rgbformulae** finds the best matching **set palette rgbformulae** for the current **set palette**. Naturally, it makes sense to use it for non-rgbformulae palettes. This command can be found useful mainly for external programs using the same rgbformulae definition of palettes as gnuplot, like zimg ( [http://zimg.sourceforge.net ](http://zimg.sourceforge.net)

    ).

    **set palette gray** switches to a gray only palette. **set palette rgbformulae**, **set palette defined**, **set palette file** and **set palette functions** switch to a color mapping. **set palette color** is an easy way to switch back from the gray palette to the last color mapping.

    Automatic gamma correction via **set palette gamma \<gamma\>** can be done for gray maps (**set palette gray**) and for the **cubehelix** color palette schemes. Gamma = 1 produces a linear ramp of intensity. See **[test palette](test#test_palette)**.

    Many terminals support only discrete number of colors (e.g. 256 colors in gif). After the default gnuplot linetype colors are allocated, the rest of the available colors are by default reserved for pm3d. Thus a multiplot using multiple palettes could fail because the first palette has used all the available color positions. You can mitigate this limitation by using **set palette maxcolors \<N\>** with a reasonably small value of N. This option causes N discrete colors to be selected from a continuous palette sampled at equally spaced intervals. If you want unequal spacing of N discrete colors, use **set palette defined** instead of a single continuous palette.

    RGB color space might not be the most useful color space to work in. For that reason you may change the color space **model** to one of **RGB**, **HSV**, **CMY**. Using color names for **set palette defined** tables and a color space other than RGB will result in funny colors. All explanation have been written for RGB color space, so please note, that **R** can be **H**, or **C**, depending on the actual color space (**G** and **B** accordingly).

    All values for all color spaces are limited to \[0,1\].

    RGB stands for Red, Green, Blue; CMY stands for Cyan, Magenta, Yellow; HSV stands for Hue, Saturation, Value. For more information on color models see: [http://en.wikipedia.org/wiki/Color_space ](http://en.wikipedia.org/wiki/Color_space)

    Note: Earlier gnuplot versions accepted YIQ and XYZ color space models also, but the implementation was never complete or correct.
- name: Palette Cubehelix
  id: set_show#SECTION0402966500000000000000
  summary: The "cubehelix" option defines a family of palettes in which color (hue) varies along the standard color wheel while at the same time the net intensity increases monotonically as the gray value goes from 0 to 1
  belongs_to: Set-show
  description: |-
    ### Cubehelix

    The "cubehelix" option defines a family of palettes in which color (hue) varies along the standard color wheel while at the same time the net intensity increases monotonically as the gray value goes from 0 to 1.

        D A Green (2011) http://arxiv.org/abs/1108.5083

    **start** defines the starting point along the color wheel in radians. **cycles** defines how many color wheel cycles span the palette range. Larger values of **saturation** produce more saturated color; saturation \> 1 may lead to clipping of the individual RGB components and to intensity becoming non-monotonic. The palette is also affected by **set palette gamma**. The default values are

        set palette cubehelix start 0.5 cycles -1.5 saturation 1
        set palette gamma 1.5
- name: Palette Defined
  id: set_show#SECTION0402966200000000000000
  summary: 'Gray-to-rgb mapping can be manually set by use of palette defined: A color gradient is defined and used to give the rgb values'
  belongs_to: Set-show
  description: |-
    ### Defined

    Gray-to-rgb mapping can be manually set by use of **palette defined**: A color gradient is defined and used to give the rgb values. Such a gradient is a piecewise linear mapping from gray values in \[0,1\] to the RGB space \[0,1\]x\[0,1\]x\[0,1\]. You must specify the gray values and the corresponding RGB values between which linear interpolation will be done.

    Syntax:

        set palette  defined { ( <gray1> <color1> {, <grayN> <colorN>}... ) }

    \<grayX\> are gray values which are mapped to \[0,1\] and \<colorX\> are the corresponding rgb colors. The color can be specified in three different ways:

        <color> :=  { <r> <g> <b> | '<color-name>' | '#rrggbb' }

    Either by three numbers (each in \[0,1\]) for red, green and blue, separated by whitespace, or the name of the color in quotes or X style color specifiers also in quotes. You may freely mix the three types in a gradient definition, but the named color "red" will be something strange if RGB is not selected as color space. Use **show colornames** for a list of known color names.

    Please note, that even if written as \<r\>, this might actually be the \<H\> component in HSV color space depending on the selected color model.

    The \<gray\> values have to form an ascending sequence of real numbers; the sequence will be automatically rescaled to \[0,1\].

    **set palette defined** (without a gradient definition in braces) switches to RGB color space and uses a preset full-spectrum color gradient. Use **show palette gradient** to display the gradient.

    Examples:

    To produce a gray palette (useless but instructive) use:

        set palette model RGB
        set palette defined ( 0 "black", 1 "white" )

    To produce a blue yellow red palette use (all equivalent):

        set palette defined ( 0 "blue", 1 "yellow", 2 "red" )
        set palette defined ( 0 0 0 1, 1 1 1 0, 2 1 0 0 )
        set palette defined ( 0 "#0000ff", 1 "#ffff00", 2 "#ff0000" )

    To produce some rainbow-like palette use:

        set palette defined ( 0 "blue", 3 "green", 6 "yellow", 10 "red" )

    Full color spectrum within HSV color space:

        set palette model HSV
        set palette defined ( 0 0 1 1, 1 1 1 1 )
        set palette defined ( 0 0 1 0, 1 0 1 1, 6 0.8333 1 1, 7 0.8333 0 1)

    Approximate the default palette used by MATLAB:

        set pal defined (1 '#00008f', 8 '#0000ff', 24 '#00ffff', \
                         40 '#ffff00', 56 '#ff0000', 64 '#800000')

    To produce a palette with only a few, equally-spaced colors:

        set palette model RGB maxcolors 4
        set palette defined ( 0 "yellow", 1 "red" )

    'Traffic light' palette (non-smooth color jumps at gray = 1/3 and 2/3).

        set palette model RGB
        set palette defined (0 "dark-green", 1 "green", \
                             1 "yellow",     2 "dark-yellow", \
                             2 "red",        3 "dark-red" )
- name: Palette File
  id: set_show#SECTION0402966600000000000000
  summary: set palette file is basically a set palette defined (<gradient>) where <gradient> is read from a datafile
  belongs_to: Set-show
  description: |-
    ### File

    **set palette file** is basically a **set palette defined (\<gradient\>)** where \<gradient\> is read from a datafile. Either 4 columns (gray,R,G,B) or just three columns (R,G,B) have to be selected via the **using** data file modifier. In the three column case, the line number will be used as gray. The gray range is automatically rescaled to \[0,1\]. The file is read as a normal data file, so all datafile modifiers can be used. Please note, that **R** might actually be e.g. **H** if HSV color space is selected.

    As usual \<filename\> may be **'-'** which means that the data follow the command inline and are terminated by a single **e** on a line of its own.

    Use **show palette gradient** to display the gradient.

    Examples:

    Read in a palette of RGB triples each in range \[0,255\]:

        set palette file 'some-palette' using ($1/255):($2/255):($3/255)

    Equidistant rainbow (blue-green-yellow-red) palette:

        set palette model RGB file "-"
        0 0 1
        0 1 0
        1 1 0
        1 0 0
        e

    Binary palette files are supported as well, see **[binary general](plot#binary_general)**. Example: put 64 triplets of R,G,B doubles into file palette.bin and load it by

        set palette file "palette.bin" binary record=64 using 1:2:3
- name: Palette Functions
  id: set_show#SECTION0402966300000000000000
  summary: Use set palette functions <Rexpr>, <Gexpr>, <Bexpr> to define three formulae for the R(gray), G(gray) and B(gray) mapping
  belongs_to: Set-show
  description: |-
    ### Functions

    Use **set palette functions \<Rexpr\>, \<Gexpr\>, \<Bexpr\>** to define three formulae for the R(gray), G(gray) and B(gray) mapping. The three formulae may depend on the variable **gray** which will take values in \[0,1\] and should also produce values in \[0,1\]. Please note that \<Rexpr\> might be a formula for the H-value if HSV color space has been chosen (same for all other formulae and color spaces).

    Examples:

    To produce a full color palette use:

        set palette model HSV functions gray, 1, 1

    A nice black to gold palette:

        set palette model RGB functions 1.1*gray**0.25, gray**0.75, 0

    A gamma-corrected black and white palette

        gamma = 2.2
        color(gray) = gray**(1./gamma)
        set palette model RGB functions color(gray), color(gray), color(gray)
- name: Palette Gamma correction
  id: set_show#SECTION0402966700000000000000
  summary: For gray mappings gamma correction can be turned on by set palette gamma <gamma>. <gamma> defaults to 1.5 which is quite suitable for most terminals
  belongs_to: Set-show
  description: |-
    ### Gamma correction

    For gray mappings gamma correction can be turned on by **set palette gamma \<gamma\>**. \<gamma\> defaults to 1.5 which is quite suitable for most terminals.

    The gamma correction is applied to the cubehelix color palette family, but not to other palette coloring schemes. However, you may easily implement gamma correction for explicit color functions.

    Example:

        set palette model RGB
        set palette functions gray**0.64, gray**0.67, gray**0.70

    To use gamma correction with interpolated gradients specify intermediate gray values with appropriate colors. Instead of

        set palette defined ( 0 0 0 0, 1 1 1 1 )

    use e.g.

        set palette defined ( 0 0 0 0, 0.5 .73 .73 .73, 1 1 1 1 )

    or even more intermediate points until the linear interpolation fits the "gamma corrected" interpolation well enough.
- name: Palette Gray
  id: set_show#SECTION0402966400000000000000
  summary: set palette gray switches to a grayscale palette shading from 0.0 = black to 1.0 = white
  belongs_to: Set-show
  description: |-
    ### Gray

    **set palette gray** switches to a grayscale palette shading from 0.0 = black to 1.0 = white. **set palette color** is an easy way to switch back from the gray palette to the last color mapping.
- name: Palette Postscript
  id: set_show#SECTION0402966800000000000000
  summary: In order to reduce the size of postscript files, the gray value and not all three calculated r,g,b values are written to the file
  belongs_to: Set-show
  description: |-
    ### Postscript

    In order to reduce the size of postscript files, the gray value and not all three calculated r,g,b values are written to the file. Therefore the analytical formulae are coded directly in the postscript language as a header just before the pm3d drawing, see /g and /cF definitions. Usually, it makes sense to write therein definitions of only the 3 formulae used. But for multiplot or any other reason you may want to manually edit the transformations directly in the postscript file. This is the default option **nops_allcF**. Using the option **ps_allcF** writes postscript definitions of all formulae. This you may find interesting if you want to edit the postscript file in order to have different palettes for different surfaces in one graph. Well, you can achieve this functionality by **multiplot** with fixed **origin** and **size**.

    If you are writing a pm3d surface to a postscript file, it may be possible to reduce the file size by up to 50% by the enclosed awk script **pm3dCompress.awk**. If the data lies on a rectangular grid, even greater compression may be possible using the script **pm3dConvertToImage.awk**. Usage:

        awk -f pm3dCompress.awk thefile.ps >smallerfile.ps
        awk -f pm3dConvertToImage.awk thefile.ps >smallerfile.ps
- name: Palette Rgbformulae
  id: set_show#SECTION0402966100000000000000
  summary: For rgbformulae three suitable mapping functions have to be chosen
  belongs_to: Set-show
  description: |-
    ### Rgbformulae

    For **rgbformulae** three suitable mapping functions have to be chosen. This is done via **rgbformulae \<r\>,\<g\>,\<b\>**. The available mapping functions are listed by **show palette rgbformulae**. Default is **7,5,15**, some other examples are **3,11,6**, **21,23,3** or **3,23,21**. Negative numbers, like **3,-11,-6**, mean inverted color (i.e. 1-gray passed into the formula, see also **[positive](set_show#positive)** and **[negative](set_show#negative)** options below).

    Some nice schemes in RGB color space

        7,5,15   ... traditional pm3d (black-blue-red-yellow)
        3,11,6   ... green-red-violet
        23,28,3  ... ocean (green-blue-white); try also all other permutations
        21,22,23 ... hot (black-red-yellow-white)
        30,31,32 ... color printable on gray (black-blue-violet-yellow-white)
        33,13,10 ... rainbow (blue-green-yellow-red)
        34,35,36 ... AFM hot (black-red-yellow-white)

    A full color palette in HSV color space

        3,2,2    ... red-yellow-green-cyan-blue-magenta-red

    Please note that even if called **rgbformulae** the formulas might actually determine the \<H\>,\<S\>,\<V\> or \<X\>,\<Y\>,\<Z\> or ... color components as usual.

    Use **positive** and **negative** to invert the figure colors.

    Note that it is possible to find a set of the best matching rgbformulae for any other color scheme by the command

        show palette fit2rgbformulae
- name: Parallelaxes
  id: parallelaxes
  summary: Parallel axis plots can highlight correlation in a multidimensional data set
  description: "# Parallelaxes\n\nParallel axis plots can highlight correlation in a multidimensional data set. Individual columns of input data are each associated with a separately scaled vertical axis. If all columns are drawn from a single file then each line on the plot represents values from a single row of data in that file. It is common to use some discrete categorization to assign line colors, allowing visual exploration of the correlation between this categorization and the axis dimensions.\n\nSyntax:\n\n    set style data parallelaxes\n    plot $DATA using col1{:varcol1} {at <xpos>} {<line properties}, \\\n         $DATA using col2, ...\n\nCHANGE: Version 5.4 of gnuplot introduces a change in the syntax for plot style parallelaxes. The revised syntax allows an unlimited number of parallel axes.\n\n    gnuplot 5.2:   plot $DATA using 1:2:3:4:5 with parallelaxes\n    gnuplot 5.4:   plot for [col=1:5] $DATA using col with parallelaxes\n\nThe new syntax also allows explicit placement of the parallel vertical axes along the x axis as in the example below. If no explicit x coordinate is provide axis N will be placed at x=N.\n\n    array xpos[5] = [1, 5, 6, 7, 11, 12]\n    plot for [col=1:5] $DATA using col with parallelaxes at xpos[col]\n\nBy default gnuplot will automatically determine the range and scale of the individual axes from the input data, but the usual **set axis range** commands can be used to customize this. See **[set paxis](set_show#set_paxis)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Parametric
  id: plot#SECTION040187000000000000000
  summary: When in parametric mode (set parametric) mathematical expressions must be given in pairs for plot and in triplets for splot
  belongs_to: Plot
  description: |-
    ## Parametric

    When in parametric mode (**set parametric**) mathematical expressions must be given in pairs for **plot** and in triplets for **splot**.

    Examples:

        plot sin(t),t**2
        splot cos(u)*cos(v),cos(u)*sin(v),sin(u)

    Data files are plotted as before, except any preceding parametric function must be fully specified before a data file is given as a plot. In other words, the x parametric function (**sin(t)** above) and the y parametric function (**t\*\*2** above) must not be interrupted with any modifiers or data functions; doing so will generate a syntax error stating that the parametric function is not fully specified.

    Other modifiers, such as **with** and **title**, may be specified only after the parametric function has been completed:

        plot sin(t),t**2 title 'Parametric example' with linespoints

    See also [Parametric Mode Demos. ](http://www.gnuplot.info/demo/param.html)
- name: Parametric
  id: set_show#SECTION0402967000000000000000
  summary: The set parametric command changes the meaning of plot (splot) from normal functions to parametric functions
  belongs_to: Set-show
  description: |-
    ## Parametric

    The **set parametric** command changes the meaning of **plot** (**splot**) from normal functions to parametric functions. The command **unset parametric** restores the plotting style to normal, single-valued expression plotting.

    Syntax:

        set parametric
        unset parametric
        show parametric

    For 2D plotting, a parametric function is determined by a pair of parametric functions operating on a parameter. An example of a 2D parametric function would be **plot sin(t),cos(t)**, which draws a circle (if the aspect ratio is set correctly — see **[set size](set_show#set_size)**). **gnuplot** will display an error message if both functions are not provided for a parametric **plot**.

    For 3D plotting, the surface is described as x=f(u,v), y=g(u,v), z=h(u,v). Therefore a triplet of functions is required. An example of a 3D parametric function would be **cos(u)\*cos(v),cos(u)\*sin(v),sin(u)**, which draws a sphere. **gnuplot** will display an error message if all three functions are not provided for a parametric **splot**.

    The total set of possible plots is a superset of the simple f(x) style plots, since the two functions can describe the x and y values to be computed separately. In fact, plots of the type t,f(t) are equivalent to those produced with f(x) because the x values are computed using the identity function. Similarly, 3D plots of the type u,v,f(u,v) are equivalent to f(x,y).

    Note that the order the parametric functions are specified is xfunction, yfunction (and zfunction) and that each operates over the common parametric domain.

    Also, the **set parametric** function implies a new range of values. Whereas the normal f(x) and f(x,y) style plotting assume an xrange and yrange (and zrange), the parametric mode additionally specifies a trange, urange, and vrange. These ranges may be set directly with **set trange**, **set urange**, and **set vrange**, or by specifying the range on the **plot** or **splot** commands. Currently the default range for these parametric variables is \[-5:5\]. Setting the ranges to something more meaningful is expected.
- name: Pause
  id: pause
  summary: The pause command displays any text associated with the command and then waits a specified amount of time or until the carriage return is pressed
  description: "# Pause\n\nThe **pause** command displays any text associated with the command and then waits a specified amount of time or until the carriage return is pressed. **pause** is especially useful in conjunction with **load** files.\n\nSyntax:\n\n    pause <time> {\"<string>\"}\n    pause mouse {<endcondition>}{, <endcondition>} {\"<string>\"}\n    pause mouse close\n\n\\<time\\> may be any constant or floating-point expression. **pause -1** will wait until a carriage return is hit, zero (0) won't pause at all, and a positive number will wait the specified number of seconds. **pause 0** is synonymous with **print**.\n\nIf the current terminal supports **mousing**, then **pause mouse** will terminate on either a mouse click or on ctrl-C. For all other terminals, or if mousing is not active, **pause mouse** is equivalent to **pause -1**.\n\nIf one or more end conditions are given after **pause mouse**, then any one of the conditions will terminate the pause. The possible end conditions are **keypress**, **button1**, **button2**, **button3**, **close**, and **any**. If the pause terminates on a keypress, then the ascii value of the key pressed is returned in MOUSE_KEY. The character itself is returned as a one character string in MOUSE_CHAR. Hotkeys (bind command) are disabled if keypress is one of the end conditions. Zooming is disabled if button3 is one of the end conditions.\n\nIn all cases the coordinates of the mouse are returned in variables MOUSE_X, MOUSE_Y, MOUSE_X2, MOUSE_Y2. See **[mouse variables](mouse_input#mouse_variables)**.\n\nNote: Since **pause** communicates with the operating system rather than the graphics, it may behave differently with different device drivers (depending upon how text and graphics are mixed).\n\nExamples:\n\n    pause -1    # Wait until a carriage return is hit\n    pause 3     # Wait three seconds\n    pause -1  \"Hit return to continue\"\n    pause 10  \"Isn't this pretty?  It's a cubic spline.\"\n    pause mouse \"Click any mouse button on selected data point\"\n    pause mouse keypress \"Type a letter from A-F in the active window\"\n    pause mouse button1,keypress\n    pause mouse any \"Any key or button will terminate\"\n\nThe variant \"pause mouse key\" will resume after any keypress in the active plot window. If you want to wait for a particular key to be pressed, you can use a loop such as:\n\n    print \"I will resume after you hit the Tab key in the plot window\"\n    plot <something>\n    pause mouse key\n    while (MOUSE_KEY != 9) {\n        pause mouse key\n    }\n\n## Pause mouse close\n\nThe command **pause mouse close** is a specific example of pausing to wait for an external event. In this case the program waits for a \"close\" event from the plot window. Exactly how to generate such an event varies with your desktop environment and configuration, but usually you can close the plot window by clicking on some widget on the window border or by typing a hot-key sequence such as \\<alt\\>\\<F4\\> or \\<ctrl\\>q. If you are unsure whether a suitable widget or hot-key is available to the user, you may also want to define a hot-key sequence using gnuplot's own mechanism. See **[bind](mouse_input#bind)**.\n\nThe command sequence below may be useful when running gnuplot from a script rather than from the command line.\n\n    plot <...whatever...>\n    bind all \"alt-End\" \"exit gnuplot\"\n    pause mouse close\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Pause mouse close
  id: pause#SECTION040171000000000000000
  summary: The command pause mouse close is a specific example of pausing to wait for an external event
  belongs_to: Pause
  description: "## Pause mouse close\n\nThe command **pause mouse close** is a specific example of pausing to wait for an external event. In this case the program waits for a \"close\" event from the plot window. Exactly how to generate such an event varies with your desktop environment and configuration, but usually you can close the plot window by clicking on some widget on the window border or by typing a hot-key sequence such as \\<alt\\>\\<F4\\> or \\<ctrl\\>q. If you are unsure whether a suitable widget or hot-key is available to the user, you may also want to define a hot-key sequence using gnuplot's own mechanism. See **[bind](mouse_input#bind)**.\n\nThe command sequence below may be useful when running gnuplot from a script rather than from the command line.\n\n    plot <...whatever...>\n    bind all \"alt-End\" \"exit gnuplot\"\n    pause mouse close\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Paxis
  id: set_show#SECTION0402968000000000000000
  summary: The set paxis command is equivalent to the set xrange and set xtics commands except that it acts on one of the axes p1, p2, ... used in parallel axis plots and spiderplots
  belongs_to: Set-show
  description: |-
    ## Paxis

    Syntax:

        set paxis <axisno> {range <range-options> | tics <tic-options>}
        set paxis <axisno> label <label-options> { offset <radial-offset> }
        show paxis <axisno> {range | tics}

    The **set paxis** command is equivalent to the **set xrange** and **set xtics** commands except that it acts on one of the axes p1, p2, ... used in parallel axis plots and spiderplots. See **[parallelaxes](parallelaxes#parallelaxes)**, **[set xrange](set_show#set_xrange)**, and **[set xtics](set_show#set_xtics)**. The normal options to the range and tics commands are accepted although not all options make sense for parallel axis plots.

    **set paxis \<axisno\> label \<label-options\>** is relevant to spiderplots but ignored otherwise. Axes of a parallel axis plot can be labeled using the **title** option of the plot command, which generates an xtic label. Note that this may require also **set xtics**.

    The axis linetype properties are controlled using **[set style parallelaxis](set_show#set_style_parallelaxis)**.
- name: Pbm
  id: complete_list_terminals#SECTION050142000000000000000
  summary: 'Note: only available if gnuplot is configured –with-bitmap-terminals'
  description: |-
    ## Pbm

    Note: only available if gnuplot is configured –with-bitmap-terminals. Syntax:

        set terminal pbm {<fontsize>} {<mode>} {size <x>,<y>}

    where \<fontsize\> is **small**, **medium**, or **large** and \<mode\> is **monochrome**, **gray** or **color**. The default plot size is 640 pixels wide and 480 pixels high. The output size is white-space padded to the nearest multiple of 8 pixels on both x and y. This empty space may be cropped later if needed.

    The output of the **pbm** driver depends upon \<mode\>: **monochrome** produces a portable bitmap (one bit per pixel), **gray** a portable graymap (three bits per pixel) and **color** a portable pixmap (color, four bits per pixel).

    The output of this driver can be used with various image conversion and manipulation utilities provided by NETPBM. Based on Jef Poskanzer's PBMPLUS package, NETPBM provides programs to convert the above PBM formats to GIF, TIFF, MacPaint, Macintosh PICT, PCX, X11 bitmap and many others. Complete information is available at http://netpbm.sourceforge.net/.

    Examples:

        set terminal pbm small monochrome                # defaults
        set terminal pbm color medium size 800,600
        set output '| pnmrotate 45 | pnmtopng > tilted.png'  # uses NETPBM
- name: Pcl5
  id: complete_list_terminals#SECTION050143000000000000000
  summary: The pcl5 driver supports PCL5e/PCL5c printers
  description: |-
    ## Pcl5

    The **pcl5** driver supports PCL5e/PCL5c printers. It (mostly) uses the HP-GL/2 vector format.

    Syntax:

        set terminal pcl5 {<mode>} {{no}enhanced}
            {size <plotsize> | size <width>{unit},<height>{unit}}
            {font "<fontname>,<size>"} {pspoints | nopspoints}
            {fontscale <scale>} {pointsize <scale>} {linewidth <scale}
            {rounded|butt} {color <number_of_pens>}

    \<mode\> is **landscape** or **portrait**. \<plotsize\> is the physical plotting size of the plot, which can be one of the following formats: **letter** for standard (8 1/2" X 11") displays, **legal** for (8 1/2" X 14") displays, **noextended** for (36" X 48") displays (a letter size ratio), **extended** for (36" X 55") displays (almost a legal size ratio), or **a4** for (296mm X 210mm) displays. You can also explicitly specify the canvas size using the **width** and **height** options. Default unit is **in**. Default size is **letter**.

    \<fontname\> can be one of stick, univers (default), albertus, antique_olive, arial, avant_garde_gothic, bookman, zapf_chancery, clarendon, coronet, courier courier_ps, cg_times, garamond_antigua, helvetica, helvetica_narrow, letter_gothic, marigold, new_century_schlbk, cg_omega, palatino, times_new_roman, times_roman, zapf_dingbats, truetype_symbols, or wingdings. Font names are case-insensitive and underscores may be replaced by spaces or dashes or may be left out. \<fontsize\> is the font size in points.

    The point type selection can be the a limited default set by specifying **nopspoints**, or the same set of point types as provided by the postscript terminal by specifying **pspoints** (default).

    The **butt** option selects lines with butt ends and mitered joins (default), whereas **rounded** selects rounded line ends and joins.

    Line widths, and point and font sizes can be scaled using the **linewidth**, **pointscale**, or **fontscale** options, respectively. **color** selects the number of pens \<number_of_pens\> used in plots. Default is 8, minimum 2.

    Note that built-in support of some of these options is printer device dependent. For instance, all the fonts are supposedly supported by the HP Laserjet IV, but only a few (e.g. univers, stick) may be supported by the HP Laserjet III and the Designjet 750C. Also, color obviously won't work on monochrome devices, but newer ones will do grey-scale.

    Defaults: landscape, a4, 8 pens, univers, 12 point, pspoints, butt, no scaling

    The **pcl5** terminal will try to request fonts which match your **encoding**. Note that this has highest priority, so you might end up with a different font face. The terminal's default **encoding** is **HP Roman-8**.

    Limitations:

    This terminal does not support alpha transparency. Transparent filling is emulated using shading patterns. Boxed text is not implemented.

    The support for UTF-8 is limited. Lacking the label mode for UTF-8 output in HP-GL/2, the driver reverts to PCL for strings containing 8bit characters. UTF-8 text is limited to angles of 0, 90, 180, and 270 degrees. Also vertical alignment might be off depending on the font.

    Some enhanced text features (phantom box, overprinting) require using PCL features in addition to HP-GL/2. This conforms to the specs but may not work with your printer or software.
- name: Pdf
  id: complete_list_terminals#SECTION050144000000000000000
  summary: '[DEPRECATED] This terminal uses the non-free library PDFlib (GmbH Munchen) to produce files in Portable Document Format'
  description: |-
    ## Pdf

    \[DEPRECATED\] This terminal uses the non-free library PDFlib (GmbH Munchen) to produce files in Portable Document Format. Unless you have a commercial license for PDFlib and need some special feature it provides you would do better to use the cairo pdf terminal instead. Gnuplot can also export PDF files from wxt or qt interactive terminal sessions.

    Syntax:

        set terminal pdf {monochrome|color|colour}
                         {{no}enhanced}
                         {fname "<font>"} {fsize <fontsize>}
                         {font "<fontname>{,<fontsize>}"} {fontscale <scale>}
                         {linewidth <lw>} {rounded|butt}
                         {dl <dashlength>}}
                         {size <XX>{unit},<YY>{unit}}

    The default is to use a different color for each line type. Selecting **monochome** will use black for all linetypes, Even in in mono mode you can still use explicit colors for filled areas or linestyles.

    where \<font\> is the name of the default font to use (default Helvetica) and \<fontsize\> is the font size (in points, default 12). For help on which fonts are available or how to install new ones, please see the documentation for your local installation of pdflib.

    The **enhanced** option enables enhanced text processing features (subscripts, superscripts and mixed fonts). See **[enhanced](enhanced_text_mode#enhanced)**.

    The width of all lines in the plot can be increased by the factor \<n\> specified in **linewidth**. Similarly **dashlength** is a multiplier for the default dash spacing.

    **rounded** sets line caps and line joins to be rounded; **butt** is the default, butt caps and mitered joins.

    The default size for PDF output is 5 inches by 3 inches. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in inches, but other units are possible (currently only cm).
- name: Pdfcairo
  id: complete_list_terminals#SECTION050145000000000000000
  summary: The pdfcairo terminal device generates output in pdf
  description: |-
    ## Pdfcairo

    The **pdfcairo** terminal device generates output in pdf. The actual drawing is done via cairo, a 2D graphics library, and pango, a library for laying out and rendering text.

    Syntax:

        set term pdfcairo
                     {{no}enhanced} {mono|color}
                     {font <font>} {fontscale <scale>}
                     {linewidth <lw>} {rounded|butt|square} {dashlength <dl>}
                     {background <rgbcolor>}
                     {size <XX>{unit},<YY>{unit}}

    This terminal supports an enhanced text mode, which allows font and other formatting commands (subscripts, superscripts, etc.) to be embedded in labels and other text strings. The enhanced text mode syntax is shared with other gnuplot terminal types. See **[enhanced](enhanced_text_mode#enhanced)** for more details.

    The width of all lines in the plot can be modified by the factor \<lw\> specified in **linewidth**. The default linewidth is 0.5 points. (1 "PostScript" point = 1/72 inch = 0.353 mm)

    **rounded** sets line caps and line joins to be rounded; **butt** is the default, butt caps and mitered joins.

    The default size for the output is 5 inches x 3 inches. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in inches, but other units are possible (currently only cm). Screen coordinates always run from 0.0 to 1.0 along the full length of the plot edges as specified by the **size** option.

    \<font\> is in the format "FontFace,FontSize", i.e. the face and the size comma-separated in a single string. FontFace is a usual font face name, such as 'Arial'. If you do not provide FontFace, the pdfcairo terminal will use 'Sans'. FontSize is the font size, in points. If you do not provide it, the pdfcairo terminal will use a nominal font size of 12 points. However, the default fontscale parameter for this terminal is 0.5, so the apparent font size is smaller than this if the pdf output is viewed at full size.

        For example :
           set term pdfcairo font "Arial,12"
           set term pdfcairo font "Arial" # to change the font face only
           set term pdfcairo font ",12" # to change the font size only
           set term pdfcairo font "" # to reset the font name and size

    The fonts are retrieved from the usual fonts subsystems. Under Windows, those fonts are to be found and configured in the entry "Fonts" of the control panel. Under UNIX, they are handled by "fontconfig".

    Pango, the library used to layout the text, is based on utf-8. Thus, the pdfcairo terminal has to convert from your encoding to utf-8. The default input encoding is based on your 'locale'. If you want to use another encoding, make sure gnuplot knows which one you are using. See **[encoding](set_show#encoding)** for more details.

    Pango may give unexpected results with fonts that do not respect the unicode mapping. With the Symbol font, for example, the pdfcairo terminal will use the map provided by http://www.unicode.org/ to translate character codes to unicode. Note that "the Symbol font" is to be understood as the Adobe Symbol font, distributed with Acrobat Reader as "SY\_\_\_\_\_\_.PFB". Alternatively, the OpenSymbol font, distributed with OpenOffice.org as "opens\_\_\_.ttf", offers the same characters. Microsoft has distributed a Symbol font ("symbol.ttf"), but it has a different character set with several missing or moved mathematic characters. If you experience problems with your default setup (if the demo enhancedtext.dem is not displayed properly for example), you probably have to install one of the Adobe or OpenOffice Symbol fonts, and remove the Microsoft one. Other non-conform fonts, such as "wingdings" have been observed working.

    The rendering of the plot cannot be altered yet. To obtain the best output possible, the rendering involves two mechanisms : antialiasing and oversampling. Antialiasing allows to display non-horizontal and non-vertical lines smoother. Oversampling combined with antialiasing provides subpixel accuracy, so that gnuplot can draw a line from non-integer coordinates. This avoids wobbling effects on diagonal lines ('plot x' for example).
- name: Persist
  id: persist
  summary: Many gnuplot terminals (aqua, pm, qt, x11, windows, wxt, ...) open separate display windows on the screen into which plots are drawn
  description: "# Persist\n\nMany gnuplot terminals (aqua, pm, qt, x11, windows, wxt, ...) open separate display windows on the screen into which plots are drawn. The **persist** option tells gnuplot to leave these windows open when the main program exits. It has no effect on non-interactive terminal output. For example if you issue the command\n\n    gnuplot -persist -e 'plot [-5:5] sinh(x)'\n\ngnuplot will open a display window, draw the plot into it, and then exit, leaving the display window containing the plot on the screen. You can also specify **persist** or **nopersist** when you set a new terminal.\n\n    set term qt persist size 700,500\n\nDepending on the terminal type, some mousing operations may still be possible in the persistent window. However operations like zoom/unzoom that require redrawing the plot are not possible because the main program has exited. If you want to leave a plot window open and fully mouseable after creating the plot, for example when running gnuplot from a script file rather than interactively, see **[pause mouse close](pause#pause_mouse_close)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Pict2e
  id: complete_list_terminals#SECTION050146000000000000000
  summary: The pict2e terminal uses the LaTeX2e variant of the picture environment
  description: |-
    ## Pict2e

    The **pict2e** terminal uses the LaTeX2e variant of the picture environment. It replaces terminals which were based on the original LaTeX picture environment: **latex**, **emtex**, **tpic**, and **eepic**. (EXPERIMENTAL)

    Alternatives to this terminal with a more complete support of gnuplot's features are **tikz**, **pstricks**, **cairolatex**, **pslatex**, **epslatex** and **mp**.

    Syntax:

        set terminal pict2e
                     {font "{<fontname>}{,<fontsize>}"}
                     {size <XX>{unit}, <YY>{unit}}
                     {color | monochrome}
                     {linewidth <lw>} {rounded | butt}
                     {texarrows | gparrows} {texpoints | gppoints}
                     {smallpoints | tinypoints | normalpoints}

    This terminal requires the following standard LaTeX packages: **pict2e**, **xcolor**, **graphics**/**graphicx** and **amssymb**. For pdflatex, the **transparent** package is used to support transparency.

    By default the plot will inherit font settings from the embedding document. You have the option to force a font with the **font** option, like cmtt (Courier) or cmr (Roman), instead. In this case you may also force a specific fontsize. Otherwise the fontsize argument is used to estimate the required space for text. Unless your driver is capable of building fonts at any size (e.g. dvips), stick to the standard 10, 11 and 12 point sizes.

    The default size for the plot is 5 inches by 3 inches. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in inches, but other units are possible (currently only cm).

    With **texpoints**, points are drawn using LaTeX commands like " \\Diamond" and " \\Box". These are provided by the the latexsym package, which is part of the base distribution and thus part of any LaTeX implementation. Other point types use symbols from the amssymb package. With **gppoints**, the terminal will use gnuplot's internal routines for drawing point symbols instead.

    With the **texpoints** option, you can select three different point sizes: **normalpoints**, **smallpoints**, and **tinypoints**.

    **color** causes gnuplot to produce \\color{...} commands so that the graphs are colored. Using this option, you must include \\usepackage{xcolor} in the preamble of your LaTeX document. **monochrome** will avoid the use of any color commands in the output. Transparent color fill is available if pdflatex is used.

    **linewidth** sets the scale factor for the width of lines. **rounded** sets line caps and line joins to be rounded. **butt** sets butt caps and mitered joins and is the default.

    **pict2e** only supports dotted lines, but not dashed lines. All default line types are solid. Use **set linetype** with the **dashtype** property to change.

    **texarrows** draws **arrow**s using LaTeX commands which are shorter but do not offer all options. **gparrows** selects drawing arrows using gnuplot's own routine for full functionality instead.
- name: Pixmap
  id: set_show#SECTION0402969000000000000000
  summary: The set pixmap command is similar to set object in that it defines an object that will appear on subsequent plots
  belongs_to: Set-show
  description: |-
    ## Pixmap

    Syntax:

        set pixmap <index> "filename" at <position>
                   {width <w> | height <h> | size <w>,<h>}
                   {front|back|behind} {center}
        show pixmaps
        unset pixmaps
        unset pixmap <index>

    The **set pixmap** command is similar to **set object** in that it defines an object that will appear on subsequent plots. The rectangular array of red/green/blue/alpha values making up the pixmap are read from a png, jpeg, or gif file. The position and extent occupied by the pixmap in the gnuplot output may be specified in any coordinate system (see **[coordinates](coordinates#coordinates)**). The coordinates given by **at \<position\>** refer to the lower left corner of the pixmap unless keyword **center** is present.

    If the x-extent of the rendered pixmap is set using **width \<x-extent\>** the aspect ratio of the original image is retained and neither the aspect ratio nor the orientation of the pixmap changes with axis scaling or rotation. Similarly if the y-extent is set using **height \<y-extent\>**. If both the x-extent and y-extent are given using **size \<x-extent\> \<y-extent\>** this overrides the original aspect ratio. If no size is set then the original size in pixels is used (the effective size is then terminal-dependent).

    Pixmaps are not clipped to the border of the plot. As an exception to the general behaviour of objects and layers, a pixmap assigned to layer **behind** is rendered for only the first plot in a multiplot. This allows all panels in a multiplot to share a single background pixmap.

    Examples:

        # Use a gradient as the background for all plotting
        # Both x and y will be resized to fill the entire canvas
        set pixmap 1 "gradient.png"
        set pixmap 1 at screen 0, 0 size screen 1, 1 behind

        # Place a logo at the lower right of each page plotted
        set pixmap 2 "logo.jpg"
        set pixmap 2 at screen 0.95, 0 width screen 0.05 behind

        # Place a small image at some 3D coordinate
        # It will move as if attached to the surface being plotted
        # but will always face forward and remain upright
        set pixmap 3 "image.png" at my_x, my_y, f(my_x,my_y) width screen .05
        splot f(x,y)
- name: Plot
  id: plot
  summary: plot is the primary command for drawing plots with gnuplot
  description: "# Plot\n\n**plot** is the primary command for drawing plots with **gnuplot**. It offers many different graphical representations for functions and data. **plot** is used to draw 2D functions and data. **splot** draws 2D projections of 3D surfaces and data.\n\nSyntax:\n\n    plot {<ranges>} <plot-element> {, <plot-element>, <plot-element>}\n\nEach plot element consists of a definition, a function, or a data source together with optional properties or modifiers:\n\n    plot-element:\n         {<iteration>}\n         <definition> | {sampling-range} <function> | <data source>\n                      | keyentry\n         {axes <axes>} {<title-spec>}\n         {with <style>}\n\nThe graphical representation of each plot element is determined by the keyword **with**, e.g. **with lines** or **with boxplot**. See **plotting styles**.\n\nThe data to be plotted is either generated by a function (two functions if in parametric mode), read from a data file, or read from a named data block that was defined previously. Multiple datafiles, data blocks, and/or functions may be plotted in a single plot command separated by commas. See **[data](plot#data)**, **[inline data](inline_data_datablocks#inline_data)**, **[functions](plot#functions)**.\n\nA plot-element that contains the definition of a function or variable does not create any visible output, see third example below.\n\nExamples:\n\n    plot sin(x)\n    plot sin(x), cos(x)\n    plot f(x) = sin(x*a), a = .2, f(x), a = .4, f(x)\n    plot \"datafile.1\" with lines, \"datafile.2\" with points\n    plot [t=1:10] [-pi:pi*2] tan(t), \\\n         \"data.1\" using (tan($2)):($3/$4) smooth csplines \\\n                  axes x1y2 notitle with lines 5\n    plot for [datafile in \"spinach.dat broccoli.dat\"] datafile\n\nSee also **[show plot](set_show#show_plot)**.\n\n## Axes\n\nThere are four possible sets of axes available; the keyword \\<axes\\> is used to select the axes for which a particular line should be scaled. **x1y1** refers to the axes on the bottom and left; **x2y2** to those on the top and right; **x1y2** to those on the bottom and right; and **x2y1** to those on the top and left. Ranges specified on the **plot** command apply only to the first set of axes (bottom left).\n\n## Binary\n\nBINARY DATA FILES:\n\nIt is necessary to provide the keyword **binary** after the filename. Adequate details of the file format must be given on the command line or extracted from the file itself for a supported binary **filetype**. In particular, there are two structures for binary files, binary matrix format and binary general format.\n\nThe **binary matrix** format contains a two dimensional array of 32 bit IEEE float values plus an additional column and row of coordinate values. In the **using** specifier of a plot command, column 1 refers to the matrix row coordinate, column 2 refers to the matrix column coordinate, and column 3 refers to the value stored in the array at those coordinates.\n\nThe **binary general** format contains an arbitrary number of columns for which information must be specified at the command line. For example, **array**, **record**, **format** and **using** can indicate the size, format and dimension of data. There are a variety of useful commands for skipping file headers and changing endianess. There are a set of commands for positioning and translating data since often coordinates are not part of the file when uniform sampling is inherent in the data. Unlike reading from a text or matrix binary file, general binary does not treat the generated columns as 1, 2 or 3 in the **using** list. Instead column 1 refers to column 1 of the file, or as specified in the **format** list.\n\nThere are global default settings for the various binary options which may be set using the same syntax as the options when used as part of the **(s)plot \\<filename\\> binary ...** command. This syntax is **set datafile binary ...**. The general rule is that common command-line specified parameters override file-extracted parameters which override default parameters.\n\n**Binary matrix** is the default binary format when no keywords specific to **binary general** are given, i.e., **array**, **record**, **format**, **filetype**.\n\nGeneral binary data can be entered at the command line via the special file name '-'. However, this is intended for use through a pipe where programs can exchange binary data, not for keyboards. There is no \"end of record\" character for binary data. Gnuplot continues reading from a pipe until it has read the number of points declared in the **array** qualifier. See **[binary matrix](splot#binary_matrix)** or **[binary general](plot#binary_general)** for more details.\n\nThe **index** keyword is not supported, since the file format allows only one surface per file. The **every** and **using** filters are supported. **using** operates as if the data were read in the above triplet form. [Binary File Splot Demo. ](http://www.gnuplot.info/demo/binary.html)\n\n### General\n\nThe **binary** keyword appearing alone indicates a binary data file that contains both coordinate information describing a non-uniform grid and the value of each grid point (see **[binary matrix](splot#binary_matrix)**). Binary data in any other format requires additional keywords to describe the layout of the data. Unfortunately the syntax of these required additional keywords is convoluted. Nevertheless the general binary mode is particularly useful for application programs sending large amounts of data to gnuplot.\n\nSyntax:\n\n    plot '<file_name>' {binary <binary list>} ...\n    splot '<file_name>' {binary <binary list>} ...\n\nGeneral binary format is activated by keywords in \\<binary list\\> pertaining to information about file structure, i.e., **array**, **record**, **format** or **filetype**. Otherwise, non-uniform matrix binary format is assumed. (See **[binary matrix](splot#binary_matrix)** for more details.)\n\nGnuplot knows how to read a few standard binary file types that are fully self-describing, e.g. PNG images. Type **show datafile binary** at the command line for a list. Apart from these, you can think of binary data files as conceptually the same as text data. Each point has columns of information which are selected via the **using** specification. If no **format** string is specified, gnuplot will read in a number of binary values equal to the largest column given in the **\\<using list\\>**. For example, **using 1:3** will result in three columns being read, of which the second will be ignored. Certain plot types have an associated default using specification. For example, **with image** has a default of **using 1**, while **with rgbimage** has a default of **using 1:2:3**.\n\n### Array\n\nDescribes the sampling array dimensions associated with the binary file. The coordinates will be generated by gnuplot. A number must be specified for each dimension of the array. For example, **array=(10,20)** means the underlying sampling structure is two-dimensional with 10 points along the first (x) dimension and 20 points along the second (y) dimension. A negative number indicates that data should be read until the end of file. If there is only one dimension, the parentheses may be omitted. A colon can be used to separate the dimensions for multiple records. For example, **array=25:35** indicates there are two one-dimensional records in the file.\n\n### Record\n\nThis keyword serves the same function as **array** and has the same syntax. However, **record** causes gnuplot to not generate coordinate information. This is for the case where such information may be included in one of the columns of the binary data file.\n\n### Skip\n\nThis keyword allows you to skip sections of a binary file. For instance, if the file contains a 1024 byte header before the start of the data region you would probably want to use\n\n    plot '<file_name>' binary skip=1024 ...\n\nIf there are multiple records in the file, you may specify a leading offset for each. For example, to skip 512 bytes before the 1st record and 256 bytes before the second and third records\n\n    plot '<file_name> binary record=356:356:356 skip=512:256:256 ...\n\n### Format\n\nThe default binary format is a float. For more flexibility, the format can include details about variable sizes. For example, **format=\"%uchar%int%float\"** associates an unsigned character with the first using column, an int with the second column and a float with the third column. If the number of size specifications is less than the greatest column number, the size is implicitly taken to be similar to the last given variable size.\n\nFurthermore, similar to the **using** specification, the format can include discarded columns via the **\\*** character and have implicit repetition via a numerical repeat-field. For example, **format=\"%\\*2int%3float\"** causes gnuplot to discard two ints before reading three floats. To list variable sizes, type **show datafile binary datasizes**. There are a group of names that are machine dependent along with their sizes in bytes for the particular compilation. There is also a group of names which attempt to be machine independent.\n\n### Endian\n\nOften the endianess of binary data in the file does not agree with the endianess used by the platform on which gnuplot is running. Several words can direct gnuplot how to arrange bytes. For example **endian=little** means treat the binary file as having byte significance from least to greatest. The options are\n\n         little:  least significant to greatest significance\n            big:  greatest significance to least significance\n        default:  assume file endianess is the same as compiler\n    swap (swab):  Interchange the significance.  (If things\n                  don't look right, try this.)\n\nGnuplot can support \"middle\" (\"pdp\") endian if it is compiled with that option.\n\n### Filetype\n\nFor some standard binary file formats gnuplot can extract all the necessary information from the file in question. As an example, \"format=edf\" will read ESRF Header File format files. For a list of the currently supported file formats, type **show datafile binary filetypes**.\n\nThere is a special file type called **auto** for which gnuplot will check if the binary file's extension is a quasi-standard extension for a supported format.\n\nCommand line keywords may be used to override settings extracted from the file. The settings from the file override any defaults. See **[set datafile binary](set_show#set_datafile_binary)**.\n\n#### Avs\n\n**avs** is one of the automatically recognized binary file types for images. AVS is an extremely simple format, suitable mostly for streaming between applications. It consists of 2 longs (xwidth, ywidth) followed by a stream of pixels, each with four bytes of information alpha/red/green/blue.\n\n#### Edf\n\n**edf** is one of the automatically recognized binary file types for images. EDF stands for ESRF Data Format, and it supports both edf and ehf formats (the latter means ESRF Header Format). More information on specifications can be found at\n\n    http://www.edfplus.info/specs\n\n#### Png\n\nIf gnuplot was configured to use the libgd library for png/gif/jpeg output, then it can also be used to read these same image types as binary files. You can use an explicit command\n\n    plot 'file.png' binary filetype=png\n\nOr the file type will be recognized automatically from the extension if you have previously requested\n\n    set datafile binary filetype=auto\n\n### Keywords\n\nThe following keywords apply only when generating coordinates from binary data files. That is, the control mapping the individual elements of a binary array, matrix, or image to specific x/y/z positions.\n\n#### Scan\n\nA great deal of confusion can arise concerning the relationship between how gnuplot scans a binary file and the dimensions seen on the plot. To lessen the confusion, conceptually think of gnuplot *always* scanning the binary file point/line/plane or fast/medium/slow. Then this keyword is used to tell gnuplot how to map this scanning convention to the Cartesian convention shown in plots, i.e., x/y/z. The qualifier for scan is a two or three letter code representing where point is assigned (first letter), line is assigned (second letter), and plane is assigned (third letter). For example, **scan=yx** means the fastest, point-by-point, increment should be mapped along the Cartesian y dimension and the middle, line-by-line, increment should be mapped along the x dimension.\n\nWhen the plotting mode is **plot**, the qualifier code can include the two letters x and y. For **splot**, it can include the three letters x, y and z.\n\nThere is nothing restricting the inherent mapping from point/line/plane to apply only to Cartesian coordinates. For this reason there are cylindrical coordinate synonyms for the qualifier codes where t (theta), r and z are analogous to the x, y and z of Cartesian coordinates.\n\n#### Transpose\n\nShorthand notation for **scan=yx** or **scan=yxz**. I.e. it affects the assignment of pixels to scan lines during input. To instead transpose an image when it is displayed try\n\n    plot 'imagefile' binary filetype=auto flipx rotate=90deg with rgbimage\n\n#### Dx, dy, dz\n\nWhen gnuplot generates coordinates, it uses the spacing described by these keywords. For example **dx=10 dy=20** would mean space samples along the x dimension by 10 and space samples along the y dimension by 20. **dy** cannot appear if **dx** does not appear. Similarly, **dz** cannot appear if **dy** does not appear. If the underlying dimensions are greater than the keywords specified, the spacing of the highest dimension given is extended to the other dimensions. For example, if an image is being read from a file and only **dx=3.5** is given gnuplot uses a delta x and delta y of 3.5.\n\nThe following keywords also apply only when generating coordinates. However they may also be used with matrix binary files.\n\n#### Flipx, flipy, flipz\n\nSometimes the scanning directions in a binary datafile are not consistent with that assumed by gnuplot. These keywords can flip the scanning direction along dimensions x, y, z.\n\n#### Origin=\n\nWhen gnuplot generates coordinates based upon transposition and flip, it attempts to always position the lower left point in the array at the origin, i.e., the data lies in the first quadrant of a Cartesian system after transpose and flip.\n\nTo position the array somewhere else on the graph, the **origin** keyword directs gnuplot to position the lower left point of the array at a point specified by a tuple. The tuple should be a double for **plot** and a triple for **splot**. For example, **origin=(100,100):(100,200)** is for two records in the file and intended for plotting in two dimensions. A second example, **origin=(0,0,3.5)**, is for plotting in three dimensions.\n\n#### Center\n\nSimilar to **origin**, this keyword will position the array such that its center lies at the point given by the tuple. For example, **center=(0,0)**. Center does not apply when the size of the array is **Inf**.\n\n#### Rotate\n\nThe transpose and flip commands provide some flexibility in generating and orienting coordinates. However, for full degrees of freedom, it is possible to apply a rotational vector described by a rotational angle in two dimensions.\n\nThe **rotate** keyword applies to the two-dimensional plane, whether it be **plot** or **splot**. The rotation is done with respect to the positive angle of the Cartesian plane.\n\nThe angle can be expressed in radians, radians as a multiple of pi, or degrees. For example, **rotate=1.5708**, **rotate=0.5pi** and **rotate=90deg** are equivalent.\n\nIf **origin** is specified, the rotation is done about the lower left sample point before translation. Otherwise, the rotation is done about the array **center**.\n\n#### Perpendicular\n\nFor **splot**, the concept of a rotational vector is implemented by a triple representing the vector to be oriented normal to the two-dimensional x-y plane. Naturally, the default is (0,0,1). Thus specifying both rotate and perpendicular together can orient data myriad ways in three-space.\n\nThe two-dimensional rotation is done first, followed by the three-dimensional rotation. That is, if R' is the rotational 2 x 2 matrix described by an angle, and P is the 3 x 3 matrix projecting (0,0,1) to (xp,yp,zp), let R be constructed from R' at the upper left sub-matrix, 1 at element 3,3 and zeros elsewhere. Then the matrix formula for translating data is v' = P R v, where v is the 3 x 1 vector of data extracted from the data file. In cases where the data of the file is inherently not three-dimensional, logical rules are used to place the data in three-space. (E.g., usually setting the z-dimension value to zero and placing 2D data in the x-y plane.)\n\n## Data\n\nDiscrete data contained in a file can be displayed by specifying the name of the data file (enclosed in single or double quotes) on the **plot** command line.\n\nSyntax:\n\n    plot '<file_name>' {binary <binary list>}\n                       {{nonuniform} matrix}\n                       {index <index list> | index \"<name>\"}\n                       {every <every list>}\n                       {skip <number-of-lines>}\n                       {using <using list>}\n                       {smooth <option>}\n                       {bins <options>}\n                       {volatile} {noautoscale}\n\nThe modifiers **binary**, **index**, **every**, **skip**, **using**, **bins**, and **smooth** are discussed separately. In brief\n\n- **skip N** tells the program to ignore N lines at the start of the input file\n- **binary** indicates that the file contains binary data rather than text\n- **index** selects which data sets in a multi-data-set file are to be plotted\n- **every** specifies which points within a single data set are to be plotted\n- **using** specifies which columns in the file are to be used in which order\n- **smooth** performs simple filtering, interpolation, or curve-fitting of the data prior to plotting\n- **bins** sorts individual input points into equal-sized intervals along x and plots a single accumulated value per interval\n- **volatile** indicates that the content of the file may not be available to reread later and therefore it should be retained internally for re-use.\n\n**splot** has a similar syntax but does not support **smooth** or **bins**.\n\nThe **noautoscale** keyword means that the points making up this plot will be ignored when automatically determining axis range limits.\n\nTEXT DATA FILES:\n\nEach non-empty line in a data file describes one data point, except that records beginning with **\\#** (and also with **!** on VMS) will be treated as comments and ignored.\n\nDepending on the plot style and options selected, from one to eight values are read from each line and associated with a single data point. See **[using](plot#using)**.\n\nThe individual records on a single line of data must be separated by white space (one or more blanks or tabs) a special field separator character is is specified by the **set datafile** command. A single field may itself contain white space characters if the entire field is enclosed in a pair of double quotes, or if a field separator other than white space is in effect. Whitespace inside a pair of double quotes is ignored when counting columns, so the following datafile line has three columns:\n\n    1.0 \"second column\" 3.0\n\nData may be written in exponential format with the exponent preceded by the letter e or E. The fortran exponential specifiers d, D, q, and Q may also be used if the command **set datafile fortran** is in effect.\n\nBlank records in a data file are significant. Single blank records designate discontinuities in a **plot**; no line will join points separated by a blank records (if they are plotted with a line style). Two blank records in a row indicate a break between separate data sets. See **[index](plot#index)**.\n\nIf autoscaling has been enabled (**set autoscale**), the axes are automatically extended to include all datapoints, with a whole number of tic marks if tics are being drawn. This has two consequences: i) For **splot**, the corner of the surface may not coincide with the corner of the base. In this case, no vertical line is drawn. ii) When plotting data with the same x range on a dual-axis graph, the x coordinates may not coincide if the x2tics are not being drawn. This is because the x axis has been autoextended to a whole number of tics, but the x2 axis has not. The following example illustrates the problem:\n\n    reset; plot '-', '-' axes x2y1\n    1 1\n    19 19\n    e\n    1 1\n    19 19\n    e\n\nTo avoid this, you can use the **noextend** modifier of the **set autoscale** or **set \\[axis\\]range** commands. This turns off extension of the axis range to include the next tic mark.\n\nLabel coordinates and text can also be read from a data file (see **[labels](labels#labels)**).\n\n### Bins\n\nSyntax:\n\n    plot 'DATA' using <XCOL> {:<YCOL>} bins{=<NBINS>}\n         {binrange [<LOW>:<HIGH>]} {binwidth=<width>}\n         {binvalue={sum|avg}\n\nThe **bins** option to a **plot** command first assigns the original data to equal width bins on x and then plots a single value per bin. The default number of bins is controlled by **set samples**, but this can be changed by giving an explicit number of bins in the command.\n\nIf no binrange is given, the range is taken from the extremes of the x values found in 'DATA'.\n\nGiven the range and the number of bins, bin width is calculated automatically and points are assigned to bins 0 to NBINS-1\n\n    BINWIDTH = (HIGH - LOW) / (NBINS-1)\n    xmin = LOW - BINWIDTH/2\n    xmax = HIGH + BINWIDTH/2\n    first bin holds points with (xmin <= x < xmin + BINWIDTH)\n    last bin holds points with (xmax-BINWIDTH <= x < xman)\n    each point is assigned to bin i = floor(NBINS * (x-xmin)/(xmax-xmin))\n\nAlternatively you can provide a fixed bin width, in which case nbins is calculated as the smallest number of bins that will span the range.\n\nOn output bins are plotted or tabulated by midpoint. E.g. if the program calculates bin width as shown above, the x coordinate output for the first bin is x=LOW (not x=xmin).\n\nIf only a single column is given in the using clause then each data point contributes a count of 1 to the accumulation of total counts in the bin for that x coordinate value. If a second column is given then the value in that column is added to the accumulation for the bin. Thus the following two plot command are equivalent:\n\n    plot 'DATA\" using N bins=20\n    set samples 20\n    plot 'DATA' using (column(N)):(1)\n\nThe y value plotted for each bin is the sum of the y values over all points in that bin. This corresponds to **binvalue=sum**. EXPERIMENTAL: **binvalue=avg** instead plots the mean y value for that bin.\n\nFor related plotting styles see **[smooth frequency](plot#smooth_frequency)** and **[smooth kdensity](plot#smooth_kdensity)**.\n\n### Columnheaders\n\nExtra lines at the start of a data file may be explicitly ignored using the **skip** keyword in the plot command. A single additional line containing text column headers may be present. It is skipped automatically if the plot command refers explicitly to column headers, e.g. by using them for titles. Otherwise you may need to skip it explicitly either by adding one to the skip count or by setting the attribute **set datafile columnheaders**. See **[skip](plot#skip)**, **[columnhead](expressions#columnhead)**, **[autotitle columnheader](set_show#autotitle_columnheader)**, **[set datafile](set_show#set_datafile)**.\n\n### Csv files\n\nSyntax:\n\n    set datafile separator {whitespace | tab | comma | \"chars\"}\n\n\"csv\" is short for \"comma-separated values\". The term \"csv file\" is loosely applied to files in which data fields are delimited by a specific character, not necessarily a comma. To read data from a csv file you must tell gnuplot what the field-delimiting character is. For instance to read from a file using semicolon as a field delimiter:\n\n    set datafile separator \";\"\n\nSee **[set datafile separator](set_show#set_datafile_separator)**. This applies only to files used for input. To create a csv file on output, use the corresponding **separator** option to **set table**.\n\n### Every\n\nThe **every** keyword allows a periodic sampling of a data set to be plotted.\n\nFor ordinary files a \"point\" single record (line); a \"block\" of data is a set of consecutive records with blank lines before and after the block.\n\nFor matrix data a \"block\" and \"point\" correspond to \"row\" and \"column\". See **[matrix every](splot#matrix_every)**.\n\nSyntax:\n\n    plot 'file' every {<point_incr>}\n                        {:{<block_incr>}\n                          {:{<start_point>}\n                            {:{<start_block>}\n                              {:{<end_point>}\n                                {:<end_block>}}}}}\n\nThe data points to be plotted are selected according to a loop from \\<**start_point**\\> to \\<**end_point**\\> with increment \\<**point_incr**\\> and the blocks according to a loop from \\<**start_block**\\> to \\<**end_block**\\> with increment \\<**block_incr**\\>.\n\nThe first datum in each block is numbered '0', as is the first block in the file.\n\nNote that records containing unplottable information are counted.\n\nAny of the numbers can be omitted; the increments default to unity, the start values to the first point or block, and the end values to the last point or block. ':' at the end of the **every** option is not permitted. If **every** is not specified, all points in all lines are plotted.\n\nExamples:\n\n    every :::3::3    # selects just the fourth block ('0' is first)\n    every :::::9     # selects the first 10 blocks\n    every 2:2        # selects every other point in every other block\n    every ::5::15    # selects points 5 through 15 in each block\n\nSee [simple plot demos (simple.dem) ](http://www.gnuplot.info/demo/simple.html)\n\n, [Non-parametric splot demos ](http://www.gnuplot.info/demo/surface1.html)\n\n, and [Parametric splot demos ](http://www.gnuplot.info/demo/surface2.html)\n\n.\n\n### Example datafile\n\nThis example plots the data in the file \"population.dat\" and a theoretical curve:\n\n    pop(x) = 103*exp((1965-x)/10)\n    set xrange [1960:1990]\n    plot 'population.dat', pop(x)\n\nThe file \"population.dat\" might contain:\n\n    # Gnu population in Antarctica since 1965\n       1965   103\n       1970   55\n       1975   34\n       1980   24\n       1985   10\n\nBinary examples:\n\n    # Selects two float values (second one implicit) with a float value\n    # discarded between them for an indefinite length of 1D data.\n    plot '<file_name>' binary format=\"%float%*float\" using 1:2 with lines\n\n    # The data file header contains all details necessary for creating\n    # coordinates from an EDF file.\n    plot '<file_name>' binary filetype=edf with image\n    plot '<file_name>.edf' binary filetype=auto with image\n\n    # Selects three unsigned characters for components of a raw RGB image\n    # and flips the y-dimension so that typical image orientation (start\n    # at top left corner) translates to the Cartesian plane.  Pixel\n    # spacing is given and there are two images in the file.  One of them\n    # is translated via origin.\n    plot '<file_name>' binary array=(512,1024):(1024,512) format='%uchar' \\\n         dx=2:1 dy=1:2 origin=(0,0):(1024,1024) flipy u 1:2:3 w rgbimage\n\n    # Four separate records in which the coordinates are part of the\n    # data file.  The file was created with a endianess different from\n    # the system on which gnuplot is running.\n    splot '<file_name>' binary record=30:30:29:26 endian=swap u 1:2:3\n\n    # Same input file, but this time we skip the 1st and 3rd records\n    splot '<file_name>' binary record=30:26 skip=360:348 endian=swap u 1:2:3\n\nSee also **[binary matrix](splot#binary_matrix)**.\n\n### Index\n\nThe **index** keyword allows you to select specific data sets in a multi-data-set file for plotting.\n\nSyntax:\n\n    plot 'file' index { <m>{:<n>{:<p>}} | \"<name>\" }\n\nData sets are separated by pairs of blank records. **index \\<m\\>** selects only set \\<m\\>; **index \\<m\\>:\\<n\\>** selects sets in the range \\<m\\> to \\<n\\>; and **index \\<m\\>:\\<n\\>:\\<p\\>** selects indices \\<m\\>, \\<m\\>+\\<p\\>, \\<m\\>+2\\<p\\>, etc., but stopping at \\<n\\>. Following C indexing, the index 0 is assigned to the first data set in the file. Specifying too large an index results in an error message. If \\<p\\> is specified but \\<n\\> is left blank then every \\<p\\>-th dataset is read until the end of the file. If **index** is not specified, the entire file is plotted as a single data set.\n\nExample:\n\n    plot 'file' index 4:5\n\nFor each point in the file, the index value of the data set it appears in is available via the pseudo-column **column(-2)**. This leads to an alternative way of distinguishing individual data sets within a file as shown below. This is more awkward than the **index** command if all you are doing is selecting one data set for plotting, but is very useful if you want to assign different properties to each data set. See **[pseudocolumns](plot#pseudocolumns)**, **[lc variable](linetypes_colors_styles#lc_variable)**.\n\nExample:\n\n    plot 'file' using 1:(column(-2)==4 ? $2 : NaN)        # very awkward\n    plot 'file' using 1:2:(column(-2)) linecolor variable # very useful!\n\n**index '\\<name\\>'** selects the data set with name '\\<name\\>'. Names are assigned to data sets in comment lines. The comment character and leading white space are removed from the comment line. If the resulting line starts with \\<name\\>, the following data set is now named \\<name\\> and can be selected.\n\nExample:\n\n    plot 'file' index 'Population'\n\nPlease note that every comment that starts with \\<name\\> will name the following data set. To avoid problems it may be useful to choose a naming scheme like '== Population ==' or '\\[Population\\]'.\n\n### Skip\n\nThe **skip** keyword tells the program to skip lines at the start of a text (i.e. not binary) data file. The lines that are skipped do not count toward the line count used in processing the **every** keyword. Note that **skip N** skips lines only at the start of the file, whereas **every ::N** skips lines at the start of every block of data in the file. See also **[binary skip](plot#binary_skip)** for a similar option that applies to binary data files.\n\n### Smooth\n\n**gnuplot** includes a few general-purpose routines for filtering, interpolation and grouping data as it is input; these are grouped under the **smooth** option. More sophisticated data processing may be performed by preprocessing the data externally or by using **fit** with an appropriate model.\n\nSyntax:\n\n    smooth {unique | frequency | fnormal | cumulative | cnormal | bins\n                   | kdensity {bandwidth} {period}\n                   | csplines | acsplines | mcsplines | bezier | sbezier\n                   | unwrap | zsort}\n\nThe **unique**, **frequency**, **fnormal**, **cumulative** and **cnormal** sort the data on x and then plot some aspect of the distribution of x values.\n\nThe spline and Bezier options determine coefficients describing a continuous curve between the endpoints of the data. This curve is then plotted in the same manner as a function, that is, by finding its value at uniform intervals along the abscissa (see **[set samples](set_show#set_samples)**) and connecting these points with straight line segments. If the data set is interrupted by blank lines or undefined values a separate continuous curve is fit for each uninterrupted subset of the data. Adjacent separately fit segments may be separated by a gap or discontinuity.\n\n**unwrap** manipulates the data to avoid jumps of more than pi by adding or subtracting multiples of 2\\*pi.\n\n**zsort** uses a 3rd column of input to sort points prior to plotting.\n\nIf **autoscale** is in effect, axis ranges will be computed for the final curve rather than for the original data.\n\nIf **autoscale** is not in effect, and a spline curve is being generated, sampling of the spline fit is done across the intersection of the x range covered by the input data and the fixed abscissa range defined by **set xrange**.\n\nIf too few points are available to apply the requested smoothing operation an error message is produced.\n\nThe **smooth** options have no effect on function plots.\n\n#### Acsplines\n\nThe **smooth acsplines** option approximates the data with a natural smoothing spline. After the data are made monotonic in x (see **[smooth unique](plot#smooth_unique)**), a curve is piecewise constructed from segments of cubic polynomials whose coefficients are found by fitting to the individual data points weighted by the value, if any, given in the third column of the using spec. The default is equivalent to\n\n    plot 'data-file' using 1:2:(1.0) smooth acsplines\n\nQualitatively, the absolute magnitude of the weights determines the number of segments used to construct the curve. If the weights are large, the effect of each datum is large and the curve approaches that produced by connecting consecutive points with natural cubic splines. If the weights are small, the curve is composed of fewer segments and thus is smoother; the limiting case is the single segment produced by a weighted linear least squares fit to all the data. The smoothing weight can be expressed in terms of errors as a statistical weight for a point divided by a \"smoothing factor\" for the curve so that (standard) errors in the file can be used as smoothing weights.\n\nExample:\n\n    sw(x,S)=1/(x*x*S)\n    plot 'data_file' using 1:2:(sw($3,100)) smooth acsplines\n\n#### Bezier\n\nThe **smooth bezier** option approximates the data with a Bezier curve of degree n (the number of data points) that connects the endpoints.\n\n#### Bins\n\n**smooth bins** is the same as **bins**. See **[bins](plot#bins)**. For related plotting styles see **[smooth frequency](plot#smooth_frequency)** and **[smooth kdensity](plot#smooth_kdensity)**.\n\n#### Csplines\n\nThe **smooth csplines** option connects consecutive points by natural cubic splines after rendering the data monotonic (see **[smooth unique](plot#smooth_unique)**).\n\n#### Mcsplines\n\nThe **smooth mcsplines** option connects consecutive points by cubic splines constrained such that the smoothed function preserves the monotonicity and convexity of the original data points. This reduces the effect of outliers. FN Fritsch & RE Carlson (1980) \"Monotone Piecewise Cubic Interpolation\", SIAM Journal on Numerical Analysis 17: 238–246.\n\n#### Sbezier\n\nThe **smooth sbezier** option first renders the data monotonic (**unique**) and then applies the **bezier** algorithm.\n\n#### Unique\n\nThe **smooth unique** option makes the data monotonic in x; points with the same x-value are replaced by a single point having the average y-value. The resulting points are then connected by straight line segments.\n\n#### Unwrap\n\nThe **smooth unwrap** option modifies the input data so that any two successive points will not differ by more than pi; a point whose y value is outside this range will be incremented or decremented by multiples of 2pi until it falls within pi of the previous point. This operation is useful for making wrapped phase measurements continuous over time.\n\n#### Frequency\n\nThe **smooth frequency** option makes the data monotonic in x; points with the same x-value are replaced by a single point having the summed y-values. To plot a histogram of the number of data values in equal size bins, set the y-value to 1.0 so that the sum is a count of occurrences in that bin. This is done implicitly if only a single column is provided. Example:\n\n    binwidth = <something>  # set width of x values in each bin\n    bin(val) = binwidth * floor(val/binwidth)\n    plot \"datafile\" using (bin(column(1))):(1.0) smooth frequency\n    plot \"datafile\" using (bin(column(1))) smooth frequency  # same result\n\nSee also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)\n\n#### Fnormal\n\nThe **smooth fnormal** option work just like the **frequency** option, but produces a normalized histogram. It makes the data monotonic in x and normalises the y-values so they all sum to 1. Points with the same x-value are replaced by a single point containing the sumed y-values. To plot a histogram of the number of data values in equal size bins, set the y-value to 1.0 so that the sum is a count of occurrences in that bin. This is done implicitly if only a single column is provided. See also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)\n\n#### Cumulative\n\nThe **smooth cumulative** option makes the data monotonic in x; points with the same x-value are replaced by a single point containing the cumulative sum of y-values of all data points with lower x-values (i.e. to the left of the current data point). This can be used to obtain a cumulative distribution function from data. See also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)\n\n#### Cnormal\n\nThe **smooth cnormal** option makes the data monotonic in x and normalises the y-values onto the range \\[0:1\\]. Points with the same x-value are replaced by a single point containing the cumulative sum of y-values of all data points with lower x-values (i.e. to the left of the current data point) divided by the total sum of all y-values. This can be used to obtain a normalised cumulative distribution function from data (useful when comparing sets of samples with differing numbers of members). See also [smooth.dem ](http://www.gnuplot.info/demo/smooth.html)\n\n#### Kdensity\n\nThe **smooth kdensity** option generates and plots a kernel density estimate using Gaussian kernels for the distribution from which a set of values was drawn. Values are taken from the first data column, optional weights are taken from the second column. A Gaussian is placed at the location of each point and the sum of all these Gaussians is plotted as a function. To obtain a normalized histogram, each weight should be 1/number-of-points.\n\nBandwidth: By default gnuplot calculates and uses the bandwidth which would be optimal for normally distributed data values.\n\n    default_bandwidth = sigma * (4/3N) ** (0.2)\n\nThis will usually be a very conservative, i.e. broad bandwidth. Alternatively, you can provide an explicit bandwidth.\n\n    plot $DATA smooth kdensity bandwidth <value> with boxes\n\nThe bandwidth used in the previous plot is stored in GPVAL_KDENSITY_BANDWIDTH.\n\nPeriod: For periodic data individual Gaussian components should be treated as repeating at intervals of one period. One example is data measured as a function of angle, where the period is 2pi. Another example is data indexed by day-of-year and measured over multiple years, where the period is 365. In such cases the period should be provided in the plot command:\n\n    plot $ANGULAR_DAT smooth kdensity period 2*pi with lines\n\n#### Zsort\n\nSyntax\n\n    plot FOO using x:y:z:color smooth zsort with points lc palette\n\nThe intended use is to filter presentation of 2D scatter plots with a huge number of points so that the distribution of high-scoring points remains evident. Sorting the points on z guarantees that points with a high z-value will not be obscured by points with lower z-values. Limited to plot style \"with points\".\n\n### Special-filenames\n\nThere are a few filenames that have a special meaning: ' ', '-', '+' and '++'.\n\nThe empty filename ' ' tells gnuplot to re-use the previous input file in the same plot command. So to plot two columns from the same input file:\n\n    plot 'filename' using 1:2, ” using 1:3\n\nThe filename can also be reused over subsequent plot commands, however **save** then only records the name in a comment.\n\nThe special filenames '+' and '++' are a mechanism to allow the full range of **using** specifiers and plot styles with inline functions. Normally a function plot can only have a single y (or z) value associated with each sampled point. The pseudo-file '+' treats the sampled points as column 1, and allows additional column values to be specified via a **using** specification, just as for a true input file. The number of samples is controlled via **set samples**. By default samples are generated over the range given by **set trange**, or if trange has not been set than over the full range of **set xrange**.\n\nNote: The use of trange is a change from previous gnuplot versions. It allows the sampling range to differ from the x axis range.\n\n    plot '+' using ($1):(sin($1)):(sin($1)**2) with filledcurves\n\nAn independent sampling range can be provided immediately before the '+'. As in normal function plots, a name can be assigned to the independent variable. If given for the first plot element, the sampling range specifier has to be preceded by the **sample** keyword (see also **[plot sampling](plot#plot_sampling)**).\n\n    plot sample [beta=0:2*pi] '+' using (sin(beta)):(cos(beta)) with lines\n\nAdditionally, the range specifier of '+' supports giving a sampling increment.\n\n    plot $MYDATA, [t=-3:25:1] '+' using (t):(f(t))\n\nThe pseudo-file '++' returns 2 columns of data forming a regular grid of \\[u,v\\] coordinates with the number of points along u controlled by **set samples** and the number of points along v controlled by **set isosamples**. You must set urange and vrange before plotting '++'. However the x and y ranges can be autoscaled or can be explicitly set to different values than urange and vrange. Use of u and v to sample '++' is a CHANGE introduced in version 5.2 Examples:\n\n    splot '++' using 1:2:(sin($1)*sin($2)) with pm3d\n    plot '++' using 1:2:(sin($1)*sin($2)) with image\n\nThe special filename **'-'** specifies that the data are inline; i.e., they follow the command. Only the data follow the command; **plot** options like filters, titles, and line styles remain on the **plot** command line. This is similar to \\<\\< in unix shell script, and $DECK in VMS DCL. The data are entered as though they are being read from a file, one data point per record. The letter \"e\" at the start of the first column terminates data entry.\n\n**'-'** is intended for situations where it is useful to have data and commands together, e.g. when both are piped to **gnuplot** from another application. Some of the demos, for example, might use this feature. While **plot** options such as **index** and **every** are recognized, their use forces you to enter data that won't be used. For all but the simplest cases it is probably easier to first define a datablock and then read from it rather than from **'-'**. See **[datablocks](inline_data_datablocks#datablocks)**.\n\nIf you use **'-'** with **replot**, you may need to enter the data more than once. See **[replot](replot#replot)**, **[refresh](refresh#refresh)**. Here again it may be better to use a datablock.\n\nA blank filename (' ') specifies that the previous filename should be reused. This can be useful with things like\n\n    plot 'a/very/long/filename' using 1:2, ” using 1:3, ” using 1:4\n\n(If you use both **'-'** and **' '** on the same **plot** command, you'll need to have two sets of inline data, as in the example above.)\n\n### Piped-data\n\nOn systems with a popen function, the datafile can be piped through a shell command by starting the file name with a '\\<'. For example,\n\n    pop(x) = 103*exp(-x/10)\n    plot \"< awk '{print $1-1965, $2}' population.dat\", pop(x)\n\nwould plot the same information as the first population example but with years since 1965 as the x axis. If you want to execute this example, you have to delete all comments from the data file above or substitute the following command for the first part of the command above (the part up to the comma):\n\n    plot \"< awk '$0 !~ /^#/ {print $1-1965, $2}' population.dat\"\n\nWhile this approach is most flexible, it is possible to achieve simple filtering with the **using** keyword.\n\nOn systems with an fdopen() function, data can be read from an arbitrary file descriptor attached to either a file or pipe. To read from file descriptor **n** use **'\\<&n'**. This allows you to easily pipe in several data files in a single call from a POSIX shell:\n\n    $ gnuplot -p -e \"plot '<&3', '<&4'\" 3<data-3 4<data-4\n    $ ./gnuplot 5< <(myprogram -with -options)\n    gnuplot> plot '<&5'\n\n### Using\n\nThe most common datafile modifier is **using**. It tells the program which columns of data in the input file are to be plotted.\n\nSyntax:\n\n    plot 'file' using <entry> {:<entry> {:<entry> ...}} {'format'}\n\nIf a format is specified, it is used to read in each datafile record using the C library 'scanf' function. Otherwise the record is interpreted as consisting of columns (fields) of data separated by whitespace (spaces and/or tabs), but see **[datafile separator](set_show#datafile_separator)**.\n\nEach \\<entry\\> may be a simple column number that selects the value from one field of the input file, a string that matches a column label in the first line of a data set, an expression enclosed in parentheses, or a special function not enclosed in parentheses such as xticlabels(2).\n\nIf the entry is an expression in parentheses, then the function column(N) may be used to indicate the value in column N. That is, column(1) refers to the first item read, column(2) to the second, and so on. The special symbols $1, $2, ... are shorthand for column(1), column(2) ...\n\nThe special symbol $# evaluates to the total number of columns in the current line of input, so column($#) or stringcolumn($#) always returns the content of the final column even if the number of columns is unknown or different lines in the file contain different numbers of columns.\n\nThe function **valid(N)** tests whether column N contains a valid number. If each column of data in the input file contains a label in the first row rather than a data value, this label can be used to identify the column on input and/or in the plot legend. The column() function can be used to select an input column by label rather than by column number. For example, if the data file contains\n\n    Height    Weight    Age\n    val1      val1      val1\n    ...       ...       ...\n\nthen the following plot commands are all equivalent\n\n    plot 'datafile' using 3:1, ” using 3:2\n    plot 'datafile' using (column(\"Age\")):(column(1)), \\\n                 ” using (column(\"Age\")):(column(2))\n    plot 'datafile' using \"Age\":\"Height\", ” using \"Age\":\"Weight\"\n\nThe full string must match. Comparison is case-sensitive. To use column labels in the plot legend, use **set key autotitle columnhead**.\n\nIn addition to the actual columns 1...N in the input data file, gnuplot presents data from several \"pseudo-columns\" that hold bookkeeping information. E.g. $0 or column(0) returns the sequence number of this data record within a dataset. Please see **[pseudocolumns](plot#pseudocolumns)**.\n\nAn empty \\<entry\\> will default to its order in the list of entries. For example, **using ::4** is interpreted as **using 1:2:4**.\n\nIf the **using** list has only a single entry, that \\<entry\\> will be used for y and the data point number (pseudo-column $0) is used for x; for example, \"**plot 'file' using 1**\" is identical to \"**plot 'file' using 0:1**\". If the **using** list has two entries, these will be used for x and y. See **[set style](set_show#set_style)** and **[fit](fit#fit)** for details about plotting styles that make use of data from additional columns of input.\n\n'scanf' accepts several numerical specifications but **gnuplot** requires all inputs to be double-precision floating-point variables, so \"%lf\" is essentially the only permissible specifier. A format string given by the user must contain at least one such input specifier, and no more than seven of them. 'scanf' expects to see white space — a blank, tab (\" \\\\t\"), newline (\" \\\\n\"), or formfeed (\" \\\\f\") — between numbers; anything else in the input stream must be explicitly skipped.\n\nNote that the use of \" \\\\t\", \" \\\\n\", or \" \\\\f\" requires use of double-quotes rather than single-quotes.\n\n#### Using_examples\n\nThis creates a plot of the sum of the 2nd and 3rd data against the first: The format string specifies comma- rather than space-separated columns. The same result could be achieved by specifying **set datafile separator comma**.\n\n    plot 'file' using 1:($2+$3) '%lf,%lf,%lf'\n\nIn this example the data are read from the file \"MyData\" using a more complicated format:\n\n    plot 'MyData' using \"%*lf%lf%*20[^\\n]%lf\"\n\nThe meaning of this format is:\n\n    %*lf        ignore a number\n    %lf         read a double-precision number (x by default)\n    %*20[^\\n]   ignore 20 non-newline characters\n    %lf         read a double-precision number (y by default)\n\nOne trick is to use the ternary **?:** operator to filter data:\n\n    plot 'file' using 1:($3>10 ? $2 : 1/0)\n\nwhich plots the datum in column two against that in column one provided the datum in column three exceeds ten. **1/0** is undefined; **gnuplot** quietly ignores undefined points, so unsuitable points are suppressed. Or you can use the pre-defined variable NaN to achieve the same result.\n\nIn fact, you can use a constant expression for the column number, provided it doesn't start with an opening parenthesis; constructs like **using 0+(complicated expression)** can be used. The crucial point is that the expression is evaluated once if it doesn't start with a left parenthesis, or once for each data point read if it does.\n\nIf timeseries data are being used, the time can span multiple columns. The starting column should be specified. Note that the spaces within the time must be included when calculating starting columns for other data. E.g., if the first element on a line is a time with an embedded space, the y value should be specified as column three.\n\nIt should be noted that (a) **plot 'file'**, (b) **plot 'file' using 1:2**, and (c) **plot 'file' using ($1):($2)** can be subtly different. The exact behaviour has changed in version 5. See **[missing](set_show#missing)**.\n\nIt is often possible to plot a file with lots of lines of garbage at the top simply by specifying\n\n    plot 'file' using 1:2\n\nHowever, if you want to leave text in your data files, it is safer to put the comment character (#) in the first column of the text lines.\n\n#### Pseudocolumns\n\nExpressions in the **using** clause of a plot statement can refer to additional bookkeeping values in addition to the actual data values contained in the input file. These are contained in \"pseudocolumns\".\n\n    column(0)   The sequential order of each point within a data set.\n                The counter starts at 0, increments on each non-blank,\n                non-comment line, and is reset by two sequential blank\n                records.  The shorthand form $0 is available.\n    column(-1)  This counter starts at 0, increments on a single blank line,\n                and is reset by two sequential blank lines.\n                This corresponds to the data line in array or grid data.\n                It can also be used to distinguish separate line segments\n                or polygons within a data set.\n    column(-2)  Starts at 0 and increments on two sequential blank lines.\n                This is the index number of the current data set within a\n                file that contains multiple data sets.  See `index`.\n    column($#)  The special symbol $# evaluates to the total number of\n                columns available, so column($#) refers to the last\n                (rightmost) field in the current input line.\n                column($# - 1) would refer to the last-but-one column, etc.\n\n#### Key\n\nThe layout of certain plot styles (column-stacked histograms, spider plots) is such that it would make no sense to generate plot titles from a data column header. Also it would make no sense to generate axis tic labels from the content of a data column (e.g. **using 2:3:xticlabels(1)**). These plots styles instead use the form **using 2:3:key(1)** to generate plot titles for the key from the text content of a data column, usually a first column of row headers. See the example given for **[spiderplot](spiderplot#spiderplot)**.\n\n#### Xticlabels\n\nAxis tick labels can be generated via a string function, usually taking a data column as an argument. The simplest form uses the data column itself as a string. That is, xticlabels(N) is shorthand for xticlabels(stringcolumn(N)). This example uses the contents of column 3 as x-axis tick labels.\n\n    plot 'datafile' using <xcol>:<ycol>:xticlabels(3) with <plotstyle>\n\nAxis tick labels may be generated for any of the plot axes: x x2 y y2 z. The **ticlabels(\\<labelcol\\>)** specifiers must come after all of the data coordinate specifiers in the **using** portion of the command. For each data point which has a valid set of X,Y\\[,Z\\] coordinates, the string value given to xticlabels() is added to the list of xtic labels at the same X coordinate as the point it belongs to. **xticlabels()** may be shortened to **xtic()** and so on.\n\nExample:\n\n    splot \"data\" using 2:4:6:xtic(1):ytic(3):ztic(6)\n\nIn this example the x and y axis tic labels are taken from different columns than the x and y coordinate values. The z axis tics, however, are generated from the z coordinate of the corresponding point.\n\nExample:\n\n    plot \"data\" using 1:2:xtic( $3 > 10. ? \"A\" : \"B\" )\n\nThis example shows the use of a string-valued function to generate x-axis tick labels. Each point in the data file generates a tick mark on x labeled either \"A\" or \"B\" depending on the value in column 3.\n\n#### X2ticlabels\n\nSee **[plot using xticlabels](plot#plot_using_xticlabels)**.\n\n#### Yticlabels\n\nSee **[plot using xticlabels](plot#plot_using_xticlabels)**.\n\n#### Y2ticlabels\n\nSee **[plot using xticlabels](plot#plot_using_xticlabels)**.\n\n#### Zticlabels\n\nSee **[plot using xticlabels](plot#plot_using_xticlabels)**.\n\n#### Cbticlabels\n\nEXPERIMENTAL (details may change in a future release version) 2D plots: colorbar labels are placed at the palette coordinate used by the plot for variable coloring \"lc palette z\". 3D plots: colorbar labels are placed at the z coordinate of the point. Note that in the case of a 3D heat map with variable color that does not match z, this is probably not the correct label. See also **[plot using xticlabels](plot#plot_using_xticlabels)**.\n\n### Volatile\n\nThe **volatile** keyword in a plot command indicates that the data previously read from the input stream or file may not be available for re-reading. This tells the program to use **refresh** rather than **replot** commands whenever possible. See **[refresh](refresh#refresh)**.\n\n## Errorbars\n\nError bars are supported for 2D data file plots by reading one to four additional columns (or **using** entries); these additional values are used in different ways by the various errorbar styles.\n\nIn the default situation, **gnuplot** expects to see three, four, or six numbers on each line of the data file — either\n\n    (x, y, ydelta),\n    (x, y, ylow, yhigh),\n    (x, y, xdelta),\n    (x, y, xlow, xhigh),\n    (x, y, xdelta, ydelta), or\n    (x, y, xlow, xhigh, ylow, yhigh).\n\nThe x coordinate must be specified. The order of the numbers must be exactly as given above, though the **using** qualifier can manipulate the order and provide values for missing columns. For example,\n\n    plot 'file' with errorbars\n    plot 'file' using 1:2:(sqrt($1)) with xerrorbars\n    plot 'file' using 1:2:($1-$3):($1+$3):4:5 with xyerrorbars\n\nThe last example is for a file containing an unsupported combination of relative x and absolute y errors. The **using** entry generates absolute x min and max from the relative error.\n\nThe y error bar is a vertical line plotted from (x, ylow) to (x, yhigh). If ydelta is specified instead of ylow and yhigh, ylow = y - ydelta and yhigh = y + ydelta are derived. If there are only two numbers on the record, yhigh and ylow are both set to y. The x error bar is a horizontal line computed in the same fashion. To get lines plotted between the data points, **plot** the data file twice, once with errorbars and once with lines (but remember to use the **notitle** option on one to avoid two entries in the key). Alternately, use the errorlines command (see **[errorlines](plot#errorlines)**).\n\nThe tic marks at the ends of the bar are controlled by **set errorbars**.\n\nIf autoscaling is on, the ranges will be adjusted to include the error bars.\n\nSee also [errorbar demos. ](http://www.gnuplot.info/demo/mgr.html)\n\nSee **[plot using](plot#plot_using)**, **[plot with](plot#plot_with)**, and **[set style](set_show#set_style)** for more information.\n\n## Errorlines\n\nLines with error bars are supported for 2D data file plots by reading one to four additional columns (or **using** entries); these additional values are used in different ways by the various errorlines styles.\n\nIn the default situation, **gnuplot** expects to see three, four, or six numbers on each line of the data file — either\n\n    (x, y, ydelta),\n    (x, y, ylow, yhigh),\n    (x, y, xdelta),\n    (x, y, xlow, xhigh),\n    (x, y, xdelta, ydelta), or\n    (x, y, xlow, xhigh, ylow, yhigh).\n\nThe x coordinate must be specified. The order of the numbers must be exactly as given above, though the **using** qualifier can manipulate the order and provide values for missing columns. For example,\n\n    plot 'file' with errorlines\n    plot 'file' using 1:2:(sqrt($1)) with xerrorlines\n    plot 'file' using 1:2:($1-$3):($1+$3):4:5 with xyerrorlines\n\nThe last example is for a file containing an unsupported combination of relative x and absolute y errors. The **using** entry generates absolute x min and max from the relative error.\n\nThe y error bar is a vertical line plotted from (x, ylow) to (x, yhigh). If ydelta is specified instead of ylow and yhigh, ylow = y - ydelta and yhigh = y + ydelta are derived. If there are only two numbers on the record, yhigh and ylow are both set to y. The x error bar is a horizontal line computed in the same fashion.\n\nThe tic marks at the ends of the bar are controlled by **set errorbars**.\n\nIf autoscaling is on, the ranges will be adjusted to include the error bars.\n\nSee **[plot using](plot#plot_using)**, **[plot with](plot#plot_with)**, and **[set style](set_show#set_style)** for more information.\n\n## Functions\n\nBuilt-in or user-defined functions can be displayed by the **plot** and **splot** commands in addition to, or instead of, data read from a file. The requested function is evaluated by sampling at regular intervals spanning the independent axis range\\[s\\]. See **[set samples](set_show#set_samples)** and **[set isosamples](set_show#set_isosamples)**. Example:\n\n    approx(ang) = ang - ang**3 / (3*2)\n    plot sin(x) title \"sin(x)\", approx(x) title \"approximation\"\n\nTo set a default plot style for functions, see **[set style function](set_show#set_style_function)**. For information on built-in functions, see **[expressions functions](expressions#expressions_functions)**. For information on defining your own functions, see **[user-defined](expressions#user-defined)**.\n\n## Parametric\n\nWhen in parametric mode (**set parametric**) mathematical expressions must be given in pairs for **plot** and in triplets for **splot**.\n\nExamples:\n\n    plot sin(t),t**2\n    splot cos(u)*cos(v),cos(u)*sin(v),sin(u)\n\nData files are plotted as before, except any preceding parametric function must be fully specified before a data file is given as a plot. In other words, the x parametric function (**sin(t)** above) and the y parametric function (**t\\*\\*2** above) must not be interrupted with any modifiers or data functions; doing so will generate a syntax error stating that the parametric function is not fully specified.\n\nOther modifiers, such as **with** and **title**, may be specified only after the parametric function has been completed:\n\n    plot sin(t),t**2 title 'Parametric example' with linespoints\n\nSee also [Parametric Mode Demos. ](http://www.gnuplot.info/demo/param.html)\n\n## Ranges\n\nThis section describes only the optional axis ranges that may appear as the very first items in a **plot** command. If present, these ranges override any range limits established by a previous **set range** statement. For optional ranges elsewhere in a **plot** command that limit sampling of an individual plot component see **[sampling](plot#sampling)**.\n\nSyntax:\n\n    [{<dummy-var>=}{{<min>}:{<max>}}]\n    [{{<min>}:{<max>}}]\n\nThe first form applies to the independent variable (**xrange** or **trange**, if in parametric mode). The second form applies to dependent variables. \\<dummy-var\\> optionally establishes a new name for the independent variable. (The default name may be changed with **set dummy**.)\n\nIn non-parametric mode, ranges must be given in the order\n\n    plot [<xrange>][<yrange>][<x2range>][<y2range>] ...\n\nIn parametric mode, ranges must be given in the order\n\n    plot [<trange>][<xrange>][<yrange>][<x2range>][<y2range>] ...\n\nThe following **plot** command shows setting **trange** to \\[-pi:pi\\], **xrange** to \\[-1.3:1.3\\] and **yrange** to \\[-1:1\\] for the duration of the graph:\n\n    plot [-pi:pi] [-1.3:1.3] [-1:1] sin(t),t**2\n\n**\\*** can be used to allow autoscaling of either of min and max. Use an empty range **\\[\\]** as a placeholder if necessary.\n\nRanges specified on the **plot** or **splot** command line affect only that one graph; use the **set xrange**, **set yrange**, etc., commands to change the default ranges for future graphs.\n\nThe use of on-the-fly range specifiers in a plot command may not yield the expected result for linked axes (see **[set link](set_show#set_link)**).\n\nFor time data you must provide the range in quotes, using the same format used to read time from the datafile. See **[set timefmt](set_show#set_timefmt)**.\n\nExamples:\n\nThis uses the current ranges:\n\n    plot cos(x)\n\nThis sets the x range only:\n\n    plot [-10:30] sin(pi*x)/(pi*x)\n\nThis is the same, but uses t as the dummy-variable:\n\n    plot [t = -10 :30]  sin(pi*t)/(pi*t)\n\nThis sets both the x and y ranges:\n\n    plot [-pi:pi] [-3:3]  tan(x), 1/x\n\nThis sets only the y range:\n\n    plot [ ] [-2:sin(5)*-8] sin(x)**besj0(x)\n\nThis sets xmax and ymin only:\n\n    plot [:200] [-pi:]  $mydata using 1:2\n\nThis sets the x range for a timeseries:\n\n    set timefmt \"%d/%m/%y %H:%M\"\n    plot [\"1/6/93 12:00\":\"5/6/93 12:00\"] 'timedata.dat'\n\n## Sampling\n\n### 1D sampling (x or t axis)\n\nBy default, computed functions or data generated for the pseudo-file \"+\" are sampled over the entire range of the plot as set by a prior **set xrange** command, by an explicit global range specifier at the very start of the plot or splot command, or by autoscaling the xrange to span data seen in all the elements of this plot. However, individual plot components can be assigned a more restricted sampling range.\n\nExamples:\n\nThis establishes a total range on x running from 0 to 1000 and then plots data from a file and two functions each spanning a portion of the total range:\n\n    plot [0:1000] 'datafile', [0:200] func1(x), [200:500] func2(x)\n\nThis is similar except that the total range is established by the contents of the data file. In this case the sampled functions may or may not be entirely contained in the plot:\n\n    set autoscale x\n    plot 'datafile', [0:200] func1(x), [200:500] func2(x)\n\nThis command is ambiguous. The initial range will be interpreted as applying to the entire plot, not solely to the sampling of the first function as was probably the intent:\n\n    plot [0:10] f(x), [10:20] g(x), [20:30] h(x)\n\nThis command removes the ambiguity of the previous example by inserting the keyword **sample** so that the range is not applied to the entire plot:\n\n    plot sample [0:10] f(x), [10:20] g(x), [20:30] h(x)\n\nThis example shows one way of tracing out a helix in a 3D plot\n\n    splot [-2:2][-2:2] sample [h=1:10] '+' using (cos(h)):(sin(h)):(h)\n\n### 2D sampling (u and v axes)\n\nComputed functions or data generated for the pseudo-file '++' use samples generated along the u and v axes. This is a CHANGE from versions prior to 5.2 which sampled along the x and y axes. See **[special-filenames ++](plot#special-filenames_++)**. 2D sampling can be used in either **plot** or **splot** commands.\n\nExample of 2D sampling in a 2D **plot** command. These commands generated the plot shown for plotstyle **with vectors**. See **[vectors](vectors#vectors)**.\n\n    set urange [ -2.0 : 2.0 ]\n    set vrange [ -2.0 : 2.0 ]\n    plot '++' using ($1):($2):($2*0.4):(-$1*0.4) with vectors\n\nExample of 2D sampling in a 3D **splot** command. These commands are similar to the ones used in **sampling.dem**. Note that the two surfaces are sampled over u and v ranges smaller than the full x and y ranges of the resulting plot.\n\n    set title \"3D sampling range distinct from plot x/y range\"\n    set xrange [1:100]\n    set yrange [1:100]\n    splot sample [u=30:70][v=0:50] '++' using 1:2:(u*v) lt 3, \\\n          [u=40:80][v=30:60] '++' using (u):(v):(u*sqrt(v)) lt 4\n\nThe range specifiers for sampling on u and v can include an explicit sampling interval to control the number and spacing of samples:\n\n    splot sample [u=30:70:1][v=0:50:5] '++' using 1:2:(func($1,$2))\n\n## For loops in plot command\n\nIf many similar files or functions are to be plotted together, it may be convenient to do so by iterating over a shared plot command.\n\nSyntax:\n\n    plot for [<variable> = <start> : <end> {:<increment>}]\n    plot for [<variable> in \"string of words\"]\n\nThe scope of an iteration ends at the next comma or the end of the command, whichever comes first. An exception to this is that definitions are grouped with the following plot item even if there is an intervening comma. Note that iteration does not work for plots in parametric mode.\n\nExample:\n\n    plot for [j=1:3] sin(j*x)\n\nExample:\n\n    plot for [dataset in \"apples bananas\"] dataset.\"dat\" title dataset\n\nIn this example iteration is used both to generate a file name and a corresponding title.\n\nExample:\n\n    file(n) = sprintf(\"dataset_%d.dat\",n)\n    splot for [i=1:10] file(i) title sprintf(\"dataset %d\",i)\n\nThis example defines a string-valued function that generates file names, and plots ten such files together. The iteration variable ('i' in this example) is treated as an integer, and may be used more than once.\n\nExample:\n\n    set key left\n    plot for [n=1:4] x**n sprintf(\"%d\",n)\n\nThis example plots a family of functions.\n\nExample:\n\n    list = \"apple banana cabbage daikon eggplant\"\n    item(n) = word(list,n)\n    plot for [i=1:words(list)] item[i].\".dat\" title item(i)\n    list = \"new stuff\"\n    replot\n\nThis example steps through a list and plots once per item. Because the items are retrieved dynamically, you can change the list and then replot.\n\nExample:\n\n    list = \"apple banana cabbage daikon eggplant\"\n    plot for [i in list] i.\".dat\" title i\n    list = \"new stuff\"\n    replot\n\nThis example does exactly the same thing as the previous example, but uses the string iterator form of the command rather than an integer iterator.\n\nIf an iteration is to continue until all available data is consumed, use the symbol \\* instead of an integer \\<end\\>. This can be used to process all columns in a line, all datasets (separated by 2 blank lines) in a file, or all files matching a template.\n\nExamples:\n\n    plot for [i=2:*] 'datafile' using 1:i with histogram\n    splot for [i=0:*] 'datafile' index i using 1:2:3 with lines\n    plot for [i=1:*] file=sprintf(\"File_%03d.dat\",i) file using 2 title file\n\n## Title\n\nBy default each plot is listed in the key by the corresponding function or file name. You can give an explicit plot title instead using the **title** option.\n\nSyntax:\n\n    title <text> | notitle [<ignored text>]\n    title columnheader | title columnheader(N)\n          {at {beginning|end}} {{no}enhanced}\n\nwhere \\<text\\> is a quoted string or an expression that evaluates to a string. The quotes will not be shown in the key. Note: Starting with gnuplot version 5.4, if \\<text\\> is an expression or function it it evaluated after the corresponding function or data stream is plotted. This allows the title to reference quantities calculated or input during plotting, which was not possible in earlier gnuplot versions.\n\nThere is also an option that will interpret the first entry in a column of input data (i.e. the column header) as a text field, and use it as the key title. See **[datastrings](datastrings#datastrings)**. This can be made the default by specifying **set key autotitle columnhead**.\n\nThe line title and sample can be omitted from the key by using the keyword **notitle**. A null title (**title ' '**) is equivalent to **notitle**. If only the sample is wanted, use one or more blanks (**title ' '**). If **notitle** is followed by a string this string is ignored.\n\nIf **key autotitles** is set (which is the default) and neither **title** nor **notitle** are specified the line title is the function name or the file name as it appears on the **plot** command. If it is a file name, any datafile modifiers specified will be included in the default title.\n\nThe layout of the key itself (position, title justification, etc.) can be controlled using **[set key](set_show#set_key)**.\n\nThe **at** keyword allows you to place the plot title somewhere outside the auto-generated key box. The title can be placed immediately before or after the line in the graph itself by using **at {beginning\\|end}**. This option may be useful when plotting **with lines** but makes little sense for most other styles.\n\nTo place the plot title at an arbitrary location on the page, use the form **at \\<x-position\\>,\\<y-position\\>**. By default the position is interpreted in screen coordinates; e.g. **at 0.5, 0.5** is always the middle of the screen regardless of plot axis scales or borders. The format of titles placed in this way is still affected by key options. See **[set key](set_show#set_key)**.\n\nExamples:\n\nThis plots y=x with the title 'x':\n\n    plot x\n\nThis plots x squared with title \"x`^`2\" and file \"data.1\" with title \"measured data\":\n\n    plot x**2 title \"x^2\", 'data.1' t \"measured data\"\n\nPlot multiple columns of data, each of which contains its own title on the first line of the file. Place the titles after the corresponding lines rather than in a separate key:\n\n    unset key\n    set offset 0, graph 0.1\n    plot for [i=1:4] 'data' using i with lines title columnhead at end\n\nCreate a single key area for two separate plots:\n\n    set key Left reverse\n    set multiplot layout 2,2\n    plot sin(x) with points pt 6 title \"Left plot is sin(x)\" at 0.5, 0.30\n    plot cos(x) with points pt 7 title \"Right plot is cos(x)\" at 0.5, 0.27\n    unset multiplot\n\n## With\n\nFunctions and data may be displayed in one of a large number of styles. The **with** keyword provides the means of selection.\n\nSyntax:\n\n    with <style> { {linestyle | ls <line_style>}\n                   | {{linetype  | lt <line_type>}\n                      {linewidth | lw <line_width>}\n                      {linecolor | lc <colorspec>}\n                      {pointtype | pt <point_type>}\n                      {pointsize | ps <point_size>}\n                      {arrowstyle | as <arrowstyle_index>}\n                      {fill | fs <fillstyle>} {fillcolor | fc <colorspec>}\n                      {nohidden3d} {nocontours} {nosurface}\n                      {palette}}\n                 }\n\nwhere \\<style\\> is one of\n\n    lines        dots       steps     vectors      yerrorlines\n    points       impulses   fsteps    xerrorbar    xyerrorbars \n    linespoints  labels     histeps   xerrorlines  xyerrorlines\n    financebars  surface    arrows    yerrorbar    parallelaxes\n\nor\n\n    boxes         boxplot        ellipses       histograms  rgbalpha\n    boxerrorbars  candlesticks   filledcurves   image       rgbimage\n    boxxyerror    circles        fillsteps      pm3d        polygons\n    isosurface    zerrorfill\n\nor\n\n    table\n\nThe first group of styles have associated line, point, and text properties. The second group of styles also have fill properties. See **[fillstyle](set_show#fillstyle)**. Some styles have further sub-styles. See **plotting styles** for details of each. The **table** style produces tabular output rather than a plot. See **[set table](set_show#set_table)**.\n\nA default style may be chosen by **set style function** and **set style data**.\n\nBy default, each function and data file will use a different line type and point type, up to the maximum number of available types. All terminal drivers support at least six different point types, and re-use them, in order, if more are required. To see the complete set of line and point types available for the current terminal, type **[test](test#test)**.\n\nIf you wish to choose the line or point type for a single plot, \\<line_type\\> and \\<point_type\\> may be specified. These are positive integer constants (or expressions) that specify the line type and point type to be used for the plot. Use **test** to display the types available for your terminal.\n\nYou may also scale the line width and point size for a plot by using \\<line_width\\> and \\<point_size\\>, which are specified relative to the default values for each terminal. The pointsize may also be altered globally — see **[set pointsize](set_show#set_pointsize)** for details. But note that both \\<point_size\\> as set here and as set by **set pointsize** multiply the default point size — their effects are not cumulative. That is, **set pointsize 2; plot x w p ps 3** will use points three times default size, not six.\n\nIt is also possible to specify **pointsize variable** either as part of a line style or for an individual plot. In this case one extra column of input is required, i.e. 3 columns for a 2D plot and 4 columns for a 3D splot. The size of each individual point is determined by multiplying the global pointsize by the value read from the data file.\n\nIf you have defined specific line type/width and point type/size combinations with **set style line**, one of these may be selected by setting \\<line_style\\> to the index of the desired style.\n\nBoth 2D and 3D plots (**plot** and **splot** commands) can use colors from a smooth palette set previously with the command **set palette**. The color value corresponds to the z-value of the point itself or to a separate color coordinate provided in an optional additional **using** colymn. Color values may be treated either as a fraction of the palette range (**palette frac**) or as a coordinate value mapped onto the colorbox range (**palette** or **palette z**). See **[colorspec](linetypes_colors_styles#colorspec)**, **[set palette](set_show#set_palette)**, **[linetype](set_show#linetype)**.\n\nThe keyword **nohidden3d** applies only to plots made with the **splot** command. Normally the global option **set hidden3d** applies to all plots in the graph. You can attach the **nohidden3d** option to any individual plots that you want to exclude from the hidden3d processing. The individual elements other than surfaces (i.e. lines, dots, labels, ...) of a plot marked **nohidden3d** will all be drawn, even if they would normally be obscured by other plot elements.\n\nSimilarly, the keyword **nocontours** will turn off contouring for an individual plot even if the global property **set contour** is active.\n\nSimilarly, the keyword **nosurface** will turn off the 3D surface for an individual plot even if the global property **set surface** is active.\n\nThe keywords may be abbreviated as indicated.\n\nNote that the **linewidth**, **pointsize** and **palette** options are not supported by all terminals.\n\nExamples:\n\nThis plots sin(x) with impulses:\n\n    plot sin(x) with impulses\n\nThis plots x with points, x\\*\\*2 with the default:\n\n    plot x w points, x**2\n\nThis plots tan(x) with the default function style, file \"data.1\" with lines:\n\n    plot [ ] [-2:5] tan(x), 'data.1' with l\n\nThis plots \"leastsq.dat\" with impulses:\n\n    plot 'leastsq.dat' w i\n\nThis plots the data file \"population\" with boxes:\n\n    plot 'population' with boxes\n\nThis plots \"exper.dat\" with errorbars and lines connecting the points (errorbars require three or four columns):\n\n    plot 'exper.dat' w lines, 'exper.dat' notitle w errorbars\n\nAnother way to plot \"exper.dat\" with errorlines (errorbars require three or four columns):\n\n    plot 'exper.dat' w errorlines\n\nThis plots sin(x) and cos(x) with linespoints, using the same line type but different point types:\n\n    plot sin(x) with linesp lt 1 pt 3, cos(x) with linesp lt 1 pt 4\n\nThis plots file \"data\" with points of type 3 and twice usual size:\n\n    plot 'data' with points pointtype 3 pointsize 2\n\nThis plots file \"data\" with variable pointsize read from column 4\n\n    plot 'data' using 1:2:4 with points pt 5 pointsize variable\n\nThis plots two data sets with lines differing only by weight:\n\n    plot 'd1' t \"good\" w l lt 2 lw 3, 'd2' t \"bad\" w l lt 2 lw 1\n\nThis plots filled curve of x\\*x and a color stripe:\n\n    plot x*x with filledcurve closed, 40 with filledcurve y=10\n\nThis plots x\\*x and a color box:\n\n    plot x*x, (x>=-5 && x<=5 ? 40 : 1/0) with filledcurve y=10 lt 8\n\nThis plots a surface with color lines:\n\n    splot x*x-y*y with line palette\n\nThis plots two color surfaces at different altitudes:\n\n    splot x*x-y*y with pm3d, x*x+y*y with pm3d at t\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Plot
  id: set_show#SECTION0402970000000000000000
  summary: The show plot command shows the current plotting command as it results from the last plot and/or splot and possible subsequent replot commands
  belongs_to: Set-show
  description: |-
    ## Plot

    The **show plot** command shows the current plotting command as it results from the last **plot** and/or **splot** and possible subsequent **replot** commands.

    In addition, the **show plot add2history** command adds this current plot command into the **history**. It is useful if you have used **replot** to add more curves to the current plot and you want to edit the whole command now.
- name: Plotting
  id: plotting
  summary: 'There are four gnuplot commands which actually create a plot: plot, splot, replot, and refresh'
  description: "# Plotting\n\nThere are four **gnuplot** commands which actually create a plot: **plot**, **splot**, **replot**, and **refresh**. Other commands control the layout, style, and content of the plot that will eventually be created. **plot** generates 2D plots. **splot** generates 3D plots (actually 2D projections, of course). **replot** reexecutes the previous **plot** or **splot** command. **refresh** is similar to **replot** but it reuses any previously stored data rather than rereading data from a file or input stream.\n\nEach time you issue one of these four commands it will redraw the screen or generate a new page of output containing all of the currently defined axes, labels, titles, and all of the various functions or data sources listed in the original plot command. If instead you need to place several complete plots next to each other on the same page, e.g. to make a panel of sub-figures or to inset a small plot inside a larger plot, use the command **set multiplot** to suppress generation of a new page for each plot command.\n\nMuch of the general information about plotting can be found in the discussion of **plot**; information specific to 3D can be found in the **splot** section.\n\n**plot** operates in either rectangular or polar coordinates – see **[set polar](set_show#set_polar)**. **splot** operates in Cartesian coordinates, but will accept azimuthal or cylindrical coordinates on input. See **[set mapping](set_show#set_mapping)**. **plot** also lets you use each of the four borders – x (bottom), x2 (top), y (left) and y2 (right) – as an independent axis. The **axes** option lets you choose which pair of axes a given function or data set is plotted against. A full complement of **set** commands exists to give you complete control over the scales and labeling of each axis. Some commands have the name of an axis built into their names, such as **set xlabel**. Other commands have one or more axis names as options, such as **set logscale xy**. Commands and options controlling the z axis have no effect on 2D graphs.\n\n**splot** can plot surfaces and contours in addition to points and/or lines. See **[set isosamples](set_show#set_isosamples)** for information about defining the grid for a 3D function. See **[splot datafile](splot#splot_datafile)** for information about the requisite file structure for 3D data. For contours see **[set contour](set_show#set_contour)**, **[set cntrlabel](set_show#set_cntrlabel)**, and **[set cntrparam](set_show#set_cntrparam)**.\n\nIn **splot**, control over the scales and labels of the axes are the same as with **plot** except that there is also a z axis and labeling the x2 and y2 axes is possible only for pseudo-2D plots created using **set view map**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Plugins
  id: plugins
  summary: The set of functions available for plotting or for evaluating expressions can be extended through a plugin mechanism that imports executable functions from a shared library
  description: "# Plugins\n\nThe set of functions available for plotting or for evaluating expressions can be extended through a plugin mechanism that imports executable functions from a shared library. For example, gnuplot versions through 5.4 do not provide a built-in implementation of the upper incomplete gamma function Q(a,x). *Q*(*a*, *x*) = [\\[IMAGE svg\\]](img11.svg)[\\[IMAGE svg\\]](img12.svg)*t*^(a-1)*e*^(-t)*dt* .\n\nYou could define an approximation directly in gnuplot like this:\n\n    Q(a,x) = 1. - igamma(a,x)\n\nHowever this has inherently limited precision as the value of Q approaches 1. If you need a more accurate implementation, it would be better to provide one via a plugin (see below). Once imported, the function can be used just as any other built-in or user-defined function in gnuplot. See **[import](import#import)**.\n\nThe gnuplot distribution includes source code and instructions for creating a plugin library in the directory demo/plugin. You can modify the simple example file **demo_plugin.c** by replacing one or more of the toy example functions with an implementation of the function you are interested in. This could include invocation of functions from an external mathematical library.\n\nThe demo/plugin directory also contains source for a plugin that implements Q(a,x). As noted above, this plugin allows earlier versions of gnuplot to provide the same function **uigamma** as the current development version.\n\n    import Q(a,x) from \"uigamma_plugin\"\n    uigamma(a,x) = ((x<1 || x<a) ? 1.0-igamma(a,x) : Q(a,x))\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Pm
  id: complete_list_terminals#SECTION050147000000000000000
  summary: The pm terminal driver provides an OS/2 Presentation Manager window in which the graph is plotted
  description: |-
    ## Pm

    The **pm** terminal driver provides an OS/2 Presentation Manager window in which the graph is plotted. The window is opened when the first graph is plotted. This window has its own online help as well as facilities for printing and copying to the clipboard.

    Syntax:

        set terminal pm      {{server} {n} | noserver}
                             {nopersist | persist}
                             {enhanced | noenhanced}
                             {font <fontspec>}
                             {nowidelines | widelines}
                             {fontscale <scale>}
                             {linewidth <scale>}
                             {pointscale <scale>}
                             {{title} "title"}

    If **persist** is specified, each graph appears in its own window and all windows remain open after **gnuplot** exits. If **server** is specified, all graphs appear in the same window, which remains open when **gnuplot** exits. This option takes an optional numerical argument which specifies an instance of the server process. Thus multiple server windows can be in use at the same time.

    If **widelines** is specified, all plots will be drawn with wide lines. If **enhanced** is specified, sub- and superscripts and multiple fonts are enabled (see **[enhanced text](enhanced_text_mode#enhanced_text)** for details). Font names for the core PostScript fonts may be abbreviated to a single letter (T/H/C/S for Times/Helvetica/Courier/Symbol).

    **linewidth**, **fontscale**, **pointscale** can be used to scale the width of lines, the size of text, or the size of the point symbols.

    If **title** is specified, it will be used as the title of the plot window. It will also be used as the name of the server instance, and will override the optional numerical argument.

    The gnuplot outboard driver, gnupmdrv.exe, is searched in the same directory as gnuplot itself. You can override that by defining one of the environment variables GNUPLOT_DRIVER_DIR or GNUPLOT. As a last resort the current directory and the PATH are tried to locate gnupmdrv.exe.
- name: Pm3d
  id: set_show#SECTION0402971000000000000000
  summary: pm3d is an splot style for drawing palette-mapped 3d and 4d data as color/gray maps and surfaces
  belongs_to: Set-show
  description: |-
    ## Pm3d

    pm3d is an **splot** style for drawing palette-mapped 3d and 4d data as color/gray maps and surfaces. It allows plotting gridded or non-gridded data without preprocessing. pm3d style options also affect solid-fill polygons used to construct other 3D plot elements.

    Syntax (the options can be given in any order):

        set pm3d {
                   { at <position> }
                   { interpolate <steps/points in scan, between scans> }
                   { scansautomatic | scansforward | scansbackward
                                    | depthorder {base} }
                   { flush { begin | center | end } }
                   { ftriangles | noftriangles }
                   { clip {z} | clip1in | clip4in }
                   { {no}clipcb }
                   { corners2color
                     { mean|geomean|harmean|rms|median|min|max|c1|c2|c3|c4 }
                   }
                   { {no}lighting
                     {primary <fraction>} {specular <fraction>} {spec2 <fraction>}
                   }
                   { border {<linestyle-options>}}
                   { implicit | explicit }
                   { map }
                 }
        show pm3d
        unset pm3d

    Note that pm3d plots are plotted sequentially in the order given in the splot command. Thus earlier plots may be obscured by later plots. To avoid this you can use the **depthorder** scan option.

    The pm3d surfaces can be projected onto the **top** or **bottom** of the view box. See **[pm3d position](set_show#pm3d_position)**. The following command draws three color surfaces at different altitudes:

        set border 4095
        set pm3d at s
        splot 10*x with pm3d at b, x*x-y*y, x*x+y*y with pm3d at t

    See also help for **[set palette](set_show#set_palette)**, **[set cbrange](set_show#set_cbrange)**, **[set colorbox](set_show#set_colorbox)**, and the demo file **demo/pm3d.dem**.
- name: Pm3d Algorithm
  id: set_show#SECTION0402971200000000000000
  summary: Let us first describe how a map/surface is drawn
  belongs_to: Set-show
  description: |-
    ### Algorithm

    Let us first describe how a map/surface is drawn. The input data come from an evaluated function or from an **splot data file**. Each surface consists of a sequence of separate scans (isolines). The pm3d algorithm fills the region between two neighbouring points in one scan with another two points in the next scan by a gray (or color) according to z-values (or according to an additional 'color' column, see help for **[using](plot#using)**) of these 4 corners; by default the 4 corner values are averaged, but this can be changed by the option **corners2color**. In order to get a reasonable surface, the neighbouring scans should not cross and the number of points in the neighbouring scans should not differ too much; of course, the best plot is with scans having same number of points. There are no other requirements (e.g. the data need not be gridded). Another advantage is that the pm3d algorithm does not draw anything outside of the input (measured or calculated) region.

    Surface coloring works with the following input data:

    1\. splot of function or of data file with one or three data columns: The gray/color scale is obtained by mapping the averaged (or **corners2color**) z-coordinate of the four corners of the above-specified quadrangle into the range \[min_color_z,max_color_z\] of **zrange** or **cbrange** providing a gray value in the range \[0:1\]. This value can be used directly as the gray for gray maps. The normalized gray value can be further mapped into a color — see **[set palette](set_show#set_palette)** for the complete description.

    2\. splot of data file with two or four data columns: The gray/color value is obtained by using the last-column coordinate instead of the z-value, thus allowing the color and the z-coordinate be mutually independent. This can be used for 4d data drawing.

    Other notes:

    1\. The term 'scan' referenced above is used more among physicists than the term 'iso_curve' referenced in gnuplot documentation and sources. You measure maps recorded one scan after another scan, that's why.

    2\. The 'gray' or 'color' scale is a linear mapping of a continuous variable onto a smoothly varying palette of colors. The mapping is shown in a rectangle next to the main plot. This documentation refers to this as a "colorbox", and refers to the indexing variable as lying on the colorbox axis. See **[set colorbox](set_show#set_colorbox)**, **[set cbrange](set_show#set_cbrange)**.
- name: Pm3d Border
  id: set_show#SECTION0402971900000000000000
  summary: The option set pm3d border {line-properties} draws bounding lines around each quadrangle as it is rendered
  belongs_to: Set-show
  description: |-
    ### Border

    The option **set pm3d border {line-properties}** draws bounding lines around each quadrangle as it is rendered. Normally this is used in conjunction with the **depthorder** option to approximate hidden line removal. Note that the global option **set hidden3d** has no effect on pm3d plots. Default line properties (color, width) optionally follow the keyword **border**. These defaults can be overridden later in an splot command.

    Example of recommended usage:

        set pm3d at s depthorder border lw 0.2 lt black
        unset hidden3d
        unset surf
        splot x*x+y*y linecolor rgb "blue"   # otherwise it would be black
- name: Pm3d Clipping
  id: set_show#SECTION0402971600000000000000
  summary: The component quadrangles of a pm3d surface or other 3D object are by default smoothly clipped against the current zrange
  belongs_to: Set-show
  description: |-
    ### Clipping

    Syntax:

        set pm3d {clip {z} | clip1in | clip4in}
        set pm3d {no}clipcb

    The component quadrangles of a pm3d surface or other 3D object are by default smoothly clipped against the current zrange. This is a change from earlier gnuplot versions.

    Alternatively, surfaces can be clipped by rendering whole quadrangles but only those with all 4 corners in-range on x, y, and z (**set pm3d clip4in**), or only those with at least one corner in-range on x, y, and z (**set pm3d clip1in**). The options **clip**, **clip1in**, and **clip4in** are mutually exclusive.

    Separate from clipping based on spatial x, y, and z coordinates, quadrangles can be rendered or not based on extreme palette color values. **clipcb**: (default) palette color values \< cbmin are clipped to equal cbmin; palette color values \> cbmax are clipped to equal cbmax. **noclipcb**: quadrangles with color value outside cbrange are not drawn at all.
- name: Pm3d Color_assignment
  id: set_show#SECTION0402971700000000000000
  summary: The default pm3d coloring assigns an individual color to each quadrangle of the surface grid
  belongs_to: Set-show
  description: |-
    ### Color_assignment

    The default pm3d coloring assigns an individual color to each quadrangle of the surface grid. For alternative coloring schemes that assign uniform color to the entire surface, see **[pm3d fillcolor](set_show#pm3d_fillcolor)**.

    A single gray/color value (i.e. not a gradient) is assigned to each quadrangle. This value is calculated from the z-coordinates the four quadrangle corners according to **corners2color \<option\>**. The value is then used to select a color from the current palette. See **[set palette](set_show#set_palette)**. It is not possible to change palettes inside a single **splot** command.

    If a fourth column of data is provided, the coloring of individual quadrangles works as above except that the color value is distinct from the z value. As a separate coloring option, the fourth data column may provide instead an RGB color. See **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**. In this case the plotting command must be

        splot ... using 1:2:3:4 with pm3d lc rgb variable

    Notice that ranges of z-values and color-values for surfaces are adjustable independently by **set zrange**, **set cbrange**, **set log z**, **set log cb**, etc.
- name: Pm3d Corners2color
  id: set_show#SECTION0402971800000000000000
  summary: The color of each quadrangle in a pm3d surface is assigned based on the color values of its four bounding vertices
  belongs_to: Set-show
  description: |-
    ### Corners2color

    The color of each quadrangle in a pm3d surface is assigned based on the color values of its four bounding vertices. The options 'mean' (default), 'geomean', 'harmean, 'rms', and 'median' produce various kinds of surface color smoothing, while options 'min' and 'max' choose minimal or maximal value, respectively. This may not be desired for pixel images or for maps with sharp and intense peaks, in which case the options 'c1', 'c2', 'c3' or 'c4' can be used instead to assign the quadrangle color based on the z-coordinate of only one corner. Some experimentation may be needed to determine which corner corresponds to 'c1', as the orientation depends on the drawing direction. Because the pm3d algorithm does not extend the colored surface outside the range of the input data points, the 'c\<j\>' coloring options will result in pixels along two edges of the grid not contributing to the color of any quadrangle. For example, applying the pm3d algorithm to the 4x4 grid of data points in script **demo/pm3d.dem** (please have a look) produces only (4-1)x(4-1)=9 colored rectangles.
- name: Pm3d Deprecated_options
  id: set_show#SECTION04029711200000000000000
  summary: The deprecated option set pm3d hidden3d N was equivalent to set pm3d border ls N
  belongs_to: Set-show
  description: |-
    ### Deprecated_options

    The deprecated option **set pm3d map** was equivalent to **set pm3d at b; set view map; set style data pm3d; set style func pm3d;**

    The deprecated option **set pm3d hidden3d N** was equivalent to **set pm3d border ls N**.
- name: Pm3d Fillcolor
  id: set_show#SECTION04029711000000000000000
  summary: Plot style with pm3d accepts an optional fillcolor in the splot command
  belongs_to: Set-show
  description: |-
    ### Fillcolor

        splot FOO with pm3d fillcolor <colorspec>

    Plot style **with pm3d** accepts an optional fillcolor in the splot command. This specification is applied to the entire pm3d surface. See **[colorspec](linetypes_colors_styles#colorspec)**. Most fillcolor specifications will result in a single solid color, which is hard to interpret visually unless there is also a lighting model present to distinguish surface components based on orientation. See **[pm3d lighting](set_show#pm3d_lighting)**.

    There are a few special cases. **with pm3d fillcolor palette** would produce the same result as the default pm3d palette-based coloring, and is therefore not a useful option. **with pm3d fillcolor linestyle N** is more interesting. This variant assigns distinct colors to the top and bottom of the pm3d surface, similar to the color scheme used by gnuplot's **hidden3d** mode. Linestyle N is used for the top surface; linestyle N+1 for the bottom surface. Note that "top" and "bottom" depend on the scan order, so that the colors are inverted for **pm3d scansbackward** as compared to **pm3d scansforward**. This coloring option works best with **pm3d depthorder**, however, which unfortunately does not allow you to control the scan order so you may have to instead swap the colors defined for linestyles N and N+1.
- name: Pm3d Implicit
  id: set_show#SECTION0402971100000000000000
  summary: A pm3d color surface is drawn if the splot command specifies with pm3d, if the data or function style is set to pm3d globally, or if the pm3d mode is set pm3d implicit
  belongs_to: Set-show
  description: |-
    ### Implicit

    A pm3d color surface is drawn if the splot command specifies **with pm3d**, if the data or function **style** is set to pm3d globally, or if the pm3d mode is **set pm3d implicit**. In the latter two cases, the pm3d surface is draw in addition to the mesh produced by the style specified in the plot command. E.g.

        splot 'fred.dat' with lines, 'lola.dat' with lines

    would draw both a mesh of lines and a pm3d surface for each data set. If the option **explicit** is on (or **implicit** is off) only plots specified by the **with pm3d** attribute are plotted with a pm3d surface, e.g.:

        splot 'fred.dat' with lines, 'lola.dat' with pm3d

    would plot 'fred.dat' with lines (only) and 'lola.dat' with a pm3d surface.

    On gnuplot start-up, the mode is **explicit**. For historical and compatibility reasons, the commands **set pm3d;** (i.e. no options) and **set pm3d at X ...** (i.e. **at** is the first option) change the mode to **implicit**. The command **set pm3d;** sets other options to their default state.

    If you set the default data or function style to **pm3d**, e.g.:

        set style data pm3d

    then the options **implicit** and **explicit** have no effect.
- name: Pm3d Interpolate
  id: set_show#SECTION04029711100000000000000
  summary: The option interpolate m,n will interpolate between grid points to generate a finer mesh
  belongs_to: Set-show
  description: |-
    ### Interpolate

    The option **interpolate m,n** will interpolate between grid points to generate a finer mesh. For data files, this smooths the color surface and enhances the contrast of spikes in the surface. When working with functions, interpolation makes little sense. It would usually make more sense to increase **samples** and **isosamples**.

    For positive m and n, each quadrangle or triangle is interpolated m-times and n-times in the respective direction. For negative m and n, the interpolation frequency is chosen so that there will be at least \|m\| and \|n\| points drawn; you can consider this as a special gridding function.

    Note: **interpolate 0,0**, will automatically choose an optimal number of interpolated surface points.

    Note: Currently color interpolation is always linear, even if corners2color is set to a nonlinear scheme such as the geometric mean.
- name: Pm3d Lighting
  id: set_show#SECTION0402971300000000000000
  summary: By default the colors assigned to pm3d objects are not dependent on orientation or viewing angle
  belongs_to: Set-show
  description: |-
    ### Lighting

    By default the colors assigned to pm3d objects are not dependent on orientation or viewing angle. This state corresponds to **set pm3d nolighting**. The command **set pm3d lighting** selects a simple lighting model consisting of a single fixed source of illumination contributing 50% of the overall lighting. The strength of this light relative to the ambient illumination can be adjusted by **set pm3d lighting primary \<fraction\>**. Inclusion of specular highlighting can be adjusted by setting a fractional contribution:

        set pm3d lighting primary 0.50 specular 0.0   # no highlights
        set pm3d lighting primary 0.50 specular 0.6   # strong highlights

    Solid-color pm3d surfaces tend to look very flat without specular highlights. Since the highlights from a single source only affect one side of the surface, a second spotlight source may be desirable to add specular highlights from the opposite direction. This is controlled by "spec2 \<contribution\>". EXPERIMENTAL (details may change in a future version): The second spotlight is a pure red light source that by default contributes nothing (spec2 0.0). See also hidden_compare.dem [(comparison of hidden3d and pm3d treatment of solid-color surfaces) ](http://www.gnuplot.info/demo_5.4/hidden_compare.html)
- name: Pm3d Position
  id: set_show#SECTION0402971400000000000000
  summary: Color surface can be drawn at the base or top (then it is a gray/color planar map) or at z-coordinates of surface points (gray/color surface)
  belongs_to: Set-show
  description: |-
    ### Position

    Color surface can be drawn at the base or top (then it is a gray/color planar map) or at z-coordinates of surface points (gray/color surface). This is defined by the **at** option with a string of up to 6 combinations of **b**, **t** and **s**. For instance, **at b** plots at bottom only, **at st** plots firstly surface and then top map, while **at bstbst** will never by seriously used.

    Colored quadrangles are plotted one after another. When plotting surfaces (**at s**), the later quadrangles overlap (overdraw) the previous ones. (Gnuplot is not virtual reality tool to calculate intersections of filled polygon meshes.) You may try to switch between **scansforward** and **scansbackward** to force the first scan of the data to be plotted first or last. The default is **scansautomatic** where gnuplot makes a guess about scans order. On the other hand, the **depthorder** option completely reorders the quadrangles. The rendering is performed after a depth sorting, which allows to visualize even complicated surfaces; see **[pm3d depthorder](set_show#pm3d_depthorder)** for more details.
- name: Pm3d Scanorder
  id: set_show#SECTION0402971500000000000000
  summary: By default the quadrangles making up a pm3d solid surface are rendered in the order they are encountered along the surface grid points
  belongs_to: Set-show
  description: |-
    ### Scanorder

        set pm3d {scansautomatic | scansforward | scansbackward | depthorder}

    By default the quadrangles making up a pm3d solid surface are rendered in the order they are encountered along the surface grid points. This order may be controlled by the options **scansautomatic**\|**scansforward**\|**scansbackward**. These scan options are not in general compatible with hidden-surface removal.

    If two successive scans do not have same number of points, then it has to be decided whether to start taking points for quadrangles from the beginning of both scans (**flush begin**), from their ends (**flush end**) or to center them (**flush center**). Note, that **flush (center\|end)** are incompatible with **scansautomatic**: if you specify **flush center** or **flush end** and **scansautomatic** is set, it is silently switched to **scansforward**.

    If two subsequent scans do not have the same number of points, the option **ftriangles** specifies whether color triangles are drawn at the scan tail(s) where there are not enough points in either of the scans. This can be used to draw a smooth map boundary.

    Gnuplot does not do true hidden surface removal for solid surfaces, but often it is sufficient to render the component quadrangles in order from furthest to closest. This mode may be selected using the option

        set pm3d depthorder

    Note that the global option **set hidden3d** does not affect pm3d surfaces.

    The **depthorder** option by itself tends to produce bad results when applied to the long thin rectangles generated by **splot with boxes**. It works better to add the keyword **base**, which performs the depth sort using the intersection of the box with the plane at z=0. This type of plot is further improved by adding a lighing model. Example:

        set pm3d depthorder base
        set pm3d lighting
        set boxdepth 0.4
        splot $DATA using 1:2:3 with boxes
- name: Png
  id: complete_list_terminals#SECTION050148000000000000000
  summary: PNG, JPEG and GIF images are created using the external library libgd
  description: "## Png\n\nSyntax:\n\n    set terminal png \n           {{no}enhanced}\n           {{no}transparent} {{no}interlace}\n           {{no}truecolor} {rounded|butt}\n           {linewidth <lw>} {dashlength <dl>}\n           {tiny | small | medium | large | giant}\n           {font \"<face> {,<pointsize>}\"} {fontscale <scale>}\n           {size <x>,<y>} {{no}crop}\n           {background <rgb_color>}\n\nPNG, JPEG and GIF images are created using the external library libgd. PNG plots may be viewed interactively by piping the output to the 'display' program from the ImageMagick package as follows:\n\n    set term png\n    set output '| display png:-'\n\nYou can view the output from successive plot commands interactively by typing \\<space\\> in the display window. To save the current plot to a file, left click in the display window and choose **save**.\n\n**transparent** instructs the driver to make the background color transparent. Default is **notransparent**.\n\n**interlace** instructs the driver to generate interlaced PNGs. Default is **nointerlace**.\n\nThe **linewidth** and **dashlength** options are scaling factors that affect all lines drawn, i.e. they are multiplied by values requested in various drawing commands.\n\nBy default output png images use 256 indexed colors. The **truecolor** option instead creates TrueColor images with 24 bits of color information per pixel. Transparent fill styles require the **truecolor** option. See **[fillstyle](set_show#fillstyle)**. A transparent background is possible in either indexed or TrueColor images.\n\n**butt** instructs the driver to use a line drawing method that does not overshoot the desired end point of a line. This setting is only applicable for line widths greater than 1. This setting is most useful when drawing horizontal or vertical lines. Default is **rounded**.\n\nThe details of font selection are complicated. Two equivalent simple examples are given below:\n\n    set term png font arial 11\n    set term png font \"arial,11\"\n\nFor more information please see the separate section under **[fonts](fonts#fonts)**.\n\nThe output plot size \\<x,y\\> is given in pixels — it defaults to 640x480. Please see additional information under **[canvas](canvas_size#canvas)** and **[set size](set_show#set_size)**. Blank space at the edges of the finished plot may be trimmed using the **crop** option, resulting in a smaller final image size. Default is **nocrop**."
- name: Png Examples
  id: complete_list_terminals#SECTION050148100000000000000
  summary: Use the medium size built-in non-scaleable, non-rotatable font
  description: |-
    ### Examples

        set terminal png medium size 640,480 background '#ffffff'

    Use the medium size built-in non-scaleable, non-rotatable font. Use white (24-bit RGB in hexadecimal) for the non-transparent background.

        set terminal png font arial 14 size 800,600

    Searches for a scalable font with face name 'arial' and sets the font size to 14pt. Please see **[fonts](fonts#fonts)** for details of how the font search is done.

        set terminal png transparent truecolor enhanced

    Use 24 bits of color information per pixel, with a transparent background. Use the **enhanced text** mode to control the layout of strings to be printed.
- name: Pngcairo
  id: complete_list_terminals#SECTION050149000000000000000
  summary: The pngcairo terminal device generates output in png
  description: |-
    ## Pngcairo

    The **pngcairo** terminal device generates output in png. The actual drawing is done via cairo, a 2D graphics library, and pango, a library for laying out and rendering text.

    Syntax:

        set term pngcairo
                     {{no}enhanced} {mono|color}
                     {{no}transparent} {{no}crop} {background <rgbcolor>
                     {font <font>} {fontscale <scale>}
                     {linewidth <lw>} {rounded|butt|square} {dashlength <dl>}
                     {pointscale <ps>}
                     {size <XX>{unit},<YY>{unit}}

    This terminal supports an enhanced text mode, which allows font and other formatting commands (subscripts, superscripts, etc.) to be embedded in labels and other text strings. The enhanced text mode syntax is shared with other gnuplot terminal types. See **[enhanced](enhanced_text_mode#enhanced)** for more details.

    The width of all lines in the plot can be modified by the factor \<lw\>.

    **rounded** sets line caps and line joins to be rounded; **butt** is the default, butt caps and mitered joins.

    The default size for the output is 640 x 480 pixels. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in pixels, but other units are possible (currently cm and inch). A size given in centimeters or inches will be converted into pixels assuming a resolution of 72 dpi. Screen coordinates always run from 0.0 to 1.0 along the full length of the plot edges as specified by the **size** option.

    \<font\> is in the format "FontFace,FontSize", i.e. the face and the size comma-separated in a single string. FontFace is a usual font face name, such as 'Arial'. If you do not provide FontFace, the pngcairo terminal will use 'Sans'. FontSize is the font size, in points. If you do not provide it, the pngcairo terminal will use a size of 12 points.

        For example :
           set term pngcairo font "Arial,12"
           set term pngcairo font "Arial" # to change the font face only
           set term pngcairo font ",12" # to change the font size only
           set term pngcairo font "" # to reset the font name and size

    The fonts are retrieved from the usual fonts subsystems. Under Windows, those fonts are to be found and configured in the entry "Fonts" of the control panel. Under UNIX, they are handled by "fontconfig".

    Pango, the library used to layout the text, is based on utf-8. Thus, the pngcairo terminal has to convert from your encoding to utf-8. The default input encoding is based on your 'locale'. If you want to use another encoding, make sure gnuplot knows which one you are using. See **[encoding](set_show#encoding)** for more detail.

    Pango may give unexpected results with fonts that do not respect the unicode mapping. With the Symbol font, for example, the pngcairo terminal will use the map provided by http://www.unicode.org/ to translate character codes to unicode. Note that "the Symbol font" is to be understood as the Adobe Symbol font, distributed with Acrobat Reader as "SY\_\_\_\_\_\_.PFB". Alternatively, the OpenSymbol font, distributed with OpenOffice.org as "opens\_\_\_.ttf", offers the same characters. Microsoft has distributed a Symbol font ("symbol.ttf"), but it has a different character set with several missing or moved mathematic characters. If you experience problems with your default setup (if the demo enhancedtext.dem is not displayed properly for example), you probably have to install one of the Adobe or OpenOffice Symbol fonts, and remove the Microsoft one.

    Rendering uses oversampling, antialiasing, and font hinting to the extent supported by the cairo and pango libraries.
- name: Pointintervalbox
  id: set_show#SECTION0402972000000000000000
  summary: The pointinterval and pointnumber properties of a line type are used only in plot style linespoints
  belongs_to: Set-show
  description: |-
    ## Pointintervalbox

    The **pointinterval** and **pointnumber** properties of a line type are used only in plot style **linespoints**. A negative value of pointinterval or pointnumber, e.g. -N, means that before the selected set of point symbols are drawn a box (actually circle) behind each point symbol is blanked out by filling with the background color. The command **set pointintervalbox** controls the radius of this blanked-out region. It is a multiplier for the default radius, which is equal to the point size.
- name: Points
  id: points
  summary: The points style displays a small symbol at each point
  description: "# Points\n\nThe **points** style displays a small symbol at each point. The command **set pointsize** may be used to change the default size of all points. The point type defaults to that of the linetype. See **[linetype](set_show#linetype)**. If no **using** spec is found in the plot command, input data columns are interpreted implicitly in the order\n\n    x y pointsize pointtype color\n\nAny columns beyond the first two (x and y) are optional; they correspond to additional plot properties **pointsize variable**, **pointtype variable**, etc.\n\nThe first 8 point types are shared by all terminals. Individual terminals may provide a much larger number of distinct point types. Use the **test** command to show what is provided by the current terminal settings.\n\nAlternatively any single printable character may be given instead of a numerical point type, as in the example below. You may use any unicode character as the pointtype (assumes utf8 support). See **[escape sequences](enhanced_text_mode#escape_sequences)**. Longer strings may be plotted using plot style **labels** rather than **points**.\n\n    plot f(x) with points pt \"#\"\n    plot d(x) with points pt \"\\U+2299\"\n\nWhen using the keywords **pointtype**, **pointsize**, or **linecolor** in a plot command, the additional keyword **variable** may be given instead of a number. In this case the corresponding properties of each point are assigned by additional columns of input data. Variable pointsize is always taken from the first additional column provided in a **using** spec. Variable color is always taken from the last additional column. See **[colorspec](linetypes_colors_styles#colorspec)**. If all three properties are specified for each point, the order of input data columns is thus\n\n    plot DATA using x:y:pointsize:pointtype:color \\\n         with points lc variable pt variable ps variable\n\nNote: for information on user-defined program variables, see **[variables](expressions#variables)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Pointsize
  id: set_show#SECTION0402973000000000000000
  summary: The set pointsize command scales the size of the points used in plots
  belongs_to: Set-show
  description: |-
    ## Pointsize

    The **set pointsize** command scales the size of the points used in plots.

    Syntax:

        set pointsize <multiplier>
        show pointsize

    The default is a multiplier of 1.0. Larger pointsizes may be useful to make points more visible in bitmapped graphics.

    The pointsize of a single plot may be changed on the **plot** command. See **[plot with](plot#plot_with)** for details.

    Please note that the pointsize setting is not supported by all terminal types.
- name: Polar
  id: set_show#SECTION0402974000000000000000
  summary: The set polar command changes the meaning of the plot from rectangular coordinates to polar coordinates
  belongs_to: Set-show
  description: |-
    ## Polar

    The **set polar** command changes the meaning of the plot from rectangular coordinates to polar coordinates.

    Syntax:

        set polar
        unset polar
        show polar

    In polar coordinates, the dummy variable (t) represents an angle theta. The default range of t is \[0:2\*pi\], or \[0:360\] if degree units have been selected (see **[set angles](set_show#set_angles)**).

    The command **unset polar** changes the meaning of the plot back to the default rectangular coordinate system.

    The **set polar** command is not supported for **splot**s. See the **[set mapping](set_show#set_mapping)** command for similar functionality for **[splot](splot#splot)**s.

    While in polar coordinates the meaning of an expression in t is really r = f(t), where t is an angle of rotation. The trange controls the domain (the angle) of the function. The r, x and y ranges control the extent of the graph in the x and y directions. Each of these ranges, as well as the rrange, may be autoscaled or set explicitly. For details, see **[set rrange](set_show#set_rrange)** and **[set xrange](set_show#set_xrange)**.

    Example:

        set polar
        plot t*sin(t)
        set trange [-2*pi:2*pi]
        set rrange [0:3]
        plot t*sin(t)

    The first **plot** uses the default polar angular domain of 0 to 2\*pi. The radius and the size of the graph are scaled automatically. The second **plot** expands the domain, and restricts the size of the graph to the area within 3 units of the origin. This has the effect of limiting x and y to \[-3:3\].

    By default polar plots are oriented such that theta=0 is at the far right, with theta increasing counterclockwise. You can change both the origin and the sense explicitly. See **[set theta](set_show#set_theta)**.

    You may want to **set size square** to have **gnuplot** try to make the aspect ratio equal to unity, so that circles look circular. Tic marks around the perimeter can be specified using **set ttics**. See also [polar demos (polar.dem) ](http://www.gnuplot.info/demo/polar.html)

    and [polar data plot (poldat.dem). ](http://www.gnuplot.info/demo/poldat.html)
- name: Polar plots
  id: polar_plots
  summary: Polar plots are generated by changing the current coordinate system to polar before issuing a plot command
  description: "# Polar plots\n\nPolar plots are generated by changing the current coordinate system to polar before issuing a plot command. The option **set polar** tells gnuplot to interpret input 2D coordinates as \\<angle\\>,\\<radius\\> rather than \\<x\\>,\\<y\\>. Many, but not all, of the 2D plotting styles work in polar mode. The figure shows a combination of plot styles **lines** and **filledcurves**. See **[set polar](set_show#set_polar)**, **[set rrange](set_show#set_rrange)**, **[set size square](set_show#set_size_square)**, **[set theta](set_show#set_theta)**, **[set ttics](set_show#set_ttics)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Polygons
  id: polygons
  summary: splot with polygons uses pm3d to render individual triangles, quadrangles, and larger polygons in 3D
  description: "# Polygons\n\n    splot DATA {using x:y:z} with polygons\n          {fillstyle <fillstyle spec>}\n          {fillcolor <colorspec>}\n\n**splot with polygons** uses pm3d to render individual triangles, quadrangles, and larger polygons in 3D. These may be facets of a 3D surface or isolated shapes. The code assumes that the vertices lie in a plane. Vertices defining individual polygons are read from successive records of the input file. A blank line separates one polygon from the next.\n\nThe fill style and color may be specified in the splot command, otherwise the global fillstyle from **set style fill** is used. Due to limitations in the pm3d code, a single border line style from **set pm3d border** is applied to all polygons. This restriction may be removed in a later gnuplot version.\n\npm3d sort order and lighting are applied to the faces. It is probably always desirable to use **set pm3d depthsort**.\n\n    set xyplane at 0\n    set view equal xyz\n    unset border\n    unset tics\n    set pm3d depth\n    set pm3d border lc \"black\" lw 1.5\n    splot 'icosahedron.dat' with polygons \\\n          fs transparent solid 0.8 fc bgnd\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Postscript
  id: complete_list_terminals#SECTION050150000000000000000
  summary: Several options may be set in the postscript driver
  description: |-
    ## Postscript

    Several options may be set in the **postscript** driver.

    Syntax:

        set terminal postscript {default}
        set terminal postscript {landscape | portrait | eps}
                                {enhanced | noenhanced}
                                {defaultplex | simplex | duplex}
                                {fontfile {add | delete} "<filename>"
                                 | nofontfiles} {{no}adobeglyphnames}
                                {level1 | leveldefault | level3}
                                {color | colour | monochrome}
                                {background <rgbcolor> | nobackground}
                                {dashlength | dl <DL>}
                                {linewidth | lw <LW>} {pointscale | ps <PS>}
                                {rounded | butt}
                                {clip | noclip}
                                {palfuncparam <samples>{,<maxdeviation>}}
                                {size <XX>{unit},<YY>{unit}}
                                {blacktext | colortext | colourtext}
                                {{font} "fontname{,fontsize}" {<fontsize>}}
                                {fontscale <scale>}

    If you see the error message

        "Can't find PostScript prologue file ... "

    Please see and follow the instructions in **[postscript prologue](complete_list_terminals#postscript_prologue)**.

    **landscape** and **portrait** choose the plot orientation. **eps** mode generates EPS (Encapsulated PostScript) output, which is just regular PostScript with some additional lines that allow the file to be imported into a variety of other applications. (The added lines are PostScript comment lines, so the file may still be printed by itself.) To get EPS output, use the **eps** mode and make only one plot per file. In **eps** mode the whole plot, including the fonts, is reduced to half of the default size.

    **enhanced** enables enhanced text mode features (subscripts, superscripts and mixed fonts). See **[enhanced](enhanced_text_mode#enhanced)** for more information. **blacktext** forces all text to be written in black even in color mode;

    Duplexing in PostScript is the ability of the printer to print on both sides of the same sheet of paper. With **defaultplex**, the default setting of the printer is used; with **simplex** only one side is printed; **duplex** prints on both sides (ignored if your printer can't do it).

    **"\<fontname\>"** is the name of a valid PostScript font; and **\<fontsize\>** is the size of the font in PostScript points. In addition to the standard postscript fonts, an oblique version of the Symbol font, useful for mathematics, is defined. It is called "Symbol-Oblique".

    **default** sets all options to their defaults: **landscape**, **monochrome**, **dl 1.0**, **lw 1.0**, **defaultplex**, **enhanced**, "Helvetica" and 14pt. Default size of a PostScript plot is 10 inches wide and 7 inches high. The option **color** enables color, while **monochrome** prefers black and white drawing elements. Further, **monochrome** uses gray **palette** but it does not change color of objects specified with an explicit **colorspec**. **dashlength** or **dl** scales the length of dashed-line segments by \<DL\>, which is a floating-point number greater than zero. **linewidth** or **lw** scales all linewidths by \<LW\>.

    By default the generated PostScript code uses language features that were introduced in PostScript Level 2, notably filters and pattern-fill of irregular objects such as filledcurves. PostScript Level 2 features are conditionally protected so that PostScript Level 1 interpreters do not issue errors but, rather, display a message or a PostScript Level 1 approximation. The **level1** option substitutes PostScript Level 1 approximations of these features and uses no PostScript Level 2 code. This may be required by some old printers and old versions of Adobe Illustrator. The flag **level1** can be toggled later by editing a single line in the PostScript output file to force PostScript Level 1 interpretation. In the case of files containing level 2 code, the above features will not appear or will be replaced by a note when this flag is set or when the interpreting program does not indicate that it understands level 2 PostScript or higher. The flag **level3** enables PNG encoding for bitmapped images, which can reduce the output size considerably.

    **rounded** sets line caps and line joins to be rounded; **butt** is the default, butt caps and mitered joins.

    **clip** tells PostScript to clip all output to the bounding box; **noclip** is the default.

    **palfuncparam** controls how **set palette functions** are encoded as gradients in the output. Analytic color component functions (set via **set palette functions**) are encoded as linear interpolated gradients in the postscript output: The color component functions are sampled at \<samples\> points and all points are removed from this gradient which can be removed without changing the resulting colors by more than \<maxdeviation\>. For almost every useful palette you may safely leave the defaults of \<samples\>=2000 and \<maxdeviation\>=0.003 untouched.

    The default size for postscript output is 10 inches x 7 inches. The default for eps output is 5 x 3.5 inches. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in inches, but other units are possibly (currently only cm). The BoundingBox of the plot is correctly adjusted to contain the resized image. Screen coordinates always run from 0.0 to 1.0 along the full length of the plot edges as specified by the **size** option. NB: **this is a change from the previously recommended method of using the set size command prior to setting the terminal type**. The old method left the BoundingBox unchanged and screen coordinates did not correspond to the actual limits of the plot.

    Fonts listed by **fontfile** or **fontfile add** encapsulate the font definitions of the listed font from a postscript Type 1 or TrueType font file directly into the gnuplot output postscript file. Thus, the enclosed font can be used in labels, titles, etc. See the section **[postscript fontfile](complete_list_terminals#postscript_fontfile)** for more details. With **fontfile delete**, a fontfile is deleted from the list of embedded files. **nofontfiles** cleans the list of embedded fonts.

    Examples:

        set terminal postscript default       # old postscript
        set terminal postscript enhanced      # old enhpost
        set terminal postscript landscape 22  # old psbig
        set terminal postscript eps 14        # old epsf1
        set terminal postscript eps 22        # old epsf2
        set size 0.7,1.4; set term post portrait color "Times-Roman" 14
        set term post "VAGRoundedBT_Regular" 14 fontfile "bvrr8a.pfa"

    Linewidths and pointsizes may be changed with **set style line**.

    The **postscript** driver supports about 70 distinct pointtypes, selectable through the **pointtype** option on **plot** and **set style line**.

    Several possibly useful files about **gnuplot**'s PostScript are included in the /docs/psdoc subdirectory of the **gnuplot** distribution and at the distribution sites. These are "ps_symbols.gpi" (a **gnuplot** command file that, when executed, creates the file "ps_symbols.ps" which shows all the symbols available through the **postscript** terminal), "ps_guide.ps" (a PostScript file that contains a summary of the enhanced syntax and a page showing what the octal codes produce with text and symbol fonts), "ps_file.doc" (a text file that contains a discussion of the organization of a PostScript file written by **gnuplot**), and "ps_fontfile_doc.tex" (a LaTeX file which contains a short documentation concerning the encapsulation of LaTeX fonts with a glyph table of the math fonts).

    A PostScript file is editable, so once **gnuplot** has created one, you are free to modify it to your heart's desire. See the **[editing postscript](complete_list_terminals#editing_postscript)** section for some hints.
- name: Postscript adobeglyphnames
  id: complete_list_terminals#SECTION050150400000000000000
  summary: This setting is only relevant to PostScript output with UTF-8 encoding
  description: |-
    ### Postscript adobeglyphnames

    This setting is only relevant to PostScript output with UTF-8 encoding. It controls the names used to describe characters with Unicode entry points higher than 0x00FF. That is, all characters outside of the Latin1 set. In general unicode characters do not have a unique name; they have only a unicode identification code. However, Adobe have a recommended scheme for assigning names to certain ranges of characters (extended Latin, Greek, etc). Some fonts use this scheme, others do not. By default, gnuplot will use the Adobe glyph names. E.g. the lower case Greek letter alpha will be called /alpha. If you specific **noadobeglyphnames** then instead gnuplot will use /uni03B1 to describe this character. If you get this setting wrong, the character may not be found even if it is present in the font. It is probably always correct to use the default for Adobe fonts, but for other fonts you may have to try both settings. See also **[fontfile](complete_list_terminals#fontfile)**.
- name: Postscript Editing postscript
  id: complete_list_terminals#SECTION050150100000000000000
  summary: The PostScript language is a very complex language — far too complex to describe in any detail in this document
  description: |-
    ### Editing postscript

    The PostScript language is a very complex language — far too complex to describe in any detail in this document. Nevertheless there are some things in a PostScript file written by **gnuplot** that can be changed without risk of introducing fatal errors into the file.

    For example, the PostScript statement "/Color true def" (written into the file in response to the command **set terminal postscript color**), may be altered in an obvious way to generate a black-and-white version of a plot. Similarly line colors, text colors, line weights and symbol sizes can also be altered in straight-forward ways. Text (titles and labels) can be edited to correct misspellings or to change fonts. Anything can be repositioned, and of course anything can be added or deleted, but modifications such as these may require deeper knowledge of the PostScript language.

    The organization of a PostScript file written by **gnuplot** is discussed in the text file "ps_file.doc" in the docs/ps subdirectory of the gnuplot source distribution.
- name: Postscript fontfile
  id: complete_list_terminals#SECTION050150200000000000000
  summary: The fontfile or fontfile add option takes one file name as argument and encapsulates this file into the postscript output in order to make this font available for text elements (labels, tic marks, titles, etc.)
  description: |-
    ### Postscript fontfile

        set term postscript ... fontfile {add|delete} <filename>

    The **fontfile** or **fontfile add** option takes one file name as argument and encapsulates this file into the postscript output in order to make this font available for text elements (labels, tic marks, titles, etc.). The **fontfile delete** option also takes one file name as argument. It deletes this file name from the list of encapsulated files.

    The postscript terminal understands some font file formats: Type 1 fonts in ASCII file format (extension ".pfa"), Type 1 fonts in binary file format (extension ".pfb"), and TrueType fonts (extension ".ttf"). pfa files are understood directly, pfb and ttf files are converted on the fly if appropriate conversion tools are installed (see below). You have to specify the full filename including the extension. Each **fontfile** option takes exact one font file name. This option can be used multiple times in order to include more than one font file.

    The search order used to find font files is (1) absolute pathname or current working directory (2) any of the directories specified by **set loadpath** (3) the directory specified by **set fontpath** (4) the directory given in environmental variable GNUPLOT_FONTPATH. NB: This is a CHANGE from earlier versions of gnuplot.

    For using the encapsulated font file you have to specify the font name (which normally is not the same as the file name). When embedding a font file by using the **fontfile** option in interactive mode, the font name is printed on the screen. E.g.

        Font file 'p052004l.pfb' contains the font 'URWPalladioL-Bold'. Location:
        /usr/lib/X11/fonts/URW/p052004l.pfb

    When using pfa or pfb fonts, you can also find it out by looking into the font file. There is a line similar to "/FontName /URWPalladioL-Bold def". The middle string without the slash is the fontname, here "URWPalladioL-Bold". For TrueType fonts, this is not so easy since the font name is stored in a binary format. In addition, they often have spaces in the font names which is not supported by Type 1 fonts (in which a TrueType is converted on the fly). The font names are changed in order to eliminate the spaces in the fontnames. The easiest way to find out which font name is generated for use with gnuplot, start gnuplot in interactive mode and type in "set terminal postscript fontfile '\<filename.ttf\>'".

    For converting font files (either ttf or pfb) to pfa format, the conversion tool has to read the font from a file and write it to standard output. If the output cannot be written to standard output, on-the-fly conversion is not possible.

    For pfb files "pfbtops" is a tool which can do this. If this program is installed on your system the on the fly conversion should work. Just try to encapsulate a pfb file. If the compiled in program call does not work correctly you can specify how this program is called by defining the environment variable GNUPLOT_PFBTOPFA e.g. to "pfbtops %s". The **%s** will be replaced by the font file name and thus has to exist in the string.

    If you don't want to do the conversion on the fly but get a pfa file of the font you can use the tool "pfb2pfa" which is written in simple c and should compile with any c compiler. It is available from many ftp servers, e.g. [ftp://ftp.dante.de/tex-archive/fonts/utilities/ps2mf/ ](ftp://ftp.dante.de/tex-archive/fonts/utilities/ps2mf/)

    In fact, "pfbtopfa" and "pfb2ps" do the same job. "pfbtopfa" puts the resulting pfa code into a file, whereas "pfbtops" writes it to standard output.

    TrueType fonts are converted into Type 1 pfa format, e.g. by using the tool "ttf2pt1" which is available from [http://ttf2pt1.sourceforge.net/ ](http://ttf2pt1.sourceforge.net/)

    If the builtin conversion does not work, the conversion command can be changed by the environment variable GNUPLOT_TTFTOPFA. For usage with ttf2pt1 it may be set to "ttf2pt1 -a -e -W 0 %s - ". Here again, **%s** stands for the file name.

    For special purposes you also can use a pipe (if available for your operating system). Therefore you start the file name definition with the character "\<" and append a program call. This program has to write pfa data to standard output. Thus, a pfa file may be accessed by **set fontfile "\< cat garamond.pfa"**.

    For example, including Type 1 font files can be used for including the postscript output in LaTeX documents. The "european computer modern" font (which is a variant of the "computer modern" font) is available in pfb format from any CTAN server, e.g. [ftp://ftp.dante.de/tex-archive/fonts/ps-type1/cm-super/ ](ftp://ftp.dante.de/tex-archive/fonts/ps-type1/cm-super/)

    For example, the file "sfrm1000.pfb" contains the normal upright fonts with serifs in the design size 10pt (font name "SFRM1000"). The computer modern fonts, which are still necessary for mathematics, are available from [ftp://ftp.dante.de/tex-archive/fonts/cm/ps-type1/bluesky ](ftp://ftp.dante.de/tex-archive/fonts/cm/ps-type1/bluesky)

    With these you can use any character available in TeX. However, the computer modern fonts have a strange encoding. (This is why you should not use cmr10.pfb for text, but sfrm1000.pfb instead.) The usage of TeX fonts is shown in one of the demos. The file "ps_fontfile_doc.tex" in the /docs/psdoc subdirectory of the **gnuplot** source distribution contains a table with glyphs of the TeX mathfonts.

    If the font "CMEX10" is embedded (file "cmex10.pfb") gnuplot defines the additional font "CMEX10-Baseline". It is shifted vertically in order to fit better to the other glyphs (CMEX10 has its baseline at the top of the symbols).
- name: Postscript prologue
  id: complete_list_terminals#SECTION050150300000000000000
  summary: Each PostScript output file includes a %%Prolog section and possibly some additional user-defined sections containing, for example, character encodings
  description: |-
    ### Postscript prologue

    Each PostScript output file includes a %%Prolog section and possibly some additional user-defined sections containing, for example, character encodings. These sections are copied from a set of PostScript prologue files that are either compiled into the gnuplot executable or stored elsewhere on your computer. A default directory where these files live is set at the time gnuplot is built. However, you can override this default either by using the gnuplot command **set psdir** or by defining an environment variable GNUPLOT_PS_DIR. See **[set psdir](set_show#set_psdir)**.
- name: Print
  id: print
  summary: The print command prints the value of <expression> to the screen
  description: "# Print\n\nThe **print** command prints the value of \\<expression\\> to the screen. It is synonymous with **pause 0**. \\<expression\\> may be anything that **gnuplot** can evaluate that produces a number, or it can be a string.\n\nSyntax:\n\n    print <expression> {, <expression>, ...}\n\nSee **[expressions](expressions#expressions)**. The output file can be set with **set print**. See also **[printerr](printerr#printerr)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Print
  id: set_show#SECTION0402975000000000000000
  summary: The set print command redirects the output of the print command to a file
  belongs_to: Set-show
  description: |-
    ## Print

    The **set print** command redirects the output of the **print** command to a file.

    Syntax:

        set print
        set print "-"
        set print "<filename>" [append]
        set print "|<shell_command>"
        set print $datablock [append]

    **set print** with no parameters restores output to \<STDERR\>. The \<filename\> "-" means \<STDOUT\>. The **append** flag causes the file to be opened in append mode. A \<filename\> starting with "\|" is opened as a pipe to the \<shell_command\> on platforms that support piping.

    The destination for **print** commands can also be a named data block. Data block names start with '$', see also **[inline data](inline_data_datablocks#inline_data)**. When printing a string to a data block, embedded newline characters are expanded to generate multiple data block entries. This is a CHANGE.
- name: Printerr
  id: printerr
  summary: printerr is the same as print except that output is always sent to stderr even if a prior set print command remains in effect
  description: "# Printerr\n\n**printerr** is the same as print except that output is always sent to stderr even if a prior **set print** command remains in effect.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Psdir
  id: set_show#SECTION0402976000000000000000
  summary: The set psdir <directory> command controls the search path used by the postscript terminal to find prologue.ps and character encoding files
  belongs_to: Set-show
  description: |-
    ## Psdir

    The **set psdir \<directory\>** command controls the search path used by the postscript terminal to find prologue.ps and character encoding files. You can use this mechanism to switch between different sets of locally-customized prolog files. The search order is

        1) The directory specified by `set psdir`, if any
        2) The directory specified by environmental variable GNUPLOT_PS_DIR
        3) A built-in header or one from the default system directory
        4) Directories set by `set loadpath`
- name: Pslatex and pstex
  id: complete_list_terminals#SECTION050151000000000000000
  summary: The pslatex driver generates output for further processing by LaTeX, while the pstex driver generates output for further processing by TeX
  description: |-
    ## Pslatex and pstex

    The **pslatex** driver generates output for further processing by LaTeX, while the **pstex** driver generates output for further processing by TeX. **pslatex** uses \\specials understandable by dvips and xdvi. Figures generated by **pstex** can be included in any plain-based format (including LaTeX).

    Syntax:

        set terminal [pslatex | pstex] {default}
        set terminal [pslatex | pstex]
                                {rotate | norotate}
                                {oldstyle | newstyle}
                                {auxfile | noauxfile}
                                {level1 | leveldefault | level3}
                                {color | colour | monochrome}
                                {background <rgbcolor> | nobackground}
                                {dashlength | dl <DL>}
                                {linewidth | lw <LW>} {pointscale | ps <PS>}
                                {rounded | butt}
                                {clip | noclip}
                                {palfuncparam <samples>{,<maxdeviation>}}
                                {size <XX>{unit},<YY>{unit}}
                                {<font_size>}

    If you see the error message

        "Can't find PostScript prologue file ... "

    Please see and follow the instructions in **[postscript prologue](complete_list_terminals#postscript_prologue)**.

    The option **color** enables color, while **monochrome** prefers black and white drawing elements. Further, **monochrome** uses gray **palette** but it does not change color of objects specified with an explicit **colorspec**. **dashlength** or **dl** scales the length of dashed-line segments by \<DL\>, which is a floating-point number greater than zero. **linewidth** or **lw** scales all linewidths by \<LW\>.

    By default the generated PostScript code uses language features that were introduced in PostScript Level 2, notably filters and pattern-fill of irregular objects such as filledcurves. PostScript Level 2 features are conditionally protected so that PostScript Level 1 interpreters do not issue errors but, rather, display a message or a PostScript Level 1 approximation. The **level1** option substitutes PostScript Level 1 approximations of these features and uses no PostScript Level 2 code. This may be required by some old printers and old versions of Adobe Illustrator. The flag **level1** can be toggled later by editing a single line in the PostScript output file to force PostScript Level 1 interpretation. In the case of files containing level 2 code, the above features will not appear or will be replaced by a note when this flag is set or when the interpreting program does not indicate that it understands level 2 PostScript or higher. The flag **level3** enables PNG encoding for bitmapped images, which can reduce the output size considerably.

    **rounded** sets line caps and line joins to be rounded; **butt** is the default, butt caps and mitered joins.

    **clip** tells PostScript to clip all output to the bounding box; **noclip** is the default.

    **palfuncparam** controls how **set palette functions** are encoded as gradients in the output. Analytic color component functions (set via **set palette functions**) are encoded as linear interpolated gradients in the postscript output: The color component functions are sampled at \<samples\> points and all points are removed from this gradient which can be removed without changing the resulting colors by more than \<maxdeviation\>. For almost every useful palette you may safely leave the defaults of \<samples\>=2000 and \<maxdeviation\>=0.003 untouched.

    The default size for postscript output is 10 inches x 7 inches. The default for eps output is 5 x 3.5 inches. The **size** option changes this to whatever the user requests. By default the X and Y sizes are taken to be in inches, but other units are possibly (currently only cm). The BoundingBox of the plot is correctly adjusted to contain the resized image. Screen coordinates always run from 0.0 to 1.0 along the full length of the plot edges as specified by the **size** option. NB: **this is a change from the previously recommended method of using the set size command prior to setting the terminal type**. The old method left the BoundingBox unchanged and screen coordinates did not correspond to the actual limits of the plot.

    if **rotate** is specified, the y-axis label is rotated. \<font_size\> is the size (in pts) of the desired font.

    If **auxfile** is specified, it directs the driver to put the PostScript commands into an auxiliary file instead of directly into the LaTeX file. This is useful if your pictures are large enough that dvips cannot handle them. The name of the auxiliary PostScript file is derived from the name of the TeX file given on the **set output** command; it is determined by replacing the trailing **.tex** (actually just the final extent in the file name) with **.ps** in the output file name, or, if the TeX file has no extension, **.ps** is appended. The **.ps** is included into the **.tex** file by a \\special{psfile=...} command. Remember to close the **output file** before next plot unless in **multiplot** mode.

    Gnuplot versions prior to version 4.2 generated plots of the size 5 x 3 inches using the ps(la)tex terminal while the current version generates 5 x 3.5 inches to be consistent with the postscript eps terminal. In addition, the character width is now estimated to be 60% of the font size while the old epslatex terminal used 50%. To reach the old format specify the option **oldstyle**.

    The pslatex driver offers a special way of controlling text positioning: (a) If any text string begins with '{', you also need to include a '}' at the end of the text, and the whole text will be centered both horizontally and vertically by LaTeX. (b) If the text string begins with '\[', you need to continue it with: a position specification (up to two out of t,b,l,r), '\]{', the text itself, and finally, '}'. The text itself may be anything LaTeX can typeset as an LR-box. \\rule{}{}'s may help for best positioning.

    The options not described here are identical to the **Postscript terminal**. Look there if you want to know what they do.

    Examples:

        set term pslatex monochrome rotate       # set to defaults

    To write the PostScript commands into the file "foo.ps":

        set term pslatex auxfile
        set output "foo.tex"; plot ...; set output

    About label positioning: Use gnuplot defaults (mostly sensible, but sometimes not really best):

        set title '\LaTeX\ -- $ \gamma $'

    Force centering both horizontally and vertically:

        set label '{\LaTeX\ -- $ \gamma $}' at 0,0

    Specify own positioning (top here):

        set xlabel '[t]{\LaTeX\ -- $ \gamma $}'

    The other label – account for long ticlabels:

        set ylabel '[r]{\LaTeX\ -- $ \gamma $\rule{7mm}{0pt}}'

    Linewidths and pointsizes may be changed with **set style line**.
- name: Pstricks
  id: complete_list_terminals#SECTION050152000000000000000
  summary: The pstricks driver is intended for use with the "pstricks.sty" macro package for LaTeX
  description: |-
    ## Pstricks

    The **pstricks** driver is intended for use with the "pstricks.sty" macro package for LaTeX. It is an alternative to the **eepic** and **latex** drivers. You need "pstricks.sty", and, of course, a printer that understands PostScript, or a converter such as Ghostscript.

    PSTricks is available at [http://tug.org/PSTricks/. ](http://tug.org/PSTricks/)

    This driver definitely does not come close to using the full capability of the PSTricks package.

    Syntax:

        set terminal pstricks
                       {unit | size <XX>{unit},<YY>{unit}}
                       {standalone | input}
                       {blacktext | colortext | colourtext}
                       {linewidth <lw>} {rounded | butt}
                       {pointscale <ps>}
                       {psarrows | gparrows}
                       {background <rgbcolor>}

    The **unit** option produces a plot with internal dimensions 1x1. The default is a plot of **size 5in,3in**.

    **standalone** produces a LaTeX file with possibly multiple plots, ready to be compiled. The default is **input** to produce a TeX file which can be included.

    **blacktext** forces all text to be written in black. **colortext** enables colored text. The default is **blacktext**.

    **rounded** sets line caps and line joins to be rounded. **butt** sets butt caps and mitered joins and is the default.

    **linewidth** and **pointscale** scale the width of lines and the size of point symbols, respectively.

    **psarrows** draws **arrow**s using PSTricks commands which are shorter but do not offer all options. **gparrows** selects drawing arrows using gnuplot's own routine for full functionality instead.

    The old **hacktext** option has been replaced by the new default format (%h), see **[format specifiers](set_show#format_specifiers)**.

    Transparency requires support by Ghostscript or conversion to PDF.
- name: Pwd
  id: pwd
  summary: The pwd command prints the name of the working directory to the screen
  description: "# Pwd\n\nThe **pwd** command prints the name of the working directory to the screen.\n\nNote that if you wish to store the current directory into a string variable or use it in string expressions, then you can use variable GPVAL_PWD, see **[show variables all](set_show#show_variables_all)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Qms
  id: complete_list_terminals#SECTION050153000000000000000
  summary: The qms terminal driver supports the QMS/QUIC Laser printer, the Talaris 1200 and others
  description: |-
    ## Qms

    The **qms** terminal driver supports the QMS/QUIC Laser printer, the Talaris 1200 and others. It has no options.
- name: Qt
  id: complete_list_terminals#SECTION050154000000000000000
  summary: The qt terminal device generates output in a separate window with the Qt library
  description: |-
    ## Qt

    The **qt** terminal device generates output in a separate window with the Qt library. Syntax:

        set term qt {<n>}
                    {size <width>,<height>}
                    {position <x>,<y>}
                    {title "title"}
                    {font <font>} {{no}enhanced}
                    {linewidth <lw>} {dashlength <dl>}
                    {{no}persist} {{no}raise} {{no}ctrl}
                    {close}
                    {widget <id>}

    Multiple plot windows are supported: **set terminal qt \<n\>** directs the output to plot window number n.

    The default window title is based on the window number. This title can also be specified with the keyword "title".

    Plot windows remain open even when the **gnuplot** driver is changed to a different device. A plot window can be closed by pressing the letter 'q' while that window has input focus, by choosing **close** from a window manager menu, or with **set term qt \<n\> close**.

    The size of the plot area is given in pixels, it defaults to 640x480. In addition to that, the actual size of the window also includes the space reserved for the toolbar and the status bar. When you resize a window, the plot is immediately scaled to fit in the new size of the window. The **qt** terminal scales the whole plot, including fonts and linewidths, and keeps its global aspect ratio constant. If you type **replot**, click the **replot** icon in the terminal toolbar or type a new **plot** command, the new plot will completely fit in the window and the font size and the linewidths will be reset to their defaults.

    The position option can be used to set the position of the plot window. The position option only applies to the first plot after the **set term** command.

    The active plot window (the one selected by **set term qt \<n\>**) is interactive. Its behaviour is shared with other terminal types. See **[mouse](set_show#mouse)** for details. It also has some extra icons, which are supposed to be self-explanatory.

    This terminal supports an enhanced text mode, which allows font and other formatting commands (subscripts, superscripts, etc.) to be embedded in labels and other text strings. The enhanced text mode syntax is shared with other gnuplot terminal types. See **[enhanced](enhanced_text_mode#enhanced)** for more details.

    \<font\> is in the format "FontFace,FontSize", i.e. the face and the size comma-separated in a single string. FontFace is a usual font face name, such as 'Arial'. If you do not provide FontFace, the qt terminal will use 'Sans'. FontSize is the font size, in points. If you do not provide it, the qt terminal will use a size of 9 points.

        For example :
           set term qt font "Arial,12"
           set term qt font "Arial" # to change the font face only
           set term qt font ",12" # to change the font size only
           set term qt font "" # to reset the font name and size

    The dashlength affects only custom dash patterns, not Qt's built-in set.

    To obtain the best output possible, the rendering involves three mechanisms : antialiasing, oversampling and hinting. Oversampling combined with antialiasing provides subpixel accuracy, so that gnuplot can draw a line from non-integer coordinates. This avoids wobbling effects on diagonal lines ('plot x' for example). Hinting avoids the blur on horizontal and vertical lines caused by oversampling. The terminal will snap these lines to integer coordinates so that a one-pixel-wide line will actually be drawn on one and only one pixel.

    By default, the window is raised to the top of your desktop when a plot is drawn. This can be controlled with the keyword "raise". The keyword "persist" will prevent gnuplot from exiting before you explicitly close all the plot windows.

    The \<space\> key raises the gnuplot console window \[MS Windows only\]. The 'q' key closes the plot window. These hot keys can be changed to ctrl-space and ctrl-q using the terminal option keyword "{no}ctrl". However the preferred way to select ctrl-q rather than 'q' is to use the toggle in the tools widget of the plot window.

    The gnuplot outboard driver, gnuplot_qt, is searched in a default place chosen when the program is compiled. You can override that by defining the environment variable GNUPLOT_DRIVER_DIR.
- name: Quit
  id: quit
  summary: The exit and quit commands and END-OF-FILE character will exit gnuplot
  description: "# Quit\n\nThe **exit** and **quit** commands and END-OF-FILE character will exit **gnuplot**. Each of these commands will clear the output device (as does the **clear** command) before exiting.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Raise
  id: raise
  summary: The raise and lower commands function only for a some terminal types and may depend also on your window manager and display preference settings
  description: "# Raise\n\nSyntax:\n\n    raise {plot_window_id}\n    lower {plot_window_id}\n\nThe **raise** and **lower** commands function only for a some terminal types and may depend also on your window manager and display preference settings. An example of use is shown here\n\n    set term wxt 123     # create first plot window\n    plot $FOO\n    lower                # lower the only plot window that exists so far\n    set term wxt 456     # create 2nd plot window may occlude the first one\n    plot $BAZ\n    raise 123            # raise first plot window\n\nThese commands are known to be unreliable.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Ranges
  id: plot#SECTION040188000000000000000
  summary: This section describes only the optional axis ranges that may appear as the very first items in a plot command
  belongs_to: Plot
  description: |-
    ## Ranges

    This section describes only the optional axis ranges that may appear as the very first items in a **plot** command. If present, these ranges override any range limits established by a previous **set range** statement. For optional ranges elsewhere in a **plot** command that limit sampling of an individual plot component see **[sampling](plot#sampling)**.

    Syntax:

        [{<dummy-var>=}{{<min>}:{<max>}}]
        [{{<min>}:{<max>}}]

    The first form applies to the independent variable (**xrange** or **trange**, if in parametric mode). The second form applies to dependent variables. \<dummy-var\> optionally establishes a new name for the independent variable. (The default name may be changed with **set dummy**.)

    In non-parametric mode, ranges must be given in the order

        plot [<xrange>][<yrange>][<x2range>][<y2range>] ...

    In parametric mode, ranges must be given in the order

        plot [<trange>][<xrange>][<yrange>][<x2range>][<y2range>] ...

    The following **plot** command shows setting **trange** to \[-pi:pi\], **xrange** to \[-1.3:1.3\] and **yrange** to \[-1:1\] for the duration of the graph:

        plot [-pi:pi] [-1.3:1.3] [-1:1] sin(t),t**2

    **\*** can be used to allow autoscaling of either of min and max. Use an empty range **\[\]** as a placeholder if necessary.

    Ranges specified on the **plot** or **splot** command line affect only that one graph; use the **set xrange**, **set yrange**, etc., commands to change the default ranges for future graphs.

    The use of on-the-fly range specifiers in a plot command may not yield the expected result for linked axes (see **[set link](set_show#set_link)**).

    For time data you must provide the range in quotes, using the same format used to read time from the datafile. See **[set timefmt](set_show#set_timefmt)**.

    Examples:

    This uses the current ranges:

        plot cos(x)

    This sets the x range only:

        plot [-10:30] sin(pi*x)/(pi*x)

    This is the same, but uses t as the dummy-variable:

        plot [t = -10 :30]  sin(pi*t)/(pi*t)

    This sets both the x and y ranges:

        plot [-pi:pi] [-3:3]  tan(x), 1/x

    This sets only the y range:

        plot [ ] [-2:sin(5)*-8] sin(x)**besj0(x)

    This sets xmax and ymin only:

        plot [:200] [-pi:]  $mydata using 1:2

    This sets the x range for a timeseries:

        set timefmt "%d/%m/%y %H:%M"
        plot ["1/6/93 12:00":"5/6/93 12:00"] 'timedata.dat'
- name: Raxis
  id: set_show#SECTION0402977000000000000000
  summary: The commands set raxis and unset raxis toggle whether the polar axis is drawn separately from grid lines and the x axis
  belongs_to: Set-show
  description: |-
    ## Raxis

    The commands **set raxis** and **unset raxis** toggle whether the polar axis is drawn separately from grid lines and the x axis. If the minimum of the current rrange is non-zero (and not autoscaled), then a white circle is drawn at the center of the polar plot to indicate that the plot lines and axes do not reach 0. The axis line is drawn using the same line type as the plot border. See **[polar](set_show#polar)**, **[rrange](set_show#rrange)**, **[rtics](set_show#rtics)**, **[rlabel](set_show#rlabel)**, **[set grid](set_show#set_grid)**.
- name: Refresh
  id: refresh
  summary: The refresh command is similar to replot, with two major differences
  description: "# Refresh\n\nThe **refresh** command is similar to **replot**, with two major differences. **refresh** reformats and redraws the current plot using the data already read in. This means that you can use **refresh** for plots with inline data (pseudo-device '-') and for plots from datafiles whose contents are volatile. You cannot use the **refresh** command to add new data to an existing plot.\n\nMousing operations, in particular zoom and unzoom, will use **refresh** rather than **replot** if appropriate. Example:\n\n    plot 'datafile' volatile with lines, '-' with labels\n    100 200 \"Special point\"\n    e\n    # Various mousing operations go here\n    set title \"Zoomed in view\"\n    set term post\n    set output 'zoom.ps'\n    refresh\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Regis
  id: complete_list_terminals#SECTION050155000000000000000
  summary: 'Note: legacy terminal'
  description: |-
    ## Regis

    Note: legacy terminal. The **regis** terminal device generates output in the REGIS graphics language. It has the option of using 4 (the default) or 16 colors.

    Syntax:

        set terminal regis {4 | 16}
- name: Replot
  id: replot
  summary: The replot command without arguments repeats the last plot or splot command
  description: "# Replot\n\nThe **replot** command without arguments repeats the last **plot** or **splot** command. This can be useful for viewing a plot with different **set** options, or when generating the same plot for several devices.\n\nArguments specified after a **replot** command will be added onto the last **plot** or **splot** command (with an implied ',' separator) before it is repeated. **replot** accepts the same arguments as the **plot** and **splot** commands except that ranges cannot be specified. Thus you can use **replot** to plot a function against the second axes if the previous command was **plot** but not if it was **splot**.\n\nN.B. — use of\n\n    plot '-' ; ... ; replot\n\nis not recommended, because it will require that you type in the data all over again. In most cases you can use the **refresh** command instead, which will redraw the plot using the data previously read in.\n\nNote that in multiplot mode, **replot** can only reproduce the most recent component plot, not the full set.\n\nSee also **[command-line-editing](command_line_editing#command-line-editing)** for ways to edit the last **[plot](plot#plot)** (**[splot](splot#splot)**) command.\n\nSee also **[show plot](set_show#show_plot)** to show the whole current plotting command, and the possibility to copy it into the **[history](history#history)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Reread
  id: reread
  summary: This command is deprecated in favor of explicit iteration
  description: "# Reread\n\n\\[DEPRECATED in version 5.4\\]\n\nThis command is deprecated in favor of explicit iteration. See **[iterate](iteration#iterate)**. The **reread** command causes the current **gnuplot** command file, as specified by a **load** command, to be reset to its starting point before further commands are read from it. This essentially implements an endless loop of the commands from the beginning of the command file to the **reread** command. The **reread** command has no effect when reading interactively (from stdin).\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Reset
  id: reset
  summary: The reset command causes all graph-related options that can be set with the set command to return to their default values
  description: "# Reset\n\n    reset {bind | errors | session}\n\nThe **reset** command causes all graph-related options that can be set with the **set** command to return to their default values. This command can be used to restore the default settings after executing a loaded command file, or to return to a defined state after lots of settings have been changed.\n\nThe following are *not* affected by **reset**:\n\n    `set term` `set output` `set loadpath` `set linetype` `set fit`\n    `set encoding` `set decimalsign` `set locale` `set psdir`\n    `set overflow` `set multiplot`\n\nNote that **reset** does not necessarily return settings to the state they were in at program entry, because the default values may have been altered by commands in the initialization files gnuplotrc or $HOME/.gnuplot. However, these commands can be re-executed by using the variant command **reset session**.\n\n**reset session** deletes any user-defined variables and functions, restores default settings, and then re-executes the system-wide gnuplotrc initialization file and any private $HOME/.gnuplot preferences file. See **[initialization](start_up_initialization#initialization)**.\n\n**reset errors** clears only the error state variables GPVAL_ERRNO and GPVAL_ERRMSG.\n\n**reset bind** restores all hotkey bindings to their default state.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Rgbalpha
  id: rgbalpha
  summary: See image
  description: "# Rgbalpha\n\nSee **[image](image#image)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Rgbimage
  id: rgbimage
  summary: See image
  description: "# Rgbimage\n\nSee **[image](image#image)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Rgbmax
  id: set_show#SECTION0402978000000000000000
  summary: The red/green/blue color components of an rgbimage plot are by default interpreted as integers in the range [0:255]
  belongs_to: Set-show
  description: |-
    ## Rgbmax

    Syntax:

        set rgbmax {1.0 | 255}
        unset rgbmax

    The red/green/blue color components of an rgbimage plot are by default interpreted as integers in the range \[0:255\]. **set rgbmax 1.0** tells the program that data values used to generate the color components of a plot with **rgbimage** or **rgbalpha** are floating point values in the range \[0:1\]. **unset rgbmax** returns to the default integer range \[0:255\].
- name: Rlabel
  id: set_show#SECTION0402979000000000000000
  summary: This command places a label above the r axis
  belongs_to: Set-show
  description: |-
    ## Rlabel

    This command places a label above the r axis. The label will be drawn whether or not the plot is in polar mode. See **[set xlabel](set_show#set_xlabel)** for additional keywords.
- name: Rmargin
  id: set_show#SECTION0402980000000000000000
  summary: The command set rmargin sets the size of the right margin
  belongs_to: Set-show
  description: |-
    ## Rmargin

    The command **set rmargin** sets the size of the right margin. Please see **[set margin](set_show#set_margin)** for details.
- name: Rrange
  id: set_show#SECTION0402981000000000000000
  summary: The set rrange command sets the range of the radial coordinate for a graph in polar mode
  belongs_to: Set-show
  description: |-
    ## Rrange

    The **set rrange** command sets the range of the radial coordinate for a graph in polar mode. This has the effect of setting both xrange and yrange as well. The resulting xrange and yrange are both \[-(rmax-rmin) : +(rmax-rmin)\]. However if you later change the x or y range, for example by zooming, this does not change rrange, so data points continue to be clipped against rrange. Unlike other axes, autoscaling the raxis always results in rmin = 0. The **reverse** autoscaling flag is ignored. Note: Setting a negative value for rmin may produce unexpected results.
- name: Rtics
  id: set_show#SECTION0402982000000000000000
  summary: The set rtics command places tics along the polar axis
  belongs_to: Set-show
  description: |-
    ## Rtics

    The **set rtics** command places tics along the polar axis. The tics and labels are drawn to the right of the origin. The **mirror** keyword causes them to be drawn also to the left of the origin. See **[polar](set_show#polar)**, **[set xtics](set_show#set_xtics)**, and **[set mxtics](set_show#set_mxtics)** for discussion of keywords.
- name: Samples
  id: set_show#SECTION0402983000000000000000
  summary: The default sampling rate of functions, or for interpolating data, may be changed by the set samples command
  belongs_to: Set-show
  description: |-
    ## Samples

    The default sampling rate of functions, or for interpolating data, may be changed by the **set samples** command. To change the sampling range for a particular plot, see **[plot sampling](plot#plot_sampling)**.

    Syntax:

        set samples <samples_1> {,<samples_2>}
        show samples

    By default, sampling is set to 100 points. A higher sampling rate will produce more accurate plots, but will take longer. This parameter has no effect on data file plotting unless one of the interpolation/approximation options is used. See **[plot smooth](plot#plot_smooth)** re 2D data and **[set cntrparam](set_show#set_cntrparam)** and **[set dgrid3d](set_show#set_dgrid3d)** re 3D data.

    When a 2D graph is being done, only the value of \<samples_1\> is relevant.

    When a surface plot is being done without the removal of hidden lines, the value of samples specifies the number of samples that are to be evaluated for the isolines. Each iso-v line will have \<sample_1\> samples and each iso-u line will have \<sample_2\> samples. If you only specify \<samples_1\>, \<samples_2\> will be set to the same value as \<samples_1\>. See also **[set isosamples](set_show#set_isosamples)**.
- name: Sampling
  id: plot#SECTION040189000000000000000
  summary: null
  belongs_to: Plot
  description: '## Sampling'
- name: Sampling 1D sampling (x or t axis)
  id: plot#SECTION040189100000000000000
  summary: By default, computed functions or data generated for the pseudo-file "+" are sampled over the entire range of the plot as set by a prior set xrange command, by an explicit global range specifier at the very start of the plot or splot command, or by autoscaling the xrange to span data seen in all the elements of this plot
  belongs_to: Plot
  description: |-
    ### 1D sampling (x or t axis)

    By default, computed functions or data generated for the pseudo-file "+" are sampled over the entire range of the plot as set by a prior **set xrange** command, by an explicit global range specifier at the very start of the plot or splot command, or by autoscaling the xrange to span data seen in all the elements of this plot. However, individual plot components can be assigned a more restricted sampling range.

    Examples:

    This establishes a total range on x running from 0 to 1000 and then plots data from a file and two functions each spanning a portion of the total range:

        plot [0:1000] 'datafile', [0:200] func1(x), [200:500] func2(x)

    This is similar except that the total range is established by the contents of the data file. In this case the sampled functions may or may not be entirely contained in the plot:

        set autoscale x
        plot 'datafile', [0:200] func1(x), [200:500] func2(x)

    This command is ambiguous. The initial range will be interpreted as applying to the entire plot, not solely to the sampling of the first function as was probably the intent:

        plot [0:10] f(x), [10:20] g(x), [20:30] h(x)

    This command removes the ambiguity of the previous example by inserting the keyword **sample** so that the range is not applied to the entire plot:

        plot sample [0:10] f(x), [10:20] g(x), [20:30] h(x)

    This example shows one way of tracing out a helix in a 3D plot

        splot [-2:2][-2:2] sample [h=1:10] '+' using (cos(h)):(sin(h)):(h)
- name: Sampling 2D sampling (u and v axes)
  id: plot#SECTION040189200000000000000
  summary: Computed functions or data generated for the pseudo-file '++' use samples generated along the u and v axes
  belongs_to: Plot
  description: |-
    ### 2D sampling (u and v axes)

    Computed functions or data generated for the pseudo-file '++' use samples generated along the u and v axes. This is a CHANGE from versions prior to 5.2 which sampled along the x and y axes. See **[special-filenames ++](plot#special-filenames_++)**. 2D sampling can be used in either **plot** or **splot** commands.

    Example of 2D sampling in a 2D **plot** command. These commands generated the plot shown for plotstyle **with vectors**. See **[vectors](vectors#vectors)**.

        set urange [ -2.0 : 2.0 ]
        set vrange [ -2.0 : 2.0 ]
        plot '++' using ($1):($2):($2*0.4):(-$1*0.4) with vectors

    Example of 2D sampling in a 3D **splot** command. These commands are similar to the ones used in **sampling.dem**. Note that the two surfaces are sampled over u and v ranges smaller than the full x and y ranges of the resulting plot.

        set title "3D sampling range distinct from plot x/y range"
        set xrange [1:100]
        set yrange [1:100]
        splot sample [u=30:70][v=0:50] '++' using 1:2:(u*v) lt 3, \
              [u=40:80][v=30:60] '++' using (u):(v):(u*sqrt(v)) lt 4

    The range specifiers for sampling on u and v can include an explicit sampling interval to control the number and spacing of samples:

        splot sample [u=30:70:1][v=0:50:5] '++' using 1:2:(func($1,$2))
- name: Save
  id: save
  summary: If no option is specified, gnuplot saves functions, variables, set options and the last plot (splot) command
  description: "# Save\n\nSyntax:\n\n    save  {functions | variables | terminal | set | fit} '<filename>'\n\nIf no option is specified, **gnuplot** saves functions, variables, **set** options and the last **plot** (**splot**) command.\n\n**save**d files are written in text format and may be read by the **load** command. For **save** with the **set** option or without any option, the **terminal** choice and the **output** filename are written out as a comment, to get an output file that works in other installations of gnuplot, without changes and without risk of unwillingly overwriting files.\n\n**save terminal** will write out just the **terminal** status, without the comment marker in front of it. This is mainly useful for switching the **terminal** setting for a short while, and getting back to the previously set terminal, afterwards, by loading the saved **terminal** status. Note that for a single gnuplot session you may rather use the other method of saving and restoring current terminal by the commands **set term push** and **set term pop**, see **[set term](set_show#set_term)**.\n\n**save fit** saves only the variables used in the most recent **fit** command. The saved file may be used as a parameter file to initialize future fit commands using the **via** keyword.\n\nThe filename must be enclosed in quotes.\n\nThe special filename \"-\" may be used to **save** commands to standard output. On systems which support a popen function (Unix), the output of save can be piped through an external program by starting the file name with a '\\|'. This provides a consistent interface to **gnuplot**'s internal settings to programs which communicate with **gnuplot** through a pipe. Please see help for **[batch/interactive](batch_interactive_operation#batch_interactive)** for more details.\n\nExamples:\n\n    save 'work.gnu'\n    save functions 'func.dat'\n    save var 'var.dat'\n    save set 'options.dat'\n    save term 'myterm.gnu'\n    save '-'\n    save '|grep title >t.gp'\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Set datafile binary
  id: set_show#SECTION0402920700000000000000
  summary: The set datafile binary command is used to set the defaults when reading binary data files
  belongs_to: Set-show
  description: |-
    ### Set datafile binary

    The **set datafile binary** command is used to set the defaults when reading binary data files. The syntax matches precisely that used for commands **plot** and **splot**. See **[binary matrix](splot#binary_matrix)** and **[binary general](plot#binary_general)** for details about the keywords that can be present in \<binary list\>.

    Syntax:

        set datafile binary <binary list>
        show datafile binary
        show datafile
        unset datafile

    Examples:

        set datafile binary filetype=auto
        set datafile binary array=(512,512) format="%uchar"

        show datafile binary   # list current settings
- name: Set datafile columnheaders
  id: set_show#SECTION0402920100000000000000
  summary: The set datafile columnheaders command guarantees that the first row of input will be interpreted as column headers rather than as data values
  belongs_to: Set-show
  description: |-
    ### Set datafile columnheaders

    The **set datafile columnheaders** command guarantees that the first row of input will be interpreted as column headers rather than as data values. It affects all input data sources to plot, splot, fit, and stats commands. If this setting is disabled by **unset datafile columnheaders**, the same effect is triggered on a per-file basis if there is an explicit columnheader() function in a using specifier or plot title associated with that file. See also **[set key autotitle](set_show#set_key_autotitle)** and **[columnheader](plot#columnheader)**.
- name: Set datafile commentschars
  id: set_show#SECTION0402920600000000000000
  summary: The command set datafile commentschars specifies what characters can be used in a data file to begin comment lines
  belongs_to: Set-show
  description: |-
    ### Set datafile commentschars

    The command **set datafile commentschars** specifies what characters can be used in a data file to begin comment lines. If the first non-blank character on a line is one of these characters then the rest of the data line is ignored. Default value of the string is "\#\!" on VMS and "\#" otherwise.

    Syntax:

        set datafile commentschars {"<string>"}
        show datafile commentschars
        unset commentschars

    Then, the following line in a data file is completely ignored

        # 1 2 3 4

    but the following

        1 # 3 4

    will be interpreted as garbage in the 2nd column followed by valid data in the 3rd and 4th columns.

    Example:

        set datafile commentschars "#!%"
- name: Set datafile fortran
  id: set_show#SECTION0402920200000000000000
  summary: The set datafile fortran command enables a special check for values in the input file expressed as Fortran D or Q constants
  belongs_to: Set-show
  description: |-
    ### Set datafile fortran

    The **set datafile fortran** command enables a special check for values in the input file expressed as Fortran D or Q constants. This extra check slows down the input process, and should only be selected if you do in fact have datafiles containing Fortran D or Q constants. The option can be disabled again using **unset datafile fortran**.
- name: Set datafile missing
  id: set_show#SECTION0402920400000000000000
  summary: The set datafile missing command tells gnuplot there is a special string used in input data files to denote a missing data entry
  belongs_to: Set-show
  description: |-
    ### Set datafile missing

    Syntax:

        set datafile missing "<string>"
        set datafile missing NaN
        show datafile missing
        unset datafile

    The **set datafile missing** command tells **gnuplot** there is a special string used in input data files to denote a missing data entry. There is no default character for **missing**. Gnuplot makes a distinction between missing data and invalid data (e.g. "NaN", 1/0.). For example invalid data causes a gap in a line drawn through sequential data points; missing data does not.

    Non-numeric characters found in a numeric field will usually be interpreted as invalid rather than as a missing data point unless they happen to match the **missing** string.

    Conversely **set datafile missing NaN** causes all data or expressions evaluating to not-a-number (NaN) to be treated as missing data.

    The example below shows differences between gnuplot version 4 and version 5. Example:

        set style data linespoints
        plot '-' title "(a)"
           1 10
           2 20
           3 ?
           4 40
           5 50
           e
        set datafile missing "?"
        plot '-' title "(b)"
           1 10
           2 20
           3 ?
           4 40
           5 50
           e
        plot '-' using 1:2 title "(c)"
           1 10
           2 20
           3 NaN
           4 40
           5 50
           e
        plot '-' using 1:($2) title "(d)"
           1 10
           2 20
           3 NaN
           4 40
           5 50
           e

    Plot (a) differs in gnuplot 4 and gnuplot 5 because the third line contains only one valid number. Version 4 switched to a single-datum-on-a-line convention that the line number is "x" and the datum is "y", erroneously placing the point at(2,3).

    Both the old and new gnuplot versions handle the same data correctly if the '?' character is designated as a marker for missing data (b).

    Old gnuplot versions handled NaN differently depending of the form of the **using** clause, as shown in plots (c) and (d). Gnuplot now handles NaN the same whether the input column was specified as N or ($N). See also the [imageNaN demo. ](http://www.gnuplot.info/demo/mgr.html)

    Similarly gnuplot 5.4 will notice the missing value flag in column N whether the plot command specifies **using N** or **using ($N)** or **using (func($N))**. However if the "missing" value is encountered during evaluation of some more complicated expression, e.g. **using (column(strcol(1))**, it may evaluate to NaN and be treated as invalid data rather than as a missing data point. If you nevertheless want to treat this as missing data, use the command **set datafile missing NaN**.
- name: Set datafile nofpe_trap
  id: set_show#SECTION0402920300000000000000
  summary: The set datafile nofpe_trap command tells gnuplot not to re-initialize a floating point exception handler before every expression evaluation used while reading data from an input file
  belongs_to: Set-show
  description: |-
    ### Set datafile nofpe_trap

    The **set datafile nofpe_trap** command tells gnuplot not to re-initialize a floating point exception handler before every expression evaluation used while reading data from an input file. This can significantly speed data input from very large files at the risk of program termination if a floating-point exception is generated.
- name: Set datafile separator
  id: set_show#SECTION0402920500000000000000
  summary: The command set datafile separator tells gnuplot that data fields in subsequent input files are separated by a specific character rather than by whitespace
  belongs_to: Set-show
  description: |-
    ### Set datafile separator

    The command **set datafile separator** tells **gnuplot** that data fields in subsequent input files are separated by a specific character rather than by whitespace. The most common use is to read in csv (comma-separated value) files written by spreadsheet or database programs. By default data fields are separated by whitespace.

    Syntax:

        set datafile separator {whitespace | tab | comma | "<chars>"}

    Examples:

        # Input file contains tab-separated fields
        set datafile separator "\t"

        # Input file contains comma-separated values fields
        set datafile separator comma

        # Input file contains fields separated by either * or |
        set datafile separator "*|"
- name: Set style arrow
  id: set_show#SECTION0402986100000000000000
  summary: Each terminal has a default set of arrow and point types, which can be seen by using the command test
  belongs_to: Set-show
  description: |-
    ### Set style arrow

    Each terminal has a default set of arrow and point types, which can be seen by using the command **test**. **set style arrow** defines a set of arrow types and widths and point types and sizes so that you can refer to them later by an index instead of repeating all the information at each invocation.

    Syntax:

        set style arrow <index> default
        set style arrow <index> {nohead | head | backhead | heads}
                                {size <length>,<angle>{,<backangle>} {fixed}}
                                {filled | empty | nofilled | noborder}
                                {front | back}
                                { {linestyle | ls <line_style>}
                                  | {linetype | lt <line_type>}
                                    {linewidth | lw <line_width}
                                    {linecolor | lc <colorspec>}
                                    {dashtype | dt <dashtype>} }
        unset style arrow
        show style arrow

    \<index\> is an integer that identifies the arrowstyle.

    If **default** is given all arrow style parameters are set to their default values.

    If the linestyle \<index\> already exists, only the given parameters are changed while all others are preserved. If not, all undefined values are set to the default values.

    Specifying **nohead** produces arrows drawn without a head — a line segment. This gives you yet another way to draw a line segment on the plot. By default, arrows have one head. Specifying **heads** draws arrow heads on both ends of the line.

    Head size can be modified using **size \<length\>,\<angle\>** or **size \<length\>,\<angle\>,\<backangle\>**, where **\<length\>** defines length of each branch of the arrow head and **\<angle\>** the angle (in degrees) they make with the arrow. **\<Length\>** is in x-axis units; this can be changed by **first**, **second**, **graph**, **screen**, or **character** before the \<length\>; see **[coordinates](coordinates#coordinates)** for details.

    By default the size of the arrow head is reduced for very short arrows. This can be disabled using the **fixed** keyword after the **size** command.

    **\<backangle\>** is the angle (in degrees) the back branches make with the arrow (in the same direction as **\<angle\>**). It is ignored if the style is **nofilled**.

    Specifying **filled** produces filled arrow heads with a border line around the arrow head. Specifying **noborder** produces filled arrow heads with no border. In this case the tip of the arrow head lies exactly on the endpoint of the vector and the arrow head is slightly smaller overall. Dashed arrows should always use **noborder**, since a dashed border is ugly. Not all terminals support filled arrow heads.

    The line style may be selected from a user-defined list of line styles (see **[set style line](set_show#set_style_line)**) or may be defined here by providing values for **\<line_type\>** (an index from the default list of styles) and/or **\<line_width\>** (which is a multiplier for the default width).

    Note, however, that if a user-defined line style has been selected, its properties (type and width) cannot be altered merely by issuing another **set style arrow** command with the appropriate index and **lt** or **lw**.

    If **front** is given, the arrows are written on top of the graphed data. If **back** is given (the default), the arrow is written underneath the graphed data. Using **front** will prevent a arrow from being obscured by dense data.

    Examples:

    To draw an arrow without an arrow head and double width, use:

        set style arrow 1 nohead lw 2
        set arrow arrowstyle 1

    See also **[set arrow](set_show#set_arrow)** for further examples.
- name: set style boxplot
  id: set_show#SECTION0402986200000000000000
  summary: The set style boxplot command allows you to change the layout of plots created using the boxplot plot style
  belongs_to: Set-show
  description: |-
    ### Boxplot

    The **set style boxplot** command allows you to change the layout of plots created using the **boxplot** plot style.

    Syntax:

        set style boxplot {range <r> | fraction <f>}
                          {{no}outliers} {pointtype <p>}
                          {candlesticks | financebars}
                          {medianlinewidth <width>}
                          {separation <x>}
                          {labels off | auto | x | x2}
                          {sorted | unsorted}

    The box in the boxplot always spans the range of values from the first quartile to the third quartile of the data points. The limit of the whiskers that extend from the box can be controlled in two different ways. By default the whiskers extend from each end of the box for a range equal to 1.5 times the interquartile range (i.e. the vertical height of the box proper). Each whisker is truncated back toward the median so that it terminates at a y value belonging to some point in the data set. Since there may be no point whose value is exactly 1.5 times the interquartile distance, the whisker may be shorter than its nominal range. This default corresponds to

        set style boxplot range 1.5

    Alternatively, you can specify the fraction of the total number of points that the whiskers should span. In this case the range is extended symmetrically from the median value until it encompasses the requested fraction of the data set. Here again each whisker is constrained to end at a point in the data set. To span 95% of the points in the set

        set style boxplot fraction 0.95

    Any points that lie outside the range of the whiskers are considered outliers. By default these are drawn as individual circles (pointtype 7). The option **nooutliers** disables this. If outliers are not drawn they do not contribute to autoscaling.

    By default boxplots are drawn in a style similar to candlesticks, but you have the option of using instead a style similar to finance bars.

    A crossbar indicating the median is drawn using the same line type as box boundary. If you want a thicker line for the median

        set style boxplot medianlinewidth 2.0

    If you want no median line, set this to 0.

    If the using specification for a boxplot contains a fourth column, the values in that column will be interpreted as the discrete leveles of a factor variable. In this case more than one boxplots may be drawn, as many as the number of levels of the factor variable. These boxplots will be drawn next to each other, the distance between them is 1.0 by default (in x-axis units). This distance can be changed by the option **separation**.

    The **labels** option governs how and where these boxplots (each representing a part of the dataset) are labeled. By default the value of the factor is put as a tick label on the horizontal axis – x or x2, depending on which one is used for the plot itself. This setting corresponds to option **labels auto**. The labels can be forced to use either of the x or x2 axes – options **labels x** and **labels x2**, respectively –, or they can be turned off altogether with the option **labels off**.

    By default the boxplots corresponding to different levels of the factor variable are not sorted; they will be drawn in the same order the levels are encountered in the data file. This behavior corresponds to the **unsorted** option. If the **sorted** option is active, the levels are first sorted alphabetically, and the boxplots are drawn in the sorted order.

    The **separation**, **labels**, **sorted** and **unsorted** option only have an effect if a fourth column is given the plot specification.

    See **[boxplot](boxplot#boxplot)**, **[candlesticks](candlesticks#candlesticks)**, **[financebars](financebars#financebars)**.
- name: Set style circle
  id: set_show#SECTION0402986800000000000000
  summary: This command sets the default radius used in plot style "with circles". It applies to data plots with only 2 columns of data (x,y) and to function plots
  belongs_to: Set-show
  description: |-
    ### Set style circle

    Syntax:

        set style circle {radius {graph|screen} <R>}
                         {{no}wedge}
                         {clip|noclip}

    This command sets the default radius used in plot style "with circles". It applies to data plots with only 2 columns of data (x,y) and to function plots. The default is "set style circle radius graph 0.02". **Nowedge** disables drawing of the two radii that connect the ends of an arc to the center. The default is **wedge**. This parameter has no effect on full circles. **Clip** clips the circle at the plot boundaries, **noclip** disables this. Default is **clip**.
- name: Set style data
  id: set_show#SECTION0402986300000000000000
  summary: The set style data command changes the default plotting style for data plots
  belongs_to: Set-show
  description: |-
    ### Set style data

    The **set style data** command changes the default plotting style for data plots.

    Syntax:

        set style data <plotting-style>
        show style data

    See **plotting styles** for the choices. **show style data** shows the current default data plotting style.
- name: Set style ellipse
  id: set_show#SECTION04029861000000000000000
  summary: This command governs whether the diameters of ellipses are interpreted in the same units or not
  belongs_to: Set-show
  description: |-
    ### Set style ellipse

    Syntax:

        set style ellipse {units xx|xy|yy}
                          {size {graph|screen} <a>, {{graph|screen} <b>}}
                          {angle <angle>}
                          {clip|noclip}

    This command governs whether the diameters of ellipses are interpreted in the same units or not. Default is **xy**, which means that the major diameter (first axis) of ellipses will be interpreted in the same units as the x (or x2) axis, while the minor (second) diameter in those of the y (or y2) axis. In this mode the ratio of the ellipse axes depends on the scales of the plot axes and aspect ratio of the plot. When set to **xx** or **yy**, both axes of all ellipses will be interpreted in the same units. This means that the ratio of the axes of the plotted ellipses will be correct even after rotation, but either their vertical or horizontal extent will not be correct.

    This is a global setting that affects all ellipses, both those defined as objects and those generated with the **plot** command, however, the value of **units** can also be redefined on a per-plot and per-object basis.

    It is also possible to set a default size for ellipses with the **size** keyword. This default size applies to data plots with only 2 columns of data (x,y) and to function plots. The two values are interpreted as the major and minor diameters (as opposed to semi-major and semi-minor axes) of the ellipse.

    The default is "set style ellipse size graph 0.05,0.03".

    Last, but not least it is possible to set the default orientation with the **angle** keyword. The orientation, which is defined as the angle between the major axis of the ellipse and the plot's x axis, must be given in degrees.

    **Clip** clips the ellipse at the plot boundaries, **noclip** disables this. Default is **clip**.

    For defining ellipse objects, see **[set object ellipse](set_show#set_object_ellipse)**; for the 2D plot style, see **[ellipses](ellipses#ellipses)**.
- name: Set style fill
  id: set_show#SECTION0402986400000000000000
  summary: The set style fill command is used to set the default style of the plot elements in plots with boxes, histograms, candlesticks and filledcurves
  belongs_to: Set-show
  description: |-
    ### Set style fill

    The **set style fill** command is used to set the default style of the plot elements in plots with boxes, histograms, candlesticks and filledcurves. This default can be superseded by fillstyles attached to individual plots.

    Note that there is a separate default fill style for rectangles created by **set obj**. See **[set style rectangle](set_show#set_style_rectangle)**.

    Syntax:

        set style fill {empty
                        | {transparent} solid {<density>}
                        | {transparent} pattern {<n>}}
                       {border {lt} {lc <colorspec>} | noborder}

    The **empty** option causes filled areas not to be filled. This is the default.

    The **solid** option causes filling with a solid color, if the terminal supports that. The \<density\> parameter specifies the intensity of the fill color. At a \<density\> of 0.0, the box is empty, at \<density\> of 1.0, the inner area is of the same color as the current linetype. Some terminal types can vary the density continuously; others implement only a few levels of partial fill. If no \<density\> parameter is given, it defaults to 1.

    The **pattern** option causes filling to be done with a fill pattern supplied by the terminal driver. The kind and number of available fill patterns depend on the terminal driver. If multiple datasets using filled boxes are plotted, the pattern cycles through all available pattern types, starting from pattern \<n\>, much as the line type cycles for multiple line plots.

    Fill color (**fillcolor \<colorspec\>**) is distinct from fill style. I.e. plot elements or objects can share a fillstyle while retaining separate colors. In most places where a fillstyle is accepted you can also specify a fill color. Fillcolor may be abbreviated **fc**. Otherwise the fill color is take from the current linetype. Example:

        plot FOO with boxes fillstyle solid 1.0 fillcolor "cyan"
- name: Set style fill Set style fill border
  id: set_show#SECTION0402986410000000000000
  summary: The bare keyword border causes the filled object to be surrounded by a solid line of the current linetype and color
  belongs_to: Set-show
  description: |-
    #### Set style fill border

    The bare keyword **border** causes the filled object to be surrounded by a solid line of the current linetype and color. You can change the color of this line by adding either a linetype or a linecolor. **noborder** specifies that no bounding line is drawn. Examples:

        # Half-intensity fill, full intensity border in same color
        set style fill solid 0.5 border
        # Half-transparent fill, solid black border (linetype -1)
        set style fill transparent solid 0.5 border -1
        # Pattern fill in current color, border using color of linetype 5
        plot ... with boxes fillstyle pattern 2 border lt 5
        # Fill area in cyan, border in blue
        plot ... with boxes fillcolor "cyan" fs solid border linecolor "blue"

    Note: The border property of a fill style only affects plots drawn **with filledcurves** in the default mode (closed curve).
- name: Set style fill Set style fill transparent
  id: set_show#SECTION0402986420000000000000
  summary: Some terminals support the attribute transparent for filled areas
  belongs_to: Set-show
  description: |-
    #### Set style fill transparent

    Some terminals support the attribute **transparent** for filled areas. In the case of transparent solid fill areas, the **density** parameter is interpreted as an alpha value; that is, density 0 is fully transparent, density 1 is fully opaque. In the case of transparent pattern fill, the background of the pattern is either fully transparent or fully opaque.

    Note that there may be additional limitations on the creation or viewing of graphs containing transparent fill areas. For example, the png terminal can only use transparent fill if the "truecolor" option is set. Some pdf viewers may not correctly display the fill areas even if they are correctly described in the pdf file. Ghostscript/gv does not correctly display pattern-fill areas even though actual PostScript printers generally have no problem.
- name: Set style function
  id: set_show#SECTION0402986500000000000000
  summary: The set style function command changes the default plotting style for function plots (e.g
  belongs_to: Set-show
  description: |-
    ### Set style function

    The **set style function** command changes the default plotting style for function plots (e.g. lines, points, filledcurves). See **plotting styles**.

    Syntax:

        set style function <plotting-style>
        show style function
- name: Set style increment
  id: set_show#SECTION0402986600000000000000
  summary: 'Note: This command has been deprecated'
  belongs_to: Set-show
  description: |-
    ### Set style increment

    **Note**: This command has been deprecated. Instead please use the newer command **set linetype**, which redefines the linetypes themselves rather than searching for a suitable temporary line style to substitute. See **[set linetype](set_show#set_linetype)**

    Syntax:

        set style increment {default|userstyles}
        show style increment

    By default, successive plots within the same graph will use successive linetypes from the default set for the current terminal type. However, choosing **set style increment user** allows you to step through the user-defined line styles rather than through the default linetypes.

    Example:

        set style line 1 lw 2 lc rgb "gold"
        set style line 2 lw 2 lc rgb "purple"
        set style line 4 lw 1 lc rgb "sea-green"
        set style increment user

        plot f1(x), f2(x), f3(x), f4(x)

    should plot functions f1, f2, f4 in your 3 newly defined line styles. If a user-defined line style is not found then the corresponding default linetype is used instead. E.g. in the example above, f3(x) will be plotted using the default linetype 3.
- name: Set style line
  id: set_show#SECTION0402986700000000000000
  summary: Each terminal has a default set of line and point types, which can be seen by using the command test
  belongs_to: Set-show
  description: |-
    ### Set style line

    Each terminal has a default set of line and point types, which can be seen by using the command **test**. **set style line** defines a set of line types and widths and point types and sizes so that you can refer to them later by an index instead of repeating all the information at each invocation.

    Syntax:

        set style line <index> default
        set style line <index> {{linetype  | lt} <line_type> | <colorspec>}
                               {{linecolor | lc} <colorspec>}
                               {{linewidth | lw} <line_width>}
                               {{pointtype | pt} <point_type>}
                               {{pointsize | ps} <point_size>}
                               {{pointinterval | pi} <interval>}
                               {{pointnumber | pn} <max_symbols>}
                               {{dashtype | dt} <dashtype>}
                               {palette}
        unset style line
        show style line

    **default** sets all line style parameters to those of the linetype with that same index.

    If the linestyle \<index\> already exists, only the given parameters are changed while all others are preserved. If not, all undefined values are set to the default values.

    Line styles created by this mechanism do not replace the default linetype styles; both may be used. Line styles are temporary. They are lost whenever you execute a **reset** command. To redefine the linetype itself, please see **[set linetype](set_show#set_linetype)**.

    The line and point types default to the index value. The exact symbol that is drawn for that index value may vary from one terminal type to another.

    The line width and point size are multipliers for the current terminal's default width and size (but note that \<point_size\> here is unaffected by the multiplier given by the command**set pointsize**).

    The **pointinterval** controls the spacing between points in a plot drawn with style **linespoints**. The default is 0 (every point is drawn). For example, **set style line N pi 3** defines a linestyle that uses pointtype N, pointsize and linewidth equal to the current defaults for the terminal, and will draw every 3rd point in plots using **with linespoints**. A negative value for the interval is treated the same as a positive value, except that some terminals will try to interrupt the line where it passes through the point symbol.

    The **pointnumber** property is similar to **pointinterval** except that rather than plotting every Nth point it limits the total number of points to N.

    Not all terminals support the **linewidth** and **pointsize** features; if not supported, the option will be ignored.

    Terminal-independent colors may be assigned using either **linecolor \<colorspec\>** or **linetype \<colorspec\>**, abbreviated **lc** or **lt**. This requires giving a RGB color triple, a known palette color name, a fractional index into the current palette, or a constant value from the current mapping of the palette onto cbrange. See **[colors](linetypes_colors_styles#colors)**, **[colorspec](linetypes_colors_styles#colorspec)**, **[set palette](set_show#set_palette)**, **[colornames](set_show#colornames)**, **[cbrange](set_show#cbrange)**.

    **set style line \<n\> linetype \<lt\>** will set both a terminal-dependent dot/dash pattern and color. The commands**set style line \<n\> linecolor \<colorspec\>** or **set style line \<n\> linetype \<colorspec\>** will set a new line color while leaving the existing dot-dash pattern unchanged.

    In 3d mode (**splot** command), the special keyword **palette** is allowed as a shorthand for "linetype palette z". The color value corresponds to the z-value (elevation) of the splot, and varies smoothly along a line or surface.

    Examples: Suppose that the default lines for indices 1, 2, and 3 are red, green, and blue, respectively, and the default point shapes for the same indices are a square, a cross, and a triangle, respectively. Then

        set style line 1 lt 2 lw 2 pt 3 ps 0.5

    defines a new linestyle that is green and twice the default width and a new pointstyle that is a half-sized triangle. The commands

        set style function lines
        plot f(x) lt 3, g(x) ls 1

    will create a plot of f(x) using the default blue line and a plot of g(x) using the user-defined wide green line. Similarly the commands

        set style function linespoints
        plot p(x) lt 1 pt 3, q(x) ls 1

    will create a plot of p(x) using the default triangles connected by a red line and q(x) using small triangles connected by a green line.

        splot sin(sqrt(x*x+y*y))/sqrt(x*x+y*y) w l pal

    creates a surface plot using smooth colors according to **palette**. Note, that this works only on some terminals. See also **[set palette](set_show#set_palette)**, **[set pm3d](set_show#set_pm3d)**.

        set style line 10 linetype 1 linecolor rgb "cyan"

    will assign linestyle 10 to be a solid cyan line on any terminal that supports rgb colors.
- name: Set style parallelaxis
  id: set_show#SECTION04029861100000000000000
  summary: Determines the line type and layer for drawing the vertical axes in plots with parallelaxes
  belongs_to: Set-show
  description: |-
    ### Set style parallelaxis

    Syntax:

        set style parallelaxis {front|back} {line-properties}

    Determines the line type and layer for drawing the vertical axes in plots **with parallelaxes**. See **[with parallelaxes](parallelaxes#with_parallelaxes)**, **[set paxis](set_show#set_paxis)**.
- name: Set style rectangle
  id: set_show#SECTION0402986900000000000000
  summary: Rectangles defined with the set object command can have individual styles
  belongs_to: Set-show
  description: |-
    ### Set style rectangle

    Rectangles defined with the **set object** command can have individual styles. However, if the object is not assigned a private style then it inherits a default that is taken from the **set style rectangle** command.

    Syntax:

        set style rectangle {front|back} {lw|linewidth <lw>}
                            {fillcolor <colorspec>} {fs <fillstyle>}

    See **[colorspec](linetypes_colors_styles#colorspec)** and **[fillstyle](set_show#fillstyle)**. **fillcolor** may be abbreviated as **fc**.

    Examples:

        set style rectangle back fc rgb "white" fs solid 1.0 border lt -1
        set style rectangle fc linsestyle 3 fs pattern 2 noborder

    The default values correspond to solid fill with the background color and a black border.
- name: Set style spiderplot
  id: set_show#SECTION04029861200000000000000
  summary: This commands controls the default appearance of spider plots
  belongs_to: Set-show
  description: |-
    ### Set style spiderplot

    Syntax:

        set style spiderplot
                  {fillstyle <fillstyle-properties>}
                  {<line-properties> | <point-properties>}

    This commands controls the default appearance of spider plots. The fill, line, and point properties can be modified in the first component of the plot command. The overall appearance of the plot is also affected by other settings such as **set grid spiderplot**. See also **[set paxis](set_show#set_paxis)**, **[spiderplot](spiderplot#spiderplot)**. Example:

        # Default spider plot will be a polygon with a thick border but no fill
        set style spiderplot fillstyle empty border lw 3
        # This one will additionally place an open circle (pt 6) at each axis
        plot for [i=1:6] DATA pointtype 6 pointsize 3
- name: Set style textbox
  id: set_show#SECTION04029861300000000000000
  summary: This command controls the appearance of labels with the attribute 'boxed'. Terminal types that do not support boxed text will ignore this style
  belongs_to: Set-show
  description: |-
    ### Set style textbox

    Syntax:

        set style textbox {<boxstyle-index>}
                  {opaque|transparent} {fillcolor <color>}
                  {{no}border {<bordercolor>}}{linewidth <lw>}
                  {margins <xmargin>,<ymargin>}

    This command controls the appearance of labels with the attribute 'boxed'. Terminal types that do not support boxed text will ignore this style. Note: Implementation for some terminals (svg, latex) is incomplete. Most terminals cannot place a box correctly around rotated text.

    Three numbered textbox styles can be defined. If no boxstyle index \<bs\> is given, the default (unnumbered) style is changed. Example:

        # default style has only a black border
        set style textbox transparent border lc "black"
        # style 2 (bs 2) has a light blue background with no border
        set style textbox 2 opaque fc "light-cyan" noborder
        set label 1 "I'm in a box" boxed
        set label 2 "I'm blue" boxed bs 2
- name: Set-show
  id: set_show
  summary: The set command can be used to set lots of options
  description: "# Set-show\n\nThe **set** command can be used to set *lots* of options. No screen is drawn, however, until a **plot**, **splot**, or **replot** command is given.\n\nThe **show** command shows their settings; **show all** shows all the settings.\n\nOptions changed using **set** can be returned to the default state by giving the corresponding **unset** command. See also the **[reset](reset#reset)** command, which returns all settable parameters to default values.\n\nThe **set** and **unset** commands may optionally contain an iteration clause. See **[plot for](plot#plot_for)**.\n\n## Angles\n\nBy default, **gnuplot** assumes the independent variable in polar graphs is in units of radians. If **set angles degrees** is specified before **set polar**, then the default range is \\[0:360\\] and the independent variable has units of degrees. This is particularly useful for plots of data files. The angle setting also applies to 3D mapping as set via the **set mapping** command.\n\nSyntax:\n\n    set angles {degrees | radians}\n    show angles\n\nThe angle specified in **set grid polar** is also read and displayed in the units specified by **set angles**.\n\n**set angles** also affects the arguments of the machine-defined functions sin(x), cos(x) and tan(x), and the outputs of asin(x), acos(x), atan(x), atan2(x), and arg(x). It has no effect on the arguments of hyperbolic functions or Bessel functions. However, the output arguments of inverse hyperbolic functions of complex arguments are affected; if these functions are used, **set angles radians** must be in effect to maintain consistency between input and output arguments.\n\n    x={1.0,0.1}\n    set angles radians\n    y=sinh(x)\n    print y         #prints {1.16933, 0.154051}\n    print asinh(y)  #prints {1.0, 0.1}\n\nbut\n\n    set angles degrees\n    y=sinh(x)\n    print y         #prints {1.16933, 0.154051}\n    print asinh(y)  #prints {57.29578, 5.729578}\n\nSee also [poldat.dem: polar plot using **set angles** demo. ](http://www.gnuplot.info/demo/poldat.html)\n\n## Arrow\n\nArbitrary arrows can be placed on a plot using the **set arrow** command.\n\nSyntax:\n\n    set arrow {<tag>} from <position> to <position>\n    set arrow {<tag>} from <position> rto <position>\n    set arrow {<tag>} from <position> length <coord> angle <ang>\n    set arrow <tag> arrowstyle | as <arrow_style>\n    set arrow <tag> {nohead | head | backhead | heads}\n                    {size <headlength>,<headangle>{,<backangle>}} {fixed}\n                    {filled | empty | nofilled | noborder}\n                    {front | back}\n                    {linestyle | ls <line_style>}\n                    {linetype | lt <line_type>}\n                    {linewidth | lw <line_width>}\n                    {linecolor | lc <colorspec>}\n                    {dashtype | dt <dashtype>}\n\n    unset arrow {<tag>}\n    show arrow {<tag>}\n\n\\<tag\\> is an integer that identifies the arrow. If no tag is given, the lowest unused tag value is assigned automatically. The tag can be used to delete or change a specific arrow. To change any attribute of an existing arrow, use the **set arrow** command with the appropriate tag and specify the parts of the arrow to be changed.\n\nThe position of the first end point of the arrow is always specified by \"from\". The other end point can be specified using any of three different mechanisms. The \\<position\\>s are specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. Unspecified coordinates default to 0. See **[coordinates](coordinates#coordinates)** for details. A coordinate system specifier does not carry over from the first endpoint description the second.\n\n1\\) \"to \\<position\\>\" specifies the absolute coordinates of the other end.\n\n2\\) \"rto \\<position\\>\" specifies an offset to the \"from\" position. For linear axes, **graph** and **screen** coordinates, the distance between the start and the end point corresponds to the given relative coordinate. For logarithmic axes, the relative given coordinate corresponds to the factor of the coordinate between start and end point. Thus, a negative relative value or zero are not allowed for logarithmic axes.\n\n3\\) \"length \\<coordinate\\> angle \\<angle\\>\" specifies the orientation of the arrow in the plane of the graph. Again any of the coordinate systems can be used to specify the length. The angle is always in degrees.\n\nOther characteristics of the arrow can either be specified as a pre-defined arrow style or by providing them in **set arrow** command. For a detailed explanation of arrow characteristics, see **[arrowstyle](set_show#arrowstyle)**.\n\nExamples:\n\nTo set an arrow pointing from the origin to (1,2) with user-defined linestyle 5, use:\n\n    set arrow to 1,2 ls 5\n\nTo set an arrow from bottom left of plotting area to (-5,5,3), and tag the arrow number 3, use:\n\n    set arrow 3 from graph 0,0 to -5,5,3\n\nTo change the preceding arrow to end at 1,1,1, without an arrow head and double its width, use:\n\n    set arrow 3 to 1,1,1 nohead lw 2\n\nTo draw a vertical line from the bottom to the top of the graph at x=3, use:\n\n    set arrow from 3, graph 0 to 3, graph 1 nohead\n\nTo draw a vertical arrow with T-shape ends, use:\n\n    set arrow 3 from 0,-5 to 0,5 heads size screen 0.1,90\n\nTo draw an arrow relatively to the start point, where the relative distances are given in graph coordinates, use:\n\n    set arrow from 0,-5 rto graph 0.1,0.1\n\nTo draw an arrow with relative end point in logarithmic x axis, use:\n\n    set logscale x\n    set arrow from 100,-5 rto 10,10\n\nThis draws an arrow from 100,-5 to 1000,5. For the logarithmic x axis, the relative coordinate 10 means \"factor 10\" while for the linear y axis, the relative coordinate 10 means \"difference 10\".\n\nTo delete arrow number 2, use:\n\n    unset arrow 2\n\nTo delete all arrows, use:\n\n    unset arrow\n\nTo show all arrows (in tag order), use:\n\n    show arrow\n\n[arrows demos. ](http://www.gnuplot.info/demo/arrowstyle.html)\n\n## Autoscale\n\nAutoscaling may be set individually on the x, y or z axis or globally on all axes. The default is to autoscale all axes. If you want to autoscale based on a subset of the plots in the figure, you can mark the other ones with the flag **noautoscale**. See **[datafile](plot#datafile)**.\n\nSyntax:\n\n    set autoscale {<axes>{|min|max|fixmin|fixmax|fix} | fix | keepfix}\n    set autoscale noextend\n    unset autoscale {<axes>}\n    show autoscale\n\nwhere \\<axes\\> is either **x**, **y**, **z**, **cb**, **x2**, **y2**, **xy**, or **paxis {n}**. A keyword with **min** or **max** appended (this cannot be done with **xy**) tells **gnuplot** to autoscale just the minimum or maximum of that axis. If no keyword is given, all axes are autoscaled.\n\nWhen autoscaling, the axis range is automatically computed and the dependent axis (y for a **plot** and z for **splot**) is scaled to include the range of the function or data being plotted.\n\nIf autoscaling of the dependent axis (y or z) is not set, the current y or z range is used.\n\nAutoscaling the independent variables (x for **plot** and x,y for **splot**) is a request to set the domain to match any data file being plotted. If there are no data files, autoscaling an independent variable has no effect. In other words, in the absence of a data file, functions alone do not affect the x range (or the y range if plotting z = f(x,y)).\n\nPlease see **[set xrange](set_show#set_xrange)** for additional information about ranges.\n\nThe behavior of autoscaling remains consistent in parametric mode, (see **[set parametric](set_show#set_parametric)**). However, there are more dependent variables and hence more control over x, y, and z axis scales. In parametric mode, the independent or dummy variable is t for **plot**s and u,v for **splot**s. **autoscale** in parametric mode, then, controls all ranges (t, u, v, x, y, and z) and allows x, y, and z to be fully autoscaled.\n\nWhen tics are displayed on second axes but no plot has been specified for those axes, x2range and y2range are inherited from xrange and yrange. This is done *before* applying offsets or autoextending the ranges to a whole number of tics, which can cause unexpected results. To prevent this you can explicitly link the secondary axis range to the primary axis range. See **[set link](set_show#set_link)**.\n\n### Noextend\n\n    set autoscale noextend\n\nBy default autoscaling sets the axis range limits to the nearest tic label position that includes all the plot data. Keywords **fixmin**, **fixmax**, **fix** or **noextend** tell gnuplot to disable extension of the axis range to the next tic mark position. In this case the axis range limit exactly matches the coordinate of the most extreme data point. **set autoscale noextend** is a synonym for **set autoscale fix**. Range extension for a single axis can be disabled by appending the **noextend** keyword to the corresponding range command, e.g.\n\n    set yrange [0:*] noextend\n\n**set autoscale keepfix** autoscales all axes while leaving the fix settings unchanged.\n\n### Examples\n\nExamples:\n\nThis sets autoscaling of the y axis (other axes are not affected):\n\n    set autoscale y\n\nThis sets autoscaling only for the minimum of the y axis (the maximum of the y axis and the other axes are not affected):\n\n    set autoscale ymin\n\nThis disables extension of the x2 axis tics to the next tic mark, thus keeping the exact range as found in the plotted data and functions:\n\n    set autoscale x2fixmin\n    set autoscale x2fixmax\n\nThis sets autoscaling of the x and y axes:\n\n    set autoscale xy\n\nThis sets autoscaling of the x, y, z, x2 and y2 axes:\n\n    set autoscale\n\nThis disables autoscaling of the x, y, z, x2 and y2 axes:\n\n    unset autoscale\n\nThis disables autoscaling of the z axis only:\n\n    unset autoscale z\n\n### Polar mode\n\nWhen in polar mode (**set polar**), the xrange and the yrange may be left in autoscale mode. If **set rrange** is used to limit the extent of the polar axis, then xrange and yrange will adjust to match this automatically. However, explicit xrange and yrange commands can later be used to make further adjustments. See **[set rrange](set_show#set_rrange)**.\n\nSee also [polar demos. ](http://www.gnuplot.info/demo/poldat.html)\n\n## Bind\n\n**show bind** shows the current state of all hotkey bindings. See **[bind](mouse_input#bind)**.\n\n## Bmargin\n\nThe command **set bmargin** sets the size of the bottom margin. Please see **[set margin](set_show#set_margin)** for details.\n\n## Border\n\nThe **set border** and **unset border** commands control the display of the graph borders for the **plot** and **splot** commands. Note that the borders do not necessarily coincide with the axes; with **plot** they often do, but with **splot** they usually do not.\n\nSyntax:\n\n    set border {<integer>}\n               {front | back | behind}\n               {linestyle | ls <line_style>}\n               {linetype | lt <line_type>} {linewidth | lw <line_width>}\n               {linecolor | lc <colorspec>} {dashtype | dt <dashtype>}\n               {polar}\n    unset border\n    show border\n\nWith a **splot** displayed in an arbitrary orientation, like **set view 56,103**, the four corners of the x-y plane can be referred to as \"front\", \"back\", \"left\" and \"right\". A similar set of four corners exist for the top surface, of course. Thus the border connecting, say, the back and right corners of the x-y plane is the \"bottom right back\" border, and the border connecting the top and bottom front corners is the \"front vertical\". (This nomenclature is defined solely to allow the reader to figure out the table that follows.)\n\nThe borders are encoded in a 12-bit integer: the four low bits control the border for **plot** and the sides of the base for **splot**; the next four bits control the verticals in **splot**; the four high bits control the edges on top of an **splot**. The border settings is thus the sum of the appropriate entries from the following table:\n\n|                       |           |                    |\n|-----------------------|-----------|--------------------|\n| Graph Border Encoding |           |                    |\n| Bit                   | plot      | splot              |\n| 1                     | bottom    | bottom left front  |\n| 2                     | left      | bottom left back   |\n| 4                     | top       | bottom right front |\n| 8                     | right     | bottom right back  |\n| 16                    | no effect | left vertical      |\n| 32                    | no effect | back vertical      |\n| 64                    | no effect | right vertical     |\n| 128                   | no effect | front vertical     |\n| 256                   | no effect | top left back      |\n| 512                   | no effect | top right back     |\n| 1024                  | no effect | top left front     |\n| 2048                  | no effect | top right front    |\n| 4096                  | polar     | no effect          |\n\nThe default setting is 31, which is all four sides for **plot**, and base and z axis for **splot**.\n\nIn 2D plots the border is normally drawn on top of all plots elements (**front**). If you want the border to be drawn behind the plot elements, use **set border back**.\n\nIn hidden3d plots the lines making up the border are normally subject to the same hidden3d processing as the plot elements. **set border behind** will override this default.\n\nUsing the optional \\<linestyle\\>, \\<linetype\\>, \\<linewidth\\>, \\<linecolor\\>, and \\<dashtype\\> specifiers, the way the border lines are drawn can be influenced (limited by what the current terminal driver supports). Besides the border itself, this line style is used for the tics, independent of whether they are plotted on the border or on the axes (see **[set xtics](set_show#set_xtics)**).\n\nFor **plot**, tics may be drawn on edges other than bottom and left by enabling the second axes – see **[set xtics](set_show#set_xtics)** for details.\n\nIf a **splot** draws only on the base, as is the case with \"**unset surface; set contour base**\", then the verticals and the top are not drawn even if they are specified.\n\nThe **set grid** options 'back', 'front' and 'layerdefault' also control the order in which the border lines are drawn with respect to the output of the plotted data.\n\nThe **polar** keyword enables a circular border for polar plots.\n\nExamples:\n\nDraw default borders:\n\n    set border\n\nDraw only the left and bottom (**plot**) or both front and back bottom left (**splot**) borders:\n\n    set border 3\n\nDraw a complete box around a **splot**:\n\n    set border 4095\n\nDraw a topless box around a **splot**, omitting the front vertical:\n\n    set border 127+256+512 # or set border 1023-128\n\nDraw only the top and right borders for a **plot** and label them as axes:\n\n    unset xtics; unset ytics; set x2tics; set y2tics; set border 12\n\n## Boxwidth\n\nThe **set boxwidth** command is used to set the default width of boxes in the **boxes**, **boxerrorbars**, **boxplot**, **candlesticks** and **histograms** styles.\n\nSyntax:\n\n    set boxwidth {<width>} {absolute|relative}\n    show boxwidth\n\nBy default, adjacent boxes are extended in width until they touch each other. A different default width may be specified using the **set boxwidth** command. **Relative** widths are interpreted as being a fraction of this default width.\n\nAn explicit value for the boxwidth is interpreted as being a number of units along the current x axis (**absolute**) unless the modifier **relative** is given. If the x axis is a log-scale (see **[set log](set_show#set_log)**) then the value of boxwidth is truly \"absolute\" only at x=1; this physical width is maintained everywhere along the axis (i.e. the boxes do not become narrower the value of x increases). If the range spanned by a log scale x axis is far from x=1, some experimentation may be required to find a useful value of boxwidth.\n\nThe default is superseded by explicit width information taken from an extra data column in styles **boxes** or **boxerrorbars**. In a four-column data set, the fourth column will be interpreted as the box width unless the width is set to -2.0, in which case the width will be calculated automatically. See **[style boxes](boxes#style_boxes)** and **[style boxerrorbars](boxerrorbars#style_boxerrorbars)** for more details.\n\nTo set the box width to automatic use the command\n\n    set boxwidth\n\nor, for four-column data,\n\n    set boxwidth -2\n\nThe same effect can be achieved with the **using** keyword in **plot**:\n\n    plot 'file' using 1:2:3:4:(-2)\n\nTo set the box width to half of the automatic size use\n\n    set boxwidth 0.5 relative\n\nTo set the box width to an absolute value of 2 use\n\n    set boxwidth 2 absolute\n\n## Boxdepth\n\nThe **set boxdepth** command affects only 3D plots created by **splot with boxes**. It sets the extent of each box along the y axis, i.e. its thickness.\n\n## Color\n\nGnuplot supports two alternative sets of linetypes. The default set uses a different color for each linetype, although it also allows you to draw dotted or dashed lines in that color. The alternative monochrome set uses only dot/dash pattern or linewidth to distinguish linetypes. The **set color** command selects the color linetypes. See **[set monochrome](set_show#set_monochrome)**, **[set linetype](set_show#set_linetype)**, and **[set colorsequence](set_show#set_colorsequence)**.\n\n## Colorsequence\n\nSyntax:\n\n    set colorsequence {default|classic|podo}\n\n**set colorsequence default** selects a terminal-independent repeating sequence of eight colors. See **[set linetype](set_show#set_linetype)**, **[colors](linetypes_colors_styles#colors)**.\n\n**set colorsequence classic** lets each separate terminal type provide its own sequence of line colors. The number provided varies from 4 to more than 100, but most start with red/green/blue/magenta/cyan/yellow. This was the default behaviour prior to version 5.\n\n**set colorsequence podo** selects eight colors drawn from a set recommended by Wong (2011) \\[Nature Methods 8:441\\] as being easily distinguished by color-blind viewers with either protanopia or deuteranopia.\n\nIn each case you can further customize the length of the sequence and the colors used. See **[set linetype](set_show#set_linetype)**, **[colors](linetypes_colors_styles#colors)**.\n\n## Clabel\n\nThis command is deprecated. Use **set cntrlabel** instead. **unset clabel** is replaced by **set cntrlabel onecolor**. **set clabel \"format\"** is replaced by **set cntrlabel format \"format\"**.\n\n## Clip\n\nSyntax:\n\n    set clip {points|one|two|radial}\n    unset clip {points|one|two|radial}\n    show clip\n\nDefault state:\n\n    unset clip points\n    set clip one\n    unset clip two\n    unset clip radial\n\nData points whose center lies inside the plot boundaries are normally drawn even if the finite size of the point symbol causes it to extend past a boundary line. **set clip points** causes such points to be clipped (i.e. not drawn) even though the point center is inside the boundaries of a 2D plot. Data points whose center lies outside the plot boundaries are never drawn.\n\n**unset clip** causes a line segment in a plot not to be drawn if either end of that segment lies outside the plot boundaries (i.e. xrange and yrange).\n\n**set clip one** causes **gnuplot** to draw the in-range portion of line segments with one endpoint in range and one endpoint out of range. **set clip two** causes **gnuplot** to draw the in-range portion of line segments with both endpoints out of range. Line segments that lie entirely outside the plot boundaries are never drawn.\n\n**set clip radial** affects plotting only in polar mode. It clips lines against the radial bound established by **set rrange \\[0:MAX\\]**. This criteria is applied in conjunction with **set clip {one\\|two}**. I.e. the portion of a line between two points with R \\> RMAX that passes through the circle R = RMAX is drawn only if both **clip two** and **clip radial** are set.\n\nNotes:\n\n\\* **set clip** affects only points and lines produced by plot styles **lines**, **linespoints**, **points**, **arrows**, and **vectors**.\n\n\\* Clipping of colored quadrangles drawn for pm3d surfaces and other solid objects is controlled **set pm3d clipping**. The default is smooth clipping against the current zrange.\n\n\\* Object clipping is controlled by the **clip** or **noclip** property of the individual object.\n\n\\* In the current version of gnuplot, \"plot with vectors\" in polar mode does not test or clip against the maximum radius.\n\n## Cntrlabel\n\nSyntax:\n\n    set cntrlabel {format \"format\"} {font \"font\"}\n    set cntrlabel {start <int>} {interval <int>}\n    set contrlabel onecolor\n\n**set cntrlabel** controls the labeling of contours, either in the key (default) or on the plot itself in the case of **splot ... with labels**. In the latter case labels are placed along each contour line according to the **pointinterval** or **pointnumber** property of the label descriptor. By default a label is placed on the 5th line segment making up the contour line and repeated every 20th segment. These defaults are equivalent to\n\n    set cntrlabel start 5 interval 20\n\nThey can be changed either via the **set cntrlabel** command or by specifying the interval in the **splot** command itself\n\n    set contours; splot $FOO with labels point pointinterval -1\n\nSetting the interval to a negative value means that the label appear only once per contour line. However if **set samples** or **set isosamples** is large then many contour lines may be created, each with a single label.\n\nA contour label is placed in the plot key for each linetype used. By default each contour level is given its own linetype, so a separate label appears for each. The command **set cntrlabel onecolor** causes all contours to be drawn using the same linetype, so only one label appears in the plot key. This command replaces an older command **unset clabel**.\n\n## Cntrparam\n\n**set cntrparam** controls the generation of contours and their smoothness for a contour plot. **show contour** displays current settings of **cntrparam** as well as **contour**.\n\nSyntax:\n\n    set cntrparam { { linear\n                    | cubicspline\n                    | bspline\n                    | points <n>\n                    | order <n>\n                    | levels { <n> \n                               | auto {<n>}\n                               | discrete <z1> {,<z2>{,<z3>...}}\n                               | incremental <start>, <incr> {,<end>}\n                             }\n                      {{un}sorted}\n                      {firstlinetype N}\n                    }\n                  }\n    show contour\n\nThis command has two functions. First, it sets the values of z for which contours are to be determined. The number of contour levels \\<n\\> should be an integral constant expression. \\<z1\\>, \\<z2\\> ... are real-valued expressions. Second, it controls the appearance of the individual contour lines.\n\nKeywords controlling the smoothness of contour lines:\n\n**linear**, **cubicspline**, **bspline** — Controls type of approximation or interpolation. If **linear**, then straight line segments connect points of equal z magnitude. If **cubicspline**, then piecewise-linear contours are interpolated between the same equal z points to form somewhat smoother contours, but which may undulate. If **bspline**, a guaranteed-smoother curve is drawn, which only approximates the position of the points of equal-z.\n\n**points** — Eventually all drawings are done with piecewise-linear strokes. This number controls the number of line segments used to approximate the **bspline** or **cubicspline** curve. Number of cubicspline or bspline segments (strokes) = **points** \\* number of linear segments.\n\n**order** — Order of the bspline approximation to be used. The bigger this order is, the smoother the resulting contour. (Of course, higher order bspline curves will move further away from the original piecewise linear data.) This option is relevant for **bspline** mode only. Allowed values are integers in the range from 2 (linear) to 10.\n\nKeywords controlling the selection of contour levels:\n\n**levels auto** — This is the default. \\<n\\> specifies a nominal number of levels; the actual number will be adjusted to give simple labels. If the surface is bounded by zmin and zmax, contours will be generated at integer multiples of dz between zmin and zmax, where dz is 1, 2, or 5 times some power of ten (like the step between two tic marks).\n\n**levels discrete** — Contours will be generated at z = \\<z1\\>, \\<z2\\> ... as specified; the number of discrete levels sets the number of contour levels. In **discrete** mode, any **set cntrparam levels \\<n\\>** are ignored.\n\n**levels incremental** — Contours are generated at values of z beginning at \\<start\\> and increasing by \\<increment\\>, until the number of contours is reached. \\<end\\> is used to determine the number of contour levels, which will be changed by any subsequent **set cntrparam levels \\<n\\>**. If the z axis is logarithmic, \\<increment\\> will be interpreted as a multiplicative factor, as it is for **set ztics**, and \\<end\\> should not be used.\n\nKeywords controlling the assignment of linetype to contours:\n\nBy default the contours are generated in the reverse order specified (**unsorted**). Thus **set cntrparam levels increment 0, 10, 100** will create 11 contours levels starting with 100 and ending with 0. Adding the keyword **sorted** re-orders the contours by increasing numerical value, which in this case would mean the first contour is drawn at 0.\n\nBy default contours are drawn using successive linetypes starting with the next linetype after that used for the corresponding surface. Thus **splot x\\*y lt 5** would use lt 6 for the first contour generated. If **hidden3d** mode is active then each surface uses two linetypes. In this case using default settings would cause the first contour to use the same linetype as the hidden surface, which is undesirable. This can be avoided in either of two ways. (1) Use **set hidden3d offset N** to change the linetype used for the hidden surface. A good choice would be **offset -1** since that will avoid all the contour linetypes. (2) Use the **set cntrparam firstlinetype N** option to specify a block of linetypes used for contour lines independent of whatever was used for the surface. This is particularly useful if you want to customize the set of contour linetypes. N \\<= 0 restores the default.\n\nIf the command **set cntrparam** is given without any arguments specified all options are reset to the default:\n\n    set cntrparam order 4 points 5\n    set cntrparam levels auto 5 unsorted\n    set cntrparam firstlinetype 0\n\n### Examples\n\nExamples:\n\n    set cntrparam bspline\n    set cntrparam points 7\n    set cntrparam order 10\n\nTo select levels automatically, 5 if the level increment criteria are met:\n\n    set cntrparam levels auto 5\n\nTo specify discrete levels at .1, .37, and .9:\n\n    set cntrparam levels discrete .1,1/exp(1),.9\n\nTo specify levels from 0 to 4 with increment 1:\n\n    set cntrparam levels incremental  0,1,4\n\nTo set the number of levels to 10 (changing an incremental end or possibly the number of auto levels):\n\n    set cntrparam levels 10\n\nTo set the start and increment while retaining the number of levels:\n\n    set cntrparam levels incremental 100,50\n\nTo define and use a customized block of contour linetypes\n\n    set linetype 100 lc \"red\" dt '....'\n    do for [L=101:199] {\n        if (L%10 == 0) {\n            set linetype L lc \"black\" dt solid lw 2\n        } else {\n            set linetype L lc \"gray\" dt solid lw 1\n        }\n    }\n    set cntrparam firstlinetype 100\n    set cntrparam sorted levels incremental 0, 1, 100\n\nSee also **[set contour](set_show#set_contour)** for control of where the contours are drawn, and **[set cntrlabel](set_show#set_cntrlabel)** for control of the format of the contour labels and linetypes.\n\nSee also [contours demo (contours.dem) ](http://www.gnuplot.info/demo/contours.html)\n\nand [contours with user defined levels demo (discrete.dem). ](http://www.gnuplot.info/demo/discrete.html)\n\n## Color box\n\nThe color scheme, i.e. the gradient of the smooth color with min_z and max_z values of **pm3d**'s **palette**, is drawn in a color box unless **unset colorbox**.\n\n    set colorbox\n    set colorbox {\n               { vertical | horizontal } {{no}invert}\n               { default | user }\n               { origin x, y }\n               { size x, y }\n               { front | back }\n               { noborder | bdefault | border [line style] }\n             }\n    show colorbox\n    unset colorbox\n\nColor box position can be **default** or **user**. If the latter is specified the values as given with the **origin** and **size** subcommands are used. The box can be drawn after (**front**) or before (**back**) the graph or the surface.\n\nThe orientation of the color gradient can be switched by options **vertical** and **horizontal**.\n\n**origin x, y** and **size x, y** are used only in combination with the **user** option. The x and y values are interpreted as screen coordinates by default, and this is the only legal option for 3D plots. 2D plots, including splot with **set view map**, allow any coordinate system to be specified. Try for example:\n\n    set colorbox horiz user origin .1,.02 size .8,.04\n\nwhich will draw a horizontal gradient somewhere at the bottom of the graph.\n\n**border** turns the border on (this is the default). **noborder** turns the border off. If an positive integer argument is given after **border**, it is used as a line style tag which is used for drawing the border, e.g.:\n\n    set style line 2604 linetype -1 linewidth .4\n    set colorbox border 2604\n\nwill use line style **2604**, a thin line with the default border color (-1) for drawing the border. **bdefault** (which is the default) will use the default border line style for drawing the border of the color box.\n\nThe axis of the color box is called **cb** and it is controlled by means of the usual axes commands, i.e. **set/unset/show** with **cbrange**, **\\[m\\]cbtics**, **format cb**, **grid \\[m\\]cb**, **cblabel**, and perhaps even **cbdata**, **\\[no\\]cbdtics**, **\\[no\\]cbmtics**.\n\n**set colorbox** without any parameter switches the position to default. **unset colorbox** resets the default parameters for the colorbox and switches the colorbox off.\n\nSee also help for **[set pm3d](set_show#set_pm3d)**, **[set palette](set_show#set_palette)**, **[x11 pm3d](complete_list_terminals#x11_pm3d)**, and **[set style line](set_show#set_style_line)**.\n\n## Colornames\n\nGnuplot knows a limited number of color names. You can use these to define the color range spanned by a pm3d palette, or to assign a terminal-independent color to a particular linetype or linestyle. To see the list of known color names, use the command **[show colornames](set_show#show_colornames)**. Example:\n\n    set style line 1 linecolor \"sea-green\"\n\n## Contour\n\n**set contour** enables contour drawing for surfaces. This option is available for **splot** only. It requires grid data, see **[grid_data](splot#grid_data)** for more details. If contours are desired from non-grid data, **set dgrid3d** can be used to create an appropriate grid.\n\nSyntax:\n\n    set contour {base | surface | both}\n    unset contour\n    show contour\n\nThe three options specify where to draw the contours: **base** draws the contours on the grid base where the x/ytics are placed, **surface** draws the contours on the surfaces themselves, and **both** draws the contours on both the base and the surface. If no option is provided, the default is **base**.\n\nSee also **[set cntrparam](set_show#set_cntrparam)** for the parameters that affect the drawing of contours, and **[set cntrlabel](set_show#set_cntrlabel)** for control of labeling of the contours.\n\nThe surface can be switched off (see **[unset surface](set_show#unset_surface)**), giving a contour-only graph. Though it is possible to use **set size** to enlarge the plot to fill the screen, more control over the output format can be obtained by writing the contour information to a datablock, and rereading it as a 2D datafile plot:\n\n    unset surface\n    set contour\n    set cntrparam ...\n    set table $datablock\n    splot ...\n    unset table\n    # contour info now in $datablock\n    set term <whatever>\n    plot $datablock\n\nIn order to draw contours, the data should be organized as \"grid data\". In such a file all the points for a single y-isoline are listed, then all the points for the next y-isoline, and so on. A single blank line (a line containing no characters other than blank spaces and a carriage return and/or a line feed) separates one y-isoline from the next.\n\nWhile **set contour** is in effect, **splot with \\<style\\>** will place the style elements (points, lines, impulses, labels, etc) along the contour lines. **with pm3d** will produce a pm3d surface and also contour lines. If you want to mix other plot elements, say labels read from a file, with the contours generated while **set contour** is active you must append the keyword **nocontours** after that clause in the splot command.\n\nSee also **[splot datafile](splot#splot_datafile)**.\n\nSee also [contours demo (contours.dem) ](http://www.gnuplot.info/demo/contours.html)\n\nand [contours with user defined levels demo (discrete.dem). ](http://www.gnuplot.info/demo/discrete.html)\n\n## Dashtype\n\nThe **set dashtype** command allows you to define a dash pattern that can then be referred to by its index. This is purely a convenience, as anywhere that would accept the dashtype by its numerical index would also accept an explicit dash pattern. Example:\n\n    set dashtype 5 (2,4,2,6)   # define or redefine dashtype number 5\n    plot f1(x) dt 5            # plot using the new dashtype\n    plot f1(x) dt (2,4,2,6)    # exactly the same plot as above\n    set linetype 5 dt 5        # always use this dash pattern with linetype 5\n    set dashtype 66 \"..-\"      # define a new dashtype using a string\n\nSee also **[dashtype](linetypes_colors_styles#dashtype)**.\n\n## Data style\n\nThis form of the command is deprecated. Please see **[set style data](set_show#set_style_data)**.\n\n## Datafile\n\nThe **set datafile** command options control interpretation of fields read from input data files by the **plot**, **splot**, and **fit** commands. Several options are currently implemented.\n\n### Set datafile columnheaders\n\nThe **set datafile columnheaders** command guarantees that the first row of input will be interpreted as column headers rather than as data values. It affects all input data sources to plot, splot, fit, and stats commands. If this setting is disabled by **unset datafile columnheaders**, the same effect is triggered on a per-file basis if there is an explicit columnheader() function in a using specifier or plot title associated with that file. See also **[set key autotitle](set_show#set_key_autotitle)** and **[columnheader](plot#columnheader)**.\n\n### Set datafile fortran\n\nThe **set datafile fortran** command enables a special check for values in the input file expressed as Fortran D or Q constants. This extra check slows down the input process, and should only be selected if you do in fact have datafiles containing Fortran D or Q constants. The option can be disabled again using **unset datafile fortran**.\n\n### Set datafile nofpe_trap\n\nThe **set datafile nofpe_trap** command tells gnuplot not to re-initialize a floating point exception handler before every expression evaluation used while reading data from an input file. This can significantly speed data input from very large files at the risk of program termination if a floating-point exception is generated.\n\n### Set datafile missing\n\nSyntax:\n\n    set datafile missing \"<string>\"\n    set datafile missing NaN\n    show datafile missing\n    unset datafile\n\nThe **set datafile missing** command tells **gnuplot** there is a special string used in input data files to denote a missing data entry. There is no default character for **missing**. Gnuplot makes a distinction between missing data and invalid data (e.g. \"NaN\", 1/0.). For example invalid data causes a gap in a line drawn through sequential data points; missing data does not.\n\nNon-numeric characters found in a numeric field will usually be interpreted as invalid rather than as a missing data point unless they happen to match the **missing** string.\n\nConversely **set datafile missing NaN** causes all data or expressions evaluating to not-a-number (NaN) to be treated as missing data.\n\nThe example below shows differences between gnuplot version 4 and version 5. Example:\n\n    set style data linespoints\n    plot '-' title \"(a)\"\n       1 10\n       2 20\n       3 ?\n       4 40\n       5 50\n       e\n    set datafile missing \"?\"\n    plot '-' title \"(b)\"\n       1 10\n       2 20\n       3 ?\n       4 40\n       5 50\n       e\n    plot '-' using 1:2 title \"(c)\"\n       1 10\n       2 20\n       3 NaN\n       4 40\n       5 50\n       e\n    plot '-' using 1:($2) title \"(d)\"\n       1 10\n       2 20\n       3 NaN\n       4 40\n       5 50\n       e\n\nPlot (a) differs in gnuplot 4 and gnuplot 5 because the third line contains only one valid number. Version 4 switched to a single-datum-on-a-line convention that the line number is \"x\" and the datum is \"y\", erroneously placing the point at(2,3).\n\nBoth the old and new gnuplot versions handle the same data correctly if the '?' character is designated as a marker for missing data (b).\n\nOld gnuplot versions handled NaN differently depending of the form of the **using** clause, as shown in plots (c) and (d). Gnuplot now handles NaN the same whether the input column was specified as N or ($N). See also the [imageNaN demo. ](http://www.gnuplot.info/demo/mgr.html)\n\nSimilarly gnuplot 5.4 will notice the missing value flag in column N whether the plot command specifies **using N** or **using ($N)** or **using (func($N))**. However if the \"missing\" value is encountered during evaluation of some more complicated expression, e.g. **using (column(strcol(1))**, it may evaluate to NaN and be treated as invalid data rather than as a missing data point. If you nevertheless want to treat this as missing data, use the command **set datafile missing NaN**.\n\n### Set datafile separator\n\nThe command **set datafile separator** tells **gnuplot** that data fields in subsequent input files are separated by a specific character rather than by whitespace. The most common use is to read in csv (comma-separated value) files written by spreadsheet or database programs. By default data fields are separated by whitespace.\n\nSyntax:\n\n    set datafile separator {whitespace | tab | comma | \"<chars>\"}\n\nExamples:\n\n    # Input file contains tab-separated fields\n    set datafile separator \"\\t\"\n\n    # Input file contains comma-separated values fields\n    set datafile separator comma\n\n    # Input file contains fields separated by either * or |\n    set datafile separator \"*|\"\n\n### Set datafile commentschars\n\nThe command **set datafile commentschars** specifies what characters can be used in a data file to begin comment lines. If the first non-blank character on a line is one of these characters then the rest of the data line is ignored. Default value of the string is \"\\#\\!\" on VMS and \"\\#\" otherwise.\n\nSyntax:\n\n    set datafile commentschars {\"<string>\"}\n    show datafile commentschars\n    unset commentschars\n\nThen, the following line in a data file is completely ignored\n\n    # 1 2 3 4\n\nbut the following\n\n    1 # 3 4\n\nwill be interpreted as garbage in the 2nd column followed by valid data in the 3rd and 4th columns.\n\nExample:\n\n    set datafile commentschars \"#!%\"\n\n### Set datafile binary\n\nThe **set datafile binary** command is used to set the defaults when reading binary data files. The syntax matches precisely that used for commands **plot** and **splot**. See **[binary matrix](splot#binary_matrix)** and **[binary general](plot#binary_general)** for details about the keywords that can be present in \\<binary list\\>.\n\nSyntax:\n\n    set datafile binary <binary list>\n    show datafile binary\n    show datafile\n    unset datafile\n\nExamples:\n\n    set datafile binary filetype=auto\n    set datafile binary array=(512,512) format=\"%uchar\"\n\n    show datafile binary   # list current settings\n\n## Decimalsign\n\nThe **set decimalsign** command selects a decimal sign for numbers printed into tic labels or **set label** strings.\n\nSyntax:\n\n    set decimalsign {<value> | locale {\"<locale>\"}}\n    unset decimalsign\n    show decimalsign\n\nThe argument \\<value\\> is a string to be used in place of the usual decimal point. Typical choices include the period, '.', and the comma, ',', but others may be useful, too. If you omit the \\<value\\> argument, the decimal separator is not modified from the usual default, which is a period. Unsetting decimalsign has the same effect as omitting \\<value\\>.\n\nExample:\n\nCorrect typesetting in most European countries requires:\n\n    set decimalsign ','\n\nPlease note: If you set an explicit string, this affects only numbers that are printed using gnuplot's gprintf() formatting routine, including axis tics. It does not affect the format expected for input data, and it does not affect numbers printed with the sprintf() formatting routine. To change the behavior of both input and output formatting, instead use the form\n\n    set decimalsign locale\n\nThis instructs the program to use both input and output formats in accordance with the current setting of the LC_ALL, LC_NUMERIC, or LANG environmental variables.\n\n    set decimalsign locale \"foo\"\n\nThis instructs the program to format all input and output in accordance with locale \"foo\", which must be installed. If locale \"foo\" is not found then an error message is printed and the decimal sign setting is unchanged. On linux systems you can get a list of the locales installed on your machine by typing \"locale -a\". A typical linux locale string is of the form \"sl_SI.UTF-8\". A typical Windows locale string is of the form \"Slovenian_Slovenia.1250\" or \"slovenian\". Please note that interpretation of the locale settings is done by the C library at runtime. Older C libraries may offer only partial support for locale settings such as the thousands grouping separator character.\n\n    set decimalsign locale; set decimalsign \".\"\n\nThis sets all input and output to use whatever decimal sign is correct for the current locale, but over-rides this with an explicit '.' in numbers formatted using gnuplot's internal gprintf() function.\n\n## Dgrid3d\n\nThe **set dgrid3d** command enables, and can set parameters for, non-grid to grid data mapping. See **[splot grid_data](splot#splot_grid_data)** for more details about the grid data structure.\n\nSyntax:\n\n    set dgrid3d {<rows>} {,{<cols>}}\n                { splines |\n                  qnorm {<norm>} |\n                  (gauss | cauchy | exp | box | hann)\n                    {kdensity} {<dx>} {,<dy>} }\n    unset dgrid3d\n    show dgrid3d\n\nBy default **dgrid3d** is disabled. When enabled, 3D data read from a file are always treated as a scattered data set. A grid with dimensions derived from a bounding box of the scattered data and size as specified by the row/col_size parameters is created for plotting and contouring. The grid is equally spaced in x (rows) and in y (columns); the z values are computed as weighted averages or spline interpolations of the scattered points' z values. In other words, a regularly spaced grid is created and the a smooth approximation to the raw data is evaluated for all grid points. This approximation is plotted in place of the raw data.\n\nThe number of columns defaults to the number of rows, which defaults to 10.\n\nSeveral algorithms are available to calculate the approximation from the raw data. Some of these algorithms can take additional parameters. These interpolations are such the closer the data point is to a grid point, the more effect it has on that grid point.\n\nThe **splines** algorithm calculates an interpolation based on \"thin plate splines\". It does not take additional parameters.\n\nThe **qnorm** algorithm calculates a weighted average of the input data at each grid point. Each data point is weighted by the inverse of its distance from the grid point raised to some power. The power is specified as an optional integer parameter that defaults to 1. This algorithm is the default.\n\nFinally, several smoothing kernels are available to calculate weighted averages: z = Sum_i w(d_i) \\* z_i / Sum_i w(d_i), where z_i is the value of the i-th data point and d_i is the distance between the current grid point and the location of the i-th data point. All kernels assign higher weights to data points that are close to the current grid point and lower weights to data points further away.\n\nThe following kernels are available:\n\n    gauss :     w(d) = exp(-d*d)\n    cauchy :    w(d) = 1/(1 + d*d)\n    exp :       w(d) = exp(-d)\n    box :       w(d) = 1                     if d<1\n                     = 0                     otherwise\n    hann :      w(d) = 0.5*(1+cos(pi*d))     if d<1\n                w(d) = 0                     otherwise\n\nWhen using one of these five smoothing kernels, up to two additional numerical parameters can be specified: dx and dy. These are used to rescale the coordinate differences when calculating the distance: d_i = sqrt( ((x-x_i)/dx)\\*\\*2 + ((y-y_i)/dy)\\*\\*2 ), where x,y are the coordinates of the current grid point and x_i,y_i are the coordinates of the i-th data point. The value of dy defaults to the value of dx, which defaults to 1. The parameters dx and dy make it possible to control the radius over which data points contribute to a grid point IN THE UNITS OF THE DATA ITSELF.\n\nThe optional keyword **kdensity**, which must come after the name of the kernel, but before the (optional) scale parameters, modifies the algorithm so that the values calculated for the grid points are not divided by the sum of the weights ( z = Sum_i w(d_i) \\* z_i ). If all z_i are constant, this effectively plots a bivariate kernel density estimate: a kernel function (one of the five defined above) is placed at each data point, the sum of these kernels is evaluated at every grid point, and this smooth surface is plotted instead of the original data. This is similar in principle to + what the **smooth kdensity** option does to 1D datasets. (See kdensity2d.dem for usage demo)\n\nA slightly different syntax is also supported for reasons of backwards compatibility. If no interpolation algorithm has been explicitly selected, the **qnorm** algorithm is assumed. Up to three comma-separated, optional parameters can be specified, which are interpreted as the the number of rows, the number of columns, and the norm value, respectively.\n\nThe **dgrid3d** option is a simple scheme which replaces scattered data with weighted averages on a regular grid. More sophisticated approaches to this problem exist and should be used to preprocess the data outside **gnuplot** if this simple solution is found inadequate.\n\nSee also [dgrid3d.dem: dgrid3d demo. ](http://www.gnuplot.info/demo/dgrid3d.html)\n\nand [scatter.dem: dgrid3d demo. ](http://www.gnuplot.info/demo/scatter.html)\n\n## Dummy\n\nThe **set dummy** command changes the default dummy variable names.\n\nSyntax:\n\n    set dummy {<dummy-var>} {,<dummy-var>}\n    show dummy\n\nBy default, **gnuplot** assumes that the independent, or \"dummy\", variable for the **plot** command is \"t\" if in parametric or polar mode, or \"x\" otherwise. Similarly the independent variables for the **splot** command are \"u\" and \"v\" in parametric mode (**splot** cannot be used in polar mode), or \"x\" and \"y\" otherwise.\n\nIt may be more convenient to call a dummy variable by a more physically meaningful or conventional name. For example, when plotting time functions:\n\n    set dummy t\n    plot sin(t), cos(t)\n\nExamples:\n\n    set dummy u,v\n    set dummy ,s\n\nThe second example sets the second variable to s. To reset the dummy variable names to their default values, use\n\n    unset dummy\n\n## Encoding\n\nThe **set encoding** command selects a character encoding.\n\nSyntax:\n\n    set encoding {<value>}\n    set encoding locale\n    show encoding\n\nValid values are\n\n    default     - tells a terminal to use its default encoding\n    iso_8859_1  - the most common Western European encoding prior to UTF-8.\n                  Known in the PostScript world as 'ISO-Latin1'.\n    iso_8859_15 - a variant of iso_8859_1 that includes the Euro symbol\n    iso_8859_2  - used in Central and Eastern Europe\n    iso_8859_9  - used in Turkey (also known as Latin5)\n    koi8r       - popular Unix cyrillic encoding\n    koi8u       - Ukrainian Unix cyrillic encoding\n    cp437       - codepage for MS-DOS\n    cp850       - codepage for OS/2, Western Europe\n    cp852       - codepage for OS/2, Central and Eastern Europe\n    cp950       - MS version of Big5 (emf terminal only)\n    cp1250      - codepage for MS Windows, Central and Eastern Europe\n    cp1251      - codepage for 8-bit Russian, Serbian, Bulgarian, Macedonian\n    cp1252      - codepage for MS Windows, Western Europe\n    cp1254      - codepage for MS Windows, Turkish (superset of Latin5)\n    sjis        - shift-JIS Japanese encoding\n    utf8        - variable-length (multibyte) representation of Unicode\n                  entry point for each character\n\nThe command **set encoding locale** is different from the other options. It attempts to determine the current locale from the runtime environment. On most systems this is controlled by the environmental variables LC_ALL, LC_CTYPE, or LANG. This mechanism is necessary, for example, to pass multibyte character encodings such as UTF-8 or EUC_JP to the wxt and pdf terminals. This command does not affect the locale-specific representation of dates or numbers. See also **[set locale](set_show#set_locale)** and **[set decimalsign](set_show#set_decimalsign)**.\n\nGenerally you must set the encoding before setting the terminal type, as it may affect the choice of appropriate fonts.\n\n## Errorbars\n\nThe **set errorbars** command controls the tics at the ends of error bars, and also at the end of the whiskers belonging to a boxplot.\n\nSyntax:\n\n    set errorbars {small | large | fullwidth | <size>} {front | back}\n                  {line-properties}\n    unset errorbars\n    show errorbars\n\n**small** is a synonym for 0.0 (no crossbar), and **large** for 1.0. The default is 1.0 if no size is given.\n\nThe keyword **fullwidth** is relevant only to boxplots and to histograms with errorbars. It sets the width of the errorbar ends to be the same as the width of the associated box. It does not change the width of the box itself.\n\nThe **front** and **back** keywords are relevant only to errorbars attached to filled rectangles (boxes, candlesticks, histograms).\n\nError bars are by default drawn using the same line properties as the border of the associated box. You can change this by providing a separate set of line properties for the error bars.\n\n    set errorbars linecolor black linewidth 0.5 dashtype '.'\n\n## Fit\n\nThe **set fit** command controls the options for the **fit** command.\n\nSyntax:\n\n    set fit {nolog | logfile {\"<filename>\"|default}}\n            {{no}quiet|results|brief|verbose}\n            {{no}errorvariables}\n            {{no}covariancevariables}\n            {{no}errorscaling}\n            {{no}prescale}\n            {maxiter <value>|default}\n            {limit <epsilon>|default}\n            {limit_abs <epsilon_abs>}\n            {start-lambda <value>|default}\n            {lambda-factor <value>|default}\n            {script {\"<command>\"|default}}\n            {v4 | v5}\n    unset fit\n    show fit\n\nThe **logfile** option defines where the **fit** command writes its output. The \\<filename\\> argument must be enclosed in single or double quotes. If no filename is given or **unset fit** is used the log file is reset to its default value \"fit.log\" or the value of the environmental variable **FIT_LOG**. If the given logfile name ends with a / or \\\\, it is interpreted to be a directory name, and the actual filename will be \"fit.log\" in that directory.\n\nBy default the information written to the log file is also echoed to the terminal session. **set fit quiet** turns off the echo, whereas **results** prints only final results. **brief** gives one line summaries for every iteration of the fit in addition. **verbose** yields detailed iteration reports as in version 4.\n\nIf the **errorvariables** option is turned on, the error of each fitted parameter computed by **fit** will be copied to a user-defined variable whose name is formed by appending \"\\_err\" to the name of the parameter itself. This is useful mainly to put the parameter and its error onto a plot of the data and the fitted function, for reference, as in:\n\n    set fit errorvariables\n    fit f(x) 'datafile' using 1:2 via a, b\n    print \"error of a is:\", a_err\n    set label 1 sprintf(\"a=%6.2f +/- %6.2f\", a, a_err)\n    plot 'datafile' using 1:2, f(x)\n\nIf the **errorscaling** option is specified, which is the default, the calculated parameter errors are scaled with the reduced chi square. This is equivalent to providing data errors equal to the calculated standard deviation of the fit (FIT_STDFIT) resulting in a reduced chi square of one. With the **noerrorscaling** option the estimated errors are the unscaled standard deviations of the fit parameters. If no weights are specified for the data, parameter errors are always scaled.\n\nIf the **prescale** option is turned on, parameters are prescaled by their initial values before being passed to the Marquardt-Levenberg routine. This helps tremendously if there are parameters that differ in size by many orders of magnitude. Fit parameters with an initial value of exactly zero are never prescaled.\n\nThe maximum number of iterations may be limited with the **maxiter** option. A value of 0 or **default** means that there is no limit.\n\nThe **limit** option can be used to change the default epsilon limit (1e-5) to detect convergence. When the sum of squared residuals changes by a factor less than this number (epsilon), the fit is considered to have 'converged'. The **limit_abs** option imposes an additional absolute limit in the change of the sum of squared residuals and defaults to zero.\n\nIf you need even more control about the algorithm, and know the Marquardt-Levenberg algorithm well, the following options can be used to influence it. The startup value of **lambda** is normally calculated automatically from the ML-matrix, but if you want to, you may provide your own using the **start_lambda** option. Setting it to **default** will re-enable the automatic selection. The option **lambda_factor** sets the factor by which **lambda** is increased or decreased whenever the chi-squared target function increased or decreased significantly. Setting it to **default** re-enables the default factor of 10.0.\n\nThe **script** option may be used to specify a **gnuplot** command to be executed when a fit is interrupted — see **[fit](fit#fit)**. This setting takes precedence over the default of **replot** and the environment variable **FIT_SCRIPT**.\n\nIf the **covariancevariables** option is turned on, the covariances between final parameters will be saved to user-defined variables. The variable name for a certain parameter combination is formed by prepending \"FIT_COV\\_\" to the name of the first parameter and combining the two parameter names by \"\\_\". For example given the parameters \"a\" and \"b\" the covariance variable is named \"FIT_COV_a_b\".\n\nIn version 5 the syntax of the fit command changed and it now defaults to unitweights if no 'error' keyword is given. The **v4** option restores the default behavior of gnuplot version 4, see also **[fit](fit#fit)**.\n\n## Fontpath\n\nSyntax:\n\n    set fontpath \"/directory/where/my/fonts/live\"\n    set term postscript fontfile <filename>\n\n\\[DEPRECATED in version 5.4\\]\n\nThe **fontpath** directory is relevant only for embedding fonts in postscript output produced by the postscript terminal. It has no effect on other gnuplot terminals. If you are not embedding fonts you do not need this command, and even if you are embedding fonts you only need it for fonts that cannot be found via the other paths below.\n\nEarlier versions of gnuplot tried to emulate a font manager by tracking multiple directory trees containing fonts. This is now replaced by a search in the following places: (1) an absolute path given in the **set term postscript fontfile** command (2) the current directory (3) any of the directories specified by **set loadpath** (4) the directory specified by **set fontpath** (5) the directory provided in environmental variable GNUPLOT_FONTPATH\n\nNote: The search path for fonts specified by filename for the libgd terminals (png gif jpeg sixel) is controlled by environmental variable GDFONTPATH.\n\n## Format\n\nThe format of the tic-mark labels can be set with the **set format** command or with the **set tics format** or individual **set {axis}tics format** commands.\n\nSyntax:\n\n    set format {<axes>} {\"<format-string>\"} {numeric|timedate|geographic}\n    show format\n\nwhere \\<axes\\> is either **x**, **y**, **xy**, **x2**, **y2**, **z**, **cb** or nothing (which applies the format to all axes). The following two commands are equivalent:\n\n    set format y \"%.2f\"\n    set ytics format \"%.2f\"\n\nThe length of the string is restricted to 100 characters. The default format is \"% h\", \"$%h$\" for LaTeX terminals. Other formats such as \"%.2f\" or \"%3.0em\" are often desirable. \"set format\" with no following string will restore the default.\n\nIf the empty string \"\" is given, tics will have no labels, although the tic mark will still be plotted. To eliminate the tic marks, use **unset xtics** or **set tics scale 0**.\n\nNewline ( \\\\n) and enhanced text markup is accepted in the format string. Use double-quotes rather than single-quotes in this case. See also **[syntax](syntax#syntax)**. Characters not preceded by \"%\" are printed verbatim. Thus you can include spaces and labels in your format string, such as \"%g m\", which will put \" m\" after each number. If you want \"%\" itself, double it: \"%g %%\".\n\nSee also **[set xtics](set_show#set_xtics)** for more information about tic labels, and **[set decimalsign](set_show#set_decimalsign)** for how to use non-default decimal separators in numbers printed this way. See also [electron demo (electron.dem). ](http://www.gnuplot.info/demo/electron.html)\n\n### Gprintf\n\nThe string function gprintf(\"format\",x) uses gnuplot's own format specifiers, as do the gnuplot commands **set format**, **set timestamp**, and others. These format specifiers are not the same as those used by the standard C-language routine sprintf(). gprintf() accepts only a single variable to be formatted. Gnuplot also provides an sprintf(\"format\",x1,x2,...) routine if you prefer. For a list of gnuplot's format options, see **[format specifiers](set_show#format_specifiers)**.\n\n### Format specifiers\n\nThe acceptable formats (if not in time/date mode) are:\n\n|                                            |                                                                     |\n|--------------------------------------------|---------------------------------------------------------------------|\n| Tic-mark label numerical format specifiers |                                                                     |\n| Format                                     | Explanation                                                         |\n| `%f`                                       | floating point notation                                             |\n| `%e` or `%E`                               | exponential notation; an \"e\" or \"E\" before the power                |\n| `%g` or `%G`                               | the shorter of `%e` (or `%E`) and `%f`                              |\n| `%h` or `%H`                               | like `%g with \"x10^{%S}\" or \"*10^{%S}\" instead of \"e%S\"`            |\n| `%x` or `%X`                               | hex                                                                 |\n| `%o` or `%O`                               | octal                                                               |\n| `%t`                                       | mantissa to base 10                                                 |\n| `%l`                                       | mantissa to base of current logscale                                |\n| `%s`                                       | mantissa to base of current logscale; scientific power              |\n| `%T`                                       | power to base 10                                                    |\n| `%L`                                       | power to base of current logscale                                   |\n| `%S`                                       | scientific power                                                    |\n| `%c`                                       | character replacement for scientific power                          |\n| `%b`                                       | mantissa of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi) |\n| `%B`                                       | prefix of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi)   |\n| `%P`                                       | multiple of pi                                                      |\n\nA 'scientific' power is one such that the exponent is a multiple of three. Character replacement of scientific powers (**\"%c\"**) has been implemented for powers in the range -18 to +18. For numbers outside of this range the format reverts to exponential.\n\nOther acceptable modifiers (which come after the \"%\" but before the format specifier) are \"-\", which left-justifies the number; \"+\", which forces all numbers to be explicitly signed; \" \" (a space), which makes positive numbers have a space in front of them where negative numbers have \"-\"; \"\\#\", which places a decimal point after floats that have only zeroes following the decimal point; a positive integer, which defines the field width; \"0\" (the digit, not the letter) immediately preceding the field width, which indicates that leading zeroes are to be used instead of leading blanks; and a decimal point followed by a non-negative integer, which defines the precision (the minimum number of digits of an integer, or the number of digits following the decimal point of a float).\n\nSome systems may not support all of these modifiers but may also support others; in case of doubt, check the appropriate documentation and then experiment.\n\nExamples:\n\n    set format y \"%t\"; set ytics (5,10)          # \"5.0\" and \"1.0\"\n    set format y \"%s\"; set ytics (500,1000)      # \"500\" and \"1.0\"\n    set format y \"%+-12.3f\"; set ytics(12345)    # \"+12345.000  \"\n    set format y \"%.2t*10^%+03T\"; set ytic(12345)# \"1.23*10^+04\"\n    set format y \"%s*10^{%S}\"; set ytic(12345)   # \"12.345*10^{3}\"\n    set format y \"%s %cg\"; set ytic(12345)       # \"12.345 kg\"\n    set format y \"%.0P pi\"; set ytic(6.283185)   # \"2 pi\"\n    set format y \"%.0f%%\"; set ytic(50)          # \"50%\"\n\n    set log y 2; set format y '%l'; set ytics (1,2,3)\n    #displays \"1.0\", \"1.0\" and \"1.5\" (since 3 is 1.5 * 2^1)\n\nThere are some problem cases that arise when numbers like 9.999 are printed with a format that requires both rounding and a power.\n\nIf the data type for the axis is time/date, the format string must contain valid codes for the 'strftime' function (outside of **gnuplot**, type \"man strftime\"). See **[set timefmt](set_show#set_timefmt)** for a list of the allowed input format codes.\n\n### Time/date specifiers\n\nThere are two groups of time format specifiers: time/date and relative time. These may be used to generate axis tic labels or to encode time in a string. See **[set xtics time](set_show#set_xtics_time)**, **[strftime](expressions#strftime)**, **[strptime](expressions#strptime)**.\n\nThe time/date formats are\n\n|                 |                                                           |\n|-----------------|-----------------------------------------------------------|\n| Date Specifiers |                                                           |\n| Format          | Explanation                                               |\n| `%a`            | abbreviated name of day of the week                       |\n| `%A`            | full name of day of the week                              |\n| `%b` or `%h`    | abbreviated name of the month                             |\n| `%B`            | full name of the month                                    |\n| `%d`            | day of the month, 01–31                                   |\n| `%D`            | shorthand for `\"%m/%d/%y\"` (only output)                  |\n| `%F`            | shorthand for `\"%Y-%m-%d\"` (only output)                  |\n| `%k`            | hour, 0–23 (one or two digits)                            |\n| `%H`            | hour, 00–23 (always two digits)                           |\n| `%l`            | hour, 1–12 (one or two digits)                            |\n| `%I`            | hour, 01–12 (always two digits)                           |\n| `%j`            | day of the year, 001–366                                  |\n| `%m`            | month, 01–12                                              |\n| `%M`            | minute, 00–60                                             |\n| `%p`            | \"am\" or \"pm\"                                              |\n| `%r`            | shorthand for `\"%I:%M:%S %p\"` (only output)               |\n| `%R`            | shorthand for `%H:%M\"` (only output)                      |\n| `%S`            | second, integer 00–60 on output, (double) on input        |\n| `%s`            | number of seconds since start of year 1970                |\n| `%T`            | shorthand for `\"%H:%M:%S\"` (only output)                  |\n| `%U`            | week of the year (CDC/MMWR \"epi week\") (ignored on input) |\n| `%w`            | day of the week, 0–6 (Sunday = 0)                         |\n| `%W`            | week of the year (ISO 8601 week date) (ignored on input)  |\n| `%y`            | year, 0-99 in range 1969-2068                             |\n| `%Y`            | year, 4-digit                                             |\n| `%z`            | timezone, \\[+-\\]hh:mm                                     |\n| `%Z`            | timezone name, ignored string                             |\n\nFor more information on the %W format (ISO week of year) see **[tm_week](set_show#tm_week)**. The %U format (CDC/MMWR epidemiological week) is similar to %W except that it uses weeks that start on Sunday rather than Monday. Caveat: Both the %W and the %U formats were unreliable in gnuplot versions prior to 5.4.2. See unit test \"week_date.dem\".\n\nThe relative time formats express the length of a time interval on either side of a zero time point. The relative time formats are\n\n|                 |                                                     |\n|-----------------|-----------------------------------------------------|\n| Time Specifiers |                                                     |\n| Format          | Explanation                                         |\n| `%tD`           | +/- days relative to time=0                         |\n| `%tH`           | +/- hours relative to time=0 (does not wrap at 24)  |\n| `%tM`           | +/- minutes relative to time=0                      |\n| `%tS`           | +/- seconds associated with previous tH or tM field |\n\nNumerical formats may be preceded by a \"0\" (\"zero\") to pad the field with leading zeroes, and preceded by a positive digit to define the minimum field width. The %S, and %t formats also accept a precision specifier so that fractional hours/minutes/seconds can be written.\n\n#### Examples\n\nExamples of date format:\n\nSuppose the x value in seconds corresponds a time slightly before midnight on 25 Dec 1976. The text printed for a tic label at this position would be\n\n    set format x                 # defaults to \"12/25/76 \\n 23:11\"\n    set format x \"%A, %d %b %Y\"  # \"Saturday, 25 Dec 1976\"\n    set format x \"%r %D\"         # \"11:11:11 pm 12/25/76\"\n\nExamples of time format:\n\nThe date format specifiers encode a time in seconds as a clock time on a particular day. So hours run only from 0-23, minutes from 0-59, and negative values correspond to dates prior to the epoch (1-Jan-1970). In order to report a time value in seconds as some number of hours/minutes/seconds relative to a time 0, use time formats %tH %tM %tS. To report a value of -3672.50 seconds\n\n    set format x                 # default date format \"12/31/69 \\n 22:58\"\n    set format x \"%tH:%tM:%tS\"   # \"-01:01:12\"\n    set format x \"%.2tH hours\"   # \"-1.02 hours\"\n    set format x \"%tM:%.2tS\"     # \"-61:12.50\"\n\n### Tm_week\n\nThe **tm_week(t, standard)** function interprets its first argument t as a time in seconds from 1 Jan 1970. Despite the name of this function it does not report a field from the POSIX tm structure.\n\nIf standard = 0 it returns the week number in the ISO 8601 \"week date\" system. This corresponds to gnuplot's %W time format. If standard = 1 it returns the CDC epidemiological week number (\"epi week\"). This corresponds to gnuplot's %U time format. For corresponding inverse functions that convert week dates to calendar time see **[weekdate_iso](set_show#weekdate_iso)**, **[weekdate_cdc](set_show#weekdate_cdc)**.\n\nIn brief, ISO Week 1 of year YYYY begins on the Monday closest to 1 Jan YYYY. This may place it in the previous calendar year. For example Tue 30 Dec 2008 has ISO week date 2009-W01-2 (2nd day of week 1 of 2009). Up to three days at the start of January may come before the Monday of ISO week 1; these days are assigned to the final week of the previous calendar year. E.g. Fri 1 Jan 2021 has ISO week date 2020-W53-05.\n\nThe US Center for Disease Control (CDC) epidemiological week is a similar week date convention that differs from the ISO standard by defining a week as starting on Sunday, rather than on Monday.\n\n### Weekdate_iso\n\nSyntax:\n\n    time = weekdate_iso( year, week [, day] )\n\nThis function converts from the year, week, day components of a date in ISO 8601 \"week date\" format to the calendar date as a time in seconds since the epoch date 1 Jan 1970. Note that the nominal year in the week date system is not necessarily the same as the calendar year. The week is an integer from 1 to 53. The day parameter is optional. If it is omitted or equal to 0 the time returned is the start of the week. Otherwise day is an integer from 1 (Monday) to 2 (Sunday). See **[tm_week](set_show#tm_week)** for additional information on an inverse function that converts from calendar date to week number in the ISO standard convention.\n\nExample:\n\n    # Plot data from a file with column 1 containing ISO weeks\n    #     Week     cases  deaths\n    #     2020-05    432       1\n    calendar_date(w) = weekdate_iso( int(w[1:4]), int(w[6:7]) )\n    set xtics time format \"%b\\n%Y\"\n    plot FILE using (calendar_date(strcol(1))) : 2   title columnhead\n\n### Weekdate_cdc\n\nSyntax:\n\n    time = weekdate_cdc( year, week [, day] )\n\nThis function converts from the year, week, day components of a date in the CDC/MMWR \"epi week\" format to the calendar date as a time in seconds since the epoch date 1 Jan 1970. The CDC week date convention differs from the ISO week date in that it is defined in terms of each week running from day 1 = Sunday to day 6 = Saturday. If the third parameter is 0 or is omitted, the time returned is the start of the week. See **[tm_week](set_show#tm_week)** and **[weekdate_iso](set_show#weekdate_iso)**.\n\n## Function style\n\nThis form of the command is deprecated. Please use **set style function**.\n\n## Functions\n\nThe **show functions** command lists all user-defined functions and their definitions.\n\nSyntax:\n\n    show functions\n\nFor information about the definition and usage of functions in **gnuplot**, please see **[expressions](expressions#expressions)**. See also [splines as user defined functions (spline.dem) ](http://www.gnuplot.info/demo/spline.html)\n\nand [use of functions and complex variables for airfoils (airfoil.dem). ](http://www.gnuplot.info/demo/airfoil.html)\n\n## Grid\n\nThe **set grid** command allows grid lines to be drawn on the plot.\n\nSyntax:\n\n    set grid {{no}{m}xtics} {{no}{m}ytics} {{no}{m}ztics}\n             {{no}{m}x2tics} {{no}{m}y2tics} {{no}{m}rtics}\n             {{no}{m}cbtics}\n             {polar {<angle>}}\n             {layerdefault | front | back}\n             {{no}vertical}\n             {<line-properties-major> {, <line-properties-minor>}}\n    unset grid\n    show grid\n\nThe grid can be enabled and disabled for the major and/or minor tic marks on any axis, and the linetype and linewidth can be specified for major and minor grid lines, also via a predefined linestyle, as far as the active terminal driver supports this (see **[set style line](set_show#set_style_line)**).\n\nA polar grid can be drawn for 2D plots. This is the default action of **set grid** if the program is already in polar mode, but can be enabled explicitly by **set grid polar \\<angle\\> rtics** whether or not the program is in polar mode. Circles are drawn to intersect major and/or minor tics along the r axis, and radial lines are drawn with a spacing of \\<angle\\>. Tic marks around the perimeter are controlled by **set ttics**, but these do not produce radial grid lines.\n\nThe pertinent tics must be enabled before **set grid** can draw them; **gnuplot** will quietly ignore instructions to draw grid lines at non-existent tics, but they will appear if the tics are subsequently enabled.\n\nIf no linetype is specified for the minor gridlines, the same linetype as the major gridlines is used. The default polar angle is 30 degrees.\n\nIf **front** is given, the grid is drawn on top of the graphed data. If **back** is given, the grid is drawn underneath the graphed data. Using **front** will prevent the grid from being obscured by dense data. The default setup, **layerdefault**, is equivalent to **back** for 2D plots. In 3D plots the default is to split up the grid and the graph box into two layers: one behind, the other in front of the plotted data and functions. Since **hidden3d** mode does its own sorting, it ignores all grid drawing order options and passes the grid lines through the hidden line removal machinery instead. These options actually affect not only the grid, but also the lines output by **set border** and the various ticmarks (see **[set xtics](set_show#set_xtics)**).\n\nIn 3D plots grid lines at x- and y- axis tic positions are by default drawn only on the base plane parallel to z=0. The **vertical** keyword activates drawing grid lines in the xz and yz planes also, running from zmin to zmax.\n\nZ grid lines are drawn on the bottom of the plot. This looks better if a partial box is drawn around the plot — see **[set border](set_show#set_border)**.\n\n## Hidden3d\n\nThe **set hidden3d** command enables hidden line removal for surface plotting (see **[splot](splot#splot)**). Some optional features of the underlying algorithm can also be controlled using this command.\n\nSyntax:\n\n    set hidden3d {defaults} |\n                 { {front|back}\n                   {{offset <offset>} | {nooffset}}\n                   {trianglepattern <bitpattern>}\n                   {{undefined <level>} | {noundefined}}\n                   {{no}altdiagonal}\n                   {{no}bentover} }\n    unset hidden3d\n    show hidden3d\n\nIn contrast to the usual display in gnuplot, hidden line removal actually treats the given function or data grids as real surfaces that can't be seen through, so plot elements behind the surface will be hidden by it. For this to work, the surface needs to have 'grid structure' (see **[splot datafile](splot#splot_datafile)** about this), and it has to be drawn **with lines** or **with linespoints**.\n\nWhen **hidden3d** is set, both the hidden portion of the surface and possibly its contours drawn on the base (see **[set contour](set_show#set_contour)**) as well as the grid will be hidden. Each surface has its hidden parts removed with respect to itself and to other surfaces, if more than one surface is plotted. Contours drawn on the surface (**set contour surface**) don't work.\n\n**hidden3d** also affects 3D plotting styles **points**, **labels**, **vectors**, and **impulses** even if no surface is present in the graph. Unobscured portions of each vector are drawn as line segments (no arrowheads). Individual plots within the graph may be explicitly excluded from this processing by appending the extra option **nohidden3d** to the **with** specifier.\n\nHidden3d does not affect solid surfaces drawn using the pm3d mode. To achieve a similar effect purely for pm3d surfaces, use instead **set pm3d depthorder**. To mix pm3d surfaces with normal **hidden3d** processing, use the option **set hidden3d front** to force all elements included in hidden3d processing to be drawn after any remaining plot elements, including the pm3d surface.\n\nFunctions are evaluated at isoline intersections. The algorithm interpolates linearly between function points or data points when determining the visible line segments. This means that the appearance of a function may be different when plotted with **hidden3d** than when plotted with **nohidden3d** because in the latter case functions are evaluated at each sample. Please see **[set samples](set_show#set_samples)** and **[set isosamples](set_show#set_isosamples)** for discussion of the difference.\n\nThe algorithm used to remove the hidden parts of the surfaces has some additional features controllable by this command. Specifying **defaults** will set them all to their default settings, as detailed below. If **defaults** is not given, only explicitly specified options will be influenced: all others will keep their previous values, so you can turn on/off hidden line removal via **set {no}hidden3d**, without modifying the set of options you chose.\n\nThe first option, **offset**, influences the linetype used for lines on the 'back' side. Normally, they are drawn in a linetype one index number higher than the one used for the front, to make the two sides of the surface distinguishable. You can specify a different linetype offset to add instead of the default 1, by **offset \\<offset\\>**. Option **nooffset** stands for **offset 0**, making the two sides of the surface use the same linetype.\n\nNext comes the option **trianglepattern \\<bitpattern\\>**. \\<bitpattern\\> must be a number between 0 and 7, interpreted as a bit pattern. Each bit determines the visibility of one edge of the triangles each surface is split up into. Bit 0 is for the 'horizontal' edges of the grid, Bit 1 for the 'vertical' ones, and Bit 2 for the diagonals that split each cell of the original grid into two triangles. The default pattern is 3, making all horizontal and vertical lines visible, but not the diagonals. You may want to choose 7 to see those diagonals as well.\n\nThe **undefined \\<level\\>** option lets you decide what the algorithm is to do with data points that are undefined (missing data, or undefined function values), or exceed the given x-, y- or z-ranges. Such points can either be plotted nevertheless, or taken out of the input data set. All surface elements touching a point that is taken out will be taken out as well, thus creating a hole in the surface. If \\<level\\> = 3, equivalent to option **noundefined**, no points will be thrown away at all. This may produce all kinds of problems elsewhere, so you should avoid this. \\<level\\> = 2 will throw away undefined points, but keep the out-of-range ones. \\<level\\> = 1, the default, will get rid of out-of-range points as well.\n\nBy specifying **noaltdiagonal**, you can override the default handling of a special case can occur if **undefined** is active (i.e. \\<level\\> is not 3). Each cell of the grid-structured input surface will be divided in two triangles along one of its diagonals. Normally, all these diagonals have the same orientation relative to the grid. If exactly one of the four cell corners is excluded by the **undefined** handler, and this is on the usual diagonal, both triangles will be excluded. However if the default setting of **altdiagonal** is active, the other diagonal will be chosen for this cell instead, minimizing the size of the hole in the surface.\n\nThe **bentover** option controls what happens to another special case, this time in conjunction with the **trianglepattern**. For rather crumply surfaces, it can happen that the two triangles a surface cell is divided into are seen from opposite sides (i.e. the original quadrangle is 'bent over'), as illustrated in the following ASCII art:\n\n                                                              C----B\n    original quadrangle:  A--B      displayed quadrangle:     |\\   |\n      (\"set view 0,0\")    | /|    (\"set view 75,75\" perhaps)  | \\  |\n                          |/ |                                |  \\ |\n                          C--D                                |   \\|\n                                                              A    D\n\nIf the diagonal edges of the surface cells aren't generally made visible by bit 2 of the \\<bitpattern\\> there, the edge CB above wouldn't be drawn at all, normally, making the resulting display hard to understand. Therefore, the default option of **bentover** will turn it visible in this case. If you don't want that, you may choose **nobentover** instead. See also [hidden line removal demo (hidden.dem) ](http://www.gnuplot.info/demo/hidden.html)\n\nand [complex hidden line demo (singulr.dem). ](http://www.gnuplot.info/demo/singulr.html)\n\n## Historysize\n\n(Deprecated). **set historysize N** is equivalent to **set history size N**. **unset historysize** is equivalent to **set history size -1**.\n\n## History\n\nSyntax:\n\n    set history {size <N>} {quiet|numbers} {full|trim} {default}\n\nWhen leaving gnuplot the value of history size limits the number of lines saved to the history file. **set history size -1** allows an unlimited number of lines to be written to the history file.\n\nBy default the **history** command prints a line number in front of each command. **history quiet** suppresses the number for this command only. **set history quiet** suppresses numbers for all future **history** commands.\n\nThe **trim** option reduces the number of duplicate lines in the history list by removing earlier instances of the current command.\n\nDefault settings: **set history size 500 numbers trim**.\n\n## Isosamples\n\nThe isoline density (grid) for plotting functions as surfaces may be changed by the **set isosamples** command.\n\nSyntax:\n\n    set isosamples <iso_1> {,<iso_2>}\n    show isosamples\n\nEach function surface plot will have \\<iso_1\\> iso-u lines and \\<iso_2\\> iso-v lines. If you only specify \\<iso_1\\>, \\<iso_2\\> will be set to the same value as \\<iso_1\\>. By default, sampling is set to 10 isolines per u or v axis. A higher sampling rate will produce more accurate plots, but will take longer. These parameters have no effect on data file plotting.\n\nAn isoline is a curve parameterized by one of the surface parameters while the other surface parameter is fixed. Isolines provide a simple means to display a surface. By fixing the u parameter of surface s(u,v), the iso-u lines of the form c(v) = s(u0,v) are produced, and by fixing the v parameter, the iso-v lines of the form c(u) = s(u,v0) are produced.\n\nWhen a function surface plot is being done without the removal of hidden lines, **set samples** controls the number of points sampled along each isoline; see **[set samples](set_show#set_samples)** and **[set hidden3d](set_show#set_hidden3d)**. The contour algorithm assumes that a function sample occurs at each isoline intersection, so change in **samples** as well as **isosamples** may be desired when changing the resolution of a function surface/contour.\n\n## Isosurface\n\nSyntax:\n\n    set isosurface {mixed|triangles}\n    set isosurface {no}insidecolor <n>\n\nSurfaces plotted by the command **splot $voxelgrid with isosurface** are by default constructed from a mixture of quadrangles and triangles. The use of quadrangles creates a less complicated visual impression. This is the default. This command proveds an option to tessellate with only triangles.\n\nBy default the inside of an isosurface is drawn in a separate color. The method of choosing that color is the same as for hidden3d surfaces, where an offset \\<n\\> is added to the base linetype. To draw both the inside and outside surfaces in the same color, use **set isosurface noinsidecolor**.\n\n## Jitter\n\nSyntax:\n\n    set jitter {overlap <yposition>} {spread <factor>} {wrap <limit>}\n               {swarm|square|vertical}\n\nExamples:\n\n    set jitter                    # jitter points within 1 character width\n    set jitter overlap 1.5        # jitter points within 1.5 character width\n    set jitter over 1.5 spread 0.5  # same but half the displacement on x\n\nWhen one or both coordinates of a data set are restricted to discrete values then many points may lie exactly on top of each other. Jittering introduces an offset to the coordinates of these superimposed points that spreads them into a cluster. The threshold value for treating the points as being overlapped may be specified in character widths or any of the usual coordinate options. See **[coordinates](coordinates#coordinates)**. Jitter affects 2D plot styles **with points** and **with impulses**. It also affects 3D plotting of voxel grids.\n\nThe default jittering operation displaces points only along x. This produces a distinctive pattern sometimes called a \"bee swarm plot\". The optional keyword **square** adjusts the y coordinate of displaced points in addition to their x coordinate so that the points lie in distinct layers separated by at least the **overlap** distance.\n\nTo jitter along y (only) rather than along x, use keyword **vertical**.\n\nThe maximum displacement (in character units) can be limited using the **wrap** keyword.\n\nNote that both the overlap criterion and the magnitude of jitter default to one character unit. Thus the plot appearance will change with the terminal font size, canvas size, or zoom factor. To avoid this you can specify the overlap criterion in the y axis coordinate system (the **first** keyword) and adjust the point size and spread multiplier as appropriate. See **[coordinates](coordinates#coordinates)**, **[pointsize](set_show#pointsize)**.\n\nCaveat: jitter is incompatible with \"pointsize variable\".\n\n**set jitter** is also useful in 3D plots of voxel data. Because voxel grids are regular lattices of evenly spaced points, many view angles cause points to overlap and/or generate Moiré patterns. These artifacts can be removed by displacing the symbol drawn at each grid point by a random amount.\n\n## Key\n\nThe **set key** command enables a key (or legend) containing a title and a sample (line, point, box) for each plot in the graph. The key may be turned off by requesting **set key off** or **unset key**. Individual key entries may be turned off by using the **notitle** keyword in the corresponding plot command. The text of the titles is controlled by the **set key autotitle** option or by the **title** keyword of individual **plot** and **splot** commands. See **[plot title](plot#plot_title)** for more information.\n\nSyntax:\n\n    set key {on|off} {default}\n          {{inside | outside | fixed} | {lmargin | rmargin | tmargin | bmargin}\n            | {at <position>}}\n          {left | right | center} {top | bottom | center}\n          {vertical | horizontal} {Left | Right}\n          {{no}enhanced}\n          {{no}opaque {fc <colorspec>}}\n          {{no}reverse} {{no}invert}\n          {samplen <sample_length>} {spacing <line_spacing>}\n          {width <width_increment>} {height <height_increment>}\n          {{no}autotitle {columnheader}}\n          {title {\"<text>\"} {{no}enhanced} {center | left | right}}\n          {font \"<face>,<size>\"} {textcolor <colorspec>}\n          {{no}box {linestyle <style> | linetype <type> | linewidth <width>}}\n          {maxcols {<max no. of columns> | auto}}\n          {maxrows {<max no. of rows> | auto}}\n    unset key\n    show key\n\nElements within the key are stacked according to **vertical** or **horizontal**. In the case of **vertical**, the key occupies as few columns as possible. That is, elements are aligned in a column until running out of vertical space at which point a new column is started. The vertical space may be limited using 'maxrows'. In the case of **horizontal**, the key occupies as few rows as possible. The horizontal space may be limited using 'maxcols'.\n\nBy default the key is placed in the upper right inside corner of the graph. The keywords **left**, **right**, **top**, **bottom**, **center**, **inside**, **outside**, **lmargin**, **rmargin**, **tmargin**, **bmargin** (, **above**, **over**, **below** and **under**) may be used to automatically place the key in other positions of the graph. Also an **at \\<position\\>** may be given to indicate precisely where the plot should be placed. In this case, the keywords **left**, **right**, **top**, **bottom** and **center** serve an analogous purpose for alignment. For more information, see **[key placement](set_show#key_placement)**.\n\nJustification of the plot titles within the key is controlled by **Left** or **Right** (default). The text and sample can be reversed (**reverse**) and a box can be drawn around the key (**box {...}**) in a specified **linetype** and **linewidth**, or a user-defined **linestyle**.\n\nThe text in the key is set in **enhanced** mode by default, this can be changed with the **{no}enhanced** option, also independently for the key title only and for each individual plot.\n\nBy default the key is built up one plot at a time. That is, the key symbol and title are drawn at the same time as the corresponding plot. That means newer plots may sometimes place elements on top of the key. **set key opaque** causes the key to be generated after all the plots. In this case the key area is filled with background color or the requested fill color and then the key symbols and titles are written. The default can be restored by **set key noopaque**.\n\nBy default the first plot label is at the top of the key and successive labels are entered below it. The **invert** option causes the first label to be placed at the bottom of the key, with successive labels entered above it. This option is useful to force the vertical ordering of labels in the key to match the order of box types in a stacked histogram.\n\nThe \\<height_increment\\> is a number of character heights to be added to or subtracted from the height of the key box. This is useful mainly when you are putting a box around the key and want larger borders around the key entries.\n\nAn overall title can be put on the key (**title \"\\<text\\>\"**) — see also **[syntax](syntax#syntax)** for the distinction between text in single- or double-quotes. The justification of the title defaults to center and can be changed by the keywords **right** or **left**\n\nThe defaults for **set key** are **on**, **right**, **top**, **vertical**, **Right**, **noreverse**, **noinvert**, **samplen 4**, **spacing 1**, **notitle**, and **nobox**. The default \\<linetype\\> is the same as that used for the plot borders. Entering **set key default** returns the key to its default configuration.\n\nEach plot is represented in the key by a single line containing a line or symbol or shape representing the plot style and a corresponding title. Using the keyword **notitle** in the plot command will suppress generation of the line. Contour plots generated additional entries in the key, one for each contour (see **[cntrlabel](set_show#cntrlabel)**). You can add extra lines to the key by inserting a dummy plot command that uses the keyword **keyentry** rather than a filename or a function. See **[keyentry](set_show#keyentry)**.\n\nWhen using the TeX/LaTeX group of terminals or terminals in which formatting information is embedded in the string, **gnuplot** can only estimate the width of the string for key positioning. If the key is to be positioned at the left, it may be convenient to use the combination **set key left Left reverse**.\n\n### 3D key\n\nPlacement of the key for 3D plots (**splot**) by default uses the **fixed** option. Note: this is a change from gnuplot version 5.0 and earlier. **fixed** placement is very similar to **inside** placement with one important difference. The plot boundaries of a 3D plot change as the view point is rotated or scaled. If the key is positioned **inside** these boundaries then the key also moves when the view is changed. **fixed** positioning ignores changes to the view angles or scaling; i.e. the key remains fixed in one location on the canvas as the plot is rotated.\n\nFor 2D plots the **fixed** option is exactly equivalent to **inside**.\n\nIf **splot** is being used to draw contours, by default a separate key entry is generated for each contour level with a distinct line type. To modify this see **[set cntrlabel](set_show#set_cntrlabel)**.\n\n### Key examples\n\nThis places the key at the default location:\n\n    set key default\n\nThis disables the key:\n\n    unset key\n\nThis places a key at coordinates 2,3.5,2 in the default (first) coordinate system:\n\n    set key at 2,3.5,2\n\nThis places the key below the graph:\n\n    set key below\n\nThis places the key in the bottom left corner, left-justifies the text, gives it a title, and draws a box around it in linetype 3:\n\n    set key left bottom Left title 'Legend' box 3\n\n### Extra key entries\n\nNormally each plot autogenerates a single line entry in the key. If you need more control over what appears in the key you can use the **keyentry** keyword in the **plot** or **splot** command to insert extra lines. Instead of providing a filename or function to plot, use **keyentry** as a placeholder followed by plot style information (used to generate a key symbol) and a title. All the usual options for title font, text color, **at** coordinates, and enhanced text markup apply. Example:\n\n    plot $HEATMAP matrix with image notitle, \\\n         keyentry with boxes fc palette cb 0 title \"no effect\", \\\n         keyentry with boxes fc palette cb 1 title \"threshold\", \\\n         keyentry with boxes fc palette cb 3 title \"typical range\", \\\n         keyentry with labels nopoint title \"as reported in [12]\", \\\n         keyentry with boxes fc palette cb 5 title \"strong effect\"\n\n### Key autotitle\n\n**set key autotitle** causes each plot to be identified in the key by the name of the data file or function used in the plot command. This is the default. **set key noautotitle** disables the automatic generation of plot titles. The command **set key autotitle columnheader** causes the first entry in each column of input data to be interpreted as a text string and used as a title for the corresponding plot. If the quantity being plotted is a function of data from several columns, gnuplot may be confused as to which column to draw the title from. In this case it is necessary to specify the column explicitly in the plot command, e.g.\n\n    plot \"datafile\" using (($2+$3)/$4) title columnhead(3) with lines\n\nNote: The effect of **set key autotitle columnheader**, treatment of the first line in a data file as column headers rather than data applies even if the key is disabled by **unset key**. It also applies to **stats** and **fit** commands even though they generate no key. If you want the first line of data to be treated as column headers but *not* to use them for plot titles, use **set datafile columnheaders**.\n\nIn all cases an explicit **title** or **notitle** keyword in the plot command itself will override the default from **set key autotitle**.\n\n### Key placement\n\nThis section describes placement of the primary, auto-generated key. To construct a secondary key or place plot titles elsewhere, see **[multiple keys](set_show#multiple_keys)**.\n\nTo understand positioning, the best concept is to think of a region, i.e., inside/outside, or one of the margins. Along with the region, keywords **left/center/right** (l/c/r) and **top/center/bottom** (t/c/b) control where within the particular region the key should be placed.\n\nWhen in **inside** mode, the keywords **left** (l), **right** (r), **top** (t), **bottom** (b), and **center** (c) push the key out toward the plot boundary as illustrated:\n\n    t/l   t/c   t/r\n\n    c/l    c    c/r\n\n    b/l   b/c   b/r\n\nWhen in **outside** mode, automatic placement is similar to the above illustration, but with respect to the view, rather than the graph boundary. That is, a border is moved inward to make room for the key outside of the plotting area, although this may interfere with other labels and may cause an error on some devices. The particular plot border that is moved depends upon the position described above and the stacking direction. For options centered in one of the dimensions, there is no ambiguity about which border to move. For the corners, when the stack direction is **vertical**, the left or right border is moved inward appropriately. When the stack direction is **horizontal**, the top or bottom border is moved inward appropriately.\n\nThe margin syntax allows automatic placement of key regardless of stack direction. When one of the margins **lmargin** (lm), **rmargin** (rm), **tmargin** (tm), and **bmargin** (bm) is combined with a single, non-conflicting direction keyword, the following illustrated positions may contain the key:\n\n    l/tm  c/tm  r/tm\n\n    t/lm                  t/rm\n\n    c/lm                  c/rm\n\n    b/lm                  b/rm\n\n    l/bm  c/bm  r/bm\n\nKeywords **above** and **over** are synonymous with **tmargin**. For version compatibility, **above** or **over** without an additional l/c/r or stack direction keyword uses **center** and **horizontal**. Keywords **below** and **under** are synonymous with **bmargin**. For compatibility, **below** or **under** without an additional l/c/r or stack direction keyword uses **center** and **horizontal**. A further compatibility issue is that **outside** appearing without an additional t/b/c or stack direction keyword uses **top**, **right** and **vertical** (i.e., the same as t/rm above).\n\nThe \\<position\\> can be a simple x,y,z as in previous versions, but these can be preceded by one of five keywords (**first**, **second**, **graph**, **screen**, **character**) which selects the coordinate system in which the position of the first sample line is specified. See **[coordinates](coordinates#coordinates)** for more details. The effect of **left**, **right**, **top**, **bottom**, and **center** when \\<position\\> is given is to align the key as though it were text positioned using the label command, i.e., **left** means left align with key to the right of \\<position\\>, etc.\n\n### Key samples\n\nBy default, each plot on the graph generates a corresponding entry in the key. This entry contains a plot title and a sample line/point/box of the same color and fill properties as used in the plot itself. The font and textcolor properties control the appearance of the individual plot titles that appear in the key. Setting the textcolor to \"variable\" causes the text for each key entry to be the same color as the line or fill color for that plot. This was the default in some earlier versions of gnuplot.\n\nThe length of the sample line can be controlled by **samplen**. The sample length is computed as the sum of the tic length and \\<sample_length\\> times the character width. **samplen** also affects the positions of point samples in the key since these are drawn at the midpoint of the sample line, even if the sample line itself is not drawn.\n\nKey entry lines are single-spaced based on the current font size. This can be adjusted by **set key spacing \\<line-spacing\\>**.\n\nThe \\<width_increment\\> is a number of character widths to be added to or subtracted from the length of the string. This is useful only when you are putting a box around the key and you are using control characters in the text. **gnuplot** simply counts the number of characters in the string when computing the box width; this allows you to correct it.\n\n### Multiple keys\n\nIt is possible to construct a legend/key manually rather than having the plot titles all appear in the auto-generated key. This allows, for example, creating a single legend for the component panels in a multiplot. Here is an example:\n\n    set multiplot layout 3,2 columnsfirst\n    set style data boxes\n    plot $D using 0:6  lt 1 title at 0.75, 0.20\n    plot $D using 0:12 lt 2 title at 0.75, 0.17\n    plot $D using 0:13 lt 3 title at 0.75, 0.14\n    plot $D using 0:14 lt 4 title at 0.75, 0.11\n    set label 1 at screen 0.75, screen 0.22 \"Custom combined key area\"\n    plot $D using 0:($6+$12+$13+$14) with linespoints title \"total\"\n    unset multiplot\n\n## Label\n\nArbitrary labels can be placed on the plot using the **set label** command.\n\nSyntax:\n\n    set label {<tag>} {\"<label text>\"} {at <position>}\n              {left | center | right}\n              {norotate | rotate {by <degrees>}}\n              {font \"<name>{,<size>}\"}\n              {noenhanced}\n              {front | back}\n              {textcolor <colorspec>}\n              {point <pointstyle> | nopoint}\n              {offset <offset>}\n              {nobox} {boxed {bs <boxstyle>}}\n              {hypertext}\n    unset label {<tag>}\n    show label\n\nThe \\<position\\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **polar**, **graph**, **screen**, or **character** to indicate the coordinate system. See **[coordinates](coordinates#coordinates)** for details.\n\nThe tag is an integer that is used to identify the label. If no \\<tag\\> is given, the lowest unused tag value is assigned automatically. The tag can be used to delete or modify a specific label. To change any attribute of an existing label, use the **set label** command with the appropriate tag, and specify the parts of the label to be changed.\n\nThe \\<label text\\> can be a string constant, a string variable, or a string- valued expression. See **[strings](string_constants_string_var#strings)**, **[sprintf](expressions#sprintf)**, and **[gprintf](set_show#gprintf)**.\n\nBy default, the text is placed flush left against the point x,y,z. To adjust the way the label is positioned with respect to the point x,y,z, add the justification parameter, which may be **left**, **right** or **center**, indicating that the point is to be at the left, right or center of the text. Labels outside the plotted boundaries are permitted but may interfere with axis labels or other text.\n\nSome terminals support enclosing the label in a box. See **[set style textbox](set_show#set_style_textbox)**. Not all terminals can handle boxes for rotated text.\n\nIf **rotate** is given, the label is written vertically. If **rotate by \\<degrees\\>** is given, the baseline of the text will be set to the specified angle. Some terminals do not support text rotation.\n\nFont and its size can be chosen explicitly by **font \"\\<name\\>{,\\<size\\>}\"** if the terminal supports font settings. Otherwise the default font of the terminal will be used.\n\nNormally the enhanced text mode string interpretation, if enabled for the current terminal, is applied to all text strings including label text. The **noenhanced** property can be used to exempt a specific label from the enhanced text mode processing. The can be useful if the label contains underscores, for example. See **[enhanced text](enhanced_text_mode#enhanced_text)**.\n\nIf **front** is given, the label is written on top of the graphed data. If **back** is given (the default), the label is written underneath the graphed data. Using **front** will prevent a label from being obscured by dense data.\n\n**textcolor \\<colorspec\\>** changes the color of the label text. \\<colorspec\\> can be a linetype, an rgb color, or a palette mapping. See help for **[colorspec](linetypes_colors_styles#colorspec)** and **[palette](expressions#palette)**. **textcolor** may be abbreviated **tc**.\n\n    `tc default` resets the text color to its default state.\n    `tc lt <n>` sets the text color to that of line type <n>.\n    `tc ls <n>` sets the text color to that of line style <n>.\n    `tc palette z` selects a palette color corresponding to the label z position.\n    `tc palette cb <val>` selects a color corresponding to <val> on the colorbar.\n    `tc palette fraction <val>`, with 0<=val<=1, selects a color corresponding to\n        the mapping [0:1] to grays/colors of the `palette`.\n    `tc rgb \"#RRGGBB\"` or `tc rgb \"0xRRGGBB\"` sets an arbitrary 24-bit RGB color.\n    `tc rgb 0xRRGGBB`  As above; a hexadecimal constant does not require quotes.\n\nIf a \\<pointstyle\\> is given, using keywords **lt**, **pt** and **ps**, see **[style](plot#style)**, a point with the given style and color of the given line type is plotted at the label position and the text of the label is displaced slightly. This option is used by default for placing labels in **mouse** enhanced terminals. Use **nopoint** to turn off the drawing of a point near the label (this is the default).\n\nThe displacement defaults to 1,1 in **pointsize** units if a \\<pointstyle\\> is given, 0,0 if no \\<pointstyle\\> is given. The displacement can be controlled by the optional **offset \\<offset\\>** where \\<offset\\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. See **[coordinates](coordinates#coordinates)** for details.\n\nIf one (or more) axis is timeseries, the appropriate coordinate should be given as a quoted time string according to the **timefmt** format string. See **[set xdata](set_show#set_xdata)** and **[set timefmt](set_show#set_timefmt)**.\n\nThe options available for **set label** are also available for the **labels** plot style. See **[labels](labels#labels)**. In this case the properties **textcolor**, **rotate**, and **pointsize** may be followed by keyword **variable** rather than by a fixed value. In this case the corresponding property of individual labels is determined by additional columns in the **using** specifier.\n\n### Examples\n\nExamples:\n\nTo set a label at (1,2) to \"y=x\", use:\n\n    set label \"y=x\" at 1,2\n\nTo set a Sigma of size 24, from the Symbol font set, at the center of the graph, use:\n\n    set label \"S\" at graph 0.5,0.5 center font \"Symbol,24\"\n\nTo set a label \"y=x`^`2\" with the right of the text at (2,3,4), and tag the label as number 3, use:\n\n    set label 3 \"y=x^2\" at 2,3,4 right\n\nTo change the preceding label to center justification, use:\n\n    set label 3 center\n\nTo delete label number 2, use:\n\n    unset label 2\n\nTo delete all labels, use:\n\n    unset label\n\nTo show all labels (in tag order), use:\n\n    show label\n\nTo set a label on a graph with a timeseries on the x axis, use, for example:\n\n    set timefmt \"%d/%m/%y,%H:%M\"\n    set label \"Harvest\" at \"25/8/93\",1\n\nTo display a freshly fitted parameter on the plot with the data and the fitted function, do this after the **fit**, but before the **plot**:\n\n    set label sprintf(\"a = %3.5g\",par_a) at 30,15\n    bfit = gprintf(\"b = %s*10^%S\",par_b)\n    set label bfit at 30,20\n\nTo display a function definition along with its fitted parameters, use:\n\n    f(x)=a+b*x\n    fit f(x) 'datafile' via a,b\n    set label GPFUN_f at graph .05,.95\n    set label sprintf(\"a = %g\", a) at graph .05,.90\n    set label sprintf(\"b = %g\", b) at graph .05,.85\n\nTo set a label displaced a little bit from a small point:\n\n    set label 'origin' at 0,0 point lt 1 pt 2 ps 3 offset 1,-1\n\nTo set a label whose color matches the z value (in this case 5.5) of some point on a 3D splot colored using pm3d:\n\n    set label 'text' at 0,0,5.5 tc palette z\n\n### Hypertext\n\nSome terminals (wxt, qt, svg, canvas, win) allow you to attach hypertext to specific points on the graph or elsewhere on the canvas. When the mouse hovers over the anchor point, a pop-up box containing the text is displayed. Terminals that do not support hypertext will display nothing. You must enable the **point** attribute of the label in order for the hypertext to be anchored. Examples:\n\n    set label at 0,0 \"Plot origin\" hypertext point pt 1\n    plot 'data' using 1:2:0 with labels hypertext point pt 7 \\\n         title 'mouse over point to see its order in data set'\n\nFor the wxt and qt terminals, left-click on a hypertext anchor after the text has appeared will copy the hypertext to the clipboard.\n\nEXPERIMENTAL (implementation details may change) Text of the form \"image{\\<xsize\\>,\\<ysize\\>}:\\<filename\\>{ \\\\n\\<caption text\\>}\" will trigger display of the image file in a pop-up box. The optional size overrides a default box size 300x200. The types of image file recognized may vary by terminal type, but \\*.png should always work. Any additional text lines following the image filename are displayed as usual for hypertext. Example:\n\n    set label 7 \"image:../figures/Fig7_inset.png\\nFigure 7 caption...\"\n    set label 7 at 10,100 hypertext point pt 7\n\n## Linetype\n\nThe **set linetype** command allows you to redefine the basic linetypes used for plots. The command options are identical to those for \"set style line\". Unlike line styles, redefinitions by **set linetype** are persistent; they are not affected by **reset**.\n\nFor example, whatever linetypes one and two look like to begin with, if you redefine them like this:\n\n    set linetype 1 lw 2 lc rgb \"blue\" pointtype 6\n    set linetype 2 lw 2 lc rgb \"forest-green\" pointtype 8\n\neverywhere that uses lt 1 will now get a thick blue line. This includes uses such as the definition of a temporary linestyle derived from the base linetype 1. Similarly lt 2 will now produce a thick green line.\n\nThis mechanism can be used to define a set of personal preferences for the sequence of lines used in gnuplot. The recommended way to do this is to add to the run-time initialization file ˜ /.gnuplot a sequence of commands like\n\n    set linetype 1 lc rgb \"dark-violet\" lw 2 pt 1\n    set linetype 2 lc rgb \"sea-green\"   lw 2 pt 7\n    set linetype 3 lc rgb \"cyan\"        lw 2 pt 6 pi -1\n    set linetype 4 lc rgb \"dark-red\"    lw 2 pt 5 pi -1\n    set linetype 5 lc rgb \"blue\"        lw 2 pt 8\n    set linetype 6 lc rgb \"dark-orange\" lw 2 pt 3\n    set linetype 7 lc rgb \"black\"       lw 2 pt 11\n    set linetype 8 lc rgb \"goldenrod\"   lw 2\n    set linetype cycle 8\n\nEvery time you run gnuplot the line types will be initialized to these values. You may initialize as many linetypes as you like. If you do not redefine, say, linetype 3 then it will continue to have the default properties (in this case blue, pt 3, lw 1, etc).\n\nSimilar script files can be used to define theme-based color choices, or sets of colors optimized for a particular plot type or output device.\n\nThe command **set linetype cycle 8** tells gnuplot to re-use these definitions for the color and linewidth of higher-numbered linetypes. That is, linetypes 9-16, 17-24, and so on will use this same sequence of colors and widths. The point properties (pointtype, pointsize, pointinterval) are not affected by this command. **unset linetype cycle** disables this feature. If the line properties of a higher numbered linetype are explicitly defined, this takes precedence over the recycled low-number linetype properties.\n\n## Link\n\nSyntax:\n\n    set link {x2 | y2} {via <expression1> inverse <expression2>}\n    unset link\n\nThe **set link** command establishes a mapping between the x and x2 axes, or the y and y2 axes. \\<expression1\\> maps primary axis coordinates onto the secondary axis. \\<expression2\\> maps secondary axis coordinates onto the primary axis.\n\nExamples:\n\n    set link x2\n\nThis is the simplest form of the command. It forces the x2 axis to have identically the same range, scale, and direction as the x axis. Commands **set xrange**, **set x2range**, **set auto x**, etc will affect both the x and x2 axes.\n\n    set link x2 via x**2 inverse sqrt(x)\n    plot \"sqrt_data\" using 1:2 axes x2y1, \"linear_data\" using 1:2 axes x1y1\n\nThis command establishes forward and reverse mapping between the x and x2 axes. The forward mapping is used to generate x2 tic labels and x2 mouse coordinate The reverse mapping is used to plot coordinates given in the x2 coordinate system. Note that the mapping as given is valid only for x non-negative. When mapping to the y2 axis, both \\<expression1\\> and \\<expression2\\> must use y as dummy variable.\n\n## Lmargin\n\nThe command **set lmargin** sets the size of the left margin. Please see **[set margin](set_show#set_margin)** for details.\n\n## Loadpath\n\nThe **loadpath** setting defines additional locations for data and command files searched by the **call**, **load**, **plot** and **splot** commands. If a file cannot be found in the current directory, the directories in **loadpath** are tried.\n\nSyntax:\n\n    set loadpath {\"pathlist1\" {\"pathlist2\"...}}\n    show loadpath\n\nPath names may be entered as single directory names, or as a list of path names separated by a platform-specific path separator, eg. colon (':') on Unix, semicolon (';') on DOS/Windows/OS/2 platforms. The **show loadpath**, **save** and **save set** commands replace the platform-specific separator with a space character (' ').\n\nIf the environment variable GNUPLOT_LIB is set, its contents are appended to **loadpath**. However, **show loadpath** prints the contents of **set loadpath** and GNUPLOT_LIB separately. Also, the **save** and **save set** commands ignore the contents of GNUPLOT_LIB.\n\n## Locale\n\nThe **locale** setting determines the language with which **{x,y,z}{d,m}tics** will write the days and months.\n\nSyntax:\n\n    set locale {\"<locale>\"}\n\n\\<locale\\> may be any language designation acceptable to your installation. See your system documentation for the available options. The command **set locale \"\"** will try to determine the locale from the LC_TIME, LC_ALL, or LANG environment variables.\n\nTo change the decimal point locale, see **[set decimalsign](set_show#set_decimalsign)**. To change the character encoding to the current locale, see **[set encoding](set_show#set_encoding)**.\n\n## Logscale\n\nSyntax:\n\n    set logscale <axes> {<base>}\n    unset logscale <axes>\n    show logscale\n\nwhere \\<axes\\> may be any combinations of **x**, **x2**, **y**, **y2**, **z**, **cb**, and **r** in any order. \\<base\\> is the base of the log scaling (default is base 10). If no axes are specified, the command affects all axes except **r**. The command **unset logscale** turns off log scaling for all axes. Note that the ticmarks generated for logscaled axes are not uniformly spaced. See **[set xtics](set_show#set_xtics)**.\n\nExamples:\n\nTo enable log scaling in both x and z axes:\n\n    set logscale xz\n\nTo enable scaling log base 2 of the y axis:\n\n    set logscale y 2\n\nTo enable z and color log axes for a pm3d plot:\n\n    set logscale zcb\n\nTo disable z axis log scaling:\n\n    unset logscale z\n\n## Macros\n\nIn this version of gnuplot macro substitution is always enabled. Tokens in the command line of the form @\\<stringvariablename\\> will be replaced by the text string contained in \\<stringvariablename\\>. See **[substitution](substitution_command_line_m#substitution)**.\n\n## Mapping\n\nIf data are provided to **splot** in spherical or cylindrical coordinates, the **set mapping** command should be used to instruct **gnuplot** how to interpret them.\n\nSyntax:\n\n    set mapping {cartesian | spherical | cylindrical}\n\nA cartesian coordinate system is used by default.\n\nFor a spherical coordinate system, the data occupy two or three columns (or **using** entries). The first two are interpreted as the azimuthal and polar angles theta and phi (or \"longitude\" and \"latitude\"), in the units specified by **set angles**. The radius r is taken from the third column if there is one, or is set to unity if there is no third column. The mapping is:\n\n    x = r * cos(theta) * cos(phi)\n    y = r * sin(theta) * cos(phi)\n    z = r * sin(phi)\n\nNote that this is a \"geographic\" spherical system, rather than a \"polar\" one (that is, phi is measured from the equator, rather than the pole).\n\nFor a cylindrical coordinate system, the data again occupy two or three columns. The first two are interpreted as theta (in the units specified by **set angles**) and z. The radius is either taken from the third column or set to unity, as in the spherical case. The mapping is:\n\n    x = r * cos(theta)\n    y = r * sin(theta)\n    z = z\n\nThe effects of **mapping** can be duplicated with the **using** filter on the **splot** command, but **mapping** may be more convenient if many data files are to be processed. However even if **mapping** is used, **using** may still be necessary if the data in the file are not in the required order.\n\n**mapping** has no effect on **plot**. [world.dem: mapping demos. ](http://www.gnuplot.info/demo/world.html)\n\n## Margin\n\nThe **margin** is the distance between the plot border and the outer edge of the canvas. The size of the margin is chosen automatically, but can be overridden by the **set margin** commands. **show margin** shows the current settings. To alter the distance between the inside of the plot border and the data in the plot itself, see **[set offsets](set_show#set_offsets)**.\n\nSyntax:\n\n    set lmargin {{at screen} <margin>}\n    set rmargin {{at screen} <margin>}\n    set tmargin {{at screen} <margin>}\n    set bmargin {{at screen} <margin>}\n    set margins <left>, <right>, <bottom>, <top>\n    show margin\n\nThe default units of \\<margin\\> are character heights or widths, as appropriate. A positive value defines the absolute size of the margin. A negative value (or none) causes **gnuplot** to revert to the computed value. For 3D plots, only the left margin can be set using character units.\n\nThe keywords **at screen** indicates that the margin is specified as a fraction of the full drawing area. This can be used to precisely line up the corners of individual 2D and 3D graphs in a multiplot. This placement ignores the current values of **set origin** and **set size**, and is intended as an alternative method for positioning graphs within a multiplot.\n\nNormally the margins of a plot are automatically calculated based on tics, tic labels, axis labels, the plot title, the timestamp and the size of the key if it is outside the borders. If, however, tics are attached to the axes (**set xtics axis**, for example), neither the tics themselves nor their labels will be included in either the margin calculation or the calculation of the positions of other text to be written in the margin. This can lead to tic labels overwriting other text if the axis is very close to the border.\n\n## Micro\n\nBy default the \"%c\" format specifier for scientific notation used to generate axis tick labels uses a lower case u as a prefix to indicate \"micro\" (10`^`-6). The **set micro** command tells gnuplot to use a different typographic character (unicode U+00B5). The byte sequence used to represent this character depends on the current encoding. See **[format specifiers](set_show#format_specifiers)**, **[encoding](set_show#encoding)**.\n\nThis command is EXPERIMENTAL. Implementation details may change.\n\n## Minussign\n\nGnuplot uses the C language library routine sprintf() for most formatted input. However it also has its own formatting routine **gprintf()** that is used to generate axis tic labels. The C library routine always use a hyphen character (ascii \\\\055) to indicate a negative number, as in -7. Many people prefer a different typographic minus sign character (unicode U+2212) for this purpose, as in −7. The command\n\n    set minussign\n\ncauses gprintf() to use this minus sign character rather than a hyphen in numeric output. In a utf-8 locale this is the multibyte sequence corresponding to unicode U+2212. In a Window codepage 1252 locale this is the 8-bit character ALT+150 (\"en dash\"). The **set minussign** command will affect axis tic labels and any labels that are created by explicitly invoking gprintf. It has no effect on other strings that contain a hyphen. See **[gprintf](set_show#gprintf)**.\n\nNote that this command is ignored when you are using any of the LaTeX terminals, as LaTeX has its own mechanism for handling minus signs. It also is not necessary when using the postscript terminal because the postscript prologue output by gnuplot remaps the ascii hyphen code \\\\055 to a different glyph named **minus**.\n\nThis command is EXPERIMENTAL. Implementation details may change.\n\nExample (assumes utf8 locale):\n\n    set minus\n    A = -5\n    print \"A = \",A                 # printed string will contain a hyphen\n    print gprintf(\"A = %g\",A)      # printed string will contain character U+2212\n    set label \"V = -5\"             # label will contain a hyphen\n    set label sprintf(\"V = %g\",-5) # label will contain a hyphen\n    set label gprintf(\"V = %g\",-5) # label will contain character U+2212\n\n## Monochrome\n\nSyntax:\n\n    set monochrome {linetype N <linetype properties>}\n\nThe **set monochrome** command selects an alternative set of linetypes that differ by dot/dash pattern or line width rather than by color. This command replaces the monochrome option offered by certain terminal types in earlier versions of gnuplot. For backward compatibility these terminal types now implicitly invoke \"set monochrome\" if their own \"mono\" option is present. For example,\n\n    set terminal pdf mono\n\nis equivalent to\n\n    set terminal pdf\n    set mono\n\nSelecting monochrome mode does not prevent you from explicitly drawing lines using RGB or palette colors, but see also **[set palette gray](set_show#set_palette_gray)**. Six monochrome linetypes are defined by default. You can change their properties or add additional monochrome linetypes by using the full form of the command. Changes made to the monochrome linetypes do not affect the color linetypes and vice versa. To restore the usual set of color linetypes, use either **unset monochrome** or **set color**.\n\n## Mouse\n\nThe command **set mouse** enables mouse actions for the current interactive terminal. It is usually enabled by default in interactive mode, but disabled by default if commands are being read from a file.\n\nThere are two mouse modes. The 2D mode works for **plot** commands and for **splot** maps (i.e. **set view** with z-rotation 0, 90, 180, 270 or 360 degrees, including **set view map**). In this mode the mouse position is tracked and you can pan or zoom using the mouse buttons or arrow keys. Some terminals support toggling individual plots on/off by clicking on the corresponding key title or on a separate widget.\n\nFor 3D graphs **splot**, the view and scaling of the graph can be changed with mouse buttons 1 and 2, respectively. A vertical motion of Button 2 with the shift key held down changes the **xyplane**. If additionally to these buttons the modifier \\<ctrl\\> is held down, the coordinate axes are displayed but the data are suppressed. This is useful for large data sets. Mouse button 3 controls the azimuth of the z axis (see **[set view azimuth](set_show#set_view_azimuth)**).\n\nMousing is not available inside multiplot mode. When multiplot is completed using **unset multiplot**, then the mouse will be turned on again but acts only on the most recent plot within the multiplot (like replot does).\n\nSyntax:\n\n    set mouse {doubleclick <ms>} {nodoubleclick}\n              {{no}zoomcoordinates}\n              {zoomfactors <xmultiplier>, <ymultiplier>}\n              {noruler | ruler {at x,y}}\n              {polardistance{deg|tan} | nopolardistance}\n              {format <string>}\n              {mouseformat <int> | <string> | function <f(x,y)>}\n              {{no}labels {\"labeloptions\"}}\n              {{no}zoomjump} {{no}verbose}\n    unset mouse\n\nThe options **noruler** and **ruler** switch the ruler off and on, the latter optionally setting the origin at the given coordinates. While the ruler is on, the distance in user units from the ruler origin to the mouse is displayed continuously. By default, toggling the ruler has the key binding 'r'.\n\nThe option **polardistance** determines if the distance between the mouse cursor and the ruler is also shown in polar coordinates (distance and angle in degrees or tangent (slope)). This corresponds to the default key binding '5'.\n\nChoose the option **labels** to define persistent gnuplot labels using Button 2. The default is **nolabels**, which makes Button 2 draw only a temporary label at the mouse position. Labels are drawn with the current setting of **mouseformat**. The **labeloptions** string is passed to the **set label** command. The default is \"point pointstyle 1\" which will plot a small plus at the label position. Temporary labels will disappear at the next **replot** or mouse zoom operation. Persistent labels can be removed by holding the Ctrl-Key down while clicking Button 2 on the label's point. The threshold for how close you must be to the label is also determined by the **pointsize**.\n\nIf the option **verbose** is turned on the communication commands are shown during execution. This option can also be toggled by hitting **6** in the driver's window. **verbose** is off by default.\n\nPress 'h' in the driver's window for a short summary of the mouse and key bindings. This will also display user defined bindings or **hotkeys** which can be defined using the **bind** command, see help for **[bind](mouse_input#bind)**. Note, that user defined **hotkeys** may override the default bindings. See also help for **[bind](mouse_input#bind)** and **[label](set_show#label)**.\n\n### Doubleclick\n\nThe doubleclick resolution is given in milliseconds and used for Button 1, which copies the current mouse position to the **clipboard** on some terminals. The default value is 300 ms. Setting the value to 0 ms triggers the copy on a single click.\n\n### Format\n\nThe **set mouse format** command specifies a format string for sprintf() which determines how the mouse cursor \\[x,y\\] coordinates are printed to the plot window and to the clipboard. The default is \"% \\#g\".\n\nThis setting is superseded by \"set mouse mouseformat\".\n\n### Mouseformat\n\nSyntax:\n\n    set mouse mouseformat i\n    set mouse mouseformat \"custom format\"\n    set mouse mouseformat function string_valued_function(x, y)\n\nThis command controls the format used to report the current mouse position. An integer argument selects one of the format options in the table below. A string argument is used as a format for sprintf() in option 7 and should contain two float specifiers, one for x and one for y.\n\nUse of a custom function returning a string is EXPERIMENTAL. It allows readout of coordinate systems in which inverse mapping from screen coordinates to plot coordinates requires joint consideration of both x and y. See for example the map_projection demo.\n\nExample:\n\n    `set mouse mouseformat \"mouse x,y = %5.2g, %10.3f\"`.\n\nUse **set mouse mouseformat \"\"** to turn this string off again.\n\nThe following formats are available:\n\n    0   default (same as 1)\n    1   axis coordinates                    1.23, 2.45\n    2   graph coordinates (from 0 to 1)    /0.00, 1.00/\n    3   x = timefmt     y = axis           [(as set by `set timefmt`), 2.45]\n    4   x = date        y = axis           [31. 12. 1999, 2.45]\n    5   x = time        y = axis           [23:59, 2.45]\n    6   x = date time   y = axis           [31. 12. 1999 23:59, 2.45]\n    7   format from `set mouse mouseformat <format-string>`\n    8   format from `set mouse mouseformat function <func>`\n\n### Scrolling\n\nX and Y axis scaling in both 2D and 3D graphs can be adjusted using the mouse wheel. \\<wheel-up\\> scrolls up (increases both YMIN and YMAX by ten percent of the Y range, and increases both Y2MIN and Y2MAX likewise), and \\<wheel down\\> scrolls down. \\<shift-wheel-up\\> scrolls left (decreases both XMIN and XMAX, and both X2MIN and X2MAX), and \\<shift-wheel-down\\> scrolls right. \\<control-wheel-up\\> zooms in toward the center of the plot, and \\<control-wheel-down\\> zooms out. \\<shift-control-wheel-up\\> zooms in along the X and X2 axes only, and \\<shift-control-wheel-down\\> zooms out along the X and X2 axes only.\n\n### X11 mouse\n\nIf multiple X11 plot windows have been opened using the **set term x11 \\<n\\>** terminal option, then only the current plot window supports the entire range of mouse commands and hotkeys. The other windows will, however, continue to display mouse coordinates at the lower left.\n\n### Zoom\n\nZooming is usually accomplished by holding down the left mouse button and dragging the mouse to delineate a zoom region. Some platforms may require using a different mouse button. The original plot can be restored by typing the 'u' hotkey in the plot window. The hotkeys 'p' and 'n' step back and forth through a history of zoom operations.\n\nThe option **zoomcoordinates** determines if the coordinates of the zoom box are drawn at the edges while zooming. This is on by default.\n\nIf the option **zoomjump** is on, the mouse pointer will be automatically offset a small distance after starting a zoom region with button 3. This can be useful to avoid a tiny (or even empty) zoom region. **zoomjump** is off by default.\n\n## Mttics\n\nMinor tic marks around the perimeter of a polar plot are controlled by by **set mttics**. Please see **[set mxtics](set_show#set_mxtics)**.\n\n## Multiplot\n\nThe command **set multiplot** places **gnuplot** in the multiplot mode, in which several plots are placed next to each other on the same page or screen window.\n\nSyntax:\n\n    set multiplot\n        { title <page title> {font <fontspec>} {enhanced|noenhanced} }\n        { layout <rows>,<cols>\n          {rowsfirst|columnsfirst} {downwards|upwards}\n          {scale <xscale>{,<yscale>}} {offset <xoff>{,<yoff>}}\n          {margins <left>,<right>,<bottom>,<top>}\n          {spacing <xspacing>{,<yspacing>}}\n        }\n    set multiplot {next|previous}\n    unset multiplot\n\nFor some terminals, no plot is displayed until the command **unset multiplot** is given, which causes the entire page to be drawn and then returns gnuplot to its normal single-plot mode. For other terminals, each separate **plot** command produces an updated display.\n\nThe **clear** command is used to erase the rectangular area of the page that will be used for the next plot. This is typically needed to inset a small plot inside a larger plot.\n\nAny labels or arrows that have been defined will be drawn for each plot according to the current size and origin (unless their coordinates are defined in the **screen** system). Just about everything else that can be **set** is applied to each plot, too. If you want something to appear only once on the page, for instance a single time stamp, you'll need to put a **set time**/**unset time** pair around one of the **plot**, **splot** or **replot** commands within the **set multiplot**/**unset multiplot** block.\n\nThe multiplot title is separate from the individual plot titles, if any. Space is reserved for it at the top of the page, spanning the full width of the canvas.\n\nThe commands **set origin** and **set size** must be used to correctly position each plot if no layout is specified or if fine tuning is desired. See **[set origin](set_show#set_origin)** and **[set size](set_show#set_size)** for details of their usage.\n\nExample:\n\n    set multiplot\n    set size 0.4,0.4\n    set origin 0.1,0.1\n    plot sin(x)\n    set size 0.2,0.2\n    set origin 0.5,0.5\n    plot cos(x)\n    unset multiplot\n\nThis displays a plot of cos(x) stacked above a plot of sin(x).\n\n**set size** and **set origin** refer to the entire plotting area used for each plot. Please also see **[set term size](canvas_size#set_term_size)**. If you want to have the axes themselves line up, you can guarantee that the margins are the same size with the **set margin** commands. See **[set margin](set_show#set_margin)** for their use. Note that the margin settings are absolute, in character units, so the appearance of the graph in the remaining space will depend on the screen size of the display device, e.g., perhaps quite different on a video display and a printer.\n\nWith the **layout** option you can generate simple multiplots without having to give the **set size** and **set origin** commands before each plot: Those are generated automatically, but can be overridden at any time. With **layout** the display will be divided by a grid with \\<rows\\> rows and \\<cols\\> columns. This grid is filled rows first or columns first depending on whether the corresponding option is given in the multiplot command. The stack of plots can grow **downwards** or **upwards**. Default is **rowsfirst** and **downwards**. The commands **set multiplot next** and **set multiplot previous** are relevant only in the context of using the layout option. **next** skips the next position in the grid, leaving a blank space. **prev** returns to the grid position immediately preceding the most recently plotted position.\n\nEach plot can be scaled by **scale** and shifted with **offset**; if the y-values for scale or offset are omitted, the x-value will be used. **unset multiplot** will turn off the automatic layout and restore the values of **set size** and **set origin** as they were before **set multiplot layout**.\n\nExample:\n\n    set size 1,1\n    set origin 0,0\n    set multiplot layout 3,2 columnsfirst scale 1.1,0.9\n    [ up to 6 plot commands here ]\n    unset multiplot\n\nThe above example will produce 6 plots in 2 columns filled top to bottom, left to right. Each plot will have a horizontal size of 1.1/2 and a vertical size of 0.9/3.\n\nAnother possibility is to set uniform margins for all plots in the layout with options **layout margins** and **spacing**, which must be used together. With **margins** you set the outer margins of the whole multiplot grid.\n\n**spacing** gives the gap size between two adjacent subplots, and can also be given in **character** or **screen** units. If a single value is given, it is used for both x and y direction, otherwise two different values can be selected.\n\nIf one value has no unit, the one of the preceding margin setting is used.\n\nExample:\n\n    set multiplot layout 2,2 margins 0.1, 0.9, 0.1, 0.9 spacing 0.0\n\nIn this case the two left-most subplots will have left boundaries at screen coordinate 0.1, the two right-most subplots will have right boundaries at screen coordinate 0.9, and so on. Because the spacing between subplots is given as 0, their inner boundaries will superimpose.\n\nExample:\n\n    set multiplot layout 2,2 margins char 5,1,1,2 spacing screen 0, char 2\n\nThis produces a layout in which the boundary of both left subplots is 5 character widths from the left edge of the canvas, the right boundary of the right subplots is 1 character width from the canvas edge. The overall bottom margin is one character height and the overall top margin is 2 character heights. There is no horizontal gap between the two columns of subplots. The vertical gap between subplots is equal to 2 character heights.\n\nExample:\n\n    set multiplot layout 2,2 columnsfirst margins 0.1,0.9,0.1,0.9 spacing 0.1\n    set ylabel 'ylabel'\n    plot sin(x)\n    set xlabel 'xlabel'\n    plot cos(x)\n    unset ylabel\n    unset xlabel\n    plot sin(2*x)\n    set xlabel 'xlabel'\n    plot cos(2*x)\n    unset multiplot\n\nSee also [multiplot demo (multiplt.dem) ](http://www.gnuplot.info/demo/multiplt.html)\n\n## Mx2tics\n\nMinor tic marks along the x2 (top) axis are controlled by **set mx2tics**. Please see **[set mxtics](set_show#set_mxtics)**.\n\n## Mxtics\n\nMinor tic marks along the x axis are controlled by **set mxtics**. They can be turned off with **unset mxtics**. Similar commands control minor tics along the other axes.\n\nSyntax:\n\n    set mxtics {<freq> | default}\n    unset mxtics\n    show mxtics\n\nThe same syntax applies to **mytics**, **mztics**, **mx2tics**, **my2tics**, **mrtics**, **mttics** and **mcbtics**.\n\n\\<freq\\> is the number of sub-intervals (NOT the number of minor tics) between major tics (the default for a linear axis is either two or five depending on the major tics, so there are one or four minor tics between major tics). Selecting **default** will return the number of minor ticks to its default value.\n\nIf the axis is logarithmic, the number of sub-intervals will be set to a reasonable number by default (based upon the length of a decade). This will be overridden if \\<freq\\> is given. However the usual minor tics (2, 3, ..., 8, 9 between 1 and 10, for example) are obtained by setting \\<freq\\> to 10, even though there are but nine sub-intervals.\n\nTo set minor tics at arbitrary positions, use the (\"\\<label\\>\" \\<pos\\> \\<level\\>, ...) form of **set {x\\|x2\\|y\\|y2\\|z}tics** with \\<label\\> empty and \\<level\\> set to 1.\n\nThe **set m{x\\|x2\\|y\\|y2\\|z}tics** commands work only when there are uniformly spaced major tics. If all major tics were placed explicitly by **set {x\\|x2\\|y\\|y2\\|z}tics**, then minor tic commands are ignored. Implicit major tics and explicit minor tics can be combined using **set {x\\|x2\\|y\\|y2\\|z}tics** and **set {x\\|x2\\|y\\|y2\\|z}tics add**.\n\nExamples:\n\n    set xtics 0, 5, 10\n    set xtics add (7.5)\n    set mxtics 5\n\nMajor tics at 0,5,7.5,10, minor tics at 1,2,3,4,6,7,8,9\n\n    set logscale y\n    set ytics format \"\"\n    set ytics 1e-6, 10, 1\n    set ytics add (\"1\" 1, \".1\" 0.1, \".01\" 0.01, \"10^-3\" 0.001, \\\n                   \"10^-4\" 0.0001)\n    set mytics 10\n\nMajor tics with special formatting, minor tics at log positions\n\nBy default, minor tics are off for linear axes and on for logarithmic axes. They inherit the settings for **axis\\|border** and **{no}mirror** specified for the major tics. Please see **[set xtics](set_show#set_xtics)** for information about these.\n\n## My2tics\n\nMinor tic marks along the y2 (right-hand) axis are controlled by **set my2tics**. Please see **[set mxtics](set_show#set_mxtics)**.\n\n## Mytics\n\nMinor tic marks along the y axis are controlled by **set mytics**. Please see **[set mxtics](set_show#set_mxtics)**.\n\n## Mztics\n\nMinor tic marks along the z axis are controlled by **set mztics**. Please see **[set mxtics](set_show#set_mxtics)**.\n\n## Nonlinear\n\nSyntax:\n\n    set nonlinear <axis> via f(axis) inverse g(axis)\n    unset nonlinear <axis>\n\nThis command is similar to the **set link** command except that only one of the two linked axes is visible. The hidden axis remains linear. Coordinates along the visible axis are mapped by applying g(x) to hidden axis coordinates. f(x) maps the visible axis coordinates back onto the hidden linear axis. You must provide both the forward and inverse expressions.\n\nTo illustrate how this works, consider the case of a log-scale x2 axis.\n\n    set x2ange [1:1000]\n    set nonlinear x2 via log10(x) inverse 10**x\n\nThis achieves the same effect as **set log x2**. The hidden axis in this case has range \\[0:3\\], obtained by calculating \\[log10(xmin):log10(xmax)\\].\n\nThe transformation functions f() and g() must be defined using a dummy variable appropriate to the nonlinear axis:\n\n    axis: x x2   dummy variable x\n    axis: y y2   dummy variable y\n    axis: z cb   dummy variable z\n    axis: r      dummy variable r\n\nExample:\n\n    set xrange [-3:3]\n    set nonlinear x via norm(x) inverse invnorm(x)\n\nThis example establishes a probability-scaled (\"probit\") x axis, such that plotting the cumulative normal function Phi(x) produces a straight line plot against a linear y axis.\n\nExample:\n\n    logit(p) = log(p/(1-p))\n    logistic(a) = 1. / (1. + exp(-a))\n    set xrange [.001 : .999]\n    set nonlinear y via logit(y) inverse logistic(y)\n    plot logit(x)\n\nThis example establishes a logit-scaled y axis such that plotting logit(x) on a linear x axis produces a straight line plot.\n\nExample:\n\n    f(x) = (x <= 100) ? x : (x < 500) ? NaN : x-390\n    g(x) = (x <= 100) ? x : x+390\n    set xrange [0:1000] noextend\n    set nonlinear x via f(x) inverse g(x)\n    set xtics add (100,500)\n    plot sample [x=1:100] x, [x=500:1000] x\n\nThis example creates a \"broken axis\". X coordinates 0-100 are at the left, X coordinates 500-1000 are at the right, there is a small gap (10 units) between them. So long as no data points with (100 \\< x \\< 500) are plotted, this works as expected.\n\n## Object\n\nThe **set object** command defines a single object which will appear in subsequent plots. You may define as many objects as you like. Currently the supported object types are **rectangle**, **circle**, **ellipse**, and **polygon**. Rectangles inherit a default set of style properties (fill, color, border) from those set by the command **set style rectangle**, but each object can also be given individual style properties. Circles, ellipses, and polygons inherit the fill style from **set style fill**. Objects to be drawn in 2D plots may be defined in any combination of axis, graph, polar, or screen coordinates.\n\nObject specifications in 3D plots cannot use graph coordinates. Rectangles and ellipses in 3D plots are limited to screen coordinates.\n\nSyntax:\n\n    set object <index>\n        <object-type> <object-properties>\n        {front|back|behind|depthorder}\n        {clip|noclip}\n        {fc|fillcolor <colorspec>} {fs <fillstyle>}\n        {default} {lw|linewidth <width>} {dt|dashtype <dashtype>}\n    unset object <index>\n\n\\<object-type\\> is either **rectangle**, **ellipse**, **circle**, or **polygon**. Each object type has its own set of characteristic properties.\n\nThe options **front**, **back**, **behind** control whether the object is drawn before or after the plot itself. See **[layers](layers#layers)**. Setting **front** will draw the object in front of all plot elements, but behind any labels that are also marked **front**. Setting **back** will place the object behind all plot curves and labels. Setting **behind** will place the object behind everything including the axes and **back** rectangles, thus\n\n    set object rectangle from screen 0,0 to screen 1,1 behind\n\ncan be used to provide a colored background for the entire graph or page.\n\nBy default, objects are clipped to the graph boundary unless one or more vertices are given in screen coordinates. Setting **noclip** will disable clipping to the graph boundary, but will still clip against the screen size.\n\nThe fill color of the object is taken from the \\<colorspec\\>. **fillcolor** may be abbreviated **fc**. The fill style is taken from \\<fillstyle\\>. See **[colorspec](linetypes_colors_styles#colorspec)** and **[fillstyle](set_show#fillstyle)**. If the keyword **default** is given, these properties are inherited from the default settings at the time a plot is drawn. See **[set style rectangle](set_show#set_style_rectangle)**.\n\n### Rectangle\n\nSyntax:\n\n    set object <index> rectangle\n        {from <position> {to|rto} <position> |\n         center <position> size <w>,<h> |\n         at <position> size <w>,<h>}\n\nThe position of the rectangle may be specified by giving the position of two diagonal corners (bottom left and top right) or by giving the position of the center followed by the width and the height. In either case the positions may be given in axis, graph, or screen coordinates. See **[coordinates](coordinates#coordinates)**. The options **at** and **center** are synonyms.\n\nExamples:\n\n    # Force the entire area enclosed by the axes to have background color cyan\n    set object 1 rect from graph 0, graph 0 to graph 1, graph 1 back\n    set object 1 rect fc rgb \"cyan\" fillstyle solid 1.0\n\n    # Position a red square with lower left at 0,0 and upper right at 2,3\n    set object 2 rect from 0,0 to 2,3 fc lt 1\n\n    # Position an empty rectangle (no fill) with a blue border\n    set object 3 rect from 0,0 to 2,3 fs empty border rgb \"blue\"\n\n    # Return fill and color to the default style but leave vertices unchanged\n    set object 2 rect default\n\nRectangle corners specified in screen coordinates may extend beyond the edge of the current graph. Otherwise the rectangle is clipped to fit in the graph.\n\n### Ellipse\n\nSyntax:\n\n    set object <index> ellipse {at|center} <position> size <w>,<h>\n        {angle <orientation>} {units xy|xx|yy}\n        {<other-object-properties>}\n\nThe position of the ellipse is specified by giving the center followed by the width and the height (actually the major and minor axes). The keywords **at** and **center** are synonyms. The center position may be given in axis, graph, or screen coordinates. See **[coordinates](coordinates#coordinates)**. The major and minor axis lengths must be given in axis coordinates. The orientation of the ellipse is specified by the angle between the horizontal axis and the major diameter of the ellipse. If no angle is given, the default ellipse orientation will be used instead (see **[set style ellipse](set_show#set_style_ellipse)**). The **units** keyword controls the scaling of the axes of the ellipse. **units xy** means that the major axis is interpreted in terms of units along the x axis, while the minor axis in that of the y axis. **units xx** means that both axes of the ellipses are scaled in the units of the x axis, while **units yy** means that both axes are in units of the y axis. The default is **xy** or whatever **set style ellipse units** was set to.\n\nNB: If the x and y axis scales are not equal, (e.g. **units xy** is in effect) then the major/minor axis ratio will no longer be correct after rotation.\n\nNote that **set object ellipse size \\<2r\\>,\\<2r\\>** does not in general produce the same result as **set object circle \\<r\\>**. The circle radius is always interpreted in terms of units along the x axis, and will always produce a circle even if the x and y axis scales are different and even if the aspect ratio of your plot is not 1. If **units** is set to **xy**, then 'set object ellipse' interprets the first \\<2r\\> in terms of x axis units and the second \\<2r\\> in terms of y axis units. This will only produce a circle if the x and y axis scales are identical and the plot aspect ratio is 1. On the other hand, if **units** is set to **xx** or **yy**, then the diameters specified in the 'set object' command will be interpreted in the same units, so the ellipse will have the correct aspect ratio, and it will maintain its aspect ratio even if the plot is resized.\n\n### Circle\n\nSyntax:\n\n    set object <index> circle {at|center} <position> size <radius>\n        {arc [<begin>:<end>]} {no{wedge}}\n        {<other-object-properties>}\n\nThe position of the circle is specified by giving the position of the center center followed by the radius. The keywords **at** and **center** are synonyms. In 2D plots the position and radius may be given in any coordinate system. See **[coordinates](coordinates#coordinates)**. Circles in 3D plots cannot use graph coordinates. In all cases the radius is calculated relative to the horizontal scale of the axis, graph, or canvas. Any disparity between the horizontal and vertical scaling will be corrected for so that the result is always a circle. If you want to draw a circle in plot coordinates (such that it will appear as an ellipse if the horizontal and vertical scales are different), use **set object ellipse** instead.\n\nBy default a full circle is drawn. The optional qualifier **arc** specifies a starting angle and ending angle, in degrees, for one arc of the circle. The arc is always drawn counterclockwise.\n\nSee also **[set style circle](set_show#set_style_circle)**, **[set object ellipse](set_show#set_object_ellipse)**.\n\n### Polygon\n\nSyntax:\n\n    set object <index> polygon\n        from <position> to <position> ... {to <position>}\n\nor\n\n    from <position> rto <position> ... {rto <position>}\n\nThe position of the polygon may be specified by giving the position of a sequence of vertices. These may be given in any coordinate system. If relative coordinates are used (rto) then the coordinate type must match that of the previous vertex. See **[coordinates](coordinates#coordinates)**.\n\nExample:\n\n    set object 1 polygon from 0,0 to 1,1 to 2,0\n    set object 1 fc rgb \"cyan\" fillstyle solid 1.0 border lt -1\n\n#### Depthorder\n\nThe option **set object N depthorder** applies to 3D polygon objects only. Rather than assigning the object to layer front/back/behind it is included in the list of pm3d quadrangles sorted and rendered in order of depth by **set pm3d depthorder**. As with pm3d surfaces, two-sided coloring can be generated by specifying the object fillcolor as a linestyle. In this case the ordering of the first three vertices in the polygon determines the \"side\".\n\nIf you set this property for an object that is not a 3D polygon it probably will not be drawn at all.\n\n## Offsets\n\nAutoscaling sets the x and y axis ranges to match the coordinates of the data that is plotted. Offsets provide a mechanism to expand these ranges to leave empty space between the data and the plot borders. Autoscaling then further extends each range to reach the next axis tic unless this has been suppressed by **set autoscale noextend** or **set xrange noextend**. See **[noextend](set_show#noextend)**. Offsets affect only scaling for the x1 and y1 axes.\n\nSyntax:\n\n    set offsets <left>, <right>, <top>, <bottom>\n    unset offsets\n    show offsets\n\nEach offset may be a constant or an expression. Each defaults to 0. By default, the left and right offsets are given in units of the first x axis, the top and bottom offsets in units of the first y axis. Alternatively, you may specify the offsets as a fraction of the total graph dimension by using the keyword \"graph\". Only \"graph\" offsets are possible for nonlinear axes.\n\nA positive offset expands the axis range in the specified direction, e.g. a positive bottom offset makes ymin more negative. Negative offsets interact badly with autoscaling and clipping.\n\nExample:\n\n    set autoscale noextend\n    set offsets graph 0.05, 0, 2, 2\n    plot sin(x)\n\nThis graph of sin(x) will have y range \\[-3:3\\] because the function will be autoscaled to \\[-1:1\\] and the vertical offsets add 2 at each end of the range. The x range will be \\[-11:10\\] because the default is \\[-10:10\\] and it has been expanded to the left by 0.05 of that total range.\n\n## Origin\n\nThe **set origin** command is used to specify the origin of a plotting surface (i.e., the graph and its margins) on the screen. The coordinates are given in the **screen** coordinate system (see **[coordinates](coordinates#coordinates)** for information about this system).\n\nSyntax:\n\n    set origin <x-origin>,<y-origin>\n\n## Output\n\nBy default, screens are displayed to the standard output. The **set output** command redirects the display to the specified file or device.\n\nSyntax:\n\n    set output {\"<filename>\"}\n    show output\n\nThe filename must be enclosed in quotes. If the filename is omitted, any output file opened by a previous invocation of **set output** will be closed and new output will be sent to STDOUT. (If you give the command **set output \"STDOUT\"**, your output may be sent to a file named \"STDOUT\"! \\[\"May be\", not \"will be\", because some terminals, like **x11** or **wxt**, ignore **set output**.\\])\n\nWhen both **set terminal** and **set output** are used together, it is safest to give **set terminal** first, because some terminals set a flag which is needed in some operating systems. This would be the case, for example, if the operating system needs a separate open command for binary files.\n\nOn platforms that support pipes, it may be useful to pipe terminal output. For instance,\n\n    set output \"|lpr -Plaser filename\"\n    set term png; set output \"|display png:-\"\n\nOn MSDOS machines, **set output \"PRN\"** will direct the output to the default printer. On VMS, output can be sent directly to any spooled device.\n\n## Overflow\n\nSyntax:\n\n    set overflow {float | NaN | undefined}\n    unset overflow\n\nThis version of gnuplot supports 64-bit integer arithmetic. This means that for values from 2`^`53 to 2`^`63 (roughly 10`^`16 to 10`^`19) integer evaluation preserves more precision than evaluation using IEEE 754 floating point arithmetic. However unlike the IEEE floating point representation, which sacrifices precision to span a total range of roughly \\[-10`^`307 : 10`^`307\\], integer operations that result in values outside the range \\[-2`^`63 : 2`^`63\\] overflow. The **set overflow** command lets you control what happens in case of overflow. See options below.\n\n**set overflow** is the same as **set overflow float**. It causes the result to be returned as a real number rather than as an integer. This is the default.\n\nThe command **unset overflow** causes integer arithmetic overflow to be ignored. No error is shown. This may be desirable if your platform allows only 32-bit integer arithmetic and you want to approximate the behaviour of gnuplot versions prior to 5.4.\n\nThe **reset** command does not affect the state of overflow handling.\n\nEarlier gnuplot versions were limited to 32-bit arithmetic and ignored integer overflow. Note, however, that some built-in operators did not use integer arithmetic at all, even when given integer arguments. This included the exponentiation operator N\\*\\*M and the summation operator (see **[summation](expressions#summation)**). These operations now return an integer value when given integer arguments, making them potentially susceptible to overflow and thus affected by the state of **set overflow**.\n\n### Float\n\nIf an integer arithmetic expression overflows the limiting range, \\[-2`^`63 : 2`^`63\\] for 64-bit integers, the result is returned as a floating point value instead. This is not treated as an error. Example:\n\n    gnuplot> set overflow float\n    gnuplot> A = 2**62 - 1;  print A, A+A, A+A+A\n    4611686018427387903 9223372036854775806 1.38350580552822e+19\n\n### NaN\n\nIf an integer arithmetic expression overflows the limiting range, \\[-2`^`63 : 2`^`63\\] for 64-bit integers, the result is returned as NaN (Not a Number). This is not treated as an error. Example:\n\n    gnuplot> set overflow NaN\n    gnuplot> print 10**18, 10**19\n    1000000000000000000 NaN\n\n### Undefined\n\nIf an integer arithmetic expression overflows the limiting range, \\[-2`^`63 : 2`^`63\\] for 64-bit integers, the result is undefined. This is treated as an error. Example:\n\n    gnuplot> set overflow undefined\n    gnuplot> A = 10**19\n                 ^\n             undefined value\n\n### Affected operations\n\nThe **set overflow** state affects the arithmetic operators\n\n    + - * / **\n\nand the built-in summation operation **sum**.\n\nAll of these operations will return an integer result if all of the arguments are integers, so long as no overflow occurs during evaluation.\n\nThe **set overflow** state does not affect logical or bit operations\n\n    << >>  | ^ &\n\nIf overflow occurs at any point during the course of evaluating of a summation **set overflow float** will cause the result to be returned as a real number even if the final sum is within the range of integer representation.\n\n## Palette\n\nThe palette is a set of colors, usually ordered in the form of one or more stepped gradients, used for **pm3d** surfaces and other graph elements colored by z value. Colors in the current palette are automatically mapped from plot coordinates z values or an extra data column of gray values. Palette colors also can be accessed explicitly in a color specification (see **[colorspec](linetypes_colors_styles#colorspec)**)\n\n- as a **gray value** also known as **palette fraction** in the range \\[0:1\\]\n- as a **z value** corresponding to the z coordinate of a plot element\n- as a **cb value** in the range \\[cbmin:cbmax\\] (see **[set cbrange](set_show#set_cbrange)**)\n\nThe current palette is shown by default in a separate **colorbox** drawn next to plots that use plot style **pm3d**. The colorbox can be manually selected or disabled. See **[set colorbox](set_show#set_colorbox)**.\n\nSyntax:\n\n    set palette\n    set palette {\n               { gray | color }\n               { gamma <gamma> }\n               {   rgbformulae <r>,<g>,<b>\n                 | defined { ( <gray1> <color1> {, <grayN> <colorN>}... ) }\n                 | file '<filename>' {datafile-modifiers}\n                 | functions <R>,<G>,<B>\n               }\n               { cubehelix {start <val>} {cycles <val>} {saturation <val>} }\n               { model { RGB | HSV | CMY } }\n               { positive | negative }\n               { nops_allcF | ps_allcF }\n               { maxcolors <maxcolors> }\n             }\n    show palette\n    show palette palette <n> {{float | int}}\n    show palette gradient\n    show palette fit2rgbformulae\n    show palette rgbformulae\n    show colornames\n\n**set palette** (i.e. without options) sets up the default values. Otherwise, the options can be given in any order. **show palette** shows the current palette properties.\n\n**show palette gradient** displays the gradient defining the palette (if appropriate). **show palette rgbformulae** prints the available fixed gray –\\> color transformation formulae. **show colornames** prints the known color names.\n\n**show palette palette \\<n\\>** prints to the screen or to the file given by **set print** a table of RGB triplets calculated for the current palette settings and a palette having \\<n\\> discrete colors. The default wide table can be limited to 3 columns of r,g,b float values \\[0..1\\] or integer values \\[0..255\\] by options float or int, respectively. This way, the current gnuplot color palette can be loaded into other imaging applications, for example Octave. Alternatively, the **test palette** command will plot the R,G,B profiles for the current palette and leave the profile values in a datablock $PALETTE.\n\nThe following options determine the coloring properties.\n\nFigure using this palette can be **gray** or **color**. For instance, in **pm3d** color surfaces the gray of each small spot is obtained by mapping the averaged z-coordinate of the 4 corners of surface quadrangles into the range \\[min_z,max_z\\] providing range of grays \\[0:1\\]. This value can be used directly as the gray for gray maps. The color map requires a transformation gray –\\> (R,G,B), i.e. a mapping \\[0:1\\] –\\> (\\[0:1\\],\\[0:1\\],\\[0:1\\]).\n\nBasically two different types of mappings can be used: Analytic formulae to convert gray to color, or discrete mapping tables which are interpolated. **palette rgbformulae** and **palette functions** use analytic formulae whereas **palette defined** and **palette file** use interpolated tables. **palette rgbformulae** reduces the size of postscript output to a minimum.\n\nThe command **show palette fit2rgbformulae** finds the best matching **set palette rgbformulae** for the current **set palette**. Naturally, it makes sense to use it for non-rgbformulae palettes. This command can be found useful mainly for external programs using the same rgbformulae definition of palettes as gnuplot, like zimg ( [http://zimg.sourceforge.net ](http://zimg.sourceforge.net)\n\n).\n\n**set palette gray** switches to a gray only palette. **set palette rgbformulae**, **set palette defined**, **set palette file** and **set palette functions** switch to a color mapping. **set palette color** is an easy way to switch back from the gray palette to the last color mapping.\n\nAutomatic gamma correction via **set palette gamma \\<gamma\\>** can be done for gray maps (**set palette gray**) and for the **cubehelix** color palette schemes. Gamma = 1 produces a linear ramp of intensity. See **[test palette](test#test_palette)**.\n\nMany terminals support only discrete number of colors (e.g. 256 colors in gif). After the default gnuplot linetype colors are allocated, the rest of the available colors are by default reserved for pm3d. Thus a multiplot using multiple palettes could fail because the first palette has used all the available color positions. You can mitigate this limitation by using **set palette maxcolors \\<N\\>** with a reasonably small value of N. This option causes N discrete colors to be selected from a continuous palette sampled at equally spaced intervals. If you want unequal spacing of N discrete colors, use **set palette defined** instead of a single continuous palette.\n\nRGB color space might not be the most useful color space to work in. For that reason you may change the color space **model** to one of **RGB**, **HSV**, **CMY**. Using color names for **set palette defined** tables and a color space other than RGB will result in funny colors. All explanation have been written for RGB color space, so please note, that **R** can be **H**, or **C**, depending on the actual color space (**G** and **B** accordingly).\n\nAll values for all color spaces are limited to \\[0,1\\].\n\nRGB stands for Red, Green, Blue; CMY stands for Cyan, Magenta, Yellow; HSV stands for Hue, Saturation, Value. For more information on color models see: [http://en.wikipedia.org/wiki/Color_space ](http://en.wikipedia.org/wiki/Color_space)\n\nNote: Earlier gnuplot versions accepted YIQ and XYZ color space models also, but the implementation was never complete or correct.\n\n### Rgbformulae\n\nFor **rgbformulae** three suitable mapping functions have to be chosen. This is done via **rgbformulae \\<r\\>,\\<g\\>,\\<b\\>**. The available mapping functions are listed by **show palette rgbformulae**. Default is **7,5,15**, some other examples are **3,11,6**, **21,23,3** or **3,23,21**. Negative numbers, like **3,-11,-6**, mean inverted color (i.e. 1-gray passed into the formula, see also **[positive](set_show#positive)** and **[negative](set_show#negative)** options below).\n\nSome nice schemes in RGB color space\n\n    7,5,15   ... traditional pm3d (black-blue-red-yellow)\n    3,11,6   ... green-red-violet\n    23,28,3  ... ocean (green-blue-white); try also all other permutations\n    21,22,23 ... hot (black-red-yellow-white)\n    30,31,32 ... color printable on gray (black-blue-violet-yellow-white)\n    33,13,10 ... rainbow (blue-green-yellow-red)\n    34,35,36 ... AFM hot (black-red-yellow-white)\n\nA full color palette in HSV color space\n\n    3,2,2    ... red-yellow-green-cyan-blue-magenta-red\n\nPlease note that even if called **rgbformulae** the formulas might actually determine the \\<H\\>,\\<S\\>,\\<V\\> or \\<X\\>,\\<Y\\>,\\<Z\\> or ... color components as usual.\n\nUse **positive** and **negative** to invert the figure colors.\n\nNote that it is possible to find a set of the best matching rgbformulae for any other color scheme by the command\n\n    show palette fit2rgbformulae\n\n### Defined\n\nGray-to-rgb mapping can be manually set by use of **palette defined**: A color gradient is defined and used to give the rgb values. Such a gradient is a piecewise linear mapping from gray values in \\[0,1\\] to the RGB space \\[0,1\\]x\\[0,1\\]x\\[0,1\\]. You must specify the gray values and the corresponding RGB values between which linear interpolation will be done.\n\nSyntax:\n\n    set palette  defined { ( <gray1> <color1> {, <grayN> <colorN>}... ) }\n\n\\<grayX\\> are gray values which are mapped to \\[0,1\\] and \\<colorX\\> are the corresponding rgb colors. The color can be specified in three different ways:\n\n    <color> :=  { <r> <g> <b> | '<color-name>' | '#rrggbb' }\n\nEither by three numbers (each in \\[0,1\\]) for red, green and blue, separated by whitespace, or the name of the color in quotes or X style color specifiers also in quotes. You may freely mix the three types in a gradient definition, but the named color \"red\" will be something strange if RGB is not selected as color space. Use **show colornames** for a list of known color names.\n\nPlease note, that even if written as \\<r\\>, this might actually be the \\<H\\> component in HSV color space depending on the selected color model.\n\nThe \\<gray\\> values have to form an ascending sequence of real numbers; the sequence will be automatically rescaled to \\[0,1\\].\n\n**set palette defined** (without a gradient definition in braces) switches to RGB color space and uses a preset full-spectrum color gradient. Use **show palette gradient** to display the gradient.\n\nExamples:\n\nTo produce a gray palette (useless but instructive) use:\n\n    set palette model RGB\n    set palette defined ( 0 \"black\", 1 \"white\" )\n\nTo produce a blue yellow red palette use (all equivalent):\n\n    set palette defined ( 0 \"blue\", 1 \"yellow\", 2 \"red\" )\n    set palette defined ( 0 0 0 1, 1 1 1 0, 2 1 0 0 )\n    set palette defined ( 0 \"#0000ff\", 1 \"#ffff00\", 2 \"#ff0000\" )\n\nTo produce some rainbow-like palette use:\n\n    set palette defined ( 0 \"blue\", 3 \"green\", 6 \"yellow\", 10 \"red\" )\n\nFull color spectrum within HSV color space:\n\n    set palette model HSV\n    set palette defined ( 0 0 1 1, 1 1 1 1 )\n    set palette defined ( 0 0 1 0, 1 0 1 1, 6 0.8333 1 1, 7 0.8333 0 1)\n\nApproximate the default palette used by MATLAB:\n\n    set pal defined (1 '#00008f', 8 '#0000ff', 24 '#00ffff', \\\n                     40 '#ffff00', 56 '#ff0000', 64 '#800000')\n\nTo produce a palette with only a few, equally-spaced colors:\n\n    set palette model RGB maxcolors 4\n    set palette defined ( 0 \"yellow\", 1 \"red\" )\n\n'Traffic light' palette (non-smooth color jumps at gray = 1/3 and 2/3).\n\n    set palette model RGB\n    set palette defined (0 \"dark-green\", 1 \"green\", \\\n                         1 \"yellow\",     2 \"dark-yellow\", \\\n                         2 \"red\",        3 \"dark-red\" )\n\n### Functions\n\nUse **set palette functions \\<Rexpr\\>, \\<Gexpr\\>, \\<Bexpr\\>** to define three formulae for the R(gray), G(gray) and B(gray) mapping. The three formulae may depend on the variable **gray** which will take values in \\[0,1\\] and should also produce values in \\[0,1\\]. Please note that \\<Rexpr\\> might be a formula for the H-value if HSV color space has been chosen (same for all other formulae and color spaces).\n\nExamples:\n\nTo produce a full color palette use:\n\n    set palette model HSV functions gray, 1, 1\n\nA nice black to gold palette:\n\n    set palette model RGB functions 1.1*gray**0.25, gray**0.75, 0\n\nA gamma-corrected black and white palette\n\n    gamma = 2.2\n    color(gray) = gray**(1./gamma)\n    set palette model RGB functions color(gray), color(gray), color(gray)\n\n### Gray\n\n**set palette gray** switches to a grayscale palette shading from 0.0 = black to 1.0 = white. **set palette color** is an easy way to switch back from the gray palette to the last color mapping.\n\n### Cubehelix\n\nThe \"cubehelix\" option defines a family of palettes in which color (hue) varies along the standard color wheel while at the same time the net intensity increases monotonically as the gray value goes from 0 to 1.\n\n    D A Green (2011) http://arxiv.org/abs/1108.5083\n\n**start** defines the starting point along the color wheel in radians. **cycles** defines how many color wheel cycles span the palette range. Larger values of **saturation** produce more saturated color; saturation \\> 1 may lead to clipping of the individual RGB components and to intensity becoming non-monotonic. The palette is also affected by **set palette gamma**. The default values are\n\n    set palette cubehelix start 0.5 cycles -1.5 saturation 1\n    set palette gamma 1.5\n\n### File\n\n**set palette file** is basically a **set palette defined (\\<gradient\\>)** where \\<gradient\\> is read from a datafile. Either 4 columns (gray,R,G,B) or just three columns (R,G,B) have to be selected via the **using** data file modifier. In the three column case, the line number will be used as gray. The gray range is automatically rescaled to \\[0,1\\]. The file is read as a normal data file, so all datafile modifiers can be used. Please note, that **R** might actually be e.g. **H** if HSV color space is selected.\n\nAs usual \\<filename\\> may be **'-'** which means that the data follow the command inline and are terminated by a single **e** on a line of its own.\n\nUse **show palette gradient** to display the gradient.\n\nExamples:\n\nRead in a palette of RGB triples each in range \\[0,255\\]:\n\n    set palette file 'some-palette' using ($1/255):($2/255):($3/255)\n\nEquidistant rainbow (blue-green-yellow-red) palette:\n\n    set palette model RGB file \"-\"\n    0 0 1\n    0 1 0\n    1 1 0\n    1 0 0\n    e\n\nBinary palette files are supported as well, see **[binary general](plot#binary_general)**. Example: put 64 triplets of R,G,B doubles into file palette.bin and load it by\n\n    set palette file \"palette.bin\" binary record=64 using 1:2:3\n\n### Gamma correction\n\nFor gray mappings gamma correction can be turned on by **set palette gamma \\<gamma\\>**. \\<gamma\\> defaults to 1.5 which is quite suitable for most terminals.\n\nThe gamma correction is applied to the cubehelix color palette family, but not to other palette coloring schemes. However, you may easily implement gamma correction for explicit color functions.\n\nExample:\n\n    set palette model RGB\n    set palette functions gray**0.64, gray**0.67, gray**0.70\n\nTo use gamma correction with interpolated gradients specify intermediate gray values with appropriate colors. Instead of\n\n    set palette defined ( 0 0 0 0, 1 1 1 1 )\n\nuse e.g.\n\n    set palette defined ( 0 0 0 0, 0.5 .73 .73 .73, 1 1 1 1 )\n\nor even more intermediate points until the linear interpolation fits the \"gamma corrected\" interpolation well enough.\n\n### Postscript\n\nIn order to reduce the size of postscript files, the gray value and not all three calculated r,g,b values are written to the file. Therefore the analytical formulae are coded directly in the postscript language as a header just before the pm3d drawing, see /g and /cF definitions. Usually, it makes sense to write therein definitions of only the 3 formulae used. But for multiplot or any other reason you may want to manually edit the transformations directly in the postscript file. This is the default option **nops_allcF**. Using the option **ps_allcF** writes postscript definitions of all formulae. This you may find interesting if you want to edit the postscript file in order to have different palettes for different surfaces in one graph. Well, you can achieve this functionality by **multiplot** with fixed **origin** and **size**.\n\nIf you are writing a pm3d surface to a postscript file, it may be possible to reduce the file size by up to 50% by the enclosed awk script **pm3dCompress.awk**. If the data lies on a rectangular grid, even greater compression may be possible using the script **pm3dConvertToImage.awk**. Usage:\n\n    awk -f pm3dCompress.awk thefile.ps >smallerfile.ps\n    awk -f pm3dConvertToImage.awk thefile.ps >smallerfile.ps\n\n## Parametric\n\nThe **set parametric** command changes the meaning of **plot** (**splot**) from normal functions to parametric functions. The command **unset parametric** restores the plotting style to normal, single-valued expression plotting.\n\nSyntax:\n\n    set parametric\n    unset parametric\n    show parametric\n\nFor 2D plotting, a parametric function is determined by a pair of parametric functions operating on a parameter. An example of a 2D parametric function would be **plot sin(t),cos(t)**, which draws a circle (if the aspect ratio is set correctly — see **[set size](set_show#set_size)**). **gnuplot** will display an error message if both functions are not provided for a parametric **plot**.\n\nFor 3D plotting, the surface is described as x=f(u,v), y=g(u,v), z=h(u,v). Therefore a triplet of functions is required. An example of a 3D parametric function would be **cos(u)\\*cos(v),cos(u)\\*sin(v),sin(u)**, which draws a sphere. **gnuplot** will display an error message if all three functions are not provided for a parametric **splot**.\n\nThe total set of possible plots is a superset of the simple f(x) style plots, since the two functions can describe the x and y values to be computed separately. In fact, plots of the type t,f(t) are equivalent to those produced with f(x) because the x values are computed using the identity function. Similarly, 3D plots of the type u,v,f(u,v) are equivalent to f(x,y).\n\nNote that the order the parametric functions are specified is xfunction, yfunction (and zfunction) and that each operates over the common parametric domain.\n\nAlso, the **set parametric** function implies a new range of values. Whereas the normal f(x) and f(x,y) style plotting assume an xrange and yrange (and zrange), the parametric mode additionally specifies a trange, urange, and vrange. These ranges may be set directly with **set trange**, **set urange**, and **set vrange**, or by specifying the range on the **plot** or **splot** commands. Currently the default range for these parametric variables is \\[-5:5\\]. Setting the ranges to something more meaningful is expected.\n\n## Paxis\n\nSyntax:\n\n    set paxis <axisno> {range <range-options> | tics <tic-options>}\n    set paxis <axisno> label <label-options> { offset <radial-offset> }\n    show paxis <axisno> {range | tics}\n\nThe **set paxis** command is equivalent to the **set xrange** and **set xtics** commands except that it acts on one of the axes p1, p2, ... used in parallel axis plots and spiderplots. See **[parallelaxes](parallelaxes#parallelaxes)**, **[set xrange](set_show#set_xrange)**, and **[set xtics](set_show#set_xtics)**. The normal options to the range and tics commands are accepted although not all options make sense for parallel axis plots.\n\n**set paxis \\<axisno\\> label \\<label-options\\>** is relevant to spiderplots but ignored otherwise. Axes of a parallel axis plot can be labeled using the **title** option of the plot command, which generates an xtic label. Note that this may require also **set xtics**.\n\nThe axis linetype properties are controlled using **[set style parallelaxis](set_show#set_style_parallelaxis)**.\n\n## Pixmap\n\nSyntax:\n\n    set pixmap <index> \"filename\" at <position>\n               {width <w> | height <h> | size <w>,<h>}\n               {front|back|behind} {center}\n    show pixmaps\n    unset pixmaps\n    unset pixmap <index>\n\nThe **set pixmap** command is similar to **set object** in that it defines an object that will appear on subsequent plots. The rectangular array of red/green/blue/alpha values making up the pixmap are read from a png, jpeg, or gif file. The position and extent occupied by the pixmap in the gnuplot output may be specified in any coordinate system (see **[coordinates](coordinates#coordinates)**). The coordinates given by **at \\<position\\>** refer to the lower left corner of the pixmap unless keyword **center** is present.\n\nIf the x-extent of the rendered pixmap is set using **width \\<x-extent\\>** the aspect ratio of the original image is retained and neither the aspect ratio nor the orientation of the pixmap changes with axis scaling or rotation. Similarly if the y-extent is set using **height \\<y-extent\\>**. If both the x-extent and y-extent are given using **size \\<x-extent\\> \\<y-extent\\>** this overrides the original aspect ratio. If no size is set then the original size in pixels is used (the effective size is then terminal-dependent).\n\nPixmaps are not clipped to the border of the plot. As an exception to the general behaviour of objects and layers, a pixmap assigned to layer **behind** is rendered for only the first plot in a multiplot. This allows all panels in a multiplot to share a single background pixmap.\n\nExamples:\n\n    # Use a gradient as the background for all plotting\n    # Both x and y will be resized to fill the entire canvas\n    set pixmap 1 \"gradient.png\"\n    set pixmap 1 at screen 0, 0 size screen 1, 1 behind\n\n    # Place a logo at the lower right of each page plotted\n    set pixmap 2 \"logo.jpg\"\n    set pixmap 2 at screen 0.95, 0 width screen 0.05 behind\n\n    # Place a small image at some 3D coordinate\n    # It will move as if attached to the surface being plotted\n    # but will always face forward and remain upright\n    set pixmap 3 \"image.png\" at my_x, my_y, f(my_x,my_y) width screen .05\n    splot f(x,y)\n\n## Plot\n\nThe **show plot** command shows the current plotting command as it results from the last **plot** and/or **splot** and possible subsequent **replot** commands.\n\nIn addition, the **show plot add2history** command adds this current plot command into the **history**. It is useful if you have used **replot** to add more curves to the current plot and you want to edit the whole command now.\n\n## Pm3d\n\npm3d is an **splot** style for drawing palette-mapped 3d and 4d data as color/gray maps and surfaces. It allows plotting gridded or non-gridded data without preprocessing. pm3d style options also affect solid-fill polygons used to construct other 3D plot elements.\n\nSyntax (the options can be given in any order):\n\n    set pm3d {\n               { at <position> }\n               { interpolate <steps/points in scan, between scans> }\n               { scansautomatic | scansforward | scansbackward\n                                | depthorder {base} }\n               { flush { begin | center | end } }\n               { ftriangles | noftriangles }\n               { clip {z} | clip1in | clip4in }\n               { {no}clipcb }\n               { corners2color\n                 { mean|geomean|harmean|rms|median|min|max|c1|c2|c3|c4 }\n               }\n               { {no}lighting\n                 {primary <fraction>} {specular <fraction>} {spec2 <fraction>}\n               }\n               { border {<linestyle-options>}}\n               { implicit | explicit }\n               { map }\n             }\n    show pm3d\n    unset pm3d\n\nNote that pm3d plots are plotted sequentially in the order given in the splot command. Thus earlier plots may be obscured by later plots. To avoid this you can use the **depthorder** scan option.\n\nThe pm3d surfaces can be projected onto the **top** or **bottom** of the view box. See **[pm3d position](set_show#pm3d_position)**. The following command draws three color surfaces at different altitudes:\n\n    set border 4095\n    set pm3d at s\n    splot 10*x with pm3d at b, x*x-y*y, x*x+y*y with pm3d at t\n\nSee also help for **[set palette](set_show#set_palette)**, **[set cbrange](set_show#set_cbrange)**, **[set colorbox](set_show#set_colorbox)**, and the demo file **demo/pm3d.dem**.\n\n### Implicit\n\nA pm3d color surface is drawn if the splot command specifies **with pm3d**, if the data or function **style** is set to pm3d globally, or if the pm3d mode is **set pm3d implicit**. In the latter two cases, the pm3d surface is draw in addition to the mesh produced by the style specified in the plot command. E.g.\n\n    splot 'fred.dat' with lines, 'lola.dat' with lines\n\nwould draw both a mesh of lines and a pm3d surface for each data set. If the option **explicit** is on (or **implicit** is off) only plots specified by the **with pm3d** attribute are plotted with a pm3d surface, e.g.:\n\n    splot 'fred.dat' with lines, 'lola.dat' with pm3d\n\nwould plot 'fred.dat' with lines (only) and 'lola.dat' with a pm3d surface.\n\nOn gnuplot start-up, the mode is **explicit**. For historical and compatibility reasons, the commands **set pm3d;** (i.e. no options) and **set pm3d at X ...** (i.e. **at** is the first option) change the mode to **implicit**. The command **set pm3d;** sets other options to their default state.\n\nIf you set the default data or function style to **pm3d**, e.g.:\n\n    set style data pm3d\n\nthen the options **implicit** and **explicit** have no effect.\n\n### Algorithm\n\nLet us first describe how a map/surface is drawn. The input data come from an evaluated function or from an **splot data file**. Each surface consists of a sequence of separate scans (isolines). The pm3d algorithm fills the region between two neighbouring points in one scan with another two points in the next scan by a gray (or color) according to z-values (or according to an additional 'color' column, see help for **[using](plot#using)**) of these 4 corners; by default the 4 corner values are averaged, but this can be changed by the option **corners2color**. In order to get a reasonable surface, the neighbouring scans should not cross and the number of points in the neighbouring scans should not differ too much; of course, the best plot is with scans having same number of points. There are no other requirements (e.g. the data need not be gridded). Another advantage is that the pm3d algorithm does not draw anything outside of the input (measured or calculated) region.\n\nSurface coloring works with the following input data:\n\n1\\. splot of function or of data file with one or three data columns: The gray/color scale is obtained by mapping the averaged (or **corners2color**) z-coordinate of the four corners of the above-specified quadrangle into the range \\[min_color_z,max_color_z\\] of **zrange** or **cbrange** providing a gray value in the range \\[0:1\\]. This value can be used directly as the gray for gray maps. The normalized gray value can be further mapped into a color — see **[set palette](set_show#set_palette)** for the complete description.\n\n2\\. splot of data file with two or four data columns: The gray/color value is obtained by using the last-column coordinate instead of the z-value, thus allowing the color and the z-coordinate be mutually independent. This can be used for 4d data drawing.\n\nOther notes:\n\n1\\. The term 'scan' referenced above is used more among physicists than the term 'iso_curve' referenced in gnuplot documentation and sources. You measure maps recorded one scan after another scan, that's why.\n\n2\\. The 'gray' or 'color' scale is a linear mapping of a continuous variable onto a smoothly varying palette of colors. The mapping is shown in a rectangle next to the main plot. This documentation refers to this as a \"colorbox\", and refers to the indexing variable as lying on the colorbox axis. See **[set colorbox](set_show#set_colorbox)**, **[set cbrange](set_show#set_cbrange)**.\n\n### Lighting\n\nBy default the colors assigned to pm3d objects are not dependent on orientation or viewing angle. This state corresponds to **set pm3d nolighting**. The command **set pm3d lighting** selects a simple lighting model consisting of a single fixed source of illumination contributing 50% of the overall lighting. The strength of this light relative to the ambient illumination can be adjusted by **set pm3d lighting primary \\<fraction\\>**. Inclusion of specular highlighting can be adjusted by setting a fractional contribution:\n\n    set pm3d lighting primary 0.50 specular 0.0   # no highlights\n    set pm3d lighting primary 0.50 specular 0.6   # strong highlights\n\nSolid-color pm3d surfaces tend to look very flat without specular highlights. Since the highlights from a single source only affect one side of the surface, a second spotlight source may be desirable to add specular highlights from the opposite direction. This is controlled by \"spec2 \\<contribution\\>\". EXPERIMENTAL (details may change in a future version): The second spotlight is a pure red light source that by default contributes nothing (spec2 0.0). See also hidden_compare.dem [(comparison of hidden3d and pm3d treatment of solid-color surfaces) ](http://www.gnuplot.info/demo_5.4/hidden_compare.html)\n\n### Position\n\nColor surface can be drawn at the base or top (then it is a gray/color planar map) or at z-coordinates of surface points (gray/color surface). This is defined by the **at** option with a string of up to 6 combinations of **b**, **t** and **s**. For instance, **at b** plots at bottom only, **at st** plots firstly surface and then top map, while **at bstbst** will never by seriously used.\n\nColored quadrangles are plotted one after another. When plotting surfaces (**at s**), the later quadrangles overlap (overdraw) the previous ones. (Gnuplot is not virtual reality tool to calculate intersections of filled polygon meshes.) You may try to switch between **scansforward** and **scansbackward** to force the first scan of the data to be plotted first or last. The default is **scansautomatic** where gnuplot makes a guess about scans order. On the other hand, the **depthorder** option completely reorders the quadrangles. The rendering is performed after a depth sorting, which allows to visualize even complicated surfaces; see **[pm3d depthorder](set_show#pm3d_depthorder)** for more details.\n\n### Scanorder\n\n    set pm3d {scansautomatic | scansforward | scansbackward | depthorder}\n\nBy default the quadrangles making up a pm3d solid surface are rendered in the order they are encountered along the surface grid points. This order may be controlled by the options **scansautomatic**\\|**scansforward**\\|**scansbackward**. These scan options are not in general compatible with hidden-surface removal.\n\nIf two successive scans do not have same number of points, then it has to be decided whether to start taking points for quadrangles from the beginning of both scans (**flush begin**), from their ends (**flush end**) or to center them (**flush center**). Note, that **flush (center\\|end)** are incompatible with **scansautomatic**: if you specify **flush center** or **flush end** and **scansautomatic** is set, it is silently switched to **scansforward**.\n\nIf two subsequent scans do not have the same number of points, the option **ftriangles** specifies whether color triangles are drawn at the scan tail(s) where there are not enough points in either of the scans. This can be used to draw a smooth map boundary.\n\nGnuplot does not do true hidden surface removal for solid surfaces, but often it is sufficient to render the component quadrangles in order from furthest to closest. This mode may be selected using the option\n\n    set pm3d depthorder\n\nNote that the global option **set hidden3d** does not affect pm3d surfaces.\n\nThe **depthorder** option by itself tends to produce bad results when applied to the long thin rectangles generated by **splot with boxes**. It works better to add the keyword **base**, which performs the depth sort using the intersection of the box with the plane at z=0. This type of plot is further improved by adding a lighing model. Example:\n\n    set pm3d depthorder base\n    set pm3d lighting\n    set boxdepth 0.4\n    splot $DATA using 1:2:3 with boxes\n\n### Clipping\n\nSyntax:\n\n    set pm3d {clip {z} | clip1in | clip4in}\n    set pm3d {no}clipcb\n\nThe component quadrangles of a pm3d surface or other 3D object are by default smoothly clipped against the current zrange. This is a change from earlier gnuplot versions.\n\nAlternatively, surfaces can be clipped by rendering whole quadrangles but only those with all 4 corners in-range on x, y, and z (**set pm3d clip4in**), or only those with at least one corner in-range on x, y, and z (**set pm3d clip1in**). The options **clip**, **clip1in**, and **clip4in** are mutually exclusive.\n\nSeparate from clipping based on spatial x, y, and z coordinates, quadrangles can be rendered or not based on extreme palette color values. **clipcb**: (default) palette color values \\< cbmin are clipped to equal cbmin; palette color values \\> cbmax are clipped to equal cbmax. **noclipcb**: quadrangles with color value outside cbrange are not drawn at all.\n\n### Color_assignment\n\nThe default pm3d coloring assigns an individual color to each quadrangle of the surface grid. For alternative coloring schemes that assign uniform color to the entire surface, see **[pm3d fillcolor](set_show#pm3d_fillcolor)**.\n\nA single gray/color value (i.e. not a gradient) is assigned to each quadrangle. This value is calculated from the z-coordinates the four quadrangle corners according to **corners2color \\<option\\>**. The value is then used to select a color from the current palette. See **[set palette](set_show#set_palette)**. It is not possible to change palettes inside a single **splot** command.\n\nIf a fourth column of data is provided, the coloring of individual quadrangles works as above except that the color value is distinct from the z value. As a separate coloring option, the fourth data column may provide instead an RGB color. See **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**. In this case the plotting command must be\n\n    splot ... using 1:2:3:4 with pm3d lc rgb variable\n\nNotice that ranges of z-values and color-values for surfaces are adjustable independently by **set zrange**, **set cbrange**, **set log z**, **set log cb**, etc.\n\n### Corners2color\n\nThe color of each quadrangle in a pm3d surface is assigned based on the color values of its four bounding vertices. The options 'mean' (default), 'geomean', 'harmean, 'rms', and 'median' produce various kinds of surface color smoothing, while options 'min' and 'max' choose minimal or maximal value, respectively. This may not be desired for pixel images or for maps with sharp and intense peaks, in which case the options 'c1', 'c2', 'c3' or 'c4' can be used instead to assign the quadrangle color based on the z-coordinate of only one corner. Some experimentation may be needed to determine which corner corresponds to 'c1', as the orientation depends on the drawing direction. Because the pm3d algorithm does not extend the colored surface outside the range of the input data points, the 'c\\<j\\>' coloring options will result in pixels along two edges of the grid not contributing to the color of any quadrangle. For example, applying the pm3d algorithm to the 4x4 grid of data points in script **demo/pm3d.dem** (please have a look) produces only (4-1)x(4-1)=9 colored rectangles.\n\n### Border\n\nThe option **set pm3d border {line-properties}** draws bounding lines around each quadrangle as it is rendered. Normally this is used in conjunction with the **depthorder** option to approximate hidden line removal. Note that the global option **set hidden3d** has no effect on pm3d plots. Default line properties (color, width) optionally follow the keyword **border**. These defaults can be overridden later in an splot command.\n\nExample of recommended usage:\n\n    set pm3d at s depthorder border lw 0.2 lt black\n    unset hidden3d\n    unset surf\n    splot x*x+y*y linecolor rgb \"blue\"   # otherwise it would be black\n\n### Fillcolor\n\n    splot FOO with pm3d fillcolor <colorspec>\n\nPlot style **with pm3d** accepts an optional fillcolor in the splot command. This specification is applied to the entire pm3d surface. See **[colorspec](linetypes_colors_styles#colorspec)**. Most fillcolor specifications will result in a single solid color, which is hard to interpret visually unless there is also a lighting model present to distinguish surface components based on orientation. See **[pm3d lighting](set_show#pm3d_lighting)**.\n\nThere are a few special cases. **with pm3d fillcolor palette** would produce the same result as the default pm3d palette-based coloring, and is therefore not a useful option. **with pm3d fillcolor linestyle N** is more interesting. This variant assigns distinct colors to the top and bottom of the pm3d surface, similar to the color scheme used by gnuplot's **hidden3d** mode. Linestyle N is used for the top surface; linestyle N+1 for the bottom surface. Note that \"top\" and \"bottom\" depend on the scan order, so that the colors are inverted for **pm3d scansbackward** as compared to **pm3d scansforward**. This coloring option works best with **pm3d depthorder**, however, which unfortunately does not allow you to control the scan order so you may have to instead swap the colors defined for linestyles N and N+1.\n\n### Interpolate\n\nThe option **interpolate m,n** will interpolate between grid points to generate a finer mesh. For data files, this smooths the color surface and enhances the contrast of spikes in the surface. When working with functions, interpolation makes little sense. It would usually make more sense to increase **samples** and **isosamples**.\n\nFor positive m and n, each quadrangle or triangle is interpolated m-times and n-times in the respective direction. For negative m and n, the interpolation frequency is chosen so that there will be at least \\|m\\| and \\|n\\| points drawn; you can consider this as a special gridding function.\n\nNote: **interpolate 0,0**, will automatically choose an optimal number of interpolated surface points.\n\nNote: Currently color interpolation is always linear, even if corners2color is set to a nonlinear scheme such as the geometric mean.\n\n### Deprecated_options\n\nThe deprecated option **set pm3d map** was equivalent to **set pm3d at b; set view map; set style data pm3d; set style func pm3d;**\n\nThe deprecated option **set pm3d hidden3d N** was equivalent to **set pm3d border ls N**.\n\n## Pointintervalbox\n\nThe **pointinterval** and **pointnumber** properties of a line type are used only in plot style **linespoints**. A negative value of pointinterval or pointnumber, e.g. -N, means that before the selected set of point symbols are drawn a box (actually circle) behind each point symbol is blanked out by filling with the background color. The command **set pointintervalbox** controls the radius of this blanked-out region. It is a multiplier for the default radius, which is equal to the point size.\n\n## Pointsize\n\nThe **set pointsize** command scales the size of the points used in plots.\n\nSyntax:\n\n    set pointsize <multiplier>\n    show pointsize\n\nThe default is a multiplier of 1.0. Larger pointsizes may be useful to make points more visible in bitmapped graphics.\n\nThe pointsize of a single plot may be changed on the **plot** command. See **[plot with](plot#plot_with)** for details.\n\nPlease note that the pointsize setting is not supported by all terminal types.\n\n## Polar\n\nThe **set polar** command changes the meaning of the plot from rectangular coordinates to polar coordinates.\n\nSyntax:\n\n    set polar\n    unset polar\n    show polar\n\nIn polar coordinates, the dummy variable (t) represents an angle theta. The default range of t is \\[0:2\\*pi\\], or \\[0:360\\] if degree units have been selected (see **[set angles](set_show#set_angles)**).\n\nThe command **unset polar** changes the meaning of the plot back to the default rectangular coordinate system.\n\nThe **set polar** command is not supported for **splot**s. See the **[set mapping](set_show#set_mapping)** command for similar functionality for **[splot](splot#splot)**s.\n\nWhile in polar coordinates the meaning of an expression in t is really r = f(t), where t is an angle of rotation. The trange controls the domain (the angle) of the function. The r, x and y ranges control the extent of the graph in the x and y directions. Each of these ranges, as well as the rrange, may be autoscaled or set explicitly. For details, see **[set rrange](set_show#set_rrange)** and **[set xrange](set_show#set_xrange)**.\n\nExample:\n\n    set polar\n    plot t*sin(t)\n    set trange [-2*pi:2*pi]\n    set rrange [0:3]\n    plot t*sin(t)\n\nThe first **plot** uses the default polar angular domain of 0 to 2\\*pi. The radius and the size of the graph are scaled automatically. The second **plot** expands the domain, and restricts the size of the graph to the area within 3 units of the origin. This has the effect of limiting x and y to \\[-3:3\\].\n\nBy default polar plots are oriented such that theta=0 is at the far right, with theta increasing counterclockwise. You can change both the origin and the sense explicitly. See **[set theta](set_show#set_theta)**.\n\nYou may want to **set size square** to have **gnuplot** try to make the aspect ratio equal to unity, so that circles look circular. Tic marks around the perimeter can be specified using **set ttics**. See also [polar demos (polar.dem) ](http://www.gnuplot.info/demo/polar.html)\n\nand [polar data plot (poldat.dem). ](http://www.gnuplot.info/demo/poldat.html)\n\n## Print\n\nThe **set print** command redirects the output of the **print** command to a file.\n\nSyntax:\n\n    set print\n    set print \"-\"\n    set print \"<filename>\" [append]\n    set print \"|<shell_command>\"\n    set print $datablock [append]\n\n**set print** with no parameters restores output to \\<STDERR\\>. The \\<filename\\> \"-\" means \\<STDOUT\\>. The **append** flag causes the file to be opened in append mode. A \\<filename\\> starting with \"\\|\" is opened as a pipe to the \\<shell_command\\> on platforms that support piping.\n\nThe destination for **print** commands can also be a named data block. Data block names start with '$', see also **[inline data](inline_data_datablocks#inline_data)**. When printing a string to a data block, embedded newline characters are expanded to generate multiple data block entries. This is a CHANGE.\n\n## Psdir\n\nThe **set psdir \\<directory\\>** command controls the search path used by the postscript terminal to find prologue.ps and character encoding files. You can use this mechanism to switch between different sets of locally-customized prolog files. The search order is\n\n    1) The directory specified by `set psdir`, if any\n    2) The directory specified by environmental variable GNUPLOT_PS_DIR\n    3) A built-in header or one from the default system directory\n    4) Directories set by `set loadpath`\n\n## Raxis\n\nThe commands **set raxis** and **unset raxis** toggle whether the polar axis is drawn separately from grid lines and the x axis. If the minimum of the current rrange is non-zero (and not autoscaled), then a white circle is drawn at the center of the polar plot to indicate that the plot lines and axes do not reach 0. The axis line is drawn using the same line type as the plot border. See **[polar](set_show#polar)**, **[rrange](set_show#rrange)**, **[rtics](set_show#rtics)**, **[rlabel](set_show#rlabel)**, **[set grid](set_show#set_grid)**.\n\n## Rgbmax\n\nSyntax:\n\n    set rgbmax {1.0 | 255}\n    unset rgbmax\n\nThe red/green/blue color components of an rgbimage plot are by default interpreted as integers in the range \\[0:255\\]. **set rgbmax 1.0** tells the program that data values used to generate the color components of a plot with **rgbimage** or **rgbalpha** are floating point values in the range \\[0:1\\]. **unset rgbmax** returns to the default integer range \\[0:255\\].\n\n## Rlabel\n\nThis command places a label above the r axis. The label will be drawn whether or not the plot is in polar mode. See **[set xlabel](set_show#set_xlabel)** for additional keywords.\n\n## Rmargin\n\nThe command **set rmargin** sets the size of the right margin. Please see **[set margin](set_show#set_margin)** for details.\n\n## Rrange\n\nThe **set rrange** command sets the range of the radial coordinate for a graph in polar mode. This has the effect of setting both xrange and yrange as well. The resulting xrange and yrange are both \\[-(rmax-rmin) : +(rmax-rmin)\\]. However if you later change the x or y range, for example by zooming, this does not change rrange, so data points continue to be clipped against rrange. Unlike other axes, autoscaling the raxis always results in rmin = 0. The **reverse** autoscaling flag is ignored. Note: Setting a negative value for rmin may produce unexpected results.\n\n## Rtics\n\nThe **set rtics** command places tics along the polar axis. The tics and labels are drawn to the right of the origin. The **mirror** keyword causes them to be drawn also to the left of the origin. See **[polar](set_show#polar)**, **[set xtics](set_show#set_xtics)**, and **[set mxtics](set_show#set_mxtics)** for discussion of keywords.\n\n## Samples\n\nThe default sampling rate of functions, or for interpolating data, may be changed by the **set samples** command. To change the sampling range for a particular plot, see **[plot sampling](plot#plot_sampling)**.\n\nSyntax:\n\n    set samples <samples_1> {,<samples_2>}\n    show samples\n\nBy default, sampling is set to 100 points. A higher sampling rate will produce more accurate plots, but will take longer. This parameter has no effect on data file plotting unless one of the interpolation/approximation options is used. See **[plot smooth](plot#plot_smooth)** re 2D data and **[set cntrparam](set_show#set_cntrparam)** and **[set dgrid3d](set_show#set_dgrid3d)** re 3D data.\n\nWhen a 2D graph is being done, only the value of \\<samples_1\\> is relevant.\n\nWhen a surface plot is being done without the removal of hidden lines, the value of samples specifies the number of samples that are to be evaluated for the isolines. Each iso-v line will have \\<sample_1\\> samples and each iso-u line will have \\<sample_2\\> samples. If you only specify \\<samples_1\\>, \\<samples_2\\> will be set to the same value as \\<samples_1\\>. See also **[set isosamples](set_show#set_isosamples)**.\n\n## Size\n\nSyntax:\n\n    set size {{no}square | ratio <r> | noratio} {<xscale>,<yscale>}\n    show size\n\nThe \\<xscale\\> and \\<yscale\\> values are scale factors for the size of the plot, which includes the graph, labels, and margins.\n\nImportant note:\n\n    In earlier versions of gnuplot, some terminal types used the values from\n    `set size` to control also the size of the output canvas; others did not.\n    Almost all terminals now follow the following convention:\n\n**set term \\<terminal_type\\> size \\<XX\\>, \\<YY\\>** controls the size of the output file, or **canvas**. Please see individual terminal documentation for allowed values of the size parameters. By default, the plot will fill this canvas.\n\n**set size \\<XX\\>, \\<YY\\>** scales the plot itself relative to the size of the canvas. Scale values less than 1 will cause the plot to not fill the entire canvas. Scale values larger than 1 will cause only a portion of the plot to fit on the canvas. Please be aware that setting scale values larger than 1 may cause problems on some terminal types.\n\n**ratio** causes **gnuplot** to try to create a graph with an aspect ratio of \\<r\\> (the ratio of the y-axis length to the x-axis length) within the portion of the plot specified by \\<xscale\\> and \\<yscale\\>.\n\nThe meaning of a negative value for \\<r\\> is different. If \\<r\\>=-1, gnuplot tries to set the scales so that the unit has the same length on both the x and y axes. This is the 2D equivalent to the 3D command **set view equal xy**. If \\<r\\>=-2, the unit on y has twice the length of the unit on x, and so on.\n\nThe success of **gnuplot** in producing the requested aspect ratio depends on the terminal selected. The graph area will be the largest rectangle of aspect ratio \\<r\\> that will fit into the specified portion of the output (leaving adequate margins, of course).\n\n**set size square** is a synonym for **set size ratio 1**.\n\nBoth **noratio** and **nosquare** return the graph to the default aspect ratio of the terminal, but do not return \\<xscale\\> or \\<yscale\\> to their default values (1.0).\n\n**ratio** and **square** have no effect on 3D plots, but do affect 3D projections created using **set view map**. See also **[set view equal](set_show#set_view_equal)**, which forces the x and y axes of a 3D onto the same scale.\n\nExamples:\n\nTo set the size so that the plot fills the available canvas:\n\n    set size 1,1\n\nTo make the graph half size and square use:\n\n    set size square 0.5,0.5\n\nTo make the graph twice as high as wide use:\n\n    set size ratio 2\n\n## Spiderplot\n\nThe **set spiderplot** command switches interpretation of coordinates to a polar system in which each data point is mapped to a position along a radial axis. paxis 1 is always vertical; axes 2 to N proceed clockwise with even spacing. The command must be issued prior to plotting. It has additional effects equivalent to\n\n    set style data spiderplot\n    unset border\n    unset tics\n    set key noautotitle\n    set size ratio 1.0\n\nUse **reset** to restore these after plotting.\n\n## Style\n\nDefault plotting styles are chosen with the **set style data** and **set style function** commands. See **[plot with](plot#plot_with)** for information about how to override the default plotting style for individual functions and data sets. See **plotting styles** or **[plot with](plot#plot_with)** for a complete list of styles.\n\nSyntax:\n\n    set style function <style>\n    set style data <style>\n    show style function\n    show style data\n\nDefault styles for specific plotting elements may also be set.\n\nSyntax:\n\n    set style arrow <n> <arrowstyle>\n    set style boxplot <boxplot style options>\n    set style circle radius <size> {clip|noclip}\n    set style ellipse size <size> units {xy|xx|yy} {clip|noclip}\n    set style fill <fillstyle>\n    set style histogram <histogram style options>\n    set style line <n> <linestyle>\n    set style rectangle <object options> <linestyle> <fillstyle>\n    set style textbox {<n>} {opaque|transparent} {{no}border} {fillcolor}\n\n### Set style arrow\n\nEach terminal has a default set of arrow and point types, which can be seen by using the command **test**. **set style arrow** defines a set of arrow types and widths and point types and sizes so that you can refer to them later by an index instead of repeating all the information at each invocation.\n\nSyntax:\n\n    set style arrow <index> default\n    set style arrow <index> {nohead | head | backhead | heads}\n                            {size <length>,<angle>{,<backangle>} {fixed}}\n                            {filled | empty | nofilled | noborder}\n                            {front | back}\n                            { {linestyle | ls <line_style>}\n                              | {linetype | lt <line_type>}\n                                {linewidth | lw <line_width}\n                                {linecolor | lc <colorspec>}\n                                {dashtype | dt <dashtype>} }\n    unset style arrow\n    show style arrow\n\n\\<index\\> is an integer that identifies the arrowstyle.\n\nIf **default** is given all arrow style parameters are set to their default values.\n\nIf the linestyle \\<index\\> already exists, only the given parameters are changed while all others are preserved. If not, all undefined values are set to the default values.\n\nSpecifying **nohead** produces arrows drawn without a head — a line segment. This gives you yet another way to draw a line segment on the plot. By default, arrows have one head. Specifying **heads** draws arrow heads on both ends of the line.\n\nHead size can be modified using **size \\<length\\>,\\<angle\\>** or **size \\<length\\>,\\<angle\\>,\\<backangle\\>**, where **\\<length\\>** defines length of each branch of the arrow head and **\\<angle\\>** the angle (in degrees) they make with the arrow. **\\<Length\\>** is in x-axis units; this can be changed by **first**, **second**, **graph**, **screen**, or **character** before the \\<length\\>; see **[coordinates](coordinates#coordinates)** for details.\n\nBy default the size of the arrow head is reduced for very short arrows. This can be disabled using the **fixed** keyword after the **size** command.\n\n**\\<backangle\\>** is the angle (in degrees) the back branches make with the arrow (in the same direction as **\\<angle\\>**). It is ignored if the style is **nofilled**.\n\nSpecifying **filled** produces filled arrow heads with a border line around the arrow head. Specifying **noborder** produces filled arrow heads with no border. In this case the tip of the arrow head lies exactly on the endpoint of the vector and the arrow head is slightly smaller overall. Dashed arrows should always use **noborder**, since a dashed border is ugly. Not all terminals support filled arrow heads.\n\nThe line style may be selected from a user-defined list of line styles (see **[set style line](set_show#set_style_line)**) or may be defined here by providing values for **\\<line_type\\>** (an index from the default list of styles) and/or **\\<line_width\\>** (which is a multiplier for the default width).\n\nNote, however, that if a user-defined line style has been selected, its properties (type and width) cannot be altered merely by issuing another **set style arrow** command with the appropriate index and **lt** or **lw**.\n\nIf **front** is given, the arrows are written on top of the graphed data. If **back** is given (the default), the arrow is written underneath the graphed data. Using **front** will prevent a arrow from being obscured by dense data.\n\nExamples:\n\nTo draw an arrow without an arrow head and double width, use:\n\n    set style arrow 1 nohead lw 2\n    set arrow arrowstyle 1\n\nSee also **[set arrow](set_show#set_arrow)** for further examples.\n\n### Boxplot\n\nThe **set style boxplot** command allows you to change the layout of plots created using the **boxplot** plot style.\n\nSyntax:\n\n    set style boxplot {range <r> | fraction <f>}\n                      {{no}outliers} {pointtype <p>}\n                      {candlesticks | financebars}\n                      {medianlinewidth <width>}\n                      {separation <x>}\n                      {labels off | auto | x | x2}\n                      {sorted | unsorted}\n\nThe box in the boxplot always spans the range of values from the first quartile to the third quartile of the data points. The limit of the whiskers that extend from the box can be controlled in two different ways. By default the whiskers extend from each end of the box for a range equal to 1.5 times the interquartile range (i.e. the vertical height of the box proper). Each whisker is truncated back toward the median so that it terminates at a y value belonging to some point in the data set. Since there may be no point whose value is exactly 1.5 times the interquartile distance, the whisker may be shorter than its nominal range. This default corresponds to\n\n    set style boxplot range 1.5\n\nAlternatively, you can specify the fraction of the total number of points that the whiskers should span. In this case the range is extended symmetrically from the median value until it encompasses the requested fraction of the data set. Here again each whisker is constrained to end at a point in the data set. To span 95% of the points in the set\n\n    set style boxplot fraction 0.95\n\nAny points that lie outside the range of the whiskers are considered outliers. By default these are drawn as individual circles (pointtype 7). The option **nooutliers** disables this. If outliers are not drawn they do not contribute to autoscaling.\n\nBy default boxplots are drawn in a style similar to candlesticks, but you have the option of using instead a style similar to finance bars.\n\nA crossbar indicating the median is drawn using the same line type as box boundary. If you want a thicker line for the median\n\n    set style boxplot medianlinewidth 2.0\n\nIf you want no median line, set this to 0.\n\nIf the using specification for a boxplot contains a fourth column, the values in that column will be interpreted as the discrete leveles of a factor variable. In this case more than one boxplots may be drawn, as many as the number of levels of the factor variable. These boxplots will be drawn next to each other, the distance between them is 1.0 by default (in x-axis units). This distance can be changed by the option **separation**.\n\nThe **labels** option governs how and where these boxplots (each representing a part of the dataset) are labeled. By default the value of the factor is put as a tick label on the horizontal axis – x or x2, depending on which one is used for the plot itself. This setting corresponds to option **labels auto**. The labels can be forced to use either of the x or x2 axes – options **labels x** and **labels x2**, respectively –, or they can be turned off altogether with the option **labels off**.\n\nBy default the boxplots corresponding to different levels of the factor variable are not sorted; they will be drawn in the same order the levels are encountered in the data file. This behavior corresponds to the **unsorted** option. If the **sorted** option is active, the levels are first sorted alphabetically, and the boxplots are drawn in the sorted order.\n\nThe **separation**, **labels**, **sorted** and **unsorted** option only have an effect if a fourth column is given the plot specification.\n\nSee **[boxplot](boxplot#boxplot)**, **[candlesticks](candlesticks#candlesticks)**, **[financebars](financebars#financebars)**.\n\n### Set style data\n\nThe **set style data** command changes the default plotting style for data plots.\n\nSyntax:\n\n    set style data <plotting-style>\n    show style data\n\nSee **plotting styles** for the choices. **show style data** shows the current default data plotting style.\n\n### Set style fill\n\nThe **set style fill** command is used to set the default style of the plot elements in plots with boxes, histograms, candlesticks and filledcurves. This default can be superseded by fillstyles attached to individual plots.\n\nNote that there is a separate default fill style for rectangles created by **set obj**. See **[set style rectangle](set_show#set_style_rectangle)**.\n\nSyntax:\n\n    set style fill {empty\n                    | {transparent} solid {<density>}\n                    | {transparent} pattern {<n>}}\n                   {border {lt} {lc <colorspec>} | noborder}\n\nThe **empty** option causes filled areas not to be filled. This is the default.\n\nThe **solid** option causes filling with a solid color, if the terminal supports that. The \\<density\\> parameter specifies the intensity of the fill color. At a \\<density\\> of 0.0, the box is empty, at \\<density\\> of 1.0, the inner area is of the same color as the current linetype. Some terminal types can vary the density continuously; others implement only a few levels of partial fill. If no \\<density\\> parameter is given, it defaults to 1.\n\nThe **pattern** option causes filling to be done with a fill pattern supplied by the terminal driver. The kind and number of available fill patterns depend on the terminal driver. If multiple datasets using filled boxes are plotted, the pattern cycles through all available pattern types, starting from pattern \\<n\\>, much as the line type cycles for multiple line plots.\n\nFill color (**fillcolor \\<colorspec\\>**) is distinct from fill style. I.e. plot elements or objects can share a fillstyle while retaining separate colors. In most places where a fillstyle is accepted you can also specify a fill color. Fillcolor may be abbreviated **fc**. Otherwise the fill color is take from the current linetype. Example:\n\n    plot FOO with boxes fillstyle solid 1.0 fillcolor \"cyan\"\n\n#### Set style fill border\n\nThe bare keyword **border** causes the filled object to be surrounded by a solid line of the current linetype and color. You can change the color of this line by adding either a linetype or a linecolor. **noborder** specifies that no bounding line is drawn. Examples:\n\n    # Half-intensity fill, full intensity border in same color\n    set style fill solid 0.5 border\n    # Half-transparent fill, solid black border (linetype -1)\n    set style fill transparent solid 0.5 border -1\n    # Pattern fill in current color, border using color of linetype 5\n    plot ... with boxes fillstyle pattern 2 border lt 5\n    # Fill area in cyan, border in blue\n    plot ... with boxes fillcolor \"cyan\" fs solid border linecolor \"blue\"\n\nNote: The border property of a fill style only affects plots drawn **with filledcurves** in the default mode (closed curve).\n\n#### Set style fill transparent\n\nSome terminals support the attribute **transparent** for filled areas. In the case of transparent solid fill areas, the **density** parameter is interpreted as an alpha value; that is, density 0 is fully transparent, density 1 is fully opaque. In the case of transparent pattern fill, the background of the pattern is either fully transparent or fully opaque.\n\nNote that there may be additional limitations on the creation or viewing of graphs containing transparent fill areas. For example, the png terminal can only use transparent fill if the \"truecolor\" option is set. Some pdf viewers may not correctly display the fill areas even if they are correctly described in the pdf file. Ghostscript/gv does not correctly display pattern-fill areas even though actual PostScript printers generally have no problem.\n\n### Set style function\n\nThe **set style function** command changes the default plotting style for function plots (e.g. lines, points, filledcurves). See **plotting styles**.\n\nSyntax:\n\n    set style function <plotting-style>\n    show style function\n\n### Set style increment\n\n**Note**: This command has been deprecated. Instead please use the newer command **set linetype**, which redefines the linetypes themselves rather than searching for a suitable temporary line style to substitute. See **[set linetype](set_show#set_linetype)**\n\nSyntax:\n\n    set style increment {default|userstyles}\n    show style increment\n\nBy default, successive plots within the same graph will use successive linetypes from the default set for the current terminal type. However, choosing **set style increment user** allows you to step through the user-defined line styles rather than through the default linetypes.\n\nExample:\n\n    set style line 1 lw 2 lc rgb \"gold\"\n    set style line 2 lw 2 lc rgb \"purple\"\n    set style line 4 lw 1 lc rgb \"sea-green\"\n    set style increment user\n\n    plot f1(x), f2(x), f3(x), f4(x)\n\nshould plot functions f1, f2, f4 in your 3 newly defined line styles. If a user-defined line style is not found then the corresponding default linetype is used instead. E.g. in the example above, f3(x) will be plotted using the default linetype 3.\n\n### Set style line\n\nEach terminal has a default set of line and point types, which can be seen by using the command **test**. **set style line** defines a set of line types and widths and point types and sizes so that you can refer to them later by an index instead of repeating all the information at each invocation.\n\nSyntax:\n\n    set style line <index> default\n    set style line <index> {{linetype  | lt} <line_type> | <colorspec>}\n                           {{linecolor | lc} <colorspec>}\n                           {{linewidth | lw} <line_width>}\n                           {{pointtype | pt} <point_type>}\n                           {{pointsize | ps} <point_size>}\n                           {{pointinterval | pi} <interval>}\n                           {{pointnumber | pn} <max_symbols>}\n                           {{dashtype | dt} <dashtype>}\n                           {palette}\n    unset style line\n    show style line\n\n**default** sets all line style parameters to those of the linetype with that same index.\n\nIf the linestyle \\<index\\> already exists, only the given parameters are changed while all others are preserved. If not, all undefined values are set to the default values.\n\nLine styles created by this mechanism do not replace the default linetype styles; both may be used. Line styles are temporary. They are lost whenever you execute a **reset** command. To redefine the linetype itself, please see **[set linetype](set_show#set_linetype)**.\n\nThe line and point types default to the index value. The exact symbol that is drawn for that index value may vary from one terminal type to another.\n\nThe line width and point size are multipliers for the current terminal's default width and size (but note that \\<point_size\\> here is unaffected by the multiplier given by the command**set pointsize**).\n\nThe **pointinterval** controls the spacing between points in a plot drawn with style **linespoints**. The default is 0 (every point is drawn). For example, **set style line N pi 3** defines a linestyle that uses pointtype N, pointsize and linewidth equal to the current defaults for the terminal, and will draw every 3rd point in plots using **with linespoints**. A negative value for the interval is treated the same as a positive value, except that some terminals will try to interrupt the line where it passes through the point symbol.\n\nThe **pointnumber** property is similar to **pointinterval** except that rather than plotting every Nth point it limits the total number of points to N.\n\nNot all terminals support the **linewidth** and **pointsize** features; if not supported, the option will be ignored.\n\nTerminal-independent colors may be assigned using either **linecolor \\<colorspec\\>** or **linetype \\<colorspec\\>**, abbreviated **lc** or **lt**. This requires giving a RGB color triple, a known palette color name, a fractional index into the current palette, or a constant value from the current mapping of the palette onto cbrange. See **[colors](linetypes_colors_styles#colors)**, **[colorspec](linetypes_colors_styles#colorspec)**, **[set palette](set_show#set_palette)**, **[colornames](set_show#colornames)**, **[cbrange](set_show#cbrange)**.\n\n**set style line \\<n\\> linetype \\<lt\\>** will set both a terminal-dependent dot/dash pattern and color. The commands**set style line \\<n\\> linecolor \\<colorspec\\>** or **set style line \\<n\\> linetype \\<colorspec\\>** will set a new line color while leaving the existing dot-dash pattern unchanged.\n\nIn 3d mode (**splot** command), the special keyword **palette** is allowed as a shorthand for \"linetype palette z\". The color value corresponds to the z-value (elevation) of the splot, and varies smoothly along a line or surface.\n\nExamples: Suppose that the default lines for indices 1, 2, and 3 are red, green, and blue, respectively, and the default point shapes for the same indices are a square, a cross, and a triangle, respectively. Then\n\n    set style line 1 lt 2 lw 2 pt 3 ps 0.5\n\ndefines a new linestyle that is green and twice the default width and a new pointstyle that is a half-sized triangle. The commands\n\n    set style function lines\n    plot f(x) lt 3, g(x) ls 1\n\nwill create a plot of f(x) using the default blue line and a plot of g(x) using the user-defined wide green line. Similarly the commands\n\n    set style function linespoints\n    plot p(x) lt 1 pt 3, q(x) ls 1\n\nwill create a plot of p(x) using the default triangles connected by a red line and q(x) using small triangles connected by a green line.\n\n    splot sin(sqrt(x*x+y*y))/sqrt(x*x+y*y) w l pal\n\ncreates a surface plot using smooth colors according to **palette**. Note, that this works only on some terminals. See also **[set palette](set_show#set_palette)**, **[set pm3d](set_show#set_pm3d)**.\n\n    set style line 10 linetype 1 linecolor rgb \"cyan\"\n\nwill assign linestyle 10 to be a solid cyan line on any terminal that supports rgb colors.\n\n### Set style circle\n\nSyntax:\n\n    set style circle {radius {graph|screen} <R>}\n                     {{no}wedge}\n                     {clip|noclip}\n\nThis command sets the default radius used in plot style \"with circles\". It applies to data plots with only 2 columns of data (x,y) and to function plots. The default is \"set style circle radius graph 0.02\". **Nowedge** disables drawing of the two radii that connect the ends of an arc to the center. The default is **wedge**. This parameter has no effect on full circles. **Clip** clips the circle at the plot boundaries, **noclip** disables this. Default is **clip**.\n\n### Set style rectangle\n\nRectangles defined with the **set object** command can have individual styles. However, if the object is not assigned a private style then it inherits a default that is taken from the **set style rectangle** command.\n\nSyntax:\n\n    set style rectangle {front|back} {lw|linewidth <lw>}\n                        {fillcolor <colorspec>} {fs <fillstyle>}\n\nSee **[colorspec](linetypes_colors_styles#colorspec)** and **[fillstyle](set_show#fillstyle)**. **fillcolor** may be abbreviated as **fc**.\n\nExamples:\n\n    set style rectangle back fc rgb \"white\" fs solid 1.0 border lt -1\n    set style rectangle fc linsestyle 3 fs pattern 2 noborder\n\nThe default values correspond to solid fill with the background color and a black border.\n\n### Set style ellipse\n\nSyntax:\n\n    set style ellipse {units xx|xy|yy}\n                      {size {graph|screen} <a>, {{graph|screen} <b>}}\n                      {angle <angle>}\n                      {clip|noclip}\n\nThis command governs whether the diameters of ellipses are interpreted in the same units or not. Default is **xy**, which means that the major diameter (first axis) of ellipses will be interpreted in the same units as the x (or x2) axis, while the minor (second) diameter in those of the y (or y2) axis. In this mode the ratio of the ellipse axes depends on the scales of the plot axes and aspect ratio of the plot. When set to **xx** or **yy**, both axes of all ellipses will be interpreted in the same units. This means that the ratio of the axes of the plotted ellipses will be correct even after rotation, but either their vertical or horizontal extent will not be correct.\n\nThis is a global setting that affects all ellipses, both those defined as objects and those generated with the **plot** command, however, the value of **units** can also be redefined on a per-plot and per-object basis.\n\nIt is also possible to set a default size for ellipses with the **size** keyword. This default size applies to data plots with only 2 columns of data (x,y) and to function plots. The two values are interpreted as the major and minor diameters (as opposed to semi-major and semi-minor axes) of the ellipse.\n\nThe default is \"set style ellipse size graph 0.05,0.03\".\n\nLast, but not least it is possible to set the default orientation with the **angle** keyword. The orientation, which is defined as the angle between the major axis of the ellipse and the plot's x axis, must be given in degrees.\n\n**Clip** clips the ellipse at the plot boundaries, **noclip** disables this. Default is **clip**.\n\nFor defining ellipse objects, see **[set object ellipse](set_show#set_object_ellipse)**; for the 2D plot style, see **[ellipses](ellipses#ellipses)**.\n\n### Set style parallelaxis\n\nSyntax:\n\n    set style parallelaxis {front|back} {line-properties}\n\nDetermines the line type and layer for drawing the vertical axes in plots **with parallelaxes**. See **[with parallelaxes](parallelaxes#with_parallelaxes)**, **[set paxis](set_show#set_paxis)**.\n\n### Set style spiderplot\n\nSyntax:\n\n    set style spiderplot\n              {fillstyle <fillstyle-properties>}\n              {<line-properties> | <point-properties>}\n\nThis commands controls the default appearance of spider plots. The fill, line, and point properties can be modified in the first component of the plot command. The overall appearance of the plot is also affected by other settings such as **set grid spiderplot**. See also **[set paxis](set_show#set_paxis)**, **[spiderplot](spiderplot#spiderplot)**. Example:\n\n    # Default spider plot will be a polygon with a thick border but no fill\n    set style spiderplot fillstyle empty border lw 3\n    # This one will additionally place an open circle (pt 6) at each axis\n    plot for [i=1:6] DATA pointtype 6 pointsize 3\n\n### Set style textbox\n\nSyntax:\n\n    set style textbox {<boxstyle-index>}\n              {opaque|transparent} {fillcolor <color>}\n              {{no}border {<bordercolor>}}{linewidth <lw>}\n              {margins <xmargin>,<ymargin>}\n\nThis command controls the appearance of labels with the attribute 'boxed'. Terminal types that do not support boxed text will ignore this style. Note: Implementation for some terminals (svg, latex) is incomplete. Most terminals cannot place a box correctly around rotated text.\n\nThree numbered textbox styles can be defined. If no boxstyle index \\<bs\\> is given, the default (unnumbered) style is changed. Example:\n\n    # default style has only a black border\n    set style textbox transparent border lc \"black\"\n    # style 2 (bs 2) has a light blue background with no border\n    set style textbox 2 opaque fc \"light-cyan\" noborder\n    set label 1 \"I'm in a box\" boxed\n    set label 2 \"I'm blue\" boxed bs 2\n\n## Surface\n\nThe **set surface** command is only relevant for 3D plots (**splot**).\n\nSyntax:\n\n    set surface {implicit|explicit}\n    unset surface\n    show surface\n\n**unset surface** will cause **splot** to not draw points or lines corresponding to any of the function or data file points. This is mainly useful for drawing only contour lines rather than the surface they were derived from. Contours may still be drawn on the surface, depending on the **set contour** option. To turn off the surface for an individual function or data file while leaving others active, use the **nosurface** keyword in the **splot** command. The combination **unset surface; set contour base** is useful for displaying contours on the grid base. See also **[set contour](set_show#set_contour)**.\n\nIf a 3D data set is recognizable as a mesh (grid) then by default the program implicitly treats the plot style **with lines** as requesting a gridded surface. See **[grid_data](splot#grid_data)**. The command **set surface explicit** suppresses this expansion, plotting only the individual lines described by separate blocks of data in the input file. A gridded surface can still be plotted by explicitly requesting splot **with surface**.\n\n## Table\n\nWhen **table** mode is enabled, **plot** and **splot** commands print out a multicolumn text table of values\n\n    X Y {Z} <flag>\n\nrather than creating an actual plot on the current terminal. The flag character is \"i\" if the point is in the active range, \"o\" if it is out-of-range, or \"u\" if it is undefined. The data format is determined by the format of the axis tickmarks (see **[set format](set_show#set_format)**), and the columns are separated by single spaces. This can be useful if you want to generate contours and then save them for further use. The same method can be used to save interpolated data (see **[set samples](set_show#set_samples)** and **[set dgrid3d](set_show#set_dgrid3d)**).\n\nSyntax:\n\n    set table {\"outfile\" | $datablock} {append}\n              {separator {whitespace|tab|comma|\"<char>\"}}\n    plot <whatever>\n    unset table\n\nSubsequent tabular output is written to \"outfile\", if specified, otherwise it is written to stdout or other current value of **set output**. If **outfile** exists it will be replaced unless the **append** keyword is given. Alternatively, tabular output can be redirected to a named data block. Data block names start with '$', see also **[inline data](inline_data_datablocks#inline_data)**. You must explicitly **unset table** in order to go back to normal plotting on the current terminal.\n\nThe **separator** character can be used to output csv (comma separated value) files. This mode only affects plot style **with table**. See **[plot with table](set_show#plot_with_table)**.\n\n### Plot with table\n\nThis discussion applies only to the special plot style **with table**.\n\nTo avoid any style-dependent processing of the input data being tabulated (smoothing, errorbar expansion, secondary range checking, etc), or to increase the number of columns that can be tabulated, use the keyword \"table\" instead of a normal plot style. In this case the output does not contain an extra, last, column of flags **i**, **o**, **u** indicated inrange/outrange/undefined. The destination for output must first be specified with **set table \\<where\\>**. For example\n\n    set table $DATABLOCK1\n    plot <file> using 1:2:3:4:($5+$6):(func($7)):8:9:10 with table\n\nBecause there is no actual plot style in this case the columns do not correspond to specific axes. Therefore xrange, yrange, etc are ignored.\n\nIf a **using** term evaluates to a string, the string is tabulated. Numerical data is always written with format %g. If you want some other format use sprintf or gprintf to create a formatted string.\n\n    plot <file> using (\"File 1\"):1:2:3 with table\n    plot <file> using (sprintf(\"%4.2f\",$1)) : (sprintf(\"%4.2f\",$3)) with table\n\nTo create a csv file use\n\n    set table \"tab.csv\" separator comma\n    plot <foo> using 1:2:3:4 with table\n\n\\[EXPERIMENTAL\\] To select only a subset of the data points for tabulation you can provide an input filter condition (**if \\<expression\\>**) at the end of the command. Note that the input filter may reference data columns that are not part of the output. This feature may change substantially before appearing in a released version of gnuplot.\n\n    plot <file> using 1:2:($4+$5) with table if (strcol(3) eq \"Red\")\n    plot <file> using 1:2:($4+$5) with table if (10. < $1 && $1 < 100.)\n    plot <file> using 1:2:($4+$5) with table if (filter($6,$7) != 0)\n\n## Terminal\n\n**gnuplot** supports many different graphics devices. Use **set terminal** to tell **gnuplot** what kind of output to generate. Use **set output** to redirect that output to a file or device.\n\nSyntax:\n\n    set terminal {<terminal-type> | push | pop}\n    show terminal\n\nIf \\<terminal-type\\> is omitted, **gnuplot** will list the available terminal types. \\<terminal-type\\> may be abbreviated.\n\nIf both **set terminal** and **set output** are used together, it is safest to give **set terminal** first, because some terminals set a flag which is needed in some operating systems.\n\nSome terminals have many additional options. The options used by a previous invocation **set term \\<term\\> \\<options\\>** of a given **\\<term\\>** are remembered, thus subsequent **set term \\<term\\>** does not reset them. This helps in printing, for instance, when switching among different terminals — previous options don't have to be repeated.\n\nThe command **set term push** remembers the current terminal including its settings while **set term pop** restores it. This is equivalent to **save term** and **load term**, but without accessing the filesystem. Therefore they can be used to achieve platform independent restoring of the terminal after printing, for instance. After gnuplot's startup, the default terminal or that from **startup** file is pushed automatically. Therefore portable scripts can rely that **set term pop** restores the default terminal on a given platform unless another terminal has been pushed explicitly.\n\nFor more information, see the **[complete list of terminals](complete_list_terminals#complete_list_of_terminals)**.\n\n## Termoption\n\nThe **set termoption** command allows you to change the behaviour of the current terminal without requiring a new **set terminal** command. Only one option can be changed per command, and only a small number of options can be changed this way. Currently the only options accepted are\n\n    set termoption {no}enhanced\n    set termoption font \"<fontname>{,<fontsize>}\"\n    set termoption fontscale <scale>\n    set termoption {linewidth <lw>}{lw <lw>}\n\n## Theta\n\nPolar coordinate plots are by default oriented such that theta = 0 is on the right side of the plot, with theta increasing as you proceed counterclockwise so that theta = 90 degrees is at the top. **set theta** allows you to change the origin and direction of the polar angular coordinate theta.\n\n    set theta {right|top|left|bottom}\n    set theta {clockwise|cw|counterclockwise|ccw}\n\n**unset theta** restores the default state \"set theta right ccw\".\n\n## Tics\n\nThe **set tics** command controls the tic marks and labels on all axes at once.\n\nThe tics may be turned off with the **unset tics** command, and may be turned on (the default state) with **set tics**. Fine control of tics on individual axes is possible using the alternative commands **set xtics**, **set ztics**, etc.\n\nSyntax:\n\n    set tics {axis | border} {{no}mirror}\n             {in | out} {front | back}\n             {{no}rotate {by <ang>}} {offset <offset> | nooffset}\n             {left | right | center | autojustify}\n             {format \"formatstring\"} {font \"name{,<size>}\"} {{no}enhanced}\n             { textcolor <colorspec> }\n    set tics scale {default | <major> {,<minor>}}\n    unset tics\n    show tics\n\nThe options can be applied to a single axis (x, y, z, x2, y2, cb), e.g.\n\n    set xtics rotate by -90\n    unset cbtics\n\nAll tic marks are drawn using the same line properties as the plot border (see **[set border](set_show#set_border)**).\n\nSet tics **back** or **front** applies to all axes at once, but only for 2D plots (not splot). It controls whether the tics are placed behind or in front of the plot elements, in the case that there is overlap.\n\n**axis** or **border** tells **gnuplot** to put the tics (both the tics themselves and the accompanying labels) along the axis or the border, respectively. If the axis is very close to the border, the **axis** option will move the tic labels to outside the border in case the border is printed (see **[set border](set_show#set_border)**). The relevant margin settings will usually be sized badly by the automatic layout algorithm in this case.\n\n**mirror** tells **gnuplot** to put unlabeled tics at the same positions on the opposite border. **nomirror** does what you think it does.\n\n**in** and **out** change the tic marks to be drawn inwards or outwards.\n\n**set tics scale** controls the size of the tic marks. The first value \\<major\\> controls the auto-generated or user-specified major tics (level 0). The second value controls the auto-generated or user-specified minor tics (level 1). \\<major\\> defaults to 1.0, \\<minor\\> defaults to \\<major\\>/2. Additional values control the size of user-specified tics with level 2, 3, ... Default tic sizes are restored by **set tics scale default**.\n\n**rotate** asks **gnuplot** to rotate the text through 90 degrees, which will be done if the terminal driver in use supports text rotation. **norotate** cancels this. **rotate by \\<ang\\>** asks for rotation by \\<ang\\> degrees, supported by some terminal types.\n\nThe defaults are **border mirror norotate** for tics on the x and y axes, and **border nomirror norotate** for tics on the x2 and y2 axes. For the z axis, the default is **nomirror**.\n\nThe \\<offset\\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. \\<offset\\> is the offset of the tics texts from their default positions, while the default coordinate system is **character**. See **[coordinates](coordinates#coordinates)** for details. **nooffset** switches off the offset.\n\nBy default, tic labels are justified automatically depending on the axis and rotation angle to produce aesthetically pleasing results. If this is not desired, justification can be overridden with an explicit **left**, **right** or **center** keyword. **autojustify** restores the default behavior.\n\n**set tics** with no options restores mirrored, inward-facing tic marks for the primary axes. All other settings are retained.\n\nSee also **[set xtics](set_show#set_xtics)** for more control of major (labeled) tic marks and **set mxtics** for control of minor tic marks. These commands provide control of each axis independently.\n\n## Ticslevel\n\nDeprecated. See **[set xyplane](set_show#set_xyplane)**.\n\n## Ticscale\n\nThe **set ticscale** command is deprecated, use **set tics scale** instead.\n\n## Timestamp\n\nThe command **set timestamp** places the current time and date in the plot margin.\n\nSyntax:\n\n    set timestamp {\"<format>\"} {top|bottom} {{no}rotate}\n                  {offset <xoff>{,<yoff>}} {font \"<fontspec>\"}\n                  {textcolor <colorspec>}\n    unset timestamp\n    show timestamp\n\nThe format string is used to write the date and time. Its default value is what asctime() uses: \"%a %b %d %H:%M:%S %Y\" (weekday, month name, day of the month, hours, minutes, seconds, four-digit year). With **top** or **bottom** you can place the timestamp along the top left or bottom left margin (default: bottom). **rotate** writes the timestamp vertically. The constants \\<xoff\\> and \\<yoff\\> are offsets that let you adjust the position more finely. \\<font\\> is used to specify the font with which the time is to be written.\n\nThe abbreviation **time** may be used in place of **timestamp**.\n\nExample:\n\n    set timestamp \"%d/%m/%y %H:%M\" offset 80,-2 font \"Helvetica\"\n\nSee **[set timefmt](set_show#set_timefmt)** for more information about time format strings.\n\n## Timefmt\n\nThis command sets the default format used to input time data. See **[set xdata time](set_show#set_xdata_time)**, **[timecolumn](expressions#timecolumn)**.\n\nSyntax:\n\n    set timefmt \"<format string>\"\n    show timefmt\n\nThe valid formats for both **timefmt** and **timecolumn** are:\n\n|                                        |                                                       |\n|----------------------------------------|-------------------------------------------------------|\n| Time Series timedata Format Specifiers |                                                       |\n| Format                                 | Explanation                                           |\n| `%d`                                   | day of the month, 1–31                                |\n| `%m`                                   | month of the year, 1–12                               |\n| `%y`                                   | year, 0–99                                            |\n| `%Y`                                   | year, 4-digit                                         |\n| `%j`                                   | day of the year, 1–365                                |\n| `%H`                                   | hour, 0–24                                            |\n| `%M`                                   | minute, 0–60                                          |\n| `%s`                                   | seconds since the Unix epoch (1970-01-01 00:00 UTC)   |\n| `%S`                                   | second, integer 0–60 on output, (double) on input     |\n| `%b`                                   | three-character abbreviation of the name of the month |\n| `%B`                                   | name of the month                                     |\n| `%p`                                   | two character match to one of: am AM pm PM            |\n\nAny character is allowed in the string, but must match exactly. \\\\t (tab) is recognized. Backslash-octals ( \\\\nnn) are converted to char. If there is no separating character between the time/date elements, then %d, %m, %y, %H, %M and %S read two digits each. If a decimal point immediately follows the field read by %S, the decimal and any following digits are interpreted as a fractional second. %Y reads four digits. %j reads three digits. %b requires three characters, and %B requires as many as it needs.\n\nSpaces are treated slightly differently. A space in the string stands for zero or more whitespace characters in the file. That is, \"%H %M\" can be used to read \"1220\" and \"12 20\" as well as \"12 20\".\n\nEach set of non-blank characters in the timedata counts as one column in the **using n:n** specification. Thus **11:11 25/12/76 21.0** consists of three columns. To avoid confusion, **gnuplot** requires that you provide a complete **using** specification if your file contains timedata.\n\nIf the date format includes the day or month in words, the format string must exclude this text. But it can still be printed with the \"%a\", \"%A\", \"%b\", or \"%B\" specifier. **gnuplot** will determine the proper month and weekday from the numerical values. See **[set format](set_show#set_format)** for more details about these and other options for printing time data.\n\nWhen reading two-digit years with %y, values 69-99 refer to the 20th century, while values 00-68 refer to the 21st century. NB: This is in accordance with the UNIX98 spec, but conventions vary widely and two-digit year values are inherently ambiguous.\n\nIf the %p format returns \"am\" or \"AM\", hour 12 will be interpreted as hour 0. If the %p format returns \"pm\" or \"PM\", hours \\< 12 will be increased by 12.\n\nSee also **[set xdata](set_show#set_xdata)** and **[time/date](time_date_data#time_date)** for more information.\n\nExample:\n\n    set timefmt \"%d/%m/%Y\\t%H:%M\"\n\ntells **gnuplot** to read date and time separated by tab. (But look closely at your data — what began as a tab may have been converted to spaces somewhere along the line; the format string must match what is actually in the file.) See also [time data demo. ](http://www.gnuplot.info/demo/timedat.html)\n\n## Title\n\nThe **set title** command produces a plot title that is centered at the top of the plot. **set title** is a special case of **set label**.\n\nSyntax:\n\n    set title {\"<title-text>\"} {offset <offset>} {font \"<font>{,<size>}\"}\n              {{textcolor | tc} {<colorspec> | default}} {{no}enhanced}\n    show title\n\nIf \\<offset\\> is specified by either x,y or x,y,z the title is moved by the given offset. It may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. See **[coordinates](coordinates#coordinates)** for details. By default, the **character** coordinate system is used. For example, \"**set title offset 0,-1**\" will change only the y offset of the title, moving the title down by roughly the height of one character. The size of a character depends on both the font and the terminal.\n\n\\<font\\> is used to specify the font with which the title is to be written; the units of the font \\<size\\> depend upon which terminal is used.\n\n**textcolor \\<colorspec\\>** changes the color of the text. \\<colorspec\\> can be a linetype, an rgb color, or a palette mapping. See help for **[colorspec](linetypes_colors_styles#colorspec)** and **[palette](expressions#palette)**.\n\n**noenhanced** requests that the title not be processed by the enhanced text mode parser, even if enhanced text mode is currently active.\n\n**set title** with no parameters clears the title.\n\nSee **[syntax](syntax#syntax)** for details about the processing of backslash sequences and the distinction between single- and double-quotes.\n\n## Tmargin\n\nThe command **set tmargin** sets the size of the top margin. Please see **[set margin](set_show#set_margin)** for details.\n\n## Trange\n\nSyntax: set trange \\[tmin:tmax\\] The range of the parametric variable t is useful in three contexts. 1) In parametric mode **plot** commands it limits the range of sampling\n\n    for both generating functions.  See `set parametric`, `set samples`.\n\n2\\) In polar mode **plot** commands it limits or defines the range of the\n\n    angular parameter theta. See `polar`.\n\n3\\) In **plot** or **splot** commands using 1-dimensional sampled data via\n\n    the pseudofile \"+\".  See `sampling 1D`, `special-filenames`.\n\n## Ttics\n\nThe **set ttics** command places tics around the perimeter of a polar plot. This is the border if **set border polar** is enabled, otherwise the outermost circle of the polar grid drawn at the rightmost ticmark along the r axis. See **[set grid](set_show#set_grid)**, **[set rtics](set_show#set_rtics)**. The angular position is always labeled in degrees. The full perimeter can be labeled regardless of the current trange setting. The desired range of the tic labels should be given as shown below. Additional properties of the tic marks can be set. See **[xtics](set_show#xtics)**.\n\n    set ttics -180, 30, 180\n    set ttics add (\"Theta = 0\" 0)\n    set ttics font \":Italic\" rotate\n\n## Urange\n\nSyntax: set urange \\[umin:umax\\] The range of the parametric variables u and v is useful in two contexts. 1) **splot** in parametric mode. See **[set parametric](set_show#set_parametric)**, **[set isosamples](set_show#set_isosamples)**. 2) generating 2-dimension sampled data for either **plot** or **splot** using the pseudofile \"++\". See **[sampling 2D](plot#sampling_2D)**.\n\n## Variables\n\nThe **show variables** command lists the current value of user-defined and internal variables. Gnuplot internally defines variables whose names begin with GPVAL\\_, MOUSE\\_, FIT\\_, and TERM\\_.\n\nSyntax:\n\n    show variables      # show variables that do not begin with GPVAL_\n    show variables all  # show all variables including those beginning GPVAL_\n    show variables NAME # show only variables beginning with NAME\n\n## Version\n\nThe **show version** command lists the version of gnuplot being run, its last modification date, the copyright holders, and email addresses for the FAQ, the gnuplot-info mailing list, and reporting bugs–in short, the information listed on the screen when the program is invoked interactively.\n\nSyntax:\n\n    show version {long}\n\nWhen the **long** option is given, it also lists the operating system, the compilation options used when **gnuplot** was installed, the location of the help file, and (again) the useful email addresses.\n\n## Vgrid\n\nSyntax:\n\n    set vgrid $gridname {size N}\n    unset vgrid $gridname\n    show vgrid\n\nIf the named grid already exists, mark it as active (use it for subsequent **vfill** and **voxel** operations). If a new size is given, replace the existing content with a zero-filled N x N x N grid. If a grid with this name does not already exist, allocate an N x N x N grid (default N=100), zero the contents, and mark it as active. Note that grid names must begin with '$'.\n\n**show vgrid** lists all currently defined voxel grids. Example output:\n\n    $vgrid1: (active)\n             size 100 X 100 X 100\n             vxrange [-4:4]  vyrange[-4:4]  vzrange[-4:4]\n             non-zero voxel values:  min 0.061237 max 94.5604\n             number of zero voxels:  992070   (99.21%)\n\n**unset vgrid $gridname** releases all data structures associated with that voxel grid. The data structures are also released by **reset session**. The function **voxel(x,y,z)** returns the value of the active grid point nearest that coordinate. See also **[splot voxel-grids](splot#splot_voxel-grids)**.\n\n## View\n\nThe **set view** command sets the viewing angle for **splot**s. It controls how the 3D coordinates of the plot are mapped into the 2D screen space. It provides controls for both rotation and scaling of the plotted data, but supports orthographic projections only. It supports both 3D projection or orthogonal 2D projection into a 2D plot-like map.\n\nSyntax:\n\n    set view <rot_x>{,{<rot_z>}{,{<scale>}{,<scale_z>}}}\n    set view map {scale <scale>}\n    set view projection {xy|xz|yz}\n    set view {no}equal {xy|xyz}\n    set view azimuth <angle>\n    show view\n\nwhere \\<rot_x\\> and \\<rot_z\\> control the rotation angles (in degrees) in a virtual 3D coordinate system aligned with the screen such that initially (that is, before the rotations are performed) the screen horizontal axis is x, screen vertical axis is y, and the axis perpendicular to the screen is z. The first rotation applied is \\<rot_x\\> around the x axis. The second rotation applied is \\<rot_z\\> around the new z axis.\n\nCommand **set view map** is used to represent the drawing as a map. It is useful for **contour** plots or 2D heatmaps using pm3d mode rather than **with image**. In the latter case, take care that you properly use **zrange** and **cbrange** for input data point filtering and color range scaling, respectively.\n\n\\<rot_x\\> is bounded to the \\[0:180\\] range with a default of 60 degrees, while \\<rot_z\\> is bounded to the \\[0:360\\] range with a default of 30 degrees. \\<scale\\> controls the scaling of the entire **splot**, while \\<scale_z\\> scales the z axis only. Both scales default to 1.0.\n\nExamples:\n\n    set view 60, 30, 1, 1\n    set view ,,0.5\n\nThe first sets all the four default values. The second changes only scale, to 0.5.\n\n### Azimuth\n\n    set view azimuth <angle-in-degrees>\n\nThe setting of azimuth affects the orientation of the z axis in a 3D graph (splot). At the default azimuth = 0 the z axis of the plot lies in the plane orthogonal to the screen horizontal. I.e. the projection of the z axis lies along the screen vertical. Non-zero azimuth rotates the plot about the line of sight through the origin so that a projection of the z axis is no longer vertical. When azimuth = 90 the z axis is horizontal rather than vertical.\n\n### Equal_axes\n\nThe command **set view equal xy** forces the unit length of the x and y axes to be on the same scale, and chooses that scale so that the plot will fit on the page. The command **set view equal xyz** additionally sets the z axis scale to match the x and y axes; however there is no guarantee that the current z axis range will fit within the plot boundary. By default all three axes are scaled independently to fill the available area.\n\nSee also **[set xyplane](set_show#set_xyplane)**.\n\n### Projection\n\nSyntax:\n\n    set view projection {xy|xz|yz}\n\nRotates the view angles of a 3D plot so that one of the primary planes xy, xz, or yz lies in the plane of the plot. Axis labels and tics positioning is adjusted accordingly; tics and labels on the third axis are disabled. The plot is scaled up to approximately match the size that 'plot' would generate for the same axis ranges. **set view projection xy** is equivalent to **set view map**.\n\n## Vrange\n\nSyntax: set vrange \\[vmin:vmax\\] The range of the parametric variables u and v is useful in two contexts. 1) **splot** in parametric mode. See **[set parametric](set_show#set_parametric)**, **[set isosamples](set_show#set_isosamples)**. 2) generating 2-dimension sampled data for either **plot** or **splot** using the pseudofile \"++\". See **[sampling 2D](plot#sampling_2D)**.\n\n## Vxrange\n\nSyntax: set vxrange \\[vxmin:vxmax\\]\n\nEstablishes the range of x coordinates spanned by the active voxel grid. Analogous commands **set vyrange** and **set vzrange** exist for the other two dimensions of the voxel grid. If no explicit ranges have been set prior to the first **vclear**, **vfill**, or **voxel(x,y,z) =** command, vmin and vmax will be copied from the current values of **xrange**.\n\n## Vyrange\n\nSee **[set vxrange](set_show#set_vxrange)**\n\n## Vzrange\n\nSee **[set vxrange](set_show#set_vxrange)**\n\n## Walls\n\nSyntax:\n\n    set walls\n    set wall {x0|y0|z0|x1|y1} {<fillstyle>} {fc <fillcolor>}\n\n3D surfaces drawn by **[splot](splot#splot)** lie within a normalized unit cube regardless of the x y and z axis ranges. The bounding walls of this cube are described by the planes (graph coord x == 0), (graph coord x == 1), etc. The **set walls** command renders the walls x0 y0 and z0 as solid surfaces. By default these surfaces are semi-transparent (fillstyle transparent solid 0.5). You can customize which walls are drawn and also their individual color and fill style. If you choose to enable walls, you may also want to use **set xyplane 0**. Example:\n\n    set wall z0 fillstyle solid 1.0 fillcolor \"gray\"\n\n## X2data\n\nThe **set x2data** command sets data on the x2 (top) axis to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.\n\n## X2dtics\n\nThe **set x2dtics** command changes tics on the x2 (top) axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.\n\n## X2label\n\nThe **set x2label** command sets the label for the x2 (top) axis. Please see **[set xlabel](set_show#set_xlabel)**.\n\n## X2mtics\n\nThe **set x2mtics** command changes tics on the x2 (top) axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.\n\n## X2range\n\nThe **set x2range** command sets the horizontal range that will be displayed on the x2 (top) axis. See **[set xrange](set_show#set_xrange)** for the full set of command options. See also **[set link](set_show#set_link)**.\n\n## X2tics\n\nThe **set x2tics** command controls major (labeled) tics on the x2 (top) axis. Please see **[set xtics](set_show#set_xtics)** for details.\n\n## X2zeroaxis\n\nThe **set x2zeroaxis** command draws a line at the origin of the x2 (top) axis (y2 = 0). For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.\n\n## Xdata\n\nThis command controls interpretation of data on the x axis. An analogous command acts on each of the other axes.\n\nSyntax:\n\n    set xdata time\n    show xdata\n\nThe same syntax applies to **ydata**, **zdata**, **x2data**, **y2data** and **cbdata**.\n\nThe **time** option signals that data represents a time/date in seconds. The current version of gnuplot stores time to a millisecond precision.\n\nIf no option is specified, the data interpretation reverts to normal.\n\n### Time\n\n**set xdata time** indicates that the x coordinate represents a date or time to millisecond precision. There is an analogous command **set ydata time**.\n\nThere are separate format mechanisms for interpretation of time data on input and output. Input data is read from a file either by using the global **timefmt** or by using the function timecolumn() as part of the plot command. These input mechanisms also apply to using time values to set an axis range. See **[set timefmt](set_show#set_timefmt)**, **[timecolumn](expressions#timecolumn)**.\n\nExample:\n\n    set xdata time\n    set timefmt \"%d-%b-%Y\"\n    set xrange [\"01-Jan-2013\" : \"31-Dec-2014\"]\n    plot DATA using 1:2\n\nor\n\n    plot DATA using (timecolumn(1,\"%d-%b-%Y\")):2\n\nFor output, i.e. tick labels along that axis or coordinates output by mousing, the function 'strftime' (type \"man strftime\" on unix to look it up) is used to convert from the internal time in seconds to a string representation of a date. **gnuplot** tries to figure out a reasonable format for this. You can customize the format using either **set format x** or **set xtics format**. See **[time_specifiers](set_show#time_specifiers)** for a special set of time format specifiers. See also **[time/date](time_date_data#time_date)** for more information.\n\n## Xdtics\n\nThe **set xdtics** commands converts the x-axis tic marks to days of the week where 0=Sun and 6=Sat. Overflows are converted modulo 7 to dates. **set noxdtics** returns the labels to their default values. Similar commands do the same things for the other axes.\n\nSyntax:\n\n    set xdtics\n    unset xdtics\n    show xdtics\n\nThe same syntax applies to **ydtics**, **zdtics**, **x2dtics**, **y2dtics** and **cbdtics**.\n\nSee also the **[set format](set_show#set_format)** command.\n\n## Xlabel\n\nThe **set xlabel** command sets the x axis label. Similar commands set labels on the other axes.\n\nSyntax:\n\n    set xlabel {\"<label>\"} {offset <offset>} {font \"<font>{,<size>}\"}\n               {textcolor <colorspec>} {{no}enhanced}\n               {rotate by <degrees> | rotate parallel | norotate}\n    show xlabel\n\nThe same syntax applies to **x2label**, **ylabel**, **y2label**, **zlabel** and **cblabel**.\n\nIf \\<offset\\> is specified by either x,y or x,y,z the label is moved by the given offset. It may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. See **[coordinates](coordinates#coordinates)** for details. By default, the **character** coordinate system is used. For example, \"**set xlabel offset -1,0**\" will change only the x offset of the title, moving the label roughly one character width to the left. The size of a character depends on both the font and the terminal.\n\n\\<font\\> is used to specify the font in which the label is written; the units of the font \\<size\\> depend upon which terminal is used.\n\n**noenhanced** requests that the label text not be processed by the enhanced text mode parser, even if enhanced text mode is currently active.\n\nTo clear a label, put no options on the command line, e.g., \"**set y2label**\".\n\nThe default positions of the axis labels are as follows:\n\nxlabel: The x-axis label is centered below the bottom of the plot.\n\nylabel: The y-axis label is centered to the left of the plot, defaulting to either horizontal or vertical orientation depending on the terminal type. The program may not reserve enough space to the left of the plot to hold long non-rotated ylabel text. You can adjust this with **set lmargin**.\n\nzlabel: The z-axis label is centered along the z axis and placed in the space above the grid level.\n\ncblabel: The color box axis label is centered along the box and placed below or to the right according to horizontal or vertical color box gradient.\n\ny2label: The y2-axis label is placed to the right of the y2 axis. The position is terminal-dependent in the same manner as is the y-axis label.\n\nx2label: The x2-axis label is placed above the plot but below the title. It is also possible to create an x2-axis label by using new-line characters to make a multi-line plot title, e.g.,\n\n    set title \"This is the title\\n\\nThis is the x2label\"\n\nNote that double quotes must be used. The same font will be used for both lines, of course.\n\nThe orientation (rotation angle) of the x, x2, y and y2 axis labels in 2D plots can be changed by specifying **rotate by \\<degrees\\>**. The orientation of the x and y axis labels in 3D plots defaults to horizontal but can be changed to run parallel to the axis by specifying **rotate parallel**.\n\nIf you are not satisfied with the default position of an axis label, use **set label** instead–that command gives you much more control over where text is placed.\n\nPlease see **[syntax](syntax#syntax)** for further information about backslash processing and the difference between single- and double-quoted strings.\n\n## Xmtics\n\nThe **set xmtics** command converts the x-axis tic marks to months of the year where 1=Jan and 12=Dec. Overflows are converted modulo 12 to months. The tics are returned to their default labels by **unset xmtics**. Similar commands perform the same duties for the other axes.\n\nSyntax:\n\n    set xmtics\n    unset xmtics\n    show xmtics\n\nThe same syntax applies to **x2mtics**, **ymtics**, **y2mtics**, **zmtics** and **cbmtics**.\n\nSee also the **[set format](set_show#set_format)** command.\n\n## Xrange\n\nThe **set xrange** command sets the horizontal range that will be displayed. A similar command exists for each of the other axes, as well as for the polar radius r and the parametric variables t, u, and v.\n\nSyntax:\n\n    set xrange [{{<min>}:{<max>}}] {{no}reverse} {{no}writeback} {{no}extend}\n               | restore\n    show xrange\n\nwhere \\<min\\> and \\<max\\> terms are constants, expressions or an asterisk to set autoscaling. If the data are time/date, you must give the range as a quoted string according to the **set timefmt** format. If \\<min\\> or \\<max\\> is omitted the current value will not be changed. See below for full autoscaling syntax. See also **[noextend](set_show#noextend)**.\n\nThe same syntax applies to **yrange**, **zrange**, **x2range**, **y2range**, **cbrange**, **rrange**, **trange**, **urange** and **vrange**.\n\nSee **[set link](set_show#set_link)** for options that link the ranges of x and x2, or y and y2.\n\nThe **reverse** option reverses the direction of an autoscaled axis. For example, if the data values range from 10 to 100, it will autoscale to the equivalent of set xrange \\[100:10\\]. The **reverse** flag has no effect if the axis is not autoscaled. NB: This is a change introduced in version 4.7.\n\nAutoscaling: If \\<min\\> (the same applies for correspondingly to \\<max\\>) is an asterisk \"\\*\" autoscaling is turned on. The range in which autoscaling is being performed may be limited by a lower bound \\<lb\\> or an upper bound \\<ub\\> or both. The syntax is\n\n    { <lb> < } * { < <ub> }\n\nFor example,\n\n    0 < * < 200\n\nsets \\<lb\\> = 0 and \\<ub\\> = 200. With such a setting \\<min\\> would be autoscaled, but its final value will be between 0 and 200 (both inclusive despite the '\\<' sign). If no lower or upper bound is specified, the '\\<' to also be omitted. If \\<ub\\> is lower than \\<lb\\> the constraints will be turned off and full autoscaling will happen. This feature is useful to plot measured data with autoscaling but providing a limit on the range, to clip outliers, or to guarantee a minimum range that will be displayed even if the data would not need such a big range.\n\nThe **writeback** option essentially saves the range found by **autoscale** in the buffers that would be filled by **set xrange**. This is useful if you wish to plot several functions together but have the range determined by only some of them. The **writeback** operation is performed during the **plot** execution, so it must be specified before that command. To restore, the last saved horizontal range use **set xrange restore**. For example,\n\n    set xrange [-10:10]\n    set yrange [] writeback\n    plot sin(x)\n    set yrange restore\n    replot x/2\n\nresults in a yrange of \\[-1:1\\] as found only from the range of sin(x); the \\[-5:5\\] range of x/2 is ignored. Executing **show yrange** after each command in the above example should help you understand what is going on.\n\nIn 2D, **xrange** and **yrange** determine the extent of the axes, **trange** determines the range of the parametric variable in parametric mode or the range of the angle in polar mode. Similarly in parametric 3D, **xrange**, **yrange**, and **zrange** govern the axes and **urange** and **vrange** govern the parametric variables.\n\nIn polar mode, **rrange** determines the radial range plotted. \\<rmin\\> acts as an additive constant to the radius, whereas \\<rmax\\> acts as a clip to the radius — no point with radius greater than \\<rmax\\> will be plotted. **xrange** and **yrange** are affected — the ranges can be set as if the graph was of r(t)-rmin, with rmin added to all the labels.\n\nAny range may be partially or totally autoscaled, although it may not make sense to autoscale a parametric variable unless it is plotted with data.\n\nRanges may also be specified on the **plot** command line. A range given on the plot line will be used for that single **plot** command; a range given by a **set** command will be used for all subsequent plots that do not specify their own ranges. The same holds true for **splot**.\n\n### Examples\n\nExamples:\n\nTo set the xrange to the default:\n\n    set xrange [-10:10]\n\nTo set the yrange to increase downwards:\n\n    set yrange [10:-10]\n\nTo change zmax to 10 without affecting zmin (which may still be autoscaled):\n\n    set zrange [:10]\n\nTo autoscale xmin while leaving xmax unchanged:\n\n    set xrange [*:]\n\nTo autoscale xmin but keeping xmin positive:\n\n    set xrange [0<*:]\n\nTo autoscale x but keep minimum range of 10 to 50 (actual might be larger):\n\n    set xrange [*<10:50<*]\n\nAutoscaling but limit maximum xrange to -1000 to 1000, i.e. autoscaling within \\[-1000:1000\\]\n\n    set xrange [-1000<*:*<1000]\n\nMake sure xmin is somewhere between -200 and 100:\n\n    set xrange [-200<*<100:]\n\n### Extend\n\n**set xrange noextend** is the same as **set autoscale x noextend**. See **[noextend](set_show#noextend)**.\n\n## Xtics\n\nFine control of the major (labeled) tics on the x axis is possible with the **set xtics** command. The tics may be turned off with the **unset xtics** command, and may be turned on (the default state) with **set xtics**. Similar commands control the major tics on the y, z, x2 and y2 axes.\n\nSyntax:\n\n    set xtics {axis | border} {{no}mirror}\n              {in | out} {scale {default | <major> {,<minor>}}}\n              {{no}rotate {by <ang>}} {offset <offset> | nooffset}\n              {left | right | center | autojustify}\n              {add}\n              {  autofreq\n               | <incr>\n               | <start>, <incr> {,<end>}\n               | ({\"<label>\"} <pos> {<level>} {,{\"<label>\"}...) }\n              {format \"formatstring\"} {font \"name{,<size>}\"} {{no}enhanced}\n              { numeric | timedate | geographic }\n              {{no}logscale}\n              { rangelimited }\n              { textcolor <colorspec> }\n    unset xtics\n    show xtics\n\nThe same syntax applies to **ytics**, **ztics**, **x2tics**, **y2tics** and **cbtics**.\n\n**axis** or **border** tells **gnuplot** to put the tics (both the tics themselves and the accompanying labels) along the axis or the border, respectively. If the axis is very close to the border, the **axis** option will move the tic labels to outside the border. The relevant margin settings will usually be sized badly by the automatic layout algorithm in this case.\n\n**mirror** tells **gnuplot** to put unlabeled tics at the same positions on the opposite border. **nomirror** does what you think it does.\n\n**in** and **out** change the tic marks to be drawn inwards or outwards.\n\nWith **scale**, the size of the tic marks can be adjusted. If \\<minor\\> is not specified, it is 0.5\\*\\<major\\>. The default size 1.0 for major tics and 0.5 for minor tics is requested by **scale default**.\n\n**rotate** asks **gnuplot** to rotate the text through 90 degrees, which will be done if the terminal driver in use supports text rotation. **norotate** cancels this. **rotate by \\<ang\\>** asks for rotation by \\<ang\\> degrees, supported by some terminal types.\n\nThe defaults are **border mirror norotate** for tics on the x and y axes, and **border nomirror norotate** for tics on the x2 and y2 axes. For the z axis, the **{axis \\| border}** option is not available and the default is **nomirror**. If you do want to mirror the z-axis tics, you might want to create a bit more room for them with **set border**.\n\nThe \\<offset\\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. \\<offset\\> is the offset of the tics texts from their default positions, while the default coordinate system is **character**. See **[coordinates](coordinates#coordinates)** for details. **nooffset** switches off the offset.\n\nExample:\n\nMove xtics more closely to the plot.\n\n    set xtics offset 0,graph 0.05\n\nBy default, tic labels are justified automatically depending on the axis and rotation angle to produce aesthetically pleasing results. If this is not desired, justification can be overridden with an explicit **left**, **right** or **center** keyword. **autojustify** restores the default behavior.\n\n**set xtics** with no options restores the default border or axis if xtics are being displayed; otherwise it has no effect. Any previously specified tic frequency or position {and labels} are retained.\n\nTic positions are calculated automatically by default or if the **autofreq** option is given.\n\nA series of tic positions can be specified by giving either a tic interval alone, or a start point, interval, and end point (see **[xtics series](set_show#xtics_series)**).\n\nIndividual tic positions can be specified individually by providing an explicit list of positions, where each position may have an associated text label. See **[xtics list](set_show#xtics_list)**.\n\nHowever they are specified, tics will only be plotted when in range.\n\nFormat (or omission) of the tic labels is controlled by **set format**, unless the explicit text of a label is included in the **set xtics (\"\\<label\\>\")** form.\n\nMinor (unlabeled) tics can be added automatically by the **set mxtics** command, or at explicit positions by the **set xtics (\"\" \\<pos\\> 1, ...)** form.\n\nThe appearance of the tics (line style, line width etc.) is determined by the border line (see **[set border](set_show#set_border)**), even if the tics are drawn at the axes.\n\n### Xtics series\n\nSyntax:\n\n    set xtics <incr>\n    set xtics <start>, <incr>, <end>\n\nThe implicit \\<start\\>, \\<incr\\>, \\<end\\> form specifies that a series of tics will be plotted on the axis between the values \\<start\\> and \\<end\\> with an increment of \\<incr\\>. If \\<end\\> is not given, it is assumed to be infinity. The increment may be negative. If neither \\<start\\> nor \\<end\\> is given, \\<start\\> is assumed to be negative infinity, \\<end\\> is assumed to be positive infinity, and the tics will be drawn at integral multiples of \\<incr\\>. If the axis is logarithmic, the increment will be used as a multiplicative factor.\n\nIf you specify to a negative \\<start\\> or \\<incr\\> after a numerical value (e.g., **rotate by \\<angle\\>** or **offset \\<offset\\>**), the parser fails because it subtracts \\<start\\> or \\<incr\\> from that value. As a workaround, specify **0-\\<start\\>** resp. **0-\\<incr\\>** in that case.\n\nExample:\n\n    set xtics border offset 0,0.5 -5,1,5\n\nFails with 'invalid expression' at the last comma.\n\n    set xtics border offset 0,0.5 0-5,1,5\n\nor\n\n    set xtics offset 0,0.5 border -5,1,5\n\nSets tics at the border, tics text with an offset of 0,0.5 characters, and sets the start, increment, and end to -5, 1, and 5, as requested.\n\nThe **set grid** options 'front', 'back' and 'layerdefault' affect the drawing order of the xtics, too.\n\nExamples:\n\nMake tics at 0, 0.5, 1, 1.5, ..., 9.5, 10.\n\n    set xtics 0,.5,10\n\nMake tics at ..., -10, -5, 0, 5, 10, ...\n\n    set xtics 5\n\nMake tics at 1, 100, 1e4, 1e6, 1e8.\n\n    set logscale x; set xtics 1,100,1e8\n\n### Xtics list\n\nSyntax:\n\n    set xtics {add} (\"label1\" <pos1> <level1>, \"label2\" <pos2> <level2>, ...)\n\nThe explicit (\"label\" \\<pos\\> \\<level\\>, ...) form allows arbitrary tic positions or non-numeric tic labels. In this form, the tics do not need to be listed in numerical order. Each tic has a position, optionally with a label.\n\nThe label is a string enclosed by quotes or a string-valued expression. It may contain formatting information for converting the position into its label, such as \"%3f clients\", or it may be the empty string \"\". See **[set format](set_show#set_format)** for more information. If no string is given, the default label (numerical) is used.\n\nAn explicit tic mark has a third parameter, the level. The default is level 0, a major tic. Level 1 generates a minor tic. Labels are never printed for minor tics. Major and minor tics may be auto-generated by the program or specified explicitly by the user. Tics with level 2 and higher must be explicitly specified by the user, and take priority over auto-generated tics. The size of tics marks at each level is controlled by the command **set tics scale**.\n\nExamples:\n\n    set xtics (\"low\" 0, \"medium\" 50, \"high\" 100)\n    set xtics (1,2,4,8,16,32,64,128,256,512,1024)\n    set ytics (\"bottom\" 0, \"\" 10, \"top\" 20)\n    set ytics (\"bottom\" 0, \"\" 10 1, \"top\" 20)\n\nIn the second example, all tics are labeled. In the third, only the end tics are labeled. In the fourth, the unlabeled tic is a minor tic.\n\nNormally if explicit tics are given, they are used instead of auto-generated tics. Conversely if you specify **set xtics auto** or the like it will erase any previously specified explicit tics. You can mix explicit and auto- generated tics by using the keyword **add**, which must appear before the tic style being added.\n\nExample:\n\n    set xtics 0,.5,10\n    set xtics add (\"Pi\" 3.14159)\n\nThis will automatically generate tic marks every 0.5 along x, but will also add an explicit labeled tic mark at pi.\n\n### Xtics timedata\n\nTimes and dates are stored internally as a number of seconds.\n\nInput: Non-numeric time and date values are converted to seconds on input using the format specifier in **timefmt**. Axis positions and range limits also may be given as quoted dates or times interpreted using **timefmt**. If the \\<start\\>, \\<incr\\>, \\<end\\> form is used, \\<incr\\> must be in seconds. Use of **timefmt** to interpret input data, range, and tic positions is triggered by **set xdata time**.\n\nOutput: Axis tic labels are generated using a separate format specified either by **set format** or **set xtics format**. By default the usual numeric format specifiers are expected (**set xtics numeric**). Other options are geographic coordinates (**set xtics geographic**), or times or dates (**set xtics time**).\n\nNote: For backward compatibility with earlier gnuplot versions, the command **set xdata time** will implicitly also do **set xtics time**, and **set xdata** or **unset xdata** will implicitly reset to **set xtics numeric**. However you can change this with a later call to **set xtics**.\n\nExamples:\n\n    set xdata time           # controls interpretation of input data\n    set timefmt \"%d/%m\"      # format used to read input data\n    set xtics timedate       # controls interpretation of output format\n    set xtics format \"%b %d\" # format used for tic labels\n    set xrange [\"01/12\":\"06/12\"]\n    set xtics \"01/12\", 172800, \"05/12\"\n\n    set xdata time\n    set timefmt \"%d/%m\"\n    set xtics format \"%b %d\" time\n    set xrange [\"01/12\":\"06/12\"]\n    set xtics (\"01/12\", \"\" \"03/12\", \"05/12\")\n\nBoth of these will produce tics \"Dec 1\", \"Dec 3\", and \"Dec 5\", but in the second example the tic at \"Dec 3\" will be unlabeled.\n\n### Geographic\n\n**set xtics geographic** indicates that x-axis values are to be interpreted as a geographic coordinate measured in degrees. Use **set xtics format** or **set format x** to specify the appearance of the axis tick labels. The format specifiers for geographic data are as follows:\n\n    %D                   = integer degrees\n    %<width.precision>d  = floating point degrees\n    %M                   = integer minutes\n    %<width.precision>m  = floating point minutes\n    %S                   = integer seconds\n    %<width.precision>s  = floating point seconds\n    %E                   = label with E/W instead of +/-\n    %N                   = label with N/S instead of +/-\n\nFor example, the command **set format x \"%Ddeg %5.2mmin %E\"** will cause x coordinate -1.51 to be labeled as **\" 1deg 30.60min W\"**.\n\nIf the xtics are left in the default state (**set xtics numeric**) the coordinate will be reported as a decimal number of degrees, and **format** will be assumed to contain normal numeric format specifiers rather than the special set above.\n\nTo output degrees/minutes/seconds in a context other than axis tics, such as placing labels on a map, you can use the relative time format specifiers %tH %tM %tS for strptime. See **[time_specifiers](set_show#time_specifiers)**, **[strptime](expressions#strptime)**.\n\n### Xtics logscale\n\nIf the **logscale** attribute is set for a tic series along a log-scaled axis, the tic interval is interpreted as a multiplicative factor rather than a constant. For example:\n\n    # generate a series of tics at y=20 y=200 y=2000 y=20000\n    set log y\n    set ytics 20, 10, 50000 logscale\n\nNote that no tic is placed at y=50000 because it is not in the series 2\\*10`^`x. If the logscale property is disabled, the tic increment will be treated as an additive constant even for a log-scaled axis. For example:\n\n    # generate a series of tics at y=20 y=40 y=60 ... y=200\n    set log y\n    set yrange [20:200]\n    set ytics 20 nologscale\n\nThe **logscale** attribute is set automatically by the **set log** command, so normally you do not need this keyword unless you want to force a constant tic interval as in the second example above.\n\n### Xtics rangelimited\n\nThis option limits both the auto-generated axis tic labels and the corresponding plot border to the range of values actually present in the data that has been plotted. Note that this is independent of the current range limits for the plot. For example, suppose that the data in \"file.dat\" all lies in the range 2 \\< y \\< 4. Then the following commands will create a plot for which the left-hand plot border (y axis) is drawn for only this portion of the total y range, and only the axis tics in this region are generated. I.e., the plot will be scaled to the full range on y, but there will be a gap between 0 and 2 on the left border and another gap between 4 and 10. This style is sometimes referred to as a **range-frame** graph.\n\n    set border 3\n    set yrange [0:10]\n    set ytics nomirror rangelimited\n    plot \"file.dat\"\n\n## Xyplane\n\nThe **set xyplane** command adjusts the position at which the xy plane is drawn in a 3D plot. The synonym \"set ticslevel\" is accepted for backwards compatibility.\n\nSyntax:\n\n    set xyplane at <zvalue>\n    set xyplane relative <frac>\n    set ticslevel <frac>        # equivalent to set xyplane relative\n    show xyplane\n\nThe form **set xyplane relative \\<frac\\>** places the xy plane below the range in Z, where the distance from the xy plane to Zmin is given as a fraction of the total range in z. The default value is 0.5. Negative values are permitted, but tic labels on the three axes may overlap.\n\nThe alternative form **set xyplane at \\<zvalue\\>** fixes the placement of the xy plane at a specific Z value regardless of the current z range. Thus to force the x, y, and z axes to meet at a common origin one would specify **set xyplane at 0**.\n\nSee also **[set view](set_show#set_view)**, and **[set zeroaxis](set_show#set_zeroaxis)**.\n\n## Xzeroaxis\n\nThe **set xzeroaxis** command draws a line at y = 0. For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.\n\n## Y2data\n\nThe **set y2data** command sets y2 (right-hand) axis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.\n\n## Y2dtics\n\nThe **set y2dtics** command changes tics on the y2 (right-hand) axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.\n\n## Y2label\n\nThe **set y2label** command sets the label for the y2 (right-hand) axis. Please see **[set xlabel](set_show#set_xlabel)**.\n\n## Y2mtics\n\nThe **set y2mtics** command changes tics on the y2 (right-hand) axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.\n\n## Y2range\n\nThe **set y2range** command sets the vertical range that will be displayed on the y2 (right) axis. See **[set xrange](set_show#set_xrange)** for the full set of command options. See also **[set link](set_show#set_link)**.\n\n## Y2tics\n\nThe **set y2tics** command controls major (labeled) tics on the y2 (right-hand) axis. Please see **[set xtics](set_show#set_xtics)** for details.\n\n## Y2zeroaxis\n\nThe **set y2zeroaxis** command draws a line at the origin of the y2 (right-hand) axis (x2 = 0). For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.\n\n## Ydata\n\nThe **set ydata** commands sets y-axis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.\n\n## Ydtics\n\nThe **set ydtics** command changes tics on the y axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.\n\n## Ylabel\n\nThis command sets the label for the y axis. Please see **[set xlabel](set_show#set_xlabel)**.\n\n## Ymtics\n\nThe **set ymtics** command changes tics on the y axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.\n\n## Yrange\n\nThe **set yrange** command sets the vertical range that will be displayed on the y axis. Please see **[set xrange](set_show#set_xrange)** for details.\n\n## Ytics\n\nThe **set ytics** command controls major (labeled) tics on the y axis. Please see **[set xtics](set_show#set_xtics)** for details.\n\n## Yzeroaxis\n\nThe **set yzeroaxis** command draws a line at x = 0. For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.\n\n## Zdata\n\nThe **set zdata** command sets zaxis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.\n\n## Zdtics\n\nThe **set zdtics** command changes tics on the z axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.\n\n## Zzeroaxis\n\nThe **set zzeroaxis** command draws a line through (x=0,y=0). This has no effect on 2D plots, including splot with **set view map**. For details, please see **[set zeroaxis](set_show#set_zeroaxis)** and **[set xyplane](set_show#set_xyplane)**.\n\n## Cbdata\n\nSet color box axis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.\n\n## Cbdtics\n\nThe **set cbdtics** command changes tics on the color box axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.\n\n## Zero\n\nThe **zero** value is the default threshold for values approaching 0.0.\n\nSyntax:\n\n    set zero <expression>\n    show zero\n\n**gnuplot** will not plot a point if its imaginary part is greater in magnitude than the **zero** threshold. This threshold is also used in various other parts of **gnuplot** as a (crude) numerical-error threshold. The default **zero** value is 1e-8. **zero** values larger than 1e-3 (the reciprocal of the number of pixels in a typical bitmap display) should probably be avoided, but it is not unreasonable to set **zero** to 0.0.\n\n## Zeroaxis\n\nThe x axis may be drawn by **set xzeroaxis** and removed by **unset xzeroaxis**. Similar commands behave similarly for the y, x2, y2, and z axes. **set zeroaxis ...** (no prefix) acts on the x, y, and z axes jointly.\n\nSyntax:\n\n    set {x|x2|y|y2|z}zeroaxis { {linestyle | ls <line_style>}\n                               | {linetype | lt <line_type>}\n                                 {linewidth | lw <line_width>}\n                                 {linecolor | lc <colorspec>}\n                                 {dashtype | dt <dashtype>} }\n    unset {x|x2|y|y2|z}zeroaxis\n    show {x|y|z}zeroaxis\n\nBy default, these options are off. The selected zero axis is drawn with a line of type \\<line_type\\>, width \\<line_width\\>, color \\<colorspec\\>, and dash type \\<dashtype\\> (if supported by the terminal driver currently in use), or a user-defined style \\<line_style\\> (see **[set style line](set_show#set_style_line)**).\n\nIf no linetype is specified, any zero axes selected will be drawn using the axis linetype (linetype 0).\n\nExamples:\n\nTo simply have the y=0 axis drawn visibly:\n\n    set xzeroaxis\n\nIf you want a thick line in a different color or pattern, instead:\n\n    set xzeroaxis linetype 3 linewidth 2.5\n\n## Zlabel\n\nThis command sets the label for the z axis. Please see **[set xlabel](set_show#set_xlabel)**.\n\n## Zmtics\n\nThe **set zmtics** command changes tics on the z axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.\n\n## Zrange\n\nThe **set zrange** command sets the range that will be displayed on the z axis. The zrange is used only by **splot** and is ignored by **plot**. Please see **[set xrange](set_show#set_xrange)** for details.\n\n## Ztics\n\nThe **set ztics** command controls major (labeled) tics on the z axis. Please see **[set xtics](set_show#set_xtics)** for details.\n\n## Cblabel\n\nThis command sets the label for the color box axis. Please see **[set xlabel](set_show#set_xlabel)**.\n\n## Cbmtics\n\nThe **set cbmtics** command changes tics on the color box axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.\n\n## Cbrange\n\nThe **set cbrange** command sets the range of values which are colored using the current **palette** by styles **with pm3d**, **with image** and **with palette**. Values outside of the color range use color of the nearest extreme.\n\nIf the cb-axis is autoscaled in **splot**, then the colorbox range is taken from **zrange**. Points drawn in **splot ... pm3d\\|palette** can be filtered by using different **zrange** and **cbrange**.\n\nPlease see **[set xrange](set_show#set_xrange)** for details on **[set cbrange](set_show#set_cbrange)** syntax. See also **[set palette](set_show#set_palette)** and **[set colorbox](set_show#set_colorbox)**.\n\n## Cbtics\n\nThe **set cbtics** command controls major (labeled) tics on the color box axis. Please see **[set xtics](set_show#set_xtics)** for details.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Shell
  id: shell
  summary: The shell command spawns an interactive shell
  description: "# Shell\n\nThe **shell** command spawns an interactive shell. To return to **gnuplot**, type **logout** if using VMS, **exit** or the END-OF-FILE character if using Unix, or **exit** if using MS-DOS or OS/2.\n\nThe **shell** command ignores anything else on the gnuplot command line. If instead you want to pass a command string to a shell for immediate execution, use the **system** function or the shortcut **!**. See **[system](system#system)**.\n\nExamples:\n\n    shell\n    system \"print previous_plot.ps\"\n    ! print previous_plot.ps\n    current_time = system(\"date\")\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Short introduction
  id: fit#SECTION04092000000000000000
  summary: fit is used to find a set of parameters that 'best' fits your data to your user-defined function
  belongs_to: Fit
  description: |-
    ## Short introduction

    **fit** is used to find a set of parameters that 'best' fits your data to your user-defined function. The fit is judged on the basis of the sum of the squared differences or 'residuals' (SSR) between the input data points and the function values, evaluated at the same places. This quantity is often called 'chisquare' (i.e., the Greek letter chi, to the power of 2). The algorithm attempts to minimize SSR, or more precisely, WSSR, as the residuals are 'weighted' by the input data errors (or 1.0) before being squared; see **[fit error_estimates](fit#fit_error_estimates)** for details.

    That's why it is called 'least-squares fitting'. Let's look at an example to see what is meant by 'non-linear', but first we had better go over some terms. Here it is convenient to use z as the dependent variable for user-defined functions of either one independent variable, z=f(x), or two independent variables, z=f(x,y). A parameter is a user-defined variable that **fit** will adjust, i.e., an unknown quantity in the function declaration. Linearity/non-linearity refers to the relationship of the dependent variable, z, to the parameters which **fit** is adjusting, not of z to the independent variables, x and/or y. (To be technical, the second {and higher} derivatives of the fitting function with respect to the parameters are zero for a linear least-squares problem).

    For linear least-squares (LLS), the user-defined function will be a sum of simple functions, not involving any parameters, each multiplied by one parameter. NLLS handles more complicated functions in which parameters can be used in a large number of ways. An example that illustrates the difference between linear and nonlinear least-squares is the Fourier series. One member may be written as

        z=a*sin(c*x) + b*cos(c*x).

    If a and b are the unknown parameters and c is constant, then estimating values of the parameters is a linear least-squares problem. However, if c is an unknown parameter, the problem is nonlinear.

    In the linear case, parameter values can be determined by comparatively simple linear algebra, in one direct step. However LLS is a special case which is also solved along with more general NLLS problems by the iterative procedure that **gnuplot** uses. **fit** attempts to find the minimum by doing a search. Each step (iteration) calculates WSSR with a new set of parameter values. The Marquardt-Levenberg algorithm selects the parameter values for the next iteration. The process continues until a preset criterion is met, either (1) the fit has "converged" (the relative change in WSSR is less than a certain limit, see **[set fit limit](set_show#set_fit_limit)**), or (2) it reaches a preset iteration count limit (see **[set fit maxiter](set_show#set_fit_maxiter)**). The fit may also be interrupted and subsequently halted from the keyboard (see **[fit](fit#fit)**). The user variable FIT_CONVERGED contains 1 if the previous fit command terminated due to convergence; it contains 0 if the previous fit terminated for any other reason. FIT_NITER contains the number of iterations that were done during the last fit.

    Often the function to be fitted will be based on a model (or theory) that attempts to describe or predict the behaviour of the data. Then **fit** can be used to find values for the free parameters of the model, to determine how well the data fits the model, and to estimate an error range for each parameter. See **[fit error_estimates](fit#fit_error_estimates)**.

    Alternatively, in curve-fitting, functions are selected independent of a model (on the basis of experience as to which are likely to describe the trend of the data with the desired resolution and a minimum number of parameters\*functions.) The **fit** solution then provides an analytic representation of the curve.

    However, if all you really want is a smooth curve through your data points, the **smooth** option to **plot** may be what you've been looking for rather than **fit**.
- name: Sixelgd
  id: complete_list_terminals#SECTION050156000000000000000
  summary: The sixel output format was originally used by DEC terminals and printers
  description: |-
    ## Sixelgd

    Syntax:

        set terminal sixelgd
               {{no}enhanced} {{no}truecolor}
               {{no}transparent} {rounded|butt}
               {linewidth <lw>} {dashlength <dl>}
               {tiny | small | medium | large | giant}
               {font "<face> {,<pointsize>}"} {fontscale <scale>}
               {size <x>,<y>} {{no}crop} {animate}
               {background <rgb_color>}

    The **sixel** output format was originally used by DEC terminals and printers. This driver produces a sixel output stream by converting a PNG image created internally using the gd library. The sixel output stream can be viewed in the terminal as it is created or it can be written to a file so that it can be replayed later by echoing the file to the terminal.

    The **animate** option resets the cursor position to the terminal top left at the start of every plot so that successive plots overwrite the same area on the screen rather than having earlier plots scroll off the top. This may be desirable in order to create an in-place animation.

    **transparent** instructs the driver to make the background color transparent. Default is **notransparent**.

    The **linewidth** and **dashlength** options are scaling factors that affect all lines drawn, i.e. they are multiplied by values requested in various drawing commands.

    By default the sixel output uses 16 indexed colors. The **truecolor** option instead creates a TrueColor png image that is mapped down onto 256 colors in the output sixel image. Transparent fill styles require the **truecolor** option. See **[fillstyle](set_show#fillstyle)**. A **transparent** background is possible in either indexed or TrueColor images.

    **butt** instructs the driver to use a line drawing method that does not overshoot the desired end point of a line. This setting is only applicable for line widths greater than 1. This setting is most useful when drawing horizontal or vertical lines. Default is **rounded**.

    The details of font selection are complicated. For more information please see **[fonts](fonts#fonts)**.

    The output plot size \<x,y\> is given in pixels — it defaults to 640x480. Please see additional information under **[canvas](canvas_size#canvas)** and **[set size](set_show#set_size)**. Blank space at the edges of the finished plot may be trimmed using the **crop** option, resulting in a smaller final image size. Default is **nocrop**. The terminal has been successfully tested with the xterm, mlterm and mintty terminals. The later two support the **truecolor** mode using 256 sixel colors out of box. Distributed copies of xterm may or may not have been configured to support sixel graphics and may be limited to 16 colors.
- name: Size
  id: set_show#SECTION0402984000000000000000
  summary: The <xscale> and <yscale> values are scale factors for the size of the plot, which includes the graph, labels, and margins
  belongs_to: Set-show
  description: |-
    ## Size

    Syntax:

        set size {{no}square | ratio <r> | noratio} {<xscale>,<yscale>}
        show size

    The \<xscale\> and \<yscale\> values are scale factors for the size of the plot, which includes the graph, labels, and margins.

    Important note:

        In earlier versions of gnuplot, some terminal types used the values from
        `set size` to control also the size of the output canvas; others did not.
        Almost all terminals now follow the following convention:

    **set term \<terminal_type\> size \<XX\>, \<YY\>** controls the size of the output file, or **canvas**. Please see individual terminal documentation for allowed values of the size parameters. By default, the plot will fill this canvas.

    **set size \<XX\>, \<YY\>** scales the plot itself relative to the size of the canvas. Scale values less than 1 will cause the plot to not fill the entire canvas. Scale values larger than 1 will cause only a portion of the plot to fit on the canvas. Please be aware that setting scale values larger than 1 may cause problems on some terminal types.

    **ratio** causes **gnuplot** to try to create a graph with an aspect ratio of \<r\> (the ratio of the y-axis length to the x-axis length) within the portion of the plot specified by \<xscale\> and \<yscale\>.

    The meaning of a negative value for \<r\> is different. If \<r\>=-1, gnuplot tries to set the scales so that the unit has the same length on both the x and y axes. This is the 2D equivalent to the 3D command **set view equal xy**. If \<r\>=-2, the unit on y has twice the length of the unit on x, and so on.

    The success of **gnuplot** in producing the requested aspect ratio depends on the terminal selected. The graph area will be the largest rectangle of aspect ratio \<r\> that will fit into the specified portion of the output (leaving adequate margins, of course).

    **set size square** is a synonym for **set size ratio 1**.

    Both **noratio** and **nosquare** return the graph to the default aspect ratio of the terminal, but do not return \<xscale\> or \<yscale\> to their default values (1.0).

    **ratio** and **square** have no effect on 3D plots, but do affect 3D projections created using **set view map**. See also **[set view equal](set_show#set_view_equal)**, which forces the x and y axes of a 3D onto the same scale.

    Examples:

    To set the size so that the plot fills the available canvas:

        set size 1,1

    To make the graph half size and square use:

        set size square 0.5,0.5

    To make the graph twice as high as wide use:

        set size ratio 2
- name: Spiderplot
  id: spiderplot
  summary: Spider plots are essentially parallel axis plots in which the axes are arranged radially rather than vertically
  description: "# Spiderplot\n\nSpider plots are essentially parallel axis plots in which the axes are arranged radially rather than vertically. Such plots are sometimes called **rader charts**. In gnuplot this requires working within a coordinate system established by the command **set spiderplot**, analogous to **set polar** except that the angular coordinate is determined implicitly by the parallel axis number. The appearance, labelling, and tic placement of the axes is controlled by **set paxis**. Further style choices are controlled using **[set style spiderplot](set_show#set_style_spiderplot)**, **[set grid](set_show#set_grid)**, and the individual components of the plot command.\n\nBecause each spider plot corresponds to a row of data rather than a column, it would make no sense to generate key entry titles in the normal way. Instead, if a plot component contains a title the text is used to label the corresponding axis. This overrides any previous **set paxis n label \"Foo\"**. To place a title in the key, you can either use a separate **keyentry** command or extract text from a column in the input file with the **key(column)** using specifier. See **[keyentry](set_show#keyentry)**, **[using key](plot#using_key)**.\n\nIn this figure a spiderplot with 5 axes is used to compare multiple entities that are each characterized by five scores. Each line (row) in $DATA generates a new polygon on the plot.\n\n    set spiderplot\n    set style spiderplot fs transparent solid 0.2 border\n    set for [p=1:5] paxis p range [0:100]\n    set for [p=2:5] paxis p tics format \"\"\n    set             paxis 1 tics font \",9\"\n    set for [p=1:5] paxis p label sprintf(\"Score %d\",p)\n    set grid spiderplot\n    plot for [i=1:5] $DATA using i:key(1)\n\n## Newspiderplot\n\nNormally the sequential elements of a plot command **with spiderplot** each correspond to one vertex of a single polygon. In order to describe multiple polygons in the same plot command, they must be separated by **newspiderplot**. Example:\n\n    # One polygon with 10 vertices\n    plot for [i=1:5] 'A' using i, for [j=1:5] 'B' using j\n    # Two polygons with 5 vertices\n    plot for [i=1:5] 'A' using i, newspiderplot, for [j=1:5] 'B' using j\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Spiderplot
  id: set_show#SECTION0402985000000000000000
  summary: The set spiderplot command switches interpretation of coordinates to a polar system in which each data point is mapped to a position along a radial axis
  belongs_to: Set-show
  description: |-
    ## Spiderplot

    The **set spiderplot** command switches interpretation of coordinates to a polar system in which each data point is mapped to a position along a radial axis. paxis 1 is always vertical; axes 2 to N proceed clockwise with even spacing. The command must be issued prior to plotting. It has additional effects equivalent to

        set style data spiderplot
        unset border
        unset tics
        set key noautotitle
        set size ratio 1.0

    Use **reset** to restore these after plotting.
- name: Spiderplot Newspiderplot
  id: spiderplot#SECTION030261000000000000000
  summary: Normally the sequential elements of a plot command with spiderplot each correspond to one vertex of a single polygon
  belongs_to: Spiderplot
  description: "## Newspiderplot\n\nNormally the sequential elements of a plot command **with spiderplot** each correspond to one vertex of a single polygon. In order to describe multiple polygons in the same plot command, they must be separated by **newspiderplot**. Example:\n\n    # One polygon with 10 vertices\n    plot for [i=1:5] 'A' using i, for [j=1:5] 'B' using j\n    # Two polygons with 5 vertices\n    plot for [i=1:5] 'A' using i, newspiderplot, for [j=1:5] 'B' using j\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Splot
  id: splot
  summary: splot is the command for drawing 3D plots (well, actually projections on a 2D surface, but you knew that)
  description: "# Splot\n\n**splot** is the command for drawing 3D plots (well, actually projections on a 2D surface, but you knew that). It is the 3D equivalent of the **plot** command. **splot** provides only a single x, y, and z axis; there is no equivalent to the x2 and y2 secondary axes provided by **plot**.\n\nSee the **[plot](plot#plot)** command for many options available in both 2D and 3D plots.\n\nSyntax:\n\n    splot {<ranges>}\n          {<iteration>}\n          <function> | {{<file name> | <datablock name>} {datafile-modifiers}}\n                     | <voxelgridname>\n                     | keyentry\n          {<title-spec>} {with <style>}\n          {, {definitions{,}} <function> ...}\n\nThe **splot** command operates on a data generated by a function, read from a data file, or stored previously in a named data block. Data file names are usually provided as a quoted string. The function can be a mathematical expression, or a triple of mathematical expressions in parametric mode.\n\nA new feature in version 5.4 is that **splot** can operate on voxel data. See **[voxel-grids](splot#voxel-grids)**, **[set vgrid](set_show#set_vgrid)**, **[vxrange](set_show#vxrange)**. At present voxel grids can be be plotted using styles **with dots**, **with points**, or **with isosurface**. Voxel grid values can also be referenced in the **using** specifiers of other plot styles, for example to assign colors.\n\nBy default **splot** draws the xy plane completely below the plotted data. The offset between the lowest ztic and the xy plane can be changed by **set xyplane**. The orientation of a **splot** projection is controlled by **set view**. See **[set view](set_show#set_view)** and **[set xyplane](set_show#set_xyplane)** for more information.\n\nThe syntax for setting ranges on the **splot** command is the same as for **plot**. In non-parametric mode, ranges must be given in the order\n\n    splot [<xrange>][<yrange>][<zrange>] ...\n\nIn parametric mode, the order is\n\n    splot [<urange>][<vrange>][<xrange>][<yrange>][<zrange>] ...\n\nThe **title** option is the same as in **plot**. The operation of **with** is also the same as in **plot** except that not all 2D plotting styles are available.\n\nThe **datafile** options have more differences.\n\nAs an alternative to surfaces drawn using parametric or function mode, the pseudo-file '++' can be used to generate samples on a grid in the xy plane.\n\nSee also **[show plot](set_show#show_plot)**, **[set view map](set_show#set_view_map)**, and **[sampling](plot#sampling)**.\n\n## Data-file\n\n**Splot**, like **plot**, can display from a file.\n\nSyntax:\n\n    splot '<file_name>' {binary <binary list>}\n                        {{nonuniform} matrix}\n                        {index <index list>}\n                        {every <every list>}\n                        {using <using list>}\n\nThe special filenames **\"\"** and **\"-\"** are permitted, as in **plot**. See **[special-filenames](plot#special-filenames)**.\n\nIn brief, **binary** and **matrix** indicate that the data are in a special form, **index** selects which data sets in a multi-data-set file are to be plotted, **every** specifies which datalines (subsets) within a single data set are to be plotted, and **using** determines how the columns within a single record are to be interpreted.\n\nThe options **index** and **every** behave the same way as with **plot**; **using** does so also, except that the **using** list must provide three entries instead of two.\n\nThe **plot** option **smooth** is not available for **splot**, but **cntrparam** and **dgrid3d** provide limited smoothing capabilities.\n\nData file organization is essentially the same as for **plot**, except that each point is an (x,y,z) triple. If only a single value is provided, it will be used for z, the block number will be used for y, and the index of the data point in the block will be used for x. If two or four values are provided, **gnuplot** uses the last value for calculating the color in pm3d plots. Three values are interpreted as an (x,y,z) triple. Additional values are generally used as errors, which can be used by **fit**.\n\nSingle blank records separate blocks of data in a **splot** datafile; **splot** treats blocks as the equivalent of function y-isolines. No line will join points separated by a blank record. If all blocks contain the same number of points, **gnuplot** will draw cross-isolines between points in the blocks, connecting corresponding points. This is termed \"grid data\", and is required for drawing a surface, for contouring (**set contour**) and hidden-line removal (**set hidden3d**). See also **[splot grid_data](splot#splot_grid_data)**.\n\nIt is no longer necessary to specify **parametric** mode for three-column **splot**s.\n\n### Matrix\n\nGnuplot can interpret matrix data input in two different ways.\n\nThe first of these assumes a uniform grid of x and y coordinates and assigns each value in the input matrix to one element M\\[i,j\\] of this uniform grid. The assigned x coordinates are the integers \\[0:NCOLS-1\\]. The assigned y coordinates are the integers \\[0:NROWS-1\\]. This is the default for text data input, but not for binary input. See **[matrix uniform](splot#matrix_uniform)** for examples and additional keywords.\n\nThe second interpretation assumes a non-uniform grid with explicit x and y coordinates. The first row of input data contains the y coordinates; the first column of input data contains the x coordinates. For binary input data, the first element of the first row must contain the number of columns. This is the default for **binary matrix** input, but requires an additional keyword **nonuniform** for text input data. See **[matrix nonuniform](splot#matrix_nonuniform)** for examples.\n\n#### Uniform\n\nExample commands for plotting uniform matrix data:\n\n    splot 'file' matrix using 1:2:3          # text input\n    splot 'file' binary general using 1:2:3  # binary input\n\nIn a uniform grid matrix the z-values are read in a row at a time, i. e.,\n\n    z11 z12 z13 z14 ...\n    z21 z22 z23 z24 ...\n    z31 z32 z33 z34 ...\n\nand so forth.\n\nFor text input, if the first row contains column labels rather than data, use the additional keyword **columnheaders**. Similarly if the first field in each row contains a label rather than data, use the additional keyword **rowheaders**. Here is an example that uses both:\n\n    $DATA << EOD\n    xxx A   B   C   D\n    aa  z11 z12 z13 z14\n    bb  z21 z22 z23 z24\n    cc  z31 z32 z33 z34\n    EOD\n    plot $DATA matrix columnheaders rowheaders with image\n\nFor text input, a blank line or comment line ends the matrix, and starts a new data block. You can select among the data blocks in a file by the **index** option to the **splot** command, as usual. The columnheaders option, if present, is applied only to the first data block.\n\n#### Nonuniform\n\nThe first row of input data contains the y coordinates. The first column of input data contains the x coordinates. For binary input data, the first field of the first row must contain the number of columns. (This number is ignored for text input).\n\nExample commands for plotting non-uniform matrix data:\n\n    splot 'file' nonuniform matrix using 1:2:3  # text input\n    splot 'file' binary matrix using 1:2:3      # binary input\n\nThus the data organization for non-uniform matrix input is\n\n    <N+1>  <x0>   <x1>   <x2>  ...  <xN>\n     <y0> <z0,0> <z0,1> <z0,2> ... <z0,N>\n     <y1> <z1,0> <z1,1> <z1,2> ... <z1,N>\n      :      :      :      :   ...    :\n\nwhich is then converted into triplets:\n\n    <x0> <y0> <z0,0>\n    <x0> <y1> <z0,1>\n    <x0> <y2> <z0,2>\n     :    :     :\n    <x0> <yN> <z0,N>\n\n    <x1> <y0> <z1,0>\n    <x1> <y1> <z1,1>\n     :    :     :\n\nThese triplets are then converted into **gnuplot** iso-curves and then **gnuplot** proceeds in the usual manner to do the rest of the plotting.\n\n#### Every\n\nThe **every** keyword has special meaning when used with matrix data. Rather than applying to blocks of single points, it applies to rows and column values. Note that matrix rows and columns are indexed starting from 0, so the row with index N is the (N+1)th row. Syntax:\n\n    plot 'file' every {<column_incr>}\n                        {:{<row_incr>}\n                          {:{<start_column>}\n                            {:{<start_row>}\n                              {:{<end_column>}\n                                {:<end_row>}}}}}\n\nExamples:\n\n    plot 'file' matrix every :::N::N   # plot all values in row with index N\n    plot 'file' matrix every ::3::7    # plot columns 3 to 7 for all rows\n    plot 'file' matrix every ::3:0:7:4 # submatrix bounded by [3,0] and [7,4]\n\n#### Examples\n\nA collection of matrix and vector manipulation routines (in C) is provided in **binary.c**. The routine to write binary data is\n\n    int fwrite_matrix(file,m,nrl,nrl,ncl,nch,row_title,column_title)\n\nAn example of using these routines is provided in the file **bf_test.c**, which generates binary files for the demo file **demo/binary.dem**.\n\nUsage in **plot**:\n\n    plot `a.dat` matrix\n    plot `a.dat` matrix using 1:3\n    plot 'a.gpbin' {matrix} binary using 1:3\n\nwill plot rows of the matrix, while using 2:3 will plot matrix columns, and using 1:2 the point coordinates (rather useless). Applying the **every** option you can specify explicit rows and columns.\n\nExample – rescale axes of a matrix in a text file:\n\n    splot `a.dat` matrix using (1+$1):(1+$2*10):3\n\nExample – plot the 3rd row of a matrix in a text file:\n\n    plot 'a.dat' matrix using 1:3 every 1:999:1:2\n\n(rows are enumerated from 0, thus 2 instead of 3).\n\nGnuplot can read matrix binary files by use of the option **binary** appearing without keyword qualifications unique to general binary, i.e., **array**, **record**, **format**, or **filetype**. Other general binary keywords for translation should also apply to matrix binary. (See **[binary general](plot#binary_general)** for more details.)\n\n### Example datafile\n\nA simple example of plotting a 3D data file is\n\n    splot 'datafile.dat'\n\nwhere the file \"datafile.dat\" might contain:\n\n    # The valley of the Gnu.\n       0 0 10\n       0 1 10\n       0 2 10\n\n    1 0 10\n    1 1 5\n    1 2 10\n\n    2 0 10\n    2 1 1\n    2 2 10\n\n    3 0 10\n    3 1 0\n    3 2 10\n\nNote that \"datafile.dat\" defines a 4 by 3 grid ( 4 rows of 3 points each ). Rows (blocks) are separated by blank records.\n\nNote also that the x value is held constant within each dataline. If you instead keep y constant, and plot with hidden-line removal enabled, you will find that the surface is drawn 'inside-out'.\n\nActually for grid data it is not necessary to keep the x values constant within a block, nor is it necessary to keep the same sequence of y values. **gnuplot** requires only that the number of points be the same for each block. However since the surface mesh, from which contours are derived, connects sequentially corresponding points, the effect of an irregular grid on a surface plot is unpredictable and should be examined on a case-by-case basis.\n\n## Grid data\n\nThe 3D routines are designed for points in a grid format, with one sample, datapoint, at each mesh intersection; the datapoints may originate from either evaluating a function, see **[set isosamples](set_show#set_isosamples)**, or reading a datafile, see **[splot datafile](splot#splot_datafile)**. The term \"isoline\" is applied to the mesh lines for both functions and data. Note that the mesh need not be rectangular in x and y, as it may be parameterized in u and v, see **[set isosamples](set_show#set_isosamples)**.\n\nHowever, **gnuplot** does not require that format. In the case of functions, 'samples' need not be equal to 'isosamples', i.e., not every x-isoline sample need intersect a y-isoline. In the case of data files, if there are an equal number of scattered data points in each block, then \"isolines\" will connect the points in a block, and \"cross-isolines\" will connect the corresponding points in each block to generate a \"surface\". In either case, contour and hidden3d modes may give different plots than if the points were in the intended format. Scattered data can be converted to a {different} grid format with **set dgrid3d**.\n\nThe contour code tests for z intensity along a line between a point on a y-isoline and the corresponding point in the next y-isoline. Thus a **splot** contour of a surface with samples on the x-isolines that do not coincide with a y-isoline intersection will ignore such samples. Try:\n\n    set xrange [-pi/2:pi/2]; set yrange [-pi/2:pi/2]\n    set style function lp\n    set contour\n    set isosamples 10,10; set samples 10,10;\n    splot cos(x)*cos(y)\n    set samples 4,10; replot\n    set samples 10,4; replot\n\n## Splot surfaces\n\n**splot** can display a surface as a collection of points, or by connecting those points. As with **plot**, the points may be read from a data file or result from evaluation of a function at specified intervals, see **[set isosamples](set_show#set_isosamples)**. The surface may be approximated by connecting the points with straight line segments, see **[set surface](set_show#set_surface)**, in which case the surface can be made opaque with **set hidden3d.** The orientation from which the 3d surface is viewed can be changed with **set view**.\n\nAdditionally, for points in a grid format, **splot** can interpolate points having a common amplitude (see **[set contour](set_show#set_contour)**) and can then connect those new points to display contour lines, either directly with straight-line segments or smoothed lines (see **[set cntrparam](set_show#set_cntrparam)**). Functions are already evaluated in a grid format, determined by **set isosamples** and **set samples**, while file data must either be in a grid format, as described in **data-file**, or be used to generate a grid (see **[set dgrid3d](set_show#set_dgrid3d)**).\n\nContour lines may be displayed either on the surface or projected onto the base. The base projections of the contour lines may be written to a file, and then read with **plot**, to take advantage of **plot**'s additional formatting capabilities.\n\n## Voxel-grid\n\nSyntax:\n\n    splot $voxelgridname with {dots|points} {above <threshold>} ...\n    splot $voxelgridname with isosurface {level <threshold>} ...\n\nVoxel data can be plotted with dots or points marking individual voxels whose value is above the specified threshold value (default threshold = 0). Color/pointtype/linewidth properties can be appended as usual.\n\nAt many view angles the voxel grid points will occlude each other or create Moiré artifacts on the display. These effects can be avoided by introducing jitter so that the displayed dot or point is displaced randomly from the true voxel grid coordinate. See **[set jitter](set_show#set_jitter)**.\n\nDense voxel grids can be down-sampled by using the **pointinterval** property (**pi** for short) to reduce the number of points drawn.\n\n    splot $vgrid with points pointtype 6 pointinterval 2\n\n**with isosurface** will create a tessellated surface in 3D enclosing all voxels with value greater than the requested threshold. The surface placement is adjusted by linear interpolation to pass through the threshold value itself.\n\nSee **[set vgrid](set_show#set_vgrid)**, **[vfill](vfill#vfill)**. See demos **vplot.dem**, **isosurface.dem**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Splot surfaces
  id: splot#SECTION040313000000000000000
  summary: splot can display a surface as a collection of points, or by connecting those points
  belongs_to: Splot
  description: |-
    ## Splot surfaces

    **splot** can display a surface as a collection of points, or by connecting those points. As with **plot**, the points may be read from a data file or result from evaluation of a function at specified intervals, see **[set isosamples](set_show#set_isosamples)**. The surface may be approximated by connecting the points with straight line segments, see **[set surface](set_show#set_surface)**, in which case the surface can be made opaque with **set hidden3d.** The orientation from which the 3d surface is viewed can be changed with **set view**.

    Additionally, for points in a grid format, **splot** can interpolate points having a common amplitude (see **[set contour](set_show#set_contour)**) and can then connect those new points to display contour lines, either directly with straight-line segments or smoothed lines (see **[set cntrparam](set_show#set_cntrparam)**). Functions are already evaluated in a grid format, determined by **set isosamples** and **set samples**, while file data must either be in a grid format, as described in **data-file**, or be used to generate a grid (see **[set dgrid3d](set_show#set_dgrid3d)**).

    Contour lines may be displayed either on the surface or projected onto the base. The base projections of the contour lines may be written to a file, and then read with **plot**, to take advantage of **plot**'s additional formatting capabilities.
- name: Start-up (initialization)
  id: start_up_initialization
  summary: When gnuplot is run, it first looks for a system-wide initialization file gnuplotrc
  description: "# Start-up (initialization)\n\nWhen gnuplot is run, it first looks for a system-wide initialization file **gnuplotrc**. The location of this file is determined when the program is built and is reported by **show loadpath**. The program then looks in the user's HOME directory for a file called **.gnuplot** on Unix-like systems or **GNUPLOT.INI** on other systems. (OS/2 will look for it in the directory named in the environment variable **GNUPLOT**; Windows will use **APPDATA**). Note: The program can be configured to look first in the current directory, but this is not recommended because it is bad security practice.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Starting values
  id: fit#SECTION04096000000000000000
  summary: Nonlinear fitting is not guaranteed to converge to the global optimum (the solution with the smallest sum of squared residuals, SSR), and can get stuck at a local minimum
  belongs_to: Fit
  description: |-
    ## Starting values

    Nonlinear fitting is not guaranteed to converge to the global optimum (the solution with the smallest sum of squared residuals, SSR), and can get stuck at a local minimum. The routine has no way to determine that; it is up to you to judge whether this has happened.

    **fit** may, and often will get "lost" if started far from a solution, where SSR is large and changing slowly as the parameters are varied, or it may reach a numerically unstable region (e.g., too large a number causing a floating point overflow) which results in an "undefined value" message or **gnuplot** halting.

    To improve the chances of finding the global optimum, you should set the starting values at least roughly in the vicinity of the solution, e.g., within an order of magnitude, if possible. The closer your starting values are to the solution, the less chance of stopping at a false minimum. One way to find starting values is to plot data and the fitting function on the same graph and change parameter values and **replot** until reasonable similarity is reached. The same plot is also useful to check whether the fit found a false minimum.

    Of course finding a nice-looking fit does not prove there is no "better" fit (in either a statistical sense, characterized by an improved goodness-of-fit criterion, or a physical sense, with a solution more consistent with the model.) Depending on the problem, it may be desirable to **fit** with various sets of starting values, covering a reasonable range for each parameter.
- name: Stats
  id: stats_statistical_summary
  summary: This command prepares a statistical summary of the data in one or two columns of a file
  description: "# Stats (Statistical Summary)\n\nSyntax:\n\n    stats {<ranges>} 'filename' {matrix | using N{:M}} {name 'prefix'} {{no}output}\n\nThis command prepares a statistical summary of the data in one or two columns of a file. The using specifier is interpreted in the same way as for plot commands. See **[plot](plot#plot)** for details on the **[index](plot#index)**, **[every](plot#every)**, and **[using](plot#using)** directives. Data points are filtered against both xrange and yrange before analysis. See **[set xrange](set_show#set_xrange)**. The summary is printed to the screen by default. Output can be redirected to a file by prior use of the command **set print**, or suppressed altogether using the **nooutput** option.\n\nIn addition to printed output, the program stores the individual statistics into three sets of variables. The first set of variables reports how the data is laid out in the file: The array of column headers is generated only if option **set datafile columnheaders** is in effect.\n\n|                       |       |                                                 |\n|-----------------------|-------|-------------------------------------------------|\n| `STATS_records`       |  *N*  | total number *N* of in-range data records       |\n| `STATS_outofrange`    |       | number of records filtered out by range limits  |\n| `STATS_invalid`       |       | number of invalid/incomplete/missing records    |\n| `STATS_blank`         |       | number of blank lines in the file               |\n| `STATS_blocks`        |       | number of indexable blocks of data in the file  |\n| `STATS_columns`       |       | number of data columns in the first row of data |\n| `STATS_column_header` |       | array of strings holding column headers found   |\n\nThe second set reports properties of the in-range data from a single column. This column is treated as y. If the y axis is autoscaled then no range limits are applied. Otherwise only values in the range \\[ymin:ymax\\] are considered.\n\nIf two columns are analysed jointly by a single **stats** command, the suffix \"\\_x\" or \"\\_y\" is appended to each variable name. I.e. STATS_min_x is the minimum value found in the first column, while STATS_min_y is the minimum value found in the second column. In this case points are filtered by testing against both xrange and yrange.\n\n|                      |                              |                                                                                         |                                                    |\n|----------------------|------------------------------|-----------------------------------------------------------------------------------------|----------------------------------------------------|\n| `STATS_min`          |                              | min(*y*)                                                                                | minimum value of in-range data points              |\n| `STATS_max`          |                              | max(*y*)                                                                                | maximum value of in-range data points              |\n| `STATS_index_min`    |                              | *i* \\| *y*_(i) = min(*y*)                                                               | index i for which data\\[i\\] == STATS_min           |\n| `STATS_index_max`    |                              | *i* \\| *y*_(i) = max(*y*)                                                               | index i for which data\\[i\\] == STATS_max           |\n| `STATS_mean`         | [\\[IMAGE svg\\]](img13.svg) = | [\\[IMAGE svg\\]](img14.svg)[\\[IMAGE svg\\]](img15.svg)*y*                                 | mean value of the in-range data points             |\n| `STATS_stddev`       | *σ*_(y) =                    | [\\[IMAGE svg\\]](img16.svg)                                                              | population standard deviation of the in-range data |\n| `STATS_ssd`          | *s*_(y) =                    | [\\[IMAGE svg\\]](img17.svg)                                                              | sample standard deviation of the in-range data     |\n| `STATS_lo_quartile`  |                              |                                                                                         | value of the lower (1st) quartile boundary         |\n| `STATS_median`       |                              |                                                                                         | median value                                       |\n| `STATS_up_quartile`  |                              |                                                                                         | value of the upper (3rd) quartile boundary         |\n| `STATS_sum`          |                              | [\\[IMAGE svg\\]](img15.svg)*y*                                                           | sum                                                |\n| `STATS_sumsq`        |                              | [\\[IMAGE svg\\]](img15.svg)*y*²                                                          | sum of squares                                     |\n| `STATS_skewness`     |                              | [\\[IMAGE svg\\]](img18.svg)[\\[IMAGE svg\\]](img15.svg)(*y*-[\\[IMAGE svg\\]](img13.svg))³   | skewness of the in-range data points               |\n| `STATS_kurtosis`     |                              | [\\[IMAGE svg\\]](img19.svg)[\\[IMAGE svg\\]](img15.svg)(*y*-[\\[IMAGE svg\\]](img13.svg))⁴   | kurtosis of the in-range data points               |\n| `STATS_adev`         |                              | [\\[IMAGE svg\\]](img14.svg)[\\[IMAGE svg\\]](img15.svg)\\| *y*-[\\[IMAGE svg\\]](img13.svg)\\| | mean absolute deviation of the in-range data       |\n| `STATS_mean_err`     |                              | *σ*_(y)/[\\[IMAGE svg\\]](img20.svg)                                                      | standard error of the mean value                   |\n| `STATS_stddev_err`   |                              | *σ*_(y)/[\\[IMAGE svg\\]](img21.svg)                                                      | standard error of the standard deviation           |\n| `STATS_skewness_err` |                              | [\\[IMAGE svg\\]](img22.svg)                                                              | standard error of the skewness                     |\n| `STATS_kurtosis_err` |                              | [\\[IMAGE svg\\]](img23.svg)                                                              | standard error of the kurtosis                     |\n\nThe third set of variables is only relevant to analysis of two data columns.\n\n|                       |     |                                                       |\n|-----------------------|-----|-------------------------------------------------------|\n| `STATS_correlation`   |     | sample correlation coefficient between x and y values |\n| `STATS_slope`         |     | A corresponding to a linear fit y = Ax + B            |\n| `STATS_slope_err`     |     | uncertainty of A                                      |\n| `STATS_intercept`     |     | B corresponding to a linear fit y = Ax + B            |\n| `STATS_intercept_err` |     | uncertainty of B                                      |\n| `STATS_sumxy`         |     | sum of x\\*y                                           |\n| `STATS_pos_min_y`     |     | x coordinate of a point with minimum y value          |\n| `STATS_pos_max_y`     |     | x coordinate of a point with maximum y value          |\n\nKeyword **matrix** indicates that the input consists of a matrix (see **[matrix](splot#matrix)**); the usual statistics are generated by considering all matrix elements. The matrix dimensions are saved in variables STATS_size_x and STATS_size_y.\n\n|                |     |                          |\n|----------------|-----|--------------------------|\n| `STATS_size_x` |     | number of matrix columns |\n| `STATS_size_y` |     | number of matrix rows    |\n\nThe index reported in STATS_index_xxx corresponds to the value of pseudo-column 0 ($0) in plot commands. I.e. the first point has index 0, the last point has index N-1.\n\nData values are sorted to find the median and quartile boundaries. If the total number of points N is odd, then the median value is taken as the value of data point (N+1)/2. If N is even, then the median is reported as the mean value of points N/2 and (N+2)/2. Equivalent treatment is used for the quartile boundaries.\n\nFor an example of using the **stats** command to annotate a subsequent plot, see [stats.dem. ](http://www.gnuplot.info/demo/stats.html)\n\nThe **stats** command in this version of gnuplot can handle log-scaled data, but not the content of time/date fields (**set xdata time** or **set ydata time**). This restriction may be relaxed in a future version.\n\n## Name\n\nIt may be convenient to track the statistics from more than one file or data column in parallel. The **name** option causes the default prefix \"STATS\" to be replaced by a user-specified string. For example, the mean value of column 2 data from two different files could be compared by\n\n    stats \"file1.dat\" using 2 name \"A\"\n    stats \"file2.dat\" using 2 name \"B\"\n    if (A_mean < B_mean) {...}\n\nInstead of providing a string constant as the name, the keyword **columnheader** or function **columnheader(N)** can be used to generate the name from whatever string is found in that column in the first row of the data file:\n\n    do for [COL=5:8] { stats 'datafile' using COL name columnheader }\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Stats Name
  id: stats_statistical_summary#SECTION040321000000000000000
  summary: It may be convenient to track the statistics from more than one file or data column in parallel
  belongs_to: Stats
  description: "## Name\n\nIt may be convenient to track the statistics from more than one file or data column in parallel. The **name** option causes the default prefix \"STATS\" to be replaced by a user-specified string. For example, the mean value of column 2 data from two different files could be compared by\n\n    stats \"file1.dat\" using 2 name \"A\"\n    stats \"file2.dat\" using 2 name \"B\"\n    if (A_mean < B_mean) {...}\n\nInstead of providing a string constant as the name, the keyword **columnheader** or function **columnheader(N)** can be used to generate the name from whatever string is found in that column in the first row of the data file:\n\n    do for [COL=5:8] { stats 'datafile' using COL name columnheader }\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Steps
  id: steps
  summary: The steps style is only relevant to 2D plotting
  description: "# Steps\n\nThe **steps** style is only relevant to 2D plotting. It connects consecutive points with two line segments: the first from (x1,y1) to (x2,y1) and the second from (x2,y1) to (x2,y2). The input column requires are the same as for plot styles **lines** and **points**. The difference between **fsteps** and **steps** is that **fsteps** traces first the change in y and then the change in x. **steps** traces first the change in x and then the change in y. To fill the area between the curve and the baseline at y=0, use **fillsteps**. See also [steps demo. ](http://www.gnuplot.info/demo/steps.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: String constants, string variables, and string functions
  id: string_constants_string_var
  summary: In addition to string constants, most gnuplot commands also accept a string variable, a string expression, or a function that returns a string
  description: "# String constants, string variables, and string functions\n\nIn addition to string constants, most gnuplot commands also accept a string variable, a string expression, or a function that returns a string. For example, the following four methods of creating a plot all result in the same plot title:\n\n    four = \"4\"\n    graph4 = \"Title for plot #4\"\n    graph(n) = sprintf(\"Title for plot #%d\",n)\n\n    plot 'data.4' title \"Title for plot #4\"\n    plot 'data.4' title graph4\n    plot 'data.4' title \"Title for plot #\".four\n    plot 'data.4' title graph(4)\n\nSince integers are promoted to strings when operated on by the string concatenation operator ('.' character), the following method also works:\n\n    N = 4\n    plot 'data.'.N title \"Title for plot #\".N\n\nIn general, elements on the command line will only be evaluated as possible string variables if they are not otherwise recognizable as part of the normal gnuplot syntax. So the following sequence of commands is legal, although probably should be avoided so as not to cause confusion:\n\n    plot = \"my_datafile.dat\"\n    title = \"My Title\"\n    plot plot title title\n\n## Substrings\n\nSubstrings can be specified by appending a range specifier to any string, string variable, or string-valued function. The range specifier has the form \\[begin:end\\], where begin is the index of the first character of the substring and end is the index of the last character of the substring. The first character has index 1. The begin or end fields may be empty, or contain '\\*', to indicate the true start or end of the original string. E.g. str\\[:\\] and str\\[\\*:\\*\\] both describe the full string str.\n\n## String operators\n\nThree binary operators require string operands: the string concatenation operator \".\", the string equality operator \"eq\" and the string inequality operator \"ne\". The following example will print TRUE.\n\n    if (\"A\".\"B\" eq \"AB\") print \"TRUE\"\n\n## String functions\n\nGnuplot provides several built-in functions that operate on strings. General formatting functions: see **[gprintf](set_show#gprintf)** **[sprintf](expressions#sprintf)**. Time formatting functions: see **[strftime](expressions#strftime)** **[strptime](expressions#strptime)**. String manipulation: see **[substr](expressions#substr)** **[strstrt](expressions#strstrt)** **[trim](expressions#trim)** **[word](expressions#word)** **[words](expressions#words)**.\n\n## String encoding\n\nGnuplot's built-in string manipulation functions are sensitive to utf-8 encoding (see **[set encoding](set_show#set_encoding)**). For example\n\n    utf8string = \"αβγ\"\n    strlen(utf8string) returns 3 (number of characters, not number of bytes)\n    utf8string[2:2] evaluates to \"β\"\n    strstrt(utf8string,\"β\") evaluates to 2\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: String encoding
  id: string_constants_string_var#SECTION020284000000000000000
  summary: Gnuplot's built-in string manipulation functions are sensitive to utf-8 encoding (see set encoding)
  belongs_to: String constants, string variables, and string functions
  description: "## String encoding\n\nGnuplot's built-in string manipulation functions are sensitive to utf-8 encoding (see **[set encoding](set_show#set_encoding)**). For example\n\n    utf8string = \"αβγ\"\n    strlen(utf8string) returns 3 (number of characters, not number of bytes)\n    utf8string[2:2] evaluates to \"β\"\n    strstrt(utf8string,\"β\") evaluates to 2\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: String functions
  id: string_constants_string_var#SECTION020283000000000000000
  summary: Gnuplot provides several built-in functions that operate on strings
  belongs_to: String constants, string variables, and string functions
  description: |-
    ## String functions

    Gnuplot provides several built-in functions that operate on strings. General formatting functions: see **[gprintf](set_show#gprintf)** **[sprintf](expressions#sprintf)**. Time formatting functions: see **[strftime](expressions#strftime)** **[strptime](expressions#strptime)**. String manipulation: see **[substr](expressions#substr)** **[strstrt](expressions#strstrt)** **[trim](expressions#trim)** **[word](expressions#word)** **[words](expressions#words)**.
- name: String operators
  id: string_constants_string_var#SECTION020282000000000000000
  summary: 'Three binary operators require string operands: the string concatenation operator ".", the string equality operator "eq" and the string inequality operator "ne". The following example will print TRUE'
  belongs_to: String constants, string variables, and string functions
  description: |-
    ## String operators

    Three binary operators require string operands: the string concatenation operator ".", the string equality operator "eq" and the string inequality operator "ne". The following example will print TRUE.

        if ("A"."B" eq "AB") print "TRUE"
- name: String variables, macros, and command line substitution
  id: substitution_command_line_m#SECTION020293000000000000000
  summary: The interaction of string variables, backquotes and macro substitution is somewhat complicated
  belongs_to: Substitution and Command line macros
  description: "## String variables, macros, and command line substitution\n\nThe interaction of string variables, backquotes and macro substitution is somewhat complicated. Backquotes do not block macro substitution, so\n\n    filename = \"mydata.inp\"\n    lines = ` wc --lines @filename | sed \"s/ .*//\" `\n\nresults in the number of lines in mydata.inp being stored in the integer variable lines. And double quotes do not block backquote substitution, so\n\n    mycomputer = \"`uname -n`\"\n\nresults in the string returned by the system command **uname -n** being stored in the string variable mycomputer.\n\nHowever, macro substitution is not performed inside double quotes, so you cannot define a system command as a macro and then use both macro and backquote substitution at the same time.\n\n    machine_id = \"uname -n\"\n    mycomputer = \"`@machine_id`\"  # doesn't work!!\n\nThis fails because the double quotes prevent @machine_id from being interpreted as a macro. To store a system command as a macro and execute it later you must instead include the backquotes as part of the macro itself. This is accomplished by defining the macro as shown below. Notice that the sprintf format nests all three types of quotes.\n\n    machine_id = sprintf('\"`uname -n`\"')\n    mycomputer = @machine_id\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Style
  id: set_show#SECTION0402986000000000000000
  summary: Default plotting styles are chosen with the set style data and set style function commands
  belongs_to: Set-show
  description: |-
    ## Style

    Default plotting styles are chosen with the **set style data** and **set style function** commands. See **[plot with](plot#plot_with)** for information about how to override the default plotting style for individual functions and data sets. See **plotting styles** or **[plot with](plot#plot_with)** for a complete list of styles.

    Syntax:

        set style function <style>
        set style data <style>
        show style function
        show style data

    Default styles for specific plotting elements may also be set.

    Syntax:

        set style arrow <n> <arrowstyle>
        set style boxplot <boxplot style options>
        set style circle radius <size> {clip|noclip}
        set style ellipse size <size> units {xy|xx|yy} {clip|noclip}
        set style fill <fillstyle>
        set style histogram <histogram style options>
        set style line <n> <linestyle>
        set style rectangle <object options> <linestyle> <fillstyle>
        set style textbox {<n>} {opaque|transparent} {{no}border} {fillcolor}
- name: Substitution and Command line macros
  id: substitution_command_line_m
  summary: When a command line to gnuplot is first read, i.e
  description: "# Substitution and Command line macros\n\nWhen a command line to gnuplot is first read, i.e. before it is interpreted or executed, two forms of lexical substitution are performed. These are triggered by the presence of text in backquotes (ascii character 96) or preceded by @ (ascii character 64).\n\n## Substitution of system commands in backquotes\n\nCommand-line substitution is specified by a system command enclosed in backquotes. This command is spawned and the output it produces replaces the backquoted text on the command line. Exit status of the system command is returned in variables GPVAL_SYSTEM_ERRNO and GPVAL_SYSTEM_ERRMSG.\n\nCHANGE (differs from versions 4 through 5.2): Internal carriage-return (' \\\\r') and newline (' \\\\n') characters are not stripped from the input stream during substitution. This change brings backquote substitution in line with the system() function.\n\nCommand-line substitution can be used anywhere on the **gnuplot** command line except inside strings delimited by single quotes.\n\nExample:\n\nThis will run the program **leastsq** and replace **leastsq** (including backquotes) on the command line with its output:\n\n    f(x) = `leastsq`\n\nor, in VMS\n\n    f(x) = `run leastsq`\n\nThese will generate labels with the current time and userid:\n\n    set label \"generated on `date +%Y-%m-%d` by `whoami`\" at 1,1\n    set timestamp \"generated on %Y-%m-%d by `whoami`\"\n\n## Substitution of string variables as macros\n\nThe character @ is used to trigger substitution of the current value of a string variable into the command line. The text in the string variable may contain any number of lexical elements. This allows string variables to be used as command line macros. Only string constants may be expanded using this mechanism, not string-valued expressions. For example:\n\n    style1 = \"lines lt 4 lw 2\"\n    style2 = \"points lt 3 pt 5 ps 2\"\n    range1 = \"using 1:3\"\n    range2 = \"using 1:5\"\n    plot \"foo\" @range1 with @style1, \"bar\" @range2 with @style2\n\nThe line containing @ symbols is expanded on input, so that by the time it is executed the effect is identical to having typed in full\n\n    plot \"foo\" using 1:3 with lines lt 4 lw 2, \\\n         \"bar\" using 1:5 with points lt 3 pt 5 ps 2\n\nThe function exists() may be useful in connection with macro evaluation. The following example checks that C can safely be expanded as the name of a user-defined variable:\n\n    C = \"pi\"\n    if (exists(C)) print C,\" = \", @C\n\nMacro expansion does not occur inside either single or double quotes. However macro expansion does occur inside backquotes.\n\nMacro expansion is handled as the very first thing the interpreter does when looking at a new line of commands and is only done once. Therefore, code like the following will execute correctly:\n\n    A = \"c=1\"\n    @A\n\nbut this line will not, since the macro is defined on the same line and will not be expanded in time\n\n    A = \"c=1\"; @A   # will not expand to c=1\n\nMacro expansion inside a bracketed iteration occurs before the loop is executed; i.e. @A will always act as the original value of A even if A itself is reassigned inside the loop.\n\nFor execution of complete commands the **evaluate** command may also be handy.\n\n## String variables, macros, and command line substitution\n\nThe interaction of string variables, backquotes and macro substitution is somewhat complicated. Backquotes do not block macro substitution, so\n\n    filename = \"mydata.inp\"\n    lines = ` wc --lines @filename | sed \"s/ .*//\" `\n\nresults in the number of lines in mydata.inp being stored in the integer variable lines. And double quotes do not block backquote substitution, so\n\n    mycomputer = \"`uname -n`\"\n\nresults in the string returned by the system command **uname -n** being stored in the string variable mycomputer.\n\nHowever, macro substitution is not performed inside double quotes, so you cannot define a system command as a macro and then use both macro and backquote substitution at the same time.\n\n    machine_id = \"uname -n\"\n    mycomputer = \"`@machine_id`\"  # doesn't work!!\n\nThis fails because the double quotes prevent @machine_id from being interpreted as a macro. To store a system command as a macro and execute it later you must instead include the backquotes as part of the macro itself. This is accomplished by defining the macro as shown below. Notice that the sprintf format nests all three types of quotes.\n\n    machine_id = sprintf('\"`uname -n`\"')\n    mycomputer = @machine_id\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Substitution of string variables as macros
  id: substitution_command_line_m#SECTION020292000000000000000
  summary: The character @ is used to trigger substitution of the current value of a string variable into the command line
  belongs_to: Substitution and Command line macros
  description: |-
    ## Substitution of string variables as macros

    The character @ is used to trigger substitution of the current value of a string variable into the command line. The text in the string variable may contain any number of lexical elements. This allows string variables to be used as command line macros. Only string constants may be expanded using this mechanism, not string-valued expressions. For example:

        style1 = "lines lt 4 lw 2"
        style2 = "points lt 3 pt 5 ps 2"
        range1 = "using 1:3"
        range2 = "using 1:5"
        plot "foo" @range1 with @style1, "bar" @range2 with @style2

    The line containing @ symbols is expanded on input, so that by the time it is executed the effect is identical to having typed in full

        plot "foo" using 1:3 with lines lt 4 lw 2, \
             "bar" using 1:5 with points lt 3 pt 5 ps 2

    The function exists() may be useful in connection with macro evaluation. The following example checks that C can safely be expanded as the name of a user-defined variable:

        C = "pi"
        if (exists(C)) print C," = ", @C

    Macro expansion does not occur inside either single or double quotes. However macro expansion does occur inside backquotes.

    Macro expansion is handled as the very first thing the interpreter does when looking at a new line of commands and is only done once. Therefore, code like the following will execute correctly:

        A = "c=1"
        @A

    but this line will not, since the macro is defined on the same line and will not be expanded in time

        A = "c=1"; @A   # will not expand to c=1

    Macro expansion inside a bracketed iteration occurs before the loop is executed; i.e. @A will always act as the original value of A even if A itself is reassigned inside the loop.

    For execution of complete commands the **evaluate** command may also be handy.
- name: Substitution of system commands in backquotes
  id: substitution_command_line_m#SECTION020291000000000000000
  summary: Command-line substitution is specified by a system command enclosed in backquotes
  belongs_to: Substitution and Command line macros
  description: |-
    ## Substitution of system commands in backquotes

    Command-line substitution is specified by a system command enclosed in backquotes. This command is spawned and the output it produces replaces the backquoted text on the command line. Exit status of the system command is returned in variables GPVAL_SYSTEM_ERRNO and GPVAL_SYSTEM_ERRMSG.

    CHANGE (differs from versions 4 through 5.2): Internal carriage-return (' \\r') and newline (' \\n') characters are not stripped from the input stream during substitution. This change brings backquote substitution in line with the system() function.

    Command-line substitution can be used anywhere on the **gnuplot** command line except inside strings delimited by single quotes.

    Example:

    This will run the program **leastsq** and replace **leastsq** (including backquotes) on the command line with its output:

        f(x) = `leastsq`

    or, in VMS

        f(x) = `run leastsq`

    These will generate labels with the current time and userid:

        set label "generated on `date +%Y-%m-%d` by `whoami`" at 1,1
        set timestamp "generated on %Y-%m-%d by `whoami`"
- name: Substrings
  id: string_constants_string_var#SECTION020281000000000000000
  summary: Substrings can be specified by appending a range specifier to any string, string variable, or string-valued function
  belongs_to: String constants, string variables, and string functions
  description: |-
    ## Substrings

    Substrings can be specified by appending a range specifier to any string, string variable, or string-valued function. The range specifier has the form \[begin:end\], where begin is the index of the first character of the substring and end is the index of the last character of the substring. The first character has index 1. The begin or end fields may be empty, or contain '\*', to indicate the true start or end of the original string. E.g. str\[:\] and str\[\*:\*\] both describe the full string str.
- name: Summation
  id: expressions#SECTION020165000000000000000
  summary: <var> is treated as an integer variable that takes on successive integral values from <start> to <end>. For each of these, the current value of <expression> is added to a running total whose final value becomes the value of the summation expression
  belongs_to: Expressions
  description: |-
    ## Summation

    A summation expression has the form

        sum [<var> = <start> : <end>] <expression>

    \<var\> is treated as an integer variable that takes on successive integral values from \<start\> to \<end\>. For each of these, the current value of \<expression\> is added to a running total whose final value becomes the value of the summation expression. Examples:

        print sum [i=1:10] i
            55.
        # Equivalent to plot 'data' using 1:($2+$3+$4+$5+$6+...)
        plot 'data' using 1 : (sum [col=2:MAXCOL] column(col))

    It is not necessary that \<expression\> contain the variable \<var\>. Although \<start\> and \<end\> can be specified as variables or expressions, their value cannot be changed dynamically as a side-effect of carrying out the summation. If \<end\> is less than \<start\> then the value of the summation is zero.
- name: Surface
  id: set_show#SECTION0402987000000000000000
  summary: The set surface command is only relevant for 3D plots (splot)
  belongs_to: Set-show
  description: |-
    ## Surface

    The **set surface** command is only relevant for 3D plots (**splot**).

    Syntax:

        set surface {implicit|explicit}
        unset surface
        show surface

    **unset surface** will cause **splot** to not draw points or lines corresponding to any of the function or data file points. This is mainly useful for drawing only contour lines rather than the surface they were derived from. Contours may still be drawn on the surface, depending on the **set contour** option. To turn off the surface for an individual function or data file while leaving others active, use the **nosurface** keyword in the **splot** command. The combination **unset surface; set contour base** is useful for displaying contours on the grid base. See also **[set contour](set_show#set_contour)**.

    If a 3D data set is recognizable as a mesh (grid) then by default the program implicitly treats the plot style **with lines** as requesting a gridded surface. See **[grid_data](splot#grid_data)**. The command **set surface explicit** suppresses this expansion, plotting only the individual lines described by separate blocks of data in the input file. A gridded surface can still be plotted by explicitly requesting splot **with surface**.
- name: Svg
  id: complete_list_terminals#SECTION050157000000000000000
  summary: This terminal produces files in the W3C Scalable Vector Graphics format
  description: |-
    ## Svg

    This terminal produces files in the W3C Scalable Vector Graphics format.

    Syntax:

        set terminal svg {size <x>,<y> {|fixed|dynamic}}
                         {mouse} {standalone | jsdir <dirname>}
                         {name <plotname>}
                         {font "<fontname>{,<fontsize>}"} {{no}enhanced}
                         {fontscale <multiplier>}
                         {rounded|butt|square} {solid|dashed} {linewidth <lw>}
                         {background <rgb_color>}

    where \<x\> and \<y\> are the size of the SVG plot to generate, **dynamic** allows a svg-viewer to resize plot, whereas the default setting, **fixed**, will request an absolute size.

    **linewidth \<w\>** increases the width of all lines used in the figure by a factor of \<w\>.

    \<font\> is the name of the default font to use (default Arial) and \<fontsize\> is the font size (in points, default 12). SVG viewing programs may substitute other fonts when the file is displayed.

    The enhanced text mode syntax is shared with other gnuplot terminal types. See **[enhanced](enhanced_text_mode#enhanced)** for more details.

    The **mouse** option tells gnuplot to add support for mouse tracking and for toggling individual plots on/off by clicking on the corresponding key entry. By default this is done by including a link that points to a script in a local directory, usually /usr/local/share/gnuplot/\<version\>/js. You can change this by using the **jsdir** option to specify either a different local directory or a general URL. The latter is usually appropriate if you are embedding the svg into a web page. Alternatively, the **standalone** option embeds the mousing code in the svg document itself rather than linking to an external resource.

    When an SVG file will be used in conjunction with external files, e.g. if it is referenced by javascript code in a web page or parent document, then a unique name is required to avoid potential conflicting references to other SVG plots. Use the **name** option to ensure uniqueness.
- name: Svga
  id: complete_list_terminals#SECTION050158000000000000000
  summary: Legacy terminal
  description: |-
    ## Svga

    Legacy terminal. The **svga** terminal driver supports PCs with SVGA graphics. It is typically only compiled with DJGPP and uses the GRX graphics library. There is also a variant for Windows 32bit, which is mainly used for debugging. The underlying library also supports X11, Linux console and SDL, but these targets are currently not supported.

    Syntax:

        set terminal svga {font "<fontname>"}
                          {{no}enhanced}
                          {background <rgb color>}
                          {linewidth|lw <lw>}
                          {pointscale|ps <scale>}
                          {fontscale|fs <scale>}

    Enhanced text support can be activated using the **enhanced** option, see **[enhanced text](enhanced_text_mode#enhanced_text)**. Note that changing the font size in enhanced text is currently not supported. Hence, super- and subscripts will have the same size.

    The **linewidth** parameter scales the width of lines. The **pointscale** parameter sets the scale factor for point symbols. You can use **fontscale** to scale the bitmap font. This might be useful if you have a hi-res display. Note that integer factors give best results.
- name: Syntax
  id: syntax
  summary: Options and any accompanying parameters are separated by spaces whereas lists and coordinates are separated by commas
  description: "# Syntax\n\nOptions and any accompanying parameters are separated by spaces whereas lists and coordinates are separated by commas. Ranges are separated by colons and enclosed in brackets \\[\\], text and file names are enclosed in quotes, and a few miscellaneous things are enclosed in parentheses.\n\nCommas are used to separate coordinates on the **set** commands **arrow**, **key**, and **label**; the list of variables being fitted (the list after the **via** keyword on the **fit** command); lists of discrete contours or the loop parameters which specify them on the **set cntrparam** command; the arguments of the **set** commands **dgrid3d**, **dummy**, **isosamples**, **offsets**, **origin**, **samples**, **size**, **time**, and **view**; lists of tics or the loop parameters which specify them; the offsets for titles and axis labels; parametric functions to be used to calculate the x, y, and z coordinates on the **plot**, **replot** and **splot** commands; and the complete sets of keywords specifying individual plots (data sets or functions) on the **plot**, **replot** and **splot** commands.\n\nParentheses are used to delimit sets of explicit tics (as opposed to loop parameters) and to indicate computations in the **using** filter of the **fit**, **plot**, **replot** and **splot** commands.\n\n(Parentheses and commas are also used as usual in function notation.)\n\nSquare brackets are used to delimit ranges given in **set**, **plot** or **splot** commands.\n\nColons are used to separate extrema in **range** specifications (whether they are given on **set**, **plot** or **splot** commands) and to separate entries in the **using** filter of the **plot**, **replot**, **splot** and **fit** commands.\n\nSemicolons are used to separate commands given on a single command line.\n\nCurly braces are used in the syntax for enhanced text mode and to delimit blocks in if/then/else statements. They are also used to denote complex numbers: {3,2} = 3 + 2i.\n\n## Quote Marks\n\nGnuplot uses three forms of quote marks for delimiting text strings, double-quote (ascii 34), single-quote (ascii 39), and backquote (ascii 96).\n\nFilenames may be entered with either single- or double-quotes. In this manual the command examples generally single-quote filenames and double-quote other string tokens for clarity.\n\nString constants and text strings used for labels, titles, or other plot elements may be enclosed in either single quotes or double quotes. Further processing of the quoted text depends on the choice of quote marks.\n\nBackslash processing of special characters like \\\\n (newline) and \\\\345 (octal character code) is performed only for double-quoted strings. In single-quoted strings, backslashes are just ordinary characters. To get a single-quote (ascii 39) in a single-quoted string, it must be doubled. Thus the strings \"d \\\\\" s' b \\\\ \\\\\" and 'd\" s' ' b \\\\' are completely equivalent.\n\nText justification is the same for each line of a multi-line string. Thus the center-justified string\n\n    \"This is the first line of text.\\nThis is the second line.\"\n\nwill produce\n\n    This is the first line of text.\n       This is the second line.\n\nbut\n\n    'This is the first line of text.\\nThis is the second line.'\n\nwill produce\n\n    This is the first line of text.\\nThis is the second line.\n\nEnhanced text processing is performed for both double-quoted text and single-quoted text, but only by terminals supporting this mode. See **[enhanced text](enhanced_text_mode#enhanced_text)**.\n\nBack-quotes are used to enclose system commands for substitution into the command line. See **[substitution](substitution_command_line_m#substitution)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Syntax Quote Marks
  id: syntax#SECTION020301000000000000000
  summary: Gnuplot uses three forms of quote marks for delimiting text strings, double-quote (ascii 34), single-quote (ascii 39), and backquote (ascii 96)
  belongs_to: Syntax
  description: "## Quote Marks\n\nGnuplot uses three forms of quote marks for delimiting text strings, double-quote (ascii 34), single-quote (ascii 39), and backquote (ascii 96).\n\nFilenames may be entered with either single- or double-quotes. In this manual the command examples generally single-quote filenames and double-quote other string tokens for clarity.\n\nString constants and text strings used for labels, titles, or other plot elements may be enclosed in either single quotes or double quotes. Further processing of the quoted text depends on the choice of quote marks.\n\nBackslash processing of special characters like \\\\n (newline) and \\\\345 (octal character code) is performed only for double-quoted strings. In single-quoted strings, backslashes are just ordinary characters. To get a single-quote (ascii 39) in a single-quoted string, it must be doubled. Thus the strings \"d \\\\\" s' b \\\\ \\\\\" and 'd\" s' ' b \\\\' are completely equivalent.\n\nText justification is the same for each line of a multi-line string. Thus the center-justified string\n\n    \"This is the first line of text.\\nThis is the second line.\"\n\nwill produce\n\n    This is the first line of text.\n       This is the second line.\n\nbut\n\n    'This is the first line of text.\\nThis is the second line.'\n\nwill produce\n\n    This is the first line of text.\\nThis is the second line.\n\nEnhanced text processing is performed for both double-quoted text and single-quoted text, but only by terminals supporting this mode. See **[enhanced text](enhanced_text_mode#enhanced_text)**.\n\nBack-quotes are used to enclose system commands for substitution into the command line. See **[substitution](substitution_command_line_m#substitution)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: System
  id: system
  summary: system "command" executes "command" in a subprocess by invoking the operating system's default shell
  description: "# System\n\nSyntax:\n\n    system \"command string\"\n    ! command string\n    output = system(\"command string\")\n    show variable GPVAL_SYSTEM\n\n**system \"command\"** executes \"command\" in a subprocess by invoking the operating system's default shell. If called as a function, **system(\"command\")** returns the character stream from the subprocess's stdout as a string. One trailing newline is stripped from the resulting string if present. See also **[backquotes](substitution_command_line_m#backquotes)**.\n\nThe exit status of the subprocess is reported in variables GPVAL_SYSTEM_ERRNO and GPVAL_SYSTEM_ERRMSG. Note that if the command string invokes more than one programs, the subprocess may return \"Success\" even if one of the programs produced an error. E.g. file = system(\"ls -1 \\*.plt \\| tail -1\") will return \"Success\" even if there are no \\*.plt files because **tail** succeeds even if **ls** does not.\n\nThe system command can be used to import external functions into gnuplot as shown below, however this will force creation of a separate subprocess every time the function is invoked. For functions that will be invoked many times it would be better to import a directly callable subroutine from a shared library. See **[import](import#import)** and **plugin.dem**.\n\n    f(x) = real(system(sprintf(\"somecommand %f\", x)))\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Table
  id: set_show#SECTION0402988000000000000000
  summary: rather than creating an actual plot on the current terminal
  belongs_to: Set-show
  description: |-
    ## Table

    When **table** mode is enabled, **plot** and **splot** commands print out a multicolumn text table of values

        X Y {Z} <flag>

    rather than creating an actual plot on the current terminal. The flag character is "i" if the point is in the active range, "o" if it is out-of-range, or "u" if it is undefined. The data format is determined by the format of the axis tickmarks (see **[set format](set_show#set_format)**), and the columns are separated by single spaces. This can be useful if you want to generate contours and then save them for further use. The same method can be used to save interpolated data (see **[set samples](set_show#set_samples)** and **[set dgrid3d](set_show#set_dgrid3d)**).

    Syntax:

        set table {"outfile" | $datablock} {append}
                  {separator {whitespace|tab|comma|"<char>"}}
        plot <whatever>
        unset table

    Subsequent tabular output is written to "outfile", if specified, otherwise it is written to stdout or other current value of **set output**. If **outfile** exists it will be replaced unless the **append** keyword is given. Alternatively, tabular output can be redirected to a named data block. Data block names start with '$', see also **[inline data](inline_data_datablocks#inline_data)**. You must explicitly **unset table** in order to go back to normal plotting on the current terminal.

    The **separator** character can be used to output csv (comma separated value) files. This mode only affects plot style **with table**. See **[plot with table](set_show#plot_with_table)**.
- name: Table Plot with table
  id: set_show#SECTION0402988100000000000000
  summary: This discussion applies only to the special plot style with table
  belongs_to: Set-show
  description: |-
    ### Plot with table

    This discussion applies only to the special plot style **with table**.

    To avoid any style-dependent processing of the input data being tabulated (smoothing, errorbar expansion, secondary range checking, etc), or to increase the number of columns that can be tabulated, use the keyword "table" instead of a normal plot style. In this case the output does not contain an extra, last, column of flags **i**, **o**, **u** indicated inrange/outrange/undefined. The destination for output must first be specified with **set table \<where\>**. For example

        set table $DATABLOCK1
        plot <file> using 1:2:3:4:($5+$6):(func($7)):8:9:10 with table

    Because there is no actual plot style in this case the columns do not correspond to specific axes. Therefore xrange, yrange, etc are ignored.

    If a **using** term evaluates to a string, the string is tabulated. Numerical data is always written with format %g. If you want some other format use sprintf or gprintf to create a formatted string.

        plot <file> using ("File 1"):1:2:3 with table
        plot <file> using (sprintf("%4.2f",$1)) : (sprintf("%4.2f",$3)) with table

    To create a csv file use

        set table "tab.csv" separator comma
        plot <foo> using 1:2:3:4 with table

    \[EXPERIMENTAL\] To select only a subset of the data points for tabulation you can provide an input filter condition (**if \<expression\>**) at the end of the command. Note that the input filter may reference data columns that are not part of the output. This feature may change substantially before appearing in a released version of gnuplot.

        plot <file> using 1:2:($4+$5) with table if (strcol(3) eq "Red")
        plot <file> using 1:2:($4+$5) with table if (10. < $1 && $1 < 100.)
        plot <file> using 1:2:($4+$5) with table if (filter($6,$7) != 0)
- name: Tek40
  id: complete_list_terminals#SECTION050159000000000000000
  summary: This family of terminal drivers supports a variety of VT-like terminals
  description: |-
    ## Tek40

    This family of terminal drivers supports a variety of VT-like terminals. **tek40xx** supports Tektronix 4010 and others as well as most TEK emulators. **vttek** supports VT-like tek40xx terminal emulators. The following are present only if selected when gnuplot is built: **kc-tek40xx** supports MS-DOS Kermit Tek4010 terminal emulators in color; **km-tek40xx** supports them in monochrome. **selanar** supports Selanar graphics. **bitgraph** supports BBN Bitgraph terminals. None have any options.
- name: Tek410x
  id: complete_list_terminals#SECTION050160000000000000000
  summary: The tek410x terminal driver supports the 410x and 420x family of Tektronix terminals
  description: |-
    ## Tek410x

    The **tek410x** terminal driver supports the 410x and 420x family of Tektronix terminals. It has no options.
- name: Terminal
  id: set_show#SECTION0402989000000000000000
  summary: gnuplot supports many different graphics devices
  belongs_to: Set-show
  description: |-
    ## Terminal

    **gnuplot** supports many different graphics devices. Use **set terminal** to tell **gnuplot** what kind of output to generate. Use **set output** to redirect that output to a file or device.

    Syntax:

        set terminal {<terminal-type> | push | pop}
        show terminal

    If \<terminal-type\> is omitted, **gnuplot** will list the available terminal types. \<terminal-type\> may be abbreviated.

    If both **set terminal** and **set output** are used together, it is safest to give **set terminal** first, because some terminals set a flag which is needed in some operating systems.

    Some terminals have many additional options. The options used by a previous invocation **set term \<term\> \<options\>** of a given **\<term\>** are remembered, thus subsequent **set term \<term\>** does not reset them. This helps in printing, for instance, when switching among different terminals — previous options don't have to be repeated.

    The command **set term push** remembers the current terminal including its settings while **set term pop** restores it. This is equivalent to **save term** and **load term**, but without accessing the filesystem. Therefore they can be used to achieve platform independent restoring of the terminal after printing, for instance. After gnuplot's startup, the default terminal or that from **startup** file is pushed automatically. Therefore portable scripts can rely that **set term pop** restores the default terminal on a given platform unless another terminal has been pushed explicitly.

    For more information, see the **[complete list of terminals](complete_list_terminals#complete_list_of_terminals)**.
- name: Termoption
  id: set_show#SECTION0402990000000000000000
  summary: The set termoption command allows you to change the behaviour of the current terminal without requiring a new set terminal command
  belongs_to: Set-show
  description: |-
    ## Termoption

    The **set termoption** command allows you to change the behaviour of the current terminal without requiring a new **set terminal** command. Only one option can be changed per command, and only a small number of options can be changed this way. Currently the only options accepted are

        set termoption {no}enhanced
        set termoption font "<fontname>{,<fontsize>}"
        set termoption fontscale <scale>
        set termoption {linewidth <lw>}{lw <lw>}
- name: Test
  id: test
  summary: This command graphically tests or presents terminal and palette capabilities
  description: "# Test\n\nThis command graphically tests or presents terminal and palette capabilities.\n\nSyntax:\n\n    test {terminal | palette}\n\n**test** or **test terminal** creates a display of line and point styles and other useful things supported by the **terminal** you are currently using.\n\n**test palette** plots profiles of R(z),G(z),B(z), where 0\\<=z\\<=1. These are the RGB components of the current color **palette**. It also plots the apparent net intensity as calculated using NTSC coefficients to map RGB onto a grayscale. The profile values are also loaded into a datablock named $PALETTE.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Texdraw
  id: complete_list_terminals#SECTION050161000000000000000
  summary: The texdraw terminal driver supports the (La)TeX texdraw environment
  description: |-
    ## Texdraw

    The **texdraw** terminal driver supports the (La)TeX texdraw environment. It is intended for use with the texdraw package, see https://www.ctan.org/tex-archive/graphics/texdraw/ .

        set terminal texdraw
                       {size <XX>{unit},<YY>{unit}}
                       {standalone | input}
                       {blacktext | colortext | colourtext}
                       {linewidth <lw>} {rounded | butt}
                       {pointscale <ps>}
                       {psarrows | gparrows} {texpoints | gppoints}
                       {background <rgbcolor>}

    Note: Graphics are in grayscale only. Text is always black. Boxes and polygons are filled using solid gray levels only. Patterns are not available.

    Points, among other things, are drawn using the LaTeX commands " \\Diamond" and " \\Box". These commands no longer belong to the LaTeX2e core; they are included in the latexsym package, which is part of the base distribution and thus part of any LaTeX implementation. Please do not forget to use this package. Other point types use symbols from the amssymb package. For compatibility with plain TeX you need to specify the **gppoints** option.

    **standalone** produces a LaTeX file with possibly multiple plots, ready to be compiled. The default is **input** to produce a TeX file which can be included.

    **blacktext** forces all text to be written in black. **colortext** enables "colored" text. The default is **blacktext** and "color" means grayscale really.

    **rounded** sets line caps and line joins to be rounded; **butt** sets butt caps and mitered joins and is the default.

    **linewidth** and **pointscale** scale the width of lines and the size of point symbols, respectively. **pointscale**only applies to **gppoints**.

    **psarrows** draws **arrow**s using TeXdraw commands which are shorter but do not offer all options. **gparrows** selects drawing drawing arrows using gnuplot's own routine for full functionality instead. Similarly, **texpoints**, and **gppoints** select LaTeX symbols or gnuplot's point drawing routines.
- name: Tgif
  id: complete_list_terminals#SECTION050162000000000000000
  summary: Legacy terminal (present only if gnuplot was configured –with-tgif)
  description: |-
    ## Tgif

    Legacy terminal (present only if gnuplot was configured –with-tgif). Tgif is/was an Xlib based interactive 2-D vector graphics drawing tool also capable of importing and marking up bitmap images.

    The **tgif** driver supports a choice of font and font size and multiple graphs on the page. The proportions of the axes are not changed.

    Syntax:

        set terminal tgif {portrait | landscape | default} {<[x,y]>}
                          {monochrome | color}
                          {{linewidth | lw} <LW>}
                          {solid | dashed}
                          {font "<fontname>{,<fontsize>}"}

    where \<\[x,y\]\> specifies the number of graphs in the x and y directions on the page, **color** enables color, **linewidth** scales all linewidths by \<LW\>, "\<fontname\>" is the name of a valid PostScript font, and \<fontsize\> specifies the size of the PostScript font. **defaults** sets all options to their defaults: **portrait**, **\[1,1\]**, **color**, **linewidth 1.0**, **dashed**, **"Helvetica,18"**.

    The **solid** option is usually preferred if lines are colored, as they often are in the editor. Hardcopy will be black-and-white, so **dashed** should be chosen for that.

    Multiplot is implemented in two different ways.

    The first multiplot implementation is the standard gnuplot multiplot feature:

        set terminal tgif
        set output "file.obj"
        set multiplot
        set origin x01,y01
        set size  xs,ys
        plot ...
             ...
        set origin x02,y02
        plot ...
        unset multiplot

    See **[set multiplot](set_show#set_multiplot)** for further information.

    The second version is the \[x,y\] option for the driver itself. The advantage of this implementation is that everything is scaled and placed automatically without the need for setting origins and sizes; the graphs keep their natural x/y proportions of 3/2 (or whatever is fixed by **set size**).

    If both multiplot methods are selected, the standard method is chosen and a warning message is given.

    Examples of single plots (or standard multiplot):

        set terminal tgif                  # defaults
        set terminal tgif "Times-Roman,24"
        set terminal tgif landscape
        set terminal tgif landscape solid

    Examples using the built-in multiplot mechanism:

        set terminal tgif portrait [2,4]  # portrait; 2 plots in the x-
                                          # and 4 in the y-direction
        set terminal tgif [1,2]           # portrait; 1 plot in the x-
                                          # and 2 in the y-direction
        set terminal tgif landscape [3,3] # landscape; 3 plots in both
                                          # directions
- name: Theta
  id: set_show#SECTION0402991000000000000000
  summary: Polar coordinate plots are by default oriented such that theta = 0 is on the right side of the plot, with theta increasing as you proceed counterclockwise so that theta = 90 degrees is at the top
  belongs_to: Set-show
  description: |-
    ## Theta

    Polar coordinate plots are by default oriented such that theta = 0 is on the right side of the plot, with theta increasing as you proceed counterclockwise so that theta = 90 degrees is at the top. **set theta** allows you to change the origin and direction of the polar angular coordinate theta.

        set theta {right|top|left|bottom}
        set theta {clockwise|cw|counterclockwise|ccw}

    **unset theta** restores the default state "set theta right ccw".
- name: Tics
  id: set_show#SECTION0402992000000000000000
  summary: The set tics command controls the tic marks and labels on all axes at once
  belongs_to: Set-show
  description: |-
    ## Tics

    The **set tics** command controls the tic marks and labels on all axes at once.

    The tics may be turned off with the **unset tics** command, and may be turned on (the default state) with **set tics**. Fine control of tics on individual axes is possible using the alternative commands **set xtics**, **set ztics**, etc.

    Syntax:

        set tics {axis | border} {{no}mirror}
                 {in | out} {front | back}
                 {{no}rotate {by <ang>}} {offset <offset> | nooffset}
                 {left | right | center | autojustify}
                 {format "formatstring"} {font "name{,<size>}"} {{no}enhanced}
                 { textcolor <colorspec> }
        set tics scale {default | <major> {,<minor>}}
        unset tics
        show tics

    The options can be applied to a single axis (x, y, z, x2, y2, cb), e.g.

        set xtics rotate by -90
        unset cbtics

    All tic marks are drawn using the same line properties as the plot border (see **[set border](set_show#set_border)**).

    Set tics **back** or **front** applies to all axes at once, but only for 2D plots (not splot). It controls whether the tics are placed behind or in front of the plot elements, in the case that there is overlap.

    **axis** or **border** tells **gnuplot** to put the tics (both the tics themselves and the accompanying labels) along the axis or the border, respectively. If the axis is very close to the border, the **axis** option will move the tic labels to outside the border in case the border is printed (see **[set border](set_show#set_border)**). The relevant margin settings will usually be sized badly by the automatic layout algorithm in this case.

    **mirror** tells **gnuplot** to put unlabeled tics at the same positions on the opposite border. **nomirror** does what you think it does.

    **in** and **out** change the tic marks to be drawn inwards or outwards.

    **set tics scale** controls the size of the tic marks. The first value \<major\> controls the auto-generated or user-specified major tics (level 0). The second value controls the auto-generated or user-specified minor tics (level 1). \<major\> defaults to 1.0, \<minor\> defaults to \<major\>/2. Additional values control the size of user-specified tics with level 2, 3, ... Default tic sizes are restored by **set tics scale default**.

    **rotate** asks **gnuplot** to rotate the text through 90 degrees, which will be done if the terminal driver in use supports text rotation. **norotate** cancels this. **rotate by \<ang\>** asks for rotation by \<ang\> degrees, supported by some terminal types.

    The defaults are **border mirror norotate** for tics on the x and y axes, and **border nomirror norotate** for tics on the x2 and y2 axes. For the z axis, the default is **nomirror**.

    The \<offset\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. \<offset\> is the offset of the tics texts from their default positions, while the default coordinate system is **character**. See **[coordinates](coordinates#coordinates)** for details. **nooffset** switches off the offset.

    By default, tic labels are justified automatically depending on the axis and rotation angle to produce aesthetically pleasing results. If this is not desired, justification can be overridden with an explicit **left**, **right** or **center** keyword. **autojustify** restores the default behavior.

    **set tics** with no options restores mirrored, inward-facing tic marks for the primary axes. All other settings are retained.

    See also **[set xtics](set_show#set_xtics)** for more control of major (labeled) tic marks and **set mxtics** for control of minor tic marks. These commands provide control of each axis independently.
- name: Ticscale
  id: set_show#SECTION0402994000000000000000
  summary: The set ticscale command is deprecated, use set tics scale instead
  belongs_to: Set-show
  description: |-
    ## Ticscale

    The **set ticscale** command is deprecated, use **set tics scale** instead.
- name: Ticslevel
  id: set_show#SECTION0402993000000000000000
  summary: Deprecated
  belongs_to: Set-show
  description: |-
    ## Ticslevel

    Deprecated. See **[set xyplane](set_show#set_xyplane)**.
- name: Tikz
  id: complete_list_terminals#SECTION050163000000000000000
  summary: This driver creates output for use with the TikZ package of graphics macros in TeX
  description: |-
    ## Tikz

    This driver creates output for use with the TikZ package of graphics macros in TeX. It is currently implemented via an external lua script, and **set term tikz** is a short form of the command **set term lua tikz**. See **[term lua](complete_list_terminals#term_lua)** for more information. Use the command **set term tikz help** to print terminal options.
- name: Time/Date data
  id: time_date_data
  summary: gnuplot supports the use of time and/or date information as input data
  description: "# Time/Date data\n\n**gnuplot** supports the use of time and/or date information as input data. This feature is activated by the commands **set xdata time**, **set ydata time**, etc.\n\nInternally all times and dates are converted to the number of seconds from the year 1970. The command **set timefmt** defines the default format for all inputs: data files, ranges, tics, label positions – anything that accepts a time data value defaults to receiving it in this format. Only one default format can be in effect at a given time. Thus if both x and y data in a file are time/date, by default they are interpreted in the same format. However this default can be replaced when reading any particular file or column of input using the **timecolumn** function in the corresponding **using** specifier.\n\nThe conversion to and from seconds assumes Universal Time (which is the same as Greenwich Standard Time). There is no provision for changing the time zone or for daylight savings. If all your data refer to the same time zone (and are all either daylight or standard) you don't need to worry about these things. But if the absolute time is crucial for your application, you'll need to convert to UT yourself.\n\nCommands like **show xrange** will re-interpret the integer according to **timefmt**. If you change **timefmt**, and then **show** the quantity again, it will be displayed in the new **timefmt**. For that matter, if you reset the data type flag for that axis (e.g. **set xdata**), the quantity will be shown in its numerical form.\n\nThe commands **set format** or **set tics format** define the format that will be used for tic labels, whether or not input for the specified axis is time/date.\n\nIf time/date information is to be plotted from a file, the **using** option *must* be used on the **plot** or **splot** command. These commands simply use white space to separate columns, but white space may be embedded within the time/date string. If you use tabs as a separator, some trial-and-error may be necessary to discover how your system treats them.\n\nThe **time** function can be used to get the current system time. This value can be converted to a date string with the **strftime** function, or it can be used in conjunction with **timecolumn** to generate relative time/date plots. The type of the argument determines what is returned. If the argument is an integer, **time** returns the current time as an integer, in seconds from 1 Jan 1970. If the argument is real (or complex), the result is real as well. The precision of the fractional (sub-second) part depends on your operating system. If the argument is a string, it is assumed to be a format string, and it is passed to **strftime** to provide a formatted time/date string.\n\nThe following example demonstrates time/date plotting.\n\nSuppose the file \"data\" contains records like\n\n    03/21/95 10:00  6.02e23\n\nThis file can be plotted by\n\n    set xdata time\n    set timefmt \"%m/%d/%y\"\n    set xrange [\"03/21/95\":\"03/22/95\"]\n    set format x \"%m/%d\"\n    set timefmt \"%m/%d/%y %H:%M\"\n    plot \"data\" using 1:3\n\nwhich will produce xtic labels that look like \"03/21\".\n\nGnuplot tracks time to millisecond precision. Time formats have been modified to match this. Example: print the current time to msec precision\n\n    print strftime(\"%H:%M:%.3S %d-%b-%Y\",time(0.0))\n    18:15:04.253 16-Apr-2011\n\nSee **[time_specifiers](set_show#time_specifiers)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Time/date specifiers
  id: set_show#SECTION0402928300000000000000
  summary: 'There are two groups of time format specifiers: time/date and relative time'
  belongs_to: Set-show
  description: |-
    ### Time/date specifiers

    There are two groups of time format specifiers: time/date and relative time. These may be used to generate axis tic labels or to encode time in a string. See **[set xtics time](set_show#set_xtics_time)**, **[strftime](expressions#strftime)**, **[strptime](expressions#strptime)**.

    The time/date formats are

    |                 |                                                           |
    |-----------------|-----------------------------------------------------------|
    | Date Specifiers |                                                           |
    | Format          | Explanation                                               |
    | `%a`            | abbreviated name of day of the week                       |
    | `%A`            | full name of day of the week                              |
    | `%b` or `%h`    | abbreviated name of the month                             |
    | `%B`            | full name of the month                                    |
    | `%d`            | day of the month, 01–31                                   |
    | `%D`            | shorthand for `"%m/%d/%y"` (only output)                  |
    | `%F`            | shorthand for `"%Y-%m-%d"` (only output)                  |
    | `%k`            | hour, 0–23 (one or two digits)                            |
    | `%H`            | hour, 00–23 (always two digits)                           |
    | `%l`            | hour, 1–12 (one or two digits)                            |
    | `%I`            | hour, 01–12 (always two digits)                           |
    | `%j`            | day of the year, 001–366                                  |
    | `%m`            | month, 01–12                                              |
    | `%M`            | minute, 00–60                                             |
    | `%p`            | "am" or "pm"                                              |
    | `%r`            | shorthand for `"%I:%M:%S %p"` (only output)               |
    | `%R`            | shorthand for `%H:%M"` (only output)                      |
    | `%S`            | second, integer 00–60 on output, (double) on input        |
    | `%s`            | number of seconds since start of year 1970                |
    | `%T`            | shorthand for `"%H:%M:%S"` (only output)                  |
    | `%U`            | week of the year (CDC/MMWR "epi week") (ignored on input) |
    | `%w`            | day of the week, 0–6 (Sunday = 0)                         |
    | `%W`            | week of the year (ISO 8601 week date) (ignored on input)  |
    | `%y`            | year, 0-99 in range 1969-2068                             |
    | `%Y`            | year, 4-digit                                             |
    | `%z`            | timezone, \[+-\]hh:mm                                     |
    | `%Z`            | timezone name, ignored string                             |

    For more information on the %W format (ISO week of year) see **[tm_week](set_show#tm_week)**. The %U format (CDC/MMWR epidemiological week) is similar to %W except that it uses weeks that start on Sunday rather than Monday. Caveat: Both the %W and the %U formats were unreliable in gnuplot versions prior to 5.4.2. See unit test "week_date.dem".

    The relative time formats express the length of a time interval on either side of a zero time point. The relative time formats are

    |                 |                                                     |
    |-----------------|-----------------------------------------------------|
    | Time Specifiers |                                                     |
    | Format          | Explanation                                         |
    | `%tD`           | +/- days relative to time=0                         |
    | `%tH`           | +/- hours relative to time=0 (does not wrap at 24)  |
    | `%tM`           | +/- minutes relative to time=0                      |
    | `%tS`           | +/- seconds associated with previous tH or tM field |

    Numerical formats may be preceded by a "0" ("zero") to pad the field with leading zeroes, and preceded by a positive digit to define the minimum field width. The %S, and %t formats also accept a precision specifier so that fractional hours/minutes/seconds can be written.
- name: Time/date specifiers Examples
  id: set_show#SECTION0402928310000000000000
  summary: Suppose the x value in seconds corresponds a time slightly before midnight on 25 Dec 1976
  belongs_to: Set-show
  description: |-
    #### Examples

    Examples of date format:

    Suppose the x value in seconds corresponds a time slightly before midnight on 25 Dec 1976. The text printed for a tic label at this position would be

        set format x                 # defaults to "12/25/76 \n 23:11"
        set format x "%A, %d %b %Y"  # "Saturday, 25 Dec 1976"
        set format x "%r %D"         # "11:11:11 pm 12/25/76"

    Examples of time format:

    The date format specifiers encode a time in seconds as a clock time on a particular day. So hours run only from 0-23, minutes from 0-59, and negative values correspond to dates prior to the epoch (1-Jan-1970). In order to report a time value in seconds as some number of hours/minutes/seconds relative to a time 0, use time formats %tH %tM %tS. To report a value of -3672.50 seconds

        set format x                 # default date format "12/31/69 \n 22:58"
        set format x "%tH:%tM:%tS"   # "-01:01:12"
        set format x "%.2tH hours"   # "-1.02 hours"
        set format x "%tM:%.2tS"     # "-61:12.50"
- name: Timefmt
  id: set_show#SECTION0402996000000000000000
  summary: This command sets the default format used to input time data
  belongs_to: Set-show
  description: |-
    ## Timefmt

    This command sets the default format used to input time data. See **[set xdata time](set_show#set_xdata_time)**, **[timecolumn](expressions#timecolumn)**.

    Syntax:

        set timefmt "<format string>"
        show timefmt

    The valid formats for both **timefmt** and **timecolumn** are:

    |                                        |                                                       |
    |----------------------------------------|-------------------------------------------------------|
    | Time Series timedata Format Specifiers |                                                       |
    | Format                                 | Explanation                                           |
    | `%d`                                   | day of the month, 1–31                                |
    | `%m`                                   | month of the year, 1–12                               |
    | `%y`                                   | year, 0–99                                            |
    | `%Y`                                   | year, 4-digit                                         |
    | `%j`                                   | day of the year, 1–365                                |
    | `%H`                                   | hour, 0–24                                            |
    | `%M`                                   | minute, 0–60                                          |
    | `%s`                                   | seconds since the Unix epoch (1970-01-01 00:00 UTC)   |
    | `%S`                                   | second, integer 0–60 on output, (double) on input     |
    | `%b`                                   | three-character abbreviation of the name of the month |
    | `%B`                                   | name of the month                                     |
    | `%p`                                   | two character match to one of: am AM pm PM            |

    Any character is allowed in the string, but must match exactly. \\t (tab) is recognized. Backslash-octals ( \\nnn) are converted to char. If there is no separating character between the time/date elements, then %d, %m, %y, %H, %M and %S read two digits each. If a decimal point immediately follows the field read by %S, the decimal and any following digits are interpreted as a fractional second. %Y reads four digits. %j reads three digits. %b requires three characters, and %B requires as many as it needs.

    Spaces are treated slightly differently. A space in the string stands for zero or more whitespace characters in the file. That is, "%H %M" can be used to read "1220" and "12 20" as well as "12 20".

    Each set of non-blank characters in the timedata counts as one column in the **using n:n** specification. Thus **11:11 25/12/76 21.0** consists of three columns. To avoid confusion, **gnuplot** requires that you provide a complete **using** specification if your file contains timedata.

    If the date format includes the day or month in words, the format string must exclude this text. But it can still be printed with the "%a", "%A", "%b", or "%B" specifier. **gnuplot** will determine the proper month and weekday from the numerical values. See **[set format](set_show#set_format)** for more details about these and other options for printing time data.

    When reading two-digit years with %y, values 69-99 refer to the 20th century, while values 00-68 refer to the 21st century. NB: This is in accordance with the UNIX98 spec, but conventions vary widely and two-digit year values are inherently ambiguous.

    If the %p format returns "am" or "AM", hour 12 will be interpreted as hour 0. If the %p format returns "pm" or "PM", hours \< 12 will be increased by 12.

    See also **[set xdata](set_show#set_xdata)** and **[time/date](time_date_data#time_date)** for more information.

    Example:

        set timefmt "%d/%m/%Y\t%H:%M"

    tells **gnuplot** to read date and time separated by tab. (But look closely at your data — what began as a tab may have been converted to spaces somewhere along the line; the format string must match what is actually in the file.) See also [time data demo. ](http://www.gnuplot.info/demo/timedat.html)
- name: Timestamp
  id: set_show#SECTION0402995000000000000000
  summary: The command set timestamp places the current time and date in the plot margin
  belongs_to: Set-show
  description: |-
    ## Timestamp

    The command **set timestamp** places the current time and date in the plot margin.

    Syntax:

        set timestamp {"<format>"} {top|bottom} {{no}rotate}
                      {offset <xoff>{,<yoff>}} {font "<fontspec>"}
                      {textcolor <colorspec>}
        unset timestamp
        show timestamp

    The format string is used to write the date and time. Its default value is what asctime() uses: "%a %b %d %H:%M:%S %Y" (weekday, month name, day of the month, hours, minutes, seconds, four-digit year). With **top** or **bottom** you can place the timestamp along the top left or bottom left margin (default: bottom). **rotate** writes the timestamp vertically. The constants \<xoff\> and \<yoff\> are offsets that let you adjust the position more finely. \<font\> is used to specify the font with which the time is to be written.

    The abbreviation **time** may be used in place of **timestamp**.

    Example:

        set timestamp "%d/%m/%y %H:%M" offset 80,-2 font "Helvetica"

    See **[set timefmt](set_show#set_timefmt)** for more information about time format strings.
- name: Tips
  id: fit#SECTION04097000000000000000
  summary: Here are some tips to keep in mind to get the most out of fit
  belongs_to: Fit
  description: "## Tips\n\nHere are some tips to keep in mind to get the most out of **fit**. They're not very organized, so you'll have to read them several times until their essence has sunk in.\n\nThe two forms of the **via** argument to **fit** serve two largely distinct purposes. The **via \"file\"** form is best used for (possibly unattended) batch operation, where you supply the starting parameter values in a file.\n\nThe **via var1, var2, ...** form is best used interactively, where the command history mechanism may be used to edit the list of parameters to be fitted or to supply new startup values for the next try. This is particularly useful for hard problems, where a direct fit to all parameters at once won't work without good starting values. To find such, you can iterate several times, fitting only some of the parameters, until the values are close enough to the goal that the final fit to all parameters at once will work.\n\nMake sure that there is no mutual dependency among parameters of the function you are fitting. For example, don't try to fit a\\*exp(x+b), because a\\*exp(x+b)=a\\*exp(b)\\*exp(x). Instead, fit either a\\*exp(x) or exp(x+b).\n\nA technical issue: The larger the ratio of the largest and the smallest absolute parameter values, the slower the fit will converge. If the ratio is close to or above the inverse of the machine floating point precision, it may take next to forever to converge, or refuse to converge at all. You will either have to adapt your function to avoid this, e.g., replace 'parameter' by '1e9\\*parameter' in the function definition, and divide the starting value by 1e9 or use **set fit prescale** which does this internally according to the parameter starting values.\n\nIf you can write your function as a linear combination of simple functions weighted by the parameters to be fitted, by all means do so. That helps a lot, because the problem is no longer nonlinear and should converge with only a small number of iterations, perhaps just one.\n\nSome prescriptions for analysing data, given in practical experimentation courses, may have you first fit some functions to your data, perhaps in a multi-step process of accounting for several aspects of the underlying theory one by one, and then extract the information you really wanted from the fitting parameters of those functions. With **fit**, this may often be done in one step by writing the model function directly in terms of the desired parameters. Transforming data can also quite often be avoided, though sometimes at the cost of a more difficult fit problem. If you think this contradicts the previous paragraph about simplifying the fit function, you are correct.\n\nA \"singular matrix\" message indicates that this implementation of the Marquardt-Levenberg algorithm can't calculate parameter values for the next iteration. Try different starting values, writing the function in another form, or a simpler function.\n\nFinally, a nice quote from the manual of another fitting package (fudgit), that kind of summarizes all these issues: \"Nonlinear fitting is an art\\!\"\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Title
  id: plot#SECTION0401811000000000000000
  summary: By default each plot is listed in the key by the corresponding function or file name
  belongs_to: Plot
  description: |-
    ## Title

    By default each plot is listed in the key by the corresponding function or file name. You can give an explicit plot title instead using the **title** option.

    Syntax:

        title <text> | notitle [<ignored text>]
        title columnheader | title columnheader(N)
              {at {beginning|end}} {{no}enhanced}

    where \<text\> is a quoted string or an expression that evaluates to a string. The quotes will not be shown in the key. Note: Starting with gnuplot version 5.4, if \<text\> is an expression or function it it evaluated after the corresponding function or data stream is plotted. This allows the title to reference quantities calculated or input during plotting, which was not possible in earlier gnuplot versions.

    There is also an option that will interpret the first entry in a column of input data (i.e. the column header) as a text field, and use it as the key title. See **[datastrings](datastrings#datastrings)**. This can be made the default by specifying **set key autotitle columnhead**.

    The line title and sample can be omitted from the key by using the keyword **notitle**. A null title (**title ' '**) is equivalent to **notitle**. If only the sample is wanted, use one or more blanks (**title ' '**). If **notitle** is followed by a string this string is ignored.

    If **key autotitles** is set (which is the default) and neither **title** nor **notitle** are specified the line title is the function name or the file name as it appears on the **plot** command. If it is a file name, any datafile modifiers specified will be included in the default title.

    The layout of the key itself (position, title justification, etc.) can be controlled using **[set key](set_show#set_key)**.

    The **at** keyword allows you to place the plot title somewhere outside the auto-generated key box. The title can be placed immediately before or after the line in the graph itself by using **at {beginning\|end}**. This option may be useful when plotting **with lines** but makes little sense for most other styles.

    To place the plot title at an arbitrary location on the page, use the form **at \<x-position\>,\<y-position\>**. By default the position is interpreted in screen coordinates; e.g. **at 0.5, 0.5** is always the middle of the screen regardless of plot axis scales or borders. The format of titles placed in this way is still affected by key options. See **[set key](set_show#set_key)**.

    Examples:

    This plots y=x with the title 'x':

        plot x

    This plots x squared with title "x`^`2" and file "data.1" with title "measured data":

        plot x**2 title "x^2", 'data.1' t "measured data"

    Plot multiple columns of data, each of which contains its own title on the first line of the file. Place the titles after the corresponding lines rather than in a separate key:

        unset key
        set offset 0, graph 0.1
        plot for [i=1:4] 'data' using i with lines title columnhead at end

    Create a single key area for two separate plots:

        set key Left reverse
        set multiplot layout 2,2
        plot sin(x) with points pt 6 title "Left plot is sin(x)" at 0.5, 0.30
        plot cos(x) with points pt 7 title "Right plot is cos(x)" at 0.5, 0.27
        unset multiplot
- name: Title
  id: set_show#SECTION0402997000000000000000
  summary: The set title command produces a plot title that is centered at the top of the plot
  belongs_to: Set-show
  description: |-
    ## Title

    The **set title** command produces a plot title that is centered at the top of the plot. **set title** is a special case of **set label**.

    Syntax:

        set title {"<title-text>"} {offset <offset>} {font "<font>{,<size>}"}
                  {{textcolor | tc} {<colorspec> | default}} {{no}enhanced}
        show title

    If \<offset\> is specified by either x,y or x,y,z the title is moved by the given offset. It may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. See **[coordinates](coordinates#coordinates)** for details. By default, the **character** coordinate system is used. For example, "**set title offset 0,-1**" will change only the y offset of the title, moving the title down by roughly the height of one character. The size of a character depends on both the font and the terminal.

    \<font\> is used to specify the font with which the title is to be written; the units of the font \<size\> depend upon which terminal is used.

    **textcolor \<colorspec\>** changes the color of the text. \<colorspec\> can be a linetype, an rgb color, or a palette mapping. See help for **[colorspec](linetypes_colors_styles#colorspec)** and **[palette](expressions#palette)**.

    **noenhanced** requests that the title not be processed by the enhanced text mode parser, even if enhanced text mode is currently active.

    **set title** with no parameters clears the title.

    See **[syntax](syntax#syntax)** for details about the processing of backslash sequences and the distinction between single- and double-quotes.
- name: Tkcanvas
  id: complete_list_terminals#SECTION050164000000000000000
  summary: 'This terminal driver generates Tk canvas widget commands in one of the following scripting languages: Tcl (default), Perl, Python, Ruby, or REXX'
  description: |-
    ## Tkcanvas

    This terminal driver generates Tk canvas widget commands in one of the following scripting languages: Tcl (default), Perl, Python, Ruby, or REXX.

    Syntax:

        set terminal tkcanvas {tcl | perl | perltkx | python | ruby | rexx}
                              {standalone | input}
                              {interactive}
                              {rounded | butt}
                              {nobackground | background <rgb color>}
                              {{no}rottext}
                              {size <width>,<height>}
                              {{no}enhanced}
                              {externalimages | pixels}

    Execute the following sequence of Tcl/Tk commands to display the result:

        package require Tk
        # the following two lines are only required to support external images
        package require img::png
        source resize.tcl
        source plot.tcl
        canvas .c -width 800 -height 600
        pack .c
        gnuplot .c

    Or, for Perl/Tk use a program like this:

        use Tk;
        my $top = MainWindow->new;
        my $c = $top->Canvas(-width => 800, -height => 600)->pack;
        my $gnuplot = do "plot.pl";
        $gnuplot->($c);
        MainLoop;

    Or, for Perl/Tkx use a program like this:

        use Tkx;
        my $top = Tkx::widget->new(".");
        my $c = $top->new_tk__canvas(-width => 800, -height => 600);
        $c->g_pack;
        my $gnuplot = do "plot.pl";
        $gnuplot->($c);
        Tkx::MainLoop();

    Or, for Python/Tkinter use a program like this:

        from tkinter import *
        from tkinter import font
        root = Tk()
        c = Canvas(root, width=800, height=600)
        c.pack()
        exec(open('plot.py').read())
        gnuplot(c)
        root.mainloop()

    Or, for Ruby/Tk use a program like this:

        require 'tk'
        root = TkRoot.new { title 'Ruby/Tk' }
        c = TkCanvas.new(root, 'width'=>800, 'height'=>600) { pack  { } }
        load('plot.rb')
        gnuplot(c)
        Tk.mainloop

    Or, for Rexx/Tk use a program like this:

        /**/
        call RxFuncAdd 'TkLoadFuncs', 'rexxtk', 'TkLoadFuncs'
        call TkLoadFuncs
        cv = TkCanvas('.c', '-width', 800, '-height', 600)
        call TkPack cv
        call 'plot.rex' cv
        do forever
            cmd = TkWait()
            if cmd = 'AWinClose' then leave
            interpret 'call' cmd
        end

    The code generated by **gnuplot** (in the above examples, this code is written to "plot.\<ext\>") contains the following procedures:

    gnuplot(canvas)

        takes the name of a canvas as its argument.
        When called, it clears the canvas, finds the size of the canvas and
        draws the plot in it, scaled to fit.

    gnuplot_plotarea()

        returns a list containing the borders of the plotting area
        (xleft, xright, ytop, ybot) in canvas screen coordinates.    It works only for 2-dimensional plotting (`plot`).

    gnuplot_axisranges()

        returns the ranges of the two axes in plot coordinates
        (x1min, x1max, y1min, y1max, x2min, x2max, y2min, y2max).
        It works only for 2-dimensional plotting (`plot`).

    You can create self-contained, minimal scripts using the **standalone** option. The default is **input** which creates scripts which have to be source'd (or loaded or called or whatever the adequate term is for the language selected).

    If the **interactive** option is specified, mouse clicking on a line segment will print the coordinates of its midpoint to stdout. The user can supersede this behavior by supplying a procedure user_gnuplot_coordinates which takes the following arguments:

        win id x1s y1s x2s y2s x1e y1e x2e y2e x1m y1m x2m y2m,

    i.e. the name of the canvas and the id of the line segment followed by the coordinates of its start and end point in the two possible axis ranges; the coordinates of the midpoint are only filled for logarithmic axes.

    By default the canvas is **transparent**, but an explicit background color can be set with the **background** option.

    **rounded** sets line caps and line joins to be rounded; **butt** is the default: butt caps and mitered joins.

    Text at arbitrary angles can be activated with the **rottext** option, which requires Tcl/Tk 8.6 or later. The default is **norottext**.

    The **size** option tries to optimize the tic and font sizes for the given canvas size. By default an output size of 800 x 600 pixels is assumed.

    **enhanced** selects **enhanced text** processing (default), but is currently only available for Tcl.

    The **pixels** (default) option selects the failsafe pixel-by-pixel image handler, see also **[image pixels](image#image_pixels)**. The **externalimages** option saves images as external png images, which are later loaded and scaled by the tkcanvas code. This option is only available for Tcl and display may be slow in some situations since the Tk image handler does not provide arbitrary scaling. Scripts need to source the provided rescale.tcl.

    Interactive mode is not yet implemented for Python/Tk and Rexx/Tk. Interactive mode for Ruby/Tk does not yet support user_gnuplot_coordinates.
- name: Tmargin
  id: set_show#SECTION0402998000000000000000
  summary: The command set tmargin sets the size of the top margin
  belongs_to: Set-show
  description: |-
    ## Tmargin

    The command **set tmargin** sets the size of the top margin. Please see **[set margin](set_show#set_margin)** for details.
- name: Tm_week
  id: set_show#SECTION0402928400000000000000
  summary: The tm_week(t, standard) function interprets its first argument t as a time in seconds from 1 Jan 1970
  belongs_to: Set-show
  description: |-
    ### Tm_week

    The **tm_week(t, standard)** function interprets its first argument t as a time in seconds from 1 Jan 1970. Despite the name of this function it does not report a field from the POSIX tm structure.

    If standard = 0 it returns the week number in the ISO 8601 "week date" system. This corresponds to gnuplot's %W time format. If standard = 1 it returns the CDC epidemiological week number ("epi week"). This corresponds to gnuplot's %U time format. For corresponding inverse functions that convert week dates to calendar time see **[weekdate_iso](set_show#weekdate_iso)**, **[weekdate_cdc](set_show#weekdate_cdc)**.

    In brief, ISO Week 1 of year YYYY begins on the Monday closest to 1 Jan YYYY. This may place it in the previous calendar year. For example Tue 30 Dec 2008 has ISO week date 2009-W01-2 (2nd day of week 1 of 2009). Up to three days at the start of January may come before the Monday of ISO week 1; these days are assigned to the final week of the previous calendar year. E.g. Fri 1 Jan 2021 has ISO week date 2020-W53-05.

    The US Center for Disease Control (CDC) epidemiological week is a similar week date convention that differs from the ISO standard by defining a week as starting on Sunday, rather than on Monday.
- name: Toggle
  id: toggle
  summary: This command has the same effect as left-clicking on the key entry for a plot currently displayed by an interactive terminal (qt, wxt, x11)
  description: "# Toggle\n\nSyntax:\n\n    toggle {<plotno> | \"plottitle\" | all}\n\nThis command has the same effect as left-clicking on the key entry for a plot currently displayed by an interactive terminal (qt, wxt, x11). If the plot is showing, it is toggled off; if it is currently hidden, it is toggled on. **toggle all** acts on all active plots, equivalent to the hotkey \"i\". **toggle \"title\"** requires an exact match to the plot title. **toggle \"ti\\*\"** acts on the first plot whose title matches the characters before the final '\\*'. If the current terminal is not interactive, the toggle command has no effect.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Tpic
  id: complete_list_terminals#SECTION050165000000000000000
  summary: 'Note: Legacy terminal (not built by default)'
  description: |-
    ## Tpic

    Note: Legacy terminal (not built by default). The latex, emtex, eepic, and tpic terminals in older versions of gnuplot provided minimal support for graphics styles beyond simple lines and points. They have been directly superseded by the **pict2e** terminal. For more capable TeX/LaTeX compatible terminal types see **[cairolatex](complete_list_terminals#cairolatex)**, **[context](complete_list_terminals#context)**, **[epslatex](complete_list_terminals#epslatex)**, **[mp](complete_list_terminals#mp)**, **[pstricks](complete_list_terminals#pstricks)**, and **[tikz](complete_list_terminals#tikz)**.

    The **tpic** terminal driver supports the LaTeX picture environment with tpic \\specials. Options are the point size, line width, and dot-dash interval.

    Syntax:

        set terminal tpic <pointsize> <linewidth> <interval>

    where **pointsize** and **linewidth** are integers in milli-inches and **interval** is a float in inches. If a non-positive value is specified, the default is chosen: pointsize = 40, linewidth = 6, interval = 0.1.

    All drivers for LaTeX offer a special way of controlling text positioning: If any text string begins with '{', you also need to include a '}' at the end of the text, and the whole text will be centered both horizontally and vertically by LaTeX. — If the text string begins with '\[', you need to continue it with: a position specification (up to two out of t,b,l,r), '\]{', the text itself, and finally, '}'. The text itself may be anything LaTeX can typeset as an LR-box. \\rule{}{}'s may help for best positioning.

    Examples: About label positioning: Use gnuplot defaults (mostly sensible, but sometimes not really best):

        set title '\LaTeX\ -- $ \gamma $'

    Force centering both horizontally and vertically:

        set label '{\LaTeX\ -- $ \gamma $}' at 0,0

    Specify own positioning (top here):

        set xlabel '[t]{\LaTeX\ -- $ \gamma $}'

    The other label – account for long ticlabels:

        set ylabel '[r]{\LaTeX\ -- $ \gamma $\rule{7mm}{0pt}}'
- name: Trange
  id: set_show#SECTION0402999000000000000000
  summary: 'Syntax: set trange [tmin:tmax] The range of the parametric variable t is useful in three contexts'
  belongs_to: Set-show
  description: |-
    ## Trange

    Syntax: set trange \[tmin:tmax\] The range of the parametric variable t is useful in three contexts. 1) In parametric mode **plot** commands it limits the range of sampling

        for both generating functions.  See `set parametric`, `set samples`.

    2\) In polar mode **plot** commands it limits or defines the range of the

        angular parameter theta. See `polar`.

    3\) In **plot** or **splot** commands using 1-dimensional sampled data via

        the pseudofile "+".  See `sampling 1D`, `special-filenames`.
- name: Ttics
  id: set_show#SECTION04029100000000000000000
  summary: The set ttics command places tics around the perimeter of a polar plot
  belongs_to: Set-show
  description: |-
    ## Ttics

    The **set ttics** command places tics around the perimeter of a polar plot. This is the border if **set border polar** is enabled, otherwise the outermost circle of the polar grid drawn at the rightmost ticmark along the r axis. See **[set grid](set_show#set_grid)**, **[set rtics](set_show#set_rtics)**. The angular position is always labeled in degrees. The full perimeter can be labeled regardless of the current trange setting. The desired range of the tic labels should be given as shown below. Additional properties of the tic marks can be set. See **[xtics](set_show#xtics)**.

        set ttics -180, 30, 180
        set ttics add ("Theta = 0" 0)
        set ttics font ":Italic" rotate
- name: Undefine
  id: undefine
  summary: Clear one or more previously defined user variables
  description: "# Undefine\n\nClear one or more previously defined user variables. This is useful in order to reset the state of a script containing an initialization test.\n\nA variable name can contain the wildcard character **\\*** as last character. If the wildcard character is found, all variables with names that begin with the prefix preceding the wildcard will be removed. This is useful to remove several variables sharing a common prefix. Note that the wildcard character is only allowed at the end of the variable name! Specifying the wildcard character as sole argument to **undefine** has no effect.\n\nExample:\n\n    undefine foo foo1 foo2\n    if (!exists(\"foo\")) load \"initialize.gp\"\n\n    bar = 1; bar1 = 2; bar2 = 3\n    undefine bar*                 # removes all three variables\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Unset
  id: unset
  summary: Options set using the set command may be returned to their default state by the corresponding unset command
  description: "# Unset\n\nOptions set using the **set** command may be returned to their default state by the corresponding **unset** command. The **unset** command may contain an optional iteration clause. See **[plot for](plot#plot_for)**.\n\nExamples:\n\n    set xtics mirror rotate by -45 0,10,100\n    ...\n    unset xtics\n\n    # Unset labels numbered between 100 and 200\n    unset for [i=100:200] label i\n\n## Linetype\n\nSyntax:\n\n    unset linetype N\n\nRemove all characteristics previously associated with a single linetype. Subsequent use of this linetype will use whatever characteristics and color that is native to the current terminal type (i.e. the default linetypes properties available in gnuplot versions prior to 4.6).\n\n## Monochrome\n\nSwitches the active set of linetypes from monochrome to color. Equivalent to **set color**.\n\n## Output\n\nBecause some terminal types allow multiple plots to be written into a single output file, the output file is not automatically closed after plotting. In order to print or otherwise use the file safely, it should first be closed explicitly by using **unset output** or by using **set output** to close the previous file and then open a new one.\n\n## Terminal\n\nThe default terminal that is active at the time of program entry depends on the system platform, gnuplot build options, and the environmental variable GNUTERM. Whatever this default may be, gnuplot saves it to internal variable GNUTERM. The **unset terminal** command restores the initial terminal type. It is equivalent to **set terminal GNUTERM**. However if the string in GNUTERM contains terminal options in addition to the bare terminal name, you may want to instead use **set terminal @GNUTERM**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Unset Linetype
  id: unset#SECTION040371000000000000000
  summary: Remove all characteristics previously associated with a single linetype
  belongs_to: Unset
  description: |-
    ## Linetype

    Syntax:

        unset linetype N

    Remove all characteristics previously associated with a single linetype. Subsequent use of this linetype will use whatever characteristics and color that is native to the current terminal type (i.e. the default linetypes properties available in gnuplot versions prior to 4.6).
- name: Unset Monochrome
  id: unset#SECTION040372000000000000000
  summary: Switches the active set of linetypes from monochrome to color
  belongs_to: Unset
  description: |-
    ## Monochrome

    Switches the active set of linetypes from monochrome to color. Equivalent to **set color**.
- name: Unset Output
  id: unset#SECTION040373000000000000000
  summary: Because some terminal types allow multiple plots to be written into a single output file, the output file is not automatically closed after plotting
  belongs_to: Unset
  description: |-
    ## Output

    Because some terminal types allow multiple plots to be written into a single output file, the output file is not automatically closed after plotting. In order to print or otherwise use the file safely, it should first be closed explicitly by using **unset output** or by using **set output** to close the previous file and then open a new one.
- name: Unset Terminal
  id: unset#SECTION040374000000000000000
  summary: The default terminal that is active at the time of program entry depends on the system platform, gnuplot build options, and the environmental variable GNUTERM
  belongs_to: Unset
  description: "## Terminal\n\nThe default terminal that is active at the time of program entry depends on the system platform, gnuplot build options, and the environmental variable GNUTERM. Whatever this default may be, gnuplot saves it to internal variable GNUTERM. The **unset terminal** command restores the initial terminal type. It is equivalent to **set terminal GNUTERM**. However if the string in GNUTERM contains terminal options in addition to the bare terminal name, you may want to instead use **set terminal @GNUTERM**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Update
  id: update
  summary: 'Note: This command is DEPRECATED'
  description: "# Update\n\nNote: This command is DEPRECATED. Use **save fit** instead.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Urange
  id: set_show#SECTION04029101000000000000000
  summary: 'Syntax: set urange [umin:umax] The range of the parametric variables u and v is useful in two contexts'
  belongs_to: Set-show
  description: |-
    ## Urange

    Syntax: set urange \[umin:umax\] The range of the parametric variables u and v is useful in two contexts. 1) **splot** in parametric mode. See **[set parametric](set_show#set_parametric)**, **[set isosamples](set_show#set_isosamples)**. 2) generating 2-dimension sampled data for either **plot** or **splot** using the pseudofile "++". See **[sampling 2D](plot#sampling_2D)**.
- name: User-defined variables and functions
  id: expressions#SECTION020167000000000000000
  summary: New user-defined variables and functions of one through twelve variables may be declared and used anywhere, including on the plot command itself
  belongs_to: Expressions
  description: |-
    ## User-defined variables and functions

    New user-defined variables and functions of one through twelve variables may be declared and used anywhere, including on the **plot** command itself.

    User-defined function syntax:

        <func-name>( <dummy1> {,<dummy2>} ... {,<dummy12>} ) = <expression>

    where \<expression\> is defined in terms of \<dummy1\> through \<dummy12\>.

    User-defined variable syntax:

        <variable-name> = <constant-expression>

    Examples:

        w = 2
        q = floor(tan(pi/2 - 0.1))
        f(x) = sin(w*x)
        sinc(x) = sin(pi*x)/(pi*x)
        delta(t) = (t == 0)
        ramp(t) = (t > 0) ? t : 0
        min(a,b) = (a < b) ? a : b
        comb(n,k) = n!/(k!*(n-k)!)
        len3d(x,y,z) = sqrt(x*x+y*y+z*z)
        plot f(x) = sin(x*a), a = 0.2, f(x), a = 0.4, f(x)

        file = "mydata.inp"
        file(n) = sprintf("run_%d.dat",n)

    The final two examples illustrate a user-defined string variable and a user-defined string function.

    Note that the variables **pi** (3.14159...) and **NaN** (IEEE "Not a Number") are already defined. You can redefine these to something else if you really need to. The original values can be recovered by setting:

        NaN = GPVAL_NaN
        pi  = GPVAL_pi

    Other variables may be defined under various gnuplot operations like mousing in interactive terminals or fitting; see **[gnuplot-defined variables](expressions#gnuplot-defined_variables)** for details.

    You can check for existence of a given variable V by the exists("V") expression. For example

        a = 10
        if (exists("a")) print "a is defined"
        if (!exists("b")) print "b is not defined"

    Valid names are the same as in most programming languages: they must begin with a letter, but subsequent characters may be letters, digits, or "\_".

    Each function definition is made available as a special string-valued variable with the prefix 'GPFUN\_'.

    Example:

        set label GPFUN_sinc at graph .05,.95

    See **[show functions](set_show#show_functions)**, **[functions](plot#functions)**, **[gnuplot-defined variables](expressions#gnuplot-defined_variables)**, **[macros](substitution_command_line_m#macros)**, **[value](expressions#value)**.
- name: Variables
  id: set_show#SECTION04029102000000000000000
  summary: The show variables command lists the current value of user-defined and internal variables
  belongs_to: Set-show
  description: |-
    ## Variables

    The **show variables** command lists the current value of user-defined and internal variables. Gnuplot internally defines variables whose names begin with GPVAL\_, MOUSE\_, FIT\_, and TERM\_.

    Syntax:

        show variables      # show variables that do not begin with GPVAL_
        show variables all  # show all variables including those beginning GPVAL_
        show variables NAME # show only variables beginning with NAME
- name: Vclear
  id: vclear
  summary: Resets the value of all voxels in an existing grid to zero
  description: "# Vclear\n\nSyntax:\n\n    vclear {$gridname}\n\nResets the value of all voxels in an existing grid to zero. If no grid name is given, clears the currently active grid.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Vectors
  id: vectors
  summary: The 2D vectors style draws a vector from (x,y) to (x+xdelta,y+ydelta)
  description: "# Vectors\n\nThe 2D **vectors** style draws a vector from (x,y) to (x+xdelta,y+ydelta). The 3D **vectors** style is similar, but requires six columns of basic data. In both cases, an additional input column (5th in 2D, 7th in 3D) may be used to provide variable (per-datapoint) color information. (see **[linecolor](linetypes_colors_styles#linecolor)** and **[rgbcolor variable](linetypes_colors_styles#rgbcolor_variable)**). A small arrowhead is drawn at the end of each vector.\n\n    4 columns:  x  y  xdelta  ydelta\n    6 columns:  x  y  z  xdelta  ydelta  zdelta\n\nThe keywords \"with vectors\" may be followed by an inline arrow style specifications, a reference to a predefined arrow style, or a request to read the index of the desired arrow style for each vector from a separate column. Note: If you choose \"arrowstyle variable\" it will fill in all arrow properties at the time the corresponding vector is drawn; you cannot mix this keyword with other line or arrow style qualifiers in the plot command.\n\n    plot ... with vectors filled heads\n    plot ... with vectors arrowstyle 3\n    plot ... using 1:2:3:4:5 with vectors arrowstyle variable\n\nExample:\n\n    plot 'file.dat' using 1:2:3:4 with vectors head filled lt 2\n    splot 'file.dat' using 1:2:3:(1):(1):(1) with vectors filled head lw 2\n\nsplot with vectors is supported only for **set mapping cartesian**. **set clip one** and **set clip two** affect vectors drawn in 2D. See **[set clip](set_show#set_clip)** and **[arrowstyle](set_show#arrowstyle)**.\n\nSee also the 2D plot style **[with arrows](arrows#with_arrows)** that is identical to **[with vectors](vectors#with_vectors)** except that each arrow is specified using x:y:length:angle.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Version
  id: set_show#SECTION04029103000000000000000
  summary: The show version command lists the version of gnuplot being run, its last modification date, the copyright holders, and email addresses for the FAQ, the gnuplot-info mailing list, and reporting bugs–in short, the information listed on the screen when the program is invoked interactively
  belongs_to: Set-show
  description: |-
    ## Version

    The **show version** command lists the version of gnuplot being run, its last modification date, the copyright holders, and email addresses for the FAQ, the gnuplot-info mailing list, and reporting bugs–in short, the information listed on the screen when the program is invoked interactively.

    Syntax:

        show version {long}

    When the **long** option is given, it also lists the operating system, the compilation options used when **gnuplot** was installed, the location of the help file, and (again) the useful email addresses.
- name: Vfill
  id: vfill
  summary: The vfill command acts analogously to a plot command except that instead of creating a plot it modifies voxels in the currently active voxel grid
  description: "# Vfill\n\nSyntax:\n\n    vfill FILE using x:y:z:radius:(<expression>)\n\nThe **vfill** command acts analogously to a **plot** command except that instead of creating a plot it modifies voxels in the currently active voxel grid. For each point read from the input file, the voxel containing that point and also all other voxels within a sphere of given radius centered about (x,y,z) are incremented as follows:\n\n- user variable VoxelDistance is set to the distance from (x,y,z) to that voxel's grid coordinates (vx,vy,vz).\n- The expression provided in the 5th **using** specifier is evaluated. This expression can use the new value of VoxelDistance.\n- voxel(vx,vy,vz) += result of evaluating \\<expression\\>\n\nExample:\n\n    vfill \"file.dat\" using 1:2:3:(3.0):(1.0)\n\nThis command adds 1 to the value of every voxel within a sphere of radius 3.0 around each point in file.dat.\n\nExample:\n\n    vfill \"file.dat\" using 1:2:3:4:(VoxelDistance < 1 ? 1 : 1/VoxelDistance)\n\nThis command modifies all voxels in a sphere whose radius is determined for each point by the content of column 4. The increment added to a voxel decreases with its distance from the data point.\n\nNote that **vfill** always increments existing values in the current voxel grid. To reset them to zero, use **vclear**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Vgrid
  id: set_show#SECTION04029104000000000000000
  summary: If the named grid already exists, mark it as active (use it for subsequent vfill and voxel operations)
  belongs_to: Set-show
  description: |-
    ## Vgrid

    Syntax:

        set vgrid $gridname {size N}
        unset vgrid $gridname
        show vgrid

    If the named grid already exists, mark it as active (use it for subsequent **vfill** and **voxel** operations). If a new size is given, replace the existing content with a zero-filled N x N x N grid. If a grid with this name does not already exist, allocate an N x N x N grid (default N=100), zero the contents, and mark it as active. Note that grid names must begin with '$'.

    **show vgrid** lists all currently defined voxel grids. Example output:

        $vgrid1: (active)
                 size 100 X 100 X 100
                 vxrange [-4:4]  vyrange[-4:4]  vzrange[-4:4]
                 non-zero voxel values:  min 0.061237 max 94.5604
                 number of zero voxels:  992070   (99.21%)

    **unset vgrid $gridname** releases all data structures associated with that voxel grid. The data structures are also released by **reset session**. The function **voxel(x,y,z)** returns the value of the active grid point nearest that coordinate. See also **[splot voxel-grids](splot#splot_voxel-grids)**.
- name: View
  id: set_show#SECTION04029105000000000000000
  summary: The set view command sets the viewing angle for splots
  belongs_to: Set-show
  description: |-
    ## View

    The **set view** command sets the viewing angle for **splot**s. It controls how the 3D coordinates of the plot are mapped into the 2D screen space. It provides controls for both rotation and scaling of the plotted data, but supports orthographic projections only. It supports both 3D projection or orthogonal 2D projection into a 2D plot-like map.

    Syntax:

        set view <rot_x>{,{<rot_z>}{,{<scale>}{,<scale_z>}}}
        set view map {scale <scale>}
        set view projection {xy|xz|yz}
        set view {no}equal {xy|xyz}
        set view azimuth <angle>
        show view

    where \<rot_x\> and \<rot_z\> control the rotation angles (in degrees) in a virtual 3D coordinate system aligned with the screen such that initially (that is, before the rotations are performed) the screen horizontal axis is x, screen vertical axis is y, and the axis perpendicular to the screen is z. The first rotation applied is \<rot_x\> around the x axis. The second rotation applied is \<rot_z\> around the new z axis.

    Command **set view map** is used to represent the drawing as a map. It is useful for **contour** plots or 2D heatmaps using pm3d mode rather than **with image**. In the latter case, take care that you properly use **zrange** and **cbrange** for input data point filtering and color range scaling, respectively.

    \<rot_x\> is bounded to the \[0:180\] range with a default of 60 degrees, while \<rot_z\> is bounded to the \[0:360\] range with a default of 30 degrees. \<scale\> controls the scaling of the entire **splot**, while \<scale_z\> scales the z axis only. Both scales default to 1.0.

    Examples:

        set view 60, 30, 1, 1
        set view ,,0.5

    The first sets all the four default values. The second changes only scale, to 0.5.
- name: View Azimuth
  id: set_show#SECTION04029105100000000000000
  summary: The setting of azimuth affects the orientation of the z axis in a 3D graph (splot)
  belongs_to: Set-show
  description: |-
    ### Azimuth

        set view azimuth <angle-in-degrees>

    The setting of azimuth affects the orientation of the z axis in a 3D graph (splot). At the default azimuth = 0 the z axis of the plot lies in the plane orthogonal to the screen horizontal. I.e. the projection of the z axis lies along the screen vertical. Non-zero azimuth rotates the plot about the line of sight through the origin so that a projection of the z axis is no longer vertical. When azimuth = 90 the z axis is horizontal rather than vertical.
- name: View Equal_axes
  id: set_show#SECTION04029105200000000000000
  summary: The command set view equal xy forces the unit length of the x and y axes to be on the same scale, and chooses that scale so that the plot will fit on the page
  belongs_to: Set-show
  description: |-
    ### Equal_axes

    The command **set view equal xy** forces the unit length of the x and y axes to be on the same scale, and chooses that scale so that the plot will fit on the page. The command **set view equal xyz** additionally sets the z axis scale to match the x and y axes; however there is no guarantee that the current z axis range will fit within the plot boundary. By default all three axes are scaled independently to fill the available area.

    See also **[set xyplane](set_show#set_xyplane)**.
- name: View Projection
  id: set_show#SECTION04029105300000000000000
  summary: Rotates the view angles of a 3D plot so that one of the primary planes xy, xz, or yz lies in the plane of the plot
  belongs_to: Set-show
  description: |-
    ### Projection

    Syntax:

        set view projection {xy|xz|yz}

    Rotates the view angles of a 3D plot so that one of the primary planes xy, xz, or yz lies in the plane of the plot. Axis labels and tics positioning is adjusted accordingly; tics and labels on the third axis are disabled. The plot is scaled up to approximately match the size that 'plot' would generate for the same axis ranges. **set view projection xy** is equivalent to **set view map**.
- name: Voxel-grid
  id: splot#SECTION040314000000000000000
  summary: Voxel data can be plotted with dots or points marking individual voxels whose value is above the specified threshold value (default threshold = 0)
  belongs_to: Splot
  description: "## Voxel-grid\n\nSyntax:\n\n    splot $voxelgridname with {dots|points} {above <threshold>} ...\n    splot $voxelgridname with isosurface {level <threshold>} ...\n\nVoxel data can be plotted with dots or points marking individual voxels whose value is above the specified threshold value (default threshold = 0). Color/pointtype/linewidth properties can be appended as usual.\n\nAt many view angles the voxel grid points will occlude each other or create Moiré artifacts on the display. These effects can be avoided by introducing jitter so that the displayed dot or point is displaced randomly from the true voxel grid coordinate. See **[set jitter](set_show#set_jitter)**.\n\nDense voxel grids can be down-sampled by using the **pointinterval** property (**pi** for short) to reduce the number of points drawn.\n\n    splot $vgrid with points pointtype 6 pointinterval 2\n\n**with isosurface** will create a tessellated surface in 3D enclosing all voxels with value greater than the requested threshold. The surface placement is adjusted by linear interpolation to pass through the threshold value itself.\n\nSee **[set vgrid](set_show#set_vgrid)**, **[vfill](vfill#vfill)**. See demos **vplot.dem**, **isosurface.dem**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Vrange
  id: set_show#SECTION04029106000000000000000
  summary: 'Syntax: set vrange [vmin:vmax] The range of the parametric variables u and v is useful in two contexts'
  belongs_to: Set-show
  description: |-
    ## Vrange

    Syntax: set vrange \[vmin:vmax\] The range of the parametric variables u and v is useful in two contexts. 1) **splot** in parametric mode. See **[set parametric](set_show#set_parametric)**, **[set isosamples](set_show#set_isosamples)**. 2) generating 2-dimension sampled data for either **plot** or **splot** using the pseudofile "++". See **[sampling 2D](plot#sampling_2D)**.
- name: VWS
  id: complete_list_terminals#SECTION050166000000000000000
  summary: 'Note: legacy terminal'
  description: |-
    ## VWS

    Note: legacy terminal. The **VWS** terminal driver supports the VAX Windowing System. It has no options. It will sense the display type (monochrome, gray scale, or color.) All line styles are plotted as solid lines.
- name: Vxrange
  id: set_show#SECTION04029107000000000000000
  summary: Establishes the range of x coordinates spanned by the active voxel grid
  belongs_to: Set-show
  description: |-
    ## Vxrange

    Syntax: set vxrange \[vxmin:vxmax\]

    Establishes the range of x coordinates spanned by the active voxel grid. Analogous commands **set vyrange** and **set vzrange** exist for the other two dimensions of the voxel grid. If no explicit ranges have been set prior to the first **vclear**, **vfill**, or **voxel(x,y,z) =** command, vmin and vmax will be copied from the current values of **xrange**.
- name: Vyrange
  id: set_show#SECTION04029108000000000000000
  summary: null
  belongs_to: Set-show
  description: |-
    ## Vyrange

    See **[set vxrange](set_show#set_vxrange)**
- name: Vzrange
  id: set_show#SECTION04029109000000000000000
  summary: null
  belongs_to: Set-show
  description: |-
    ## Vzrange

    See **[set vxrange](set_show#set_vxrange)**
- name: Walls
  id: set_show#SECTION04029110000000000000000
  summary: 3D surfaces drawn by splot lie within a normalized unit cube regardless of the x y and z axis ranges
  belongs_to: Set-show
  description: |-
    ## Walls

    Syntax:

        set walls
        set wall {x0|y0|z0|x1|y1} {<fillstyle>} {fc <fillcolor>}

    3D surfaces drawn by **[splot](splot#splot)** lie within a normalized unit cube regardless of the x y and z axis ranges. The bounding walls of this cube are described by the planes (graph coord x == 0), (graph coord x == 1), etc. The **set walls** command renders the walls x0 y0 and z0 as solid surfaces. By default these surfaces are semi-transparent (fillstyle transparent solid 0.5). You can customize which walls are drawn and also their individual color and fill style. If you choose to enable walls, you may also want to use **set xyplane 0**. Example:

        set wall z0 fillstyle solid 1.0 fillcolor "gray"
- name: Weekdate_cdc
  id: set_show#SECTION0402928600000000000000
  summary: This function converts from the year, week, day components of a date in the CDC/MMWR "epi week" format to the calendar date as a time in seconds since the epoch date 1 Jan 1970
  belongs_to: Set-show
  description: |-
    ### Weekdate_cdc

    Syntax:

        time = weekdate_cdc( year, week [, day] )

    This function converts from the year, week, day components of a date in the CDC/MMWR "epi week" format to the calendar date as a time in seconds since the epoch date 1 Jan 1970. The CDC week date convention differs from the ISO week date in that it is defined in terms of each week running from day 1 = Sunday to day 6 = Saturday. If the third parameter is 0 or is omitted, the time returned is the start of the week. See **[tm_week](set_show#tm_week)** and **[weekdate_iso](set_show#weekdate_iso)**.
- name: Weekdate_iso
  id: set_show#SECTION0402928500000000000000
  summary: This function converts from the year, week, day components of a date in ISO 8601 "week date" format to the calendar date as a time in seconds since the epoch date 1 Jan 1970
  belongs_to: Set-show
  description: |-
    ### Weekdate_iso

    Syntax:

        time = weekdate_iso( year, week [, day] )

    This function converts from the year, week, day components of a date in ISO 8601 "week date" format to the calendar date as a time in seconds since the epoch date 1 Jan 1970. Note that the nominal year in the week date system is not necessarily the same as the calendar year. The week is an integer from 1 to 53. The day parameter is optional. If it is omitted or equal to 0 the time returned is the start of the week. Otherwise day is an integer from 1 (Monday) to 2 (Sunday). See **[tm_week](set_show#tm_week)** for additional information on an inverse function that converts from calendar date to week number in the ISO standard convention.

    Example:

        # Plot data from a file with column 1 containing ISO weeks
        #     Week     cases  deaths
        #     2020-05    432       1
        calendar_date(w) = weekdate_iso( int(w[1:4]), int(w[6:7]) )
        set xtics time format "%b\n%Y"
        plot FILE using (calendar_date(strcol(1))) : 2   title columnhead
- name: While
  id: while
  summary: Execute a block of commands repeatedly so long as <expr> evaluates to a non-zero value
  description: "# While\n\nSyntax:\n\n    while (<expr>) {\n        <commands>\n    }\n\nExecute a block of commands repeatedly so long as \\<expr\\> evaluates to a non-zero value. This command cannot be mixed with old-style (un-bracketed) if/else statements. See also **[do](do#do)**, **[continue](continue#continue)**, **[break](break#break)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Windows
  id: complete_list_terminals#SECTION050167000000000000000
  summary: The windows terminal is a fast interactive terminal driver that uses the Windows GDI to draw and write text
  description: |-
    ## Windows

    The **windows** terminal is a fast interactive terminal driver that uses the Windows GDI to draw and write text. The cross-platform **terminal wxt** and **terminal qt** are also supported on Windows.

    Syntax:

        set terminal windows {<n>}
                             {color | monochrome}
                             {solid | dashed}
                             {rounded | butt}
                             {enhanced | noenhanced}
                             {font <fontspec>}
                             {fontscale <scale>}
                             {linewidth <scale>}
                             {pointscale <scale>}
                             {background <rgb color>}
                             {title "Plot Window Title"}
                             {{size | wsize} <width>,<height>}
                             {position <x>,<y>}
                             {docked {layout <rows>,<cols>} | standalone}
                             {close}

    Multiple plot windows are supported: **set terminal win \<n\>** directs the output to plot window number n.

    **color** and **monochrome** select colored or mono output, **dashed** and **solid** select dashed or solid lines. Note that **color** defaults to **solid**, whereas **monochrome** defaults to **dashed**. **rounded** sets line caps and line joins to be rounded; **butt** is the default, butt caps and mitered joins. **enhanced** enables enhanced text mode features (subscripts, superscripts and mixed fonts, see **[enhanced text](enhanced_text_mode#enhanced_text)** for more information). **\<fontspec\>** is in the format "\<fontface\>,\<fontsize\>", where "\<fontface\>" is the name of a valid Windows font, and \<fontsize\> is the size of the font in points and both components are optional. Note that in previous versions of gnuplot the **font** statement could be left out and \<fontsize\> could be given as a number without double quotes. This is no longer supported. **linewidth**, **fontscale**, **pointscale** can be used to scale the width of lines, the size of text, or the size of the point symbols. **title** changes the title of the graph window. **size** defines the width and height of the window's drawing area in pixels, **wsize** defines the actual size of the window itself and **position** defines the origin of the window i.e. the position of the top left corner on the screen (again in pixel). These options override any default settings from the **wgnuplot.ini** file.

    **docked** embeds the graph window in the wgnuplot text window and the **size** and **position** options are ignored. Note that **docked** is not available for console-mode gnuplot. Setting this option changes the default for new windows. The initial default is **standalone**. The **layout** option allows to reserve a minimal number of columns and rows for graphs in docked mode. If there are more graphs than fit the given layout, additional rows will be added. Graphs are sorted by the numerical id, filling rows first.

    Other options may be changed using the **graph-menu** or the initialization file **wgnuplot.ini**.

    The Windows version normally terminates immediately as soon as the end of any files given as command line arguments is reached (i.e. in non-interactive mode), unless you specify **-** as the last command line option. It will also not show the text-window at all, in this mode, only the plot. By giving the optional argument **-persist** (same as for gnuplot under x11; former Windows-only options **/noend** or **-noend** are still accepted as well), will not close gnuplot. Contrary to gnuplot on other operating systems, gnuplot's interactive command line is accessible after the -persist option.

    The plot window remains open when the gnuplot terminal is changed with a **set term** command. The plot window can be closed with **set term windows close**.

    **gnuplot** supports different methods to create printed output on Windows, see **[windows printing](complete_list_terminals#windows_printing)**. The windows terminal supports data exchange with other programs via clipboard and EMF files, see **[graph-menu](complete_list_terminals#graph-menu)**. You can also use the **terminal emf** to create EMF files.
- name: Windows Graph-menu
  id: complete_list_terminals#SECTION050167100000000000000
  summary: Copy to Clipboard copies a bitmap and an enhanced metafile picture
  description: |-
    ### Graph-menu

    The **gnuplot graph** window has the following options on a pop-up menu accessed by pressing the right mouse button(\*) or selecting **Options** from the system menu or the toolbar:

    **Copy to Clipboard** copies a bitmap and an enhanced metafile picture.

    **Save as EMF...** allows the user to save the current graph window as enhanced metafile (EMF or EMF+).

    **Save as Bitmap...** allows the user to save a copy of the graph as bitmap file.

    **Print...** prints the graphics windows using a Windows printer driver and allows selection of the printer and scaling of the output. See also **[windows printing](complete_list_terminals#windows_printing)**.

    **Bring to Top** when checked raises the graph window to the top after every plot.

    **Color** when checked enables color output. When unchecked it forces all grayscale output. This is e.g. useful to test appearance of monochrome printouts.

    The **GDI backend** which uses the classic GDI API is deprecated and has been disabled in this version.

    **GDI+ backend** draws to the screen using the GDI+ Windows API. It supports full antialiasing, oversampling, transparency and custom dash patterns. This was the default in versions 5.0 and 5.2.

    **Direct2D backend** uses Direct2D & DirectWrite APIs to draw. It uses graphic card acceleration and is hence typically much faster. Since Direct2D can not create EMF data, saving and copying to clipboard of EMF data fall back to GDI+ while bitmap data is generated by D2d. This is the recommended and default backend since version 5.3.

    **Oversampling** draws diagonal lines at fractional pixel positions to avoid "wobbling" effects. Vertical or horizontal lines are still snapped to integer pixel positions to avoid blurry lines.

    **Antialiasing** enables smoothing of lines and edges. Note that this slows down drawing. **Antialiasing of polygons** is enabled by default but might slow down drawing with the GDI+ backend.

    **Fast rotation** switches antialiasing temporarily off while rotating the graph with the mouse. This speeds up drawing considerably at the expense of an additional redraw after releasing the mouse button.

    **Background...** sets the window background color.

    **Choose Font...** selects the font used in the graphics window.

    **Update wgnuplot.ini** saves the current window locations, window sizes, text window font, text window font size, graph window font, graph window font size, background color to the initialization file **wgnuplot.ini**.

    (\*) Note that this menu is only available by pressing the right mouse button with **unset mouse**.
- name: Windows Printing
  id: complete_list_terminals#SECTION050167200000000000000
  summary: 1. Use the gnuplot command set terminal to select a printer and set output to redirect output to a file
  description: |-
    ### Printing

    In order of preference, graphs may be printed in the following ways:

    **1.** Use the **gnuplot** command **set terminal** to select a printer and **set output** to redirect output to a file.

    **2.** Select the **Print...** command from the **gnuplot graph** window. An extra command **screendump** does this from the text window.

    **3.** If **set output "PRN"** is used, output will go to a temporary file. When you exit from **gnuplot** or when you change the output with another **set output** command, a dialog box will appear for you to select a printer port. If you choose OK, the output will be printed on the selected port, passing unmodified through the print manager. It is possible to accidentally (or deliberately) send printer output meant for one printer to an incompatible printer.
- name: Windows Text-menu
  id: complete_list_terminals#SECTION050167300000000000000
  summary: Copy to Clipboard copies marked text to the clipboard
  description: |-
    ### Text-menu

    The **gnuplot text** window has the following options on a pop-up menu accessed by pressing the right mouse button or selecting **Options** from the system menu:

    **Copy to Clipboard** copies marked text to the clipboard.

    **Paste** copies text from the clipboard as if typed by the user.

    **Choose Font...** selects the font used in the text window.

    **System Colors** when selected makes the text window honor the System Colors set using the Control Panel. When unselected, text is black or blue on a white background.

    **Wrap long lines** when selected lines longer than the current window width are wrapped.

    **Update wgnuplot.ini** saves the current settings to the initialisation file **wgnuplot.ini**, which is located in the user's application data directory.
- name: Windows Wgnuplot.ini
  id: complete_list_terminals#SECTION050167500000000000000
  summary: The Windows text window and the windows terminal will read some of their options from the [WGNUPLOT] section of wgnuplot.ini
  description: |-
    ### Wgnuplot.ini

    The Windows text window and the **windows** terminal will read some of their options from the **\[WGNUPLOT\]** section of **wgnuplot.ini**. This file is located in the user's application data directory. Here's a sample **wgnuplot.ini** file:

        [WGNUPLOT]
        TextOrigin=0 0
        TextSize=640 150
        TextFont=Consolas,9
        TextWrap=1
        TextLines=400
        TextMaximized=0
        SysColors=0
        GraphOrigin=0 150
        GraphSize=640 330
        GraphFont=Tahoma,10
        GraphColor=1
        GraphToTop=1
        GraphGDI+=1
        GraphD2D=0
        GraphGDI+Oversampling=1
        GraphAntialiasing=1
        GraphPolygonAA=1
        GraphFastRotation=1
        GraphBackground=255 255 255
        DockVerticalTextFrac=350
        DockHorizontalTextFrac=400

    These settings apply to the wgnuplot text-window only. The **TextOrigin** and **TextSize** entries specify the location and size of the text window. If **TextMaximized** is non-zero, the window will be maximized.

    The **TextFont** entry specifies the text window font and size.

    The **TextWrap** entry selects wrapping of long text lines.

    The **TextLines** entry specifies the number of (unwrapped) lines the internal buffer of the text window can hold. This value currently cannot be changed from within wgnuplot.

    See **[text-menu](complete_list_terminals#text-menu)**.

    **DockVerticalTextFrac** and **DockHorizontalTextFrac** set the fraction of the window reserved for the text window in permille of the vertical or horizontal layout.

    The **GraphFont** entry specifies the font name and size in points.

    See **[graph-menu](complete_list_terminals#graph-menu)**.
- name: Windows Wgnuplot.mnu
  id: complete_list_terminals#SECTION050167400000000000000
  summary: If the menu file wgnuplot.mnu is found in the same directory as gnuplot, then the menu specified in wgnuplot.mnu will be loaded
  description: |-
    ### Wgnuplot.mnu

    If the menu file **wgnuplot.mnu** is found in the same directory as **gnuplot**, then the menu specified in **wgnuplot.mnu** will be loaded. Menu commands:

        [Menu]      starts a new menu with the name on the following line.
        [EndMenu]   ends the current menu.
        [--]        inserts a horizontal menu separator.
        [|]         inserts a vertical menu separator.
        [Button]    puts the next macro on a push button instead of a menu.

    Macros take two lines with the macro name (menu entry) on the first line and the macro on the second line. Leading spaces are ignored. Macro commands:

        [INPUT]     Input string with prompt terminated by [EOS] or {ENTER}
        [EOS]       End Of String terminator. Generates no output.
        [OPEN]      Get name of a file to open, with the title of the dialog
                    terminated by [EOS], followed by a default filename terminated
                    by [EOS] or {ENTER}.
        [SAVE]      Get name of a file to save.  Parameters like [OPEN]
        [DIRECTORY] Get name of a directory, with the title of the dialog
                    terminated by [EOS] or {ENTER}

    Macro character substitutions:

        {ENTER}     Carriage Return '\r'
        {TAB}       Tab '\011'
        {ESC}       Escape '\033'
        {^A}        '\001'
        ...
        {^_}        '\031'

    Macros are limited to 256 characters after expansion.
- name: With
  id: plot#SECTION0401812000000000000000
  summary: Functions and data may be displayed in one of a large number of styles
  belongs_to: Plot
  description: "## With\n\nFunctions and data may be displayed in one of a large number of styles. The **with** keyword provides the means of selection.\n\nSyntax:\n\n    with <style> { {linestyle | ls <line_style>}\n                   | {{linetype  | lt <line_type>}\n                      {linewidth | lw <line_width>}\n                      {linecolor | lc <colorspec>}\n                      {pointtype | pt <point_type>}\n                      {pointsize | ps <point_size>}\n                      {arrowstyle | as <arrowstyle_index>}\n                      {fill | fs <fillstyle>} {fillcolor | fc <colorspec>}\n                      {nohidden3d} {nocontours} {nosurface}\n                      {palette}}\n                 }\n\nwhere \\<style\\> is one of\n\n    lines        dots       steps     vectors      yerrorlines\n    points       impulses   fsteps    xerrorbar    xyerrorbars \n    linespoints  labels     histeps   xerrorlines  xyerrorlines\n    financebars  surface    arrows    yerrorbar    parallelaxes\n\nor\n\n    boxes         boxplot        ellipses       histograms  rgbalpha\n    boxerrorbars  candlesticks   filledcurves   image       rgbimage\n    boxxyerror    circles        fillsteps      pm3d        polygons\n    isosurface    zerrorfill\n\nor\n\n    table\n\nThe first group of styles have associated line, point, and text properties. The second group of styles also have fill properties. See **[fillstyle](set_show#fillstyle)**. Some styles have further sub-styles. See **plotting styles** for details of each. The **table** style produces tabular output rather than a plot. See **[set table](set_show#set_table)**.\n\nA default style may be chosen by **set style function** and **set style data**.\n\nBy default, each function and data file will use a different line type and point type, up to the maximum number of available types. All terminal drivers support at least six different point types, and re-use them, in order, if more are required. To see the complete set of line and point types available for the current terminal, type **[test](test#test)**.\n\nIf you wish to choose the line or point type for a single plot, \\<line_type\\> and \\<point_type\\> may be specified. These are positive integer constants (or expressions) that specify the line type and point type to be used for the plot. Use **test** to display the types available for your terminal.\n\nYou may also scale the line width and point size for a plot by using \\<line_width\\> and \\<point_size\\>, which are specified relative to the default values for each terminal. The pointsize may also be altered globally — see **[set pointsize](set_show#set_pointsize)** for details. But note that both \\<point_size\\> as set here and as set by **set pointsize** multiply the default point size — their effects are not cumulative. That is, **set pointsize 2; plot x w p ps 3** will use points three times default size, not six.\n\nIt is also possible to specify **pointsize variable** either as part of a line style or for an individual plot. In this case one extra column of input is required, i.e. 3 columns for a 2D plot and 4 columns for a 3D splot. The size of each individual point is determined by multiplying the global pointsize by the value read from the data file.\n\nIf you have defined specific line type/width and point type/size combinations with **set style line**, one of these may be selected by setting \\<line_style\\> to the index of the desired style.\n\nBoth 2D and 3D plots (**plot** and **splot** commands) can use colors from a smooth palette set previously with the command **set palette**. The color value corresponds to the z-value of the point itself or to a separate color coordinate provided in an optional additional **using** colymn. Color values may be treated either as a fraction of the palette range (**palette frac**) or as a coordinate value mapped onto the colorbox range (**palette** or **palette z**). See **[colorspec](linetypes_colors_styles#colorspec)**, **[set palette](set_show#set_palette)**, **[linetype](set_show#linetype)**.\n\nThe keyword **nohidden3d** applies only to plots made with the **splot** command. Normally the global option **set hidden3d** applies to all plots in the graph. You can attach the **nohidden3d** option to any individual plots that you want to exclude from the hidden3d processing. The individual elements other than surfaces (i.e. lines, dots, labels, ...) of a plot marked **nohidden3d** will all be drawn, even if they would normally be obscured by other plot elements.\n\nSimilarly, the keyword **nocontours** will turn off contouring for an individual plot even if the global property **set contour** is active.\n\nSimilarly, the keyword **nosurface** will turn off the 3D surface for an individual plot even if the global property **set surface** is active.\n\nThe keywords may be abbreviated as indicated.\n\nNote that the **linewidth**, **pointsize** and **palette** options are not supported by all terminals.\n\nExamples:\n\nThis plots sin(x) with impulses:\n\n    plot sin(x) with impulses\n\nThis plots x with points, x\\*\\*2 with the default:\n\n    plot x w points, x**2\n\nThis plots tan(x) with the default function style, file \"data.1\" with lines:\n\n    plot [ ] [-2:5] tan(x), 'data.1' with l\n\nThis plots \"leastsq.dat\" with impulses:\n\n    plot 'leastsq.dat' w i\n\nThis plots the data file \"population\" with boxes:\n\n    plot 'population' with boxes\n\nThis plots \"exper.dat\" with errorbars and lines connecting the points (errorbars require three or four columns):\n\n    plot 'exper.dat' w lines, 'exper.dat' notitle w errorbars\n\nAnother way to plot \"exper.dat\" with errorlines (errorbars require three or four columns):\n\n    plot 'exper.dat' w errorlines\n\nThis plots sin(x) and cos(x) with linespoints, using the same line type but different point types:\n\n    plot sin(x) with linesp lt 1 pt 3, cos(x) with linesp lt 1 pt 4\n\nThis plots file \"data\" with points of type 3 and twice usual size:\n\n    plot 'data' with points pointtype 3 pointsize 2\n\nThis plots file \"data\" with variable pointsize read from column 4\n\n    plot 'data' using 1:2:4 with points pt 5 pointsize variable\n\nThis plots two data sets with lines differing only by weight:\n\n    plot 'd1' t \"good\" w l lt 2 lw 3, 'd2' t \"bad\" w l lt 2 lw 1\n\nThis plots filled curve of x\\*x and a color stripe:\n\n    plot x*x with filledcurve closed, 40 with filledcurve y=10\n\nThis plots x\\*x and a color box:\n\n    plot x*x, (x>=-5 && x<=5 ? 40 : 1/0) with filledcurve y=10 lt 8\n\nThis plots a surface with color lines:\n\n    splot x*x-y*y with line palette\n\nThis plots two color surfaces at different altitudes:\n\n    splot x*x-y*y with pm3d, x*x+y*y with pm3d at t\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Wxt
  id: complete_list_terminals#SECTION050168000000000000000
  summary: The wxt terminal device generates output in a separate window
  description: |-
    ## Wxt

    The **wxt** terminal device generates output in a separate window. The window is created by the wxWidgets library, where the 'wxt' comes from. The actual drawing is done via cairo, a 2D graphics library, and pango, a library for laying out and rendering text.

    Syntax:

        set term wxt {<n>}
                     {size <width>,<height>} {position <x>,<y>}
                     {background <rgb_color> | nobackground}
                     {{no}enhanced}
                     {font <font>} {fontscale <scale>}
                     {title "title"}
                     {linewidth <lw>} {butt|rounded|square}
                     {dashlength <dl>}
                     {{no}persist}
                     {{no}raise}
                     {{no}ctrl}
                     {close}

    Multiple plot windows are supported: **set terminal wxt \<n\>** directs the output to plot window number n.

    The default window title is based on the window number. This title can also be specified with the keyword "title".

    Plot windows remain open even when the **gnuplot** driver is changed to a different device. A plot window can be closed by pressing the letter 'q' while that window has input focus, by choosing **close** from a window manager menu, or with **set term wxt \<n\> close**.

    The size of the plot area is given in pixels, it defaults to 640x384. In addition to that, the actual size of the window also includes the space reserved for the toolbar and the status bar. When you resize a window, the plot is immediately scaled to fit in the new size of the window. Unlike other interactive terminals, the **wxt** terminal scales the whole plot, including fonts and linewidths, and keeps its global aspect ratio constant, leaving an empty space painted in gray. If you type **replot**, click the **replot** icon in the terminal toolbar or type a new **plot** command, the new plot will completely fit in the window and the font size and the linewidths will be reset to their defaults.

    The position option can be used to set the position of the plot window. The position option only applies to the first plot after the **set term** command.

    The active plot window (the one selected by **set term wxt \<n\>**) is interactive. Its behaviour is shared with other terminal types. See **[mouse](set_show#mouse)** for details. It also has some extra icons, which are supposed to be self-explanatory.

    This terminal supports an enhanced text mode, which allows font and other formatting commands (subscripts, superscripts, etc.) to be embedded in labels and other text strings. The enhanced text mode syntax is shared with other gnuplot terminal types. See **[enhanced](enhanced_text_mode#enhanced)** for more details.

    \<font\> is in the format "FontFace,FontSize", i.e. the face and the size comma-separated in a single string. FontFace is a usual font face name, such as 'Arial'. If you do not provide FontFace, the wxt terminal will use 'Sans'. FontSize is the font size, in points. If you do not provide it, the wxt terminal will use a size of 10 points.

        For example :
           set term wxt font "Arial,12"
           set term wxt font "Arial" # to change the font face only
           set term wxt font ",12" # to change the font size only
           set term wxt font "" # to reset the font name and size

    The fonts are retrieved from the usual fonts subsystems. Under Windows, those fonts are to be found and configured in the entry "Fonts" of the control panel. Under UNIX, they are handled by "fontconfig".

    Pango, the library used to layout the text, is based on utf-8. Thus, the wxt terminal has to convert from your encoding to utf-8. The default input encoding is based on your 'locale'. If you want to use another encoding, make sure gnuplot knows which one you are using. See **[encoding](set_show#encoding)** for more details.

    Pango may give unexpected results with fonts that do not respect the unicode mapping. With the Symbol font, for example, the wxt terminal will use the map provided by http://www.unicode.org/ to translate character codes to unicode. Pango will do its best to find a font containing this character, looking for your Symbol font, or other fonts with a broad unicode coverage, like the DejaVu fonts. Note that "the Symbol font" is to be understood as the Adobe Symbol font, distributed with Acrobat Reader as "SY\_\_\_\_\_\_.PFB". Alternatively, the OpenSymbol font, distributed with OpenOffice.org as "opens\_\_\_.ttf", offers the same characters. Microsoft has distributed a Symbol font ("symbol.ttf"), but it has a different character set with several missing or moved mathematic characters. If you experience problems with your default setup (if the demo enhancedtext.dem is not displayed properly for example), you probably have to install one of the Adobe or OpenOffice Symbol fonts, and remove the Microsoft one. Other non-conform fonts, such as "wingdings" have been observed working.

    The rendering of the plot can be altered with a dialog available from the toolbar. To obtain the best output possible, the rendering involves three mechanisms : antialiasing, oversampling and hinting. Antialiasing allows to display non-horizontal and non-vertical lines smoother. Oversampling combined with antialiasing provides subpixel accuracy, so that gnuplot can draw a line from non-integer coordinates. This avoids wobbling effects on diagonal lines ('plot x' for example). Hinting avoids the blur on horizontal and vertical lines caused by oversampling. The terminal will snap these lines to integer coordinates so that a one-pixel-wide line will actually be drawn on one and only one pixel.

    By default, the window is raised to the top of your desktop when a plot is drawn. This can be controlled with the keyword "raise". The keyword "persist" will prevent gnuplot from exiting before you explicitly close all the plot windows. Finally, by default the key \<space\> raises the gnuplot console window, and 'q' closes the plot window. The keyword "ctrl" allows you to replace those bindings by \<ctrl\>+\<space\> and \<ctrl\>+'q', respectively. These three keywords (raise, persist and ctrl) can also be set and remembered between sessions through the configuration dialog.
- name: X11
  id: complete_list_terminals#SECTION050169000000000000000
  summary: 'Multiple plot windows are supported: set terminal x11 <n> directs the output to plot window number n'
  description: "## X11\n\nSyntax:\n\n    set terminal x11 {<n> | window \"<string>\"}\n                     {title \"<string>\"}\n                     {{no}enhanced} {font <fontspec>}\n                     {linewidth LW}\n                     {{no}persist} {{no}raise} {{no}ctrlq}\n                     {{no}replotonresize}\n                     {close}\n                     {size XX,YY} {position XX,YY}\n    set terminal x11 {reset}\n\nMultiple plot windows are supported: **set terminal x11 \\<n\\>** directs the output to plot window number n. If n is not 0, the terminal number will be appended to the window title (unless a title has been supplied manually) and the icon will be labeled **Gnuplot \\<n\\>**. The active window may be distinguished by a change in cursor (from default to crosshair).\n\nThe **x11** terminal can connect to X windows previously created by an outside application via the option **window** followed by a string containing the X ID for the window in hexadecimal format. Gnuplot uses that external X window as a container since X does not allow for multiple clients selecting the ButtonPress event. In this way, gnuplot's mouse features work within the contained plot window.\n\n    set term x11 window \"220001e\"\n\nThe x11 terminal supports enhanced text mode (see **[enhanced](enhanced_text_mode#enhanced)**), subject to the available fonts. In order for font size commands embedded in text to have any effect, the default x11 font must be scalable. Thus the first example below will work as expected, but the second will not.\n\n    set term x11 enhanced font \"arial,15\" \n    set title '{/=20 Big} Medium {/=5 Small}'\n\n    set term x11 enhanced font \"terminal-14\" \n    set title '{/=20 Big} Medium {/=5 Small}'\n\nPlot windows remain open even when the **gnuplot** driver is changed to a different device. A plot window can be closed by pressing the letter q while that window has input focus, or by choosing **close** from a window manager menu. All plot windows can be closed by specifying **reset**, which actually terminates the subprocess which maintains the windows (unless **-persist** was specified). The **close** command can be used to close individual plot windows by number. However, after a **reset**, those plot windows left due to persist cannot be closed with the command **close**. A **close** without a number closes the current active plot window.\n\nThe gnuplot outboard driver, gnuplot_x11, is searched in a default place chosen when the program is compiled. You can override that by defining the environment variable GNUPLOT_DRIVER_DIR to point to a different location.\n\nPlot windows will automatically be closed at the end of the session unless the **-persist** option was given.\n\nThe options **persist** and **raise** are unset by default, which means that the defaults (persist == no and raise == yes) or the command line options -persist / -raise or the Xresources are taken. If \\[no\\]persist or \\[no\\]raise are specified, they will override command line options and Xresources. Setting one of these options takes place immediately, so the behaviour of an already running driver can be modified. If the window does not get raised, see discussion in **[raise](raise#raise)**.\n\nThe option **replotonresize** (active by default) replots the data when the plot window is resized. Without this option, the even-aspect-ratio scaling may result in the plot filling only part of the window after resizing. With this option, gnuplot does a full replot on each resize event, resulting in better space utilization. This option is generally desirable, unless the potentially CPU-intensive replotting during resizing is a concern. Replots can be manually initiated with hotkey 'e' or the 'replot' command.\n\nThe option **title \"\\<title name\\>\"** will supply the title name of the window for the current plot window or plot window \\<n\\> if a number is given. Where (or if) this title is shown depends on your X window manager.\n\nThe size option can be used to set the size of the plot window. The size option will only apply to newly created windows.\n\nThe position option can be used to set the position of the plot window. The position option will only apply to newly created windows.\n\nThe size or aspect ratio of a plot may be changed by resizing the **gnuplot** window.\n\nLinewidths and pointsizes may be changed from within **gnuplot** with **set linestyle**.\n\nFor terminal type **x11**, **gnuplot** accepts (when initialized) the standard X Toolkit options and resources such as geometry, font, and name from the command line arguments or a configuration file. See the X(1) man page (or its equivalent) for a description of such options.\n\nA number of other **gnuplot** options are available for the **x11** terminal. These may be specified either as command-line options when **gnuplot** is invoked or as resources in the configuration file \".Xdefaults\". They are set upon initialization and cannot be altered during a **gnuplot** session. (except **persist** and **raise**)"
- name: X11 Color_resources
  id: complete_list_terminals#SECTION050169300000000000000
  summary: 'NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5 The X11 terminal honors the following resources (shown here with their default values) or the greyscale resources'
  description: |-
    ### Color_resources

    NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5 The X11 terminal honors the following resources (shown here with their default values) or the greyscale resources. The values may be color names as listed in the X11 rgb.txt file on your system, hexadecimal RGB color specifications (see X11 documentation), or a color name followed by a comma and an **intensity** value from 0 to 1. For example, **blue, 0.5** means a half intensity blue.

    |     |                              |
    |-----|------------------------------|
    |     | gnuplot\*background: white   |
    |     | gnuplot\*textColor: black    |
    |     | gnuplot\*borderColor: black  |
    |     | gnuplot\*axisColor: black    |
    |     | gnuplot\*line1Color: red     |
    |     | gnuplot\*line2Color: green   |
    |     | gnuplot\*line3Color: blue    |
    |     | gnuplot\*line4Color: magenta |
    |     | gnuplot\*line5Color: cyan    |
    |     | gnuplot\*line6Color: sienna  |
    |     | gnuplot\*line7Color: orange  |
    |     | gnuplot\*line8Color: coral   |

    The command-line syntax for these is simple only for background, which maps directly to the usual X11 toolkit option "-bg". All others can only be set on the command line by use of the generic "-xrm" resource override option

    Examples:

        gnuplot -background coral

    to change the background color.

        gnuplot -xrm 'gnuplot*line1Color:blue'

    to override the first linetype color.
- name: X11 Command-line_options
  id: complete_list_terminals#SECTION050169200000000000000
  summary: The options are shown above in their command-line syntax
  description: |-
    ### Command-line_options

    In addition to the X Toolkit options, the following options may be specified on the command line when starting **gnuplot** or as resources in your ".Xdefaults" file (note that **raise** and **persist** can be overridden later by **set term x11 \[no\]raise \[no\]persist)**:

    |              |                                                               |
    |--------------|---------------------------------------------------------------|
    | \`-mono\`    | forces monochrome rendering on color displays.                |
    | \`-gray\`    | requests grayscale rendering on grayscale or color displays.  |
    |              | (Grayscale displays receive monochrome rendering by default.) |
    | \`-clear\`   | requests that the window be cleared momentarily before a      |
    |              | new plot is displayed.                                        |
    | \`-tvtwm\`   | requests that geometry specifications for position of the     |
    |              | window be made relative to the currently displayed portion    |
    |              | of the virtual root.                                          |
    | \`-raise\`   | raises plot window after each plot.                           |
    | \`-noraise\` | does not raise plot window after each plot.                   |
    | \`-persist\` | plot windows survive after main gnuplot program exits.        |

    The options are shown above in their command-line syntax. When entered as resources in ".Xdefaults", they require a different syntax.

    Example:

        gnuplot*gray:  on
        gnuplot*ctrlq: on

    **gnuplot** also provides a command line option (**-pointsize \<v\>**) and a resource, **gnuplot\*pointsize: \<v\>**, to control the size of points plotted with the **points** plotting style. The value **v** is a real number (greater than 0 and less than or equal to ten) used as a scaling factor for point sizes. For example, **-pointsize 2** uses points twice the default size, and **-pointsize 0.5** uses points half the normal size.

    The **-ctrlq** switch changes the hot-key that closes a plot window from **q** to **\<ctrl\>q**. This is useful is you are using the keystroke-capture feature **pause mouse keystroke**, since it allows the character **q** to be captured just as all other alphanumeric characters. The **-ctrlq** switch similarly replaces the \<space\> hot-key with \<ctrl\>\<space\> for the same reason.
- name: X11 Grayscale_resources
  id: complete_list_terminals#SECTION050169400000000000000
  summary: When -gray is selected, gnuplot honors the following resources for grayscale or color displays (shown here with their default values)
  description: |-
    ### Grayscale_resources

    When **-gray** is selected, **gnuplot** honors the following resources for grayscale or color displays (shown here with their default values). Note that the default background is black.

    |     |                             |
    |-----|-----------------------------|
    |     | gnuplot\*background: black  |
    |     | gnuplot\*textGray: white    |
    |     | gnuplot\*borderGray: gray50 |
    |     | gnuplot\*axisGray: gray50   |
    |     | gnuplot\*line1Gray: gray100 |
    |     | gnuplot\*line2Gray: gray60  |
    |     | gnuplot\*line3Gray: gray80  |
    |     | gnuplot\*line4Gray: gray40  |
    |     | gnuplot\*line5Gray: gray90  |
    |     | gnuplot\*line6Gray: gray50  |
    |     | gnuplot\*line7Gray: gray70  |
    |     | gnuplot\*line8Gray: gray30  |
- name: X11 Line_resources
  id: complete_list_terminals#SECTION050169500000000000000
  summary: 'NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5 gnuplot honors the following resources for setting the width (in pixels) of plot lines (shown here with their default values.) 0 or 1 means a minimal width line of 1 pixel width'
  description: |-
    ### Line_resources

    NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5 **gnuplot** honors the following resources for setting the width (in pixels) of plot lines (shown here with their default values.) 0 or 1 means a minimal width line of 1 pixel width. A value of 2 or 3 may improve the appearance of some plots.

    |     |                         |
    |-----|-------------------------|
    |     | gnuplot\*borderWidth: 1 |
    |     | gnuplot\*axisWidth: 0   |
    |     | gnuplot\*line1Width: 0  |
    |     | gnuplot\*line2Width: 0  |
    |     | gnuplot\*line3Width: 0  |
    |     | gnuplot\*line4Width: 0  |
    |     | gnuplot\*line5Width: 0  |
    |     | gnuplot\*line6Width: 0  |
    |     | gnuplot\*line7Width: 0  |
    |     | gnuplot\*line8Width: 0  |

    **gnuplot** honors the following resources for setting the dash style used for plotting lines. 0 means a solid line. A two-digit number **jk** (**j** and **k** are \>= 1 and \<= 9) means a dashed line with a repeated pattern of **j** pixels on followed by **k** pixels off. For example, '16' is a dotted line with one pixel on followed by six pixels off. More elaborate on/off patterns can be specified with a four-digit value. For example, '4441' is four on, four off, four on, one off. The default values shown below are for monochrome displays or monochrome rendering on color or grayscale displays. Color displays default to dashed:off

    |     |                            |
    |-----|----------------------------|
    |     | gnuplot\*dashed: off       |
    |     | gnuplot\*borderDashes: 0   |
    |     | gnuplot\*axisDashes: 16    |
    |     | gnuplot\*line1Dashes: 0    |
    |     | gnuplot\*line2Dashes: 42   |
    |     | gnuplot\*line3Dashes: 13   |
    |     | gnuplot\*line4Dashes: 44   |
    |     | gnuplot\*line5Dashes: 15   |
    |     | gnuplot\*line6Dashes: 4441 |
    |     | gnuplot\*line7Dashes: 42   |
    |     | gnuplot\*line8Dashes: 13   |
- name: X11 other_resources
  id: complete_list_terminals#SECTION050169700000000000000
  summary: By default the contents of the current plot window are exported to the X11 clipboard in response to X events in the window
  description: |-
    ### X11 other_resources

    By default the contents of the current plot window are exported to the X11 clipboard in response to X events in the window. Setting the resource 'gnuplot\*exportselection' to 'off' or 'false' will disable this.

    By default text rotation is done using a method that is fast, but can corrupt nearby colors depending on the background. If this is a problem, you can set the resource 'gnuplot.fastrotate' to 'off'

    |     |                               |
    |-----|-------------------------------|
    |     | gnuplot\*exportselection: off |
    |     | gnuplot\*fastrotate: on       |
    |     | gnuplot\*ctrlq: off           |
- name: X11 pm3d_resources
  id: complete_list_terminals#SECTION050169600000000000000
  summary: 'NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5 Choosing the appropriate visual class and number of colors is a crucial point in X11 applications and a bit awkward, since X11 supports six visual types in different depths'
  description: |-
    ### X11 pm3d_resources

    NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5 Choosing the appropriate visual class and number of colors is a crucial point in X11 applications and a bit awkward, since X11 supports six visual types in different depths.

    By default **gnuplot** uses the default visual of the screen. The number of colors which can be allocated depends on the visual class chosen. On a visual class with a depth \> 12bit, gnuplot starts with a maximal number of 0x200 colors. On a visual class with a depth \> 8bit (but \<= 12 bit) the maximal number of colors is 0x100, on \<= 8bit displays the maximum number of colors is 240 (16 are left for line colors).

    Gnuplot first starts to allocate the maximal number of colors as stated above. If this fails, the number of colors is reduced by the factor 2 until gnuplot gets all colors which are requested. If dividing **maxcolors** by 2 repeatedly results in a number which is smaller than **mincolors** **gnuplot** tries to install a private colormap. In this case the window manager is responsible for swapping colormaps when the pointer is moved in and out the x11 driver's window.

    The default for **mincolors** is maxcolors / (num_colormaps \> 1 ? 2 : 8), where num_colormaps is the number of colormaps which are currently used by gnuplot (usually 1, if only one x11 window is open).

    Some systems support multiple (different) visual classes together on one screen. On these systems it might be necessary to force gnuplot to use a specific visual class, e.g. the default visual might be 8bit PseudoColor but the screen would also support 24bit TrueColor which would be the preferred choice.

    The information about an Xserver's capabilities can be obtained with the program **xdpyinfo**. For the visual names below you can choose one of StaticGray, GrayScale, StaticColor, PseudoColor, TrueColor, DirectColor. If an Xserver supports a requested visual type at different depths, **gnuplot** chooses the visual class with the highest depth (deepest). If the requested visual class matches the default visual and multiple classes of this type are supported, the default visual is preferred.

    Example: on an 8bit PseudoColor visual you can force a private color map by specifying **gnuplot\*maxcolors: 240** and **gnuplot\*mincolors: 240**.

    |     |                              |
    |-----|------------------------------|
    |     | gnuplot\*maxcolors: integer  |
    |     | gnuplot\*mincolors: integer  |
    |     | gnuplot\*visual: visual name |
- name: X11_fonts
  id: complete_list_terminals#SECTION050169100000000000000
  summary: Upon initial startup, the default font is taken from the X11 resources as set in the system or user .Xdefaults file or on the command line
  description: |-
    ### X11_fonts

    Upon initial startup, the default font is taken from the X11 resources as set in the system or user .Xdefaults file or on the command line.

    Example:

        gnuplot*font: lucidasans-bold-12

    A new default font may be specified to the x11 driver from inside gnuplot using

        `set term x11 font "<fontspec>"`

    The driver first queries the X-server for a font of the exact name given. If this query fails, then it tries to interpret \<fontspec\> as "\<font\>,\<size\>,\<slant\>,\<weight\>" and to construct a full X11 font name of the form

        -*-<font>-<weight>-<s>-*-*-<size>-*-*-*-*-*-<encoding>

        <font> is the base name of the font (e.g. Times or Symbol)
        <size> is the point size (defaults to 12 if not specified)
        <s> is `i` if <slant>=="italic" `o` if <slant>=="oblique" `r` otherwise
        <weight> is `medium` or `bold` if explicitly requested, otherwise `*`
        <encoding> is set based on the current character set (see `set encoding`).

    So **set term x11 font "arial,15,italic"** will be translated to -\*-arial-\*-i-\*-\*-15-\*-\*-\*-\*-\*-iso8859-1 (assuming default encoding). The \<size\>, \<slant\>, and \<weight\> specifications are all optional. If you do not specify \<slant\> or \<weight\> then you will get whatever font variant the font server offers first. You may set a default encoding via the corresponding X11 resource. E.g.

        gnuplot*encoding: iso8859-15

    The driver also recognizes some common PostScript font names and replaces them with possible X11 or TrueType equivalents. This same sequence is used to process font requests from **set label**.

    If your gnuplot was built with configuration option –enable-x11-mbfonts, you can specify multi-byte fonts by using the prefix "mbfont:" on the font name. An additional font may be given, separated by a semicolon. Since multi-byte font encodings are interpreted according to the locale setting, you must make sure that the environmental variable LC_CTYPE is set to some appropriate locale value such as ja_JP.eucJP, ko_KR.EUC, or zh_CN.EUC.

    Example:

        set term x11 font 'mbfont:kana14;k14'
              # 'kana14' and 'k14' are Japanese X11 font aliases, and ';'
              # is the separator of font names.
        set term x11 font 'mbfont:fixed,16,r,medium'
              # <font>,<size>,<slant>,<weight> form is also usable.
        set title '(mb strings)' font 'mbfont:*-fixed-medium-r-normal--14-*'

    The same syntax applies to the default font in Xresources settings, for example,

        gnuplot*font: \
            mbfont:-misc-fixed-medium-r-normal--14-*-*-*-c-*-jisx0208.1983-0

    If gnuplot is built with –enable-x11-mbfonts, you can use two special PostScript font names 'Ryumin-Light-\*' and 'GothicBBB-Medium-\*' (standard Japanese PS fonts) without the prefix "mbfont:".
- name: X2data
  id: set_show#SECTION04029111000000000000000
  summary: The set x2data command sets data on the x2 (top) axis to timeseries (dates/times)
  belongs_to: Set-show
  description: |-
    ## X2data

    The **set x2data** command sets data on the x2 (top) axis to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.
- name: X2dtics
  id: set_show#SECTION04029112000000000000000
  summary: The set x2dtics command changes tics on the x2 (top) axis to days of the week
  belongs_to: Set-show
  description: |-
    ## X2dtics

    The **set x2dtics** command changes tics on the x2 (top) axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.
- name: X2label
  id: set_show#SECTION04029113000000000000000
  summary: The set x2label command sets the label for the x2 (top) axis
  belongs_to: Set-show
  description: |-
    ## X2label

    The **set x2label** command sets the label for the x2 (top) axis. Please see **[set xlabel](set_show#set_xlabel)**.
- name: X2mtics
  id: set_show#SECTION04029114000000000000000
  summary: The set x2mtics command changes tics on the x2 (top) axis to months of the year
  belongs_to: Set-show
  description: |-
    ## X2mtics

    The **set x2mtics** command changes tics on the x2 (top) axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.
- name: X2range
  id: set_show#SECTION04029115000000000000000
  summary: The set x2range command sets the horizontal range that will be displayed on the x2 (top) axis
  belongs_to: Set-show
  description: |-
    ## X2range

    The **set x2range** command sets the horizontal range that will be displayed on the x2 (top) axis. See **[set xrange](set_show#set_xrange)** for the full set of command options. See also **[set link](set_show#set_link)**.
- name: X2tics
  id: set_show#SECTION04029116000000000000000
  summary: The set x2tics command controls major (labeled) tics on the x2 (top) axis
  belongs_to: Set-show
  description: |-
    ## X2tics

    The **set x2tics** command controls major (labeled) tics on the x2 (top) axis. Please see **[set xtics](set_show#set_xtics)** for details.
- name: X2zeroaxis
  id: set_show#SECTION04029117000000000000000
  summary: The set x2zeroaxis command draws a line at the origin of the x2 (top) axis (y2 = 0)
  belongs_to: Set-show
  description: |-
    ## X2zeroaxis

    The **set x2zeroaxis** command draws a line at the origin of the x2 (top) axis (y2 = 0). For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.
- name: Xdata
  id: set_show#SECTION04029118000000000000000
  summary: This command controls interpretation of data on the x axis
  belongs_to: Set-show
  description: |-
    ## Xdata

    This command controls interpretation of data on the x axis. An analogous command acts on each of the other axes.

    Syntax:

        set xdata time
        show xdata

    The same syntax applies to **ydata**, **zdata**, **x2data**, **y2data** and **cbdata**.

    The **time** option signals that data represents a time/date in seconds. The current version of gnuplot stores time to a millisecond precision.

    If no option is specified, the data interpretation reverts to normal.
- name: Xdata Time
  id: set_show#SECTION04029118100000000000000
  summary: set xdata time indicates that the x coordinate represents a date or time to millisecond precision
  belongs_to: Set-show
  description: |-
    ### Time

    **set xdata time** indicates that the x coordinate represents a date or time to millisecond precision. There is an analogous command **set ydata time**.

    There are separate format mechanisms for interpretation of time data on input and output. Input data is read from a file either by using the global **timefmt** or by using the function timecolumn() as part of the plot command. These input mechanisms also apply to using time values to set an axis range. See **[set timefmt](set_show#set_timefmt)**, **[timecolumn](expressions#timecolumn)**.

    Example:

        set xdata time
        set timefmt "%d-%b-%Y"
        set xrange ["01-Jan-2013" : "31-Dec-2014"]
        plot DATA using 1:2

    or

        plot DATA using (timecolumn(1,"%d-%b-%Y")):2

    For output, i.e. tick labels along that axis or coordinates output by mousing, the function 'strftime' (type "man strftime" on unix to look it up) is used to convert from the internal time in seconds to a string representation of a date. **gnuplot** tries to figure out a reasonable format for this. You can customize the format using either **set format x** or **set xtics format**. See **[time_specifiers](set_show#time_specifiers)** for a special set of time format specifiers. See also **[time/date](time_date_data#time_date)** for more information.
- name: Xdtics
  id: set_show#SECTION04029119000000000000000
  summary: The set xdtics commands converts the x-axis tic marks to days of the week where 0=Sun and 6=Sat
  belongs_to: Set-show
  description: |-
    ## Xdtics

    The **set xdtics** commands converts the x-axis tic marks to days of the week where 0=Sun and 6=Sat. Overflows are converted modulo 7 to dates. **set noxdtics** returns the labels to their default values. Similar commands do the same things for the other axes.

    Syntax:

        set xdtics
        unset xdtics
        show xdtics

    The same syntax applies to **ydtics**, **zdtics**, **x2dtics**, **y2dtics** and **cbdtics**.

    See also the **[set format](set_show#set_format)** command.
- name: Xerrorbars
  id: xerrorbars
  summary: The xerrorbars style is only relevant to 2D data plots
  description: "# Xerrorbars\n\nThe **xerrorbars** style is only relevant to 2D data plots. **xerrorbars** is like **points**, except that a horizontal error bar is also drawn. At each point (x,y), a line is drawn from (xlow,y) to (xhigh,y) or from (x-xdelta,y) to (x+xdelta,y), depending on how many data columns are provided. The appearance of the tic mark at the ends of the bar is controlled by **set errorbars**. The basic style requires either 3 or 4 columns:\n\n    3 columns:  x  y  xdelta\n    4 columns:  x  y  xlow  xhigh\n\nAn additional input column (4th or 5th) may be used to provide information such as variable point color.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Xerrorlines
  id: xerrorlines
  summary: The xerrorlines style is only relevant to 2D data plots
  description: "# Xerrorlines\n\nThe **xerrorlines** style is only relevant to 2D data plots. **xerrorlines** is like **linespoints**, except that a horizontal error line is also drawn. At each point (x,y), a line is drawn from (xlow,y) to (xhigh,y) or from (x-xdelta,y) to (x+xdelta,y), depending on how many data columns are provided. The appearance of the tic mark at the ends of the bar is controlled by **set errorbars**. The basic style requires either 3 or 4 columns:\n\n    3 columns:  x  y  xdelta\n    4 columns:  x  y  xlow  xhigh\n\nAn additional input column (4th or 5th) may be used to provide information such as variable point color.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Xlabel
  id: set_show#SECTION04029120000000000000000
  summary: The set xlabel command sets the x axis label
  belongs_to: Set-show
  description: |-
    ## Xlabel

    The **set xlabel** command sets the x axis label. Similar commands set labels on the other axes.

    Syntax:

        set xlabel {"<label>"} {offset <offset>} {font "<font>{,<size>}"}
                   {textcolor <colorspec>} {{no}enhanced}
                   {rotate by <degrees> | rotate parallel | norotate}
        show xlabel

    The same syntax applies to **x2label**, **ylabel**, **y2label**, **zlabel** and **cblabel**.

    If \<offset\> is specified by either x,y or x,y,z the label is moved by the given offset. It may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. See **[coordinates](coordinates#coordinates)** for details. By default, the **character** coordinate system is used. For example, "**set xlabel offset -1,0**" will change only the x offset of the title, moving the label roughly one character width to the left. The size of a character depends on both the font and the terminal.

    \<font\> is used to specify the font in which the label is written; the units of the font \<size\> depend upon which terminal is used.

    **noenhanced** requests that the label text not be processed by the enhanced text mode parser, even if enhanced text mode is currently active.

    To clear a label, put no options on the command line, e.g., "**set y2label**".

    The default positions of the axis labels are as follows:

    xlabel: The x-axis label is centered below the bottom of the plot.

    ylabel: The y-axis label is centered to the left of the plot, defaulting to either horizontal or vertical orientation depending on the terminal type. The program may not reserve enough space to the left of the plot to hold long non-rotated ylabel text. You can adjust this with **set lmargin**.

    zlabel: The z-axis label is centered along the z axis and placed in the space above the grid level.

    cblabel: The color box axis label is centered along the box and placed below or to the right according to horizontal or vertical color box gradient.

    y2label: The y2-axis label is placed to the right of the y2 axis. The position is terminal-dependent in the same manner as is the y-axis label.

    x2label: The x2-axis label is placed above the plot but below the title. It is also possible to create an x2-axis label by using new-line characters to make a multi-line plot title, e.g.,

        set title "This is the title\n\nThis is the x2label"

    Note that double quotes must be used. The same font will be used for both lines, of course.

    The orientation (rotation angle) of the x, x2, y and y2 axis labels in 2D plots can be changed by specifying **rotate by \<degrees\>**. The orientation of the x and y axis labels in 3D plots defaults to horizontal but can be changed to run parallel to the axis by specifying **rotate parallel**.

    If you are not satisfied with the default position of an axis label, use **set label** instead–that command gives you much more control over where text is placed.

    Please see **[syntax](syntax#syntax)** for further information about backslash processing and the difference between single- and double-quoted strings.
- name: Xlib
  id: complete_list_terminals#SECTION050170000000000000000
  summary: The xlib terminal driver supports the X11 Windows System
  description: "## Xlib\n\nThe **xlib** terminal driver supports the X11 Windows System. It generates gnuplot_x11 commands, but sends them to the output file specified by **set output '\\<filename\\>'**. **set term x11** is equivalent to **set output \"\\|gnuplot_x11 -noevents\"; set term xlib**. **xlib** takes the same set of options as **x11**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Xmtics
  id: set_show#SECTION04029121000000000000000
  summary: The set xmtics command converts the x-axis tic marks to months of the year where 1=Jan and 12=Dec
  belongs_to: Set-show
  description: |-
    ## Xmtics

    The **set xmtics** command converts the x-axis tic marks to months of the year where 1=Jan and 12=Dec. Overflows are converted modulo 12 to months. The tics are returned to their default labels by **unset xmtics**. Similar commands perform the same duties for the other axes.

    Syntax:

        set xmtics
        unset xmtics
        show xmtics

    The same syntax applies to **x2mtics**, **ymtics**, **y2mtics**, **zmtics** and **cbmtics**.

    See also the **[set format](set_show#set_format)** command.
- name: Xrange
  id: set_show#SECTION04029122000000000000000
  summary: The set xrange command sets the horizontal range that will be displayed
  belongs_to: Set-show
  description: |-
    ## Xrange

    The **set xrange** command sets the horizontal range that will be displayed. A similar command exists for each of the other axes, as well as for the polar radius r and the parametric variables t, u, and v.

    Syntax:

        set xrange [{{<min>}:{<max>}}] {{no}reverse} {{no}writeback} {{no}extend}
                   | restore
        show xrange

    where \<min\> and \<max\> terms are constants, expressions or an asterisk to set autoscaling. If the data are time/date, you must give the range as a quoted string according to the **set timefmt** format. If \<min\> or \<max\> is omitted the current value will not be changed. See below for full autoscaling syntax. See also **[noextend](set_show#noextend)**.

    The same syntax applies to **yrange**, **zrange**, **x2range**, **y2range**, **cbrange**, **rrange**, **trange**, **urange** and **vrange**.

    See **[set link](set_show#set_link)** for options that link the ranges of x and x2, or y and y2.

    The **reverse** option reverses the direction of an autoscaled axis. For example, if the data values range from 10 to 100, it will autoscale to the equivalent of set xrange \[100:10\]. The **reverse** flag has no effect if the axis is not autoscaled. NB: This is a change introduced in version 4.7.

    Autoscaling: If \<min\> (the same applies for correspondingly to \<max\>) is an asterisk "\*" autoscaling is turned on. The range in which autoscaling is being performed may be limited by a lower bound \<lb\> or an upper bound \<ub\> or both. The syntax is

        { <lb> < } * { < <ub> }

    For example,

        0 < * < 200

    sets \<lb\> = 0 and \<ub\> = 200. With such a setting \<min\> would be autoscaled, but its final value will be between 0 and 200 (both inclusive despite the '\<' sign). If no lower or upper bound is specified, the '\<' to also be omitted. If \<ub\> is lower than \<lb\> the constraints will be turned off and full autoscaling will happen. This feature is useful to plot measured data with autoscaling but providing a limit on the range, to clip outliers, or to guarantee a minimum range that will be displayed even if the data would not need such a big range.

    The **writeback** option essentially saves the range found by **autoscale** in the buffers that would be filled by **set xrange**. This is useful if you wish to plot several functions together but have the range determined by only some of them. The **writeback** operation is performed during the **plot** execution, so it must be specified before that command. To restore, the last saved horizontal range use **set xrange restore**. For example,

        set xrange [-10:10]
        set yrange [] writeback
        plot sin(x)
        set yrange restore
        replot x/2

    results in a yrange of \[-1:1\] as found only from the range of sin(x); the \[-5:5\] range of x/2 is ignored. Executing **show yrange** after each command in the above example should help you understand what is going on.

    In 2D, **xrange** and **yrange** determine the extent of the axes, **trange** determines the range of the parametric variable in parametric mode or the range of the angle in polar mode. Similarly in parametric 3D, **xrange**, **yrange**, and **zrange** govern the axes and **urange** and **vrange** govern the parametric variables.

    In polar mode, **rrange** determines the radial range plotted. \<rmin\> acts as an additive constant to the radius, whereas \<rmax\> acts as a clip to the radius — no point with radius greater than \<rmax\> will be plotted. **xrange** and **yrange** are affected — the ranges can be set as if the graph was of r(t)-rmin, with rmin added to all the labels.

    Any range may be partially or totally autoscaled, although it may not make sense to autoscale a parametric variable unless it is plotted with data.

    Ranges may also be specified on the **plot** command line. A range given on the plot line will be used for that single **plot** command; a range given by a **set** command will be used for all subsequent plots that do not specify their own ranges. The same holds true for **splot**.
- name: Xrange Examples
  id: set_show#SECTION04029122100000000000000
  summary: Autoscaling but limit maximum xrange to -1000 to 1000, i.e
  belongs_to: Set-show
  description: |-
    ### Examples

    Examples:

    To set the xrange to the default:

        set xrange [-10:10]

    To set the yrange to increase downwards:

        set yrange [10:-10]

    To change zmax to 10 without affecting zmin (which may still be autoscaled):

        set zrange [:10]

    To autoscale xmin while leaving xmax unchanged:

        set xrange [*:]

    To autoscale xmin but keeping xmin positive:

        set xrange [0<*:]

    To autoscale x but keep minimum range of 10 to 50 (actual might be larger):

        set xrange [*<10:50<*]

    Autoscaling but limit maximum xrange to -1000 to 1000, i.e. autoscaling within \[-1000:1000\]

        set xrange [-1000<*:*<1000]

    Make sure xmin is somewhere between -200 and 100:

        set xrange [-200<*<100:]
- name: Xrange Extend
  id: set_show#SECTION04029122200000000000000
  summary: set xrange noextend is the same as set autoscale x noextend
  belongs_to: Set-show
  description: |-
    ### Extend

    **set xrange noextend** is the same as **set autoscale x noextend**. See **[noextend](set_show#noextend)**.
- name: Xtics
  id: set_show#SECTION04029123000000000000000
  summary: Fine control of the major (labeled) tics on the x axis is possible with the set xtics command
  belongs_to: Set-show
  description: |-
    ## Xtics

    Fine control of the major (labeled) tics on the x axis is possible with the **set xtics** command. The tics may be turned off with the **unset xtics** command, and may be turned on (the default state) with **set xtics**. Similar commands control the major tics on the y, z, x2 and y2 axes.

    Syntax:

        set xtics {axis | border} {{no}mirror}
                  {in | out} {scale {default | <major> {,<minor>}}}
                  {{no}rotate {by <ang>}} {offset <offset> | nooffset}
                  {left | right | center | autojustify}
                  {add}
                  {  autofreq
                   | <incr>
                   | <start>, <incr> {,<end>}
                   | ({"<label>"} <pos> {<level>} {,{"<label>"}...) }
                  {format "formatstring"} {font "name{,<size>}"} {{no}enhanced}
                  { numeric | timedate | geographic }
                  {{no}logscale}
                  { rangelimited }
                  { textcolor <colorspec> }
        unset xtics
        show xtics

    The same syntax applies to **ytics**, **ztics**, **x2tics**, **y2tics** and **cbtics**.

    **axis** or **border** tells **gnuplot** to put the tics (both the tics themselves and the accompanying labels) along the axis or the border, respectively. If the axis is very close to the border, the **axis** option will move the tic labels to outside the border. The relevant margin settings will usually be sized badly by the automatic layout algorithm in this case.

    **mirror** tells **gnuplot** to put unlabeled tics at the same positions on the opposite border. **nomirror** does what you think it does.

    **in** and **out** change the tic marks to be drawn inwards or outwards.

    With **scale**, the size of the tic marks can be adjusted. If \<minor\> is not specified, it is 0.5\*\<major\>. The default size 1.0 for major tics and 0.5 for minor tics is requested by **scale default**.

    **rotate** asks **gnuplot** to rotate the text through 90 degrees, which will be done if the terminal driver in use supports text rotation. **norotate** cancels this. **rotate by \<ang\>** asks for rotation by \<ang\> degrees, supported by some terminal types.

    The defaults are **border mirror norotate** for tics on the x and y axes, and **border nomirror norotate** for tics on the x2 and y2 axes. For the z axis, the **{axis \| border}** option is not available and the default is **nomirror**. If you do want to mirror the z-axis tics, you might want to create a bit more room for them with **set border**.

    The \<offset\> is specified by either x,y or x,y,z, and may be preceded by **first**, **second**, **graph**, **screen**, or **character** to select the coordinate system. \<offset\> is the offset of the tics texts from their default positions, while the default coordinate system is **character**. See **[coordinates](coordinates#coordinates)** for details. **nooffset** switches off the offset.

    Example:

    Move xtics more closely to the plot.

        set xtics offset 0,graph 0.05

    By default, tic labels are justified automatically depending on the axis and rotation angle to produce aesthetically pleasing results. If this is not desired, justification can be overridden with an explicit **left**, **right** or **center** keyword. **autojustify** restores the default behavior.

    **set xtics** with no options restores the default border or axis if xtics are being displayed; otherwise it has no effect. Any previously specified tic frequency or position {and labels} are retained.

    Tic positions are calculated automatically by default or if the **autofreq** option is given.

    A series of tic positions can be specified by giving either a tic interval alone, or a start point, interval, and end point (see **[xtics series](set_show#xtics_series)**).

    Individual tic positions can be specified individually by providing an explicit list of positions, where each position may have an associated text label. See **[xtics list](set_show#xtics_list)**.

    However they are specified, tics will only be plotted when in range.

    Format (or omission) of the tic labels is controlled by **set format**, unless the explicit text of a label is included in the **set xtics ("\<label\>")** form.

    Minor (unlabeled) tics can be added automatically by the **set mxtics** command, or at explicit positions by the **set xtics ("" \<pos\> 1, ...)** form.

    The appearance of the tics (line style, line width etc.) is determined by the border line (see **[set border](set_show#set_border)**), even if the tics are drawn at the axes.
- name: Xtics Geographic
  id: set_show#SECTION04029123400000000000000
  summary: set xtics geographic indicates that x-axis values are to be interpreted as a geographic coordinate measured in degrees
  belongs_to: Set-show
  description: |-
    ### Geographic

    **set xtics geographic** indicates that x-axis values are to be interpreted as a geographic coordinate measured in degrees. Use **set xtics format** or **set format x** to specify the appearance of the axis tick labels. The format specifiers for geographic data are as follows:

        %D                   = integer degrees
        %<width.precision>d  = floating point degrees
        %M                   = integer minutes
        %<width.precision>m  = floating point minutes
        %S                   = integer seconds
        %<width.precision>s  = floating point seconds
        %E                   = label with E/W instead of +/-
        %N                   = label with N/S instead of +/-

    For example, the command **set format x "%Ddeg %5.2mmin %E"** will cause x coordinate -1.51 to be labeled as **" 1deg 30.60min W"**.

    If the xtics are left in the default state (**set xtics numeric**) the coordinate will be reported as a decimal number of degrees, and **format** will be assumed to contain normal numeric format specifiers rather than the special set above.

    To output degrees/minutes/seconds in a context other than axis tics, such as placing labels on a map, you can use the relative time format specifiers %tH %tM %tS for strptime. See **[time_specifiers](set_show#time_specifiers)**, **[strptime](expressions#strptime)**.
- name: Xtics list
  id: set_show#SECTION04029123200000000000000
  summary: The explicit ("label" <pos> <level>, ...) form allows arbitrary tic positions or non-numeric tic labels
  belongs_to: Set-show
  description: |-
    ### Xtics list

    Syntax:

        set xtics {add} ("label1" <pos1> <level1>, "label2" <pos2> <level2>, ...)

    The explicit ("label" \<pos\> \<level\>, ...) form allows arbitrary tic positions or non-numeric tic labels. In this form, the tics do not need to be listed in numerical order. Each tic has a position, optionally with a label.

    The label is a string enclosed by quotes or a string-valued expression. It may contain formatting information for converting the position into its label, such as "%3f clients", or it may be the empty string "". See **[set format](set_show#set_format)** for more information. If no string is given, the default label (numerical) is used.

    An explicit tic mark has a third parameter, the level. The default is level 0, a major tic. Level 1 generates a minor tic. Labels are never printed for minor tics. Major and minor tics may be auto-generated by the program or specified explicitly by the user. Tics with level 2 and higher must be explicitly specified by the user, and take priority over auto-generated tics. The size of tics marks at each level is controlled by the command **set tics scale**.

    Examples:

        set xtics ("low" 0, "medium" 50, "high" 100)
        set xtics (1,2,4,8,16,32,64,128,256,512,1024)
        set ytics ("bottom" 0, "" 10, "top" 20)
        set ytics ("bottom" 0, "" 10 1, "top" 20)

    In the second example, all tics are labeled. In the third, only the end tics are labeled. In the fourth, the unlabeled tic is a minor tic.

    Normally if explicit tics are given, they are used instead of auto-generated tics. Conversely if you specify **set xtics auto** or the like it will erase any previously specified explicit tics. You can mix explicit and auto- generated tics by using the keyword **add**, which must appear before the tic style being added.

    Example:

        set xtics 0,.5,10
        set xtics add ("Pi" 3.14159)

    This will automatically generate tic marks every 0.5 along x, but will also add an explicit labeled tic mark at pi.
- name: Xtics logscale
  id: set_show#SECTION04029123500000000000000
  summary: If the logscale attribute is set for a tic series along a log-scaled axis, the tic interval is interpreted as a multiplicative factor rather than a constant
  belongs_to: Set-show
  description: |-
    ### Xtics logscale

    If the **logscale** attribute is set for a tic series along a log-scaled axis, the tic interval is interpreted as a multiplicative factor rather than a constant. For example:

        # generate a series of tics at y=20 y=200 y=2000 y=20000
        set log y
        set ytics 20, 10, 50000 logscale

    Note that no tic is placed at y=50000 because it is not in the series 2\*10`^`x. If the logscale property is disabled, the tic increment will be treated as an additive constant even for a log-scaled axis. For example:

        # generate a series of tics at y=20 y=40 y=60 ... y=200
        set log y
        set yrange [20:200]
        set ytics 20 nologscale

    The **logscale** attribute is set automatically by the **set log** command, so normally you do not need this keyword unless you want to force a constant tic interval as in the second example above.
- name: Xtics rangelimited
  id: set_show#SECTION04029123600000000000000
  summary: This option limits both the auto-generated axis tic labels and the corresponding plot border to the range of values actually present in the data that has been plotted
  belongs_to: Set-show
  description: |-
    ### Xtics rangelimited

    This option limits both the auto-generated axis tic labels and the corresponding plot border to the range of values actually present in the data that has been plotted. Note that this is independent of the current range limits for the plot. For example, suppose that the data in "file.dat" all lies in the range 2 \< y \< 4. Then the following commands will create a plot for which the left-hand plot border (y axis) is drawn for only this portion of the total y range, and only the axis tics in this region are generated. I.e., the plot will be scaled to the full range on y, but there will be a gap between 0 and 2 on the left border and another gap between 4 and 10. This style is sometimes referred to as a **range-frame** graph.

        set border 3
        set yrange [0:10]
        set ytics nomirror rangelimited
        plot "file.dat"
- name: Xtics series
  id: set_show#SECTION04029123100000000000000
  summary: The implicit <start>, <incr>, <end> form specifies that a series of tics will be plotted on the axis between the values <start> and <end> with an increment of <incr>. If <end> is not given, it is assumed to be infinity
  belongs_to: Set-show
  description: |-
    ### Xtics series

    Syntax:

        set xtics <incr>
        set xtics <start>, <incr>, <end>

    The implicit \<start\>, \<incr\>, \<end\> form specifies that a series of tics will be plotted on the axis between the values \<start\> and \<end\> with an increment of \<incr\>. If \<end\> is not given, it is assumed to be infinity. The increment may be negative. If neither \<start\> nor \<end\> is given, \<start\> is assumed to be negative infinity, \<end\> is assumed to be positive infinity, and the tics will be drawn at integral multiples of \<incr\>. If the axis is logarithmic, the increment will be used as a multiplicative factor.

    If you specify to a negative \<start\> or \<incr\> after a numerical value (e.g., **rotate by \<angle\>** or **offset \<offset\>**), the parser fails because it subtracts \<start\> or \<incr\> from that value. As a workaround, specify **0-\<start\>** resp. **0-\<incr\>** in that case.

    Example:

        set xtics border offset 0,0.5 -5,1,5

    Fails with 'invalid expression' at the last comma.

        set xtics border offset 0,0.5 0-5,1,5

    or

        set xtics offset 0,0.5 border -5,1,5

    Sets tics at the border, tics text with an offset of 0,0.5 characters, and sets the start, increment, and end to -5, 1, and 5, as requested.

    The **set grid** options 'front', 'back' and 'layerdefault' affect the drawing order of the xtics, too.

    Examples:

    Make tics at 0, 0.5, 1, 1.5, ..., 9.5, 10.

        set xtics 0,.5,10

    Make tics at ..., -10, -5, 0, 5, 10, ...

        set xtics 5

    Make tics at 1, 100, 1e4, 1e6, 1e8.

        set logscale x; set xtics 1,100,1e8
- name: Xtics timedata
  id: set_show#SECTION04029123300000000000000
  summary: Times and dates are stored internally as a number of seconds
  belongs_to: Set-show
  description: |-
    ### Xtics timedata

    Times and dates are stored internally as a number of seconds.

    Input: Non-numeric time and date values are converted to seconds on input using the format specifier in **timefmt**. Axis positions and range limits also may be given as quoted dates or times interpreted using **timefmt**. If the \<start\>, \<incr\>, \<end\> form is used, \<incr\> must be in seconds. Use of **timefmt** to interpret input data, range, and tic positions is triggered by **set xdata time**.

    Output: Axis tic labels are generated using a separate format specified either by **set format** or **set xtics format**. By default the usual numeric format specifiers are expected (**set xtics numeric**). Other options are geographic coordinates (**set xtics geographic**), or times or dates (**set xtics time**).

    Note: For backward compatibility with earlier gnuplot versions, the command **set xdata time** will implicitly also do **set xtics time**, and **set xdata** or **unset xdata** will implicitly reset to **set xtics numeric**. However you can change this with a later call to **set xtics**.

    Examples:

        set xdata time           # controls interpretation of input data
        set timefmt "%d/%m"      # format used to read input data
        set xtics timedate       # controls interpretation of output format
        set xtics format "%b %d" # format used for tic labels
        set xrange ["01/12":"06/12"]
        set xtics "01/12", 172800, "05/12"

        set xdata time
        set timefmt "%d/%m"
        set xtics format "%b %d" time
        set xrange ["01/12":"06/12"]
        set xtics ("01/12", "" "03/12", "05/12")

    Both of these will produce tics "Dec 1", "Dec 3", and "Dec 5", but in the second example the tic at "Dec 3" will be unlabeled.
- name: Xyerrorbars
  id: xyerrorbars
  summary: The xyerrorbars style is only relevant to 2D data plots
  description: "# Xyerrorbars\n\nThe **xyerrorbars** style is only relevant to 2D data plots. **xyerrorbars** is like **points**, except that horizontal and vertical error bars are also drawn. At each point (x,y), lines are drawn from (x,y-ydelta) to (x,y+ydelta) and from (x-xdelta,y) to (x+xdelta,y) or from (x,ylow) to (x,yhigh) and from (xlow,y) to (xhigh,y), depending upon the number of data columns provided. The appearance of the tic mark at the ends of the bar is controlled by **set errorbars**. Either 4 or 6 input columns are required.\n\n    4 columns:  x  y  xdelta  ydelta\n    6 columns:  x  y  xlow  xhigh  ylow  yhigh\n\nIf data are provided in an unsupported mixed form, the **using** filter on the **plot** command should be used to set up the appropriate form. For example, if the data are of the form (x,y,xdelta,ylow,yhigh), then you can use\n\n    plot 'data' using 1:2:($1-$3):($1+$3):4:5 with xyerrorbars\n\nAn additional input column (5th or 7th) may be used to provide variable (per-datapoint) color information.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Xyerrorlines
  id: xyerrorlines
  summary: The xyerrorlines style is only relevant to 2D data plots
  description: "# Xyerrorlines\n\nThe **xyerrorlines** style is only relevant to 2D data plots. **xyerrorlines** is like **linespoints**, except that horizontal and vertical error bars are also drawn. At each point (x,y), lines are drawn from (x,y-ydelta) to (x,y+ydelta) and from (x-xdelta,y) to (x+xdelta,y) or from (x,ylow) to (x,yhigh) and from (xlow,y) to (xhigh,y), depending upon the number of data columns provided. The appearance of the tic mark at the ends of the bar is controlled by **set errorbars**. Either 4 or 6 input columns are required.\n\n    4 columns:  x  y  xdelta  ydelta\n    6 columns:  x  y  xlow  xhigh  ylow  yhigh\n\nIf data are provided in an unsupported mixed form, the **using** filter on the **plot** command should be used to set up the appropriate form. For example, if the data are of the form (x,y,xdelta,ylow,yhigh), then you can use\n\n    plot 'data' using 1:2:($1-$3):($1+$3):4:5 with xyerrorlines\n\nAn additional input column (5th or 7th) may be used to provide variable (per-datapoint) color information.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Xyplane
  id: set_show#SECTION04029124000000000000000
  summary: The set xyplane command adjusts the position at which the xy plane is drawn in a 3D plot
  belongs_to: Set-show
  description: |-
    ## Xyplane

    The **set xyplane** command adjusts the position at which the xy plane is drawn in a 3D plot. The synonym "set ticslevel" is accepted for backwards compatibility.

    Syntax:

        set xyplane at <zvalue>
        set xyplane relative <frac>
        set ticslevel <frac>        # equivalent to set xyplane relative
        show xyplane

    The form **set xyplane relative \<frac\>** places the xy plane below the range in Z, where the distance from the xy plane to Zmin is given as a fraction of the total range in z. The default value is 0.5. Negative values are permitted, but tic labels on the three axes may overlap.

    The alternative form **set xyplane at \<zvalue\>** fixes the placement of the xy plane at a specific Z value regardless of the current z range. Thus to force the x, y, and z axes to meet at a common origin one would specify **set xyplane at 0**.

    See also **[set view](set_show#set_view)**, and **[set zeroaxis](set_show#set_zeroaxis)**.
- name: Xzeroaxis
  id: set_show#SECTION04029125000000000000000
  summary: The set xzeroaxis command draws a line at y = 0
  belongs_to: Set-show
  description: |-
    ## Xzeroaxis

    The **set xzeroaxis** command draws a line at y = 0. For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.
- name: Y2data
  id: set_show#SECTION04029126000000000000000
  summary: The set y2data command sets y2 (right-hand) axis data to timeseries (dates/times)
  belongs_to: Set-show
  description: |-
    ## Y2data

    The **set y2data** command sets y2 (right-hand) axis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.
- name: Y2dtics
  id: set_show#SECTION04029127000000000000000
  summary: The set y2dtics command changes tics on the y2 (right-hand) axis to days of the week
  belongs_to: Set-show
  description: |-
    ## Y2dtics

    The **set y2dtics** command changes tics on the y2 (right-hand) axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.
- name: Y2label
  id: set_show#SECTION04029128000000000000000
  summary: The set y2label command sets the label for the y2 (right-hand) axis
  belongs_to: Set-show
  description: |-
    ## Y2label

    The **set y2label** command sets the label for the y2 (right-hand) axis. Please see **[set xlabel](set_show#set_xlabel)**.
- name: Y2mtics
  id: set_show#SECTION04029129000000000000000
  summary: The set y2mtics command changes tics on the y2 (right-hand) axis to months of the year
  belongs_to: Set-show
  description: |-
    ## Y2mtics

    The **set y2mtics** command changes tics on the y2 (right-hand) axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.
- name: Y2range
  id: set_show#SECTION04029130000000000000000
  summary: The set y2range command sets the vertical range that will be displayed on the y2 (right) axis
  belongs_to: Set-show
  description: |-
    ## Y2range

    The **set y2range** command sets the vertical range that will be displayed on the y2 (right) axis. See **[set xrange](set_show#set_xrange)** for the full set of command options. See also **[set link](set_show#set_link)**.
- name: Y2tics
  id: set_show#SECTION04029131000000000000000
  summary: The set y2tics command controls major (labeled) tics on the y2 (right-hand) axis
  belongs_to: Set-show
  description: |-
    ## Y2tics

    The **set y2tics** command controls major (labeled) tics on the y2 (right-hand) axis. Please see **[set xtics](set_show#set_xtics)** for details.
- name: Y2zeroaxis
  id: set_show#SECTION04029132000000000000000
  summary: The set y2zeroaxis command draws a line at the origin of the y2 (right-hand) axis (x2 = 0)
  belongs_to: Set-show
  description: |-
    ## Y2zeroaxis

    The **set y2zeroaxis** command draws a line at the origin of the y2 (right-hand) axis (x2 = 0). For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.
- name: Ydata
  id: set_show#SECTION04029133000000000000000
  summary: The set ydata commands sets y-axis data to timeseries (dates/times)
  belongs_to: Set-show
  description: |-
    ## Ydata

    The **set ydata** commands sets y-axis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.
- name: Ydtics
  id: set_show#SECTION04029134000000000000000
  summary: The set ydtics command changes tics on the y axis to days of the week
  belongs_to: Set-show
  description: |-
    ## Ydtics

    The **set ydtics** command changes tics on the y axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.
- name: Yerrorbars
  id: yerrorbars
  summary: The yerrorbars (or errorbars) style is only relevant to 2D data plots
  description: "# Yerrorbars\n\nThe **yerrorbars** (or **errorbars**) style is only relevant to 2D data plots. **yerrorbars** is like **points**, except that a vertical error bar is also drawn. At each point (x,y), a line is drawn from (x,y-ydelta) to (x,y+ydelta) or from (x,ylow) to (x,yhigh), depending on how many data columns are provided. The appearance of the tic mark at the ends of the bar is controlled by **set errorbars**.\n\n    2 columns:  [implicit x] y ydelta\n    3 columns:  x  y  ydelta\n    4 columns:  x  y  ylow  yhigh\n\nAn additional input column (4th or 5th) may be used to provide information such as variable point color.\n\nSee also [errorbar demo. ](http://www.gnuplot.info/demo/mgr.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Yerrorlines
  id: yerrorlines
  summary: The yerrorlines (or errorlines) style is only relevant to 2D data plots
  description: "# Yerrorlines\n\nThe **yerrorlines** (or **errorlines**) style is only relevant to 2D data plots. **yerrorlines** is like **linespoints**, except that a vertical error line is also drawn. At each point (x,y), a line is drawn from (x,y-ydelta) to (x,y+ydelta) or from (x,ylow) to (x,yhigh), depending on how many data columns are provided. The appearance of the tic mark at the ends of the bar is controlled by **set errorbars**. Either 3 or 4 input columns are required.\n\n    3 columns:  x  y  ydelta\n    4 columns:  x  y  ylow  yhigh\n\nAn additional input column (4th or 5th) may be used to provide information such as variable point color.\n\nSee also [errorbar demo. ](http://www.gnuplot.info/demo/mgr.html)\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Ylabel
  id: set_show#SECTION04029135000000000000000
  summary: This command sets the label for the y axis
  belongs_to: Set-show
  description: |-
    ## Ylabel

    This command sets the label for the y axis. Please see **[set xlabel](set_show#set_xlabel)**.
- name: Ymtics
  id: set_show#SECTION04029136000000000000000
  summary: The set ymtics command changes tics on the y axis to months of the year
  belongs_to: Set-show
  description: |-
    ## Ymtics

    The **set ymtics** command changes tics on the y axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.
- name: Yrange
  id: set_show#SECTION04029137000000000000000
  summary: The set yrange command sets the vertical range that will be displayed on the y axis
  belongs_to: Set-show
  description: |-
    ## Yrange

    The **set yrange** command sets the vertical range that will be displayed on the y axis. Please see **[set xrange](set_show#set_xrange)** for details.
- name: Ytics
  id: set_show#SECTION04029138000000000000000
  summary: The set ytics command controls major (labeled) tics on the y axis
  belongs_to: Set-show
  description: |-
    ## Ytics

    The **set ytics** command controls major (labeled) tics on the y axis. Please see **[set xtics](set_show#set_xtics)** for details.
- name: Yzeroaxis
  id: set_show#SECTION04029139000000000000000
  summary: The set yzeroaxis command draws a line at x = 0
  belongs_to: Set-show
  description: |-
    ## Yzeroaxis

    The **set yzeroaxis** command draws a line at x = 0. For details, please see **[set zeroaxis](set_show#set_zeroaxis)**.
- name: Zdata
  id: set_show#SECTION04029140000000000000000
  summary: The set zdata command sets zaxis data to timeseries (dates/times)
  belongs_to: Set-show
  description: |-
    ## Zdata

    The **set zdata** command sets zaxis data to timeseries (dates/times). Please see **[set xdata](set_show#set_xdata)**.
- name: Zdtics
  id: set_show#SECTION04029141000000000000000
  summary: The set zdtics command changes tics on the z axis to days of the week
  belongs_to: Set-show
  description: |-
    ## Zdtics

    The **set zdtics** command changes tics on the z axis to days of the week. Please see **[set xdtics](set_show#set_xdtics)** for details.
- name: Zero
  id: set_show#SECTION04029145000000000000000
  summary: The zero value is the default threshold for values approaching 0.0
  belongs_to: Set-show
  description: |-
    ## Zero

    The **zero** value is the default threshold for values approaching 0.0.

    Syntax:

        set zero <expression>
        show zero

    **gnuplot** will not plot a point if its imaginary part is greater in magnitude than the **zero** threshold. This threshold is also used in various other parts of **gnuplot** as a (crude) numerical-error threshold. The default **zero** value is 1e-8. **zero** values larger than 1e-3 (the reciprocal of the number of pixels in a typical bitmap display) should probably be avoided, but it is not unreasonable to set **zero** to 0.0.
- name: Zeroaxis
  id: set_show#SECTION04029146000000000000000
  summary: The x axis may be drawn by set xzeroaxis and removed by unset xzeroaxis
  belongs_to: Set-show
  description: |-
    ## Zeroaxis

    The x axis may be drawn by **set xzeroaxis** and removed by **unset xzeroaxis**. Similar commands behave similarly for the y, x2, y2, and z axes. **set zeroaxis ...** (no prefix) acts on the x, y, and z axes jointly.

    Syntax:

        set {x|x2|y|y2|z}zeroaxis { {linestyle | ls <line_style>}
                                   | {linetype | lt <line_type>}
                                     {linewidth | lw <line_width>}
                                     {linecolor | lc <colorspec>}
                                     {dashtype | dt <dashtype>} }
        unset {x|x2|y|y2|z}zeroaxis
        show {x|y|z}zeroaxis

    By default, these options are off. The selected zero axis is drawn with a line of type \<line_type\>, width \<line_width\>, color \<colorspec\>, and dash type \<dashtype\> (if supported by the terminal driver currently in use), or a user-defined style \<line_style\> (see **[set style line](set_show#set_style_line)**).

    If no linetype is specified, any zero axes selected will be drawn using the axis linetype (linetype 0).

    Examples:

    To simply have the y=0 axis drawn visibly:

        set xzeroaxis

    If you want a thick line in a different color or pattern, instead:

        set xzeroaxis linetype 3 linewidth 2.5
- name: Zerrorfill
  id: zerrorfill
  summary: The zerrorfill plot style is similar to one variant of the 2D plot style filledcurves
  description: "# Zerrorfill\n\nSyntax:\n\n    splot DATA using 1:2:3:4[:5] with zerrorfill {fc|fillcolor <colorspec>}\n               {lt|linetype <n>} {<line properties>}\n\nThe **zerrorfill** plot style is similar to one variant of the 2D plot style **filledcurves**. It fills the area between two functions or data lines that are sampled at the same x and y points. It requires 4 or 5 input columns:\n\n    4 columns:  x  y  z  zdelta\n    5 columns:  x  y  z  zlow  zhigh\n\nThe area between zlow and zhigh is filled and then a line is drawn through the z values. By default both the line and the fill area use the same color, but you can change this in the splot command. The fill area properties are also affected by the global fill style; see **[set style fill](set_show#set_style_fill)**.\n\nIf there are multiple curves in the splot command each new curve may occlude all previous curves. To get proper depth sorting so that curves can only be occluded by curves closer to the viewer, use **set pm3d depthorder base**. Unfortunately this causes all the filled areas to be drawn after all of the corresponding lines of z values. In order to see both the lines and the depth-sorted fill areas you probably will need to make the fill areas partially transparent or use pattern fill rather than solid fill.\n\nThe fill area in the first two examples below is the same.\n\n    splot 'data' using 1:2:3:4 with zerrorfill fillcolor \"grey\" lt black\n    splot 'data' using 1:2:3:($3-$4):($3+$4) with zerrorfill\n    splot '+' using 1:(const):(func1($1)):(func2($1)) with zerrorfill\n    splot for [k=1:5] datafile[k] with zerrorfill lt black fc lt (k+1)\n\nThis plot style can also be used to create fence plots. See **[fenceplots](fence_plots#fenceplots)**.\n\nCopyright 1986 - 1993, 1998, 2004 Thomas Williams, Colin Kelley  \nDistributed under the [gnuplot license](https://sourceforge.net/p/gnuplot/gnuplot-main/ci/master/tree/Copyright) (rights to distribute modified versions are withheld)."
- name: Zlabel
  id: set_show#SECTION04029147000000000000000
  summary: This command sets the label for the z axis
  belongs_to: Set-show
  description: |-
    ## Zlabel

    This command sets the label for the z axis. Please see **[set xlabel](set_show#set_xlabel)**.
- name: Zmtics
  id: set_show#SECTION04029148000000000000000
  summary: The set zmtics command changes tics on the z axis to months of the year
  belongs_to: Set-show
  description: |-
    ## Zmtics

    The **set zmtics** command changes tics on the z axis to months of the year. Please see **[set xmtics](set_show#set_xmtics)** for details.
- name: Zrange
  id: set_show#SECTION04029149000000000000000
  summary: The set zrange command sets the range that will be displayed on the z axis
  belongs_to: Set-show
  description: |-
    ## Zrange

    The **set zrange** command sets the range that will be displayed on the z axis. The zrange is used only by **splot** and is ignored by **plot**. Please see **[set xrange](set_show#set_xrange)** for details.
- name: Ztics
  id: set_show#SECTION04029150000000000000000
  summary: The set ztics command controls major (labeled) tics on the z axis
  belongs_to: Set-show
  description: |-
    ## Ztics

    The **set ztics** command controls major (labeled) tics on the z axis. Please see **[set xtics](set_show#set_xtics)** for details.
- name: Zzeroaxis
  id: set_show#SECTION04029142000000000000000
  summary: The set zzeroaxis command draws a line through (x=0,y=0)
  belongs_to: Set-show
  description: |-
    ## Zzeroaxis

    The **set zzeroaxis** command draws a line through (x=0,y=0). This has no effect on 2D plots, including splot with **set view map**. For details, please see **[set zeroaxis](set_show#set_zeroaxis)** and **[set xyplane](set_show#set_xyplane)**.
